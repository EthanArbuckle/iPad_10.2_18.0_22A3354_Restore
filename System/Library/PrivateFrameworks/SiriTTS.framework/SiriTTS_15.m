void sub_1DEA736A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  void *v28;

  v28 = *(void **)(v26 - 144);
  if (v28)
  {
    *(_QWORD *)(v26 - 136) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(exception_object);
}

__n128 __Block_byref_object_copy__3866(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__3867(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void WhisperModule::~WhisperModule(WhisperModule *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1EA91D7E8;
  v2 = (void *)*((_QWORD *)this + 38);
  if (v2)
  {
    *((_QWORD *)this + 39) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 35);
  if (v3)
  {
    *((_QWORD *)this + 36) = v3;
    operator delete(v3);
  }
  Module::~Module(this);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1EA91D7E8;
  v2 = (void *)*((_QWORD *)this + 38);
  if (v2)
  {
    *((_QWORD *)this + 39) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 35);
  if (v3)
  {
    *((_QWORD *)this + 36) = v3;
    operator delete(v3);
  }
  Module::~Module(this);
  JUMPOUT(0x1DF0ED014);
}

void WhisperModule::process_data(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  char v23;
  uint64_t v24;
  int v25;
  int v26;
  int v28;
  int v29;
  uint64_t v31;
  unint64_t *v32;
  unint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  char *v42;
  unint64_t *v43;
  uint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  int *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t i;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  int *v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  unint64_t *v79;
  unint64_t v80;
  int *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t *__p;
  int *__pa;
  uint64_t v98;
  std::__shared_weak_count *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  void *v102;
  char *v103;
  uint64_t v104;
  void *v105;
  _BYTE *v106;
  _DWORD v107[14];
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  int *v112;
  uint64_t v113;
  uint64_t v114;

  if (*(_BYTE *)v5)
  {
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a1 + 280);
    v107[0] = 0;
    std::vector<float>::assign((char **)(a1 + 304), 0x14uLL, v107);
  }
  v95 = v5;
  if (*(_BYTE *)(a1 + 273) || *(_DWORD *)(v5 + 80) == 1)
  {
    v112 = 0;
    v113 = 0;
    v114 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v112, *(const void **)(a1 + 280), *(_QWORD *)(a1 + 288), (uint64_t)(*(_QWORD *)(a1 + 288) - *(_QWORD *)(a1 + 280)) >> 2);
    v52 = *(char **)(v5 + 56);
    v53 = *(char **)(v5 + 64);
    v54 = (char *)(v5 + 56);
    std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)&v112, v113, v52, v53, (v53 - v52) >> 2);
    Whisper::Whisper((Whisper *)v107, *(_DWORD *)(a1 + 276));
    Whisper::whisper(&v105, (uint64_t)v107, &v112);
    v56 = *(_QWORD *)(a1 + 280);
    v55 = *(_QWORD *)(a1 + 288);
    v57 = *(char **)(v95 + 56);
    v58 = *(_QWORD *)(v95 + 64);
    v59 = (v58 - (uint64_t)v57) >> 2;
    if ((char *)(a1 + 280) != v54)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 280), v57, v58, (v58 - (uint64_t)v57) >> 2);
    v60 = (v55 - v56) >> 2;
    v61 = (char *)v105 + 4 * v60 + 4 * (v59 >> 1);
    v103 = 0;
    v104 = 0;
    v102 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(&v102, (char *)v105 + 4 * (v60 >> 1), (uint64_t)v61, (v61 - ((_BYTE *)v105 + 4 * (v60 >> 1))) >> 2);
    v62 = *(_QWORD *)(a1 + 304);
    v63 = *(_QWORD *)(a1 + 312) - v62;
    v64 = (char *)v102;
    v65 = v103;
    if ((v103 - (_BYTE *)v102) >> 2 >= (unint64_t)(v63 >> 2))
      v66 = v63 >> 2;
    else
      v66 = (v103 - (_BYTE *)v102) >> 2;
    if (v66 >= 0x14)
      v67 = 20;
    else
      v67 = v66;
    if (v67)
    {
      for (i = 0; i != v67; ++i)
        *(float *)&v64[4 * i] = (float)((float)(1.0 - (float)((float)i / (float)(v67 - 1))) * *(float *)(v62 + 4 * i))
                              + (float)((float)((float)i / (float)(v67 - 1)) * *(float *)&v64[4 * i]);
    }
    std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(v54, v64, (uint64_t)&v65[-4 * v67], (&v65[-4 * v67] - v64) >> 2);
    std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((char *)(a1 + 304), &v103[-4 * v67], (uint64_t)v103, v67);
    v69 = a2[1];
    v100 = *a2;
    v101 = (std::__shared_weak_count *)v69;
    if (v69)
    {
      v70 = (unint64_t *)(v69 + 8);
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 72))(a1, &v100);
    v72 = v101;
    if (v101)
    {
      p_shared_owners = (unint64_t *)&v101->__shared_owners_;
      do
        v74 = __ldaxr(p_shared_owners);
      while (__stlxr(v74 - 1, p_shared_owners));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
    if (v102)
    {
      v103 = (char *)v102;
      operator delete(v102);
    }
    if (v105)
    {
      v106 = v105;
      operator delete(v105);
    }
    if (v110)
    {
      v111 = v110;
      operator delete(v110);
    }
    if (v108)
    {
      v109 = v108;
      operator delete(v108);
    }
    v75 = v112;
    if (v112)
    {
      v113 = (uint64_t)v112;
LABEL_136:
      operator delete(v75);
    }
  }
  else
  {
    v7 = *(_QWORD *)(v5 + 8);
    v6 = *(_QWORD *)(v5 + 16);
    if (v6 != v7)
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v94 = a1;
      while (1)
      {
        v13 = v7 + 184 * v12;
        v16 = *(_QWORD *)(v13 + 160);
        v14 = (_QWORD *)(v13 + 160);
        v15 = v16;
        v4 = v14 + 1;
        v17 = v14[1];
        if (v17 == v16)
          goto LABEL_59;
        v18 = 0;
        do
        {
          v19 = *(_DWORD *)(v15 + 56 * v18);
          if (v19 == 1)
          {
            v23 = 0;
LABEL_16:
            *(_BYTE *)(a1 + 272) = v23;
            goto LABEL_17;
          }
          if (v19 != 8)
            goto LABEL_17;
          v20 = v15 + 56 * v18;
          v21 = (uint64_t *)(v20 + 8);
          v22 = *(char *)(v20 + 31);
          if (v22 < 0)
          {
            v24 = v21[1];
            if (v24 == 6)
            {
              v21 = (uint64_t *)*v21;
LABEL_32:
              v28 = *(_DWORD *)v21;
              v29 = *((unsigned __int16 *)v21 + 2);
              if (v28 == 1836216174 && v29 == 27745)
              {
                v23 = *(_BYTE *)(a1 + 272);
                if (v23)
                {
                  v31 = (v12 - v11);
                  if (v10 >= v9)
                  {
                    v33 = (unint64_t *)v8;
                    v34 = ((char *)v10 - (char *)v8) >> 3;
                    v35 = v34 + 1;
                    __p = v33;
                    if ((unint64_t)(v34 + 1) >> 61)
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    v36 = (char *)v9 - (char *)v33;
                    v37 = ((char *)v9 - (char *)v33) >> 2;
                    if (v37 > v35)
                      v35 = v37;
                    if (v36 >= 0x7FFFFFFFFFFFFFF8)
                      v38 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v38 = v35;
                    if (v38)
                    {
                      if (v38 >> 61)
                        std::__throw_bad_array_new_length[abi:ne180100]();
                      v39 = v4;
                      v40 = v14;
                      v41 = v38;
                      v42 = (char *)operator new(8 * v38);
                      v14 = v40;
                      v31 = (v12 - v11);
                      a1 = v94;
                      v4 = v39;
                      v38 = v41;
                    }
                    else
                    {
                      v42 = 0;
                    }
                    v8 = (int *)&v42[8 * v34];
                    *(_QWORD *)v8 = v11 | (unint64_t)(v31 << 32);
                    v32 = (unint64_t *)(v8 + 2);
                    if (v10 == __p)
                    {
                      v43 = __p;
                    }
                    else
                    {
                      v43 = __p;
                      do
                      {
                        v44 = *--v10;
                        *((_QWORD *)v8 - 1) = v44;
                        v8 -= 2;
                      }
                      while (v10 != __p);
                    }
                    v9 = (unint64_t *)&v42[8 * v38];
                    if (v43)
                    {
                      v45 = v9;
                      v46 = v11;
                      v47 = v14;
                      v48 = v4;
                      operator delete(v43);
                      v4 = v48;
                      v14 = v47;
                      a1 = v94;
                      v9 = v45;
                      v11 = v46;
                    }
                    v5 = v95;
                  }
                  else
                  {
                    *v10 = v11 | (unint64_t)(v31 << 32);
                    v32 = v10 + 1;
                  }
                  v23 = 0;
                  v17 = *v4;
                  v15 = *v14;
                  v10 = v32;
                }
                goto LABEL_16;
              }
              goto LABEL_17;
            }
            if (v24 != 7)
              goto LABEL_17;
            v21 = (uint64_t *)*v21;
          }
          else
          {
            if (v22 == 6)
              goto LABEL_32;
            if (v22 != 7)
              goto LABEL_17;
          }
          v25 = *(_DWORD *)v21;
          v26 = *(_DWORD *)((char *)v21 + 3);
          if (v25 == 1936287863 && v26 == 1919250547)
          {
            if (*(_BYTE *)(a1 + 272))
              v11 = v11;
            else
              v11 = v12;
            v23 = 1;
            goto LABEL_16;
          }
LABEL_17:
          ++v18;
        }
        while (v18 < 0x6DB6DB6DB6DB6DB7 * ((v17 - v15) >> 3));
        v7 = *(_QWORD *)(v5 + 8);
        v6 = *(_QWORD *)(v5 + 16);
LABEL_59:
        ++v12;
        v49 = 0xD37A6F4DE9BD37A7 * ((v6 - v7) >> 3);
        if (v12 >= v49)
        {
          if (!*(_BYTE *)(a1 + 272))
          {
            v51 = (int *)v10;
            goto LABEL_110;
          }
          v50 = (v49 - v11);
          if (v10 < v9)
          {
            *v10 = v11 | (v50 << 32);
            v51 = (int *)(v10 + 1);
            goto LABEL_110;
          }
LABEL_94:
          v76 = ((char *)v10 - (char *)v8) >> 3;
          v77 = v76 + 1;
          if ((unint64_t)(v76 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          if (((char *)v9 - (char *)v8) >> 2 > v77)
            v77 = ((char *)v9 - (char *)v8) >> 2;
          if ((unint64_t)((char *)v9 - (char *)v8) >= 0x7FFFFFFFFFFFFFF8)
            v77 = 0x1FFFFFFFFFFFFFFFLL;
          if (v77)
          {
            if (v77 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v78 = (char *)operator new(8 * v77);
          }
          else
          {
            v78 = 0;
          }
          v79 = (unint64_t *)&v78[8 * v76];
          *v79 = v11 | (v50 << 32);
          v51 = (int *)(v79 + 1);
          while (v10 != (unint64_t *)v8)
          {
            v80 = *--v10;
            *--v79 = v80;
          }
          if (v8)
            operator delete(v8);
          v8 = (int *)v79;
          v5 = v95;
LABEL_110:
          if (v8 != v51)
          {
            __pa = v8;
            v81 = v8;
            do
            {
              v82 = *(_QWORD *)(v5 + 32);
              v83 = *v81;
              v84 = *(int *)(v82 + 4 * v83);
              v85 = *(int *)(v82 + 4 * ((int)v83 + v81[1] - 1));
              if ((double)*(int *)(a1 + 276) / 1000.0 * 25.0 <= (double)((int)v85 - (int)v84))
              {
                v86 = *(_QWORD *)(v5 + 56);
                v113 = 0;
                v114 = 0;
                v112 = 0;
                std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(&v112, (const void *)(v86 + 4 * v84), v86 + 4 * v85, v85 - v84);
                Whisper::Whisper((Whisper *)v107, *(_DWORD *)(a1 + 276));
                Whisper::whisper(&v105, (uint64_t)v107, &v112);
                v87 = v105;
                v4 = (_QWORD *)(v106 - (_BYTE *)v105);
                if (v106 != v105)
                {
                  memmove((void *)(*(_QWORD *)(v5 + 56) + 4 * v84), v105, (size_t)v4);
                  v87 = v105;
                }
                if (v87)
                {
                  v106 = v87;
                  operator delete(v87);
                }
                if (v110)
                {
                  v111 = v110;
                  operator delete(v110);
                }
                if (v108)
                {
                  v109 = v108;
                  operator delete(v108);
                }
                if (v112)
                {
                  v113 = (uint64_t)v112;
                  operator delete(v112);
                }
              }
              v81 += 2;
            }
            while (v81 != v51);
            v8 = __pa;
          }
          goto LABEL_126;
        }
      }
    }
    if (*(_BYTE *)(a1 + 272))
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
      LODWORD(v11) = 0;
      v50 = 0xD37A6F4DE9BD37A7 * ((v6 - v7) >> 3);
      goto LABEL_94;
    }
    v8 = 0;
LABEL_126:
    v88 = a2[1];
    v98 = *a2;
    v99 = (std::__shared_weak_count *)v88;
    if (v88)
    {
      v89 = (unint64_t *)(v88 + 8);
      do
        v90 = __ldxr(v89);
      while (__stxr(v90 + 1, v89));
    }
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)a1 + 72))(a1, &v98, v4);
    v91 = v99;
    if (v99)
    {
      v92 = (unint64_t *)&v99->__shared_owners_;
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
    if (v8)
    {
      v75 = v8;
      goto LABEL_136;
    }
  }
}

void sub_1DEA741A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;
  void *v26;

  if (__p)
    operator delete(__p);
  Whisper::~Whisper((Whisper *)&a24);
  v26 = *(void **)(v24 - 128);
  if (v26)
  {
    *(_QWORD *)(v24 - 120) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

void Whisper::~Whisper(Whisper *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
}

void DebuggableAlias::~DebuggableAlias(DebuggableAlias *this)
{
  JUMPOUT(0x1DF0ED014);
}

uint64_t DebuggableAlias::debug_command(DebuggableAlias *this, CommandHandler *a2)
{
  _QWORD *v3;
  uint64_t *v4;
  void **v5;
  std::string v7;
  void *__p[2];
  char v9;
  void **v10;

  if (!Debuggable_aliases)
  {
    v3 = (_QWORD *)operator new();
    v3[2] = 0;
    v3[1] = 0;
    *v3 = v3 + 1;
    Debuggable_aliases = (uint64_t)v3;
  }
  CommandHandler::next_word((CommandHandler *)__p, (uint64_t *)a2);
  std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(&v7, *(_QWORD **)((char *)a2 + *(_QWORD *)(*(_QWORD *)a2 - 24) + 40));
  v10 = __p;
  v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)Debuggable_aliases, (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v10);
  v5 = (void **)(v4 + 7);
  if (*((char *)v4 + 79) < 0)
    operator delete(*v5);
  *(std::string *)v5 = v7;
  if (v9 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1DEA743B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t *CommandHandler::next_word(CommandHandler *this, uint64_t *a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  return std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)this);
}

void sub_1DEA74418(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(std::string *this, _QWORD *a2)
{
  std::string::value_type *v4;
  std::string::value_type v5;
  uint64_t v6;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  while (a2 && (a2[3] != a2[4] || (*(unsigned int (**)(_QWORD *))(*a2 + 72))(a2) != -1))
  {
    v4 = (std::string::value_type *)a2[3];
    if (v4 == (std::string::value_type *)a2[4])
      v5 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
    else
      v5 = *v4;
    std::string::push_back(this, v5);
    v6 = a2[3];
    if (v6 == a2[4])
      (*(void (**)(_QWORD *))(*a2 + 80))(a2);
    else
      a2[3] = v6 + 1;
  }
}

void sub_1DEA744E4(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  __cxa_rethrow();
}

void sub_1DEA74500(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void Debuggable::register_debuggable(__int128 *a1, uint64_t a2)
{
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void *__p[2];
  char v23;

  v4 = (uint64_t *)Debuggable_commands;
  if (!Debuggable_commands)
  {
    v5 = (_QWORD *)operator new();
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    Debuggable_commands = (uint64_t)v5;
    v6 = (_QWORD *)operator new();
    v6[1] = 0;
    v6[2] = 0;
    *v6 = 0;
    Debuggables = (uint64_t)v6;
    std::string::basic_string[abi:ne180100]<0>(__p, "run");
    Debuggable::register_debuggable(__p, 0);
    if (v23 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "continue");
    Debuggable::register_debuggable(__p, 0);
    if (v23 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "alias");
    v7 = (_QWORD *)operator new();
    *v7 = &off_1EA91DD90;
    Debuggable::register_debuggable(__p, v7);
    if (v23 < 0)
      operator delete(__p[0]);
    v4 = (uint64_t *)Debuggable_commands;
  }
  v8 = v4[1];
  if (v8 >= v4[2])
  {
    v9 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v4, a1);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v4, a1);
    v9 = v8 + 24;
  }
  v4[1] = v9;
  v10 = Debuggables;
  v12 = *(_QWORD **)(Debuggables + 8);
  v11 = *(_QWORD *)(Debuggables + 16);
  if ((unint64_t)v12 >= v11)
  {
    v14 = *(_QWORD **)Debuggables;
    v15 = ((uint64_t)v12 - *(_QWORD *)Debuggables) >> 3;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v17 = v11 - (_QWORD)v14;
    if (v17 >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v19 = (char *)operator new(8 * v18);
    }
    else
    {
      v19 = 0;
    }
    v20 = &v19[8 * v15];
    *(_QWORD *)v20 = a2;
    v13 = v20 + 8;
    if (v12 != v14)
    {
      do
      {
        v21 = *--v12;
        *((_QWORD *)v20 - 1) = v21;
        v20 -= 8;
      }
      while (v12 != v14);
      v12 = *(_QWORD **)v10;
    }
    *(_QWORD *)v10 = v20;
    *(_QWORD *)(v10 + 8) = v13;
    *(_QWORD *)(v10 + 16) = &v19[8 * v18];
    if (v12)
      operator delete(v12);
  }
  else
  {
    *v12 = a2;
    v13 = v12 + 1;
  }
  *(_QWORD *)(v10 + 8) = v13;
}

void sub_1DEA74734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Debuggable::command_match(unsigned __int8 *a1, const std::string **a2, uint64_t a3)
{
  std::string::size_type v6;
  const std::string *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string::size_type size;
  int v13;
  std::string *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  BOOL v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  std::string::size_type v26;
  int v27;
  const std::string *v28;
  unsigned __int8 *v29;
  int v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  uint64_t v33;
  int v34;
  const std::string::value_type *v35;
  std::string::size_type v36;
  int v37;
  const std::string::value_type *v38;
  std::string::size_type v39;
  int v40;
  const std::string::value_type *v41;
  std::string::size_type v42;
  const std::string *v43;
  const std::string *v44;
  char v45;
  int v46;
  const std::string::value_type *v47;
  std::string::size_type v48;
  std::string __p;
  char v51;

  if ((a1[23] & 0x80u) == 0)
    v6 = a1[23];
  else
    v6 = *((_QWORD *)a1 + 1);
  v7 = *a2;
  v8 = (unsigned __int8 *)a2[1];
  if (*a2 != (const std::string *)v8)
  {
    v9 = 0xFFFFFFFFLL;
    while (1)
    {
      std::string::basic_string(&__p, v7, 0, v6, (std::allocator<char> *)&v51);
      v10 = a1[23];
      if ((v10 & 0x80u) == 0)
        v11 = a1[23];
      else
        v11 = *((_QWORD *)a1 + 1);
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v13 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __p.__r_.__value_.__l.__size_;
      if (v11 != size)
      {
        v23 = 0;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_28;
        goto LABEL_31;
      }
      v14 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((v10 & 0x80) != 0)
        break;
      if (a1[23])
      {
        v15 = v10 - 1;
        v16 = a1;
        do
        {
          v18 = *v16++;
          v17 = v18;
          v20 = v14->__r_.__value_.__s.__data_[0];
          v14 = (std::string *)((char *)v14 + 1);
          v19 = v20;
          v22 = v15-- != 0;
          v23 = v17 == v19;
        }
        while (v17 == v19 && v22);
LABEL_27:
        if ((v13 & 0x80000000) == 0)
          goto LABEL_28;
LABEL_31:
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v23)
          goto LABEL_32;
LABEL_51:
        if (++v7 == (const std::string *)v8)
        {
          if ((_DWORD)v9 != -1)
            return v9;
          goto LABEL_79;
        }
      }
      else
      {
        v23 = 1;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_31;
LABEL_28:
        if (!v23)
          goto LABEL_51;
LABEL_32:
        v24 = a1[23];
        if ((v24 & 0x80u) == 0)
          v25 = a1[23];
        else
          v25 = *((_QWORD *)a1 + 1);
        v26 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
        v27 = (char)v26;
        if ((v26 & 0x80u) != 0)
          v26 = v7->__r_.__value_.__l.__size_;
        if (v25 == v26)
        {
          if (v27 >= 0)
            v28 = v7;
          else
            v28 = (const std::string *)v7->__r_.__value_.__r.__words[0];
          if ((v24 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)a1, v28, *((_QWORD *)a1 + 1)))
            {
LABEL_74:
              if (*(char *)(a3 + 23) < 0)
              {
                **(_BYTE **)a3 = 0;
                *(_QWORD *)(a3 + 8) = 0;
              }
              else
              {
                *(_BYTE *)a3 = 0;
                *(_BYTE *)(a3 + 23) = 0;
              }
              return -1431655765 * ((unint64_t)((char *)v7 - (char *)*a2) >> 3);
            }
          }
          else
          {
            if (!a1[23])
              goto LABEL_74;
            v29 = a1;
            while (*v29 == v28->__r_.__value_.__s.__data_[0])
            {
              ++v29;
              v28 = (const std::string *)((char *)v28 + 1);
              if (!--v24)
                goto LABEL_74;
            }
          }
        }
        if ((_DWORD)v9 != -2)
        {
          if ((_DWORD)v9 == -1)
          {
            v9 = -1431655765 * ((unint64_t)((char *)v7 - (char *)*a2) >> 3);
            goto LABEL_51;
          }
          v30 = (char)a1[23];
          if (v30 >= 0)
            v31 = (const std::string::value_type *)a1;
          else
            v31 = *(const std::string::value_type **)a1;
          if (v30 >= 0)
            v32 = a1[23];
          else
            v32 = *((_QWORD *)a1 + 1);
          std::string::append((std::string *)a3, v31, v32);
          std::string::append((std::string *)a3, "', could be: ");
          v33 = (uint64_t)&(*a2)[(int)v9];
          v34 = *(char *)(v33 + 23);
          if (v34 >= 0)
            v35 = (const std::string::value_type *)&(*a2)[(int)v9];
          else
            v35 = *(const std::string::value_type **)v33;
          if (v34 >= 0)
            v36 = *(unsigned __int8 *)(v33 + 23);
          else
            v36 = *(_QWORD *)(v33 + 8);
          std::string::append((std::string *)a3, v35, v36);
        }
        std::string::append((std::string *)a3, ", ");
        v37 = SHIBYTE(v7->__r_.__value_.__r.__words[2]);
        if (v37 >= 0)
          v38 = (const std::string::value_type *)v7;
        else
          v38 = (const std::string::value_type *)v7->__r_.__value_.__r.__words[0];
        if (v37 >= 0)
          v39 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
        else
          v39 = v7->__r_.__value_.__l.__size_;
        std::string::append((std::string *)a3, v38, v39);
        ++v7;
        v9 = 4294967294;
        if (v7 == (const std::string *)v8)
          return v9;
      }
    }
    v23 = memcmp(*(const void **)a1, v14, *((_QWORD *)a1 + 1)) == 0;
    goto LABEL_27;
  }
LABEL_79:
  v40 = (char)a1[23];
  if (v40 >= 0)
    v41 = (const std::string::value_type *)a1;
  else
    v41 = *(const std::string::value_type **)a1;
  if (v40 >= 0)
    v42 = a1[23];
  else
    v42 = *((_QWORD *)a1 + 1);
  std::string::append((std::string *)a3, v41, v42);
  std::string::append((std::string *)a3, "', want one of: ");
  v43 = *a2;
  v44 = a2[1];
  if (*a2 != v44)
  {
    v45 = 0;
    do
    {
      if ((v45 & 1) != 0)
        std::string::append((std::string *)a3, ", ");
      v46 = SHIBYTE(v43->__r_.__value_.__r.__words[2]);
      if (v46 >= 0)
        v47 = (const std::string::value_type *)v43;
      else
        v47 = (const std::string::value_type *)v43->__r_.__value_.__r.__words[0];
      if (v46 >= 0)
        v48 = HIBYTE(v43->__r_.__value_.__r.__words[2]);
      else
        v48 = v43->__r_.__value_.__l.__size_;
      std::string::append((std::string *)a3, v47, v48);
      ++v43;
      v45 = 1;
    }
    while (v43 != v44);
  }
  return 0xFFFFFFFFLL;
}

void CommandHandler::~CommandHandler(CommandHandler *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;

  v2 = *((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = 0;
  if (v2)
    MEMORY[0x1DF0ECFFC](v2, 0x10C80436913F5);
  v8 = (void **)((char *)this + 536);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  v3 = MEMORY[0x1E0DE4F60];
  v4 = *MEMORY[0x1E0DE4F60];
  *((_QWORD *)this + 34) = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24) + 272) = *(_QWORD *)(v3 + 24);
  v5 = MEMORY[0x1E0DE4FB8] + 16;
  *((_QWORD *)this + 35) = MEMORY[0x1E0DE4FB8] + 16;
  if (*((char *)this + 367) < 0)
    operator delete(*((void **)this + 43));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1DF0ECF6C]((char *)this + 384);
  v6 = MEMORY[0x1E0DE4F58];
  v7 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)this = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)((char *)this + *(_QWORD *)(v7 - 24)) = *(_QWORD *)(v6 + 24);
  *((_QWORD *)this + 2) = v5;
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1DF0ECF6C]((char *)this + 120);
}

void FastSpeech2EncoderProsodyTransInference::prepare_inputs(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  void (***v9)(_QWORD, uint64_t *);
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  void *__p;
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  _QWORD v24[2];

  v4 = (std::__shared_weak_count *)a2[1];
  v24[0] = *a2;
  v24[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  FastSpeech2EncoderFeaturesInference::prepare_inputs(a1, v24);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "graph_encoder_input_style_name");
  InferenceEngine::DataTensor::build_from_1d_array<float>(*a2 + 400, &v22);
  if (v21 < 0)
    operator delete(__p);
  v9 = *(void (****)(_QWORD, uint64_t *))(a1 + 16);
  v18 = v22;
  v19 = v23;
  if (v23)
  {
    v10 = (unint64_t *)&v23->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  (**v9)(v9, &v18);
  v12 = v19;
  if (v19)
  {
    v13 = (unint64_t *)&v19->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v23;
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1DEA74D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void ModuleFactory::create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t **v6;
  std::__shared_weak_count *v7;
  __int128 *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  void *exception;
  const char *v21;
  __int128 *v22;
  std::__shared_weak_count *v23;

  v6 = *(uint64_t ***)(a1 + 8);
  v8 = *(__int128 **)a4;
  v7 = *(std::__shared_weak_count **)(a4 + 8);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (v6 + 1 == (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)v6, (const void **)a2))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a2 + 23) >= 0)
      v21 = (const char *)a2;
    else
      v21 = *(const char **)a2;
    StringFormatter::StringFormatter((StringFormatter *)&v22, "Unknown module '%s'", v21);
    MEMORY[0x1DF0EC99C](exception, &v22);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  v22 = (__int128 *)a2;
  v11 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (const void **)a2, &v22);
  v22 = v8;
  v23 = v7;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = v11[10];
  if (!v14)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t, __int128 **))(*(_QWORD *)v14 + 48))(v14, a3, &v22);
  v15 = v23;
  if (!v23)
    goto LABEL_13;
  v16 = (unint64_t *)&v23->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (!v7)
      return;
  }
  else
  {
LABEL_13:
    if (!v7)
      return;
  }
  v18 = (unint64_t *)&v7->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1DEA74F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

uint64_t *std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, __int128 **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  const void **v10;
  uint64_t *v11;
  std::string *v12;
  __int128 *v13;
  __int128 v14;
  uint64_t *v15;
  uint64_t *v16;
  _QWORD v18[2];
  char v19;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (!v5)
    goto LABEL_10;
  v7 = a1 + 1;
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v10 = (const void **)(v5 + 4);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a2, (const void **)v5 + 4))
        break;
      v5 = *v8;
      v7 = v8;
      if (!*v8)
        goto LABEL_10;
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v10, a2))
      break;
    v7 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_10;
  }
  v11 = *v7;
  if (!*v7)
  {
LABEL_10:
    v11 = (uint64_t *)operator new(0x58uLL);
    v18[0] = v11;
    v18[1] = v6;
    v19 = 0;
    v12 = (std::string *)(v11 + 4);
    v13 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
    }
    else
    {
      v14 = *v13;
      v11[6] = *((_QWORD *)v13 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v14;
    }
    v11[10] = 0;
    v19 = 1;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v8;
    *v7 = v11;
    v15 = (uint64_t *)**a1;
    v16 = v11;
    if (v15)
    {
      *a1 = v15;
      v16 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v16);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v18[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v18);
  }
  return v11;
}

void sub_1DEA750F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

ModuleFactory::ModuleFactoryImpl *ModuleFactory::ModuleFactoryImpl::ModuleFactoryImpl(ModuleFactory::ModuleFactoryImpl *this)
{
  char *v2;
  uint64_t **v3;
  uint64_t *v4;
  _QWORD *v5;
  std::string *v6;
  __int128 **v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  std::string *v12;
  __int128 **v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  _QWORD *v17;
  std::string *v18;
  __int128 **v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  _QWORD *v23;
  std::string *v24;
  __int128 **v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  _QWORD *v29;
  std::string *v30;
  __int128 **v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  _QWORD *v35;
  std::string *v36;
  __int128 **v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  _QWORD *v41;
  std::string *v42;
  __int128 **v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  _QWORD *v47;
  std::string *v48;
  __int128 **v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  _QWORD *v53;
  std::string *v54;
  __int128 **v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  _QWORD *v59;
  std::string *v60;
  __int128 **v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  _QWORD *v65;
  std::string *v66;
  __int128 **v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  _QWORD *v71;
  std::string *v72;
  __int128 **v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  _QWORD *v77;
  std::string *v78;
  __int128 **v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  _QWORD *v83;
  std::string *v84;
  __int128 **v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  _QWORD *v89;
  std::string *v90;
  __int128 **v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  _QWORD *v95;
  std::string *v96;
  __int128 **v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  _QWORD *v101;
  std::string *v102;
  __int128 **v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  _QWORD *v107;
  std::string *v108;
  __int128 **v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  _QWORD *v113;
  std::string *v114;
  __int128 **v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t *v118;
  _QWORD *v119;
  std::string *v120;
  __int128 **v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t *v124;
  _QWORD *v125;
  std::string *v126;
  __int128 **v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t *v130;
  _QWORD *v131;
  std::string *v132;
  __int128 **v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t *v136;
  _QWORD *v137;
  std::string *v138;
  __int128 **v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t *v142;
  _QWORD *v143;
  std::string *v144;
  __int128 **v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t *v148;
  _QWORD *v149;
  std::string *v150;
  __int128 **v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t *v154;
  _QWORD *v155;
  std::string *v156;
  __int128 **v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t *v160;
  _QWORD *v161;
  std::string *v162;
  __int128 **v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t *v166;
  _QWORD *v167;
  std::string *v168;
  __int128 **v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t *v172;
  _QWORD *v173;
  std::string *v174;
  __int128 **v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t *v178;
  _QWORD *v179;
  std::string *v180;
  __int128 **v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t *v184;
  _QWORD *v185;
  std::string *v186;
  __int128 **v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t *v190;
  _QWORD *v191;
  std::string *v192;
  __int128 **v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t *v196;
  _QWORD *v197;
  std::string *v198;
  __int128 **v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t *v202;
  _QWORD *v203;
  std::string *v204;
  __int128 **v205;
  uint64_t v206;
  uint64_t *v207;
  uint64_t *v208;
  _QWORD *v209;
  std::string *v210;
  __int128 **v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t *v214;
  _QWORD *v215;
  std::string *v216;
  __int128 **v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t *v220;
  _QWORD *v221;
  std::string *v222;
  __int128 **v223;
  uint64_t v224;
  uint64_t *v225;
  uint64_t *v226;
  _QWORD *v227;
  std::string *v228;
  __int128 **v229;
  uint64_t v230;
  uint64_t *v231;
  void *exception;
  std::string *v234;
  void *v235;
  std::string *v236;
  void *v237;
  std::string *v238;
  void *v239;
  std::string *v240;
  void *v241;
  std::string *v242;
  void *v243;
  std::string *v244;
  void *v245;
  std::string *v246;
  void *v247;
  std::string *v248;
  void *v249;
  std::string *v250;
  void *v251;
  std::string *v252;
  void *v253;
  std::string *v254;
  void *v255;
  std::string *v256;
  void *v257;
  std::string *v258;
  void *v259;
  std::string *v260;
  void *v261;
  std::string *v262;
  void *v263;
  std::string *v264;
  void *v265;
  std::string *v266;
  void *v267;
  std::string *v268;
  void *v269;
  std::string *v270;
  void *v271;
  std::string *v272;
  void *v273;
  std::string *v274;
  void *v275;
  std::string *v276;
  void *v277;
  std::string *v278;
  void *v279;
  std::string *v280;
  void *v281;
  std::string *v282;
  void *v283;
  std::string *v284;
  void *v285;
  std::string *v286;
  void *v287;
  std::string *v288;
  void *v289;
  std::string *v290;
  void *v291;
  std::string *v292;
  void *v293;
  std::string *v294;
  void *v295;
  std::string *v296;
  void *v297;
  std::string *v298;
  void *v299;
  std::string *v300;
  void *v301;
  std::string *v302;
  void *v303;
  std::string *v304;
  void *v305;
  std::string *v306;
  void *v307;
  std::string *v308;
  std::string __str;
  std::string v310;
  std::string v311;
  std::string __p;
  __int128 *v313[2];
  char v314;
  __int128 **v315;
  uint64_t v316;

  v316 = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 1) = 0;
  v2 = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = (char *)this + 8;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 3) = (char *)this + 32;
  v3 = (uint64_t **)((char *)this + 24);
  *((_QWORD *)this + 5) = 0;
  std::string::basic_string[abi:ne180100]<0>(v313, "nashville_adapter");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Run legacy FE");
  ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>((uint64_t **)this, (uint64_t)v313, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v314 < 0)
    operator delete(v313[0]);
  std::string::basic_string[abi:ne180100]<0>(v313, "nashville_fe");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Run legacy FE");
  ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>((uint64_t **)this, (uint64_t)v313, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v314 < 0)
    operator delete(v313[0]);
  std::string::basic_string[abi:ne180100]<0>(&v310, "gryphon_fe_adapter");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Placeholder module for fallback list to link from");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v310.__r_.__value_.__l.__data_))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v234 = &v310;
    else
      v234 = (std::string *)v310.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v313, "Module name '%s' is registered already.", (const char *)v234);
    MEMORY[0x1DF0EC99C](exception, v313);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v311 = v310;
  v313[0] = (__int128 *)&v310;
  v4 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v310.__r_.__value_.__l.__data_, v313);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v315 = 0;
  v5 = operator new(0x20uLL);
  *v5 = off_1EA92EEE0;
  v6 = (std::string *)(v5 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v6, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v5[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v315 = (__int128 **)v5;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v313, v4 + 7);
  v7 = v315;
  if (v315 == v313)
  {
    v8 = 4;
    v7 = v313;
  }
  else
  {
    if (!v315)
      goto LABEL_24;
    v8 = 5;
  }
  (*((void (**)(void))*v7 + v8))();
LABEL_24:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v313[0] = (__int128 *)&v310;
  v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v310.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v313);
  std::string::operator=((std::string *)(v9 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v310, "prompt_be");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Process prompt information");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v310.__r_.__value_.__l.__data_))
  {
    v235 = __cxa_allocate_exception(0x10uLL);
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v236 = &v310;
    else
      v236 = (std::string *)v310.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v313, "Module name '%s' is registered already.", (const char *)v236);
    MEMORY[0x1DF0EC99C](v235, v313);
    __cxa_throw(v235, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v311 = v310;
  v313[0] = (__int128 *)&v310;
  v10 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v310.__r_.__value_.__l.__data_, v313);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v315 = 0;
  v11 = operator new(0x20uLL);
  *v11 = off_1EA92E540;
  v12 = (std::string *)(v11 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v12, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v11[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v315 = (__int128 **)v11;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v313, v10 + 7);
  v13 = v315;
  if (v315 == v313)
  {
    v14 = 4;
    v13 = v313;
  }
  else
  {
    if (!v315)
      goto LABEL_47;
    v14 = 5;
  }
  (*((void (**)(void))*v13 + v14))();
LABEL_47:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v313[0] = (__int128 *)&v310;
  v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v310.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v313);
  std::string::operator=((std::string *)(v15 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v310, "unit_feature_predict");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Predict unit features");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v310.__r_.__value_.__l.__data_))
  {
    v237 = __cxa_allocate_exception(0x10uLL);
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v238 = &v310;
    else
      v238 = (std::string *)v310.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v313, "Module name '%s' is registered already.", (const char *)v238);
    MEMORY[0x1DF0EC99C](v237, v313);
    __cxa_throw(v237, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v311 = v310;
  v313[0] = (__int128 *)&v310;
  v16 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v310.__r_.__value_.__l.__data_, v313);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v315 = 0;
  v17 = operator new(0x20uLL);
  *v17 = off_1EA92F1F8;
  v18 = (std::string *)(v17 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v18, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v17[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v315 = (__int128 **)v17;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v313, v16 + 7);
  v19 = v315;
  if (v315 == v313)
  {
    v20 = 4;
    v19 = v313;
  }
  else
  {
    if (!v315)
      goto LABEL_70;
    v20 = 5;
  }
  (*((void (**)(void))*v19 + v20))();
LABEL_70:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v313[0] = (__int128 *)&v310;
  v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v310.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v313);
  std::string::operator=((std::string *)(v21 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v310, "unit_preselect");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Unit selection preselection");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v310.__r_.__value_.__l.__data_))
  {
    v239 = __cxa_allocate_exception(0x10uLL);
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v240 = &v310;
    else
      v240 = (std::string *)v310.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v313, "Module name '%s' is registered already.", (const char *)v240);
    MEMORY[0x1DF0EC99C](v239, v313);
    __cxa_throw(v239, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v311 = v310;
  v313[0] = (__int128 *)&v310;
  v22 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v310.__r_.__value_.__l.__data_, v313);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v315 = 0;
  v23 = operator new(0x20uLL);
  *v23 = off_1EA92E6F8;
  v24 = (std::string *)(v23 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v24, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v24->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v23[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v315 = (__int128 **)v23;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v313, v22 + 7);
  v25 = v315;
  if (v315 == v313)
  {
    v26 = 4;
    v25 = v313;
  }
  else
  {
    if (!v315)
      goto LABEL_93;
    v26 = 5;
  }
  (*((void (**)(void))*v25 + v26))();
LABEL_93:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v313[0] = (__int128 *)&v310;
  v27 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v310.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v313);
  std::string::operator=((std::string *)(v27 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v310, "viterbi");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Perform viterbi algorithm with given unit candidates");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v310.__r_.__value_.__l.__data_))
  {
    v241 = __cxa_allocate_exception(0x10uLL);
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v242 = &v310;
    else
      v242 = (std::string *)v310.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v313, "Module name '%s' is registered already.", (const char *)v242);
    MEMORY[0x1DF0EC99C](v241, v313);
    __cxa_throw(v241, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v311 = v310;
  v313[0] = (__int128 *)&v310;
  v28 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v310.__r_.__value_.__l.__data_, v313);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v315 = 0;
  v29 = operator new(0x20uLL);
  *v29 = off_1EA92E598;
  v30 = (std::string *)(v29 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v30, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v30->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v29[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v315 = (__int128 **)v29;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v313, v28 + 7);
  v31 = v315;
  if (v315 == v313)
  {
    v32 = 4;
    v31 = v313;
  }
  else
  {
    if (!v315)
      goto LABEL_116;
    v32 = 5;
  }
  (*((void (**)(void))*v31 + v32))();
LABEL_116:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v313[0] = (__int128 *)&v310;
  v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v310.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v313);
  std::string::operator=((std::string *)(v33 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v310, "unit_segment");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Group units with audio segment");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v310.__r_.__value_.__l.__data_))
  {
    v243 = __cxa_allocate_exception(0x10uLL);
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v244 = &v310;
    else
      v244 = (std::string *)v310.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v313, "Module name '%s' is registered already.", (const char *)v244);
    MEMORY[0x1DF0EC99C](v243, v313);
    __cxa_throw(v243, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v311 = v310;
  v313[0] = (__int128 *)&v310;
  v34 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v310.__r_.__value_.__l.__data_, v313);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v315 = 0;
  v35 = operator new(0x20uLL);
  *v35 = off_1EA92E960;
  v36 = (std::string *)(v35 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v36, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v36->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v35[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v315 = (__int128 **)v35;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v313, v34 + 7);
  v37 = v315;
  if (v315 == v313)
  {
    v38 = 4;
    v37 = v313;
  }
  else
  {
    if (!v315)
      goto LABEL_139;
    v38 = 5;
  }
  (*((void (**)(void))*v37 + v38))();
LABEL_139:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v313[0] = (__int128 *)&v310;
  v39 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v310.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v313);
  std::string::operator=((std::string *)(v39 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v310, "psola");
  std::string::basic_string[abi:ne180100]<0>(&__str, "PSOLA for changing pitch/rate/volume");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v310.__r_.__value_.__l.__data_))
  {
    v245 = __cxa_allocate_exception(0x10uLL);
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v246 = &v310;
    else
      v246 = (std::string *)v310.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v313, "Module name '%s' is registered already.", (const char *)v246);
    MEMORY[0x1DF0EC99C](v245, v313);
    __cxa_throw(v245, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v311 = v310;
  v313[0] = (__int128 *)&v310;
  v40 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v310.__r_.__value_.__l.__data_, v313);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v315 = 0;
  v41 = operator new(0x20uLL);
  *v41 = off_1EA92E490;
  v42 = (std::string *)(v41 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v42, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v42->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v41[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v315 = (__int128 **)v41;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v313, v40 + 7);
  v43 = v315;
  if (v315 == v313)
  {
    v44 = 4;
    v43 = v313;
  }
  else
  {
    if (!v315)
      goto LABEL_162;
    v44 = 5;
  }
  (*((void (**)(void))*v43 + v44))();
LABEL_162:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v313[0] = (__int128 *)&v310;
  v45 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v310.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v313);
  std::string::operator=((std::string *)(v45 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v310, "wsola");
  std::string::basic_string[abi:ne180100]<0>(&__str, "WSOLA for concatenating audio segments");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v310.__r_.__value_.__l.__data_))
  {
    v247 = __cxa_allocate_exception(0x10uLL);
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v248 = &v310;
    else
      v248 = (std::string *)v310.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v313, "Module name '%s' is registered already.", (const char *)v248);
    MEMORY[0x1DF0EC99C](v247, v313);
    __cxa_throw(v247, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v311 = v310;
  v313[0] = (__int128 *)&v310;
  v46 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v310.__r_.__value_.__l.__data_, v313);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v315 = 0;
  v47 = operator new(0x20uLL);
  *v47 = off_1EA92E4E8;
  v48 = (std::string *)(v47 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v48, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v48->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v47[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v315 = (__int128 **)v47;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v313, v46 + 7);
  v49 = v315;
  if (v315 == v313)
  {
    v50 = 4;
    v49 = v313;
  }
  else
  {
    if (!v315)
      goto LABEL_185;
    v50 = 5;
  }
  (*((void (**)(void))*v49 + v50))();
LABEL_185:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v313[0] = (__int128 *)&v310;
  v51 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v310.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v313);
  std::string::operator=((std::string *)(v51 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v310, "silence_trimming");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Trim silence at the beginning and ending");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v310.__r_.__value_.__l.__data_))
  {
    v249 = __cxa_allocate_exception(0x10uLL);
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v250 = &v310;
    else
      v250 = (std::string *)v310.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v313, "Module name '%s' is registered already.", (const char *)v250);
    MEMORY[0x1DF0EC99C](v249, v313);
    __cxa_throw(v249, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v311 = v310;
  v313[0] = (__int128 *)&v310;
  v52 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v310.__r_.__value_.__l.__data_, v313);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v315 = 0;
  v53 = operator new(0x20uLL);
  *v53 = off_1EA92EE30;
  v54 = (std::string *)(v53 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v54, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v54->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v53[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v315 = (__int128 **)v53;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v313, v52 + 7);
  v55 = v315;
  if (v315 == v313)
  {
    v56 = 4;
    v55 = v313;
  }
  else
  {
    if (!v315)
      goto LABEL_208;
    v56 = 5;
  }
  (*((void (**)(void))*v55 + v56))();
LABEL_208:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v313[0] = (__int128 *)&v310;
  v57 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v310.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v313);
  std::string::operator=((std::string *)(v57 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v310, "whisper");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Modify audio samples for whisper effect if set");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v310.__r_.__value_.__l.__data_))
  {
    v251 = __cxa_allocate_exception(0x10uLL);
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v252 = &v310;
    else
      v252 = (std::string *)v310.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v313, "Module name '%s' is registered already.", (const char *)v252);
    MEMORY[0x1DF0EC99C](v251, v313);
    __cxa_throw(v251, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v311 = v310;
  v313[0] = (__int128 *)&v310;
  v58 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v310.__r_.__value_.__l.__data_, v313);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v315 = 0;
  v59 = operator new(0x20uLL);
  *v59 = off_1EA92E5F0;
  v60 = (std::string *)(v59 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v60, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v60->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v59[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v315 = (__int128 **)v59;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v313, v58 + 7);
  v61 = v315;
  if (v315 == v313)
  {
    v62 = 4;
    v61 = v313;
  }
  else
  {
    if (!v315)
      goto LABEL_231;
    v62 = 5;
  }
  (*((void (**)(void))*v61 + v62))();
LABEL_231:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v313[0] = (__int128 *)&v310;
  v63 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v310.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v313);
  std::string::operator=((std::string *)(v63 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v310, "audio_marker");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Attach markers like WordMarker to audio");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v310.__r_.__value_.__l.__data_))
  {
    v253 = __cxa_allocate_exception(0x10uLL);
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v254 = &v310;
    else
      v254 = (std::string *)v310.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v313, "Module name '%s' is registered already.", (const char *)v254);
    MEMORY[0x1DF0EC99C](v253, v313);
    __cxa_throw(v253, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v311 = v310;
  v313[0] = (__int128 *)&v310;
  v64 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v310.__r_.__value_.__l.__data_, v313);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v315 = 0;
  v65 = operator new(0x20uLL);
  *v65 = off_1EA92E858;
  v66 = (std::string *)(v65 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v66, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v66->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v65[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v315 = (__int128 **)v65;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v313, v64 + 7);
  v67 = v315;
  if (v315 == v313)
  {
    v68 = 4;
    v67 = v313;
  }
  else
  {
    if (!v315)
      goto LABEL_254;
    v68 = 5;
  }
  (*((void (**)(void))*v67 + v68))();
LABEL_254:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v313[0] = (__int128 *)&v310;
  v69 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v310.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v313);
  std::string::operator=((std::string *)(v69 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v310, "hydra_adapter");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Adapt Hydra frontend feature to neural FE feature");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v310.__r_.__value_.__l.__data_))
  {
    v255 = __cxa_allocate_exception(0x10uLL);
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v256 = &v310;
    else
      v256 = (std::string *)v310.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v313, "Module name '%s' is registered already.", (const char *)v256);
    MEMORY[0x1DF0EC99C](v255, v313);
    __cxa_throw(v255, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v311 = v310;
  v313[0] = (__int128 *)&v310;
  v70 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v310.__r_.__value_.__l.__data_, v313);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v315 = 0;
  v71 = operator new(0x20uLL);
  *v71 = off_1EA92EA68;
  v72 = (std::string *)(v71 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v72, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v72->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v71[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v315 = (__int128 **)v71;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v313, v70 + 7);
  v73 = v315;
  if (v315 == v313)
  {
    v74 = 4;
    v73 = v313;
  }
  else
  {
    if (!v315)
      goto LABEL_277;
    v74 = 5;
  }
  (*((void (**)(void))*v73 + v74))();
LABEL_277:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v313[0] = (__int128 *)&v310;
  v75 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v310.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v313);
  std::string::operator=((std::string *)(v75 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v310, "neural_adapter");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Adapt frontend feature to neural FE feature");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v310.__r_.__value_.__l.__data_))
  {
    v257 = __cxa_allocate_exception(0x10uLL);
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v258 = &v310;
    else
      v258 = (std::string *)v310.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v313, "Module name '%s' is registered already.", (const char *)v258);
    MEMORY[0x1DF0EC99C](v257, v313);
    __cxa_throw(v257, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v311 = v310;
  v313[0] = (__int128 *)&v310;
  v76 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v310.__r_.__value_.__l.__data_, v313);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v315 = 0;
  v77 = operator new(0x20uLL);
  *v77 = off_1EA92EBC8;
  v78 = (std::string *)(v77 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v78, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v78->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v77[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v315 = (__int128 **)v77;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v313, v76 + 7);
  v79 = v315;
  if (v315 == v313)
  {
    v80 = 4;
    v79 = v313;
  }
  else
  {
    if (!v315)
      goto LABEL_300;
    v80 = 5;
  }
  (*((void (**)(void))*v79 + v80))();
LABEL_300:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v313[0] = (__int128 *)&v310;
  v81 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v310.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v313);
  std::string::operator=((std::string *)(v81 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v310, "neural_fe");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Use neural frontend");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v310.__r_.__value_.__l.__data_))
  {
    v259 = __cxa_allocate_exception(0x10uLL);
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v260 = &v310;
    else
      v260 = (std::string *)v310.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v313, "Module name '%s' is registered already.", (const char *)v260);
    MEMORY[0x1DF0EC99C](v259, v313);
    __cxa_throw(v259, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v311 = v310;
  v313[0] = (__int128 *)&v310;
  v82 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v310.__r_.__value_.__l.__data_, v313);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v315 = 0;
  v83 = operator new(0x20uLL);
  *v83 = off_1EA92E648;
  v84 = (std::string *)(v83 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v84, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v84->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v83[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v315 = (__int128 **)v83;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v313, v82 + 7);
  v85 = v315;
  if (v315 == v313)
  {
    v86 = 4;
    v85 = v313;
  }
  else
  {
    if (!v315)
      goto LABEL_323;
    v86 = 5;
  }
  (*((void (**)(void))*v85 + v86))();
LABEL_323:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v313[0] = (__int128 *)&v310;
  v87 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v310.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v313);
  std::string::operator=((std::string *)(v87 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v310, "frontend_feature_log");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Log frontend features");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v310.__r_.__value_.__l.__data_))
  {
    v261 = __cxa_allocate_exception(0x10uLL);
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v262 = &v310;
    else
      v262 = (std::string *)v310.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v313, "Module name '%s' is registered already.", (const char *)v262);
    MEMORY[0x1DF0EC99C](v261, v313);
    __cxa_throw(v261, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v311 = v310;
  v313[0] = (__int128 *)&v310;
  v88 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v310.__r_.__value_.__l.__data_, v313);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v315 = 0;
  v89 = operator new(0x20uLL);
  *v89 = off_1EA92F098;
  v90 = (std::string *)(v89 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v90, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v90->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v89[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v315 = (__int128 **)v89;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v313, v88 + 7);
  v91 = v315;
  if (v315 == v313)
  {
    v92 = 4;
    v91 = v313;
  }
  else
  {
    if (!v315)
      goto LABEL_346;
    v92 = 5;
  }
  (*((void (**)(void))*v91 + v92))();
LABEL_346:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v313[0] = (__int128 *)&v310;
  v93 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v310.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v313);
  std::string::operator=((std::string *)(v93 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v313, "audio_resampling");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Audio linear resampling module, either upsampling or downsampling");
  ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>((uint64_t **)this, (uint64_t)v313, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v314 < 0)
    operator delete(v313[0]);
  std::string::basic_string[abi:ne180100]<0>(v313, "audio_resampling_fallback");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Audio linear resampling module, either upsampling or downsampling for fallback");
  ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>((uint64_t **)this, (uint64_t)v313, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v314 < 0)
    operator delete(v313[0]);
  std::string::basic_string[abi:ne180100]<0>(&v310, "prompt_partition");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Partition frontend features with regard to prompts");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v310.__r_.__value_.__l.__data_))
  {
    v263 = __cxa_allocate_exception(0x10uLL);
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v264 = &v310;
    else
      v264 = (std::string *)v310.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v313, "Module name '%s' is registered already.", (const char *)v264);
    MEMORY[0x1DF0EC99C](v263, v313);
    __cxa_throw(v263, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v311 = v310;
  v313[0] = (__int128 *)&v310;
  v94 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v310.__r_.__value_.__l.__data_, v313);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v315 = 0;
  v95 = operator new(0x20uLL);
  *v95 = off_1EA92EDD8;
  v96 = (std::string *)(v95 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v96, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v96->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v95[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v315 = (__int128 **)v95;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v313, v94 + 7);
  v97 = v315;
  if (v315 == v313)
  {
    v98 = 4;
    v97 = v313;
  }
  else
  {
    if (!v315)
      goto LABEL_377;
    v98 = 5;
  }
  (*((void (**)(void))*v97 + v98))();
LABEL_377:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v313[0] = (__int128 *)&v310;
  v99 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v310.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v313);
  std::string::operator=((std::string *)(v99 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v310, "neural_rate_change");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Neural speech rate changer");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v310.__r_.__value_.__l.__data_))
  {
    v265 = __cxa_allocate_exception(0x10uLL);
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v266 = &v310;
    else
      v266 = (std::string *)v310.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v313, "Module name '%s' is registered already.", (const char *)v266);
    MEMORY[0x1DF0EC99C](v265, v313);
    __cxa_throw(v265, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v311 = v310;
  v313[0] = (__int128 *)&v310;
  v100 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v310.__r_.__value_.__l.__data_, v313);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v315 = 0;
  v101 = operator new(0x20uLL);
  *v101 = off_1EA92EF38;
  v102 = (std::string *)(v101 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v102, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v102->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v101[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v315 = (__int128 **)v101;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v313, v100 + 7);
  v103 = v315;
  if (v315 == v313)
  {
    v104 = 4;
    v103 = v313;
  }
  else
  {
    if (!v315)
      goto LABEL_400;
    v104 = 5;
  }
  (*((void (**)(void))*v103 + v104))();
LABEL_400:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v313[0] = (__int128 *)&v310;
  v105 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v310.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v313);
  std::string::operator=((std::string *)(v105 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v313, "waveform_rate_change");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Waveform speech rate changer");
  ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>((uint64_t **)this, (uint64_t)v313, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v314 < 0)
    operator delete(v313[0]);
  std::string::basic_string[abi:ne180100]<0>(&v310, "waveform_volume_change");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Waveform volume changer");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v310.__r_.__value_.__l.__data_))
  {
    v267 = __cxa_allocate_exception(0x10uLL);
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v268 = &v310;
    else
      v268 = (std::string *)v310.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v313, "Module name '%s' is registered already.", (const char *)v268);
    MEMORY[0x1DF0EC99C](v267, v313);
    __cxa_throw(v267, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v311 = v310;
  v313[0] = (__int128 *)&v310;
  v106 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v310.__r_.__value_.__l.__data_, v313);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v315 = 0;
  v107 = operator new(0x20uLL);
  *v107 = off_1EA92ECD0;
  v108 = (std::string *)(v107 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v108, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v108->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v107[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v315 = (__int128 **)v107;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v313, v106 + 7);
  v109 = v315;
  if (v315 == v313)
  {
    v110 = 4;
    v109 = v313;
  }
  else
  {
    if (!v315)
      goto LABEL_427;
    v110 = 5;
  }
  (*((void (**)(void))*v109 + v110))();
LABEL_427:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v313[0] = (__int128 *)&v310;
  v111 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v310.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v313);
  std::string::operator=((std::string *)(v111 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v313, "waveform_rate_change_fallback");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Waveform speech rate changer for fallback");
  ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>((uint64_t **)this, (uint64_t)v313, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v314 < 0)
    operator delete(v313[0]);
  std::string::basic_string[abi:ne180100]<0>(&v310, "parallel_neural_acoustic");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Parallel neural acoustic module");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v310.__r_.__value_.__l.__data_))
  {
    v269 = __cxa_allocate_exception(0x10uLL);
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v270 = &v310;
    else
      v270 = (std::string *)v310.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v313, "Module name '%s' is registered already.", (const char *)v270);
    MEMORY[0x1DF0EC99C](v269, v313);
    __cxa_throw(v269, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v311 = v310;
  v313[0] = (__int128 *)&v310;
  v112 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v310.__r_.__value_.__l.__data_, v313);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v315 = 0;
  v113 = operator new(0x20uLL);
  *v113 = off_1EA92F250;
  v114 = (std::string *)(v113 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v114, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v114->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v113[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v315 = (__int128 **)v113;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v313, v112 + 7);
  v115 = v315;
  if (v315 == v313)
  {
    v116 = 4;
    v115 = v313;
  }
  else
  {
    if (!v315)
      goto LABEL_454;
    v116 = 5;
  }
  (*((void (**)(void))*v115 + v116))();
LABEL_454:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v313[0] = (__int128 *)&v310;
  v117 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v310.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v313);
  std::string::operator=((std::string *)(v117 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v310, "click_detector");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Click detection module");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v310.__r_.__value_.__l.__data_))
  {
    v271 = __cxa_allocate_exception(0x10uLL);
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v272 = &v310;
    else
      v272 = (std::string *)v310.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v313, "Module name '%s' is registered already.", (const char *)v272);
    MEMORY[0x1DF0EC99C](v271, v313);
    __cxa_throw(v271, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v311 = v310;
  v313[0] = (__int128 *)&v310;
  v118 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v310.__r_.__value_.__l.__data_, v313);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v315 = 0;
  v119 = operator new(0x20uLL);
  *v119 = off_1EA92EB70;
  v120 = (std::string *)(v119 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v120, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v120->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v119[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v315 = (__int128 **)v119;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v313, v118 + 7);
  v121 = v315;
  if (v315 == v313)
  {
    v122 = 4;
    v121 = v313;
  }
  else
  {
    if (!v315)
      goto LABEL_477;
    v122 = 5;
  }
  (*((void (**)(void))*v121 + v122))();
LABEL_477:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v313[0] = (__int128 *)&v310;
  v123 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v310.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v313);
  std::string::operator=((std::string *)(v123 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v310, "phone_transform");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Transform phones");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v310.__r_.__value_.__l.__data_))
  {
    v273 = __cxa_allocate_exception(0x10uLL);
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v274 = &v310;
    else
      v274 = (std::string *)v310.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v313, "Module name '%s' is registered already.", (const char *)v274);
    MEMORY[0x1DF0EC99C](v273, v313);
    __cxa_throw(v273, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v311 = v310;
  v313[0] = (__int128 *)&v310;
  v124 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v310.__r_.__value_.__l.__data_, v313);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v315 = 0;
  v125 = operator new(0x20uLL);
  *v125 = off_1EA92EC78;
  v126 = (std::string *)(v125 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v126, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v126->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v125[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v315 = (__int128 **)v125;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v313, v124 + 7);
  v127 = v315;
  if (v315 == v313)
  {
    v128 = 4;
    v127 = v313;
  }
  else
  {
    if (!v315)
      goto LABEL_500;
    v128 = 5;
  }
  (*((void (**)(void))*v127 + v128))();
LABEL_500:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v313[0] = (__int128 *)&v310;
  v129 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v310.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v313);
  std::string::operator=((std::string *)(v129 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v310, "neural_prompt");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Handling prompts for pure neural voices");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v310.__r_.__value_.__l.__data_))
  {
    v275 = __cxa_allocate_exception(0x10uLL);
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v276 = &v310;
    else
      v276 = (std::string *)v310.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v313, "Module name '%s' is registered already.", (const char *)v276);
    MEMORY[0x1DF0EC99C](v275, v313);
    __cxa_throw(v275, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v311 = v310;
  v313[0] = (__int128 *)&v310;
  v130 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v310.__r_.__value_.__l.__data_, v313);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v315 = 0;
  v131 = operator new(0x20uLL);
  *v131 = off_1EA92EAC0;
  v132 = (std::string *)(v131 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v132, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v132->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v131[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v315 = (__int128 **)v131;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v313, v130 + 7);
  v133 = v315;
  if (v315 == v313)
  {
    v134 = 4;
    v133 = v313;
  }
  else
  {
    if (!v315)
      goto LABEL_523;
    v134 = 5;
  }
  (*((void (**)(void))*v133 + v134))();
LABEL_523:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v313[0] = (__int128 *)&v310;
  v135 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v310.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v313);
  std::string::operator=((std::string *)(v135 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v310, "word_embedding");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Word embedding");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v310.__r_.__value_.__l.__data_))
  {
    v277 = __cxa_allocate_exception(0x10uLL);
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v278 = &v310;
    else
      v278 = (std::string *)v310.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v313, "Module name '%s' is registered already.", (const char *)v278);
    MEMORY[0x1DF0EC99C](v277, v313);
    __cxa_throw(v277, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v311 = v310;
  v313[0] = (__int128 *)&v310;
  v136 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v310.__r_.__value_.__l.__data_, v313);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v315 = 0;
  v137 = operator new(0x20uLL);
  *v137 = off_1EA92EC20;
  v138 = (std::string *)(v137 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v138, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v138->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v137[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v315 = (__int128 **)v137;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v313, v136 + 7);
  v139 = v315;
  if (v315 == v313)
  {
    v140 = 4;
    v139 = v313;
  }
  else
  {
    if (!v315)
      goto LABEL_546;
    v140 = 5;
  }
  (*((void (**)(void))*v139 + v140))();
LABEL_546:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v313[0] = (__int128 *)&v310;
  v141 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v310.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v313);
  std::string::operator=((std::string *)(v141 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v310, "merge_frontend_feature");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Merge frontend features");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v310.__r_.__value_.__l.__data_))
  {
    v279 = __cxa_allocate_exception(0x10uLL);
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v280 = &v310;
    else
      v280 = (std::string *)v310.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v313, "Module name '%s' is registered already.", (const char *)v280);
    MEMORY[0x1DF0EC99C](v279, v313);
    __cxa_throw(v279, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v311 = v310;
  v313[0] = (__int128 *)&v310;
  v142 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v310.__r_.__value_.__l.__data_, v313);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v315 = 0;
  v143 = operator new(0x20uLL);
  *v143 = off_1EA92F1A0;
  v144 = (std::string *)(v143 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v144, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v144->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v143[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v315 = (__int128 **)v143;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v313, v142 + 7);
  v145 = v315;
  if (v315 == v313)
  {
    v146 = 4;
    v145 = v313;
  }
  else
  {
    if (!v315)
      goto LABEL_569;
    v146 = 5;
  }
  (*((void (**)(void))*v145 + v146))();
LABEL_569:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v313[0] = (__int128 *)&v310;
  v147 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v310.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v313);
  std::string::operator=((std::string *)(v147 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v310, "phonewise_feature");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Phonewise acoustic feature inference for prosody transfer");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v310.__r_.__value_.__l.__data_))
  {
    v281 = __cxa_allocate_exception(0x10uLL);
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v282 = &v310;
    else
      v282 = (std::string *)v310.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v313, "Module name '%s' is registered already.", (const char *)v282);
    MEMORY[0x1DF0EC99C](v281, v313);
    __cxa_throw(v281, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v311 = v310;
  v313[0] = (__int128 *)&v310;
  v148 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v310.__r_.__value_.__l.__data_, v313);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v315 = 0;
  v149 = operator new(0x20uLL);
  *v149 = off_1EA92EF90;
  v150 = (std::string *)(v149 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v150, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v150->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v149[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v315 = (__int128 **)v149;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v313, v148 + 7);
  v151 = v315;
  if (v315 == v313)
  {
    v152 = 4;
    v151 = v313;
  }
  else
  {
    if (!v315)
      goto LABEL_592;
    v152 = 5;
  }
  (*((void (**)(void))*v151 + v152))();
LABEL_592:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v313[0] = (__int128 *)&v310;
  v153 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v310.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v313);
  std::string::operator=((std::string *)(v153 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v310, "text_split");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Original text split module");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v310.__r_.__value_.__l.__data_))
  {
    v283 = __cxa_allocate_exception(0x10uLL);
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v284 = &v310;
    else
      v284 = (std::string *)v310.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v313, "Module name '%s' is registered already.", (const char *)v284);
    MEMORY[0x1DF0EC99C](v283, v313);
    __cxa_throw(v283, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v311 = v310;
  v313[0] = (__int128 *)&v310;
  v154 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v310.__r_.__value_.__l.__data_, v313);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v315 = 0;
  v155 = operator new(0x20uLL);
  *v155 = off_1EA92E750;
  v156 = (std::string *)(v155 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v156, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v156->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v155[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v315 = (__int128 **)v155;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v313, v154 + 7);
  v157 = v315;
  if (v315 == v313)
  {
    v158 = 4;
    v157 = v313;
  }
  else
  {
    if (!v315)
      goto LABEL_615;
    v158 = 5;
  }
  (*((void (**)(void))*v157 + v158))();
LABEL_615:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v313[0] = (__int128 *)&v310;
  v159 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v310.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v313);
  std::string::operator=((std::string *)(v159 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v310, "text_preprocess");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Text preprocessing module");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v310.__r_.__value_.__l.__data_))
  {
    v285 = __cxa_allocate_exception(0x10uLL);
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v286 = &v310;
    else
      v286 = (std::string *)v310.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v313, "Module name '%s' is registered already.", (const char *)v286);
    MEMORY[0x1DF0EC99C](v285, v313);
    __cxa_throw(v285, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v311 = v310;
  v313[0] = (__int128 *)&v310;
  v160 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v310.__r_.__value_.__l.__data_, v313);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v315 = 0;
  v161 = operator new(0x20uLL);
  *v161 = off_1EA92E908;
  v162 = (std::string *)(v161 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v162, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v162->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v161[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v315 = (__int128 **)v161;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v313, v160 + 7);
  v163 = v315;
  if (v315 == v313)
  {
    v164 = 4;
    v163 = v313;
  }
  else
  {
    if (!v315)
      goto LABEL_638;
    v164 = 5;
  }
  (*((void (**)(void))*v163 + v164))();
LABEL_638:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v313[0] = (__int128 *)&v310;
  v165 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v310.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v313);
  std::string::operator=((std::string *)(v165 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v310, "lpc_filter");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Linear Prediction Coefficient filter module");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v310.__r_.__value_.__l.__data_))
  {
    v287 = __cxa_allocate_exception(0x10uLL);
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v288 = &v310;
    else
      v288 = (std::string *)v310.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v313, "Module name '%s' is registered already.", (const char *)v288);
    MEMORY[0x1DF0EC99C](v287, v313);
    __cxa_throw(v287, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v311 = v310;
  v313[0] = (__int128 *)&v310;
  v166 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v310.__r_.__value_.__l.__data_, v313);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v315 = 0;
  v167 = operator new(0x20uLL);
  *v167 = off_1EA92E6A0;
  v168 = (std::string *)(v167 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v168, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v168->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v167[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v315 = (__int128 **)v167;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v313, v166 + 7);
  v169 = v315;
  if (v315 == v313)
  {
    v170 = 4;
    v169 = v313;
  }
  else
  {
    if (!v315)
      goto LABEL_661;
    v170 = 5;
  }
  (*((void (**)(void))*v169 + v170))();
LABEL_661:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v313[0] = (__int128 *)&v310;
  v171 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v310.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v313);
  std::string::operator=((std::string *)(v171 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v310, "espresso_tacotron");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Espresso tacotron module");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v310.__r_.__value_.__l.__data_))
  {
    v289 = __cxa_allocate_exception(0x10uLL);
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v290 = &v310;
    else
      v290 = (std::string *)v310.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v313, "Module name '%s' is registered already.", (const char *)v290);
    MEMORY[0x1DF0EC99C](v289, v313);
    __cxa_throw(v289, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v311 = v310;
  v313[0] = (__int128 *)&v310;
  v172 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v310.__r_.__value_.__l.__data_, v313);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v315 = 0;
  v173 = operator new(0x20uLL);
  *v173 = off_1EA92EE88;
  v174 = (std::string *)(v173 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v174, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v174->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v173[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v315 = (__int128 **)v173;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v313, v172 + 7);
  v175 = v315;
  if (v315 == v313)
  {
    v176 = 4;
    v175 = v313;
  }
  else
  {
    if (!v315)
      goto LABEL_684;
    v176 = 5;
  }
  (*((void (**)(void))*v175 + v176))();
LABEL_684:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v313[0] = (__int128 *)&v310;
  v177 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v310.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v313);
  std::string::operator=((std::string *)(v177 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v313, "espresso_wavernn");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Espresso wavernn module");
  ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>((uint64_t **)this, (uint64_t)v313, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v314 < 0)
    operator delete(v313[0]);
  std::string::basic_string[abi:ne180100]<0>(v313, "espresso_wavernn_fallback");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Espresso wavernn module for fallback");
  ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>((uint64_t **)this, (uint64_t)v313, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v314 < 0)
    operator delete(v313[0]);
  std::string::basic_string[abi:ne180100]<0>(v313, "mil_wavernn");
  std::string::basic_string[abi:ne180100]<0>(&__p, "MIL wavernn module");
  ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>((uint64_t **)this, (uint64_t)v313, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v314 < 0)
    operator delete(v313[0]);
  std::string::basic_string[abi:ne180100]<0>(v313, "mil_wavernn_fallback");
  std::string::basic_string[abi:ne180100]<0>(&__p, "MIL wavernn module for fallback");
  ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>((uint64_t **)this, (uint64_t)v313, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v314 < 0)
    operator delete(v313[0]);
  std::string::basic_string[abi:ne180100]<0>(&v310, "fastspeech2_encoder");
  std::string::basic_string[abi:ne180100]<0>(&__str, "FastSpeech2 encoder module");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v310.__r_.__value_.__l.__data_))
  {
    v291 = __cxa_allocate_exception(0x10uLL);
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v292 = &v310;
    else
      v292 = (std::string *)v310.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v313, "Module name '%s' is registered already.", (const char *)v292);
    MEMORY[0x1DF0EC99C](v291, v313);
    __cxa_throw(v291, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v311 = v310;
  v313[0] = (__int128 *)&v310;
  v178 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v310.__r_.__value_.__l.__data_, v313);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v315 = 0;
  v179 = operator new(0x20uLL);
  *v179 = off_1EA92F040;
  v180 = (std::string *)(v179 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v180, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v180->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v179[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v315 = (__int128 **)v179;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v313, v178 + 7);
  v181 = v315;
  if (v315 == v313)
  {
    v182 = 4;
    v181 = v313;
  }
  else
  {
    if (!v315)
      goto LABEL_723;
    v182 = 5;
  }
  (*((void (**)(void))*v181 + v182))();
LABEL_723:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v313[0] = (__int128 *)&v310;
  v183 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v310.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v313);
  std::string::operator=((std::string *)(v183 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v310, "fastspeech2_decoder");
  std::string::basic_string[abi:ne180100]<0>(&__str, "FastSpeech2 decoder module");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v310.__r_.__value_.__l.__data_))
  {
    v293 = __cxa_allocate_exception(0x10uLL);
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v294 = &v310;
    else
      v294 = (std::string *)v310.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v313, "Module name '%s' is registered already.", (const char *)v294);
    MEMORY[0x1DF0EC99C](v293, v313);
    __cxa_throw(v293, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v311 = v310;
  v313[0] = (__int128 *)&v310;
  v184 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v310.__r_.__value_.__l.__data_, v313);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v315 = 0;
  v185 = operator new(0x20uLL);
  *v185 = off_1EA92EFE8;
  v186 = (std::string *)(v185 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v186, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v186->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v185[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v315 = (__int128 **)v185;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v313, v184 + 7);
  v187 = v315;
  if (v315 == v313)
  {
    v188 = 4;
    v187 = v313;
  }
  else
  {
    if (!v315)
      goto LABEL_746;
    v188 = 5;
  }
  (*((void (**)(void))*v187 + v188))();
LABEL_746:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v313[0] = (__int128 *)&v310;
  v189 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v310.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v313);
  std::string::operator=((std::string *)(v189 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v313, "soundstream_decoder");
  std::string::basic_string[abi:ne180100]<0>(&__p, "ANETEC decoder module");
  ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>((uint64_t **)this, (uint64_t)v313, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v314 < 0)
    operator delete(v313[0]);
  std::string::basic_string[abi:ne180100]<0>(v313, "anetec_decoder");
  std::string::basic_string[abi:ne180100]<0>(&__p, "ANETEC decoder module");
  ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>((uint64_t **)this, (uint64_t)v313, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v314 < 0)
    operator delete(v313[0]);
  std::string::basic_string[abi:ne180100]<0>(v313, "soundstream_streaming_decoder");
  std::string::basic_string[abi:ne180100]<0>(&__p, "ANETEC streaming decoder module");
  ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>((uint64_t **)this, (uint64_t)v313, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v314 < 0)
    operator delete(v313[0]);
  std::string::basic_string[abi:ne180100]<0>(v313, "anetec_streaming_decoder");
  std::string::basic_string[abi:ne180100]<0>(&__p, "ANETEC streaming decoder module");
  ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>((uint64_t **)this, (uint64_t)v313, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v314 < 0)
    operator delete(v313[0]);
  std::string::basic_string[abi:ne180100]<0>(&v310, "soundstorm");
  std::string::basic_string[abi:ne180100]<0>(&__str, "SoundStorm module");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v310.__r_.__value_.__l.__data_))
  {
    v295 = __cxa_allocate_exception(0x10uLL);
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v296 = &v310;
    else
      v296 = (std::string *)v310.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v313, "Module name '%s' is registered already.", (const char *)v296);
    MEMORY[0x1DF0EC99C](v295, v313);
    __cxa_throw(v295, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v311 = v310;
  v313[0] = (__int128 *)&v310;
  v190 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v310.__r_.__value_.__l.__data_, v313);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v315 = 0;
  v191 = operator new(0x20uLL);
  *v191 = off_1EA92E800;
  v192 = (std::string *)(v191 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v192, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v192->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v191[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v315 = (__int128 **)v191;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v313, v190 + 7);
  v193 = v315;
  if (v315 == v313)
  {
    v194 = 4;
    v193 = v313;
  }
  else
  {
    if (!v315)
      goto LABEL_785;
    v194 = 5;
  }
  (*((void (**)(void))*v193 + v194))();
LABEL_785:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v313[0] = (__int128 *)&v310;
  v195 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v310.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v313);
  std::string::operator=((std::string *)(v195 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v310, "soundstorm_streaming");
  std::string::basic_string[abi:ne180100]<0>(&__str, "SoundStorm streaming module");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v310.__r_.__value_.__l.__data_))
  {
    v297 = __cxa_allocate_exception(0x10uLL);
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v298 = &v310;
    else
      v298 = (std::string *)v310.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v313, "Module name '%s' is registered already.", (const char *)v298);
    MEMORY[0x1DF0EC99C](v297, v313);
    __cxa_throw(v297, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v311 = v310;
  v313[0] = (__int128 *)&v310;
  v196 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v310.__r_.__value_.__l.__data_, v313);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v315 = 0;
  v197 = operator new(0x20uLL);
  *v197 = off_1EA90ABD0;
  v198 = (std::string *)(v197 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v198, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v198->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v197[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v315 = (__int128 **)v197;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v313, v196 + 7);
  v199 = v315;
  if (v315 == v313)
  {
    v200 = 4;
    v199 = v313;
  }
  else
  {
    if (!v315)
      goto LABEL_808;
    v200 = 5;
  }
  (*((void (**)(void))*v199 + v200))();
LABEL_808:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v313[0] = (__int128 *)&v310;
  v201 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v310.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v313);
  std::string::operator=((std::string *)(v201 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v310, "fastspeech2s1_decoder");
  std::string::basic_string[abi:ne180100]<0>(&__str, "FastSpeech2 S1 decoder module");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v310.__r_.__value_.__l.__data_))
  {
    v299 = __cxa_allocate_exception(0x10uLL);
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v300 = &v310;
    else
      v300 = (std::string *)v310.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v313, "Module name '%s' is registered already.", (const char *)v300);
    MEMORY[0x1DF0EC99C](v299, v313);
    __cxa_throw(v299, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v311 = v310;
  v313[0] = (__int128 *)&v310;
  v202 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v310.__r_.__value_.__l.__data_, v313);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v315 = 0;
  v203 = operator new(0x20uLL);
  *v203 = off_1EA92F148;
  v204 = (std::string *)(v203 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v204, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v204->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v203[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v315 = (__int128 **)v203;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v313, v202 + 7);
  v205 = v315;
  if (v315 == v313)
  {
    v206 = 4;
    v205 = v313;
  }
  else
  {
    if (!v315)
      goto LABEL_831;
    v206 = 5;
  }
  (*((void (**)(void))*v205 + v206))();
LABEL_831:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v313[0] = (__int128 *)&v310;
  v207 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v310.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v313);
  std::string::operator=((std::string *)(v207 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v310, "s1nar_decoder");
  std::string::basic_string[abi:ne180100]<0>(&__str, "S1NAR decoder module");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v310.__r_.__value_.__l.__data_))
  {
    v301 = __cxa_allocate_exception(0x10uLL);
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v302 = &v310;
    else
      v302 = (std::string *)v310.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v313, "Module name '%s' is registered already.", (const char *)v302);
    MEMORY[0x1DF0EC99C](v301, v313);
    __cxa_throw(v301, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v311 = v310;
  v313[0] = (__int128 *)&v310;
  v208 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v310.__r_.__value_.__l.__data_, v313);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v315 = 0;
  v209 = operator new(0x20uLL);
  *v209 = off_1EA92EB18;
  v210 = (std::string *)(v209 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v210, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v210->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v209[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v315 = (__int128 **)v209;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v313, v208 + 7);
  v211 = v315;
  if (v315 == v313)
  {
    v212 = 4;
    v211 = v313;
  }
  else
  {
    if (!v315)
      goto LABEL_854;
    v212 = 5;
  }
  (*((void (**)(void))*v211 + v212))();
LABEL_854:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v313[0] = (__int128 *)&v310;
  v213 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v310.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v313);
  std::string::operator=((std::string *)(v213 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v310, "fs2s1_encoder");
  std::string::basic_string[abi:ne180100]<0>(&__str, "FS2S1 encoder module");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v310.__r_.__value_.__l.__data_))
  {
    v303 = __cxa_allocate_exception(0x10uLL);
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v304 = &v310;
    else
      v304 = (std::string *)v310.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v313, "Module name '%s' is registered already.", (const char *)v304);
    MEMORY[0x1DF0EC99C](v303, v313);
    __cxa_throw(v303, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v311 = v310;
  v313[0] = (__int128 *)&v310;
  v214 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v310.__r_.__value_.__l.__data_, v313);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v315 = 0;
  v215 = operator new(0x20uLL);
  *v215 = off_1EA92EA10;
  v216 = (std::string *)(v215 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v216, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v216->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v215[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v315 = (__int128 **)v215;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v313, v214 + 7);
  v217 = v315;
  if (v315 == v313)
  {
    v218 = 4;
    v217 = v313;
  }
  else
  {
    if (!v315)
      goto LABEL_877;
    v218 = 5;
  }
  (*((void (**)(void))*v217 + v218))();
LABEL_877:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v313[0] = (__int128 *)&v310;
  v219 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v310.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v313);
  std::string::operator=((std::string *)(v219 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v310, "fs2s1_decoder");
  std::string::basic_string[abi:ne180100]<0>(&__str, "FS2S1 decoder module");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v310.__r_.__value_.__l.__data_))
  {
    v305 = __cxa_allocate_exception(0x10uLL);
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v306 = &v310;
    else
      v306 = (std::string *)v310.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v313, "Module name '%s' is registered already.", (const char *)v306);
    MEMORY[0x1DF0EC99C](v305, v313);
    __cxa_throw(v305, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v311 = v310;
  v313[0] = (__int128 *)&v310;
  v220 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v310.__r_.__value_.__l.__data_, v313);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v315 = 0;
  v221 = operator new(0x20uLL);
  *v221 = off_1EA92E9B8;
  v222 = (std::string *)(v221 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v222, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v222->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v221[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v315 = (__int128 **)v221;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v313, v220 + 7);
  v223 = v315;
  if (v315 == v313)
  {
    v224 = 4;
    v223 = v313;
  }
  else
  {
    if (!v315)
      goto LABEL_900;
    v224 = 5;
  }
  (*((void (**)(void))*v223 + v224))();
LABEL_900:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v313[0] = (__int128 *)&v310;
  v225 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v310.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v313);
  std::string::operator=((std::string *)(v225 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v310, "roberta_word_embedding");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Roberta word embedding module");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v310.__r_.__value_.__l.__data_))
  {
    v307 = __cxa_allocate_exception(0x10uLL);
    if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v308 = &v310;
    else
      v308 = (std::string *)v310.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)v313, "Module name '%s' is registered already.", (const char *)v308);
    MEMORY[0x1DF0EC99C](v307, v313);
    __cxa_throw(v307, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v311, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
  else
    v311 = v310;
  v313[0] = (__int128 *)&v310;
  v226 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v310.__r_.__value_.__l.__data_, v313);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
  else
    __p = v311;
  v227 = operator new(0x20uLL);
  *v227 = off_1EA90AB78;
  v228 = (std::string *)(v227 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v228, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v228->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v227[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v315 = (__int128 **)v227;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v313, v226 + 7);
  v229 = v315;
  if (v315 == v313)
  {
    v230 = 4;
    v229 = v313;
  }
  else
  {
    if (!v315)
      goto LABEL_923;
    v230 = 5;
  }
  (*((void (**)(void))*v229 + v230))();
LABEL_923:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v311.__r_.__value_.__l.__data_);
  v313[0] = (__int128 *)&v310;
  v231 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v310.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v313);
  std::string::operator=((std::string *)(v231 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v310.__r_.__value_.__l.__data_);
  return this;
}

void sub_1DEA7A068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  void *v36;
  _QWORD **v37;
  _QWORD **v38;

  operator delete(v36);
  if (a35 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a16 < 0)
    operator delete(a11);
  if (a22 < 0)
    operator delete(a17);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v35, *v38);
  std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::destroy(*v37);
  _Unwind_Resume(a1);
}

std::string *ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>(uint64_t **a1, uint64_t a2, const std::string *a3)
{
  uint64_t *v6;
  _QWORD *v7;
  std::string *v8;
  __int128 **v9;
  uint64_t v10;
  uint64_t *v11;
  void *exception;
  const char *v14;
  std::string v15;
  std::string v16;
  __int128 *v17[3];
  __int128 **v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a1 + 1 != (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)a1, (const void **)a2))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a2 + 23) >= 0)
      v14 = (const char *)a2;
    else
      v14 = *(const char **)a2;
    StringFormatter::StringFormatter((StringFormatter *)v17, "Module name '%s' is registered already.", v14);
    MEMORY[0x1DF0EC99C](exception, v17);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v15 = *(std::string *)a2;
  v17[0] = (__int128 *)a2;
  v6 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)a2, v17);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v16, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  else
    v16 = v15;
  v7 = operator new(0x20uLL);
  *v7 = off_1EA92E8B0;
  v8 = (std::string *)(v7 + 1);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&v16.__r_.__value_.__l.__data_;
    v7[3] = *((_QWORD *)&v16.__r_.__value_.__l + 2);
  }
  v18 = (__int128 **)v7;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v17, v6 + 7);
  v9 = v18;
  if (v18 == v17)
  {
    v10 = 4;
    v9 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_16;
    v10 = 5;
  }
  (*((void (**)(void))*v9 + v10))();
LABEL_16:
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  v17[0] = (__int128 *)a2;
  v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 3, (const void **)a2, (uint64_t)&std::piecewise_construct, v17);
  return std::string::operator=((std::string *)(v11 + 7), a3);
}

void sub_1DEA7B020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;

  operator delete(v29);
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(a1);
}

std::string *ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>(uint64_t **a1, uint64_t a2, const std::string *a3)
{
  uint64_t *v6;
  _QWORD *v7;
  std::string *v8;
  __int128 **v9;
  uint64_t v10;
  uint64_t *v11;
  void *exception;
  const char *v14;
  std::string v15;
  std::string v16;
  __int128 *v17[3];
  __int128 **v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a1 + 1 != (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)a1, (const void **)a2))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a2 + 23) >= 0)
      v14 = (const char *)a2;
    else
      v14 = *(const char **)a2;
    StringFormatter::StringFormatter((StringFormatter *)v17, "Module name '%s' is registered already.", v14);
    MEMORY[0x1DF0EC99C](exception, v17);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v15 = *(std::string *)a2;
  v17[0] = (__int128 *)a2;
  v6 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)a2, v17);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v16, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  else
    v16 = v15;
  v7 = operator new(0x20uLL);
  *v7 = off_1EA92ED28;
  v8 = (std::string *)(v7 + 1);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&v16.__r_.__value_.__l.__data_;
    v7[3] = *((_QWORD *)&v16.__r_.__value_.__l + 2);
  }
  v18 = (__int128 **)v7;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v17, v6 + 7);
  v9 = v18;
  if (v18 == v17)
  {
    v10 = 4;
    v9 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_16;
    v10 = 5;
  }
  (*((void (**)(void))*v9 + v10))();
LABEL_16:
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  v17[0] = (__int128 *)a2;
  v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 3, (const void **)a2, (uint64_t)&std::piecewise_construct, v17);
  return std::string::operator=((std::string *)(v11 + 7), a3);
}

void sub_1DEA7B2A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;

  operator delete(v29);
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(a1);
}

std::string *ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>(uint64_t **a1, uint64_t a2, const std::string *a3)
{
  uint64_t *v6;
  _QWORD *v7;
  std::string *v8;
  __int128 **v9;
  uint64_t v10;
  uint64_t *v11;
  void *exception;
  const char *v14;
  std::string v15;
  std::string v16;
  __int128 *v17[3];
  __int128 **v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a1 + 1 != (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)a1, (const void **)a2))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a2 + 23) >= 0)
      v14 = (const char *)a2;
    else
      v14 = *(const char **)a2;
    StringFormatter::StringFormatter((StringFormatter *)v17, "Module name '%s' is registered already.", v14);
    MEMORY[0x1DF0EC99C](exception, v17);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v15 = *(std::string *)a2;
  v17[0] = (__int128 *)a2;
  v6 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)a2, v17);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v16, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  else
    v16 = v15;
  v7 = operator new(0x20uLL);
  *v7 = off_1EA92F0F0;
  v8 = (std::string *)(v7 + 1);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&v16.__r_.__value_.__l.__data_;
    v7[3] = *((_QWORD *)&v16.__r_.__value_.__l + 2);
  }
  v18 = (__int128 **)v7;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v17, v6 + 7);
  v9 = v18;
  if (v18 == v17)
  {
    v10 = 4;
    v9 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_16;
    v10 = 5;
  }
  (*((void (**)(void))*v9 + v10))();
LABEL_16:
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  v17[0] = (__int128 *)a2;
  v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 3, (const void **)a2, (uint64_t)&std::piecewise_construct, v17);
  return std::string::operator=((std::string *)(v11 + 7), a3);
}

void sub_1DEA7B530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;

  operator delete(v29);
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(a1);
}

std::string *ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>(uint64_t **a1, uint64_t a2, const std::string *a3)
{
  uint64_t *v6;
  _QWORD *v7;
  std::string *v8;
  __int128 **v9;
  uint64_t v10;
  uint64_t *v11;
  void *exception;
  const char *v14;
  std::string v15;
  std::string v16;
  __int128 *v17[3];
  __int128 **v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a1 + 1 != (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)a1, (const void **)a2))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a2 + 23) >= 0)
      v14 = (const char *)a2;
    else
      v14 = *(const char **)a2;
    StringFormatter::StringFormatter((StringFormatter *)v17, "Module name '%s' is registered already.", v14);
    MEMORY[0x1DF0EC99C](exception, v17);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v15 = *(std::string *)a2;
  v17[0] = (__int128 *)a2;
  v6 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)a2, v17);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v16, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  else
    v16 = v15;
  v7 = operator new(0x20uLL);
  *v7 = off_1EA92ED80;
  v8 = (std::string *)(v7 + 1);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&v16.__r_.__value_.__l.__data_;
    v7[3] = *((_QWORD *)&v16.__r_.__value_.__l + 2);
  }
  v18 = (__int128 **)v7;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v17, v6 + 7);
  v9 = v18;
  if (v18 == v17)
  {
    v10 = 4;
    v9 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_16;
    v10 = 5;
  }
  (*((void (**)(void))*v9 + v10))();
LABEL_16:
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  v17[0] = (__int128 *)a2;
  v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 3, (const void **)a2, (uint64_t)&std::piecewise_construct, v17);
  return std::string::operator=((std::string *)(v11 + 7), a3);
}

void sub_1DEA7B7B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;

  operator delete(v29);
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(a1);
}

std::string *ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>(uint64_t **a1, uint64_t a2, const std::string *a3)
{
  uint64_t *v6;
  _QWORD *v7;
  std::string *v8;
  __int128 **v9;
  uint64_t v10;
  uint64_t *v11;
  void *exception;
  const char *v14;
  std::string v15;
  std::string v16;
  __int128 *v17[3];
  __int128 **v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a1 + 1 != (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)a1, (const void **)a2))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a2 + 23) >= 0)
      v14 = (const char *)a2;
    else
      v14 = *(const char **)a2;
    StringFormatter::StringFormatter((StringFormatter *)v17, "Module name '%s' is registered already.", v14);
    MEMORY[0x1DF0EC99C](exception, v17);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v15 = *(std::string *)a2;
  v17[0] = (__int128 *)a2;
  v6 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)a2, v17);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v16, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  else
    v16 = v15;
  v7 = operator new(0x20uLL);
  *v7 = off_1EA92E7A8;
  v8 = (std::string *)(v7 + 1);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&v16.__r_.__value_.__l.__data_;
    v7[3] = *((_QWORD *)&v16.__r_.__value_.__l + 2);
  }
  v18 = (__int128 **)v7;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v17, v6 + 7);
  v9 = v18;
  if (v18 == v17)
  {
    v10 = 4;
    v9 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_16;
    v10 = 5;
  }
  (*((void (**)(void))*v9 + v10))();
LABEL_16:
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  v17[0] = (__int128 *)a2;
  v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 3, (const void **)a2, (uint64_t)&std::piecewise_construct, v17);
  return std::string::operator=((std::string *)(v11 + 7), a3);
}

void sub_1DEA7BA40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;

  operator delete(v29);
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(a1);
}

std::string *ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>(uint64_t **a1, uint64_t a2, const std::string *a3)
{
  uint64_t *v6;
  _QWORD *v7;
  std::string *v8;
  __int128 **v9;
  uint64_t v10;
  uint64_t *v11;
  void *exception;
  const char *v14;
  std::string v15;
  std::string v16;
  __int128 *v17[3];
  __int128 **v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a1 + 1 != (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)a1, (const void **)a2))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a2 + 23) >= 0)
      v14 = (const char *)a2;
    else
      v14 = *(const char **)a2;
    StringFormatter::StringFormatter((StringFormatter *)v17, "Module name '%s' is registered already.", v14);
    MEMORY[0x1DF0EC99C](exception, v17);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v15 = *(std::string *)a2;
  v17[0] = (__int128 *)a2;
  v6 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)a2, v17);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v16, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  else
    v16 = v15;
  v7 = operator new(0x20uLL);
  *v7 = off_1EA90AB20;
  v8 = (std::string *)(v7 + 1);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&v16.__r_.__value_.__l.__data_;
    v7[3] = *((_QWORD *)&v16.__r_.__value_.__l + 2);
  }
  v18 = (__int128 **)v7;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v17, v6 + 7);
  v9 = v18;
  if (v18 == v17)
  {
    v10 = 4;
    v9 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_16;
    v10 = 5;
  }
  (*((void (**)(void))*v9 + v10))();
LABEL_16:
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  v17[0] = (__int128 *)a2;
  v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 3, (const void **)a2, (uint64_t)&std::piecewise_construct, v17);
  return std::string::operator=((std::string *)(v11 + 7), a3);
}

void sub_1DEA7BCC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;

  operator delete(v29);
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(a1);
}

std::string *ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>(uint64_t **a1, uint64_t a2, const std::string *a3)
{
  uint64_t *v6;
  _QWORD *v7;
  std::string *v8;
  __int128 **v9;
  uint64_t v10;
  uint64_t *v11;
  void *exception;
  const char *v14;
  std::string v15;
  std::string v16;
  __int128 *v17[3];
  __int128 **v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a1 + 1 != (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)a1, (const void **)a2))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a2 + 23) >= 0)
      v14 = (const char *)a2;
    else
      v14 = *(const char **)a2;
    StringFormatter::StringFormatter((StringFormatter *)v17, "Module name '%s' is registered already.", v14);
    MEMORY[0x1DF0EC99C](exception, v17);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v15 = *(std::string *)a2;
  v17[0] = (__int128 *)a2;
  v6 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)a2, v17);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v16, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  else
    v16 = v15;
  v7 = operator new(0x20uLL);
  *v7 = off_1EA90AC28;
  v8 = (std::string *)(v7 + 1);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&v16.__r_.__value_.__l.__data_;
    v7[3] = *((_QWORD *)&v16.__r_.__value_.__l + 2);
  }
  v18 = (__int128 **)v7;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v17, v6 + 7);
  v9 = v18;
  if (v18 == v17)
  {
    v10 = 4;
    v9 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_16;
    v10 = 5;
  }
  (*((void (**)(void))*v9 + v10))();
LABEL_16:
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  v17[0] = (__int128 *)a2;
  v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 3, (const void **)a2, (uint64_t)&std::piecewise_construct, v17);
  return std::string::operator=((std::string *)(v11 + 7), a3);
}

void sub_1DEA7BF50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;

  operator delete(v29);
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<std::shared_ptr<PersistentModule> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

_QWORD *std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1DEA7C178(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<RobertaWordEmbModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<RobertaWordEmbModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA90AB78;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<RobertaWordEmbModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<RobertaWordEmbModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA90AB78;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<RobertaWordEmbModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<RobertaWordEmbModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA90AB78;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA7C26C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<RobertaWordEmbModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<RobertaWordEmbModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA90AB78;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<RobertaWordEmbModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<RobertaWordEmbModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<RobertaWordEmbModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<RobertaWordEmbModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<RobertaWordEmbModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<RobertaWordEmbModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  const char *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  std::__shared_weak_count *v30;
  _QWORD *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::string *p_p;
  int data;
  int v40;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  __int128 v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  _QWORD *v84;
  NSObject *v85;
  _QWORD *v86;
  std::chrono::steady_clock::time_point v87;
  std::chrono::steady_clock::time_point v88;
  const char *v89;
  unint64_t *v90;
  unint64_t v91;
  __n128 result;
  void *v93;
  std::string *v94;
  void *exception;
  __n128 *v96;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  unint64_t v98;
  __int128 v100;
  void *v101;
  uint64_t *v102;
  char v103;
  _BYTE v104[8];
  uint64_t *v105;
  char v106[8];
  uint64_t *v107;
  std::string __p;
  uint64_t v109;
  std::__shared_weak_count *v110;
  __int128 v111;
  _BYTE buf[12];
  __int16 v113;
  double v114;
  char v115;
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  v100 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v7 = operator new(0x190uLL);
  v8 = (unint64_t)v7;
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_1EA90AF78;
  v9 = v7 + 3;
  if (*((_QWORD *)&v100 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v111 = v100;
    v12 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  else
  {
    v111 = (unint64_t)v100;
  }
  Module::Module((uint64_t)(v7 + 3), a2, (uint64_t *)&v111);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v111 + 1);
  if (*((_QWORD *)&v111 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  rep = v6.__d_.__rep_;
  *(_QWORD *)(v8 + 24) = &off_1EA90A670;
  *(_BYTE *)(v8 + 296) = 0;
  *(_QWORD *)(v8 + 304) = 850045863;
  *(_QWORD *)(v8 + 392) = 0;
  *(_OWORD *)(v8 + 312) = 0u;
  *(_OWORD *)(v8 + 328) = 0u;
  *(_OWORD *)(v8 + 344) = 0u;
  *(_OWORD *)(v8 + 360) = 0u;
  *(_OWORD *)(v8 + 369) = 0u;
  v98 = (unint64_t)v9;
  SharedObjectPool::get<VoiceConfig>(&v109, (__int128 **)v100);
  v17 = v109;
  v18 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "model_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v18, &__p);
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v17 + 40))(buf, v17, 1920427373, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  InferenceEngine::Utils::read_json_from_file(buf, (uint64_t)v106);
  std::string::basic_string[abi:ne180100]<0>(&__p, "model_parameters");
  LOBYTE(v101) = 0;
  v102 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>(v106, (const void **)&__p.__r_.__value_.__l.__data_, (unsigned __int8 *)&v101, (uint64_t)v104);
  v19 = *(unsigned __int8 *)(v8 + 384);
  *(_BYTE *)(v8 + 384) = v104[0];
  v104[0] = v19;
  v20 = *(uint64_t **)(v8 + 392);
  *(_QWORD *)(v8 + 392) = v105;
  v105 = v20;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v105, v19);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v102, v101);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v101, "model_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("default", a2, (const void **)&v101, &__p);
  if (v103 < 0)
    operator delete(v101);
  v21 = (const char *)(v8 + 208);
  if (*((_QWORD *)&v100 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = *(std::__shared_weak_count **)(v100 + 24);
  v96 = a4;
  if (v24 && (v25 = std::__shared_weak_count::lock(v24)) != 0)
  {
    v26 = v25;
    v27 = *(_QWORD *)(v100 + 16);
    if (v27
      && (v28 = v27 + 8,
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v27 + 8), (unsigned __int8 *)(v8 + 208))))
    {
      v101 = (void *)(v8 + 208);
      v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v28, (unsigned __int8 *)(v8 + 208), (__int128 **)&v101);
      v31 = (_QWORD *)*((_QWORD *)v29 + 5);
      v30 = (std::__shared_weak_count *)*((_QWORD *)v29 + 6);
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v33 = __ldxr(p_shared_owners);
        while (__stxr(v33 + 1, p_shared_owners));
      }
    }
    else
    {
      v30 = 0;
      v31 = 0;
    }
    v34 = (unint64_t *)&v26->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  else
  {
    v30 = 0;
    v31 = 0;
  }
  if (*((_QWORD *)&v100 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v100 + 1) + 16))(*((_QWORD *)&v100 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v100 + 1));
    }
  }
  if (!v31)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(v8 + 231) < 0)
      v21 = *(const char **)v21;
    StringFormatter::StringFormatter((StringFormatter *)&v101, "Persitent module '%s' is null", v21);
    MEMORY[0x1DF0EC99C](exception, &v101);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_ != 7)
      goto LABEL_134;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 7)
      goto LABEL_134;
    p_p = &__p;
  }
  data = (int)p_p->__r_.__value_.__l.__data_;
  v40 = *(_DWORD *)((char *)p_p->__r_.__value_.__r.__words + 3);
  if (data != 1634100580 || v40 != 1953264993)
  {
LABEL_134:
    v93 = __cxa_allocate_exception(0x10uLL);
    v94 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v94 = (std::string *)__p.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)&v101, "Model type '%s' is not supported.", (const char *)v94);
    MEMORY[0x1DF0EC99C](v93, &v101);
    __cxa_throw(v93, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  v42 = (std::__shared_weak_count *)v31[38];
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  v45 = v31[39];
  v46 = (std::__shared_weak_count *)v31[40];
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  v49 = v31[41];
  v50 = (std::__shared_weak_count *)v31[42];
  if (v50)
  {
    v51 = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  v53 = operator new(0x40uLL);
  v54 = v53;
  v53[1] = 0;
  v53[2] = 0;
  *v53 = &off_1EA90AFB0;
  if (v46)
  {
    v55 = (unint64_t *)&v46->__shared_owners_;
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  if (v50)
  {
    v57 = (unint64_t *)&v50->__shared_owners_;
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
  }
  v53[3] = off_1EA90A6E0;
  v53[4] = v45;
  v53[5] = v46;
  if (v46)
  {
    v59 = (unint64_t *)&v46->__shared_owners_;
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
  }
  v53[6] = v49;
  v53[7] = v50;
  v61 = a1;
  if (v50)
  {
    v62 = (unint64_t *)&v50->__shared_owners_;
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
    do
      v64 = __ldaxr(v62);
    while (__stlxr(v64 - 1, v62));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if (v46)
  {
    v65 = (unint64_t *)&v46->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (v42)
  {
    v67 = (unint64_t *)&v42->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  *(_QWORD *)&v69 = v54 + 3;
  *((_QWORD *)&v69 + 1) = v54;
  v70 = *(std::__shared_weak_count **)(v8 + 376);
  *(_OWORD *)(v8 + 368) = v69;
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (v50)
  {
    v73 = (unint64_t *)&v50->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if (v46)
  {
    v75 = (unint64_t *)&v46->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  *(_BYTE *)(v8 + 296) = 0;
  if (v30)
  {
    v77 = (unint64_t *)&v30->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v107, v106[0]);
  if (v115 < 0)
    operator delete(*(void **)buf);
  v79 = v110;
  if (v110)
  {
    v80 = (unint64_t *)&v110->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  if (*((_QWORD *)&v100 + 1))
  {
    v82 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v100 + 1) + 16))(*((_QWORD *)&v100 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v100 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v84 = (_QWORD *)(a1 + 8);
  v85 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v86 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v86 = (_QWORD *)*v84;
    v87.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v86;
    v113 = 2048;
    v114 = (double)((v87.__d_.__rep_ - rep) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v85, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
    v61 = a1;
  }
  if (*(char *)(v61 + 31) < 0)
    v84 = (_QWORD *)*v84;
  v88.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v89, v84, (double)((v88.__d_.__rep_ - rep) / 1000000) / 1000.0);
  if (*((_QWORD *)&v100 + 1))
  {
    v90 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v100 + 1) + 16))(*((_QWORD *)&v100 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v100 + 1));
    }
  }
  result.n128_u64[0] = v98;
  result.n128_u64[1] = v8;
  *v96 = result;
  return result;
}

void sub_1DEA7CBEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, Module *a13, uint64_t a14, __int128 a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,unsigned __int8 a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,std::__shared_weak_count *a33)
{
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *p_shared_owners;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  void *v48;
  unint64_t *v49;
  unint64_t v50;

  p_shared_owners = (unint64_t *)&v35->__shared_owners_;
  do
    v40 = __ldaxr(p_shared_owners);
  while (__stlxr(v40 - 1, p_shared_owners));
  if (!v40)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  if (v33)
  {
    v41 = (unint64_t *)&v33->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (a31 < 0)
    operator delete(__p);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a25, a24);
  if (*(char *)(v37 - 105) < 0)
    operator delete(*(void **)(v37 - 128));
  v43 = a33;
  if (a33)
  {
    v44 = (unint64_t *)&a33->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v34 + 368), *(unsigned __int8 *)(v36 + 384));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v34 + 344);
  std::mutex::~mutex((std::mutex *)(v34 + 280));
  Module::~Module(a13);
  if (v33)
  {
    v46 = (unint64_t *)&v33->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v36);
  operator delete(v48);
  if (v33)
  {
    v49 = (unint64_t *)&v33->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<RobertaWordEmbModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<RobertaWordEmbModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<RobertaWordEmbModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<RobertaWordEmbModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<RobertaWordEmbModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA90AF78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RobertaWordEmbModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA90AF78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<RobertaWordEmbModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92E9B8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92E9B8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92E9B8;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA7D090(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92E9B8;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  const char *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  std::__shared_weak_count *v31;
  _QWORD *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  std::string *v54;
  int data;
  int v56;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  std::__shared_weak_count *size;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  __int128 v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  __int128 v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  std::string::size_type *v107;
  NSObject *v108;
  std::string::size_type v109;
  std::chrono::steady_clock::time_point v110;
  std::chrono::steady_clock::time_point v111;
  const char *v112;
  unint64_t *v113;
  unint64_t v114;
  __n128 result;
  void *v116;
  std::string *p_p;
  void *exception;
  __n128 *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  std::chrono::steady_clock::time_point v122;
  __int128 v123;
  uint64_t v124;
  std::string __p;
  char v126[8];
  uint64_t *v127;
  char v128[8];
  uint64_t *v129;
  void *v130[2];
  char v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  __int128 v134;
  std::string v135;
  void *v136;
  uint64_t *v137;
  char v138;
  std::string buf;
  uint64_t v140;

  v140 = *MEMORY[0x1E0C80C00];
  v123 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v122.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v7 = operator new(0x190uLL);
  v8 = (unint64_t)v7;
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_1EA933938;
  v9 = (unint64_t)(v7 + 3);
  if (*((_QWORD *)&v123 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v123 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v134 = v123;
    v12 = (unint64_t *)(*((_QWORD *)&v123 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  else
  {
    v134 = (unint64_t)v123;
  }
  Module::Module((uint64_t)(v7 + 3), a2, (uint64_t *)&v134);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v134 + 1);
  if (*((_QWORD *)&v134 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *(_QWORD *)(v8 + 24) = &off_1EA91F140;
  *(_BYTE *)(v8 + 296) = 0;
  *(_QWORD *)(v8 + 304) = 850045863;
  *(_QWORD *)(v8 + 392) = 0;
  *(_OWORD *)(v8 + 312) = 0u;
  *(_OWORD *)(v8 + 328) = 0u;
  *(_OWORD *)(v8 + 344) = 0u;
  *(_OWORD *)(v8 + 360) = 0u;
  *(_OWORD *)(v8 + 369) = 0u;
  v17 = v123;
  SharedObjectPool::get<VoiceConfig>(&v132, (__int128 **)v123);
  v18 = v132;
  v19 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "model_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v19, &buf);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v18 + 40))(v130, v18, 1717662579, &buf, 0);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  InferenceEngine::Utils::read_json_from_file((char *)v130, (uint64_t)v128);
  std::string::basic_string[abi:ne180100]<0>(&buf, "model_parameters");
  LOBYTE(v136) = 0;
  v137 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>(v128, (const void **)&buf.__r_.__value_.__l.__data_, (unsigned __int8 *)&v136, (uint64_t)v126);
  v20 = *(unsigned __int8 *)(v8 + 384);
  *(_BYTE *)(v8 + 384) = v126[0];
  v126[0] = v20;
  v21 = *(uint64_t **)(v8 + 392);
  *(_QWORD *)(v8 + 392) = v127;
  v127 = v21;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v127, v20);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v137, v136);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&buf, "model_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("default", a2, (const void **)&buf.__r_.__value_.__l.__data_, &__p);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  v22 = (const char *)(v8 + 208);
  if (*((_QWORD *)&v123 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v123 + 1) + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = *(std::__shared_weak_count **)(v123 + 24);
  v124 = a1;
  if (v25 && (v26 = std::__shared_weak_count::lock(v25)) != 0)
  {
    v27 = v26;
    v28 = *(_QWORD *)(v17 + 16);
    if (v28
      && (v29 = v28 + 8,
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v28 + 8), (unsigned __int8 *)(v8 + 208))))
    {
      buf.__r_.__value_.__r.__words[0] = v8 + 208;
      v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v29, (unsigned __int8 *)(v8 + 208), (__int128 **)&buf);
      v32 = (_QWORD *)*((_QWORD *)v30 + 5);
      v31 = (std::__shared_weak_count *)*((_QWORD *)v30 + 6);
      if (v31)
      {
        p_shared_owners = (unint64_t *)&v31->__shared_owners_;
        do
          v34 = __ldxr(p_shared_owners);
        while (__stxr(v34 + 1, p_shared_owners));
      }
    }
    else
    {
      v31 = 0;
      v32 = 0;
    }
    v35 = (unint64_t *)&v27->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  else
  {
    v31 = 0;
    v32 = 0;
  }
  if (*((_QWORD *)&v123 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v123 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v123 + 1) + 16))(*((_QWORD *)&v123 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v123 + 1));
    }
  }
  v121 = v31;
  if (!v32)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(v8 + 231) < 0)
      v22 = *(const char **)v22;
    StringFormatter::StringFormatter((StringFormatter *)&buf, "Persitent module '%s' is null", v22);
    MEMORY[0x1DF0EC99C](exception, &buf);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_ != 6)
    {
      if (__p.__r_.__value_.__l.__size_ == 7
        && *(_DWORD *)__p.__r_.__value_.__l.__data_ == 1634100580
        && *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 3) == 1953264993)
      {
        goto LABEL_57;
      }
LABEL_185:
      v116 = __cxa_allocate_exception(0x10uLL);
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      StringFormatter::StringFormatter((StringFormatter *)&buf, "Model type '%s' is not supported.", (const char *)p_p);
      MEMORY[0x1DF0EC99C](v116, &buf);
      __cxa_throw(v116, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    v54 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 6)
    {
      if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 7)
        goto LABEL_185;
      if (LODWORD(__p.__r_.__value_.__l.__data_) != 1634100580
        || *(_DWORD *)((char *)__p.__r_.__value_.__r.__words + 3) != 1953264993)
      {
        goto LABEL_185;
      }
LABEL_57:
      v41 = (std::__shared_weak_count *)v32[38];
      if (v41)
      {
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      v44 = v32[39];
      v45 = (std::__shared_weak_count *)v32[40];
      if (v45)
      {
        v46 = (unint64_t *)&v45->__shared_owners_;
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
      }
      v48 = operator new(0x30uLL);
      v49 = v48;
      v48[1] = 0;
      v48[2] = 0;
      *v48 = &off_1EA9348F8;
      if (v45)
      {
        v50 = (unint64_t *)&v45->__shared_owners_;
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
        v48[3] = off_1EA920E38;
        v48[4] = v44;
        v48[5] = v45;
        do
          v52 = __ldxr(v50);
        while (__stxr(v52 + 1, v50));
        do
          v53 = __ldaxr(v50);
        while (__stlxr(v53 - 1, v50));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      else
      {
        v48[3] = off_1EA920E38;
        v48[4] = v44;
        v48[5] = 0;
      }
      if (v41)
      {
        v92 = (unint64_t *)&v41->__shared_owners_;
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 - 1, v92));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      *(_QWORD *)&v94 = v49 + 3;
      *((_QWORD *)&v94 + 1) = v49;
      v95 = *(std::__shared_weak_count **)(v8 + 376);
      *(_OWORD *)(v8 + 368) = v94;
      if (v95)
      {
        v96 = (unint64_t *)&v95->__shared_owners_;
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
        }
      }
      v89 = v121;
      if (v45)
      {
        v98 = (unint64_t *)&v45->__shared_owners_;
        do
          v91 = __ldaxr(v98);
        while (__stlxr(v91 - 1, v98));
        goto LABEL_150;
      }
      goto LABEL_152;
    }
    v54 = &__p;
  }
  data = (int)v54->__r_.__value_.__l.__data_;
  v56 = WORD2(v54->__r_.__value_.__r.__words[0]);
  if (data != 1836020336 || v56 != 29808)
    goto LABEL_185;
  v119 = a4;
  v120 = v9;
  v58 = v32[37];
  v59 = (std::__shared_weak_count *)v32[38];
  if (v59)
  {
    v60 = (unint64_t *)&v59->__shared_owners_;
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
  }
  v62 = v32[39];
  v45 = (std::__shared_weak_count *)v32[40];
  if (v45)
  {
    v63 = (unint64_t *)&v45->__shared_owners_;
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 1, v63));
  }
  v65 = operator new(0x40uLL);
  v66 = v65;
  v65[1] = 0;
  v65[2] = 0;
  *v65 = &off_1EA934C40;
  if (v45)
  {
    v67 = (unint64_t *)&v45->__shared_owners_;
    do
      v68 = __ldxr(v67);
    while (__stxr(v68 + 1, v67));
  }
  if (v59)
  {
    v69 = (unint64_t *)&v59->__shared_owners_;
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 1, v69));
  }
  if (v45)
  {
    v71 = (unint64_t *)&v45->__shared_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
    v65[4] = v62;
    v65[3] = off_1EA920E38;
    v65[5] = v45;
    do
      v73 = __ldxr(v71);
    while (__stxr(v73 + 1, v71));
    do
      v74 = __ldaxr(v71);
    while (__stlxr(v74 - 1, v71));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  else
  {
    v65[4] = v62;
    v65[3] = off_1EA920E38;
    v65[5] = 0;
  }
  if (v59)
  {
    v75 = (unint64_t *)&v59->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v66[6] = 0;
  v66[3] = off_1EA921370;
  v66[7] = 0;
  v77 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "prompt_semantic");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v77, &v135);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v58 + 40))(&v136, v58, 1717662579, &v135, 0);
  InferenceEngine::DataUtils::read_vector_from_file<float>(&buf);
  if (v138 < 0)
    operator delete(v136);
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v135.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v136, "decoder_prompt");
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&buf, &v135);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)(v66 + 6), (__int128 *)&v135);
  size = (std::__shared_weak_count *)v135.__r_.__value_.__l.__size_;
  if (v135.__r_.__value_.__l.__size_)
  {
    v79 = (unint64_t *)(v135.__r_.__value_.__l.__size_ + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (v138 < 0)
    operator delete(v136);
  InferenceEngine::DataTensor::unsqueeze((InferenceEngine::DataTensor *)v66[6], 0);
  a4 = v119;
  if (buf.__r_.__value_.__r.__words[0])
  {
    buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (v45)
  {
    v81 = (unint64_t *)&v45->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v59)
  {
    v83 = (unint64_t *)&v59->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  *(_QWORD *)&v85 = v66 + 3;
  *((_QWORD *)&v85 + 1) = v66;
  v86 = *(std::__shared_weak_count **)(v8 + 376);
  *(_OWORD *)(v8 + 368) = v85;
  v9 = v120;
  if (v86)
  {
    v87 = (unint64_t *)&v86->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = v121;
  if (v45)
  {
    v90 = (unint64_t *)&v45->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
LABEL_150:
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
LABEL_152:
  *(_BYTE *)(v8 + 296) = 0;
  v99 = v124;
  if (v89)
  {
    v100 = (unint64_t *)&v89->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v129, v128[0]);
  if (v131 < 0)
    operator delete(v130[0]);
  v102 = v133;
  if (v133)
  {
    v103 = (unint64_t *)&v133->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  if (*((_QWORD *)&v123 + 1))
  {
    v105 = (unint64_t *)(*((_QWORD *)&v123 + 1) + 8);
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v123 + 1) + 16))(*((_QWORD *)&v123 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v123 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v107 = (std::string::size_type *)(v124 + 8);
  v108 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v109 = v124 + 8;
    if (*(char *)(v124 + 31) < 0)
      v109 = *v107;
    v110.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v109;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v110.__d_.__rep_ - v122.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v108, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
    v99 = v124;
  }
  if (*(char *)(v99 + 31) < 0)
    v107 = (std::string::size_type *)*v107;
  v111.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v112, v107, (double)((v111.__d_.__rep_ - v122.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v123 + 1))
  {
    v113 = (unint64_t *)(*((_QWORD *)&v123 + 1) + 8);
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v123 + 1) + 16))(*((_QWORD *)&v123 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v123 + 1));
    }
  }
  result.n128_u64[0] = v9;
  result.n128_u64[1] = v8;
  *a4 = result;
  return result;
}

void sub_1DEA7DD08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, uint64_t a14, Module *a15, uint64_t a16, uint64_t a17, __int128 a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,unsigned __int8 a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37,uint64_t a38)
{
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  Module *v42;
  unint64_t *p_shared_owners;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  void *v53;
  unint64_t *v54;
  unint64_t v55;

  p_shared_owners = (unint64_t *)&v40->__shared_owners_;
  do
    v45 = __ldaxr(p_shared_owners);
  while (__stlxr(v45 - 1, p_shared_owners));
  if (!v45)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  if (v38)
  {
    v46 = (unint64_t *)&v38->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (a24 < 0)
    operator delete(__p);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a28, a27);
  if (a34 < 0)
    operator delete(a29);
  v48 = a36;
  if (a36)
  {
    v49 = (unint64_t *)&a36->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v39 + 368), *(unsigned __int8 *)(v41 + 384));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v39 + 344);
  std::mutex::~mutex((std::mutex *)(v39 + 280));
  Module::~Module(v42);
  if (v38)
  {
    v51 = (unint64_t *)&v38->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v41);
  operator delete(v53);
  if (v38)
  {
    v54 = (unint64_t *)&v38->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<FS2S1DecoderModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933938;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FS2S1DecoderModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933938;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<FS2S1DecoderModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92EA10;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92EA10;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92EA10;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA7E308(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92EA10;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  NSObject *v17;
  __n128 *v18;
  _QWORD *v19;
  std::chrono::steady_clock::time_point v20;
  std::chrono::steady_clock::time_point v21;
  const char *v22;
  unint64_t *v23;
  unint64_t v24;
  __n128 result;
  __int128 v26;
  _BYTE buf[22];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v26 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x190uLL);
  v9 = (unint64_t)v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA933970;
  v10 = (unint64_t)(v8 + 3);
  *(_OWORD *)buf = v26;
  if (*((_QWORD *)&v26 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  FS2S1EncoderModule::FS2S1EncoderModule((uint64_t)(v8 + 3), a2, (uint64_t)buf);
  v13 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v14 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v16 = (_QWORD *)(a1 + 8);
  v17 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v18 = a4;
    v19 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v19 = (_QWORD *)*v16;
    v20.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v19;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)((v20.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v17, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
    a4 = v18;
  }
  if (*(char *)(a1 + 31) < 0)
    v16 = (_QWORD *)*v16;
  v21.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v22, v16, (double)((v21.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v26 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v26 + 1) + 16))(*((_QWORD *)&v26 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v26 + 1));
    }
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_1DEA7E600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, std::__shared_weak_count *a13)
{
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *v18;
  unint64_t *v19;
  unint64_t v20;

  if (a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v18);
  if (v13)
  {
    v19 = (unint64_t *)&v13->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<FS2S1EncoderModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933970;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FS2S1EncoderModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933970;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<FS2S1EncoderModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<S1NARDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<S1NARDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92EB18;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<S1NARDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<S1NARDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92EB18;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<S1NARDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<S1NARDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92EB18;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA7E814(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<S1NARDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<S1NARDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92EB18;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<S1NARDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<S1NARDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<S1NARDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<S1NARDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<S1NARDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<S1NARDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __n128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __n128 *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  const char *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  __n128 v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  NSObject *v48;
  _QWORD *v49;
  std::chrono::steady_clock::time_point v50;
  std::chrono::steady_clock::time_point v51;
  const char *v52;
  unint64_t *v53;
  unint64_t v54;
  __n128 result;
  void *exception;
  unint64_t v57;
  __n128 v58;
  __n128 v59;
  unsigned __int8 v60[8];
  uint64_t *v61;
  _BYTE v62[8];
  uint64_t *v63;
  char v64[8];
  uint64_t *v65;
  std::string __p;
  uint64_t v67;
  std::__shared_weak_count *v68;
  __n128 v69;
  _BYTE buf[12];
  __int16 v71;
  double v72;
  char v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v58 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x190uLL);
  v9 = (unint64_t)v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA933AC0;
  v10 = v8 + 3;
  v11 = (std::__shared_weak_count *)v58.n128_u64[1];
  if (v58.n128_u64[1])
  {
    v12 = (unint64_t *)(v58.n128_u64[1] + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v69 = v58;
    v14 = (unint64_t *)(v58.n128_u64[1] + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  else
  {
    v69 = (__n128)v58.n128_u64[0];
  }
  Module::Module((uint64_t)(v8 + 3), a2, (uint64_t *)&v69);
  v16 = (std::__shared_weak_count *)v69.n128_u64[1];
  if (v69.n128_u64[1])
  {
    v17 = (unint64_t *)(v69.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v57 = (unint64_t)v10;
  v19 = a4;
  *(_QWORD *)(v9 + 24) = &off_1EA91F390;
  *(_BYTE *)(v9 + 296) = 0;
  *(_QWORD *)(v9 + 304) = 850045863;
  *(_QWORD *)(v9 + 392) = 0;
  *(_OWORD *)(v9 + 312) = 0u;
  *(_OWORD *)(v9 + 328) = 0u;
  *(_OWORD *)(v9 + 344) = 0u;
  *(_OWORD *)(v9 + 360) = 0u;
  *(_OWORD *)(v9 + 369) = 0u;
  SharedObjectPool::get<VoiceConfig>(&v67, (__int128 **)v58.n128_u64[0]);
  v20 = v67;
  v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "model_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v21, &__p);
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v20 + 40))(buf, v20, 1936613746, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  InferenceEngine::Utils::read_json_from_file(buf, (uint64_t)v64);
  std::string::basic_string[abi:ne180100]<0>(&__p, "model_parameters");
  v60[0] = 0;
  v61 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>(v64, (const void **)&__p.__r_.__value_.__l.__data_, v60, (uint64_t)v62);
  v22 = *(unsigned __int8 *)(v9 + 384);
  *(_BYTE *)(v9 + 384) = v62[0];
  v62[0] = v22;
  v23 = *(uint64_t **)(v9 + 392);
  *(_QWORD *)(v9 + 392) = v63;
  v63 = v23;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v63, v22);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v61, v60[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v24 = (const char *)(v9 + 208);
  if (v58.n128_u64[1])
  {
    v25 = (unint64_t *)(v58.n128_u64[1] + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = *(std::__shared_weak_count **)(v58.n128_u64[0] + 24);
  v28 = 0uLL;
  if (v27)
  {
    v29 = std::__shared_weak_count::lock(v27);
    v28 = 0uLL;
    if (v29)
    {
      v30 = v29;
      v31 = *(_QWORD *)(v58.n128_u64[0] + 16);
      v59 = 0uLL;
      if (v31)
      {
        v32 = v31 + 8;
        if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v31 + 8), (unsigned __int8 *)(v9 + 208)))
        {
          __p.__r_.__value_.__r.__words[0] = v9 + 208;
          v59 = *(__n128 *)(std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v32, (unsigned __int8 *)(v9 + 208), (__int128 **)&__p)+ 40);
          if (v59.n128_u64[1])
          {
            v33 = (unint64_t *)(v59.n128_u64[1] + 8);
            do
              v34 = __ldxr(v33);
            while (__stxr(v34 + 1, v33));
          }
        }
      }
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v36 = __ldaxr(p_shared_owners);
      while (__stlxr(v36 - 1, p_shared_owners));
      v28 = v59;
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v30->__on_zero_shared)(v30, v59);
        std::__shared_weak_count::__release_weak(v30);
        v28 = v59;
      }
    }
  }
  v37 = *(std::__shared_weak_count **)(v9 + 376);
  *(__n128 *)(v9 + 368) = v28;
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (v11)
  {
    v40 = (unint64_t *)&v11->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (!*(_QWORD *)(v9 + 368))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(v9 + 231) < 0)
      v24 = *(const char **)v24;
    StringFormatter::StringFormatter((StringFormatter *)&__p, "Persitent module '%s' is null", v24);
    MEMORY[0x1DF0EC99C](exception, &__p);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  *(_BYTE *)(v9 + 296) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v65, v64[0]);
  if (v73 < 0)
    operator delete(*(void **)buf);
  v42 = v68;
  if (v68)
  {
    v43 = (unint64_t *)&v68->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (v11)
  {
    v45 = (unint64_t *)&v11->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v47 = (_QWORD *)(a1 + 8);
  v48 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v49 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v49 = (_QWORD *)*v47;
    v50.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v49;
    v71 = 2048;
    v72 = (double)((v50.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v48, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v47 = (_QWORD *)*v47;
  v51.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v52, v47, (double)((v51.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (v11)
  {
    v53 = (unint64_t *)&v11->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  result.n128_u64[0] = v57;
  result.n128_u64[1] = v9;
  *v19 = result;
  return result;
}

void sub_1DEA7EE70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, Module *a12, __int128 a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned __int8 a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,uint64_t a30)
{
  std::__shared_weak_count *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *p_shared_owners;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  void *v46;
  unint64_t *v47;
  unint64_t v48;

  p_shared_owners = (unint64_t *)&v34->__shared_owners_;
  do
    v38 = __ldaxr(p_shared_owners);
  while (__stlxr(v38 - 1, p_shared_owners));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  if (v30)
  {
    v39 = (unint64_t *)&v30->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a20, a19);
  if (*(char *)(v35 - 105) < 0)
    operator delete(*(void **)(v35 - 128));
  v41 = a28;
  if (a28)
  {
    v42 = (unint64_t *)&a28->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v31 + 368), *(unsigned __int8 *)(v32 + 384));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v33);
  std::mutex::~mutex((std::mutex *)(v31 + 280));
  Module::~Module(a12);
  if (v30)
  {
    v44 = (unint64_t *)&v30->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v32);
  operator delete(v46);
  if (v30)
  {
    v47 = (unint64_t *)&v30->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<S1NARDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<S1NARDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<S1NARDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<S1NARDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<S1NARDecoderModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933AC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<S1NARDecoderModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933AC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<S1NARDecoderModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92F148;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92F148;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92F148;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA7F230(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92F148;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __n128 *v19;
  __int128 v20;
  const char *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD *v43;
  NSObject *v44;
  _QWORD *v45;
  std::chrono::steady_clock::time_point v46;
  std::chrono::steady_clock::time_point v47;
  const char *v48;
  unint64_t *v49;
  unint64_t v50;
  __n128 result;
  void *exception;
  unint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE buf[22];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v54 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x190uLL);
  v9 = (unint64_t)v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA934AF0;
  v10 = v8 + 3;
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v56 = v54;
    v14 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  else
  {
    v56 = (unint64_t)v54;
  }
  Module::Module((uint64_t)(v8 + 3), a2, (uint64_t *)&v56);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
  if (*((_QWORD *)&v56 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v53 = (unint64_t)v10;
  v19 = a4;
  *(_QWORD *)(v9 + 24) = &off_1EA9210D0;
  *(_QWORD *)(v9 + 296) = 850045863;
  v20 = 0uLL;
  *(_OWORD *)(v9 + 304) = 0u;
  *(_OWORD *)(v9 + 320) = 0u;
  *(_OWORD *)(v9 + 336) = 0u;
  *(_OWORD *)(v9 + 345) = 0u;
  v21 = (const char *)(v9 + 208);
  *(_OWORD *)(v9 + 368) = 0u;
  *(_OWORD *)(v9 + 384) = 0u;
  if (*((_QWORD *)&v54 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = *(std::__shared_weak_count **)(v54 + 24);
  if (v24)
  {
    v25 = std::__shared_weak_count::lock(v24);
    v20 = 0uLL;
    if (v25)
    {
      v26 = v25;
      v27 = *(_QWORD *)(v54 + 16);
      v55 = 0u;
      if (v27)
      {
        v28 = v27 + 8;
        if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v27 + 8), (unsigned __int8 *)(v9 + 208)))
        {
          *(_QWORD *)buf = v9 + 208;
          v55 = *(_OWORD *)(std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v28, (unsigned __int8 *)(v9 + 208), (__int128 **)buf)+ 40);
          if (*((_QWORD *)&v55 + 1))
          {
            v29 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
            do
              v30 = __ldxr(v29);
            while (__stxr(v30 + 1, v29));
          }
        }
      }
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      v20 = v55;
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
        v20 = v55;
      }
    }
  }
  v33 = *(std::__shared_weak_count **)(v9 + 392);
  *(_OWORD *)(v9 + 384) = v20;
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v11)
  {
    v36 = (unint64_t *)&v11->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (!*(_QWORD *)(v9 + 384))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(v9 + 231) < 0)
      v21 = *(const char **)v21;
    StringFormatter::StringFormatter((StringFormatter *)buf, "Persistent module '%s' is null", v21);
    MEMORY[0x1DF0EC99C](exception, buf);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  SharedObjectPool::get<SynthesizerConfig>(buf, *(_QWORD *)(v9 + 192));
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v9 + 368, (__int128 *)buf);
  v38 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v39 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  *(_BYTE *)(v9 + 360) = 0;
  if (v11)
  {
    v41 = (unint64_t *)&v11->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v43 = (_QWORD *)(a1 + 8);
  v44 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v45 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v45 = (_QWORD *)*v43;
    v46.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v45;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)((v46.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v44, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v43 = (_QWORD *)*v43;
  v47.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v48, v43, (double)((v47.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (v11)
  {
    v49 = (unint64_t *)&v11->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  result.n128_u64[0] = v53;
  result.n128_u64[1] = v9;
  *v19 = result;
  return result;
}

void sub_1DEA7F79C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, Module *a12, __int128 a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__shared_weak_count *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;

  p_shared_owners = (unint64_t *)&v25->__shared_owners_;
  do
    v28 = __ldaxr(p_shared_owners);
  while (__stlxr(v28 - 1, p_shared_owners));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  if (v21)
  {
    v29 = (unint64_t *)&v21->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v24);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v23);
  std::mutex::~mutex((std::mutex *)(v22 + 296));
  Module::~Module(a12);
  if (v21)
  {
    v31 = (unint64_t *)&v21->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v22);
  operator delete(v33);
  if (v21)
  {
    v34 = (unint64_t *)&v21->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<FastSpeech2S1DecoderModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934AF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FastSpeech2S1DecoderModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934AF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<FastSpeech2S1DecoderModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormStreamingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormStreamingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA90ABD0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormStreamingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormStreamingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA90ABD0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormStreamingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormStreamingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA90ABD0;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA7FAB0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormStreamingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormStreamingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA90ABD0;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormStreamingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormStreamingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormStreamingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormStreamingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormStreamingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormStreamingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  NSObject *v19;
  _QWORD *v20;
  std::chrono::steady_clock::time_point v21;
  std::chrono::steady_clock::time_point v22;
  const char *v23;
  unint64_t *v24;
  unint64_t v25;
  __n128 result;
  __int128 v27;
  std::chrono::steady_clock::time_point v28;
  unsigned int v29;
  __int128 v30;
  _BYTE __p[12];
  __int16 v32;
  double v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v27 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v28.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v7 = operator new(0x1F0uLL);
  v8 = (unint64_t)v7;
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_1EA90B020;
  v9 = (unint64_t)(v7 + 3);
  if (*((_QWORD *)&v27 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v30 = v27;
    v12 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  else
  {
    v30 = (unint64_t)v27;
  }
  SoundStormModule::SoundStormModule((uint64_t)(v7 + 3), a2, (uint64_t)&v30);
  if (*((_QWORD *)&v27 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v27 + 1) + 16))(*((_QWORD *)&v27 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v27 + 1));
    }
  }
  *(_QWORD *)(v8 + 24) = &off_1EA90A708;
  *(_QWORD *)(v8 + 424) = 850045863;
  *(_OWORD *)(v8 + 432) = 0u;
  *(_OWORD *)(v8 + 448) = 0u;
  *(_OWORD *)(v8 + 464) = 0u;
  *(_QWORD *)(v8 + 480) = 0;
  *(_DWORD *)(v8 + 488) = 2;
  *(_BYTE *)(v8 + 416) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "chunk_size");
  v29 = 2;
  *(_DWORD *)(v8 + 488) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)__p, &v29);
  if (v34 < 0)
    operator delete(*(void **)__p);
  if (*((_QWORD *)&v27 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v27 + 1) + 16))(*((_QWORD *)&v27 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v27 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v18 = (_QWORD *)(a1 + 8);
  v19 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v20 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v20 = (_QWORD *)*v18;
    v21.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v20;
    v32 = 2048;
    v33 = (double)((v21.__d_.__rep_ - v28.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v19, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", __p, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v18 = (_QWORD *)*v18;
  v22.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v23, v18, (double)((v22.__d_.__rep_ - v28.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v27 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v27 + 1) + 16))(*((_QWORD *)&v27 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v27 + 1));
    }
  }
  result.n128_u64[0] = v9;
  result.n128_u64[1] = v8;
  *a4 = result;
  return result;
}

void sub_1DEA7FE50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__shared_weak_count *v21;
  uint64_t v22;
  SoundStormModule *v23;
  unint64_t *p_shared_owners;
  unint64_t v26;
  void *v27;
  unint64_t *v28;
  unint64_t v29;

  if (a21 < 0)
    operator delete(__p);
  std::mutex::~mutex((std::mutex *)(v22 + 424));
  SoundStormModule::~SoundStormModule(v23);
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v22);
  operator delete(v27);
  if (v21)
  {
    v28 = (unint64_t *)&v21->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormStreamingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormStreamingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormStreamingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormStreamingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<SoundStormStreamingModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA90B020;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SoundStormStreamingModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA90B020;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<SoundStormStreamingModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92E800;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92E800;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92E800;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA800C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92E800;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  NSObject *v17;
  __n128 *v18;
  _QWORD *v19;
  std::chrono::steady_clock::time_point v20;
  std::chrono::steady_clock::time_point v21;
  const char *v22;
  unint64_t *v23;
  unint64_t v24;
  __n128 result;
  __int128 v26;
  _BYTE buf[22];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v26 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x1A0uLL);
  v9 = (unint64_t)v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA9334A0;
  v10 = (unint64_t)(v8 + 3);
  *(_OWORD *)buf = v26;
  if (*((_QWORD *)&v26 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  SoundStormModule::SoundStormModule((uint64_t)(v8 + 3), a2, (uint64_t)buf);
  v13 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v14 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v16 = (_QWORD *)(a1 + 8);
  v17 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v18 = a4;
    v19 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v19 = (_QWORD *)*v16;
    v20.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v19;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)((v20.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v17, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
    a4 = v18;
  }
  if (*(char *)(a1 + 31) < 0)
    v16 = (_QWORD *)*v16;
  v21.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v22, v16, (double)((v21.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v26 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v26 + 1) + 16))(*((_QWORD *)&v26 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v26 + 1));
    }
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_1DEA803C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, std::__shared_weak_count *a13)
{
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *v18;
  unint64_t *v19;
  unint64_t v20;

  if (a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v18);
  if (v13)
  {
    v19 = (unint64_t *)&v13->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<SoundStormModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9334A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SoundStormModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9334A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<SoundStormModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA90AC28;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA90AC28;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA90AC28;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA805D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA90AC28;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __n128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __n128 *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  const char *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  __n128 v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *size;
  unint64_t *v43;
  unint64_t v44;
  char *v45;
  __int128 v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  NSObject *v56;
  _QWORD *v57;
  std::chrono::steady_clock::time_point v58;
  std::chrono::steady_clock::time_point v59;
  const char *v60;
  unint64_t *v61;
  unint64_t v62;
  __n128 result;
  void *exception;
  unint64_t v65;
  __n128 v66;
  __n128 v67;
  unsigned __int8 v68[8];
  uint64_t *v69;
  _BYTE v70[8];
  uint64_t *v71;
  char v72[8];
  uint64_t *v73;
  std::string __p;
  uint64_t v75;
  std::__shared_weak_count *v76;
  __n128 v77;
  _BYTE buf[12];
  __int16 v79;
  double v80;
  char v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v66 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x1B0uLL);
  v9 = (unint64_t)v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA90B090;
  v10 = v8 + 3;
  v11 = (std::__shared_weak_count *)v66.n128_u64[1];
  if (v66.n128_u64[1])
  {
    v12 = (unint64_t *)(v66.n128_u64[1] + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v77 = v66;
    v14 = (unint64_t *)(v66.n128_u64[1] + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  else
  {
    v77 = (__n128)v66.n128_u64[0];
  }
  Module::Module((uint64_t)(v8 + 3), a2, (uint64_t *)&v77);
  v16 = (std::__shared_weak_count *)v77.n128_u64[1];
  if (v77.n128_u64[1])
  {
    v17 = (unint64_t *)(v77.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v65 = (unint64_t)v10;
  v19 = a4;
  *(_QWORD *)(v9 + 24) = &off_1EA90A840;
  *(_QWORD *)(v9 + 296) = 0;
  *(_QWORD *)(v9 + 304) = 0;
  *(_BYTE *)(v9 + 312) = 0;
  *(_QWORD *)(v9 + 320) = 850045863;
  *(_OWORD *)(v9 + 328) = 0u;
  *(_OWORD *)(v9 + 344) = 0u;
  *(_OWORD *)(v9 + 360) = 0u;
  *(_OWORD *)(v9 + 376) = 0u;
  *(_OWORD *)(v9 + 385) = 0u;
  *(_QWORD *)(v9 + 416) = 0;
  *(_QWORD *)(v9 + 424) = 0;
  *(_QWORD *)(v9 + 408) = 0;
  SharedObjectPool::get<VoiceConfig>(&v75, (__int128 **)v66.n128_u64[0]);
  v20 = v75;
  v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "model_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v21, &__p);
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v20 + 40))(buf, v20, 1634628452, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  InferenceEngine::Utils::read_json_from_file(buf, (uint64_t)v72);
  std::string::basic_string[abi:ne180100]<0>(&__p, "model_parameters");
  v68[0] = 0;
  v69 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>(v72, (const void **)&__p.__r_.__value_.__l.__data_, v68, (uint64_t)v70);
  v22 = *(unsigned __int8 *)(v9 + 400);
  *(_BYTE *)(v9 + 400) = v70[0];
  v70[0] = v22;
  v23 = *(uint64_t **)(v9 + 408);
  *(_QWORD *)(v9 + 408) = v71;
  v71 = v23;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v71, v22);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v69, v68[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v24 = (const char *)(v9 + 208);
  if (v66.n128_u64[1])
  {
    v25 = (unint64_t *)(v66.n128_u64[1] + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = *(std::__shared_weak_count **)(v66.n128_u64[0] + 24);
  v28 = 0uLL;
  if (v27)
  {
    v29 = std::__shared_weak_count::lock(v27);
    v28 = 0uLL;
    if (v29)
    {
      v30 = v29;
      v31 = *(_QWORD *)(v66.n128_u64[0] + 16);
      v67 = 0uLL;
      if (v31)
      {
        v32 = v31 + 8;
        if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v31 + 8), (unsigned __int8 *)(v9 + 208)))
        {
          __p.__r_.__value_.__r.__words[0] = v9 + 208;
          v67 = *(__n128 *)(std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v32, (unsigned __int8 *)(v9 + 208), (__int128 **)&__p)+ 40);
          if (v67.n128_u64[1])
          {
            v33 = (unint64_t *)(v67.n128_u64[1] + 8);
            do
              v34 = __ldxr(v33);
            while (__stxr(v34 + 1, v33));
          }
        }
      }
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v36 = __ldaxr(p_shared_owners);
      while (__stlxr(v36 - 1, p_shared_owners));
      v28 = v67;
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v30->__on_zero_shared)(v30, v67);
        std::__shared_weak_count::__release_weak(v30);
        v28 = v67;
      }
    }
  }
  v37 = *(std::__shared_weak_count **)(v9 + 392);
  *(__n128 *)(v9 + 384) = v28;
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (v11)
  {
    v40 = (unint64_t *)&v11->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (!*(_QWORD *)(v9 + 384))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(v9 + 231) < 0)
      v24 = *(const char **)v24;
    StringFormatter::StringFormatter((StringFormatter *)&__p, "Persitent module '%s' is null", v24);
    MEMORY[0x1DF0EC99C](exception, &__p);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  *(_BYTE *)(v9 + 312) = 0;
  SharedObjectPool::get<SynthesizerConfig>(&__p, *(_QWORD *)(v9 + 192));
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v9 + 416, (__int128 *)&__p);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v43 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v45 = (char *)operator new(0xC8uLL);
  *((_QWORD *)v45 + 1) = 0;
  *((_QWORD *)v45 + 2) = 0;
  *(_QWORD *)v45 = &off_1EA90AFE8;
  *(_OWORD *)(v45 + 40) = 0u;
  *(_OWORD *)(v45 + 56) = 0u;
  *(_OWORD *)(v45 + 72) = 0u;
  *(_OWORD *)(v45 + 88) = 0u;
  *(_OWORD *)(v45 + 104) = 0u;
  *(_OWORD *)(v45 + 120) = 0u;
  *(_OWORD *)(v45 + 136) = 0u;
  *(_OWORD *)(v45 + 152) = 0u;
  *(_OWORD *)(v45 + 168) = 0u;
  *(_OWORD *)(v45 + 24) = 0u;
  *(_OWORD *)(v45 + 184) = 0u;
  *(_QWORD *)&v46 = v45 + 24;
  *((_QWORD *)&v46 + 1) = v45;
  v47 = *(std::__shared_weak_count **)(v9 + 304);
  *(_OWORD *)(v9 + 296) = v46;
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v73, v72[0]);
  if (v81 < 0)
    operator delete(*(void **)buf);
  v50 = v76;
  if (v76)
  {
    v51 = (unint64_t *)&v76->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if (v11)
  {
    v53 = (unint64_t *)&v11->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v55 = (_QWORD *)(a1 + 8);
  v56 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v57 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v57 = (_QWORD *)*v55;
    v58.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v57;
    v79 = 2048;
    v80 = (double)((v58.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v56, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v55 = (_QWORD *)*v55;
  v59.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v60, v55, (double)((v59.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (v11)
  {
    v61 = (unint64_t *)&v11->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  result.n128_u64[0] = v65;
  result.n128_u64[1] = v9;
  *v19 = result;
  return result;
}

void sub_1DEA80D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, Module *a13, uint64_t a14, __int128 a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned __int8 a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,std::__shared_weak_count *a30)
{
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *p_shared_owners;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  void *v46;
  unint64_t *v47;
  unint64_t v48;

  p_shared_owners = (unint64_t *)&v32->__shared_owners_;
  do
    v38 = __ldaxr(p_shared_owners);
  while (__stlxr(v38 - 1, p_shared_owners));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  if (v30)
  {
    v39 = (unint64_t *)&v30->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a22, a21);
  if (*(char *)(v35 - 105) < 0)
    operator delete(*(void **)(v35 - 128));
  v41 = a30;
  if (a30)
  {
    v42 = (unint64_t *)&a30->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v34);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v31 + 384), *(unsigned __int8 *)(v33 + 400));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a14);
  std::mutex::~mutex((std::mutex *)(v31 + 296));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a12);
  Module::~Module(a13);
  if (v30)
  {
    v44 = (unint64_t *)&v30->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v33);
  operator delete(v46);
  if (v30)
  {
    v47 = (unint64_t *)&v30->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<AnetecStreamingDecoderModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA90B090;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AnetecStreamingDecoderModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA90B090;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<AnetecStreamingDecoderModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA90AB20;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA90AB20;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA90AB20;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA8110C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA90AB20;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __n128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __n128 *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  const char *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  __n128 v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *size;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  NSObject *v51;
  _QWORD *v52;
  std::chrono::steady_clock::time_point v53;
  std::chrono::steady_clock::time_point v54;
  const char *v55;
  unint64_t *v56;
  unint64_t v57;
  __n128 result;
  void *exception;
  unint64_t v60;
  __n128 v61;
  __n128 v62;
  unsigned __int8 v63[8];
  uint64_t *v64;
  _BYTE v65[8];
  uint64_t *v66;
  char v67[8];
  uint64_t *v68;
  std::string __p;
  uint64_t v70;
  std::__shared_weak_count *v71;
  __n128 v72;
  _BYTE buf[12];
  __int16 v74;
  double v75;
  char v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v61 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x1A0uLL);
  v9 = (unint64_t)v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA90AF40;
  v10 = v8 + 3;
  v11 = (std::__shared_weak_count *)v61.n128_u64[1];
  if (v61.n128_u64[1])
  {
    v12 = (unint64_t *)(v61.n128_u64[1] + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v72 = v61;
    v14 = (unint64_t *)(v61.n128_u64[1] + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  else
  {
    v72 = (__n128)v61.n128_u64[0];
  }
  Module::Module((uint64_t)(v8 + 3), a2, (uint64_t *)&v72);
  v16 = (std::__shared_weak_count *)v72.n128_u64[1];
  if (v72.n128_u64[1])
  {
    v17 = (unint64_t *)(v72.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v60 = (unint64_t)v10;
  v19 = a4;
  *(_QWORD *)(v9 + 24) = &off_1EA90A600;
  *(_BYTE *)(v9 + 296) = 0;
  *(_QWORD *)(v9 + 304) = 850045863;
  *(_OWORD *)(v9 + 312) = 0u;
  *(_OWORD *)(v9 + 328) = 0u;
  *(_OWORD *)(v9 + 344) = 0u;
  *(_OWORD *)(v9 + 360) = 0u;
  *(_OWORD *)(v9 + 369) = 0u;
  *(_QWORD *)(v9 + 400) = 0;
  *(_QWORD *)(v9 + 408) = 0;
  *(_QWORD *)(v9 + 392) = 0;
  SharedObjectPool::get<VoiceConfig>(&v70, (__int128 **)v61.n128_u64[0]);
  v20 = v70;
  v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "model_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v21, &__p);
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v20 + 40))(buf, v20, 1634624611, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  InferenceEngine::Utils::read_json_from_file(buf, (uint64_t)v67);
  std::string::basic_string[abi:ne180100]<0>(&__p, "model_parameters");
  v63[0] = 0;
  v64 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>(v67, (const void **)&__p.__r_.__value_.__l.__data_, v63, (uint64_t)v65);
  v22 = *(unsigned __int8 *)(v9 + 384);
  *(_BYTE *)(v9 + 384) = v65[0];
  v65[0] = v22;
  v23 = *(uint64_t **)(v9 + 392);
  *(_QWORD *)(v9 + 392) = v66;
  v66 = v23;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v66, v22);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v64, v63[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v24 = (const char *)(v9 + 208);
  if (v61.n128_u64[1])
  {
    v25 = (unint64_t *)(v61.n128_u64[1] + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = *(std::__shared_weak_count **)(v61.n128_u64[0] + 24);
  v28 = 0uLL;
  if (v27)
  {
    v29 = std::__shared_weak_count::lock(v27);
    v28 = 0uLL;
    if (v29)
    {
      v30 = v29;
      v31 = *(_QWORD *)(v61.n128_u64[0] + 16);
      v62 = 0uLL;
      if (v31)
      {
        v32 = v31 + 8;
        if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v31 + 8), (unsigned __int8 *)(v9 + 208)))
        {
          __p.__r_.__value_.__r.__words[0] = v9 + 208;
          v62 = *(__n128 *)(std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v32, (unsigned __int8 *)(v9 + 208), (__int128 **)&__p)+ 40);
          if (v62.n128_u64[1])
          {
            v33 = (unint64_t *)(v62.n128_u64[1] + 8);
            do
              v34 = __ldxr(v33);
            while (__stxr(v34 + 1, v33));
          }
        }
      }
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v36 = __ldaxr(p_shared_owners);
      while (__stlxr(v36 - 1, p_shared_owners));
      v28 = v62;
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v30->__on_zero_shared)(v30, v62);
        std::__shared_weak_count::__release_weak(v30);
        v28 = v62;
      }
    }
  }
  v37 = *(std::__shared_weak_count **)(v9 + 376);
  *(__n128 *)(v9 + 368) = v28;
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (v11)
  {
    v40 = (unint64_t *)&v11->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (!*(_QWORD *)(v9 + 368))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(v9 + 231) < 0)
      v24 = *(const char **)v24;
    StringFormatter::StringFormatter((StringFormatter *)&__p, "Persitent module '%s' is null", v24);
    MEMORY[0x1DF0EC99C](exception, &__p);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  *(_BYTE *)(v9 + 296) = 0;
  SharedObjectPool::get<SynthesizerConfig>(&__p, *(_QWORD *)(v9 + 192));
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v9 + 400, (__int128 *)&__p);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v43 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v68, v67[0]);
  if (v76 < 0)
    operator delete(*(void **)buf);
  v45 = v71;
  if (v71)
  {
    v46 = (unint64_t *)&v71->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v11)
  {
    v48 = (unint64_t *)&v11->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v50 = (_QWORD *)(a1 + 8);
  v51 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v52 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v52 = (_QWORD *)*v50;
    v53.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v52;
    v74 = 2048;
    v75 = (double)((v53.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v51, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v50 = (_QWORD *)*v50;
  v54.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v55, v50, (double)((v54.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (v11)
  {
    v56 = (unint64_t *)&v11->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  result.n128_u64[0] = v60;
  result.n128_u64[1] = v9;
  *v19 = result;
  return result;
}

void sub_1DEA817C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, Module *a11, uint64_t a12, __int128 a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned __int8 a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,uint64_t a30)
{
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *p_shared_owners;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  void *v46;
  unint64_t *v47;
  unint64_t v48;

  p_shared_owners = (unint64_t *)&v32->__shared_owners_;
  do
    v38 = __ldaxr(p_shared_owners);
  while (__stlxr(v38 - 1, p_shared_owners));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  if (v30)
  {
    v39 = (unint64_t *)&v30->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a20, a19);
  if (*(char *)(v35 - 105) < 0)
    operator delete(*(void **)(v35 - 128));
  v41 = a28;
  if (a28)
  {
    v42 = (unint64_t *)&a28->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v34);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v31 + 368), *(unsigned __int8 *)(v33 + 384));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a12);
  std::mutex::~mutex((std::mutex *)(v31 + 280));
  Module::~Module(a11);
  if (v30)
  {
    v44 = (unint64_t *)&v30->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v33);
  operator delete(v46);
  if (v30)
  {
    v47 = (unint64_t *)&v30->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<AnetecDecoderModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA90AF40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AnetecDecoderModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA90AF40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<AnetecDecoderModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92EFE8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92EFE8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92EFE8;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA81B98(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92EFE8;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, _OWORD *a4@<X8>)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _OWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  unsigned __int8 *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  __int128 v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  std::string *v57;
  int data;
  int v59;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  __int128 v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  double v95;
  uint64_t *v96;
  float v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  _OWORD *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  int v113;
  uint64_t *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  std::string::size_type *v126;
  NSObject *v127;
  std::string::size_type v128;
  std::chrono::steady_clock::time_point v129;
  std::chrono::steady_clock::time_point v130;
  const char *v131;
  unint64_t *v132;
  unint64_t v133;
  __int128 v134;
  void *v135;
  std::string *v136;
  void *exception;
  uint64_t v138;
  _OWORD *v139;
  std::chrono::steady_clock::time_point v140;
  __int128 v141;
  std::__shared_weak_count *v142;
  __int128 v143;
  char v144;
  uint64_t *v145;
  void *v146[2];
  char v147;
  std::string v148;
  char v149[8];
  int v150[2];
  char v151[8];
  uint64_t *v152;
  std::string __p;
  uint64_t v154;
  std::__shared_weak_count *v155;
  __int128 v156;
  std::string buf;
  uint64_t v158;

  v158 = *MEMORY[0x1E0C80C00];
  v141 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v140.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v7 = operator new(0x1C8uLL);
  v8 = v7;
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_1EA934690;
  v9 = v7 + 3;
  if (*((_QWORD *)&v141 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v156 = v141;
    v12 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  else
  {
    v156 = (unint64_t)v141;
  }
  Module::Module((uint64_t)(v7 + 3), a2, (uint64_t *)&v156);
  v14 = v8 + 37;
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v156 + 1);
  if (*((_QWORD *)&v156 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v8[3] = &off_1EA920A00;
  *v14 = xmmword_1DED16CA0;
  v139 = v8 + 53;
  v8[39] = 0x640000000ALL;
  *((_DWORD *)v8 + 80) = 1092616192;
  v8[41] = 0;
  *((_WORD *)v8 + 168) = 256;
  v8[43] = 850045863;
  *((_OWORD *)v8 + 22) = 0u;
  *((_OWORD *)v8 + 23) = 0u;
  *((_OWORD *)v8 + 24) = 0u;
  *((_OWORD *)v8 + 25) = 0u;
  *((_OWORD *)v8 + 26) = 0u;
  *((_OWORD *)v8 + 27) = 0u;
  v8[56] = 0;
  SharedObjectPool::get<VoiceConfig>(&v154, (__int128 **)v141);
  v18 = v154;
  v19 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "model_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v19, &__p);
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v18 + 40))(&buf, v18, 1717662576, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
  else
    __p = buf;
  InferenceEngine::Utils::read_json_from_file((char *)&__p, (uint64_t)v151);
  std::string::basic_string[abi:ne180100]<0>(&v148, "model_parameters");
  LOBYTE(v146[0]) = 0;
  v146[1] = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>(v151, (const void **)&v148.__r_.__value_.__l.__data_, (unsigned __int8 *)v146, (uint64_t)v149);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v146[1], LOBYTE(v146[0]));
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v148.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v148, "streaming_chunk_size");
  LODWORD(v146[0]) = 10;
  *((_DWORD *)v8 + 78) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)&v148.__r_.__value_.__l.__data_, (unsigned int *)v146);
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v148.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v148, "thermal_critical_streaming_chunk_size");
  LODWORD(v146[0]) = 200;
  *((_DWORD *)v8 + 79) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)&v148.__r_.__value_.__l.__data_, (unsigned int *)v146);
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v148.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v146, "model_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("default", a2, (const void **)v146, &v148);
  if (v147 < 0)
    operator delete(v146[0]);
  v20 = (const char *)(v8 + 26);
  if (*((_QWORD *)&v141 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = *(std::__shared_weak_count **)(v141 + 24);
  v138 = a1;
  if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
  {
    v25 = v24;
    v26 = *(_QWORD *)(v141 + 16);
    if (v26
      && (v27 = v26 + 8,
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v26 + 8), (unsigned __int8 *)v8 + 208)))
    {
      v28 = a4;
      v146[0] = v8 + 26;
      v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v27, (unsigned __int8 *)v8 + 208, (__int128 **)v146);
      v31 = *((_QWORD *)v29 + 5);
      v30 = (std::__shared_weak_count *)*((_QWORD *)v29 + 6);
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v33 = __ldxr(p_shared_owners);
        while (__stxr(v33 + 1, p_shared_owners));
      }
    }
    else
    {
      v28 = a4;
      v30 = 0;
      v31 = 0;
    }
    v34 = (unint64_t *)&v25->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  else
  {
    v28 = a4;
    v30 = 0;
    v31 = 0;
  }
  if (*((_QWORD *)&v141 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v141 + 1) + 16))(*((_QWORD *)&v141 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v141 + 1));
    }
  }
  v142 = v30;
  if (!v31)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (*((char *)v8 + 231) < 0)
      v20 = *(const char **)v20;
    StringFormatter::StringFormatter((StringFormatter *)v146, "Persistent module '%s' is null", v20);
    MEMORY[0x1DF0EC99C](exception, v146);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v148.__r_.__value_.__l.__size_ != 6)
    {
      if (v148.__r_.__value_.__l.__size_ == 7
        && *(_DWORD *)v148.__r_.__value_.__l.__data_ == 1634100580
        && *(_DWORD *)(v148.__r_.__value_.__r.__words[0] + 3) == 1953264993)
      {
        goto LABEL_64;
      }
LABEL_209:
      v135 = __cxa_allocate_exception(0x10uLL);
      v136 = &v148;
      if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v136 = (std::string *)v148.__r_.__value_.__r.__words[0];
      StringFormatter::StringFormatter((StringFormatter *)v146, "Model type '%s' is not supported.", (const char *)v136);
      MEMORY[0x1DF0EC99C](v135, v146);
      __cxa_throw(v135, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    v57 = (std::string *)v148.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (HIBYTE(v148.__r_.__value_.__r.__words[2]) != 6)
    {
      if (HIBYTE(v148.__r_.__value_.__r.__words[2]) != 7)
        goto LABEL_209;
      if (LODWORD(v148.__r_.__value_.__l.__data_) != 1634100580
        || *(_DWORD *)((char *)v148.__r_.__value_.__r.__words + 3) != 1953264993)
      {
        goto LABEL_209;
      }
LABEL_64:
      v41 = *(_QWORD *)(v31 + 296);
      v40 = *(std::__shared_weak_count **)(v31 + 304);
      if (v40)
      {
        v42 = (unint64_t *)&v40->__shared_owners_;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      v44 = operator new(0x40uLL);
      v45 = v44;
      v44[1] = 0;
      v44[2] = 0;
      *v44 = &off_1EA9352D0;
      v46 = v44 + 3;
      if (v40)
      {
        v47 = (unint64_t *)&v40->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      FastSpeech2DecoderBaseInference::FastSpeech2DecoderBaseInference((uint64_t)(v44 + 3), v41, (uint64_t)v40);
      if (v40)
      {
        v49 = (unint64_t *)&v40->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      *(_QWORD *)&v51 = v46;
      *((_QWORD *)&v51 + 1) = v45;
      v52 = (std::__shared_weak_count *)v8[54];
      *v139 = v51;
      if (v52)
      {
        v53 = (unint64_t *)&v52->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      if (v40)
      {
        v55 = (unint64_t *)&v40->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        goto LABEL_116;
      }
      goto LABEL_118;
    }
    v57 = &v148;
  }
  data = (int)v57->__r_.__value_.__l.__data_;
  v59 = WORD2(v57->__r_.__value_.__r.__words[0]);
  if (data != 1852728676 || v59 != 29545)
    goto LABEL_209;
  v61 = *(_QWORD *)(v31 + 296);
  v40 = *(std::__shared_weak_count **)(v31 + 304);
  if (v40)
  {
    v62 = (unint64_t *)&v40->__shared_owners_;
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  v64 = operator new(0x40uLL);
  v65 = v64;
  v64[1] = 0;
  v64[2] = 0;
  *v64 = &off_1EA935538;
  v66 = v64 + 3;
  if (v40)
  {
    v67 = (unint64_t *)&v40->__shared_owners_;
    do
      v68 = __ldxr(v67);
    while (__stxr(v68 + 1, v67));
    do
      v69 = __ldxr(v67);
    while (__stxr(v69 + 1, v67));
  }
  FastSpeech2DecoderBaseInference::FastSpeech2DecoderBaseInference((uint64_t)(v64 + 3), v61, (uint64_t)v40);
  if (v40)
  {
    v70 = (unint64_t *)&v40->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
    *v66 = off_1EA9220F8;
    do
      v72 = __ldaxr(v70);
    while (__stlxr(v72 - 1, v70));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  else
  {
    *v66 = off_1EA9220F8;
  }
  *(_QWORD *)&v73 = v66;
  *((_QWORD *)&v73 + 1) = v65;
  v74 = (std::__shared_weak_count *)v8[54];
  *v139 = v73;
  if (v74)
  {
    v75 = (unint64_t *)&v74->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  if (v40)
  {
    v77 = (unint64_t *)&v40->__shared_owners_;
    do
      v56 = __ldaxr(v77);
    while (__stlxr(v56 - 1, v77));
LABEL_116:
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
LABEL_118:
  v78 = *(_QWORD *)(v31 + 296);
  v79 = *(std::__shared_weak_count **)(v31 + 304);
  if (v79)
  {
    v80 = (unint64_t *)&v79->__shared_owners_;
    do
      v81 = __ldxr(v80);
    while (__stxr(v81 + 1, v80));
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "frame_duration");
  *(_DWORD *)v14 = InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(*(_QWORD *)(v78 + 8), (const void **)v146, 10);
  if (v147 < 0)
    operator delete(v146[0]);
  if (v79)
  {
    v82 = (unint64_t *)&v79->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v84 = *(_QWORD *)(v31 + 296);
  v85 = *(std::__shared_weak_count **)(v31 + 304);
  if (v85)
  {
    v86 = (unint64_t *)&v85->__shared_owners_;
    do
      v87 = __ldxr(v86);
    while (__stxr(v87 + 1, v86));
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "samples_per_frame");
  *((_DWORD *)v8 + 75) = InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(*(_QWORD *)(v84 + 8), (const void **)v146, 480);
  if (v147 < 0)
    operator delete(v146[0]);
  if (v85)
  {
    v88 = (unint64_t *)&v85->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v90 = *(_QWORD *)(v31 + 296);
  v91 = *(std::__shared_weak_count **)(v31 + 304);
  if (v91)
  {
    v92 = (unint64_t *)&v91->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "minimum_rtf_for_streaming");
  v94 = *(_QWORD *)(v90 + 8);
  v95 = 15.0;
  if (*(_BYTE *)(v94 + 48) == 1
    && *(_QWORD *)(v94 + 56) + 8 != std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*(_QWORD *)(v94 + 56), (const void **)v146))
  {
    v96 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]((unsigned __int8 *)(v94 + 48), (const void **)v146);
    *(_QWORD *)&v143 = 0;
    nlohmann::detail::get_arithmetic_value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,double,0>((unsigned __int8 *)v96, (double *)&v143);
    v95 = *(double *)&v143;
  }
  v97 = v95;
  *((float *)v8 + 80) = v97;
  if (v147 < 0)
    operator delete(v146[0]);
  if (v91)
  {
    v98 = (unint64_t *)&v91->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v100 = *(_QWORD *)(v31 + 296);
  v101 = *(std::__shared_weak_count **)(v31 + 304);
  if (v101)
  {
    v102 = (unint64_t *)&v101->__shared_owners_;
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 1, v102));
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "trim_silences");
  v104 = v28;
  *((_BYTE *)v8 + 337) = InferenceEngine::MilInferenceModel::get_parameter_value_if<BOOL>(*(_QWORD *)(v100 + 8), (const void **)v146, 1);
  if (v147 < 0)
    operator delete(v146[0]);
  if (v101)
  {
    v105 = (unint64_t *)&v101->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  SharedObjectPool::get<SynthesizerConfig>(v146, v8[24]);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)(v8 + 55), (__int128 *)v146);
  v107 = (std::__shared_weak_count *)v146[1];
  if (v146[1])
  {
    v108 = (unint64_t *)((char *)v146[1] + 8);
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  *((_BYTE *)v8 + 336) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v146, (uint64_t)v149);
  if (v149[0] != 1
    || (v110 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [21]>(*(uint64_t *)v150, "frames_per_alignment"), *(_QWORD *)v150 + 8 == v110))
  {
    v111 = (uint64_t *)*((int *)v8 + 76);
    v144 = 5;
    v145 = v111;
    v112 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v146, "frames_per_alignment");
    v113 = *(unsigned __int8 *)v112;
    *(_BYTE *)v112 = v144;
    v144 = v113;
    v114 = (uint64_t *)v112[1];
    v112[1] = (uint64_t)v145;
    v145 = v114;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v145, v113);
  }
  std::allocate_shared[abi:ne180100]<TacotronAlignment,std::allocator<TacotronAlignment>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &,void>((uint64_t *)&v143, (char *)v146);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)(v8 + 51), &v143);
  v115 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
  if (*((_QWORD *)&v143 + 1))
  {
    v116 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v146[1], LOBYTE(v146[0]));
  if (v142)
  {
    v118 = (unint64_t *)&v142->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v148.__r_.__value_.__l.__data_);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v150, v149[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v152, v151[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  v120 = v155;
  if (v155)
  {
    v121 = (unint64_t *)&v155->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  if (*((_QWORD *)&v141 + 1))
  {
    v123 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v141 + 1) + 16))(*((_QWORD *)&v141 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v141 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v125 = v138;
  v126 = (std::string::size_type *)(v138 + 8);
  v127 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v128 = v138 + 8;
    if (*(char *)(v138 + 31) < 0)
      v128 = *v126;
    v129.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v128;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v129.__d_.__rep_ - v140.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v127, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
    v125 = v138;
  }
  if (*(char *)(v125 + 31) < 0)
    v126 = (std::string::size_type *)*v126;
  v130.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v131, v126, (double)((v130.__d_.__rep_ - v140.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v141 + 1))
  {
    v132 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v141 + 1) + 16))(*((_QWORD *)&v141 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v141 + 1));
    }
  }
  *(_QWORD *)&v134 = v9;
  *((_QWORD *)&v134 + 1) = v8;
  *v104 = v134;
}

void sub_1DEA82A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, Module *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,unsigned __int8 a34,uint64_t a35,unsigned __int8 a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  Module *v46;
  uint64_t v47;
  unint64_t *p_shared_owners;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  void *v58;
  unint64_t *v59;
  unint64_t v60;

  p_shared_owners = (unint64_t *)&v45->__shared_owners_;
  do
    v50 = __ldaxr(p_shared_owners);
  while (__stlxr(v50 - 1, p_shared_owners));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  if (v43)
  {
    v51 = (unint64_t *)&v43->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (a33 < 0)
    operator delete(__p);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a35, a34);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a37, a36);
  if (a43 < 0)
    operator delete(a38);
  if (*(char *)(v47 - 121) < 0)
    operator delete(*(void **)(v47 - 144));
  v53 = *(std::__shared_weak_count **)(v47 - 168);
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a14);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a15);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a13);
  std::mutex::~mutex((std::mutex *)(v44 + 344));
  Module::~Module(v46);
  if (v43)
  {
    v56 = (unint64_t *)&v43->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v44);
  operator delete(v58);
  if (v43)
  {
    v59 = (unint64_t *)&v43->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  _Unwind_Resume(a1);
}

void sub_1DEA83098()
{
  JUMPOUT(0x1DEA82FB0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<FastSpeech2DecoderModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934690;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FastSpeech2DecoderModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934690;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<FastSpeech2DecoderModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92F040;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92F040;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92F040;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA8322C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92F040;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::string *v37;
  std::string::size_type v38;
  std::string::size_type size;
  uint64_t v40;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  std::string::size_type v56;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  __int128 v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  __int128 v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  __int128 v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  std::string::size_type *v105;
  NSObject *v106;
  std::string::size_type v107;
  std::chrono::steady_clock::time_point v108;
  std::chrono::steady_clock::time_point v109;
  const char *v110;
  unint64_t *v111;
  unint64_t v112;
  __n128 result;
  void *v114;
  std::string *v115;
  void *exception;
  __n128 *v117;
  unint64_t v118;
  _OWORD *v119;
  __int128 v120;
  unsigned int v121;
  void *v122[2];
  char v123;
  std::string v124;
  char v125[8];
  uint64_t *v126;
  char v127[8];
  uint64_t *v128;
  std::string __p;
  uint64_t v130;
  std::__shared_weak_count *v131;
  __int128 v132;
  std::string buf;
  uint64_t v134;

  v134 = *MEMORY[0x1E0C80C00];
  v120 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x1A8uLL);
  v9 = (unint64_t)v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA9346C8;
  v10 = v8 + 3;
  if (*((_QWORD *)&v120 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    v132 = v120;
    v13 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  else
  {
    v132 = (unint64_t)v120;
  }
  v117 = a4;
  Module::Module((uint64_t)(v8 + 3), a2, (uint64_t *)&v132);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v132 + 1);
  if (*((_QWORD *)&v132 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v132 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *(_QWORD *)(v9 + 24) = &off_1EA920A70;
  *(_QWORD *)(v9 + 296) = 0;
  *(_DWORD *)(v9 + 304) = 10;
  *(_BYTE *)(v9 + 308) = 0;
  *(_QWORD *)(v9 + 312) = 850045863;
  v118 = (unint64_t)v10;
  v119 = (_OWORD *)(v9 + 392);
  *(_OWORD *)(v9 + 320) = 0u;
  *(_OWORD *)(v9 + 336) = 0u;
  *(_OWORD *)(v9 + 352) = 0u;
  *(_OWORD *)(v9 + 368) = 0u;
  *(_OWORD *)(v9 + 384) = 0u;
  *(_OWORD *)(v9 + 400) = 0u;
  *(_QWORD *)(v9 + 416) = 0;
  SharedObjectPool::get<VoiceConfig>(&v130, (__int128 **)v120);
  v18 = v130;
  v19 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "model_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v19, &__p);
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v18 + 40))(&buf, v18, 1717662576, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
  else
    __p = buf;
  InferenceEngine::Utils::read_json_from_file((char *)&__p, (uint64_t)v127);
  std::string::basic_string[abi:ne180100]<0>(&v124, "model_parameters");
  LOBYTE(v122[0]) = 0;
  v122[1] = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>(v127, (const void **)&v124.__r_.__value_.__l.__data_, (unsigned __int8 *)v122, (uint64_t)v125);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v122[1], LOBYTE(v122[0]));
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v124.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v122, "model_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("default", a2, (const void **)v122, &v124);
  if (v123 < 0)
    operator delete(v122[0]);
  std::string::basic_string[abi:ne180100]<0>(v122, "frame_duration");
  v121 = 10;
  *(_DWORD *)(v9 + 304) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v125, (const void **)v122, &v121);
  if (v123 < 0)
    operator delete(v122[0]);
  v20 = (const char *)(v9 + 208);
  if (*((_QWORD *)&v120 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = *(std::__shared_weak_count **)(v120 + 24);
  if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
  {
    v25 = v24;
    v26 = *(_QWORD *)(v120 + 16);
    if (v26
      && (v27 = v26 + 8,
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v26 + 8), (unsigned __int8 *)(v9 + 208))))
    {
      v122[0] = (void *)(v9 + 208);
      v28 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v27, (unsigned __int8 *)(v9 + 208), (__int128 **)v122);
      v30 = *((_QWORD *)v28 + 5);
      v29 = (std::__shared_weak_count *)*((_QWORD *)v28 + 6);
      if (v29)
      {
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v32 = __ldxr(p_shared_owners);
        while (__stxr(v32 + 1, p_shared_owners));
      }
    }
    else
    {
      v29 = 0;
      v30 = 0;
    }
    v33 = (unint64_t *)&v25->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  else
  {
    v29 = 0;
    v30 = 0;
  }
  if (*((_QWORD *)&v120 + 1))
  {
    v35 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v120 + 1) + 16))(*((_QWORD *)&v120 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v120 + 1));
    }
  }
  if (!v30)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(v9 + 231) < 0)
      v20 = *(const char **)v20;
    StringFormatter::StringFormatter((StringFormatter *)v122, "Persistent module '%s' is null", v20);
    MEMORY[0x1DF0EC99C](exception, v122);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v124.__r_.__value_.__r.__words[2]) != 7)
    {
      if (HIBYTE(v124.__r_.__value_.__r.__words[2]) != 8)
      {
        if (HIBYTE(v124.__r_.__value_.__r.__words[2]) != 23)
          goto LABEL_184;
        v37 = &v124;
        goto LABEL_56;
      }
      v56 = v124.__r_.__value_.__r.__words[0];
      goto LABEL_87;
    }
    if (LODWORD(v124.__r_.__value_.__l.__data_) != 1634100580
      || *(_DWORD *)((char *)v124.__r_.__value_.__r.__words + 3) != 1953264993)
    {
LABEL_184:
      v114 = __cxa_allocate_exception(0x10uLL);
      v115 = &v124;
      if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v115 = (std::string *)v124.__r_.__value_.__r.__words[0];
      StringFormatter::StringFormatter((StringFormatter *)v122, "Model type '%s' is not supported.", (const char *)v115);
      MEMORY[0x1DF0EC99C](v114, v122);
      __cxa_throw(v114, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
LABEL_113:
    v75 = *(_QWORD *)(v30 + 296);
    v44 = *(std::__shared_weak_count **)(v30 + 304);
    if (v44)
    {
      v76 = (unint64_t *)&v44->__shared_owners_;
      do
        v77 = __ldxr(v76);
      while (__stxr(v77 + 1, v76));
    }
    v78 = operator new(0x38uLL);
    v79 = v78;
    v78[1] = 0;
    v78[2] = 0;
    *v78 = &off_1EA935308;
    v80 = v78 + 3;
    if (v44)
    {
      v81 = (unint64_t *)&v44->__shared_owners_;
      do
        v82 = __ldxr(v81);
      while (__stxr(v82 + 1, v81));
    }
    FastSpeech2EncoderBaseInference::FastSpeech2EncoderBaseInference((uint64_t)(v78 + 3), v75, (uint64_t)v44);
    if (v44)
    {
      v83 = (unint64_t *)&v44->__shared_owners_;
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    *(_QWORD *)&v85 = v80;
    *((_QWORD *)&v85 + 1) = v79;
    v86 = *(std::__shared_weak_count **)(v9 + 400);
    *v119 = v85;
    if (v86)
    {
      v87 = (unint64_t *)&v86->__shared_owners_;
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
    if (!v44)
      goto LABEL_144;
    v89 = (unint64_t *)&v44->__shared_owners_;
    do
      v73 = __ldaxr(v89);
    while (__stlxr(v73 - 1, v89));
    goto LABEL_142;
  }
  if (v124.__r_.__value_.__l.__size_ == 7)
  {
    if (*(_DWORD *)v124.__r_.__value_.__l.__data_ != 1634100580
      || *(_DWORD *)(v124.__r_.__value_.__r.__words[0] + 3) != 1953264993)
    {
      goto LABEL_184;
    }
    goto LABEL_113;
  }
  if (v124.__r_.__value_.__l.__size_ == 8)
  {
    v56 = *(_QWORD *)v124.__r_.__value_.__l.__data_;
LABEL_87:
    if (v56 != 0x7365727574616566)
      goto LABEL_184;
    v58 = *(_QWORD *)(v30 + 296);
    v44 = *(std::__shared_weak_count **)(v30 + 304);
    if (v44)
    {
      v59 = (unint64_t *)&v44->__shared_owners_;
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
    }
    v61 = operator new(0x40uLL);
    v62 = v61;
    v61[1] = 0;
    v61[2] = 0;
    *v61 = &off_1EA935688;
    v63 = v61 + 3;
    if (v44)
    {
      v64 = (unint64_t *)&v44->__shared_owners_;
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }
    FastSpeech2EncoderFeaturesInference::FastSpeech2EncoderFeaturesInference((uint64_t)(v61 + 3), v58, v44);
    if (v44)
    {
      v66 = (unint64_t *)&v44->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    *(_QWORD *)&v68 = v63;
    *((_QWORD *)&v68 + 1) = v62;
    v69 = *(std::__shared_weak_count **)(v9 + 400);
    *v119 = v68;
    if (v69)
    {
      v70 = (unint64_t *)&v69->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    if (!v44)
      goto LABEL_144;
    v72 = (unint64_t *)&v44->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
LABEL_142:
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
    goto LABEL_144;
  }
  if (v124.__r_.__value_.__l.__size_ != 23)
    goto LABEL_184;
  v37 = (std::string *)v124.__r_.__value_.__r.__words[0];
LABEL_56:
  v38 = v37->__r_.__value_.__r.__words[0];
  size = v37->__r_.__value_.__l.__size_;
  v40 = *(std::string::size_type *)((char *)&v37->__r_.__value_.__r.__words[1] + 7);
  if (v38 != 0x5F79646F736F7270 || size != 0x616C70736E617274 || v40 != 0x6E6F697461746E61)
    goto LABEL_184;
  v43 = *(_QWORD *)(v30 + 296);
  v44 = *(std::__shared_weak_count **)(v30 + 304);
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  v47 = operator new(0x40uLL);
  v48 = v47;
  v47[1] = 0;
  v47[2] = 0;
  *v47 = &off_1EA935880;
  v49 = v47 + 3;
  if (v44)
  {
    v50 = (unint64_t *)&v44->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
    do
      v52 = __ldxr(v50);
    while (__stxr(v52 + 1, v50));
  }
  FastSpeech2EncoderFeaturesInference::FastSpeech2EncoderFeaturesInference((uint64_t)(v47 + 3), v43, v44);
  if (v44)
  {
    v53 = (unint64_t *)&v44->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
    *v49 = off_1EA922450;
    do
      v55 = __ldaxr(v53);
    while (__stlxr(v55 - 1, v53));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  else
  {
    *v49 = off_1EA922450;
  }
  *(_QWORD *)&v90 = v49;
  *((_QWORD *)&v90 + 1) = v48;
  v91 = *(std::__shared_weak_count **)(v9 + 400);
  *v119 = v90;
  if (v91)
  {
    v92 = (unint64_t *)&v91->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  if (v44)
  {
    v94 = (unint64_t *)&v44->__shared_owners_;
    do
      v73 = __ldaxr(v94);
    while (__stlxr(v73 - 1, v94));
    goto LABEL_142;
  }
LABEL_144:
  SharedObjectPool::get<SynthesizerConfig>(v122, *(_QWORD *)(v9 + 192));
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v9 + 408, (__int128 *)v122);
  v95 = (std::__shared_weak_count *)v122[1];
  if (v122[1])
  {
    v96 = (unint64_t *)((char *)v122[1] + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  *(_BYTE *)(v9 + 308) = 0;
  if (v29)
  {
    v98 = (unint64_t *)&v29->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v124.__r_.__value_.__l.__data_);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v126, v125[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v128, v127[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  v100 = v131;
  if (v131)
  {
    v101 = (unint64_t *)&v131->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  if (*((_QWORD *)&v120 + 1))
  {
    v103 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v120 + 1) + 16))(*((_QWORD *)&v120 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v120 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v105 = (std::string::size_type *)(a1 + 8);
  v106 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v107 = a1 + 8;
    if (*(char *)(a1 + 31) < 0)
      v107 = *v105;
    v108.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v107;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v108.__d_.__rep_ - v7.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v106, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v105 = (std::string::size_type *)*v105;
  v109.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v110, v105, (double)((v109.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v120 + 1))
  {
    v111 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v120 + 1) + 16))(*((_QWORD *)&v120 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v120 + 1));
    }
  }
  result.n128_u64[0] = v118;
  result.n128_u64[1] = v9;
  *v117 = result;
  return result;
}

void sub_1DEA83E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, Module *a13, uint64_t a14, __int128 a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,unsigned __int8 a30,uint64_t a31,unsigned __int8 a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *p_shared_owners;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  void *v54;
  unint64_t *v55;
  unint64_t v56;

  p_shared_owners = (unint64_t *)&v41->__shared_owners_;
  do
    v46 = __ldaxr(p_shared_owners);
  while (__stlxr(v46 - 1, p_shared_owners));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  if (v39)
  {
    v47 = (unint64_t *)&v39->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (a29 < 0)
    operator delete(__p);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a31, a30);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a33, a32);
  if (a39 < 0)
    operator delete(a34);
  if (*(char *)(v43 - 105) < 0)
    operator delete(*(void **)(v42 + 16));
  v49 = *(std::__shared_weak_count **)(v43 - 152);
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a12);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a14);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v40 + 376);
  std::mutex::~mutex((std::mutex *)(v40 + 312));
  Module::~Module(a13);
  if (v39)
  {
    v52 = (unint64_t *)&v39->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v40);
  operator delete(v54);
  if (v39)
  {
    v55 = (unint64_t *)&v39->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<FastSpeech2EncoderModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9346C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FastSpeech2EncoderModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9346C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<FastSpeech2EncoderModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92E7A8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92E7A8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92E7A8;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA84464(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92E7A8;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  NSObject *v17;
  __n128 *v18;
  _QWORD *v19;
  std::chrono::steady_clock::time_point v20;
  std::chrono::steady_clock::time_point v21;
  const char *v22;
  unint64_t *v23;
  unint64_t v24;
  __n128 result;
  __int128 v26;
  _BYTE buf[22];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v26 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x198uLL);
  v9 = (unint64_t)v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA933350;
  v10 = (unint64_t)(v8 + 3);
  *(_OWORD *)buf = v26;
  if (*((_QWORD *)&v26 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  MilWaveRNNModule::MilWaveRNNModule((uint64_t)(v8 + 3), a2, (uint64_t *)buf);
  v13 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v14 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v16 = (_QWORD *)(a1 + 8);
  v17 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v18 = a4;
    v19 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v19 = (_QWORD *)*v16;
    v20.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v19;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)((v20.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v17, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
    a4 = v18;
  }
  if (*(char *)(a1 + 31) < 0)
    v16 = (_QWORD *)*v16;
  v21.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v22, v16, (double)((v21.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v26 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v26 + 1) + 16))(*((_QWORD *)&v26 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v26 + 1));
    }
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_1DEA8475C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, std::__shared_weak_count *a13)
{
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *v18;
  unint64_t *v19;
  unint64_t v20;

  if (a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v18);
  if (v13)
  {
    v19 = (unint64_t *)&v13->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<MilWaveRNNModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933350;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MilWaveRNNModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933350;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<MilWaveRNNModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92ED80;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92ED80;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92ED80;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA84970(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92ED80;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  NSObject *v17;
  __n128 *v18;
  _QWORD *v19;
  std::chrono::steady_clock::time_point v20;
  std::chrono::steady_clock::time_point v21;
  const char *v22;
  unint64_t *v23;
  unint64_t v24;
  __n128 result;
  __int128 v26;
  _BYTE buf[22];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v26 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x138uLL);
  v9 = (unint64_t)v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA933F90;
  v10 = (unint64_t)(v8 + 3);
  *(_OWORD *)buf = v26;
  if (*((_QWORD *)&v26 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  EspressoWaveRNNModule::EspressoWaveRNNModule((uint64_t)(v8 + 3), a2, (uint64_t *)buf);
  v13 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v14 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v16 = (_QWORD *)(a1 + 8);
  v17 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v18 = a4;
    v19 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v19 = (_QWORD *)*v16;
    v20.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v19;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)((v20.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v17, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
    a4 = v18;
  }
  if (*(char *)(a1 + 31) < 0)
    v16 = (_QWORD *)*v16;
  v21.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v22, v16, (double)((v21.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v26 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v26 + 1) + 16))(*((_QWORD *)&v26 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v26 + 1));
    }
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_1DEA84C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, std::__shared_weak_count *a13)
{
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *v18;
  unint64_t *v19;
  unint64_t v20;

  if (a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v18);
  if (v13)
  {
    v19 = (unint64_t *)&v13->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<EspressoWaveRNNModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933F90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EspressoWaveRNNModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933F90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<EspressoWaveRNNModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoTacotronModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoTacotronModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92EE88;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoTacotronModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoTacotronModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92EE88;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoTacotronModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoTacotronModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92EE88;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA84E7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoTacotronModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoTacotronModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92EE88;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoTacotronModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoTacotronModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoTacotronModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoTacotronModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoTacotronModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoTacotronModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, _OWORD *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  NeuralTTSUtils *v34;
  _BYTE *v35;
  uint64_t v36;
  std::string *v37;
  std::string::size_type v38;
  std::string::size_type v39;
  __int128 v40;
  uint64_t v41;
  std::string *v42;
  __int128 v43;
  const std::locale::facet *v44;
  unsigned __int8 v45;
  _QWORD *v46;
  float v47;
  float *v48;
  float *v49;
  float *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  float *v56;
  int v57;
  char *v58;
  _BYTE *v59;
  _BYTE *v60;
  _QWORD *v61;
  std::__shared_weak_count *size;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  std::string::size_type *v74;
  NSObject *v75;
  std::__shared_weak_count *v76;
  _OWORD *v77;
  uint64_t v78;
  int v79;
  std::string::size_type v80;
  std::chrono::steady_clock::time_point v81;
  std::chrono::steady_clock::time_point v82;
  const char *v83;
  unint64_t *v84;
  unint64_t v85;
  __int128 v86;
  char *v87;
  std::__shared_weak_count *v88;
  void **v89;
  void **v90;
  void **v91;
  uint64_t v92;
  std::string::size_type v93;
  std::string::size_type v94;
  __int128 v95;
  std::string *v96;
  std::string v97;
  void *v98;
  float *v99;
  unint64_t v100;
  std::string v101;
  std::string v102;
  std::string *v103;
  std::string *v104;
  std::string *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  __int128 v108;
  std::string __str;
  std::string __p[3];
  void *v111;
  char v112;
  uint64_t v113;
  std::string v114;
  std::string v115;
  _QWORD v116[3];
  uint64_t v117[3];
  _QWORD v118[3];
  __int128 v119[20];
  _QWORD v120[23];

  v120[20] = *MEMORY[0x1E0C80C00];
  v95 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = (char *)operator new(0x2D8uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1EA934188;
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v95 + 1);
  if (*((_QWORD *)&v95 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v95 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v108 = v95;
    v12 = (unint64_t *)(*((_QWORD *)&v95 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  else
  {
    v108 = (unint64_t)v95;
  }
  Module::Module((uint64_t)(v8 + 24), a2, (uint64_t *)&v108);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
  if (*((_QWORD *)&v108 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *((_QWORD *)v8 + 3) = &off_1EA920118;
  v8[296] = 0;
  *((_QWORD *)v8 + 61) = 850045863;
  *((_OWORD *)v8 + 31) = 0u;
  *((_OWORD *)v8 + 32) = 0u;
  *((_OWORD *)v8 + 33) = 0u;
  *((_QWORD *)v8 + 68) = 0;
  *((_QWORD *)v8 + 69) = 0xA000000F0;
  *((_WORD *)v8 + 280) = 1;
  v91 = (void **)(v8 + 568);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)v8 + 71, &byte_1DEBD87CE);
  *((_OWORD *)v8 + 37) = 0u;
  *((_OWORD *)v8 + 38) = 0u;
  *((_DWORD *)v8 + 156) = 1065353216;
  v90 = (void **)(v8 + 632);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)v8 + 79, &byte_1DEBD87CE);
  v89 = (void **)(v8 + 656);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)v8 + 82, &byte_1DEBD87CE);
  *(_OWORD *)(v8 + 680) = 0u;
  *(_OWORD *)(v8 + 696) = 0u;
  *((_DWORD *)v8 + 178) = 2;
  SharedObjectPool::get<VoiceConfig>(&v106, (__int128 **)v95);
  if (v8[231] < 0)
    std::string::__init_copy_ctor_external(&v115, *((const std::string::value_type **)v8 + 26), *((_QWORD *)v8 + 27));
  else
    v115 = *(std::string *)(v8 + 208);
  if (*((_QWORD *)&v95 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v95 + 1) + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = *(std::__shared_weak_count **)(v95 + 24);
  if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
  {
    v21 = v20;
    v22 = *(_QWORD *)(v95 + 16);
    if (v22
      && (v23 = v22 + 8,
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v22 + 8), (unsigned __int8 *)&v115)))
    {
      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v115;
      v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v23, (unsigned __int8 *)&v115, (__int128 **)__p);
      v26 = *((_QWORD *)v24 + 5);
      v25 = (std::__shared_weak_count *)*((_QWORD *)v24 + 6);
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v28 = __ldxr(p_shared_owners);
        while (__stxr(v28 + 1, p_shared_owners));
      }
    }
    else
    {
      v25 = 0;
      v26 = 0;
    }
    v29 = (unint64_t *)&v21->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      v31 = v25;
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      v25 = v31;
    }
  }
  else
  {
    v25 = 0;
    v26 = 0;
  }
  v88 = v25;
  if (*((_QWORD *)&v95 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v95 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v95 + 1) + 16))(*((_QWORD *)&v95 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v95 + 1));
    }
  }
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v115.__r_.__value_.__l.__data_);
  *((_QWORD *)v8 + 38) = v26 + 296;
  *((_QWORD *)v8 + 39) = v26 + 304;
  std::string::basic_string[abi:ne180100]<0>(&v115, "samples_per_frame");
  LODWORD(__p[0].__r_.__value_.__l.__data_) = 480;
  *((_DWORD *)v8 + 138) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)&v115.__r_.__value_.__l.__data_, (unsigned int *)__p);
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v115.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v115, "frame_duration");
  LODWORD(__p[0].__r_.__value_.__l.__data_) = 10;
  *((_DWORD *)v8 + 139) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)&v115.__r_.__value_.__l.__data_, (unsigned int *)__p);
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v115.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v115, "alignment_enabled");
  __p[0].__r_.__value_.__s.__data_[0] = 0;
  v8[560] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(a2, (const void **)&v115.__r_.__value_.__l.__data_, (unsigned __int8 *)__p);
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v115.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v115, "alignment_stall_detection_only");
  __p[0].__r_.__value_.__s.__data_[0] = 0;
  v8[561] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(a2, (const void **)&v115.__r_.__value_.__l.__data_, (unsigned __int8 *)__p);
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v115.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v115, "streaming_receptive_field");
  LODWORD(__p[0].__r_.__value_.__l.__data_) = 2;
  *((_DWORD *)v8 + 178) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)&v115.__r_.__value_.__l.__data_, (unsigned int *)__p);
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v115.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, "emotion_embedding");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)&__p[0].__r_.__value_.__l.__data_, &v115);
  if (v8[591] < 0)
    operator delete(*v91);
  *(_OWORD *)v91 = *(_OWORD *)&v115.__r_.__value_.__l.__data_;
  *((_QWORD *)v8 + 73) = *((_QWORD *)&v115.__r_.__value_.__l + 2);
  *((_BYTE *)&v115.__r_.__value_.__s + 23) = 0;
  v115.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, "bsc_output_path");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)&__p[0].__r_.__value_.__l.__data_, &v115);
  if (v8[655] < 0)
    operator delete(*v90);
  *(_OWORD *)v90 = *(_OWORD *)&v115.__r_.__value_.__l.__data_;
  *((_QWORD *)v8 + 81) = *((_QWORD *)&v115.__r_.__value_.__l + 2);
  *((_BYTE *)&v115.__r_.__value_.__s + 23) = 0;
  v115.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, "rot_output_path");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)&__p[0].__r_.__value_.__l.__data_, &v115);
  if (v8[679] < 0)
    operator delete(*v89);
  *(_OWORD *)v89 = *(_OWORD *)&v115.__r_.__value_.__l.__data_;
  *((_QWORD *)v8 + 84) = *((_QWORD *)&v115.__r_.__value_.__l + 2);
  *((_BYTE *)&v115.__r_.__value_.__s + 23) = 0;
  v115.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (NeuralTTSUtils::is_amx_available(v34))
    *((_QWORD *)v8 + 90) = dispatch_pthread_root_queue_create();
  if (v8[591] < 0)
  {
    if (!*((_QWORD *)v8 + 72))
      goto LABEL_73;
    v35 = *v91;
  }
  else
  {
    v35 = v8 + 568;
    if (!v8[591])
      goto LABEL_73;
  }
  if (*v35 != 47)
  {
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, void **, _QWORD))(*(_QWORD *)v106 + 40))(&v115, v106, 1952539503, v91, 0);
    if (v8[591] < 0)
      operator delete(*v91);
    *(_OWORD *)v91 = *(_OWORD *)&v115.__r_.__value_.__l.__data_;
    *((_QWORD *)v8 + 73) = *((_QWORD *)&v115.__r_.__value_.__l + 2);
  }
LABEL_73:
  if (!*((_QWORD *)v8 + 77))
  {
    std::string::basic_string[abi:ne180100]<0>(&v115, "happy");
    std::string::basic_string[abi:ne180100]<0>(v116, "sad");
    std::string::basic_string[abi:ne180100]<0>(v117, "neutral");
    std::string::basic_string[abi:ne180100]<0>(v118, "happy_strong");
    v103 = 0;
    v104 = 0;
    v105 = 0;
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v103;
    __p[0].__r_.__value_.__s.__data_[8] = 0;
    v103 = (std::string *)operator new(0x60uLL);
    v104 = v103;
    v105 = v103 + 4;
    v87 = a2;
    v36 = 0;
    v104 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v105, (__int128 *)&v115, v119, v103);
    do
    {
      if (SHIBYTE(v118[v36 + 2]) < 0)
        operator delete((void *)v118[v36]);
      v36 -= 3;
    }
    while (v36 != -12);
    v37 = v103;
    v96 = v104;
    if (v103 != v104)
    {
      v38 = *MEMORY[0x1E0DE4F58];
      v93 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
      v39 = *MEMORY[0x1E0DE4F40];
      v94 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
      v92 = MEMORY[0x1E0DE4FB8] + 16;
      do
      {
        if (SHIBYTE(v37->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v102, v37->__r_.__value_.__l.__data_, v37->__r_.__value_.__l.__size_);
        }
        else
        {
          v40 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
          v102.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v40;
        }
        v41 = v106;
        std::operator+<char>();
        v42 = std::string::append(__p, ".txt");
        v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
        v115.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v43;
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v41 + 40))(&v101, v41, 1952539503, &v115, 0);
        if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v115.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
        if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v97, v101.__r_.__value_.__l.__data_, v101.__r_.__value_.__l.__size_);
        else
          v97 = v101;
        v98 = 0;
        v99 = 0;
        v100 = 0;
        std::ifstream::basic_ifstream(&v115);
        memset(&v114, 0, sizeof(v114));
        std::ios_base::getloc((const std::ios_base *)((char *)&v115 + *(_QWORD *)(v115.__r_.__value_.__r.__words[0] - 24)));
        v44 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
        v45 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
        std::locale::~locale((std::locale *)__p);
        std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v115, (uint64_t)&v114, v45);
        if (!std::filebuf::close())
          std::ios_base::clear((std::ios_base *)((char *)&v115 + *(_QWORD *)(v115.__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&v116[1] + *(_QWORD *)(v115.__r_.__value_.__r.__words[0] - 24)) | 4);
        std::istringstream::basic_istringstream[abi:ne180100](__p, &v114, 8);
        memset(&__str, 0, sizeof(__str));
        while (1)
        {
          v46 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (uint64_t)&__str, 0x20u);
          if ((*((_BYTE *)v46 + *(_QWORD *)(*v46 - 24) + 32) & 5) != 0)
            break;
          v47 = std::stod(&__str, 0);
          v48 = v99;
          if ((unint64_t)v99 >= v100)
          {
            v50 = (float *)v98;
            v51 = ((char *)v99 - (_BYTE *)v98) >> 2;
            v52 = v51 + 1;
            if ((unint64_t)(v51 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v53 = v100 - (_QWORD)v98;
            if ((uint64_t)(v100 - (_QWORD)v98) >> 1 > v52)
              v52 = v53 >> 1;
            if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL)
              v54 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v54 = v52;
            if (v54)
            {
              v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v100, v54);
              v50 = (float *)v98;
              v48 = v99;
            }
            else
            {
              v55 = 0;
            }
            v56 = (float *)&v55[4 * v51];
            *v56 = v47;
            v49 = v56 + 1;
            while (v48 != v50)
            {
              v57 = *((_DWORD *)v48-- - 1);
              *((_DWORD *)v56-- - 1) = v57;
            }
            v98 = v56;
            v99 = v49;
            v100 = (unint64_t)&v55[4 * v54];
            if (v50)
              operator delete(v50);
          }
          else
          {
            *v99 = v47;
            v49 = v48 + 1;
          }
          v99 = v49;
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        __p[0].__r_.__value_.__r.__words[0] = v38;
        *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + *(_QWORD *)(v38 - 24)) = v93;
        __p[0].__r_.__value_.__r.__words[2] = v92;
        if (v112 < 0)
          operator delete(v111);
        std::streambuf::~streambuf();
        std::istream::~istream();
        MEMORY[0x1DF0ECF6C](&v113);
        if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v114.__r_.__value_.__l.__data_);
        v115.__r_.__value_.__r.__words[0] = v39;
        *(std::string::size_type *)((char *)v115.__r_.__value_.__r.__words + *(_QWORD *)(v39 - 24)) = v94;
        MEMORY[0x1DF0ECB94](&v115.__r_.__value_.__r.__words[2]);
        std::istream::~istream();
        MEMORY[0x1DF0ECF6C](v120);
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v97.__r_.__value_.__l.__data_);
        v115.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
        v58 = std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v8 + 592), (unsigned __int8 *)&v102, (__int128 **)&v115)+ 40;
        if (v58 != (char *)&v98)
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v58, (char *)v98, (uint64_t)v99, ((char *)v99 - (_BYTE *)v98) >> 2);
        if (v98)
        {
          v99 = (float *)v98;
          operator delete(v98);
        }
        if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v101.__r_.__value_.__l.__data_);
        if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v102.__r_.__value_.__l.__data_);
        ++v37;
      }
      while (v37 != v96);
    }
    v115.__r_.__value_.__r.__words[0] = (std::string::size_type)&v103;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v95 + 1);
    a2 = v87;
  }
  if (v8[655] < 0)
  {
    if (!*((_QWORD *)v8 + 80))
      goto LABEL_138;
    v59 = *v90;
  }
  else
  {
    v59 = v8 + 632;
    if (!v8[655])
      goto LABEL_138;
  }
  if (*v59 != 47)
  {
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, void **, _QWORD))(*(_QWORD *)v106 + 40))(&v115, v106, 1952539503, v90, 0);
    if (v8[655] < 0)
      operator delete(*v90);
    *(_OWORD *)v90 = *(_OWORD *)&v115.__r_.__value_.__l.__data_;
    *((_QWORD *)v8 + 81) = *((_QWORD *)&v115.__r_.__value_.__l + 2);
  }
LABEL_138:
  if (v8[679] < 0)
  {
    if (!*((_QWORD *)v8 + 83))
      goto LABEL_147;
    v60 = *v89;
  }
  else
  {
    v60 = v8 + 656;
    if (!v8[679])
      goto LABEL_147;
  }
  if (*v60 != 47)
  {
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, void **, _QWORD))(*(_QWORD *)v106 + 40))(&v115, v106, 1952539503, v89, 0);
    if (v8[679] < 0)
      operator delete(*v89);
    *(_OWORD *)v89 = *(_OWORD *)&v115.__r_.__value_.__l.__data_;
    *((_QWORD *)v8 + 84) = *((_QWORD *)&v115.__r_.__value_.__l + 2);
  }
LABEL_147:
  v61 = operator new(0xC0uLL);
  v61[1] = 0;
  v61[2] = 0;
  *v61 = &off_1EA9337B0;
  v115.__r_.__value_.__r.__words[0] = TacotronAlignment::TacotronAlignment((uint64_t)(v61 + 3), a2);
  v115.__r_.__value_.__l.__size_ = (std::string::size_type)v61;
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)(v8 + 680), (__int128 *)&v115);
  size = (std::__shared_weak_count *)v115.__r_.__value_.__l.__size_;
  v63 = v88;
  if (v115.__r_.__value_.__l.__size_)
  {
    v64 = (unint64_t *)(v115.__r_.__value_.__l.__size_ + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
      v63 = v88;
    }
  }
  if (v63)
  {
    v66 = (unint64_t *)&v63->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      v68 = v63;
      ((void (*)(void))v63->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v69 = v107;
  if (v107)
  {
    v70 = (unint64_t *)&v107->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if (v9)
  {
    v72 = (unint64_t *)&v9->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v74 = (std::string::size_type *)(a1 + 8);
  v75 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v76 = v9;
    v77 = a4;
    v78 = a1;
    v79 = *(char *)(a1 + 31);
    v80 = a1 + 8;
    if (v79 < 0)
      v80 = *v74;
    v81.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(v115.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v115.__r_.__value_.__r.__words + 4) = v80;
    WORD2(v115.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&v115.__r_.__value_.__r.__words[1] + 6) = (double)((v81.__d_.__rep_ - v7.__d_.__rep_) / 1000000)
                                                                / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v75, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", (uint8_t *)&v115, 0x16u);
    a1 = v78;
    a4 = v77;
    v9 = v76;
  }
  if (*(char *)(a1 + 31) < 0)
    v74 = (std::string::size_type *)*v74;
  v82.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v83, v74, (double)((v82.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (v9)
  {
    v84 = (unint64_t *)&v9->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_QWORD *)&v86 = v8 + 24;
  *((_QWORD *)&v86 + 1) = v8;
  *a4 = v86;
}

void sub_1DEA85DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, Module *a18, uint64_t a19, void **a20,void **a21,void **a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50)
{
  std::__shared_weak_count *v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  unint64_t *p_shared_owners;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  void *v62;
  unint64_t *v63;
  unint64_t v64;

  p_shared_owners = (unint64_t *)&v50->__shared_owners_;
  do
    v55 = __ldaxr(p_shared_owners);
  while (__stlxr(v55 - 1, p_shared_owners));
  if (!v55)
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
  }
  if (v51)
  {
    v56 = (unint64_t *)&v51->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  if (a50)
  {
    v58 = (unint64_t *)&a50->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))a50->__on_zero_shared)(a50);
      std::__shared_weak_count::__release_weak(a50);
    }
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a17);
  if (*(char *)(v52 + 679) < 0)
    operator delete(*a20);
  if (*(char *)(v52 + 655) < 0)
    operator delete(*a21);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table(a32);
  if (*(char *)(v52 + 591) < 0)
    operator delete(*a22);
  std::mutex::~mutex((std::mutex *)(v52 + 488));
  Module::~Module(a18);
  if (v51)
  {
    v60 = (unint64_t *)&v51->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v52);
  operator delete(v62);
  if (v51)
  {
    v63 = (unint64_t *)&v51->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoTacotronModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoTacotronModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoTacotronModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoTacotronModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<EspressoTacotronModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934188;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EspressoTacotronModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934188;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<EspressoTacotronModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<LPCFilterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<LPCFilterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92E6A0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<LPCFilterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<LPCFilterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92E6A0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<LPCFilterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<LPCFilterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92E6A0;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA86438(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<LPCFilterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<LPCFilterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92E6A0;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<LPCFilterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<LPCFilterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<LPCFilterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<LPCFilterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<LPCFilterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<LPCFilterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()(uint64_t a1@<X0>, char *a2@<X1>, int64x2_t *a3@<X2>, _OWORD *a4@<X8>)
{
  std::chrono::steady_clock::time_point v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  BOOL v22;
  float v23;
  float v24;
  float v25;
  char *v26;
  void **v27;
  void **v28;
  int v29;
  void **v30;
  int v31;
  long double v32;
  long double v33;
  float v34;
  unint64_t v35;
  float *v36;
  float *v37;
  float *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  float *v44;
  int v45;
  float v46;
  unint64_t v47;
  float *v48;
  float *v49;
  float *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  float *v56;
  int v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64x2_t v62;
  uint64_t v63;
  int64x2_t v64;
  double v65;
  float v66;
  float v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  __int128 v71;
  std::__shared_weak_count *v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  _QWORD *v77;
  NSObject *v78;
  _QWORD *v79;
  std::chrono::steady_clock::time_point v80;
  std::chrono::steady_clock::time_point v81;
  const char *v82;
  unint64_t *v83;
  unint64_t v84;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  _OWORD *v86;
  _OWORD *v88;
  __int128 v89;
  std::__shared_weak_count *v90;
  float64x2_t v91;
  int64x2_t v92;
  float64x2_t v93;
  uint64x2_t v94;
  float64x2_t __x;
  double v96;
  int32x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int v100;
  int64x2_t v101;
  _BYTE buf[24];
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  v98 = *a3;
  a3->i64[0] = 0;
  a3->i64[1] = 0;
  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v7 = operator new(0x138uLL);
  v8 = v7;
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_1EA932E48;
  v9 = v7 + 3;
  if (v98.i64[1])
  {
    v10 = (unint64_t *)(v98.i64[1] + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v101 = v98;
    v12 = (unint64_t *)(v98.i64[1] + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  else
  {
    v101 = (int64x2_t)v98.u64[0];
  }
  *((_QWORD *)&v89 + 1) = v7;
  v90 = (std::__shared_weak_count *)v98.i64[1];
  Module::Module((uint64_t)(v7 + 3), a2, v101.i64);
  v14 = (std::__shared_weak_count *)v101.i64[1];
  if (v101.i64[1])
  {
    v15 = (unint64_t *)(v101.i64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v8[3] = &off_1EA91DED0;
  v8[37] = 0;
  v8[38] = 0;
  v88 = v8 + 37;
  *(_QWORD *)&v89 = v9;
  std::string::basic_string[abi:ne180100]<0>(buf, "orderlpc");
  v100 = 12;
  v17 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)buf, (unsigned int *)&v100);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  std::string::basic_string[abi:ne180100]<0>(buf, "sampling_frequency");
  v100 = 24000;
  v18 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)buf, (unsigned int *)&v100);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  std::string::basic_string[abi:ne180100]<0>(buf, "frame_size_ms");
  v100 = 30;
  v19 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)buf, (unsigned int *)&v100);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  std::string::basic_string[abi:ne180100]<0>(buf, "frame_shift_ms");
  if (v19 >= 0)
    v20 = v19;
  else
    v20 = v19 + 1;
  v100 = v20 >> 1;
  v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)buf, (unsigned int *)&v100);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  std::string::basic_string[abi:ne180100]<0>(buf, "scaling");
  LOBYTE(v100) = 0;
  v22 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(a2, (const void **)buf, (unsigned __int8 *)&v100);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  std::string::basic_string[abi:ne180100]<0>(buf, "a1");
  v100 = 1059481190;
  v23 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>((unsigned __int8 *)a2, (const void **)buf, (uint64_t)&v100);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  std::string::basic_string[abi:ne180100]<0>(buf, "a2");
  v100 = 1061158912;
  v24 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>((unsigned __int8 *)a2, (const void **)buf, (uint64_t)&v100);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  std::string::basic_string[abi:ne180100]<0>(buf, "a3");
  v100 = 1041865114;
  v25 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>((unsigned __int8 *)a2, (const void **)buf, (uint64_t)&v100);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  rep = v6.__d_.__rep_;
  v86 = a4;
  v26 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v26 + 1) = 0;
  *((_QWORD *)v26 + 2) = 0;
  *(_QWORD *)v26 = &off_1EA935D18;
  *((_DWORD *)v26 + 6) = v17;
  *((_OWORD *)v26 + 2) = 0u;
  v27 = (void **)(v26 + 32);
  v28 = (void **)(v26 + 56);
  *((_OWORD *)v26 + 3) = 0u;
  *((_OWORD *)v26 + 4) = 0u;
  *((float *)v26 + 20) = v25;
  v26[84] = v22;
  *((_DWORD *)v26 + 26) = v18;
  *((_OWORD *)v26 + 7) = 0u;
  v29 = v19 * v18 / 1000;
  *((_OWORD *)v26 + 10) = 0u;
  v30 = (void **)(v26 + 160);
  *((_OWORD *)v26 + 8) = 0u;
  *((_OWORD *)v26 + 9) = 0u;
  *((_QWORD *)v26 + 22) = 0;
  *((_DWORD *)v26 + 22) = v29;
  *((_DWORD *)v26 + 23) = v19;
  *((_DWORD *)v26 + 24) = v21 * v18 / 1000;
  *((_DWORD *)v26 + 25) = v21;
  if ((v17 & 0x80000000) == 0)
  {
    v31 = 0;
    v32 = v23;
    v33 = v24;
    do
    {
      v34 = pow(v32, (double)v31);
      v36 = (float *)*((_QWORD *)v26 + 5);
      v35 = *((_QWORD *)v26 + 6);
      if ((unint64_t)v36 >= v35)
      {
        v38 = (float *)*v27;
        v39 = ((char *)v36 - (_BYTE *)*v27) >> 2;
        v40 = v39 + 1;
        if ((unint64_t)(v39 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v41 = v35 - (_QWORD)v38;
        if (v41 >> 1 > v40)
          v40 = v41 >> 1;
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
          v42 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v42 = v40;
        if (v42)
        {
          v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v26 + 48), v42);
          v38 = (float *)*((_QWORD *)v26 + 4);
          v36 = (float *)*((_QWORD *)v26 + 5);
        }
        else
        {
          v43 = 0;
        }
        v44 = (float *)&v43[4 * v39];
        *v44 = v34;
        v37 = v44 + 1;
        while (v36 != v38)
        {
          v45 = *((_DWORD *)v36-- - 1);
          *((_DWORD *)v44-- - 1) = v45;
        }
        *((_QWORD *)v26 + 4) = v44;
        *((_QWORD *)v26 + 5) = v37;
        *((_QWORD *)v26 + 6) = &v43[4 * v42];
        if (v38)
          operator delete(v38);
      }
      else
      {
        *v36 = v34;
        v37 = v36 + 1;
      }
      *((_QWORD *)v26 + 5) = v37;
      v46 = pow(v33, (double)v31);
      v48 = (float *)*((_QWORD *)v26 + 8);
      v47 = *((_QWORD *)v26 + 9);
      if ((unint64_t)v48 >= v47)
      {
        v50 = (float *)*v28;
        v51 = ((char *)v48 - (_BYTE *)*v28) >> 2;
        v52 = v51 + 1;
        if ((unint64_t)(v51 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v53 = v47 - (_QWORD)v50;
        if (v53 >> 1 > v52)
          v52 = v53 >> 1;
        if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL)
          v54 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v54 = v52;
        if (v54)
        {
          v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v26 + 72), v54);
          v50 = (float *)*((_QWORD *)v26 + 7);
          v48 = (float *)*((_QWORD *)v26 + 8);
        }
        else
        {
          v55 = 0;
        }
        v56 = (float *)&v55[4 * v51];
        *v56 = v46;
        v49 = v56 + 1;
        while (v48 != v50)
        {
          v57 = *((_DWORD *)v48-- - 1);
          *((_DWORD *)v56-- - 1) = v57;
        }
        *((_QWORD *)v26 + 7) = v56;
        *((_QWORD *)v26 + 8) = v49;
        *((_QWORD *)v26 + 9) = &v55[4 * v54];
        if (v50)
          operator delete(v50);
      }
      else
      {
        *v48 = v46;
        v49 = v48 + 1;
      }
      *((_QWORD *)v26 + 8) = v49;
    }
    while (v31++ < *((_DWORD *)v26 + 6));
    v29 = *((_DWORD *)v26 + 22);
  }
  v59 = (v29 + 2);
  std::vector<float>::vector(buf, (int)v59);
  v60 = *(_QWORD *)buf;
  if (v29 >= -1)
  {
    v61 = 0;
    v94 = (uint64x2_t)vdupq_n_s64(v59 - 1);
    v62 = (uint64x2_t)xmmword_1DEC3D320;
    v92 = vdupq_n_s64(2uLL);
    v93 = (float64x2_t)vdupq_n_s64(0x401921FB54442D18uLL);
    v63 = (v59 + 1) & 0x1FFFFFFFELL;
    v91 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(v29 + 1)), 0);
    do
    {
      v99 = (int64x2_t)v62;
      v97 = vmovn_s64((int64x2_t)vcgeq_u64(v94, v62));
      v64.i64[0] = (int)v61;
      v64.i64[1] = (int)v61 + 1;
      __x = vdivq_f64(vmulq_f64(vcvtq_f64_s64(v64), v93), v91);
      v96 = cos(__x.f64[1]);
      v65 = cos(__x.f64[0]);
      if ((v97.i8[0] & 1) != 0)
      {
        v66 = (1.0 - v65) * 0.5;
        *(float *)(v60 + 4 * v61) = v66;
      }
      if ((v97.i8[4] & 1) != 0)
      {
        v67 = (1.0 - v96) * 0.5;
        *(float *)(v60 + 4 * v61 + 4) = v67;
      }
      v61 += 2;
      v62 = (uint64x2_t)vaddq_s64(v99, v92);
    }
    while (v63 != v61);
  }
  v68 = *(_QWORD *)&buf[8] - 4;
  *(_QWORD *)&buf[8] = v68;
  v69 = v68 - (v60 + 4);
  if (v68 != v60 + 4)
    memmove((void *)v60, (const void *)(v60 + 4), v68 - (v60 + 4));
  *(_QWORD *)&buf[8] = v60 + v69;
  v70 = *v30;
  if (*v30)
  {
    *((_QWORD *)v26 + 21) = v70;
    operator delete(v70);
    *v30 = 0;
    *((_QWORD *)v26 + 21) = 0;
    *((_QWORD *)v26 + 22) = 0;
  }
  *((_OWORD *)v26 + 10) = *(_OWORD *)buf;
  *((_QWORD *)v26 + 22) = *(_QWORD *)&buf[16];
  *(_QWORD *)&v71 = v26 + 24;
  *((_QWORD *)&v71 + 1) = v26;
  v72 = *(std::__shared_weak_count **)(*((_QWORD *)&v89 + 1) + 304);
  *v88 = v71;
  if (v72)
  {
    p_shared_owners = (unint64_t *)&v72->__shared_owners_;
    do
      v74 = __ldaxr(p_shared_owners);
    while (__stlxr(v74 - 1, p_shared_owners));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  if (v90)
  {
    v75 = (unint64_t *)&v90->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v77 = (_QWORD *)(a1 + 8);
  v78 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v79 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v79 = (_QWORD *)*v77;
    v80.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v79;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)((v80.__d_.__rep_ - rep) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v78, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v77 = (_QWORD *)*v77;
  v81.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v82, v77, (double)((v81.__d_.__rep_ - rep) / 1000000) / 1000.0);
  if (v90)
  {
    v83 = (unint64_t *)&v90->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  *v86 = v89;
}

void sub_1DEA86D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, Module *a16, std::__shared_weak_count *a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,__int128 a33)
{
  void **v33;
  std::__shared_weak_count *v34;
  void **v35;
  void **v36;
  std::__shared_weak_count_vtbl *v38;
  std::__shared_weak_count_vtbl *shared_weak_owners;
  std::__shared_weak_count_vtbl *v40;
  void *v41;
  void *v42;
  void *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  void *v46;
  unint64_t *v47;
  unint64_t v48;

  v38 = (std::__shared_weak_count_vtbl *)*v33;
  if (*v33)
  {
    v34[7].__vftable = v38;
    operator delete(v38);
  }
  shared_weak_owners = (std::__shared_weak_count_vtbl *)v34[5].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    v34[6].__vftable = shared_weak_owners;
    operator delete(shared_weak_owners);
  }
  v40 = *(std::__shared_weak_count_vtbl **)a33;
  if (*(_QWORD *)a33)
  {
    v34[5].__vftable = v40;
    operator delete(v40);
  }
  v41 = *v36;
  if (*v36)
  {
    v34[2].__shared_weak_owners_ = (uint64_t)v41;
    operator delete(v41);
  }
  v42 = *v35;
  if (*v35)
  {
    v34[1].__shared_weak_owners_ = (uint64_t)v42;
    operator delete(v42);
  }
  std::__shared_weak_count::~__shared_weak_count(v34);
  operator delete(v43);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a15);
  Module::~Module(a16);
  if (a18)
  {
    p_shared_owners = (unint64_t *)&a18->__shared_owners_;
    do
      v45 = __ldaxr(p_shared_owners);
    while (__stlxr(v45 - 1, p_shared_owners));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
      std::__shared_weak_count::__release_weak(a18);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(a17);
  operator delete(v46);
  if (a18)
  {
    v47 = (unint64_t *)&a18->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
      std::__shared_weak_count::__release_weak(a18);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<LPCFilterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<LPCFilterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<LPCFilterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<LPCFilterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<LPCFilterModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932E48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LPCFilterModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932E48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<LPCFilterModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<TextPreprocessing>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<TextPreprocessing>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92E908;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<TextPreprocessing>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<TextPreprocessing>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92E908;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<TextPreprocessing>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<TextPreprocessing>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92E908;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA870D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<TextPreprocessing>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<TextPreprocessing>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92E908;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<TextPreprocessing>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<TextPreprocessing>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<TextPreprocessing>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<TextPreprocessing>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<TextPreprocessing>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<TextPreprocessing>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  _QWORD *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  std::string::size_type size;
  NSObject *v17;
  const char *v18;
  std::string *v19;
  std::string *v20;
  _QWORD *v21;
  uint64_t v22;
  NSObject *v23;
  const char *v24;
  __n128 *v25;
  std::string::size_type v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t **v32;
  std::string::size_type v33;
  std::string::size_type v34;
  uint64_t **v35;
  uint64_t *v36;
  uint64_t **v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t **v41;
  BOOL v42;
  std::string::size_type v43;
  std::string::size_type v44;
  uint64_t *v45;
  uint64_t **v46;
  std::string::size_type v47;
  std::string::size_type v48;
  char *v49;
  std::string *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  std::string::size_type v56;
  std::string::size_type v57;
  uint64_t *v58;
  std::string::size_type v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::string::size_type *v69;
  NSObject *v70;
  uint64_t v71;
  int v72;
  std::string::size_type v73;
  std::chrono::steady_clock::time_point v74;
  std::chrono::steady_clock::time_point v75;
  const char *v76;
  unint64_t *v77;
  unint64_t v78;
  __n128 result;
  NSObject *v80;
  const char *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  nlohmann::detail::exception *exception;
  char *v86;
  std::string *v87;
  __int128 v88;
  uint64_t v89;
  std::chrono::steady_clock::time_point v90;
  __int128 v91;
  uint64_t **v92;
  uint64_t *v93;
  uint64_t v94;
  char v95[8];
  uint64_t *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  std::string v99;
  __int128 v100;
  uint64_t **v101;
  uint64_t *v102;
  uint64_t v103;
  std::string __p[2];
  std::string v105;
  _BYTE v106[24];
  _BYTE *v107;
  std::string buf[17];
  _QWORD v109[23];

  v109[20] = *MEMORY[0x1E0C80C00];
  v91 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v90.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v7 = operator new(0x150uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_1EA9337E8;
  if (*((_QWORD *)&v91 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    v100 = v91;
    v10 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  else
  {
    v100 = (unint64_t)v91;
  }
  Module::Module((uint64_t)(v7 + 3), a2, (uint64_t *)&v100);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
  if (*((_QWORD *)&v100 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v7[3] = &off_1EA91EEB8;
  v15 = v7 + 38;
  v7[37] = v7 + 38;
  v7[38] = 0;
  v7[40] = 0;
  v7[41] = 0;
  v7[39] = 0;
  std::string::basic_string[abi:ne180100]<0>(buf, "text_mapping_file");
  memset(__p, 0, 24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::string,0>(a2, (const void **)&buf[0].__r_.__value_.__l.__data_, (uint64_t)__p, &v99);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf[0].__r_.__value_.__l.__data_);
  SharedObjectPool::get<VoiceConfig>(&v97, (__int128 **)v91);
  size = HIBYTE(v99.__r_.__value_.__r.__words[2]);
  if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v99.__r_.__value_.__l.__size_;
  if (!size)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v23 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1DE3F6000, v23, OS_LOG_TYPE_DEFAULT, "Reading rule file from: preprocess_rule.dat", (uint8_t *)buf, 2u);
    }
    Diagnostics::log(5, "Reading rule file from: preprocess_rule.dat", v24);
    SharedObjectPool::get_if<FrontendEnvironment>(__p, v91);
    v25 = a4;
    if (__p[0].__r_.__value_.__r.__words[0])
    {
      (*(void (**)(std::string *__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(__p[0].__r_.__value_.__r.__words[0]
                                                                                                + 96)
                                                                                  + 32))(buf, *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] + 96), 1886417510, 1);
      v26 = HIBYTE(buf[0].__r_.__value_.__r.__words[2]);
      if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v26 = buf[0].__r_.__value_.__l.__size_;
      if (v26)
      {
        FastRewriter::create(&v105, (std::string::value_type *)buf);
        std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)(v7 + 40), (__int128 *)&v105);
        v27 = (std::__shared_weak_count *)v105.__r_.__value_.__l.__size_;
        if (v105.__r_.__value_.__l.__size_)
        {
          v28 = (unint64_t *)(v105.__r_.__value_.__l.__size_ + 8);
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        (*(void (**)(_QWORD))(*(_QWORD *)v7[40] + 24))(v7[40]);
      }
      else
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v80 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v105.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1DE3F6000, v80, OS_LOG_TYPE_ERROR, "preprocess_rule.dat is missing, please use either text_mapping_file or preprocess_rule.dat", (uint8_t *)&v105, 2u);
        }
        Diagnostics::log(3, "preprocess_rule.dat is missing, please use either text_mapping_file or preprocess_rule.dat", v81);
      }
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    v82 = (std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_;
    if (__p[0].__r_.__value_.__l.__size_)
    {
      v83 = (unint64_t *)(__p[0].__r_.__value_.__l.__size_ + 8);
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    goto LABEL_132;
  }
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v97 + 40))(buf, v97, 1954050162, &v99, 0);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v99.__r_.__value_.__l.__data_);
  v99 = buf[0];
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v17 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v19 = &v99;
    if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v19 = (std::string *)v99.__r_.__value_.__r.__words[0];
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v19;
    _os_log_impl(&dword_1DE3F6000, v17, OS_LOG_TYPE_DEFAULT, "Reading text_mapping_file from: %s", (uint8_t *)buf, 0xCu);
  }
  v20 = &v99;
  if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v20 = (std::string *)v99.__r_.__value_.__r.__words[0];
  Diagnostics::log(5, "Reading text_mapping_file from: %s", v18, v20);
  std::ifstream::basic_ifstream(buf);
  v107 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parse<std::ifstream &>(buf, (uint64_t)v106, 1, (uint64_t)v95);
  v21 = v107;
  if (v107 == v106)
  {
    v22 = 4;
    v21 = v106;
    goto LABEL_48;
  }
  if (v107)
  {
    v22 = 5;
LABEL_48:
    (*(void (**)(void))(*v21 + 8 * v22))();
  }
  v93 = 0;
  v94 = 0;
  if (v95[0] != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    if (v95[0] > 9uLL)
      v86 = "number";
    else
      v86 = off_1EA94C758[v95[0]];
    std::string::basic_string[abi:ne180100]<0>(&v105, v86);
    v87 = std::string::insert(&v105, 0, "type must be object, but is ");
    v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
    __p[0].__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v88;
    v87->__r_.__value_.__l.__size_ = 0;
    v87->__r_.__value_.__r.__words[2] = 0;
    v87->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(302, (uint64_t)__p, exception);
  }
  v89 = a1;
  v102 = 0;
  v103 = 0;
  v101 = &v102;
  v30 = v96 + 1;
  v31 = (uint64_t *)*v96;
  if ((uint64_t *)*v96 != v96 + 1)
  {
    v32 = &v102;
    while (1)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)(v31 + 7), &v105);
      if (*((char *)v31 + 55) < 0)
        std::string::__init_copy_ctor_external(__p, (const std::string::value_type *)v31[4], v31[5]);
      else
        __p[0] = *(std::string *)(v31 + 4);
      __p[1] = v105;
      if (&v102 == v32)
        goto LABEL_64;
      v33 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v33 = __p[0].__r_.__value_.__l.__size_;
      v34 = *((unsigned __int8 *)v32 + 55);
      if ((v34 & 0x80u) != 0)
        v34 = (std::string::size_type)v32[5];
      if (v33 >= v34)
      {
LABEL_64:
        v38 = *v32;
        v39 = (uint64_t *)v32;
        if (v101 == v32)
          goto LABEL_83;
        v40 = *v32;
        v41 = v32;
        if (v38)
        {
          do
          {
            v39 = v40;
            v40 = (uint64_t *)v40[1];
          }
          while (v40);
        }
        else
        {
          do
          {
            v39 = v41[2];
            v42 = *v39 == (_QWORD)v41;
            v41 = (uint64_t **)v39;
          }
          while (v42);
        }
        if (*((char *)v39 + 55) >= 0)
          v43 = *((unsigned __int8 *)v39 + 55);
        else
          v43 = v39[5];
        v44 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v44 = __p[0].__r_.__value_.__l.__size_;
        if (v43 >= v44)
        {
LABEL_83:
          v35 = (uint64_t **)(v39 + 1);
          if (v38)
            v32 = (uint64_t **)v39;
          else
            v35 = v32;
        }
        else
        {
          v45 = v102;
          v32 = &v102;
          v46 = &v102;
          if (!v102)
            goto LABEL_87;
          do
          {
            while (1)
            {
              v32 = (uint64_t **)v45;
              v47 = *((unsigned __int8 *)v45 + 55);
              if ((v47 & 0x80u) != 0)
                v47 = (std::string::size_type)v32[5];
              if (v44 < v47)
                break;
              v45 = *v32;
              v46 = v32;
              if (!*v32)
                goto LABEL_87;
            }
            v45 = v32[1];
          }
          while (v45);
LABEL_123:
          v35 = v32 + 1;
        }
      }
      else
      {
        v35 = v32 + 1;
        v36 = v32[1];
        if (v36)
        {
          do
          {
            v35 = (uint64_t **)v36;
            v36 = (uint64_t *)*v36;
            v32 = v35;
            v37 = v35;
          }
          while (v36);
        }
        else
        {
          v37 = v32;
          do
          {
            v55 = (uint64_t *)v37;
            v37 = (uint64_t **)v37[2];
          }
          while (*v37 != v55);
        }
        if (v37 != &v102)
        {
          v56 = *((unsigned __int8 *)v37 + 55);
          v57 = (std::string::size_type)v37[5];
          if ((v56 & 0x80u) == 0)
            v57 = v56;
          if (v33 < v57)
          {
            v58 = v102;
            v32 = &v102;
            v46 = &v102;
            if (v102)
            {
              do
              {
                while (1)
                {
                  v32 = (uint64_t **)v58;
                  v59 = *((unsigned __int8 *)v58 + 55);
                  if ((v59 & 0x80u) != 0)
                    v59 = (std::string::size_type)v32[5];
                  if (v33 >= v59)
                    break;
                  v58 = v32[1];
                  if (!v58)
                    goto LABEL_123;
                }
                v58 = *v32;
                v46 = v32;
              }
              while (*v32);
            }
LABEL_87:
            v49 = (char *)operator new(0x50uLL);
            v105.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
            v105.__r_.__value_.__l.__size_ = (std::string::size_type)&v102;
            v105.__r_.__value_.__s.__data_[16] = 0;
            v50 = (std::string *)(v49 + 32);
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v50, __p[0].__r_.__value_.__l.__data_, __p[0].__r_.__value_.__l.__size_);
              v51 = (uint64_t *)v105.__r_.__value_.__r.__words[0];
            }
            else
            {
              *(_OWORD *)&v50->__r_.__value_.__l.__data_ = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
              *((_QWORD *)v49 + 6) = *((_QWORD *)&__p[0].__r_.__value_.__l + 2);
              v51 = (uint64_t *)v49;
            }
            *(std::string *)(v49 + 56) = __p[1];
            memset(&__p[1], 0, sizeof(std::string));
            v105.__r_.__value_.__s.__data_[16] = 1;
            *v51 = 0;
            v51[1] = 0;
            v51[2] = (uint64_t)v46;
            *v32 = v51;
            if (*v101)
            {
              v101 = (uint64_t **)*v101;
              v51 = *v32;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v102, v51);
            ++v103;
            v48 = v105.__r_.__value_.__r.__words[0];
            v105.__r_.__value_.__r.__words[0] = 0;
            std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&v105, 0);
            goto LABEL_93;
          }
        }
      }
      v46 = v32;
      v48 = (std::string::size_type)*v35;
      v32 = v35;
      if (!*v35)
        goto LABEL_87;
LABEL_93:
      v52 = *(uint64_t **)(v48 + 8);
      if (v52)
      {
        do
        {
          v32 = (uint64_t **)v52;
          v52 = (uint64_t *)*v52;
        }
        while (v52);
      }
      else
      {
        do
        {
          v32 = *(uint64_t ***)(v48 + 16);
          v42 = *v32 == (uint64_t *)v48;
          v48 = (std::string::size_type)v32;
        }
        while (!v42);
      }
      if (SHIBYTE(__p[1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[1].__r_.__value_.__l.__data_);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      v53 = (uint64_t *)v31[1];
      if (v53)
      {
        do
        {
          v54 = v53;
          v53 = (uint64_t *)*v53;
        }
        while (v53);
      }
      else
      {
        do
        {
          v54 = (uint64_t *)v31[2];
          v42 = *v54 == (_QWORD)v31;
          v31 = v54;
        }
        while (!v42);
      }
      v31 = v54;
      if (v54 == v30)
      {
        v60 = v93;
        v15 = v7 + 38;
        goto LABEL_125;
      }
    }
  }
  v60 = 0;
LABEL_125:
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,TextPreprocessing::compare_by_string_length,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v60);
  v61 = v102;
  v92 = v101;
  v93 = v102;
  v94 = v103;
  a1 = v89;
  if (v103)
  {
    v102[2] = (uint64_t)&v93;
    v101 = &v102;
    v102 = 0;
    v103 = 0;
    v61 = 0;
  }
  else
  {
    v92 = &v93;
  }
  v25 = a4;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,TextPreprocessing::compare_by_string_length,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v61);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,TextPreprocessing::compare_by_string_length,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)v7[38]);
  v62 = v93;
  v7[37] = v92;
  v7[38] = v62;
  v63 = v94;
  v7[39] = v94;
  if (v63)
  {
    v62[2] = (uint64_t)v15;
    v93 = 0;
    v94 = 0;
    v62 = 0;
  }
  else
  {
    v7[37] = v15;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,TextPreprocessing::compare_by_string_length,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v62);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v96, v95[0]);
  buf[0].__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F40];
  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words
                            + *(_QWORD *)(buf[0].__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40]
                                                                                                 + 24);
  MEMORY[0x1DF0ECB94](&buf[0].__r_.__value_.__r.__words[2]);
  std::istream::~istream();
  MEMORY[0x1DF0ECF6C](v109);
LABEL_132:
  v64 = v98;
  if (v98)
  {
    p_shared_owners = (unint64_t *)&v98->__shared_owners_;
    do
      v66 = __ldaxr(p_shared_owners);
    while (__stlxr(v66 - 1, p_shared_owners));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v99.__r_.__value_.__l.__data_);
  if (*((_QWORD *)&v91 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v91 + 1) + 16))(*((_QWORD *)&v91 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v91 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v69 = (std::string::size_type *)(a1 + 8);
  v70 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v71 = a1;
    v72 = *(char *)(a1 + 31);
    v73 = a1 + 8;
    if (v72 < 0)
      v73 = *v69;
    v74.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v73;
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = (double)((v74.__d_.__rep_ - v90.__d_.__rep_)
                                                                           / 1000000)
                                                                  / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v70, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", (uint8_t *)buf, 0x16u);
    a1 = v71;
  }
  if (*(char *)(a1 + 31) < 0)
    v69 = (std::string::size_type *)*v69;
  v75.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v76, v69, (double)((v75.__d_.__rep_ - v90.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v91 + 1))
  {
    v77 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v91 + 1) + 16))(*((_QWORD *)&v91 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v91 + 1));
    }
  }
  result.n128_u64[0] = (unint64_t)(v7 + 3);
  result.n128_u64[1] = (unint64_t)v7;
  *v25 = result;
  return result;
}

void sub_1DEA87D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, Module *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,std::__shared_weak_count *a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  std::__shared_weak_count *v61;
  _QWORD **v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  void *v72;
  unint64_t *v73;
  unint64_t v74;

  if (a61 < 0)
    operator delete(__p);
  if (a43)
  {
    p_shared_owners = (unint64_t *)&a43->__shared_owners_;
    do
      v67 = __ldaxr(p_shared_owners);
    while (__stlxr(v67 - 1, p_shared_owners));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))a43->__on_zero_shared)(a43);
      std::__shared_weak_count::__release_weak(a43);
    }
  }
  if (a28)
  {
    v68 = (unint64_t *)&a28->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))a28->__on_zero_shared)(a28);
      std::__shared_weak_count::__release_weak(a28);
    }
  }
  if (a34 < 0)
    operator delete(a29);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v63);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,TextPreprocessing::compare_by_string_length,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*v62);
  Module::~Module(a17);
  if (v64)
  {
    v70 = (unint64_t *)&v64->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v61);
  operator delete(v72);
  if (v64)
  {
    v73 = (unint64_t *)&v64->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<TextPreprocessing>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<TextPreprocessing>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<TextPreprocessing>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<TextPreprocessing>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<TextPreprocessing>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9337E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TextPreprocessing>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9337E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<TextPreprocessing>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<TextSplitModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<TextSplitModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92E750;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<TextSplitModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<TextSplitModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92E750;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<TextSplitModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<TextSplitModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92E750;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA881E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<TextSplitModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<TextSplitModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92E750;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<TextSplitModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<TextSplitModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<TextSplitModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<TextSplitModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<TextSplitModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<TextSplitModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  NSObject *v25;
  unint64_t v26;
  __n128 *v27;
  _QWORD *v28;
  std::chrono::steady_clock::time_point v29;
  std::chrono::steady_clock::time_point v30;
  const char *v31;
  unint64_t *v32;
  unint64_t v33;
  __n128 result;
  __int128 v35;
  unsigned int v36;
  __int128 v37;
  _BYTE __p[24];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v35 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x148uLL);
  v9 = (unint64_t)v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA933120;
  v10 = (unint64_t)(v8 + 3);
  if (*((_QWORD *)&v35 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    v37 = v35;
    v13 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  else
  {
    v37 = (unint64_t)v35;
  }
  Module::Module((uint64_t)(v8 + 3), a2, (uint64_t *)&v37);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
  if (*((_QWORD *)&v37 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *(_QWORD *)(v9 + 24) = &off_1EA91E378;
  *(_QWORD *)(v9 + 312) = 0;
  *(_QWORD *)(v9 + 320) = 0;
  v18 = v9 + 312;
  *(_QWORD *)(v9 + 304) = v9 + 312;
  std::string::basic_string[abi:ne180100]<0>(__p, "max_word_limit_per_utt");
  v36 = 50;
  *(_DWORD *)(v9 + 296) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)__p, &v36);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v19 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "split_punctuation");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::set<std::string>,std::set<std::string>,0>((uint64_t)__p, v19);
  std::__tree<std::string>::destroy(v9 + 304, *(char **)(v9 + 312));
  v20 = *(_QWORD *)&__p[8];
  *(_QWORD *)(v9 + 304) = *(_QWORD *)__p;
  *(_QWORD *)(v9 + 312) = v20;
  v21 = *(_QWORD *)&__p[16];
  *(_QWORD *)(v9 + 320) = *(_QWORD *)&__p[16];
  if (v21)
  {
    *(_QWORD *)(v20 + 16) = v18;
    *(_QWORD *)__p = &__p[8];
    *(_QWORD *)&__p[8] = 0;
    *(_QWORD *)&__p[16] = 0;
    v20 = 0;
  }
  else
  {
    *(_QWORD *)(v9 + 304) = v18;
  }
  std::__tree<std::string>::destroy((uint64_t)__p, (char *)v20);
  if (*((_QWORD *)&v35 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v35 + 1) + 16))(*((_QWORD *)&v35 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v35 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v24 = (_QWORD *)(a1 + 8);
  v25 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v26 = v10;
    v27 = a4;
    v28 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v28 = (_QWORD *)*v24;
    v29.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v28;
    *(_WORD *)&__p[12] = 2048;
    *(double *)&__p[14] = (double)((v29.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v25, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", __p, 0x16u);
    a4 = v27;
    v10 = v26;
  }
  if (*(char *)(a1 + 31) < 0)
    v24 = (_QWORD *)*v24;
  v30.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v31, v24, (double)((v30.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v35 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v35 + 1) + 16))(*((_QWORD *)&v35 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v35 + 1));
    }
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_1DEA885F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  Module *v23;
  uint64_t v24;
  char **v25;
  unint64_t *p_shared_owners;
  unint64_t v28;
  void *v29;
  unint64_t *v30;
  unint64_t v31;

  if (a21 < 0)
    operator delete(__p);
  std::__tree<std::string>::destroy(v24, *v25);
  Module::~Module(v23);
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v22);
  operator delete(v29);
  if (v21)
  {
    v30 = (unint64_t *)&v21->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<TextSplitModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<TextSplitModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<TextSplitModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<TextSplitModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<TextSplitModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933120;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TextSplitModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933120;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<TextSplitModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PhonewiseFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PhonewiseFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92EF90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PhonewiseFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PhonewiseFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92EF90;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PhonewiseFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PhonewiseFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92EF90;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA88874(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PhonewiseFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PhonewiseFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92EF90;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PhonewiseFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PhonewiseFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PhonewiseFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PhonewiseFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PhonewiseFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PhonewiseFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __n128 *v18;
  void **v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  float v46;
  unint64_t *v47;
  unint64_t v48;
  __int128 v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  __int128 v53;
  unint64_t *v54;
  unint64_t *v55;
  unint64_t v56;
  std::string::size_type *v57;
  NSObject *v58;
  std::string::size_type v59;
  std::chrono::steady_clock::time_point v60;
  std::chrono::steady_clock::time_point v61;
  const char *v62;
  unint64_t *v63;
  unint64_t v64;
  __n128 result;
  void *exception;
  unint64_t v67;
  __int128 v68;
  uint64_t v69[3];
  uint64_t v70;
  __int128 v71;
  std::string __p;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v68 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x150uLL);
  v9 = (unint64_t)v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA934348;
  v10 = v8 + 3;
  if (*((_QWORD *)&v68 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    *(_OWORD *)v69 = v68;
    v13 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  else
  {
    *(_OWORD *)v69 = (unint64_t)v68;
  }
  Module::Module((uint64_t)(v8 + 3), a2, v69);
  v15 = (std::__shared_weak_count *)v69[1];
  if (v69[1])
  {
    v16 = (unint64_t *)(v69[1] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v67 = (unint64_t)v10;
  v18 = a4;
  *(_QWORD *)(v9 + 24) = &off_1EA920568;
  v19 = (void **)(v9 + 296);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v9 + 296), &byte_1DEBD87CE);
  *(_QWORD *)(v9 + 320) = 0;
  *(_QWORD *)(v9 + 328) = 0;
  v20 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "model_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v20, &__p);
  if (*(char *)(v9 + 319) < 0)
    operator delete(*v19);
  *(_OWORD *)v19 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_QWORD *)(v9 + 312) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  if (*(char *)(v9 + 319) < 0)
  {
    v22 = *(_QWORD *)(v9 + 304);
    if (v22 != 8)
    {
      if (v22 != 11)
        goto LABEL_94;
      v21 = (uint64_t *)*v19;
      goto LABEL_22;
    }
    v33 = *(void **)*v19;
  }
  else
  {
    if (*(_BYTE *)(v9 + 319) != 8)
    {
      v21 = (uint64_t *)(v9 + 296);
      if (*(_BYTE *)(v9 + 319) != 11)
        goto LABEL_94;
LABEL_22:
      v23 = *v21;
      v24 = *(uint64_t *)((char *)v21 + 3);
      if (v23 != 0x6565707374736166 || v24 != 0x3268636565707374)
      {
LABEL_94:
        exception = __cxa_allocate_exception(0x10uLL);
        StringFormatter::StringFormatter((StringFormatter *)&__p, "model_type must be specified to be either tacotron or fastspeech2.");
        MEMORY[0x1DF0EC99C](exception, &__p);
        __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
      v26 = operator new(0x90uLL);
      v27 = v26;
      v26[1] = 0;
      v26[2] = 0;
      *v26 = &off_1EA934E70;
      v28 = v26 + 3;
      if (*((_QWORD *)&v68 + 1))
      {
        v29 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
        v71 = v68;
        v31 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      else
      {
        v71 = (unint64_t)v68;
      }
      FeatureProcessingBase::FeatureProcessingBase((uint64_t)(v26 + 3), (uint64_t)a2, (__int128 ***)&v71);
      if (*((_QWORD *)&v68 + 1))
      {
        v44 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v68 + 1) + 16))(*((_QWORD *)&v68 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v68 + 1));
        }
      }
      v27[3] = &off_1EA9216D8;
      FeatureProcessingBase::Config::Config((uint64_t)(v27 + 14), (uint64_t)a2);
      *((_DWORD *)v27 + 34) = 1092616192;
      std::string::basic_string[abi:ne180100]<0>(&__p, "placeholder_duration");
      v70 = 0x4024000000000000;
      v46 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<double,0>((unsigned __int8 *)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&v70);
      *((float *)v27 + 34) = v46;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (*((_QWORD *)&v68 + 1))
      {
        v47 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v68 + 1) + 16))(*((_QWORD *)&v68 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v68 + 1));
        }
      }
      *(_QWORD *)&v49 = v28;
      *((_QWORD *)&v49 + 1) = v27;
      v50 = *(std::__shared_weak_count **)(v9 + 328);
      *(_OWORD *)(v9 + 320) = v49;
      if (v50)
      {
        p_shared_owners = (unint64_t *)&v50->__shared_owners_;
        do
          v52 = __ldaxr(p_shared_owners);
        while (__stlxr(v52 - 1, p_shared_owners));
        goto LABEL_73;
      }
      goto LABEL_75;
    }
    v33 = *v19;
  }
  if (v33 != (void *)0x6E6F72746F636174)
    goto LABEL_94;
  v34 = operator new(0x70uLL);
  v35 = v34;
  v34[1] = 0;
  v34[2] = 0;
  *v34 = &off_1EA934968;
  v36 = v34 + 3;
  if (*((_QWORD *)&v68 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v68;
    v39 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = (unint64_t)v68;
  }
  FeatureProcessingBase::FeatureProcessingBase((uint64_t)(v34 + 3), (uint64_t)a2, (__int128 ***)&__p);
  if (*((_QWORD *)&v68 + 1))
  {
    v41 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v68 + 1) + 16))(*((_QWORD *)&v68 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v68 + 1));
    }
    *v36 = &off_1EA920E90;
    do
      v43 = __ldaxr(v41);
    while (__stlxr(v43 - 1, v41));
    if (!v43)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v68 + 1) + 16))(*((_QWORD *)&v68 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v68 + 1));
    }
  }
  else
  {
    *v36 = &off_1EA920E90;
  }
  *(_QWORD *)&v53 = v36;
  *((_QWORD *)&v53 + 1) = v35;
  v50 = *(std::__shared_weak_count **)(v9 + 328);
  *(_OWORD *)(v9 + 320) = v53;
  if (v50)
  {
    v54 = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldaxr(v54);
    while (__stlxr(v52 - 1, v54));
LABEL_73:
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
LABEL_75:
  if (*((_QWORD *)&v68 + 1))
  {
    v55 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v68 + 1) + 16))(*((_QWORD *)&v68 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v68 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v57 = (std::string::size_type *)(a1 + 8);
  v58 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v59 = a1 + 8;
    if (*(char *)(a1 + 31) < 0)
      v59 = *v57;
    v60.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v59;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (double)((v60.__d_.__rep_ - v7.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v58, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", (uint8_t *)&__p, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v57 = (std::string::size_type *)*v57;
  v61.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v62, v57, (double)((v61.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v68 + 1))
  {
    v63 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v68 + 1) + 16))(*((_QWORD *)&v68 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v68 + 1));
    }
  }
  result.n128_u64[0] = v67;
  result.n128_u64[1] = v9;
  *v18 = result;
  return result;
}

void sub_1DEA88F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, Module *a12, __int128 a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::__shared_weak_count *v25;
  uint64_t v26;
  void **v27;
  void **v28;
  uint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;
  void *v36;
  unint64_t *v37;
  unint64_t v38;

  if (a25 < 0)
    operator delete(__p);
  if (*(char *)(v29 + 135) < 0)
    operator delete(*v27);
  *(_QWORD *)(v29 + 24) = &unk_1EA91FD98;
  if (*(char *)(v29 + 103) < 0)
    operator delete(*(void **)(v29 + 80));
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(_QWORD **)(v29 + 64));
  if (*(char *)(v29 + 55) < 0)
    operator delete(*(void **)(v29 + 32));
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v29);
  operator delete(v33);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v26 + 320);
  if (*(char *)(v26 + 319) < 0)
    operator delete(*v28);
  Module::~Module(a12);
  if (v25)
  {
    v34 = (unint64_t *)&v25->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v26);
  operator delete(v36);
  if (v25)
  {
    v37 = (unint64_t *)&v25->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PhonewiseFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PhonewiseFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PhonewiseFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PhonewiseFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<PhonewiseFeatureModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934348;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PhonewiseFeatureModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934348;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<PhonewiseFeatureModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<MergeFrontendFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<MergeFrontendFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92F1A0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<MergeFrontendFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<MergeFrontendFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92F1A0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<MergeFrontendFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<MergeFrontendFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92F1A0;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA89380(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<MergeFrontendFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<MergeFrontendFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92F1A0;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<MergeFrontendFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<MergeFrontendFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<MergeFrontendFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<MergeFrontendFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<MergeFrontendFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<MergeFrontendFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  NSObject *v21;
  unint64_t v22;
  __n128 *v23;
  _QWORD *v24;
  std::chrono::steady_clock::time_point v25;
  std::chrono::steady_clock::time_point v26;
  const char *v27;
  unint64_t *v28;
  unint64_t v29;
  __n128 result;
  __int128 v31;
  unsigned int v32;
  __int128 v33;
  _BYTE __p[12];
  __int16 v35;
  double v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v31 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x148uLL);
  v9 = (unint64_t)v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA934B28;
  v10 = (unint64_t)(v8 + 3);
  if (*((_QWORD *)&v31 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    v33 = v31;
    v13 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  else
  {
    v33 = (unint64_t)v31;
  }
  Module::Module((uint64_t)(v8 + 3), a2, (uint64_t *)&v33);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
  if (*((_QWORD *)&v33 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *(_QWORD *)(v9 + 24) = &off_1EA921140;
  *(_QWORD *)(v9 + 312) = 0;
  *(_QWORD *)(v9 + 320) = 0;
  *(_QWORD *)(v9 + 304) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "max_word_limit_per_feature");
  v32 = -1;
  *(_DWORD *)(v9 + 296) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)__p, &v32);
  if (v37 < 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "sentences_per_feature");
  v32 = -1;
  *(_DWORD *)(v9 + 300) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)__p, &v32);
  if (v37 < 0)
    operator delete(*(void **)__p);
  if (*((_QWORD *)&v31 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v31 + 1) + 16))(*((_QWORD *)&v31 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v31 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v20 = (_QWORD *)(a1 + 8);
  v21 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v22 = v10;
    v23 = a4;
    v24 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v24 = (_QWORD *)*v20;
    v25.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v24;
    v35 = 2048;
    v36 = (double)((v25.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v21, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", __p, 0x16u);
    a4 = v23;
    v10 = v22;
  }
  if (*(char *)(a1 + 31) < 0)
    v20 = (_QWORD *)*v20;
  v26.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v27, v20, (double)((v26.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v31 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v31 + 1) + 16))(*((_QWORD *)&v31 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v31 + 1));
    }
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_1DEA89760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  Module *v23;
  unint64_t *p_shared_owners;
  unint64_t v26;
  void *v27;
  unint64_t *v28;
  unint64_t v29;

  if (a21 < 0)
    operator delete(__p);
  __p = &v22[12].__shared_weak_owners_;
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  Module::~Module(v23);
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v22);
  operator delete(v27);
  if (v21)
  {
    v28 = (unint64_t *)&v21->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<MergeFrontendFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<MergeFrontendFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<MergeFrontendFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<MergeFrontendFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<MergeFrontendFeatureModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934B28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MergeFrontendFeatureModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934B28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<MergeFrontendFeatureModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WordEmbeddingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WordEmbeddingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92EC20;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WordEmbeddingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WordEmbeddingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92EC20;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WordEmbeddingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WordEmbeddingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92EC20;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA899EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WordEmbeddingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WordEmbeddingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92EC20;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WordEmbeddingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WordEmbeddingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WordEmbeddingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WordEmbeddingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WordEmbeddingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WordEmbeddingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void **v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  const char *v23;
  void **v24;
  void **v25;
  unsigned __int8 *v26;
  std::string::size_type size;
  std::string::size_type v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  _QWORD *v34;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  void **v42;
  unint64_t *v43;
  unint64_t v44;
  void **v45;
  void **v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  NSObject *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  __int128 v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  std::string::size_type *v80;
  NSObject *v81;
  std::string::size_type v82;
  std::chrono::steady_clock::time_point v83;
  std::chrono::steady_clock::time_point v84;
  const char *v85;
  unint64_t *v86;
  unint64_t v87;
  __n128 result;
  BOOL v89;
  NSObject *v90;
  const char *v91;
  void *v92;
  void *exception;
  void **v94;
  void **v95;
  std::chrono::steady_clock::time_point v97;
  unint64_t v98;
  void **v99;
  void **v100;
  void **v101;
  __int128 v102;
  __n128 *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  void *__p[2];
  char v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  __int128 v110;
  std::__shared_weak_count **v111;
  std::__shared_weak_count *v112;
  char v113;
  std::string buf;
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  v102 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v97.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v6 = operator new(0x1B8uLL);
  v7 = (unint64_t)v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1EA933CF0;
  v8 = v6 + 3;
  if (*((_QWORD *)&v102 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v110 = v102;
    v11 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  else
  {
    v110 = (unint64_t)v102;
  }
  Module::Module((uint64_t)(v6 + 3), a2, (uint64_t *)&v110);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
  if (*((_QWORD *)&v110 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *(_QWORD *)(v7 + 24) = &off_1EA91F8C8;
  v16 = (void **)(v7 + 296);
  v98 = (unint64_t)v8;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v7 + 296), &byte_1DEBD87CE);
  *(_QWORD *)(v7 + 336) = 0;
  *(_QWORD *)(v7 + 344) = 0;
  v17 = v7 + 336;
  *(_QWORD *)(v7 + 328) = v7 + 336;
  v101 = (void **)(v7 + 376);
  v99 = (void **)(v7 + 352);
  v100 = (void **)(v7 + 400);
  *(_OWORD *)(v7 + 352) = 0u;
  *(_OWORD *)(v7 + 368) = 0u;
  *(_OWORD *)(v7 + 384) = 0u;
  *(_OWORD *)(v7 + 400) = 0u;
  *(_OWORD *)(v7 + 416) = 0u;
  v18 = v102;
  *(_QWORD *)(v7 + 432) = 0;
  SharedObjectPool::get<VoiceConfig>(&v108, (__int128 **)v102);
  v19 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "framework_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v19, &buf);
  v103 = a4;
  if (*(char *)(v7 + 319) < 0)
    operator delete(*v16);
  *(_OWORD *)v16 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  *(_QWORD *)(v7 + 312) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
  v20 = v108;
  v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "vocab_file");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v21, &buf);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v20 + 40))(__p, v20, 1853318509, &buf, 0);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v22 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v24 = __p;
    if (v107 < 0)
      v24 = (void **)__p[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
    _os_log_impl(&dword_1DE3F6000, v22, OS_LOG_TYPE_DEFAULT, "Reading vocab file from: %s", (uint8_t *)&buf, 0xCu);
  }
  v25 = __p;
  if (v107 < 0)
    v25 = (void **)__p[0];
  Diagnostics::log(5, "Reading vocab file from: %s", v23, v25);
  std::string::basic_string[abi:ne180100]<0>(&v111, "begin_token");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("[CLS]", a2, (const void **)&v111, &buf);
  if (*(char *)(v7 + 399) < 0)
    operator delete(*v101);
  *(_OWORD *)v101 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  *(_QWORD *)(v7 + 392) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
  *((_BYTE *)&buf.__r_.__value_.__s + 23) = 0;
  buf.__r_.__value_.__s.__data_[0] = 0;
  if (v113 < 0)
    operator delete(v111);
  std::string::basic_string[abi:ne180100]<0>(&v111, "end_token");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("[SEP]", a2, (const void **)&v111, &buf);
  if (*(char *)(v7 + 423) < 0)
    operator delete(*v100);
  *(_OWORD *)v100 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  *(_QWORD *)(v7 + 416) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
  *((_BYTE *)&buf.__r_.__value_.__s + 23) = 0;
  buf.__r_.__value_.__s.__data_[0] = 0;
  if (v113 < 0)
    operator delete(v111);
  std::string::basic_string[abi:ne180100]<0>(&v111, "unknown_token");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("[UNK]", a2, (const void **)&v111, &buf);
  if (*(char *)(v7 + 375) < 0)
    operator delete(*v99);
  *(_OWORD *)v99 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  *(_QWORD *)(v7 + 368) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
  *((_BYTE *)&buf.__r_.__value_.__s + 23) = 0;
  buf.__r_.__value_.__s.__data_[0] = 0;
  if (v113 < 0)
    operator delete(v111);
  v26 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "punctuation");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::set<std::string>,std::set<std::string>,0>((uint64_t)&buf, v26);
  std::__tree<std::string>::destroy(v7 + 328, *(char **)(v7 + 336));
  size = buf.__r_.__value_.__l.__size_;
  *(_QWORD *)(v7 + 328) = buf.__r_.__value_.__r.__words[0];
  *(_QWORD *)(v7 + 336) = size;
  v28 = buf.__r_.__value_.__r.__words[2];
  *(_QWORD *)(v7 + 344) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
  if (v28)
  {
    *(_QWORD *)(size + 16) = v17;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf.__r_.__value_.__l.__size_;
    *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0uLL;
    size = 0;
  }
  else
  {
    *(_QWORD *)(v7 + 328) = v17;
  }
  std::__tree<std::string>::destroy((uint64_t)&buf, (char *)size);
  if (*((_QWORD *)&v102 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  PersistentModuleFactory::get_persistent_module_from_pool<WordEmbeddingPersistentModule>(&v104, (__int128 *)(v7 + 208), v18);
  if (*((_QWORD *)&v102 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v102 + 1) + 16))(*((_QWORD *)&v102 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v102 + 1));
    }
  }
  *(_QWORD *)(v7 + 320) = v104 + 296;
  v33 = *(unsigned __int8 *)(v7 + 319);
  if ((v33 & 0x80) != 0)
  {
    v36 = *(_QWORD *)(v7 + 304);
    if (v36 != 8)
    {
      if (v36 != 10
        || (*(_QWORD *)*v16 == 0x6C66726F736E6574 ? (v89 = *((unsigned __int16 *)*v16 + 4) == 30575) : (v89 = 0), !v89))
      {
LABEL_157:
        exception = __cxa_allocate_exception(0x10uLL);
        StringFormatter::StringFormatter((StringFormatter *)&buf, "Only Tensorflow and Espresso framework are supported.");
        MEMORY[0x1DF0EC99C](exception, &buf);
        __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
LABEL_152:
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v90 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1DE3F6000, v90, OS_LOG_TYPE_DEFAULT, "Using Tensorflow inference.", (uint8_t *)&buf, 2u);
      }
      Diagnostics::log(5, "Using Tensorflow inference.", v91);
      v92 = __cxa_allocate_exception(0x10uLL);
      StringFormatter::StringFormatter((StringFormatter *)&buf, "Tensorflow is not enabled.");
      MEMORY[0x1DF0EC99C](v92, &buf);
      __cxa_throw(v92, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    v34 = *v16;
  }
  else
  {
    v34 = (_QWORD *)(v7 + 296);
    if (v33 != 8)
    {
      if (v33 != 10)
        goto LABEL_157;
      if (*v16 != (void *)0x6C66726F736E6574 || *(_WORD *)(v7 + 304) != 30575)
        goto LABEL_157;
      goto LABEL_152;
    }
  }
  if (*v34 != 0x6F73736572707365)
    goto LABEL_157;
  v37 = operator new(0xB0uLL);
  v38 = v37;
  v37[1] = 0;
  v37[2] = 0;
  *v37 = &off_1EA935180;
  if (*((_QWORD *)&v102 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
    do
      v41 = __ldxr(v39);
    while (__stxr(v41 + 1, v39));
  }
  v37[4] = 0;
  v42 = (void **)(v37 + 4);
  v37[3] = &unk_1EA920680;
  v37[5] = 0;
  v37[6] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v111, "id");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)&v111, &buf);
  if (*((char *)v38 + 55) < 0)
    operator delete(*v42);
  *(_OWORD *)v42 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  v38[6] = *((_QWORD *)&buf.__r_.__value_.__l + 2);
  *((_BYTE *)&buf.__r_.__value_.__s + 23) = 0;
  buf.__r_.__value_.__s.__data_[0] = 0;
  if (v113 < 0)
    operator delete(v111);
  if (*((_QWORD *)&v102 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v102 + 1) + 16))(*((_QWORD *)&v102 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v102 + 1));
    }
  }
  v38[3] = &off_1EA921C60;
  v95 = (void **)(v38 + 7);
  std::string::basic_string[abi:ne180100]<0>(v38 + 7, "input_ids");
  v94 = (void **)(v38 + 10);
  std::string::basic_string[abi:ne180100]<0>(v38 + 10, "input_length");
  v45 = (void **)(v38 + 13);
  std::string::basic_string[abi:ne180100]<0>(v38 + 13, "input_type_ids");
  v46 = (void **)(v38 + 16);
  std::string::basic_string[abi:ne180100]<0>(v38 + 16, "bert/encoder/Reshape_13");
  if (*((_QWORD *)&v102 + 1))
  {
    v47 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  PersistentModuleFactory::get_persistent_module_from_pool<WordEmbeddingPersistentModule>(&v111, (__int128 *)v38 + 2, v18);
  if (*((_QWORD *)&v102 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v102 + 1) + 16))(*((_QWORD *)&v102 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v102 + 1));
    }
  }
  v52 = v111[42];
  v51 = v111[43];
  if (v51)
  {
    p_shared_owners = (unint64_t *)&v51->__shared_owners_;
    do
      v54 = __ldxr(p_shared_owners);
    while (__stxr(v54 + 1, p_shared_owners));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v55 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1DE3F6000, v55, OS_LOG_TYPE_DEFAULT, "Create Espresso WordEmbedding inference module.", (uint8_t *)&buf, 2u);
  }
  Diagnostics::log(5, "Create Espresso WordEmbedding inference module.", v56);
  v57 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "graph_input_input_ids_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v57, &buf);
  if (*((char *)v38 + 79) < 0)
    operator delete(*v95);
  *(_OWORD *)v95 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  v38[9] = *((_QWORD *)&buf.__r_.__value_.__l + 2);
  v58 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "graph_input_input_mask_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v58, &buf);
  if (*((char *)v38 + 103) < 0)
    operator delete(*v94);
  *(_OWORD *)v94 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  v38[12] = *((_QWORD *)&buf.__r_.__value_.__l + 2);
  v59 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "graph_input_input_type_ids_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v59, &buf);
  if (*((char *)v38 + 127) < 0)
    operator delete(*v45);
  *(_OWORD *)v45 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  v38[15] = *((_QWORD *)&buf.__r_.__value_.__l + 2);
  v60 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "graph_output_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v60, &buf);
  if (*((char *)v38 + 151) < 0)
    operator delete(*v46);
  *(_OWORD *)v46 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  v38[18] = *((_QWORD *)&buf.__r_.__value_.__l + 2);
  v38[20] = &v52->__shared_weak_owners_;
  v38[21] = v52 + 1;
  v38[19] = v52;
  if (v51)
  {
    v61 = (unint64_t *)&v51->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v63 = v112;
  if (v112)
  {
    v64 = (unint64_t *)&v112->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (*((_QWORD *)&v102 + 1))
  {
    v66 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v102 + 1) + 16))(*((_QWORD *)&v102 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v102 + 1));
    }
  }
  *(_QWORD *)&v68 = v38 + 3;
  *((_QWORD *)&v68 + 1) = v38;
  v69 = *(std::__shared_weak_count **)(v7 + 432);
  *(_OWORD *)(v7 + 424) = v68;
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = v105;
  if (v105)
  {
    v73 = (unint64_t *)&v105->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  if (v107 < 0)
    operator delete(__p[0]);
  v75 = v109;
  if (v109)
  {
    v76 = (unint64_t *)&v109->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  if (*((_QWORD *)&v102 + 1))
  {
    v78 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v102 + 1) + 16))(*((_QWORD *)&v102 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v102 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v80 = (std::string::size_type *)(a1 + 8);
  v81 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v82 = a1 + 8;
    if (*(char *)(a1 + 31) < 0)
      v82 = *v80;
    v83.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v82;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v83.__d_.__rep_ - v97.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v81, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v80 = (std::string::size_type *)*v80;
  v84.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v85, v80, (double)((v84.__d_.__rep_ - v97.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v102 + 1))
  {
    v86 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v102 + 1) + 16))(*((_QWORD *)&v102 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v102 + 1));
    }
  }
  result.n128_u64[0] = v98;
  result.n128_u64[1] = v7;
  *v103 = result;
  return result;
}

void sub_1DEA8A744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, Module *a19, void **a20,void **a21,void **a22,__int128 a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,std::__shared_weak_count *a34)
{
  std::__shared_weak_count *v34;
  uint64_t v35;
  void *v36;
  int v37;
  uint64_t v38;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  void *v46;
  unint64_t *v47;
  unint64_t v48;

  if (*(char *)(v38 - 105) < 0)
  {
    operator delete(*(void **)(v38 - 128));
    if ((v37 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v37)
  {
LABEL_6:
    if (a26)
    {
      p_shared_owners = (unint64_t *)&a26->__shared_owners_;
      do
        v41 = __ldaxr(p_shared_owners);
      while (__stlxr(v41 - 1, p_shared_owners));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))a26->__on_zero_shared)(a26);
        std::__shared_weak_count::__release_weak(a26);
      }
    }
    if (a32 < 0)
      operator delete(__p);
    if (a34)
    {
      v42 = (unint64_t *)&a34->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))a34->__on_zero_shared)(a34);
        std::__shared_weak_count::__release_weak(a34);
      }
    }
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a18);
    if (*(char *)(v35 + 423) < 0)
      operator delete(*a21);
    if (*(char *)(v35 + 399) < 0)
      operator delete(*a22);
    if (*(char *)(v35 + 375) < 0)
      operator delete(*a20);
    std::__tree<std::string>::destroy(a13, *(char **)(v35 + 336));
    if (*(char *)(v35 + 319) < 0)
      operator delete(*a12);
    Module::~Module(a19);
    if (v34)
    {
      v44 = (unint64_t *)&v34->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v35);
    operator delete(v46);
    if (v34)
    {
      v47 = (unint64_t *)&v34->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v36);
  goto LABEL_6;
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WordEmbeddingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WordEmbeddingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WordEmbeddingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WordEmbeddingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<WordEmbeddingModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933CF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<WordEmbeddingModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933CF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<WordEmbeddingModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralPromptModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralPromptModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92EAC0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralPromptModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralPromptModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92EAC0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralPromptModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralPromptModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92EAC0;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA8AD10(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralPromptModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralPromptModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92EAC0;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralPromptModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralPromptModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralPromptModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralPromptModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralPromptModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralPromptModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  int32x2_t *v8;
  int32x2_t *v9;
  int32x2_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int32x2_t *v18;
  int32x2_t *v19;
  int32x2_t v20;
  int32x2_t v21;
  _QWORD *v22;
  uint64_t i;
  int32x2_t v24;
  int32x2_t v25;
  uint64_t j;
  unint64_t *v27;
  unint64_t v28;
  NSObject *v29;
  _QWORD *v30;
  std::chrono::steady_clock::time_point v31;
  std::chrono::steady_clock::time_point v32;
  const char *v33;
  unint64_t *v34;
  unint64_t v35;
  __n128 result;
  __n128 *v37;
  unint64_t v38;
  __int128 v39;
  int32x2_t *v40;
  const void **v41;
  char *v42;
  void *v43[2];
  char v44;
  int32x2_t *v45;
  int32x2_t v46;
  int32x2_t v47;
  __int128 v48;
  _BYTE __p[12];
  __int16 v50;
  double v51;
  char v52;
  _QWORD v53[3];
  uint64_t v54[3];
  _QWORD v55[5];

  v55[3] = *MEMORY[0x1E0C80C00];
  v39 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = (int32x2_t *)operator new(0x178uLL);
  v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = (int32x2_t)&off_1EA933A18;
  v10 = v8 + 3;
  if (*((_QWORD *)&v39 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    v48 = v39;
    v13 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  else
  {
    v48 = (unint64_t)v39;
  }
  Module::Module((uint64_t)&v8[3], a2, (uint64_t *)&v48);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (*((_QWORD *)&v48 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v37 = a4;
  v38 = (unint64_t)v10;
  v9[3] = (int32x2_t)&off_1EA91F2D8;
  v18 = v9 + 40;
  v9[39] = (int32x2_t)&v9[40];
  v9[40] = 0;
  v40 = v9 + 42;
  v19 = v9 + 43;
  v9[43] = 0;
  v9[44] = 0;
  v9[41] = 0;
  v9[42] = (int32x2_t)&v9[43];
  v9[45] = vdup_n_s32(0x42C80000u);
  v9[46].i32[0] = 1117782016;
  std::string::basic_string[abi:ne180100]<0>(__p, "sample_rate");
  LODWORD(v45) = 48000;
  v9[37].i32[0] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)__p, (unsigned int *)&v45);
  if (v52 < 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(v43, "partial_match_skip_puncs");
  std::string::basic_string[abi:ne180100]<0>(__p, " ");
  std::string::basic_string[abi:ne180100]<0>(v53, "-");
  std::set<std::string>::set[abi:ne180100]((uint64_t)&v41, (const void **)__p, 2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::set<std::string>,0>((uint64_t)&v45, (unsigned __int8 *)a2, (const void **)v43, &v41);
  std::__tree<std::string>::destroy((uint64_t)&v9[39], *(char **)&v9[40]);
  v20 = v46;
  v9[39] = (int32x2_t)v45;
  v9[40] = v20;
  v21 = v47;
  v9[41] = v47;
  if (v21)
  {
    *(_QWORD *)(*(_QWORD *)&v20 + 16) = v18;
    v45 = &v46;
    v46 = 0;
    v47 = 0;
    v20 = 0;
  }
  else
  {
    v9[39] = (int32x2_t)v18;
  }
  v22 = (_QWORD *)(a1 + 8);
  std::__tree<std::string>::destroy((uint64_t)&v45, *(char **)&v20);
  std::__tree<std::string>::destroy((uint64_t)&v41, v42);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v53[i + 2]) < 0)
      operator delete((void *)v53[i]);
  }
  if (v44 < 0)
    operator delete(v43[0]);
  std::string::basic_string[abi:ne180100]<0>(v43, "partial_match_trigger_puncs");
  std::string::basic_string[abi:ne180100]<0>(__p, ",");
  std::string::basic_string[abi:ne180100]<0>(v53, ".");
  std::string::basic_string[abi:ne180100]<0>(v54, "?");
  std::string::basic_string[abi:ne180100]<0>(v55, "!");
  std::set<std::string>::set[abi:ne180100]((uint64_t)&v41, (const void **)__p, 4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::set<std::string>,0>((uint64_t)&v45, (unsigned __int8 *)a2, (const void **)v43, &v41);
  std::__tree<std::string>::destroy((uint64_t)v40, *(char **)&v9[43]);
  v24 = v46;
  v9[42] = (int32x2_t)v45;
  v9[43] = v24;
  v25 = v47;
  v9[44] = v47;
  if (v25)
  {
    *(_QWORD *)(*(_QWORD *)&v24 + 16) = v19;
    v45 = &v46;
    v46 = 0;
    v47 = 0;
    v24 = 0;
  }
  else
  {
    *v40 = (int32x2_t)v19;
  }
  std::__tree<std::string>::destroy((uint64_t)&v45, *(char **)&v24);
  std::__tree<std::string>::destroy((uint64_t)&v41, v42);
  for (j = 0; j != -12; j -= 3)
  {
    if (SHIBYTE(v55[j + 2]) < 0)
      operator delete((void *)v55[j]);
  }
  if (v44 < 0)
    operator delete(v43[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "spelling_pause_ms");
  LODWORD(v45) = 200;
  v9[37].i32[1] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)__p, (unsigned int *)&v45);
  if (v52 < 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "partial_match");
  LOBYTE(v45) = 0;
  v9[38].i8[0] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(a2, (const void **)__p, (unsigned __int8 *)&v45);
  if (v52 < 0)
    operator delete(*(void **)__p);
  if (*((_QWORD *)&v39 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v39 + 1) + 16))(*((_QWORD *)&v39 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v39 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v29 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v30 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v30 = (_QWORD *)*v22;
    v31.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v30;
    v50 = 2048;
    v51 = (double)((v31.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v29, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", __p, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v22 = (_QWORD *)*v22;
  v32.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v33, v22, (double)((v32.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v39 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v39 + 1) + 16))(*((_QWORD *)&v39 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v39 + 1));
    }
  }
  result.n128_u64[0] = v38;
  result.n128_u64[1] = (unint64_t)v9;
  *v37 = result;
  return result;
}

void sub_1DEA8B338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, Module *a14, __int128 a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  char **v38;
  char **v39;
  unint64_t *p_shared_owners;
  unint64_t v42;
  void *v43;
  unint64_t *v44;
  unint64_t v45;

  if (a36 < 0)
    operator delete(__p);
  std::__tree<std::string>::destroy(a15, *v38);
  std::__tree<std::string>::destroy(a12, *v39);
  Module::~Module(a14);
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v37);
  operator delete(v43);
  if (v36)
  {
    v44 = (unint64_t *)&v36->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralPromptModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralPromptModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralPromptModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralPromptModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<NeuralPromptModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933A18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NeuralPromptModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933A18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<NeuralPromptModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PhoneTransformModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PhoneTransformModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92EC78;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PhoneTransformModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PhoneTransformModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92EC78;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PhoneTransformModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PhoneTransformModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92EC78;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA8B6B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PhoneTransformModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PhoneTransformModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92EC78;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PhoneTransformModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PhoneTransformModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PhoneTransformModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PhoneTransformModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PhoneTransformModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PhoneTransformModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void **v17;
  uint64_t v18;
  unsigned __int8 *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  std::vector<std::string>::pointer v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  _QWORD *size;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t **v33;
  char *v34;
  std::string *v35;
  std::vector<std::string>::pointer begin;
  std::string *v37;
  std::vector<std::string>::pointer v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  _QWORD *v48;
  std::string::size_type v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  std::string::size_type *v54;
  NSObject *v55;
  std::string::size_type v56;
  std::chrono::steady_clock::time_point v57;
  std::chrono::steady_clock::time_point v58;
  const char *v59;
  unint64_t *v60;
  unint64_t v61;
  __n128 result;
  NSObject *v63;
  const char *v64;
  nlohmann::detail::exception *exception;
  unint64_t v66;
  char *v67;
  std::string *v68;
  std::string *v69;
  __int128 v70;
  __n128 *v71;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  unint64_t v73;
  unint64_t *v74;
  std::vector<std::string> *v75;
  unint64_t v76;
  unint64_t *v77;
  void **v78;
  __int128 v79;
  uint64_t v80;
  uint64_t *v82;
  _QWORD *v83;
  uint64_t v84;
  __int128 v85;
  uint64_t *v86;
  _QWORD *v87;
  uint64_t v88;
  std::vector<std::string> v89;
  std::vector<std::string>::pointer v90;
  uint64_t v91;
  std::vector<std::string> *v92;
  std::string v93;
  std::vector<std::string> v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v79 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v7 = operator new(0x1C0uLL);
  v8 = (unint64_t)v7;
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_1EA933E08;
  v9 = (unint64_t)(v7 + 3);
  if (*((_QWORD *)&v79 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v85 = v79;
    v12 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  else
  {
    v85 = (unint64_t)v79;
  }
  Module::Module((uint64_t)(v7 + 3), a2, (uint64_t *)&v85);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
  if (*((_QWORD *)&v85 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *(_QWORD *)(v8 + 24) = off_1EA91FAB0;
  *(_QWORD *)(v8 + 304) = 0;
  *(_QWORD *)(v8 + 312) = 0;
  *(_QWORD *)(v8 + 296) = v8 + 304;
  v17 = (void **)(v8 + 320);
  v77 = (unint64_t *)(v8 + 400);
  v78 = (void **)(v8 + 368);
  *(_QWORD *)(v8 + 416) = 0;
  *(_QWORD *)(v8 + 424) = 0;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 336) = 0u;
  *(_OWORD *)(v8 + 352) = 0u;
  *(_OWORD *)(v8 + 368) = 0u;
  *(_QWORD *)(v8 + 384) = 0;
  *(_QWORD *)(v8 + 400) = v8 + 408;
  *(_QWORD *)(v8 + 408) = 0;
  v75 = (std::vector<std::string> *)(v8 + 344);
  v76 = v8 + 408;
  *(_QWORD *)(v8 + 432) = 0;
  *(_QWORD *)(v8 + 440) = 0;
  v18 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "phone_map");
  v19 = (unsigned __int8 *)v18;
  v83 = 0;
  v84 = 0;
  v82 = (uint64_t *)&v83;
  if (*(_BYTE *)v18 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v66 = *v19;
    if (v66 > 9)
      v67 = "number";
    else
      v67 = off_1EA94C758[v66];
    v68 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v89, v67);
    v69 = std::string::insert(v68, 0, "type must be object, but is ");
    v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
    v93.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v70;
    v69->__r_.__value_.__l.__size_ = 0;
    v69->__r_.__value_.__r.__words[2] = 0;
    v69->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(302, (uint64_t)&v93, exception);
  }
  v80 = a1;
  v71 = a4;
  rep = v6.__d_.__rep_;
  v73 = v8 + 304;
  v74 = (unint64_t *)(v8 + 296);
  v87 = 0;
  v88 = 0;
  v86 = (uint64_t *)&v87;
  v20 = *(_QWORD **)(v18 + 8);
  v23 = (_QWORD *)*v20;
  v21 = v20 + 1;
  v22 = v23;
  if (v23 != v21)
  {
    v24 = (std::vector<std::string>::pointer)&v87;
    while (1)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<std::string>,std::vector<std::string>,0>(&v89, (unsigned __int8 *)v22 + 56);
      if (*((char *)v22 + 55) < 0)
        std::string::__init_copy_ctor_external(&v93, (const std::string::value_type *)v22[4], v22[5]);
      else
        v93 = *(std::string *)(v22 + 4);
      v94 = v89;
      memset(&v89, 0, sizeof(v89));
      v92 = &v89;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
      if (&v87 == (_QWORD **)v24
        || std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v88, (const void **)&v93.__r_.__value_.__l.__data_, (const void **)&v24[1].__r_.__value_.__l.__size_))
      {
        break;
      }
      if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v88, (const void **)&v24[1].__r_.__value_.__l.__size_, (const void **)&v93.__r_.__value_.__l.__data_))
      {
        size = (_QWORD *)v24->__r_.__value_.__l.__size_;
        v30 = size;
        v31 = (uint64_t)v24;
        if (size)
        {
          do
          {
            v32 = (uint64_t)v30;
            v30 = (_QWORD *)*v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            v32 = *(_QWORD *)(v31 + 16);
            v28 = *(_QWORD *)v32 == v31;
            v31 = v32;
          }
          while (!v28);
        }
        if ((_QWORD **)v32 == &v87)
        {
LABEL_38:
          if (size)
          {
            v91 = v32;
            v24 = (std::vector<std::string>::pointer)v32;
          }
          else
          {
            v91 = (uint64_t)v24;
            v24 = (std::vector<std::string>::pointer)((char *)v24 + 8);
          }
        }
        else
        {
          if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v88, (const void **)&v93.__r_.__value_.__l.__data_, (const void **)(v32 + 32)))
          {
            size = (_QWORD *)v24->__r_.__value_.__l.__size_;
            goto LABEL_38;
          }
LABEL_40:
          v24 = (std::vector<std::string>::pointer)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)&v86, &v91, (const void **)&v93.__r_.__value_.__l.__data_);
        }
LABEL_42:
        v33 = (uint64_t **)v24;
        v24 = (std::vector<std::string>::pointer)v24->__r_.__value_.__r.__words[0];
        if (!v24)
          goto LABEL_43;
        goto LABEL_49;
      }
      v90 = v24;
      v91 = (uint64_t)v24;
      v33 = (uint64_t **)&v90;
      if (!v24)
      {
LABEL_43:
        v34 = (char *)operator new(0x50uLL);
        v89.__begin_ = (std::vector<std::string>::pointer)v34;
        v89.__end_ = (std::vector<std::string>::pointer)&v87;
        LOBYTE(v89.__end_cap_.__value_) = 0;
        v35 = (std::string *)(v34 + 32);
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v35, v93.__r_.__value_.__l.__data_, v93.__r_.__value_.__l.__size_);
          begin = v89.__begin_;
        }
        else
        {
          *(_OWORD *)&v35->__r_.__value_.__l.__data_ = *(_OWORD *)&v93.__r_.__value_.__l.__data_;
          *((_QWORD *)v34 + 6) = *((_QWORD *)&v93.__r_.__value_.__l + 2);
          begin = (std::vector<std::string>::pointer)v34;
        }
        *(std::vector<std::string> *)(v34 + 56) = v94;
        memset(&v94, 0, sizeof(v94));
        LOBYTE(v89.__end_cap_.__value_) = 1;
        std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(&v86, v91, v33, (uint64_t *)begin);
        v24 = v89.__begin_;
        v89.__begin_ = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v89, 0);
      }
LABEL_49:
      v37 = (std::string *)v24->__r_.__value_.__l.__size_;
      v38 = v24;
      if (v37)
      {
        do
        {
          v24 = v37;
          v37 = (std::string *)v37->__r_.__value_.__r.__words[0];
        }
        while (v37);
      }
      else
      {
        do
        {
          v24 = (std::vector<std::string>::pointer)v38->__r_.__value_.__r.__words[2];
          v28 = v24->__r_.__value_.__r.__words[0] == (_QWORD)v38;
          v38 = v24;
        }
        while (!v28);
      }
      v89.__begin_ = (std::vector<std::string>::pointer)&v94;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v93.__r_.__value_.__l.__data_);
      v39 = (_QWORD *)v22[1];
      if (v39)
      {
        do
        {
          v40 = v39;
          v39 = (_QWORD *)*v39;
        }
        while (v39);
      }
      else
      {
        do
        {
          v40 = (_QWORD *)v22[2];
          v28 = *v40 == (_QWORD)v22;
          v22 = v40;
        }
        while (!v28);
      }
      v22 = v40;
      if (v40 == v21)
      {
        v41 = v83;
        v17 = (void **)(v8 + 320);
        goto LABEL_65;
      }
    }
    v25 = (uint64_t)v24;
    if (v86 != (uint64_t *)v24)
    {
      v26 = v24->__r_.__value_.__r.__words[0];
      v27 = (uint64_t)v24;
      if (v24->__r_.__value_.__r.__words[0])
      {
        do
        {
          v25 = v26;
          v26 = *(_QWORD *)(v26 + 8);
        }
        while (v26);
      }
      else
      {
        do
        {
          v25 = *(_QWORD *)(v27 + 16);
          v28 = *(_QWORD *)v25 == v27;
          v27 = v25;
        }
        while (v28);
      }
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v88, (const void **)(v25 + 32), (const void **)&v93.__r_.__value_.__l.__data_))goto LABEL_40;
    }
    if (v24->__r_.__value_.__r.__words[0])
    {
      v91 = v25;
      v24 = (std::vector<std::string>::pointer)(v25 + 8);
    }
    else
    {
      v91 = (uint64_t)v24;
    }
    goto LABEL_42;
  }
  v41 = 0;
LABEL_65:
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)&v82, v41);
  v42 = v87;
  v82 = v86;
  v83 = v87;
  v84 = v88;
  if (v88)
  {
    v87[2] = &v83;
    v86 = (uint64_t *)&v87;
    v87 = 0;
    v88 = 0;
    v42 = 0;
  }
  else
  {
    v82 = (uint64_t *)&v83;
  }
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)&v86, v42);
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)v74, *(_QWORD **)(v8 + 304));
  v43 = v83;
  *(_QWORD *)(v8 + 296) = v82;
  *(_QWORD *)(v8 + 304) = v43;
  v44 = v84;
  *(_QWORD *)(v8 + 312) = v84;
  if (v44)
  {
    v43[2] = v73;
    v82 = (uint64_t *)&v83;
    v83 = 0;
    v84 = 0;
    v43 = 0;
  }
  else
  {
    *v74 = v73;
  }
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)&v82, v43);
  v45 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "mapping_level");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v45, &v93);
  if (*(char *)(v8 + 343) < 0)
    operator delete(*v17);
  *(std::string *)v17 = v93;
  v46 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "stressable_phones");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<std::string>,std::vector<std::string>,0>((std::vector<std::string> *)&v93, v46);
  std::vector<std::string>::__vdeallocate(v75);
  *(_OWORD *)&v75->__begin_ = *(_OWORD *)&v93.__r_.__value_.__l.__data_;
  *(_QWORD *)(v8 + 360) = *((_QWORD *)&v93.__r_.__value_.__l + 2);
  memset(&v93, 0, sizeof(v93));
  v89.__begin_ = &v93;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
  std::string::basic_string[abi:ne180100]<0>(&v89, "stress_marker");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)&v89.__begin_, &v93);
  if (*(char *)(v8 + 391) < 0)
    operator delete(*v78);
  *(_OWORD *)v78 = *(_OWORD *)&v93.__r_.__value_.__l.__data_;
  *(_QWORD *)(v8 + 384) = *((_QWORD *)&v93.__r_.__value_.__l + 2);
  *((_BYTE *)&v93.__r_.__value_.__s + 23) = 0;
  v93.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v89.__end_cap_.__value_) < 0)
    operator delete(v89.__begin_);
  std::string::basic_string[abi:ne180100]<0>(&v93, "multilingual_phone");
  LOBYTE(v89.__begin_) = 0;
  *(_BYTE *)(v8 + 392) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(a2, (const void **)&v93.__r_.__value_.__l.__data_, (unsigned __int8 *)&v89);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v93, "embedded_lang");
  LOBYTE(v89.__begin_) = 0;
  *(_BYTE *)(v8 + 393) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(a2, (const void **)&v93.__r_.__value_.__l.__data_, (unsigned __int8 *)&v89);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  if (!*(_BYTE *)(v8 + 392))
    goto LABEL_90;
  v47 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "phone_map_on_lang");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::map<std::string,std::string>,std::map<std::string,std::string>,0>(&v93, v47);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v77, *(_QWORD **)(v8 + 408));
  v48 = (_QWORD *)v93.__r_.__value_.__l.__size_;
  *(_QWORD *)(v8 + 400) = v93.__r_.__value_.__r.__words[0];
  *(_QWORD *)(v8 + 408) = v48;
  v49 = v93.__r_.__value_.__r.__words[2];
  *(_QWORD *)(v8 + 416) = *((_QWORD *)&v93.__r_.__value_.__l + 2);
  if (v49)
  {
    v48[2] = v76;
    v93.__r_.__value_.__r.__words[0] = (std::string::size_type)&v93.__r_.__value_.__l.__size_;
    *(_OWORD *)&v93.__r_.__value_.__r.__words[1] = 0uLL;
    v48 = 0;
  }
  else
  {
    *v77 = v76;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v93, v48);
  if (!*(_QWORD *)(v8 + 416))
  {
LABEL_90:
    if (!*((_QWORD *)&v79 + 1))
      goto LABEL_95;
    goto LABEL_91;
  }
  std::string::basic_string[abi:ne180100]<0>(&v93, "default");
  v50 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)v77, (const void **)&v93.__r_.__value_.__l.__data_);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  if (v76 != v50)
  {
    std::string::operator=((std::string *)(v8 + 424), (const std::string *)(v50 + 56));
    goto LABEL_90;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v63 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v93.__r_.__value_.__l.__data_) = 0;
  }
  if (*((_QWORD *)&v79 + 1))
  {
LABEL_91:
    v51 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v79 + 1) + 16))(*((_QWORD *)&v79 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v79 + 1));
    }
  }
LABEL_95:
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v53 = v80;
  v54 = (std::string::size_type *)(v80 + 8);
  v55 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v56 = v80 + 8;
    if (*(char *)(v80 + 31) < 0)
      v56 = *v54;
    v57.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(v93.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v93.__r_.__value_.__r.__words + 4) = v56;
    WORD2(v93.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&v93.__r_.__value_.__r.__words[1] + 6) = (double)((v57.__d_.__rep_ - rep) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v55, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", (uint8_t *)&v93, 0x16u);
    v53 = v80;
  }
  if (*(char *)(v53 + 31) < 0)
    v54 = (std::string::size_type *)*v54;
  v58.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v59, v54, (double)((v58.__d_.__rep_ - rep) / 1000000) / 1000.0);
  if (*((_QWORD *)&v79 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v79 + 1) + 16))(*((_QWORD *)&v79 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v79 + 1));
    }
  }
  result.n128_u64[0] = v9;
  result.n128_u64[1] = v8;
  *v71 = result;
  return result;
}

void sub_1DEA8C164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23,void **a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void **a34)
{
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  Module *v37;
  _QWORD **v38;
  unint64_t *p_shared_owners;
  unint64_t v41;
  void *v42;
  unint64_t *v43;
  unint64_t v44;

  if (*(char *)(v34 + 447) < 0)
    operator delete(*a12);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a23, *(_QWORD **)(v34 + 408));
  if (*(char *)(v34 + 391) < 0)
    operator delete(*a24);
  a34 = a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a34);
  if (*(char *)(v34 + 343) < 0)
    operator delete(*a15);
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(v35, *v38);
  Module::~Module(v37);
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v34);
  operator delete(v42);
  if (v36)
  {
    v43 = (unint64_t *)&v36->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PhoneTransformModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PhoneTransformModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PhoneTransformModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PhoneTransformModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<PhoneTransformModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933E08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PhoneTransformModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933E08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<PhoneTransformModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ClickDetectorModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ClickDetectorModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92EB70;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ClickDetectorModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ClickDetectorModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92EB70;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ClickDetectorModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ClickDetectorModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92EB70;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA8C55C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ClickDetectorModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ClickDetectorModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92EB70;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ClickDetectorModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ClickDetectorModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ClickDetectorModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ClickDetectorModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ClickDetectorModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ClickDetectorModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, _OWORD *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  double v17;
  BOOL v18;
  char *v19;
  float v20;
  uint64_t v21;
  uint64x2_t v22;
  uint64_t v23;
  int64x2_t v24;
  double v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  double v33;
  double v34;
  double v35;
  int v36;
  double v37;
  double *v38;
  double *v39;
  uint64_t v40;
  double *v41;
  double v42;
  double *v43;
  double *v44;
  double *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  double *v51;
  uint64_t v52;
  double *v53;
  double *v54;
  double v55;
  double *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  double *v62;
  uint64_t v63;
  long double *v64;
  uint64_t v65;
  double *v66;
  double *v67;
  double *v68;
  double *v69;
  double v70;
  double v71;
  double *v72;
  double *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  double *v79;
  uint64_t v80;
  double *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  double *v85;
  unint64_t v86;
  double *v87;
  double *v88;
  double v89;
  uint64_t v90;
  double **v91;
  double v92;
  double *v93;
  unint64_t v94;
  double *v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  double v100;
  double *v101;
  unint64_t v102;
  double *v103;
  double v104;
  double *v105;
  unint64_t v106;
  double *v107;
  double *v108;
  double v109;
  double v110;
  double v111;
  double v112;
  _QWORD *v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  double *v125;
  double *v126;
  uint64_t v127;
  uint64_t v128;
  double *v129;
  uint64_t i;
  char **v131;
  double *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  double v136;
  double v137;
  char **v138;
  char **v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  _QWORD *v146;
  char **v147;
  char **v148;
  char **v149;
  char **v150;
  char *v151;
  char *v152;
  long double v153;
  __int128 v154;
  std::__shared_weak_count *v155;
  unint64_t *p_shared_owners;
  unint64_t v157;
  _QWORD *v158;
  unint64_t *v159;
  unint64_t v160;
  NSObject *v161;
  _QWORD *v162;
  std::chrono::steady_clock::time_point v163;
  std::chrono::steady_clock::time_point v164;
  const char *v165;
  unint64_t *v166;
  unint64_t v167;
  __int128 v168;
  _QWORD *v169;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  _OWORD *v171;
  _OWORD *v172;
  _QWORD *v173;
  uint64_t *v174;
  std::__shared_weak_count *v175;
  _QWORD *v176;
  uint64x2_t v177;
  int64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t __x;
  double v182;
  unsigned __int8 v183;
  __int128 v184;
  int64x2_t v185;
  __int128 v186;
  void *__p[2];
  uint64_t v188;
  void *v189[3];
  void *v190;
  _BYTE *v191;
  _QWORD v192[3];
  double *v193;
  double *v194;
  double *v195;
  double *v196;
  double *v197;
  char *v198;
  uint64_t v199;
  void *v200;
  _BYTE buf[24];
  char *v202;
  uint64_t v203;
  uint64_t v204;

  v204 = *MEMORY[0x1E0C80C00];
  v184 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x138uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA933BA0;
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v184 + 1);
  if (*((_QWORD *)&v184 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v184 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v186 = v184;
    v12 = (unint64_t *)(*((_QWORD *)&v184 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  else
  {
    v186 = (unint64_t)v184;
  }
  v173 = v8 + 3;
  v176 = v8;
  Module::Module((uint64_t)(v8 + 3), a2, (uint64_t *)&v186);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
  if (*((_QWORD *)&v186 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v186 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v8[3] = &off_1EA91F588;
  v8[37] = 0;
  v8[38] = 0;
  std::string::basic_string[abi:ne180100]<0>(buf, "threshold");
  v199 = 0x3FD3333333333333;
  v17 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<double,0>((unsigned __int8 *)a2, (const void **)buf, (uint64_t)&v199);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  v172 = v8 + 37;
  std::string::basic_string[abi:ne180100]<0>(buf, "reuse_first_frame");
  LOBYTE(v199) = 1;
  v18 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(a2, (const void **)buf, (unsigned __int8 *)&v199);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  rep = v7.__d_.__rep_;
  v171 = a4;
  v19 = (char *)operator new(0xF0uLL);
  v20 = v17;
  *((_QWORD *)v19 + 1) = 0;
  *((_QWORD *)v19 + 2) = 0;
  *(_QWORD *)v19 = &off_1EA9324E0;
  *((_DWORD *)v19 + 6) = -1027080192;
  *((_DWORD *)v19 + 8) = 1064849900;
  *(_OWORD *)(v19 + 36) = xmmword_1DED16CB0;
  *(_OWORD *)(v19 + 56) = 0u;
  v174 = (uint64_t *)(v19 + 128);
  *(_OWORD *)(v19 + 152) = 0u;
  *(_OWORD *)(v19 + 72) = 0u;
  *(_OWORD *)(v19 + 88) = 0u;
  *(_OWORD *)(v19 + 104) = 0u;
  *(_OWORD *)(v19 + 120) = 0u;
  *(_OWORD *)(v19 + 136) = 0u;
  *(_OWORD *)(v19 + 168) = 0u;
  *(_OWORD *)(v19 + 184) = 0u;
  *((float *)v19 + 7) = v20;
  v19[52] = v18;
  std::vector<double>::resize((uint64_t)(v19 + 56), 0x258uLL);
  v21 = 0;
  v22 = (uint64x2_t)xmmword_1DEC3D320;
  v179 = (float64x2_t)vdupq_n_s64(0x4082C00000000000uLL);
  v180 = (float64x2_t)vdupq_n_s64(0x401921FB54442D18uLL);
  v23 = *((_QWORD *)v19 + 7);
  v177 = (uint64x2_t)vdupq_n_s64(0x258uLL);
  v178 = vdupq_n_s64(2uLL);
  do
  {
    v183 = vmovn_s64((int64x2_t)vcgtq_u64(v177, v22)).u8[0];
    v185 = (int64x2_t)v22;
    v24.i64[0] = (int)v21;
    v24.i64[1] = (int)v21 + 1;
    __x = vdivq_f64(vmulq_f64(vcvtq_f64_s64(v24), v180), v179);
    v182 = cos(__x.f64[1]);
    v25 = cos(__x.f64[0]);
    if ((v183 & 1) != 0)
      *(double *)(v23 + 8 * v21) = (1.0 - v25) * 0.5;
    if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x258uLL), *(uint64x2_t *)&v185)).i32[1] & 1) != 0)
      *(double *)(v23 + 8 * v21 + 8) = (1.0 - v182) * 0.5;
    v21 += 2;
    v22 = (uint64x2_t)vaddq_s64(v185, v178);
  }
  while (v21 != 600);
  v26 = *((_DWORD *)v19 + 11);
  v27 = *((_DWORD *)v19 + 12);
  if (v26 >= 0)
    v28 = *((_DWORD *)v19 + 11);
  else
    v28 = v26 + 1;
  v29 = (v28 >> 1) + 1;
  v30 = MelBanks::inst_;
  v169 = (_QWORD *)(a1 + 8);
  if (MelBanks::inst_)
  {
    if (*(_DWORD *)(MelBanks::inst_ + 24) == 24000
      && !*(_DWORD *)(MelBanks::inst_ + 28)
      && *(_DWORD *)(MelBanks::inst_ + 32) == 12000
      && *(_DWORD *)(MelBanks::inst_ + 36) == v26
      && *(_DWORD *)(MelBanks::inst_ + 40) == v29
      && *(_DWORD *)(MelBanks::inst_ + 44) == v27
      && !*(_BYTE *)(MelBanks::inst_ + 48))
    {
      goto LABEL_176;
    }
    *(_QWORD *)buf = MelBanks::inst_;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    MEMORY[0x1DF0ED014](v30, 0x1020C40F1C605A7);
  }
  v30 = operator new();
  *(_QWORD *)v30 = 0;
  *(_QWORD *)(v30 + 8) = 0;
  *(_QWORD *)(v30 + 16) = 0;
  *(_QWORD *)(v30 + 24) = 24000;
  *(_DWORD *)(v30 + 32) = 12000;
  *(_DWORD *)(v30 + 36) = v26;
  *(_DWORD *)(v30 + 40) = v29;
  *(_DWORD *)(v30 + 44) = v27;
  *(_BYTE *)(v30 + 48) = 0;
  MelBanks::linspace((MelBanks *)&v199, 0.0, 12000.0, v29);
  v31 = *(_DWORD *)(v30 + 44) + 2;
  v32 = *(_DWORD *)(v30 + 28);
  v33 = (double)v32;
  if (*(_BYTE *)(v30 + 48))
  {
    v34 = log10(v33 / 700.0 + 1.0) * 2595.0;
    v35 = log10((double)*(int *)(v30 + 32) / 700.0 + 1.0) * 2595.0;
  }
  else
  {
    if (v32 >= 1000)
      v34 = log10(v33 / 1000.0) / 0.0298585176 + 15.0000006;
    else
      v34 = v33 / 66.6666641;
    v36 = *(_DWORD *)(v30 + 32);
    v37 = (double)v36;
    if (v36 >= 1000)
      v35 = log10(v37 / 1000.0) / 0.0298585176 + 15.0000006;
    else
      v35 = v37 / 66.6666641;
  }
  MelBanks::linspace((MelBanks *)buf, v34, v35, v31);
  v175 = v9;
  v197 = 0;
  v198 = 0;
  v196 = 0;
  v38 = *(double **)&buf[8];
  v39 = *(double **)buf;
  v40 = a1;
  if (*(_BYTE *)(v30 + 48))
  {
    if (*(_QWORD *)buf >= *(_QWORD *)&buf[8])
    {
      v44 = 0;
    }
    else
    {
      v41 = *(double **)buf;
      do
      {
        v42 = (__exp10(*v41 / 2595.0) + -1.0) * 700.0;
        v43 = v197;
        if (v197 >= (double *)v198)
        {
          v45 = v196;
          v46 = v197 - v196;
          v47 = v46 + 1;
          if ((unint64_t)(v46 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v48 = v198 - (char *)v196;
          if ((v198 - (char *)v196) >> 2 > v47)
            v47 = v48 >> 2;
          if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
            v49 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v49 = v47;
          if (v49)
          {
            v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v198, v49);
            v45 = v196;
            v43 = v197;
          }
          else
          {
            v50 = 0;
          }
          v51 = (double *)&v50[8 * v46];
          *v51 = v42;
          v44 = v51 + 1;
          while (v43 != v45)
          {
            v52 = *((_QWORD *)v43-- - 1);
            *((_QWORD *)v51-- - 1) = v52;
          }
          v196 = v51;
          v197 = v44;
          v198 = &v50[8 * v49];
          if (v45)
            operator delete(v45);
        }
        else
        {
          *v197 = v42;
          v44 = v43 + 1;
        }
        v197 = v44;
        ++v41;
      }
      while (v41 < v38);
    }
  }
  else
  {
    if (*(_QWORD *)buf >= *(_QWORD *)&buf[8])
    {
      v44 = 0;
    }
    else
    {
      v53 = 0;
      v54 = *(double **)buf;
      do
      {
        v55 = *v54 * 66.6666641 + 0.0;
        if (v53 >= (double *)v198)
        {
          v56 = v196;
          v57 = v53 - v196;
          v58 = v57 + 1;
          if ((unint64_t)(v57 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v59 = v198 - (char *)v196;
          if ((v198 - (char *)v196) >> 2 > v58)
            v58 = v59 >> 2;
          if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8)
            v60 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v60 = v58;
          if (v60)
          {
            v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v198, v60);
            v56 = v196;
            v53 = v197;
          }
          else
          {
            v61 = 0;
          }
          v62 = (double *)&v61[8 * v57];
          *v62 = v55;
          v44 = v62 + 1;
          while (v53 != v56)
          {
            v63 = *((_QWORD *)v53-- - 1);
            *((_QWORD *)v62-- - 1) = v63;
          }
          v196 = v62;
          v197 = v44;
          v198 = &v61[8 * v60];
          if (v56)
            operator delete(v56);
        }
        else
        {
          *v53 = v55;
          v44 = v53 + 1;
        }
        v197 = v44;
        ++v54;
        v53 = v44;
      }
      while (v54 < v38);
    }
    if (v38 != v39)
    {
      v64 = v196;
      if ((unint64_t)(v38 - v39) <= 1)
        v65 = 1;
      else
        v65 = v38 - v39;
      v66 = v39;
      a1 = v40;
      v9 = v175;
      do
      {
        if (*v66 >= 15.0000006)
          *v64 = exp((*v66 + -15.0000006) * 0.0687517774) * 1000.0;
        ++v64;
        ++v66;
        --v65;
      }
      while (v65);
      goto LABEL_96;
    }
  }
  a1 = v40;
  v9 = v175;
  if (v39)
  {
LABEL_96:
    operator delete(v39);
    v44 = v197;
  }
  v193 = 0;
  v194 = 0;
  v195 = 0;
  v67 = v196;
  if (v196 < v44 - 1)
  {
    v68 = 0;
    do
    {
      v69 = v67;
      v70 = v67[1];
      ++v67;
      v71 = v70 - *v69;
      if (v68 >= v195)
      {
        v73 = v193;
        v74 = v68 - v193;
        v75 = v74 + 1;
        if ((unint64_t)(v74 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v76 = (char *)v195 - (char *)v193;
        if (((char *)v195 - (char *)v193) >> 2 > v75)
          v75 = v76 >> 2;
        if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8)
          v77 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v77 = v75;
        if (v77)
        {
          v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v195, v77);
          v73 = v193;
          v68 = v194;
        }
        else
        {
          v78 = 0;
        }
        v79 = (double *)&v78[8 * v74];
        *v79 = v71;
        v72 = v79 + 1;
        while (v68 != v73)
        {
          v80 = *((_QWORD *)v68-- - 1);
          *((_QWORD *)v79-- - 1) = v80;
        }
        v193 = v79;
        v194 = v72;
        v195 = (double *)&v78[8 * v77];
        if (v73)
          operator delete(v73);
      }
      else
      {
        *v68 = v71;
        v72 = v68 + 1;
      }
      v194 = v72;
      v44 = v197;
      v68 = v72;
    }
    while (v67 < v197 - 1);
    v67 = v196;
  }
  std::vector<std::vector<double>>::vector(v192, v44 - v67);
  v81 = v197;
  v8 = v176;
  if (v197 != v196)
  {
    v82 = 0;
    v84 = v199;
    v83 = (uint64_t)v200;
    do
    {
      std::vector<double>::resize(v192[0] + 24 * v82, (v83 - v84) >> 3);
      v84 = v199;
      v83 = (uint64_t)v200;
      v85 = v196;
      if (v200 != (void *)v199)
      {
        v86 = ((uint64_t)v200 - v199) >> 3;
        v87 = *(double **)(v192[0] + 24 * v82);
        if (v86 <= 1)
          v86 = 1;
        v88 = (double *)v199;
        do
        {
          v89 = *v88++;
          *v87++ = v85[v82] - v89;
          --v86;
        }
        while (v86);
      }
      ++v82;
      v81 = v197;
    }
    while (v82 < v197 - v85);
  }
  if (*(int *)(v30 + 44) >= 1)
  {
    v90 = 0;
    do
    {
      v91 = (double **)(v192[0] + 24 * v90);
      v92 = v193[v90];
      std::vector<double>::vector(&v190, v91[1] - *v91);
      v93 = *v91;
      if (v91[1] != *v91)
      {
        v94 = v91[1] - *v91;
        v95 = (double *)v190;
        if (v94 <= 1)
          v94 = 1;
        do
        {
          v96 = *v93++;
          *v95++ = -v96 / v92;
          --v94;
        }
        while (v94);
      }
      v97 = v192[0] + 24 * v90;
      v99 = *(_QWORD *)(v97 + 48);
      v98 = v97 + 48;
      v100 = v193[++v90];
      std::vector<double>::vector(v189, (*(_QWORD *)(v98 + 8) - v99) >> 3);
      v101 = *(double **)v98;
      if (*(_QWORD *)(v98 + 8) != *(_QWORD *)v98)
      {
        v102 = (uint64_t)(*(_QWORD *)(v98 + 8) - *(_QWORD *)v98) >> 3;
        v103 = (double *)v189[0];
        if (v102 <= 1)
          v102 = 1;
        do
        {
          v104 = *v101++;
          *v103++ = v104 / v100;
          --v102;
        }
        while (v102);
      }
      std::vector<double>::vector(__p, (v191 - (_BYTE *)v190) >> 3);
      v105 = (double *)v190;
      if (v191 != v190)
      {
        v106 = (v191 - (_BYTE *)v190) >> 3;
        v107 = (double *)v189[0];
        v108 = (double *)__p[0];
        if (v106 <= 1)
          v106 = 1;
        do
        {
          v109 = *v107++;
          v110 = v109;
          v111 = *v105++;
          v112 = v111;
          if (v110 >= v111)
            v110 = v112;
          *v108++ = fmax(v110, 0.0);
          --v106;
        }
        while (v106);
      }
      v113 = *(_QWORD **)(v30 + 8);
      v114 = *(_QWORD *)(v30 + 16);
      if ((unint64_t)v113 >= v114)
      {
        v115 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v113 - *(_QWORD *)v30) >> 3);
        v116 = v115 + 1;
        if (v115 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v117 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v114 - *(_QWORD *)v30) >> 3);
        if (2 * v117 > v116)
          v116 = 2 * v117;
        if (v117 >= 0x555555555555555)
          v118 = 0xAAAAAAAAAAAAAAALL;
        else
          v118 = v116;
        v203 = v30 + 16;
        v119 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v30 + 16, v118);
        v120 = &v119[24 * v115];
        *(_QWORD *)buf = v119;
        *(_QWORD *)&buf[8] = v120;
        v202 = &v119[24 * v121];
        *(_QWORD *)v120 = 0;
        *((_QWORD *)v120 + 1) = 0;
        *((_QWORD *)v120 + 2) = 0;
        *(_OWORD *)v120 = *(_OWORD *)__p;
        *((_QWORD *)v120 + 2) = v188;
        __p[0] = 0;
        __p[1] = 0;
        v188 = 0;
        *(_QWORD *)&buf[16] = v120 + 24;
        std::vector<std::vector<double>>::__swap_out_circular_buffer((_QWORD *)v30, buf);
        v122 = *(_QWORD *)(v30 + 8);
        std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)buf);
        v123 = __p[0];
        *(_QWORD *)(v30 + 8) = v122;
        if (v123)
        {
          __p[1] = v123;
          operator delete(v123);
        }
      }
      else
      {
        *v113 = 0;
        v113[1] = 0;
        v113[2] = 0;
        *(_OWORD *)v113 = *(_OWORD *)__p;
        v113[2] = v188;
        __p[0] = 0;
        __p[1] = 0;
        v188 = 0;
        *(_QWORD *)(v30 + 8) = v113 + 3;
      }
      if (v189[0])
      {
        v189[1] = v189[0];
        operator delete(v189[0]);
      }
      if (v190)
      {
        v191 = v190;
        operator delete(v190);
      }
    }
    while (v90 < *(int *)(v30 + 44));
    v81 = v197;
    v9 = v175;
    v8 = v176;
  }
  std::vector<double>::vector(buf, v81 - v196 - 2);
  v124 = *(unsigned int *)(v30 + 44);
  if ((int)v124 >= 1)
  {
    v125 = *(double **)buf;
    v126 = v196 + 2;
    v127 = *(unsigned int *)(v30 + 44);
    do
    {
      *v125++ = 2.0 / (*v126 - *(v126 - 2));
      ++v126;
      --v127;
    }
    while (v127);
  }
  v128 = *(unsigned int *)(v30 + 40);
  v129 = *(double **)buf;
  if ((int)v128 >= 1)
  {
    for (i = 0; i != v128; ++i)
    {
      if ((int)v124 >= 1)
      {
        v131 = *(char ***)v30;
        v132 = v129;
        v133 = v124;
        do
        {
          v135 = *v131;
          v131 += 3;
          v134 = v135;
          v136 = *(double *)&v135[8 * i];
          v137 = *v132++;
          *(double *)&v134[8 * i] = v136 * v137;
          --v133;
        }
        while (v133);
      }
    }
    v129 = *(double **)buf;
  }
  if (v129)
  {
    *(_QWORD *)&buf[8] = v129;
    operator delete(v129);
  }
  *(_QWORD *)buf = v192;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v193)
  {
    v194 = v193;
    operator delete(v193);
  }
  if (v196)
  {
    v197 = v196;
    operator delete(v196);
  }
  if (v199)
  {
    v200 = (void *)v199;
    operator delete((void *)v199);
  }
  MelBanks::inst_ = v30;
LABEL_176:
  *((_QWORD *)v19 + 25) = v30;
  if (v174 != (uint64_t *)v30)
  {
    v139 = *(char ***)v30;
    v138 = *(char ***)(v30 + 8);
    v140 = *((_QWORD *)v19 + 18);
    v141 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v138 - *(_QWORD *)v30) >> 3);
    v142 = *((_QWORD *)v19 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v140 - v142) >> 3) < v141)
    {
      if (v142)
      {
        std::vector<std::vector<int>>::__clear[abi:ne180100](v174);
        operator delete((void *)*v174);
        v140 = 0;
        *v174 = 0;
        *((_QWORD *)v19 + 17) = 0;
        *((_QWORD *)v19 + 18) = 0;
      }
      if (v141 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v143 = 0xAAAAAAAAAAAAAAABLL * (v140 >> 3);
      v144 = 2 * v143;
      if (2 * v143 <= v141)
        v144 = v141;
      if (v143 >= 0x555555555555555)
        v145 = 0xAAAAAAAAAAAAAAALL;
      else
        v145 = v144;
      std::vector<std::vector<float>>::__vallocate[abi:ne180100](v174, v145);
      v146 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<double>>,std::vector<double>*,std::vector<double>*,std::vector<double>*>((uint64_t)(v19 + 144), (uint64_t)v139, (uint64_t)v138, *((_QWORD **)v19 + 17));
      goto LABEL_189;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v19 + 17) - v142) >> 3) < v141)
    {
      v147 = &v139[(*((_QWORD *)v19 + 17) - v142) >> 3];
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<double> *,std::vector<double> *,std::vector<double> *>(v139, v147, v142);
      v146 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<double>>,std::vector<double>*,std::vector<double>*,std::vector<double>*>((uint64_t)(v19 + 144), (uint64_t)v147, (uint64_t)v138, *((_QWORD **)v19 + 17));
LABEL_189:
      *((_QWORD *)v19 + 17) = v146;
      goto LABEL_196;
    }
    v148 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<double> *,std::vector<double> *,std::vector<double> *>(v139, v138, v142);
    v149 = (char **)*((_QWORD *)v19 + 17);
    if (v149 != v148)
    {
      v150 = (char **)*((_QWORD *)v19 + 17);
      do
      {
        v152 = *(v150 - 3);
        v150 -= 3;
        v151 = v152;
        if (v152)
        {
          *(v149 - 2) = v151;
          operator delete(v151);
        }
        v149 = v150;
      }
      while (v150 != v148);
    }
    *((_QWORD *)v19 + 17) = v148;
  }
LABEL_196:
  v153 = log2((double)*((int *)v19 + 11));
  *((_DWORD *)v19 + 52) = (int)v153;
  *((_QWORD *)v19 + 27) = vDSP_create_fftsetupD((int)v153, 0);
  *((_QWORD *)v19 + 28) = malloc_type_malloc(8 * (*((_DWORD *)v19 + 11) / 2), 0x100004000313F17uLL);
  *((_QWORD *)v19 + 29) = malloc_type_malloc(8 * (*((_DWORD *)v19 + 11) / 2), 0x100004000313F17uLL);
  *(_QWORD *)&v154 = v19 + 24;
  *((_QWORD *)&v154 + 1) = v19;
  v155 = (std::__shared_weak_count *)v8[38];
  *v172 = v154;
  if (v155)
  {
    p_shared_owners = (unint64_t *)&v155->__shared_owners_;
    do
      v157 = __ldaxr(p_shared_owners);
    while (__stlxr(v157 - 1, p_shared_owners));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  v158 = v169;
  if (v9)
  {
    v159 = (unint64_t *)&v9->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v161 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v162 = v169;
    if (*(char *)(a1 + 31) < 0)
      v162 = (_QWORD *)*v169;
    v163.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v162;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)((v163.__d_.__rep_ - rep) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v161, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v158 = (_QWORD *)*v169;
  v164.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v165, v158, (double)((v164.__d_.__rep_ - rep) / 1000000) / 1000.0);
  if (v9)
  {
    v166 = (unint64_t *)&v9->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_QWORD *)&v168 = v173;
  *((_QWORD *)&v168 + 1) = v8;
  *v171 = v168;
}

void sub_1DEA8D698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, Module *a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,__int128 a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,char a50)
{
  std::__shared_weak_count *v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  void *shared_owners;
  void *v57;
  void *v58;
  void *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  void *v62;
  unint64_t *v63;
  unint64_t v64;

  v51[5].__shared_weak_owners_ = v52;
  *(_QWORD *)(v54 - 200) = (char *)v51 + 176;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v54 - 200));
  *(_QWORD *)(v54 - 200) = a12;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v54 - 200));
  *(_QWORD *)(v54 - 200) = a20;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v54 - 200));
  shared_owners = (void *)v51[4].__shared_owners_;
  if (shared_owners)
  {
    v51[4].__shared_weak_owners_ = (uint64_t)shared_owners;
    operator delete(shared_owners);
  }
  v57 = (void *)v51[3].__shared_owners_;
  if (v57)
  {
    v51[3].__shared_weak_owners_ = (uint64_t)v57;
    operator delete(v57);
  }
  v58 = *a19;
  if (*a19)
  {
    v51[2].__shared_weak_owners_ = (uint64_t)v58;
    operator delete(v58);
  }
  std::__shared_weak_count::~__shared_weak_count(v51);
  operator delete(v59);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a17);
  Module::~Module(a18);
  if (v50)
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      v61 = __ldaxr(p_shared_owners);
    while (__stlxr(v61 - 1, p_shared_owners));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v53);
  operator delete(v62);
  if (v50)
  {
    v63 = (unint64_t *)&v50->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  _Unwind_Resume(a1);
}

void sub_1DEA8D98C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;

  *(_QWORD *)(v51 - 176) = &a51;
  JUMPOUT(0x1DEA8D82CLL);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ClickDetectorModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ClickDetectorModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ClickDetectorModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ClickDetectorModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<ClickDetectorModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933BA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ClickDetectorModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933BA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<ClickDetectorModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ParallelNeuralAcousticModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ParallelNeuralAcousticModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92F250;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ParallelNeuralAcousticModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ParallelNeuralAcousticModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92F250;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ParallelNeuralAcousticModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ParallelNeuralAcousticModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92F250;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA8DB20(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ParallelNeuralAcousticModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ParallelNeuralAcousticModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92F250;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ParallelNeuralAcousticModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ParallelNeuralAcousticModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ParallelNeuralAcousticModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ParallelNeuralAcousticModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ParallelNeuralAcousticModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ParallelNeuralAcousticModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void **v18;
  void **v19;
  uint64_t v20;
  float v21;
  uint64_t *v22;
  int v23;
  uint64_t *v24;
  std::__shared_weak_count *size;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  _QWORD *v29;
  uint64_t v31;
  NSObject *v33;
  const char *v34;
  void *exception;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::string::size_type *v41;
  NSObject *v42;
  std::string::size_type v43;
  std::chrono::steady_clock::time_point v44;
  std::chrono::steady_clock::time_point v45;
  const char *v46;
  unint64_t *v47;
  unint64_t v48;
  __n128 result;
  NSObject *v50;
  const char *v51;
  int v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  __int128 v75;
  std::__shared_weak_count *v76;
  unint64_t *p_shared_owners;
  unint64_t v78;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  __int128 v108;
  unint64_t *v109;
  unint64_t *v110;
  unint64_t v111;
  NeuralTTSUtils *v112;
  char *v113;
  unint64_t *v114;
  unint64_t v115;
  __int128 v116;
  unint64_t *v117;
  void *v118;
  _QWORD *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  void **v122;
  void **v123;
  void **v124;
  void **v125;
  void **v126;
  _OWORD *v127;
  unint64_t v128;
  __int128 v129;
  void **v130;
  uint64_t *v131;
  char v132[8];
  uint64_t *v133;
  __int128 v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  __int128 v137;
  char v138;
  std::string buf;
  uint64_t v140;

  v140 = *MEMORY[0x1E0C80C00];
  v129 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x210uLL);
  v9 = (unint64_t)v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA934F50;
  v10 = v8 + 3;
  if (*((_QWORD *)&v129 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    v134 = v129;
    v13 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  else
  {
    v134 = (unint64_t)v129;
  }
  Module::Module((uint64_t)(v8 + 3), (char *)a2, (uint64_t *)&v134);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v134 + 1);
  if (*((_QWORD *)&v134 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v128 = (unint64_t)v10;
  *(_QWORD *)(v9 + 24) = &off_1EA9217E8;
  *(_QWORD *)(v9 + 296) = 0;
  *(_QWORD *)(v9 + 304) = 0;
  *(_WORD *)(v9 + 312) = 256;
  v18 = (void **)(v9 + 320);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v9 + 320), &byte_1DEBD87CE);
  v19 = (void **)(v9 + 344);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v9 + 344), "default");
  *(_OWORD *)(v9 + 368) = xmmword_1DED16CA0;
  *(_QWORD *)(v9 + 384) = 0xA0000012CLL;
  *(_QWORD *)(v9 + 392) = 0x4120000000000064;
  *(_BYTE *)(v9 + 400) = 0;
  *(_QWORD *)(v9 + 408) = 850045863;
  v127 = (_OWORD *)(v9 + 488);
  *(_OWORD *)(v9 + 416) = 0u;
  *(_OWORD *)(v9 + 432) = 0u;
  *(_OWORD *)(v9 + 448) = 0u;
  *(_OWORD *)(v9 + 464) = 0u;
  *(_OWORD *)(v9 + 480) = 0u;
  *(_OWORD *)(v9 + 496) = 0u;
  *(_OWORD *)(v9 + 512) = 0u;
  v20 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "framework_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v20, &buf);
  if (*(char *)(v9 + 343) < 0)
    operator delete(*v18);
  *(_OWORD *)v18 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  *(_QWORD *)(v9 + 336) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
  std::string::basic_string[abi:ne180100]<0>(&v137, "model_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("default", (char *)a2, (const void **)&v137, &buf);
  if (*(char *)(v9 + 367) < 0)
    operator delete(*v19);
  *(_OWORD *)v19 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  *(_QWORD *)(v9 + 360) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
  *((_BYTE *)&buf.__r_.__value_.__s + 23) = 0;
  buf.__r_.__value_.__s.__data_[0] = 0;
  if (v138 < 0)
    operator delete((void *)v137);
  std::string::basic_string[abi:ne180100]<0>(&buf, "streaming_chunk_size");
  LODWORD(v137) = 10;
  *(_DWORD *)(v9 + 388) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)a2, (const void **)&buf.__r_.__value_.__l.__data_, (unsigned int *)&v137);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&buf, "thermal_critical_streaming_chunk_size");
  LODWORD(v137) = 200;
  *(_DWORD *)(v9 + 392) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)a2, (const void **)&buf.__r_.__value_.__l.__data_, (unsigned int *)&v137);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&buf, "frame_duration");
  LODWORD(v137) = 10;
  *(_DWORD *)(v9 + 368) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)a2, (const void **)&buf.__r_.__value_.__l.__data_, (unsigned int *)&v137);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&buf, "samples_per_frame");
  LODWORD(v137) = 480;
  *(_DWORD *)(v9 + 372) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)a2, (const void **)&buf.__r_.__value_.__l.__data_, (unsigned int *)&v137);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&buf, "trim_silences");
  LOBYTE(v137) = 1;
  *(_BYTE *)(v9 + 313) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>((char *)a2, (const void **)&buf.__r_.__value_.__l.__data_, (unsigned __int8 *)&v137);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&buf, "minimum_rtf_for_streaming");
  *(_QWORD *)&v137 = 0x4024000000000000;
  v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<double,0>((unsigned __int8 *)a2, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v137);
  *(float *)(v9 + 396) = v21;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&buf, "disable_streaming_on_watch");
  LOBYTE(v137) = 0;
  *(_BYTE *)(v9 + 400) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>((char *)a2, (const void **)&buf.__r_.__value_.__l.__data_, (unsigned __int8 *)&v137);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v132, a2);
  if (*(_BYTE *)a2 != 1
    || *(_QWORD *)(a2 + 8) + 8 == std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [21]>(*(_QWORD *)(a2 + 8), "frames_per_alignment"))
  {
    v131 = (uint64_t *)*(int *)(v9 + 376);
    v22 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v132, "frames_per_alignment");
    v23 = *(unsigned __int8 *)v22;
    *(_BYTE *)v22 = 5;
    v24 = (uint64_t *)v22[1];
    v22[1] = (uint64_t)v131;
    v131 = v24;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v131, v23);
  }
  std::allocate_shared[abi:ne180100]<TacotronAlignment,std::allocator<TacotronAlignment>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &,void>((uint64_t *)&buf, v132);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v9 + 472, (__int128 *)&buf);
  size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
  if (buf.__r_.__value_.__l.__size_)
  {
    v26 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (*(char *)(v9 + 343) < 0)
  {
    v31 = *(_QWORD *)(v9 + 328);
    if (v31 != 8)
    {
      if (v31 == 10 && *(_QWORD *)*v18 == 0x6C66726F736E6574 && *((_WORD *)*v18 + 4) == 30575)
        goto LABEL_57;
      goto LABEL_64;
    }
    v29 = *v18;
  }
  else
  {
    v28 = *(unsigned __int8 *)(v9 + 343);
    v29 = (_QWORD *)(v9 + 320);
    if (v28 != 8)
    {
      if (v28 != 10)
        goto LABEL_64;
      if (*v18 != (void *)0x6C66726F736E6574 || *(_WORD *)(v9 + 328) != 30575)
        goto LABEL_64;
LABEL_57:
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v33 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1DE3F6000, v33, OS_LOG_TYPE_DEFAULT, "Using Tensorflow inference.", (uint8_t *)&buf, 2u);
      }
      Diagnostics::log(5, "Using Tensorflow inference.", v34);
      exception = __cxa_allocate_exception(0x10uLL);
      StringFormatter::StringFormatter((StringFormatter *)&buf, "Tensorflow is not enabled.");
      MEMORY[0x1DF0EC99C](exception, &buf);
      __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
  }
  if (*v29 != 0x6F73736572707365)
    goto LABEL_64;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v50 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1DE3F6000, v50, OS_LOG_TYPE_DEFAULT, "Using Espresso inference.", (uint8_t *)&buf, 2u);
  }
  Diagnostics::log(5, "Using Espresso inference.", v51);
  if (*(char *)(v9 + 367) < 0)
  {
    v54 = *(_QWORD *)(v9 + 352);
    switch(v54)
    {
      case 7:
        if (*(_DWORD *)*v19 == 1634100580 && *(_DWORD *)((char *)*v19 + 3) == 1953264993)
          goto LABEL_147;
        break;
      case 9:
        if (*(_QWORD *)*v19 == 0x656C70756F636564 && *((_BYTE *)*v19 + 8) == 100)
        {
LABEL_130:
          v68 = operator new(0x300uLL);
          v69 = v68;
          v68[1] = 0;
          v68[2] = 0;
          *v68 = &off_1EA935960;
          v70 = v68 + 3;
          *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v129;
          if (*((_QWORD *)&v129 + 1))
          {
            v71 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
            do
              v72 = __ldxr(v71);
            while (__stxr(v72 + 1, v71));
          }
          EspressoParallelNeuralAMDecoupledInference::EspressoParallelNeuralAMDecoupledInference((uint64_t)(v68 + 3), (char *)a2, (uint64_t *)&buf);
          if (*((_QWORD *)&v129 + 1))
          {
            v73 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
            do
              v74 = __ldaxr(v73);
            while (__stlxr(v74 - 1, v73));
            if (!v74)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v129 + 1) + 16))(*((_QWORD *)&v129 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v129 + 1));
            }
          }
          *(_QWORD *)&v75 = v70;
          *((_QWORD *)&v75 + 1) = v69;
          v76 = *(std::__shared_weak_count **)(v9 + 496);
          *v127 = v75;
          if (!v76)
            goto LABEL_64;
          p_shared_owners = (unint64_t *)&v76->__shared_owners_;
          do
            v78 = __ldaxr(p_shared_owners);
          while (__stlxr(v78 - 1, p_shared_owners));
          goto LABEL_244;
        }
        break;
      case 19:
        v53 = (uint64_t *)*v19;
        goto LABEL_101;
      default:
        break;
    }
LABEL_246:
    v118 = __cxa_allocate_exception(0x10uLL);
    StringFormatter::StringFormatter((StringFormatter *)&buf, "Unable to load espresso libarary.");
    MEMORY[0x1DF0EC99C](v118, &buf);
    __cxa_throw(v118, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  v52 = *(unsigned __int8 *)(v9 + 367);
  if (v52 == 7)
  {
    if (*(_DWORD *)v19 != 1634100580 || *(_DWORD *)(v9 + 347) != 1953264993)
      goto LABEL_246;
LABEL_147:
    v80 = operator new(0x260uLL);
    v81 = v80;
    v80[1] = 0;
    v80[2] = 0;
    *v80 = &off_1EA935500;
    v82 = v80 + 3;
    if (*((_QWORD *)&v129 + 1))
    {
      v83 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
      do
        v84 = __ldxr(v83);
      while (__stxr(v84 + 1, v83));
      do
        v85 = __ldxr(v83);
      while (__stxr(v85 + 1, v83));
    }
    v120 = v129;
    EspressoParallelNeuralAMInferenceBase::EspressoParallelNeuralAMInferenceBase((uint64_t)(v80 + 3), (char *)a2, v129, *((std::__shared_weak_count **)&v129 + 1));
    if (*((_QWORD *)&v129 + 1))
    {
      v86 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v129 + 1) + 16))(*((_QWORD *)&v129 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v129 + 1));
      }
    }
    v119 = v82;
    v81[3] = &off_1EA9220E0;
    ParallelNeuralAMInference::Config::Config((uint64_t)(v81 + 31), a2);
    v130 = (void **)(v81 + 55);
    std::string::basic_string[abi:ne180100]<0>(v81 + 55, "input");
    v126 = (void **)(v81 + 58);
    std::string::basic_string[abi:ne180100]<0>(v81 + 58, "input_length");
    v123 = (void **)(v81 + 61);
    std::string::basic_string[abi:ne180100]<0>(v81 + 61, &byte_1DEBD87CE);
    v122 = (void **)(v81 + 64);
    std::string::basic_string[abi:ne180100]<0>(v81 + 64, &byte_1DEBD87CE);
    v125 = (void **)(v81 + 67);
    std::string::basic_string[abi:ne180100]<0>(v81 + 67, "Identity_1");
    v124 = (void **)(v81 + 70);
    std::string::basic_string[abi:ne180100]<0>(v81 + 70, "Identity");
    v88 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "graph_input_name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v88, &buf);
    if (*((char *)v81 + 463) < 0)
      operator delete(*v130);
    *(_OWORD *)v130 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    v81[57] = *((_QWORD *)&buf.__r_.__value_.__l + 2);
    v89 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "graph_input_length_name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v89, &buf);
    if (*((char *)v81 + 487) < 0)
      operator delete(*v126);
    *(_OWORD *)v126 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    v81[60] = *((_QWORD *)&buf.__r_.__value_.__l + 2);
    v90 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "graph_output_mel_name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v90, &buf);
    if (*((char *)v81 + 559) < 0)
      operator delete(*v125);
    *(_OWORD *)v125 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    v81[69] = *((_QWORD *)&buf.__r_.__value_.__l + 2);
    std::string::basic_string[abi:ne180100]<0>(&v137, "graph_output_alignment_name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)a2, (const void **)&v137, &buf);
    if (*((char *)v81 + 583) < 0)
      operator delete(*v124);
    *(_OWORD *)v124 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    v81[72] = *((_QWORD *)&buf.__r_.__value_.__l + 2);
    *((_BYTE *)&buf.__r_.__value_.__s + 23) = 0;
    buf.__r_.__value_.__s.__data_[0] = 0;
    if (v138 < 0)
      operator delete((void *)v137);
    std::string::basic_string[abi:ne180100]<0>(&v137, "graph_input_speaker_id_name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)a2, (const void **)&v137, &buf);
    if (*((char *)v81 + 511) < 0)
      operator delete(*v123);
    *(_OWORD *)v123 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    v81[63] = *((_QWORD *)&buf.__r_.__value_.__l + 2);
    *((_BYTE *)&buf.__r_.__value_.__s + 23) = 0;
    buf.__r_.__value_.__s.__data_[0] = 0;
    if (v138 < 0)
      operator delete((void *)v137);
    std::string::basic_string[abi:ne180100]<0>(&v137, "graph_input_language_embedding_name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)a2, (const void **)&v137, &buf);
    if (*((char *)v81 + 535) < 0)
      operator delete(*v122);
    *(_OWORD *)v122 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    v81[66] = *((_QWORD *)&buf.__r_.__value_.__l + 2);
    *((_BYTE *)&buf.__r_.__value_.__s + 23) = 0;
    buf.__r_.__value_.__s.__data_[0] = 0;
    if (v138 < 0)
      operator delete((void *)v137);
    if (*((_QWORD *)&v129 + 1))
    {
      v91 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
      do
        v92 = __ldxr(v91);
      while (__stxr(v92 + 1, v91));
    }
    PersistentModuleFactory::get_persistent_module_from_pool<ParallelNeuralAMPersistentModule>(&v135, (__int128 *)v81 + 14, v120);
    if (*((_QWORD *)&v129 + 1))
    {
      v93 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v129 + 1) + 16))(*((_QWORD *)&v129 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v129 + 1));
      }
    }
    v95 = *(_QWORD *)(v135 + 296);
    v121 = *(std::__shared_weak_count **)(v135 + 304);
    if (v121)
    {
      v96 = (unint64_t *)&v121->__shared_owners_;
      do
        v97 = __ldxr(v96);
      while (__stxr(v97 + 1, v96));
    }
    v98 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "graph_input_name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v98, &buf);
    if (*((char *)v81 + 463) < 0)
      operator delete(*v130);
    *(_OWORD *)v130 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    v81[57] = *((_QWORD *)&buf.__r_.__value_.__l + 2);
    v99 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "graph_input_length_name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v99, &buf);
    if (*((char *)v81 + 487) < 0)
      operator delete(*v126);
    *(_OWORD *)v126 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    v81[60] = *((_QWORD *)&buf.__r_.__value_.__l + 2);
    v100 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "graph_output_mel_name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v100, &buf);
    if (*((char *)v81 + 559) < 0)
      operator delete(*v125);
    *(_OWORD *)v125 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    v81[69] = *((_QWORD *)&buf.__r_.__value_.__l + 2);
    std::string::basic_string[abi:ne180100]<0>(&v137, "graph_output_alignment_name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)a2, (const void **)&v137, &buf);
    if (*((char *)v81 + 583) < 0)
      operator delete(*v124);
    *(_OWORD *)v124 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    v81[72] = *((_QWORD *)&buf.__r_.__value_.__l + 2);
    *((_BYTE *)&buf.__r_.__value_.__s + 23) = 0;
    buf.__r_.__value_.__s.__data_[0] = 0;
    if (v138 < 0)
      operator delete((void *)v137);
    std::string::basic_string[abi:ne180100]<0>(&v137, "graph_input_speaker_id_name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)a2, (const void **)&v137, &buf);
    if (*((char *)v81 + 511) < 0)
      operator delete(*v123);
    *(_OWORD *)v123 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    v81[63] = *((_QWORD *)&buf.__r_.__value_.__l + 2);
    *((_BYTE *)&buf.__r_.__value_.__s + 23) = 0;
    buf.__r_.__value_.__s.__data_[0] = 0;
    if (v138 < 0)
      operator delete((void *)v137);
    std::string::basic_string[abi:ne180100]<0>(&v137, "graph_input_language_embedding_name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)a2, (const void **)&v137, &buf);
    if (*((char *)v81 + 535) < 0)
      operator delete(*v122);
    *(_OWORD *)v122 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    v81[66] = *((_QWORD *)&buf.__r_.__value_.__l + 2);
    *((_BYTE *)&buf.__r_.__value_.__s + 23) = 0;
    buf.__r_.__value_.__s.__data_[0] = 0;
    if (v138 < 0)
      operator delete((void *)v137);
    v81[75] = v95 + 24;
    v81[74] = v95 + 16;
    v81[73] = v95;
    if (v121)
    {
      v101 = (unint64_t *)&v121->__shared_owners_;
      do
        v102 = __ldaxr(v101);
      while (__stlxr(v102 - 1, v101));
      if (!v102)
      {
        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
        std::__shared_weak_count::__release_weak(v121);
      }
    }
    v103 = v136;
    if (v136)
    {
      v104 = (unint64_t *)&v136->__shared_owners_;
      do
        v105 = __ldaxr(v104);
      while (__stlxr(v105 - 1, v104));
      if (!v105)
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
    }
    if (*((_QWORD *)&v129 + 1))
    {
      v106 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
      do
        v107 = __ldaxr(v106);
      while (__stlxr(v107 - 1, v106));
      if (!v107)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v129 + 1) + 16))(*((_QWORD *)&v129 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v129 + 1));
      }
    }
    *(_QWORD *)&v108 = v119;
    *((_QWORD *)&v108 + 1) = v81;
    v76 = *(std::__shared_weak_count **)(v9 + 496);
    *v127 = v108;
    if (!v76)
      goto LABEL_64;
    v109 = (unint64_t *)&v76->__shared_owners_;
    do
      v78 = __ldaxr(v109);
    while (__stlxr(v78 - 1, v109));
LABEL_244:
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
    goto LABEL_64;
  }
  if (v52 == 9)
  {
    if (*v19 != (void *)0x656C70756F636564 || *(_BYTE *)(v9 + 352) != 100)
      goto LABEL_246;
    goto LABEL_130;
  }
  v53 = (uint64_t *)(v9 + 344);
  if (v52 != 19)
    goto LABEL_246;
LABEL_101:
  v55 = *v53;
  v56 = v53[1];
  v57 = *(uint64_t *)((char *)v53 + 11);
  if (v55 != 0x656C70756F636564 || v56 != 0x6D61657274735F64 || v57 != 0x676E696D61657274)
    goto LABEL_246;
  v60 = (char *)operator new(0x4F8uLL);
  *((_QWORD *)v60 + 1) = 0;
  *((_QWORD *)v60 + 2) = 0;
  *(_QWORD *)v60 = &off_1EA935AB0;
  if (*((_QWORD *)&v129 + 1))
  {
    v61 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
    v137 = v129;
    v63 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 1, v63));
  }
  else
  {
    v137 = (unint64_t)v129;
  }
  EspressoParallelNeuralAMDecoupledInference::EspressoParallelNeuralAMDecoupledInference((uint64_t)(v60 + 24), (char *)a2, (uint64_t *)&v137);
  if (*((_QWORD *)&v129 + 1))
  {
    v110 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v129 + 1) + 16))(*((_QWORD *)&v129 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v129 + 1));
    }
  }
  *((_QWORD *)v60 + 3) = &off_1EA922588;
  EspressoParallelNeuralAMDecoupledInference::Config::Config((uint64_t)(v60 + 768), (char *)a2);
  *((_QWORD *)v60 + 156) = 0x8000000500;
  *((_DWORD *)v60 + 314) = 128;
  std::string::basic_string[abi:ne180100]<0>(&buf, "decoder_streaming_size");
  *((_DWORD *)v60 + 312) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)a2, (const void **)&buf.__r_.__value_.__l.__data_, (unsigned int *)v60 + 312);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&buf, "decoder_receptive_field_front_size");
  *((_DWORD *)v60 + 313) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)a2, (const void **)&buf.__r_.__value_.__l.__data_, (unsigned int *)v60 + 313);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&buf, "decoder_receptive_field_rear_size");
  v112 = (NeuralTTSUtils *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)a2, (const void **)&buf.__r_.__value_.__l.__data_, (unsigned int *)v60 + 314);
  *((_DWORD *)v60 + 314) = (_DWORD)v112;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (NeuralTTSUtils::is_amx_available(v112))
    *((_QWORD *)v60 + 158) = dispatch_pthread_root_queue_create();
  v113 = v60 + 24;
  if (*((_QWORD *)&v129 + 1))
  {
    v114 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v129 + 1) + 16))(*((_QWORD *)&v129 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v129 + 1));
      v113 = v60 + 24;
    }
  }
  *(_QWORD *)&v116 = v113;
  *((_QWORD *)&v116 + 1) = v60;
  v76 = *(std::__shared_weak_count **)(v9 + 496);
  *v127 = v116;
  if (v76)
  {
    v117 = (unint64_t *)&v76->__shared_owners_;
    do
      v78 = __ldaxr(v117);
    while (__stlxr(v78 - 1, v117));
    goto LABEL_244;
  }
LABEL_64:
  SharedObjectPool::get<SynthesizerConfig>(&buf, *(_QWORD *)(v9 + 192));
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v9 + 512, (__int128 *)&buf);
  v36 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
  if (buf.__r_.__value_.__l.__size_)
  {
    v37 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v133, v132[0]);
  if (*((_QWORD *)&v129 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v129 + 1) + 16))(*((_QWORD *)&v129 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v129 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v41 = (std::string::size_type *)(a1 + 8);
  v42 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v43 = a1 + 8;
    if (*(char *)(a1 + 31) < 0)
      v43 = *v41;
    v44.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v43;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v44.__d_.__rep_ - v7.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v42, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v41 = (std::string::size_type *)*v41;
  v45.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v46, v41, (double)((v45.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v129 + 1))
  {
    v47 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v129 + 1) + 16))(*((_QWORD *)&v129 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v129 + 1));
    }
  }
  result.n128_u64[0] = v128;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_1DEA8EF4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, EspressoParallelNeuralAMDecoupledInference::Config *a18, uint64_t a19, uint64_t a20,uint64_t a21,Module *a22,EspressoParallelNeuralAMDecoupledInference *a23,uint64_t a24,char a25,uint64_t a26,unsigned __int8 a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  std::__shared_weak_count *v32;
  uint64_t v33;
  void **v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *p_shared_owners;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  void *v46;
  unint64_t *v47;
  unint64_t v48;
  void *v49;
  unint64_t *v50;
  unint64_t v51;

  if (*(char *)(v37 - 137) < 0)
    operator delete(*(void **)(v37 - 160));
  if (a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  v41 = a32;
  if (a32)
  {
    v42 = (unint64_t *)&a32->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  EspressoParallelNeuralAMInference::Config::~Config(a11);
  *(_QWORD *)(v36 + 24) = &unk_1EA920F18;
  if (*(char *)(v36 + 247) < 0)
    operator delete(*(void **)(v36 + 224));
  ParallelNeuralAMInference::Config::~Config((ParallelNeuralAMInference::Config *)(v36 + 32));
  if (v32)
  {
    v44 = (unint64_t *)&v32->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v36);
  operator delete(v46);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a28, a27);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a20);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a19);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a21);
  std::mutex::~mutex((std::mutex *)(v33 + 408));
  if (*(char *)(v33 + 367) < 0)
    operator delete(*v35);
  if (*(char *)(v33 + 343) < 0)
    operator delete(*v34);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v33 + 296);
  Module::~Module(a22);
  if (v32)
  {
    v47 = (unint64_t *)&v32->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v33);
  operator delete(v49);
  if (v32)
  {
    v50 = (unint64_t *)&v32->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ParallelNeuralAcousticModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ParallelNeuralAcousticModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ParallelNeuralAcousticModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ParallelNeuralAcousticModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<ParallelNeuralAcousticModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934F50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ParallelNeuralAcousticModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934F50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<ParallelNeuralAcousticModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92ECD0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92ECD0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92ECD0;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA8F634(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92ECD0;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  float v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  NSObject *v25;
  unint64_t v26;
  __n128 *v27;
  _QWORD *v28;
  std::chrono::steady_clock::time_point v29;
  std::chrono::steady_clock::time_point v30;
  const char *v31;
  unint64_t *v32;
  unint64_t v33;
  __n128 result;
  __int128 v35;
  unsigned int v36;
  __int128 v37;
  _BYTE __p[22];
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v35 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x150uLL);
  v9 = (unint64_t)v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA933EB0;
  v10 = (unint64_t)(v8 + 3);
  if (*((_QWORD *)&v35 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    v37 = v35;
    v13 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  else
  {
    v37 = (unint64_t)v35;
  }
  Module::Module((uint64_t)(v8 + 3), a2, (uint64_t *)&v37);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
  if (*((_QWORD *)&v37 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *(_QWORD *)(v9 + 24) = &off_1EA91FC00;
  *(_QWORD *)(v9 + 320) = 0;
  *(_QWORD *)(v9 + 328) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "global");
  v36 = 1061997773;
  v18 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>((unsigned __int8 *)a2, (const void **)__p, (uint64_t)&v36);
  *(float *)(v9 + 308) = v18;
  if (v39 < 0)
  {
    operator delete(*(void **)__p);
    v18 = *(float *)(v9 + 308);
  }
  *(float *)(v9 + 296) = v18;
  *(float *)(v9 + 300) = v18;
  *(_DWORD *)(v9 + 312) = 1061997773;
  std::string::basic_string[abi:ne180100]<0>(__p, "peak_ratio");
  v36 = 1060320051;
  *(float *)(v9 + 316) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>((unsigned __int8 *)a2, (const void **)__p, (uint64_t)&v36);
  if (v39 < 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "smoothing_window");
  v36 = 120;
  *(_DWORD *)(v9 + 304) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)__p, &v36);
  if (v39 < 0)
    operator delete(*(void **)__p);
  *(_QWORD *)__p = 0;
  *(_QWORD *)&__p[8] = 0;
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v9 + 320, (__int128 *)__p);
  v19 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v20 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (*((_QWORD *)&v35 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v35 + 1) + 16))(*((_QWORD *)&v35 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v35 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v24 = (_QWORD *)(a1 + 8);
  v25 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v26 = v10;
    v27 = a4;
    v28 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v28 = (_QWORD *)*v24;
    v29.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v28;
    *(_WORD *)&__p[12] = 2048;
    *(double *)&__p[14] = (double)((v29.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v25, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", __p, 0x16u);
    a4 = v27;
    v10 = v26;
  }
  if (*(char *)(a1 + 31) < 0)
    v24 = (_QWORD *)*v24;
  v30.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v31, v24, (double)((v30.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v35 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v35 + 1) + 16))(*((_QWORD *)&v35 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v35 + 1));
    }
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_1DEA8FAB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  Module *v23;
  uint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v27;
  void *v28;
  unint64_t *v29;
  unint64_t v30;

  if (a21 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v24);
  Module::~Module(v23);
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v22);
  operator delete(v28);
  if (v21)
  {
    v29 = (unint64_t *)&v21->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<WaveformChangeModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933EB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<WaveformChangeModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933EB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<WaveformChangeModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92F0F0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92F0F0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92F0F0;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA8FD44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92F0F0;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, _OWORD *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  char v19;
  float v20;
  float v21;
  float v22;
  float v23;
  int v24;
  int v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  NSObject *v41;
  _QWORD *v42;
  _OWORD *v43;
  _QWORD *v44;
  std::chrono::steady_clock::time_point v45;
  std::chrono::steady_clock::time_point v46;
  const char *v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  unsigned int v53;
  __int128 v54;
  _BYTE __p[22];
  char v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v51 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x138uLL);
  v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA934888;
  v10 = v8 + 3;
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
  if (*((_QWORD *)&v51 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v54 = v51;
    v14 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  else
  {
    v54 = (unint64_t)v51;
  }
  Module::Module((uint64_t)(v8 + 3), a2, (uint64_t *)&v54);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v9[3] = &off_1EA920CD8;
  v9[37] = 0;
  v9[38] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "active");
  LOBYTE(v53) = 0;
  v19 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(a2, (const void **)__p, (unsigned __int8 *)&v53);
  if (v56 < 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "global_rate");
  v53 = 1065353216;
  v20 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>((unsigned __int8 *)a2, (const void **)__p, (uint64_t)&v53);
  if (v56 < 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "frame_size");
  v53 = 1106247680;
  v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>((unsigned __int8 *)a2, (const void **)__p, (uint64_t)&v53);
  if (v56 < 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "correlation_frame_size");
  v53 = 1096810496;
  v22 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>((unsigned __int8 *)a2, (const void **)__p, (uint64_t)&v53);
  if (v56 < 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "adaptive_rate_factor");
  v53 = 1045220557;
  v23 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>((unsigned __int8 *)a2, (const void **)__p, (uint64_t)&v53);
  if (v56 < 0)
    operator delete(*(void **)__p);
  if (v20 <= 0.0 || fabsf(v20) == INFINITY)
    v20 = 1.0;
  std::string::basic_string[abi:ne180100]<0>(__p, "sampling_frequency");
  v53 = 0;
  v24 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)__p, &v53);
  v25 = v24;
  if (v56 < 0)
  {
    operator delete(*(void **)__p);
    if (v25)
      goto LABEL_38;
  }
  else if (v24)
  {
    goto LABEL_38;
  }
  v52 = v51;
  if (*((_QWORD *)&v51 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v25 = NeuralTTSUtils::neural_sample_rate((uint64_t *)&v52);
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
  if (*((_QWORD *)&v52 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
LABEL_38:
  if (v25 < 1)
    v25 = 24000;
  std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v9 + 24, v51, *((uint64_t *)&v51 + 1));
  WaveformRateChanger::create_rate_changer((WaveformRateChanger *)__p, v19, v20, v25, v21, v22, v23);
  v31 = *(_OWORD *)__p;
  *(_QWORD *)__p = 0;
  *(_QWORD *)&__p[8] = 0;
  v32 = (std::__shared_weak_count *)v9[38];
  *(_OWORD *)(v9 + 37) = v31;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v36 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (*((_QWORD *)&v51 + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v51 + 1) + 16))(*((_QWORD *)&v51 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v51 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v40 = (_QWORD *)(a1 + 8);
  v41 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v42 = v10;
    v43 = a4;
    v44 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v44 = (_QWORD *)*v40;
    v45.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v44;
    *(_WORD *)&__p[12] = 2048;
    *(double *)&__p[14] = (double)((v45.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v41, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", __p, 0x16u);
    a4 = v43;
    v10 = v42;
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
  }
  if (*(char *)(a1 + 31) < 0)
    v40 = (_QWORD *)*v40;
  v46.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v47, v40, (double)((v46.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (v11)
  {
    v48 = (unint64_t *)&v11->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *(_QWORD *)&v50 = v10;
  *((_QWORD *)&v50 + 1) = v9;
  *a4 = v50;
}

void sub_1DEA90378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  Module *v26;
  uint64_t v27;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;

  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v27);
  Module::~Module(v26);
  if (v24)
  {
    v31 = (unint64_t *)&v24->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v25);
  operator delete(v33);
  if (v24)
  {
    v34 = (unint64_t *)&v24->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  _Unwind_Resume(a1);
}

void sub_1DEA904A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  unint64_t *p_shared_owners;
  unint64_t v19;

  if (a18)
  {
    p_shared_owners = (unint64_t *)&a18->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
      std::__shared_weak_count::__release_weak(a18);
    }
  }
  JUMPOUT(0x1DEA9041CLL);
}

void sub_1DEA904E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (!a12)
    JUMPOUT(0x1DEA90498);
  JUMPOUT(0x1DEA90464);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<WaveformRateChangeModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934888;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<WaveformRateChangeModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934888;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<WaveformRateChangeModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92EF38;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92EF38;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92EF38;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA90678(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92EF38;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, _OWORD *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _BOOL4 v19;
  int v20;
  float v21;
  _QWORD *v22;
  float v23;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  NSObject *v36;
  _QWORD *v37;
  _OWORD *v38;
  _QWORD *v39;
  std::chrono::steady_clock::time_point v40;
  std::chrono::steady_clock::time_point v41;
  const char *v42;
  unint64_t *v43;
  unint64_t v44;
  __int128 v45;
  __int128 v46;
  unsigned int v47;
  __int128 v48;
  _BYTE __p[12];
  __int16 v50;
  double v51;
  char v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v46 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x138uLL);
  v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA9342D8;
  v10 = v8 + 3;
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
  if (*((_QWORD *)&v46 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v48 = v46;
    v14 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  else
  {
    v48 = (unint64_t)v46;
  }
  Module::Module((uint64_t)(v8 + 3), a2, (uint64_t *)&v48);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (*((_QWORD *)&v48 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v9[3] = &off_1EA920430;
  v9[37] = 0;
  v9[38] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "active");
  LOBYTE(v47) = 0;
  v19 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(a2, (const void **)__p, (unsigned __int8 *)&v47);
  if (v52 < 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "frame_shift");
  v47 = 240;
  v20 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)__p, &v47);
  if (v52 < 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "global_rate");
  v47 = 1065353216;
  v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>((unsigned __int8 *)a2, (const void **)__p, (uint64_t)&v47);
  if (v52 < 0)
    operator delete(*(void **)__p);
  if (v21 <= 0.0 || fabsf(v21) == INFINITY)
    v21 = 1.0;
  v22 = operator new(0x58uLL);
  v23 = 1.0;
  if (v19)
    v23 = v21;
  v22[1] = 0;
  v22[2] = 0;
  *v22 = &off_1EA9322E8;
  v22[4] = 0;
  v22[5] = 0;
  v22[3] = 0;
  *((_BYTE *)v22 + 84) = v19;
  *((float *)v22 + 16) = v23;
  *((_OWORD *)v22 + 3) = xmmword_1DED16CC0;
  *((_DWORD *)v22 + 19) = v20;
  *((_DWORD *)v22 + 20) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)((char *)v22 + 68) = _D0;
  *(_QWORD *)&v29 = v22 + 3;
  *((_QWORD *)&v29 + 1) = v22;
  v30 = (std::__shared_weak_count *)v9[38];
  *(_OWORD *)(v9 + 37) = v29;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (*((_QWORD *)&v46 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v46 + 1) + 16))(*((_QWORD *)&v46 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v46 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v35 = (_QWORD *)(a1 + 8);
  v36 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v37 = v10;
    v38 = a4;
    v39 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v39 = (_QWORD *)*v35;
    v40.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v39;
    v50 = 2048;
    v51 = (double)((v40.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v36, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", __p, 0x16u);
    a4 = v38;
    v10 = v37;
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
  }
  if (*(char *)(a1 + 31) < 0)
    v35 = (_QWORD *)*v35;
  v41.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v42, v35, (double)((v41.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (v11)
  {
    v43 = (unint64_t *)&v11->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *(_QWORD *)&v45 = v10;
  *((_QWORD *)&v45 + 1) = v9;
  *a4 = v45;
}

void sub_1DEA90B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  Module *v24;
  uint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v28;
  void *v29;
  unint64_t *v30;
  unint64_t v31;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v25);
  Module::~Module(v24);
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v23);
  operator delete(v29);
  if (v22)
  {
    v30 = (unint64_t *)&v22->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  _Unwind_Resume(a1);
}

void sub_1DEA90C20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (a16)
  {
    p_shared_owners = (unint64_t *)&a16->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
      std::__shared_weak_count::__release_weak(a16);
    }
  }
  JUMPOUT(0x1DEA90B9CLL);
}

void sub_1DEA90C64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (!a12)
    JUMPOUT(0x1DEA90C18);
  JUMPOUT(0x1DEA90BE4);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<NeuralRateChangeModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9342D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NeuralRateChangeModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9342D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<NeuralRateChangeModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PromptPartitionModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PromptPartitionModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92EDD8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PromptPartitionModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PromptPartitionModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92EDD8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PromptPartitionModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PromptPartitionModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92EDD8;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA90DF8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PromptPartitionModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PromptPartitionModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92EDD8;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PromptPartitionModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PromptPartitionModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PromptPartitionModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PromptPartitionModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PromptPartitionModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PromptPartitionModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void **v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::string::size_type *v19;
  NSObject *v20;
  unint64_t v21;
  __n128 *v22;
  std::string::size_type v23;
  std::chrono::steady_clock::time_point v24;
  std::chrono::steady_clock::time_point v25;
  const char *v26;
  unint64_t *v27;
  unint64_t v28;
  __n128 result;
  __int128 v30;
  std::string buf;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v30 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x148uLL);
  v9 = (unint64_t)v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA9340E0;
  v10 = (unint64_t)(v8 + 3);
  if (*((_QWORD *)&v30 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  Module::Module((Module *)(v8 + 3));
  *(_QWORD *)(v9 + 24) = off_1EA91FFF0;
  v13 = (void **)(v9 + 304);
  *(_QWORD *)(v9 + 312) = 0;
  *(_QWORD *)(v9 + 320) = 0;
  *(_QWORD *)(v9 + 304) = 0;
  v14 = (_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "pause_threshold");
  LODWORD(buf.__r_.__value_.__l.__data_) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v14, (int *)&buf);
  *(_DWORD *)(v9 + 296) = buf.__r_.__value_.__l.__data_;
  v15 = (_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "pause_threshold_base");
  LODWORD(buf.__r_.__value_.__l.__data_) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v15, (int *)&buf);
  *(_DWORD *)(v9 + 300) = buf.__r_.__value_.__l.__data_;
  v16 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "pause_marker");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v16, &buf);
  if (*(char *)(v9 + 327) < 0)
    operator delete(*v13);
  *(_OWORD *)v13 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  *(_QWORD *)(v9 + 320) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
  std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(v9 + 192), v30, *((uint64_t *)&v30 + 1));
  if (*((_QWORD *)&v30 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v30 + 1) + 16))(*((_QWORD *)&v30 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v30 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v19 = (std::string::size_type *)(a1 + 8);
  v20 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v21 = v10;
    v22 = a4;
    v23 = a1 + 8;
    if (*(char *)(a1 + 31) < 0)
      v23 = *v19;
    v24.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v23;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v24.__d_.__rep_ - v7.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v20, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
    a4 = v22;
    v10 = v21;
  }
  if (*(char *)(a1 + 31) < 0)
    v19 = (std::string::size_type *)*v19;
  v25.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v26, v19, (double)((v25.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v30 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v30 + 1) + 16))(*((_QWORD *)&v30 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v30 + 1));
    }
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_1DEA9119C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  unint64_t *v17;
  unint64_t v18;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v12);
  operator delete(v16);
  if (v11)
  {
    v17 = (unint64_t *)&v11->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PromptPartitionModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PromptPartitionModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PromptPartitionModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PromptPartitionModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<PromptPartitionModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9340E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PromptPartitionModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9340E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<PromptPartitionModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92ED28;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92ED28;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92ED28;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA913D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92ED28;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  NSObject *v16;
  __n128 *v17;
  _QWORD *v18;
  std::chrono::steady_clock::time_point v19;
  const char *v20;
  unint64_t *v21;
  unint64_t v22;
  __n128 result;
  __int128 v24;
  uint8_t buf[4];
  _QWORD *v26;
  __int16 v27;
  double v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v24 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x158uLL);
  v9 = (unint64_t)v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA933EE8;
  v10 = (unint64_t)(v8 + 3);
  if (*((_QWORD *)&v24 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  AudioResamplingModule::AudioResamplingModule((uint64_t)(v8 + 3), a2, v24, *((std::__shared_weak_count **)&v24 + 1));
  if (*((_QWORD *)&v24 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v24 + 1) + 16))(*((_QWORD *)&v24 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v24 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v15 = (_QWORD *)(a1 + 8);
  v16 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v17 = a4;
    v18 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v18 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136315394;
    v26 = v18;
    v27 = 2048;
    v28 = (double)((std::chrono::steady_clock::now().__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v16, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
    a4 = v17;
  }
  if (*(char *)(a1 + 31) < 0)
    v15 = (_QWORD *)*v15;
  v19.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v20, v15, (double)((v19.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v24 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v24 + 1) + 16))(*((_QWORD *)&v24 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v24 + 1));
    }
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_1DEA916C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  unint64_t *v17;
  unint64_t v18;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v12);
  operator delete(v16);
  if (v11)
  {
    v17 = (unint64_t *)&v11->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<AudioResamplingModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933EE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioResamplingModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933EE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<AudioResamplingModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FrontendFeatureLogModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FrontendFeatureLogModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92F098;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FrontendFeatureLogModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FrontendFeatureLogModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92F098;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FrontendFeatureLogModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FrontendFeatureLogModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92F098;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA918D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FrontendFeatureLogModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FrontendFeatureLogModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92F098;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FrontendFeatureLogModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FrontendFeatureLogModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FrontendFeatureLogModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FrontendFeatureLogModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FrontendFeatureLogModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FrontendFeatureLogModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  NSObject *v16;
  __n128 *v17;
  _QWORD *v18;
  std::chrono::steady_clock::time_point v19;
  const char *v20;
  unint64_t *v21;
  unint64_t v22;
  __n128 result;
  __int128 v24;
  uint8_t buf[4];
  _QWORD *v26;
  __int16 v27;
  double v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v24 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x130uLL);
  v9 = (unint64_t)v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA934738;
  v10 = (unint64_t)(v8 + 3);
  if (*((_QWORD *)&v24 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  FrontendFeatureLogModule::FrontendFeatureLogModule((uint64_t)(v8 + 3), a2, v24, *((std::__shared_weak_count **)&v24 + 1));
  if (*((_QWORD *)&v24 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v24 + 1) + 16))(*((_QWORD *)&v24 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v24 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v15 = (_QWORD *)(a1 + 8);
  v16 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v17 = a4;
    v18 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v18 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136315394;
    v26 = v18;
    v27 = 2048;
    v28 = (double)((std::chrono::steady_clock::now().__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v16, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
    a4 = v17;
  }
  if (*(char *)(a1 + 31) < 0)
    v15 = (_QWORD *)*v15;
  v19.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v20, v15, (double)((v19.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v24 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v24 + 1) + 16))(*((_QWORD *)&v24 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v24 + 1));
    }
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_1DEA91BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  unint64_t *v17;
  unint64_t v18;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v12);
  operator delete(v16);
  if (v11)
  {
    v17 = (unint64_t *)&v11->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FrontendFeatureLogModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FrontendFeatureLogModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FrontendFeatureLogModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FrontendFeatureLogModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralFEStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralFEStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92E648;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralFEStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralFEStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92E648;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralFEStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralFEStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92E648;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA91D88(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralFEStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralFEStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92E648;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralFEStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralFEStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralFEStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralFEStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralFEStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralFEStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  void **v18;
  void **v19;
  unint64_t v20;
  unsigned __int8 *v21;
  std::string::size_type size;
  std::string::size_type v23;
  unsigned __int8 *v24;
  std::string::size_type v25;
  std::string::size_type v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::string::size_type *v37;
  NSObject *v38;
  std::string::size_type v39;
  std::chrono::steady_clock::time_point v40;
  std::chrono::steady_clock::time_point v41;
  const char *v42;
  unint64_t *v43;
  unint64_t v44;
  __n128 result;
  __n128 *v46;
  unint64_t v47;
  std::string *v48;
  unint64_t *v49;
  std::chrono::steady_clock::time_point v50;
  __int128 v51;
  std::string __p;
  uint64_t v53;
  std::__shared_weak_count *v54;
  __int128 v55;
  std::string __str;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v51 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v50.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v7 = operator new(0x1B8uLL);
  v8 = (unint64_t)v7;
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_1EA932A90;
  v9 = v7 + 3;
  if (*((_QWORD *)&v51 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v55 = v51;
    v12 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  else
  {
    v55 = (unint64_t)v51;
  }
  Module::Module((uint64_t)(v7 + 3), a2, (uint64_t *)&v55);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
  if (*((_QWORD *)&v55 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v46 = a4;
  v47 = (unint64_t)v9;
  *(_QWORD *)(v8 + 24) = &off_1EA91D988;
  *(_QWORD *)(v8 + 304) = 0;
  *(_QWORD *)(v8 + 312) = 0;
  v17 = v8 + 304;
  *(_QWORD *)(v8 + 296) = v8 + 304;
  v18 = (void **)(v8 + 320);
  v19 = (void **)(v8 + 344);
  v20 = v8 + 376;
  *(_QWORD *)(v8 + 376) = 0;
  *(_QWORD *)(v8 + 384) = 0;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 336) = 0u;
  *(_OWORD *)(v8 + 352) = 0u;
  *(_QWORD *)(v8 + 368) = v8 + 376;
  v48 = (std::string *)(v8 + 392);
  v49 = (unint64_t *)(v8 + 368);
  *(_QWORD *)(v8 + 424) = 0x323F000000;
  *(_BYTE *)(v8 + 432) = 1;
  *(_DWORD *)(v8 + 436) = 3;
  *(_OWORD *)(v8 + 392) = 0u;
  *(_OWORD *)(v8 + 408) = 0u;
  SharedObjectPool::get<VoiceConfig>(&v53, (__int128 **)v51);
  v21 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "phone_map");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::map<std::string,int>,std::map<std::string,int>,0>((char ***)&__str, v21);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(char **)(v8 + 304));
  size = __str.__r_.__value_.__l.__size_;
  *(_QWORD *)(v8 + 296) = __str.__r_.__value_.__r.__words[0];
  *(_QWORD *)(v8 + 304) = size;
  v23 = __str.__r_.__value_.__r.__words[2];
  *(_QWORD *)(v8 + 312) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
  if (v23)
  {
    *(_QWORD *)(size + 16) = v17;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str.__r_.__value_.__l.__size_;
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = 0uLL;
    size = 0;
  }
  else
  {
    *(_QWORD *)(v8 + 296) = v17;
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((char *)size);
  v24 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "punctuation");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::set<std::string>,std::set<std::string>,0>((uint64_t)&__str, v24);
  std::__tree<std::string>::destroy((uint64_t)v49, *(char **)(v8 + 376));
  v25 = __str.__r_.__value_.__l.__size_;
  *(_QWORD *)(v8 + 368) = __str.__r_.__value_.__r.__words[0];
  *(_QWORD *)(v8 + 376) = v25;
  v26 = __str.__r_.__value_.__r.__words[2];
  *(_QWORD *)(v8 + 384) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
  if (v26)
  {
    *(_QWORD *)(v25 + 16) = v20;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str.__r_.__value_.__l.__size_;
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = 0uLL;
    v25 = 0;
  }
  else
  {
    *v49 = v20;
  }
  std::__tree<std::string>::destroy((uint64_t)&__str, (char *)v25);
  v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "eos");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v27, &__str);
  if (*(char *)(v8 + 343) < 0)
    operator delete(*v18);
  *(_OWORD *)v18 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  *(_QWORD *)(v8 + 336) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
  v28 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "word_boundary_marker");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v28, &__str);
  if (*(char *)(v8 + 367) < 0)
    operator delete(*v19);
  *(_OWORD *)v19 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  *(_QWORD *)(v8 + 360) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
  v29 = v53;
  v30 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "model_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v30, &__p);
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v29 + 40))(&__str, v29, 1852139122, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::operator=(v48, &__str);
  if (*(char *)(v8 + 415) < 0)
  {
    if (!*(_QWORD *)(v8 + 400))
      goto LABEL_30;
    goto LABEL_29;
  }
  if (*(_BYTE *)(v8 + 415))
  {
LABEL_29:
    v31 = operator new();
    EncoderDecoder::EncoderDecoder(v31, v48, 100, 0, 0, 0, 0.1);
    __p.__r_.__value_.__r.__words[0] = 0;
    std::unique_ptr<NeuralFEDecoder>::reset[abi:ne180100]((uint64_t *)(v8 + 416), v31);
    std::unique_ptr<NeuralFEDecoder>::reset[abi:ne180100]((uint64_t *)&__p, 0);
  }
LABEL_30:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v32 = v54;
  if (v54)
  {
    p_shared_owners = (unint64_t *)&v54->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (*((_QWORD *)&v51 + 1))
  {
    v35 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v51 + 1) + 16))(*((_QWORD *)&v51 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v51 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v37 = (std::string::size_type *)(a1 + 8);
  v38 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v39 = a1 + 8;
    if (*(char *)(a1 + 31) < 0)
      v39 = *v37;
    v40.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(__str.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = v39;
    WORD2(__str.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&__str.__r_.__value_.__r.__words[1] + 6) = (double)((v40.__d_.__rep_ - v50.__d_.__rep_) / 1000000)
                                                                 / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v38, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", (uint8_t *)&__str, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v37 = (std::string::size_type *)*v37;
  v41.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v42, v37, (double)((v41.__d_.__rep_ - v50.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v51 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v51 + 1) + 16))(*((_QWORD *)&v51 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v51 + 1));
    }
  }
  result.n128_u64[0] = v47;
  result.n128_u64[1] = v8;
  *v46 = result;
  return result;
}

void sub_1DEA923A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, Module *a13, void **a14, uint64_t a15, uint64_t a16, __int128 a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,uint64_t a28)
{
  std::__shared_weak_count *v28;
  uint64_t v29;
  void **v30;
  void **v31;
  char **v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *p_shared_owners;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  void *v40;
  unint64_t *v41;
  unint64_t v42;

  MEMORY[0x1DF0ED014](v33, 0x10B2C4095D85668);
  if (*(char *)(v34 - 105) < 0)
    operator delete(*(void **)(v34 - 128));
  if (a26)
  {
    p_shared_owners = (unint64_t *)&a26->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))a26->__on_zero_shared)(a26);
      std::__shared_weak_count::__release_weak(a26);
    }
  }
  std::unique_ptr<NeuralFEDecoder>::reset[abi:ne180100](a11, 0);
  if (*(char *)(v29 + 415) < 0)
    operator delete(*a14);
  std::__tree<std::string>::destroy(a15, *(char **)(v29 + 376));
  if (*(char *)(v29 + 367) < 0)
    operator delete(*v31);
  if (*(char *)(v29 + 343) < 0)
    operator delete(*v30);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*v32);
  Module::~Module(a13);
  if (v28)
  {
    v38 = (unint64_t *)&v28->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v29);
  operator delete(v40);
  if (v28)
  {
    v41 = (unint64_t *)&v28->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralFEStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralFEStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralFEStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralFEStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<NeuralFEStream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932A90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NeuralFEStream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932A90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<NeuralFEStream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92EBC8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92EBC8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92EBC8;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA926F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92EBC8;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  NSObject *v17;
  __n128 *v18;
  _QWORD *v19;
  std::chrono::steady_clock::time_point v20;
  std::chrono::steady_clock::time_point v21;
  const char *v22;
  unint64_t *v23;
  unint64_t v24;
  __n128 result;
  __int128 v26;
  _BYTE buf[22];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v26 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x420uLL);
  v9 = (unint64_t)v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA933C10;
  v10 = (unint64_t)(v8 + 3);
  *(_OWORD *)buf = v26;
  if (*((_QWORD *)&v26 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  NeuralAdapterModule::NeuralAdapterModule((uint64_t)(v8 + 3), a2, (uint64_t *)buf);
  v13 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v14 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v16 = (_QWORD *)(a1 + 8);
  v17 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v18 = a4;
    v19 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v19 = (_QWORD *)*v16;
    v20.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v19;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)((v20.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v17, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
    a4 = v18;
  }
  if (*(char *)(a1 + 31) < 0)
    v16 = (_QWORD *)*v16;
  v21.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v22, v16, (double)((v21.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v26 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v26 + 1) + 16))(*((_QWORD *)&v26 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v26 + 1));
    }
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_1DEA929E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, std::__shared_weak_count *a13)
{
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *v18;
  unint64_t *v19;
  unint64_t v20;

  if (a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v18);
  if (v13)
  {
    v19 = (unint64_t *)&v13->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<NeuralAdapterModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933C10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NeuralAdapterModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933C10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<NeuralAdapterModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<HydraAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<HydraAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92EA68;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<HydraAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<HydraAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92EA68;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<HydraAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<HydraAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92EA68;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA92BFC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<HydraAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<HydraAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92EA68;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<HydraAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<HydraAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<HydraAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<HydraAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<HydraAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<HydraAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  void **v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  int v62;
  std::string *v64;
  std::string::size_type i;
  int v66;
  std::string::size_type v67;
  int v68;
  int v69;
  int data;
  int v73;
  char v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  std::string::size_type *v83;
  NSObject *v84;
  std::string::size_type v85;
  std::chrono::steady_clock::time_point v86;
  std::chrono::steady_clock::time_point v87;
  const char *v88;
  unint64_t *v89;
  unint64_t v90;
  __n128 result;
  __n128 *v92;
  std::chrono::steady_clock::time_point v93;
  unint64_t v94;
  _QWORD *v95;
  __int128 v96;
  uint64_t v97[3];
  uint64_t v98;
  std::__shared_weak_count *v99;
  void *__p;
  uint64_t *v101;
  char v102;
  __int128 v103;
  std::string v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  v96 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v93.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v7 = operator new(0x178uLL);
  v8 = (unint64_t)v7;
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_1EA9339A8;
  v9 = v7 + 3;
  if (*((_QWORD *)&v96 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v103 = v96;
    v12 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  else
  {
    v103 = (unint64_t)v96;
  }
  Module::Module((uint64_t)(v7 + 3), a2, (uint64_t *)&v103);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
  if (*((_QWORD *)&v103 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *(_QWORD *)(v8 + 24) = off_1EA91F220;
  *(_OWORD *)(v8 + 296) = 0u;
  *(_OWORD *)(v8 + 312) = 0u;
  v94 = (unint64_t)v9;
  v95 = (_QWORD *)(v8 + 312);
  v17 = (_QWORD *)(v8 + 328);
  *(_OWORD *)(v8 + 328) = 0u;
  *(_OWORD *)(v8 + 344) = 0u;
  *(_QWORD *)(v8 + 360) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "id");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, a2, (const void **)&__p, &v104);
  v18 = (void **)(v8 + 208);
  if (*(char *)(v8 + 231) < 0)
    operator delete(*v18);
  *(_OWORD *)v18 = *(_OWORD *)&v104.__r_.__value_.__l.__data_;
  *(_QWORD *)(v8 + 224) = *((_QWORD *)&v104.__r_.__value_.__l + 2);
  *((_BYTE *)&v104.__r_.__value_.__s + 23) = 0;
  v104.__r_.__value_.__s.__data_[0] = 0;
  if (v102 < 0)
    operator delete(__p);
  if (*(char *)(v8 + 231) < 0)
  {
    std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)(v8 + 208), *(_QWORD *)(v8 + 216));
  }
  else
  {
    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = *(_OWORD *)v18;
    v104.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 224);
  }
  if (*((_QWORD *)&v96 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = *(std::__shared_weak_count **)(v96 + 24);
  v92 = a4;
  if (v21 && (v22 = std::__shared_weak_count::lock(v21)) != 0)
  {
    v23 = v22;
    v24 = *(_QWORD *)(v96 + 16);
    if (v24)
    {
      v25 = v24 + 8;
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v24 + 8), (unsigned __int8 *)&v104))
      {
        __p = &v104;
        v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v25, (unsigned __int8 *)&v104, (__int128 **)&__p);
        v27 = *((_QWORD *)v26 + 5);
        v28 = (std::__shared_weak_count *)*((_QWORD *)v26 + 6);
        v17 = (_QWORD *)(v8 + 328);
        if (v28)
        {
          p_shared_owners = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldxr(p_shared_owners);
          while (__stxr(v30 + 1, p_shared_owners));
        }
      }
      else
      {
        v28 = 0;
        v27 = 0;
        v17 = (_QWORD *)(v8 + 328);
      }
    }
    else
    {
      v28 = 0;
      v27 = 0;
    }
    v31 = (unint64_t *)&v23->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  else
  {
    v28 = 0;
    v27 = 0;
  }
  if (*((_QWORD *)&v96 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v96 + 1) + 16))(*((_QWORD *)&v96 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v96 + 1));
    }
  }
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  v35 = *(_QWORD *)(v27 + 296);
  v36 = *(std::__shared_weak_count **)(v27 + 304);
  if (v36)
  {
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
    std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v17, v35, (uint64_t)v36);
    v39 = (unint64_t *)&v36->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  else
  {
    std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v17, v35, 0);
  }
  v41 = *(_QWORD *)(v27 + 312);
  v42 = *(std::__shared_weak_count **)(v27 + 320);
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
    do
      v45 = __ldxr(v43);
    while (__stxr(v45 + 1, v43));
  }
  v46 = *(std::__shared_weak_count **)(v8 + 304);
  *(_QWORD *)(v8 + 296) = v41;
  *(_QWORD *)(v8 + 304) = v42;
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (v42)
  {
    v49 = (unint64_t *)&v42->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v51 = *(_QWORD *)(v27 + 328);
  v52 = *(std::__shared_weak_count **)(v27 + 336);
  if (v52)
  {
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
    std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v95, v51, (uint64_t)v52);
    v55 = (unint64_t *)&v52->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  else
  {
    std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v95, v51, 0);
  }
  *(_WORD *)(v8 + 370) = *(_WORD *)(v27 + 344);
  SharedObjectPool::get<VoiceConfig>(&v98, (__int128 **)v96);
  *(_OWORD *)v97 = v96;
  if (*((_QWORD *)&v96 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
  }
  NeuralTTSUtils::stress_marker(v97, v8 + 344, (BOOL *)(v8 + 368));
  v59 = (std::__shared_weak_count *)v97[1];
  if (v97[1])
  {
    v60 = (unint64_t *)(v97[1] + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (*(char *)(v8 + 367) < 0)
  {
    if (*(_QWORD *)(v8 + 352))
      goto LABEL_85;
LABEL_88:
    VoiceConfig::get_param<std::string>(&v104, v98, 1818324583, 0);
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v104.__r_.__value_.__l.__size_ == 5)
      {
        v64 = (std::string *)v104.__r_.__value_.__r.__words[0];
        if (*(_DWORD *)v104.__r_.__value_.__l.__data_ == 1227714149
          && *(_BYTE *)(v104.__r_.__value_.__r.__words[0] + 4) == 78)
        {
          goto LABEL_120;
        }
        goto LABEL_113;
      }
    }
    else if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) == 5)
    {
      if (LODWORD(v104.__r_.__value_.__l.__data_) == 1227714149 && v104.__r_.__value_.__s.__data_[4] == 78)
        goto LABEL_120;
      v64 = &v104;
LABEL_113:
      data = (int)v64->__r_.__value_.__l.__data_;
      v73 = v64->__r_.__value_.__s.__data_[4];
      if (data != 1177383526 || v73 != 82)
        goto LABEL_117;
LABEL_120:
      MEMORY[0x1DF0ECA80](v8 + 344, "\"");
      v75 = 1;
LABEL_121:
      *(_BYTE *)(v8 + 368) = v75;
      *(_BYTE *)(v8 + 369) = 1;
      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v104.__r_.__value_.__l.__data_);
      goto LABEL_123;
    }
LABEL_117:
    MEMORY[0x1DF0ECA80](v8 + 344, ":");
    v75 = 0;
    goto LABEL_121;
  }
  if (!*(_BYTE *)(v8 + 367))
    goto LABEL_88;
LABEL_85:
  *(_BYTE *)(v8 + 369) = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v98 + 72))(&__p, v98, 1702389364, 2);
  if ((_BYTE)__p)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<std::string>,std::vector<std::string>,0>((std::vector<std::string> *)&v104, (unsigned __int8 *)&__p);
    v62 = __p;
  }
  else
  {
    v62 = 0;
    memset(&v104, 0, sizeof(v104));
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v101, v62);
  for (i = v104.__r_.__value_.__r.__words[0]; i != v104.__r_.__value_.__l.__size_; i += 24)
  {
    v66 = *(char *)(i + 23);
    if (v66 < 0)
    {
      if (*(_QWORD *)(i + 8) != 6)
        continue;
      v67 = *(_QWORD *)i;
    }
    else
    {
      v67 = i;
      if (v66 != 6)
        continue;
    }
    v68 = *(_DWORD *)v67;
    v69 = *(unsigned __int16 *)(v67 + 4);
    if (v68 == 1701999731 && v69 == 29555)
    {
      *(_BYTE *)(v8 + 369) = 1;
      break;
    }
  }
  __p = &v104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_123:
  v76 = v99;
  if (v99)
  {
    v77 = (unint64_t *)&v99->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  if (v28)
  {
    v79 = (unint64_t *)&v28->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (*((_QWORD *)&v96 + 1))
  {
    v81 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v96 + 1) + 16))(*((_QWORD *)&v96 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v96 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v83 = (std::string::size_type *)(a1 + 8);
  v84 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v85 = a1 + 8;
    if (*(char *)(a1 + 31) < 0)
      v85 = *v83;
    v86.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(v104.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v104.__r_.__value_.__r.__words + 4) = v85;
    WORD2(v104.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&v104.__r_.__value_.__r.__words[1] + 6) = (double)((v86.__d_.__rep_ - v93.__d_.__rep_) / 1000000)
                                                                / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v84, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", (uint8_t *)&v104, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v83 = (std::string::size_type *)*v83;
  v87.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v88, v83, (double)((v87.__d_.__rep_ - v93.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v96 + 1))
  {
    v89 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v96 + 1) + 16))(*((_QWORD *)&v96 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v96 + 1));
    }
  }
  result.n128_u64[0] = v94;
  result.n128_u64[1] = v8;
  *v92 = result;
  return result;
}

void sub_1DEA93550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, Module *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  std::__shared_weak_count *v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  void **v33;
  uint64_t v34;
  unint64_t *p_shared_owners;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  void *v42;
  unint64_t *v43;
  unint64_t v44;

  p_shared_owners = (unint64_t *)&v32->__shared_owners_;
  do
    v37 = __ldaxr(p_shared_owners);
  while (__stlxr(v37 - 1, p_shared_owners));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  if (v29)
  {
    v38 = (unint64_t *)&v29->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (*(char *)(v34 - 105) < 0)
    operator delete(*(void **)(v34 - 128));
  if (*(char *)(v30 + 367) < 0)
    operator delete(*v33);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a12);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a16);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v31 + 272);
  Module::~Module(a15);
  if (v29)
  {
    v40 = (unint64_t *)&v29->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v30);
  operator delete(v42);
  if (v29)
  {
    v43 = (unint64_t *)&v29->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  _Unwind_Resume(a1);
}

void sub_1DEA93784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28)
{
  unint64_t *p_shared_owners;
  unint64_t v29;

  if (a28)
  {
    p_shared_owners = (unint64_t *)&a28->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))a28->__on_zero_shared)(a28);
      std::__shared_weak_count::__release_weak(a28);
    }
  }
  JUMPOUT(0x1DEA93708);
}

void sub_1DEA937C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (!a18)
    JUMPOUT(0x1DEA9377CLL);
  JUMPOUT(0x1DEA9374CLL);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<HydraAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<HydraAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<HydraAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<HydraAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<HydraAdapterModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9339A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HydraAdapterModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9339A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<HydraAdapterModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AudioMarkerModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AudioMarkerModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92E858;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AudioMarkerModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AudioMarkerModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92E858;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AudioMarkerModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AudioMarkerModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92E858;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA93958(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AudioMarkerModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AudioMarkerModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92E858;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AudioMarkerModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AudioMarkerModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AudioMarkerModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AudioMarkerModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AudioMarkerModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AudioMarkerModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  NSObject *v21;
  __n128 *v22;
  _QWORD *v23;
  std::chrono::steady_clock::time_point v24;
  std::chrono::steady_clock::time_point v25;
  const char *v26;
  unint64_t *v27;
  unint64_t v28;
  __n128 result;
  __int128 v30;
  _BYTE buf[22];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v30 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x128uLL);
  v9 = (unint64_t)v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA933548;
  v10 = v8 + 3;
  if (*((_QWORD *)&v30 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    *(_OWORD *)buf = v30;
    v13 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  else
  {
    *(_OWORD *)buf = (unint64_t)v30;
  }
  Module::Module((uint64_t)(v8 + 3), a2, (uint64_t *)buf);
  v15 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v16 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *v10 = &off_1EA91EB48;
  if (*((_QWORD *)&v30 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v30 + 1) + 16))(*((_QWORD *)&v30 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v30 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v20 = (_QWORD *)(a1 + 8);
  v21 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v22 = a4;
    v23 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v23 = (_QWORD *)*v20;
    v24.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v23;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)((v24.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v21, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
    a4 = v22;
  }
  if (*(char *)(a1 + 31) < 0)
    v20 = (_QWORD *)*v20;
  v25.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v26, v20, (double)((v25.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v30 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v30 + 1) + 16))(*((_QWORD *)&v30 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v30 + 1));
    }
  }
  result.n128_u64[0] = (unint64_t)v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_1DEA93CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, std::__shared_weak_count *a13)
{
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  void *v20;
  unint64_t *v21;
  unint64_t v22;

  if (a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  if (v13)
  {
    v18 = (unint64_t *)&v13->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v20);
  if (v13)
  {
    v21 = (unint64_t *)&v13->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AudioMarkerModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AudioMarkerModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AudioMarkerModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AudioMarkerModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<AudioMarkerModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933548;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioMarkerModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933548;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<AudioMarkerModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WhisperModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WhisperModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92E5F0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WhisperModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WhisperModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92E5F0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WhisperModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WhisperModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92E5F0;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA93EF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WhisperModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WhisperModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92E5F0;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WhisperModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WhisperModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WhisperModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WhisperModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WhisperModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WhisperModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  NSObject *v23;
  _QWORD *v24;
  std::chrono::steady_clock::time_point v25;
  std::chrono::steady_clock::time_point v26;
  const char *v27;
  unint64_t *v28;
  unint64_t v29;
  __n128 result;
  std::chrono::steady_clock::time_point v31;
  __int128 v32;
  unsigned int v33;
  __int128 v34;
  _BYTE __p[22];
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v32 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v31.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v7 = operator new(0x160uLL);
  v8 = (unint64_t)v7;
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_1EA9328D0;
  v9 = (unint64_t)(v7 + 3);
  if (*((_QWORD *)&v32 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v34 = v32;
    v12 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  else
  {
    v34 = (unint64_t)v32;
  }
  Module::Module((uint64_t)(v7 + 3), a2, (uint64_t *)&v34);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *(_QWORD *)(v8 + 24) = &off_1EA91D7E8;
  *(_WORD *)(v8 + 296) = 0;
  *(_DWORD *)(v8 + 300) = 48000;
  *(_OWORD *)(v8 + 304) = 0u;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 336) = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "sample_rate");
  v33 = 48000;
  *(_DWORD *)(v8 + 300) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)__p, &v33);
  if (v36 < 0)
    operator delete(*(void **)__p);
  SharedObjectPool::get<SynthesizerConfig>(__p, v32);
  v17 = *(std::__shared_weak_count **)&__p[8];
  *(_BYTE *)(v8 + 297) = *(_BYTE *)(*(_QWORD *)__p + 1);
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (*((_QWORD *)&v32 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v32 + 1) + 16))(*((_QWORD *)&v32 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v32 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v22 = (_QWORD *)(a1 + 8);
  v23 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v24 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v24 = (_QWORD *)*v22;
    v25.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v24;
    *(_WORD *)&__p[12] = 2048;
    *(double *)&__p[14] = (double)((v25.__d_.__rep_ - v31.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v23, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", __p, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v22 = (_QWORD *)*v22;
  v26.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v27, v22, (double)((v26.__d_.__rep_ - v31.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v32 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v32 + 1) + 16))(*((_QWORD *)&v32 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v32 + 1));
    }
  }
  result.n128_u64[0] = v9;
  result.n128_u64[1] = v8;
  *a4 = result;
  return result;
}

void sub_1DEA942DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  Module *v25;
  void **p_shared_weak_owners;
  std::__shared_weak_count_vtbl *shared_weak_owners;
  std::__shared_weak_count_vtbl *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  void *v32;
  unint64_t *v33;
  unint64_t v34;

  p_shared_weak_owners = (void **)&v24[12].__shared_weak_owners_;
  shared_weak_owners = (std::__shared_weak_count_vtbl *)v24[13].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    v24[14].__vftable = shared_weak_owners;
    operator delete(shared_weak_owners);
  }
  v29 = (std::__shared_weak_count_vtbl *)*p_shared_weak_owners;
  if (*p_shared_weak_owners)
  {
    v24[13].__vftable = v29;
    operator delete(v29);
  }
  Module::~Module(v25);
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v24);
  operator delete(v32);
  if (v23)
  {
    v33 = (unint64_t *)&v23->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WhisperModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WhisperModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WhisperModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WhisperModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<WhisperModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9328D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<WhisperModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9328D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<WhisperModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SilenceTrimmingStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SilenceTrimmingStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92EE30;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SilenceTrimmingStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SilenceTrimmingStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92EE30;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SilenceTrimmingStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SilenceTrimmingStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92EE30;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA94574(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SilenceTrimmingStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SilenceTrimmingStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92EE30;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SilenceTrimmingStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SilenceTrimmingStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SilenceTrimmingStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SilenceTrimmingStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SilenceTrimmingStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SilenceTrimmingStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  NSObject *v21;
  unint64_t v22;
  __n128 *v23;
  _QWORD *v24;
  std::chrono::steady_clock::time_point v25;
  std::chrono::steady_clock::time_point v26;
  const char *v27;
  unint64_t *v28;
  unint64_t v29;
  __n128 result;
  __int128 v31;
  _BYTE buf[22];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v31 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x148uLL);
  v9 = (unint64_t)v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA934118;
  v10 = (unint64_t)(v8 + 3);
  if (*((_QWORD *)&v31 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    *(_OWORD *)buf = v31;
    v13 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  else
  {
    *(_OWORD *)buf = (unint64_t)v31;
  }
  Module::Module((uint64_t)(v8 + 3), a2, (uint64_t *)buf);
  v15 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v16 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *(_QWORD *)(v9 + 24) = &off_1EA920060;
  *(_DWORD *)(v9 + 296) = 48000;
  *(_QWORD *)(v9 + 312) = 0;
  *(_QWORD *)(v9 + 320) = 0;
  *(_QWORD *)(v9 + 304) = 0;
  if (*((_QWORD *)&v31 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v31 + 1) + 16))(*((_QWORD *)&v31 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v31 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v20 = (_QWORD *)(a1 + 8);
  v21 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v22 = v10;
    v23 = a4;
    v24 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v24 = (_QWORD *)*v20;
    v25.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v24;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)((v25.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v21, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
    a4 = v23;
    v10 = v22;
  }
  if (*(char *)(a1 + 31) < 0)
    v20 = (_QWORD *)*v20;
  v26.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v27, v20, (double)((v26.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v31 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v31 + 1) + 16))(*((_QWORD *)&v31 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v31 + 1));
    }
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_1DEA948E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, std::__shared_weak_count *a13)
{
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  void *v20;
  unint64_t *v21;
  unint64_t v22;

  if (a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  if (v13)
  {
    v18 = (unint64_t *)&v13->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v20);
  if (v13)
  {
    v21 = (unint64_t *)&v13->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SilenceTrimmingStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SilenceTrimmingStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SilenceTrimmingStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SilenceTrimmingStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<SilenceTrimmingStream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934118;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SilenceTrimmingStream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934118;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<SilenceTrimmingStream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92E4E8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92E4E8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92E4E8;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA94B28(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92E4E8;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  NSObject *v21;
  unint64_t v22;
  __n128 *v23;
  _QWORD *v24;
  std::chrono::steady_clock::time_point v25;
  std::chrono::steady_clock::time_point v26;
  const char *v27;
  unint64_t *v28;
  unint64_t v29;
  __n128 result;
  __int128 v31;
  _BYTE buf[22];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v31 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x140uLL);
  v9 = (unint64_t)v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA932358;
  v10 = (unint64_t)(v8 + 3);
  if (*((_QWORD *)&v31 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    *(_OWORD *)buf = v31;
    v13 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  else
  {
    *(_OWORD *)buf = (unint64_t)v31;
  }
  Module::Module((uint64_t)(v8 + 3), a2, (uint64_t *)buf);
  v15 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v16 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *(_QWORD *)(v9 + 24) = &off_1EA91CB18;
  *(_QWORD *)(v9 + 296) = 0;
  *(_QWORD *)(v9 + 304) = 0;
  *(_DWORD *)(v9 + 312) = 48000;
  *(_BYTE *)(v9 + 316) = 0;
  if (*((_QWORD *)&v31 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v31 + 1) + 16))(*((_QWORD *)&v31 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v31 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v20 = (_QWORD *)(a1 + 8);
  v21 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v22 = v10;
    v23 = a4;
    v24 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v24 = (_QWORD *)*v20;
    v25.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v24;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)((v25.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v21, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
    a4 = v23;
    v10 = v22;
  }
  if (*(char *)(a1 + 31) < 0)
    v20 = (_QWORD *)*v20;
  v26.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v27, v20, (double)((v26.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v31 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v31 + 1) + 16))(*((_QWORD *)&v31 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v31 + 1));
    }
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_1DEA94E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, std::__shared_weak_count *a13)
{
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  void *v20;
  unint64_t *v21;
  unint64_t v22;

  if (a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  if (v13)
  {
    v18 = (unint64_t *)&v13->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v20);
  if (v13)
  {
    v21 = (unint64_t *)&v13->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<WsolaStream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932358;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<WsolaStream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932358;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<WsolaStream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92E490;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92E490;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92E490;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA950DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92E490;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  _DWORD *v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  char v36;
  int v37;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  NSObject *v43;
  const char *v44;
  int v45;
  int v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  NSObject *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  int v57;
  uint64_t v58;
  unsigned __int8 *v59;
  int v60;
  unint64_t *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *p_shared_owners;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  NSObject *v74;
  _QWORD *v75;
  std::chrono::steady_clock::time_point v76;
  std::chrono::steady_clock::time_point v77;
  const char *v78;
  unint64_t *v79;
  unint64_t v80;
  __n128 result;
  __n128 *v82;
  std::chrono::steady_clock::time_point v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  __int128 v90;
  _BYTE v91[32];
  _BYTE buf[18];
  char v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  v84 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v83.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v7 = operator new(0x208uLL);
  v8 = (unint64_t)v7;
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_1EA9322B0;
  v9 = (unint64_t)(v7 + 3);
  if (*((_QWORD *)&v84 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v90 = v84;
    v12 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  else
  {
    v90 = (unint64_t)v84;
  }
  Module::Module((uint64_t)(v7 + 3), a2, (uint64_t *)&v90);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
  if (*((_QWORD *)&v90 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *(_QWORD *)(v8 + 24) = &off_1EA91C890;
  *(_DWORD *)(v8 + 296) = 48000;
  *(_QWORD *)(v8 + 304) = 0;
  *(_QWORD *)(v8 + 312) = 0;
  *(int32x2_t *)(v8 + 320) = vdup_n_s32(0x42C80000u);
  *(_DWORD *)(v8 + 328) = 1117782016;
  *(_OWORD *)(v8 + 344) = 0u;
  *(_OWORD *)(v8 + 360) = 0u;
  *(_OWORD *)(v8 + 376) = 0u;
  *(_QWORD *)(v8 + 416) = 0;
  *(_QWORD *)(v8 + 424) = 0;
  *(_QWORD *)(v8 + 408) = 0;
  *(_OWORD *)(v8 + 440) = 0u;
  *(_OWORD *)(v8 + 456) = 0u;
  *(_OWORD *)(v8 + 472) = 0u;
  *(_OWORD *)(v8 + 488) = 0u;
  *(_OWORD *)(v8 + 504) = 0u;
  SharedObjectPool::get<Database>(&v88, v84);
  SharedObjectPool::get<VoiceConfig>(&v86, (__int128 **)v84);
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v86 + 16))(v91, v86, 1886220907, 2);
  v17 = (_QWORD *)&unk_1F044B000;
  v18 = &unk_1F044B000;
  if (!*(_QWORD *)&v91[24])
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v8 + 304, (__int128 *)buf);
    v47 = *(std::__shared_weak_count **)&buf[8];
    if (!*(_QWORD *)&buf[8])
      goto LABEL_53;
    v48 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    goto LABEL_51;
  }
  v19 = v88;
  v20 = (char *)operator new(0x88uLL);
  v21 = v20;
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = 0;
  *(_QWORD *)v20 = &off_1EA933A50;
  *((_QWORD *)v20 + 4) = v19;
  v22 = *(_QWORD *)v91;
  v23 = *(_QWORD *)&v91[8];
  *((_QWORD *)v20 + 5) = *(_QWORD *)v91;
  *((_QWORD *)v20 + 6) = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v22 = *((_QWORD *)v20 + 5);
  }
  *(_OWORD *)(v20 + 56) = *(_OWORD *)&v91[16];
  *((_DWORD *)v20 + 32) = 1;
  if (v22)
  {
    v26 = (_DWORD *)*((_QWORD *)v20 + 7);
    v27 = *v26;
    v28 = 4 * *v26;
    *((_DWORD *)v20 + 19) = v28;
    v29 = v26[1];
    *((_DWORD *)v20 + 20) = v29;
    v30 = v26[4];
    *((_DWORD *)v20 + 25) = v30;
    v31 = v26[2] * v30;
    *((_DWORD *)v20 + 21) = v31;
    v32 = v26[5];
    *((_DWORD *)v20 + 6) = v32;
    v33 = v26[3] * v32;
    *((_DWORD *)v20 + 22) = v33;
    *((_DWORD *)v20 + 23) = v28;
    v34 = v31 + 4 * v27;
    *((_DWORD *)v20 + 24) = v34;
    v35 = 1 << (8 * *((_BYTE *)v26 + 20) - 1);
    *((_DWORD *)v20 + 31) = v35;
    if (v29)
    {
      v36 = v26[6];
      v37 = 1 << v36;
      v38 = v35 << v36;
      v40 = v20 + 64;
      v39 = *((_QWORD *)v20 + 8);
      *((_DWORD *)v20 + 31) = v38;
      *((_DWORD *)v20 + 7) = v37;
      v41 = (v33 + v34);
      if (v39 == v41)
      {
        if (v29 < 2)
        {
          LOBYTE(v22) = 1;
        }
        else
        {
          v42 = v9;
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v43 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
          {
            v45 = *((_DWORD *)v21 + 20);
            v46 = *((_DWORD *)v21 + 32);
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)&buf[4] = v45;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v46;
            _os_log_impl(&dword_1DE3F6000, v43, OS_LOG_TYPE_ERROR, "Pitchmark file version %d is not supported. Latest supported version is %d.", buf, 0xEu);
          }
          Diagnostics::log(3, "Pitchmark file version %d is not supported. Latest supported version is %d.", v44, *((unsigned int *)v21 + 20), *((unsigned int *)v21 + 32));
          LOBYTE(v22) = 0;
          v9 = v42;
        }
        goto LABEL_38;
      }
    }
    else
    {
      v40 = v20 + 64;
      v50 = *((_QWORD *)v20 + 8);
      LOBYTE(v22) = 1;
      *((_DWORD *)v20 + 7) = 1;
      v41 = (v33 + v34);
      if (v50 == v41)
        goto LABEL_38;
    }
    v82 = a4;
    v51 = v9;
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v52 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      v54 = *v40;
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v54;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v41;
      _os_log_impl(&dword_1DE3F6000, v52, OS_LOG_TYPE_ERROR, "Pitchmark header is inconsistent with pitchmark file size: %zu %u", buf, 0x12u);
    }
    Diagnostics::log(3, "Pitchmark header is inconsistent with pitchmark file size: %zu %u", v53, *v40, v41);
    LOBYTE(v22) = 0;
    v9 = v51;
    a4 = v82;
  }
LABEL_38:
  v21[72] = v22;
  *((_QWORD *)v21 + 13) = 0x300000BB80;
  *((_DWORD *)v21 + 28) = 240;
  v55 = *((_QWORD *)v21 + 4);
  std::string::basic_string[abi:ne180100]<0>(buf, "duration");
  v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v55 + 304), buf);
  if (v56)
    v57 = *((_DWORD *)v56 + 10);
  else
    v57 = -1;
  *((_DWORD *)v21 + 29) = v57;
  if (v93 < 0)
    operator delete(*(void **)buf);
  v58 = *((_QWORD *)v21 + 4);
  std::string::basic_string[abi:ne180100]<0>(buf, "name");
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v58 + 304), buf);
  if (v59)
    v60 = *((_DWORD *)v59 + 10);
  else
    v60 = -1;
  v18 = &unk_1F044B000;
  *((_DWORD *)v21 + 30) = v60;
  if (v93 < 0)
    operator delete(*(void **)buf);
  *((_DWORD *)v21 + 33) = 2;
  *(_QWORD *)&v85 = v21 + 24;
  *((_QWORD *)&v85 + 1) = v21;
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v8 + 304, &v85);
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
  v17 = &unk_1F044B000;
  if (*((_QWORD *)&v85 + 1))
  {
    v61 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
    do
      v49 = __ldaxr(v61);
    while (__stlxr(v49 - 1, v61));
LABEL_51:
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
LABEL_53:
  v62 = *(std::__shared_weak_count **)&v91[8];
  if (*(_QWORD *)&v91[8])
  {
    v63 = (unint64_t *)(*(_QWORD *)&v91[8] + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = v87;
  if (v87)
  {
    p_shared_owners = (unint64_t *)&v87->__shared_owners_;
    do
      v67 = __ldaxr(p_shared_owners);
    while (__stlxr(v67 - 1, p_shared_owners));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = v89;
  if (v89)
  {
    v69 = (unint64_t *)&v89->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  if (*((_QWORD *)&v84 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v84 + 1) + 16))(*((_QWORD *)&v84 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v84 + 1));
    }
  }
  if (v17[443] != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v73 = (_QWORD *)(a1 + 8);
  v74 = *((_QWORD *)v18 + 442);
  if (os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
  {
    v75 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v75 = (_QWORD *)*v73;
    v76.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)v91 = 136315394;
    *(_QWORD *)&v91[4] = v75;
    *(_WORD *)&v91[12] = 2048;
    *(double *)&v91[14] = (double)((v76.__d_.__rep_ - v83.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v74, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", v91, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v73 = (_QWORD *)*v73;
  v77.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v78, v73, (double)((v77.__d_.__rep_ - v83.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v84 + 1))
  {
    v79 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v84 + 1) + 16))(*((_QWORD *)&v84 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v84 + 1));
    }
  }
  result.n128_u64[0] = v9;
  result.n128_u64[1] = v8;
  *a4 = result;
  return result;
}

void sub_1DEA95910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,void **a23,std::__shared_weak_count *a24)
{
  std::__shared_weak_count *v24;
  void **v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  Module *v29;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  void **v39;
  void *v40;
  void *v41;
  void **v42;
  void *v43;
  void *v44;
  unint64_t *v45;
  unint64_t v46;
  void *v47;
  unint64_t *v48;
  unint64_t v49;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v28);
  std::__shared_weak_count::~__shared_weak_count(v27);
  operator delete(v31);
  v32 = a24;
  if (a24)
  {
    p_shared_owners = (unint64_t *)&a24->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (a18)
  {
    v35 = (unint64_t *)&a18->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
      std::__shared_weak_count::__release_weak(a18);
    }
  }
  if (a20)
  {
    v37 = (unint64_t *)&a20->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))a20->__on_zero_shared)(a20);
      std::__shared_weak_count::__release_weak(a20);
    }
  }
  v39 = v25 + 48;
  a23 = (void **)(v26 + 496);
  std::vector<Prompt>::__destroy_vector::operator()[abi:ne180100](&a23);
  a23 = v25 + 56;
  std::vector<UnitFeature>::__destroy_vector::operator()[abi:ne180100](&a23);
  v40 = *(void **)(v26 + 440);
  if (v40)
  {
    *(_QWORD *)(v26 + 448) = v40;
    operator delete(v40);
  }
  v41 = *v39;
  if (*v39)
  {
    *(_QWORD *)(v26 + 416) = v41;
    operator delete(v41);
  }
  v42 = v25 + 40;
  v43 = *(void **)(v26 + 368);
  if (v43)
    operator delete(v43);
  v44 = *v42;
  if (*v42)
  {
    *(_QWORD *)(v26 + 352) = v44;
    operator delete(v44);
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a13);
  Module::~Module(v29);
  if (v24)
  {
    v45 = (unint64_t *)&v24->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v26);
  operator delete(v47);
  if (v24)
  {
    v48 = (unint64_t *)&v24->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<PsolaStream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9322B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PsolaStream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9322B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<PsolaStream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSegmentStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSegmentStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92E960;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSegmentStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSegmentStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92E960;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSegmentStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSegmentStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92E960;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA95CC4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSegmentStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSegmentStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92E960;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSegmentStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSegmentStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSegmentStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSegmentStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSegmentStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSegmentStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()(uint64_t a1@<X0>, __int128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::chrono::steady_clock::time_point v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  __int128 v29;
  char *v30;
  unint64_t v31;
  char *v32;
  __int128 v33;
  int64x2_t v34;
  uint64_t v35;
  void *v36;
  unint64_t v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  NSObject *v61;
  uint64_t v62;
  std::chrono::steady_clock::time_point v63;
  std::chrono::steady_clock::time_point v64;
  const char *v65;
  unint64_t *v66;
  unint64_t v67;
  __int128 v68;
  _OWORD *v69;
  uint64_t v70;
  uint64_t *v71;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  _QWORD *v73;
  uint64_t v74;
  __int128 v75;
  _QWORD *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  _BYTE buf[24];
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v75 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v6 = operator new(0x180uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1EA9338C8;
  v8 = v6 + 3;
  if (*((_QWORD *)&v75 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  Module::Module((Module *)(v6 + 3));
  v11 = (__int128 **)v75;
  v7[3] = &off_1EA91F050;
  v76 = v7 + 39;
  *(_OWORD *)(v7 + 37) = 0u;
  *(_OWORD *)(v7 + 39) = 0u;
  *(_OWORD *)(v7 + 41) = 0u;
  *(_OWORD *)(v7 + 43) = 0u;
  v7[45] = 0;
  v7[46] = 48000;
  *((_DWORD *)v7 + 94) = 0;
  v73 = v8;
  v74 = (uint64_t)(v7 + 37);
  SharedObjectPool::get<VoiceConfig>(&v79, v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 16))(&v77, v79, 1633968500, 0);
  SharedObjectPool::get<GeneratedPromptDB>(buf, (uint64_t)v11);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)(v7 + 42), (__int128 *)buf);
  v12 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v13 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v69 = a3;
  v70 = (uint64_t)v11;
  rep = v5.__d_.__rep_;
  v15 = 0;
  v71 = (uint64_t *)(a1 + 8);
  do
  {
    v16 = *((_DWORD *)v7 + 92);
    v17 = (std::__shared_weak_count *)operator new(0xD0uLL);
    v17->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    v17->__shared_weak_owners_ = 0;
    v17->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932908;
    AudioExtractor::AudioExtractor((AudioExtractor *)&v17[1], (const MemoryMap *)&v77, ((double)v16 / 1000.0));
    v20 = (_QWORD *)v7[40];
    v19 = v7[41];
    if ((unint64_t)v20 >= v19)
    {
      v23 = (_QWORD *)*v76;
      v24 = ((uint64_t)v20 - *v76) >> 4;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v26 = v19 - (_QWORD)v23;
      if (v26 >> 3 > v25)
        v25 = v26 >> 3;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
        v27 = 0xFFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      if (v27 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v28 = (char *)operator new(16 * v27);
      *(_QWORD *)&v29 = v17 + 1;
      *((_QWORD *)&v29 + 1) = v17;
      v30 = &v28[16 * v24];
      *(_OWORD *)v30 = v29;
      do
        v31 = __ldxr(p_shared_owners);
      while (__stxr(v31 + 1, p_shared_owners));
      if (v20 == v23)
      {
        v34 = vdupq_n_s64((unint64_t)v20);
        v32 = &v28[16 * v24];
      }
      else
      {
        v32 = &v28[16 * v24];
        do
        {
          v33 = *((_OWORD *)v20 - 1);
          v20 -= 2;
          *((_OWORD *)v32 - 1) = v33;
          v32 -= 16;
          *v20 = 0;
          v20[1] = 0;
        }
        while (v20 != v23);
        v34 = *(int64x2_t *)v76;
      }
      v22 = v30 + 16;
      v7[39] = v32;
      v7[40] = v30 + 16;
      v7[41] = &v28[16 * v27];
      v35 = v34.i64[1];
      v36 = (void *)v34.i64[0];
      while ((void *)v35 != v36)
        v35 = std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v35 - 16);
      if (v36)
        operator delete(v36);
    }
    else
    {
      *v20 = v17 + 1;
      v20[1] = v17;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
      v22 = v20 + 2;
    }
    v7[40] = v22;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    ++v15;
  }
  while (v15 != 4);
  v38 = operator new(0x30uLL);
  v38[1] = 0;
  v38[2] = 0;
  *v38 = &off_1EA9365A0;
  v38[4] = 0;
  v38[5] = 0;
  v38[3] = 0;
  *(_QWORD *)buf = v38 + 3;
  *(_QWORD *)&buf[8] = v38;
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v74, (__int128 *)buf);
  v39 = *(std::__shared_weak_count **)&buf[8];
  v40 = a1 + 8;
  if (*(_QWORD *)&buf[8])
  {
    v41 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v43 = *(uint64_t **)v74;
  v44 = *(_QWORD *)(*(_QWORD *)v74 + 8);
  v45 = *(_QWORD *)(*(_QWORD *)v74 + 16);
  if (v44 >= v45)
  {
    v47 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v44 - *v43) >> 3);
    v48 = v47 + 1;
    if (v47 + 1 > 0x222222222222222)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v49 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v45 - *v43) >> 3);
    if (2 * v49 > v48)
      v48 = 2 * v49;
    if (v49 >= 0x111111111111111)
      v50 = 0x222222222222222;
    else
      v50 = v48;
    v83 = *(_QWORD *)v74 + 16;
    if (v50)
      v50 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioSegmentation>>(v50);
    else
      v51 = 0;
    v52 = v50 + 120 * v47;
    *(_QWORD *)buf = v50;
    *(_QWORD *)&buf[8] = v52;
    v82 = v50 + 120 * v51;
    *(_OWORD *)v52 = 0u;
    *(_OWORD *)(v52 + 16) = 0u;
    *(_OWORD *)(v52 + 32) = 0u;
    *(_OWORD *)(v52 + 48) = 0u;
    *(_OWORD *)(v52 + 80) = 0u;
    *(_OWORD *)(v52 + 96) = 0u;
    *(_QWORD *)(v52 + 104) = 0;
    *(_QWORD *)(v52 + 112) = 0;
    *(_OWORD *)(v52 + 64) = 0u;
    *(_WORD *)v52 = 257;
    *(_OWORD *)(v52 + 24) = 0u;
    *(_OWORD *)(v52 + 8) = 0u;
    *(_QWORD *)(v52 + 72) = 0;
    *(_OWORD *)(v52 + 56) = 0u;
    *(_OWORD *)(v52 + 40) = 0u;
    *(_QWORD *)(v52 + 96) = 0;
    *(_WORD *)(v52 + 112) = 0;
    *(_QWORD *)&buf[16] = v52 + 120;
    std::vector<AudioSegmentation>::__swap_out_circular_buffer(v43, buf);
    v46 = v43[1];
    std::__split_buffer<AudioSegmentation>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    *(_OWORD *)v44 = 0u;
    *(_OWORD *)(v44 + 16) = 0u;
    *(_OWORD *)(v44 + 32) = 0u;
    *(_OWORD *)(v44 + 48) = 0u;
    *(_OWORD *)(v44 + 80) = 0u;
    *(_OWORD *)(v44 + 96) = 0u;
    *(_QWORD *)(v44 + 104) = 0;
    *(_QWORD *)(v44 + 112) = 0;
    *(_OWORD *)(v44 + 64) = 0u;
    *(_WORD *)v44 = 257;
    *(_OWORD *)(v44 + 8) = 0u;
    *(_OWORD *)(v44 + 24) = 0u;
    *(_OWORD *)(v44 + 40) = 0u;
    *(_OWORD *)(v44 + 56) = 0u;
    *(_QWORD *)(v44 + 72) = 0;
    *(_QWORD *)(v44 + 96) = 0;
    *(_WORD *)(v44 + 112) = 0;
    v46 = v44 + 120;
    v43[1] = v44 + 120;
  }
  v43[1] = v46;
  std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v7 + 44, v70, *((uint64_t *)&v75 + 1));
  v53 = v78;
  if (v78)
  {
    v54 = (unint64_t *)&v78->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = v80;
  if (v80)
  {
    v57 = (unint64_t *)&v80->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (*((_QWORD *)&v75 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v75 + 1) + 16))(*((_QWORD *)&v75 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v75 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v61 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v62 = a1 + 8;
    if (*(char *)(a1 + 31) < 0)
      v62 = *v71;
    v63.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v62;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)((v63.__d_.__rep_ - rep) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v61, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v40 = *v71;
  v64.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v65, v40, (double)((v64.__d_.__rep_ - rep) / 1000000) / 1000.0, v7 + 42);
  if (*((_QWORD *)&v75 + 1))
  {
    v66 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v75 + 1) + 16))(*((_QWORD *)&v75 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v75 + 1));
    }
  }
  *(_QWORD *)&v68 = v73;
  *((_QWORD *)&v68 + 1) = v7;
  *v69 = v68;
}

void sub_1DEA96454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, Module *a18, uint64_t a19, std::__shared_weak_count *a20,__int128 a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27)
{
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;

  v29 = a23;
  if (a23)
  {
    p_shared_owners = (unint64_t *)&a23->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = a27;
  if (a27)
  {
    v33 = (unint64_t *)&a27->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a17);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a11);
  a22 = a21;
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a19);
  Module::~Module(a18);
  v35 = a20;
  if (a20)
  {
    v36 = (unint64_t *)&a20->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    v35 = a20;
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))a20->__on_zero_shared)(a20);
      std::__shared_weak_count::__release_weak(a20);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v27);
  operator delete(v38);
  if (v35)
  {
    v39 = (unint64_t *)&v35->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSegmentStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSegmentStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSegmentStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSegmentStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<UnitSegmentStream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9338C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<UnitSegmentStream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9338C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<UnitSegmentStream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ViterbiStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ViterbiStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92E598;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ViterbiStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ViterbiStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92E598;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ViterbiStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ViterbiStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92E598;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA96784(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ViterbiStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ViterbiStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92E598;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ViterbiStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ViterbiStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ViterbiStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ViterbiStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ViterbiStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ViterbiStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _DWORD *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  int v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  NSObject *v47;
  _QWORD *v48;
  std::chrono::steady_clock::time_point v49;
  std::chrono::steady_clock::time_point v50;
  const char *v51;
  unint64_t *v52;
  unint64_t v53;
  __n128 result;
  unint64_t v55;
  unint64_t v56;
  __int128 v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  __int128 v60;
  __int128 __src;
  uint8_t buf[32];
  __int128 v63;
  __int128 v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v57 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x178uLL);
  v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA932898;
  v10 = v8 + 3;
  if (*((_QWORD *)&v57 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    v60 = v57;
    v13 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  else
  {
    v60 = (unint64_t)v57;
  }
  v56 = (unint64_t)v8;
  Module::Module((uint64_t)(v8 + 3), a2, (uint64_t *)&v60);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v55 = (unint64_t)v10;
  v9[3] = &off_1EA91D778;
  *(_OWORD *)(v9 + 37) = 0u;
  *(_OWORD *)(v9 + 39) = 0u;
  *(_OWORD *)(v9 + 41) = 0u;
  *(_OWORD *)(v9 + 43) = 0u;
  *(_OWORD *)(v9 + 45) = 0u;
  SharedObjectPool::get<MDN>(&v58, v57);
  v63 = 0u;
  memset(buf, 0, sizeof(buf));
  v18 = v58;
  v19 = *(_QWORD *)(v58 + 24);
  v20 = *(_QWORD *)(v58 + 264);
  LODWORD(__src) = *(_DWORD *)(v19 + 4 * (*(_DWORD *)(v20 + 20) + 1));
  DWORD1(__src) = *(_DWORD *)(v19 + 4 * *(unsigned int *)(v20 + 28));
  std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)buf, (char *)&__src, (uint64_t)&__src + 8, 2uLL);
  std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)&buf[24], *(char **)(v18 + 40), *(_QWORD *)(v18 + 40) + 4 * *(unsigned int *)(v18 + 32), *(unsigned int *)(v18 + 32));
  v21 = (char *)v63;
  if ((unint64_t)v63 >= *((_QWORD *)&v63 + 1))
  {
    v23 = *(char **)&buf[24];
    v24 = (uint64_t)(v63 - *(_QWORD *)&buf[24]) >> 2;
    v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v26 = *((_QWORD *)&v63 + 1) - *(_QWORD *)&buf[24];
    if ((uint64_t)(*((_QWORD *)&v63 + 1) - *(_QWORD *)&buf[24]) >> 1 > v25)
      v25 = v26 >> 1;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
      v27 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v63 + 8, v27);
      v23 = *(char **)&buf[24];
      v21 = (char *)v63;
    }
    else
    {
      v28 = 0;
    }
    v29 = &v28[4 * v24];
    v30 = &v28[4 * v27];
    *(_DWORD *)v29 = 1065353216;
    v22 = v29 + 4;
    while (v21 != v23)
    {
      v31 = *((_DWORD *)v21 - 1);
      v21 -= 4;
      *((_DWORD *)v29 - 1) = v31;
      v29 -= 4;
    }
    *(_QWORD *)&buf[24] = v29;
    *(_QWORD *)&v63 = v22;
    *((_QWORD *)&v63 + 1) = v30;
    if (v23)
      operator delete(v23);
  }
  else
  {
    *(_DWORD *)v63 = 1065353216;
    v22 = v21 + 4;
  }
  *(_QWORD *)&v63 = v22;
  LODWORD(v64) = *(_DWORD *)(v18 + 4);
  *((_QWORD *)&v64 + 1) = *(_QWORD *)(v18 + 48);
  DWORD1(v64) = *(_DWORD *)(v18 + 56);
  v32 = (char *)operator new(0x320uLL);
  *(_OWORD *)(v32 + 8) = 0u;
  *((_QWORD *)v32 + 3) = &off_1EA91FB68;
  *((_QWORD *)v32 + 4) = 0;
  *(_QWORD *)v32 = &off_1EA933E78;
  *(_OWORD *)(v32 + 40) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)v32 + 4, *(const void **)buf, *(uint64_t *)&buf[8], (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 2);
  *((_QWORD *)v32 + 7) = 0;
  *((_QWORD *)v32 + 8) = 0;
  *((_QWORD *)v32 + 9) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)v32 + 7, *(const void **)&buf[24], v63, (uint64_t)(v63 - *(_QWORD *)&buf[24]) >> 2);
  v33 = v64;
  *((_QWORD *)v32 + 12) = 0;
  *((_OWORD *)v32 + 5) = v33;
  *((_QWORD *)v32 + 13) = 0;
  *((_QWORD *)v32 + 14) = 0;
  UnitFeature::UnitFeature((UnitFeature *)(v32 + 120));
  *((_QWORD *)v32 + 99) = 0;
  *(_OWORD *)(v32 + 760) = 0u;
  *(_OWORD *)(v32 + 776) = 0u;
  *(_OWORD *)(v32 + 728) = 0u;
  *(_OWORD *)(v32 + 744) = 0u;
  *(_QWORD *)&v34 = v32 + 24;
  *((_QWORD *)&v34 + 1) = v32;
  v35 = *(std::__shared_weak_count **)(v56 + 304);
  *(_OWORD *)(v9 + 37) = v34;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  SharedObjectPool::get<Database>(&__src, v57);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)(v9 + 39), &__src);
  v38 = (std::__shared_weak_count *)*((_QWORD *)&__src + 1);
  if (*((_QWORD *)&__src + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&__src + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (*(_QWORD *)&buf[24])
  {
    *(_QWORD *)&v63 = *(_QWORD *)&buf[24];
    operator delete(*(void **)&buf[24]);
  }
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
  v41 = v59;
  if (v59)
  {
    v42 = (unint64_t *)&v59->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (*((_QWORD *)&v57 + 1))
  {
    v44 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v57 + 1) + 16))(*((_QWORD *)&v57 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v57 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v46 = (_QWORD *)(a1 + 8);
  v47 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v48 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v48 = (_QWORD *)*v46;
    v49.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v48;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)((v49.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v47, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v46 = (_QWORD *)*v46;
  v50.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v51, v46, (double)((v50.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v57 + 1))
  {
    v52 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v57 + 1) + 16))(*((_QWORD *)&v57 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v57 + 1));
    }
  }
  result.n128_u64[0] = v55;
  result.n128_u64[1] = v56;
  *a4 = result;
  return result;
}

void sub_1DEA96DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, Module *a13, uint64_t a14, std::__shared_weak_count *a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  uint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;

  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a25)
  {
    a26 = (uint64_t)a25;
    operator delete(a25);
  }
  if (a20)
  {
    p_shared_owners = (unint64_t *)&a20->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))a20->__on_zero_shared)(a20);
      std::__shared_weak_count::__release_weak(a20);
    }
  }
  a25 = (void *)(v29 + 328);
  std::vector<Prompt>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = (void *)(v29 + 304);
  std::vector<std::vector<MarkerRecord>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a12);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a14);
  Module::~Module(a13);
  if (a15)
  {
    v33 = (unint64_t *)&a15->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))a15->__on_zero_shared)(a15);
      std::__shared_weak_count::__release_weak(a15);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(a16);
  operator delete(v35);
  if (a15)
  {
    v36 = (unint64_t *)&a15->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))a15->__on_zero_shared)(a15);
      std::__shared_weak_count::__release_weak(a15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_1DEA96F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  unint64_t *p_shared_owners;
  unint64_t v23;

  if (a22)
  {
    p_shared_owners = (unint64_t *)&a22->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))a22->__on_zero_shared)(a22);
      std::__shared_weak_count::__release_weak(a22);
    }
  }
  JUMPOUT(0x1DEA96EF8);
}

void sub_1DEA96FCC()
{
  JUMPOUT(0x1DEA96F44);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ViterbiStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ViterbiStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ViterbiStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ViterbiStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<ViterbiStream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932898;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ViterbiStream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932898;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<ViterbiStream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PreselectStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PreselectStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92E6F8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PreselectStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PreselectStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92E6F8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PreselectStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PreselectStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92E6F8;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA97160(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PreselectStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PreselectStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92E6F8;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PreselectStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PreselectStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PreselectStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PreselectStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PreselectStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PreselectStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  unsigned __int8 *v47;
  int v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  void **v52;
  char *v53;
  uint64_t **v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::string::size_type *v59;
  NSObject *v60;
  std::string::size_type v61;
  std::chrono::steady_clock::time_point v62;
  std::chrono::steady_clock::time_point v63;
  const char *v64;
  unint64_t *v65;
  unint64_t v66;
  __n128 result;
  __n128 *v68;
  __int128 v69;
  uint64_t v70[3];
  std::string *v71;
  std::string v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v69 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x170uLL);
  v9 = (unint64_t)v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA932F98;
  v10 = (unint64_t)(v8 + 3);
  if (*((_QWORD *)&v69 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    *(_OWORD *)v70 = v69;
    v13 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  else
  {
    *(_OWORD *)v70 = (unint64_t)v69;
  }
  Module::Module((uint64_t)(v8 + 3), a2, v70);
  v15 = (std::__shared_weak_count *)v70[1];
  if (v70[1])
  {
    v16 = (unint64_t *)(v70[1] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v68 = a4;
  *(_QWORD *)(v9 + 24) = &off_1EA91E140;
  *(_DWORD *)(v9 + 324) = 0;
  *(_QWORD *)(v9 + 336) = 0;
  *(_QWORD *)(v9 + 344) = 0;
  *(_QWORD *)(v9 + 304) = 0;
  *(_QWORD *)(v9 + 312) = 0;
  *(_QWORD *)(v9 + 296) = 0;
  *(_BYTE *)(v9 + 320) = 0;
  *(_QWORD *)(v9 + 328) = v9 + 336;
  if (*(char *)(v9 + 231) < 0)
    std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)(v9 + 208), *(_QWORD *)(v9 + 216));
  else
    v72 = *(std::string *)(v9 + 208);
  if (*((_QWORD *)&v69 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = *(std::__shared_weak_count **)(v69 + 24);
  if (v20 && (v21 = std::__shared_weak_count::lock(v20)) != 0)
  {
    v22 = v21;
    v23 = *(_QWORD *)(v69 + 16);
    if (v23
      && (v24 = v23 + 8,
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v23 + 8), (unsigned __int8 *)&v72)))
    {
      v71 = &v72;
      v25 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v24, (unsigned __int8 *)&v72, (__int128 **)&v71);
      v27 = *((_QWORD *)v25 + 5);
      v26 = (std::__shared_weak_count *)*((_QWORD *)v25 + 6);
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v29 = __ldxr(p_shared_owners);
        while (__stxr(v29 + 1, p_shared_owners));
      }
    }
    else
    {
      v26 = 0;
      v27 = 0;
    }
    v30 = (unint64_t *)&v22->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  else
  {
    v26 = 0;
    v27 = 0;
  }
  if (*((_QWORD *)&v69 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v69 + 1) + 16))(*((_QWORD *)&v69 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v69 + 1));
    }
  }
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
  v34 = *(_QWORD *)(v27 + 296);
  v35 = *(std::__shared_weak_count **)(v27 + 304);
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
    do
      v38 = __ldxr(v36);
    while (__stxr(v38 + 1, v36));
  }
  v39 = *(std::__shared_weak_count **)(v9 + 304);
  *(_QWORD *)(v9 + 296) = v34;
  *(_QWORD *)(v9 + 304) = v35;
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (v35)
  {
    v42 = (unint64_t *)&v35->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  *(_DWORD *)(v9 + 324) = *(_DWORD *)(v27 + 312);
  v44 = *(_QWORD *)(v9 + 296);
  std::string::basic_string[abi:ne180100]<0>(&v72, "stress");
  *(_BYTE *)(v9 + 312) = Database::feat_name_to_fingerprint_mask(v44, (unsigned __int8 *)&v72);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v72, "wbi");
  *(_BYTE *)(v9 + 313) = Database::feat_name_to_fingerprint_mask(v44, (unsigned __int8 *)&v72);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v72, "wbf");
  *(_BYTE *)(v9 + 314) = Database::feat_name_to_fingerprint_mask(v44, (unsigned __int8 *)&v72);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v72, "si");
  *(_BYTE *)(v9 + 315) = Database::feat_name_to_fingerprint_mask(v44, (unsigned __int8 *)&v72);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v72, "senti");
  *(_BYTE *)(v9 + 316) = Database::feat_name_to_fingerprint_mask(v44, (unsigned __int8 *)&v72);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v72, "sentf");
  *(_BYTE *)(v9 + 317) = Database::feat_name_to_fingerprint_mask(v44, (unsigned __int8 *)&v72);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v72, "phrsi");
  *(_BYTE *)(v9 + 318) = Database::feat_name_to_fingerprint_mask(v44, (unsigned __int8 *)&v72);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v72, "phrsf");
  v45 = Database::feat_name_to_fingerprint_mask(v44, (unsigned __int8 *)&v72);
  *(_BYTE *)(v9 + 319) = v45;
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v72.__r_.__value_.__l.__data_);
    v45 = *(_BYTE *)(v9 + 319);
  }
  *(_BYTE *)(v9 + 320) = *(_BYTE *)(v9 + 313) | *(_BYTE *)(v9 + 312) | *(_BYTE *)(v9 + 314) | *(_BYTE *)(v9 + 315) | *(_BYTE *)(v9 + 316) | *(_BYTE *)(v9 + 317) | *(_BYTE *)(v9 + 318) | v45;
  v46 = *(_QWORD *)(v9 + 296);
  std::string::basic_string[abi:ne180100]<0>(&v72, "lang");
  v47 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v46 + 304), (unsigned __int8 *)&v72);
  if (v47)
    v48 = *((_DWORD *)v47 + 10);
  else
    v48 = -1;
  *(_DWORD *)(v9 + 352) = v48;
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
  v49 = *(_QWORD *)(v9 + 296);
  *(_DWORD *)(v9 + 356) = *(_DWORD *)(v49 + 196) - *(_DWORD *)(v49 + 188);
  v50 = *(_DWORD *)(v49 + 196);
  if (v50 > 31)
    LOWORD(v51) = 0;
  else
    v51 = (unint64_t)(0xFFFFFFFFLL << v50) >> *(_DWORD *)(v49 + 188);
  *(_WORD *)(v9 + 360) = v51;
  std::string::basic_string[abi:ne180100]<0>(&v72, &byte_1DEBD87CE);
  v52 = (void **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>(v9 + 328, &v71, (const void **)&v72.__r_.__value_.__l.__data_);
  v53 = (char *)*v52;
  if (!*v52)
  {
    v54 = (uint64_t **)v52;
    v53 = (char *)operator new(0x40uLL);
    *(std::string *)(v53 + 32) = v72;
    memset(&v72, 0, sizeof(v72));
    *((_WORD *)v53 + 28) = 0;
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at((uint64_t **)(v9 + 328), (uint64_t)v71, v54, (uint64_t *)v53);
  }
  *((_WORD *)v53 + 28) = 0;
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
  if (v26)
  {
    v55 = (unint64_t *)&v26->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (*((_QWORD *)&v69 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v69 + 1) + 16))(*((_QWORD *)&v69 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v69 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v59 = (std::string::size_type *)(a1 + 8);
  v60 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v61 = a1 + 8;
    if (*(char *)(a1 + 31) < 0)
      v61 = *v59;
    v62.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(v72.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v72.__r_.__value_.__r.__words + 4) = v61;
    WORD2(v72.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&v72.__r_.__value_.__r.__words[1] + 6) = (double)((v62.__d_.__rep_ - v7.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v60, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", (uint8_t *)&v72, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v59 = (std::string::size_type *)*v59;
  v63.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v64, v59, (double)((v63.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v69 + 1))
  {
    v65 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v69 + 1) + 16))(*((_QWORD *)&v69 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v69 + 1));
    }
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *v68 = result;
  return result;
}

void sub_1DEA9799C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  Module *v25;
  char **v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;

  p_shared_owners = (unint64_t *)&v27->__shared_owners_;
  do
    v30 = __ldaxr(p_shared_owners);
  while (__stlxr(v30 - 1, p_shared_owners));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  if (v23)
  {
    v31 = (unint64_t *)&v23->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (a23 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*v26);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&v24[12].__shared_owners_);
  Module::~Module(v25);
  if (v23)
  {
    v33 = (unint64_t *)&v23->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v24);
  operator delete(v35);
  if (v23)
  {
    v36 = (unint64_t *)&v23->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PreselectStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PreselectStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PreselectStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PreselectStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<PreselectStream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932F98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PreselectStream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932F98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<PreselectStream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSelectionFeatureStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSelectionFeatureStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92F1F8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSelectionFeatureStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSelectionFeatureStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92F1F8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSelectionFeatureStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSelectionFeatureStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92F1F8;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA97CD8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSelectionFeatureStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSelectionFeatureStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92F1F8;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSelectionFeatureStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSelectionFeatureStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSelectionFeatureStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSelectionFeatureStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSelectionFeatureStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSelectionFeatureStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  std::string::size_type *v80;
  NSObject *v81;
  std::string::size_type v82;
  std::chrono::steady_clock::time_point v83;
  std::chrono::steady_clock::time_point v84;
  const char *v85;
  unint64_t *v86;
  unint64_t v87;
  __n128 result;
  __n128 *v89;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  _QWORD *v91;
  unint64_t v92;
  __int128 v93;
  uint64_t v94[3];
  std::string *p_str;
  std::string __str;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v93 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x1A0uLL);
  v9 = (unint64_t)v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA934C08;
  v10 = v8 + 3;
  if (*((_QWORD *)&v93 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    *(_OWORD *)v94 = v93;
    v13 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  else
  {
    *(_OWORD *)v94 = (unint64_t)v93;
  }
  Module::Module((uint64_t)(v8 + 3), a2, v94);
  v15 = (std::__shared_weak_count *)v94[1];
  if (v94[1])
  {
    v16 = (unint64_t *)(v94[1] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  rep = v7.__d_.__rep_;
  v92 = (unint64_t)v10;
  *(_QWORD *)(v9 + 24) = off_1EA921300;
  *(_OWORD *)(v9 + 296) = 0u;
  *(_OWORD *)(v9 + 312) = 0u;
  *(_OWORD *)(v9 + 328) = 0u;
  *(_OWORD *)(v9 + 344) = 0u;
  *(_OWORD *)(v9 + 360) = 0u;
  *(_OWORD *)(v9 + 376) = 0u;
  *(_OWORD *)(v9 + 392) = 0u;
  *(_QWORD *)(v9 + 408) = 0;
  v91 = (_QWORD *)(v9 + 312);
  if (*(char *)(v9 + 231) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v9 + 208), *(_QWORD *)(v9 + 216));
  else
    __str = *(std::string *)(v9 + 208);
  if (*((_QWORD *)&v93 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = *(std::__shared_weak_count **)(v93 + 24);
  v89 = a4;
  if (v20 && (v21 = std::__shared_weak_count::lock(v20)) != 0)
  {
    v22 = v21;
    v23 = *(_QWORD *)(v93 + 16);
    if (v23
      && (v24 = v23 + 8,
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v23 + 8), (unsigned __int8 *)&__str)))
    {
      p_str = &__str;
      v25 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v24, (unsigned __int8 *)&__str, (__int128 **)&p_str);
      v26 = *((_QWORD *)v25 + 5);
      v27 = (std::__shared_weak_count *)*((_QWORD *)v25 + 6);
      if (v27)
      {
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldxr(p_shared_owners);
        while (__stxr(v29 + 1, p_shared_owners));
      }
    }
    else
    {
      v27 = 0;
      v26 = 0;
    }
    v30 = (unint64_t *)&v22->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  else
  {
    v27 = 0;
    v26 = 0;
  }
  if (*((_QWORD *)&v93 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v93 + 1) + 16))(*((_QWORD *)&v93 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v93 + 1));
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v34 = *(_QWORD *)(v26 + 328);
  v35 = *(std::__shared_weak_count **)(v26 + 336);
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
    do
      v38 = __ldxr(v36);
    while (__stxr(v38 + 1, v36));
  }
  v39 = *(std::__shared_weak_count **)(v9 + 336);
  *(_QWORD *)(v9 + 328) = v34;
  *(_QWORD *)(v9 + 336) = v35;
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (v35)
  {
    v42 = (unint64_t *)&v35->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (*(char *)(v26 + 399) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v26 + 376), *(_QWORD *)(v26 + 384));
  else
    __str = *(std::string *)(v26 + 376);
  std::string::operator=((std::string *)(v9 + 376), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v44 = *(_QWORD *)(v26 + 296);
  v45 = *(std::__shared_weak_count **)(v26 + 304);
  if (v45)
  {
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  v48 = *(_QWORD *)(v26 + 344);
  v49 = *(std::__shared_weak_count **)(v26 + 352);
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
    std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(v9 + 296), v44, (uint64_t)v45);
    do
      v52 = __ldxr(v50);
    while (__stxr(v52 + 1, v50));
  }
  else
  {
    std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(v9 + 296), v44, (uint64_t)v45);
  }
  v53 = *(std::__shared_weak_count **)(v9 + 352);
  *(_QWORD *)(v9 + 344) = v48;
  *(_QWORD *)(v9 + 352) = v49;
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (v49)
  {
    v56 = (unint64_t *)&v49->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v45)
  {
    v58 = (unint64_t *)&v45->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v60 = *(_QWORD *)(v26 + 312);
  v61 = *(std::__shared_weak_count **)(v26 + 320);
  if (v61)
  {
    v62 = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  v64 = *(_QWORD *)(v26 + 360);
  v65 = *(std::__shared_weak_count **)(v26 + 368);
  if (v65)
  {
    v66 = (unint64_t *)&v65->__shared_owners_;
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 1, v66));
    std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v91, v60, (uint64_t)v61);
    do
      v68 = __ldxr(v66);
    while (__stxr(v68 + 1, v66));
  }
  else
  {
    std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v91, v60, (uint64_t)v61);
  }
  v69 = *(std::__shared_weak_count **)(v9 + 368);
  *(_QWORD *)(v9 + 360) = v64;
  *(_QWORD *)(v9 + 368) = v65;
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if (v65)
  {
    v72 = (unint64_t *)&v65->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (v61)
  {
    v74 = (unint64_t *)&v61->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (v27)
  {
    v76 = (unint64_t *)&v27->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (*((_QWORD *)&v93 + 1))
  {
    v78 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v93 + 1) + 16))(*((_QWORD *)&v93 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v93 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v80 = (std::string::size_type *)(a1 + 8);
  v81 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v82 = a1 + 8;
    if (*(char *)(a1 + 31) < 0)
      v82 = *v80;
    v83.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(__str.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = v82;
    WORD2(__str.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&__str.__r_.__value_.__r.__words[1] + 6) = (double)((v83.__d_.__rep_ - rep) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v81, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", (uint8_t *)&__str, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v80 = (std::string::size_type *)*v80;
  v84.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v85, v80, (double)((v84.__d_.__rep_ - rep) / 1000000) / 1000.0);
  if (*((_QWORD *)&v93 + 1))
  {
    v86 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v93 + 1) + 16))(*((_QWORD *)&v93 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v93 + 1));
    }
  }
  result.n128_u64[0] = v92;
  result.n128_u64[1] = v9;
  *v89 = result;
  return result;
}

void sub_1DEA984C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, Module *a14, __int128 a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;

  p_shared_owners = (unint64_t *)&v27->__shared_owners_;
  do
    v33 = __ldaxr(p_shared_owners);
  while (__stlxr(v33 - 1, p_shared_owners));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  if (v25)
  {
    v34 = (unint64_t *)&v25->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (a25 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v26 + 376);
  if (*(char *)(v28 + 399) < 0)
    operator delete(*v30);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v26 + 336);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v26 + 320);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v26 + 304);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a13);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v29);
  Module::~Module(a14);
  if (v25)
  {
    v36 = (unint64_t *)&v25->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v28);
  operator delete(v38);
  if (v25)
  {
    v39 = (unint64_t *)&v25->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSelectionFeatureStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSelectionFeatureStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSelectionFeatureStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSelectionFeatureStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<UnitSelectionFeatureStream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934C08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<UnitSelectionFeatureStream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934C08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<UnitSelectionFeatureStream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PromptStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PromptStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92E540;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PromptStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PromptStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92E540;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PromptStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PromptStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92E540;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA98834(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PromptStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PromptStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92E540;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PromptStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PromptStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PromptStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PromptStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PromptStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PromptStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  std::__shared_weak_count *v25;
  _QWORD *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  std::string::size_type *v57;
  NSObject *v58;
  std::string::size_type v59;
  std::chrono::steady_clock::time_point v60;
  std::chrono::steady_clock::time_point v61;
  const char *v62;
  unint64_t *v63;
  unint64_t v64;
  __n128 result;
  std::chrono::steady_clock::time_point v66;
  __int128 v67;
  uint64_t v68[3];
  std::string *v69;
  std::string v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v67 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v66.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v7 = operator new(0x148uLL);
  v8 = (unint64_t)v7;
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_1EA932438;
  v9 = (unint64_t)(v7 + 3);
  if (*((_QWORD *)&v67 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    *(_OWORD *)v68 = v67;
    v12 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  else
  {
    *(_OWORD *)v68 = (unint64_t)v67;
  }
  Module::Module((uint64_t)(v7 + 3), a2, v68);
  v14 = (std::__shared_weak_count *)v68[1];
  if (v68[1])
  {
    v15 = (unint64_t *)(v68[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *(_QWORD *)(v8 + 24) = &off_1EA91CF28;
  *(_OWORD *)(v8 + 296) = 0u;
  *(_OWORD *)(v8 + 312) = 0u;
  if (*(char *)(v8 + 231) < 0)
    std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)(v8 + 208), *(_QWORD *)(v8 + 216));
  else
    v70 = *(std::string *)(v8 + 208);
  if (*((_QWORD *)&v67 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = *(std::__shared_weak_count **)(v67 + 24);
  if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
  {
    v21 = v20;
    v22 = *(_QWORD *)(v67 + 16);
    if (v22
      && (v23 = v22 + 8,
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v22 + 8), (unsigned __int8 *)&v70)))
    {
      v69 = &v70;
      v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v23, (unsigned __int8 *)&v70, (__int128 **)&v69);
      v26 = (_QWORD *)*((_QWORD *)v24 + 5);
      v25 = (std::__shared_weak_count *)*((_QWORD *)v24 + 6);
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v28 = __ldxr(p_shared_owners);
        while (__stxr(v28 + 1, p_shared_owners));
      }
    }
    else
    {
      v25 = 0;
      v26 = 0;
    }
    v29 = (unint64_t *)&v21->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  else
  {
    v25 = 0;
    v26 = 0;
  }
  if (*((_QWORD *)&v67 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v67 + 1) + 16))(*((_QWORD *)&v67 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v67 + 1));
    }
  }
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v70.__r_.__value_.__l.__data_);
  v33 = v26[39];
  v34 = (std::__shared_weak_count *)v26[40];
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
    do
      v37 = __ldxr(v35);
    while (__stxr(v37 + 1, v35));
  }
  v38 = *(std::__shared_weak_count **)(v8 + 320);
  *(_QWORD *)(v8 + 312) = v33;
  *(_QWORD *)(v8 + 320) = v34;
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v34)
  {
    v41 = (unint64_t *)&v34->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v43 = v26[37];
  v44 = (std::__shared_weak_count *)v26[38];
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
    do
      v47 = __ldxr(v45);
    while (__stxr(v47 + 1, v45));
  }
  v48 = *(std::__shared_weak_count **)(v8 + 304);
  *(_QWORD *)(v8 + 296) = v43;
  *(_QWORD *)(v8 + 304) = v44;
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  if (v44)
  {
    v51 = (unint64_t *)&v44->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (v25)
  {
    v53 = (unint64_t *)&v25->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (*((_QWORD *)&v67 + 1))
  {
    v55 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v67 + 1) + 16))(*((_QWORD *)&v67 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v67 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v57 = (std::string::size_type *)(a1 + 8);
  v58 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v59 = a1 + 8;
    if (*(char *)(a1 + 31) < 0)
      v59 = *v57;
    v60.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(v70.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v70.__r_.__value_.__r.__words + 4) = v59;
    WORD2(v70.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&v70.__r_.__value_.__r.__words[1] + 6) = (double)((v60.__d_.__rep_ - v66.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v58, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", (uint8_t *)&v70, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v57 = (std::string::size_type *)*v57;
  v61.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v62, v57, (double)((v61.__d_.__rep_ - v66.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v67 + 1))
  {
    v63 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v67 + 1) + 16))(*((_QWORD *)&v67 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v67 + 1));
    }
  }
  result.n128_u64[0] = v9;
  result.n128_u64[1] = v8;
  *a4 = result;
  return result;
}

void sub_1DEA98E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  Module *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;

  p_shared_owners = (unint64_t *)&v26->__shared_owners_;
  do
    v30 = __ldaxr(p_shared_owners);
  while (__stlxr(v30 - 1, p_shared_owners));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  if (v23)
  {
    v31 = (unint64_t *)&v23->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (a23 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v27 + 288);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v27 + 272);
  Module::~Module(v25);
  if (v23)
  {
    v33 = (unint64_t *)&v23->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v24);
  operator delete(v35);
  if (v23)
  {
    v36 = (unint64_t *)&v23->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PromptStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PromptStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PromptStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PromptStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<PromptStream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932438;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PromptStream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932438;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<PromptStream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<GryphonFEAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<GryphonFEAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92EEE0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<GryphonFEAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<GryphonFEAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92EEE0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<GryphonFEAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<GryphonFEAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92EEE0;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA99118(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<GryphonFEAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<GryphonFEAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92EEE0;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<GryphonFEAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<GryphonFEAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<GryphonFEAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<GryphonFEAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<GryphonFEAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<GryphonFEAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  NSObject *v21;
  __n128 *v22;
  _QWORD *v23;
  std::chrono::steady_clock::time_point v24;
  std::chrono::steady_clock::time_point v25;
  const char *v26;
  unint64_t *v27;
  unint64_t v28;
  __n128 result;
  __int128 v30;
  _BYTE buf[22];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v30 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x128uLL);
  v9 = (unint64_t)v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA9341F8;
  v10 = v8 + 3;
  if (*((_QWORD *)&v30 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    *(_OWORD *)buf = v30;
    v13 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  else
  {
    *(_OWORD *)buf = (unint64_t)v30;
  }
  Module::Module((uint64_t)(v8 + 3), a2, (uint64_t *)buf);
  v15 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v16 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *v10 = &off_1EA920298;
  if (*((_QWORD *)&v30 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v30 + 1) + 16))(*((_QWORD *)&v30 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v30 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v20 = (_QWORD *)(a1 + 8);
  v21 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v22 = a4;
    v23 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v23 = (_QWORD *)*v20;
    v24.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v23;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = (double)((v24.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v21, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
    a4 = v22;
  }
  if (*(char *)(a1 + 31) < 0)
    v20 = (_QWORD *)*v20;
  v25.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v26, v20, (double)((v25.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((_QWORD *)&v30 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v30 + 1) + 16))(*((_QWORD *)&v30 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v30 + 1));
    }
  }
  result.n128_u64[0] = (unint64_t)v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_1DEA9946C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, std::__shared_weak_count *a13)
{
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  void *v20;
  unint64_t *v21;
  unint64_t v22;

  if (a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  if (v13)
  {
    v18 = (unint64_t *)&v13->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v20);
  if (v13)
  {
    v21 = (unint64_t *)&v13->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<GryphonFEAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<GryphonFEAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<GryphonFEAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<GryphonFEAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<GryphonFEAdapterModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9341F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<GryphonFEAdapterModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9341F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<GryphonFEAdapterModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92E8B0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA92E8B0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA92E8B0;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1DEA996B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA92E8B0;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X8>)
{
  std::chrono::steady_clock::time_point v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  NSObject *v85;
  NSObject *v86;
  dispatch_queue_t v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t *v92;
  NSObject *v93;
  uint64_t v94;
  std::chrono::steady_clock::time_point v95;
  std::chrono::steady_clock::time_point v96;
  const char *v97;
  unint64_t *v98;
  unint64_t v99;
  __n128 result;
  __n128 *v101;
  unint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  __int128 v107;
  uint64_t v108[3];
  sched_param v109;
  pthread_attr_t v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v107 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = operator new(0x238uLL);
  v9 = (unint64_t)v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA933660;
  v10 = v8 + 3;
  if (*((_QWORD *)&v107 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    *(_OWORD *)v108 = v107;
    v13 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  else
  {
    *(_OWORD *)v108 = (unint64_t)v107;
  }
  Module::Module((uint64_t)(v8 + 3), a2, v108);
  v15 = (std::__shared_weak_count *)v108[1];
  if (v108[1])
  {
    v16 = (unint64_t *)(v108[1] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v102 = (unint64_t)v10;
  *(_QWORD *)(v9 + 24) = &off_1EA91ED10;
  *(_OWORD *)(v9 + 296) = 0u;
  *(_OWORD *)(v9 + 312) = 0u;
  v106 = (_QWORD *)(v9 + 312);
  *(_OWORD *)(v9 + 328) = 0u;
  *(_QWORD *)(v9 + 344) = 850045863;
  *(_OWORD *)(v9 + 352) = 0u;
  *(_OWORD *)(v9 + 368) = 0u;
  *(_OWORD *)(v9 + 384) = 0u;
  *(_QWORD *)(v9 + 400) = 0;
  *(_QWORD *)(v9 + 408) = 1018212795;
  *(_QWORD *)(v9 + 448) = 0;
  *(_OWORD *)(v9 + 416) = 0u;
  *(_OWORD *)(v9 + 432) = 0u;
  *(_DWORD *)(v9 + 456) = 2;
  v104 = (_QWORD *)(v9 + 488);
  v105 = (_QWORD *)(v9 + 472);
  v103 = (_QWORD *)(v9 + 504);
  *(_OWORD *)(v9 + 528) = 0u;
  *(_OWORD *)(v9 + 552) = 0u;
  *(_OWORD *)(v9 + 488) = 0u;
  *(_OWORD *)(v9 + 504) = 0u;
  *(_OWORD *)(v9 + 472) = 0u;
  *(_QWORD *)(v9 + 544) = v9 + 552;
  if (*(char *)(v9 + 231) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v110, *(const std::string::value_type **)(v9 + 208), *(_QWORD *)(v9 + 216));
  }
  else
  {
    *(_OWORD *)&v110.__sig = *(_OWORD *)(v9 + 208);
    *(_QWORD *)&v110.__opaque[8] = *(_QWORD *)(v9 + 224);
  }
  if (*((_QWORD *)&v107 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = *(std::__shared_weak_count **)(v107 + 24);
  v101 = a4;
  if (v20 && (v21 = std::__shared_weak_count::lock(v20)) != 0)
  {
    v22 = v21;
    v23 = *(_QWORD *)(v107 + 16);
    if (v23
      && (v24 = v23 + 8,
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v23 + 8), (unsigned __int8 *)&v110)))
    {
      v109 = (sched_param)&v110;
      v25 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v24, (unsigned __int8 *)&v110, (__int128 **)&v109);
      v26 = *((_QWORD *)v25 + 5);
      v27 = (std::__shared_weak_count *)*((_QWORD *)v25 + 6);
      if (v27)
      {
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldxr(p_shared_owners);
        while (__stxr(v29 + 1, p_shared_owners));
      }
    }
    else
    {
      v27 = 0;
      v26 = 0;
    }
    v30 = (unint64_t *)&v22->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  else
  {
    v27 = 0;
    v26 = 0;
  }
  if (*((_QWORD *)&v107 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v107 + 1) + 16))(*((_QWORD *)&v107 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v107 + 1));
    }
  }
  if (v110.__opaque[15] < 0)
    operator delete((void *)v110.__sig);
  v34 = *(_QWORD *)(v26 + 328);
  v35 = *(std::__shared_weak_count **)(v26 + 336);
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
    do
      v38 = __ldxr(v36);
    while (__stxr(v38 + 1, v36));
  }
  rep = v7.__d_.__rep_;
  v40 = *(std::__shared_weak_count **)(v9 + 336);
  *(_QWORD *)(v9 + 328) = v34;
  *(_QWORD *)(v9 + 336) = v35;
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (v35)
  {
    v43 = (unint64_t *)&v35->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v45 = *(_QWORD *)(v26 + 312);
  v46 = *(std::__shared_weak_count **)(v26 + 320);
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
    std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v106, v45, (uint64_t)v46);
    v49 = (unint64_t *)&v46->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  else
  {
    std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v106, v45, 0);
  }
  v51 = *(_QWORD *)(v26 + 296);
  v52 = *(std::__shared_weak_count **)(v26 + 304);
  if (v52)
  {
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
    do
      v55 = __ldxr(v53);
    while (__stxr(v55 + 1, v53));
  }
  v56 = *(std::__shared_weak_count **)(v9 + 304);
  *(_QWORD *)(v9 + 296) = v51;
  *(_QWORD *)(v9 + 304) = v52;
  if (v56)
  {
    v57 = (unint64_t *)&v56->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v52)
  {
    v59 = (unint64_t *)&v52->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  *(_BYTE *)(v9 + 520) = *(_BYTE *)(v26 + 360);
  v61 = *(_QWORD *)(v26 + 344);
  v62 = *(std::__shared_weak_count **)(v26 + 352);
  if (v62)
  {
    v63 = (unint64_t *)&v62->__shared_owners_;
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 1, v63));
    std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v105, v61, (uint64_t)v62);
    v65 = (unint64_t *)&v62->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  else
  {
    std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v105, v61, 0);
  }
  v67 = *(_QWORD *)(v26 + 368);
  v68 = *(std::__shared_weak_count **)(v26 + 376);
  if (v68)
  {
    v69 = (unint64_t *)&v68->__shared_owners_;
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 1, v69));
    std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v104, v67, (uint64_t)v68);
    v71 = (unint64_t *)&v68->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  else
  {
    std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v104, v67, 0);
  }
  v73 = *(_QWORD *)(v26 + 384);
  v74 = *(std::__shared_weak_count **)(v26 + 392);
  if (v74)
  {
    v75 = (unint64_t *)&v74->__shared_owners_;
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 1, v75));
    std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v103, v73, (uint64_t)v74);
    v77 = (unint64_t *)&v74->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  else
  {
    std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v103, v73, 0);
  }
  v79 = *(_QWORD *)(v26 + 400);
  v80 = *(std::__shared_weak_count **)(v26 + 408);
  if (v80)
  {
    v81 = (unint64_t *)&v80->__shared_owners_;
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 1, v81));
    std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(v9 + 528), v79, (uint64_t)v80);
    v83 = (unint64_t *)&v80->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  else
  {
    std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(v9 + 528), v79, 0);
  }
  if (MGGetSInt32Answer() == 7)
  {
    pthread_attr_init(&v110);
    pthread_attr_getschedparam(&v110, &v109);
    v109.sched_priority = 46;
    pthread_attr_setschedpolicy(&v110, 2);
    pthread_attr_setschedparam(&v110, &v109);
    pthread_attr_setinheritsched(&v110, 2);
    v85 = dispatch_pthread_root_queue_create();
    v86 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INTERACTIVE, 0);
    v87 = dispatch_queue_create_with_target_V2("com.apple.siritts.NashvilleFE", v86, v85);
  }
  else
  {
    v87 = dispatch_queue_create("NashvilleFEModule", 0);
  }
  *(_QWORD *)(v9 + 464) = v87;
  if (v27)
  {
    v88 = (unint64_t *)&v27->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (*((_QWORD *)&v107 + 1))
  {
    v90 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v107 + 1) + 16))(*((_QWORD *)&v107 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v107 + 1));
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v92 = (uint64_t *)(a1 + 8);
  v93 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v94 = a1 + 8;
    if (*(char *)(a1 + 31) < 0)
      v94 = *v92;
    v95.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(v110.__sig) = 136315394;
    *(uint64_t *)((char *)&v110.__sig + 4) = v94;
    *(_WORD *)&v110.__opaque[4] = 2048;
    *(double *)&v110.__opaque[6] = (double)((v95.__d_.__rep_ - rep) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v93, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", (uint8_t *)&v110, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0)
    v92 = (uint64_t *)*v92;
  v96.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v97, v92, (double)((v96.__d_.__rep_ - rep) / 1000000) / 1000.0);
  if (*((_QWORD *)&v107 + 1))
  {
    v98 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v107 + 1) + 16))(*((_QWORD *)&v107 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v107 + 1));
    }
  }
  result.n128_u64[0] = v102;
  result.n128_u64[1] = v9;
  *v101 = result;
  return result;
}

void sub_1DEA9A004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD **a12, uint64_t a13, Module *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int128 a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  std::__shared_weak_count *v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  void *v41;
  unint64_t *v42;
  unint64_t v43;

  p_shared_owners = (unint64_t *)&v32->__shared_owners_;
  do
    v36 = __ldaxr(p_shared_owners);
  while (__stlxr(v36 - 1, p_shared_owners));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  if (v29)
  {
    v37 = (unint64_t *)&v29->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (a29 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<FastRewriter>>>>::destroy(*a12);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v31);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a15);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a16);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a17);
  std::condition_variable::~condition_variable((std::condition_variable *)(v30 + 384));
  std::mutex::~mutex((std::mutex *)(v30 + 320));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v30 + 304);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a18);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v30 + 272);
  Module::~Module(a14);
  if (v29)
  {
    v39 = (unint64_t *)&v29->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v33);
  operator delete(v41);
  if (v29)
  {
    v42 = (unint64_t *)&v29->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

void std::__shared_ptr_emplace<NashvilleFEModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933660;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NashvilleFEModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933660;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<NashvilleFEModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ModuleFactory::ModuleFactoryImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935E30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ModuleFactory::ModuleFactoryImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935E30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<ModuleFactory::ModuleFactoryImpl>::__on_zero_shared(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 48, *(_QWORD **)(a1 + 56));
  std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::destroy(*(_QWORD **)(a1 + 32));
}

void std::__shared_ptr_emplace<ModuleFactory>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932668;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ModuleFactory>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932668;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<ModuleFactory>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)(a1 + 24) = &off_1EA91D0F0;
  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void FrontendFeatureLogModule::~FrontendFeatureLogModule(FrontendFeatureLogModule *this)
{
  Module::~Module(this);
  JUMPOUT(0x1DF0ED014);
}

void FrontendFeatureLogModule::process_data(uint64_t *a1, uint64_t *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const std::string *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::string::size_type size;
  std::string::size_type v25;
  unint64_t v26;
  std::string::size_type v27;
  _DWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t **v38;
  _QWORD *v39;
  std::string::size_type v40;
  uint64_t v41;
  unint64_t v42;
  std::string::size_type v43;
  int v44;
  uint64_t v45;
  std::vector<std::string>::pointer end;
  __int128 v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  std::string *v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  __int128 *v55;
  int v56;
  const std::string::value_type *v57;
  std::string::size_type v58;
  int v59;
  int v60;
  std::vector<std::string>::pointer v62;
  __int128 v63;
  std::string *v64;
  std::string *v65;
  uint64_t v66;
  std::vector<std::string>::pointer v67;
  __int128 v68;
  std::string *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t i;
  uint64_t v73;
  unsigned int v74;
  const std::string::value_type *p_v;
  std::string::size_type end_high;
  uint64_t v77;
  const std::string::value_type *v78;
  std::string *v79;
  __int128 v80;
  std::string *v81;
  std::string::size_type v82;
  std::string *v83;
  NSObject *v84;
  std::vector<std::string> *v85;
  const char *v86;
  void *begin;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  _QWORD *v100;
  uint64_t *v101;
  uint64_t v102;
  std::string *v103;
  unint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  _BYTE v109[32];
  __int128 v110;
  std::string __str;
  Observable *v112;
  std::__shared_weak_count *v113;
  _QWORD *v114;
  std::__shared_weak_count *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  std::string v118;
  uint64_t v119;
  void *v120;
  char v121;
  void *__p;
  char v123;
  int v124;
  std::__split_buffer<std::string> __v;
  std::vector<std::string> v126;
  std::string v127;
  std::string v128;
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a2[1];
  v116 = *a2;
  v117 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t *, uint64_t *))(*a1 + 72))(a1, &v116);
  v7 = v117;
  if (v117)
  {
    v8 = (unint64_t *)&v117->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = *a2;
  {
    v13 = *(_QWORD **)(*(_QWORD *)v11 + 8);
    v12 = *(std::__shared_weak_count **)(*(_QWORD *)v11 + 16);
    v114 = v13;
    v115 = v12;
    if (v12)
    {
      v14 = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(&v112, a1[21]);
    if (v112)
    {
      Observable::emit((uint64_t **)v112, "tts.feature.frontend", v13);
      if (*((char *)v13 + 119) < 0)
        std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)v13[12], v13[13]);
      else
        __str = *(std::string *)((_BYTE *)v13 + 4);
      v16 = *a2;
      {
        v18 = *(const std::string **)(*(_QWORD *)v17 + 8);
        v19 = *(std::__shared_weak_count **)(*(_QWORD *)v17 + 16);
        v118.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
        v118.__r_.__value_.__l.__size_ = (std::string::size_type)v19;
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        std::string::operator=(&__str, v18);
        if (v19)
        {
          v22 = (unint64_t *)&v19->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        v13 = v114;
      }
      v101 = a1;
      v110 = 0u;
      memset(v109, 0, sizeof(v109));
      memset(&v118, 0, sizeof(v118));
      std::vector<PhoneFeature>::__init_with_size[abi:ne180100]<PhoneFeature*,PhoneFeature*>(&v118, *v13, v13[1], 0x84BDA12F684BDA13 * ((uint64_t)(v13[1] - *v13) >> 3));
      std::string::operator=((std::string *)v109, &__str);
      size = v118.__r_.__value_.__l.__size_;
      v25 = v118.__r_.__value_.__r.__words[0];
      if (v118.__r_.__value_.__l.__size_ != v118.__r_.__value_.__r.__words[0])
      {
        v26 = 0;
        do
        {
          v27 = v25 + 216 * v26;
          v28 = *(_DWORD **)(v27 + 72);
          v29 = *(_DWORD **)(v27 + 80);
          if (v28 != v29)
          {
            do
            {
              if (*v28 == 3)
              {
                v30 = v110;
                if ((unint64_t)v110 >= *((_QWORD *)&v110 + 1))
                {
                  v31 = std::vector<MarkerRecord>::__push_back_slow_path<MarkerRecord const&>((uint64_t *)&v109[24], (uint64_t)v28);
                }
                else
                {
                  std::vector<MarkerRecord>::__construct_one_at_end[abi:ne180100]<MarkerRecord const&>((uint64_t)&v109[24], (uint64_t)v28);
                  v31 = v30 + 56;
                }
                *(_QWORD *)&v110 = v31;
              }
              v28 += 14;
            }
            while (v28 != v29);
            size = v118.__r_.__value_.__l.__size_;
            v25 = v118.__r_.__value_.__r.__words[0];
          }
          ++v26;
        }
        while (0x84BDA12F684BDA13 * ((uint64_t)(size - v25) >> 3) > v26);
      }
      __v.__first_ = &v118;
      std::vector<PhoneFeature>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
      v32 = v101;
      SharedObjectPool::get_if<TrackSubstitutions>(&v107, v101[21]);
      v33 = v107;
      if (v107)
      {
        TrackSubstitutions::reset_text(v107, (uint64_t)&__str);
        if (*(char *)(v33 + 47) < 0)
          std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)(v33 + 24), *(_QWORD *)(v33 + 32));
        else
          v118 = *(std::string *)(v33 + 24);
        if ((v109[23] & 0x80000000) != 0)
          operator delete(*(void **)v109);
        *(std::string *)v109 = v118;
        v34 = *(_QWORD *)&v109[24];
        v35 = v110;
        while (v34 != v35)
        {
          v36 = *(_QWORD *)(v34 + 32);
          v37 = *(_QWORD *)(v34 + 40);
          *(_QWORD *)(v34 + 32) = TrackSubstitutions::lower_bound((TrackSubstitutions *)v33, v36);
          *(_QWORD *)(v34 + 40) = TrackSubstitutions::upper_bound((TrackSubstitutions *)v33, v37 + v36)
                                - *(_QWORD *)(v34 + 32);
          v34 += 56;
        }
      }
      v38 = (uint64_t **)v112;
      Observable::emit((uint64_t **)v112, "tts.feature.wordmarkers", v109);
      Observable::emit(v38, "tts.feature.normalizedtext", v13 + 9);
      SharedObjectPool::get_if<TTSSynthesizer::VoiceDescription>(&v105, v101[21]);
      if (v105 && *(_DWORD *)(v105 + 60) == 3)
      {
        v39 = v114;
        FrontendFeatureLogModuleInternal::phoneme_by_words_hydra((FrontendFeatureLogModuleInternal *)&v102, (const FrontendFeature *)*v114, v114[1]);
        goto LABEL_113;
      }
      v103 = 0;
      v104 = 0;
      v102 = 0;
      memset(&v127, 0, sizeof(v127));
      v100 = v114;
      std::vector<PhoneFeature>::__init_with_size[abi:ne180100]<PhoneFeature*,PhoneFeature*>(&v127, *v114, v114[1], 0x84BDA12F684BDA13 * ((uint64_t)(v114[1] - *v114) >> 3));
      v40 = v127.__r_.__value_.__r.__words[0];
      if (v127.__r_.__value_.__l.__size_ == v127.__r_.__value_.__r.__words[0])
        goto LABEL_112;
      v41 = 0;
      LODWORD(v42) = 0;
      while (1)
      {
        PhoneFeature::PhoneFeature(&v118, (const PhoneFeature *)(v40 + 216 * v41));
        v43 = v127.__r_.__value_.__r.__words[0];
        v44 = *(_DWORD *)(v127.__r_.__value_.__r.__words[0] + 216 * v41 + 144);
        memset(&v126, 0, sizeof(v126));
        if (0x84BDA12F684BDA13 * ((uint64_t)(v127.__r_.__value_.__l.__size_ - v127.__r_.__value_.__r.__words[0]) >> 3) <= (int)v42)
          goto LABEL_93;
        v42 = (int)v42;
        v45 = 216 * (int)v42 + 96;
        while (1)
        {
          if (v124 != *(_DWORD *)(v43 + v45 + 52))
            goto LABEL_93;
          if (v44 != *(_DWORD *)(v43 + v45 + 48))
          {
            std::string::basic_string[abi:ne180100]<0>(&v128, ".");
            end = v126.__end_;
            if (v126.__end_ >= v126.__end_cap_.__value_)
            {
              v48 = 0xAAAAAAAAAAAAAAABLL * (((char *)v126.__end_ - (char *)v126.__begin_) >> 3);
              v49 = v48 + 1;
              if (v48 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)v126.__end_cap_.__value_ - (char *)v126.__begin_) >> 3) > v49)
                v49 = 0x5555555555555556 * (((char *)v126.__end_cap_.__value_ - (char *)v126.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v126.__end_cap_.__value_ - (char *)v126.__begin_) >> 3) >= 0x555555555555555)
                v50 = 0xAAAAAAAAAAAAAAALL;
              else
                v50 = v49;
              __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v126.__end_cap_;
              if (v50)
                v51 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v126.__end_cap_, v50);
              else
                v51 = 0;
              v52 = v51 + v48;
              __v.__first_ = v51;
              __v.__begin_ = v52;
              __v.__end_cap_.__value_ = &v51[v50];
              v53 = *(_OWORD *)&v128.__r_.__value_.__l.__data_;
              v52->__r_.__value_.__r.__words[2] = v128.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v52->__r_.__value_.__l.__data_ = v53;
              memset(&v128, 0, sizeof(v128));
              __v.__end_ = v52 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&v126, &__v);
              v54 = v126.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&__v);
              v126.__end_ = v54;
              if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v128.__r_.__value_.__l.__data_);
            }
            else
            {
              v47 = *(_OWORD *)&v128.__r_.__value_.__l.__data_;
              v126.__end_->__r_.__value_.__r.__words[2] = v128.__r_.__value_.__r.__words[2];
              *(_OWORD *)&end->__r_.__value_.__l.__data_ = v47;
              v126.__end_ = end + 1;
            }
            v43 = v127.__r_.__value_.__r.__words[0];
            v44 = *(_DWORD *)(v127.__r_.__value_.__r.__words[0] + v45 + 48);
          }
          v55 = (__int128 *)(v43 + v45);
          v56 = *(unsigned __int8 *)(v43 + v45 + 23);
          if (*(char *)(v43 + v45 + 23) < 0)
          {
            v58 = *((_QWORD *)v55 + 1);
            if (v58 == 1)
            {
              if (**(_BYTE **)v55 == 35)
              {
LABEL_104:
                LODWORD(v42) = v42 + 1;
                goto LABEL_93;
              }
LABEL_88:
              v62 = v126.__end_;
              if (v126.__end_ >= v126.__end_cap_.__value_)
              {
LABEL_91:
                v64 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v126, v55);
                goto LABEL_92;
              }
LABEL_89:
              std::string::__init_copy_ctor_external(v62, *(const std::string::value_type **)v55, v58);
              goto LABEL_90;
            }
            if (v58 != 3)
              goto LABEL_88;
            v57 = *(const std::string::value_type **)v55;
          }
          else
          {
            if (v56 == 1)
            {
              if (*(_BYTE *)v55 == 35)
                goto LABEL_104;
LABEL_85:
              v62 = v126.__end_;
              if (v126.__end_ >= v126.__end_cap_.__value_)
                goto LABEL_91;
              goto LABEL_86;
            }
            v57 = (const std::string::value_type *)(v43 + v45);
            if (v56 != 3)
              goto LABEL_85;
          }
          v59 = *(unsigned __int16 *)v57;
          v60 = *((unsigned __int8 *)v57 + 2);
          if (v59 == 26995 && v60 == 108)
            break;
          v62 = v126.__end_;
          if (v126.__end_ >= v126.__end_cap_.__value_)
            goto LABEL_91;
          if ((v56 & 0x80) != 0)
          {
            v58 = *(_QWORD *)(v43 + v45 + 8);
            goto LABEL_89;
          }
LABEL_86:
          v63 = *v55;
          v62->__r_.__value_.__r.__words[2] = *((_QWORD *)v55 + 2);
          *(_OWORD *)&v62->__r_.__value_.__l.__data_ = v63;
LABEL_90:
          v64 = v62 + 1;
LABEL_92:
          v126.__end_ = v64;
          ++v42;
          v43 = v127.__r_.__value_.__r.__words[0];
          v45 += 216;
          if (0x84BDA12F684BDA13
             * ((uint64_t)(v127.__r_.__value_.__l.__size_ - v127.__r_.__value_.__r.__words[0]) >> 3) <= v42)
            goto LABEL_93;
        }
        v67 = v126.__end_;
        if (v126.__end_ >= v126.__end_cap_.__value_)
        {
          v69 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v126, v55);
        }
        else
        {
          if ((v56 & 0x80) != 0)
          {
            std::string::__init_copy_ctor_external(v126.__end_, *(const std::string::value_type **)v55, *((_QWORD *)v55 + 1));
          }
          else
          {
            v68 = *v55;
            v126.__end_->__r_.__value_.__r.__words[2] = *((_QWORD *)v55 + 2);
            *(_OWORD *)&v67->__r_.__value_.__l.__data_ = v68;
          }
          v69 = v67 + 1;
        }
        v126.__end_ = v69;
        LODWORD(v42) = v42 + 1;
LABEL_93:
        v65 = v103;
        if ((unint64_t)v103 >= v104)
        {
          v66 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>(&v102, (__int128 **)&v126);
        }
        else
        {
          v103->__r_.__value_.__r.__words[0] = 0;
          v65->__r_.__value_.__l.__size_ = 0;
          v65->__r_.__value_.__r.__words[2] = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v65, (__int128 *)v126.__begin_, (__int128 *)v126.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v126.__end_ - (char *)v126.__begin_) >> 3));
          v66 = (uint64_t)&v65[1];
        }
        v103 = (std::string *)v66;
        __v.__first_ = (std::__split_buffer<std::string>::pointer)&v126;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
        if (v123 < 0)
          operator delete(__p);
        if (v121 < 0)
          operator delete(v120);
        __v.__first_ = (std::__split_buffer<std::string>::pointer)&v119;
        std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
        if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v118.__r_.__value_.__l.__data_);
        v41 = (int)v42;
        v40 = v127.__r_.__value_.__r.__words[0];
        if (0x84BDA12F684BDA13 * ((uint64_t)(v127.__r_.__value_.__l.__size_ - v127.__r_.__value_.__r.__words[0]) >> 3) <= (int)v42)
        {
LABEL_112:
          v118.__r_.__value_.__r.__words[0] = (std::string::size_type)&v127;
          std::vector<PhoneFeature>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
          v39 = v100;
          v32 = v101;
LABEL_113:
          Observable::emit((uint64_t **)v112, "tts.feature.phonemes", &v102);
          if (!*((_BYTE *)v32 + 272))
            goto LABEL_168;
          v70 = v39[3];
          v71 = v39[4];
          if (v70 == v71)
            goto LABEL_168;
LABEL_115:
          std::string::basic_string[abi:ne180100]<0>(&v118, &byte_1DEBD87CE);
          for (i = 0; ; ++i)
          {
            if (*(char *)(v70 + 39) < 0)
            {
              if (i >= *(_QWORD *)(v70 + 24))
              {
LABEL_138:
                UTFString::remove_invalid_utf8_codes((std::string *)&__v, (uint8_t *)(v70 + 40));
                std::operator+<char>();
                v79 = std::string::append(&v128, "\t");
                v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
                v126.__end_cap_.__value_ = (std::string *)v79->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v126.__begin_ = v80;
                v79->__r_.__value_.__l.__size_ = 0;
                v79->__r_.__value_.__r.__words[2] = 0;
                v79->__r_.__value_.__r.__words[0] = 0;
                if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v81 = &v118;
                else
                  v81 = (std::string *)v118.__r_.__value_.__r.__words[0];
                if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v82 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
                else
                  v82 = v118.__r_.__value_.__l.__size_;
                v83 = std::string::append((std::string *)&v126, (const std::string::value_type *)v81, v82);
                v127 = *v83;
                v83->__r_.__value_.__l.__size_ = 0;
                v83->__r_.__value_.__r.__words[2] = 0;
                v83->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v126.__end_cap_.__value_) < 0)
                  operator delete(v126.__begin_);
                if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v128.__r_.__value_.__l.__data_);
                if (Diagnostics_GetLogObject(void)::onceToken != -1)
                  dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                v84 = Diagnostics_GetLogObject(void)::__profile_log_default;
                if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
                {
                  Censor::global_plaintext((std::string *)&v126, (uint64_t)&v127);
                  v85 = SHIBYTE(v126.__end_cap_.__value_) >= 0 ? &v126 : (std::vector<std::string> *)v126.__begin_;
                  LODWORD(v128.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)v128.__r_.__value_.__r.__words + 4) = (std::string::size_type)v85;
                  _os_log_impl(&dword_1DE3F6000, v84, OS_LOG_TYPE_INFO, "%s", (uint8_t *)&v128, 0xCu);
                  if (SHIBYTE(v126.__end_cap_.__value_) < 0)
                    operator delete(v126.__begin_);
                }
                Censor::global_plaintext((std::string *)&v126, (uint64_t)&v127);
                if (SHIBYTE(v126.__end_cap_.__value_) >= 0)
                  begin = &v126;
                else
                  begin = v126.__begin_;
                Diagnostics::log(6, "%s", v86, begin);
                if (SHIBYTE(v126.__end_cap_.__value_) < 0)
                  operator delete(v126.__begin_);
                if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v127.__r_.__value_.__l.__data_);
                if (SHIBYTE(__v.__end_) < 0)
                  operator delete(__v.__first_);
                if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v118.__r_.__value_.__l.__data_);
                v70 += 136;
                if (v70 == v71)
                {
LABEL_168:
                  v118.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
                  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
                  v88 = v106;
                  if (v106)
                  {
                    v89 = (unint64_t *)&v106->__shared_owners_;
                    do
                      v90 = __ldaxr(v89);
                    while (__stlxr(v90 - 1, v89));
                    if (!v90)
                    {
                      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                      std::__shared_weak_count::__release_weak(v88);
                    }
                  }
                  v91 = v108;
                  if (v108)
                  {
                    v92 = (unint64_t *)&v108->__shared_owners_;
                    do
                      v93 = __ldaxr(v92);
                    while (__stlxr(v93 - 1, v92));
                    if (!v93)
                    {
                      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                      std::__shared_weak_count::__release_weak(v91);
                    }
                  }
                  v118.__r_.__value_.__r.__words[0] = (std::string::size_type)&v109[24];
                  std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
                  if ((v109[23] & 0x80000000) != 0)
                    operator delete(*(void **)v109);
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__str.__r_.__value_.__l.__data_);
                  goto LABEL_182;
                }
                goto LABEL_115;
              }
              v73 = *(_QWORD *)(v70 + 16);
            }
            else
            {
              if (i >= *(unsigned __int8 *)(v70 + 39))
                goto LABEL_138;
              v73 = v70 + 16;
            }
            v74 = *(unsigned __int8 *)(v73 + i);
            std::string::basic_string[abi:ne180100]<0>(&v127, &byte_1DEBD87CE);
            PhoneConversion::get_string_phone((std::string *)&__v, v74, (uint64_t *)&v127);
            if (SHIBYTE(__v.__end_) >= 0)
              p_v = (const std::string::value_type *)&__v;
            else
              p_v = (const std::string::value_type *)__v.__first_;
            if (SHIBYTE(__v.__end_) >= 0)
              end_high = HIBYTE(__v.__end_);
            else
              end_high = (std::string::size_type)__v.__begin_;
            std::string::append(&v118, p_v, end_high);
            if (SHIBYTE(__v.__end_) < 0)
              operator delete(__v.__first_);
            if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v127.__r_.__value_.__l.__data_);
            if (*(char *)(v70 + 39) < 0)
              v77 = *(_QWORD *)(v70 + 24);
            else
              v77 = *(unsigned __int8 *)(v70 + 39);
            if (i == v77 - 1)
              v78 = &byte_1DEBD87CE;
            else
              v78 = " ";
            std::string::append(&v118, v78);
          }
        }
      }
    }
LABEL_182:
    v94 = v113;
    if (v113)
    {
      v95 = (unint64_t *)&v113->__shared_owners_;
      do
        v96 = __ldaxr(v95);
      while (__stlxr(v96 - 1, v95));
      if (!v96)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    v97 = v115;
    if (v115)
    {
      v98 = (unint64_t *)&v115->__shared_owners_;
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
  }
}

void sub_1DEA9B020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,char a38,uint64_t a39,char *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;
  uint64_t v46;

  *(_QWORD *)(v46 - 184) = v45;
  *(_QWORD *)(v46 - 128) = v46 - 192;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 128));
  PhoneFeature::~PhoneFeature((void **)&a40);
  a40 = (char *)(v46 - 160);
  std::vector<PhoneFeature>::__destroy_vector::operator()[abi:ne180100]((void ***)&a40);
  a40 = &a14;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a40);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::pair<std::string,std::vector<MarkerRecord>>::~pair((uint64_t)&a21);
  if (a32 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void FrontendFeatureLogModuleInternal::phoneme_by_words_hydra(FrontendFeatureLogModuleInternal *this, const FrontendFeature *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 **v6;
  int v7;
  int v8;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer end;
  std::vector<std::string>::pointer v11;
  int v12;
  std::vector<std::string>::pointer v13;
  unint64_t v15;
  uint64_t v16;
  std::vector<std::string>::pointer j;
  __int128 v18;
  std::string *v19;
  unint64_t v20;
  uint64_t v21;
  std::vector<std::string>::pointer v22;
  __int128 v23;
  std::string *v24;
  std::vector<std::string>::pointer k;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  std::string *v31;
  std::vector<std::string>::pointer i;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  unint64_t v36;
  uint64_t v37;
  std::string *v38;
  std::vector<std::string>::pointer m;
  void *__p[2];
  std::string::size_type v41;
  std::vector<std::string> v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::__split_buffer<std::string> __v;

  v43 = 0;
  v44 = 0;
  v45 = 0;
  std::vector<PhoneFeature>::__init_with_size[abi:ne180100]<PhoneFeature*,PhoneFeature*>(&v43, (uint64_t)a2, a3, 0x84BDA12F684BDA13 * ((a3 - (uint64_t)a2) >> 3));
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  memset(&v42, 0, sizeof(v42));
  v4 = v43;
  v5 = v44;
  if (v43 == v44)
    goto LABEL_82;
  do
  {
    v6 = (unsigned __int8 **)(v4 + 96);
    v7 = *(char *)(v4 + 119);
    if (v7 < 0)
    {
      if (*(_QWORD *)(v4 + 104) != 1)
        goto LABEL_14;
      v8 = **v6;
    }
    else
    {
      if (v7 != 1)
        goto LABEL_14;
      v8 = *(unsigned __int8 *)v6;
    }
    if (v8 == 35 || v8 == 95)
    {
      begin = v42.__begin_;
      end = v42.__end_;
      if (v42.__begin_ == v42.__end_)
        goto LABEL_67;
      v11 = v42.__end_ - 1;
      v12 = SHIBYTE(v42.__end_[-1].__r_.__value_.__r.__words[2]);
      if (v12 < 0)
      {
        if (v42.__end_[-1].__r_.__value_.__l.__size_ != 1 || *v11->__r_.__value_.__l.__data_ != 46)
          goto LABEL_49;
        operator delete(v11->__r_.__value_.__l.__data_);
        begin = v42.__begin_;
      }
      else if (v12 != 1 || v11->__r_.__value_.__s.__data_[0] != 46)
      {
        goto LABEL_49;
      }
      v42.__end_ = v11;
      end = v11;
LABEL_49:
      if (begin == end)
        goto LABEL_67;
      v26 = *((_QWORD *)this + 1);
      if (v26 >= *((_QWORD *)this + 2))
      {
        v27 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>((uint64_t *)this, (__int128 **)&v42);
      }
      else
      {
        std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>((uint64_t)this, (__int128 **)&v42);
        v27 = v26 + 24;
      }
      *((_QWORD *)this + 1) = v27;
      v24 = v42.__begin_;
      for (i = v42.__end_; i != v24; --i)
      {
        if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(i[-1].__r_.__value_.__l.__data_);
      }
      goto LABEL_66;
    }
LABEL_14:
    v13 = v42.__end_;
    if (*(_DWORD *)(v4 + 156) == 1 && v42.__begin_ != v42.__end_)
    {
      v15 = *((_QWORD *)this + 1);
      if (v15 >= *((_QWORD *)this + 2))
      {
        v16 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>((uint64_t *)this, (__int128 **)&v42);
      }
      else
      {
        std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>((uint64_t)this, (__int128 **)&v42);
        v16 = v15 + 24;
      }
      *((_QWORD *)this + 1) = v16;
      v13 = v42.__begin_;
      for (j = v42.__end_; j != v13; --j)
      {
        if (SHIBYTE(j[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(j[-1].__r_.__value_.__l.__data_);
      }
      v42.__end_ = v13;
    }
    if (v13 >= v42.__end_cap_.__value_)
    {
      v19 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v42, (__int128 *)(v4 + 96));
    }
    else
    {
      if (*(char *)(v4 + 119) < 0)
      {
        std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)(v4 + 96), *(_QWORD *)(v4 + 104));
      }
      else
      {
        v18 = *(_OWORD *)v6;
        v13->__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 112);
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v18;
      }
      v19 = v13 + 1;
    }
    v42.__end_ = v19;
    if (*(_DWORD *)(v4 + 160) == 1)
    {
      v20 = *((_QWORD *)this + 1);
      if (v20 >= *((_QWORD *)this + 2))
      {
        v21 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>((uint64_t *)this, (__int128 **)&v42);
      }
      else
      {
        std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>((uint64_t)this, (__int128 **)&v42);
        v21 = v20 + 24;
      }
      *((_QWORD *)this + 1) = v21;
      v24 = v42.__begin_;
      for (k = v42.__end_; k != v24; --k)
      {
        if (SHIBYTE(k[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(k[-1].__r_.__value_.__l.__data_);
      }
LABEL_66:
      v42.__end_ = v24;
      goto LABEL_67;
    }
    if (*(_DWORD *)(v4 + 172) == 1)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, ".");
      v22 = v42.__end_;
      if (v42.__end_ >= v42.__end_cap_.__value_)
      {
        v28 = 0xAAAAAAAAAAAAAAABLL * (((char *)v42.__end_ - (char *)v42.__begin_) >> 3);
        v29 = v28 + 1;
        if (v28 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v42.__end_cap_.__value_ - (char *)v42.__begin_) >> 3) > v29)
          v29 = 0x5555555555555556 * (((char *)v42.__end_cap_.__value_ - (char *)v42.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v42.__end_cap_.__value_ - (char *)v42.__begin_) >> 3) >= 0x555555555555555)
          v30 = 0xAAAAAAAAAAAAAAALL;
        else
          v30 = v29;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v42.__end_cap_;
        if (v30)
          v31 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v42.__end_cap_, v30);
        else
          v31 = 0;
        v33 = v31 + v28;
        __v.__first_ = v31;
        __v.__begin_ = v33;
        __v.__end_cap_.__value_ = &v31[v30];
        v34 = *(_OWORD *)__p;
        v33->__r_.__value_.__r.__words[2] = v41;
        *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v34;
        __p[1] = 0;
        v41 = 0;
        __p[0] = 0;
        __v.__end_ = v33 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v42, &__v);
        v35 = v42.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v42.__end_ = v35;
        if (SHIBYTE(v41) < 0)
          operator delete(__p[0]);
      }
      else
      {
        v23 = *(_OWORD *)__p;
        v42.__end_->__r_.__value_.__r.__words[2] = v41;
        *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
        v42.__end_ = v22 + 1;
      }
    }
LABEL_67:
    v4 += 216;
  }
  while (v4 != v5);
  if (v42.__begin_ != v42.__end_)
  {
    v36 = *((_QWORD *)this + 1);
    if (v36 >= *((_QWORD *)this + 2))
    {
      v37 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>((uint64_t *)this, (__int128 **)&v42);
    }
    else
    {
      std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>((uint64_t)this, (__int128 **)&v42);
      v37 = v36 + 24;
    }
    *((_QWORD *)this + 1) = v37;
    v38 = v42.__begin_;
    for (m = v42.__end_; m != v38; --m)
    {
      if (SHIBYTE(m[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(m[-1].__r_.__value_.__l.__data_);
    }
    v42.__end_ = v38;
  }
LABEL_82:
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v43;
  std::vector<PhoneFeature>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_1DEA9B6B0(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, uint64_t a7, uint64_t a8, char **__pa, char a10, uint64_t a11, char *a12, std::__split_buffer<std::string> *a13, uint64_t a14, char a15)
{
  __pa = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  a12 = &a15;
  std::vector<PhoneFeature>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(__p);
}

uint64_t std::pair<std::string,std::vector<MarkerRecord>>::~pair(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

std::string *std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>(uint64_t a1, __int128 **a2)
{
  std::string *v3;
  std::string *result;

  v3 = *(std::string **)(a1 + 8);
  v3->__r_.__value_.__r.__words[0] = 0;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *(_QWORD *)(a1 + 8) = v3 + 1;
  return result;
}

void sub_1DEA9B7C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t FrontendFeatureLogModule::FrontendFeatureLogModule(uint64_t a1, char *a2, uint64_t a3, std::__shared_weak_count *a4)
{
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unsigned __int8 v12;
  void *__p[2];
  char v14;
  uint64_t v15[2];

  v15[0] = a3;
  v15[1] = (uint64_t)a4;
  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  Module::Module(a1, a2, v15);
  if (a4)
  {
    v9 = (unint64_t *)&a4->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
      std::__shared_weak_count::__release_weak(a4);
    }
  }
  *(_QWORD *)a1 = &off_1EA920AE0;
  *(_BYTE *)(a1 + 272) = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, "enable_print");
  v12 = 1;
  *(_BYTE *)(a1 + 272) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(a2, (const void **)__p, &v12);
  if (v14 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1DEA9B8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  Module *v15;

  if (a15 < 0)
    operator delete(__p);
  Module::~Module(v15);
  _Unwind_Resume(a1);
}

void TTSSynthesizerCallbackResult::TTSSynthesizerCallbackResult(std::string *this, __int128 *a2, std::string::size_type a3, std::string::size_type a4, std::string::size_type a5, uint64_t a6, std::string::value_type a7)
{
  __int128 v13;
  std::string::size_type size;
  std::string *v15;
  std::string::size_type *v16;
  _QWORD *v17;
  std::string::size_type v18;
  std::string::pointer data;
  std::string::size_type v20;
  uint64_t v21;
  UChar32 v22;
  uint8_t *s[2];

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v13 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v13;
  }
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[1] = 0u;
  this[1].__r_.__value_.__r.__words[0] = a4;
  this[1].__r_.__value_.__l.__size_ = a3;
  this[1].__r_.__value_.__r.__words[2] = a5;
  this[2].__r_.__value_.__r.__words[0] = 9600;
  *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[2] = 0u;
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)&this[4].__r_.__value_.__l.__size_, a6);
  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v15 = this;
  else
    v15 = (std::string *)this->__r_.__value_.__r.__words[0];
  this[8].__r_.__value_.__r.__words[2] = (std::string::size_type)v15;
  v16 = &this[8].__r_.__value_.__r.__words[2];
  if ((size & 0x80u) != 0)
    size = this->__r_.__value_.__l.__size_;
  *(_OWORD *)&this[6].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[7].__r_.__value_.__r.__words[1] = 0u;
  this[8].__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  this[8].__r_.__value_.__l.__size_ = size << 32;
  this[9].__r_.__value_.__r.__words[0] = size | ((unint64_t)size << 32);
  this[9].__r_.__value_.__s.__data_[8] = 0;
  this[9].__r_.__value_.__s.__data_[9] = a7;
  this[9].__r_.__value_.__s.__data_[10] = 0;
  v17 = operator new(0x20uLL);
  *v17 = &off_1EA92E228;
  v17[1] = TTSSynthesizerCallbackResult::internal_callback;
  v17[2] = 0;
  v17[3] = this;
  this[6].__r_.__value_.__r.__words[2] = (std::string::size_type)v17;
  v18 = this[2].__r_.__value_.__l.__size_;
  data = this[2].__r_.__value_.__l.__data_;
  v20 = this[2].__r_.__value_.__r.__words[2] - v18;
  if ((unint64_t)data <= v20)
  {
    if ((unint64_t)data < v20)
      this[2].__r_.__value_.__r.__words[2] = (std::string::size_type)&data[v18];
  }
  else
  {
    std::vector<signed char>::__append(&this[2].__r_.__value_.__l.__size_, (size_t)&data[-v20]);
  }
  std::vector<VE_MARKINFO>::resize((char **)&this[3].__r_.__value_.__l.__size_);
  while (LODWORD(this[9].__r_.__value_.__l.__data_) != LODWORD(this[8].__r_.__value_.__r.__words[1]))
  {
    *(_OWORD *)s = *(_OWORD *)v16;
    v21 = SLODWORD(s[1]) - 1;
    --LODWORD(s[1]);
    if ((char)s[0][v21] <= -65)
      LODWORD(s[1]) = utf8_back1SafeBody(s[0], 0, v21);
    v22 = UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)s);
    if (!u_isUWhiteSpace(v22))
      break;
    *(_OWORD *)v16 = *(_OWORD *)s;
  }
}

void sub_1DEA9BACC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  _QWORD *v4;
  _QWORD **v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  void *v13;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v6 - 40);
  v8 = *v5;
  if (*v5 == (_QWORD *)(v6 - 72))
  {
    v9 = 4;
    v8 = (_QWORD *)(v6 - 72);
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v10 = *(_QWORD **)(v1 + 128);
  if (v10 == v4)
  {
    v11 = 4;
    v10 = v4;
  }
  else
  {
    if (!v10)
      goto LABEL_11;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  v12 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 88) = v12;
    operator delete(v12);
  }
  v13 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 64) = v13;
    operator delete(v13);
  }
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

uint64_t TTSSynthesizerCallbackResult::internal_callback(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::string::size_type v11;
  std::string::size_type v12;
  NSObject *v13;
  const char *v14;
  std::string::size_type v15;
  std::string::size_type v16;
  std::string *p_p;
  unint64_t v18;
  std::string *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  size_t v32;
  char *v33;
  char *v34;
  char *v35;
  char v36;
  float **v37;
  float *v38;
  float *v39;
  uint64_t v40;
  std::string __p;
  char v43;
  std::string __src;
  std::string *v45;
  __int16 v46;
  unint64_t v47;
  __int16 v48;
  double v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  switch(*(_DWORD *)a2)
  {
    case 1:
      v4 = *(_QWORD *)(a1 + 128);
      if (v4)
      {
        LODWORD(__src.__r_.__value_.__l.__data_) = 0;
        v5 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v4 + 48))(v4, &__src);
        goto LABEL_57;
      }
      return *(unsigned int *)(a1 + 184);
    case 2:
      v23 = *(_QWORD *)(a1 + 128);
      if (v23)
      {
        LODWORD(__src.__r_.__value_.__l.__data_) = 1;
        v5 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v23 + 48))(v23, &__src);
        goto LABEL_57;
      }
      return *(unsigned int *)(a1 + 184);
    case 3:
      v20 = *(_QWORD *)(a1 + 128);
      if (v20)
      {
        LODWORD(__src.__r_.__value_.__l.__data_) = 2;
        v5 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v20 + 48))(v20, &__src);
        goto LABEL_57;
      }
      return *(unsigned int *)(a1 + 184);
    case 4:
      v21 = *(_QWORD *)(a1 + 128);
      if (v21)
      {
        LODWORD(__src.__r_.__value_.__l.__data_) = 3;
        v22 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v21 + 48))(v21, &__src);
        *(_QWORD *)(a1 + 184) = v22;
        if (v22)
          goto LABEL_55;
      }
      else if (*(_QWORD *)(a1 + 184))
      {
        goto LABEL_55;
      }
      v27 = *(_QWORD **)(a2 + 8);
      if (v27)
      {
        v28 = *(unint64_t **)(a1 + 32);
        v29 = *v28;
        v30 = (char *)v28[1];
        v31 = &v30[-*v28];
        v32 = (size_t)&v31[(uint64_t)(v27[1] - *v27) >> 2];
        if (v28[2] - *v28 < v32)
        {
          if ((v32 & 0x8000000000000000) != 0)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v33 = (char *)operator new(v32);
          v34 = &v31[(_QWORD)v33];
          if (v30 != (char *)v29)
          {
            v35 = &v30[~v29];
            do
            {
              v36 = *--v30;
              (v35--)[(_QWORD)v33] = v36;
            }
            while (v30 != (char *)v29);
            v34 = v33;
          }
          *v28 = (unint64_t)v34;
          v28[1] = (unint64_t)&v31[(_QWORD)v33];
          v28[2] = (unint64_t)&v33[v32];
          if (v29)
            operator delete((void *)v29);
        }
        v37 = *(float ***)(a2 + 8);
        v38 = *v37;
        v39 = v37[1];
        if (*v37 != v39)
        {
          do
          {
            LOWORD(__src.__r_.__value_.__l.__data_) = (int)*v38;
            std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(*(_QWORD *)(a1 + 32), *(char **)(*(_QWORD *)(a1 + 32) + 8), (char *)&__src, &__src.__r_.__value_.__s.__data_[2], 2);
            ++v38;
          }
          while (v38 != v39);
        }
      }
LABEL_55:
      v40 = *(_QWORD *)(a1 + 128);
      if (v40)
      {
        LODWORD(__src.__r_.__value_.__l.__data_) = 4;
        v5 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v40 + 48))(v40, &__src);
        goto LABEL_57;
      }
      return *(unsigned int *)(a1 + 184);
    case 5:
      v6 = *(uint64_t **)(a1 + 40);
      if (v6)
      {
        *(_BYTE *)(a1 + 226) = 1;
        std::vector<TTSSynthesizer::Marker>::__insert_with_size[abi:ne180100]<std::__wrap_iter<TTSSynthesizer::Marker*>,std::__wrap_iter<TTSSynthesizer::Marker*>>(v6, v6[1], **(_QWORD **)(a2 + 16), *(__int128 **)(*(_QWORD *)(a2 + 16) + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 8) - **(_QWORD **)(a2 + 16)) >> 3));
        v7 = *(_QWORD *)(a1 + 128);
        if (v7)
        {
          LODWORD(__src.__r_.__value_.__l.__data_) = 5;
          *(_QWORD *)(a1 + 184) = (*(int (**)(uint64_t, std::string *))(*(_QWORD *)v7 + 48))(v7, &__src);
        }
        v8 = *(uint64_t **)(a2 + 16);
        v9 = *v8;
        v10 = v8[1];
        if (*v8 != v10)
        {
          do
          {
            if (!*(_DWORD *)v9)
            {
              std::string::basic_string[abi:ne180100]<0>(&__p, "n/a");
              if (*(char *)(a1 + 23) < 0)
                v11 = *(_QWORD *)(a1 + 8);
              else
                v11 = *(unsigned __int8 *)(a1 + 23);
              v12 = *(_QWORD *)(v9 + 8);
              if (v12 <= v11)
              {
                std::string::basic_string(&__src, (const std::string *)a1, v12, *(_QWORD *)(v9 + 16), (std::allocator<char> *)&v43);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                __p = __src;
                Censor::global_plaintext(&__src, (uint64_t)&__p);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                __p = __src;
              }
              if (Diagnostics_GetLogObject(void)::onceToken != -1)
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
              v13 = Diagnostics_GetLogObject(void)::__profile_log_default;
              if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
              {
                v15 = *(_QWORD *)(v9 + 8);
                v16 = *(_QWORD *)(v9 + 16) + v15;
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  p_p = &__p;
                else
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                v18 = *(_QWORD *)(v9 + 24);
                LODWORD(__src.__r_.__value_.__l.__data_) = 134219010;
                *(std::string::size_type *)((char *)__src.__r_.__value_.__r.__words + 4) = v15;
                WORD2(__src.__r_.__value_.__r.__words[1]) = 2048;
                *(std::string::size_type *)((char *)&__src.__r_.__value_.__r.__words[1] + 6) = v16;
                HIWORD(__src.__r_.__value_.__r.__words[2]) = 2080;
                v45 = p_p;
                v46 = 2048;
                v47 = v18;
                v48 = 2048;
                v49 = (float)v18 / 48000.0;
                _os_log_impl(&dword_1DE3F6000, v13, OS_LOG_TYPE_INFO, "WordMarker [%zu, %zu], word: '%s', sample_idx: %zu, time@48k: %.2f", (uint8_t *)&__src, 0x34u);
              }
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v19 = &__p;
              else
                v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
              Diagnostics::log(6, "WordMarker [%zu, %zu], word: '%s', sample_idx: %zu, time@48k: %.2f", v14, *(_QWORD *)(v9 + 8), *(_QWORD *)(v9 + 16) + *(_QWORD *)(v9 + 8), v19, *(_QWORD *)(v9 + 24), (float)*(unint64_t *)(v9 + 24) / 48000.0);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
            v9 += 56;
          }
          while (v9 != v10);
        }
      }
      return *(unsigned int *)(a1 + 184);
    case 6:
      v24 = *(_QWORD *)(a1 + 24);
      if (v24)
      {
        v25 = *(_QWORD *)(a2 + 8);
        if (v25)
        {
          *(_QWORD *)(v24 + 8) = *(_QWORD *)v24;
          std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((char *)v24, *(char **)v25, *(_QWORD *)(v25 + 8), (uint64_t)(*(_QWORD *)(v25 + 8) - *(_QWORD *)v25) >> 2);
          v26 = *(_QWORD *)(a1 + 128);
          if (v26)
          {
            LODWORD(__src.__r_.__value_.__l.__data_) = 6;
            v5 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v26 + 48))(v26, &__src);
LABEL_57:
            *(_QWORD *)(a1 + 184) = v5;
          }
        }
      }
      return *(unsigned int *)(a1 + 184);
    default:
      return *(unsigned int *)(a1 + 184);
  }
}

void sub_1DEA9C064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<std::__bind<int (TTSSynthesizerCallbackResult::*)(InternalCallbackContainer),TTSSynthesizerCallbackResult*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (TTSSynthesizerCallbackResult::*)(InternalCallbackContainer),TTSSynthesizerCallbackResult*,std::placeholders::__ph<1> const&>>,int ()(InternalCallbackContainer)>::~__func()
{
  JUMPOUT(0x1DF0ED014);
}

__n128 std::__function::__func<std::__bind<int (TTSSynthesizerCallbackResult::*)(InternalCallbackContainer),TTSSynthesizerCallbackResult*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (TTSSynthesizerCallbackResult::*)(InternalCallbackContainer),TTSSynthesizerCallbackResult*,std::placeholders::__ph<1> const&>>,int ()(InternalCallbackContainer)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1EA92E228;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<int (TTSSynthesizerCallbackResult::*)(InternalCallbackContainer),TTSSynthesizerCallbackResult*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (TTSSynthesizerCallbackResult::*)(InternalCallbackContainer),TTSSynthesizerCallbackResult*,std::placeholders::__ph<1> const&>>,int ()(InternalCallbackContainer)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1EA92E228;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<int (TTSSynthesizerCallbackResult::*)(InternalCallbackContainer),TTSSynthesizerCallbackResult*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (TTSSynthesizerCallbackResult::*)(InternalCallbackContainer),TTSSynthesizerCallbackResult*,std::placeholders::__ph<1> const&>>,int ()(InternalCallbackContainer)>::operator()(_QWORD *a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *, __int128 *);
  _QWORD *v4;
  __int128 v6;
  uint64_t v7;

  v2 = a1[2];
  v3 = (uint64_t (*)(_QWORD *, __int128 *))a1[1];
  v4 = (_QWORD *)(a1[3] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, __int128 *))(*v4 + v3);
  v6 = *a2;
  v7 = *((_QWORD *)a2 + 2);
  return v3(v4, &v6);
}

uint64_t std::__function::__func<std::__bind<int (TTSSynthesizerCallbackResult::*)(InternalCallbackContainer),TTSSynthesizerCallbackResult*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (TTSSynthesizerCallbackResult::*)(InternalCallbackContainer),TTSSynthesizerCallbackResult*,std::placeholders::__ph<1> const&>>,int ()(InternalCallbackContainer)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<int (TTSSynthesizerCallbackResult::*)(InternalCallbackContainer),TTSSynthesizerCallbackResult*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (TTSSynthesizerCallbackResult::*)(InternalCallbackContainer),TTSSynthesizerCallbackResult*,std::placeholders::__ph<1> const&>>,int ()(InternalCallbackContainer)>::target_type()
{
}

void std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  _BYTE *v20;
  char *v21;
  char *v22;
  _BYTE *v23;
  char *v24;
  char v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;

  if (a5 < 1)
    return;
  v10 = *(_BYTE **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v13 = (char *)(__dst - v11);
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
      v16 = (char *)operator new(v15);
    else
      v16 = 0;
    v26 = &v13[(_QWORD)v16];
    memcpy(&v13[(_QWORD)v16], __src, a5);
    if (v11 == __dst)
    {
      v27 = &v13[(_QWORD)v16];
    }
    else
    {
      do
      {
        v13[(_QWORD)v16 - 1] = v13[(_QWORD)(v11 - 1)];
        --v13;
      }
      while (v13);
      v10 = *(_BYTE **)(a1 + 8);
      v27 = v16;
    }
    v28 = &v26[a5];
    v29 = &v16[v15];
    if (v10 != __dst)
      memmove(v28, __dst, v10 - __dst);
    v30 = *(char **)a1;
    *(_QWORD *)a1 = v27;
    *(_QWORD *)(a1 + 8) = &v28[v10 - __dst];
    *(_QWORD *)(a1 + 16) = v29;
    if (v30)
      operator delete(v30);
    return;
  }
  v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    v18 = &__src[a5];
    v20 = *(_BYTE **)(a1 + 8);
LABEL_17:
    v21 = &__dst[a5];
    v22 = &v20[-a5];
    v23 = v20;
    if (&v20[-a5] < v10)
    {
      v24 = (char *)(&v10[a5] - v20);
      v23 = v20;
      do
      {
        v25 = *v22++;
        *v23++ = v25;
        --v24;
      }
      while (v24);
    }
    *(_QWORD *)(a1 + 8) = v23;
    if (v20 != v21)
      memmove(&__dst[a5], __dst, v20 - v21);
    if (v18 != __src)
      memmove(__dst, __src, v18 - __src);
    return;
  }
  v18 = &__src[v17];
  v19 = a4 - &__src[v17];
  if (a4 != &__src[v17])
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  v20 = &v10[v19];
  *(_QWORD *)(a1 + 8) = &v10[v19];
  if (v17 >= 1)
    goto LABEL_17;
}

void std::vector<TTSSynthesizer::Marker>::__insert_with_size[abi:ne180100]<std::__wrap_iter<TTSSynthesizer::Marker*>,std::__wrap_iter<TTSSynthesizer::Marker*>>(uint64_t *a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  std::string *v37;
  __int128 *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  __int128 v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD v51[3];
  char v52;
  uint64_t v53;
  uint64_t v54;

  if (a5 >= 1)
  {
    v6 = a3;
    v8 = *a1;
    v9 = (a2 - *a1) / 56;
    v10 = *a1 + 56 * v9;
    v12 = (uint64_t)(a1 + 2);
    v11 = a1[2];
    v13 = a1[1];
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v13) >> 3) >= a5)
    {
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v13 - v10) >> 3) >= a5)
      {
        v18 = (__int128 *)(a3 + 56 * a5);
        v19 = a1[1];
      }
      else
      {
        v18 = (__int128 *)(a3 + 8 * ((uint64_t)(v13 - v10) >> 3));
        v19 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TTSSynthesizer::Marker>,TTSSynthesizer::Marker*,TTSSynthesizer::Marker*,TTSSynthesizer::Marker*>((uint64_t)(a1 + 2), v18, a4, v13);
        a1[1] = v19;
        if ((uint64_t)(v13 - v10) < 1)
          return;
      }
      v20 = v10 + 56 * a5;
      v21 = v19 - 56 * a5;
      v22 = v19;
      if (v21 < v13)
      {
        v22 = v19;
        do
        {
          v23 = *(_OWORD *)(v21 + 16);
          *(_OWORD *)v22 = *(_OWORD *)v21;
          *(_OWORD *)(v22 + 16) = v23;
          v24 = *(_OWORD *)(v21 + 32);
          *(_QWORD *)(v22 + 48) = *(_QWORD *)(v21 + 48);
          *(_OWORD *)(v22 + 32) = v24;
          *(_QWORD *)(v21 + 40) = 0;
          *(_QWORD *)(v21 + 48) = 0;
          *(_QWORD *)(v21 + 32) = 0;
          v22 += 56;
          v21 += 56;
        }
        while (v21 < v13);
      }
      a1[1] = v22;
      if (v19 != v20)
      {
        v25 = 0;
        v26 = 0x6DB6DB6DB6DB6DB7 * ((v19 - v20) >> 3);
        v27 = v8 + 56 * v26 + 56 * v9;
        v28 = -56 * v26;
        do
        {
          v29 = v27 + v25;
          v30 = v19 + v25;
          v31 = *(_OWORD *)(v27 + v25 - 56);
          *(_OWORD *)(v30 - 40) = *(_OWORD *)(v27 + v25 - 40);
          *(_OWORD *)(v30 - 56) = v31;
          v32 = v19 + v25 - 24;
          if (*(char *)(v19 + v25 - 1) < 0)
            operator delete(*(void **)v32);
          v25 -= 56;
          v33 = *(_OWORD *)(v29 - 24);
          *(_QWORD *)(v32 + 16) = *(_QWORD *)(v29 - 8);
          *(_OWORD *)v32 = v33;
          *(_BYTE *)(v29 - 1) = 0;
          *(_BYTE *)(v29 - 24) = 0;
        }
        while (v28 != v25);
      }
      for (; (__int128 *)v6 != v18; v10 += 56)
      {
        v34 = *(_OWORD *)(v6 + 16);
        *(_OWORD *)v10 = *(_OWORD *)v6;
        *(_OWORD *)(v10 + 16) = v34;
        std::string::operator=((std::string *)(v10 + 32), (const std::string *)(v6 + 32));
        v6 += 56;
      }
    }
    else
    {
      v14 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v13 - v8) >> 3);
      if (v14 > 0x492492492492492)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v15 = 0x6DB6DB6DB6DB6DB7 * ((v11 - v8) >> 3);
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x249249249249249)
        v16 = 0x492492492492492;
      else
        v16 = v14;
      v50 = v12;
      if (v16)
        v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<MarkerRecord>>(v16);
      else
        v17 = 0;
      v47 = v16;
      *(_QWORD *)&v48 = v16 + 56 * v9;
      *((_QWORD *)&v48 + 1) = v48;
      v49 = v16 + 56 * v17;
      v35 = 56 * a5;
      v36 = v48 + 56 * a5;
      v37 = (std::string *)(v48 + 32);
      v38 = (__int128 *)(v6 + 32);
      do
      {
        v39 = *(v38 - 1);
        *(_OWORD *)&v37[-2].__r_.__value_.__r.__words[2] = *(v38 - 2);
        *(_OWORD *)&v37[-1].__r_.__value_.__r.__words[1] = v39;
        if (*((char *)v38 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v37, *(const std::string::value_type **)v38, *((_QWORD *)v38 + 1));
        }
        else
        {
          v40 = *v38;
          v37->__r_.__value_.__r.__words[2] = *((_QWORD *)v38 + 2);
          *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v40;
        }
        v37 = (std::string *)((char *)v37 + 56);
        v38 = (__int128 *)((char *)v38 + 56);
        v35 -= 56;
      }
      while (v35);
      *((_QWORD *)&v48 + 1) = v36;
      *(_QWORD *)&v48 = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<TTSSynthesizer::Marker>,std::reverse_iterator<TTSSynthesizer::Marker*>,std::reverse_iterator<TTSSynthesizer::Marker*>,std::reverse_iterator<TTSSynthesizer::Marker*>>(v12, v10, v10, *a1, *a1, v48, v48);
      v41 = a1[1];
      v53 = v36;
      v54 = v36;
      v51[0] = v12;
      v51[1] = &v53;
      v51[2] = &v54;
      if (v10 != v41)
      {
        do
        {
          v42 = *(_OWORD *)(v10 + 16);
          *(_OWORD *)v36 = *(_OWORD *)v10;
          *(_OWORD *)(v36 + 16) = v42;
          v43 = *(_OWORD *)(v10 + 32);
          *(_QWORD *)(v36 + 48) = *(_QWORD *)(v10 + 48);
          *(_OWORD *)(v36 + 32) = v43;
          *(_QWORD *)(v10 + 40) = 0;
          *(_QWORD *)(v10 + 48) = 0;
          *(_QWORD *)(v10 + 32) = 0;
          v36 += 56;
          v10 += 56;
        }
        while (v10 != v41);
        v54 = v36;
      }
      v52 = 1;
      std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<TTSSynthesizer::Marker>,TTSSynthesizer::Marker*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v51);
      v44 = *(_OWORD *)a1;
      v45 = v49;
      *a1 = v48;
      a1[1] = v36;
      v48 = v44;
      v46 = a1[2];
      a1[2] = v45;
      v49 = v46;
      v47 = v44;
      std::__split_buffer<TTSSynthesizer::Marker>::~__split_buffer((uint64_t)&v47);
    }
  }
}

void sub_1DEA9C770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<TTSSynthesizer::Marker>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 56;
      *(_QWORD *)(a1 + 16) = v2 - 56;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        v4 = *(_QWORD *)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<TTSSynthesizer::Marker>,std::reverse_iterator<TTSSynthesizer::Marker*>,std::reverse_iterator<TTSSynthesizer::Marker*>,std::reverse_iterator<TTSSynthesizer::Marker*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  __int128 v8;
  __int128 v9;

  for (result = a7; a3 != a5; a3 -= 56)
  {
    v8 = *(_OWORD *)(a3 - 56);
    *(_OWORD *)(result - 40) = *(_OWORD *)(a3 - 40);
    *(_OWORD *)(result - 56) = v8;
    v9 = *(_OWORD *)(a3 - 24);
    *(_QWORD *)(result - 8) = *(_QWORD *)(a3 - 8);
    *(_OWORD *)(result - 24) = v9;
    result -= 56;
    *(_QWORD *)(a3 - 16) = 0;
    *(_QWORD *)(a3 - 8) = 0;
    *(_QWORD *)(a3 - 24) = 0;
  }
  return result;
}

uint64_t TTSSynthesizer::TTSSynthesizerInternal::initialize(uint64_t a1, std::string::size_type a2, __int128 *a3, const std::string *a4, uint64_t a5)
{
  NSObject *v10;
  const char *v11;
  std::string::size_type v12;
  std::string::size_type v13;
  std::string *v14;
  std::__shared_weak_count *size;
  unint64_t *v16;
  unint64_t v17;
  __int128 **v18;
  _OWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::string *v28;
  uint64_t v29;
  std::string *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  int v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  BOOL v46;
  uint64_t *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _BYTE *v51;
  unint64_t *v52;
  unint64_t v53;
  std::string::size_type v54;
  void **v55;
  std::__shared_weak_count *v56;
  uint64_t *v57;
  unint64_t *v58;
  unint64_t v59;
  int v60;
  int v61;
  std::string::size_type v62;
  _BOOL4 v65;
  _BOOL4 v66;
  NSObject *v67;
  const char *v68;
  __int128 **v69;
  std::__shared_weak_count *v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  unsigned __int8 *v73;
  char has_sane_pipeline;
  uint64_t *v75;
  BOOL v76;
  std::string::size_type v77;
  BOOL v78;
  const char *v79;
  void **v80;
  __n128 v81;
  unint64_t *v82;
  unint64_t v83;
  void **v84;
  NSObject *v85;
  const char *v86;
  int v87;
  int v88;
  uint64_t *v89;
  unsigned __int8 *v90;
  char v91;
  NSObject *v92;
  const char *v93;
  __int128 **v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  NSObject *v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  __int128 **v121;
  unint64_t v122;
  std::recursive_mutex *v123;
  uint64_t *v124;
  uint64_t v125;
  __int128 v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  _QWORD *v131;
  unint64_t v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  BOOL v140;
  unsigned __int8 *v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  BOOL v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  BOOL v149;
  uint64_t v150;
  BOOL v151;
  BOOL v152;
  BOOL v154;
  BOOL v155;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  __int128 **v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  unsigned __int8 *v173;
  char v174;
  uint64_t *v175;
  BOOL v176;
  int v177;
  BOOL v178;
  unsigned __int8 *v179;
  uint64_t *v180;
  _BOOL4 v183;
  std::__shared_weak_count *v184;
  char *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  void *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v198;
  char *v199;
  void *v200;
  char *v201;
  char *v202;
  NSObject *v203;
  const char *v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  void *v208;
  char *v209;
  char *v210;
  char *v211;
  void *exception;
  char *__s;
  __int128 ***v214;
  uint64_t v215[2];
  __int128 v216;
  __int128 v217;
  uint64_t v218;
  std::__shared_weak_count *v219;
  char v220[8];
  uint64_t *v221;
  uint64_t v222;
  uint64_t *v223[5];
  __int128 v224;
  __int128 v225;
  std::string *v226;
  std::__shared_weak_count *v227;
  __int128 **v228;
  std::__shared_weak_count *v229;
  __int128 **v230;
  std::__shared_weak_count *v231;
  std::string v232;
  size_t v233;
  uint64_t v234;
  std::__shared_weak_count *v235;
  char v236[8];
  std::string::size_type *v237;
  char v238[8];
  uint64_t *v239;
  uint64_t *v240;
  std::__shared_weak_count *v241;
  uint64_t v242;
  std::__shared_weak_count *v243;
  _BYTE __str[32];
  unint64_t v245;
  std::string buf;
  std::string *p_buf;
  unint64_t v248;
  uint64_t v249;

  v249 = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v10 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a2 + 23) >= 0)
      v12 = a2;
    else
      v12 = *(_QWORD *)a2;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v12;
    _os_log_impl(&dword_1DE3F6000, v10, OS_LOG_TYPE_DEFAULT, "Initializing voice from path '%s'", (uint8_t *)&buf, 0xCu);
  }
  if (*(char *)(a2 + 23) >= 0)
    v13 = a2;
  else
    v13 = *(_QWORD *)a2;
  Diagnostics::log(5, "Initializing voice from path '%s'", v11, v13);
  std::string::operator=((std::string *)(a1 + 376), (const std::string *)a2);
  v14 = (std::string *)operator new(0x48uLL);
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA9321D0;
  Environment::Environment(v14 + 1, (__int128 *)a2, a3);
  v226 = v14 + 1;
  v227 = (std::__shared_weak_count *)v14;
  std::allocate_shared[abi:ne180100]<SharedObjectPool,std::allocator<SharedObjectPool>,std::shared_ptr<Environment> &,void>(&buf, (uint64_t)&v14[1], (std::__shared_weak_count *)v14);
  v214 = (__int128 ***)(a1 + 240);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a1 + 240, (__int128 *)&buf);
  size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
  if (buf.__r_.__value_.__l.__size_)
  {
    v16 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v18 = *v214;
  v19 = operator new(0x70uLL);
  *(_OWORD *)((char *)v19 + 8) = 0u;
  v19[2] = 0u;
  *(_QWORD *)v19 = &off_1EA935228;
  *((_QWORD *)v19 + 3) = v19 + 2;
  *((_QWORD *)v19 + 6) = 850045863;
  *(_OWORD *)((char *)v19 + 56) = 0u;
  *(_OWORD *)((char *)v19 + 72) = 0u;
  *(_OWORD *)((char *)v19 + 88) = 0u;
  *((_QWORD *)v19 + 13) = 0;
  *(_QWORD *)&v224 = (char *)v19 + 24;
  *((_QWORD *)&v224 + 1) = v19;
  SharedObjectPool::inject<TTSSynthesizerEventBusInternal>(&v225, (uint64_t)v18, &v224);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v225 + 1);
  if (*((_QWORD *)&v225 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v225 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (std::__shared_weak_count *)*((_QWORD *)&v224 + 1);
  if (*((_QWORD *)&v224 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v224 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  std::string::operator=((std::string *)(a1 + 520), a4);
  v26 = std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)&buf, a5);
  v27 = a1 + 584;
  if ((std::string *)(a1 + 584) != &buf)
  {
    v28 = p_buf;
    v29 = *(_QWORD *)(a1 + 608);
    if (p_buf == &buf)
    {
      if (v29 == v27)
      {
        (*(void (**)(uint64_t, _BYTE *))(buf.__r_.__value_.__r.__words[0] + 24))(v26, __str);
        (*(void (**)(std::string *))(p_buf->__r_.__value_.__r.__words[0] + 32))(p_buf);
        p_buf = 0;
        (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(a1 + 608) + 24))(*(_QWORD *)(a1 + 608), &buf);
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 608) + 32))(*(_QWORD *)(a1 + 608));
        *(_QWORD *)(a1 + 608) = 0;
        p_buf = &buf;
        (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)__str + 24))(__str, a1 + 584);
        (*(void (**)(_BYTE *))(*(_QWORD *)__str + 32))(__str);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(buf.__r_.__value_.__r.__words[0] + 24))(v26, a1 + 584);
        (*(void (**)(std::string *))(p_buf->__r_.__value_.__r.__words[0] + 32))(p_buf);
        p_buf = *(std::string **)(a1 + 608);
      }
      *(_QWORD *)(a1 + 608) = v27;
    }
    else if (v29 == v27)
    {
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v27 + 24))(a1 + 584, &buf);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 608) + 32))(*(_QWORD *)(a1 + 608));
      *(_QWORD *)(a1 + 608) = p_buf;
      p_buf = &buf;
    }
    else
    {
      p_buf = *(std::string **)(a1 + 608);
      *(_QWORD *)(a1 + 608) = v28;
    }
  }
  v30 = p_buf;
  if (p_buf == &buf)
  {
    v31 = 4;
    v30 = &buf;
    goto LABEL_39;
  }
  if (p_buf)
  {
    v31 = 5;
LABEL_39:
    (*(void (**)(void))(v30->__r_.__value_.__r.__words[0] + 8 * v31))();
  }
  PersistentModuleFactory::create((PersistentModuleFactory *)&buf);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a1 + 256, (__int128 *)&buf);
  v32 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
  if (buf.__r_.__value_.__l.__size_)
  {
    v33 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = *(_QWORD *)(a1 + 240);
  v37 = *(_QWORD *)(a1 + 256);
  v36 = *(_QWORD *)(a1 + 264);
  if (v36)
  {
    v38 = (unint64_t *)(v36 + 16);
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  v40 = *(std::__shared_weak_count **)(v35 + 24);
  *(_QWORD *)(v35 + 16) = v37;
  *(_QWORD *)(v35 + 24) = v36;
  if (v40)
    std::__shared_weak_count::__release_weak(v40);
  SharedObjectPool::get<VoiceConfig>(&v234, *v214);
  v41 = v234;
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v234 + 32))(&buf, v234, 1885564279, 2);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    v54 = buf.__r_.__value_.__l.__size_;
    operator delete(buf.__r_.__value_.__l.__data_);
    if (v54)
      goto LABEL_52;
  }
  else if (*((_BYTE *)&buf.__r_.__value_.__s + 23))
  {
LABEL_52:
    v42 = 1;
    goto LABEL_53;
  }
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v41 + 24))(&v232, v41);
  std::string::basic_string[abi:ne180100](&buf, (void *)v232.__r_.__value_.__r.__words[2], v233);
  v55 = (void **)(a1 + 400);
  __s = (char *)(a1 + 400);
  if (*(char *)(a1 + 423) < 0)
  {
    operator delete(*v55);
    v55 = (void **)(a1 + 400);
  }
  *(std::string *)v55 = buf;
  if (*(char *)(a1 + 423) < 0)
  {
    if (*(_QWORD *)(a1 + 408))
      goto LABEL_109;
  }
  else if (*(_BYTE *)(a1 + 423))
  {
    goto LABEL_109;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v67 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1DE3F6000, v67, OS_LOG_TYPE_ERROR, "Unable to open broker header", (uint8_t *)&buf, 2u);
  }
  Diagnostics::log(3, "Unable to open broker header", v68);
LABEL_109:
  v69 = *(__int128 ***)(a1 + 240);
  v70 = *(std::__shared_weak_count **)(a1 + 248);
  v230 = v69;
  v231 = v70;
  if (v70)
  {
    p_shared_owners = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldxr(p_shared_owners);
    while (__stxr(v72 + 1, p_shared_owners));
  }
  SharedObjectPool::get<VoiceConfig>(&v242, v69);
  (*(void (**)(uint64_t **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v242 + 72))(&v240, v242, 1734567527, 2);
  v73 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v238, (uint64_t)&v240);
  has_sane_pipeline = GryphonPipelineFactory::has_sane_pipeline(v73);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v239, v238[0]);
  if ((has_sane_pipeline & 1) != 0)
  {
    v75 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v240, "pipeline");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v236, (uint64_t)v75);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v236;
    *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0uLL;
    p_buf = 0;
    v248 = 0x8000000000000000;
    if (v236[0])
    {
      if (v236[0] == 2)
      {
        buf.__r_.__value_.__r.__words[2] = *v237;
      }
      else if (v236[0] == 1)
      {
        buf.__r_.__value_.__l.__size_ = *v237;
      }
      else
      {
        v248 = 0;
      }
    }
    else
    {
      v248 = 1;
    }
    while (1)
    {
      memset(&__str[8], 0, 24);
      *(_QWORD *)__str = v236;
      v245 = 0x8000000000000000;
      if (v236[0] == 2)
      {
        *(_QWORD *)&__str[16] = v237[1];
      }
      else if (v236[0] == 1)
      {
        *(_QWORD *)&__str[8] = v237 + 1;
      }
      else
      {
        v245 = 1;
      }
      v140 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&buf, (unsigned __int8 **)__str);
      if (v140)
      {
LABEL_306:
        v76 = !v140;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v237, v236[0]);
        goto LABEL_307;
      }
      v141 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&buf);
      v142 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v141, "id");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v142, (std::string *)__str);
      if ((__str[23] & 0x80000000) != 0)
      {
        if (*(uint64_t *)&__str[8] > 23)
        {
          if (*(_QWORD *)&__str[8] == 24)
          {
            v147 = *(_QWORD *)(*(_QWORD *)__str + 8);
            v148 = *(_QWORD *)(*(_QWORD *)__str + 16);
            v149 = **(_QWORD **)__str == 0x735F636574656E61;
            v150 = 0x676E696D61657274;
            goto LABEL_296;
          }
          if (*(_QWORD *)&__str[8] == 29)
          {
            v154 = **(_QWORD **)__str == 0x727473646E756F73
                && *(_QWORD *)(*(_QWORD *)__str + 8) == 0x657274735F6D6165;
            v155 = v154 && *(_QWORD *)(*(_QWORD *)__str + 16) == 0x65645F676E696D61;
            if (v155 && *(_QWORD *)(*(_QWORD *)__str + 21) == 0x7265646F6365645FLL)
            {
LABEL_305:
              operator delete(*(void **)__str);
              goto LABEL_306;
            }
          }
        }
        else if (*(_QWORD *)&__str[8] == 14)
        {
          if (**(_QWORD **)__str == 0x645F636574656E61 && *(_QWORD *)(*(_QWORD *)__str + 6) == 0x7265646F6365645FLL)
            goto LABEL_305;
        }
        else if (*(_QWORD *)&__str[8] == 19)
        {
          v147 = *(_QWORD *)(*(_QWORD *)__str + 8);
          v148 = *(_QWORD *)(*(_QWORD *)__str + 11);
          v149 = **(_QWORD **)__str == 0x727473646E756F73;
          v150 = 0x6F6365645F6D6165;
LABEL_296:
          if (v149 && v147 == v150 && v148 == 0x7265646F6365645FLL)
            goto LABEL_305;
        }
        operator delete(*(void **)__str);
        goto LABEL_304;
      }
      if (__str[23] > 0x17u)
      {
        if (__str[23] == 24)
        {
          v144 = *(_QWORD *)&__str[16];
          v143 = *(_QWORD *)&__str[8];
          v145 = *(_QWORD *)__str == 0x735F636574656E61;
          v146 = 0x676E696D61657274;
LABEL_280:
          if (v145 && v143 == v146 && v144 == 0x7265646F6365645FLL)
            goto LABEL_306;
          goto LABEL_304;
        }
        if (__str[23] == 29)
        {
          v151 = *(_QWORD *)__str == 0x727473646E756F73 && *(_QWORD *)&__str[8] == 0x657274735F6D6165;
          v152 = v151 && *(_QWORD *)&__str[16] == 0x65645F676E696D61;
          if (v152 && *(_QWORD *)&__str[21] == 0x7265646F6365645FLL)
            goto LABEL_306;
        }
      }
      else
      {
        if (__str[23] != 14)
        {
          if (__str[23] != 19)
            goto LABEL_304;
          v143 = *(_QWORD *)&__str[8];
          v144 = *(_QWORD *)&__str[11];
          v145 = *(_QWORD *)__str == 0x727473646E756F73;
          v146 = 0x6F6365645F6D6165;
          goto LABEL_280;
        }
        if (*(_QWORD *)__str == 0x645F636574656E61 && *(_QWORD *)&__str[6] == 0x7265646F6365645FLL)
          goto LABEL_306;
      }
LABEL_304:
      nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)&buf);
    }
  }
  v76 = 0;
LABEL_307:
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v241, v240);
  v163 = v243;
  if (v243)
  {
    v164 = (unint64_t *)&v243->__shared_owners_;
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  v166 = v231;
  if (v231)
  {
    v167 = (unint64_t *)&v231->__shared_owners_;
    do
      v168 = __ldaxr(v167);
    while (__stlxr(v168 - 1, v167));
    if (!v168)
    {
      ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
      std::__shared_weak_count::__release_weak(v166);
      if (v76)
        goto LABEL_317;
LABEL_319:
      v169 = *(__int128 ***)(a1 + 240);
      v170 = *(std::__shared_weak_count **)(a1 + 248);
      v228 = v169;
      v229 = v170;
      if (v170)
      {
        v171 = (unint64_t *)&v170->__shared_owners_;
        do
          v172 = __ldxr(v171);
        while (__stxr(v172 + 1, v171));
      }
      SharedObjectPool::get<VoiceConfig>(&v242, v169);
      (*(void (**)(uint64_t **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v242 + 72))(&v240, v242, 1734567527, 2);
      v173 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v238, (uint64_t)&v240);
      v174 = GryphonPipelineFactory::has_sane_pipeline(v173);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v239, v238[0]);
      if ((v174 & 1) != 0)
      {
        v175 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v240, "pipeline");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v236, (uint64_t)v175);
        if (v236[0])
        {
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v236;
          *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0uLL;
          p_buf = 0;
          v248 = 0x8000000000000000;
          if (v236[0] == 2)
          {
            buf.__r_.__value_.__r.__words[2] = *v237;
          }
          else if (v236[0] == 1)
          {
            buf.__r_.__value_.__l.__size_ = *v237;
          }
          else
          {
            v248 = 0;
          }
          while (1)
          {
            memset(&__str[8], 0, 24);
            *(_QWORD *)__str = v236;
            v245 = 0x8000000000000000;
            if (v236[0] == 2)
            {
              *(_QWORD *)&__str[16] = v237[1];
            }
            else if (v236[0] == 1)
            {
              *(_QWORD *)&__str[8] = v237 + 1;
            }
            else
            {
              v245 = 1;
            }
            v178 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&buf, (unsigned __int8 **)__str);
            if (v178)
              break;
            v179 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&buf);
            v180 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v179, "id");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v180, (std::string *)__str);
            if ((__str[23] & 0x80000000) != 0)
            {
              if (*(_QWORD *)&__str[8] == 14)
              {
                v183 = **(_QWORD **)__str != 0x615F6C617275656ELL
                    || *(_QWORD *)(*(_QWORD *)__str + 6) != 0x726574706164615FLL;
                operator delete(*(void **)__str);
                if (!v183)
                  break;
              }
              else
              {
                operator delete(*(void **)__str);
              }
            }
            else if (__str[23] == 14
                   && *(_QWORD *)__str == 0x615F6C617275656ELL
                   && *(_QWORD *)&__str[6] == 0x726574706164615FLL)
            {
              break;
            }
            nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)&buf);
          }
          v176 = !v178;
          v177 = v236[0];
        }
        else
        {
          v177 = 0;
          v176 = 0;
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v237, v177);
      }
      else
      {
        v176 = 0;
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v241, v240);
      v184 = v243;
      v185 = (char *)(a1 + 400);
      if (v243)
      {
        v186 = (unint64_t *)&v243->__shared_owners_;
        do
          v187 = __ldaxr(v186);
        while (__stlxr(v187 - 1, v186));
        if (!v187)
        {
          ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
          std::__shared_weak_count::__release_weak(v184);
          v185 = (char *)(a1 + 400);
        }
      }
      v188 = v229;
      if (!v229)
        goto LABEL_367;
      v189 = (unint64_t *)&v229->__shared_owners_;
      do
        v190 = __ldaxr(v189);
      while (__stlxr(v190 - 1, v189));
      if (!v190)
      {
        ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
        std::__shared_weak_count::__release_weak(v188);
        v185 = (char *)(a1 + 400);
        if (v176)
          goto LABEL_368;
      }
      else
      {
LABEL_367:
        if (v176)
        {
LABEL_368:
          v42 = 3;
          goto LABEL_401;
        }
      }
      v191 = *(unsigned __int8 *)(a1 + 423);
      if (*(char *)(a1 + 423) < 0)
      {
        v185 = *(char **)(a1 + 400);
        v192 = *(_QWORD *)(a1 + 408);
      }
      else
      {
        v192 = *(unsigned __int8 *)(a1 + 423);
      }
      if (v192 >= 44)
      {
        v193 = &v185[v192];
        v194 = v185;
        do
        {
          v195 = (char *)memchr(v194, 60, v192 - 43);
          if (!v195)
            break;
          v196 = v195;
          if (!memcmp(v195, "<COMPONENT>monogryph/featextract</COMPONENT>", 0x2CuLL))
          {
            if (v196 != v193 && v196 - v185 != -1)
            {
              v42 = 1;
              goto LABEL_401;
            }
            break;
          }
          v194 = v196 + 1;
          v192 = v193 - (v196 + 1);
        }
        while (v192 >= 44);
      }
      if ((v191 & 0x80) != 0)
      {
        v197 = *(char **)(a1 + 400);
        v198 = *(_QWORD *)(a1 + 408);
      }
      else
      {
        v197 = (char *)(a1 + 400);
        v198 = v191;
      }
      if (v198 >= 34)
      {
        v199 = &v197[v198];
        v200 = v197;
        do
        {
          v201 = (char *)memchr(v200, 60, v198 - 33);
          if (!v201)
            break;
          v202 = v201;
          if (!memcmp(v201, "<COMPONENT>fe/be_adapt</COMPONENT>", 0x22uLL))
          {
            if (v202 != v199 && v202 - v197 != -1)
            {
LABEL_413:
              v42 = 2;
              goto LABEL_401;
            }
            break;
          }
          v200 = v202 + 1;
          v198 = v199 - (v202 + 1);
        }
        while (v198 >= 34);
      }
      if ((v191 & 0x80) != 0)
      {
        v191 = *(_QWORD *)(a1 + 408);
        __s = *(char **)(a1 + 400);
      }
      if (v191 >= 36)
      {
        v208 = __s;
        v209 = &__s[v191];
        do
        {
          v210 = (char *)memchr(v208, 60, v191 - 35);
          if (!v210)
            break;
          v211 = v210;
          if (!memcmp(v210, "<COMPONENT>audioinserter</COMPONENT>", 0x24uLL))
          {
            if (v211 == v209 || v211 - __s == -1)
              break;
            goto LABEL_413;
          }
          v208 = v211 + 1;
          v191 = v209 - (v211 + 1);
        }
        while (v191 >= 36);
      }
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v203 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1DE3F6000, v203, OS_LOG_TYPE_ERROR, "Unknown voice type! Behavior is undefined.", (uint8_t *)&buf, 2u);
      }
      Diagnostics::log(3, "Unknown voice type! Behavior is undefined.", v204);
      v42 = 0;
      goto LABEL_401;
    }
  }
  if (!v76)
    goto LABEL_319;
LABEL_317:
  v42 = 4;
LABEL_401:
  v205 = (std::__shared_weak_count *)v232.__r_.__value_.__l.__size_;
  if (v232.__r_.__value_.__l.__size_)
  {
    v206 = (unint64_t *)(v232.__r_.__value_.__l.__size_ + 8);
    do
      v207 = __ldaxr(v206);
    while (__stlxr(v207 - 1, v206));
    if (!v207)
    {
      ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
      std::__shared_weak_count::__release_weak(v205);
    }
  }
LABEL_53:
  v43 = v235;
  if (v235)
  {
    v44 = (unint64_t *)&v235->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  *(_DWORD *)(a1 + 368) = v42;
  *(_BYTE *)(a1 + 512) = v42 == 2;
  v46 = v42 != 2 && Frontend::should_use((char *)a2);
  *(_BYTE *)(a1 + 513) = v46;
  SharedObjectPool::get<VoiceConfig>(&v240, *(__int128 ***)(a1 + 240));
  if (*(_BYTE *)(a1 + 513))
  {
    v47 = v240;
    v48 = v241;
    v223[3] = v240;
    v223[4] = (uint64_t *)v241;
    if (v241)
    {
      v49 = (unint64_t *)&v241->__shared_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    v51 = (_BYTE *)(a1 + 514);
    *(_BYTE *)(a1 + 514) = Frontend::check_hydra_fe((uint64_t)v47);
    if (v48)
    {
      v52 = (unint64_t *)&v48->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
  }
  else
  {
    v51 = (_BYTE *)(a1 + 514);
    *(_BYTE *)(a1 + 514) = 0;
  }
  v57 = v240;
  v56 = v241;
  v223[1] = v240;
  v223[2] = (uint64_t *)v241;
  if (v241)
  {
    v58 = (unint64_t *)&v241->__shared_owners_;
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }
  v60 = *(unsigned __int8 *)(a1 + 513);
  v61 = *(unsigned __int8 *)(a1 + 514);
  memset(&v232, 0, sizeof(v232));
  (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t))(*v57 + 72))(&v242, v57, 1717790311, 2);
  if ((_BYTE)v242)
  {
    std::string::basic_string[abi:ne180100]<0>(__str, "phoneset");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)&v242, (const void **)__str, &buf);
    v232 = buf;
    *((_BYTE *)&buf.__r_.__value_.__s + 23) = 0;
    buf.__r_.__value_.__s.__data_[0] = 0;
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
  }
  VoiceConfig::get_param<std::string>(&buf, (uint64_t)v57, 1818324583, 2);
  v62 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v62 = buf.__r_.__value_.__l.__size_;
  if (v62 >= 5)
  {
    std::string::basic_string((std::string *)__str, &buf, 0, 5uLL, (std::allocator<char> *)v238);
    if ((__str[23] & 0x80000000) == 0)
    {
      if (__str[23] != 5)
        goto LABEL_119;
      if (*(_DWORD *)__str != 1227714149 || __str[4] != 78)
        goto LABEL_119;
LABEL_102:
      v66 = (v60 | v61) != 0;
LABEL_128:
      if (v66)
        v79 = "xsampa-internal";
      else
        v79 = "nashville";
      MEMORY[0x1DF0ECA80](&v232, v79);
      goto LABEL_132;
    }
    if (*(_QWORD *)&__str[8] != 5)
    {
      operator delete(*(void **)__str);
      goto LABEL_119;
    }
    v65 = **(_DWORD **)__str != 1227714149 || *(_BYTE *)(*(_QWORD *)__str + 4) != 78;
    operator delete(*(void **)__str);
    if (!v65)
      goto LABEL_102;
  }
LABEL_119:
  v77 = HIBYTE(v232.__r_.__value_.__r.__words[2]);
  if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v77 = v232.__r_.__value_.__l.__size_;
  if (!v77)
  {
    if (v60)
      v78 = v61 == 0;
    else
      v78 = 0;
    v66 = v78;
    goto LABEL_128;
  }
LABEL_132:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v243, v242);
  v80 = (void **)(a1 + 320);
  if (*(char *)(a1 + 343) < 0)
    operator delete(*v80);
  v81 = *(__n128 *)&v232.__r_.__value_.__l.__data_;
  *(_OWORD *)v80 = *(_OWORD *)&v232.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 336) = *((_QWORD *)&v232.__r_.__value_.__l + 2);
  *((_BYTE *)&v232.__r_.__value_.__s + 23) = 0;
  v232.__r_.__value_.__s.__data_[0] = 0;
  if (v56)
  {
    v82 = (unint64_t *)&v56->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v81.n128_u32[0] = 1185694720;
  switch(*(_DWORD *)(a1 + 368))
  {
    case 0:
      v81.n128_u32[0] = 0;
      goto LABEL_148;
    case 1:
    case 3:
    case 4:
      VoiceConfig::get_param<std::string>((std::string *)__str, (uint64_t)v240, 1818324583, 0);
      std::string::basic_string(&buf, (const std::string *)__str, 0, 5uLL, (std::allocator<char> *)&v232);
      v84 = (void **)(a1 + 344);
      if (*(char *)(a1 + 367) < 0)
        operator delete(*v84);
      v81 = *(__n128 *)&buf.__r_.__value_.__l.__data_;
      *(_OWORD *)v84 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *(_QWORD *)(a1 + 360) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
      *((_BYTE *)&buf.__r_.__value_.__s + 23) = 0;
      buf.__r_.__value_.__s.__data_[0] = 0;
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      v81.n128_u32[0] = 1195081728;
      goto LABEL_148;
    case 2:
LABEL_148:
      *(_DWORD *)(a1 + 312) = v81.n128_u32[0];
      break;
    default:
      break;
  }
  if (!*(_BYTE *)(a1 + 512))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t, __n128))(*v240 + 72))(&v222, v240, 1734567527, 2, v81);
    v88 = *(unsigned __int8 *)(a1 + 568);
    *(_BYTE *)(a1 + 568) = v222;
    LOBYTE(v222) = v88;
    v89 = *(uint64_t **)(a1 + 576);
    *(uint64_t **)(a1 + 576) = v223[0];
    v223[0] = v89;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v223, v88);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v220, a1 + 568);
    v90 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)__str, (uint64_t)v220);
    v91 = GryphonPipelineFactory::has_sane_pipeline(v90);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&__str[8], __str[0]);
    if ((v91 & 1) == 0)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      StringFormatter::StringFormatter((StringFormatter *)&buf, "gryphon config has a wrong format");
      MEMORY[0x1DF0EC99C](exception, &buf);
      __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v221, v220[0]);
    if (*(_BYTE *)(a1 + 568))
    {
      std::string::basic_string[abi:ne180100]<0>(&buf, "can_use_pipeline_rebuild");
      __str[0] = 0;
      *(_BYTE *)(a1 + 680) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>((char *)(a1 + 568), (const void **)&buf.__r_.__value_.__l.__data_, __str);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
  if (*v51)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v85 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1DE3F6000, v85, OS_LOG_TYPE_DEFAULT, "Using Scalable Frontend", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(5, "Using Scalable Frontend", v86);
    v87 = 3;
LABEL_166:
    *(_DWORD *)(a1 + 372) = v87;
    goto LABEL_167;
  }
  if (*(_BYTE *)(a1 + 513))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v92 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1DE3F6000, v92, OS_LOG_TYPE_DEFAULT, "Using Hybrid Frontend", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(5, "Using Hybrid Frontend", v93);
    v87 = 2;
    goto LABEL_166;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v115 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1DE3F6000, v115, OS_LOG_TYPE_DEFAULT, "Using Legacy Frontend", (uint8_t *)&buf, 2u);
  }
  Diagnostics::log(5, "Using Legacy Frontend", v116);
  *(_DWORD *)(a1 + 372) = 1;
  v117 = *(_QWORD *)(a1 + 608);
  if (!v117)
    std::__throw_bad_function_call[abi:ne180100]();
  v118 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v117 + 48))(v117);
  buf.__r_.__value_.__r.__words[0] = v118;
  v119 = (std::__shared_weak_count *)operator new();
  v119->__shared_owners_ = 0;
  v120 = (unint64_t *)&v119->__shared_owners_;
  v119->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936AE0;
  v119->__shared_weak_owners_ = 0;
  v119[1].__vftable = (std::__shared_weak_count_vtbl *)v118;
  buf.__r_.__value_.__l.__size_ = (std::string::size_type)v119;
  v121 = *v214;
  v218 = v118;
  v219 = v119;
  do
    v122 = __ldxr(v120);
  while (__stxr(v122 + 1, v120));
  v123 = (std::recursive_mutex *)(v121 + 7);
  std::recursive_mutex::lock((std::recursive_mutex *)(v121 + 7));
  *(_QWORD *)__str = &v232;
  v125 = v124[5];
  if (v125)
  {
    *(_QWORD *)&v126 = v118;
    *((_QWORD *)&v126 + 1) = v119;
    do
      v127 = __ldxr(v120);
    while (__stxr(v127 + 1, v120));
    v128 = *(std::__shared_weak_count **)(v125 + 16);
    *(_OWORD *)(v125 + 8) = v126;
    if (v128)
    {
      v129 = (unint64_t *)&v128->__shared_owners_;
      do
        v130 = __ldaxr(v129);
      while (__stlxr(v130 - 1, v129));
      if (!v130)
      {
        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
        std::__shared_weak_count::__release_weak(v128);
      }
    }
  }
  else
  {
    v131 = (_QWORD *)operator new();
    *v131 = &off_1EA923168;
    v131[1] = v118;
    v131[2] = v119;
    do
      v132 = __ldxr(v120);
    while (__stxr(v132 + 1, v120));
    v133 = v124[5];
    v124[5] = (uint64_t)v131;
    if (v133)
      (*(void (**)(uint64_t))(*(_QWORD *)v133 + 8))(v133);
  }
  v134 = v219;
  v218 = 0;
  v219 = 0;
  std::recursive_mutex::unlock(v123);
  if (v134)
  {
    v135 = (unint64_t *)&v134->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
  if (buf.__r_.__value_.__l.__size_)
  {
    v138 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
LABEL_167:
  v94 = *v214;
  std::allocate_shared[abi:ne180100]<TTSSynthesizer::VoiceDescription,std::allocator<TTSSynthesizer::VoiceDescription>,TTSSynthesizer::VoiceDescription&,void>(&v216, a1 + 312);
  SharedObjectPool::inject<TTSSynthesizer::VoiceDescription>(&v217, (uint64_t)v94, &v216);
  v95 = (std::__shared_weak_count *)*((_QWORD *)&v217 + 1);
  if (*((_QWORD *)&v217 + 1))
  {
    v96 = (unint64_t *)(*((_QWORD *)&v217 + 1) + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = (std::__shared_weak_count *)*((_QWORD *)&v216 + 1);
  if (*((_QWORD *)&v216 + 1))
  {
    v99 = (unint64_t *)(*((_QWORD *)&v216 + 1) + 8);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = *(std::__shared_weak_count **)(a1 + 248);
  v215[0] = *(_QWORD *)(a1 + 240);
  v215[1] = (uint64_t)v101;
  if (v101)
  {
    v102 = (unint64_t *)&v101->__shared_owners_;
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 1, v102));
  }
  v104 = TTSSynthesizer::TTSSynthesizerInternal::build_pipeline(a1, v215, 0);
  v105 = v104;
  if (v101)
  {
    v106 = (unint64_t *)&v101->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
      if (v105)
        goto LABEL_187;
      goto LABEL_185;
    }
  }
  if (!v104)
  {
LABEL_185:
    TTSSynthesizer::TTSSynthesizerInternal::set_prompts_disabled((TTSSynthesizer::TTSSynthesizerInternal *)a1, GryphonDebugging::disable_prompts_);
    kdebug_trace();
  }
LABEL_187:
  v108 = v241;
  if (v241)
  {
    v109 = (unint64_t *)&v241->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v227;
  if (v227)
  {
    v112 = (unint64_t *)&v227->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  return v105;
}

void sub_1DEA9E178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v33 - 144);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v33 - 216);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_1DEA9E180(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  JUMPOUT(0x1DEA9E44CLL);
}

void sub_1DEA9E198()
{
  __cxa_end_catch();
  JUMPOUT(0x1DEA9E440);
}

void sub_1DEA9E1A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v39 - 208), *(unsigned __int8 *)(v39 - 216));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v39 - 200);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  JUMPOUT(0x1DEA9E440);
}

void sub_1DEA9E1C4()
{
  JUMPOUT(0x1DEA9E3ECLL);
}

void sub_1DEA9E1CC()
{
  JUMPOUT(0x1DEA9E3F4);
}

void sub_1DEA9E1D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13, ...)
{
  void *v13;
  int v14;
  uint64_t v15;
  va_list va;

  va_start(va, a13);
  if (*(char *)(v15 - 121) < 0)
  {
    operator delete(*(void **)(v15 - 144));
    if ((v14 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v14)
  {
LABEL_6:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)va, a13);
    JUMPOUT(0x1DEA9E440);
  }
  __cxa_free_exception(v13);
  goto LABEL_6;
}

void sub_1DEA9E208()
{
  std::recursive_mutex *v0;

  std::recursive_mutex::unlock(v0);
  JUMPOUT(0x1DEA9E214);
}

void sub_1DEA9E228()
{
  uint64_t v0;

  if (*(char *)(v0 - 121) < 0)
    operator delete(*(void **)(v0 - 144));
  JUMPOUT(0x1DEA9E440);
}

void sub_1DEA9E244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v13 + 8), *(unsigned __int8 *)(v14 - 184));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)va, a13);
  JUMPOUT(0x1DEA9E3B4);
}

void sub_1DEA9E270()
{
  uint64_t v0;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v0 - 208), *(unsigned __int8 *)(v0 - 216));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v0 - 200);
  JUMPOUT(0x1DEA9E430);
}

void sub_1DEA9E28C()
{
  JUMPOUT(0x1DEA9E424);
}

void sub_1DEA9E294()
{
  JUMPOUT(0x1DEA9E42CLL);
}

void sub_1DEA9E29C()
{
  JUMPOUT(0x1DEA9E434);
}

void sub_1DEA9E2AC()
{
  uint64_t v0;

  if (*(char *)(v0 - 161) < 0)
    JUMPOUT(0x1DEA9E2BCLL);
  JUMPOUT(0x1DEA9E440);
}

void sub_1DEA9E2C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;

  if (*(char *)(v44 - 121) < 0)
    operator delete(*(void **)(v44 - 144));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v44 - 192), *(unsigned __int8 *)(v44 - 200));
  if (a44 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  JUMPOUT(0x1DEA9E440);
}

void sub_1DEA9E2DC(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1DEA9E44CLL);
}

void sub_1DEA9E2EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;

  if (*(char *)(v44 - 161) < 0)
    JUMPOUT(0x1DEA9E2FCLL);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v44 - 192, *(unsigned __int8 *)(v44 - 200));
  if (a44 < 0)
    operator delete(a39);
  JUMPOUT(0x1DEA9E364);
}

void sub_1DEA9E304()
{
  JUMPOUT(0x1DEA9E33CLL);
}

void sub_1DEA9E374()
{
  JUMPOUT(0x1DEA9E43CLL);
}

void sub_1DEA9E380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  JUMPOUT(0x1DEA9E444);
}

void sub_1DEA9E394()
{
  std::__shared_weak_count *v0;
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(v0);
  operator delete(v1);
  JUMPOUT(0x1DEA9E44CLL);
}

void sub_1DEA9E3BC()
{
  JUMPOUT(0x1DEA9E44CLL);
}

void sub_1DEA9E3CC()
{
  JUMPOUT(0x1DEA9E3D8);
}

void sub_1DEA9E3FC()
{
  JUMPOUT(0x1DEA9E444);
}

void sub_1DEA9E404()
{
  JUMPOUT(0x1DEA9E410);
}

void SharedObjectPool::inject<TTSSynthesizerEventBusInternal>(_OWORD *a1, uint64_t a2, __int128 *a3)
{
  std::recursive_mutex *v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void **v23;

  v6 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  v23 = &v22;
  v8 = v7[5];
  if (v8)
  {
    v9 = *a3;
    v10 = *((_QWORD *)a3 + 1);
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = *(std::__shared_weak_count **)(v8 + 16);
    *(_OWORD *)(v8 + 8) = v9;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  else
  {
    v16 = (_QWORD *)operator new();
    v18 = *(_QWORD *)a3;
    v17 = *((_QWORD *)a3 + 1);
    *v16 = &off_1EA923488;
    v16[1] = v18;
    v16[2] = v17;
    if (v17)
    {
      v19 = (unint64_t *)(v17 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v21 = v7[5];
    v7[5] = (uint64_t)v16;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  }
  *a1 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  std::recursive_mutex::unlock(v6);
}

void sub_1DEA9E5A0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<TTSSynthesizer::VoiceDescription,std::allocator<TTSSynthesizer::VoiceDescription>,TTSSynthesizer::VoiceDescription&,void>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  std::string *v7;

  v4 = (char *)operator new(0x58uLL);
  v5 = v4;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1EA935E68;
  *((_DWORD *)v4 + 6) = *(_DWORD *)a2;
  v6 = v4 + 24;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v4 + 32), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *((_OWORD *)v4 + 2) = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v4 + 6) = *(_QWORD *)(a2 + 24);
  }
  v7 = (std::string *)(v5 + 56);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 32);
    *((_QWORD *)v5 + 9) = *(_QWORD *)(a2 + 48);
  }
  *((_QWORD *)v5 + 10) = *(_QWORD *)(a2 + 56);
  *a1 = v6;
  a1[1] = v5;
}

void sub_1DEA9E674(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void SharedObjectPool::inject<TTSSynthesizer::VoiceDescription>(_OWORD *a1, uint64_t a2, __int128 *a3)
{
  std::recursive_mutex *v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void **v23;

  v6 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  v23 = &v22;
  v8 = v7[5];
  if (v8)
  {
    v9 = *a3;
    v10 = *((_QWORD *)a3 + 1);
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = *(std::__shared_weak_count **)(v8 + 16);
    *(_OWORD *)(v8 + 8) = v9;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  else
  {
    v16 = (_QWORD *)operator new();
    v18 = *(_QWORD *)a3;
    v17 = *((_QWORD *)a3 + 1);
    *v16 = &off_1EA923508;
    v16[1] = v18;
    v16[2] = v17;
    if (v17)
    {
      v19 = (unint64_t *)(v17 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v21 = v7[5];
    v7[5] = (uint64_t)v16;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  }
  *a1 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  std::recursive_mutex::unlock(v6);
}

void sub_1DEA9E7DC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t TTSSynthesizer::TTSSynthesizerInternal::build_pipeline(uint64_t a1, uint64_t *a2, int a3)
{
  std::chrono::steady_clock::time_point v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  unsigned int BOOL_for_key;
  NSObject *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  __int128 **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  uint64_t *v51;
  int v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t *v58;
  uint64_t jj;
  uint64_t kk;
  uint64_t mm;
  uint64_t *v62;
  uint64_t nn;
  uint64_t i1;
  uint64_t i2;
  uint64_t *v66;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t *v73;
  int v74;
  uint64_t *v75;
  std::__shared_weak_count *v76;
  uint64_t *v77;
  unint64_t v78;
  uint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t *v84;
  unint64_t v85;
  uint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  int v100;
  NSObject *v101;
  const char *v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t *v106;
  int v107;
  unsigned __int8 *v108;
  uint64_t *v109;
  char v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  int v114;
  int v115;
  BOOL v116;
  _BOOL4 v117;
  int v118;
  uint64_t v119;
  uint64_t *v120;
  char v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t **v124;
  char *v125;
  uint64_t *v126;
  _QWORD *v127;
  uint64_t **v128;
  uint64_t **v129;
  uint64_t **v130;
  uint64_t **v131;
  uint64_t **v132;
  char v133;
  void *v134;
  void *v135;
  void *v136;
  nlohmann::detail::exception *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  _BOOL4 has_forced_hydraFE;
  BOOL v143;
  unint64_t *v144;
  unint64_t v145;
  NSObject *v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  _BOOL4 v151;
  uint64_t v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  _BOOL4 v157;
  const char *v158;
  unint64_t *v159;
  unint64_t v160;
  void (***v161)(void **__return_ptr, _QWORD, std::string *, unsigned __int8 *, uint64_t *, _QWORD);
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t *v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  unint64_t *v190;
  uint64_t v191;
  unint64_t *v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t *v196;
  unint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  int v204;
  uint64_t v205;
  unint64_t *v206;
  unint64_t v207;
  uint64_t *v208;
  NSObject *v209;
  const char *v210;
  void (***v211)(void **__return_ptr, _QWORD, std::string *, unsigned __int8 *, uint64_t *, _QWORD);
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  unint64_t *v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *size;
  unint64_t *v221;
  unint64_t v222;
  unint64_t *v223;
  NSObject *v224;
  const char *v225;
  void (***v226)(void **__return_ptr, _QWORD, std::string *, unsigned __int8 *, uint64_t *, _QWORD);
  uint64_t v227;
  unint64_t *v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t *v231;
  unint64_t v232;
  void (***v233)(void **__return_ptr, _QWORD, std::string *, unsigned __int8 *, uint64_t *, _QWORD);
  uint64_t v234;
  unint64_t *v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t *v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t *v242;
  unint64_t v243;
  NSObject *v244;
  std::chrono::steady_clock::time_point v245;
  int v246;
  std::chrono::steady_clock::time_point v247;
  const char *v248;
  _DWORD *v249;
  uint64_t v250;
  uint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  nlohmann::detail::exception *exception;
  nlohmann::detail::exception *v263;
  char *v264;
  std::string *v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  uint64_t v269[2];
  uint64_t v270[2];
  uint64_t v271[2];
  _QWORD v272[2];
  uint64_t v273[2];
  uint64_t v274[2];
  uint64_t v275[2];
  _QWORD v276[2];
  uint64_t v277;
  std::__shared_weak_count *v278;
  uint64_t v279;
  std::__shared_weak_count *v280;
  uint64_t v281[2];
  _QWORD v282[2];
  uint64_t v283[6];
  uint64_t v284;
  std::__shared_weak_count *v285;
  uint64_t v286;
  std::__shared_weak_count *v287;
  uint64_t v288[4];
  _QWORD v289[4];
  uint64_t v290;
  std::__shared_weak_count *v291;
  uint64_t v292;
  std::__shared_weak_count *v293;
  __int128 v294;
  uint64_t v295[6];
  uint64_t v296;
  uint64_t v297;
  uint64_t v298[2];
  std::string v299;
  uint64_t v300;
  uint64_t *v301;
  unsigned __int8 v302[8];
  uint64_t *v303;
  uint64_t v304;
  uint64_t *v305;
  uint64_t v306;
  std::__shared_weak_count *v307;
  unsigned __int8 v308[8];
  void *v309;
  _BYTE v310[24];
  _BYTE *v311;
  _BYTE v312[24];
  _BYTE *v313;
  std::string __p;
  char v315;
  _BYTE v316[8];
  uint64_t *v317;
  _BYTE *v318;
  char v319;
  __int128 v320;
  __int128 *v321;
  uint64_t v322;
  unint64_t v323;
  _QWORD *v324;
  unint64_t *v325;
  char v326;
  uint8_t buf[24];
  uint64_t v328;
  _QWORD v329[2];
  _QWORD *v330;
  char v331;
  uint64_t v332;

  v332 = *MEMORY[0x1E0C80C00];
  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  SharedObjectPool::get<VoiceConfig>(&v296, *(__int128 ***)(a1 + 240));
  if (*(_BYTE *)(a1 + 512) || !*(_DWORD *)(a1 + 368))
  {
    *(_BYTE *)(a1 + 680) = 0;
    if ((a3 & 1) != 0)
      goto LABEL_3;
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v8 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(a1 + 512))
        v10 = "vocalizer";
      else
        v10 = "unknown";
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v10;
      _os_log_impl(&dword_1DE3F6000, v8, OS_LOG_TYPE_DEFAULT, "Detected %s voice. Use vocalizer engine to initialize.", buf, 0xCu);
    }
    if (*(_BYTE *)(a1 + 512))
      v11 = "vocalizer";
    else
      v11 = "unknown";
    Diagnostics::log(5, "Detected %s voice. Use vocalizer engine to initialize.", v9, v11);
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v312, a1 + 584);
    v12 = TTSSynthesizer::TTSSynthesizerInternal::initialize_vocalizer_engine(a1, (uint64_t)v312);
    v13 = v313;
    if (v313 == v312)
    {
      v14 = 4;
      v13 = v312;
    }
    else
    {
      if (!v313)
        goto LABEL_44;
      v14 = 5;
    }
    (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_44:
    if (v12)
    {
      std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v310, a1 + 584);
      v7 = TTSSynthesizer::TTSSynthesizerInternal::initialize_vocalizer_engine(a1, (uint64_t)v310);
      v30 = v311;
      if (v311 == v310)
      {
        v31 = 4;
        v30 = v310;
      }
      else
      {
        if (!v311)
          goto LABEL_432;
        v31 = 5;
      }
      (*(void (**)(void))(*v30 + 8 * v31))();
      goto LABEL_432;
    }
    goto LABEL_413;
  }
  if (*(_BYTE *)(a1 + 484))
  {
    if (!a3 || *(_BYTE *)(a1 + 680))
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v15 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1DE3F6000, v15, OS_LOG_TYPE_DEFAULT, "Initializing FE only pipeline.", buf, 2u);
      }
      Diagnostics::log(5, "Initializing FE only pipeline.", v16);
      if (*(_BYTE *)(a1 + 513))
      {
        v17 = *a2;
        v18 = (std::__shared_weak_count *)a2[1];
        v295[4] = *a2;
        v295[5] = (uint64_t)v18;
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldxr(p_shared_owners);
          while (__stxr(v20 + 1, p_shared_owners));
        }
        v21 = TTSSynthesizer::TTSSynthesizerInternal::initialize_gryphon_frontend(a1, v17, v18, a1 + 520, a3);
        if (v18)
        {
          v22 = (unint64_t *)&v18->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        if (v21)
        {
          v24 = *a2;
          v25 = (std::__shared_weak_count *)a2[1];
          v295[2] = *a2;
          v295[3] = (uint64_t)v25;
          if (v25)
          {
            v26 = (unint64_t *)&v25->__shared_owners_;
            do
              v27 = __ldxr(v26);
            while (__stxr(v27 + 1, v26));
          }
          v7 = TTSSynthesizer::TTSSynthesizerInternal::initialize_gryphon_frontend(a1, v24, v25, a1 + 520, a3);
          if (v25)
          {
            v28 = (unint64_t *)&v25->__shared_owners_;
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 - 1, v28));
            goto LABEL_318;
          }
          goto LABEL_432;
        }
        if (*(_BYTE *)(a1 + 514))
        {
          v42 = a2[1];
          v295[0] = *a2;
          v295[1] = v42;
          if (v42)
          {
            v43 = (unint64_t *)(v42 + 8);
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
          }
          std::string::basic_string[abi:ne180100]<0>(buf, "pre_pipeline");
          std::string::basic_string[abi:ne180100]<0>(&v320, &byte_1DEBD87CE);
          GryphonPipelineFactory::pipeline_from_config(&__p, v295, a1 + 568, (unsigned __int8 **)(a1 + 544), (uint64_t)buf, (const void **)&v320);
          std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a1 + 296, (__int128 *)&__p);
          std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
          if (SHIBYTE(v321) < 0)
            operator delete((void *)v320);
          if ((char)buf[23] < 0)
            operator delete(*(void **)buf);
          std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)v295);
        }
      }
      v45 = a1 + 280;
      std::shared_ptr<TokenAttributes>::reset[abi:ne180100]((_QWORD *)(a1 + 280));
      v46 = (__int128 **)*a2;
      v47 = (std::__shared_weak_count *)a2[1];
      v292 = *a2;
      v293 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      v50 = *(unsigned __int8 *)(a1 + 513);
      v308[0] = 0;
      v309 = 0;
      if (v50)
      {
        SharedObjectPool::get<VoiceConfig>(&v306, v46);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v306 + 72))(&v304, v306, 1734567527, 2);
        v51 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v304, "pipeline");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v302, (uint64_t)v51);
        v52 = v308[0];
        v308[0] = v302[0];
        v302[0] = v52;
        v53 = (uint64_t *)v309;
        v309 = v303;
        v303 = v53;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v303, v52);
        if (v308[0])
        {
          *(_QWORD *)buf = v308;
          *(_QWORD *)&buf[8] = 0;
          *(_QWORD *)&buf[16] = 0;
          v328 = 0;
          v329[0] = 0x8000000000000000;
          if (v308[0] == 2)
          {
            *(_QWORD *)&buf[16] = *(_QWORD *)v309;
          }
          else if (v308[0] == 1)
          {
            *(_QWORD *)&buf[8] = *(_QWORD *)v309;
          }
          else
          {
            v329[0] = 0;
          }
          v107 = 0;
          while (1)
          {
            v321 = 0;
            v322 = 0;
            *((_QWORD *)&v320 + 1) = 0;
            *(_QWORD *)&v320 = v308;
            v323 = 0x8000000000000000;
            if (v308[0] == 2)
            {
              v321 = (__int128 *)*((_QWORD *)v309 + 1);
            }
            else if (v308[0] == 1)
            {
              *((_QWORD *)&v320 + 1) = (char *)v309 + 8;
            }
            else
            {
              v323 = 1;
            }
            if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)buf, (unsigned __int8 **)&v320))
            {
              goto LABEL_111;
            }
            v108 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)buf);
            v109 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v108, "id");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v109, &v299);
            v110 = HIBYTE(v299.__r_.__value_.__r.__words[2]);
            if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0)
            {
              if (v299.__r_.__value_.__l.__size_ != 14)
              {
LABEL_194:
                if ((v107 & 1) == 0)
                {
                  v115 = 0;
                  v107 = 0;
                  goto LABEL_223;
                }
                goto LABEL_203;
              }
              v111 = (unint64_t *)v299.__r_.__value_.__r.__words[0];
            }
            else
            {
              if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) != 14)
                goto LABEL_194;
              v111 = (unint64_t *)&v299;
            }
            v112 = bswap64(*v111);
            v113 = 0x6E657572616C5F61;
            if (v112 == 0x6E657572616C5F61
              && (v112 = bswap64(*(unint64_t *)((char *)v111 + 6)),
                  v113 = 0x5F61646170746572,
                  v112 == 0x5F61646170746572))
            {
              v114 = 0;
            }
            else if (v112 < v113)
            {
              v114 = -1;
            }
            else
            {
              v114 = 1;
            }
            v116 = v114 == 0;
            v117 = v114 == 0;
            v118 = !v116;
            if ((v118 & v107 & 1) == 0)
            {
              v115 = 4 * v117;
              v107 |= v117;
              goto LABEL_223;
            }
LABEL_203:
            if (v308[0] == 2)
            {
              v120 = 0;
              v119 = *((_QWORD *)v309 + 1);
              goto LABEL_208;
            }
            if (v308[0] == 1)
            {
              v119 = 0;
              v120 = (uint64_t *)((char *)v309 + 8);
LABEL_208:
              v121 = 1;
              goto LABEL_210;
            }
            v121 = 0;
            v119 = 0;
            v120 = 0;
LABEL_210:
            if (*(unsigned __int8 **)buf != v308)
            {
              exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
              std::string::basic_string[abi:ne180100]<0>(&v320, "iterators do not fit current value");
              nlohmann::detail::invalid_iterator::create(203, (uint64_t)&v320, exception);
            }
            if (v308[0] == 2)
            {
              v122 = v45;
              if (*(_QWORD *)&buf[16] != v119)
              {
                v127 = v309;
                std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>((uint64_t)&v320, v119, *((_QWORD *)v309 + 1), *(uint64_t *)&buf[16]);
                v129 = v128;
                v130 = (uint64_t **)v127[1];
                if (v130 != v128)
                {
                  v131 = v130 - 1;
                  do
                  {
                    v132 = v131 - 1;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v131, *((unsigned __int8 *)v131 - 8));
                    v131 -= 2;
                  }
                  while (v132 != v129);
                }
                v127[1] = v129;
              }
              goto LABEL_222;
            }
            if (v308[0] == 1)
            {
              v122 = v45;
              v123 = *(uint64_t **)&buf[8];
              if (*(uint64_t **)&buf[8] != v120)
              {
                v124 = (uint64_t **)v309;
                v125 = (char *)v309 + 8;
                do
                {
                  v126 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__remove_node_pointer(v124, v123);
                  std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>::destroy[abi:ne180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void,void>((uint64_t)v125, (uint64_t)(v123 + 4));
                  operator delete(v123);
                  v123 = v126;
                }
                while (v120 != v126);
              }
              goto LABEL_222;
            }
            if (v308[0] - 3 > 5)
            {
              v263 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
              if (v308[0] > 9uLL)
                v264 = "number";
              else
                v264 = off_1EA94C758[v308[0]];
              std::string::basic_string[abi:ne180100]<0>(&__p, v264);
              v265 = std::string::insert(&__p, 0, "cannot use erase() with ");
              v266 = *(_OWORD *)&v265->__r_.__value_.__l.__data_;
              v321 = (__int128 *)v265->__r_.__value_.__r.__words[2];
              v320 = v266;
              v265->__r_.__value_.__l.__size_ = 0;
              v265->__r_.__value_.__r.__words[2] = 0;
              v265->__r_.__value_.__r.__words[0] = 0;
              nlohmann::detail::type_error::create(307, (uint64_t)&v320, v263);
            }
            v133 = v121 ^ 1;
            if (v329[0])
              v133 = 0;
            if ((v133 & 1) == 0)
            {
              v137 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
              std::string::basic_string[abi:ne180100]<0>(&v320, "iterators out of range");
              nlohmann::detail::invalid_iterator::create(204, (uint64_t)&v320, v137);
            }
            v122 = v45;
            if (v308[0] == 8)
            {
              v134 = v309;
              v136 = *(void **)v309;
              if (*(_QWORD *)v309)
              {
                *((_QWORD *)v309 + 1) = v136;
                v135 = v136;
LABEL_237:
                operator delete(v135);
                v134 = v309;
              }
LABEL_238:
              operator delete(v134);
              v309 = 0;
              goto LABEL_239;
            }
            if (v308[0] == 3)
            {
              v134 = v309;
              if (*((char *)v309 + 23) < 0)
              {
                v135 = *(void **)v309;
                goto LABEL_237;
              }
              goto LABEL_238;
            }
LABEL_239:
            v308[0] = 0;
LABEL_222:
            v115 = 2;
            v110 = HIBYTE(v299.__r_.__value_.__r.__words[2]);
            v45 = v122;
LABEL_223:
            if (v110 < 0)
              operator delete(v299.__r_.__value_.__l.__data_);
            if ((v115 | 4) != 4)
              goto LABEL_111;
            nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)buf);
          }
        }
        *((_QWORD *)&v320 + 1) = 0;
        LOBYTE(v320) = 3;
        *((_QWORD *)&v320 + 1) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>("id");
        v321 = &v320;
        LOBYTE(v322) = 1;
        v324 = 0;
        LOBYTE(v323) = 3;
        v324 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[21]>("frontend_feature_log");
        v325 = &v323;
        v326 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)buf, (uint64_t)&v320, 2, 1, 2);
        *(_QWORD *)&buf[16] = buf;
        LOBYTE(v328) = 1;
        __p.__r_.__value_.__l.__size_ = 0;
        __p.__r_.__value_.__s.__data_[0] = 3;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>("params");
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&__p;
        v315 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v300, 0, 0, 0, 1);
        v316[0] = v300;
        v66 = v301;
        LOBYTE(v300) = 0;
        v301 = 0;
        v317 = v66;
        v318 = v316;
        v319 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v329, (uint64_t)&__p, 2, 1, 2);
        v330 = v329;
        v331 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v299, (uint64_t)buf, 2, 1, 2);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::push_back(v308, (char *)&v299);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v299.__r_.__value_.__l.__size_, v299.__r_.__value_.__s.__data_[0]);
        for (i = 0; i != -8; i -= 4)
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v329[i + 1], LOBYTE(v329[i]));
        for (j = 0; j != -8; j -= 4)
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v317)[j], v316[j * 8]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v301, v300);
        for (k = 0; k != -8; k -= 4)
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v324)[k], *((unsigned __int8 *)&v323 + k * 8));
LABEL_111:
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v305, v304);
        v70 = v307;
        if (v307)
        {
          v71 = (unint64_t *)&v307->__shared_owners_;
          do
            v72 = __ldaxr(v71);
          while (__stlxr(v72 - 1, v71));
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
      }
      else
      {
        v299.__r_.__value_.__s.__data_[0] = 0;
        v309 = 0;
        v299.__r_.__value_.__l.__size_ = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v299.__r_.__value_.__l.__size_, 0);
        *((_QWORD *)&v320 + 1) = 0;
        LOBYTE(v320) = 3;
        *((_QWORD *)&v320 + 1) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>("id");
        v321 = &v320;
        LOBYTE(v322) = 1;
        v324 = 0;
        LOBYTE(v323) = 3;
        v324 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[13]>("nashville_fe");
        v325 = &v323;
        v326 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)buf, (uint64_t)&v320, 2, 1, 2);
        *(_QWORD *)&buf[16] = buf;
        LOBYTE(v328) = 1;
        __p.__r_.__value_.__l.__size_ = 0;
        __p.__r_.__value_.__s.__data_[0] = 3;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>("params");
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&__p;
        v315 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v304, 0, 0, 0, 1);
        v316[0] = v304;
        v54 = v305;
        LOBYTE(v304) = 0;
        v305 = 0;
        v317 = v54;
        v318 = v316;
        v319 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v329, (uint64_t)&__p, 2, 1, 2);
        v330 = v329;
        v331 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v306, (uint64_t)buf, 2, 1, 2);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::push_back(v308, (char *)&v306);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v307, v306);
        for (m = 0; m != -8; m -= 4)
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v329[m + 1], LOBYTE(v329[m]));
        for (n = 0; n != -8; n -= 4)
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v317)[n], v316[n * 8]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v305, v304);
        for (ii = 0; ii != -8; ii -= 4)
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v324)[ii], *((unsigned __int8 *)&v323 + ii * 8));
        *((_QWORD *)&v320 + 1) = 0;
        LOBYTE(v320) = 3;
        *((_QWORD *)&v320 + 1) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>("id");
        v321 = &v320;
        LOBYTE(v322) = 1;
        v324 = 0;
        LOBYTE(v323) = 3;
        v324 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[10]>("prompt_be");
        v325 = &v323;
        v326 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)buf, (uint64_t)&v320, 2, 1, 2);
        *(_QWORD *)&buf[16] = buf;
        LOBYTE(v328) = 1;
        __p.__r_.__value_.__l.__size_ = 0;
        __p.__r_.__value_.__s.__data_[0] = 3;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>("params");
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&__p;
        v315 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v304, 0, 0, 0, 1);
        v316[0] = v304;
        v58 = v305;
        LOBYTE(v304) = 0;
        v305 = 0;
        v317 = v58;
        v318 = v316;
        v319 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v329, (uint64_t)&__p, 2, 1, 2);
        v330 = v329;
        v331 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v306, (uint64_t)buf, 2, 1, 2);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::push_back(v308, (char *)&v306);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v307, v306);
        for (jj = 0; jj != -8; jj -= 4)
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v329[jj + 1], LOBYTE(v329[jj]));
        for (kk = 0; kk != -8; kk -= 4)
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v317)[kk], v316[kk * 8]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v305, v304);
        for (mm = 0; mm != -8; mm -= 4)
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v324)[mm], *((unsigned __int8 *)&v323 + mm * 8));
        *((_QWORD *)&v320 + 1) = 0;
        LOBYTE(v320) = 3;
        *((_QWORD *)&v320 + 1) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>("id");
        v321 = &v320;
        LOBYTE(v322) = 1;
        v324 = 0;
        LOBYTE(v323) = 3;
        v324 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[21]>("frontend_feature_log");
        v325 = &v323;
        v326 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)buf, (uint64_t)&v320, 2, 1, 2);
        *(_QWORD *)&buf[16] = buf;
        LOBYTE(v328) = 1;
        __p.__r_.__value_.__l.__size_ = 0;
        __p.__r_.__value_.__s.__data_[0] = 3;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>("params");
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&__p;
        v315 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v304, 0, 0, 0, 1);
        v316[0] = v304;
        v62 = v305;
        LOBYTE(v304) = 0;
        v305 = 0;
        v317 = v62;
        v318 = v316;
        v319 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v329, (uint64_t)&__p, 2, 1, 2);
        v330 = v329;
        v331 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v306, (uint64_t)buf, 2, 1, 2);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::push_back(v308, (char *)&v306);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v307, v306);
        for (nn = 0; nn != -8; nn -= 4)
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v329[nn + 1], LOBYTE(v329[nn]));
        for (i1 = 0; i1 != -8; i1 -= 4)
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v317)[i1], v316[i1 * 8]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v305, v304);
        for (i2 = 0; i2 != -8; i2 -= 4)
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v324)[i2], *((unsigned __int8 *)&v323 + i2 * 8));
      }
      LOBYTE(v306) = 0;
      v307 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v304, (uint64_t)v308);
      v73 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v306, "pipeline");
      v74 = *(unsigned __int8 *)v73;
      *(_BYTE *)v73 = v304;
      LOBYTE(v304) = v74;
      v75 = (uint64_t *)v73[1];
      v73[1] = (uint64_t)v305;
      v305 = v75;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v305, v74);
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v76 = *(std::__shared_weak_count **)(v292 + 24);
      if (v76)
      {
        v76 = std::__shared_weak_count::lock(v76);
        *(_QWORD *)&buf[8] = v76;
        if (v76)
        {
          v76 = *(std::__shared_weak_count **)(v292 + 16);
          *(_QWORD *)buf = v76;
        }
      }
      v300 = v292;
      v301 = (uint64_t *)v293;
      if (v293)
      {
        v77 = &v293->__shared_owners_;
        do
          v78 = __ldxr((unint64_t *)v77);
        while (__stxr(v78 + 1, (unint64_t *)v77));
      }
      PersistentModuleFactory::load_from_config(v76, (uint64_t)&v306, &v300);
      if (v293)
      {
        v79 = &v293->__shared_owners_;
        do
          v80 = __ldaxr((unint64_t *)v79);
        while (__stlxr(v80 - 1, (unint64_t *)v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
          std::__shared_weak_count::__release_weak(v293);
        }
      }
      v81 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v82 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      v298[0] = v292;
      v298[1] = (uint64_t)v293;
      if (v293)
      {
        v84 = &v293->__shared_owners_;
        do
          v85 = __ldxr((unint64_t *)v84);
        while (__stxr(v85 + 1, (unint64_t *)v84));
      }
      memset(buf, 0, sizeof(buf));
      std::string::basic_string[abi:ne180100]<0>(&v320, "pipeline");
      std::string::basic_string[abi:ne180100]<0>(&__p, "connection");
      GryphonPipelineFactory::pipeline_from_config(&v294, v298, (uint64_t)&v306, (unsigned __int8 **)buf, (uint64_t)&v320, (const void **)&__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v321) < 0)
        operator delete((void *)v320);
      *(_QWORD *)&v320 = buf;
      std::vector<TTSSynthesizer::EngineParamsOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&v320);
      if (v293)
      {
        v86 = &v293->__shared_owners_;
        do
          v87 = __ldaxr((unint64_t *)v86);
        while (__stlxr(v87 - 1, (unint64_t *)v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
          std::__shared_weak_count::__release_weak(v293);
        }
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v307, v306);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v309, v308[0]);
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v45, &v294);
      v88 = (std::__shared_weak_count *)*((_QWORD *)&v294 + 1);
      if (*((_QWORD *)&v294 + 1))
      {
        v89 = (unint64_t *)(*((_QWORD *)&v294 + 1) + 8);
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      if (v293)
      {
        v91 = &v293->__shared_owners_;
        do
          v92 = __ldaxr((unint64_t *)v91);
        while (__stlxr(v92 - 1, (unint64_t *)v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
          std::__shared_weak_count::__release_weak(v293);
        }
      }
      v93 = *(_QWORD *)(a1 + 272);
      if (v93)
      {
        v94 = *(std::__shared_weak_count **)(a1 + 288);
        v290 = *(_QWORD *)(a1 + 280);
        v291 = v94;
        if (v94)
        {
          v95 = (unint64_t *)&v94->__shared_owners_;
          do
            v96 = __ldxr(v95);
          while (__stxr(v96 + 1, v95));
        }
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v93 + 96))(v93, &v290);
        v97 = v291;
        if (v291)
        {
          v98 = (unint64_t *)&v291->__shared_owners_;
          do
            v99 = __ldaxr(v98);
          while (__stlxr(v99 - 1, v98));
LABEL_161:
          if (!v99)
          {
            ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
            std::__shared_weak_count::__release_weak(v97);
          }
        }
      }
LABEL_413:
      if (*(_BYTE *)(a1 + 512) || *(_QWORD *)(a1 + 280))
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v244 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
        {
          v245.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
          v246 = *(unsigned __int8 *)(a1 + 680);
          *(_DWORD *)buf = 134218240;
          *(double *)&buf[4] = (double)((v245.__d_.__rep_ - v6.__d_.__rep_) / 1000000) / 1000.0;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v246;
          _os_log_impl(&dword_1DE3F6000, v244, OS_LOG_TYPE_DEFAULT, "Pipeline build latency: %.3f s, rebuild=%d", buf, 0x12u);
        }
        v247.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        Diagnostics::log(5, "Pipeline build latency: %.3f s, rebuild=%d", v248, (double)((v247.__d_.__rep_ - v6.__d_.__rep_) / 1000000) / 1000.0, *(unsigned __int8 *)(a1 + 680));
        v249 = (_DWORD *)(a1 + 312);
        v250 = *(unsigned int *)(a1 + 368);
        if (v250 <= 4)
          *v249 = dword_1DED0C48C[v250];
        v251 = *(_QWORD *)(a1 + 240);
        std::allocate_shared[abi:ne180100]<TTSSynthesizer::VoiceDescription,std::allocator<TTSSynthesizer::VoiceDescription>,TTSSynthesizer::VoiceDescription&,void>(&v267, (uint64_t)v249);
        SharedObjectPool::inject<TTSSynthesizer::VoiceDescription>(&v268, v251, &v267);
        v252 = (std::__shared_weak_count *)*((_QWORD *)&v268 + 1);
        if (*((_QWORD *)&v268 + 1))
        {
          v253 = (unint64_t *)(*((_QWORD *)&v268 + 1) + 8);
          do
            v254 = __ldaxr(v253);
          while (__stlxr(v254 - 1, v253));
          if (!v254)
          {
            ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
            std::__shared_weak_count::__release_weak(v252);
          }
        }
        v255 = (std::__shared_weak_count *)*((_QWORD *)&v267 + 1);
        if (*((_QWORD *)&v267 + 1))
        {
          v256 = (unint64_t *)(*((_QWORD *)&v267 + 1) + 8);
          do
            v257 = __ldaxr(v256);
          while (__stlxr(v257 - 1, v256));
          if (!v257)
          {
            ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
            std::__shared_weak_count::__release_weak(v255);
          }
        }
        kdebug_trace();
        v7 = 0;
      }
      else
      {
        v7 = 1579097685;
      }
      goto LABEL_432;
    }
LABEL_3:
    v7 = 0;
    goto LABEL_432;
  }
  if (!*(_BYTE *)(a1 + 514))
  {
    if (*(_BYTE *)(a1 + 513))
    {
      if (a3 && !*(_BYTE *)(a1 + 680))
        goto LABEL_3;
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v35 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1DE3F6000, v35, OS_LOG_TYPE_DEFAULT, "Initializing Hybrid FE pipeline.", buf, 2u);
      }
      Diagnostics::log(5, "Initializing Hybrid FE pipeline.", v36);
      v37 = *a2;
      v38 = a2[1];
      v277 = *a2;
      v278 = (std::__shared_weak_count *)v38;
      if (v38)
      {
        v39 = (unint64_t *)(v38 + 8);
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
        v41 = v278;
      }
      else
      {
        v41 = 0;
      }
      v199 = TTSSynthesizer::TTSSynthesizerInternal::initialize_gryphon_frontend(a1, v37, v41, a1 + 520, a3);
      std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&v277);
      if (v199)
      {
        v200 = *a2;
        v201 = (std::__shared_weak_count *)a2[1];
        v276[0] = *a2;
        v276[1] = v201;
        if (v201)
        {
          v202 = (unint64_t *)&v201->__shared_owners_;
          do
            v203 = __ldxr(v202);
          while (__stxr(v203 + 1, v202));
        }
        v7 = TTSSynthesizer::TTSSynthesizerInternal::initialize_gryphon_frontend(a1, v200, v201, a1 + 520, a3);
        std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)v276);
        goto LABEL_432;
      }
      std::shared_ptr<TokenAttributes>::reset[abi:ne180100]((_QWORD *)(a1 + 280));
      v204 = *(unsigned __int8 *)(a1 + 568);
      if (!*(_BYTE *)(a1 + 568))
        goto LABEL_342;
      if (v204 == 2)
      {
        if (**(_QWORD **)(a1 + 576) == *(_QWORD *)(*(_QWORD *)(a1 + 576) + 8))
        {
LABEL_342:
          v205 = a2[1];
          v273[0] = *a2;
          v273[1] = v205;
          if (v205)
          {
            v206 = (unint64_t *)(v205 + 8);
            do
              v207 = __ldxr(v206);
            while (__stxr(v207 + 1, v206));
          }
          GryphonPipelineFactory::gryphonFE_backend_pipeline(buf, v273);
          std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a1 + 280, (__int128 *)buf);
          std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          v208 = v273;
LABEL_408:
          std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)v208);
          v240 = *(_QWORD *)(a1 + 272);
          v241 = *(_QWORD *)(a1 + 288);
          v272[0] = *(_QWORD *)(a1 + 280);
          v272[1] = v241;
          if (v241)
          {
            v242 = (unint64_t *)(v241 + 8);
            do
              v243 = __ldxr(v242);
            while (__stxr(v243 + 1, v242));
          }
          (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v240 + 96))(v240, v272);
          v198 = v272;
LABEL_412:
          std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)v198);
          goto LABEL_413;
        }
      }
      else if (v204 == 1 && !*(_QWORD *)(*(_QWORD *)(a1 + 576) + 16))
      {
        goto LABEL_342;
      }
      v233 = *(void (****)(void **__return_ptr, _QWORD, std::string *, unsigned __int8 *, uint64_t *, _QWORD))(a1 + 256);
      v234 = a2[1];
      v275[0] = *a2;
      v275[1] = v234;
      if (v234)
      {
        v235 = (unint64_t *)(v234 + 8);
        do
          v236 = __ldxr(v235);
        while (__stxr(v236 + 1, v235));
      }
      PersistentModuleFactory::load_from_config(v233, a1 + 568, v275);
      std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)v275);
      v237 = a2[1];
      v274[0] = *a2;
      v274[1] = v237;
      if (v237)
      {
        v238 = (unint64_t *)(v237 + 8);
        do
          v239 = __ldxr(v238);
        while (__stxr(v239 + 1, v238));
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "pipeline");
      std::string::basic_string[abi:ne180100]<0>(&v320, "connection");
      GryphonPipelineFactory::pipeline_from_config(&__p, v274, a1 + 568, (unsigned __int8 **)(a1 + 544), (uint64_t)buf, (const void **)&v320);
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a1 + 280, (__int128 *)&__p);
      std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
      if (SHIBYTE(v321) < 0)
        operator delete((void *)v320);
      if ((char)buf[23] < 0)
        operator delete(*(void **)buf);
      v208 = v274;
      goto LABEL_408;
    }
    v100 = *(unsigned __int8 *)(a1 + 568);
    if (!*(_BYTE *)(a1 + 568))
      goto LABEL_167;
    if (v100 == 2)
    {
      if (**(_QWORD **)(a1 + 576) == *(_QWORD *)(*(_QWORD *)(a1 + 576) + 8))
      {
LABEL_167:
        if (a3 && !*(_BYTE *)(a1 + 680))
          goto LABEL_3;
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v101 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1DE3F6000, v101, OS_LOG_TYPE_DEFAULT, "Initializing default pipeline for Legacy FE.", buf, 2u);
        }
        Diagnostics::log(5, "Initializing default pipeline for Legacy FE.", v102);
        std::shared_ptr<TokenAttributes>::reset[abi:ne180100]((_QWORD *)(a1 + 280));
        v103 = a2[1];
        v269[0] = *a2;
        v269[1] = v103;
        if (v103)
        {
          v104 = (unint64_t *)(v103 + 8);
          do
            v105 = __ldxr(v104);
          while (__stxr(v105 + 1, v104));
        }
        GryphonPipelineFactory::nashvilleFE_backend_pipeline(buf, v269);
        std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a1 + 280, (__int128 *)buf);
        std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        v106 = v269;
LABEL_395:
        std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)v106);
        goto LABEL_413;
      }
    }
    else if (v100 == 1 && !*(_QWORD *)(*(_QWORD *)(a1 + 576) + 16))
    {
      goto LABEL_167;
    }
    if (a3 && !*(_BYTE *)(a1 + 680))
      goto LABEL_3;
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v224 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1DE3F6000, v224, OS_LOG_TYPE_DEFAULT, "Initializing pipeline from gryphon.cfg", buf, 2u);
    }
    Diagnostics::log(5, "Initializing pipeline from gryphon.cfg", v225);
    std::shared_ptr<TokenAttributes>::reset[abi:ne180100]((_QWORD *)(a1 + 280));
    v226 = *(void (****)(void **__return_ptr, _QWORD, std::string *, unsigned __int8 *, uint64_t *, _QWORD))(a1 + 256);
    v227 = a2[1];
    v271[0] = *a2;
    v271[1] = v227;
    if (v227)
    {
      v228 = (unint64_t *)(v227 + 8);
      do
        v229 = __ldxr(v228);
      while (__stxr(v229 + 1, v228));
    }
    PersistentModuleFactory::load_from_config(v226, a1 + 568, v271);
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)v271);
    v230 = a2[1];
    v270[0] = *a2;
    v270[1] = v230;
    if (v230)
    {
      v231 = (unint64_t *)(v230 + 8);
      do
        v232 = __ldxr(v231);
      while (__stxr(v232 + 1, v231));
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "pipeline");
    std::string::basic_string[abi:ne180100]<0>(&v320, "connection");
    GryphonPipelineFactory::pipeline_from_config(&__p, v270, a1 + 568, (unsigned __int8 **)(a1 + 544), (uint64_t)buf, (const void **)&v320);
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a1 + 280, (__int128 *)&__p);
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
    if (SHIBYTE(v321) < 0)
      operator delete((void *)v320);
    if ((char)buf[23] < 0)
      operator delete(*(void **)buf);
    v106 = v270;
    goto LABEL_395;
  }
  if (a3 && !*(_BYTE *)(a1 + 680))
    goto LABEL_3;
  v32 = std::string::basic_string[abi:ne180100]<0>(buf, "enableHydraFE");
  BOOL_for_key = InternalSettings::get_BOOL_for_key(v32);
  if ((char)buf[23] < 0)
    operator delete(*(void **)buf);
  if ((BOOL_for_key & 1) == 0)
  {
    if (*(char *)(a1 + 423) < 0 ? *(_QWORD *)(a1 + 408) : *(unsigned __int8 *)(a1 + 423))
    {
      v138 = v296;
      v139 = (std::__shared_weak_count *)v297;
      v289[2] = v296;
      v289[3] = v297;
      if (v297)
      {
        v140 = (unint64_t *)(v297 + 8);
        do
          v141 = __ldxr(v140);
        while (__stxr(v141 + 1, v140));
      }
      has_forced_hydraFE = Frontend::has_forced_hydraFE(v138);
      v143 = has_forced_hydraFE;
      if (!v139)
        goto LABEL_250;
      v144 = (unint64_t *)&v139->__shared_owners_;
      do
        v145 = __ldaxr(v144);
      while (__stlxr(v145 - 1, v144));
      if (v145)
      {
LABEL_250:
        if (has_forced_hydraFE)
          goto LABEL_251;
LABEL_347:
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v209 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1DE3F6000, v209, OS_LOG_TYPE_DEFAULT, "Initializing Legacy FE pipeline (Scalable FE is disabled).", buf, 2u);
        }
        Diagnostics::log(5, "Initializing Legacy FE pipeline (Scalable FE is disabled).", v210);
        if ((a3 & 1) == 0)
          Frontend::adapt_pipeline_for_nashvilleFE((unsigned __int8 *)(a1 + 568));
        v211 = *(void (****)(void **__return_ptr, _QWORD, std::string *, unsigned __int8 *, uint64_t *, _QWORD))(a1 + 256);
        v212 = (std::__shared_weak_count *)a2[1];
        v281[0] = *a2;
        v281[1] = (uint64_t)v212;
        if (v212)
        {
          v213 = (unint64_t *)&v212->__shared_owners_;
          do
            v214 = __ldxr(v213);
          while (__stxr(v214 + 1, v213));
        }
        PersistentModuleFactory::load_from_config(v211, a1 + 568, v281);
        if (v212)
        {
          v215 = (unint64_t *)&v212->__shared_owners_;
          do
            v216 = __ldaxr(v215);
          while (__stlxr(v216 - 1, v215));
          if (!v216)
          {
            ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
            std::__shared_weak_count::__release_weak(v212);
          }
        }
        std::shared_ptr<TokenAttributes>::reset[abi:ne180100]((_QWORD *)(a1 + 280));
        v217 = a2[1];
        v279 = *a2;
        v280 = (std::__shared_weak_count *)v217;
        if (v217)
        {
          v218 = (unint64_t *)(v217 + 8);
          do
            v219 = __ldxr(v218);
          while (__stxr(v219 + 1, v218));
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "pipeline");
        std::string::basic_string[abi:ne180100]<0>(&v320, "connection");
        GryphonPipelineFactory::pipeline_from_config(&__p, &v279, a1 + 568, (unsigned __int8 **)(a1 + 544), (uint64_t)buf, (const void **)&v320);
        std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a1 + 280, (__int128 *)&__p);
        size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v221 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v222 = __ldaxr(v221);
          while (__stlxr(v222 - 1, v221));
          if (!v222)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        if (SHIBYTE(v321) < 0)
          operator delete((void *)v320);
        if ((char)buf[23] < 0)
          operator delete(*(void **)buf);
        v97 = v280;
        if (!v280)
          goto LABEL_413;
        v223 = (unint64_t *)&v280->__shared_owners_;
        do
          v99 = __ldaxr(v223);
        while (__stlxr(v99 - 1, v223));
        goto LABEL_161;
      }
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
      if (!v143)
        goto LABEL_347;
    }
  }
LABEL_251:
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v146 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a1 + 423) < 0)
      v147 = *(_QWORD *)(a1 + 408);
    else
      v147 = *(unsigned __int8 *)(a1 + 423);
    v148 = v296;
    v289[0] = v296;
    v289[1] = v297;
    if (v297)
    {
      v149 = (unint64_t *)(v297 + 8);
      do
        v150 = __ldxr(v149);
      while (__stxr(v150 + 1, v149));
    }
    v151 = Frontend::has_forced_hydraFE(v148);
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&buf[4] = BOOL_for_key;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v147 == 0;
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)&buf[16] = v151;
    _os_log_impl(&dword_1DE3F6000, v146, OS_LOG_TYPE_DEFAULT, "Initializing Scalable FE pipeline with enable ScalableFE(%d), missing LegacyFE(%d), force ScalableFE(%d)", buf, 0x14u);
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)v289);
  }
  if (*(char *)(a1 + 423) < 0)
    v152 = *(_QWORD *)(a1 + 408);
  else
    v152 = *(unsigned __int8 *)(a1 + 423);
  v153 = v296;
  v154 = (std::__shared_weak_count *)v297;
  v288[2] = v296;
  v288[3] = v297;
  if (v297)
  {
    v155 = (unint64_t *)(v297 + 8);
    do
      v156 = __ldxr(v155);
    while (__stxr(v156 + 1, v155));
  }
  v157 = Frontend::has_forced_hydraFE(v153);
  Diagnostics::log(5, "Initializing Scalable FE pipeline with enable ScalableFE(%d), missing LegacyFE(%d), force ScalableFE(%d)", v158, BOOL_for_key, v152 == 0, v157);
  if (v154)
  {
    v159 = (unint64_t *)&v154->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  v161 = *(void (****)(void **__return_ptr, _QWORD, std::string *, unsigned __int8 *, uint64_t *, _QWORD))(a1 + 256);
  v162 = (std::__shared_weak_count *)a2[1];
  v288[0] = *a2;
  v288[1] = (uint64_t)v162;
  if (v162)
  {
    v163 = (unint64_t *)&v162->__shared_owners_;
    do
      v164 = __ldxr(v163);
    while (__stxr(v164 + 1, v163));
  }
  PersistentModuleFactory::load_from_config(v161, a1 + 568, v288);
  if (v162)
  {
    v165 = (unint64_t *)&v162->__shared_owners_;
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  std::shared_ptr<TokenAttributes>::reset[abi:ne180100]((_QWORD *)(a1 + 280));
  std::shared_ptr<TokenAttributes>::reset[abi:ne180100]((_QWORD *)(a1 + 296));
  v167 = *(_QWORD *)(a1 + 272);
  if (v167)
  {
    v286 = 0;
    v287 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v167 + 96))(v167, &v286);
    v168 = v287;
    if (v287)
    {
      v169 = (unint64_t *)&v287->__shared_owners_;
      do
        v170 = __ldaxr(v169);
      while (__stlxr(v170 - 1, v169));
      if (!v170)
      {
        ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
        std::__shared_weak_count::__release_weak(v168);
      }
    }
  }
  v171 = a2[1];
  v284 = *a2;
  v285 = (std::__shared_weak_count *)v171;
  if (v171)
  {
    v172 = (unint64_t *)(v171 + 8);
    do
      v173 = __ldxr(v172);
    while (__stxr(v173 + 1, v172));
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "pipeline");
  std::string::basic_string[abi:ne180100]<0>(&v320, "connection");
  GryphonPipelineFactory::pipeline_from_config(&__p, &v284, a1 + 568, (unsigned __int8 **)(a1 + 544), (uint64_t)buf, (const void **)&v320);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a1 + 280, (__int128 *)&__p);
  v174 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v175 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v176 = __ldaxr(v175);
    while (__stlxr(v176 - 1, v175));
    if (!v176)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
  }
  if (SHIBYTE(v321) < 0)
    operator delete((void *)v320);
  if ((char)buf[23] < 0)
    operator delete(*(void **)buf);
  v177 = v285;
  if (v285)
  {
    v178 = (unint64_t *)&v285->__shared_owners_;
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  v180 = *a2;
  v181 = (std::__shared_weak_count *)a2[1];
  v283[4] = *a2;
  v283[5] = (uint64_t)v181;
  if (v181)
  {
    v182 = (unint64_t *)&v181->__shared_owners_;
    do
      v183 = __ldxr(v182);
    while (__stxr(v183 + 1, v182));
  }
  v184 = TTSSynthesizer::TTSSynthesizerInternal::initialize_gryphon_frontend(a1, v180, v181, a1 + 520, a3);
  if (v181)
  {
    v185 = (unint64_t *)&v181->__shared_owners_;
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
      std::__shared_weak_count::__release_weak(v181);
    }
  }
  if (!v184)
  {
    v191 = a2[1];
    v283[0] = *a2;
    v283[1] = v191;
    if (v191)
    {
      v192 = (unint64_t *)(v191 + 8);
      do
        v193 = __ldxr(v192);
      while (__stxr(v193 + 1, v192));
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "pre_pipeline");
    std::string::basic_string[abi:ne180100]<0>(&v320, &byte_1DEBD87CE);
    GryphonPipelineFactory::pipeline_from_config(&__p, v283, a1 + 568, (unsigned __int8 **)(a1 + 544), (uint64_t)buf, (const void **)&v320);
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a1 + 296, (__int128 *)&__p);
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
    if (SHIBYTE(v321) < 0)
      operator delete((void *)v320);
    if ((char)buf[23] < 0)
      operator delete(*(void **)buf);
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)v283);
    v194 = *(_QWORD *)(a1 + 272);
    if (!v194)
      goto LABEL_413;
    v195 = *(_QWORD *)(a1 + 288);
    v282[0] = *(_QWORD *)(a1 + 280);
    v282[1] = v195;
    if (v195)
    {
      v196 = (unint64_t *)(v195 + 8);
      do
        v197 = __ldxr(v196);
      while (__stxr(v197 + 1, v196));
    }
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v194 + 96))(v194, v282);
    v198 = v282;
    goto LABEL_412;
  }
  v187 = *a2;
  v25 = (std::__shared_weak_count *)a2[1];
  v283[2] = *a2;
  v283[3] = (uint64_t)v25;
  if (v25)
  {
    v188 = (unint64_t *)&v25->__shared_owners_;
    do
      v189 = __ldxr(v188);
    while (__stxr(v189 + 1, v188));
  }
  v7 = TTSSynthesizer::TTSSynthesizerInternal::initialize_gryphon_frontend(a1, v187, v25, a1 + 520, a3);
  if (v25)
  {
    v190 = (unint64_t *)&v25->__shared_owners_;
    do
      v29 = __ldaxr(v190);
    while (__stlxr(v29 - 1, v190));
LABEL_318:
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
LABEL_432:
  v258 = (std::__shared_weak_count *)v297;
  if (v297)
  {
    v259 = (unint64_t *)(v297 + 8);
    do
      v260 = __ldaxr(v259);
    while (__stlxr(v260 - 1, v259));
    if (!v260)
    {
      ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
      std::__shared_weak_count::__release_weak(v258);
    }
  }
  return v7;
}

void sub_1DEAA0A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a72);
  _Unwind_Resume(a1);
}

void TTSSynthesizer::TTSSynthesizerInternal::set_prompts_disabled(TTSSynthesizer::TTSSynthesizerInternal *this, uint64_t a2)
{
  char v2;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t *v8;
  std::recursive_mutex *v9;
  uint64_t *v10;
  uint64_t v11;
  __int128 v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 v36;
  char *v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  void *v40;

  v2 = a2;
  v4 = *((_QWORD *)this + 34);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, a2);
  }
  else
  {
    SharedObjectPool::get_if<PromptConfig>(&v39, *((_QWORD *)this + 30));
    v5 = (_BYTE *)v39;
    if (!(_QWORD)v39)
    {
      v6 = *((_QWORD *)this + 30);
      v7 = operator new(0x20uLL);
      v7[1] = 0;
      v8 = v7 + 1;
      v7[2] = 0;
      *((_BYTE *)v7 + 24) = 0;
      *v7 = &off_1EA932400;
      *((_DWORD *)v7 + 7) = -1;
      v9 = (std::recursive_mutex *)(v6 + 56);
      v37 = (char *)(v7 + 3);
      v38 = (std::__shared_weak_count *)v7;
      std::recursive_mutex::lock((std::recursive_mutex *)(v6 + 56));
      *(_QWORD *)&v36 = &v40;
      v11 = v10[5];
      if (v11)
      {
        *(_QWORD *)&v12 = v7 + 3;
        *((_QWORD *)&v12 + 1) = v7;
        do
          v13 = __ldxr(v8);
        while (__stxr(v13 + 1, v8));
        v14 = *(std::__shared_weak_count **)(v11 + 16);
        *(_OWORD *)(v11 + 8) = v12;
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
      }
      else
      {
        v17 = (_QWORD *)operator new();
        *v17 = &off_1EA9231C8;
        v17[1] = v7 + 3;
        v17[2] = v7;
        do
          v18 = __ldxr(v8);
        while (__stxr(v18 + 1, v8));
        v19 = v10[5];
        v10[5] = (uint64_t)v17;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      }
      v20 = v38;
      v37 = 0;
      v38 = 0;
      std::recursive_mutex::unlock(v9);
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v23 = v38;
      if (v38)
      {
        v24 = (unint64_t *)&v38->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      SharedObjectPool::get_if<PromptConfig>(&v36, *((_QWORD *)this + 30));
      v26 = v36;
      v36 = 0uLL;
      v27 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
      v39 = v26;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v30 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
      if (*((_QWORD *)&v36 + 1))
      {
        v31 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v5 = (_BYTE *)v39;
    }
    *v5 = v2;
    v33 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v34 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
  }
}

void sub_1DEAA15B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void SharedObjectPool::get_if<PromptConfig>(_QWORD *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v4 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  {
    v6 = *(_QWORD *)(*(_QWORD *)v5 + 16);
    *a1 = *(_QWORD *)(*(_QWORD *)v5 + 8);
    a1[1] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  std::recursive_mutex::unlock(v4);
}

void sub_1DEAA1674(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *Agglomerate::ItemHolder<std::shared_ptr<PromptConfig>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA9231C8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<PromptConfig>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA9231C8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<PromptConfig>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932400;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PromptConfig>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932400;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t TTSSynthesizer::TTSSynthesizerInternal::initialize_vocalizer_engine(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  void **v9;
  int Interfaces;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v40[286];
  __int16 v41;
  _OWORD v42[8];
  int v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  int v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  _OWORD v57[8];
  int v58;
  _OWORD v59[8];
  int v60;
  void *v61[96];
  char v62[260];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = *(_QWORD *)(a2 + 24);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  if (v5)
    goto LABEL_3;
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_WORD *)a1 = 8963;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 136) = 131584;
  SiriTTS::vocalizer_common_resource_path((SiriTTS *)v61);
  v8 = (_QWORD *)(a1 + 376);
  if (*(char *)(a1 + 399) < 0)
    v8 = (_QWORD *)*v8;
  v9 = v61;
  if (SHIBYTE(v61[2]) < 0)
    v9 = (void **)v61[0];
  *(_QWORD *)&v42[0] = v8;
  *((_QWORD *)&v42[0] + 1) = v9;
  *(_QWORD *)(a1 + 144) = v42;
  Interfaces = vplatform_GetInterfaces((_QWORD *)a1, (_WORD *)(a1 + 136));
  if (Interfaces)
  {
    v5 = 0;
    v2 = vplatform_GetInterfaces((_QWORD *)a1, (_WORD *)(a1 + 136));
  }
  else
  {
    *(_QWORD *)(a1 + 32) = &SiriTTSVocalizerGetCriticalSectionImpl::__CriticalSectionImpl;
    v19 = (_QWORD *)(a1 + 400);
    if (*(char *)(a1 + 423) < 0)
      v19 = (_QWORD *)*v19;
    *(_QWORD *)(a1 + 8) = v19;
    v5 = a1;
  }
  if (SHIBYTE(v61[2]) < 0)
    operator delete(v61[0]);
  if (!Interfaces)
  {
LABEL_3:
    v6 = ve_ttsInitialize(v5, (uint64_t *)(a1 + 208));
    if ((_DWORD)v6)
    {
      return ve_ttsInitialize(v5, (uint64_t *)(a1 + 208));
    }
    else
    {
      v41 = 1;
      MEMORY[0x1E0C80A78](v6);
      if (ve_ttsGetLanguageList(*(_QWORD *)(a1 + 208), *(_QWORD *)(a1 + 216), v40, &v41, v11, v12, v13, v14))
      {
        return ve_ttsGetLanguageList(*(_QWORD *)(a1 + 208), *(_QWORD *)(a1 + 216), v40, &v41, v15, v16, v17, v18);
      }
      else
      {
        v20 = memcpy(v62, v40, sizeof(v62));
        MEMORY[0x1E0C80A78](v20);
        v22 = &v40[-256 * v21];
        if (ve_ttsGetVoiceList(*(_QWORD *)(a1 + 208), *(_QWORD *)(a1 + 216), v62, (uint64_t)v22, &v41, v23, v24, v25))
        {
          return ve_ttsGetVoiceList(*(_QWORD *)(a1 + 208), *(_QWORD *)(a1 + 216), v62, (uint64_t)v22, &v41, v26, v27, v28);
        }
        else
        {
          memcpy(v61, v22, sizeof(v61));
          if (ve_ttsOpen(*(_QWORD *)(a1 + 208), *(_QWORD *)(a1 + 216), 0, 0, a1 + 224, v29, v30, v31))
          {
            return ve_ttsOpen(*(_QWORD *)(a1 + 208), *(_QWORD *)(a1 + 216), 0, 0, a1 + 224, v32, v33, v34);
          }
          else
          {
            LODWORD(v59[0]) = 1;
            strncpy((char *)v59 + 4, v62, 0x80uLL);
            LODWORD(v57[0]) = 2;
            strncpy((char *)v57 + 4, (const char *)&v61[32], 0x80uLL);
            v42[6] = v59[6];
            v42[7] = v59[7];
            v42[2] = v59[2];
            v42[3] = v59[3];
            v42[4] = v59[4];
            v42[5] = v59[5];
            v42[0] = v59[0];
            v42[1] = v59[1];
            v49 = v57[5];
            v50 = v57[6];
            v51 = v57[7];
            v45 = v57[1];
            v46 = v57[2];
            v47 = v57[3];
            v48 = v57[4];
            v43 = v60;
            v52 = v58;
            v44 = v57[0];
            v53 = 7;
            v54 = 2;
            v55 = 19;
            v56 = 1;
            return ve_ttsSetParamList(*(_QWORD *)(a1 + 224), *(_QWORD *)(a1 + 232), v42, 4, v35, v36, v37, v38);
          }
        }
      }
    }
  }
  return v2;
}

void sub_1DEAA1AC8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (*(char *)(v1 + 839) < 0)
    operator delete(*(void **)(v2 + 264));
  _Unwind_Resume(exception_object);
}

uint64_t TTSSynthesizer::TTSSynthesizerInternal::initialize_gryphon_frontend(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, char a5)
{
  NSObject *v7;
  const char *v8;
  std::chrono::steady_clock::time_point v9;
  NSObject *v10;
  std::chrono::steady_clock::time_point v11;
  std::chrono::steady_clock::time_point v12;
  const char *v13;
  std::__shared_weak_count *size;
  unint64_t *v15;
  unint64_t v16;
  uint64_t result;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  FrontendEnvironment **v31;
  char *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::string::size_type v52;
  const std::string::value_type *v53;
  const std::string::value_type *v54;
  std::string::size_type v55;
  std::string *p_str;
  std::string *v57;
  int v58;
  int v59;
  int v60;
  std::string::size_type v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::string *v70;
  char *v71;
  _BOOL4 v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  _BOOL4 v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  int v104;
  uint64_t *v105;
  uint64_t *v106;
  _QWORD **v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  std::recursive_mutex *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  NSObject *v141;
  const char *v142;
  void *exception;
  std::string *p_p;
  void *v145;
  std::vector<std::string> *v146;
  std::__shared_weak_count *v147;
  std::__shared_weak_count *v148;
  uint64_t v150;
  std::__shared_weak_count *v151;
  std::string __p;
  uint64_t v153;
  std::__shared_weak_count *v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  void *v157;
  std::string::size_type v158;
  unsigned __int8 v159;
  std::string __str;
  uint64_t v161;
  std::__shared_weak_count *v162;
  __int128 v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  std::string *v172;
  std::__shared_weak_count *v173;
  char *__stringp;
  void *v175;
  uint64_t *v176;
  uint8_t buf[23];
  char v178;
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
  if ((a5 & 1) != 0)
  {
    SharedObjectPool::get_if<FrontendEnvironment>(&__p, a2);
    if (__p.__r_.__value_.__r.__words[0] && *(_BYTE *)(__p.__r_.__value_.__r.__words[0] + 88))
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v7 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1DE3F6000, v7, OS_LOG_TYPE_INFO, "FE Init latency started", buf, 2u);
      }
      Diagnostics::log(6, "FE Init latency started", v8);
      v9.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 272) + 88))(*(_QWORD *)(a1 + 272));
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v10 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
      {
        v11.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        *(_DWORD *)buf = 134217984;
        *(double *)&buf[4] = (double)((v11.__d_.__rep_ - v9.__d_.__rep_) / 1000000) / 1000.0;
        _os_log_impl(&dword_1DE3F6000, v10, OS_LOG_TYPE_INFO, "FE Init latency %.3f s", buf, 0xCu);
      }
      v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      Diagnostics::log(6, "FE Init latency %.3f s", v13, (double)((v12.__d_.__rep_ - v9.__d_.__rep_) / 1000000) / 1000.0);
    }
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v15 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    return 0;
  }
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  v22 = *(std::__shared_weak_count **)(a1 + 288);
  v148 = v22;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = operator new();
  v26 = v25;
  v150 = a2;
  v151 = a3;
  if (a3)
  {
    v27 = (unint64_t *)&a3->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  if (v22)
  {
    v29 = (unint64_t *)&v22->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v147 = v22;
  *(_QWORD *)v25 = &off_1EA91CCD0;
  *(_OWORD *)(v25 + 8) = 0u;
  *(_OWORD *)(v25 + 40) = 0u;
  v31 = (FrontendEnvironment **)(v25 + 40);
  *(_OWORD *)(v25 + 56) = 0u;
  *(_OWORD *)(v25 + 72) = 0u;
  *(_QWORD *)(v25 + 112) = 0;
  v146 = (std::vector<std::string> *)(v25 + 112);
  *(_QWORD *)(v25 + 144) = 0;
  *(_QWORD *)(v25 + 120) = 0;
  *(_QWORD *)(v25 + 128) = 0;
  *(_QWORD *)(v25 + 136) = v25 + 144;
  *(_QWORD *)(v25 + 152) = 0;
  *(_QWORD *)(v25 + 160) = 0;
  *(_OWORD *)(v25 + 24) = 0u;
  *(_OWORD *)(v25 + 88) = 0u;
  *(_QWORD *)(v25 + 168) = 0;
  *(_QWORD *)(v25 + 176) = 0;
  v32 = (char *)operator new(0xD8uLL);
  *(_OWORD *)(v32 + 8) = 0u;
  *(_QWORD *)v32 = &off_1EA933BD8;
  *(_OWORD *)(v32 + 40) = 0u;
  *(_OWORD *)(v32 + 56) = 0u;
  *(_OWORD *)(v32 + 72) = 0u;
  *(_OWORD *)(v32 + 88) = 0u;
  *((_QWORD *)v32 + 13) = 0;
  *(_OWORD *)(v32 + 24) = 0u;
  *(_OWORD *)(v32 + 120) = 0u;
  *(_OWORD *)(v32 + 136) = 0u;
  *(_OWORD *)(v32 + 152) = 0u;
  *((_OWORD *)v32 + 12) = 0u;
  v32[168] = 0;
  *((_QWORD *)v32 + 22) = 0;
  *((_QWORD *)v32 + 23) = v32 + 192;
  *((_QWORD *)v32 + 26) = v32 + 24;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v32 + 24);
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v32;
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v26 + 40, (__int128 *)&__p);
  v33 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v34 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  SharedObjectPool::get<VoiceConfig>(&__p, (__int128 **)v150);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)*v31 + 96, (__int128 *)&__p);
  v36 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v37 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  FrontendEnvironment::load_configuration(*v31);
  std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)*v31 + 16, v150, (uint64_t)v151);
  std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(v26 + 56), v150, (uint64_t)v151);
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v39 = *(std::__shared_weak_count **)(v150 + 24);
  if (v39)
  {
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v39);
    if (__p.__r_.__value_.__l.__size_)
      __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(v150 + 16);
  }
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v26 + 72, (__int128 *)&__p);
  v40 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v41 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = *(std::__shared_weak_count **)(v26 + 48);
  v161 = *(_QWORD *)(v26 + 40);
  v162 = v43;
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  SharedObjectPool::inject<FrontendEnvironment>(&v163, v150, &v161);
  v46 = (std::__shared_weak_count *)*((_QWORD *)&v163 + 1);
  if (*((_QWORD *)&v163 + 1))
  {
    v47 = (unint64_t *)(*((_QWORD *)&v163 + 1) + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = v162;
  if (v162)
  {
    v50 = (unint64_t *)&v162->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __str = *(std::string *)a4;
  v52 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v52 = __str.__r_.__value_.__l.__size_;
  if (!v52)
  {
    FrontendModuleBroker::standard_frontend_pipeline(&__p, (uint64_t)*v31);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    __str = __p;
  }
  std::string::basic_string[abi:ne180100]<0>(&v157, ",extract");
  if ((v159 & 0x80u) == 0)
    v53 = (char *)&v157 + v159;
  else
    v53 = (char *)v157 + v158;
  if ((v159 & 0x80u) == 0)
    v54 = (const std::string::value_type *)&v157;
  else
    v54 = (const std::string::value_type *)v157;
  v55 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  p_str = &__str;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    v55 = __str.__r_.__value_.__l.__size_;
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  v57 = (std::string *)((char *)p_str + v55 - 1);
  while (v53 != v54)
  {
    v59 = *(unsigned __int8 *)--v53;
    v58 = v59;
    v60 = v57->__r_.__value_.__s.__data_[0];
    v57 = (std::string *)((char *)v57 - 1);
    if (v58 != v60)
    {
      if ((v159 & 0x80u) == 0)
        v61 = v159;
      else
        v61 = v158;
      std::string::append(&__str, v54, v61);
      break;
    }
  }
  std::string::operator=((std::string *)*v31 + 2, &__str);
  v62 = *(_QWORD *)(v26 + 72);
  v64 = *((_QWORD *)*v31 + 12);
  v63 = (std::__shared_weak_count *)*((_QWORD *)*v31 + 13);
  v155 = v64;
  v156 = v63;
  if (v63)
  {
    v65 = (unint64_t *)&v63->__shared_owners_;
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 + 1, v65));
  }
  v67 = v150;
  v153 = v150;
  v154 = v151;
  if (v151)
  {
    v68 = (unint64_t *)&v151->__shared_owners_;
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v70 = &__str;
  else
    v70 = (std::string *)__str.__r_.__value_.__r.__words[0];
  v71 = strdup((const char *)v70);
  __stringp = v71;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v64 + 72))(&v175, v64, 1717790311, 2);
  if ((_BYTE)v175)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "enforce_persistent");
    buf[0] = 1;
    v72 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>((char *)&v175, (const void **)&__p.__r_.__value_.__l.__data_, buf);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v73 = __stringp;
  }
  else
  {
    v72 = 1;
    v73 = v71;
  }
  memset(&__p, 0, sizeof(__p));
  if (v73)
  {
    do
    {
      v74 = strsep(&__stringp, ",");
      v75 = MEMORY[0x1DF0ECA80](&__p, v74);
      v76 = *(unsigned __int8 *)(v75 + 23);
      if ((v76 & 0x80u) != 0)
        v76 = *(_QWORD *)(v75 + 8);
      if (!v76)
        break;
      if ((_BYTE)v175)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)buf, 0, 0, 0, 1);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>((char *)&v175, (const void **)&__p.__r_.__value_.__l.__data_, buf, (uint64_t)&v172);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&buf[8], buf[0]);
      }
      else
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v172, 0, 0, 0, 1);
      }
      v168 = v153;
      v169 = v154;
      if (v154)
      {
        v77 = (unint64_t *)&v154->__shared_owners_;
        do
          v78 = __ldxr(v77);
        while (__stxr(v78 + 1, v77));
      }
      (**(void (***)(uint64_t *__return_ptr, uint64_t, std::string *, std::string **, uint64_t *, _QWORD))v62)(&v170, v62, &__p, &v172, &v168, 0);
      v79 = v169;
      if (v169)
      {
        v80 = (unint64_t *)&v169->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      if (v170)
        v82 = 0;
      else
        v82 = v72;
      if (v82
        && std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v62 + 48), (unsigned __int8 *)&__p))
      {
        exception = __cxa_allocate_exception(0x10uLL);
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        StringFormatter::StringFormatter((StringFormatter *)buf, "Persistent Module name '%s' can't be initialized.", (const char *)p_p);
        MEMORY[0x1DF0EC99C](exception, buf);
        __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
      v83 = v171;
      if (v171)
      {
        v84 = (unint64_t *)&v171->__shared_owners_;
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v173, v172);
    }
    while (__stringp);
    v67 = v153;
  }
  free(v71);
  SharedObjectPool::get_if<TTSSynthesizer::VoiceDescription>(&v172, v67);
  if (v172 && HIDWORD(v172[2].__r_.__value_.__r.__words[1]) == 3)
  {
    if ((_BYTE)v175)
    {
      std::string::basic_string[abi:ne180100]<0>(buf, "source");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v166, 0, 0, 0, 1);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>((char *)&v175, (const void **)buf, (unsigned __int8 *)&v166, (uint64_t)&v170);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v167, v166);
      if (v178 < 0)
        operator delete(*(void **)buf);
    }
    else
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v170, 0, 0, 0, 1);
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "source");
    v164 = v67;
    v165 = v154;
    if (v154)
    {
      v86 = (unint64_t *)&v154->__shared_owners_;
      do
        v87 = __ldxr(v86);
      while (__stxr(v87 + 1, v86));
    }
    (**(void (***)(uint64_t *__return_ptr, uint64_t, uint8_t *, uint64_t *, uint64_t *, _QWORD))v62)(&v166, v62, buf, &v170, &v164, 0);
    v89 = v166;
    v88 = v167;
    if (v167)
    {
      v90 = (unint64_t *)&v167->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    v92 = v165;
    if (v165)
    {
      v93 = (unint64_t *)&v165->__shared_owners_;
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
    if (v178 < 0)
      operator delete(*(void **)buf);
    if (!v89)
    {
      v145 = __cxa_allocate_exception(0x10uLL);
      StringFormatter::StringFormatter((StringFormatter *)buf, "Persistent Module 'source' can't be initialized.");
      MEMORY[0x1DF0EC99C](v145, buf);
      __cxa_throw(v145, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v171, v170);
  }
  v95 = v173;
  if (v173)
  {
    v96 = (unint64_t *)&v173->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v176, v175);
  v98 = v154;
  if (v154)
  {
    v99 = (unint64_t *)&v154->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = v156;
  if (v156)
  {
    v102 = (unint64_t *)&v156->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v26 + 88))(v26);
  (*(void (**)(uint8_t *__return_ptr, _QWORD, uint64_t, uint64_t))(**((_QWORD **)*v31 + 12) + 72))(buf, *((_QWORD *)*v31 + 12), 1852139116, 2);
  if (buf[0])
    goto LABEL_169;
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t, uint64_t))(**((_QWORD **)*v31 + 12) + 72))(&v175, *((_QWORD *)*v31 + 12), 1852138092, 2);
  v104 = buf[0];
  buf[0] = v175;
  LOBYTE(v175) = v104;
  v105 = *(uint64_t **)&buf[8];
  *(_QWORD *)&buf[8] = v176;
  v176 = v105;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v176, v104);
  if (buf[0])
  {
LABEL_169:
    v106 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(buf, "utterances");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<std::string>,std::vector<std::string>,0>((std::vector<std::string> *)&__p, (unsigned __int8 *)v106);
    std::vector<std::string>::__vdeallocate(v146);
    *(std::string *)(v26 + 112) = __p;
    memset(&__p, 0, sizeof(__p));
    v172 = &__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v172);
  }
  else
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v141 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1DE3F6000, v141, OS_LOG_TYPE_DEFAULT, "No fallback list is loaded.", (uint8_t *)&__p, 2u);
    }
    Diagnostics::log(5, "No fallback list is loaded.", v142);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&buf[8], buf[0]);
  v107 = (_QWORD **)((char *)*v31 + 168);
  v108 = (uint64_t)*v31 + 160;
  {
    if (v107 == v109)
      v110 = 0;
    else
      v110 = v109[5] + 8;
  }
  else
  {
    *(_QWORD *)buf = &v175;
    v112 = operator new();
    *(_QWORD *)v112 = &off_1EA922CE8;
    *(_BYTE *)(v112 + 8) = 0;
    *(_DWORD *)(v112 + 12) = -1;
    v113 = v111[5];
    v111[5] = v112;
    if (v113)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v113 + 8))(v113);
      v112 = v111[5];
    }
    v110 = v112 + 8;
  }
  v114 = (std::recursive_mutex *)(v150 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(v150 + 56));
  {
    *(_OWORD *)buf = 0uLL;
    std::recursive_mutex::unlock(v114);
    goto LABEL_185;
  }
  v117 = *(_QWORD *)(*(_QWORD *)v115 + 8);
  v116 = *(std::__shared_weak_count **)(*(_QWORD *)v115 + 16);
  *(_QWORD *)buf = v117;
  *(_QWORD *)&buf[8] = v116;
  if (v116)
  {
    v118 = (unint64_t *)&v116->__shared_owners_;
    do
      v119 = __ldxr(v118);
    while (__stxr(v119 + 1, v118));
  }
  std::recursive_mutex::unlock(v114);
  if (!v117)
  {
LABEL_185:
    (*(void (**)(std::string *__return_ptr, _QWORD, uint64_t, uint64_t))(**((_QWORD **)*v31 + 12) + 16))(&__p, *((_QWORD *)*v31 + 12), 1633968500, 2);
    if (__p.__r_.__value_.__r.__words[0])
    {
      v121 = (std::__shared_weak_count *)operator new(0xD0uLL);
      v121->__shared_owners_ = 0;
      v122 = (unint64_t *)&v121->__shared_owners_;
      v121->__shared_weak_owners_ = 0;
      v121->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932908;
      AudioExtractor::AudioExtractor((AudioExtractor *)&v121[1], (const MemoryMap *)&__p, 48);
      *(_DWORD *)(v110 + 4) = v121[1].__shared_owners_;
      do
        v123 = __ldaxr(v122);
      while (__stlxr(v123 - 1, v122));
      v120 = v147;
      if (!v123)
      {
        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
        std::__shared_weak_count::__release_weak(v121);
      }
    }
    else
    {
      *(_DWORD *)(v110 + 4) = 0;
      v120 = v147;
    }
    v124 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v125 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v126 = __ldaxr(v125);
      while (__stlxr(v126 - 1, v125));
      if (!v126)
      {
        ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
        std::__shared_weak_count::__release_weak(v124);
      }
    }
    v116 = *(std::__shared_weak_count **)&buf[8];
    if (!*(_QWORD *)&buf[8])
      goto LABEL_201;
    goto LABEL_197;
  }
  *(_DWORD *)(v110 + 4) = *(_DWORD *)(*(_QWORD *)(v117 + 80) + 4);
  v120 = v147;
  if (v116)
  {
LABEL_197:
    v127 = (unint64_t *)&v116->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
LABEL_201:
  if ((char)v159 < 0)
    operator delete(v157);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v120)
  {
    v129 = (unint64_t *)&v120->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  if (v151)
  {
    v131 = (unint64_t *)&v151->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  v133 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 272) = v26;
  if (v133)
    (*(void (**)(uint64_t))(*(_QWORD *)v133 + 8))(v133);
  if (v148)
  {
    v134 = (unint64_t *)&v148->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  if (a3)
  {
    v136 = (unint64_t *)&a3->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  v138 = *(_QWORD *)(a1 + 272);
  if (!v138)
    return 4207812181;
  v139 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v138 + 16))(v138);
  result = 0;
  *(_QWORD *)(a1 + 224) = v139;
  *(_QWORD *)(a1 + 232) = v140;
  return result;
}

void sub_1DEAA2BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51)
{
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v53 - 168);
  if (a32 < 0)
    operator delete(__p);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v53 - 136), *(unsigned __int8 *)(v53 - 144));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  if (a44 < 0)
    operator delete(a39);
  if (a50 < 0)
    operator delete(a45);
  __p = a11;
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a12, *(_QWORD **)(v51 + 144));
  __p = a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v51 + 88);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a13);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a14);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v52);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v51 + 24);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a15);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  MEMORY[0x1DF0ED014](v51, 0x10A1C40C64D79E7);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

_QWORD *Agglomerate::ItemHolder<std::shared_ptr<TTSSynthesizer::VoiceDescription>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923508;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<TTSSynthesizer::VoiceDescription>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923508;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<TTSSynthesizer::VoiceDescription>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935E68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TTSSynthesizer::VoiceDescription>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935E68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<TTSSynthesizer::VoiceDescription>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

_QWORD *Agglomerate::ItemHolder<std::shared_ptr<VE_INSTALL>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923168;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<VE_INSTALL>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923168;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_pointer<VE_INSTALL *,TTSSynthesizer::TTSSynthesizerInternal::initialize(std::string const&,std::string const&,std::string const&,std::function<VE_INSTALL * ()(void)>,std::vector<TTSSynthesizer::EngineParamsOverride> const&)::$_0,std::allocator<VE_INSTALL>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_pointer<VE_INSTALL *,TTSSynthesizer::TTSSynthesizerInternal::initialize(std::string const&,std::string const&,std::string const&,std::function<VE_INSTALL * ()(void)>,std::vector<TTSSynthesizer::EngineParamsOverride> const&)::$_0,std::allocator<VE_INSTALL>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *Agglomerate::ItemHolder<std::shared_ptr<TTSSynthesizerEventBusInternal>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923488;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<TTSSynthesizerEventBusInternal>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923488;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<TTSSynthesizerEventBusInternal>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935228;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TTSSynthesizerEventBusInternal>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935228;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<TTSSynthesizerEventBusInternal>::__on_zero_shared(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 48));
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>>>::destroy(*(_QWORD **)(a1 + 32));
}

void TTSSynthesizer::TTSSynthesizerInternal::available_neural_styles(int64x2_t *this, uint64_t a2)
{
  unsigned int v2;
  BOOL v3;
  int v4;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  _QWORD *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  const void *v15;
  unint64_t *v16;
  unint64_t v17;
  const void ***v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::string *v32;
  std::string *i;
  _QWORD **v34;
  _QWORD **v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  std::string **v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  int64x2_t v49;
  std::string **v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  std::string *v63;
  std::string *v64;
  std::string *v65;
  uint64_t v66;
  _QWORD *v67;
  const void ***v68;
  std::__shared_weak_count *v69;
  std::string **v70;
  int64x2_t v71;
  std::string **v72;
  int64x2_t *v73;
  _BYTE v74[32];
  __int128 v75;
  void *__p[3];
  uint64_t v77[3];
  _QWORD v78[3];
  __int128 v79;

  *(_QWORD *)&v79 = *MEMORY[0x1E0C80C00];
  this->i64[0] = 0;
  this->i64[1] = 0;
  this[1].i64[0] = 0;
  v2 = *(_DWORD *)(a2 + 368);
  v3 = v2 > 4;
  v4 = (1 << v2) & 0x1A;
  if (!v3 && v4 != 0)
  {
    v7 = *(_QWORD *)(a2 + 280);
    v8 = *(_QWORD *)(v7 + 8);
    if (v8 != *(_QWORD *)(v7 + 16))
    {
      while (1)
      {
        v9 = *(const void **)v8;
        if (*(_QWORD *)v8)
        {
          if (!v10)
            goto LABEL_100;
          v11 = v10;
          v12 = *(std::__shared_weak_count **)(v8 + 8);
          if (v12)
          {
            p_shared_owners = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldxr(p_shared_owners);
            while (__stxr(v14 + 1, p_shared_owners));
          }
          v15 = (const void *)v10[34];
          if (v15
          {
            v57 = (std::__shared_weak_count *)v11[35];
            if (v57)
            {
              v58 = (unint64_t *)&v57->__shared_owners_;
              do
                v59 = __ldxr(v58);
              while (__stxr(v59 + 1, v58));
              do
                v60 = __ldaxr(v58);
              while (__stlxr(v60 - 1, v58));
              if (!v60)
              {
                ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                std::__shared_weak_count::__release_weak(v57);
              }
            }
            if (v12)
            {
              v61 = (unint64_t *)&v12->__shared_owners_;
              do
                v62 = __ldaxr(v61);
              while (__stlxr(v62 - 1, v61));
              if (!v62)
                goto LABEL_95;
            }
            goto LABEL_21;
          }
          if (v12)
          {
            v16 = (unint64_t *)&v12->__shared_owners_;
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 - 1, v16));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          v9 = *(const void **)v8;
          if (*(_QWORD *)v8)
          {
LABEL_100:
            {
              break;
            }
          }
        }
        v8 += 16;
        if (v8 == *(_QWORD *)(v7 + 16))
          goto LABEL_21;
      }
      v12 = *(std::__shared_weak_count **)(v8 + 8);
      if (v12)
      {
        v54 = (unint64_t *)&v12->__shared_owners_;
        do
          v55 = __ldxr(v54);
        while (__stxr(v55 + 1, v54));
        do
          v56 = __ldaxr(v54);
        while (__stlxr(v56 - 1, v54));
        if (!v56)
        {
LABEL_95:
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
LABEL_21:
    if (*(_QWORD *)(v7 + 16) == v8)
    {
      v68 = 0;
      v69 = 0;
    }
    else
    {
      v18 = *(const void ****)v8;
      if (*(_QWORD *)v8
      {
        v20 = *(std::__shared_weak_count **)(v8 + 8);
        if (v20)
        {
          v21 = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v23 = (std::__shared_weak_count *)v19[35];
        v68 = (const void ***)v19[34];
        v69 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        if (v20)
        {
          v26 = (unint64_t *)&v20->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
      }
      else
      {
        v28 = *(std::__shared_weak_count **)(v8 + 8);
        v68 = v18;
        v69 = v28;
        if (v28)
        {
          v29 = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
        }
      }
      if (v68)
      {
        std::map<std::string,std::vector<float>>::map[abi:ne180100](&v66, v68 + 99);
        std::string::basic_string[abi:ne180100]<0>(v74, "siri");
        std::string::basic_string[abi:ne180100]<0>(&v74[24], "flat");
        std::string::basic_string[abi:ne180100]<0>(__p, "fast");
        std::string::basic_string[abi:ne180100]<0>(v77, "flat style, fast duration");
        std::string::basic_string[abi:ne180100]<0>(v78, "audiobook");
        v63 = 0;
        v64 = 0;
        v65 = 0;
        v70 = &v63;
        v71.i8[0] = 0;
        v63 = (std::string *)operator new(0x78uLL);
        v64 = v63;
        v65 = v63 + 5;
        v31 = 0;
        v64 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v65, (__int128 *)v74, &v79, v63);
        do
        {
          if (SHIBYTE(v78[v31 + 2]) < 0)
            operator delete((void *)v78[v31]);
          v31 -= 3;
        }
        while (v31 != -15);
        v32 = v63;
        for (i = v64; v32 != i; ++v32)
        {
          v34 = (_QWORD **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)&v66, (const void **)&v32->__r_.__value_.__l.__data_);
          if (&v67 != v34)
          {
            v35 = v34;
            v75 = 0u;
            memset(__p, 0, sizeof(__p));
            memset(v74, 0, sizeof(v74));
            std::string::operator=((std::string *)v74, v32);
            if (__p != (void **)(v35 + 7))
              std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)__p, (char *)v35[7], (uint64_t)v35[8], ((char *)v35[8] - (char *)v35[7]) >> 2);
            std::string::operator=((std::string *)&v74[24], v32);
            v37 = this->u64[1];
            v36 = this[1].u64[0];
            if (v37 >= v36)
            {
              v39 = 0x8E38E38E38E38E39 * ((uint64_t)(v37 - this->i64[0]) >> 3);
              v40 = v39 + 1;
              if (v39 + 1 > 0x38E38E38E38E38ELL)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v41 = 0x8E38E38E38E38E39 * ((uint64_t)(v36 - this->i64[0]) >> 3);
              if (2 * v41 > v40)
                v40 = 2 * v41;
              if (v41 >= 0x1C71C71C71C71C7)
                v42 = 0x38E38E38E38E38ELL;
              else
                v42 = v40;
              v73 = this + 1;
              if (v42)
              {
                if (v42 > 0x38E38E38E38E38ELL)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v43 = (std::string **)operator new(72 * v42);
              }
              else
              {
                v43 = 0;
              }
              v70 = v43;
              v71.i64[0] = (uint64_t)&v43[9 * v39];
              v71.i64[1] = v71.i64[0];
              v72 = &v43[9 * v42];
              std::allocator<TTSSynthesizer::SpeakingStyle>::construct[abi:ne180100]<TTSSynthesizer::SpeakingStyle,TTSSynthesizer::SpeakingStyle const&>((std::string *)v71.i64[0], (__int128 *)v74);
              v44 = v71.i64[0];
              v38 = v71.i64[1] + 72;
              v71.i64[1] += 72;
              v46 = this->i64[0];
              v45 = this->u64[1];
              if (v45 == this->i64[0])
              {
                v49 = vdupq_n_s64(v45);
              }
              else
              {
                do
                {
                  v47 = *(_OWORD *)(v45 - 72);
                  *(_QWORD *)(v44 - 56) = *(_QWORD *)(v45 - 56);
                  *(_OWORD *)(v44 - 72) = v47;
                  *(_QWORD *)(v45 - 64) = 0;
                  *(_QWORD *)(v45 - 56) = 0;
                  *(_QWORD *)(v45 - 72) = 0;
                  v48 = *(_OWORD *)(v45 - 48);
                  *(_QWORD *)(v44 - 32) = *(_QWORD *)(v45 - 32);
                  *(_OWORD *)(v44 - 48) = v48;
                  *(_QWORD *)(v45 - 40) = 0;
                  *(_QWORD *)(v45 - 32) = 0;
                  *(_QWORD *)(v45 - 48) = 0;
                  *(_QWORD *)(v44 - 24) = 0;
                  *(_QWORD *)(v44 - 16) = 0;
                  *(_QWORD *)(v44 - 8) = 0;
                  *(_OWORD *)(v44 - 24) = *(_OWORD *)(v45 - 24);
                  *(_QWORD *)(v44 - 8) = *(_QWORD *)(v45 - 8);
                  v44 -= 72;
                  *(_QWORD *)(v45 - 24) = 0;
                  *(_QWORD *)(v45 - 16) = 0;
                  *(_QWORD *)(v45 - 8) = 0;
                  v45 -= 72;
                }
                while (v45 != v46);
                v49 = *this;
                v38 = v71.i64[1];
              }
              this->i64[0] = v44;
              this->i64[1] = v38;
              v71 = v49;
              v50 = (std::string **)this[1].i64[0];
              this[1].i64[0] = (uint64_t)v72;
              v72 = v50;
              v70 = (std::string **)v49.i64[0];
              std::__split_buffer<TTSSynthesizer::SpeakingStyle>::~__split_buffer((uint64_t)&v70);
            }
            else
            {
              std::allocator<TTSSynthesizer::SpeakingStyle>::construct[abi:ne180100]<TTSSynthesizer::SpeakingStyle,TTSSynthesizer::SpeakingStyle const&>((std::string *)this->i64[1], (__int128 *)v74);
              v38 = v37 + 72;
              this->i64[1] = v38;
            }
            this->i64[1] = v38;
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            if (SHIBYTE(v75) < 0)
              operator delete(*(void **)&v74[24]);
            if ((v74[23] & 0x80000000) != 0)
              operator delete(*(void **)v74);
          }
        }
        *(_QWORD *)v74 = &v63;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v74);
        std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v67);
      }
    }
    v51 = v69;
    if (v69)
    {
      v52 = (unint64_t *)&v69->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
  }
}

void sub_1DEAA3818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8, ...)
{
  uint64_t v9;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  void **v13;
  va_list va1;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va2;

  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, void **);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  v9 = 0;
  while (1)
  {
    if (SHIBYTE(((void ***)va2)[v9 + 14]) < 0)
      operator delete(((void ***)va2)[v9 + 12]);
    v9 -= 3;
    if (v9 == -15)
    {
      std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(a7);
      std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
      std::vector<TTSSynthesizer::SpeakingStyle>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
      _Unwind_Resume(a1);
    }
  }
}

void std::vector<TTSSynthesizer::SpeakingStyle>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::allocator<TTSSynthesizer::SpeakingStyle>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<TTSSynthesizer::SpeakingStyle>::destroy[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_QWORD *std::allocator<TTSSynthesizer::SpeakingStyle>::construct[abi:ne180100]<TTSSynthesizer::SpeakingStyle,TTSSynthesizer::SpeakingStyle const&>(std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(this[2].__r_.__value_.__r.__words, *((const void **)a2 + 6), *((_QWORD *)a2 + 7), (uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 2);
}

void sub_1DEAA3A54(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void TTSSynthesizer::SpeakingStyle::~SpeakingStyle(TTSSynthesizer::SpeakingStyle *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

uint64_t std::__split_buffer<TTSSynthesizer::SpeakingStyle>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 72;
    std::allocator<TTSSynthesizer::SpeakingStyle>::destroy[abi:ne180100](i - 72);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(uint64_t a1, uint64_t a2, std::string::size_type a3, std::string::size_type a4, std::string::size_type a5, uint64_t a6)
{
  _QWORD *v12;
  NSObject *v13;
  std::string *v14;
  const char *v15;
  std::string *v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  std::recursive_mutex *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  __int128 v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  std::recursive_mutex *v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  __int128 v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *size;
  unint64_t *v97;
  unint64_t v98;
  int v99;
  std::string *v100;
  std::string *v101;
  uint64_t v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  std::recursive_mutex *v106;
  uint64_t *v107;
  uint64_t v108;
  __int128 v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  _QWORD *v114;
  unint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  std::string::size_type v133;
  uint64_t v134;
  std::string::size_type v135;
  char *v136;
  unint64_t *v137;
  uint64_t *v138;
  uint64_t v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  uint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  uint64_t v145;
  NSObject *v146;
  const char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  NSObject *v153;
  const char *v154;
  std::string::size_type v155;
  char *v156;
  unint64_t *v157;
  uint64_t *v158;
  uint64_t v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  std::string::size_type v172;
  std::string *v173;
  _QWORD *v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  std::__shared_weak_count *v184;
  uint64_t v185;
  unint64_t *v186;
  unint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  unint64_t *v191;
  unint64_t v192;
  __int128 v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  _QWORD *v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  unint64_t *v220;
  std::string::size_type v221;
  std::string::size_type v222;
  int *v223;
  __int128 v224;
  unint64_t *v225;
  unint64_t v226;
  uint64_t v227;
  std::mutex *v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  NSObject *v233;
  const char *v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  uint64_t *v239;
  uint64_t v240;
  std::__shared_weak_count *v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  uint64_t v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  std::string *v254;
  uint64_t (*v255)(uint64_t, uint64_t, uint64_t, uint64_t);
  int v256;
  uint64_t v257;
  uint64_t v258;
  __int128 v259;
  _QWORD *v260;
  std::__shared_weak_count *v261;
  __int128 v262;
  __int128 v263;
  uint64_t v264;
  std::__shared_weak_count *v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  std::string buf;
  _BYTE v275[24];
  _BYTE *v276;
  _BYTE v277[24];
  _BYTE *v278;
  std::string v279;
  std::string *v280;
  uint64_t v281;

  v281 = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  v12 = &unk_1F044B000;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v13 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    Censor::global_plaintext(&v279, a2);
    v14 = (v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v279
        : (std::string *)v279.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v14;
    _os_log_impl(&dword_1DE3F6000, v13, OS_LOG_TYPE_DEFAULT, "Start synthesizing text: '%s'", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v279.__r_.__value_.__l.__data_);
  }
  Censor::global_plaintext(&v279, a2);
  if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v279;
  else
    v16 = (std::string *)v279.__r_.__value_.__r.__words[0];
  Diagnostics::log(5, "Start synthesizing text: '%s'", v15, v16);
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v279.__r_.__value_.__l.__data_);
  v273 = 0uLL;
  if (*(_BYTE *)(a1 + 680))
  {
    v17 = *(uint64_t **)(a1 + 240);
    v18 = *v17;
    v19 = (std::__shared_weak_count *)v17[1];
    buf.__r_.__value_.__r.__words[0] = *v17;
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
    std::allocate_shared[abi:ne180100]<SharedObjectPool,std::allocator<SharedObjectPool>,std::shared_ptr<Environment> &,void>(&v279, v18, v19);
    v22 = *(_OWORD *)&v279.__r_.__value_.__l.__data_;
    *(_OWORD *)&v279.__r_.__value_.__l.__data_ = 0uLL;
    v273 = v22;
    v23 = v22;
    SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(&v271, *(_QWORD *)(a1 + 240));
    SharedObjectPool::inject<TTSSynthesizerEventBusInternal>(&v272, v23, &v271);
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v272 + 1);
    if (*((_QWORD *)&v272 + 1))
    {
      v25 = (unint64_t *)(*((_QWORD *)&v272 + 1) + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = (std::__shared_weak_count *)*((_QWORD *)&v271 + 1);
    if (*((_QWORD *)&v271 + 1))
    {
      v28 = (unint64_t *)(*((_QWORD *)&v271 + 1) + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v30 = v273;
    SharedObjectPool::get<VoiceConfig>(&v270, *(__int128 ***)(a1 + 240));
    v31 = (std::recursive_mutex *)(v30 + 56);
    std::recursive_mutex::lock((std::recursive_mutex *)(v30 + 56));
    v279.__r_.__value_.__r.__words[0] = (std::string::size_type)&v254;
    v33 = v32[5];
    if (v33)
    {
      v279.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA9231A8;
      *(_OWORD *)&v279.__r_.__value_.__r.__words[1] = v270;
      if (*((_QWORD *)&v270 + 1))
      {
        v34 = (unint64_t *)(*((_QWORD *)&v270 + 1) + 8);
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v33 + 8, (__int128 *)&v279.__r_.__value_.__r.__words[1]);
      v279.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA9231A8;
      v36 = (std::__shared_weak_count *)v279.__r_.__value_.__r.__words[2];
      if (v279.__r_.__value_.__r.__words[2])
      {
        v37 = (unint64_t *)(v279.__r_.__value_.__r.__words[2] + 8);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
    }
    else
    {
      v39 = operator new();
      v40 = v270;
      *(_QWORD *)v39 = &off_1EA9231A8;
      *(_OWORD *)(v39 + 8) = v40;
      if (*((_QWORD *)&v40 + 1))
      {
        v41 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      v43 = v32[5];
      v32[5] = v39;
      if (v43)
        (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    }
    v44 = (std::__shared_weak_count *)*((_QWORD *)&v270 + 1);
    v270 = 0uLL;
    std::recursive_mutex::unlock(v31);
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v47 = (std::__shared_weak_count *)*((_QWORD *)&v270 + 1);
    if (*((_QWORD *)&v270 + 1))
    {
      v48 = (unint64_t *)(*((_QWORD *)&v270 + 1) + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v50 = v273;
    v52 = *(_QWORD *)(a1 + 256);
    v51 = *(_QWORD *)(a1 + 264);
    if (v51)
    {
      v53 = (unint64_t *)(v51 + 16);
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    v55 = *(std::__shared_weak_count **)(v50 + 24);
    *(_QWORD *)(v50 + 16) = v52;
    *(_QWORD *)(v50 + 24) = v51;
    if (v55)
    {
      std::__shared_weak_count::__release_weak(v55);
      v50 = v273;
    }
    SharedObjectPool::get<SynthesizerConfig>(&v269, *(_QWORD *)(a1 + 240));
    v56 = (std::recursive_mutex *)(v50 + 56);
    std::recursive_mutex::lock((std::recursive_mutex *)(v50 + 56));
    v279.__r_.__value_.__r.__words[0] = (std::string::size_type)&v254;
    v58 = v57[5];
    if (v58)
    {
      v279.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA9233A8;
      *(_OWORD *)&v279.__r_.__value_.__r.__words[1] = v269;
      if (*((_QWORD *)&v269 + 1))
      {
        v59 = (unint64_t *)(*((_QWORD *)&v269 + 1) + 8);
        do
          v60 = __ldxr(v59);
        while (__stxr(v60 + 1, v59));
      }
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v58 + 8, (__int128 *)&v279.__r_.__value_.__r.__words[1]);
      v279.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA9233A8;
      v61 = (std::__shared_weak_count *)v279.__r_.__value_.__r.__words[2];
      if (v279.__r_.__value_.__r.__words[2])
      {
        v62 = (unint64_t *)(v279.__r_.__value_.__r.__words[2] + 8);
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
    }
    else
    {
      v64 = operator new();
      v65 = v269;
      *(_QWORD *)v64 = &off_1EA9233A8;
      *(_OWORD *)(v64 + 8) = v65;
      if (*((_QWORD *)&v65 + 1))
      {
        v66 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
      }
      v68 = v57[5];
      v57[5] = v64;
      if (v68)
        (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
    }
    v69 = (std::__shared_weak_count *)*((_QWORD *)&v269 + 1);
    v269 = 0uLL;
    std::recursive_mutex::unlock(v56);
    if (v69)
    {
      v70 = (unint64_t *)&v69->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    v72 = (std::__shared_weak_count *)*((_QWORD *)&v269 + 1);
    if (*((_QWORD *)&v269 + 1))
    {
      v73 = (unint64_t *)(*((_QWORD *)&v269 + 1) + 8);
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
    v75 = v273;
    SharedObjectPool::get_if<EspressoWaveRNNANEStatus>(&v267, *(_QWORD *)(a1 + 240));
    SharedObjectPool::inject<EspressoWaveRNNANEStatus>(&v268, v75, &v267);
    v76 = (std::__shared_weak_count *)*((_QWORD *)&v268 + 1);
    if (*((_QWORD *)&v268 + 1))
    {
      v77 = (unint64_t *)(*((_QWORD *)&v268 + 1) + 8);
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    v79 = (std::__shared_weak_count *)*((_QWORD *)&v267 + 1);
    if (*((_QWORD *)&v267 + 1))
    {
      v80 = (unint64_t *)(*((_QWORD *)&v267 + 1) + 8);
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    v82 = v273;
    SharedObjectPool::get_if<FrontendEnvironment>(&v264, *(_QWORD *)(a1 + 240));
    SharedObjectPool::inject<FrontendEnvironment>(&v266, v82, &v264);
    v83 = (std::__shared_weak_count *)*((_QWORD *)&v266 + 1);
    if (*((_QWORD *)&v266 + 1))
    {
      v84 = (unint64_t *)(*((_QWORD *)&v266 + 1) + 8);
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
    v86 = v265;
    if (v265)
    {
      v87 = (unint64_t *)&v265->__shared_owners_;
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
    v89 = v273;
    SharedObjectPool::get_if<TTSSynthesizer::VoiceDescription>(&v262, *(_QWORD *)(a1 + 240));
    SharedObjectPool::inject<TTSSynthesizer::VoiceDescription>(&v263, v89, &v262);
    v90 = (std::__shared_weak_count *)*((_QWORD *)&v263 + 1);
    if (*((_QWORD *)&v263 + 1))
    {
      v91 = (unint64_t *)(*((_QWORD *)&v263 + 1) + 8);
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
    }
    v93 = (std::__shared_weak_count *)*((_QWORD *)&v262 + 1);
    if (*((_QWORD *)&v262 + 1))
    {
      v94 = (unint64_t *)(*((_QWORD *)&v262 + 1) + 8);
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v95 - 1, v94));
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    if (buf.__r_.__value_.__l.__size_)
    {
      v97 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
      do
        v98 = __ldaxr(v97);
      while (__stlxr(v98 - 1, v97));
      if (!v98)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  else
  {
    std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](&v273, *(_QWORD *)(a1 + 240), *(_QWORD *)(a1 + 248));
  }
  GryphonDebugging::latest_pool_ptr = v273;
  v99 = *(_DWORD *)(a1 + 368);
  v100 = (std::string *)operator new();
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)&v279, a6);
  TTSSynthesizerCallbackResult::TTSSynthesizerCallbackResult(v100, (__int128 *)a2, a3, a4, a5, (uint64_t)&v279, v99 == 2);
  v101 = v280;
  if (v280 == &v279)
  {
    v102 = 4;
    v101 = &v279;
  }
  else
  {
    if (!v280)
      goto LABEL_122;
    v102 = 5;
  }
  (*(void (**)(void))(v101->__r_.__value_.__r.__words[0] + 8 * v102))();
LABEL_122:
  v103 = v273;
  v104 = (std::__shared_weak_count *)operator new(0x38uLL);
  v104->__shared_owners_ = 0;
  v105 = (unint64_t *)&v104->__shared_owners_;
  v104->__shared_weak_owners_ = 0;
  v104->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936A70;
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)&v104[1], (uint64_t)&v100[5].__r_.__value_.__r.__words[2]);
  v260 = &v104[1].__vftable;
  v261 = v104;
  v106 = (std::recursive_mutex *)(v103 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(v103 + 56));
  v279.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
  v108 = v107[5];
  if (v108)
  {
    *(_QWORD *)&v109 = v104 + 1;
    *((_QWORD *)&v109 + 1) = v104;
    do
      v110 = __ldxr(v105);
    while (__stxr(v110 + 1, v105));
    v111 = *(std::__shared_weak_count **)(v108 + 16);
    *(_OWORD *)(v108 + 8) = v109;
    if (v111)
    {
      v112 = (unint64_t *)&v111->__shared_owners_;
      do
        v113 = __ldaxr(v112);
      while (__stlxr(v113 - 1, v112));
      if (!v113)
      {
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
      }
    }
  }
  else
  {
    v114 = (_QWORD *)operator new();
    *v114 = &off_1EA9235C8;
    v114[1] = v104 + 1;
    v114[2] = v104;
    do
      v115 = __ldxr(v105);
    while (__stxr(v115 + 1, v105));
    v116 = v107[5];
    v107[5] = (uint64_t)v114;
    if (v116)
      (*(void (**)(uint64_t))(*(_QWORD *)v116 + 8))(v116);
  }
  v117 = v261;
  v260 = 0;
  v261 = 0;
  std::recursive_mutex::unlock(v106);
  if (v117)
  {
    v118 = (unint64_t *)&v117->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = v261;
  if (v261)
  {
    v121 = (unint64_t *)&v261->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  if (*(_BYTE *)(a1 + 680))
  {
    v123 = (std::__shared_weak_count *)*((_QWORD *)&v273 + 1);
    v259 = v273;
    if (*((_QWORD *)&v273 + 1))
    {
      v124 = (unint64_t *)(*((_QWORD *)&v273 + 1) + 8);
      do
        v125 = __ldxr(v124);
      while (__stxr(v125 + 1, v124));
    }
    v126 = TTSSynthesizer::TTSSynthesizerInternal::build_pipeline(a1, (uint64_t *)&v259, 1);
    v127 = v126;
    if (!v123)
      goto LABEL_152;
    v128 = (unint64_t *)&v123->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
      if (v127)
        goto LABEL_314;
    }
    else
    {
LABEL_152:
      if (v126)
        goto LABEL_314;
    }
  }
  v130 = *(_QWORD *)(a1 + 280);
  if (v130)
    (*(void (**)(uint64_t))(*(_QWORD *)v130 + 48))(v130);
  v131 = *(_QWORD *)(a1 + 296);
  if (v131)
    (*(void (**)(uint64_t))(*(_QWORD *)v131 + 48))(v131);
  v132 = a1 + 280;
  v239 = (uint64_t *)(a1 + 296);
  if (*(_QWORD *)(a1 + 280) || *(_QWORD *)(a1 + 272))
  {
    v256 = 1;
    v257 = 0;
    v258 = 0;
    v133 = v100[6].__r_.__value_.__r.__words[2];
    if (!v133)
      goto LABEL_322;
    (*(void (**)(std::string::size_type, int *))(*(_QWORD *)v133 + 48))(v133, &v256);
    if (v100[7].__r_.__value_.__r.__words[2])
      goto LABEL_286;
    v134 = *(_QWORD *)(a1 + 272);
    if (v134)
    {
      if (!*v239)
      {
        std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v275, (uint64_t)&v100[5].__r_.__value_.__r.__words[2]);
        (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v134 + 24))(v134, a2, v275);
        v165 = v276;
        if (v276 == v275)
        {
          v166 = 4;
          v165 = v275;
        }
        else
        {
          if (!v276)
            goto LABEL_285;
          v166 = 5;
        }
        (*(void (**)(void))(*v165 + 8 * v166))();
        goto LABEL_285;
      }
      v135 = (std::string::size_type)operator new(0x30uLL);
      *(_OWORD *)(v135 + 8) = 0u;
      *(_OWORD *)(v135 + 32) = 0u;
      *(_QWORD *)v135 = &off_1EA932198;
      *(_QWORD *)(v135 + 24) = v135 + 32;
      buf.__r_.__value_.__r.__words[0] = v135 + 24;
      buf.__r_.__value_.__l.__size_ = v135;
      v136 = (char *)operator new(0x50uLL);
      *((_QWORD *)v136 + 1) = 0;
      v137 = (unint64_t *)(v136 + 8);
      *((_QWORD *)v136 + 2) = 0;
      *(_OWORD *)(v136 + 24) = 0u;
      *(_QWORD *)v136 = &off_1EA932588;
      *(_OWORD *)(v136 + 40) = 0u;
      *(_OWORD *)(v136 + 56) = 0u;
      *((_QWORD *)v136 + 9) = 0;
      v254 = (std::string *)(v136 + 24);
      v255 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v136;
      std::string::operator=((std::string *)v136 + 1, (const std::string *)a2);
      v279.__r_.__value_.__r.__words[0] = (std::string::size_type)&v252;
      v139 = v138[5];
      if (v139)
      {
        v279.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA9231E8;
        v279.__r_.__value_.__l.__size_ = (std::string::size_type)(v136 + 24);
        v279.__r_.__value_.__r.__words[2] = (std::string::size_type)v136;
        do
          v140 = __ldxr(v137);
        while (__stxr(v140 + 1, v137));
        std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v139 + 8, (__int128 *)&v279.__r_.__value_.__r.__words[1]);
        v279.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA9231E8;
        v141 = (std::__shared_weak_count *)v279.__r_.__value_.__r.__words[2];
        v12 = (_QWORD *)&unk_1F044B000;
        v142 = a1 + 296;
        if (v279.__r_.__value_.__r.__words[2])
        {
          v143 = (unint64_t *)(v279.__r_.__value_.__r.__words[2] + 8);
          do
            v144 = __ldaxr(v143);
          while (__stlxr(v144 - 1, v143));
          if (!v144)
          {
            ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
            std::__shared_weak_count::__release_weak(v141);
          }
        }
        v135 = buf.__r_.__value_.__l.__size_;
        v145 = *v239;
        v253 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
        if (!buf.__r_.__value_.__l.__size_)
        {
LABEL_217:
          (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v145 + 32))(v145, &v253);
          v179 = (std::__shared_weak_count *)*((_QWORD *)&v253 + 1);
          if (*((_QWORD *)&v253 + 1))
          {
            v180 = (unint64_t *)(*((_QWORD *)&v253 + 1) + 8);
            do
              v181 = __ldaxr(v180);
            while (__stlxr(v181 - 1, v180));
            if (!v181)
            {
              ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
              std::__shared_weak_count::__release_weak(v179);
            }
          }
          (*(void (**)(std::string *__return_ptr))(**(_QWORD **)v142 + 56))(&v279);
          v182 = v279.__r_.__value_.__r.__words[0];
          while (v279.__r_.__value_.__r.__words[0])
          {
            v185 = *(_QWORD *)(*(_QWORD *)v183 + 8);
            v184 = *(std::__shared_weak_count **)(*(_QWORD *)v183 + 16);
            *(_QWORD *)&v252 = v185;
            *((_QWORD *)&v252 + 1) = v184;
            if (v184)
            {
              v186 = (unint64_t *)&v184->__shared_owners_;
              do
                v187 = __ldxr(v186);
              while (__stxr(v187 + 1, v186));
            }
            v188 = *(_QWORD *)(a1 + 272);
            std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v277, (uint64_t)&v100[5].__r_.__value_.__r.__words[2]);
            (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v188 + 24))(v188, v185, v277);
            v189 = v278;
            if (v278 == v277)
            {
              v189 = v277;
              v190 = 4;
            }
            else
            {
              if (!v278)
                goto LABEL_231;
              v190 = 5;
            }
            (*(void (**)(void))(*v189 + 8 * v190))();
LABEL_231:
            if (v184)
            {
              v191 = (unint64_t *)&v184->__shared_owners_;
              do
                v192 = __ldaxr(v191);
              while (__stlxr(v192 - 1, v191));
              if (!v192)
              {
                ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
                std::__shared_weak_count::__release_weak(v184);
              }
            }
            (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)v142 + 56))(&v252);
            v193 = v252;
            v252 = 0uLL;
            v194 = (std::__shared_weak_count *)v279.__r_.__value_.__l.__size_;
            *(_OWORD *)&v279.__r_.__value_.__l.__data_ = v193;
            if (v194)
            {
              v195 = (unint64_t *)&v194->__shared_owners_;
              do
                v196 = __ldaxr(v195);
              while (__stlxr(v196 - 1, v195));
              if (!v196)
              {
                ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
                std::__shared_weak_count::__release_weak(v194);
              }
            }
            v197 = (std::__shared_weak_count *)*((_QWORD *)&v252 + 1);
            if (*((_QWORD *)&v252 + 1))
            {
              v198 = (unint64_t *)(*((_QWORD *)&v252 + 1) + 8);
              do
                v199 = __ldaxr(v198);
              while (__stlxr(v199 - 1, v198));
              if (!v199)
              {
                ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
                std::__shared_weak_count::__release_weak(v197);
              }
            }
            v182 = v279.__r_.__value_.__r.__words[0];
          }
          v200 = (std::__shared_weak_count *)v279.__r_.__value_.__l.__size_;
          if (v279.__r_.__value_.__l.__size_)
          {
            v201 = (unint64_t *)(v279.__r_.__value_.__l.__size_ + 8);
            do
              v202 = __ldaxr(v201);
            while (__stlxr(v202 - 1, v201));
            if (!v202)
            {
              ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
              std::__shared_weak_count::__release_weak(v200);
            }
          }
          v203 = (std::__shared_weak_count *)v255;
          if (v255)
          {
            v204 = (unint64_t *)((char *)v255 + 8);
            do
              v205 = __ldaxr(v204);
            while (__stlxr(v205 - 1, v204));
            if (!v205)
            {
              ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
              std::__shared_weak_count::__release_weak(v203);
            }
          }
          v206 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
          if (buf.__r_.__value_.__l.__size_)
          {
            v207 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
            do
              v208 = __ldaxr(v207);
            while (__stlxr(v208 - 1, v207));
            goto LABEL_283;
          }
          goto LABEL_285;
        }
      }
      else
      {
        v174 = (_QWORD *)operator new();
        *v174 = &off_1EA9231E8;
        v174[1] = v136 + 24;
        v174[2] = v136;
        do
          v175 = __ldxr(v137);
        while (__stxr(v175 + 1, v137));
        v176 = v138[5];
        v138[5] = (uint64_t)v174;
        v12 = (_QWORD *)&unk_1F044B000;
        v142 = a1 + 296;
        if (v176)
          (*(void (**)(uint64_t))(*(_QWORD *)v176 + 8))(v176);
        v145 = *v239;
        *(_QWORD *)&v253 = v135 + 24;
        *((_QWORD *)&v253 + 1) = v135;
      }
      v177 = (unint64_t *)(v135 + 8);
      do
        v178 = __ldxr(v177);
      while (__stxr(v178 + 1, v177));
      goto LABEL_217;
    }
    if (!*(_QWORD *)v132)
      goto LABEL_285;
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v153 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v279.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1DE3F6000, v153, OS_LOG_TYPE_DEFAULT, "Detected Wrapped Legacy FE in runtime.", (uint8_t *)&v279, 2u);
    }
    Diagnostics::log(5, "Detected Wrapped Legacy FE in runtime.", v154);
    v155 = (std::string::size_type)operator new(0x30uLL);
    *(_OWORD *)(v155 + 8) = 0u;
    *(_OWORD *)(v155 + 32) = 0u;
    *(_QWORD *)v155 = &off_1EA932198;
    *(_QWORD *)(v155 + 24) = v155 + 32;
    buf.__r_.__value_.__r.__words[0] = v155 + 24;
    buf.__r_.__value_.__l.__size_ = v155;
    v156 = (char *)operator new(0x50uLL);
    *((_QWORD *)v156 + 1) = 0;
    v157 = (unint64_t *)(v156 + 8);
    *((_QWORD *)v156 + 2) = 0;
    *(_OWORD *)(v156 + 24) = 0u;
    *(_QWORD *)v156 = &off_1EA932588;
    *(_OWORD *)(v156 + 40) = 0u;
    *(_OWORD *)(v156 + 56) = 0u;
    *((_QWORD *)v156 + 9) = 0;
    v254 = (std::string *)(v156 + 24);
    v255 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v156;
    std::string::operator=((std::string *)v156 + 1, (const std::string *)a2);
    v279.__r_.__value_.__r.__words[0] = (std::string::size_type)&v252;
    v159 = v158[5];
    if (v159)
    {
      v279.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA9231E8;
      v279.__r_.__value_.__l.__size_ = (std::string::size_type)(v156 + 24);
      v279.__r_.__value_.__r.__words[2] = (std::string::size_type)v156;
      do
        v160 = __ldxr(v157);
      while (__stxr(v160 + 1, v157));
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v159 + 8, (__int128 *)&v279.__r_.__value_.__r.__words[1]);
      v279.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA9231E8;
      v161 = (std::__shared_weak_count *)v279.__r_.__value_.__r.__words[2];
      if (v279.__r_.__value_.__r.__words[2])
      {
        v162 = (unint64_t *)(v279.__r_.__value_.__r.__words[2] + 8);
        do
          v163 = __ldaxr(v162);
        while (__stlxr(v163 - 1, v162));
        if (!v163)
        {
          ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
          std::__shared_weak_count::__release_weak(v161);
        }
      }
      v155 = buf.__r_.__value_.__l.__size_;
      v164 = *(_QWORD *)v132;
      v251 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      if (!buf.__r_.__value_.__l.__size_)
      {
LABEL_270:
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v164 + 32))(v164, &v251);
        v214 = (std::__shared_weak_count *)*((_QWORD *)&v251 + 1);
        if (*((_QWORD *)&v251 + 1))
        {
          v215 = (unint64_t *)(*((_QWORD *)&v251 + 1) + 8);
          do
            v216 = __ldaxr(v215);
          while (__stlxr(v216 - 1, v215));
          if (!v216)
          {
            ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
            std::__shared_weak_count::__release_weak(v214);
          }
        }
        v217 = (std::__shared_weak_count *)v255;
        if (v255)
        {
          v218 = (unint64_t *)((char *)v255 + 8);
          do
            v219 = __ldaxr(v218);
          while (__stlxr(v219 - 1, v218));
          if (!v219)
          {
            ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
            std::__shared_weak_count::__release_weak(v217);
          }
        }
        v206 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
        if (buf.__r_.__value_.__l.__size_)
        {
          v220 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
          do
            v208 = __ldaxr(v220);
          while (__stlxr(v208 - 1, v220));
LABEL_283:
          if (!v208)
          {
            ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
            std::__shared_weak_count::__release_weak(v206);
          }
        }
LABEL_285:
        if (!v100[7].__r_.__value_.__r.__words[2])
        {
          v242 = 2;
          v243 = 0;
          v244 = 0;
          v222 = v100[6].__r_.__value_.__r.__words[2];
          if (v222)
          {
            v223 = &v242;
LABEL_289:
            (*(void (**)(std::string::size_type, int *))(*(_QWORD *)v222 + 48))(v222, v223);
            do
            {
              while (1)
              {
                (*(void (**)(std::string *__return_ptr))(**(_QWORD **)v132 + 56))(&v279);
                v224 = *(_OWORD *)&v279.__r_.__value_.__l.__data_;
                if (v279.__r_.__value_.__l.__size_)
                {
                  v225 = (unint64_t *)(v279.__r_.__value_.__l.__size_ + 8);
                  do
                    v226 = __ldaxr(v225);
                  while (__stlxr(v226 - 1, v225));
                  if (!v226)
                    break;
                }
                if (!(_QWORD)v224)
                  goto LABEL_297;
              }
              (*(void (**)(_QWORD))(**((_QWORD **)&v224 + 1) + 16))(*((_QWORD *)&v224 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v224 + 1));
            }
            while ((_QWORD)v224);
            goto LABEL_297;
          }
LABEL_322:
          std::__throw_bad_function_call[abi:ne180100]();
        }
LABEL_286:
        v248 = 3;
        v249 = 0;
        v250 = 0;
        v221 = v100[6].__r_.__value_.__r.__words[2];
        if (v221)
        {
          (*(void (**)(std::string::size_type, int *))(*(_QWORD *)v221 + 48))(v221, &v248);
          v245 = 2;
          v246 = 0;
          v247 = 0;
          v222 = v100[6].__r_.__value_.__r.__words[2];
          if (v222)
          {
            v223 = &v245;
            goto LABEL_289;
          }
        }
        goto LABEL_322;
      }
    }
    else
    {
      v209 = (_QWORD *)operator new();
      *v209 = &off_1EA9231E8;
      v209[1] = v156 + 24;
      v209[2] = v156;
      do
        v210 = __ldxr(v157);
      while (__stxr(v210 + 1, v157));
      v211 = v158[5];
      v158[5] = (uint64_t)v209;
      if (v211)
        (*(void (**)(uint64_t))(*(_QWORD *)v211 + 8))(v211);
      v164 = *(_QWORD *)v132;
      *(_QWORD *)&v251 = v155 + 24;
      *((_QWORD *)&v251 + 1) = v155;
    }
    v212 = (unint64_t *)(v155 + 8);
    do
      v213 = __ldxr(v212);
    while (__stxr(v213 + 1, v212));
    goto LABEL_270;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v146 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v279.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1DE3F6000, v146, OS_LOG_TYPE_DEBUG, "Detected vocalizer voice in runtime.", (uint8_t *)&v279, 2u);
  }
  Diagnostics::log(7, "Detected vocalizer voice in runtime.", v147);
  v254 = v100;
  v255 = ve_synthesis_callback;
  v100[7].__r_.__value_.__r.__words[2] = ve_ttsSetOutDevice(*(_QWORD *)(a1 + 224), *(_QWORD *)(a1 + 232), (uint64_t)&v254, v148, v149, v150, v151, v152);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v279, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v279 = *(std::string *)a2;
  TTSSynthesizer::TTSSynthesizerInternal::normalize(&buf, (std::string::value_type *)&v279);
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v279.__r_.__value_.__l.__data_);
  v279 = buf;
  TTSSynthesizer::TTSSynthesizerInternal::preprocess_for_vendor_voice(&buf, a1, (uint64_t)&v279, v167, v168, v169, v170, v171);
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v279.__r_.__value_.__l.__data_);
  v279 = buf;
  LODWORD(buf.__r_.__value_.__l.__data_) = 0;
  v172 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v172 = LODWORD(v279.__r_.__value_.__r.__words[1]);
  v173 = &v279;
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v173 = (std::string *)v279.__r_.__value_.__r.__words[0];
  buf.__r_.__value_.__l.__size_ = v172;
  buf.__r_.__value_.__r.__words[2] = (std::string::size_type)v173;
  v100[7].__r_.__value_.__r.__words[2] = ve_ttsProcessText2Speech(*(_QWORD *)(a1 + 224), *(_QWORD *)(a1 + 232), (uint64_t)&buf);
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v279.__r_.__value_.__l.__data_);
LABEL_297:
  v227 = v273;
  std::recursive_mutex::lock((std::recursive_mutex *)(v273 + 56));
  std::recursive_mutex::unlock((std::recursive_mutex *)(v227 + 56));
  if (*(_BYTE *)(a1 + 680))
  {
    v228 = (std::mutex *)(a1 + 616);
    std::mutex::lock((std::mutex *)(a1 + 616));
    if (*(_QWORD *)v132)
      std::shared_ptr<TokenAttributes>::reset[abi:ne180100]((_QWORD *)(a1 + 280));
    if (*v239)
      std::shared_ptr<TokenAttributes>::reset[abi:ne180100](v239);
    v229 = *(_QWORD *)(a1 + 272);
    if (v229)
    {
      v240 = 0;
      v241 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v229 + 96))(v229, &v240);
      v230 = v241;
      if (v241)
      {
        v231 = (unint64_t *)&v241->__shared_owners_;
        do
          v232 = __ldaxr(v231);
        while (__stlxr(v232 - 1, v231));
        if (!v232)
        {
          ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
          std::__shared_weak_count::__release_weak(v230);
        }
      }
    }
    std::mutex::unlock(v228);
  }
  if (v12[443] != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v233 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v279.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1DE3F6000, v233, OS_LOG_TYPE_DEFAULT, "Finished synthesis", (uint8_t *)&v279, 2u);
  }
  Diagnostics::log(5, "Finished synthesis", v234);
  kdebug_trace();
  v127 = v100[7].__r_.__value_.__r.__words[2];
LABEL_314:
  std::default_delete<TTSSynthesizerCallbackResult>::operator()[abi:ne180100]((uint64_t)v100);
  v235 = (std::__shared_weak_count *)*((_QWORD *)&v273 + 1);
  if (*((_QWORD *)&v273 + 1))
  {
    v236 = (unint64_t *)(*((_QWORD *)&v273 + 1) + 8);
    do
      v237 = __ldaxr(v236);
    while (__stlxr(v237 - 1, v236));
    if (!v237)
    {
      ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
      std::__shared_weak_count::__release_weak(v235);
    }
  }
  return v127;
}

void sub_1DEAA5184(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::default_delete<TTSSynthesizerCallbackResult>::operator()[abi:ne180100](v1);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v2 - 256);
  _Unwind_Resume(a1);
}

uint64_t ve_synthesis_callback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  const char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v28;
  uint64_t v30;
  UChar32 v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  void *v36;
  UChar32 v37;
  int isUWhiteSpace;
  unsigned int v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  __int128 *v44;
  __int128 v45;
  std::string *v46;
  __int128 v47;
  __int128 *v48;
  UChar32 v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t **v60;
  __int16 *v61;
  uint64_t v62;
  float *v63;
  uint64_t v64;
  int v65;
  uint64_t v67;
  void *v68[2];
  __int128 v69;
  __int128 __p;
  uint64_t v71;
  uint64_t v72;
  __int128 *v73;
  unint64_t v74;
  __int128 v75;

  v5 = *(_DWORD *)a4;
  if (*(int *)a4 <= 7)
  {
    if (v5 != 1)
    {
      if (v5 == 2)
      {
        v6 = *(_QWORD *)(a3 + 128);
        if (v6)
        {
          if (*(_QWORD *)(a3 + 184))
          {
            LODWORD(v68[0]) = 2;
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 48))(v6, v68);
            v6 = *(_QWORD *)(a3 + 128);
            LODWORD(v68[0]) = 1;
            if (!v6)
              std::__throw_bad_function_call[abi:ne180100]();
          }
          else
          {
            LODWORD(v68[0]) = 1;
          }
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 48))(v6, v68);
        }
      }
      goto LABEL_122;
    }
    v56 = *(_QWORD *)(a3 + 128);
    if (!v56)
      goto LABEL_122;
    LODWORD(v68[0]) = 0;
LABEL_107:
    *(_QWORD *)(a3 + 184) = (*(int (**)(uint64_t, void **))(*(_QWORD *)v56 + 48))(v56, v68);
    goto LABEL_122;
  }
  v7 = *(_QWORD *)(a4 + 8);
  if (v5 == 8)
  {
    *(_QWORD *)(v7 + 16) = *(_QWORD *)(a3 + 56);
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(a3 + 48);
    v57 = *(_QWORD *)(a3 + 80);
    *(_QWORD *)(v7 + 32) = v57;
    *(_QWORD *)(v7 + 24) = *(_QWORD *)(a3 + 88) - v57;
    v56 = *(_QWORD *)(a3 + 128);
    if (!v56 || !*(_BYTE *)(a3 + 225))
      goto LABEL_122;
    LODWORD(v68[0]) = 3;
    goto LABEL_107;
  }
  if (v5 != 16)
    goto LABEL_122;
  if (*(_BYTE *)(a3 + 225))
  {
    v8 = *(_QWORD *)(a3 + 32);
    if (v8)
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v8, *(char **)(v8 + 8), *(char **)(v7 + 16), (char *)(*(_QWORD *)(v7 + 16) + *(_QWORD *)(v7 + 8)), *(_QWORD *)(v7 + 8));
  }
  v9 = *(_QWORD *)(a3 + 128);
  if (v9 && *(_BYTE *)(a3 + 225))
  {
    LODWORD(v68[0]) = 4;
    *(_QWORD *)(a3 + 184) = (*(int (**)(uint64_t, void **))(*(_QWORD *)v9 + 48))(v9, v68);
  }
  v72 = 0;
  v73 = 0;
  v74 = 0;
  if (*(_QWORD *)(v7 + 24))
  {
    v10 = 0;
    v11 = 0;
    v67 = v7;
    v12 = (uint64_t *)(a3 + 192);
    while (1)
    {
      v13 = *(_QWORD *)(v7 + 32);
      v68[1] = 0;
      v69 = 0uLL;
      HIBYTE(v71) = 1;
      LOWORD(__p) = 0;
      v14 = *(_DWORD *)(v13 + 56 * v10);
      if (v14 == 16)
        break;
      if (v14 == 2)
      {
        LODWORD(v68[0]) = 0;
        goto LABEL_26;
      }
LABEL_88:
      v10 = ++v11;
      if (*(_QWORD *)(v7 + 24) <= (unint64_t)v11)
        goto LABEL_108;
    }
    v15 = *(const char **)(v13 + 56 * v10 + 48);
    if (!strcmp(v15, "MARKER_PROMPT"))
    {
      LODWORD(v68[0]) = 2;
    }
    else
    {
      LODWORD(v68[0]) = 1;
      if (v15)
        v16 = (char *)v15;
      else
        v16 = &byte_1DEBD87CE;
      MEMORY[0x1DF0ECA80](&__p, v16);
      if (LODWORD(v68[0]) != 2)
      {
LABEL_26:
        if (*(_BYTE *)(a3 + 226))
        {
LABEL_86:
          if (SHIBYTE(v71) < 0)
            operator delete((void *)__p);
          goto LABEL_88;
        }
      }
    }
    v17 = v13 + 56 * v10;
    v18 = *(_QWORD *)(v17 + 16);
    v19 = *(_DWORD *)(a3 + 216);
    v20 = *(_DWORD *)(a3 + 200);
    if (v20 != v19)
    {
      v21 = *(_QWORD *)(v17 + 8);
      if (v21 > v20)
      {
        v22 = *v12;
        do
        {
          v23 = *(unsigned __int8 *)(v22 + v20);
          v24 = (v23 + 62);
          if (v23 <= 0xEF)
            v25 = 2;
          else
            v25 = 3;
          if (v23 <= 0xDF)
            v26 = v25;
          else
            v26 = v25 + 1;
          if (v24 >= 0x33)
            v26 = 1;
          v20 += v26;
          *(_DWORD *)(a3 + 200) = v20;
        }
        while (v20 != v19 && v21 > v20);
      }
    }
    v75 = *(_OWORD *)v12;
    v28 = DWORD2(v75);
    if (v18 > DWORD2(v75) - v20 && DWORD2(v75) != v19)
    {
      v30 = v75;
      do
      {
        v31 = UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)&v75);
        if (u_hasBinaryProperty(v31, UCHAR_IDEOGRAPHIC)
          || (UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)&v75), uscript_hasScript())
          || (UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)&v75), uscript_hasScript())
          || (UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)&v75), uscript_hasScript())
          || (UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)&v75), uscript_hasScript()))
        {
          *(_BYTE *)(a3 + 224) = 1;
        }
        v32 = *(unsigned __int8 *)(v30 + v28);
        v33 = (v32 + 62);
        if (v32 <= 0xEF)
          v34 = 2;
        else
          v34 = 3;
        if (v32 <= 0xDF)
          v35 = v34;
        else
          v35 = v34 + 1;
        if (v33 >= 0x33)
          v35 = 1;
        v28 += v35;
        DWORD2(v75) = v28;
        v20 = *(_DWORD *)(a3 + 200);
      }
      while (v18 > v28 - v20 && v28 != *(_DWORD *)(a3 + 216));
    }
    if (*(_BYTE *)(a3 + 224))
    {
      v36 = (void *)v20;
      v68[1] = (void *)v20;
      *(_OWORD *)v12 = v75;
      v7 = v67;
    }
    else
    {
      v7 = v67;
      if (v20 == *(_DWORD *)(a3 + 216))
      {
LABEL_78:
        v36 = (void *)v20;
        v68[1] = (void *)v20;
      }
      else
      {
        while (1)
        {
          v37 = UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)(a3 + 192));
          isUWhiteSpace = u_isUWhiteSpace(v37);
          v36 = (void *)*(int *)(a3 + 200);
          v20 = *(_DWORD *)(a3 + 216);
          if (!isUWhiteSpace)
            break;
          v39 = *((unsigned __int8 *)v36 + *(_QWORD *)(a3 + 192));
          v40 = (v39 + 62);
          if (v39 <= 0xEF)
            v41 = 2;
          else
            v41 = 3;
          if (v39 <= 0xDF)
            v42 = v41;
          else
            v42 = v41 + 1;
          if (v40 >= 0x33)
            v42 = 1;
          v43 = v42 + (_DWORD)v36;
          *(_DWORD *)(a3 + 200) = v43;
          if (v43 == v20)
            goto LABEL_78;
        }
        v68[1] = (void *)*(int *)(a3 + 200);
        if ((_DWORD)v36 != v20)
        {
          do
          {
            v49 = UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)(a3 + 192));
            if (u_isUWhiteSpace(v49))
              break;
            v50 = *(int *)(a3 + 200);
            v51 = *(unsigned __int8 *)(*(_QWORD *)(a3 + 192) + v50);
            v52 = (v51 + 62);
            if (v51 <= 0xEF)
              v53 = 2;
            else
              v53 = 3;
            if (v51 <= 0xDF)
              v54 = v53;
            else
              v54 = v53 + 1;
            if (v52 >= 0x33)
              v54 = 1;
            v55 = v54 + v50;
            *(_DWORD *)(a3 + 200) = v55;
          }
          while (v55 != *(_DWORD *)(a3 + 216));
          v36 = v68[1];
        }
      }
    }
    *(_QWORD *)&v69 = *(int *)(a3 + 200) - (_QWORD)v36;
    *((_QWORD *)&v69 + 1) = *(_QWORD *)(v13 + 56 * v10 + 24);
    v44 = v73;
    if ((unint64_t)v73 >= v74)
    {
      v48 = (__int128 *)std::vector<TTSSynthesizer::Marker>::__push_back_slow_path<TTSSynthesizer::Marker const&>(&v72, (uint64_t)v68);
    }
    else
    {
      v45 = v69;
      *v73 = *(_OWORD *)v68;
      v44[1] = v45;
      v46 = (std::string *)(v44 + 2);
      if (SHIBYTE(v71) < 0)
      {
        std::string::__init_copy_ctor_external(v46, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        v47 = __p;
        *((_QWORD *)v44 + 6) = v71;
        *(_OWORD *)&v46->__r_.__value_.__l.__data_ = v47;
      }
      v48 = (__int128 *)((char *)v44 + 56);
    }
    v73 = v48;
    goto LABEL_86;
  }
LABEL_108:
  if (*(_QWORD *)(a3 + 128))
  {
    v58 = *(uint64_t **)(a3 + 40);
    if (v58)
    {
      std::vector<TTSSynthesizer::Marker>::__insert_with_size[abi:ne180100]<std::__wrap_iter<TTSSynthesizer::Marker*>,std::__wrap_iter<TTSSynthesizer::Marker*>>(v58, v58[1], v72, v73, 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v73 - v72) >> 3));
      LODWORD(v75) = 5;
      v59 = *(_QWORD *)(a3 + 128);
      if (!v59)
        std::__throw_bad_function_call[abi:ne180100]();
      *(_QWORD *)(a3 + 184) = (*(int (**)(uint64_t, __int128 *))(*(_QWORD *)v59 + 48))(v59, &v75);
    }
  }
  v60 = *(uint64_t ***)(a3 + 168);
  if (v60)
  {
    Observable::emit(v60, (char *)TTSSynthesizerEvent::MarkersGenerated, &v72);
    v62 = *(_QWORD *)(v7 + 8);
    v61 = *(__int16 **)(v7 + 16);
    v68[0] = 0;
    v68[1] = 0;
    *(_QWORD *)&v69 = 0;
    if ((unint64_t)v62 >= 2)
    {
      std::vector<int>::__vallocate[abi:ne180100](v68, v62 >> 1);
      v63 = (float *)v68[1];
      v64 = 2 * ((unint64_t)v62 >> 1);
      do
      {
        v65 = *v61++;
        *v63++ = (float)v65;
        v64 -= 2;
      }
      while (v64);
      v68[1] = v63;
    }
    Observable::emit(*(uint64_t ***)(a3 + 168), (char *)TTSSynthesizerEvent::AudioGenerated, v68);
    if (v68[0])
    {
      v68[1] = v68[0];
      operator delete(v68[0]);
    }
  }
  v68[0] = &v72;
  std::vector<TTSSynthesizer::Marker>::__destroy_vector::operator()[abi:ne180100]((void ***)v68);
LABEL_122:
  if (*(_QWORD *)(a3 + 184))
    return 2147485703;
  else
    return 0;
}

void sub_1DEAA5A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, char *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22)
{
  if (__p)
  {
    a12 = __p;
    operator delete(__p);
  }
  __p = &a21;
  std::vector<TTSSynthesizer::Marker>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void TTSSynthesizer::TTSSynthesizerInternal::normalize(std::string *this, std::string::value_type *a2)
{
  const std::string::value_type **v2;
  unint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  int v8;
  std::basic_string<char16_t>::value_type v9;
  std::basic_string<char16_t> *v10;
  int32_t v11;
  std::basic_string<char16_t> v12;
  int v13;
  std::basic_string<char16_t> __p;

  v2 = (const std::string::value_type **)a2;
  if (a2[23] < 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    if (!v4)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, 0);
      return;
    }
  }
  else
  {
    if (!a2[23])
    {
      *this = *(std::string *)a2;
      return;
    }
    v4 = *((_QWORD *)a2 + 1);
  }
  if (a2[23] >= 0)
  {
    v5 = a2[23];
  }
  else
  {
    a2 = *(std::string::value_type **)a2;
    v5 = v4;
  }
  UTFString::to_utf16(&__p, a2, v5);
  v13 = 0;
  unorm2_getNFCInstance();
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v6 = __p.__r_.__value_.__r.__words[1];
  if (v6 <= 1)
    v7 = 1;
  else
    v7 = v6;
  std::basic_string<char16_t>::basic_string[abi:ne180100](&v12, v7);
  while (1)
  {
    v8 = unorm2_normalize();
    if (v13 != 15)
      break;
    LODWORD(v7) = 2 * v7;
    std::basic_string<char16_t>::resize(&v12, (int)v7, v9);
  }
  if (v13 <= 0)
  {
    std::basic_string<char16_t>::resize(&v12, v8, v9);
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v12;
    else
      v10 = (std::basic_string<char16_t> *)v12.__r_.__value_.__r.__words[0];
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    else
      v11 = v12.__r_.__value_.__r.__words[1];
    UTFString::to_utf8(this, (const UChar *)v10, v11);
  }
  else if (*((char *)v2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *v2, (std::string::size_type)v2[1]);
  }
  else
  {
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = *(_OWORD *)v2;
    this->__r_.__value_.__r.__words[2] = (std::string::size_type)v2[2];
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1DEAA5C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void TTSSynthesizer::TTSSynthesizerInternal::preprocess_for_vendor_voice(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE v11[24];
  void *__p[2];
  char v13;
  __int16 v14;
  char __src[260];
  char __dst[260];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v14 = 1;
  ve_ttsGetLanguageList(*(_QWORD *)(a2 + 208), *(_QWORD *)(a2 + 216), __src, &v14, a5, a6, a7, a8);
  memcpy(__dst, __src, sizeof(__dst));
  std::string::basic_string[abi:ne180100]<0>(__p, &__dst[128]);
  UTFRegex::UTFRegex((UTFRegex *)v11, *(const UTFRegex **)(a2 + 432));
  SiriTTS::preprocess_for_vendor_voice(a1, (const void **)__p, (UTFRegex *)v11, a3, (_QWORD **)(a2 + 456));
  UTFRegex::~UTFRegex((UTFRegex *)v11);
  if (v13 < 0)
    operator delete(__p[0]);
}

void sub_1DEAA5D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  UTFRegex::~UTFRegex((UTFRegex *)&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::default_delete<TTSSynthesizerCallbackResult>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (result)
  {
    v1 = result;
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](result + 168);
    v2 = *(_QWORD **)(v1 + 160);
    if (v2 == (_QWORD *)(v1 + 136))
    {
      v3 = 4;
      v2 = (_QWORD *)(v1 + 136);
    }
    else
    {
      if (!v2)
        goto LABEL_8;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_8:
    v4 = *(_QWORD **)(v1 + 128);
    if (v4 == (_QWORD *)(v1 + 104))
    {
      v5 = 4;
      v4 = (_QWORD *)(v1 + 104);
    }
    else
    {
      if (!v4)
        goto LABEL_13;
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_13:
    v6 = *(void **)(v1 + 80);
    if (v6)
    {
      *(_QWORD *)(v1 + 88) = v6;
      operator delete(v6);
    }
    v7 = *(void **)(v1 + 56);
    if (v7)
    {
      *(_QWORD *)(v1 + 64) = v7;
      operator delete(v7);
    }
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    JUMPOUT(0x1DF0ED014);
  }
  return result;
}

_QWORD *std::basic_string<char16_t>::basic_string[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v3 = a1;
  if (a2 >= 0xB)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((a2 | 3) != 0xB)
      v4 = a2 | 3;
    a1 = std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v4 + 1);
    v3[1] = a2;
    v3[2] = v5 | 0x8000000000000000;
    *v3 = a1;
  }
  else
  {
    *((_BYTE *)a1 + 23) = a2;
    if (!a2)
      goto LABEL_10;
  }
  v6 = 0;
  do
    *((_WORD *)a1 + v6++) = 0;
  while (a2 != v6);
LABEL_10:
  *((_WORD *)a1 + a2) = 0;
  return v3;
}

uint64_t std::vector<TTSSynthesizer::Marker>::__push_back_slow_path<TTSSynthesizer::Marker const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[2];
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;

  v2 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x492492492492492)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v6 = a1 + 2;
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249)
    v7 = 0x492492492492492;
  else
    v7 = v3;
  v18 = v6;
  if (v7)
    v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<MarkerRecord>>(v7);
  else
    v8 = 0;
  v9 = v7 + 56 * v2;
  v15[0] = v7;
  v15[1] = v9;
  v16 = v9;
  v17 = v7 + 56 * v8;
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *(_OWORD *)(v9 + 16) = v10;
  v11 = (std::string *)(v9 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
    v9 = v16;
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(v9 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  v16 = v9 + 56;
  std::vector<TTSSynthesizer::Marker>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<TTSSynthesizer::Marker>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1DEAA6040(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<TTSSynthesizer::Marker>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<TTSSynthesizer::Marker>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<TTSSynthesizer::Marker>,std::reverse_iterator<TTSSynthesizer::Marker*>,std::reverse_iterator<TTSSynthesizer::Marker*>,std::reverse_iterator<TTSSynthesizer::Marker*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = result;
  v5 = *a1;
  *a1 = result;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

_QWORD *Agglomerate::ItemHolder<std::shared_ptr<std::function<int ()(InternalCallbackContainer)>>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA9235C8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<std::function<int ()(InternalCallbackContainer)>>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA9235C8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<std::function<int ()(InternalCallbackContainer)>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936A70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::function<int ()(InternalCallbackContainer)>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936A70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__shared_ptr_emplace<std::function<int ()(InternalCallbackContainer)>>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 24);
  result = *(_QWORD **)(a1 + 48);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_1,std::allocator<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_1>,int ()(TTSSynthesizer::CallbackMessage)>::~__func()
{
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_1,std::allocator<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_1>,int ()(TTSSynthesizer::CallbackMessage)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1EA92F3B0;
  return result;
}

void std::__function::__func<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_1,std::allocator<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_1>,int ()(TTSSynthesizer::CallbackMessage)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA92F3B0;
}

uint64_t std::__function::__func<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_1,std::allocator<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_1>,int ()(TTSSynthesizer::CallbackMessage)>::operator()()
{
  return 0;
}

uint64_t std::__function::__func<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_1,std::allocator<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_1>,int ()(TTSSynthesizer::CallbackMessage)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_1,std::allocator<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_1>,int ()(TTSSynthesizer::CallbackMessage)>::target_type()
{
}

void std::__function::__func<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_0,std::allocator<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_0>,int ()(InternalCallbackContainer)>::~__func()
{
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_0,std::allocator<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_0>,int ()(InternalCallbackContainer)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1EA92F358;
  return result;
}

void std::__function::__func<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_0,std::allocator<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_0>,int ()(InternalCallbackContainer)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA92F358;
}

uint64_t std::__function::__func<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_0,std::allocator<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_0>,int ()(InternalCallbackContainer)>::operator()()
{
  return 0;
}

uint64_t std::__function::__func<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_0,std::allocator<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_0>,int ()(InternalCallbackContainer)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_0,std::allocator<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_0>,int ()(InternalCallbackContainer)>::target_type()
{
}

void TTSSynthesizer::TTSSynthesizerInternal::load_voice_resource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint8_t buf[4];
  _DWORD v18[11];

  *(_QWORD *)&v18[9] = *MEMORY[0x1E0C80C00];
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v8 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a3 + 23) >= 0)
      v10 = a3;
    else
      v10 = *(_QWORD *)a3;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)v18 = v10;
    _os_log_impl(&dword_1DE3F6000, v8, OS_LOG_TYPE_INFO, "Loading resource: '%s'", buf, 0xCu);
  }
  if (*(char *)(a3 + 23) >= 0)
    v11 = a3;
  else
    v11 = *(_QWORD *)a3;
  Diagnostics::log(6, "Loading resource: '%s'", v9, v11);
  MemoryMap::MemoryMap(buf, a3);
  v12 = *(_QWORD *)(a2 + 272);
  if (v12)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 80))(v12, a3, a4);
  v16 = *(_QWORD *)&v18[5];
  TTSSynthesizer::TTSSynthesizerInternal::load_voice_resource(a1, a2, *(char **)&v18[3], &v16, a4);
  v13 = *(std::__shared_weak_count **)&v18[1];
  if (*(_QWORD *)&v18[1])
  {
    v14 = (unint64_t *)(*(_QWORD *)&v18[1] + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1DEAA6490(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf)
{
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v16;
  const char *v17;
  uint64_t *v18;

  if (a2)
  {
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    __cxa_begin_catch(a1);
    if (*(_QWORD *)(v13 + 3544) != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v16 = *(NSObject **)(v14 + 3536);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)v12 + 23) >= 0)
        v18 = v12;
      else
        v18 = (uint64_t *)*v12;
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v18;
      _os_log_impl(&dword_1DE3F6000, v16, OS_LOG_TYPE_ERROR, "Error mmap'ing resource path: %s", (uint8_t *)&buf, 0xCu);
    }
    Diagnostics::log(3, "Error mmap'ing resource path: %s", v17);
    __cxa_end_catch();
    *v11 = 0;
    v11[1] = 0;
    JUMPOUT(0x1DEAA6440);
  }
  _Unwind_Resume(a1);
}

void TTSSynthesizer::TTSSynthesizerInternal::load_voice_resource(uint64_t a1, uint64_t a2, char *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  _QWORD *v17;
  const char *v18;
  uint64_t v19;
  NSObject *v20;
  const char *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  NSObject *v27;
  const char *v28;
  __int128 v29;
  _QWORD *v30;
  _QWORD *v31;
  _BYTE buf[22];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a2 + 272);
  if (v9)
  {
    (*(void (**)(uint64_t, char *, _QWORD *, uint64_t))(*(_QWORD *)v9 + 56))(v9, a3, a4, a5);
    return;
  }
  if (*(_BYTE *)(a2 + 512))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v11 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a3;
      _os_log_impl(&dword_1DE3F6000, v11, OS_LOG_TYPE_INFO, "Loading resource from memory: %p", buf, 0xCu);
    }
    Diagnostics::log(6, "Loading resource from memory: %p", v12, a3);
    v15 = (std::__shared_weak_count *)operator new(0x30uLL);
    v15->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    v15->__shared_weak_owners_ = 0;
    v15->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936300;
    v15[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1EA92E060;
    v17 = &v15[1].__vftable;
    v15[1].__shared_owners_ = 0;
    v15[1].__shared_weak_owners_ = 0;
    v30 = &v15[1].__vftable;
    v31 = &v15->__vftable;
    if (*(char *)(a5 + 23) >= 0)
      v18 = (const char *)a5;
    else
      v18 = *(const char **)a5;
    v19 = ve_ttsResourceLoad(*(_QWORD *)(a2 + 224), *(_QWORD *)(a2 + 232), v18, *(unsigned int *)a4, a3, (uint64_t **)&v29, v13, v14);
    *(_OWORD *)&v15[1].__shared_owners_ = v29;
    if ((_DWORD)v19)
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v20 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = a3;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v19;
        _os_log_impl(&dword_1DE3F6000, v20, OS_LOG_TYPE_ERROR, "Error (ve_ttsResourceLoad %p) : 0x%x", buf, 0x12u);
      }
      Diagnostics::log(3, "Error (ve_ttsResourceLoad %p) : 0x%x", v21, a3, v19);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        v23 = v15;
LABEL_25:
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    else
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v27 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v15 + 1;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = a3;
        _os_log_impl(&dword_1DE3F6000, v27, OS_LOG_TYPE_DEFAULT, "Resource %p loaded: '%p'", buf, 0x16u);
      }
      Diagnostics::log(5, "Resource %p loaded: '%p'", v28, v17, a3);
      *(_QWORD *)a1 = v17;
      *(_QWORD *)(a1 + 8) = v15;
    }
  }
  else
  {
    PersistentModuleFactory::get_persistent_module<NashvilleFEPersistentModule>(buf, *(_QWORD **)(*(_QWORD *)(a2 + 256) + 24));
    NashvilleFEPersistentModule::load_voice_resource((std::__shared_weak_count **)a1, *(int64x2_t **)buf, a3, a4, a5);
    v24 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v25 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        v23 = v24;
        goto LABEL_25;
      }
    }
  }
}

void sub_1DEAA6900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void TTSSynthesizer::TTSSynthesizer(TTSSynthesizer *this)
{
  _ZNSt3__115allocate_sharedB8ne180100IN14TTSSynthesizer22TTSSynthesizerInternalENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(this);
}

{
  _ZNSt3__115allocate_sharedB8ne180100IN14TTSSynthesizer22TTSSynthesizerInternalENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(this);
}

double _ZNSt3__115allocate_sharedB8ne180100IN14TTSSynthesizer22TTSSynthesizerInternalENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(_QWORD *a1)
{
  char *v2;
  double result;

  v2 = (char *)operator new(0x2C8uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_1EA935EA0;
  *((_WORD *)v2 + 12) = 0;
  *((_QWORD *)v2 + 31) = 0;
  *((_DWORD *)v2 + 64) = 0;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  *((_OWORD *)v2 + 8) = 0u;
  *((_OWORD *)v2 + 9) = 0u;
  *((_DWORD *)v2 + 40) = 0;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 228) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 324) = 0u;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)v2 + 43, &byte_1DEBD87CE);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)v2 + 46, &byte_1DEBD87CE);
  *(_OWORD *)(v2 + 408) = 0u;
  *(_OWORD *)(v2 + 424) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 433) = 0u;
  UTFRegex::UTFRegex((UTFRegex *)(v2 + 456), "\\e\\\\(.*?)(?:=(.*?))?(?:\\\\|\\z)|(\\e\\/\\+)|\\[\\[(.*?)\\]\\]");
  *((_QWORD *)v2 + 61) = 0;
  *((_QWORD *)v2 + 62) = 0;
  *((_QWORD *)v2 + 60) = v2 + 488;
  *((_DWORD *)v2 + 126) = 0;
  v2[508] = 0;
  *((_QWORD *)v2 + 64) = 0;
  *((_QWORD *)v2 + 66) = 0;
  *((_QWORD *)v2 + 65) = 0;
  *((_QWORD *)v2 + 75) = 0;
  *((_QWORD *)v2 + 79) = 0;
  result = 0.0;
  *((_OWORD *)v2 + 34) = 0u;
  *((_OWORD *)v2 + 35) = 0u;
  *((_OWORD *)v2 + 36) = 0u;
  v2[592] = 0;
  *((_QWORD *)v2 + 80) = 850045863;
  *((_QWORD *)v2 + 87) = 0;
  *(_OWORD *)(v2 + 648) = 0u;
  *(_OWORD *)(v2 + 664) = 0u;
  *(_OWORD *)(v2 + 680) = 0u;
  v2[704] = 1;
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_1DEAA6A94(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  unsigned int v5;
  uint64_t v6;
  void *v7;

  if (*(_BYTE *)(v1 + 448))
  {
    do
      v5 = __ldaxr((unsigned int *)&censorship_count);
    while (__stlxr(v5 - 1, (unsigned int *)&censorship_count));
  }
  if (*(char *)(v1 + 447) < 0)
    operator delete(*(void **)(v1 + 424));
  if (*(char *)(v1 + 423) < 0)
    operator delete(*(void **)(v1 + 400));
  fst::FstHeader::~FstHeader(v3);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v1 + 320);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v1 + 304);
  v6 = *(_QWORD *)(v1 + 296);
  *(_QWORD *)(v1 + 296) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v1 + 280);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v7);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<TTSSynthesizer::TTSSynthesizerInternal>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935EA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TTSSynthesizer::TTSSynthesizerInternal>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935EA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<TTSSynthesizer::TTSSynthesizerInternal>::__on_zero_shared(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  _QWORD *v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  const void *v22;
  unint64_t *v23;
  unint64_t v24;
  const void *v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  NSObject *v51;
  const char *v52;
  uint64_t v53;
  NSObject *v54;
  const char *v55;
  uint64_t v56;
  NSObject *v57;
  const char *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  uint8_t buf[8];
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 296))
    goto LABEL_2;
  v14 = *(_QWORD *)(a1 + 304);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 8);
    if (v15 != *(_QWORD *)(v14 + 16))
    {
      while (1)
      {
        v16 = *(const void **)v15;
        if (*(_QWORD *)v15)
        {
          if (!v17)
            goto LABEL_112;
          v18 = v17;
          v19 = *(std::__shared_weak_count **)(v15 + 8);
          if (v19)
          {
            p_shared_owners = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldxr(p_shared_owners);
            while (__stxr(v21 + 1, p_shared_owners));
          }
          v22 = (const void *)v17[34];
          if (v22
          {
            v59 = (std::__shared_weak_count *)v18[35];
            if (v59)
            {
              v60 = (unint64_t *)&v59->__shared_owners_;
              do
                v61 = __ldxr(v60);
              while (__stxr(v61 + 1, v60));
              do
                v62 = __ldaxr(v60);
              while (__stlxr(v62 - 1, v60));
              if (!v62)
              {
                ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                std::__shared_weak_count::__release_weak(v59);
              }
            }
            if (v19)
            {
              v63 = (unint64_t *)&v19->__shared_owners_;
              do
                v64 = __ldaxr(v63);
              while (__stlxr(v64 - 1, v63));
              if (!v64)
                goto LABEL_109;
            }
            goto LABEL_24;
          }
          if (v19)
          {
            v23 = (unint64_t *)&v19->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          v16 = *(const void **)v15;
          if (*(_QWORD *)v15)
          {
LABEL_112:
            {
              break;
            }
          }
        }
        v15 += 16;
        if (v15 == *(_QWORD *)(v14 + 16))
          goto LABEL_24;
      }
      v19 = *(std::__shared_weak_count **)(v15 + 8);
      if (v19)
      {
        v47 = (unint64_t *)&v19->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
        do
          v49 = __ldaxr(v47);
        while (__stlxr(v49 - 1, v47));
        if (!v49)
        {
LABEL_109:
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
LABEL_24:
    if (*(_QWORD *)(v14 + 16) != v15)
    {
      v25 = *(const void **)v15;
      if (*(_QWORD *)v15
      {
        v27 = *(std::__shared_weak_count **)(v15 + 8);
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v31 = *((_QWORD *)v26 + 34);
        v30 = (std::__shared_weak_count *)*((_QWORD *)v26 + 35);
        if (v30)
        {
          v32 = (unint64_t *)&v30->__shared_owners_;
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v36 = v31 == 0;
        if (!v30)
        {
LABEL_69:
          if (!v36)
            goto LABEL_2;
          goto LABEL_80;
        }
      }
      else
      {
        v30 = *(std::__shared_weak_count **)(v15 + 8);
        if (!v30)
        {
          if (v25)
            goto LABEL_2;
          goto LABEL_80;
        }
        v43 = (unint64_t *)&v30->__shared_owners_;
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
        v36 = v25 == 0;
      }
      v45 = (unint64_t *)&v30->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
        if (!v36)
          goto LABEL_2;
        goto LABEL_80;
      }
      goto LABEL_69;
    }
  }
LABEL_80:
  v50 = ve_ttsClose(*(_QWORD *)(a1 + 248), *(_QWORD *)(a1 + 256), a3, a4, a5, a6, a7, a8);
  if ((_DWORD)v50)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v51 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v50;
      _os_log_impl(&dword_1DE3F6000, v51, OS_LOG_TYPE_ERROR, "Error ve_ttsClose 0x%x", buf, 8u);
    }
    Diagnostics::log(3, "Error ve_ttsClose 0x%x", v52, v50);
  }
  v53 = ve_ttsUnInitialize(*(_QWORD *)(a1 + 232), *(_QWORD *)(a1 + 240));
  if ((_DWORD)v53)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v54 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v53;
      _os_log_impl(&dword_1DE3F6000, v54, OS_LOG_TYPE_ERROR, "Error ve_ttsUnInitialize 0x%x", buf, 8u);
    }
    Diagnostics::log(3, "Error ve_ttsUnInitialize 0x%x", v55, v53);
  }
  if (*(_WORD *)(a1 + 24) == 8963)
  {
    v56 = vplatform_ReleaseInterfaces(a1 + 24);
    if ((_DWORD)v56)
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v57 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v56;
        _os_log_impl(&dword_1DE3F6000, v57, OS_LOG_TYPE_ERROR, "Error vplatform_ReleaseInterfaces 0x%x", buf, 8u);
      }
      Diagnostics::log(3, "Error vplatform_ReleaseInterfaces 0x%x", v58, v56);
    }
  }
LABEL_2:
  v9 = *(_QWORD *)(a1 + 264);
  if (v9)
  {
    v11 = *(_QWORD **)(v9 + 40);
    v10 = (_QWORD *)(v9 + 40);
    std::__tree<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::__map_value_compare<std::type_index,std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::less<std::type_index>,true>,std::allocator<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>>>::destroy(v11);
    *(v10 - 1) = v10;
    *v10 = 0;
    v10[1] = 0;
  }
  GryphonDebugging::latest_pool_ptr = 0;
  std::mutex::~mutex((std::mutex *)(a1 + 640));
  v12 = *(_QWORD **)(a1 + 632);
  if (v12 == (_QWORD *)(a1 + 608))
  {
    v13 = 4;
    v12 = (_QWORD *)(a1 + 608);
  }
  else
  {
    if (!v12)
      goto LABEL_42;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_42:
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a1 + 600), *(unsigned __int8 *)(a1 + 592));
  *(_QWORD *)buf = a1 + 568;
  std::vector<TTSSynthesizer::EngineParamsOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (*(char *)(a1 + 567) < 0)
    operator delete(*(void **)(a1 + 544));
  v37 = *(_QWORD *)(a1 + 512);
  if (v37)
  {
    v38 = *(_QWORD *)(a1 + 520);
    v39 = *(void **)(a1 + 512);
    if (v38 != v37)
    {
      do
        v38 = std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v38 - 32);
      while (v38 != v37);
      v39 = *(void **)(a1 + 512);
    }
    *(_QWORD *)(a1 + 520) = v37;
    operator delete(v39);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<FastRewriter>>>>::destroy(*(_QWORD **)(a1 + 488));
  UTFRegex::~UTFRegex((UTFRegex *)(a1 + 456));
  if (*(_BYTE *)(a1 + 448))
  {
    do
      v40 = __ldaxr((unsigned int *)&censorship_count);
    while (__stlxr(v40 - 1, (unsigned int *)&censorship_count));
  }
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  if (*(char *)(a1 + 367) < 0)
    operator delete(*(void **)(a1 + 344));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 320);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 304);
  v41 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 296) = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 280);
  return std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 264);
}

void sub_1DEAA71F0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t TTSSynthesizer::get_voice_description(TTSSynthesizer *this)
{
  return *(_QWORD *)this + 312;
}

uint64_t TTSSynthesizer::get_engine_description(TTSSynthesizer *this)
{
  return 0x4400000009;
}

uint64_t TTSSynthesizer::initialize(uint64_t *a1, std::string::size_type a2, uint64_t a3, __int128 *a4, const std::string *a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v10[0] = &off_1EA92F2A8;
  v11 = v10;
  v6 = TTSSynthesizer::TTSSynthesizerInternal::initialize(v5, a2, a4, a5, (uint64_t)v10);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return v6;
}

void sub_1DEAA72F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<TTSSynthesizer::initialize(std::string const&,std::vector<TTSSynthesizer::EngineParamsOverride> const&,std::string const&,std::string const&)::$_0,std::allocator<TTSSynthesizer::initialize(std::string const&,std::vector<TTSSynthesizer::EngineParamsOverride> const&,std::string const&,std::string const&)::$_0>,VE_INSTALL * ()(void)>::~__func()
{
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<TTSSynthesizer::initialize(std::string const&,std::vector<TTSSynthesizer::EngineParamsOverride> const&,std::string const&,std::string const&)::$_0,std::allocator<TTSSynthesizer::initialize(std::string const&,std::vector<TTSSynthesizer::EngineParamsOverride> const&,std::string const&,std::string const&)::$_0>,VE_INSTALL * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1EA92F2A8;
  return result;
}

void std::__function::__func<TTSSynthesizer::initialize(std::string const&,std::vector<TTSSynthesizer::EngineParamsOverride> const&,std::string const&,std::string const&)::$_0,std::allocator<TTSSynthesizer::initialize(std::string const&,std::vector<TTSSynthesizer::EngineParamsOverride> const&,std::string const&,std::string const&)::$_0>,VE_INSTALL * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA92F2A8;
}

uint64_t std::__function::__func<TTSSynthesizer::initialize(std::string const&,std::vector<TTSSynthesizer::EngineParamsOverride> const&,std::string const&,std::string const&)::$_0,std::allocator<TTSSynthesizer::initialize(std::string const&,std::vector<TTSSynthesizer::EngineParamsOverride> const&,std::string const&,std::string const&)::$_0>,VE_INSTALL * ()(void)>::operator()()
{
  return 0;
}

uint64_t std::__function::__func<TTSSynthesizer::initialize(std::string const&,std::vector<TTSSynthesizer::EngineParamsOverride> const&,std::string const&,std::string const&)::$_0,std::allocator<TTSSynthesizer::initialize(std::string const&,std::vector<TTSSynthesizer::EngineParamsOverride> const&,std::string const&,std::string const&)::$_0>,VE_INSTALL * ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<TTSSynthesizer::initialize(std::string const&,std::vector<TTSSynthesizer::EngineParamsOverride> const&,std::string const&,std::string const&)::$_0,std::allocator<TTSSynthesizer::initialize(std::string const&,std::vector<TTSSynthesizer::EngineParamsOverride> const&,std::string const&,std::string const&)::$_0>,VE_INSTALL * ()(void)>::target_type()
{
}

uint64_t TTSSynthesizer::initialize(uint64_t *a1, std::string::size_type a2, __int128 *a3, const std::string *a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[3];
  void **v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v11[0] = &off_1EA92F300;
  v12 = v11;
  memset(v9, 0, sizeof(v9));
  v5 = TTSSynthesizer::TTSSynthesizerInternal::initialize(v4, a2, a3, a4, (uint64_t)v11);
  v10 = (void **)v9;
  std::vector<TTSSynthesizer::EngineParamsOverride>::__destroy_vector::operator()[abi:ne180100](&v10);
  v6 = v12;
  if (v12 == v11)
  {
    v7 = 4;
    v6 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return v5;
}

void sub_1DEAA7484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  a13 = (void **)&a10;
  std::vector<TTSSynthesizer::EngineParamsOverride>::__destroy_vector::operator()[abi:ne180100](&a13);
  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(a1);
}

void std::__function::__func<TTSSynthesizer::initialize(std::string const&,std::string const&,std::string const&)::$_0,std::allocator<TTSSynthesizer::initialize(std::string const&,std::string const&,std::string const&)::$_0>,VE_INSTALL * ()(void)>::~__func()
{
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<TTSSynthesizer::initialize(std::string const&,std::string const&,std::string const&)::$_0,std::allocator<TTSSynthesizer::initialize(std::string const&,std::string const&,std::string const&)::$_0>,VE_INSTALL * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1EA92F300;
  return result;
}

void std::__function::__func<TTSSynthesizer::initialize(std::string const&,std::string const&,std::string const&)::$_0,std::allocator<TTSSynthesizer::initialize(std::string const&,std::string const&,std::string const&)::$_0>,VE_INSTALL * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA92F300;
}

uint64_t std::__function::__func<TTSSynthesizer::initialize(std::string const&,std::string const&,std::string const&)::$_0,std::allocator<TTSSynthesizer::initialize(std::string const&,std::string const&,std::string const&)::$_0>,VE_INSTALL * ()(void)>::operator()()
{
  return 0;
}

uint64_t std::__function::__func<TTSSynthesizer::initialize(std::string const&,std::string const&,std::string const&)::$_0,std::allocator<TTSSynthesizer::initialize(std::string const&,std::string const&,std::string const&)::$_0>,VE_INSTALL * ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<TTSSynthesizer::initialize(std::string const&,std::string const&,std::string const&)::$_0,std::allocator<TTSSynthesizer::initialize(std::string const&,std::string const&,std::string const&)::$_0>,VE_INSTALL * ()(void)>::target_type()
{
}

uint64_t TTSSynthesizer::initialize(uint64_t *a1, std::string::size_type a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  std::string __p;
  void *v12[2];
  char v13;
  void **v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  std::string::basic_string[abi:ne180100]<0>(v12, &byte_1DEBD87CE);
  std::string::basic_string[abi:ne180100]<0>(&__p, &byte_1DEBD87CE);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v15, a3);
  memset(v10, 0, sizeof(v10));
  v6 = TTSSynthesizer::TTSSynthesizerInternal::initialize(v5, a2, (__int128 *)v12, &__p, (uint64_t)v15);
  v14 = (void **)v10;
  std::vector<TTSSynthesizer::EngineParamsOverride>::__destroy_vector::operator()[abi:ne180100](&v14);
  v7 = v16;
  if (v16 == v15)
  {
    v8 = 4;
    v7 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v13 < 0)
    operator delete(v12[0]);
  return v6;
}

void sub_1DEAA7684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char *a25)
{
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v28;
  uint64_t v29;

  a25 = &a10;
  std::vector<TTSSynthesizer::EngineParamsOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  v28 = *(_QWORD **)(v26 - 48);
  if (v28 == v25)
  {
    v29 = 4;
    v28 = (_QWORD *)(v26 - 72);
  }
  else
  {
    if (!v28)
      goto LABEL_6;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_6:
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(a1);
}

uint64_t TTSSynthesizer::set_global_property(uint64_t **a1, int a2, float a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  int v21;
  float *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v11 = *a1;
  v12 = *((_DWORD *)*a1 + 92);
  v13 = v12 > 4;
  v14 = (1 << v12) & 0x1A;
  if (v13 || v14 == 0)
  {
    switch(a2)
    {
      case 0:
        v16 = 10;
        goto LABEL_27;
      case 1:
        v16 = 9;
        goto LABEL_27;
      case 2:
        v16 = 8;
LABEL_27:
        LODWORD(v22) = v16;
        v21 = (int)(a3 * 100.0);
        goto LABEL_31;
      case 3:
        LODWORD(v22) = 12;
        if (a3 == 0.0)
          LOWORD(v21) = 2;
        else
          LOWORD(v21) = 1;
LABEL_31:
        WORD2(v22) = v21;
        break;
      default:
        return ve_ttsSetParamList(v11[28], v11[29], &v22, 1, a6, a7, a8, a9);
    }
    return ve_ttsSetParamList(v11[28], v11[29], &v22, 1, a6, a7, a8, a9);
  }
  else
  {
    SharedObjectPool::get<SynthesizerConfig>(&v22, v11[30]);
    switch(a2)
    {
      case 0:
        v22[3] = a3;
        break;
      case 1:
        v22[1] = a3;
        break;
      case 2:
        v22[2] = a3;
        break;
      case 4:
        v22[4] = a3;
        break;
      case 5:
        v22[6] = a3;
        break;
      case 6:
        v22[5] = a3;
        break;
      case 7:
        v22[7] = a3;
        break;
      case 8:
        v22[8] = a3;
        break;
      case 9:
        v22[9] = a3;
        break;
      case 10:
        v22[10] = a3;
        break;
      case 11:
        v22[11] = a3;
        break;
      default:
        break;
    }
    v17 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    return 0;
  }
}

uint64_t TTSSynthesizer::set_neural_style(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  BOOL v3;
  int v4;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v2 = *(_DWORD *)(*(_QWORD *)a1 + 368);
  v3 = v2 > 4;
  v4 = (1 << v2) & 0x1A;
  if (!v3 && v4 != 0)
  {
    SharedObjectPool::get<SynthesizerConfig>(&v11, *(_QWORD *)(*(_QWORD *)a1 + 240));
    if (v11 + 48 != a2)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v11 + 48), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    v7 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  return 0;
}

void sub_1DEAA79A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void TTSSynthesizer::available_neural_style(TTSSynthesizer *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  __int128 *v9;
  int64x2_t *v10;

  v3 = *(_QWORD *)this;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = a2 + 8;
  TTSSynthesizer::TTSSynthesizerInternal::available_neural_styles(&v8, v3);
  v4 = v8.i64[1];
  if (v8.i64[0] != v8.i64[1])
  {
    v5 = v8.i64[0] + 48;
    do
    {
      v9 = (__int128 *)(v5 - 48);
      v6 = (char *)(std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)(v5 - 48), &v9)+ 7);
      if ((char *)v5 != v6)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v6, *(char **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 2);
      v7 = v5 + 24;
      v5 += 72;
    }
    while (v7 != v4);
  }
  v10 = &v8;
  std::vector<TTSSynthesizer::SpeakingStyle>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
}

void sub_1DEAA7A90(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void TTSSynthesizer::available_neural_styles(TTSSynthesizer *this@<X0>, int64x2_t *a2@<X8>)
{
  TTSSynthesizer::TTSSynthesizerInternal::available_neural_styles(a2, *(_QWORD *)this);
}

uint64_t TTSSynthesizer::set_fe_only(TTSSynthesizer *this, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint64_t result;
  uint8_t buf[4];
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)this;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v4 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v8 = a2;
    _os_log_impl(&dword_1DE3F6000, v4, OS_LOG_TYPE_DEFAULT, "Switching to FE only mode: %d", buf, 8u);
  }
  result = Diagnostics::log(5, "Switching to FE only mode: %d", v5, a2);
  *(_BYTE *)(v3 + 484) = a2;
  return result;
}

BOOL TTSSynthesizer::using_gryphon_frontend(TTSSynthesizer *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 272) != 0;
}

BOOL TTSSynthesizer::has_phatic_responses(char *a1)
{
  _BOOL4 should_use;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  std::__shared_weak_count *size;
  unint64_t *v7;
  unint64_t v8;
  FrontendEnvironment *v9;
  uint64_t v10;
  uint64_t shared_component;
  _BOOL8 v12;
  __int128 **v13;
  FrontendEnvironment *v14;
  uint64_t v15;
  _DWORD *prompt_by_id;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unsigned int v34;
  NSObject *v35;
  const char *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t *v49;
  std::string __p;
  uint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  FrontendEnvironment *v57;
  std::__shared_weak_count *v58;
  __int128 **v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;

  std::string::basic_string[abi:ne180100]<0>(&__p, &byte_1DEBD87CE);
  should_use = Frontend::should_use(a1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (should_use)
  {
    std::allocate_shared[abi:ne180100]<Environment,std::allocator<Environment>,std::string const&,void>(&v61, (__int128 *)a1);
    std::allocate_shared[abi:ne180100]<SharedObjectPool,std::allocator<SharedObjectPool>,std::shared_ptr<Environment> &,void>(&v59, v61, v62);
    v3 = (char *)operator new(0xD8uLL);
    *(_OWORD *)(v3 + 8) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    v4 = (uint64_t)(v3 + 120);
    *(_QWORD *)v3 = &off_1EA933BD8;
    *(_OWORD *)(v3 + 40) = 0u;
    *(_OWORD *)(v3 + 56) = 0u;
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *((_QWORD *)v3 + 13) = 0;
    *(_OWORD *)(v3 + 24) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    v3[168] = 0;
    *(_OWORD *)(v3 + 152) = 0u;
    *((_OWORD *)v3 + 12) = 0u;
    *((_QWORD *)v3 + 22) = 0;
    *((_QWORD *)v3 + 23) = v3 + 192;
    *((_QWORD *)v3 + 26) = v3 + 24;
    v57 = (FrontendEnvironment *)(v3 + 24);
    v58 = (std::__shared_weak_count *)v3;
    std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)v3 + 19, (uint64_t)v59, (uint64_t)v60);
    v5 = operator new(0x38uLL);
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = &off_1EA91E548;
    *v5 = &off_1EA933238;
    v5[5] = 0;
    v5[6] = 0;
    v5[4] = 0;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v5 + 3);
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v4, (__int128 *)&__p);
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v7 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v9 = v57;
    v10 = *((_QWORD *)v57 + 12);
    std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, a1);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v10 + 80))(v10, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    FrontendEnvironment::load_configuration(v9);
    shared_component = FrontendEnvironment::get_shared_component_instance<GeneratedPromptDB>((uint64_t)v9);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)shared_component + 56))(shared_component) & 1) != 0)
    {
      v12 = 1;
    }
    else
    {
      v15 = FrontendEnvironment::get_shared_component_instance<PromptDatabase>((uint64_t)v9);
      std::string::basic_string[abi:ne180100]<0>(&__p, "phat");
      prompt_by_id = PromptDatabase::find_prompt_by_id(v15, &__p, 0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v12 = prompt_by_id != 0;
    }
    v17 = v58;
    if (v58)
    {
      p_shared_owners = (unint64_t *)&v58->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = v60;
    if (v60)
    {
      v21 = (unint64_t *)&v60->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = v62;
    if (v62)
    {
      v24 = &v62->__shared_owners_;
      do
        v25 = __ldaxr((unint64_t *)v24);
      while (__stlxr(v25 - 1, (unint64_t *)v24));
      goto LABEL_80;
    }
    return v12;
  }
  std::allocate_shared[abi:ne180100]<Environment,std::allocator<Environment>,std::string const&,void>(&v61, (__int128 *)a1);
  std::allocate_shared[abi:ne180100]<SharedObjectPool,std::allocator<SharedObjectPool>,std::shared_ptr<Environment> &,void>(&v59, v61, v62);
  v13 = v59;
  SharedObjectPool::get<VoiceConfig>(&v57, v59);
  v14 = v57;
  (*(void (**)(std::string *__return_ptr, FrontendEnvironment *, uint64_t, uint64_t))(*(_QWORD *)v57 + 72))(&__p, v57, 1885889131, 2);
  if (__p.__r_.__value_.__s.__data_[0] == 2)
  {
    v26 = *(_QWORD *)__p.__r_.__value_.__l.__size_;
    v27 = *(_QWORD *)(__p.__r_.__value_.__l.__size_ + 8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&__p.__r_.__value_.__l.__size_, 2);
    if (v26 == v27)
      goto LABEL_37;
  }
  else if (__p.__r_.__value_.__s.__data_[0] == 1)
  {
    v28 = *(_QWORD *)(__p.__r_.__value_.__l.__size_ + 16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&__p.__r_.__value_.__l.__size_, 1);
    if (!v28)
      goto LABEL_37;
  }
  else
  {
    if (!__p.__r_.__value_.__s.__data_[0])
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&__p.__r_.__value_.__l.__size_, 0);
LABEL_37:
      v12 = 0;
      goto LABEL_67;
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__s.__data_[0]);
  }
  SharedObjectPool::get<GeneratedPromptDB>(&v55, (uint64_t)v13);
  SharedObjectPool::get<FeatureBook>(&v53, (uint64_t)v13);
  (*(void (**)(std::string *__return_ptr, FrontendEnvironment *, uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(&__p, v14, 1952543344, 1);
  v29 = *(_DWORD *)(v53 + 48);
  v30 = operator new();
  TAPExtractor::TAPExtractor((TAPExtractor *)v30, (const MemoryMap *)&__p, v29);
  v52 = v30;
  v31 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v32 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 56))(v55) & 1) != 0)
  {
    v12 = 1;
  }
  else
  {
    if (*(_BYTE *)(v30 + 440))
    {
      v34 = *(unsigned __int16 *)(*(_QWORD *)(v30 + 352) + 18);
      if (v34 >= 2)
      {
        if (v34 == 2)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "phat");
          v12 = select_prompt_from_prefix<std::vector<TAPFileBuilder::v2_tap_prompt_section_of_length_m const*>>(*(uint64_t **)(v30 + 104), *(uint64_t **)(v30 + 112), (const void **)&__p.__r_.__value_.__l.__data_, 0) != 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_57;
        }
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v35 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          LOWORD(__p.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1DE3F6000, v35, OS_LOG_TYPE_ERROR, "Prompts version has not been coded for and likely does not exist", (uint8_t *)&__p, 2u);
        }
        Diagnostics::log(3, "Prompts version has not been coded for and likely does not exist", v36);
      }
    }
    v12 = 0;
  }
LABEL_57:
  TAPExtractor::~TAPExtractor((TAPExtractor *)v30);
  MEMORY[0x1DF0ED014]();
  v37 = v54;
  if (v54)
  {
    v38 = (unint64_t *)&v54->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v56;
  if (v56)
  {
    v41 = (unint64_t *)&v56->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
LABEL_67:
  v43 = v58;
  if (v58)
  {
    v44 = (unint64_t *)&v58->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = v60;
  if (v60)
  {
    v47 = (unint64_t *)&v60->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v23 = v62;
  if (v62)
  {
    v49 = &v62->__shared_owners_;
    do
      v25 = __ldaxr((unint64_t *)v49);
    while (__stlxr(v25 - 1, (unint64_t *)v49));
LABEL_80:
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  return v12;
}

void sub_1DEAA81D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, TAPExtractor *a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
  uint64_t v24;

  if (a14 < 0)
    operator delete(__p);
  std::unique_ptr<TAPExtractor>::reset[abi:ne180100](&a17);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v24 - 64);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v24 - 48);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<Environment,std::allocator<Environment>,std::string const&,void>(_QWORD *a1, __int128 *a2)
{
  std::string *v4;
  void *__p[2];
  char v6;

  v4 = (std::string *)operator new(0x48uLL);
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA9321D0;
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_1DEBD87CE);
  Environment::Environment(v4 + 1, a2, (__int128 *)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = v4 + 1;
  a1[1] = v4;
}

void sub_1DEAA8360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  if (a15 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

TAPExtractor *std::unique_ptr<TAPExtractor>::reset[abi:ne180100](TAPExtractor **a1)
{
  TAPExtractor *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    TAPExtractor::~TAPExtractor(result);
    JUMPOUT(0x1DF0ED014);
  }
  return result;
}

BOOL TTSSynthesizer::ready_for_synthesis(TTSSynthesizer *this)
{
  uint64_t v1;

  if (*(char *)(*(_QWORD *)this + 399) < 0)
    v1 = *(_QWORD *)(*(_QWORD *)this + 384);
  else
    v1 = *(unsigned __int8 *)(*(_QWORD *)this + 399);
  return v1 != 0;
}

uint64_t TTSSynthesizer::synthesize_text_sync(uint64_t *a1, uint64_t a2, std::string::size_type a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _BYTE v8[24];
  _BYTE *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v9 = 0;
  v4 = TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(v3, a2, a3, 0, 0, (uint64_t)v8);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return v4;
}

void sub_1DEAA848C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t TTSSynthesizer::synthesize_text_async(uint64_t *a1, uint64_t a2, std::string::size_type a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v11, a4);
  v7 = TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(v6, a2, a3, 0, 0, (uint64_t)v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_1DEAA8584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t TTSSynthesizer::synthesize_text_and_animation_async(uint64_t *a1, uint64_t a2, std::string::size_type a3, std::string::size_type a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v13, a5);
  v9 = TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(v8, a2, a3, a4, 0, (uint64_t)v13);
  v10 = v14;
  if (v14 == v13)
  {
    v11 = 4;
    v10 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return v9;
}

void sub_1DEAA8690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t TTSSynthesizer::synthesize_text_with_markers_async(uint64_t *a1, uint64_t a2, std::string::size_type a3, std::string::size_type a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v13, a5);
  v9 = TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(v8, a2, a3, 0, a4, (uint64_t)v13);
  v10 = v14;
  if (v14 == v13)
  {
    v11 = 4;
    v10 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return v9;
}

void sub_1DEAA879C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t TTSSynthesizer::synthesize_text_and_animation_with_markers_async(uint64_t *a1, uint64_t a2, std::string::size_type a3, std::string::size_type a4, std::string::size_type a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v10 = *a1;
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v15, a6);
  v11 = TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(v10, a2, a3, a4, a5, (uint64_t)v15);
  v12 = v16;
  if (v16 == v15)
  {
    v13 = 4;
    v12 = v15;
    goto LABEL_5;
  }
  if (v16)
  {
    v13 = 5;
LABEL_5:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  return v11;
}

void sub_1DEAA88AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t TTSSynthesizer::synthesize_text(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  NSObject *v4;
  std::string *v5;
  const char *v6;
  std::string *p_p;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::string *v20;
  uint64_t v21;
  __int128 v22;
  unint64_t *v23;
  unint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  std::__shared_weak_count *size;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::string::size_type v44;
  std::string *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  std::string v64;
  std::string v65;
  _QWORD v66[2];
  uint8_t buf[24];
  uint8_t *v68;
  std::string __p;
  std::string *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  _BYTE v75[24];
  _BYTE *v76;
  _BYTE v77[24];
  _BYTE *v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v4 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    Censor::global_plaintext(&__p, a2);
    v5 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl(&dword_1DE3F6000, v4, OS_LOG_TYPE_DEFAULT, "Start synthesizing text: '%s'", buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  Censor::global_plaintext(&__p, a2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  Diagnostics::log(5, "Start synthesizing text: '%s'", v6, p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v8 = v3[35];
  if (!v8 || ((*(void (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8), !v3[35]))
  {
    v9 = v3[34];
    if (v9)
    {
LABEL_26:
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA92F358;
      v70 = &__p;
      (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)v9 + 24))(v9, a2, &__p);
      v20 = v70;
      if (v70 == &__p)
      {
        v21 = 4;
        v20 = &__p;
      }
      else
      {
        if (!v70)
          goto LABEL_31;
        v21 = 5;
      }
      (*(void (**)(void))(v20->__r_.__value_.__r.__words[0] + 8 * v21))();
      goto LABEL_31;
    }
    *(_QWORD *)buf = &off_1EA92F3B0;
    v68 = buf;
    TTSSynthesizerCallbackResult::TTSSynthesizerCallbackResult(&__p, (__int128 *)a2, 0, 0, 0, (uint64_t)buf, 1);
    v25 = v68;
    if (v68 == buf)
    {
      v26 = 4;
      v25 = buf;
    }
    else
    {
      if (!v68)
      {
LABEL_44:
        SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(&v65, v3[30]);
        v32 = *(_OWORD *)&v65.__r_.__value_.__l.__data_;
        *(_OWORD *)&v65.__r_.__value_.__l.__data_ = 0uLL;
        v33 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
        v79 = v32;
        if (v33)
        {
          p_shared_owners = (unint64_t *)&v33->__shared_owners_;
          do
            v35 = __ldaxr(p_shared_owners);
          while (__stlxr(v35 - 1, p_shared_owners));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        size = (std::__shared_weak_count *)v65.__r_.__value_.__l.__size_;
        if (v65.__r_.__value_.__l.__size_)
        {
          v37 = (unint64_t *)(v65.__r_.__value_.__l.__size_ + 8);
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        v66[0] = &__p;
        v66[1] = ve_synthesis_callback;
        v80 = ve_ttsSetOutDevice(v3[28], v3[29], (uint64_t)v66, v27, v28, v29, v30, v31);
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&v65, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          v65 = *(std::string *)a2;
        TTSSynthesizer::TTSSynthesizerInternal::normalize(&v64, (std::string::value_type *)&v65);
        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v65.__r_.__value_.__l.__data_);
        v65 = v64;
        TTSSynthesizer::TTSSynthesizerInternal::preprocess_for_vendor_voice(&v64, (uint64_t)v3, (uint64_t)&v65, v39, v40, v41, v42, v43);
        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v65.__r_.__value_.__l.__data_);
        v65 = v64;
        LODWORD(v64.__r_.__value_.__l.__data_) = 0;
        v44 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
        if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v44 = LODWORD(v65.__r_.__value_.__r.__words[1]);
        v45 = &v65;
        if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v45 = (std::string *)v65.__r_.__value_.__r.__words[0];
        v64.__r_.__value_.__l.__size_ = v44;
        v64.__r_.__value_.__r.__words[2] = (std::string::size_type)v45;
        v80 = ve_ttsProcessText2Speech(v3[28], v3[29], (uint64_t)&v64);
        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v65.__r_.__value_.__l.__data_);
        v46 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
        if (*((_QWORD *)&v79 + 1))
        {
          v47 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        v49 = v78;
        if (v78 == v77)
        {
          v50 = 4;
          v49 = v77;
        }
        else
        {
          if (!v78)
            goto LABEL_77;
          v50 = 5;
        }
        (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_77:
        v51 = v76;
        if (v76 == v75)
        {
          v52 = 4;
          v51 = v75;
        }
        else
        {
          if (!v76)
          {
LABEL_82:
            if (v73)
            {
              v74 = v73;
              operator delete(v73);
            }
            if (v71)
            {
              v72 = v71;
              operator delete(v71);
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            goto LABEL_88;
          }
          v52 = 5;
        }
        (*(void (**)(void))(*v51 + 8 * v52))();
        goto LABEL_82;
      }
      v26 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
    goto LABEL_44;
  }
  v9 = v3[34];
  if (v9)
    goto LABEL_26;
  v10 = (std::__shared_weak_count *)operator new(0x30uLL);
  *(_OWORD *)&v10->__shared_owners_ = 0u;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932198;
  *(_OWORD *)&v10[1].__shared_owners_ = 0u;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&v10[1].__shared_owners_;
  v12 = (std::__shared_weak_count *)operator new(0x50uLL);
  v12->__shared_owners_ = 0;
  v13 = (unint64_t *)&v12->__shared_owners_;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932588;
  v12[1].std::__shared_count = 0u;
  *(_OWORD *)&v12[1].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v12[2].__shared_owners_ = 0u;
  v12[3].__vftable = 0;
  std::string::operator=((std::string *)&v12[1], (const std::string *)a2);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
  v15 = v14[5];
  if (v15)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA9231E8;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v12[1];
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v12;
    do
      v16 = __ldxr(v13);
    while (__stxr(v16 + 1, v13));
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v15 + 8, (__int128 *)&__p.__r_.__value_.__r.__words[1]);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA9231E8;
    v17 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
    if (__p.__r_.__value_.__r.__words[2])
    {
      v18 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  else
  {
    v54 = (_QWORD *)operator new();
    *v54 = &off_1EA9231E8;
    v54[1] = v12 + 1;
    v54[2] = v12;
    do
      v55 = __ldxr(v13);
    while (__stxr(v55 + 1, v13));
    v56 = v14[5];
    v14[5] = (uint64_t)v54;
    if (v56)
      (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  }
  v57 = v3[35];
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10[1];
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v10;
  do
    v58 = __ldxr(v11);
  while (__stxr(v58 + 1, v11));
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v57 + 32))(v57, &__p);
  v59 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v60 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  do
    v62 = __ldaxr(v13);
  while (__stlxr(v62 - 1, v13));
  if (!v62)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  do
    v63 = __ldaxr(v11);
  while (__stlxr(v63 - 1, v11));
  if (!v63)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  do
  {
LABEL_31:
    while (1)
    {
      (*(void (**)(uint8_t *__return_ptr))(*(_QWORD *)v3[35] + 56))(buf);
      v22 = *(_OWORD *)buf;
      if (*(_QWORD *)&buf[8])
      {
        v23 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
          break;
      }
      if (!(_QWORD)v22)
        goto LABEL_88;
    }
    (*(void (**)(_QWORD))(**((_QWORD **)&v22 + 1) + 16))(*((_QWORD *)&v22 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v22 + 1));
  }
  while ((_QWORD)v22);
LABEL_88:
  kdebug_trace();
  return 0;
}

void sub_1DEAA903C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t *a49,uint64_t a50,std::__shared_weak_count *a51)
{
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;

  v52 = a51;
  if (a51)
  {
    p_shared_owners = (unint64_t *)&a51->__shared_owners_;
    do
      v54 = __ldaxr(p_shared_owners);
    while (__stlxr(v54 - 1, p_shared_owners));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = a49;
  if (a49 == &a46)
  {
    v56 = 4;
    v55 = &a46;
  }
  else
  {
    if (!a49)
      goto LABEL_11;
    v56 = 5;
  }
  (*(void (**)(void))(*v55 + 8 * v56))();
LABEL_11:
  v57 = a45;
  if (a45 == &a42)
  {
    v58 = 4;
    v57 = &a42;
  }
  else
  {
    if (!a45)
      goto LABEL_16;
    v58 = 5;
  }
  (*(void (**)(void))(*v57 + 8 * v58))();
LABEL_16:
  if (__p)
    operator delete(__p);
  if (a36)
    operator delete(a36);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

double TTSSynthesizer::get_event_bus@<D0>(TTSSynthesizer *this@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(&v4, *(_QWORD *)(*(_QWORD *)this + 240));
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

void TTSSynthesizer::stop_synthesis(TTSSynthesizer *this)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t v14[16];

  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v2 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_1DE3F6000, v2, OS_LOG_TYPE_INFO, "Stop synthesis.", v14, 2u);
  }
  Diagnostics::log(6, "Stop synthesis.", v3);
  v10 = *(_QWORD *)this;
  v11 = *(_QWORD *)(*(_QWORD *)this + 272);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
  else
    ve_ttsStop(*(_QWORD *)(v10 + 224), *(_QWORD *)(v10 + 232), v4, v5, v6, v7, v8, v9);
  std::mutex::lock((std::mutex *)(v10 + 616));
  v12 = *(_QWORD *)(v10 + 280);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
  v13 = *(_QWORD *)(v10 + 296);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
  std::mutex::unlock((std::mutex *)(v10 + 616));
}

void sub_1DEAA9378(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL TTSSynthesizer::load_resource(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  TTSSynthesizer::TTSSynthesizerInternal::load_voice_resource((uint64_t)&v8, *a1, a2, a3);
  v4 = v8;
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v4 == 0;
}

void TTSSynthesizer::load_voice_resource(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  TTSSynthesizer::TTSSynthesizerInternal::load_voice_resource(a4, *a1, a2, a3);
}

void TTSSynthesizer::load_voice_resource(uint64_t *a1@<X0>, char *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  TTSSynthesizer::TTSSynthesizerInternal::load_voice_resource(a5, *a1, a2, a3, a4);
}

uint64_t TTSSynthesizer::unload_resource(std::__shared_weak_count **a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t shared_owners;
  int v16;
  NSObject *v17;
  const char *v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  const char *v22;
  const void *v23;
  unint64_t *v25;
  unint64_t v26;
  __int128 buf;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v4 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v6 = *a2;
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v6;
    _os_log_impl(&dword_1DE3F6000, v4, OS_LOG_TYPE_INFO, "Unloading resource %p", (uint8_t *)&buf, 0xCu);
  }
  Diagnostics::log(6, "Unloading resource %p", v5, *a2);
  if (*a2)
  {
    if (v7)
    {
      v12 = (std::__shared_weak_count *)a2[1];
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
      }
      shared_owners = v3[11].__shared_owners_;
      if (shared_owners)
      {
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)shared_owners + 64))(v3[11].__shared_owners_, a2);
      }
      else
      {
        if (LOBYTE(v3[21].__shared_owners_))
        {
          v16 = 0;
          v3 = (std::__shared_weak_count *)ve_ttsResourceUnload(v3[9].__shared_owners_, v3[9].__shared_weak_owners_, *((uint64_t **)v7 + 1), *((_QWORD *)v7 + 2), v8, v9, v10, v11);
          if (!v12)
            goto LABEL_24;
LABEL_21:
          v19 = (unint64_t *)&v12->__shared_owners_;
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
            if ((v16 & 1) == 0)
              return (uint64_t)v3;
            goto LABEL_27;
          }
LABEL_24:
          if (!v16)
            return (uint64_t)v3;
LABEL_27:
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v21 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
          {
            v23 = (const void *)*a2;
            LODWORD(buf) = 134217984;
            *(_QWORD *)((char *)&buf + 4) = v23;
            _os_log_impl(&dword_1DE3F6000, v21, OS_LOG_TYPE_ERROR, "Unloaded to resource %p", (uint8_t *)&buf, 0xCu);
          }
          Diagnostics::log(3, "Unloaded to resource %p", v22, *a2);
          return 0;
        }
        PersistentModuleFactory::get_persistent_module<NashvilleFEPersistentModule>(&buf, *(_QWORD **)(v3[10].__shared_weak_owners_ + 24));
        if ((_QWORD)buf)
          NashvilleFEPersistentModule::unload_resource((_QWORD *)buf, (void *)*a2, (std::__shared_weak_count *)a2[1]);
        v3 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
        if (*((_QWORD *)&buf + 1))
        {
          v25 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
      }
      v16 = 1;
      if (!v12)
        goto LABEL_24;
      goto LABEL_21;
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v17 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1DE3F6000, v17, OS_LOG_TYPE_ERROR, "Unable to unload unknown resource.", (uint8_t *)&buf, 2u);
  }
  Diagnostics::log(3, "Unable to unload unknown resource.", v18);
  return 1;
}

void sub_1DEAA974C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t TTSSynthesizer::add_pls_dictionary(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  const char *v4;
  uint8_t v5[16];

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 272);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 72))(v1);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v3 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1DE3F6000, v3, OS_LOG_TYPE_ERROR, "Unable to handle PLS dictionary in this voice", v5, 2u);
  }
  return Diagnostics::log(3, "Unable to handle PLS dictionary in this voice", v4);
}

void TTSSynthesizer::set_prompts_disabled(TTSSynthesizer::TTSSynthesizerInternal **this, uint64_t a2)
{
  TTSSynthesizer::TTSSynthesizerInternal::set_prompts_disabled(*this, a2);
}

void TTSSynthesizer::set_prohibit_neural(TTSSynthesizer *this, char a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD v6[2];

  SharedObjectPool::get<SynthesizerConfig>(v6, *(_QWORD *)(*(_QWORD *)this + 240));
  v3 = (std::__shared_weak_count *)v6[1];
  *(_BYTE *)v6[0] = a2;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

GryphonAnalysis *TTSSynthesizer::set_analysis_enabled(GryphonAnalysis *this, char a2)
{
  unsigned int v2;
  BOOL v3;
  int v4;

  v2 = *(_DWORD *)(*(_QWORD *)this + 368);
  v3 = v2 > 4;
  v4 = (1 << v2) & 0x1A;
  if (!v3 && v4 != 0)
  {
    this = (GryphonAnalysis *)GryphonAnalysis::Storage(this);
    *(_BYTE *)this = a2;
  }
  return this;
}

void TTSSynthesizer::dump_analysis(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  BOOL v3;
  int v4;
  std::string __p;

  v2 = *(_DWORD *)(*(_QWORD *)a1 + 368);
  v3 = v2 > 4;
  v4 = (1 << v2) & 0x1A;
  if (!v3 && v4 != 0)
  {
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      __p = *(std::string *)a2;
    GryphonAnalysis::dump_analysis((uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1DEAA99E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void TTSSynthesizer::set_global_whisper(TTSSynthesizer *this, char a2)
{
  unsigned int v2;
  BOOL v3;
  int v4;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD v10[2];

  v2 = *(_DWORD *)(*(_QWORD *)this + 368);
  v3 = v2 > 4;
  v4 = (1 << v2) & 0x1A;
  if (!v3 && v4 != 0)
  {
    SharedObjectPool::get<SynthesizerConfig>(v10, *(_QWORD *)(*(_QWORD *)this + 240));
    v7 = (std::__shared_weak_count *)v10[1];
    *(_BYTE *)(v10[0] + 1) = a2;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

uint64_t *TTSSynthesizer::set_censor_plaintext(uint64_t *this, int a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;

  v2 = *this;
  if (*(_BYTE *)(*this + 424))
  {
    if ((a2 & 1) == 0)
    {
      do
        v3 = __ldaxr((unsigned int *)&censorship_count);
      while (__stlxr(v3 - 1, (unsigned int *)&censorship_count));
    }
  }
  else if (a2)
  {
    do
      v4 = __ldaxr((unsigned int *)&censorship_count);
    while (__stlxr(v4 + 1, (unsigned int *)&censorship_count));
  }
  *(_BYTE *)(v2 + 424) = a2;
  return this;
}

uint64_t **TTSSynthesizer::preheat(TTSSynthesizer *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const std::__fs::filesystem::directory_entry *v4;
  std::__fs::filesystem::path::__string_view v5;
  __int128 *p_p;
  std::basic_string_view<_CharT, _Traits>::size_type v7;
  std::basic_string_view<_CharT, _Traits>::size_type v8;
  void *v9;
  int v10;
  std::string *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  unint64_t *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *cntrl;
  uint64_t *p_shared_owners;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t **result;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  __int128 __p;
  __int128 v52;
  _DWORD v53[2];
  std::string v54;
  std::string p;
  std::__fs::filesystem::directory_iterator v56;

  v1 = *(_QWORD *)this;
  v2 = *(_QWORD *)(*(_QWORD *)this + 488);
  v3 = *(_QWORD *)(*(_QWORD *)this + 496);
  if (v2 != v3)
    goto LABEL_91;
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>((std::string *)&__p, (char *)(v1 + 376));
  MEMORY[0x1DF0ECE10](&v56, &__p, 0, 0);
  if (SBYTE7(v52) < 0)
    operator delete((void *)__p);
  while (v56.__imp_.__ptr_)
  {
    v4 = std::__fs::filesystem::directory_iterator::__dereference(&v56);
    if (SHIBYTE(v4->__p_.__pn_.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&p, v4->__p_.__pn_.__r_.__value_.__l.__data_, v4->__p_.__pn_.__r_.__value_.__l.__size_);
    else
      p = (std::string)v4->__p_;
    v5 = std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)&p);
    if (v5.__size_ >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v5.__size_ >= 0x17)
    {
      v7 = (v5.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5.__size_ | 7) != 0x17)
        v7 = v5.__size_ | 7;
      v8 = v7 + 1;
      p_p = (__int128 *)operator new(v7 + 1);
      *((_QWORD *)&__p + 1) = v5.__size_;
      *(_QWORD *)&v52 = v8 | 0x8000000000000000;
      *(_QWORD *)&__p = p_p;
LABEL_15:
      memmove(p_p, v5.__data_, v5.__size_);
      goto LABEL_16;
    }
    BYTE7(v52) = v5.__size_;
    p_p = &__p;
    if (v5.__size_)
      goto LABEL_15;
LABEL_16:
    *((_BYTE *)p_p + v5.__size_) = 0;
    v9 = (void *)__p;
    v53[0] = v52;
    *(_DWORD *)((char *)v53 + 3) = *(_DWORD *)((char *)&v52 + 3);
    v10 = BYTE7(v52);
    if ((BYTE7(v52) & 0x80) == 0)
    {
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = __p;
      LODWORD(v54.__r_.__value_.__r.__words[2]) = v53[0];
      *(_DWORD *)((char *)&v54.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v53 + 3);
      *((_BYTE *)&v54.__r_.__value_.__s + 23) = BYTE7(v52);
      goto LABEL_20;
    }
    std::string::__init_copy_ctor_external(&v54, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    operator delete(v9);
    if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      v10 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
LABEL_20:
      if (v10 == 4)
      {
        if (LODWORD(v54.__r_.__value_.__l.__data_) == 1718510701
          || LODWORD(v54.__r_.__value_.__l.__data_) == 2019847785)
        {
          goto LABEL_32;
        }
        v11 = &v54;
LABEL_24:
        if (LODWORD(v11->__r_.__value_.__l.__data_) == 1718513266)
          goto LABEL_32;
        goto LABEL_30;
      }
      goto LABEL_30;
    }
    if (v54.__r_.__value_.__l.__size_ == 4)
    {
      v11 = (std::string *)v54.__r_.__value_.__r.__words[0];
      if (*(_DWORD *)v54.__r_.__value_.__l.__data_ == 2019847785
        || *(_DWORD *)v54.__r_.__value_.__l.__data_ == 1718510701)
      {
        goto LABEL_32;
      }
      goto LABEL_24;
    }
LABEL_30:
    if (*(_QWORD *)(v1 + 272) || std::string::compare(&v54, 0, 4uLL, "clc_"))
      goto LABEL_67;
LABEL_32:
    MemoryMap::MemoryMap(&__p, (uint64_t)&p);
    v13 = *(char **)(v1 + 496);
    v12 = *(_QWORD *)(v1 + 504);
    if ((unint64_t)v13 < v12)
    {
      *(_QWORD *)v13 = __p;
      v14 = *((_QWORD *)&__p + 1);
      *((_QWORD *)v13 + 1) = *((_QWORD *)&__p + 1);
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      *((_OWORD *)v13 + 1) = v52;
      v17 = v13 + 32;
      *(_QWORD *)(v1 + 496) = v13 + 32;
      goto LABEL_62;
    }
    v18 = *(char **)(v1 + 488);
    v19 = (v13 - v18) >> 5;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v21 = v12 - (_QWORD)v18;
    if (v21 >> 4 > v20)
      v20 = v21 >> 4;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFE0)
      v22 = 0x7FFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 59)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v23 = (char *)operator new(32 * v22);
    }
    else
    {
      v23 = 0;
    }
    v24 = *((_QWORD *)&__p + 1);
    v25 = &v23[32 * v19];
    *(_QWORD *)v25 = __p;
    *((_QWORD *)v25 + 1) = v24;
    if (v24)
    {
      v26 = (unint64_t *)(v24 + 8);
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
      v18 = *(char **)(v1 + 488);
      v13 = *(char **)(v1 + 496);
    }
    v28 = &v23[32 * v22];
    *((_OWORD *)v25 + 1) = v52;
    v17 = v25 + 32;
    if (v13 == v18)
    {
      *(_QWORD *)(v1 + 488) = v25;
      *(_QWORD *)(v1 + 496) = v17;
      *(_QWORD *)(v1 + 504) = v28;
      if (!v18)
        goto LABEL_62;
    }
    else
    {
      v29 = v13;
      v30 = &v23[32 * v19];
      do
      {
        v31 = *((_QWORD *)v29 - 4);
        v29 -= 32;
        *((_QWORD *)v30 - 4) = v31;
        v30 -= 32;
        v32 = *((_QWORD *)v29 + 1);
        *((_QWORD *)v30 + 1) = v32;
        if (v32)
        {
          v33 = (unint64_t *)(v32 + 8);
          do
            v34 = __ldxr(v33);
          while (__stxr(v34 + 1, v33));
        }
        *((_OWORD *)v25 - 1) = *((_OWORD *)v13 - 1);
        v13 = v29;
        v25 = v30;
      }
      while (v29 != v18);
      v35 = *(char **)(v1 + 488);
      v18 = *(char **)(v1 + 496);
      *(_QWORD *)(v1 + 488) = v30;
      *(_QWORD *)(v1 + 496) = v17;
      *(_QWORD *)(v1 + 504) = v28;
      if (v18 != v35)
      {
        do
        {
          v18 -= 32;
          std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)v18);
        }
        while (v18 != v35);
        v18 = v35;
      }
      if (!v18)
        goto LABEL_62;
    }
    operator delete(v18);
LABEL_62:
    *(_QWORD *)(v1 + 496) = v17;
    v36 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v37 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
LABEL_67:
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    if (SHIBYTE(p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(p.__r_.__value_.__l.__data_);
    std::__fs::filesystem::directory_iterator::__increment(&v56, 0);
  }
  cntrl = v56.__imp_.__cntrl_;
  if (v56.__imp_.__cntrl_)
  {
    p_shared_owners = &v56.__imp_.__cntrl_->__shared_owners_;
    do
      v41 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v41 - 1, (unint64_t *)p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
      std::__shared_weak_count::__release_weak(cntrl);
    }
  }
  v2 = *(_QWORD *)(v1 + 488);
  v3 = *(_QWORD *)(v1 + 496);
LABEL_91:
  while (v2 != v3)
  {
    v42 = *(std::__shared_weak_count **)(v2 + 8);
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    madvise(*(void **)(v2 + 16), *(_QWORD *)(v2 + 24), 3);
    if (v42)
    {
      v45 = (unint64_t *)&v42->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v2 += 32;
  }
  result = *(uint64_t ***)(v1 + 280);
  if (result)
  {
    result = (uint64_t **)((uint64_t (*)(uint64_t **))(*result)[8])(result);
    v48 = *result;
    v49 = result[1];
    while (v48 != v49)
    {
      v50 = *v48;
      v48 += 2;
      result = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 40))(v50);
    }
  }
  return result;
}

void sub_1DEAAA03C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t TTSSynthesizer::set_log_level(uint64_t this)
{
  Diagnostics::s_log_level = this;
  return this;
}

void TTSSynthesizer::set_neural_cost(uint64_t *a1, int a2)
{
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  int v5;
  BOOL v6;
  NSObject *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  char *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  const void **v31;
  uint64_t v32;
  const void ***v33;
  const void **v34;
  _BOOL4 v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  NSObject *v52;
  const char *v53;
  uint64_t **v54;
  uint64_t *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  void (***v63)(uint64_t *__return_ptr, _QWORD, _QWORD *, uint64_t, uint64_t *);
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::string::size_type v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  const void **v77;
  const void **v78;
  const void **v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t i;
  uint64_t v85;
  const char *v86;
  char *__s;
  uint64_t v88;
  std::__shared_weak_count *v89;
  uint64_t v90[2];
  uint64_t v91;
  std::__shared_weak_count *v92;
  void (***v93)(uint64_t *__return_ptr, _QWORD, _QWORD *, uint64_t, uint64_t *);
  std::__shared_weak_count *v94;
  _BYTE __p[12];
  __int16 v96;
  char *v97;
  char v98;
  __int128 buf;
  char *v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  if (*(_DWORD *)(*a1 + 480) != a2)
  {
    v3 = *(_DWORD *)(v2 + 368);
    v4 = v3 > 4;
    v5 = (1 << v3) & 0x1A;
    v6 = v4 || v5 == 0;
    if (!v6 && *(_QWORD *)(v2 + 280) && *(_QWORD *)(v2 + 256) && *(_QWORD *)(v2 + 240))
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v8 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
      {
        if (a2 == 1)
          v10 = "lowcost";
        else
          v10 = "normal";
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v10;
        _os_log_impl(&dword_1DE3F6000, v8, OS_LOG_TYPE_DEFAULT, "Switching to cost mode: %s", (uint8_t *)&buf, 0xCu);
      }
      if (a2 == 1)
        v11 = "lowcost";
      else
        v11 = "normal";
      v86 = v11;
      v12 = &byte_1DEBD87CE;
      if (a2 == 1)
        v12 = "lowcost";
      __s = v12;
      Diagnostics::log(5, "Switching to cost mode: %s", v9, v86);
      v13 = *(std::__shared_weak_count **)(v2 + 248);
      v14 = *(_QWORD *)(v2 + 256);
      v90[0] = *(_QWORD *)(v2 + 240);
      v90[1] = (uint64_t)v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      std::string::basic_string[abi:ne180100]<0>(&buf, __s);
      PersistentModuleFactory::switch_module_mode_from_config(v14, v2 + 568, v90, (const void **)&buf);
      if (SHIBYTE(v100) < 0)
        operator delete((void *)buf);
      if (v13)
      {
        v17 = (unint64_t *)&v13->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 280) + 64))(*(_QWORD *)(v2 + 280));
      buf = 0uLL;
      v100 = 0;
      v20 = *(char **)v19;
      v21 = *(char **)(v19 + 8);
      *(_QWORD *)__p = &buf;
      __p[8] = 0;
      v22 = v21 - v20;
      if (v21 != v20)
      {
        if (v22 < 0)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v23 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v22 >> 4);
        v24 = v23;
        *(_QWORD *)&buf = v23;
        *((_QWORD *)&buf + 1) = v23;
        v100 = (char *)&v23[2 * v25];
        v26 = v23;
        do
        {
          *v26 = *(_QWORD *)v20;
          v27 = *((_QWORD *)v20 + 1);
          v26[1] = v27;
          if (v27)
          {
            v28 = (unint64_t *)(v27 + 8);
            do
              v29 = __ldxr(v28);
            while (__stxr(v29 + 1, v28));
          }
          v20 += 16;
          v26 += 2;
        }
        while (v20 != v21);
        *((_QWORD *)&buf + 1) = v26;
        if (v26 != v23)
        {
          do
          {
            v30 = *(_QWORD **)(*v24 + 96);
            if (v30)
            {
              std::string::basic_string[abi:ne180100]<0>(__p, __s);
              v31 = (const void **)(v30 + 4);
              v32 = v30[4];
              if (!v32)
                goto LABEL_47;
              v33 = (const void ***)(v30 + 3);
              v34 = (const void **)(v30 + 4);
              do
              {
                v35 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)(v30 + 5), (const void **)(v32 + 32), (const void **)__p);
                v36 = (uint64_t *)(v32 + 8);
                if (!v35)
                {
                  v36 = (uint64_t *)v32;
                  v34 = (const void **)v32;
                }
                v32 = *v36;
              }
              while (*v36);
              if (v34 == v31
                || std::less<std::string>::operator()[abi:ne180100]((uint64_t)(v30 + 5), (const void **)__p, v34 + 4))
              {
LABEL_47:
                v88 = 0;
                v89 = 0;
              }
              else
              {
                v62 = *std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)(v30 + 3), &v93, (const void **)__p);
                if (!v62)
                  std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
                SharedObjectPool::get<ModuleFactory>(&v93, v30[6]);
                v63 = v93;
                v64 = (std::__shared_weak_count *)v30[7];
                v91 = v30[6];
                v92 = v64;
                if (v64)
                {
                  v65 = (unint64_t *)&v64->__shared_owners_;
                  do
                    v66 = __ldxr(v65);
                  while (__stxr(v66 + 1, v65));
                }
                (**v63)(&v88, v63, v30, v62 + 56, &v91);
                v67 = v92;
                if (v92)
                {
                  v68 = (unint64_t *)&v92->__shared_owners_;
                  do
                    v69 = __ldaxr(v68);
                  while (__stlxr(v69 - 1, v68));
                  if (!v69)
                  {
                    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                    std::__shared_weak_count::__release_weak(v67);
                  }
                }
                v70 = v88;
                v71 = v30[6];
                v72 = (std::__shared_weak_count *)v30[7];
                if (v72)
                {
                  v73 = (unint64_t *)&v72->__shared_owners_;
                  do
                    v74 = __ldxr(v73);
                  while (__stxr(v74 + 1, v73));
                }
                Module::enable_hot_plugging(v70, (uint64_t)v30, v71, v72);
                if (v72)
                {
                  v75 = (unint64_t *)&v72->__shared_owners_;
                  do
                    v76 = __ldaxr(v75);
                  while (__stlxr(v76 - 1, v75));
                  if (!v76)
                  {
                    ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                    std::__shared_weak_count::__release_weak(v72);
                  }
                }
                v77 = *v33;
                if (*v33 != v31)
                {
                  do
                  {
                    ModuleBuilder::add_config(*(_QWORD *)(v88 + 96), (uint64_t)(v77 + 4), (uint64_t)(v77 + 7));
                    v78 = (const void **)v77[1];
                    if (v78)
                    {
                      do
                      {
                        v79 = v78;
                        v78 = (const void **)*v78;
                      }
                      while (v78);
                    }
                    else
                    {
                      do
                      {
                        v79 = (const void **)v77[2];
                        v6 = *v79 == v77;
                        v77 = v79;
                      }
                      while (!v6);
                    }
                    v77 = v79;
                  }
                  while (v79 != v31);
                }
                v80 = v94;
                if (v94)
                {
                  v81 = (unint64_t *)&v94->__shared_owners_;
                  do
                    v82 = __ldaxr(v81);
                  while (__stlxr(v82 - 1, v81));
                  if (!v82)
                  {
                    ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                    std::__shared_weak_count::__release_weak(v80);
                  }
                }
              }
              if (v98 < 0)
                operator delete(*(void **)__p);
              v37 = v88;
              if (v88)
              {
                v38 = *(_QWORD *)(v2 + 280);
                v39 = *v24;
                v40 = (std::__shared_weak_count *)v24[1];
                if (v40)
                {
                  v41 = (unint64_t *)&v40->__shared_owners_;
                  do
                    v42 = __ldxr(v41);
                  while (__stxr(v42 + 1, v41));
                }
                v43 = v89;
                if (v89)
                {
                  v44 = (unint64_t *)&v89->__shared_owners_;
                  do
                    v45 = __ldxr(v44);
                  while (__stxr(v45 + 1, v44));
                }
                v46 = *(_QWORD **)(v38 + 8);
                v47 = *(_QWORD **)(v38 + 16);
                while (v46 != v47)
                {
                  if (*v46 == v39)
                    v46 = std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v46, v37, (uint64_t)v43);
                  v46 += 2;
                }
                if (v43)
                {
                  v48 = (unint64_t *)&v43->__shared_owners_;
                  do
                    v49 = __ldaxr(v48);
                  while (__stlxr(v49 - 1, v48));
                  if (!v49)
                  {
                    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                    std::__shared_weak_count::__release_weak(v43);
                  }
                }
                if (v40)
                {
                  v50 = (unint64_t *)&v40->__shared_owners_;
                  do
                    v51 = __ldaxr(v50);
                  while (__stlxr(v51 - 1, v50));
                  if (!v51)
                  {
                    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                    std::__shared_weak_count::__release_weak(v40);
                  }
                }
              }
              else
              {
                if (Diagnostics_GetLogObject(void)::onceToken != -1)
                  dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                v52 = Diagnostics_GetLogObject(void)::__profile_log_default;
                if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
                {
                  v54 = *(uint64_t ***)(*v24 + 96);
                  if (*((char *)v54 + 23) < 0)
                    v54 = (uint64_t **)*v54;
                  *(_DWORD *)__p = 136315394;
                  *(_QWORD *)&__p[4] = v54;
                  v96 = 2080;
                  v97 = __s;
                  _os_log_impl(&dword_1DE3F6000, v52, OS_LOG_TYPE_ERROR, "Unable to re-create module '%s' for config '%s'", __p, 0x16u);
                }
                v55 = *(uint64_t **)(*v24 + 96);
                if (*((char *)v55 + 23) < 0)
                  v55 = (uint64_t *)*v55;
                Diagnostics::log(3, "Unable to re-create module '%s' for config '%s'", v53, v55, __s);
              }
              v56 = (std::__shared_weak_count *)v24[1];
              *v24 = 0;
              v24[1] = 0;
              if (v56)
              {
                v57 = (unint64_t *)&v56->__shared_owners_;
                do
                  v58 = __ldaxr(v57);
                while (__stlxr(v58 - 1, v57));
                if (!v58)
                {
                  ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                  std::__shared_weak_count::__release_weak(v56);
                }
              }
              v59 = v89;
              if (v89)
              {
                v60 = (unint64_t *)&v89->__shared_owners_;
                do
                  v61 = __ldaxr(v60);
                while (__stlxr(v61 - 1, v60));
                if (!v61)
                {
                  ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                  std::__shared_weak_count::__release_weak(v59);
                }
              }
            }
            v24 += 2;
          }
          while (v24 != v26);
        }
      }
      v83 = *(_QWORD *)(v2 + 256);
      v85 = *(_QWORD *)(v83 + 88);
      for (i = *(_QWORD *)(v83 + 96);
            i != v85;
      *(_QWORD *)(v83 + 96) = v85;
      *(_DWORD *)(v2 + 480) = a2;
      *(_QWORD *)__p = &buf;
      std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    }
  }
}

void sub_1DEAAA82C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  _Unwind_Resume(exception_object);
}

void TTSSynthesizer::preprocess_for_vendor_voice(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, std::string *a8@<X8>)
{
  TTSSynthesizer::TTSSynthesizerInternal::preprocess_for_vendor_voice(a8, *a1, a2, a3, a4, a5, a6, a7);
}

void SiriTTS::strip_markup(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::string *v10;
  FrontendEnvironment *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  void (***v23)(uint64_t *__return_ptr, _QWORD, __int128 *, __int128 *, uint64_t *, _QWORD);
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  FrontendModuleBroker *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  __n128 v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  int v55;
  uint64_t v57;
  int v58;
  const std::string::value_type *v59;
  std::string::size_type v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  void *__p[2];
  char v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  __int128 v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  FrontendEnvironment *v93;
  std::__shared_weak_count *v94;
  __int128 v95;
  void (***v96)(uint64_t *__return_ptr, _QWORD, __int128 *, __int128 *, uint64_t *, _QWORD);
  std::__shared_weak_count *v97;
  std::string *v98;
  std::__shared_weak_count *v99;
  FrontendEnvironment *v100;
  std::__shared_weak_count *v101;
  __int128 v102;
  char v103;
  __int128 v104;
  char v105;

  v4 = (char *)operator new(0xD8uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_QWORD *)v4 = &off_1EA933BD8;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *((_QWORD *)v4 + 13) = 0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  v4[168] = 0;
  *((_OWORD *)v4 + 12) = 0u;
  *((_QWORD *)v4 + 22) = 0;
  *((_QWORD *)v4 + 23) = v4 + 192;
  *((_QWORD *)v4 + 26) = v4 + 24;
  v100 = (FrontendEnvironment *)(v4 + 24);
  v101 = (std::__shared_weak_count *)v4;
  *(_OWORD *)(v4 + 120) = 0u;
  v5 = (uint64_t)(v4 + 120);
  v6 = operator new(0x38uLL);
  v6[1] = 0;
  v6[2] = 0;
  v6[3] = &off_1EA91E548;
  *v6 = &off_1EA933238;
  v6[5] = 0;
  v6[6] = 0;
  v6[4] = 0;
  *(_QWORD *)&v104 = v6 + 3;
  *((_QWORD *)&v104 + 1) = v6;
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v5, &v104);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
  if (*((_QWORD *)&v104 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::string *)operator new(0x48uLL);
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA9321D0;
  std::string::basic_string[abi:ne180100]<0>(&v104, &byte_1DEBD87CE);
  std::string::basic_string[abi:ne180100]<0>(&v102, &byte_1DEBD87CE);
  Environment::Environment(v10 + 1, &v104, &v102);
  if (v103 < 0)
    operator delete((void *)v102);
  if (v105 < 0)
    operator delete((void *)v104);
  v98 = v10 + 1;
  v99 = (std::__shared_weak_count *)v10;
  std::allocate_shared[abi:ne180100]<SharedObjectPool,std::allocator<SharedObjectPool>,std::shared_ptr<Environment> &,void>(&v102, (uint64_t)&v10[1], (std::__shared_weak_count *)v10);
  PersistentModuleFactory::create((PersistentModuleFactory *)&v96);
  v11 = v100;
  v12 = v102;
  std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)v100 + 16, v102, *((uint64_t *)&v102 + 1));
  v93 = v11;
  v94 = v101;
  if (v101)
  {
    p_shared_owners = (unint64_t *)&v101->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  SharedObjectPool::inject<FrontendEnvironment>(&v95, v12, (uint64_t *)&v93);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v95 + 1);
  if (*((_QWORD *)&v95 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v95 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v94;
  if (v94)
  {
    v19 = (unint64_t *)&v94->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v102;
  v23 = v96;
  v22 = v97;
  if (v97)
  {
    p_shared_weak_owners = (unint64_t *)&v97->__shared_weak_owners_;
    do
      v25 = __ldxr(p_shared_weak_owners);
    while (__stxr(v25 + 1, p_shared_weak_owners));
  }
  v26 = *(std::__shared_weak_count **)(v21 + 24);
  *(_QWORD *)(v21 + 16) = v23;
  *(_QWORD *)(v21 + 24) = v22;
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  FrontendEnvironment::load_configuration(v100);
  std::string::basic_string[abi:ne180100]<0>(&v104, "parse");
  LOBYTE(v90) = 0;
  *((_QWORD *)&v90 + 1) = 0;
  v88 = v21;
  v89 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
  if (*((_QWORD *)&v102 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  (**v23)(&v91, v23, &v104, &v90, &v88, 0);
  v29 = v92;
  if (v92)
  {
    v30 = (unint64_t *)&v92->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v89;
  if (v89)
  {
    v33 = (unint64_t *)&v89->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v90 + 1, v90);
  if (v105 < 0)
    operator delete((void *)v104);
  v36 = FrontendModuleBroker::instance(v35);
  std::string::basic_string[abi:ne180100]<0>(__p, "parse");
  v84 = 0;
  v85 = 0;
  FrontendModuleBroker::create(&v104, v36, (const char *)__p, (uint64_t)&v84, (std::string::size_type)v100);
  v37 = v85;
  if (v85)
  {
    v38 = (unint64_t *)&v85->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (v87 < 0)
    operator delete(__p[0]);
  v82 = v104;
  if (*((_QWORD *)&v104 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  v42 = FrontendModule::head(&v83, &v82);
  v43 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
  v90 = v83;
  if (*((_QWORD *)&v83 + 1))
  {
    v44 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
    do
      v46 = __ldaxr(v44);
    while (__stlxr(v46 - 1, v44));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v43->__on_zero_shared)(v43, v42);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
  if (*((_QWORD *)&v82 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v47->__on_zero_shared)(v47, v42);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  (*(void (**)(_QWORD, uint64_t, __n128))(*(_QWORD *)v90 + 56))(v90, a1, v42);
  v50 = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  do
  {
    while (1)
    {
      v51 = v104;
      (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(*(_QWORD *)v104 + 16))(&v83, v104, 0);
      v52 = v83;
      if ((_QWORD)v83)
      {
        if ((_QWORD *)(v52 + 8) != v53)
        {
          v54 = v53[5];
          v55 = *(_DWORD *)(v54 + 8);
          if (v55 == 1952807028 || v55 == 1885892462)
          {
            v57 = *(unsigned __int8 *)(a2 + 23);
            if ((v57 & 0x80u) != 0)
              v57 = *(_QWORD *)(a2 + 8);
            if (v57 && *(_QWORD *)(v54 + 16) != v50)
              std::string::push_back((std::string *)a2, 32);
            v58 = *(char *)(v54 + 55);
            if (v58 >= 0)
              v59 = (const std::string::value_type *)(v54 + 32);
            else
              v59 = *(const std::string::value_type **)(v54 + 32);
            if (v58 >= 0)
              v60 = *(unsigned __int8 *)(v54 + 55);
            else
              v60 = *(_QWORD *)(v54 + 40);
            std::string::append((std::string *)a2, v59, v60);
            v50 = *(_QWORD *)(v54 + 24) + *(_QWORD *)(v54 + 16);
          }
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v51 + 32))(v51);
      }
      v61 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
      if (*((_QWORD *)&v83 + 1))
      {
        v62 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
          break;
      }
      if (!v52)
        goto LABEL_92;
    }
    ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
    std::__shared_weak_count::__release_weak(v61);
  }
  while (v52);
LABEL_92:
  v64 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
  if (*((_QWORD *)&v90 + 1))
  {
    v65 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
  if (*((_QWORD *)&v104 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = v97;
  if (v97)
  {
    v71 = (unint64_t *)&v97->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
  if (*((_QWORD *)&v102 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = v99;
  if (v99)
  {
    v77 = (unint64_t *)&v99->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = v101;
  if (v101)
  {
    v80 = (unint64_t *)&v101->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
}

void sub_1DEAAB0F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v32 - 104);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v32 - 128);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v32 - 160);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v32 - 144);
  _Unwind_Resume(a1);
}

BOOL gryphon_HasPhaticResponses(char *__s)
{
  _BOOL8 has_phatic_responses;
  void *__p[2];
  char v4;

  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  has_phatic_responses = TTSSynthesizer::has_phatic_responses((char *)__p);
  if (v4 < 0)
    operator delete(__p[0]);
  return has_phatic_responses;
}

void sub_1DEAAB268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t gryphon_GetMinCompatibilityVersion()
{
  return 9;
}

uint64_t gryphon_GetCurrentCompatibilityVersion()
{
  return 68;
}

uint64_t DetectSSMLImpl::is_ssml(uint64_t a1, char *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t result;
  char *v7;
  int v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2;
  else
    v5 = *(char **)a2;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  result = std::regex_search[abi:ne180100]<std::__wrap_iter<char const*>,char,std::regex_traits<char>>(v5, &v5[v4], a1 + 8);
  if ((_DWORD)result)
  {
    v7 = 0;
    v8 = a2[23];
    v9 = a2[23];
    v10 = v8 < 0;
    v12 = *(char **)a2;
    v11 = *((_QWORD *)a2 + 1);
    if (v8 >= 0)
      v13 = a2;
    else
      v13 = *(char **)a2;
    if (v8 >= 0)
      v14 = a2[23];
    else
      v14 = *((_QWORD *)a2 + 1);
    v35 = a1 + 72;
    v36 = a1 + 136;
    v34 = a1 + 200;
    do
    {
      v15 = &v7[(_QWORD)v13];
      v16 = &v13[v14];
      while (1)
      {
        if (v16 - v15 < 6)
          return 0;
        result = (uint64_t)memchr(v15, 60, v16 - v15 - 5);
        if (!result)
          return result;
        v17 = result;
        if (*(_DWORD *)result == 1701868348 && *(_WORD *)(result + 4) == 27489)
          break;
        v15 = (char *)(result + 1);
      }
      result = 0;
      if ((char *)v17 == v16)
        break;
      v19 = v17 - (_QWORD)v13;
      if (v19 == -1)
        break;
      v7 = (char *)(v19 + 6);
      if (v10)
        v20 = v12;
      else
        v20 = a2;
      if (v10)
        v21 = v11;
      else
        v21 = v9;
      if ((std::regex_search[abi:ne180100]<std::__wrap_iter<char const*>,char,std::regex_traits<char>>(&v7[(_QWORD)v20], &v20[v21], v36) & 1) != 0)return 1;
      v22 = a2[23];
      if ((v22 & 0x80u) == 0)
        v23 = a2;
      else
        v23 = *(char **)a2;
      if ((v22 & 0x80u) != 0)
        v22 = *((_QWORD *)a2 + 1);
      v24 = v7;
      if (std::regex_search[abi:ne180100]<std::__wrap_iter<char const*>,char,std::regex_traits<char>>(&v7[(_QWORD)v23], &v23[v22], v35))
      {
LABEL_37:
        v9 = a2[23];
        v11 = *((_QWORD *)a2 + 1);
        v25 = *(char **)a2;
        if ((v9 & 0x80u) == 0)
          v26 = a2;
        else
          v26 = *(char **)a2;
        if ((v9 & 0x80u) == 0)
          v27 = a2[23];
        else
          v27 = *((_QWORD *)a2 + 1);
        if (v27 >= (unint64_t)v24)
        {
          v28 = &v24[(_QWORD)v26];
          v29 = &v26[v27];
          v30 = v27 - (_QWORD)v24;
          if (v30 >= 7)
          {
            do
            {
              v31 = (char *)memchr(v28, 60, v30 - 6);
              if (!v31)
                break;
              if (*(_DWORD *)v31 == 1886596924 && *(_DWORD *)(v31 + 3) == 1801545072)
              {
                if (v31 == v29)
                  break;
                v24 = (char *)(v31 - v26);
                if (v31 - v26 == -1)
                  break;
                v33 = std::regex_search[abi:ne180100]<std::__wrap_iter<char const*>,char,std::regex_traits<char>>(v31 + 7, v29, v34);
                result = 1;
                if ((v33 & 1) == 0)
                  goto LABEL_37;
                return result;
              }
              v28 = v31 + 1;
              v30 = v29 - v28;
            }
            while (v29 - v28 >= 7);
          }
        }
      }
      else
      {
        v9 = a2[23];
        v25 = *(char **)a2;
        v11 = *((_QWORD *)a2 + 1);
      }
      result = 0;
      v10 = (v9 & 0x80u) != 0;
      if ((v9 & 0x80u) == 0)
        v13 = a2;
      else
        v13 = v25;
      if ((v9 & 0x80u) == 0)
        v14 = v9;
      else
        v14 = v11;
      v12 = v25;
    }
    while (v14 >= (unint64_t)v7);
  }
  return result;
}

void DetectSSMLImpl::~DetectSSMLImpl(std::locale *this)
{
  this->__locale_ = (std::locale::__imp *)&off_1EA91D858;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&this[30]);
  std::locale::~locale(this + 25);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&this[22]);
  std::locale::~locale(this + 17);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&this[14]);
  std::locale::~locale(this + 9);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&this[6]);
  std::locale::~locale(this + 1);
}

{
  this->__locale_ = (std::locale::__imp *)&off_1EA91D858;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&this[30]);
  std::locale::~locale(this + 25);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&this[22]);
  std::locale::~locale(this + 17);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&this[14]);
  std::locale::~locale(this + 9);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&this[6]);
  std::locale::~locale(this + 1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::regex_search[abi:ne180100]<std::__wrap_iter<char const*>,char,std::regex_traits<char>>(char *a1, char *a2, uint64_t a3)
{
  unint64_t v4;
  std::sub_match<const char *> *v5;
  uint64_t v6;
  std::vector<std::csub_match> __p[2];
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  void *v17[2];
  unsigned __int8 v18;

  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(v17, a1, a2, a2 - a1);
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  memset(__p, 0, 41);
  v4 = v18;
  if ((v18 & 0x80u) == 0)
    v5 = (std::sub_match<const char *> *)v17;
  else
    v5 = (std::sub_match<const char *> *)v17[0];
  if ((v18 & 0x80u) != 0)
    v4 = (unint64_t)v17[1];
  v6 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a3, v5, (std::sub_match<const char *> *)((char *)v5 + v4), __p, 64);
  if (__p[0].__begin_)
    operator delete(__p[0].__begin_);
  if ((char)v18 < 0)
    operator delete(v17[0]);
  return v6;
}

void sub_1DEAAB698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  uint64_t v9;

  if (__p)
    operator delete(__p);
  if (*(char *)(v9 - 17) < 0)
    operator delete(*(void **)(v9 - 40));
  _Unwind_Resume(exception_object);
}

void ParseImpl::~ParseImpl(void **this)
{
  ParseImpl::~ParseImpl(this);
  JUMPOUT(0x1DF0ED014);
}

{
  *this = &off_1EA922B78;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 30));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 28));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 26));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 24));
  *this = off_1EA91CE38;
  if (*((char *)this + 183) < 0)
    operator delete(this[20]);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 18));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 16));
  FrontendModule::~FrontendModule(this);
}

void ParseImpl::generate_tokens(ParseImpl *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *exception;
  uint64_t v20;
  std::__shared_weak_count *v21;
  __int128 v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 2) + 16))(&v23, *((_QWORD *)this + 2), 0);
  v2 = v23;
  if (v23)
  {
    if ((_QWORD *)(v2 + 8) == v3)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      StringFormatter::StringFormatter((StringFormatter *)&v22, "ParseImpl - TokenBasicItem is missing");
      MEMORY[0x1DF0EC99C](exception, &v22);
      __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    v4 = v3[5];
    v5 = v4 + 32;
    v7 = *(_QWORD *)(v4 + 56);
    v6 = *(std::__shared_weak_count **)(v4 + 64);
    v20 = v7;
    v21 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    (*(void (**)(ParseImpl *, uint64_t, uint64_t *))(*(_QWORD *)this + 56))(this, v5, &v20);
    v10 = v21;
    if (v21)
    {
      v11 = (unint64_t *)&v21->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
  }
  v13 = v24;
  if (v24)
  {
    v14 = (unint64_t *)&v24->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 26) + 16))(&v22, *((_QWORD *)this + 26), 0);
  if ((_QWORD)v22)
  {
    std::deque<std::shared_ptr<Agglomerate>>::push_back((_QWORD *)this + 4, &v22);
    (*(void (**)(_QWORD))(**((_QWORD **)this + 26) + 32))(*((_QWORD *)this + 26));
  }
  else
  {
    *((_BYTE *)this + 8) = 1;
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1DEAAB8D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;
  int v19;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
      _Unwind_Resume(a1);
    }
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

void ParseImpl::set_text(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  int v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  __n128 v38;

  v6 = (***(uint64_t (****)(_QWORD))(a1 + 192))(*(_QWORD *)(a1 + 192));
  v7 = *a3;
  if (v6)
  {
    v8 = (std::__shared_weak_count *)a3[1];
    v37 = v7;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    v11 = *(_QWORD *)(a1 + 240);
    if (!v11)
    {
      ParseSSML::create(&v38, 0, 0, *(_QWORD *)(a1 + 184));
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a1 + 240, (__int128 *)&v38);
      v12 = (std::__shared_weak_count *)v38.n128_u64[1];
      if (v38.n128_u64[1])
      {
        v13 = (unint64_t *)(v38.n128_u64[1] + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v11 = *(_QWORD *)(a1 + 240);
    }
    std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(a1 + 208), v11, *(_QWORD *)(a1 + 248));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 24))(*(_QWORD *)(a1 + 208));
    v15 = *(_QWORD *)(a1 + 208);
    v38.n128_u64[0] = v37;
    v38.n128_u64[1] = (unint64_t)v8;
    if (v8)
    {
      v16 = (unint64_t *)&v8->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    (*(void (**)(uint64_t, uint64_t, __n128 *))(*(_QWORD *)v15 + 56))(v15, a2, &v38);
    v18 = (std::__shared_weak_count *)v38.n128_u64[1];
    if (!v38.n128_u64[1])
      goto LABEL_19;
    v19 = (unint64_t *)(v38.n128_u64[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!v8)
        return;
    }
    else
    {
LABEL_19:
      if (!v8)
        return;
    }
    v21 = (unint64_t *)&v8->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
  }
  else
  {
    v8 = (std::__shared_weak_count *)a3[1];
    v36 = v7;
    if (v8)
    {
      v23 = (unint64_t *)&v8->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v25 = *(_QWORD *)(a1 + 224);
    if (!v25)
    {
      ParseLegacy::create(&v38, 0, 0, *(_QWORD *)(a1 + 184));
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a1 + 224, (__int128 *)&v38);
      v26 = (std::__shared_weak_count *)v38.n128_u64[1];
      if (v38.n128_u64[1])
      {
        v27 = (unint64_t *)(v38.n128_u64[1] + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v25 = *(_QWORD *)(a1 + 224);
    }
    std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(a1 + 208), v25, *(_QWORD *)(a1 + 232));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 24))(*(_QWORD *)(a1 + 208));
    v29 = *(_QWORD *)(a1 + 208);
    v38.n128_u64[0] = v36;
    v38.n128_u64[1] = (unint64_t)v8;
    if (v8)
    {
      v30 = (unint64_t *)&v8->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    (*(void (**)(uint64_t, uint64_t, __n128 *))(*(_QWORD *)v29 + 56))(v29, a2, &v38);
    v32 = (std::__shared_weak_count *)v38.n128_u64[1];
    if (!v38.n128_u64[1])
      goto LABEL_40;
    v33 = (unint64_t *)(v38.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v8)
        return;
    }
    else
    {
LABEL_40:
      if (!v8)
        return;
    }
    v35 = (unint64_t *)&v8->__shared_owners_;
    do
      v22 = __ldaxr(v35);
    while (__stlxr(v22 - 1, v35));
  }
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_1DEAABCA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *ParseImpl::parse_hydra_markups(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 208);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v11, a3);
  (*(void (**)(uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v8 + 64))(v8, a2, v11, a4, a5);
  result = v12;
  if (v12 == v11)
  {
    v10 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_1DEAABDCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void ParseImpl::inject_attributes(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 208);
  v3 = (std::__shared_weak_count *)a2[1];
  v9 = *a2;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 72))(v2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1DEAABE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void DetectSSML::instance(DetectSSML *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _OWORD *v6;
  __int128 v7;

  {
    _ZNSt3__115allocate_sharedB8ne180100I14DetectSSMLImplNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v7);
    v6 = (_OWORD *)operator new();
    *v6 = v7;
    v7 = 0uLL;
    DetectSSML::instance(void)::instance = (uint64_t)v6;
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&v7);
  }
  v3 = *(_QWORD *)(DetectSSML::instance(void)::instance + 8);
  *(_QWORD *)this = *(_QWORD *)DetectSSML::instance(void)::instance;
  *((_QWORD *)this + 1) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
}

void sub_1DEAABFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::regex_traits<char> *_ZNSt3__115allocate_sharedB8ne180100I14DetectSSMLImplNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(_QWORD *a1)
{
  char *v2;
  std::regex_traits<char> *result;

  v2 = (char *)operator new(0x120uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_1EA932940;
  *((_QWORD *)v2 + 3) = &off_1EA91D858;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)(v2 + 32), "(?:﻿)?\\s*<");
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)v2 + 4, "[^<]*?>");
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)(v2 + 160), "[^<]*?/>");
  result = std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)(v2 + 224), "\\s*>");
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_1DEAAC0A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  std::locale *v2;
  std::locale *v3;
  std::locale *v4;
  void *v6;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&v1[8].__shared_owners_);
  std::locale::~locale(v4);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&v1[5].__shared_weak_owners_);
  std::locale::~locale(v3);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3]);
  std::locale::~locale(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<DetectSSMLImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932940;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<DetectSSMLImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932940;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<DetectSSMLImpl>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void ParsePersistentModule::~ParsePersistentModule(void **this)
{
  *this = &off_1EA91FF00;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
}

{
  *this = &off_1EA91FF00;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x1DF0ED014);
}

__n128 Parse::create(__n128 *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4)
{
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  __n128 *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  __n128 result;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  void *__p[2];
  char v49;
  void **v50;

  v8 = operator new(0x118uLL);
  v9 = (unint64_t)v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA935D88;
  v10 = v8 + 3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  ParserModule::ParserModule((uint64_t)(v8 + 3), a2, a3);
  if (a3)
  {
    v15 = (unint64_t *)&a3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
    *v10 = off_1EA9225E0;
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    v18 = a1;
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    v18 = a1;
    *v10 = off_1EA9225E0;
  }
  *(_QWORD *)(v9 + 24) = &off_1EA922B78;
  *(_QWORD *)(v9 + 208) = a4;
  *(_OWORD *)(v9 + 216) = 0u;
  *(_OWORD *)(v9 + 232) = 0u;
  *(_OWORD *)(v9 + 248) = 0u;
  *(_OWORD *)(v9 + 264) = 0u;
  v19 = *(_QWORD *)(a4 + 128);
  v20 = *(std::__shared_weak_count **)(v19 + 24);
  if (v20)
  {
    v47 = std::__shared_weak_count::lock(v20);
    if (v47)
    {
      if (!*(_QWORD *)(v19 + 16))
      {
LABEL_50:
        v41 = (unint64_t *)&v47->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
        goto LABEL_54;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "parse");
      v21 = *(_QWORD *)(a4 + 128);
      v22 = *(std::__shared_weak_count **)(a4 + 136);
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v25 = *(std::__shared_weak_count **)(v21 + 24);
      if (!v25 || (v26 = std::__shared_weak_count::lock(v25)) == 0)
      {
        v30 = 0;
        v31 = 0;
LABEL_38:
        if (v22)
        {
          v37 = (unint64_t *)&v22->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        if (v49 < 0)
          operator delete(__p[0]);
        std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(v9 + 216), *(_QWORD *)(v31 + 296), *(_QWORD *)(v31 + 304));
        if (v30)
        {
          v39 = (unint64_t *)&v30->__shared_owners_;
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        goto LABEL_50;
      }
      v27 = *(_QWORD *)(v21 + 16);
      if (v27)
      {
        v46 = v26;
        v28 = v27 + 8;
        if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v27 + 8), (unsigned __int8 *)__p))
        {
          v50 = __p;
          v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v28, (unsigned __int8 *)__p, (__int128 **)&v50);
          v31 = *((_QWORD *)v29 + 5);
          v30 = (std::__shared_weak_count *)*((_QWORD *)v29 + 6);
          if (v30)
          {
            v32 = (unint64_t *)&v30->__shared_owners_;
            v26 = v46;
            do
              v33 = __ldxr(v32);
            while (__stxr(v33 + 1, v32));
LABEL_34:
            v34 = (unint64_t *)&v26->__shared_owners_;
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              v36 = v26;
              ((void (*)(void))v26->__on_zero_shared)();
              std::__shared_weak_count::__release_weak(v36);
            }
            goto LABEL_38;
          }
        }
        else
        {
          v30 = 0;
          v31 = 0;
        }
        v26 = v46;
        goto LABEL_34;
      }
      v30 = 0;
      v31 = 0;
      goto LABEL_34;
    }
  }
LABEL_54:
  if (a3)
  {
    v43 = (unint64_t *)&a3->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  result.n128_u64[0] = (unint64_t)v10;
  result.n128_u64[1] = v9;
  *v18 = result;
  return result;
}

void sub_1DEAAC540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, std::__shared_weak_count *a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  std::__shared_weak_count *v19;
  void **v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  void *v34;

  p_shared_owners = (unint64_t *)&a11->__shared_owners_;
  do
    v27 = __ldaxr(p_shared_owners);
  while (__stlxr(v27 - 1, p_shared_owners));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
    std::__shared_weak_count::__release_weak(a11);
  }
  if (v22)
  {
    v28 = (unint64_t *)&v22->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (a18 < 0)
    operator delete(__p);
  v30 = (unint64_t *)&a12->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
    std::__shared_weak_count::__release_weak(a12);
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v24);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v25);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v23);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v21);
  *(_QWORD *)(v18 + 24) = off_1EA91CE38;
  if (*(char *)(v18 + 207) < 0)
    operator delete(*(void **)(v18 + 184));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v18 + 168);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v18 + 152);
  FrontendModule::~FrontendModule(v20);
  if (v19)
  {
    v32 = (unint64_t *)&v19->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v18);
  operator delete(v34);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ParseImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935D88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ParseImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935D88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<ParseImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t *TAPExtractor::extract_prompts(TAPExtractor *this, const FrontendFeature *a2)
{
  TAPExtractor *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  char *v8;
  const FrontendFeature *v9;
  NSObject *v10;
  std::string::size_type v11;
  uint64_t v12;
  std::string::size_type *p_size;
  std::string::size_type *v14;
  std::string::size_type *v15;
  uint64_t **v16;
  std::string::size_type v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t **v20;
  std::string::size_type v21;
  std::string::size_type v22;
  uint64_t v23;
  std::string::size_type v24;
  uint64_t *v25;
  uint64_t **leaf_high;
  std::string::size_type *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  unint64_t v38;
  _DWORD *v39;
  char *v40;
  uint64_t v41;
  std::string::size_type size;
  char v43;
  unsigned __int16 v44;
  unsigned int v45;
  unsigned __int16 v46;
  __int16 v47;
  unsigned int v48;
  char **v49;
  _BOOL4 v50;
  char **v51;
  char **v52;
  _BOOL4 v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unint64_t v59;
  __int16 *v60;
  _WORD *v61;
  __int16 *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  __int16 *v69;
  __int16 v70;
  unsigned int i;
  unint64_t v72;
  __int16 *v73;
  _WORD *v74;
  __int16 *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  __int16 *v82;
  __int16 v83;
  std::string::size_type v84;
  unint64_t v85;
  __int16 *v86;
  _WORD *v87;
  __int16 *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  __int16 *v95;
  __int16 v96;
  uint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  std::string::size_type v102;
  std::string::size_type v103;
  std::string::size_type v104;
  unint64_t v105;
  unsigned __int16 v106;
  uint64_t v107;
  unsigned int v108;
  unint64_t v109;
  unsigned __int16 v110;
  uint64_t v111;
  _WORD *v112;
  std::string::size_type v113;
  BOOL v114;
  int v115;
  unsigned int v116;
  __int16 v117;
  std::string *p_buf;
  unint64_t v119;
  uint64_t v120;
  int *v121;
  int v122;
  BOOL v123;
  uint64_t v124;
  std::string::size_type v125;
  BOOL v126;
  uint64_t v127;
  std::string *v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t *v132;
  int v133;
  uint64_t v134;
  unsigned __int16 *v135;
  size_t v136;
  char *v137;
  uint64_t v138;
  void **v139;
  int v140;
  void **v141;
  _DWORD *v142;
  unint64_t v143;
  _DWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  _DWORD *v150;
  char *v151;
  char *v152;
  int v153;
  std::string::size_type v154;
  NSObject *v155;
  const char *v156;
  NSObject *v157;
  const char *v158;
  std::string::size_type v159;
  uint64_t v160;
  unsigned __int16 v161;
  NSObject *v162;
  const char *v163;
  std::string *v164;
  int v165;
  std::string *v166;
  std::string::size_type v167;
  NSObject *v168;
  const char *v169;
  NSObject *v170;
  const char *v171;
  uint64_t v172;
  int v173;
  NSObject *v174;
  const char *v175;
  int v176;
  NSObject *v177;
  const char *v178;
  NSObject *v179;
  const char *v180;
  std::string::size_type v181;
  uint64_t v182;
  unsigned __int16 v183;
  NSObject *v184;
  const char *v185;
  std::string *v186;
  int v187;
  std::string *v188;
  std::string::size_type v189;
  NSObject *v190;
  const char *v191;
  NSObject *v192;
  const char *v193;
  unint64_t v194;
  int v195;
  NSObject *v196;
  const char *v197;
  unint64_t v198;
  uint64_t v199;
  const char *v200;
  const char *v201;
  NSObject *v202;
  const char *v203;
  NSObject *v204;
  const char *v205;
  unint64_t v206;
  int v207;
  NSObject *v208;
  const char *v209;
  unint64_t v210;
  uint64_t v211;
  const char *v212;
  const char *v213;
  _QWORD *v214;
  NSObject *v215;
  const char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _OWORD *v220;
  uint64_t v221;
  int v222;
  int64_t v223;
  uint64_t *v224;
  _QWORD *v225;
  NSObject *v226;
  const char *v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  _OWORD *v231;
  char *v232;
  uint64_t v233;
  __int128 v234;
  __int128 v235;
  unint64_t v236;
  unint64_t v237;
  char *v238;
  char *v239;
  __int128 v240;
  __int128 v241;
  char *v242;
  __int128 v243;
  __int128 v244;
  char *v245;
  unint64_t v246;
  uint64_t v247;
  int64_t v248;
  uint64_t v249;
  unsigned __int16 v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unsigned __int16 v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  uint64_t v260;
  unint64_t v261;
  int v262;
  int v263;
  unint64_t v264;
  uint64_t v265;
  int v266;
  uint64_t v267;
  _QWORD *v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  uint64_t v279;
  std::string::size_type v280;
  int v281;
  NSObject *v282;
  std::string *p_p;
  int v284;
  int v285;
  uint64_t v286;
  const char *v287;
  std::string *v288;
  uint64_t v289;
  const std::string::value_type *v290;
  unint64_t v291;
  const std::string::value_type *v292;
  uint64_t v293;
  uint64_t v294;
  __int128 *v296;
  __int128 v297;
  char v298;
  std::string::size_type v299;
  uint64_t v300;
  uint64_t v301;
  std::string *v302;
  size_t v303;
  unsigned int v304;
  int v305;
  unsigned int *v306;
  uint64_t v307;
  char *v308;
  char *v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  unint64_t v316;
  uint64_t v317;
  NSObject *v318;
  const char *v319;
  std::string::size_type v320;
  std::string *v321;
  std::string *p_str;
  uint64_t *v323;
  uint64_t **v324;
  std::string *v325;
  std::string *v326;
  uint64_t v327;
  unint64_t v328;
  _BYTE *v329;
  char *v330;
  unint64_t v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t v334;
  char *v335;
  char *v336;
  char *v337;
  char *v338;
  __int16 v339;
  uint64_t v340;
  uint64_t v341;
  BOOL v342;
  unint64_t v343;
  uint64_t v344;
  const std::string::value_type *v345;
  const std::string::value_type *v346;
  unint64_t v347;
  __int16 v348;
  std::locale::id *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  const std::string::value_type **v353;
  __int128 v354;
  std::string *v355;
  std::string::size_type v356;
  std::string::value_type v357;
  const std::locale::facet *v358;
  void **v359;
  char *v360;
  uint64_t **v361;
  std::string *v362;
  uint64_t v363;
  uint64_t **v364;
  int v365;
  unsigned int v366;
  int v367;
  unint64_t v368;
  uint64_t v369;
  int *v370;
  int v371;
  uint64_t v372;
  uint64_t v373;
  std::string::size_type v374;
  unint64_t v375;
  uint64_t v376;
  uint64_t v377;
  unsigned __int16 v378;
  uint64_t v379;
  size_t v380;
  std::string *v381;
  const void *v382;
  char *v383;
  char v384;
  uint64_t v385;
  __int128 v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  BOOL v390;
  unsigned int v391;
  uint64_t v392;
  uint64_t v393;
  int *v394;
  uint64_t v395;
  char *v396;
  char *v397;
  int v398;
  unint64_t v399;
  int v400;
  char *v401;
  char *v402;
  uint64_t v403;
  uint64_t *v404;
  uint64_t *v405;
  uint64_t *v406;
  uint64_t *v407;
  int v408;
  uint64_t v409;
  unsigned __int16 *v410;
  unint64_t v411;
  uint64_t *v412;
  uint64_t v413;
  void **v414;
  int v415;
  void **v416;
  _DWORD *v417;
  unint64_t v418;
  _DWORD *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  unint64_t v423;
  uint64_t v424;
  _DWORD *v425;
  char *v426;
  char *v427;
  int v428;
  uint64_t v429;
  uint64_t v430;
  char *v431;
  char *v432;
  uint64_t v433;
  int v434;
  unsigned int v435;
  uint64_t v436;
  uint64_t *v437;
  _QWORD *v438;
  NSObject *v439;
  const char *v440;
  uint64_t v441;
  uint64_t v442;
  unint64_t v443;
  unint64_t v444;
  char *v445;
  uint64_t v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  unint64_t v450;
  unint64_t v451;
  char *v452;
  char *v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  char *v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  char *v461;
  char *v462;
  unint64_t v463;
  unint64_t v464;
  uint64_t v465;
  uint64_t v466;
  unsigned __int16 v467;
  uint64_t v468;
  unint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  unsigned __int16 v474;
  unsigned __int16 *v475;
  unint64_t v476;
  unint64_t v477;
  uint64_t v478;
  unint64_t v479;
  int v480;
  int v481;
  unint64_t v482;
  unsigned __int16 *v483;
  uint64_t v484;
  uint64_t v485;
  unint64_t v486;
  unint64_t v487;
  unint64_t v488;
  uint64_t v489;
  unint64_t v490;
  unint64_t v491;
  unint64_t v492;
  unint64_t v493;
  uint64_t v494;
  std::string::size_type v495;
  int v496;
  NSObject *v497;
  const char *v498;
  int v499;
  int v500;
  uint64_t v501;
  uint64_t v502;
  const std::string::value_type *v503;
  unint64_t v504;
  _QWORD *v505;
  void *v506;
  const std::string::value_type *v507;
  uint64_t v508;
  uint64_t v509;
  const FrontendFeature *v510;
  __int128 v512;
  std::string::size_type v513;
  uint64_t v514;
  uint64_t v515;
  std::string *v516;
  size_t v517;
  _QWORD *v518;
  unint64_t v519;
  unsigned int v520;
  int v521;
  unsigned int *v522;
  _QWORD *v523;
  NSObject *v524;
  const char *v525;
  std::string *v526;
  std::string *v527;
  uint64_t v528;
  char *v529;
  char *v530;
  unint64_t v531;
  unint64_t v532;
  unint64_t v533;
  std::string::size_type *v534;
  unint64_t v535;
  unint64_t v536;
  unint64_t v537;
  unint64_t v538;
  uint64_t v539;
  NSObject *v540;
  const char *v541;
  std::string::size_type v542;
  __int16 v544;
  uint64_t v545;
  uint64_t v546;
  char *v547;
  char *v548;
  std::string::size_type *v549;
  unsigned int v550;
  uint64_t v551;
  char *v552;
  __int16 v553;
  uint64_t v554;
  uint64_t v555;
  int v556;
  char *v557;
  int v558;
  int v559;
  void **__pos;
  std::string::size_type __posa;
  std::string::size_type v562;
  unint64_t v563;
  uint64_t v564;
  unint64_t v565;
  uint64_t v566;
  uint64_t v567;
  _QWORD *v568;
  uint64_t v569;
  uint64_t v570;
  char *v571;
  char *v572;
  int v573;
  unsigned int v574;
  uint64_t v575;
  unsigned int v576;
  int64_t v577;
  int v578;
  uint64_t *v579;
  unsigned int v580;
  char **v581;
  uint64_t v582;
  uint64_t v583;
  unint64_t v584;
  uint64_t v585;
  uint64_t v586;
  unint64_t v587;
  unint64_t v588;
  _QWORD *v589;
  uint64_t v591;
  std::string __str;
  std::string v593;
  std::string __p;
  std::string buf;
  _BYTE v596[20];
  void *v597;
  void *v598;
  uint64_t v599[3];
  __int16 v600;
  uint64_t v601[3];
  __int16 v602;
  uint64_t v603[3];
  __int16 v604;
  uint64_t v605[3];
  __int16 v606;
  uint64_t v607[3];
  __int16 v608;
  uint64_t v609[3];
  __int16 v610;
  uint64_t v611[3];
  __int16 v612;
  uint64_t v613[3];
  __int16 v614;
  std::string v615;
  unint64_t v616;
  _QWORD *v617;
  uint64_t v618;

  v618 = *MEMORY[0x1E0C80C00];
  v579 = (uint64_t *)((char *)this + 568);
  if (!*((_BYTE *)this + 440))
    return v579;
  v2 = this;
  v3 = *((_QWORD *)this + 72);
  v4 = *((_QWORD *)this + 71);
  while (v3 != v4)
  {
    v3 -= 72;
    std::allocator<Prompt>::destroy[abi:ne180100](v3);
  }
  *((_QWORD *)v2 + 72) = v4;
  v591 = (uint64_t)v2;
  if (*((__int16 *)v2 + 248) < 2)
  {
    v9 = a2;
    if (*((char *)a2 + 95) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
      v9 = a2;
    }
    else
    {
      __str = *(std::string *)((_BYTE *)a2 + 3);
    }
    std::vector<short>::resize((uint64_t)v2 + 136, 0x84BDA12F684BDA13 * ((uint64_t)(*((_QWORD *)v9 + 1) - *(_QWORD *)v9) >> 3));
    v29 = *((_QWORD *)v2 + 17);
    v30 = *((_QWORD *)v2 + 18) - v29;
    v31 = v30 == 1;
    if (v30 >= 1)
    {
      v32 = (unint64_t)v30 >> 1;
      v33 = !v31;
      memset(*((void **)v2 + 17), 255, 2 * (v32 - v33) + 2);
    }
    v34 = *((_QWORD *)a2 + 1);
    v35 = v34 - *(_QWORD *)a2;
    if (v34 != *(_QWORD *)a2)
    {
      v36 = 0;
      v37 = 0;
      v38 = 0x84BDA12F684BDA13 * (v35 >> 3);
      v39 = (_DWORD *)(*(_QWORD *)a2 + 40);
      do
      {
        if (!*v39)
          ++v37;
        if (!*((_BYTE *)v39 - 16))
          *(_WORD *)(v29 + 2 * v36) = v37;
        v39 += 54;
        ++v36;
      }
      while (v38 > (unsigned __int16)v36);
    }
    v41 = *((_QWORD *)v2 + 26);
    v40 = (char *)v2 + 208;
    *((_QWORD *)v40 + 1) = v41;
    v572 = v40 - 48;
    *((_QWORD *)v40 - 5) = 0;
    v557 = v40 - 24;
    __pos = (void **)v40;
    *((_QWORD *)v40 - 2) = 0;
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    if (size)
    {
      v43 = 0;
      v44 = 0;
      v45 = 0;
      v46 = 0;
      v580 = 0;
      v586 = v591 + 224;
      v47 = 1;
      do
      {
        v48 = v45;
        memset(&buf, 0, sizeof(buf));
        v45 = TAPExtractor::v1_extract_utf8_character_from_string((unsigned __int16)v45, 1, &buf, (uint64_t *)&__str);
        v49 = (char **)SENTENCE_BOUNDARY_CHARACTERS();
        if (is_one_of(v49, (char *)&buf))
        {
          v50 = 1;
        }
        else
        {
          v51 = (char **)std::string::basic_string[abi:ne180100]<0>(&v615, ":,;");
          v50 = is_one_of(v51, (char *)&buf);
          if (SHIBYTE(v615.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v615.__r_.__value_.__l.__data_);
        }
        v52 = (char **)std::string::basic_string[abi:ne180100]<0>(&v615, " _¡¿\t\r\n");
        v53 = is_one_of(v52, (char *)&buf);
        if (SHIBYTE(v615.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v615.__r_.__value_.__l.__data_);
        v54 = v50 || v53;
        if (v54 == 1)
        {
          if ((v43 & 1) != 0)
          {
            v580 = v48;
            if (v44 < (unsigned __int16)v48)
            {
              v55 = *(_QWORD *)v557;
              v56 = v44;
              do
              {
                *(_QWORD *)(v55 + ((v56 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v56;
                ++v56;
              }
              while ((unsigned __int16)v48 != v56);
              v580 = v48;
            }
          }
          if (v50)
            v46 = v45;
        }
        else
        {
          v615.__r_.__value_.__s.__data_[0] = (v43 & 1) == 0;
          if ((v43 & 1) != 0)
          {
            v57 = (uint64_t)v557;
          }
          else
          {
            v57 = (uint64_t)v557;
            if ((unsigned __int16)v580 < (unsigned __int16)v48)
            {
              v58 = v580;
              do
              {
                v60 = *(__int16 **)(v591 + 216);
                v59 = *(_QWORD *)(v591 + 224);
                if ((unint64_t)v60 >= v59)
                {
                  v62 = (__int16 *)*__pos;
                  v63 = (char *)v60 - (_BYTE *)*__pos;
                  if (v63 <= -3)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v64 = v63 >> 1;
                  v65 = v59 - (_QWORD)v62;
                  if (v65 <= (v63 >> 1) + 1)
                    v66 = v64 + 1;
                  else
                    v66 = v65;
                  if (v65 >= 0x7FFFFFFFFFFFFFFELL)
                    v67 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v67 = v66;
                  if (v67)
                  {
                    v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<short>>(v586, v67);
                    v62 = *(__int16 **)(v591 + 208);
                    v60 = *(__int16 **)(v591 + 216);
                  }
                  else
                  {
                    v68 = 0;
                  }
                  v69 = (__int16 *)&v68[2 * v64];
                  *v69 = v47;
                  v61 = v69 + 1;
                  while (v60 != v62)
                  {
                    v70 = *--v60;
                    *--v69 = v70;
                  }
                  *(_QWORD *)(v591 + 208) = v69;
                  *(_QWORD *)(v591 + 216) = v61;
                  *(_QWORD *)(v591 + 224) = &v68[2 * v67];
                  if (v62)
                    operator delete(v62);
                }
                else
                {
                  *v60 = v47;
                  v61 = v60 + 1;
                }
                *(_QWORD *)(v591 + 216) = v61;
                __p.__r_.__value_.__s.__data_[0] = (unsigned __int16)v58 >= v46;
                std::vector<BOOL>::push_back((uint64_t)v572, &__p);
                __p.__r_.__value_.__s.__data_[0] = (unsigned __int16)v580 != 0;
                v57 = (uint64_t)v557;
                std::vector<BOOL>::push_back((uint64_t)v557, &__p);
                ++v58;
              }
              while ((unsigned __int16)v58 < (unsigned __int16)v48);
            }
            if ((_WORD)v580)
              ++v47;
          }
          for (i = v48; v45 > (unsigned __int16)i; ++i)
          {
            v73 = *(__int16 **)(v591 + 216);
            v72 = *(_QWORD *)(v591 + 224);
            if ((unint64_t)v73 >= v72)
            {
              v75 = (__int16 *)*__pos;
              v76 = (char *)v73 - (_BYTE *)*__pos;
              if (v76 <= -3)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v77 = v76 >> 1;
              v78 = v72 - (_QWORD)v75;
              if (v78 <= (v76 >> 1) + 1)
                v79 = v77 + 1;
              else
                v79 = v78;
              if (v78 >= 0x7FFFFFFFFFFFFFFELL)
                v80 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v80 = v79;
              if (v80)
              {
                v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<short>>(v586, v80);
                v75 = *(__int16 **)(v591 + 208);
                v73 = *(__int16 **)(v591 + 216);
              }
              else
              {
                v81 = 0;
              }
              v82 = (__int16 *)&v81[2 * v77];
              *v82 = v47;
              v74 = v82 + 1;
              while (v73 != v75)
              {
                v83 = *--v73;
                *--v82 = v83;
              }
              *(_QWORD *)(v591 + 208) = v82;
              *(_QWORD *)(v591 + 216) = v74;
              *(_QWORD *)(v591 + 224) = &v81[2 * v80];
              if (v75)
                operator delete(v75);
            }
            else
            {
              *v73 = v47;
              v74 = v73 + 1;
            }
            *(_QWORD *)(v591 + 216) = v74;
            std::vector<BOOL>::push_back((uint64_t)v572, &v615);
            __p.__r_.__value_.__s.__data_[0] = 0;
            std::vector<BOOL>::push_back(v57, &__p);
          }
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        v43 = v54 ^ 1;
        v84 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v84 = __str.__r_.__value_.__l.__size_;
        v44 = v48;
      }
      while (v84 > v45);
      if (v54)
      {
        for (; v45 > (unsigned __int16)v580; ++v580)
        {
          v86 = *(__int16 **)(v591 + 216);
          v85 = *(_QWORD *)(v591 + 224);
          if ((unint64_t)v86 >= v85)
          {
            v88 = (__int16 *)*__pos;
            v89 = (char *)v86 - (_BYTE *)*__pos;
            if (v89 <= -3)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v90 = v89 >> 1;
            v91 = v85 - (_QWORD)v88;
            if (v91 <= (v89 >> 1) + 1)
              v92 = v90 + 1;
            else
              v92 = v91;
            if (v91 >= 0x7FFFFFFFFFFFFFFELL)
              v93 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v93 = v92;
            if (v93)
            {
              v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<short>>(v586, v93);
              v88 = *(__int16 **)(v591 + 208);
              v86 = *(__int16 **)(v591 + 216);
            }
            else
            {
              v94 = 0;
            }
            v95 = (__int16 *)&v94[2 * v90];
            *v95 = v47;
            v87 = v95 + 1;
            while (v86 != v88)
            {
              v96 = *--v86;
              *--v95 = v96;
            }
            *(_QWORD *)(v591 + 208) = v95;
            *(_QWORD *)(v591 + 216) = v87;
            *(_QWORD *)(v591 + 224) = &v94[2 * v93];
            if (v88)
              operator delete(v88);
          }
          else
          {
            *v86 = v47;
            v87 = v86 + 1;
          }
          *(_QWORD *)(v591 + 216) = v87;
          buf.__r_.__value_.__s.__data_[0] = 0;
          std::vector<BOOL>::push_back((uint64_t)v572, &buf);
          buf.__r_.__value_.__s.__data_[0] = 1;
          std::vector<BOOL>::push_back((uint64_t)v557, &buf);
        }
      }
      else if (v45 > (unsigned __int16)v48)
      {
        v97 = *(_QWORD *)v557;
        v98 = (unsigned __int16)v48;
        do
        {
          *(_QWORD *)(v97 + ((v98 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v98;
          ++v98;
        }
        while (v45 != v98);
      }
    }
    v99 = (_QWORD *)v591;
    v100 = *(_QWORD *)(v591 + 352);
    if (*(unsigned __int16 *)(v100 + 18) <= 1u && !*(_WORD *)(v100 + 20))
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v321 = (std::string *)((char *)&__str + HIBYTE(__str.__r_.__value_.__r.__words[2]));
      else
        v321 = (std::string *)(__str.__r_.__value_.__r.__words[0] + __str.__r_.__value_.__l.__size_);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      while (p_str != v321)
      {
        p_str->__r_.__value_.__s.__data_[0] = __tolower(p_str->__r_.__value_.__s.__data_[0]);
        p_str = (std::string *)((char *)p_str + 1);
      }
    }
    *(_WORD *)(v591 + 414) = -9709 * ((*((_DWORD *)a2 + 2) - *(_DWORD *)a2) >> 3);
    v581 = (char **)(v591 + 304);
    v101 = *(_QWORD *)(v591 + 304);
    v102 = *(_QWORD *)(v591 + 312);
    while (v102 != v101)
    {
      v102 -= 24;
      buf.__r_.__value_.__r.__words[0] = v102;
      std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    }
    *(_QWORD *)(v591 + 312) = v101;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v103 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      v103 = __str.__r_.__value_.__l.__size_;
    std::vector<std::vector<std::vector<std::pair<unsigned short,unsigned short>>>>::resize(v581, v103);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v104 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      v104 = __str.__r_.__value_.__l.__size_;
    std::vector<BOOL>::resize(v591 + 232, v104, 0);
    v105 = *(_QWORD *)(v591 + 240);
    if (v105)
    {
      buf.__r_.__value_.__r.__words[0] = *(_QWORD *)(v591 + 232);
      LODWORD(buf.__r_.__value_.__r.__words[1]) = 0;
      std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&buf, v105);
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v106 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      v106 = __str.__r_.__value_.__r.__words[1];
    v107 = *(_QWORD *)(v591 + 80);
    v108 = v106;
    v109 = (unint64_t)(*(_QWORD *)(v591 + 88) - v107) >> 3;
    v550 = v106;
    do
    {
      v110 = v109 - 1;
      if ((((_WORD)v109 - 1) & 0x8000) != 0)
        break;
      LOWORD(v109) = v109 - 1;
      v111 = v110;
      v112 = *(_WORD **)(v107 + 8 * v110);
      v113 = (unsigned __int16)*v112;
      if (*v112)
        v114 = v108 >= v113;
      else
        v114 = 0;
      if (v114)
      {
        v555 = v111;
        if ((v113 - 1) >= 7)
          v115 = 7;
        else
          v115 = (unsigned __int16)(v113 - 1);
        v576 = v115;
        std::string::basic_string(&buf, &__str, 0, v113, (std::allocator<char> *)&v615);
        v116 = 0;
        v117 = buf.__r_.__value_.__r.__words[1];
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v117 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        p_buf = &buf;
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        v119 = (unsigned __int16)(v117 - 1);
        if (v119 >= 7)
          v120 = 7;
        else
          v120 = v119;
        v121 = (int *)v99[16];
        do
        {
          v122 = *v121++;
          v116 += v122 * p_buf->__r_.__value_.__s.__data_[v120];
          v123 = v120-- <= 0;
        }
        while (!v123);
        v553 = v109;
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        v124 = 0;
        v125 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        v126 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
        if (v113 >= 8)
          v127 = 8;
        else
          v127 = v113;
        v566 = v127 - 1;
        v562 = v113;
        do
        {
          if (v124)
          {
            v28 = !v126;
            v128 = &__str;
            if (!v28)
              v128 = (std::string *)__str.__r_.__value_.__r.__words[0];
            v116 = v128->__r_.__value_.__s.__data_[v566 + v124]
                 + (v116 - *(_DWORD *)(v99[16] + 4 * v566) * v128->__r_.__value_.__s.__data_[(v124 - 1)])
                 * *(unsigned __int16 *)(v99[44] + 22);
          }
          v129 = std::__hash_table<std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>>>::__equal_range_multi<unsigned int>((_QWORD *)(v99[35] + 40 * v576), v116);
          if (v129 != v130)
          {
            v131 = v129;
            v132 = v130;
            do
            {
              v133 = *((unsigned __int16 *)v131 + 11);
              v134 = *((unsigned __int16 *)v131 + 10);
              v135 = *(unsigned __int16 **)(*(_QWORD *)(v591 + 80) + 8 * v134);
              v136 = *v135;
              if (TAPExtractor::detect_v1_match(v591, &__str, (unsigned __int16)v124, v136, (uint64_t)&v135[18 * *((unsigned __int16 *)v131 + 11) + 2]))
              {
                v137 = &(*v581)[24 * (unsigned __int16)v124];
                v138 = *(_QWORD *)v137;
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v137 + 1) - *(_QWORD *)v137) >> 3) <= v136)
                {
                  std::vector<std::vector<std::pair<unsigned short,unsigned short>>>::resize((uint64_t)v137, v136 + 1);
                  v138 = *(_QWORD *)&(*v581)[24 * (unsigned __int16)v124];
                }
                v139 = (void **)(v138 + 24 * v136);
                v140 = v134 | (v133 << 16);
                v141 = v139 + 1;
                v142 = v139[1];
                v143 = (unint64_t)v139[2];
                if ((unint64_t)v142 >= v143)
                {
                  v145 = ((char *)v142 - (_BYTE *)*v139) >> 2;
                  if ((unint64_t)(v145 + 1) >> 62)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v146 = v143 - (_QWORD)*v139;
                  v147 = v146 >> 1;
                  if (v146 >> 1 <= (unint64_t)(v145 + 1))
                    v147 = v145 + 1;
                  if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFFCLL)
                    v148 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v148 = v147;
                  if (v148)
                    v148 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v148);
                  else
                    v149 = 0;
                  v150 = (_DWORD *)(v148 + 4 * v145);
                  *v150 = v140;
                  v144 = v150 + 1;
                  v151 = (char *)*v141;
                  v152 = (char *)*v139;
                  if (*v141 != *v139)
                  {
                    do
                    {
                      v153 = *((_DWORD *)v151 - 1);
                      v151 -= 4;
                      *--v150 = v153;
                    }
                    while (v151 != v152);
                    v151 = (char *)*v139;
                  }
                  *v139 = v150;
                  *v141 = v144;
                  v139[2] = (void *)(v148 + 4 * v149);
                  if (v151)
                    operator delete(v151);
                }
                else
                {
                  *v142 = v140;
                  v144 = v142 + 1;
                }
                *v141 = v144;
              }
              v131 = (uint64_t *)*v131;
            }
            while (v131 != v132);
            v125 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            v99 = (_QWORD *)v591;
            v113 = v562;
          }
          ++v124;
          v126 = (v125 & 0x80u) != 0;
          v154 = __str.__r_.__value_.__l.__size_;
          if ((v125 & 0x80u) == 0)
            v154 = v125;
        }
        while (v154 - v113 >= v124);
        v107 = v99[10];
        LOWORD(v109) = v553;
        LODWORD(v113) = **(unsigned __int16 **)(v107 + 8 * v555);
        v108 = v550;
      }
    }
    while (v113 < 8);
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v155 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1DE3F6000, v155, OS_LOG_TYPE_DEBUG, "Prompt Matching table ", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(7, "Prompt Matching table ", v156);
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v157 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1DE3F6000, v157, OS_LOG_TYPE_DEBUG, "Text:              | ", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(7, "Text:              | ", v158);
    Censor::global_plaintext(&v593, (uint64_t)&__str);
    v159 = HIBYTE(v593.__r_.__value_.__r.__words[2]);
    if ((v593.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v159 = v593.__r_.__value_.__l.__size_;
    if (v159)
    {
      v160 = 0;
      v161 = 0;
      do
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v162 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
        {
          if ((v593.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v164 = &v593;
          else
            v164 = (std::string *)v593.__r_.__value_.__r.__words[0];
          v165 = v164->__r_.__value_.__s.__data_[v160];
          LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v165;
          _os_log_impl(&dword_1DE3F6000, v162, OS_LOG_TYPE_DEBUG, "%c", (uint8_t *)&buf, 8u);
        }
        if ((v593.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v166 = &v593;
        else
          v166 = (std::string *)v593.__r_.__value_.__r.__words[0];
        Diagnostics::log(7, "%c", v163, v166->__r_.__value_.__s.__data_[v160]);
        v160 = ++v161;
        v167 = HIBYTE(v593.__r_.__value_.__r.__words[2]);
        if ((v593.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v167 = v593.__r_.__value_.__l.__size_;
      }
      while (v167 > v161);
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v168 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1DE3F6000, v168, OS_LOG_TYPE_DEBUG, "", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(7, &byte_1DEBD87CE, v169);
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v170 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1DE3F6000, v170, OS_LOG_TYPE_DEBUG, "Character in word: | ", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(7, "Character in word: | ", v171);
    if (*(_QWORD *)(v591 + 216) != *(_QWORD *)(v591 + 208))
    {
      v172 = 0;
      v173 = 0;
      do
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v174 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
        {
          v176 = *((__int16 *)*__pos + v172);
          LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v176;
          _os_log_impl(&dword_1DE3F6000, v174, OS_LOG_TYPE_DEBUG, "%d  ", (uint8_t *)&buf, 8u);
        }
        Diagnostics::log(7, "%d  ", v175, *(__int16 *)(*(_QWORD *)(v591 + 208) + 2 * v172));
        v172 = (unsigned __int16)++v173;
      }
      while ((unsigned __int16)v173 < (unint64_t)((uint64_t)(*(_QWORD *)(v591 + 216) - *(_QWORD *)(v591 + 208)) >> 1));
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v177 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1DE3F6000, v177, OS_LOG_TYPE_DEBUG, "", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(7, &byte_1DEBD87CE, v178);
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v179 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1DE3F6000, v179, OS_LOG_TYPE_DEBUG, "UTF-8:             | ", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(7, "UTF-8:             | ", v180);
    v181 = HIBYTE(v593.__r_.__value_.__r.__words[2]);
    if ((v593.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v181 = v593.__r_.__value_.__l.__size_;
    if (v181)
    {
      v182 = 0;
      v183 = 0;
      do
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v184 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
        {
          if ((v593.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v186 = &v593;
          else
            v186 = (std::string *)v593.__r_.__value_.__r.__words[0];
          v187 = v186->__r_.__value_.__s.__data_[v182];
          LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v187;
          _os_log_impl(&dword_1DE3F6000, v184, OS_LOG_TYPE_DEBUG, "%X ", (uint8_t *)&buf, 8u);
        }
        if ((v593.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v188 = &v593;
        else
          v188 = (std::string *)v593.__r_.__value_.__r.__words[0];
        Diagnostics::log(7, "%X ", v185, v188->__r_.__value_.__s.__data_[v182]);
        v182 = ++v183;
        v189 = HIBYTE(v593.__r_.__value_.__r.__words[2]);
        if ((v593.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v189 = v593.__r_.__value_.__l.__size_;
      }
      while (v189 > v183);
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v190 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1DE3F6000, v190, OS_LOG_TYPE_DEBUG, "", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(7, &byte_1DEBD87CE, v191);
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v192 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1DE3F6000, v192, OS_LOG_TYPE_DEBUG, "Is at start word:  | ", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(7, "Is at start word:  | ", v193);
    if (*(_QWORD *)(v591 + 168))
    {
      v194 = 0;
      v195 = 0;
      do
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v196 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
        {
          v198 = v194 >> 6;
          v199 = 1 << v194;
          if ((*(_QWORD *)(*(_QWORD *)v572 + 8 * v198) & v199) != 0)
            v200 = "t";
          else
            v200 = "f";
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v200;
          _os_log_impl(&dword_1DE3F6000, v196, OS_LOG_TYPE_DEBUG, "%s  ", (uint8_t *)&buf, 0xCu);
        }
        else
        {
          v198 = v194 >> 6;
          v199 = 1 << v194;
        }
        if ((*(_QWORD *)(*(_QWORD *)(v591 + 160) + 8 * v198) & v199) != 0)
          v201 = "t";
        else
          v201 = "f";
        Diagnostics::log(7, "%s  ", v197, v201);
        v194 = (unsigned __int16)++v195;
      }
      while (*(_QWORD *)(v591 + 168) > (unint64_t)(unsigned __int16)v195);
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v202 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1DE3F6000, v202, OS_LOG_TYPE_DEBUG, "", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(7, &byte_1DEBD87CE, v203);
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v204 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1DE3F6000, v204, OS_LOG_TYPE_DEBUG, "Is at end word:    | ", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(7, "Is at end word:    | ", v205);
    if (*(_QWORD *)(v591 + 192))
    {
      v206 = 0;
      v207 = 0;
      do
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v208 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
        {
          v210 = v206 >> 6;
          v211 = 1 << v206;
          if ((*(_QWORD *)(*(_QWORD *)v557 + 8 * v210) & v211) != 0)
            v212 = "t";
          else
            v212 = "f";
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v212;
          _os_log_impl(&dword_1DE3F6000, v208, OS_LOG_TYPE_DEBUG, "%s  ", (uint8_t *)&buf, 0xCu);
        }
        else
        {
          v210 = v206 >> 6;
          v211 = 1 << v206;
        }
        if ((*(_QWORD *)(*(_QWORD *)(v591 + 184) + 8 * v210) & v211) != 0)
          v213 = "t";
        else
          v213 = "f";
        Diagnostics::log(7, "%s  ", v209, v213);
        v206 = (unsigned __int16)++v207;
      }
      while (*(_QWORD *)(v591 + 192) > (unint64_t)(unsigned __int16)v207);
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v214 = (_QWORD *)v591;
    v215 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1DE3F6000, v215, OS_LOG_TYPE_DEBUG, "", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(7, &byte_1DEBD87CE, v216);
    v218 = *(_QWORD *)(v591 + 304);
    v217 = *(_QWORD *)(v591 + 312);
    if (v217 == v218)
      goto LABEL_448;
    v547 = 0;
    v219 = 0;
    v220 = 0;
    v221 = 0;
    v222 = 0;
    while (1)
    {
      LODWORD(v223) = -1
                    - 21845 * ((*(_DWORD *)(v218 + 24 * v221 + 8) - *(_DWORD *)(v218 + 24 * v221)) >> 3);
      if ((v223 & 0x8000) != 0)
        goto LABEL_445;
      __posa = (unsigned __int16)v222;
      v558 = v222 & 0x3F;
      v567 = v222 & 0x3F;
      v573 = v222;
      v554 = (unsigned __int16)v222 >> 6;
      v223 = (unsigned __int16)v223;
      v546 = v221;
      do
      {
        v577 = v223;
        v224 = (uint64_t *)(*(_QWORD *)&(*v581)[24 * v221] + 24 * v223);
        v225 = v224 + 1;
        if (v224[1] == *v224)
          goto LABEL_389;
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v226 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
        {
          v228 = (*v225 - *v224) >> 2;
          LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v228;
          _os_log_impl(&dword_1DE3F6000, v226, OS_LOG_TYPE_DEBUG, "Had %zu candidates for prompt match, applied sort. ", (uint8_t *)&buf, 0xCu);
        }
        Diagnostics::log(7, "Had %zu candidates for prompt match, applied sort. ", v227, (*v225 - *v224) >> 2);
        v229 = *v224;
        if (*v225 == *v224)
        {
LABEL_389:
          v220 = (_OWORD *)v219;
          v232 = v547;
        }
        else
        {
          v230 = 0;
          v231 = (_OWORD *)v219;
          v232 = v547;
          do
          {
            v233 = *(_QWORD *)(v214[10] + 8 * *(unsigned __int16 *)(v229 + 4 * v230))
                 + 36 * *(unsigned __int16 *)(v229 + 4 * v230 + 2)
                 + 4;
            if (v231 >= (_OWORD *)v232)
            {
              v236 = 0x8E38E38E38E38E39 * (((uint64_t)v231 - v219) >> 2) + 1;
              if (v236 > 0x71C71C71C71C71CLL)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              if (0x1C71C71C71C71C72 * ((uint64_t)&v232[-v219] >> 2) > v236)
                v236 = 0x1C71C71C71C71C72 * ((uint64_t)&v232[-v219] >> 2);
              if (0x8E38E38E38E38E39 * ((uint64_t)&v232[-v219] >> 2) >= 0x38E38E38E38E38ELL)
                v237 = 0x71C71C71C71C71CLL;
              else
                v237 = v236;
              if (v237)
              {
                if (v237 > 0x71C71C71C71C71CLL)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v238 = (char *)operator new(36 * v237);
              }
              else
              {
                v238 = 0;
              }
              v239 = &v238[4 * (((uint64_t)v231 - v219) >> 2)];
              v240 = *(_OWORD *)v233;
              v241 = *(_OWORD *)(v233 + 16);
              *((_DWORD *)v239 + 8) = *(_DWORD *)(v233 + 32);
              *(_OWORD *)v239 = v240;
              *((_OWORD *)v239 + 1) = v241;
              if (v231 == (_OWORD *)v219)
              {
                v219 = (uint64_t)&v238[4 * (((uint64_t)v231 - v219) >> 2)];
                v214 = (_QWORD *)v591;
              }
              else
              {
                v242 = &v238[4 * (((uint64_t)v231 - v219) >> 2)];
                v214 = (_QWORD *)v591;
                do
                {
                  v243 = *(_OWORD *)((char *)v231 - 36);
                  v244 = *(_OWORD *)((char *)v231 - 20);
                  *((_DWORD *)v242 - 1) = *((_DWORD *)v231 - 1);
                  *(_OWORD *)(v242 - 20) = v244;
                  *(_OWORD *)(v242 - 36) = v243;
                  v242 -= 36;
                  v231 = (_OWORD *)((char *)v231 - 36);
                }
                while (v231 != (_OWORD *)v219);
                v231 = (_OWORD *)v219;
                v219 = (uint64_t)v242;
              }
              v232 = &v238[36 * v237];
              v220 = v239 + 36;
              if (v231)
              {
                v245 = v232;
                operator delete(v231);
                v232 = v245;
              }
            }
            else
            {
              v234 = *(_OWORD *)v233;
              v235 = *(_OWORD *)(v233 + 16);
              *((_DWORD *)v231 + 8) = *(_DWORD *)(v233 + 32);
              *v231 = v234;
              v231[1] = v235;
              v220 = (_OWORD *)((char *)v231 + 36);
              v214 = (_QWORD *)v591;
            }
            ++v230;
            v229 = *v224;
            v231 = v220;
          }
          while (v230 < (*v225 - *v224) >> 2);
        }
        v547 = v232;
        v587 = 0x8E38E38E38E38E39 * (((uint64_t)v220 - v219) >> 2);
        v246 = 126 - 2 * __clz(v587);
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)TAPExtractor::compare_prompts_by_boundary_conditions;
        if (v220 == (_OWORD *)v219)
          v247 = 0;
        else
          v247 = v246;
        std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*,false>(v219, (unint64_t)v220, (uint64_t (**)(__int128 *, __int128 *))&buf, v247, 1);
        v222 = v573;
        v248 = v577;
        if (v220 != (_OWORD *)v219)
        {
          v249 = 0;
          v250 = 0;
          v563 = ((_DWORD)v577 + (_DWORD)v567) & 0x1FFC0 | (unint64_t)(((_BYTE)v558 + (_BYTE)v577) & 0x3F);
          while (1)
          {
            v251 = v219 + 36 * v249;
            if (!TAPExtractor::detect_v1_match((uint64_t)v214, &__str, (unsigned __int16)v222, (unsigned __int16)v248, v251))goto LABEL_441;
            v252 = v214[59];
            v253 = v214[60];
            v254 = v253 - v252;
            if (v253 == v252)
              goto LABEL_414;
            v255 = 0;
            v256 = 0;
            v257 = v219 + 36 * v250;
            v258 = 0xAAAAAAAAAAAAAAABLL * (v254 >> 3);
            do
            {
              v259 = 0;
              v260 = v252 + 24 * v255;
              if (*(unsigned __int8 *)(v260 + 23) <= 0xAu)
                v261 = 10;
              else
                v261 = *(unsigned __int8 *)(v260 + 23);
              while (1)
              {
                if ((*(char *)(v260 + 23) & 0x80000000) == 0)
                {
                  if (v259 >= v261)
                    break;
                  v262 = *(unsigned __int8 *)(v252 + 24 * v256 + v259);
                  v263 = *(unsigned __int8 *)(v257 + v259);
                  LODWORD(v264) = v261;
                  goto LABEL_409;
                }
                v264 = *(unsigned __int16 *)(v260 + 8) <= 0xAu ? 10 : *(unsigned __int16 *)(v260 + 8);
                if (v259 >= v264)
                  break;
                v262 = *(unsigned __int8 *)(*(_QWORD *)v260 + v259);
                v263 = *(unsigned __int8 *)(v257 + v259);
LABEL_409:
                if (v262 != v263)
                  break;
                v28 = v259++ == (_DWORD)v264 - 1;
                if (v28)
                  goto LABEL_441;
              }
              v255 = ++v256;
            }
            while (v258 > v256);
LABEL_414:
            std::string::basic_string(&v615, &__str, __posa, v248, (std::allocator<char> *)&buf);
            if (v563 != v567)
            {
              buf.__r_.__value_.__r.__words[0] = *(_QWORD *)(v591 + 232) + 8 * v554;
              LODWORD(buf.__r_.__value_.__r.__words[1]) = v558;
              std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&buf, v563 - v567);
            }
            v265 = v219 + 36 * v249;
            v267 = *(unsigned int *)(v265 + 28);
            v266 = *(_DWORD *)(v265 + 32);
            v268 = v214;
            v269 = *(_QWORD *)(v214[44] + 32);
            v270 = v268[48];
            v271 = v268[72];
            v272 = v268[73];
            if (v271 >= v272)
            {
              v275 = 0x8E38E38E38E38E39 * ((uint64_t)(v271 - *v579) >> 3);
              v276 = v275 + 1;
              if (v275 + 1 > 0x38E38E38E38E38ELL)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v277 = 0x8E38E38E38E38E39 * ((uint64_t)(v272 - *v579) >> 3);
              if (2 * v277 > v276)
                v276 = 2 * v277;
              if (v277 >= 0x1C71C71C71C71C7)
                v278 = 0x38E38E38E38E38ELL;
              else
                v278 = v276;
              *(_QWORD *)&v596[8] = v591 + 584;
              if (v278)
                v278 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Prompt>>(v278);
              else
                v279 = 0;
              v280 = v278 + 72 * v275;
              buf.__r_.__value_.__r.__words[0] = v278;
              buf.__r_.__value_.__l.__size_ = v280;
              *(_QWORD *)v596 = v278 + 72 * v279;
              *(_OWORD *)(v280 + 8) = 0u;
              *(_OWORD *)(v280 + 24) = 0u;
              *(_QWORD *)(v280 + 40) = 0;
              *(_QWORD *)(v280 + 48) = 0;
              *(_QWORD *)v280 = 0x8000000080000000;
              *(_DWORD *)(v280 + 8) = -1;
              *(_QWORD *)(v280 + 56) = 0;
              *(_QWORD *)(v280 + 64) = 0;
              *(_WORD *)(v280 + 40) = 0;
              *(_QWORD *)(v280 + 16) = 0;
              *(_QWORD *)(v280 + 24) = 0;
              *(_QWORD *)(v280 + 32) = 0;
              buf.__r_.__value_.__r.__words[2] = v280 + 72;
              std::vector<Prompt>::__swap_out_circular_buffer(v579, &buf);
              v274 = v591;
              v273 = *(_QWORD *)(v591 + 576);
              std::__split_buffer<Prompt>::~__split_buffer((uint64_t)&buf);
            }
            else
            {
              *(_OWORD *)(v271 + 8) = 0u;
              *(_OWORD *)(v271 + 24) = 0u;
              *(_QWORD *)(v271 + 40) = 0;
              *(_QWORD *)(v271 + 48) = 0;
              *(_QWORD *)v271 = 0x8000000080000000;
              *(_DWORD *)(v271 + 8) = -1;
              *(_QWORD *)(v271 + 56) = 0;
              *(_QWORD *)(v271 + 64) = 0;
              *(_WORD *)(v271 + 40) = 0;
              *(_QWORD *)(v271 + 16) = 0;
              *(_QWORD *)(v271 + 24) = 0;
              v273 = v271 + 72;
              *(_QWORD *)(v271 + 32) = 0;
              v274 = v591;
            }
            *(_QWORD *)(v274 + 576) = v273;
            MEMORY[0x1DF0ECA80](v273 - 56, v251);
            v281 = *(unsigned __int16 *)(v274 + 410);
            *(_DWORD *)(v273 - 72) = v281;
            *(_DWORD *)(v273 - 68) = *(unsigned __int16 *)(v274 + 412) - v281 + 1;
            std::vector<int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)(v273 - 24), (char *)(v270 + v269 + 4 * v267), (char *)(v270 + v269 + 4 * v267 + 4 * (unsigned __int16)(v266 - v267)), (unsigned __int16)(v266 - v267));
            if (Diagnostics_GetLogObject(void)::onceToken != -1)
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
            v214 = (_QWORD *)v591;
            v248 = v577;
            v282 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
            {
              Censor::global_plaintext(&__p, (uint64_t)&v615);
              p_p = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              v284 = *(_DWORD *)(v273 - 72);
              v285 = v284 + *(_DWORD *)(v273 - 68) - 1;
              v286 = (uint64_t)(*(_QWORD *)(v273 - 16) - *(_QWORD *)(v273 - 24)) >> 2;
              LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v251;
              WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_p;
              HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
              *(_DWORD *)v596 = v284;
              *(_WORD *)&v596[4] = 1024;
              *(_DWORD *)&v596[6] = v285;
              *(_WORD *)&v596[10] = 2048;
              *(_QWORD *)&v596[12] = v286;
              _os_log_impl(&dword_1DE3F6000, v282, OS_LOG_TYPE_DEFAULT, "Prompt   : \"%s\" for text: \"%s\" affecting phone ranges: [%d,%d], with units length: %lu ", (uint8_t *)&buf, 0x2Cu);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
            Censor::global_plaintext(&buf, (uint64_t)&v615);
            v288 = &buf;
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v288 = (std::string *)buf.__r_.__value_.__r.__words[0];
            Diagnostics::log(5, "Prompt   : \"%s\" for text: \"%s\" affecting phone ranges: [%d,%d], with units length: %lu ", v287, v251, v288, *(unsigned int *)(v273 - 72), (*(_DWORD *)(v273 - 72) + *(_DWORD *)(v273 - 68) - 1), (uint64_t)(*(_QWORD *)(v273 - 16) - *(_QWORD *)(v273 - 24)) >> 2);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              operator delete(buf.__r_.__value_.__l.__data_);
            v222 = v573;
            if (SHIBYTE(v615.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v615.__r_.__value_.__l.__data_);
LABEL_441:
            v249 = ++v250;
            if (v587 <= v250)
            {
              v220 = (_OWORD *)v219;
              break;
            }
          }
        }
        v223 = v248 - 1;
        v221 = v546;
      }
      while (v248 > 0);
      v218 = v214[38];
      v217 = v214[39];
LABEL_445:
      v221 = (unsigned __int16)++v222;
      if (0xAAAAAAAAAAAAAAABLL * ((v217 - v218) >> 3) <= (unsigned __int16)v222)
      {
        if (v220)
          operator delete(v220);
LABEL_448:
        if (SHIBYTE(v593.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v593.__r_.__value_.__l.__data_);
        v290 = *(const std::string::value_type **)a2;
        v289 = *((_QWORD *)a2 + 1);
        if (v289 == *(_QWORD *)a2)
          goto LABEL_510;
        v291 = 0;
        v568 = v214 + 73;
        while (2)
        {
          v292 = &v290[216 * v291];
          v293 = *((_QWORD *)v292 + 9);
          v294 = *((_QWORD *)v292 + 10);
          if (v293 == v294)
            goto LABEL_509;
          v582 = *((_QWORD *)v292 + 10);
          v588 = v291;
LABEL_454:
          if (*(_DWORD *)v293 != 9 || *(_DWORD *)(v293 + 4) != 0x7FFFFFFF)
          {
LABEL_507:
            v293 += 56;
            if (v293 == v294)
            {
              v290 = *(const std::string::value_type **)a2;
              v289 = *((_QWORD *)a2 + 1);
LABEL_509:
              if (++v291 >= 0x84BDA12F684BDA13 * ((v289 - (uint64_t)v290) >> 3))
              {
LABEL_510:
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
                return v579;
              }
              continue;
            }
            goto LABEL_454;
          }
          break;
        }
        v296 = (__int128 *)(v293 + 8);
        if (*(char *)(v293 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v293 + 8), *(_QWORD *)(v293 + 16));
        }
        else
        {
          v297 = *v296;
          __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v293 + 24);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v297;
        }
        PromptStream::normalize_audio_prompt_name((void **)&__p.__r_.__value_.__l.__data_);
        v298 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) > 0xA)
            goto LABEL_507;
          v299 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          goto LABEL_466;
        }
        v299 = __p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_ < 0xB)
        {
LABEL_466:
          if (v299 >= 8)
          {
            v300 = v214[10];
            v301 = v214[11];
            if (v300 != v301)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v302 = &__p;
              else
                v302 = (std::string *)__p.__r_.__value_.__r.__words[0];
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v303 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              else
                v303 = __p.__r_.__value_.__l.__size_;
              while (1)
              {
                v304 = *(unsigned __int16 *)(*(_QWORD *)v300 + 2);
                if (*(_WORD *)(*(_QWORD *)v300 + 2))
                  break;
LABEL_478:
                v300 += 8;
                if (v300 == v301)
                {
                  v214 = (_QWORD *)v591;
                  v294 = v582;
                  v291 = v588;
                  goto LABEL_505;
                }
              }
              v305 = 0;
              v306 = (unsigned int *)(*(_QWORD *)v300 + 4);
              while (memcmp(v306, v302, v303))
              {
                v306 += 9;
                if (++v305 >= v304)
                  goto LABEL_478;
              }
              v598 = 0;
              v599[0] = 0;
              v597 = 0;
              memset(v596, 0, 18);
              buf.__r_.__value_.__r.__words[2] = 0;
              v291 = v588;
              LODWORD(buf.__r_.__value_.__l.__data_) = v588;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = 0xFFFFFFFF00000000;
              v214 = (_QWORD *)v591;
              v307 = *(_QWORD *)(v591 + 384) + *(_QWORD *)(*(_QWORD *)(v591 + 352) + 32);
              v308 = (char *)(v307 + 4 * v306[7]);
              v309 = (char *)(v307 + 4 * v306[8]);
              std::vector<int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)&v597, v308, v309, (v309 - v308) >> 2);
              v310 = *(_QWORD *)(v591 + 576);
              v311 = *(_QWORD *)(v591 + 584);
              if (v310 >= v311)
              {
                v313 = 0x8E38E38E38E38E39 * ((uint64_t)(v310 - *v579) >> 3);
                v314 = v313 + 1;
                if (v313 + 1 > 0x38E38E38E38E38ELL)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v315 = 0x8E38E38E38E38E39 * ((uint64_t)(v311 - *v579) >> 3);
                if (2 * v315 > v314)
                  v314 = 2 * v315;
                if (v315 >= 0x1C71C71C71C71C7)
                  v316 = 0x38E38E38E38E38ELL;
                else
                  v316 = v314;
                v617 = v568;
                if (v316)
                  v316 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Prompt>>(v316);
                else
                  v317 = 0;
                v615.__r_.__value_.__r.__words[0] = v316;
                v615.__r_.__value_.__l.__size_ = v316 + 72 * v313;
                v615.__r_.__value_.__r.__words[2] = v615.__r_.__value_.__l.__size_;
                v616 = v316 + 72 * v317;
                std::allocator<Prompt>::construct[abi:ne180100]<Prompt,Prompt const&>(v615.__r_.__value_.__l.__size_, (uint64_t *)&buf);
                v615.__r_.__value_.__r.__words[2] += 72;
                std::vector<Prompt>::__swap_out_circular_buffer(v579, &v615);
                v312 = *(_QWORD *)(v591 + 576);
                std::__split_buffer<Prompt>::~__split_buffer((uint64_t)&v615);
              }
              else
              {
                std::allocator<Prompt>::construct[abi:ne180100]<Prompt,Prompt const&>(*(_QWORD *)(v591 + 576), (uint64_t *)&buf);
                v312 = v310 + 72;
                *(_QWORD *)(v591 + 576) = v310 + 72;
              }
              *(_QWORD *)(v591 + 576) = v312;
              if (Diagnostics_GetLogObject(void)::onceToken != -1)
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
              v318 = Diagnostics_GetLogObject(void)::__profile_log_default;
              if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
              {
                v320 = v293 + 8;
                if (*(char *)(v293 + 31) < 0)
                  v320 = *(_QWORD *)v296;
                LODWORD(v615.__r_.__value_.__l.__data_) = 136315650;
                *(std::string::size_type *)((char *)v615.__r_.__value_.__r.__words + 4) = (std::string::size_type)v306;
                WORD2(v615.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&v615.__r_.__value_.__r.__words[1] + 6) = v320;
                HIWORD(v615.__r_.__value_.__r.__words[2]) = 2048;
                v616 = v588;
                _os_log_impl(&dword_1DE3F6000, v318, OS_LOG_TYPE_DEFAULT, "Prompt   : \"%s\" canned: \"%s\" at phone: [%zu]", (uint8_t *)&v615, 0x20u);
              }
              if (*(char *)(v293 + 31) < 0)
                v296 = *(__int128 **)v296;
              Diagnostics::log(5, "Prompt   : \"%s\" canned: \"%s\" at phone: [%zu]", v319, v306, v296, v588);
              if (v597)
              {
                v598 = v597;
                operator delete(v597);
              }
              v294 = v582;
              if ((v596[15] & 0x80000000) != 0)
                operator delete((void *)buf.__r_.__value_.__r.__words[2]);
              v298 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
          }
LABEL_505:
          if ((v298 & 0x80) == 0)
            goto LABEL_507;
        }
        operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_507;
      }
    }
  }
  v5 = *((_QWORD *)v2 + 45);
  if (*(_WORD *)(v5 + 20))
  {
    if (*(unsigned __int16 *)(v5 + 20) >= 3u && *(_WORD *)(v5 + 18) == 2)
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1DE3F6000, v6, OS_LOG_TYPE_ERROR, "Prompts version has not been coded for and likely does not exist", (uint8_t *)&buf, 2u);
      }
      v8 = "Prompts version has not been coded for and likely does not exist";
LABEL_22:
      Diagnostics::log(3, v8, v7);
      goto LABEL_771;
    }
  }
  else if (*(_WORD *)(v5 + 18) == 2)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v10 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1DE3F6000, v10, OS_LOG_TYPE_ERROR, "Running broken version of prompt file, please upgrade voice for prompts", (uint8_t *)&buf, 2u);
    }
    v8 = "Running broken version of prompt file, please upgrade voice for prompts";
    goto LABEL_22;
  }
  std::string::basic_string[abi:ne180100]<0>(&buf, "NORMAL");
  *(_WORD *)v596 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v596[8], "NEUTRAL");
  LOWORD(v598) = 1;
  std::string::basic_string[abi:ne180100]<0>(v599, "EMPHATIC");
  v600 = 2;
  std::string::basic_string[abi:ne180100]<0>(v601, "PLAYFUL");
  v602 = 3;
  std::string::basic_string[abi:ne180100]<0>(v603, "QUIET");
  v604 = 4;
  std::string::basic_string[abi:ne180100]<0>(v605, "BORED");
  v606 = 5;
  std::string::basic_string[abi:ne180100]<0>(v607, "NONE");
  v608 = 0;
  std::string::basic_string[abi:ne180100]<0>(v609, "SPELL");
  v610 = 7;
  std::string::basic_string[abi:ne180100]<0>(v611, "DO NOT MATCH");
  v612 = 8;
  std::string::basic_string[abi:ne180100]<0>(v613, "DISABLED");
  v11 = 0;
  v12 = 0;
  v614 = 9;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  p_size = &__p.__r_.__value_.__l.__size_;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
  while (1)
  {
    if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ == &__p.__r_.__value_.__r.__words[1])
    {
      v15 = &__p.__r_.__value_.__l.__size_;
      if (!v11)
        goto LABEL_31;
LABEL_33:
      v593.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
      v16 = (uint64_t **)(v15 + 1);
LABEL_35:
      if (*v16)
        goto LABEL_39;
      goto LABEL_36;
    }
    v14 = &__p.__r_.__value_.__l.__size_;
    if (v11)
    {
      do
      {
        v15 = (std::string::size_type *)v11;
        v11 = *(_QWORD *)(v11 + 8);
      }
      while (v11);
    }
    else
    {
      do
      {
        v15 = (std::string::size_type *)v14[2];
        v28 = *v15 == (_QWORD)v14;
        v14 = v15;
      }
      while (v28);
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&__p.__r_.__value_.__r.__words[2], (const void **)v15 + 4, (const void **)&buf.__r_.__value_.__l.__data_ + 4 * v12))
    {
      v16 = (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)&__p, &v593, (const void **)&buf.__r_.__value_.__l.__data_ + 4 * v12);
      goto LABEL_35;
    }
    if (__p.__r_.__value_.__l.__size_)
      goto LABEL_33;
LABEL_31:
    v593.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
    v16 = (uint64_t **)&__p.__r_.__value_.__l.__size_;
LABEL_36:
    std::__tree<std::__value_type<std::string,Emotion>,std::__map_value_compare<std::string,std::__value_type<std::string,Emotion>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Emotion>>>::__construct_node<std::pair<std::string const,Emotion> const&>((uint64_t)&v615, (uint64_t)&__p, (uint64_t)&buf + 32 * v12);
    v17 = v593.__r_.__value_.__r.__words[0];
    v18 = (uint64_t *)v615.__r_.__value_.__r.__words[0];
    *(_QWORD *)v615.__r_.__value_.__l.__data_ = 0;
    v18[1] = 0;
    v18[2] = v17;
    *v16 = v18;
    if (*(_QWORD *)__p.__r_.__value_.__l.__data_)
    {
      __p.__r_.__value_.__r.__words[0] = *(_QWORD *)__p.__r_.__value_.__l.__data_;
      v18 = *v16;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)__p.__r_.__value_.__l.__size_, v18);
    ++__p.__r_.__value_.__r.__words[2];
LABEL_39:
    if (++v12 == 10)
      break;
    v11 = __p.__r_.__value_.__l.__size_;
  }
  v19 = 40;
  do
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[v19 + 2]) < 0)
      operator delete(*(void **)((char *)&__p.__r_.__value_.__l.__data_ + v19 * 8));
    v19 -= 4;
  }
  while (v19 * 8);
  v20 = (uint64_t **)((char *)v2 + 448);
  if ((std::string *)((char *)v2 + 448) != &__p)
  {
    v21 = __p.__r_.__value_.__r.__words[0];
    if (*((_QWORD *)v2 + 58))
    {
      v22 = *((_QWORD *)v2 + 56);
      v23 = *((_QWORD *)v2 + 57);
      *((_QWORD *)v2 + 56) = (char *)v2 + 456;
      *(_QWORD *)(v23 + 16) = 0;
      *((_QWORD *)v2 + 57) = 0;
      *((_QWORD *)v2 + 58) = 0;
      if (*(_QWORD *)(v22 + 8))
        v24 = *(_QWORD *)(v22 + 8);
      else
        v24 = v22;
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v2 + 448;
      buf.__r_.__value_.__l.__size_ = v24;
      buf.__r_.__value_.__r.__words[2] = v24;
      if (v24)
      {
        buf.__r_.__value_.__l.__size_ = (std::string::size_type)std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::_DetachedTreeCache::__detach_next(v24);
        if ((std::string::size_type *)v21 != &__p.__r_.__value_.__r.__words[1])
        {
          do
          {
            std::string::operator=((std::string *)(v24 + 32), (const std::string *)(v21 + 32));
            *(_WORD *)(v24 + 56) = *(_WORD *)(v21 + 56);
            v25 = (uint64_t *)buf.__r_.__value_.__r.__words[2];
            leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__find_leaf_high((uint64_t)v20, &v615, (const void **)(buf.__r_.__value_.__r.__words[2] + 32));
            std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(v20, (uint64_t)v615.__r_.__value_.__l.__data_, leaf_high, v25);
            buf.__r_.__value_.__r.__words[2] = buf.__r_.__value_.__l.__size_;
            if (buf.__r_.__value_.__l.__size_)
              buf.__r_.__value_.__l.__size_ = (std::string::size_type)std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::_DetachedTreeCache::__detach_next(buf.__r_.__value_.__l.__size_);
            v27 = *(std::string::size_type **)(v21 + 8);
            if (v27)
            {
              do
              {
                p_size = v27;
                v27 = (std::string::size_type *)*v27;
              }
              while (v27);
            }
            else
            {
              do
              {
                p_size = *(std::string::size_type **)(v21 + 16);
                v28 = *p_size == v21;
                v21 = (std::string::size_type)p_size;
              }
              while (!v28);
            }
            v24 = buf.__r_.__value_.__r.__words[2];
            if (buf.__r_.__value_.__r.__words[2])
              v28 = p_size == &__p.__r_.__value_.__r.__words[1];
            else
              v28 = 1;
            v21 = (std::string::size_type)p_size;
          }
          while (!v28);
        }
      }
      else
      {
        p_size = (std::string::size_type *)v21;
      }
      std::__tree<std::__value_type<std::string,Emotion>,std::__map_value_compare<std::string,std::__value_type<std::string,Emotion>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Emotion>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&buf);
      v21 = (std::string::size_type)p_size;
    }
    if ((std::string::size_type *)v21 != &__p.__r_.__value_.__r.__words[1])
    {
      do
      {
        std::__tree<std::__value_type<std::string,Emotion>,std::__map_value_compare<std::string,std::__value_type<std::string,Emotion>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Emotion>>>::__construct_node<std::pair<std::string const,Emotion> const&>((uint64_t)&buf, (uint64_t)v20, v21 + 32);
        v323 = (uint64_t *)buf.__r_.__value_.__r.__words[0];
        v324 = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__find_leaf_high((uint64_t)v20, &v615, (const void **)(buf.__r_.__value_.__r.__words[0] + 32));
        std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(v20, (uint64_t)v615.__r_.__value_.__l.__data_, v324, v323);
        v325 = *(std::string **)(v21 + 8);
        if (v325)
        {
          do
          {
            v326 = v325;
            v325 = (std::string *)v325->__r_.__value_.__r.__words[0];
          }
          while (v325);
        }
        else
        {
          do
          {
            v326 = *(std::string **)(v21 + 16);
            v28 = v326->__r_.__value_.__r.__words[0] == v21;
            v21 = (std::string::size_type)v326;
          }
          while (!v28);
        }
        v21 = (std::string::size_type)v326;
      }
      while (v326 != (std::string *)&__p.__r_.__value_.__r.__words[1]);
    }
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((char *)__p.__r_.__value_.__l.__size_);
  v327 = *((_QWORD *)a2 + 1) - *(_QWORD *)a2;
  v328 = 0x84BDA12F684BDA13 * (v327 >> 3);
  v329 = (_BYTE *)*((_QWORD *)v2 + 67);
  v330 = (char *)*((_QWORD *)v2 + 66);
  v331 = (v329 - v330) >> 1;
  if (v328 <= v331)
  {
    if (v328 >= v331)
    {
      v336 = *(char **)(v591 + 528);
      v338 = *(char **)(v591 + 536);
      v340 = v591;
    }
    else
    {
      v338 = &v330[0x97B425ED097B426 * (v327 >> 3)];
      v340 = v591;
      *(_QWORD *)(v591 + 536) = v338;
      v336 = v330;
    }
  }
  else
  {
    v332 = v328 - v331;
    v333 = *(_QWORD *)(v591 + 544);
    if (v328 - v331 <= (v333 - (uint64_t)v329) >> 1)
    {
      bzero(*(void **)(v591 + 536), 2 * v332);
      v338 = &v329[2 * v332];
      *(_QWORD *)(v591 + 536) = v338;
      v336 = v330;
      v340 = v591;
    }
    else
    {
      if (v327 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      if (v333 - (uint64_t)v330 > v328)
        v328 = v333 - (_QWORD)v330;
      if ((unint64_t)(v333 - (_QWORD)v330) >= 0x7FFFFFFFFFFFFFFELL)
        v334 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v334 = v328;
      if (v334 < 0)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v335 = (char *)operator new(2 * v334);
      v336 = &v335[2 * v331];
      v337 = &v335[2 * v334];
      bzero(v336, 2 * v332);
      v338 = &v336[2 * v332];
      while (v329 != v330)
      {
        v339 = *((_WORD *)v329 - 1);
        v329 -= 2;
        *((_WORD *)v336 - 1) = v339;
        v336 -= 2;
      }
      *(_QWORD *)(v591 + 528) = v336;
      *(_QWORD *)(v591 + 536) = v338;
      *(_QWORD *)(v591 + 544) = v337;
      v340 = v591;
      if (v330)
      {
        operator delete(v330);
        v338 = *(char **)(v591 + 536);
        v336 = *(char **)(v591 + 528);
      }
    }
  }
  v341 = v338 - v336;
  v342 = v341 == 1;
  if (v341 >= 1)
  {
    v343 = (unint64_t)v341 >> 1;
    v344 = !v342;
    bzero(v336, 2 * (v343 - v344) + 2);
  }
  v345 = *(const std::string::value_type **)a2;
  v346 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
  if (v346 == *(const std::string::value_type **)a2)
  {
    LOWORD(v368) = 0;
    *(_BYTE *)(v340 + 441) = 0;
    goto LABEL_602;
  }
  v347 = 0;
  v348 = 0;
  v349 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (2)
  {
    v350 = *(_QWORD *)&v345[216 * v347 + 72];
    if (*(_QWORD *)&v345[216 * v347 + 80] == v350)
      goto LABEL_591;
    v351 = 0;
    while (2)
    {
      if (*(_DWORD *)(v350 + 56 * v351) == 8)
      {
        v352 = v350 + 56 * v351;
        v353 = (const std::string::value_type **)(v352 + 8);
        if (*(char *)(v352 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&buf, *v353, *(_QWORD *)(v352 + 16));
        }
        else
        {
          v354 = *(_OWORD *)v353;
          buf.__r_.__value_.__r.__words[2] = *(_QWORD *)(v352 + 24);
          *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v354;
        }
        MEMORY[0x1DF0ECEDC](&v615);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v355 = &buf;
        else
          v355 = (std::string *)buf.__r_.__value_.__r.__words[0];
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v356 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        else
          v356 = buf.__r_.__value_.__l.__size_;
        for (; v356; --v356)
        {
          v357 = v355->__r_.__value_.__s.__data_[0];
          v358 = std::locale::use_facet((const std::locale *)&v615, v349);
          v355->__r_.__value_.__s.__data_[0] = ((uint64_t (*)(const std::locale::facet *, _QWORD))v358->__vftable[1].~facet)(v358, v357);
          v355 = (std::string *)((char *)v355 + 1);
        }
        std::locale::~locale((std::locale *)&v615);
        v359 = (void **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)v20, &v615, (const void **)&buf.__r_.__value_.__l.__data_);
        v360 = (char *)*v359;
        if (!*v359)
        {
          v361 = (uint64_t **)v359;
          v360 = (char *)operator new(0x40uLL);
          v362 = (std::string *)(v360 + 32);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v362, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)&v362->__r_.__value_.__l.__data_ = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
            *((_QWORD *)v360 + 6) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
          }
          *((_WORD *)v360 + 28) = 0;
          std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(v20, (uint64_t)v615.__r_.__value_.__l.__data_, v361, (uint64_t *)v360);
        }
        v348 = *((_WORD *)v360 + 28);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        v345 = *(const std::string::value_type **)a2;
      }
      v350 = *(_QWORD *)&v345[216 * v347 + 72];
      if (*(_DWORD *)(v350 + 56 * v351) == 11)
      {
        v363 = v350 + 56 * v351;
        v364 = (uint64_t **)(v363 + 8);
        v365 = *(char *)(v363 + 31);
        if (v365 < 0)
        {
          if (v364[1] != (uint64_t *)5)
            goto LABEL_589;
          v364 = (uint64_t **)*v364;
        }
        else if (v365 != 5)
        {
          goto LABEL_589;
        }
        v366 = bswap32(*(_DWORD *)v364);
        if (v366 == 1936745836)
        {
          v367 = *((unsigned __int8 *)v364 + 4) - 108;
        }
        else if (v366 < 0x7370656C)
        {
          v367 = -1;
        }
        else
        {
          v367 = 1;
        }
        if (!v367)
          v348 = 7;
      }
LABEL_589:
      if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)&v345[216 * v347 + 80] - v350) >> 3) > (unint64_t)++v351)
        continue;
      break;
    }
    v336 = *(char **)(v591 + 528);
    v346 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
LABEL_591:
    *(_WORD *)&v336[2 * v347++] = v348;
    v368 = (v346 - v345) / 216;
    if (v368 > v347)
      continue;
    break;
  }
  v340 = v591;
  *(_BYTE *)(v591 + 441) = 0;
  if (v346 != v345)
  {
    if (v368 <= 1)
      v369 = 1;
    else
      v369 = (v346 - v345) / 216;
    v370 = (int *)(v345 + 184);
    while (1)
    {
      v371 = *v370;
      v370 += 54;
      if (v371 == 1)
        break;
      if (!--v369)
        goto LABEL_602;
    }
    *(_BYTE *)(v591 + 441) = 1;
  }
LABEL_602:
  *(_WORD *)(v340 + 414) = v368;
  std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::destroy(*(_QWORD **)(v340 + 40));
  *(_QWORD *)(v340 + 32) = v340 + 40;
  *(_QWORD *)(v340 + 48) = 0;
  *(_QWORD *)(v340 + 40) = 0;
  std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)(v340 + 56));
  v372 = v340 + 16;
  std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::destroy(*(_QWORD **)(v340 + 16));
  *(_QWORD *)(v340 + 8) = v340 + 16;
  *(_QWORD *)(v340 + 16) = 0;
  *(_QWORD *)(v340 + 24) = 0;
  std::vector<std::vector<int>>::resize((uint64_t *)(v340 + 56), 0);
  v373 = *(_QWORD *)(v340 + 304);
  v374 = *(_QWORD *)(v340 + 312);
  while (v374 != v373)
  {
    v374 -= 24;
    buf.__r_.__value_.__r.__words[0] = v374;
    std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  }
  *(_QWORD *)(v591 + 312) = v373;
  v549 = (std::string::size_type *)(v591 + 256);
  std::vector<BOOL>::resize(v591 + 256, 0x84BDA12F684BDA13 * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3), 0);
  v375 = *(_QWORD *)(v591 + 264);
  if (v375)
  {
    buf.__r_.__value_.__r.__words[0] = *v549;
    LODWORD(buf.__r_.__value_.__r.__words[1]) = 0;
    std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&buf, v375);
  }
  v589 = (_QWORD *)(v372 + 288);
  std::vector<std::vector<std::vector<std::pair<unsigned short,unsigned short>>>>::resize((char **)(v372 + 288), 0x84BDA12F684BDA13 * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3));
  std::vector<std::string>::resize((std::vector<std::string> *)(v591 + 504), 0x97B425ED097B426 * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3));
  v2 = (TAPExtractor *)v591;
  v376 = *(_QWORD *)(v591 + 512);
  if (v376 == *(_QWORD *)(v591 + 504))
  {
    v387 = *(_QWORD *)(v591 + 512);
  }
  else
  {
    v377 = 0;
    v378 = 0;
    do
    {
      v379 = *(_QWORD *)a2 + 216 * (v378 >> 1);
      if (*(char *)(v379 + 23) >= 0)
        v380 = *(unsigned __int8 *)(v379 + 23);
      else
        v380 = *(_QWORD *)(v379 + 8);
      std::string::basic_string[abi:ne180100]((uint64_t)&buf, v380 + 1);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v381 = &buf;
      else
        v381 = (std::string *)buf.__r_.__value_.__r.__words[0];
      if (v380)
      {
        if (*(char *)(v379 + 23) >= 0)
          v382 = (const void *)v379;
        else
          v382 = *(const void **)v379;
        memmove(v381, v382, v380);
      }
      v383 = (char *)v381 + v380;
      if ((v378 & 1) != 0)
        v384 = 50;
      else
        v384 = 49;
      *v383 = v384;
      v383[1] = 0;
      v385 = *(_QWORD *)(v591 + 504) + 24 * v377;
      if (*(char *)(v385 + 23) < 0)
        operator delete(*(void **)v385);
      v386 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *(_QWORD *)(v385 + 16) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
      *(_OWORD *)v385 = v386;
      v377 = ++v378;
      v376 = *(_QWORD *)(v591 + 504);
      v387 = *(_QWORD *)(v591 + 512);
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v387 - v376) >> 3) > v378);
    v2 = (TAPExtractor *)v591;
  }
  if (((((*((_DWORD *)v2 + 28) - *((_DWORD *)v2 + 26)) >> 3) - 1) & 0x8000) == 0)
  {
    v388 = (unsigned __int16)(((*((_DWORD *)v2 + 28) - *((_DWORD *)v2 + 26)) >> 3) - 1);
    do
    {
      v564 = v388;
      v389 = **(unsigned __int16 **)(*((_QWORD *)v2 + 13) + 8 * v388);
      if (**(_WORD **)(*((_QWORD *)v2 + 13) + 8 * v388))
        v390 = 2 * *((unsigned __int16 *)v2 + 207) >= v389;
      else
        v390 = 0;
      if (v390)
      {
        v391 = 0;
        if (v389 >= 8)
          v392 = 8;
        else
          v392 = **(unsigned __int16 **)(*((_QWORD *)v2 + 13) + 8 * v388);
        if ((unsigned __int16)(v392 - 1) >= (unsigned __int16)(-1
                                                                            - 21845 * ((v387 - v376) >> 3)))
          v393 = (unsigned __int16)(-1 - 21845 * ((v387 - v376) >> 3));
        else
          v393 = (unsigned __int16)(v392 - 1);
        v394 = (int *)*((_QWORD *)v2 + 16);
        v395 = v393 + 1;
        v396 = (char *)(v376 + 24 * v393);
        do
        {
          v397 = v396;
          if (v396[23] < 0)
            v397 = *(char **)v396;
          v398 = *v394++;
          v391 += v398 * *v397;
          v396 -= 24;
          v123 = v395-- <= 1;
        }
        while (!v123);
        v399 = 0;
        if ((unsigned __int16)(v389 - 1) >= 7u)
          v400 = 7;
        else
          v400 = (unsigned __int16)(v389 - 1);
        v569 = v389;
        v574 = v400;
        v583 = v392 - 1;
        do
        {
          if (v399)
          {
            v401 = (char *)(v376 + 24 * (v399 - 1));
            if (v401[23] < 0)
              v401 = *(char **)v401;
            v402 = (char *)(v376 + 24 * (v583 + v399));
            if (v402[23] < 0)
              v402 = *(char **)v402;
            v403 = v591;
            v391 = (v391 - *(_DWORD *)(*(_QWORD *)(v591 + 128) + 4 * v583) * *v401)
                 * *(unsigned __int16 *)(*(_QWORD *)(v591 + 352) + 22)
                 + *v402;
          }
          else
          {
            v403 = v591;
          }
          v404 = std::__hash_table<std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>>>::__equal_range_multi<unsigned int>((_QWORD *)(*(_QWORD *)(v403 + 280) + 40 * v574), v391);
          if (v404 != v405)
          {
            v406 = v404;
            v407 = v405;
            do
            {
              v408 = *((unsigned __int16 *)v406 + 11);
              v409 = *((unsigned __int16 *)v406 + 10);
              v410 = *(unsigned __int16 **)(*(_QWORD *)(v591 + 104) + 8 * v409);
              v411 = (unint64_t)*v410 >> 1;
              if (TAPExtractor::detect_v2_match(v591, (unsigned __int16)(v399 >> 1), v411, (uint64_t)&v410[28 * *((unsigned __int16 *)v406 + 11) + 2], (uint64_t *)a2))
              {
                v412 = (uint64_t *)(*v589 + 24 * (unsigned __int16)(v399 >> 1));
                v413 = *v412;
                if (0xAAAAAAAAAAAAAAABLL * ((v412[1] - *v412) >> 3) <= v411)
                {
                  std::vector<std::vector<std::pair<unsigned short,unsigned short>>>::resize((uint64_t)v412, v411 + 1);
                  v413 = *(_QWORD *)(*v589 + 24 * (unsigned __int16)(v399 >> 1));
                }
                v414 = (void **)(v413 + 24 * v411);
                v415 = v409 | (v408 << 16);
                v416 = v414 + 1;
                v417 = v414[1];
                v418 = (unint64_t)v414[2];
                if ((unint64_t)v417 >= v418)
                {
                  v420 = ((char *)v417 - (_BYTE *)*v414) >> 2;
                  if ((unint64_t)(v420 + 1) >> 62)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v421 = v418 - (_QWORD)*v414;
                  v422 = v421 >> 1;
                  if (v421 >> 1 <= (unint64_t)(v420 + 1))
                    v422 = v420 + 1;
                  if ((unint64_t)v421 >= 0x7FFFFFFFFFFFFFFCLL)
                    v423 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v423 = v422;
                  if (v423)
                    v423 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v423);
                  else
                    v424 = 0;
                  v425 = (_DWORD *)(v423 + 4 * v420);
                  *v425 = v415;
                  v419 = v425 + 1;
                  v426 = (char *)*v416;
                  v427 = (char *)*v414;
                  if (*v416 != *v414)
                  {
                    do
                    {
                      v428 = *((_DWORD *)v426 - 1);
                      v426 -= 4;
                      *--v425 = v428;
                    }
                    while (v426 != v427);
                    v426 = (char *)*v414;
                  }
                  *v414 = v425;
                  *v416 = v419;
                  v414[2] = (void *)(v423 + 4 * v424);
                  if (v426)
                    operator delete(v426);
                }
                else
                {
                  *v417 = v415;
                  v419 = v417 + 1;
                }
                *v416 = v419;
              }
              v406 = (uint64_t *)*v406;
            }
            while (v406 != v407);
            v376 = *(_QWORD *)(v591 + 504);
            v387 = *(_QWORD *)(v591 + 512);
            v389 = v569;
          }
          ++v399;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v387 - v376) >> 3) - v389 >= v399);
      }
      v388 = v564 - 1;
      v2 = (TAPExtractor *)v591;
    }
    while (v564 > 0);
  }
  v430 = *((_QWORD *)v2 + 38);
  v429 = *((_QWORD *)v2 + 39);
  if (v429 != v430)
  {
    v431 = 0;
    v552 = 0;
    v432 = 0;
    v433 = 0;
    v434 = 0;
    v548 = (char *)v2 + 584;
    while (1)
    {
      v435 = -1 - 21845 * ((*(_DWORD *)(v430 + 24 * v433 + 8) - *(_DWORD *)(v430 + 24 * v433)) >> 3);
      if ((v435 & 0x8000) != 0)
        goto LABEL_768;
      v584 = (unsigned __int16)v434;
      v436 = (unsigned __int16)v435;
      v556 = v434 & 0x3F;
      v570 = v434 & 0x3F;
      v551 = (unsigned __int16)v434 >> 6;
      v544 = v434 - 1;
      v559 = v434;
      v545 = v433;
      while (2)
      {
        v437 = (uint64_t *)(*(_QWORD *)(*v589 + 24 * v433) + 24 * v436);
        v438 = v437 + 1;
        if (v437[1] == *v437)
          goto LABEL_716;
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v439 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
        {
          v441 = (*v438 - *v437) >> 2;
          LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v441;
          _os_log_impl(&dword_1DE3F6000, v439, OS_LOG_TYPE_DEBUG, "Had %zu candidates for prompt match, applied sort. ", (uint8_t *)&buf, 0xCu);
        }
        Diagnostics::log(7, "Had %zu candidates for prompt match, applied sort. ", v440, (*v438 - *v437) >> 2);
        v442 = *v437;
        if (*v438 == *v437)
        {
LABEL_716:
          v444 = (unint64_t)v431;
          v445 = v552;
        }
        else
        {
          v443 = 0;
          v444 = (unint64_t)v431;
          v445 = v552;
          do
          {
            v446 = *(_QWORD *)(*(_QWORD *)(v591 + 104) + 8 * *(unsigned __int16 *)(v442 + 4 * v443))
                 + 56 * *(unsigned __int16 *)(v442 + 4 * v443 + 2)
                 + 4;
            if (v444 >= (unint64_t)v445)
            {
              v450 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v444 - (_QWORD)v431) >> 3) + 1;
              if (v450 > 0x492492492492492)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              if (0xDB6DB6DB6DB6DB6ELL * ((v445 - v431) >> 3) > v450)
                v450 = 0xDB6DB6DB6DB6DB6ELL * ((v445 - v431) >> 3);
              if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v445 - v431) >> 3)) >= 0x249249249249249)
                v451 = 0x492492492492492;
              else
                v451 = v450;
              if (v451)
              {
                if (v451 > 0x492492492492492)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v452 = (char *)operator new(56 * v451);
              }
              else
              {
                v452 = 0;
              }
              v453 = &v452[8 * ((uint64_t)(v444 - (_QWORD)v431) >> 3)];
              v454 = *(_OWORD *)v446;
              v455 = *(_OWORD *)(v446 + 16);
              v456 = *(_OWORD *)(v446 + 32);
              *((_QWORD *)v453 + 6) = *(_QWORD *)(v446 + 48);
              *((_OWORD *)v453 + 1) = v455;
              *((_OWORD *)v453 + 2) = v456;
              *(_OWORD *)v453 = v454;
              if ((char *)v444 == v431)
              {
                v461 = &v452[8 * ((uint64_t)(v444 - (_QWORD)v431) >> 3)];
              }
              else
              {
                v457 = &v452[8 * ((uint64_t)(v444 - (_QWORD)v431) >> 3)];
                do
                {
                  v458 = *(_OWORD *)(v444 - 56);
                  v459 = *(_OWORD *)(v444 - 40);
                  v460 = *(_OWORD *)(v444 - 24);
                  v461 = v457 - 56;
                  *((_QWORD *)v457 - 1) = *(_QWORD *)(v444 - 8);
                  *(_OWORD *)(v457 - 24) = v460;
                  *(_OWORD *)(v457 - 40) = v459;
                  *(_OWORD *)(v457 - 56) = v458;
                  v444 -= 56;
                  v457 -= 56;
                }
                while ((char *)v444 != v431);
              }
              v445 = &v452[56 * v451];
              v444 = (unint64_t)(v453 + 56);
              if (v431)
              {
                v462 = &v452[56 * v451];
                operator delete(v431);
                v445 = v462;
              }
              v431 = v461;
            }
            else
            {
              v447 = *(_OWORD *)v446;
              v448 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(v591 + 104) + 8 * *(unsigned __int16 *)(v442 + 4 * v443))
                               + 56 * *(unsigned __int16 *)(v442 + 4 * v443 + 2)
                               + 20);
              v449 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(v591 + 104) + 8 * *(unsigned __int16 *)(v442 + 4 * v443))
                               + 56 * *(unsigned __int16 *)(v442 + 4 * v443 + 2)
                               + 36);
              *(_QWORD *)(v444 + 48) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v591 + 104)
                                                             + 8 * *(unsigned __int16 *)(v442 + 4 * v443))
                                                 + 56 * *(unsigned __int16 *)(v442 + 4 * v443 + 2)
                                                 + 52);
              *(_OWORD *)(v444 + 16) = v448;
              *(_OWORD *)(v444 + 32) = v449;
              *(_OWORD *)v444 = v447;
              v444 += 56;
            }
            ++v443;
            v442 = *v437;
          }
          while (v443 < (*v438 - *v437) >> 2);
        }
        v552 = v445;
        v463 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v444 - (_QWORD)v431) >> 3);
        v464 = 126 - 2 * __clz(v463);
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)TAPExtractor::compare_v2_prompts_by_boundary_conditions;
        if ((char *)v444 == v431)
          v465 = 0;
        else
          v465 = v464;
        std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*,false>((uint64_t)v431, v444, (uint64_t (**)(__int128 *, __int128 *))&buf, v465, 1);
        if ((char *)v444 == v431)
          goto LABEL_765;
        v466 = 0;
        v467 = 0;
        v565 = ((_DWORD)v570 + (unsigned __int16)v436) & 0x1FFC0 | (unint64_t)(((_BYTE)v436 + (_BYTE)v556) & 0x3F);
        do
        {
          v468 = (uint64_t)&v431[56 * v466];
          if (!TAPExtractor::detect_v2_match(v591, (unsigned __int16)v434, (unsigned __int16)v436, v468, (uint64_t *)a2))
            goto LABEL_764;
          if (v436)
          {
            v469 = v584;
            do
            {
              if (*(unsigned __int16 *)(*(_QWORD *)(v591 + 528) + 2 * v469) != *(unsigned __int16 *)&v431[56 * v466 + 22])
                goto LABEL_764;
              ++v469;
            }
            while (v469 < (v436 + v584));
          }
          v470 = *(_QWORD *)(v591 + 472);
          v471 = *(_QWORD *)(v591 + 480);
          v472 = v471 - v470;
          if (v471 == v470)
            goto LABEL_745;
          v473 = 0;
          v474 = 0;
          v475 = (unsigned __int16 *)&v431[56 * v467];
          v476 = 0xAAAAAAAAAAAAAAABLL * (v472 >> 3);
          do
          {
            v477 = 0;
            v478 = v470 + 24 * v473;
            if (*(unsigned __int8 *)(v478 + 23) <= 0xAu)
              v479 = 10;
            else
              v479 = *(unsigned __int8 *)(v478 + 23);
            while ((*(char *)(v478 + 23) & 0x80000000) == 0)
            {
              if (v477 >= v479)
                goto LABEL_744;
              v480 = *(unsigned __int8 *)(v470 + 24 * v474 + v477);
              v481 = *((unsigned __int8 *)v475 + v477);
              LODWORD(v482) = v479;
LABEL_740:
              if (v480 != v481)
                goto LABEL_744;
              v28 = v477++ == (_DWORD)v482 - 1;
              if (v28)
                goto LABEL_764;
            }
            if (*(unsigned __int16 *)(v478 + 8) <= 0xAu)
              v482 = 10;
            else
              v482 = *(unsigned __int16 *)(v478 + 8);
            if (v477 < v482)
            {
              v480 = *(unsigned __int8 *)(*(_QWORD *)v478 + v477);
              v481 = *((unsigned __int8 *)v475 + v477);
              goto LABEL_740;
            }
LABEL_744:
            v473 = ++v474;
          }
          while (v476 > v474);
LABEL_745:
          if (v565 != v570)
          {
            buf.__r_.__value_.__r.__words[0] = *v549 + 8 * v551;
            LODWORD(buf.__r_.__value_.__r.__words[1]) = v556;
            std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&buf, v565 - v570);
          }
          v483 = (unsigned __int16 *)&v431[56 * v466];
          v484 = *((unsigned int *)v483 + 9);
          v578 = *((_DWORD *)v483 + 10);
          *(_WORD *)(v591 + 410) = v434;
          *(_WORD *)(v591 + 412) = v544 + v436;
          v485 = *(_QWORD *)(*(_QWORD *)(v591 + 360) + 32);
          v486 = *(_QWORD *)(v591 + 576);
          v487 = *(_QWORD *)(v591 + 584);
          v575 = *(_QWORD *)(v591 + 384);
          if (v486 >= v487)
          {
            v490 = 0x8E38E38E38E38E39 * ((uint64_t)(v486 - *v579) >> 3);
            v491 = v490 + 1;
            if (v490 + 1 > 0x38E38E38E38E38ELL)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v492 = 0x8E38E38E38E38E39 * ((uint64_t)(v487 - *v579) >> 3);
            if (2 * v492 > v491)
              v491 = 2 * v492;
            if (v492 >= 0x1C71C71C71C71C7)
              v493 = 0x38E38E38E38E38ELL;
            else
              v493 = v491;
            *(_QWORD *)&v596[8] = v548;
            if (v493)
              v493 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Prompt>>(v493);
            else
              v494 = 0;
            v495 = v493 + 72 * v490;
            buf.__r_.__value_.__r.__words[0] = v493;
            buf.__r_.__value_.__l.__size_ = v495;
            *(_QWORD *)v596 = v493 + 72 * v494;
            *(_OWORD *)(v495 + 8) = 0u;
            *(_OWORD *)(v495 + 24) = 0u;
            *(_QWORD *)(v495 + 40) = 0;
            *(_QWORD *)(v495 + 48) = 0;
            *(_QWORD *)v495 = 0x8000000080000000;
            *(_DWORD *)(v495 + 8) = -1;
            *(_QWORD *)(v495 + 56) = 0;
            *(_QWORD *)(v495 + 64) = 0;
            *(_WORD *)(v495 + 40) = 0;
            *(_QWORD *)(v495 + 16) = 0;
            *(_QWORD *)(v495 + 24) = 0;
            *(_QWORD *)(v495 + 32) = 0;
            buf.__r_.__value_.__r.__words[2] = v495 + 72;
            std::vector<Prompt>::__swap_out_circular_buffer(v579, &buf);
            v489 = v591;
            v488 = *(_QWORD *)(v591 + 576);
            std::__split_buffer<Prompt>::~__split_buffer((uint64_t)&buf);
          }
          else
          {
            *(_OWORD *)(v486 + 8) = 0u;
            *(_OWORD *)(v486 + 24) = 0u;
            *(_QWORD *)(v486 + 40) = 0;
            *(_QWORD *)(v486 + 48) = 0;
            *(_QWORD *)v486 = 0x8000000080000000;
            *(_DWORD *)(v486 + 8) = -1;
            *(_QWORD *)(v486 + 56) = 0;
            *(_QWORD *)(v486 + 64) = 0;
            *(_WORD *)(v486 + 40) = 0;
            *(_QWORD *)(v486 + 16) = 0;
            *(_QWORD *)(v486 + 24) = 0;
            v488 = v486 + 72;
            *(_QWORD *)(v486 + 32) = 0;
            v489 = v591;
          }
          *(_QWORD *)(v489 + 576) = v488;
          MEMORY[0x1DF0ECA80](v488 - 56, v468);
          v434 = v559;
          v496 = *(unsigned __int16 *)(v591 + 410);
          *(_DWORD *)(v488 - 72) = v496;
          *(_DWORD *)(v488 - 68) = *(unsigned __int16 *)(v591 + 412) - v496 + 1;
          std::vector<int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)(v488 - 24), (char *)(v575 + v485 + 4 * v484), (char *)(v575 + v485 + 4 * v484 + 4 * (unsigned __int16)(v578 - v484)), (unsigned __int16)(v578 - v484));
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v497 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
          {
            v499 = *(_DWORD *)(v488 - 72);
            v500 = v499 + *(_DWORD *)(v488 - 68) - 1;
            v501 = (uint64_t)(*(_QWORD *)(v488 - 16) - *(_QWORD *)(v488 - 24)) >> 2;
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v468;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v499;
            WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(buf.__r_.__value_.__r.__words[2]) = v500;
            *(_WORD *)v596 = 2048;
            *(_QWORD *)&v596[2] = v501;
            _os_log_impl(&dword_1DE3F6000, v497, OS_LOG_TYPE_DEFAULT, "Prompt   : \"%s\" : affecting phone ranges  [%d,%d], with units length: %lu. ", (uint8_t *)&buf, 0x22u);
          }
          Diagnostics::log(5, "Prompt   : \"%s\" : affecting phone ranges  [%d,%d], with units length: %lu. ", v498, v468, *(unsigned int *)(v488 - 72), (*(_DWORD *)(v488 - 72) + *(_DWORD *)(v488 - 68) - 1), (uint64_t)(*(_QWORD *)(v488 - 16) - *(_QWORD *)(v488 - 24)) >> 2);
LABEL_764:
          v466 = ++v467;
        }
        while (v463 > v467);
LABEL_765:
        v123 = v436-- <= 0;
        v433 = v545;
        if (!v123)
          continue;
        break;
      }
      v2 = (TAPExtractor *)v591;
      v430 = *(_QWORD *)(v591 + 304);
      v429 = *(_QWORD *)(v591 + 312);
      v432 = v431;
LABEL_768:
      v433 = (unsigned __int16)++v434;
      if (0xAAAAAAAAAAAAAAABLL * ((v429 - v430) >> 3) <= (unsigned __int16)v434)
      {
        if (v432)
          operator delete(v432);
        break;
      }
    }
  }
LABEL_771:
  v503 = *(const std::string::value_type **)a2;
  v502 = *((_QWORD *)a2 + 1);
  if (v502 == *(_QWORD *)a2)
    return v579;
  v504 = 0;
  v571 = (char *)v2 + 584;
  v505 = &unk_1F044B000;
  v506 = &unk_1F044B000;
  while (2)
  {
    v507 = &v503[216 * v504];
    v509 = *((_QWORD *)v507 + 9);
    v508 = *((_QWORD *)v507 + 10);
    if (v509 == v508)
      goto LABEL_839;
    v510 = a2;
    v585 = *((_QWORD *)v507 + 10);
    while (2)
    {
      if (*(_DWORD *)v509 == 9 && *(_DWORD *)(v509 + 4) == 0x7FFFFFFF)
      {
        if (*(char *)(v509 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v509 + 8), *(_QWORD *)(v509 + 16));
        }
        else
        {
          v512 = *(_OWORD *)(v509 + 8);
          __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v509 + 24);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v512;
        }
        PromptStream::normalize_audio_prompt_name((void **)&__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          v513 = __p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_ >= 0xB)
            goto LABEL_800;
        }
        else
        {
          if (HIBYTE(__p.__r_.__value_.__r.__words[2]) > 0xAu)
            goto LABEL_800;
          v513 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        if (v513 >= 8)
        {
          v514 = *(_QWORD *)(v591 + 104);
          v515 = *(_QWORD *)(v591 + 112);
          if (v514 != v515)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v516 = &__p;
            else
              v516 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v517 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v517 = __p.__r_.__value_.__l.__size_;
            while (1)
            {
              v518 = v505;
              v519 = v504;
              v520 = *(unsigned __int16 *)(*(_QWORD *)v514 + 2);
              if (*(_WORD *)(*(_QWORD *)v514 + 2))
                break;
LABEL_799:
              v514 += 8;
              v504 = v519;
              v505 = v518;
              v506 = &unk_1F044B000;
              if (v514 == v515)
                goto LABEL_800;
            }
            v521 = 0;
            v522 = (unsigned int *)(*(_QWORD *)v514 + 4);
            while (memcmp(v522, v516, v517))
            {
              v522 += 14;
              if (++v521 >= v520)
                goto LABEL_799;
            }
            v523 = (_QWORD *)v591;
            v504 = v519;
            v505 = v518;
            v506 = &unk_1F044B000;
            goto LABEL_811;
          }
        }
LABEL_800:
        v523 = (_QWORD *)v591;
        v522 = (unsigned int *)select_prompt_from_prefix<std::vector<TAPFileBuilder::v2_tap_prompt_section_of_length_m const*>>(*(uint64_t **)(v591 + 104), *(uint64_t **)(v591 + 112), (const void **)&__p.__r_.__value_.__l.__data_, 1);
        if (!v522)
        {
          if (v505[443] != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v510 = a2;
          v508 = v585;
          v524 = *((_QWORD *)v506 + 442);
          if (os_log_type_enabled(v524, OS_LOG_TYPE_INFO))
          {
            v526 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v526 = (std::string *)__p.__r_.__value_.__r.__words[0];
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v526;
            _os_log_impl(&dword_1DE3F6000, v524, OS_LOG_TYPE_INFO, "Unable to play audio from markers: %s", (uint8_t *)&buf, 0xCu);
          }
          v527 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v527 = (std::string *)__p.__r_.__value_.__r.__words[0];
          Diagnostics::log(6, "Unable to play audio from markers: %s", v525, v527);
LABEL_835:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_837;
        }
LABEL_811:
        v598 = 0;
        v599[0] = 0;
        v597 = 0;
        memset(v596, 0, 18);
        buf.__r_.__value_.__r.__words[2] = 0;
        LODWORD(buf.__r_.__value_.__l.__data_) = v504;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = 0xFFFFFFFF00000000;
        v528 = v523[48] + *(_QWORD *)(v523[45] + 32);
        v529 = (char *)(v528 + 4 * v522[9]);
        v530 = (char *)(v528 + 4 * v522[10]);
        std::vector<int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)&v597, v529, v530, (v530 - v529) >> 2);
        v531 = v523[72];
        v532 = v523[73];
        if (v531 >= v532)
        {
          v535 = 0x8E38E38E38E38E39 * ((uint64_t)(v531 - *v579) >> 3);
          v536 = v535 + 1;
          if (v535 + 1 > 0x38E38E38E38E38ELL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v537 = 0x8E38E38E38E38E39 * ((uint64_t)(v532 - *v579) >> 3);
          if (2 * v537 > v536)
            v536 = 2 * v537;
          if (v537 >= 0x1C71C71C71C71C7)
            v538 = 0x38E38E38E38E38ELL;
          else
            v538 = v536;
          v617 = v571;
          if (v538)
            v538 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Prompt>>(v538);
          else
            v539 = 0;
          v615.__r_.__value_.__r.__words[0] = v538;
          v615.__r_.__value_.__l.__size_ = v538 + 72 * v535;
          v615.__r_.__value_.__r.__words[2] = v615.__r_.__value_.__l.__size_;
          v616 = v538 + 72 * v539;
          std::allocator<Prompt>::construct[abi:ne180100]<Prompt,Prompt const&>(v615.__r_.__value_.__l.__size_, (uint64_t *)&buf);
          v534 = (std::string::size_type *)(v509 + 8);
          v615.__r_.__value_.__r.__words[2] += 72;
          std::vector<Prompt>::__swap_out_circular_buffer(v579, &v615);
          v533 = v523[72];
          std::__split_buffer<Prompt>::~__split_buffer((uint64_t)&v615);
        }
        else
        {
          std::allocator<Prompt>::construct[abi:ne180100]<Prompt,Prompt const&>(v523[72], (uint64_t *)&buf);
          v533 = v531 + 72;
          v523[72] = v531 + 72;
          v534 = (std::string::size_type *)(v509 + 8);
        }
        v523[72] = v533;
        if (v505[443] != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v510 = a2;
        v508 = v585;
        v540 = *((_QWORD *)v506 + 442);
        if (os_log_type_enabled(v540, OS_LOG_TYPE_DEFAULT))
        {
          v542 = (std::string::size_type)v534;
          if (*(char *)(v509 + 31) < 0)
            v542 = *v534;
          LODWORD(v615.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)v615.__r_.__value_.__r.__words + 4) = (std::string::size_type)v522;
          WORD2(v615.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v615.__r_.__value_.__r.__words[1] + 6) = v542;
          HIWORD(v615.__r_.__value_.__r.__words[2]) = 2048;
          v616 = v504;
          _os_log_impl(&dword_1DE3F6000, v540, OS_LOG_TYPE_DEFAULT, "Prompt   : \"%s\" canned: \"%s\" at phone: [%zu]", (uint8_t *)&v615, 0x20u);
        }
        if (*(char *)(v509 + 31) < 0)
          v534 = (std::string::size_type *)*v534;
        Diagnostics::log(5, "Prompt   : \"%s\" canned: \"%s\" at phone: [%zu]", v541, v522, v534, v504);
        if (v597)
        {
          v598 = v597;
          operator delete(v597);
        }
        if ((v596[15] & 0x80000000) != 0)
          operator delete((void *)buf.__r_.__value_.__r.__words[2]);
        goto LABEL_835;
      }
LABEL_837:
      v509 += 56;
      if (v509 != v508)
        continue;
      break;
    }
    v503 = *(const std::string::value_type **)v510;
    v502 = *((_QWORD *)v510 + 1);
LABEL_839:
    if (++v504 < 0x84BDA12F684BDA13 * ((v502 - (uint64_t)v503) >> 3))
      continue;
    return v579;
  }
}

void sub_1DEAB04C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  void **v57;

  while (1)
  {
    if (*((char *)v57 - 9) < 0)
      operator delete(*(v57 - 4));
    v57 -= 4;
    if (v57 == &a57)
      _Unwind_Resume(a1);
  }
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(char *result, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  char *v14;
  int v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  int v19;
  size_t v20;

  v6 = __src;
  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<int>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
    v14 = v13;
    if (v6 != a3)
    {
      v14 = v9;
      do
      {
        v15 = *(_DWORD *)v6;
        v6 += 4;
        *(_DWORD *)v14 = v15;
        v14 += 4;
      }
      while (v6 != a3);
    }
LABEL_20:
    v20 = v14 - v9;
    goto LABEL_21;
  }
  v12 = (void **)(result + 8);
  v16 = (_BYTE *)*((_QWORD *)result + 1);
  v17 = (v16 - v9) >> 2;
  if (v17 < a4)
  {
    v18 = &__src[4 * v17];
    if (v16 != v9)
    {
      result = (char *)memmove(*(void **)result, __src, v16 - v9);
      v9 = (char *)*v12;
    }
    v14 = v9;
    if (v18 != a3)
    {
      v14 = v9;
      do
      {
        v19 = *(_DWORD *)v18;
        v18 += 4;
        *(_DWORD *)v14 = v19;
        v14 += 4;
      }
      while (v18 != a3);
    }
    goto LABEL_20;
  }
  v20 = a3 - __src;
  if (a3 != __src)
    result = (char *)memmove(*(void **)result, __src, v20);
LABEL_21:
  *v12 = &v9[v20];
  return result;
}

void std::vector<std::vector<std::vector<std::pair<unsigned short,unsigned short>>>>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v20;
  void **v21;

  v4 = *a1;
  v3 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v6 = a2 - v5;
  if (a2 > v5)
  {
    v7 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 3) >= v6)
    {
      bzero(a1[1], 24 * ((24 * v6 - 24) / 0x18) + 24);
      a1[1] = &v3[24 * ((24 * v6 - 24) / 0x18) + 24];
      return;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= a2)
      v9 = a2;
    if (v8 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v11 = 3 * v10;
    v12 = (char *)operator new(24 * v10);
    v13 = &v12[24 * v5];
    v14 = &v12[8 * v11];
    v15 = 24 * ((24 * v6 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v3 == v4)
    {
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
      if (!v3)
        return;
    }
    else
    {
      do
      {
        v17 = v13;
        *((_QWORD *)v13 - 1) = 0;
        v18 = *(_OWORD *)(v3 - 24);
        v3 -= 24;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((_QWORD *)v17 - 1) = *((_QWORD *)v3 + 2);
        *(_QWORD *)v3 = 0;
        *((_QWORD *)v3 + 1) = 0;
        *((_QWORD *)v3 + 2) = 0;
      }
      while (v3 != v4);
      v19 = *a1;
      v3 = a1[1];
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
      if (v3 != v19)
      {
        do
        {
          v3 -= 24;
          v21 = (void **)v3;
          std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100](&v21);
        }
        while (v3 != v19);
        v3 = v19;
      }
      if (!v3)
        return;
    }
    operator delete(v3);
    return;
  }
  if (a2 < v5)
  {
    v20 = &v4[24 * a2];
    while (v3 != v20)
    {
      v3 -= 24;
      v21 = (void **)v3;
      std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100](&v21);
    }
    a1[1] = v20;
  }
}

BOOL TAPExtractor::detect_v1_match(uint64_t a1, std::string *a2, unsigned int a3, size_t __len, uint64_t a5)
{
  unsigned int v6;
  int v7;
  unsigned int v10;
  unsigned int v11;
  _BOOL8 result;
  BOOL v13;
  unsigned __int16 v14;
  signed int v15;
  _BOOL4 v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  NSObject *v29;
  void *p_p;
  const char *v31;
  void *v32;
  NSObject *v33;
  const char *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  std::string::size_type size;
  char **v39;
  BOOL v40;
  NSObject *v41;
  const char *v42;
  int v43;
  int v44;
  uint64_t v45;
  std::string::size_type v46;
  char **v47;
  BOOL v48;
  NSObject *v49;
  const char *v50;
  int v51;
  int v52;
  NSObject *v53;
  const char *v54;
  std::string::size_type v55;
  char **v56;
  BOOL v57;
  NSObject *v58;
  const char *v59;
  int v60;
  int v61;
  int v62;
  NSObject *v63;
  const char *v64;
  int v65;
  int v66;
  int v67;
  NSObject *v68;
  const char *v69;
  char *v70;
  NSObject *v71;
  BOOL v72;
  std::string v73;
  std::string __str;
  char v75;
  void *__p;
  __int16 v77;
  int v78;
  __int16 v79;
  int v80;
  __int16 v81;
  unsigned int v82;
  uint8_t buf[4];
  void *v84;
  uint64_t v85;

  v6 = __len;
  v7 = a3;
  v85 = *MEMORY[0x1E0C80C00];
  v10 = __len + a3;
  if ((_DWORD)__len)
  {
    v11 = a3;
    while (((*(_QWORD *)(*(_QWORD *)(a1 + 232) + ((v11 >> 3) & 0x1FF8)) >> v11) & 1) == 0)
    {
      if (v10 <= (unsigned __int16)++v11)
      {
        result = TAPExtractor::v1_string_match(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 24), *(_QWORD *)(a1 + 384), a2, a3, __len, *(_DWORD *)(a5 + 20));
        if (result)
          goto LABEL_8;
        return result;
      }
    }
    return 0;
  }
  v13 = TAPExtractor::v1_string_match(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 24), *(_QWORD *)(a1 + 384), a2, a3, 0, *(_DWORD *)(a5 + 20));
  result = 0;
  if (!v13)
    return result;
LABEL_8:
  memset(&__str, 0, sizeof(__str));
  v14 = TAPExtractor::v1_extract_utf8_character_from_string(v7, 1, &__str, (uint64_t *)a2);
  v15 = v10 - 1;
  while (1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, " _¡¿\t\r\n");
    v16 = is_one_of((char **)&__p, (char *)&__str);
    if (SBYTE1(v82) < 0)
      operator delete(__p);
    if (!v16)
      break;
    LOWORD(v7) = v14;
    v14 = TAPExtractor::v1_extract_utf8_character_from_string(v14, 1, &__str, (uint64_t *)a2);
  }
  v17 = (unsigned __int16)v7;
  v18 = *(_QWORD *)(a1 + 208);
  v20 = *(_QWORD *)(a1 + 136);
  v19 = *(_QWORD *)(a1 + 144);
  v21 = v19 - v20;
  if (v19 == v20)
  {
LABEL_18:
    LOWORD(v22) = -1;
  }
  else
  {
    v22 = 0;
    v23 = v21 >> 1;
    if ((unint64_t)(v21 >> 1) <= 1)
      v23 = 1;
    while (*(unsigned __int16 *)(v20 + 2 * v22) != *(unsigned __int16 *)(v18 + 2 * (unsigned __int16)v7))
    {
      if (v23 == ++v22)
        goto LABEL_18;
    }
  }
  v24 = *(unsigned __int16 *)(v18 + 2 * v15);
  v25 = v20 - 2;
  v26 = ((unint64_t)v21 >> 1);
  while ((int)v26 >= 1)
  {
    v27 = v26 - 1;
    v28 = *(unsigned __int16 *)(v25 + 2 * v26--);
    if (v28 == v24)
      goto LABEL_24;
  }
  v27 = -1;
LABEL_24:
  *(_WORD *)(a1 + 410) = v22;
  *(_WORD *)(a1 + 412) = v27;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v29 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    std::string::basic_string(&v73, a2, (unsigned __int16)v7, v6, (std::allocator<char> *)&v75);
    Censor::global_plaintext((std::string *)&__p, (uint64_t)&v73);
    if ((v82 & 0x8000) == 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136315138;
    v84 = p_p;
    _os_log_impl(&dword_1DE3F6000, v29, OS_LOG_TYPE_DEBUG, "Attempting prompt match for prompt %s ", buf, 0xCu);
    if (SBYTE1(v82) < 0)
      operator delete(__p);
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v73.__r_.__value_.__l.__data_);
  }
  std::string::basic_string(&v73, a2, (unsigned __int16)v7, v6, (std::allocator<char> *)buf);
  Censor::global_plaintext((std::string *)&__p, (uint64_t)&v73);
  if ((v82 & 0x8000) == 0)
    v32 = &__p;
  else
    v32 = __p;
  Diagnostics::log(7, "Attempting prompt match for prompt %s ", v31, v32);
  if (SBYTE1(v82) < 0)
    operator delete(__p);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v33 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    v35 = *(unsigned __int16 *)(a1 + 412);
    v36 = (unsigned __int16)v7;
    __p = (void *)__PAIR64__(*(unsigned __int16 *)(a1 + 410), 67109888);
    v77 = 1024;
    v78 = v35;
    v79 = 1024;
    v80 = (unsigned __int16)v7;
    v81 = 1024;
    v82 = v10 - 1;
    _os_log_impl(&dword_1DE3F6000, v33, OS_LOG_TYPE_DEBUG, "First phone is %d, last phone is %d, start index is %d, end_index is %d ", (uint8_t *)&__p, 0x1Au);
  }
  else
  {
    v36 = (unsigned __int16)v7;
  }
  Diagnostics::log(7, "First phone is %d, last phone is %d, start index is %d, end_index is %d ", v34, *(unsigned __int16 *)(a1 + 410), *(unsigned __int16 *)(a1 + 412), v36, v10 - 1);
  v37 = TAPExtractor::v1_extract_nonblank_character(v7, 0, &__str, (uint64_t *)a2);
  if ((_DWORD)v37)
  {
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    if (size)
    {
      v39 = (char **)SENTENCE_BOUNDARY_CHARACTERS();
      v40 = is_one_of(v39, (char *)&__str);
    }
    else
    {
      v40 = 1;
    }
    *(_BYTE *)(a1 + 435) = v40;
    std::string::basic_string[abi:ne180100]<0>(&__p, ":,;");
    *(_BYTE *)(a1 + 436) = is_one_of((char **)&__p, (char *)&__str);
    if (SBYTE1(v82) < 0)
      operator delete(__p);
  }
  else
  {
    *(_WORD *)(a1 + 435) = 1;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v41 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    v43 = aFt_0[*(unsigned __int8 *)(a1 + 435)];
    v44 = aFt_0[*(unsigned __int8 *)(a1 + 436)];
    LODWORD(__p) = 67109632;
    HIDWORD(__p) = v43;
    v77 = 1024;
    v78 = v44;
    v79 = 1024;
    v80 = v37;
    _os_log_impl(&dword_1DE3F6000, v41, OS_LOG_TYPE_DEBUG, "Start index matches are: %c, %c, while the non-blank index is %d ", (uint8_t *)&__p, 0x14u);
  }
  Diagnostics::log(7, "Start index matches are: %c, %c, while the non-blank index is %d ", v42, aFt_0[*(unsigned __int8 *)(a1 + 435)], aFt_0[*(unsigned __int8 *)(a1 + 436)], v37);
  *(_BYTE *)(a1 + 434) = (*(_QWORD *)(*(_QWORD *)(a1 + 160) + ((v17 >> 3) & 0x1FF8)) >> v17) & 1;
  v45 = TAPExtractor::v1_extract_nonblank_character(v10, 0, &__str, (uint64_t *)a2);
  v46 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v46 = __str.__r_.__value_.__l.__size_;
  if (v46)
  {
    v47 = (char **)SENTENCE_BOUNDARY_CHARACTERS();
    v48 = is_one_of(v47, (char *)&__str);
  }
  else
  {
    v48 = 1;
  }
  *(_BYTE *)(a1 + 437) = v48;
  std::string::basic_string[abi:ne180100]<0>(&__p, ":,;");
  *(_BYTE *)(a1 + 438) = is_one_of((char **)&__p, (char *)&__str);
  if (SBYTE1(v82) < 0)
    operator delete(__p);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v49 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    v51 = aFt_0[*(unsigned __int8 *)(a1 + 437)];
    v52 = aFt_0[*(unsigned __int8 *)(a1 + 438)];
    LODWORD(__p) = 67109376;
    HIDWORD(__p) = v51;
    v77 = 1024;
    v78 = v52;
    _os_log_impl(&dword_1DE3F6000, v49, OS_LOG_TYPE_DEBUG, "Backwards sentence and phrase matches are: %c, %c ", (uint8_t *)&__p, 0xEu);
  }
  Diagnostics::log(7, "Backwards sentence and phrase matches are: %c, %c ", v50, aFt_0[*(unsigned __int8 *)(a1 + 437)], aFt_0[*(unsigned __int8 *)(a1 + 438)]);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v53 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(__p) = 67109120;
    HIDWORD(__p) = v45;
    _os_log_impl(&dword_1DE3F6000, v53, OS_LOG_TYPE_DEBUG, "Terminal non-blank index is %d ", (uint8_t *)&__p, 8u);
  }
  Diagnostics::log(7, "Terminal non-blank index is %d ", v54, v45);
  if (!*(_BYTE *)(a1 + 437) && !*(_BYTE *)(a1 + 438))
  {
    TAPExtractor::v1_extract_nonblank_character(v10, 1, &__str, (uint64_t *)a2);
    v55 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v55 = __str.__r_.__value_.__l.__size_;
    if (v55)
    {
      v56 = (char **)SENTENCE_BOUNDARY_CHARACTERS();
      v57 = is_one_of(v56, (char *)&__str);
    }
    else
    {
      v57 = 1;
    }
    *(_BYTE *)(a1 + 437) = v57;
    std::string::basic_string[abi:ne180100]<0>(&__p, ":,;");
    *(_BYTE *)(a1 + 438) = is_one_of((char **)&__p, (char *)&__str);
    if (SBYTE1(v82) < 0)
      operator delete(__p);
  }
  *(_BYTE *)(a1 + 439) = (*(_QWORD *)(*(_QWORD *)(a1 + 184) + (((unint64_t)v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v15) & 1;
  std::string::operator=((std::string *)(a1 + 328), &__str);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v58 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    v60 = aFt_0[*(unsigned __int8 *)(a1 + 434)];
    v61 = aFt_0[*(unsigned __int8 *)(a1 + 436)];
    v62 = aFt_0[*(unsigned __int8 *)(a1 + 435)];
    LODWORD(__p) = 67109632;
    HIDWORD(__p) = v60;
    v77 = 1024;
    v78 = v61;
    v79 = 1024;
    v80 = v62;
    _os_log_impl(&dword_1DE3F6000, v58, OS_LOG_TYPE_DEBUG, "Start word boundary is %c, start at phrase boundary is %c, start at sentence boundary is %c ", (uint8_t *)&__p, 0x14u);
  }
  Diagnostics::log(7, "Start word boundary is %c, start at phrase boundary is %c, start at sentence boundary is %c ", v59, aFt_0[*(unsigned __int8 *)(a1 + 434)], aFt_0[*(unsigned __int8 *)(a1 + 436)], aFt_0[*(unsigned __int8 *)(a1 + 435)]);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v63 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    v65 = aFt_0[*(unsigned __int8 *)(a1 + 439)];
    v66 = aFt_0[*(unsigned __int8 *)(a1 + 438)];
    v67 = aFt_0[*(unsigned __int8 *)(a1 + 437)];
    LODWORD(__p) = 67109632;
    HIDWORD(__p) = v65;
    v77 = 1024;
    v78 = v66;
    v79 = 1024;
    v80 = v67;
    _os_log_impl(&dword_1DE3F6000, v63, OS_LOG_TYPE_DEBUG, "End word boundary is %c, end at phrase boundary is %c, end at sentence boundary is %c ", (uint8_t *)&__p, 0x14u);
  }
  Diagnostics::log(7, "End word boundary is %c, end at phrase boundary is %c, end at sentence boundary is %c ", v64, aFt_0[*(unsigned __int8 *)(a1 + 439)], aFt_0[*(unsigned __int8 *)(a1 + 438)], aFt_0[*(unsigned __int8 *)(a1 + 437)]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (!*(_BYTE *)(a1 + 434))
    return 0;
  switch(*(_BYTE *)(a5 + 10))
  {
    case 0:
      goto LABEL_109;
    case 1:
      if (!*(_BYTE *)(a1 + 435))
        return 0;
      goto LABEL_109;
    case 2:
      goto LABEL_108;
    case 3:
      if (*(_BYTE *)(a1 + 435) || *(_BYTE *)(a1 + 436))
        return 0;
      goto LABEL_109;
    case 4:
      if (*(_BYTE *)(a1 + 435))
        goto LABEL_109;
LABEL_108:
      if (!*(_BYTE *)(a1 + 436))
        return 0;
LABEL_109:
      if (!*(_BYTE *)(a1 + 439))
        return 0;
      switch(*(_BYTE *)(a5 + 11))
      {
        case 0:
          goto LABEL_132;
        case 1:
          if (!*(_BYTE *)(a1 + 437))
            return 0;
          goto LABEL_132;
        case 2:
          goto LABEL_125;
        case 3:
          if (*(_BYTE *)(a1 + 437) || *(_BYTE *)(a1 + 438))
            return 0;
          goto LABEL_132;
        case 4:
          if (*(_BYTE *)(a1 + 437))
            goto LABEL_132;
LABEL_125:
          if (!*(_BYTE *)(a1 + 438))
            return 0;
LABEL_132:
          if (*(_WORD *)(a1 + 410))
            result = 1;
          else
            result = *(_WORD *)(a1 + 412) != 0;
          break;
        case 5:
          std::string::basic_string[abi:ne180100]<0>(&__p, (char *)(a5 + 12));
          v72 = is_one_of((char **)&__p, (char *)(a1 + 328));
          if (SBYTE1(v82) < 0)
            operator delete(__p);
          if (!v72)
            return 0;
          goto LABEL_132;
        case 6:
          if (*(_BYTE *)(a1 + 437))
            return 0;
          goto LABEL_132;
        default:
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v71 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
          {
            LOWORD(__p) = 0;
            _os_log_impl(&dword_1DE3F6000, v71, OS_LOG_TYPE_ERROR, "ERROR: INVALID END BOUNDARY CONDITION FOR TAP using phrase ", (uint8_t *)&__p, 2u);
          }
          v70 = "ERROR: INVALID END BOUNDARY CONDITION FOR TAP using phrase ";
          goto LABEL_118;
      }
      break;
    case 6:
      if (*(_BYTE *)(a1 + 435))
        return 0;
      goto LABEL_109;
    default:
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v68 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_1DE3F6000, v68, OS_LOG_TYPE_ERROR, "ERROR: INVALID START BOUNDARY CONDITION FOR TAP using phrase ", (uint8_t *)&__p, 2u);
      }
      v70 = "ERROR: INVALID START BOUNDARY CONDITION FOR TAP using phrase ";
LABEL_118:
      Diagnostics::log(3, v70, v69);
      return 0;
  }
  return result;
}

void sub_1DEAB15BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  _Unwind_Resume(exception_object);
}

BOOL TAPExtractor::v1_string_match(uint64_t a1, uint64_t a2, const std::string *a3, unsigned int a4, size_t __len, unsigned int a6)
{
  std::string::size_type v8;
  unsigned __int8 v9;
  size_t v10;
  std::string::size_type size;
  int v12;
  std::string *v13;
  uint64_t v14;
  void **p_s1;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v21;
  _BOOL8 v22;
  std::string v24;
  void *__s1;
  size_t __n;
  unsigned __int8 v27;
  char v28;

  v8 = __len;
  std::string::basic_string[abi:ne180100](&__s1, (void *)(a2 + a1 + a6), __len);
  std::string::basic_string(&v24, a3, a4, v8, (std::allocator<char> *)&v28);
  v9 = v27;
  if ((v27 & 0x80u) == 0)
    v10 = v27;
  else
    v10 = __n;
  size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  v12 = SHIBYTE(v24.__r_.__value_.__r.__words[2]);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v24.__r_.__value_.__l.__size_;
  if (v10 != size)
  {
    v22 = 0;
    if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_26;
  }
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v24;
  else
    v13 = (std::string *)v24.__r_.__value_.__r.__words[0];
  if ((char)v27 < 0)
  {
    v22 = memcmp(__s1, v13, __n) == 0;
    goto LABEL_22;
  }
  if (v27)
  {
    v14 = v27 - 1;
    p_s1 = &__s1;
    do
    {
      v17 = *(unsigned __int8 *)p_s1;
      p_s1 = (void **)((char *)p_s1 + 1);
      v16 = v17;
      v19 = v13->__r_.__value_.__s.__data_[0];
      v13 = (std::string *)((char *)v13 + 1);
      v18 = v19;
      v21 = v14-- != 0;
      v22 = v16 == v18;
    }
    while (v16 == v18 && v21);
LABEL_22:
    if ((v12 & 0x80000000) == 0)
      goto LABEL_23;
LABEL_26:
    operator delete(v24.__r_.__value_.__l.__data_);
    if ((v27 & 0x80) == 0)
      return v22;
LABEL_27:
    operator delete(__s1);
    return v22;
  }
  v22 = 1;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_26;
LABEL_23:
  if ((v9 & 0x80) != 0)
    goto LABEL_27;
  return v22;
}

void sub_1DEAB1778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL is_one_of(char **a1, char *a2)
{
  int v2;
  int64_t v3;
  int v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  int v12;
  void *v13;
  char *v14;
  char *v15;

  v2 = a2[23];
  if (v2 >= 0)
    v3 = a2[23];
  else
    v3 = *((_QWORD *)a2 + 1);
  if (!v3)
    return 0;
  v4 = *((char *)a1 + 23);
  if (v2 >= 0)
    v5 = a2;
  else
    v5 = *(char **)a2;
  if (v4 >= 0)
    v6 = (char *)a1;
  else
    v6 = *a1;
  v7 = (char *)*((unsigned __int8 *)a1 + 23);
  if (v4 < 0)
    v7 = a1[1];
  v8 = &v7[(_QWORD)v6];
  if ((uint64_t)v7 >= v3)
  {
    v12 = *v5;
    v13 = v6;
    do
    {
      v14 = &v7[-v3];
      if (v14 == (char *)-1)
        break;
      v15 = (char *)memchr(v13, v12, (size_t)(v14 + 1));
      if (!v15)
        break;
      v9 = v15;
      if (!memcmp(v15, v5, v3))
        return v9 != v8 && v9 - v6 != -1;
      v13 = v9 + 1;
      v7 = (char *)(v8 - (v9 + 1));
    }
    while ((uint64_t)v7 >= v3);
  }
  v9 = v8;
  return v9 != v8 && v9 - v6 != -1;
}

uint64_t TAPExtractor::v1_extract_utf8_character_from_string(int a1, int a2, std::string *a3, uint64_t *a4)
{
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t *v14;
  std::string::value_type v15;
  unint64_t v16;
  int v17;
  uint64_t *v18;
  std::string::size_type size;
  std::string *v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  unint64_t v27;
  _BYTE *p_str;
  uint64_t v29;
  uint64_t v30;
  char v31;
  std::string __str;

  LODWORD(v7) = a1;
  MEMORY[0x1DF0ECA80](a3, &byte_1DEBD87CE);
  if (a2)
  {
    v8 = *((unsigned __int8 *)a4 + 23);
    v9 = (char)v8;
    if ((v8 & 0x80u) != 0)
      v8 = a4[1];
    if (v8 > v7)
    {
      if (v9 >= 0)
        v10 = a4;
      else
        v10 = (uint64_t *)*a4;
      std::string::operator=(a3, *((_BYTE *)v10 + v7));
      LOWORD(v11) = v7 + 1;
      LOWORD(v7) = v7 + 1;
      v12 = *((char *)a4 + 23) < 0;
      v13 = *((unsigned __int8 *)a4 + 23);
      if ((v13 & 0x80u) != 0)
        v13 = a4[1];
      if (v13 > (unsigned __int16)v11)
      {
        v11 = (unsigned __int16)v11;
        do
        {
          if (v12)
            v14 = (uint64_t *)*a4;
          else
            v14 = a4;
          v15 = *((_BYTE *)v14 + v11);
          if ((v15 & 0xC0) != 0x80)
            break;
          std::string::push_back(a3, v15);
          LOWORD(v7) = v7 + 1;
          v11 = (unsigned __int16)v7;
          v12 = *((char *)a4 + 23) < 0;
          v16 = *((unsigned __int8 *)a4 + 23);
          if ((v16 & 0x80u) != 0)
            v16 = a4[1];
        }
        while (v16 > (unsigned __int16)v7);
      }
    }
  }
  else
  {
    if ((_DWORD)v7)
    {
      v17 = (unsigned __int16)(v7 - 1);
      v7 = (unsigned __int16)(v7 - 1);
      if (*((char *)a4 + 23) >= 0)
        v18 = a4;
      else
        v18 = (uint64_t *)*a4;
      std::string::operator=(a3, *((_BYTE *)v18 + v7));
      if (v17)
      {
        while (1)
        {
          size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
          if ((size & 0x80u) == 0)
            v20 = a3;
          else
            v20 = (std::string *)a3->__r_.__value_.__r.__words[0];
          if ((size & 0x80u) != 0)
            size = a3->__r_.__value_.__l.__size_;
          if ((v20->__r_.__value_.__s.__data_[size - 1] & 0xC0) != 0x80)
            break;
          LOWORD(v7) = v7 - 1;
          if (*((char *)a4 + 23) >= 0)
            v21 = a4;
          else
            v21 = (uint64_t *)*a4;
          std::string::push_back(a3, *((_BYTE *)v21 + (unsigned __int16)v7));
          if (!(_WORD)v7)
            goto LABEL_35;
        }
      }
      else
      {
LABEL_35:
        LOWORD(v7) = 0;
      }
    }
    v22 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    v23 = (char)v22;
    v24 = (uint64_t *)((char *)a3 + v22);
    if (v23 >= 0)
      v25 = v24;
    else
      v25 = (uint64_t *)(a3->__r_.__value_.__r.__words[0] + a3->__r_.__value_.__l.__size_);
    if (v23 >= 0)
      v26 = (uint64_t *)a3;
    else
      v26 = (uint64_t *)a3->__r_.__value_.__r.__words[0];
    v27 = (char *)v25 - (char *)v26;
    if ((unint64_t)((char *)v25 - (char *)v26) >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v27 > 0x16)
    {
      v29 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v27 | 7) != 0x17)
        v29 = v27 | 7;
      v30 = v29 + 1;
      p_str = operator new(v29 + 1);
      __str.__r_.__value_.__l.__size_ = (char *)v25 - (char *)v26;
      __str.__r_.__value_.__r.__words[2] = v30 | 0x8000000000000000;
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)p_str;
    }
    else
    {
      *((_BYTE *)&__str.__r_.__value_.__s + 23) = (_BYTE)v25 - (_BYTE)v26;
      p_str = &__str;
    }
    while (v25 != v26)
    {
      v31 = *((_BYTE *)v25 - 1);
      v25 = (uint64_t *)((char *)v25 - 1);
      *p_str++ = v31;
    }
    *p_str = 0;
    std::string::operator=(a3, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  return (unsigned __int16)v7;
}

void sub_1DEAB1AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t TAPExtractor::v1_extract_nonblank_character(unsigned __int16 utf8_character_from_string, int a2, std::string *a3, uint64_t *a4)
{
  unsigned __int16 v8;
  BOOL v9;
  BOOL v10;
  void *__p[2];
  char v13;

  do
  {
    while (1)
    {
      v8 = utf8_character_from_string;
      utf8_character_from_string = TAPExtractor::v1_extract_utf8_character_from_string(utf8_character_from_string, a2, a3, a4);
      std::string::basic_string[abi:ne180100]<0>(__p, " _¡¿\t\r\n");
      v9 = is_one_of((char **)__p, (char *)a3);
      v10 = v9;
      if (v13 < 0)
        break;
      if (!v9)
        return v8;
    }
    operator delete(__p[0]);
  }
  while (v10);
  return v8;
}

uint64_t SENTENCE_BOUNDARY_CHARACTERS(void)
{
  unsigned __int8 v0;
  std::string v2;
  std::string __p;

  {
    std::string::basic_string[abi:ne180100]<0>(&v2, ".?!…");
    std::string::push_back(&v2, 0);
    __p = v2;
    memset(&v2, 0, sizeof(v2));
    NeverDestructed<std::string>::NeverDestructed<>((uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v2.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v2.__r_.__value_.__l.__data_);
  }
  return SENTENCE_BOUNDARY_CHARACTERS(void)::s;
}

void sub_1DEAB1C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(a1);
}

void NeverDestructed<std::string>::NeverDestructed<>(uint64_t a1)
{
  std::string *v2;
  uint64_t v3;

  v2 = (std::string *)operator new();
  v3 = (uint64_t)v2;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  SENTENCE_BOUNDARY_CHARACTERS(void)::s = v3;
}

void sub_1DEAB1CD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

BOOL TAPExtractor::compare_prompts_by_boundary_conditions(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = boundary_type_to_priority_[*(unsigned __int8 *)(a1 + 11)];
  v3 = boundary_type_to_priority_[*(unsigned __int8 *)(a2 + 11)];
  if (v2 > v3)
    return 1;
  return v2 == v3
      && boundary_type_to_priority_[*(unsigned __int8 *)(a1 + 10)] > boundary_type_to_priority_[*(unsigned __int8 *)(a2 + 10)];
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*,false>(uint64_t a1, unint64_t a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 *v22;
  uint64_t v23;
  __int128 *v24;
  unint64_t v25;
  __int128 *v26;
  __int128 v27;
  __int128 v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  BOOL v36;
  __int128 v37;
  __int128 v38;
  __int128 *v39;
  int v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 *v59;
  BOOL v61;
  uint64_t v62;
  unint64_t v63;
  __int128 *v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  int64_t v73;
  int64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  int64_t v87;
  unint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 *v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  char v122;
  __int128 v123;
  __int128 v124;
  __int128 *v125;
  __int128 *v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  int64_t v130;
  __int128 v131;
  __int128 v132;
  int v133;
  __int128 v134;
  __int128 v135;
  int v136;
  uint64_t v137;

  v137 = *MEMORY[0x1E0C80C00];
LABEL_2:
  v127 = a2;
  v129 = a2 - 36;
  v125 = (__int128 *)(a2 - 108);
  v126 = (__int128 *)(a2 - 72);
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = a2 - v10;
    v12 = 0x8E38E38E38E38E39 * ((uint64_t)(a2 - v10) >> 2);
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)((__int128 *)v129, (__int128 *)v10))
        {
          v53 = *(_OWORD *)v10;
          v54 = *(_OWORD *)(v10 + 16);
          v136 = *(_DWORD *)(v10 + 32);
          v134 = v53;
          v135 = v54;
          v55 = *(_OWORD *)v129;
          v56 = *(_OWORD *)(v129 + 16);
          *(_DWORD *)(v10 + 32) = *(_DWORD *)(v129 + 32);
          *(_OWORD *)v10 = v55;
          *(_OWORD *)(v10 + 16) = v56;
          v57 = v134;
          v58 = v135;
          *(_DWORD *)(v129 + 32) = v136;
          *(_OWORD *)v129 = v57;
          *(_OWORD *)(v129 + 16) = v58;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>((__int128 *)v10, (__int128 *)(v10 + 36), (__int128 *)v129, a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>(v10, v10 + 36, v10 + 72, v129, a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>(v10, v10 + 36, v10 + 72, v10 + 108, v129, a3);
        return;
      default:
        if (v11 <= 863)
        {
          v59 = (__int128 *)(v10 + 36);
          v61 = v10 == a2 || v59 == (__int128 *)a2;
          if ((a5 & 1) != 0)
          {
            if (!v61)
            {
              v62 = 0;
              v63 = v10;
              do
              {
                v64 = (__int128 *)v63;
                v63 = (unint64_t)v59;
                if ((*a3)(v59, v64))
                {
                  v65 = *(_OWORD *)v63;
                  v66 = *(_OWORD *)(v63 + 16);
                  v136 = *(_DWORD *)(v63 + 32);
                  v134 = v65;
                  v135 = v66;
                  v67 = v62;
                  while (1)
                  {
                    v68 = v10 + v67;
                    v69 = *(_OWORD *)(v10 + v67 + 16);
                    *(_OWORD *)(v68 + 36) = *(_OWORD *)(v10 + v67);
                    *(_OWORD *)(v68 + 52) = v69;
                    *(_DWORD *)(v68 + 68) = *(_DWORD *)(v10 + v67 + 32);
                    if (!v67)
                      break;
                    v67 -= 36;
                    if (((*a3)(&v134, (__int128 *)(v67 + v10)) & 1) == 0)
                    {
                      v70 = v10 + v67 + 36;
                      goto LABEL_71;
                    }
                  }
                  v70 = v10;
LABEL_71:
                  v71 = v134;
                  v72 = v135;
                  *(_DWORD *)(v70 + 32) = v136;
                  *(_OWORD *)v70 = v71;
                  *(_OWORD *)(v70 + 16) = v72;
                  a2 = v127;
                }
                v59 = (__int128 *)(v63 + 36);
                v62 += 36;
              }
              while (v63 + 36 != a2);
            }
          }
          else if (!v61)
          {
            do
            {
              v116 = (__int128 *)a1;
              a1 = (uint64_t)v59;
              if ((*a3)(v59, v116))
              {
                v117 = *(_OWORD *)a1;
                v118 = *(_OWORD *)(a1 + 16);
                v136 = *(_DWORD *)(a1 + 32);
                v134 = v117;
                v135 = v118;
                v119 = a1;
                do
                {
                  v120 = v119 - 36;
                  v121 = *(_OWORD *)(v119 - 20);
                  *(_OWORD *)v119 = *(_OWORD *)(v119 - 36);
                  *(_OWORD *)(v119 + 16) = v121;
                  *(_DWORD *)(v119 + 32) = *(_DWORD *)(v119 - 4);
                  v122 = (*a3)(&v134, (__int128 *)(v119 - 72));
                  v119 = v120;
                }
                while ((v122 & 1) != 0);
                v123 = v134;
                v124 = v135;
                *(_DWORD *)(v120 + 32) = v136;
                *(_OWORD *)v120 = v123;
                *(_OWORD *)(v120 + 16) = v124;
              }
              v59 = (__int128 *)(a1 + 36);
            }
            while (a1 + 36 != a2);
          }
          return;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v73 = (v12 - 2) >> 1;
            v130 = v73;
            do
            {
              v74 = v73;
              if (v130 >= v73)
              {
                v75 = (2 * v73) | 1;
                v76 = a1 + 36 * v75;
                if (2 * v73 + 2 < (uint64_t)v12
                  && (*a3)((__int128 *)(a1 + 36 * v75), (__int128 *)(v76 + 36)))
                {
                  v76 += 36;
                  v75 = 2 * v74 + 2;
                }
                v77 = a1 + 36 * v74;
                if (((*a3)((__int128 *)v76, (__int128 *)v77) & 1) == 0)
                {
                  v78 = *(_OWORD *)v77;
                  v79 = *(_OWORD *)(v77 + 16);
                  v136 = *(_DWORD *)(v77 + 32);
                  v134 = v78;
                  v135 = v79;
                  do
                  {
                    v80 = v76;
                    v81 = *(_OWORD *)v76;
                    v82 = *(_OWORD *)(v76 + 16);
                    *(_DWORD *)(v77 + 32) = *(_DWORD *)(v76 + 32);
                    *(_OWORD *)v77 = v81;
                    *(_OWORD *)(v77 + 16) = v82;
                    if (v130 < v75)
                      break;
                    v83 = (2 * v75) | 1;
                    v76 = a1 + 36 * v83;
                    v84 = 2 * v75 + 2;
                    if (v84 < (uint64_t)v12 && (*a3)((__int128 *)(a1 + 36 * v83), (__int128 *)(v76 + 36)))
                    {
                      v76 += 36;
                      v83 = v84;
                    }
                    v77 = v80;
                    v75 = v83;
                  }
                  while (!(*a3)((__int128 *)v76, &v134));
                  v85 = v134;
                  v86 = v135;
                  *(_DWORD *)(v80 + 32) = v136;
                  *(_OWORD *)v80 = v85;
                  *(_OWORD *)(v80 + 16) = v86;
                }
              }
              v73 = v74 - 1;
            }
            while (v74);
            v87 = v11 / 0x24uLL;
            v88 = v127;
            do
            {
              v128 = v88;
              v89 = 0;
              v90 = *(_OWORD *)a1;
              v91 = *(_OWORD *)(a1 + 16);
              v133 = *(_DWORD *)(a1 + 32);
              v131 = v90;
              v132 = v91;
              v92 = a1;
              do
              {
                v93 = v92 + 36 * v89 + 36;
                v94 = (2 * v89) | 1;
                v95 = 2 * v89 + 2;
                if (v95 < v87
                  && (*a3)((__int128 *)(v92 + 36 * v89 + 36), (__int128 *)(v92 + 36 * v89 + 72)))
                {
                  v93 += 36;
                  v94 = v95;
                }
                v96 = *(_OWORD *)v93;
                v97 = *(_OWORD *)(v93 + 16);
                *(_DWORD *)(v92 + 32) = *(_DWORD *)(v93 + 32);
                *(_OWORD *)v92 = v96;
                *(_OWORD *)(v92 + 16) = v97;
                v92 = v93;
                v89 = v94;
              }
              while (v94 <= (uint64_t)((unint64_t)(v87 - 2) >> 1));
              v98 = (__int128 *)(v128 - 36);
              if (v93 == v128 - 36)
              {
                v88 = v128 - 36;
                v113 = v131;
                v114 = v132;
                *(_DWORD *)(v93 + 32) = v133;
                *(_OWORD *)v93 = v113;
                *(_OWORD *)(v93 + 16) = v114;
              }
              else
              {
                v99 = *v98;
                v100 = *(_OWORD *)(v128 - 20);
                *(_DWORD *)(v93 + 32) = *(_DWORD *)(v128 - 4);
                *(_OWORD *)v93 = v99;
                *(_OWORD *)(v93 + 16) = v100;
                v101 = v131;
                v102 = v132;
                *(_DWORD *)(v128 - 4) = v133;
                *v98 = v101;
                *(_OWORD *)(v128 - 20) = v102;
                v88 = v128 - 36;
                v103 = v93 - a1 + 36;
                if (v103 >= 37)
                {
                  v104 = (unint64_t)(-2 - 0x71C71C71C71C71C7 * (v103 >> 2)) >> 1;
                  v105 = a1 + 36 * v104;
                  if ((*a3)((__int128 *)v105, (__int128 *)v93))
                  {
                    v106 = *(_OWORD *)v93;
                    v107 = *(_OWORD *)(v93 + 16);
                    v136 = *(_DWORD *)(v93 + 32);
                    v134 = v106;
                    v135 = v107;
                    do
                    {
                      v108 = v105;
                      v109 = *(_OWORD *)v105;
                      v110 = *(_OWORD *)(v105 + 16);
                      *(_DWORD *)(v93 + 32) = *(_DWORD *)(v105 + 32);
                      *(_OWORD *)v93 = v109;
                      *(_OWORD *)(v93 + 16) = v110;
                      if (!v104)
                        break;
                      v104 = (v104 - 1) >> 1;
                      v105 = a1 + 36 * v104;
                      v93 = v108;
                    }
                    while (((*a3)((__int128 *)v105, &v134) & 1) != 0);
                    v111 = v134;
                    v112 = v135;
                    *(_DWORD *)(v108 + 32) = v136;
                    *(_OWORD *)v108 = v111;
                    *(_OWORD *)(v108 + 16) = v112;
                  }
                }
              }
            }
            while (v87-- > 2);
          }
          return;
        }
        v13 = v10 + 36 * (v12 >> 1);
        if ((unint64_t)v11 < 0x1201)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>((__int128 *)(v10 + 36 * (v12 >> 1)), (__int128 *)v10, (__int128 *)v129, a3);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>((__int128 *)v10, (__int128 *)(v10 + 36 * (v12 >> 1)), (__int128 *)v129, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>((__int128 *)(v10 + 36), (__int128 *)(v10 + 36 * (v12 >> 1) - 36), v126, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>((__int128 *)(v10 + 72), (__int128 *)(v10 + 36 + 36 * (v12 >> 1)), v125, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>((__int128 *)(v10 + 36 * (v12 >> 1) - 36), (__int128 *)(v10 + 36 * (v12 >> 1)), (__int128 *)(v10 + 36 + 36 * (v12 >> 1)), a3);
          v14 = *(_OWORD *)v10;
          v15 = *(_OWORD *)(v10 + 16);
          v136 = *(_DWORD *)(v10 + 32);
          v134 = v14;
          v135 = v15;
          v16 = *(_OWORD *)v13;
          v17 = *(_OWORD *)(v13 + 16);
          *(_DWORD *)(v10 + 32) = *(_DWORD *)(v13 + 32);
          *(_OWORD *)v10 = v16;
          *(_OWORD *)(v10 + 16) = v17;
          v18 = v134;
          v19 = v135;
          *(_DWORD *)(v13 + 32) = v136;
          *(_OWORD *)v13 = v18;
          *(_OWORD *)(v13 + 16) = v19;
        }
        --a4;
        a2 = v127;
        if ((a5 & 1) == 0 && ((*a3)((__int128 *)(v10 - 36), (__int128 *)v10) & 1) == 0)
        {
          v37 = *(_OWORD *)v10;
          v38 = *(_OWORD *)(v10 + 16);
          v133 = *(_DWORD *)(v10 + 32);
          v131 = v37;
          v132 = v38;
          if (((*a3)(&v131, (__int128 *)v129) & 1) != 0)
          {
            do
              v10 += 36;
            while (((*a3)(&v131, (__int128 *)v10) & 1) == 0);
          }
          else
          {
            v39 = (__int128 *)(v10 + 36);
            do
            {
              v10 = (unint64_t)v39;
              if ((unint64_t)v39 >= v127)
                break;
              v40 = (*a3)(&v131, v39);
              v39 = (__int128 *)(v10 + 36);
            }
            while (!v40);
          }
          v41 = v127;
          if (v10 < v127)
          {
            v41 = v127;
            do
              v41 -= 36;
            while (((*a3)(&v131, (__int128 *)v41) & 1) != 0);
          }
          while (v10 < v41)
          {
            v42 = *(_OWORD *)v10;
            v43 = *(_OWORD *)(v10 + 16);
            v136 = *(_DWORD *)(v10 + 32);
            v134 = v42;
            v135 = v43;
            v44 = *(_OWORD *)v41;
            v45 = *(_OWORD *)(v41 + 16);
            *(_DWORD *)(v10 + 32) = *(_DWORD *)(v41 + 32);
            *(_OWORD *)v10 = v44;
            *(_OWORD *)(v10 + 16) = v45;
            v46 = v134;
            v47 = v135;
            *(_DWORD *)(v41 + 32) = v136;
            *(_OWORD *)v41 = v46;
            *(_OWORD *)(v41 + 16) = v47;
            do
              v10 += 36;
            while (!(*a3)(&v131, (__int128 *)v10));
            do
              v41 -= 36;
            while (((*a3)(&v131, (__int128 *)v41) & 1) != 0);
          }
          v48 = (__int128 *)(v10 - 36);
          if (v10 - 36 != a1)
          {
            v49 = *v48;
            v50 = *(_OWORD *)(v10 - 20);
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(v10 - 4);
            *(_OWORD *)a1 = v49;
            *(_OWORD *)(a1 + 16) = v50;
          }
          a5 = 0;
          v51 = v131;
          v52 = v132;
          *(_DWORD *)(v10 - 4) = v133;
          *v48 = v51;
          *(_OWORD *)(v10 - 20) = v52;
          continue;
        }
        v20 = *(_OWORD *)v10;
        v21 = *(_OWORD *)(v10 + 16);
        v133 = *(_DWORD *)(v10 + 32);
        v131 = v20;
        v132 = v21;
        v22 = (__int128 *)v10;
        do
        {
          v23 = (uint64_t)v22;
          v22 = (__int128 *)((char *)v22 + 36);
        }
        while (((*a3)(v22, &v131) & 1) != 0);
        v24 = (__int128 *)v127;
        if (v23 == v10)
        {
          v24 = (__int128 *)v127;
          do
          {
            if (v22 >= v24)
              break;
            v24 = (__int128 *)((char *)v24 - 36);
          }
          while (((*a3)(v24, &v131) & 1) == 0);
        }
        else
        {
          do
            v24 = (__int128 *)((char *)v24 - 36);
          while (!(*a3)(v24, &v131));
        }
        if (v22 < v24)
        {
          v25 = (unint64_t)v22;
          v26 = v24;
          do
          {
            v28 = *(_OWORD *)(v25 + 16);
            v134 = *(_OWORD *)v25;
            v27 = v134;
            v135 = v28;
            v136 = *(_DWORD *)(v25 + 32);
            v29 = v136;
            v31 = *v26;
            v30 = v26[1];
            *(_DWORD *)(v25 + 32) = *((_DWORD *)v26 + 8);
            *(_OWORD *)v25 = v31;
            *(_OWORD *)(v25 + 16) = v30;
            *((_DWORD *)v26 + 8) = v29;
            *v26 = v27;
            v26[1] = v28;
            do
            {
              v23 = v25;
              v25 += 36;
            }
            while (((*a3)((__int128 *)v25, &v131) & 1) != 0);
            do
              v26 = (__int128 *)((char *)v26 - 36);
            while (!(*a3)(v26, &v131));
          }
          while (v25 < (unint64_t)v26);
        }
        if (v23 != a1)
        {
          v32 = *(_OWORD *)v23;
          v33 = *(_OWORD *)(v23 + 16);
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(v23 + 32);
          *(_OWORD *)a1 = v32;
          *(_OWORD *)(a1 + 16) = v33;
        }
        v34 = v131;
        v35 = v132;
        *(_DWORD *)(v23 + 32) = v133;
        *(_OWORD *)v23 = v34;
        *(_OWORD *)(v23 + 16) = v35;
        if (v22 < v24)
        {
LABEL_30:
          std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*,false>(a1, v23, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v23 + 36;
          continue;
        }
        v36 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>(a1, v23, a3);
        v10 = v23 + 36;
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>(v23 + 36, v127, a3))
        {
          if (v36)
            continue;
          goto LABEL_30;
        }
        a2 = v23;
        if (!v36)
          goto LABEL_2;
        return;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t (**a4)(__int128 *, __int128 *))
{
  char v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  int v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;
  int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  int v28;
  __int128 v29;
  int v30;
  __int128 v31;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) != 0)
  {
    if ((_DWORD)result)
    {
      v10 = *a1;
      v11 = a1[1];
      v12 = *((_DWORD *)a1 + 8);
      v13 = *((_DWORD *)a3 + 8);
      v14 = a3[1];
      *a1 = *a3;
      a1[1] = v14;
      *((_DWORD *)a1 + 8) = v13;
    }
    else
    {
      v25 = *a1;
      v26 = a1[1];
      v27 = *((_DWORD *)a1 + 8);
      v28 = *((_DWORD *)a2 + 8);
      v29 = a2[1];
      *a1 = *a2;
      a1[1] = v29;
      *((_DWORD *)a1 + 8) = v28;
      *((_DWORD *)a2 + 8) = v27;
      *a2 = v25;
      a2[1] = v26;
      result = (*a4)(a3, a2);
      if (!(_DWORD)result)
        return result;
      v10 = *a2;
      v11 = a2[1];
      v12 = *((_DWORD *)a2 + 8);
      v30 = *((_DWORD *)a3 + 8);
      v31 = a3[1];
      *a2 = *a3;
      a2[1] = v31;
      *((_DWORD *)a2 + 8) = v30;
    }
    *((_DWORD *)a3 + 8) = v12;
    *a3 = v10;
    a3[1] = v11;
  }
  else if ((_DWORD)result)
  {
    v15 = *a2;
    v16 = a2[1];
    v17 = *((_DWORD *)a2 + 8);
    v18 = *((_DWORD *)a3 + 8);
    v19 = a3[1];
    *a2 = *a3;
    a2[1] = v19;
    *((_DWORD *)a2 + 8) = v18;
    *((_DWORD *)a3 + 8) = v17;
    *a3 = v15;
    a3[1] = v16;
    result = (*a4)(a2, a1);
    if ((_DWORD)result)
    {
      v20 = *a1;
      v21 = a1[1];
      v22 = *((_DWORD *)a1 + 8);
      v23 = *((_DWORD *)a2 + 8);
      v24 = a2[1];
      *a1 = *a2;
      a1[1] = v24;
      *((_DWORD *)a1 + 8) = v23;
      *((_DWORD *)a2 + 8) = v22;
      *a2 = v20;
      a2[1] = v21;
    }
  }
  return result;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(__int128 *, __int128 *))
{
  __n128 result;
  __int128 v11;
  __int128 v12;
  int v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  int v19;
  __int128 v20;
  __int128 v21;
  int v22;
  int v23;
  __int128 v24;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5);
  if ((*a5)((__int128 *)a4, (__int128 *)a3))
  {
    v11 = *(_OWORD *)a3;
    v12 = *(_OWORD *)(a3 + 16);
    v13 = *(_DWORD *)(a3 + 32);
    v14 = *(_DWORD *)(a4 + 32);
    v15 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v15;
    *(_DWORD *)(a3 + 32) = v14;
    *(_DWORD *)(a4 + 32) = v13;
    *(_OWORD *)a4 = v11;
    *(_OWORD *)(a4 + 16) = v12;
    if ((*a5)((__int128 *)a3, (__int128 *)a2))
    {
      v16 = *(_OWORD *)a2;
      v17 = *(_OWORD *)(a2 + 16);
      v18 = *(_DWORD *)(a2 + 32);
      v19 = *(_DWORD *)(a3 + 32);
      v20 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v20;
      *(_DWORD *)(a2 + 32) = v19;
      *(_DWORD *)(a3 + 32) = v18;
      *(_OWORD *)a3 = v16;
      *(_OWORD *)(a3 + 16) = v17;
      if ((*a5)((__int128 *)a2, (__int128 *)a1))
      {
        result = *(__n128 *)a1;
        v21 = *(_OWORD *)(a1 + 16);
        v22 = *(_DWORD *)(a1 + 32);
        v23 = *(_DWORD *)(a2 + 32);
        v24 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v24;
        *(_DWORD *)(a1 + 32) = v23;
        *(_DWORD *)(a2 + 32) = v22;
        *(__n128 *)a2 = result;
        *(_OWORD *)(a2 + 16) = v21;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(__int128 *, __int128 *))
{
  __n128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  int v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  int v22;
  __int128 v23;
  __n128 v24;
  __int128 v25;
  int v26;
  int v27;
  __int128 v28;
  __int128 v29;
  int v30;
  int v31;
  __int128 v32;

  v12 = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a6)(a5, a4, v12))
  {
    v14 = *(_OWORD *)a4;
    v15 = *(_OWORD *)(a4 + 16);
    v16 = *(_DWORD *)(a4 + 32);
    v17 = *(_DWORD *)(a5 + 32);
    v18 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v18;
    *(_DWORD *)(a4 + 32) = v17;
    *(_DWORD *)(a5 + 32) = v16;
    *(_OWORD *)a5 = v14;
    *(_OWORD *)(a5 + 16) = v15;
    if ((*a6)((__int128 *)a4, (__int128 *)a3))
    {
      v19 = *(_OWORD *)a3;
      v20 = *(_OWORD *)(a3 + 16);
      v21 = *(_DWORD *)(a3 + 32);
      v22 = *(_DWORD *)(a4 + 32);
      v23 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v23;
      *(_DWORD *)(a3 + 32) = v22;
      *(_DWORD *)(a4 + 32) = v21;
      *(_OWORD *)a4 = v19;
      *(_OWORD *)(a4 + 16) = v20;
      if ((*a6)((__int128 *)a3, (__int128 *)a2))
      {
        v24 = *(__n128 *)a2;
        v25 = *(_OWORD *)(a2 + 16);
        v26 = *(_DWORD *)(a2 + 32);
        v27 = *(_DWORD *)(a3 + 32);
        v28 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v28;
        *(_DWORD *)(a2 + 32) = v27;
        *(_DWORD *)(a3 + 32) = v26;
        *(__n128 *)a3 = v24;
        *(_OWORD *)(a3 + 16) = v25;
        if ((*a6)((__int128 *)a2, (__int128 *)a1))
        {
          result = *(__n128 *)a1;
          v29 = *(_OWORD *)(a1 + 16);
          v30 = *(_DWORD *)(a1 + 32);
          v31 = *(_DWORD *)(a2 + 32);
          v32 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v32;
          *(_DWORD *)(a1 + 32) = v31;
          *(_DWORD *)(a2 + 32) = v30;
          *(__n128 *)a2 = result;
          *(_OWORD *)(a2 + 16) = v29;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  unint64_t v6;
  _BOOL8 result;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  int v11;
  int v12;
  __int128 v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v6 = 0x8E38E38E38E38E39 * ((a2 - a1) >> 2);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = (__int128 *)(a2 - 36);
      if (!(*a3)((__int128 *)(a2 - 36), (__int128 *)a1))
        return 1;
      v9 = *(_OWORD *)a1;
      v10 = *(_OWORD *)(a1 + 16);
      v11 = *(_DWORD *)(a1 + 32);
      v12 = *(_DWORD *)(a2 - 4);
      v13 = *(_OWORD *)(a2 - 20);
      *(_OWORD *)a1 = *v8;
      *(_OWORD *)(a1 + 16) = v13;
      *(_DWORD *)(a1 + 32) = v12;
      *(_DWORD *)(a2 - 4) = v11;
      result = 1;
      *v8 = v9;
      *(_OWORD *)(a2 - 20) = v10;
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>((__int128 *)a1, (__int128 *)(a1 + 36), (__int128 *)(a2 - 36), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>(a1, a1 + 36, a1 + 72, a2 - 36, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>(a1, a1 + 36, a1 + 72, a1 + 108, a2 - 36, a3);
      return 1;
    default:
      v14 = (__int128 *)(a1 + 72);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>((__int128 *)a1, (__int128 *)(a1 + 36), (__int128 *)(a1 + 72), a3);
      v15 = a1 + 108;
      if (a1 + 108 == a2)
        return 1;
      v16 = 0;
      v17 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((__int128 *)v15, v14))
    {
      v18 = *(_OWORD *)(v15 + 16);
      v23 = *(_OWORD *)v15;
      v24 = v18;
      v25 = *(_DWORD *)(v15 + 32);
      v19 = v16;
      while (1)
      {
        v20 = a1 + v19;
        *(_OWORD *)(v20 + 108) = *(_OWORD *)(a1 + v19 + 72);
        *(_OWORD *)(v20 + 124) = *(_OWORD *)(a1 + v19 + 88);
        *(_DWORD *)(v20 + 140) = *(_DWORD *)(a1 + v19 + 104);
        if (v19 == -72)
          break;
        v19 -= 36;
        if (((*a3)(&v23, (__int128 *)(v20 + 36)) & 1) == 0)
        {
          v21 = a1 + v19 + 108;
          goto LABEL_12;
        }
      }
      v21 = a1;
LABEL_12:
      v22 = v24;
      *(_OWORD *)v21 = v23;
      *(_OWORD *)(v21 + 16) = v22;
      *(_DWORD *)(v21 + 32) = v25;
      if (++v17 == 8)
        return v15 + 36 == a2;
    }
    v14 = (__int128 *)v15;
    v16 += 36;
    v15 += 36;
    if (v15 == a2)
      return 1;
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>>>::__equal_range_multi<unsigned int>(_QWORD *a1, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t *result;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = ((_DWORD)v2 - 1) & a2;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v6)
    return 0;
  result = *v6;
  if (!*v6)
    return result;
  while (1)
  {
    v7 = result[1];
    if (v7 == a2)
      break;
    if (v3.u32[0] > 1uLL)
    {
      if (v7 >= v2)
        v7 %= v2;
    }
    else
    {
      v7 &= v2 - 1;
    }
    if (v7 != v4)
      return 0;
LABEL_17:
    result = (uint64_t *)*result;
    if (!result)
      return result;
  }
  if (*((_DWORD *)result + 4) != a2)
    goto LABEL_17;
  v8 = result;
  do
    v8 = (uint64_t *)*v8;
  while (v8 && *((_DWORD *)v8 + 4) == a2);
  return result;
}

void std::vector<std::vector<std::pair<unsigned short,unsigned short>>>::resize(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  void *v26;

  v4 = *(_QWORD **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *(_QWORD *)a1) >> 3);
  v6 = a2 - v5;
  if (a2 > v5)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v3) >> 3) >= v6)
    {
      bzero(*(void **)(a1 + 8), 24 * ((24 * v6 - 24) / 0x18) + 24);
      *(_QWORD *)(a1 + 8) = &v3[3 * ((24 * v6 - 24) / 0x18) + 3];
      return;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v4) >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= a2)
      v9 = a2;
    if (v8 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v11 = 3 * v10;
    v12 = (char *)operator new(24 * v10);
    v13 = &v12[24 * v5];
    v14 = &v12[8 * v11];
    v15 = 24 * ((24 * v6 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v3 == v4)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (!v3)
        return;
    }
    else
    {
      do
      {
        v17 = v13;
        *((_QWORD *)v13 - 1) = 0;
        v18 = *(_OWORD *)(v3 - 3);
        v3 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((_QWORD *)v17 - 1) = v3[2];
        *v3 = 0;
        v3[1] = 0;
        v3[2] = 0;
      }
      while (v3 != v4);
      v19 = *(_QWORD **)a1;
      v3 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v3 != v19)
      {
        v20 = v3;
        do
        {
          v22 = (void *)*(v20 - 3);
          v20 -= 3;
          v21 = v22;
          if (v22)
          {
            *(v3 - 2) = v21;
            operator delete(v21);
          }
          v3 = v20;
        }
        while (v20 != v19);
        v3 = v19;
      }
      if (!v3)
        return;
    }
    operator delete(v3);
    return;
  }
  if (a2 < v5)
  {
    v23 = &v4[3 * a2];
    if (v3 != v23)
    {
      v24 = *(_QWORD **)(a1 + 8);
      do
      {
        v26 = (void *)*(v24 - 3);
        v24 -= 3;
        v25 = v26;
        if (v26)
        {
          *(v3 - 2) = v25;
          operator delete(v25);
        }
        v3 = v24;
      }
      while (v24 != v23);
    }
    *(_QWORD *)(a1 + 8) = v23;
  }
}

char *select_prompt_from_prefix<std::vector<TAPFileBuilder::v2_tap_prompt_section_of_length_m const*>>(uint64_t *a1, uint64_t *a2, const void **a3, int a4)
{
  uint64_t *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  char *v13;
  int v14;
  const void *v15;
  size_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;

  if (a1 == a2)
    return 0;
  v6 = a1;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  do
  {
    v11 = *v6;
    if (*(_WORD *)(*v6 + 2))
    {
      v12 = 0;
      v13 = (char *)(v11 + 4);
      do
      {
        v14 = *((char *)a3 + 23);
        if (v14 >= 0)
          v15 = a3;
        else
          v15 = *a3;
        if (v14 >= 0)
          v16 = *((unsigned __int8 *)a3 + 23);
        else
          v16 = (size_t)a3[1];
        if (!memcmp(v13, v15, v16))
        {
          if (!a4)
            goto LABEL_38;
          if (v10 >= v9)
          {
            v17 = (v10 - v7) >> 3;
            v18 = v17 + 1;
            if ((unint64_t)(v17 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            if ((v9 - v7) >> 2 > v18)
              v18 = (v9 - v7) >> 2;
            if ((unint64_t)(v9 - v7) >= 0x7FFFFFFFFFFFFFF8)
              v19 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v19 = v18;
            if (v19)
            {
              if (v19 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v20 = (char *)operator new(8 * v19);
            }
            else
            {
              v20 = 0;
            }
            v21 = &v20[8 * v17];
            *(_QWORD *)v21 = v13;
            v10 = v21 + 8;
            while (v8 != v7)
            {
              v22 = *((_QWORD *)v8 - 1);
              v8 -= 8;
              *((_QWORD *)v21 - 1) = v22;
              v21 -= 8;
            }
            v9 = &v20[8 * v19];
            if (v7)
              operator delete(v7);
            v7 = v21;
          }
          else
          {
            *(_QWORD *)v10 = v13;
            v10 += 8;
          }
          v11 = *v6;
          v8 = v10;
        }
        v13 += 56;
        ++v12;
      }
      while (v12 < *(unsigned __int16 *)(v11 + 2));
    }
    ++v6;
  }
  while (v6 != a2);
  if (v10 != v7)
  {
    v13 = *(char **)&v7[8 * (rand() % (unint64_t)((v8 - v7) >> 3))];
LABEL_39:
    operator delete(v7);
    return v13;
  }
  v13 = 0;
LABEL_38:
  if (v7)
    goto LABEL_39;
  return v13;
}

void sub_1DEAB31A0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

BOOL TAPExtractor::detect_v2_match(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t *a5)
{
  _BOOL8 result;
  uint64_t v7;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  std::string::size_type v17;
  uint64_t v18;
  std::string::size_type size;
  uint64_t v20;
  int v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  int v25;
  void *v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  int v32;
  unsigned int v33;
  unint64_t v34;
  int v35;
  int v36;
  BOOL v37;
  BOOL v38;
  int v39;
  _BOOL4 v40;
  _BOOL4 v41;
  NSObject *v42;
  const char *v43;
  char *v44;
  NSObject *v45;
  int v46;
  char **v47;
  BOOL v48;
  unint64_t v49;
  uint64_t v50;
  std::string __p;
  std::string __dst;

  if (0x84BDA12F684BDA13 * ((a5[1] - *a5) >> 3) < a3 + (unint64_t)a2)
    return 0;
  v7 = a4;
  v11 = a2;
  if (a3)
  {
    v12 = a2;
    do
    {
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 256) + ((v12 >> 3) & 0x1FF8)) >> v12) & 1) != 0)
        return 0;
      ++v12;
    }
    while (a3 + a2 > (unsigned __int16)v12);
    if (2 * (_WORD)a3)
    {
      v13 = 0;
      v14 = 0;
      v50 = 2 * (a2 & 0x7FFF);
      v49 = (unsigned __int16)(2 * a3);
      while (1)
      {
        v7 = a4;
        std::string::basic_string[abi:ne180100](&__dst, (void *)(*(_QWORD *)(a1 + 384)+ *(_QWORD *)(*(_QWORD *)(a1 + 360) + 40)+ *(unsigned int *)(a4 + 28)+ *(_QWORD *)(a1 + 552) * v13), *(_QWORD *)(a1 + 552));
        v15 = v13 + v50;
        v16 = *(_QWORD *)(a1 + 504) + 24 * (v13 + v50);
        if (*(char *)(v16 + 23) < 0)
          v17 = *(_QWORD *)(v16 + 8);
        else
          v17 = *(unsigned __int8 *)(v16 + 23);
        std::string::resize(&__dst, v17, 0);
        v18 = *(_QWORD *)(a1 + 504) + 24 * v15;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        else
          size = __dst.__r_.__value_.__l.__size_;
        v20 = *(unsigned __int8 *)(v18 + 23);
        v21 = (char)v20;
        if ((v20 & 0x80u) != 0)
          v20 = *(_QWORD *)(v18 + 8);
        if (size != v20)
          break;
        if (v21 >= 0)
          v22 = (unsigned __int8 *)(*(_QWORD *)(a1 + 504) + 24 * v15);
        else
          v22 = *(unsigned __int8 **)v18;
        if ((*((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          v27 = (void *)__dst.__r_.__value_.__r.__words[0];
          v28 = memcmp(__dst.__r_.__value_.__l.__data_, v22, __dst.__r_.__value_.__l.__size_);
          operator delete(v27);
          if (v28)
            goto LABEL_34;
        }
        else if (*((_BYTE *)&__dst.__r_.__value_.__s + 23))
        {
          v23 = 0;
          do
          {
            v24 = __dst.__r_.__value_.__s.__data_[v23];
            v25 = v22[v23];
          }
          while (v24 == v25 && HIBYTE(__dst.__r_.__value_.__r.__words[2]) - 1 != v23++);
          if (v24 != v25)
          {
LABEL_34:
            v7 = a4;
            goto LABEL_37;
          }
        }
        v14 = ++v13 >= v49;
        if (v13 == v49)
          goto LABEL_34;
      }
      if ((*((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x80) != 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_37:
      if (!v14)
        return 0;
    }
  }
  v29 = *a5;
  do
    v30 = (unsigned __int16)v11;
  while (*(unsigned __int8 *)(v29 + 216 * (unsigned __int16)v11++ + 24));
  v32 = *(unsigned __int8 *)(v7 + 20);
  if (v32 != 7)
  {
    if (*(_DWORD *)(v29 + 216 * v30 + 156))
    {
      v36 = *(_DWORD *)(v29 + 216 * v30 + 180);
      *(_BYTE *)(a1 + 435) = v36 != 0;
      if (v36)
      {
        v37 = 0;
        v38 = 1;
      }
      else
      {
        v38 = *(_DWORD *)(v29 + 216 * v30 + 188) != 0;
        v37 = v38;
      }
      *(_BYTE *)(a1 + 436) = v37;
      switch(v32)
      {
        case 0:
          goto LABEL_42;
        case 1:
          if (!v36)
            return 0;
          goto LABEL_42;
        case 2:
          if (v37)
            goto LABEL_42;
          return 0;
        case 3:
          if (!v38)
            goto LABEL_42;
          return 0;
        case 4:
          if (v38)
            goto LABEL_42;
          return 0;
        case 6:
          if (!v36)
            goto LABEL_42;
          return 0;
        default:
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v42 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
          {
            LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
            _os_log_impl(&dword_1DE3F6000, v42, OS_LOG_TYPE_ERROR, "ERROR: INVALID START BOUNDARY CONDITION FOR TAP using phrase ", (uint8_t *)&__dst, 2u);
          }
          v44 = "ERROR: INVALID START BOUNDARY CONDITION FOR TAP using phrase ";
LABEL_83:
          Diagnostics::log(3, v44, v43, v49);
          return 0;
      }
    }
    return 0;
  }
  if (*(_BYTE *)(v29 + 216 * v30 - 192))
  {
LABEL_42:
    v33 = a3 + a2;
    do
      v34 = (unsigned __int16)--v33;
    while (*(_BYTE *)(v29 + 216 * (unsigned __int16)v33 + 24));
    v35 = *(unsigned __int8 *)(v7 + 21);
    if (v35 == 8)
      return *(_BYTE *)(v29 + 216 * v34 + 240) != 0;
    if (!*(_DWORD *)(v29 + 216 * v34 + 160) && !*(_BYTE *)(v29 + 216 * v34 + 240))
      return 0;
    if (*(_BYTE *)(a1 + 441))
    {
      v39 = *(_DWORD *)(v29 + 216 * v34 + 184);
      v40 = v39 != 0;
      *(_BYTE *)(a1 + 437) = v40;
      if (v39)
        v41 = 0;
      else
        v41 = *(_DWORD *)(v29 + 216 * v34 + 192) != 0;
      *(_BYTE *)(a1 + 438) = v41;
    }
    else
    {
      v41 = 0;
      v40 = 0x84BDA12F684BDA13 * ((a5[1] - v29) >> 3) - 2 <= v34;
      *(_WORD *)(a1 + 437) = v40;
    }
    result = 1;
    switch(v35)
    {
      case 0:
        return result;
      case 1:
        if (!v40)
          return 0;
        return result;
      case 2:
        if (!v41)
          return 0;
        return result;
      case 3:
        if (v40 || v41)
          return 0;
        return result;
      case 4:
        if (!v40 && !v41)
          return 0;
        return result;
      case 5:
        v46 = *(_DWORD *)(a1 + 560);
        std::string::basic_string[abi:ne180100]<0>(&__dst, (char *)(v7 + 16));
        memset(&__p, 0, sizeof(__p));
        TAPExtractor::v1_extract_utf8_character_from_string(0, 1, &__p, (uint64_t *)&__dst);
        v47 = (char **)SENTENCE_BOUNDARY_CHARACTERS();
        if (is_one_of(v47, (char *)&__p))
        {
          if (!*(_BYTE *)(a1 + 437))
          {
LABEL_94:
            v48 = 0;
            goto LABEL_100;
          }
          if ((v46 & 1) != 0)
          {
            if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "?"))
              goto LABEL_94;
          }
          else if (!std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "?"))
          {
            goto LABEL_94;
          }
          v48 = 1;
        }
        else
        {
          v48 = *(_BYTE *)(a1 + 438) != 0;
        }
LABEL_100:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return v48;
      case 6:
        if (v40)
          return 0;
        return result;
      default:
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v45 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1DE3F6000, v45, OS_LOG_TYPE_ERROR, "ERROR: INVALID END BOUNDARY CONDITION FOR TAP using phrase ", (uint8_t *)&__dst, 2u);
        }
        v44 = "ERROR: INVALID END BOUNDARY CONDITION FOR TAP using phrase ";
        goto LABEL_83;
    }
  }
  return 0;
}

void sub_1DEAB376C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

BOOL std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    if (v4 != *((unsigned __int8 *)a1 + 23))
      return 1;
    return memcmp(a1, __s, v4) != 0;
  }
  if (v4 == a1[1])
  {
    if (v4 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    a1 = (_QWORD *)*a1;
    return memcmp(a1, __s, v4) != 0;
  }
  return 1;
}

BOOL TAPExtractor::compare_v2_prompts_by_boundary_conditions(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = boundary_type_to_priority_[*(unsigned __int8 *)(a1 + 21)];
  v3 = boundary_type_to_priority_[*(unsigned __int8 *)(a2 + 21)];
  if (v2 > v3)
    return 1;
  return v2 == v3
      && boundary_type_to_priority_[*(unsigned __int8 *)(a1 + 20)] > boundary_type_to_priority_[*(unsigned __int8 *)(a2 + 20)];
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*,false>(uint64_t a1, unint64_t a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 *v27;
  uint64_t v28;
  __int128 *v29;
  unint64_t v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  BOOL v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 *v49;
  int v50;
  unint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 *v77;
  BOOL v79;
  uint64_t v80;
  unint64_t v81;
  __int128 *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  int64_t v93;
  int64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  int64_t v110;
  unint64_t v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 *v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 *v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  char v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 *v158;
  __int128 *v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  int64_t v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  uint64_t v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
LABEL_2:
  v160 = a2;
  v162 = a2 - 56;
  v158 = (__int128 *)(a2 - 168);
  v159 = (__int128 *)(a2 - 112);
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = a2 - v10;
    v12 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2 - v10) >> 3);
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)((__int128 *)v162, (__int128 *)v10))
        {
          v68 = *(_OWORD *)v10;
          v69 = *(_OWORD *)(v10 + 16);
          v70 = *(_OWORD *)(v10 + 32);
          v171 = *(_QWORD *)(v10 + 48);
          v169 = v69;
          v170 = v70;
          v168 = v68;
          v71 = *(_OWORD *)v162;
          v72 = *(_OWORD *)(v162 + 16);
          v73 = *(_OWORD *)(v162 + 32);
          *(_QWORD *)(v10 + 48) = *(_QWORD *)(v162 + 48);
          *(_OWORD *)(v10 + 16) = v72;
          *(_OWORD *)(v10 + 32) = v73;
          *(_OWORD *)v10 = v71;
          v74 = v168;
          v75 = v169;
          v76 = v170;
          *(_QWORD *)(v162 + 48) = v171;
          *(_OWORD *)(v162 + 16) = v75;
          *(_OWORD *)(v162 + 32) = v76;
          *(_OWORD *)v162 = v74;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>((__int128 *)v10, (__int128 *)(v10 + 56), (__int128 *)v162, a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>(v10, v10 + 56, v10 + 112, v162, a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>(v10, v10 + 56, v10 + 112, v10 + 168, (__int128 *)v162, a3);
        return;
      default:
        if (v11 <= 1343)
        {
          v77 = (__int128 *)(v10 + 56);
          v79 = v10 == a2 || v77 == (__int128 *)a2;
          if ((a5 & 1) != 0)
          {
            if (!v79)
            {
              v80 = 0;
              v81 = v10;
              do
              {
                v82 = (__int128 *)v81;
                v81 = (unint64_t)v77;
                if ((*a3)(v77, v82))
                {
                  v83 = *(_OWORD *)v81;
                  v84 = *(_OWORD *)(v81 + 16);
                  v85 = *(_OWORD *)(v81 + 32);
                  v171 = *(_QWORD *)(v81 + 48);
                  v169 = v84;
                  v170 = v85;
                  v168 = v83;
                  v86 = v80;
                  while (1)
                  {
                    v87 = v10 + v86;
                    v88 = *(_OWORD *)(v10 + v86 + 16);
                    *(_OWORD *)(v87 + 56) = *(_OWORD *)(v10 + v86);
                    *(_OWORD *)(v87 + 72) = v88;
                    *(_OWORD *)(v87 + 88) = *(_OWORD *)(v10 + v86 + 32);
                    *(_QWORD *)(v87 + 104) = *(_QWORD *)(v10 + v86 + 48);
                    if (!v86)
                      break;
                    v86 -= 56;
                    if (((*a3)(&v168, (__int128 *)(v86 + v10)) & 1) == 0)
                    {
                      v89 = v10 + v86 + 56;
                      goto LABEL_71;
                    }
                  }
                  v89 = v10;
LABEL_71:
                  v90 = v168;
                  v91 = v169;
                  v92 = v170;
                  *(_QWORD *)(v89 + 48) = v171;
                  *(_OWORD *)(v89 + 16) = v91;
                  *(_OWORD *)(v89 + 32) = v92;
                  *(_OWORD *)v89 = v90;
                  a2 = v160;
                }
                v77 = (__int128 *)(v81 + 56);
                v80 += 56;
              }
              while (v81 + 56 != a2);
            }
          }
          else if (!v79)
          {
            do
            {
              v147 = (__int128 *)a1;
              a1 = (uint64_t)v77;
              if ((*a3)(v77, v147))
              {
                v148 = *(_OWORD *)a1;
                v149 = *(_OWORD *)(a1 + 16);
                v150 = *(_OWORD *)(a1 + 32);
                v171 = *(_QWORD *)(a1 + 48);
                v169 = v149;
                v170 = v150;
                v168 = v148;
                v151 = a1;
                do
                {
                  v152 = v151 - 56;
                  v153 = *(_OWORD *)(v151 - 40);
                  *(_OWORD *)v151 = *(_OWORD *)(v151 - 56);
                  *(_OWORD *)(v151 + 16) = v153;
                  *(_OWORD *)(v151 + 32) = *(_OWORD *)(v151 - 24);
                  *(_QWORD *)(v151 + 48) = *(_QWORD *)(v151 - 8);
                  v154 = (*a3)(&v168, (__int128 *)(v151 - 112));
                  v151 = v152;
                }
                while ((v154 & 1) != 0);
                v155 = v168;
                v156 = v169;
                v157 = v170;
                *(_QWORD *)(v152 + 48) = v171;
                *(_OWORD *)(v152 + 16) = v156;
                *(_OWORD *)(v152 + 32) = v157;
                *(_OWORD *)v152 = v155;
              }
              v77 = (__int128 *)(a1 + 56);
            }
            while (a1 + 56 != a2);
          }
          return;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v93 = (v12 - 2) >> 1;
            v163 = v93;
            do
            {
              v94 = v93;
              if (v163 >= v93)
              {
                v95 = (2 * v93) | 1;
                v96 = a1 + 56 * v95;
                if (2 * v93 + 2 < (uint64_t)v12
                  && (*a3)((__int128 *)(a1 + 56 * v95), (__int128 *)(v96 + 56)))
                {
                  v96 += 56;
                  v95 = 2 * v94 + 2;
                }
                v97 = a1 + 56 * v94;
                if (((*a3)((__int128 *)v96, (__int128 *)v97) & 1) == 0)
                {
                  v98 = *(_OWORD *)v97;
                  v99 = *(_OWORD *)(v97 + 16);
                  v100 = *(_OWORD *)(v97 + 32);
                  v171 = *(_QWORD *)(v97 + 48);
                  v169 = v99;
                  v170 = v100;
                  v168 = v98;
                  do
                  {
                    v101 = v96;
                    v102 = *(_OWORD *)v96;
                    v103 = *(_OWORD *)(v96 + 16);
                    v104 = *(_OWORD *)(v96 + 32);
                    *(_QWORD *)(v97 + 48) = *(_QWORD *)(v96 + 48);
                    *(_OWORD *)(v97 + 16) = v103;
                    *(_OWORD *)(v97 + 32) = v104;
                    *(_OWORD *)v97 = v102;
                    if (v163 < v95)
                      break;
                    v105 = (2 * v95) | 1;
                    v96 = a1 + 56 * v105;
                    v106 = 2 * v95 + 2;
                    if (v106 < (uint64_t)v12
                      && (*a3)((__int128 *)(a1 + 56 * v105), (__int128 *)(v96 + 56)))
                    {
                      v96 += 56;
                      v105 = v106;
                    }
                    v97 = v101;
                    v95 = v105;
                  }
                  while (!(*a3)((__int128 *)v96, &v168));
                  v107 = v168;
                  v108 = v169;
                  v109 = v170;
                  *(_QWORD *)(v101 + 48) = v171;
                  *(_OWORD *)(v101 + 16) = v108;
                  *(_OWORD *)(v101 + 32) = v109;
                  *(_OWORD *)v101 = v107;
                }
              }
              v93 = v94 - 1;
            }
            while (v94);
            v110 = v11 / 0x38uLL;
            v111 = v160;
            do
            {
              v161 = v111;
              v112 = 0;
              v113 = *(_OWORD *)a1;
              v114 = *(_OWORD *)(a1 + 16);
              v115 = *(_OWORD *)(a1 + 32);
              v167 = *(_QWORD *)(a1 + 48);
              v165 = v114;
              v166 = v115;
              v164 = v113;
              v116 = a1;
              do
              {
                v117 = v116 + 56 * v112 + 56;
                v118 = (2 * v112) | 1;
                v119 = 2 * v112 + 2;
                if (v119 < v110
                  && (*a3)((__int128 *)(v116 + 56 * v112 + 56), (__int128 *)(v116 + 56 * v112 + 112)))
                {
                  v117 += 56;
                  v118 = v119;
                }
                v120 = *(_OWORD *)v117;
                v121 = *(_OWORD *)(v117 + 16);
                v122 = *(_OWORD *)(v117 + 32);
                *(_QWORD *)(v116 + 48) = *(_QWORD *)(v117 + 48);
                *(_OWORD *)(v116 + 16) = v121;
                *(_OWORD *)(v116 + 32) = v122;
                *(_OWORD *)v116 = v120;
                v116 = v117;
                v112 = v118;
              }
              while (v118 <= (uint64_t)((unint64_t)(v110 - 2) >> 1));
              v123 = (__int128 *)(v161 - 56);
              if (v117 == v161 - 56)
              {
                v111 = v161 - 56;
                v143 = v164;
                v144 = v165;
                v145 = v166;
                *(_QWORD *)(v117 + 48) = v167;
                *(_OWORD *)(v117 + 16) = v144;
                *(_OWORD *)(v117 + 32) = v145;
                *(_OWORD *)v117 = v143;
              }
              else
              {
                v124 = *v123;
                v125 = *(_OWORD *)(v161 - 40);
                v126 = *(_OWORD *)(v161 - 24);
                *(_QWORD *)(v117 + 48) = *(_QWORD *)(v161 - 8);
                *(_OWORD *)(v117 + 16) = v125;
                *(_OWORD *)(v117 + 32) = v126;
                *(_OWORD *)v117 = v124;
                v127 = v164;
                v128 = v165;
                v129 = v166;
                *(_QWORD *)(v161 - 8) = v167;
                *(_OWORD *)(v161 - 40) = v128;
                *(_OWORD *)(v161 - 24) = v129;
                v111 = v161 - 56;
                *v123 = v127;
                v130 = v117 - a1 + 56;
                if (v130 >= 57)
                {
                  v131 = (unint64_t)(0x6DB6DB6DB6DB6DB7 * (v130 >> 3) - 2) >> 1;
                  v132 = a1 + 56 * v131;
                  if ((*a3)((__int128 *)v132, (__int128 *)v117))
                  {
                    v133 = *(_OWORD *)v117;
                    v134 = *(_OWORD *)(v117 + 16);
                    v135 = *(_OWORD *)(v117 + 32);
                    v171 = *(_QWORD *)(v117 + 48);
                    v169 = v134;
                    v170 = v135;
                    v168 = v133;
                    do
                    {
                      v136 = v132;
                      v137 = *(_OWORD *)v132;
                      v138 = *(_OWORD *)(v132 + 16);
                      v139 = *(_OWORD *)(v132 + 32);
                      *(_QWORD *)(v117 + 48) = *(_QWORD *)(v132 + 48);
                      *(_OWORD *)(v117 + 16) = v138;
                      *(_OWORD *)(v117 + 32) = v139;
                      *(_OWORD *)v117 = v137;
                      if (!v131)
                        break;
                      v131 = (v131 - 1) >> 1;
                      v132 = a1 + 56 * v131;
                      v117 = v136;
                    }
                    while (((*a3)((__int128 *)v132, &v168) & 1) != 0);
                    v140 = v168;
                    v141 = v169;
                    v142 = v170;
                    *(_QWORD *)(v136 + 48) = v171;
                    *(_OWORD *)(v136 + 16) = v141;
                    *(_OWORD *)(v136 + 32) = v142;
                    *(_OWORD *)v136 = v140;
                  }
                }
              }
            }
            while (v110-- > 2);
          }
          return;
        }
        v13 = v10 + 56 * (v12 >> 1);
        if ((unint64_t)v11 < 0x1C01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>((__int128 *)(v10 + 56 * (v12 >> 1)), (__int128 *)v10, (__int128 *)v162, a3);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>((__int128 *)v10, (__int128 *)(v10 + 56 * (v12 >> 1)), (__int128 *)v162, a3);
          v14 = 56 * (v12 >> 1);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>((__int128 *)(v10 + 56), (__int128 *)(v14 + v10 - 56), v159, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>((__int128 *)(v10 + 112), (__int128 *)(v10 + 56 + v14), v158, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>((__int128 *)(v14 + v10 - 56), (__int128 *)(v10 + v14), (__int128 *)(v10 + 56 + v14), a3);
          v15 = *(_OWORD *)v10;
          v16 = *(_OWORD *)(v10 + 16);
          v17 = *(_OWORD *)(v10 + 32);
          v171 = *(_QWORD *)(v10 + 48);
          v169 = v16;
          v170 = v17;
          v168 = v15;
          v18 = *(_OWORD *)v13;
          v19 = *(_OWORD *)(v13 + 16);
          v20 = *(_OWORD *)(v13 + 32);
          *(_QWORD *)(v10 + 48) = *(_QWORD *)(v13 + 48);
          *(_OWORD *)(v10 + 16) = v19;
          *(_OWORD *)(v10 + 32) = v20;
          *(_OWORD *)v10 = v18;
          v21 = v168;
          v22 = v169;
          v23 = v170;
          *(_QWORD *)(v13 + 48) = v171;
          *(_OWORD *)(v13 + 16) = v22;
          *(_OWORD *)(v13 + 32) = v23;
          *(_OWORD *)v13 = v21;
        }
        --a4;
        a2 = v160;
        if ((a5 & 1) == 0 && ((*a3)((__int128 *)(v10 - 56), (__int128 *)v10) & 1) == 0)
        {
          v46 = *(_OWORD *)v10;
          v47 = *(_OWORD *)(v10 + 16);
          v48 = *(_OWORD *)(v10 + 32);
          v167 = *(_QWORD *)(v10 + 48);
          v165 = v47;
          v166 = v48;
          v164 = v46;
          if (((*a3)(&v164, (__int128 *)v162) & 1) != 0)
          {
            do
              v10 += 56;
            while (((*a3)(&v164, (__int128 *)v10) & 1) == 0);
          }
          else
          {
            v49 = (__int128 *)(v10 + 56);
            do
            {
              v10 = (unint64_t)v49;
              if ((unint64_t)v49 >= v160)
                break;
              v50 = (*a3)(&v164, v49);
              v49 = (__int128 *)(v10 + 56);
            }
            while (!v50);
          }
          v51 = v160;
          if (v10 < v160)
          {
            v51 = v160;
            do
              v51 -= 56;
            while (((*a3)(&v164, (__int128 *)v51) & 1) != 0);
          }
          while (v10 < v51)
          {
            v52 = *(_OWORD *)v10;
            v53 = *(_OWORD *)(v10 + 16);
            v54 = *(_OWORD *)(v10 + 32);
            v171 = *(_QWORD *)(v10 + 48);
            v169 = v53;
            v170 = v54;
            v168 = v52;
            v55 = *(_OWORD *)v51;
            v56 = *(_OWORD *)(v51 + 16);
            v57 = *(_OWORD *)(v51 + 32);
            *(_QWORD *)(v10 + 48) = *(_QWORD *)(v51 + 48);
            *(_OWORD *)(v10 + 16) = v56;
            *(_OWORD *)(v10 + 32) = v57;
            *(_OWORD *)v10 = v55;
            v58 = v168;
            v59 = v169;
            v60 = v170;
            *(_QWORD *)(v51 + 48) = v171;
            *(_OWORD *)(v51 + 16) = v59;
            *(_OWORD *)(v51 + 32) = v60;
            *(_OWORD *)v51 = v58;
            do
              v10 += 56;
            while (!(*a3)(&v164, (__int128 *)v10));
            do
              v51 -= 56;
            while (((*a3)(&v164, (__int128 *)v51) & 1) != 0);
          }
          v61 = (__int128 *)(v10 - 56);
          if (v10 - 56 != a1)
          {
            v62 = *v61;
            v63 = *(_OWORD *)(v10 - 40);
            v64 = *(_OWORD *)(v10 - 24);
            *(_QWORD *)(a1 + 48) = *(_QWORD *)(v10 - 8);
            *(_OWORD *)(a1 + 16) = v63;
            *(_OWORD *)(a1 + 32) = v64;
            *(_OWORD *)a1 = v62;
          }
          a5 = 0;
          v65 = v164;
          v66 = v165;
          v67 = v166;
          *(_QWORD *)(v10 - 8) = v167;
          *(_OWORD *)(v10 - 40) = v66;
          *(_OWORD *)(v10 - 24) = v67;
          *v61 = v65;
          continue;
        }
        v24 = *(_OWORD *)v10;
        v25 = *(_OWORD *)(v10 + 16);
        v26 = *(_OWORD *)(v10 + 32);
        v167 = *(_QWORD *)(v10 + 48);
        v165 = v25;
        v166 = v26;
        v164 = v24;
        v27 = (__int128 *)v10;
        do
        {
          v28 = (uint64_t)v27;
          v27 = (__int128 *)((char *)v27 + 56);
        }
        while (((*a3)(v27, &v164) & 1) != 0);
        v29 = (__int128 *)v160;
        if (v28 == v10)
        {
          v29 = (__int128 *)v160;
          do
          {
            if (v27 >= v29)
              break;
            v29 = (__int128 *)((char *)v29 - 56);
          }
          while (((*a3)(v29, &v164) & 1) == 0);
        }
        else
        {
          do
            v29 = (__int128 *)((char *)v29 - 56);
          while (!(*a3)(v29, &v164));
        }
        if (v27 < v29)
        {
          v30 = (unint64_t)v27;
          v31 = v29;
          do
          {
            v33 = *(_OWORD *)(v30 + 16);
            v168 = *(_OWORD *)v30;
            v32 = v168;
            v169 = v33;
            v170 = *(_OWORD *)(v30 + 32);
            v34 = v170;
            v171 = *(_QWORD *)(v30 + 48);
            v35 = v171;
            v36 = *((_QWORD *)v31 + 6);
            v38 = v31[1];
            v37 = v31[2];
            *(_OWORD *)v30 = *v31;
            *(_OWORD *)(v30 + 16) = v38;
            *(_OWORD *)(v30 + 32) = v37;
            *(_QWORD *)(v30 + 48) = v36;
            v31[1] = v33;
            v31[2] = v34;
            *((_QWORD *)v31 + 6) = v35;
            *v31 = v32;
            do
            {
              v28 = v30;
              v30 += 56;
            }
            while (((*a3)((__int128 *)v30, &v164) & 1) != 0);
            do
              v31 = (__int128 *)((char *)v31 - 56);
            while (!(*a3)(v31, &v164));
          }
          while (v30 < (unint64_t)v31);
        }
        if (v28 != a1)
        {
          v39 = *(_OWORD *)v28;
          v40 = *(_OWORD *)(v28 + 16);
          v41 = *(_OWORD *)(v28 + 32);
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(v28 + 48);
          *(_OWORD *)(a1 + 16) = v40;
          *(_OWORD *)(a1 + 32) = v41;
          *(_OWORD *)a1 = v39;
        }
        v42 = v164;
        v43 = v165;
        v44 = v166;
        *(_QWORD *)(v28 + 48) = v167;
        *(_OWORD *)(v28 + 16) = v43;
        *(_OWORD *)(v28 + 32) = v44;
        *(_OWORD *)v28 = v42;
        if (v27 < v29)
        {
LABEL_30:
          std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*,false>(a1, v28, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v28 + 56;
          continue;
        }
        v45 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>(a1, v28, a3);
        v10 = v28 + 56;
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>(v28 + 56, v160, a3))
        {
          if (v45)
            continue;
          goto LABEL_30;
        }
        a2 = v28;
        if (!v45)
          goto LABEL_2;
        return;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t (**a4)(__int128 *, __int128 *))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) != 0)
  {
    if ((_DWORD)result)
    {
      v10 = *((_QWORD *)a1 + 6);
      v12 = a1[1];
      v11 = a1[2];
      v13 = *a1;
      v15 = a3[1];
      v14 = a3[2];
      v16 = *a3;
      *((_QWORD *)a1 + 6) = *((_QWORD *)a3 + 6);
      a1[1] = v15;
      a1[2] = v14;
      *a1 = v16;
    }
    else
    {
      v31 = *((_QWORD *)a1 + 6);
      v33 = a1[1];
      v32 = a1[2];
      v34 = *a1;
      v36 = a2[1];
      v35 = a2[2];
      v37 = *a2;
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      a1[1] = v36;
      a1[2] = v35;
      *a1 = v37;
      *a2 = v34;
      a2[1] = v33;
      a2[2] = v32;
      *((_QWORD *)a2 + 6) = v31;
      result = (*a4)(a3, a2);
      if (!(_DWORD)result)
        return result;
      v10 = *((_QWORD *)a2 + 6);
      v12 = a2[1];
      v11 = a2[2];
      v13 = *a2;
      v39 = a3[1];
      v38 = a3[2];
      v40 = *a3;
      *((_QWORD *)a2 + 6) = *((_QWORD *)a3 + 6);
      a2[1] = v39;
      a2[2] = v38;
      *a2 = v40;
    }
    *a3 = v13;
    a3[1] = v12;
    a3[2] = v11;
    *((_QWORD *)a3 + 6) = v10;
  }
  else if ((_DWORD)result)
  {
    v17 = *((_QWORD *)a2 + 6);
    v19 = a2[1];
    v18 = a2[2];
    v20 = *a2;
    v22 = a3[1];
    v21 = a3[2];
    v23 = *a3;
    *((_QWORD *)a2 + 6) = *((_QWORD *)a3 + 6);
    a2[1] = v22;
    a2[2] = v21;
    *a2 = v23;
    *a3 = v20;
    a3[1] = v19;
    a3[2] = v18;
    *((_QWORD *)a3 + 6) = v17;
    result = (*a4)(a2, a1);
    if ((_DWORD)result)
    {
      v24 = *((_QWORD *)a1 + 6);
      v26 = a1[1];
      v25 = a1[2];
      v27 = *a1;
      v29 = a2[1];
      v28 = a2[2];
      v30 = *a2;
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      a1[1] = v29;
      a1[2] = v28;
      *a1 = v30;
      *a2 = v27;
      a2[1] = v26;
      a2[2] = v25;
      *((_QWORD *)a2 + 6) = v24;
    }
  }
  return result;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(__int128 *, __int128 *))
{
  __n128 result;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5);
  if ((*a5)((__int128 *)a4, (__int128 *)a3))
  {
    v11 = *(_QWORD *)(a3 + 48);
    v13 = *(_OWORD *)(a3 + 16);
    v12 = *(_OWORD *)(a3 + 32);
    v14 = *(_OWORD *)a3;
    v16 = *(_OWORD *)(a4 + 16);
    v15 = *(_OWORD *)(a4 + 32);
    v17 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 48) = *(_QWORD *)(a4 + 48);
    *(_OWORD *)(a3 + 16) = v16;
    *(_OWORD *)(a3 + 32) = v15;
    *(_OWORD *)a3 = v17;
    *(_OWORD *)a4 = v14;
    *(_OWORD *)(a4 + 16) = v13;
    *(_OWORD *)(a4 + 32) = v12;
    *(_QWORD *)(a4 + 48) = v11;
    if ((*a5)((__int128 *)a3, (__int128 *)a2))
    {
      v18 = *(_QWORD *)(a2 + 48);
      v20 = *(_OWORD *)(a2 + 16);
      v19 = *(_OWORD *)(a2 + 32);
      v21 = *(_OWORD *)a2;
      v23 = *(_OWORD *)(a3 + 16);
      v22 = *(_OWORD *)(a3 + 32);
      v24 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 16) = v23;
      *(_OWORD *)(a2 + 32) = v22;
      *(_OWORD *)a2 = v24;
      *(_OWORD *)a3 = v21;
      *(_OWORD *)(a3 + 16) = v20;
      *(_OWORD *)(a3 + 32) = v19;
      *(_QWORD *)(a3 + 48) = v18;
      if ((*a5)((__int128 *)a2, (__int128 *)a1))
      {
        v25 = *(_QWORD *)(a1 + 48);
        v26 = *(_OWORD *)(a1 + 16);
        result = *(__n128 *)(a1 + 32);
        v27 = *(_OWORD *)a1;
        v29 = *(_OWORD *)(a2 + 16);
        v28 = *(_OWORD *)(a2 + 32);
        v30 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 16) = v29;
        *(_OWORD *)(a1 + 32) = v28;
        *(_OWORD *)a1 = v30;
        *(_OWORD *)a2 = v27;
        *(_OWORD *)(a2 + 16) = v26;
        *(__n128 *)(a2 + 32) = result;
        *(_QWORD *)(a2 + 48) = v25;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t (**a6)(__int128 *, __int128 *))
{
  __n128 v12;
  __n128 result;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  v12 = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(__int128 *, uint64_t, __n128))*a6)(a5, a4, v12))
  {
    v14 = *(_QWORD *)(a4 + 48);
    v16 = *(_OWORD *)(a4 + 16);
    v15 = *(_OWORD *)(a4 + 32);
    v17 = *(_OWORD *)a4;
    v19 = a5[1];
    v18 = a5[2];
    v20 = *a5;
    *(_QWORD *)(a4 + 48) = *((_QWORD *)a5 + 6);
    *(_OWORD *)(a4 + 16) = v19;
    *(_OWORD *)(a4 + 32) = v18;
    *(_OWORD *)a4 = v20;
    *a5 = v17;
    a5[1] = v16;
    a5[2] = v15;
    *((_QWORD *)a5 + 6) = v14;
    if ((*a6)((__int128 *)a4, (__int128 *)a3))
    {
      v21 = *(_QWORD *)(a3 + 48);
      v23 = *(_OWORD *)(a3 + 16);
      v22 = *(_OWORD *)(a3 + 32);
      v24 = *(_OWORD *)a3;
      v26 = *(_OWORD *)(a4 + 16);
      v25 = *(_OWORD *)(a4 + 32);
      v27 = *(_OWORD *)a4;
      *(_QWORD *)(a3 + 48) = *(_QWORD *)(a4 + 48);
      *(_OWORD *)(a3 + 16) = v26;
      *(_OWORD *)(a3 + 32) = v25;
      *(_OWORD *)a3 = v27;
      *(_OWORD *)a4 = v24;
      *(_OWORD *)(a4 + 16) = v23;
      *(_OWORD *)(a4 + 32) = v22;
      *(_QWORD *)(a4 + 48) = v21;
      if ((*a6)((__int128 *)a3, (__int128 *)a2))
      {
        v28 = *(_QWORD *)(a2 + 48);
        v30 = *(_OWORD *)(a2 + 16);
        v29 = *(_OWORD *)(a2 + 32);
        v31 = *(_OWORD *)a2;
        v33 = *(_OWORD *)(a3 + 16);
        v32 = *(_OWORD *)(a3 + 32);
        v34 = *(_OWORD *)a3;
        *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
        *(_OWORD *)(a2 + 16) = v33;
        *(_OWORD *)(a2 + 32) = v32;
        *(_OWORD *)a2 = v34;
        *(_OWORD *)a3 = v31;
        *(_OWORD *)(a3 + 16) = v30;
        *(_OWORD *)(a3 + 32) = v29;
        *(_QWORD *)(a3 + 48) = v28;
        if ((*a6)((__int128 *)a2, (__int128 *)a1))
        {
          v35 = *(_QWORD *)(a1 + 48);
          v36 = *(_OWORD *)(a1 + 16);
          result = *(__n128 *)(a1 + 32);
          v37 = *(_OWORD *)a1;
          v39 = *(_OWORD *)(a2 + 16);
          v38 = *(_OWORD *)(a2 + 32);
          v40 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
          *(_OWORD *)(a1 + 16) = v39;
          *(_OWORD *)(a1 + 32) = v38;
          *(_OWORD *)a1 = v40;
          *(_OWORD *)a2 = v37;
          *(_OWORD *)(a2 + 16) = v36;
          *(__n128 *)(a2 + 32) = result;
          *(_QWORD *)(a2 + 48) = v35;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  uint64_t v6;
  _BOOL8 result;
  __int128 *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v6 = 0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = (__int128 *)(a2 - 56);
      if (!(*a3)((__int128 *)(a2 - 56), (__int128 *)a1))
        return 1;
      v9 = *(_QWORD *)(a1 + 48);
      v11 = *(_OWORD *)(a1 + 16);
      v10 = *(_OWORD *)(a1 + 32);
      v12 = *(_OWORD *)a1;
      v14 = *(_OWORD *)(a2 - 40);
      v13 = *(_OWORD *)(a2 - 24);
      v15 = *v8;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 - 8);
      *(_OWORD *)(a1 + 16) = v14;
      *(_OWORD *)(a1 + 32) = v13;
      *(_OWORD *)a1 = v15;
      *v8 = v12;
      *(_OWORD *)(a2 - 40) = v11;
      *(_OWORD *)(a2 - 24) = v10;
      result = 1;
      *(_QWORD *)(a2 - 8) = v9;
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>((__int128 *)a1, (__int128 *)(a1 + 56), (__int128 *)(a2 - 56), a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>(a1, a1 + 56, a1 + 112, a2 - 56, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>(a1, a1 + 56, a1 + 112, a1 + 168, (__int128 *)(a2 - 56), a3);
      return 1;
    default:
      v16 = (__int128 *)(a1 + 112);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>((__int128 *)a1, (__int128 *)(a1 + 56), (__int128 *)(a1 + 112), a3);
      v17 = a1 + 168;
      if (a1 + 168 == a2)
        return 1;
      v18 = 0;
      v19 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((__int128 *)v17, v16))
    {
      v20 = *(_OWORD *)(v17 + 16);
      v26 = *(_OWORD *)v17;
      v27 = v20;
      v28 = *(_OWORD *)(v17 + 32);
      v29 = *(_QWORD *)(v17 + 48);
      v21 = v18;
      while (1)
      {
        v22 = a1 + v21;
        v23 = *(_OWORD *)(a1 + v21 + 128);
        *(_OWORD *)(v22 + 168) = *(_OWORD *)(a1 + v21 + 112);
        *(_OWORD *)(v22 + 184) = v23;
        *(_OWORD *)(v22 + 200) = *(_OWORD *)(a1 + v21 + 144);
        *(_QWORD *)(v22 + 216) = *(_QWORD *)(a1 + v21 + 160);
        if (v21 == -112)
          break;
        v21 -= 56;
        if (((*a3)(&v26, (__int128 *)(v22 + 56)) & 1) == 0)
        {
          v24 = a1 + v21 + 168;
          goto LABEL_12;
        }
      }
      v24 = a1;
LABEL_12:
      v25 = v27;
      *(_OWORD *)v24 = v26;
      *(_OWORD *)(v24 + 16) = v25;
      *(_OWORD *)(v24 + 32) = v28;
      *(_QWORD *)(v24 + 48) = v29;
      if (++v19 == 8)
        return v17 + 56 == a2;
    }
    v16 = (__int128 *)v17;
    v18 += 56;
    v17 += 56;
    if (v17 == a2)
      return 1;
  }
}

uint64_t std::__tree<std::__value_type<std::string,Emotion>,std::__map_value_compare<std::string,std::__value_type<std::string,Emotion>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Emotion>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(char **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((char *)v2);
  }
  return a1;
}

void std::vector<std::vector<std::vector<std::pair<unsigned short,unsigned short>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unordered_multimap<unsigned int,std::pair<unsigned short,unsigned short>>>::resize(char **a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  _DWORD *v13;
  unint64_t v14;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;

  v2 = *a1;
  v3 = a1[1];
  v4 = v3 - *a1;
  v5 = 0xCCCCCCCCCCCCCCCDLL * (v4 >> 3);
  if (v5 > 7)
  {
    if (v4 != 320)
    {
      v28 = v2 + 320;
      while (v3 != v28)
      {
        v3 -= 40;
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v3);
      }
      a1[1] = v28;
    }
  }
  else
  {
    v6 = a1[2];
    if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v3) >> 3) >= 8 - v5)
    {
      v29 = &v3[40 * (8 - v5)];
      do
      {
        *(_OWORD *)v3 = 0uLL;
        *((_OWORD *)v3 + 1) = 0uLL;
        *((_DWORD *)v3 + 8) = 1065353216;
        v3 += 40;
      }
      while (v3 != v29);
      a1[1] = v29;
    }
    else
    {
      v7 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - v2) >> 3);
      v8 = 2 * v7;
      if (2 * v7 <= 8)
        v8 = 8;
      if (v7 >= 0x333333333333333)
        v9 = 0x666666666666666;
      else
        v9 = v8;
      if (v9 > 0x666666666666666)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v10 = (char *)operator new(40 * v9);
      v11 = &v10[40 * v5];
      v12 = v10 + 320;
      v13 = v11 + 32;
      v14 = v5 - 8;
      do
      {
        *((_OWORD *)v13 - 2) = 0uLL;
        *((_OWORD *)v13 - 1) = 0uLL;
        *v13 = 1065353216;
        v13 += 10;
      }
      while (!__CFADD__(v14++, 1));
      v16 = &v10[40 * v9];
      v17 = *a1;
      if (v3 != *a1)
      {
        v18 = 0;
        do
        {
          v19 = &v11[v18];
          v20 = &v3[v18];
          v21 = *(_QWORD *)&v3[v18 - 40];
          *((_QWORD *)v20 - 5) = 0;
          *((_QWORD *)v19 - 5) = v21;
          v22 = *(_QWORD *)&v3[v18 - 32];
          *((_QWORD *)v19 - 4) = v22;
          *((_QWORD *)v20 - 4) = 0;
          v23 = *(_QWORD *)&v3[v18 - 24];
          *((_QWORD *)v19 - 3) = v23;
          v24 = (uint64_t)&v11[v18 - 24];
          v25 = *(_QWORD *)&v3[v18 - 16];
          *(_QWORD *)(v24 + 8) = v25;
          *(_DWORD *)(v24 + 16) = *(_DWORD *)&v3[v18 - 8];
          if (v25)
          {
            v26 = *(_QWORD *)(v23 + 8);
            if ((v22 & (v22 - 1)) != 0)
            {
              if (v26 >= v22)
                v26 %= v22;
            }
            else
            {
              v26 &= v22 - 1;
            }
            *(_QWORD *)(v21 + 8 * v26) = v24;
            *(_QWORD *)&v3[v18 - 24] = 0;
            *(_QWORD *)&v3[v18 - 16] = 0;
          }
          v18 -= 40;
        }
        while (&v3[v18] != v17);
        v11 += v18;
        v3 = *a1;
      }
      v27 = (uint64_t)a1[1];
      *a1 = v11;
      a1[1] = v12;
      a1[2] = v16;
      while ((char *)v27 != v3)
        v27 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v27 - 40);
      if (v3)
        operator delete(v3);
    }
  }
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>>>::__emplace_multi<std::pair<unsigned int,std::pair<unsigned short,unsigned short>> &>(uint64_t a1, double a2)
{
  double *v3;
  unint64_t v4;
  float v5;
  float v6;
  _BOOL8 v7;
  unint64_t v8;
  unint64_t v9;
  int8x8_t prime;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t **v14;
  unint64_t v15;
  uint8x8_t v16;
  unint64_t v17;
  uint8x8_t v18;
  uint64_t v19;
  uint64_t *i;
  unint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint8x8_t v24;
  unint64_t v25;
  _QWORD *v26;
  double **v27;
  int v28;
  double **v29;
  unint64_t v30;
  unint64_t v31;
  _BOOL4 v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;

  v3 = (double *)operator new(0x18uLL);
  v3[2] = a2;
  *v3 = 0.0;
  *((_QWORD *)v3 + 1) = LODWORD(a2);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v6 = *(float *)(a1 + 32);
  if (!v4 || (float)(v6 * (float)v4) < v5)
  {
    v7 = 1;
    if (v4 >= 3)
      v7 = (v4 & (v4 - 1)) != 0;
    v8 = v7 | (2 * v4);
    v9 = vcvtps_u32_f32(v5 / v6);
    if (v8 <= v9)
      prime = (int8x8_t)v9;
    else
      prime = (int8x8_t)v8;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v4 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v4)
      goto LABEL_92;
    if (*(_QWORD *)&prime >= v4)
      goto LABEL_43;
    v17 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v4 < 3 || (v18 = (uint8x8_t)vcnt_s8((int8x8_t)v4), v18.i16[0] = vaddlv_u8(v18), v18.u32[0] > 1uLL))
    {
      v17 = std::__next_prime(v17);
    }
    else
    {
      v19 = 1 << -(char)__clz(v17 - 1);
      if (v17 >= 2)
        v17 = v19;
    }
    if (*(_QWORD *)&prime <= v17)
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime >= v4)
    {
      v4 = *(_QWORD *)(a1 + 8);
      goto LABEL_43;
    }
    if (prime)
    {
LABEL_92:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = operator new(8 * *(_QWORD *)&prime);
      v12 = *(_QWORD **)a1;
      *(_QWORD *)a1 = v11;
      if (v12)
        operator delete(v12);
      v13 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v13++) = 0;
      while (*(_QWORD *)&prime != v13);
      v14 = *(uint64_t ***)(a1 + 16);
      if (v14)
      {
        v15 = (unint64_t)v14[1];
        v16 = (uint8x8_t)vcnt_s8(prime);
        v16.i16[0] = vaddlv_u8(v16);
        if (v16.u32[0] > 1uLL)
        {
          if (v15 >= *(_QWORD *)&prime)
            v15 %= *(_QWORD *)&prime;
        }
        else
        {
          v15 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = a1 + 16;
        for (i = *v14; *v14; i = *v14)
        {
          v21 = i[1];
          if (v16.u32[0] > 1uLL)
          {
            if (v21 >= *(_QWORD *)&prime)
              v21 %= *(_QWORD *)&prime;
          }
          else
          {
            v21 &= *(_QWORD *)&prime - 1;
          }
          if (v21 == v15)
          {
            v14 = (uint64_t **)i;
          }
          else
          {
            v22 = i;
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v21))
            {
              do
              {
                v23 = v22;
                v22 = (uint64_t *)*v22;
              }
              while (v22 && *((_DWORD *)i + 4) == *((_DWORD *)v22 + 4));
              *v14 = v22;
              *v23 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v21);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v21) = i;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v14;
              v14 = (uint64_t **)i;
              v15 = v21;
            }
          }
        }
      }
      v4 = (unint64_t)prime;
    }
    else
    {
      v36 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v36)
        operator delete(v36);
      v4 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_43:
  v24 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v24.i16[0] = vaddlv_u8(v24);
  if (v24.u32[0] > 1uLL)
  {
    v25 = LODWORD(a2);
    if (v4 <= LODWORD(a2))
      v25 = LODWORD(a2) % v4;
  }
  else
  {
    v25 = (v4 - 1) & LODWORD(a2);
  }
  v26 = *(_QWORD **)a1;
  v27 = *(double ***)(*(_QWORD *)a1 + 8 * v25);
  if (v27)
  {
    v28 = 0;
    do
    {
      v29 = v27;
      v27 = (double **)*v27;
      if (!v27)
        break;
      v30 = (unint64_t)v27[1];
      if (v24.u32[0] > 1uLL)
      {
        v31 = (unint64_t)v27[1];
        if (v30 >= v4)
          v31 = v30 % v4;
      }
      else
      {
        v31 = v30 & (v4 - 1);
      }
      if (v31 != v25)
        break;
      v32 = v30 == LODWORD(a2) && *((_DWORD *)v27 + 4) == *((_DWORD *)v3 + 4);
      v33 = v28 & !v32;
      v28 |= v32;
    }
    while (v33 != 1);
  }
  else
  {
    v29 = 0;
  }
  v34 = *((_QWORD *)v3 + 1);
  if (v24.u32[0] > 1uLL)
  {
    if (v34 >= v4)
      v34 %= v4;
  }
  else
  {
    v34 &= v4 - 1;
  }
  if (!v29)
  {
    *v3 = *(double *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v3;
    v26[v34] = a1 + 16;
    if (!*(_QWORD *)v3)
      goto LABEL_79;
    v35 = *(_QWORD *)(*(_QWORD *)v3 + 8);
    if (v24.u32[0] > 1uLL)
    {
      if (v35 >= v4)
        v35 %= v4;
    }
    else
    {
      v35 &= v4 - 1;
    }
LABEL_78:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v3;
    goto LABEL_79;
  }
  *(_QWORD *)v3 = *v29;
  *v29 = v3;
  if (*(_QWORD *)v3)
  {
    v35 = *(_QWORD *)(*(_QWORD *)v3 + 8);
    if (v24.u32[0] > 1uLL)
    {
      if (v35 >= v4)
        v35 %= v4;
    }
    else
    {
      v35 &= v4 - 1;
    }
    if (v35 != v34)
      goto LABEL_78;
  }
LABEL_79:
  ++*(_QWORD *)(a1 + 24);
}

void sub_1DEAB5178(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void TAPExtractor::TAPExtractor(TAPExtractor *this, const MemoryMap *a2, int a3)
{
  _QWORD *v5;
  unsigned __int16 *v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  std::string *v17;
  NSObject *v18;
  const char *v19;
  char *v20;
  std::string *v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  std::string *v32;
  std::string *v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  __int128 v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  std::string *v44;
  std::string *v45;
  __int128 v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  __int128 v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  std::string *v56;
  std::string *v57;
  __int128 v58;
  uint64_t v59;
  int v60;
  int v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int16 v78;
  unsigned __int16 *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unsigned int v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t *v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned __int16 v100;
  unsigned __int16 *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int v106;
  NSObject *v107;
  void *__p[2];
  std::string::size_type v109;
  std::__split_buffer<std::string> buf;

  *((_OWORD *)this + 1) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_QWORD *)this = &off_1EA91CF98;
  *((_QWORD *)this + 1) = (char *)this + 16;
  *((_QWORD *)this + 4) = (char *)this + 40;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 15) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_QWORD *)this + 43) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_QWORD *)this + 56) = (char *)this + 456;
  v5 = (_QWORD *)((char *)this + 472);
  *((_QWORD *)this + 61) = 0;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *((_QWORD *)this + 69) = 4;
  *((_QWORD *)this + 73) = 0;
  *(_OWORD *)((char *)this + 568) = 0u;
  *((_DWORD *)this + 140) = a3;
  *((_BYTE *)this + 440) = 0;
  std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)this + 46, *(_QWORD *)a2, *((_QWORD *)a2 + 1));
  *((_OWORD *)this + 24) = *((_OWORD *)a2 + 1);
  if (*((_QWORD *)this + 46))
  {
    v6 = (unsigned __int16 *)*((_QWORD *)this + 48);
    *((_QWORD *)this + 44) = v6;
    v7 = v6[9];
    *((_WORD *)this + 248) = v7;
    if (v7 == 2)
    {
      v8 = 24;
      *((_QWORD *)this + 50) = 48;
      *((_QWORD *)this + 45) = v6;
      if (v6[10] == 2)
      {
        *((_QWORD *)this + 69) = 12;
        v8 = 24;
      }
    }
    else
    {
      v8 = 20;
      *((_QWORD *)this + 50) = 40;
      if (!v7)
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v18 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf.__first_) = 0;
          _os_log_impl(&dword_1DE3F6000, v18, OS_LOG_TYPE_ERROR, "Running obsolete version of prompts, skipping prompts instead ", (uint8_t *)&buf, 2u);
        }
        v20 = "Running obsolete version of prompts, skipping prompts instead ";
LABEL_132:
        Diagnostics::log(3, v20, v19);
        return;
      }
    }
    v9 = (_QWORD *)((char *)this + 280);
    *((_BYTE *)this + 440) = 1;
    *((_QWORD *)this + 16) = &v6[v8];
    *((_QWORD *)this + 50) = ((v8 * 2) | 4) + 4 * v6[8];
    std::string::basic_string[abi:ne180100]<0>(__p, "sapx0282-1");
    v11 = *((_QWORD *)this + 60);
    v10 = *((_QWORD *)this + 61);
    if (v11 >= v10)
    {
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v5) >> 3);
      v14 = v13 + 1;
      if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *v5) >> 3);
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x555555555555555)
        v16 = 0xAAAAAAAAAAAAAAALL;
      else
        v16 = v14;
      buf.__end_cap_.__value_ = (std::allocator<std::string> *)((char *)this + 488);
      if (v16)
        v17 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)this + 488, v16);
      else
        v17 = 0;
      v21 = v17 + v13;
      buf.__first_ = v17;
      buf.__begin_ = v21;
      buf.__end_cap_.__value_ = &v17[v16];
      v22 = *(_OWORD *)__p;
      v21->__r_.__value_.__r.__words[2] = v109;
      *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
      __p[1] = 0;
      v109 = 0;
      __p[0] = 0;
      buf.__end_ = v21 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)((char *)this + 472), &buf);
      v23 = *((_QWORD *)this + 60);
      std::__split_buffer<std::string>::~__split_buffer(&buf);
      v24 = SHIBYTE(v109);
      *((_QWORD *)this + 60) = v23;
      if (v24 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v12 = *(_OWORD *)__p;
      *(_QWORD *)(v11 + 16) = v109;
      *(_OWORD *)v11 = v12;
      *((_QWORD *)this + 60) = v11 + 24;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "sanv0128-0");
    v26 = *((_QWORD *)this + 60);
    v25 = *((_QWORD *)this + 61);
    if (v26 >= v25)
    {
      v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *v5) >> 3);
      v29 = v28 + 1;
      if (v28 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - *v5) >> 3);
      if (2 * v30 > v29)
        v29 = 2 * v30;
      if (v30 >= 0x555555555555555)
        v31 = 0xAAAAAAAAAAAAAAALL;
      else
        v31 = v29;
      buf.__end_cap_.__value_ = (std::allocator<std::string> *)((char *)this + 488);
      if (v31)
        v32 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)this + 488, v31);
      else
        v32 = 0;
      v33 = v32 + v28;
      buf.__first_ = v32;
      buf.__begin_ = v33;
      buf.__end_cap_.__value_ = &v32[v31];
      v34 = *(_OWORD *)__p;
      v33->__r_.__value_.__r.__words[2] = v109;
      *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v34;
      __p[1] = 0;
      v109 = 0;
      __p[0] = 0;
      buf.__end_ = v33 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)((char *)this + 472), &buf);
      v35 = *((_QWORD *)this + 60);
      std::__split_buffer<std::string>::~__split_buffer(&buf);
      v36 = SHIBYTE(v109);
      *((_QWORD *)this + 60) = v35;
      if (v36 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v27 = *(_OWORD *)__p;
      *(_QWORD *)(v26 + 16) = v109;
      *(_OWORD *)v26 = v27;
      *((_QWORD *)this + 60) = v26 + 24;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "sapx0246-1");
    v38 = *((_QWORD *)this + 60);
    v37 = *((_QWORD *)this + 61);
    if (v38 >= v37)
    {
      v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - *v5) >> 3);
      v41 = v40 + 1;
      if (v40 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *v5) >> 3);
      if (2 * v42 > v41)
        v41 = 2 * v42;
      if (v42 >= 0x555555555555555)
        v43 = 0xAAAAAAAAAAAAAAALL;
      else
        v43 = v41;
      buf.__end_cap_.__value_ = (std::allocator<std::string> *)((char *)this + 488);
      if (v43)
        v44 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)this + 488, v43);
      else
        v44 = 0;
      v45 = v44 + v40;
      buf.__first_ = v44;
      buf.__begin_ = v45;
      buf.__end_cap_.__value_ = &v44[v43];
      v46 = *(_OWORD *)__p;
      v45->__r_.__value_.__r.__words[2] = v109;
      *(_OWORD *)&v45->__r_.__value_.__l.__data_ = v46;
      __p[1] = 0;
      v109 = 0;
      __p[0] = 0;
      buf.__end_ = v45 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)((char *)this + 472), &buf);
      v47 = *((_QWORD *)this + 60);
      std::__split_buffer<std::string>::~__split_buffer(&buf);
      v48 = SHIBYTE(v109);
      *((_QWORD *)this + 60) = v47;
      if (v48 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v39 = *(_OWORD *)__p;
      *(_QWORD *)(v38 + 16) = v109;
      *(_OWORD *)v38 = v39;
      *((_QWORD *)this + 60) = v38 + 24;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "sdom0624-0");
    v50 = *((_QWORD *)this + 60);
    v49 = *((_QWORD *)this + 61);
    if (v50 >= v49)
    {
      v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - *v5) >> 3);
      v53 = v52 + 1;
      if (v52 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - *v5) >> 3);
      if (2 * v54 > v53)
        v53 = 2 * v54;
      if (v54 >= 0x555555555555555)
        v55 = 0xAAAAAAAAAAAAAAALL;
      else
        v55 = v53;
      buf.__end_cap_.__value_ = (std::allocator<std::string> *)((char *)this + 488);
      if (v55)
        v56 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)this + 488, v55);
      else
        v56 = 0;
      v57 = v56 + v52;
      buf.__first_ = v56;
      buf.__begin_ = v57;
      buf.__end_cap_.__value_ = &v56[v55];
      v58 = *(_OWORD *)__p;
      v57->__r_.__value_.__r.__words[2] = v109;
      *(_OWORD *)&v57->__r_.__value_.__l.__data_ = v58;
      __p[1] = 0;
      v109 = 0;
      __p[0] = 0;
      buf.__end_ = v57 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)((char *)this + 472), &buf);
      v59 = *((_QWORD *)this + 60);
      std::__split_buffer<std::string>::~__split_buffer(&buf);
      v60 = SHIBYTE(v109);
      *((_QWORD *)this + 60) = v59;
      if (v60 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v51 = *(_OWORD *)__p;
      *(_QWORD *)(v50 + 16) = v109;
      *(_OWORD *)v50 = v51;
      *((_QWORD *)this + 60) = v50 + 24;
    }
    v61 = *((__int16 *)this + 248);
    if (v61 <= 1)
    {
      v62 = *((_QWORD *)this + 50);
      if (v62 < *(_QWORD *)(*((_QWORD *)this + 44) + 24))
      {
        v63 = (unint64_t *)*((_QWORD *)this + 11);
        do
        {
          v64 = *((_QWORD *)this + 48) + v62;
          v65 = *((_QWORD *)this + 12);
          if ((unint64_t)v63 >= v65)
          {
            v67 = (_QWORD *)*((_QWORD *)this + 10);
            v68 = v63 - v67;
            v69 = v68 + 1;
            if ((unint64_t)(v68 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v70 = v65 - (_QWORD)v67;
            if (v70 >> 2 > v69)
              v69 = v70 >> 2;
            if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
              v71 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v71 = v69;
            if (v71)
            {
              if (v71 >> 61)
                goto LABEL_135;
              v72 = (char *)operator new(8 * v71);
            }
            else
            {
              v72 = 0;
            }
            v73 = &v72[8 * v68];
            *(_QWORD *)v73 = v64;
            v66 = (unint64_t *)(v73 + 8);
            if (v63 != v67)
            {
              do
              {
                v74 = *--v63;
                *((_QWORD *)v73 - 1) = v74;
                v73 -= 8;
              }
              while (v63 != v67);
              v63 = (unint64_t *)*((_QWORD *)this + 10);
            }
            *((_QWORD *)this + 10) = v73;
            *((_QWORD *)this + 11) = v66;
            *((_QWORD *)this + 12) = &v72[8 * v71];
            if (v63)
            {
              operator delete(v63);
              v62 = *((_QWORD *)this + 50);
            }
          }
          else
          {
            *v63 = v64;
            v66 = v63 + 1;
          }
          *((_QWORD *)this + 11) = v66;
          v62 += 36 * *(unsigned __int16 *)(v64 + 2) + 4;
          *((_QWORD *)this + 50) = v62;
          v63 = v66;
        }
        while (v62 < *(_QWORD *)(*((_QWORD *)this + 44) + 24));
      }
      std::vector<std::unordered_multimap<unsigned int,std::pair<unsigned short,unsigned short>>>::resize((char **)this + 35);
      v75 = *((_QWORD *)this + 10);
      v76 = *((_QWORD *)this + 11);
      if (v76 != v75)
      {
        v77 = 0;
        v78 = 0;
        do
        {
          v79 = *(unsigned __int16 **)(v75 + 8 * v77);
          if (v79[1])
          {
            v80 = 0;
            v81 = (unint64_t)v78 << 32;
            v82 = 10;
            do
            {
              if (*v79 - 1 >= 7)
                v83 = 7;
              else
                v83 = (unsigned __int16)(*v79 - 1);
              std::__hash_table<std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>>>::__emplace_multi<std::pair<unsigned int,std::pair<unsigned short,unsigned short>> &>(*v9 + 40 * v83, COERCE_DOUBLE(v81 + *(unsigned int *)&v79[v82]));
              ++v80;
              v75 = *((_QWORD *)this + 10);
              v79 = *(unsigned __int16 **)(v75 + 8 * v77);
              v81 += 0x1000000000000;
              v82 += 18;
            }
            while (v80 < v79[1]);
            v76 = *((_QWORD *)this + 11);
          }
          v77 = ++v78;
        }
        while (v78 < (unint64_t)((v76 - v75) >> 3));
      }
LABEL_126:
      v106 = time(0);
      srand(v106);
      return;
    }
    if (v61 == 2)
    {
      v84 = *((_QWORD *)this + 50);
      if (v84 < *(_QWORD *)(*((_QWORD *)this + 44) + 24))
      {
        v85 = (unint64_t *)*((_QWORD *)this + 14);
        do
        {
          v86 = *((_QWORD *)this + 48) + v84;
          v87 = *((_QWORD *)this + 15);
          if ((unint64_t)v85 >= v87)
          {
            v89 = (_QWORD *)*((_QWORD *)this + 13);
            v90 = v85 - v89;
            v91 = v90 + 1;
            if ((unint64_t)(v90 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v92 = v87 - (_QWORD)v89;
            if (v92 >> 2 > v91)
              v91 = v92 >> 2;
            if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8)
              v93 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v93 = v91;
            if (v93)
            {
              if (v93 >> 61)
LABEL_135:
                std::__throw_bad_array_new_length[abi:ne180100]();
              v94 = (char *)operator new(8 * v93);
            }
            else
            {
              v94 = 0;
            }
            v95 = &v94[8 * v90];
            *(_QWORD *)v95 = v86;
            v88 = (unint64_t *)(v95 + 8);
            if (v85 != v89)
            {
              do
              {
                v96 = *--v85;
                *((_QWORD *)v95 - 1) = v96;
                v95 -= 8;
              }
              while (v85 != v89);
              v85 = (unint64_t *)*((_QWORD *)this + 13);
            }
            *((_QWORD *)this + 13) = v95;
            *((_QWORD *)this + 14) = v88;
            *((_QWORD *)this + 15) = &v94[8 * v93];
            if (v85)
            {
              operator delete(v85);
              v84 = *((_QWORD *)this + 50);
            }
          }
          else
          {
            *v85 = v86;
            v88 = v85 + 1;
          }
          *((_QWORD *)this + 14) = v88;
          v84 += 56 * *(unsigned __int16 *)(v86 + 2) + 4;
          *((_QWORD *)this + 50) = v84;
          v85 = v88;
        }
        while (v84 < *(_QWORD *)(*((_QWORD *)this + 44) + 24));
      }
      std::vector<std::unordered_multimap<unsigned int,std::pair<unsigned short,unsigned short>>>::resize((char **)this + 35);
      v97 = *((_QWORD *)this + 13);
      v98 = *((_QWORD *)this + 14);
      if (v98 != v97)
      {
        v99 = 0;
        v100 = 0;
        do
        {
          v101 = *(unsigned __int16 **)(v97 + 8 * v99);
          if (v101[1])
          {
            v102 = 0;
            v103 = (unint64_t)v100 << 32;
            v104 = 24;
            do
            {
              if (*v101 - 1 >= 7)
                v105 = 7;
              else
                v105 = (unsigned __int16)(*v101 - 1);
              std::__hash_table<std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>>>::__emplace_multi<std::pair<unsigned int,std::pair<unsigned short,unsigned short>> &>(*v9 + 40 * v105, COERCE_DOUBLE(v103 + *(unsigned int *)&v101[v104]));
              ++v102;
              v97 = *((_QWORD *)this + 13);
              v101 = *(unsigned __int16 **)(v97 + 8 * v99);
              v103 += 0x1000000000000;
              v104 += 28;
            }
            while (v102 < v101[1]);
            v98 = *((_QWORD *)this + 14);
          }
          v99 = ++v100;
        }
        while (v100 < (unint64_t)((v98 - v97) >> 3));
      }
      goto LABEL_126;
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v107 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__first_) = 0;
      _os_log_impl(&dword_1DE3F6000, v107, OS_LOG_TYPE_ERROR, "Invalid version of prompts loaded ", (uint8_t *)&buf, 2u);
    }
    v20 = "Invalid version of prompts loaded ";
    goto LABEL_132;
  }
}

void sub_1DEAB5BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, void *a11, uint64_t a12, std::__split_buffer<std::string> *a13, void *a14, _QWORD **a15, _QWORD **a16, uint64_t a17, void *__pa, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  uint64_t v24;
  void *v25;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  std::__split_buffer<std::string>::pointer first;
  void *v34;
  void *v35;

  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a24);
  if (a23 < 0)
    operator delete(__pa);
  __pa = __p;
  std::vector<Prompt>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  v27 = *(void **)(v24 + 528);
  if (v27)
  {
    *(_QWORD *)(v24 + 536) = v27;
    operator delete(v27);
  }
  __pa = a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  __pa = v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(char **)(v24 + 456));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a12);
  if (*(char *)(v24 + 351) < 0)
    operator delete(*(void **)(v24 + 328));
  __pa = (void *)(v24 + 304);
  std::vector<std::vector<std::vector<std::pair<unsigned short,unsigned short>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  std::vector<std::unordered_multimap<unsigned int,unsigned int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  v28 = *(void **)(v24 + 256);
  if (v28)
    operator delete(v28);
  v29 = *(void **)(v24 + 232);
  if (v29)
    operator delete(v29);
  v30 = *(void **)(v24 + 208);
  if (v30)
  {
    *(_QWORD *)(v24 + 216) = v30;
    operator delete(v30);
  }
  v31 = *(void **)(v24 + 184);
  if (v31)
    operator delete(v31);
  v32 = *(void **)(v24 + 160);
  if (v32)
    operator delete(v32);
  first = a13->__first_;
  if (a13->__first_)
  {
    *(_QWORD *)(v24 + 144) = first;
    operator delete(first);
  }
  v34 = *(void **)(v24 + 104);
  if (v34)
  {
    *(_QWORD *)(v24 + 112) = v34;
    operator delete(v34);
  }
  v35 = *(void **)(v24 + 80);
  if (v35)
  {
    *(_QWORD *)(v24 + 88) = v35;
    operator delete(v35);
  }
  __pa = a14;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::destroy(*a15);
  std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::destroy(*a16);
  _Unwind_Resume(a1);
}

void TAPExtractor::~TAPExtractor(TAPExtractor *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void **v11;

  *(_QWORD *)this = &off_1EA91CF98;
  v11 = (void **)((char *)this + 568);
  std::vector<Prompt>::__destroy_vector::operator()[abi:ne180100](&v11);
  v2 = (void *)*((_QWORD *)this + 66);
  if (v2)
  {
    *((_QWORD *)this + 67) = v2;
    operator delete(v2);
  }
  v11 = (void **)((char *)this + 504);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)((char *)this + 472);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*((char **)this + 57));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 368);
  if (*((char *)this + 351) < 0)
    operator delete(*((void **)this + 41));
  v11 = (void **)((char *)this + 304);
  std::vector<std::vector<std::vector<std::pair<unsigned short,unsigned short>>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)((char *)this + 280);
  std::vector<std::unordered_multimap<unsigned int,unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v3 = (void *)*((_QWORD *)this + 32);
  if (v3)
    operator delete(v3);
  v4 = (void *)*((_QWORD *)this + 29);
  if (v4)
    operator delete(v4);
  v5 = (void *)*((_QWORD *)this + 26);
  if (v5)
  {
    *((_QWORD *)this + 27) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 23);
  if (v6)
    operator delete(v6);
  v7 = (void *)*((_QWORD *)this + 20);
  if (v7)
    operator delete(v7);
  v8 = (void *)*((_QWORD *)this + 17);
  if (v8)
  {
    *((_QWORD *)this + 18) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 13);
  if (v9)
  {
    *((_QWORD *)this + 14) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 10);
  if (v10)
  {
    *((_QWORD *)this + 11) = v10;
    operator delete(v10);
  }
  v11 = (void **)((char *)this + 56);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::destroy(*((_QWORD **)this + 5));
  std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::destroy(*((_QWORD **)this + 2));
}

void UnparseLegacyImpl::~UnparseLegacyImpl(UnparseLegacyImpl *this)
{
  UnparseLegacyImpl::~UnparseLegacyImpl(this);
  JUMPOUT(0x1DF0ED014);
}

{
  void **v2;

  *(_QWORD *)this = &off_1EA91F0C0;
  *((_QWORD *)this + 13) = &unk_1EA91F128;
  v2 = (void **)((char *)this + 160);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 128);
  UnparserModule::~UnparserModule(this);
}

uint64_t UnparseLegacyImpl::start_document(UnparseLegacyImpl *this)
{
  uint64_t result;

  *((_DWORD *)this + 36) = 0;
  std::shared_ptr<TokenAttributes>::reset[abi:ne180100]((_QWORD *)this + 16);
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
  *((_QWORD *)this + 19) = 0;
  return result;
}

void UnparseLegacyImpl::dump_token(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  void **v51;
  void *v52;
  _QWORD *v53;
  _QWORD *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  void *exception;
  _QWORD v64[2];
  void *__p[2];
  unsigned __int8 v66;

  v4 = *a2;
  if ((_QWORD *)(v4 + 8) == v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    StringFormatter::StringFormatter((StringFormatter *)__p, "Token missing TokenBasicItem");
    MEMORY[0x1DF0EC99C](exception, __p);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  v6 = v5[5];
  if (*(_DWORD *)(*(_QWORD *)(v6 + 56) + 32) != 10 || *(_DWORD *)(v6 + 8) == 1635083369)
  {
    v7 = *(std::__shared_weak_count **)(v6 + 64);
    v64[0] = *(_QWORD *)(v6 + 56);
    v64[1] = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    UnparseLegacyImpl::dump_attr(a1, (uint64_t)v64);
    if (v7)
    {
      v10 = (unint64_t *)&v7->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v12 = *(_DWORD *)(v6 + 8);
    if (v12 > 1835102826)
    {
      if (v12 != 1835102827)
      {
        if (v12 != 1885892462)
        {
          if (v12 == 1952807028)
          {
            if (*(_QWORD *)(v6 + 16) != *(_QWORD *)(a1 + 152))
            {
              v13 = *(_QWORD **)(a1 + 120);
              LOBYTE(__p[0]) = 32;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)__p, 1);
            }
            v16 = *(_QWORD *)(v6 + 32);
            v15 = v6 + 32;
            v14 = v16;
            v17 = *(char *)(v15 + 23);
            if (v17 >= 0)
              v18 = v15;
            else
              v18 = v14;
            if (v17 >= 0)
              v19 = *(unsigned __int8 *)(v15 + 23);
            else
              v19 = *(_QWORD *)(v15 + 8);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 120), v18, v19);
            *(_QWORD *)(a1 + 152) = *(_QWORD *)(v15 - 8) + *(_QWORD *)(v15 - 16);
          }
          return;
        }
        v31 = *a2;
        if ((_QWORD *)(v31 + 8) == v32)
          return;
        v33 = v32[5];
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 120), (uint64_t)"\x1B\\toi=", 6);
        v35 = *(char *)(v33 + 55);
        if (v35 >= 0)
          v36 = v33 + 32;
        else
          v36 = *(_QWORD *)(v33 + 32);
        if (v35 >= 0)
          v37 = *(unsigned __int8 *)(v33 + 55);
        else
          v37 = *(_QWORD *)(v33 + 40);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, v36, v37);
        if (*(char *)(v6 + 55) < 0)
          v38 = *(_QWORD *)(v6 + 40);
        else
          v38 = *(unsigned __int8 *)(v6 + 55);
        if (v38)
        {
          v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 120), (uint64_t)":\"", 2);
          v55 = *(char *)(v6 + 55);
          if (v55 >= 0)
            v56 = v6 + 32;
          else
            v56 = *(_QWORD *)(v6 + 32);
          if (v55 >= 0)
            v57 = *(unsigned __int8 *)(v6 + 55);
          else
            v57 = *(_QWORD *)(v6 + 40);
          v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, v56, v57);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"\"", 1);
        }
        v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 120), (uint64_t)"\\", 1);
        v60 = *(char *)(v33 + 31);
        if (v60 >= 0)
          v61 = v33 + 8;
        else
          v61 = *(_QWORD *)(v33 + 8);
        if (v60 >= 0)
          v62 = *(unsigned __int8 *)(v33 + 31);
        else
          v62 = *(_QWORD *)(v33 + 16);
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, v61, v62);
        v29 = "\x1B\\toi=orth\\";
        v30 = 11;
LABEL_81:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v29, v30);
        return;
      }
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 120), (uint64_t)"\x1B\\mrk=", 6);
      v25 = *(_QWORD *)(v6 + 32);
      v24 = v6 + 32;
      v23 = v25;
      v26 = *(char *)(v24 + 23);
      if (v26 >= 0)
        v27 = v24;
      else
        v27 = v23;
      if (v26 >= 0)
        v28 = *(unsigned __int8 *)(v24 + 23);
      else
        v28 = *(_QWORD *)(v24 + 8);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v27, v28);
LABEL_36:
      v29 = "\\";
      v30 = 1;
      goto LABEL_81;
    }
    if (v12 != 1635083369)
    {
      if (v12 != 1651664235)
        return;
      v20 = *a2;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 120), (uint64_t)"\x1B\\pause=", 8);
      v21 = (_QWORD *)std::ostream::operator<<();
      goto LABEL_36;
    }
    v39 = *a2;
    if ((_QWORD *)(v39 + 8) != v40)
    {
      v41 = v40[5];
      v42 = *(_BYTE *)(v41 + 37) ? "&overlap" : &byte_1DEBD87CE;
      std::string::basic_string[abi:ne180100]<0>(__p, v42);
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 120), (uint64_t)"\x1B\\audio=", 8);
      v46 = *(_QWORD *)(v41 + 8);
      v45 = v41 + 8;
      v44 = v46;
      v47 = *(char *)(v45 + 23);
      v48 = v47 >= 0 ? v45 : v44;
      v49 = v47 >= 0 ? *(unsigned __int8 *)(v45 + 23) : *(_QWORD *)(v45 + 8);
      v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, v48, v49);
      v51 = (v66 & 0x80u) == 0 ? __p : (void **)__p[0];
      v52 = (v66 & 0x80u) == 0 ? (void *)v66 : __p[1];
      v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)v51, (uint64_t)v52);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"\\", 1);
      if ((char)v66 < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_1DEAB636C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *UnparseLegacyImpl::end_document(UnparseLegacyImpl *this)
{
  _QWORD v2[2];

  v2[0] = 0;
  v2[1] = 0;
  return UnparseLegacyImpl::dump_attr((uint64_t)this, (uint64_t)v2);
}

void sub_1DEAB63F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *UnparseLegacyImpl::dump_attr(uint64_t a1, uint64_t a2)
{
  int v3;
  TokenAttributes **v4;
  _QWORD *v5;
  int *v6;
  _QWORD *result;

  if (*(_QWORD *)a2)
  {
    v3 = 0;
    v4 = *(TokenAttributes ***)a2;
    do
    {
      ++v3;
      v4 = (TokenAttributes **)*v4;
    }
    while (v4);
    v5 = (_QWORD *)(a1 + 128);
    v6 = (int *)(a1 + 144);
    UnparseLegacyImpl::dump_attr((UnparseLegacyImpl *)a1, *(TokenAttributes **)(a1 + 128), *(_DWORD *)(a1 + 144), *(TokenAttributes ***)a2, v3);
  }
  else
  {
    v5 = (_QWORD *)(a1 + 128);
    v6 = (int *)(a1 + 144);
    UnparseLegacyImpl::dump_attr((UnparseLegacyImpl *)a1, *(TokenAttributes **)(a1 + 128), *(_DWORD *)(a1 + 144), 0, 0);
    v3 = 0;
  }
  result = std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v5, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  *v6 = v3;
  return result;
}

void UnparseLegacyImpl::dump_attr(UnparseLegacyImpl *this, TokenAttributes *a2, int a3, TokenAttributes **a4, int a5)
{
  int v7;
  TokenAttributes *v8;
  UnparseLegacyImpl *v9;
  TokenAttributes *v10;
  int v11;

  v7 = a3;
  v8 = a2;
  v9 = this;
  if (a3 <= a5)
  {
    if (a3 < a5)
    {
      v10 = *a4;
      v11 = a5 - 1;
      goto LABEL_8;
    }
  }
  else
  {
    do
    {
      UnparseLegacyImpl::end_attr(v9, a2);
      v8 = *(TokenAttributes **)v8;
      --v7;
    }
    while (v7 > a5);
    v7 = a5;
  }
  if (v8 == (TokenAttributes *)a4)
    return;
  UnparseLegacyImpl::end_attr(v9, a2);
  a2 = *(TokenAttributes **)v8;
  a3 = v7 - 1;
  v10 = *a4;
  v11 = a5 - 1;
  this = v9;
LABEL_8:
  UnparseLegacyImpl::dump_attr(this, a2, a3, v10, v11);
  UnparseLegacyImpl::start_attr(v9, (TokenAttributes *)a4);
}

void UnparseLegacyImpl::end_attr(UnparseLegacyImpl *this, TokenAttributes *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;

  v3 = (_QWORD *)*((_QWORD *)this + 15);
  v4 = *((_QWORD *)this + 21);
  v7 = *(_QWORD *)(v4 - 24);
  v5 = v4 - 24;
  v6 = v7;
  v8 = *(char *)(v5 + 23);
  if (v8 >= 0)
    v9 = v5;
  else
    v9 = v6;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(v5 + 23);
  else
    v10 = *(_QWORD *)(v5 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, v9, v10);
  v11 = *((_QWORD *)this + 21);
  v12 = (void **)(v11 - 24);
  if (*(char *)(v11 - 1) < 0)
    operator delete(*v12);
  *((_QWORD *)this + 21) = v12;
}

void UnparseLegacyImpl::start_attr(UnparseLegacyImpl *this, TokenAttributes *a2)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  const void **v22;
  unsigned __int8 *v23;
  TokenAttributes **v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  _QWORD *v29;
  char v30;
  _QWORD *v31;
  int v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  std::string *v36;
  const std::string::value_type *v37;
  _BOOL4 is_prompt;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  void *p_v;
  uint64_t end_high;
  const std::string::value_type *first;
  std::string::size_type begin;
  _QWORD *v61;
  _QWORD *v62;
  void **v63;
  std::string::size_type v64;
  std::string *v65;
  int v66;
  _QWORD *v67;
  _QWORD *v68;
  void **v69;
  std::string::size_type v70;
  std::string *v71;
  int v72;
  _QWORD *v73;
  _QWORD *v74;
  void **v75;
  std::string::size_type v76;
  std::string *v77;
  void *__p[2];
  int64_t v79;
  std::__split_buffer<std::string> __v;
  void *v81;
  char v82;
  _BYTE v83[152];

  std::string::basic_string[abi:ne180100]<0>(__p, &byte_1DEBD87CE);
  v4 = *((_QWORD *)this + 22);
  v5 = *((_QWORD *)this + 21);
  if (v5 >= v4)
  {
    v7 = *((_QWORD *)this + 20);
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v7) >> 3);
    v9 = v8 + 1;
    if (v8 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v7) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)((char *)this + 176);
    if (v11)
      v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)this + 176, v11);
    else
      v12 = 0;
    v13 = v12 + v8;
    __v.__first_ = v12;
    __v.__begin_ = v13;
    __v.__end_cap_.__value_ = &v12[v11];
    v14 = *(_OWORD *)__p;
    v13->__r_.__value_.__r.__words[2] = v79;
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
    __p[1] = 0;
    v79 = 0;
    __p[0] = 0;
    __v.__end_ = v13 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)((char *)this + 160), &__v);
    v15 = *((_QWORD *)this + 21);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v16 = SHIBYTE(v79);
    *((_QWORD *)this + 21) = v15;
    if (v16 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v6 = *(_OWORD *)__p;
    *(_QWORD *)(v5 + 16) = v79;
    *(_OWORD *)v5 = v6;
    *((_QWORD *)this + 21) = v5 + 24;
  }
  switch(*((_DWORD *)a2 + 8))
  {
    case 2:
    case 3:
    case 6:
      v17 = *(_QWORD *)a2;
      if (!*(_QWORD *)a2)
        goto LABEL_62;
      v18 = *((unsigned __int8 *)a2 + 63);
      if ((v18 & 0x80u) == 0)
        v19 = *((unsigned __int8 *)a2 + 63);
      else
        v19 = *((_QWORD *)a2 + 6);
      v20 = *(unsigned __int8 *)(v17 + 63);
      v21 = (char)v20;
      if ((v20 & 0x80u) != 0)
        v20 = *(_QWORD *)(v17 + 48);
      if (v19 != v20)
        goto LABEL_62;
      v22 = (const void **)((char *)a2 + 40);
      if (v21 >= 0)
        v23 = (unsigned __int8 *)(v17 + 40);
      else
        v23 = *(unsigned __int8 **)(v17 + 40);
      if ((v18 & 0x80) != 0)
      {
        if (!memcmp(*v22, v23, *((_QWORD *)a2 + 6)))
          return;
      }
      else
      {
        if (!*((_BYTE *)a2 + 63))
          return;
        while (*(unsigned __int8 *)v22 == *v23)
        {
          v22 = (const void **)((char *)v22 + 1);
          ++v23;
          if (!--v18)
            return;
        }
      }
LABEL_62:
      v56 = (_QWORD *)*((_QWORD *)this + 15);
      lang_escape(&__v, (uint64_t)a2 + 40);
      if (SHIBYTE(__v.__end_) >= 0)
        p_v = &__v;
      else
        p_v = __v.__first_;
      if (SHIBYTE(__v.__end_) >= 0)
        end_high = HIBYTE(__v.__end_);
      else
        end_high = (uint64_t)__v.__begin_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)p_v, end_high);
      if (SHIBYTE(__v.__end_) < 0)
      {
        operator delete(__v.__first_);
        if (!v17)
          return;
      }
      else if (!v17)
      {
        return;
      }
      lang_escape(&__v, v17 + 40);
      if (SHIBYTE(__v.__end_) >= 0)
        first = (const std::string::value_type *)&__v;
      else
        first = (const std::string::value_type *)__v.__first_;
      if (SHIBYTE(__v.__end_) >= 0)
        begin = HIBYTE(__v.__end_);
      else
        begin = (std::string::size_type)__v.__begin_;
      std::string::append((std::string *)(*((_QWORD *)this + 21) - 24), first, begin);
      if (SHIBYTE(__v.__end_) < 0)
        operator delete(__v.__first_);
      return;
    case 4:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 15), (uint64_t)"\x1B\\mw\\", 5);
      v36 = (std::string *)(*((_QWORD *)this + 21) - 24);
      v37 = "\x1B\\mw\\";
      goto LABEL_60;
    case 5:
      is_prompt = TokenAttributes::is_prompt(a2);
      v39 = (_QWORD *)*((_QWORD *)this + 15);
      if (is_prompt)
      {
        v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"\x1B\\mrk=ctx=", 10);
        v43 = *((_QWORD *)a2 + 24);
        v42 = (char *)a2 + 192;
        v41 = v43;
        v44 = v42[23];
        if (v44 >= 0)
          v45 = (uint64_t)v42;
        else
          v45 = v41;
        if (v44 >= 0)
          v46 = v42[23];
        else
          v46 = *((_QWORD *)v42 + 1);
        v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v45, v46);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"\\", 1);
        v36 = (std::string *)(*((_QWORD *)this + 21) - 24);
        v37 = "\x1B\\mrk=ctx=\\";
      }
      else
      {
        v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"\x1B\\tn=", 5);
        v51 = *((_QWORD *)a2 + 18);
        v50 = (char *)a2 + 144;
        v49 = v51;
        v52 = v50[23];
        if (v52 >= 0)
          v53 = (uint64_t)v50;
        else
          v53 = v49;
        if (v52 >= 0)
          v54 = v50[23];
        else
          v54 = *((_QWORD *)v50 + 1);
        v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, v53, v54);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"\\", 1);
        v36 = (std::string *)(*((_QWORD *)this + 21) - 24);
        v37 = "\x1B\\tn=normal\\";
      }
      goto LABEL_60;
    case 8:
      v24 = *(TokenAttributes ***)a2;
      relative_prosody(*(TokenAttributes ***)a2, 0xD8uLL, 100.0);
      v25 = MEMORY[0x1E0DE4F50];
      v26 = MEMORY[0x1E0DE4FB8];
      v27 = *((_DWORD *)a2 + 54);
      if (v27 == 1 || v27 == 2)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 15), (uint64_t)"\x1B\\pitch=", 8);
        v61 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"\\", 1);
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__v);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v.__end_, (uint64_t)"\x1B\\pitch=", 8);
        v62 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"\\", 1);
        std::stringbuf::str();
        if (v79 >= 0)
          v63 = __p;
        else
          v63 = (void **)__p[0];
        if (v79 >= 0)
          v64 = HIBYTE(v79);
        else
          v64 = (std::string::size_type)__p[1];
        std::string::append((std::string *)(*((_QWORD *)this + 21) - 24), (const std::string::value_type *)v63, v64);
        if (SHIBYTE(v79) < 0)
          operator delete(__p[0]);
        __v.__first_ = *(std::__split_buffer<std::string>::pointer *)v25;
        v65 = *(std::string **)(v25 + 72);
        *(std::__split_buffer<std::string>::pointer *)((char *)&__v.__first_
                                                     + __v.__first_[-1].__r_.__value_.__r.__words[0]) = *(std::__split_buffer<std::string>::pointer *)(v25 + 64);
        __v.__end_ = v65;
        __v.__end_cap_.__value_ = (std::string *)(v26 + 16);
        if (v82 < 0)
          operator delete(v81);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1DF0ECF6C](v83);
        v24 = *(TokenAttributes ***)a2;
      }
      relative_prosody(v24, 0xE8uLL, 100.0);
      v66 = *((_DWORD *)a2 + 58);
      if (v66 == 1 || v66 == 2)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 15), (uint64_t)"\x1B\\rate=", 7);
        v67 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"\\", 1);
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__v);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v.__end_, (uint64_t)"\x1B\\rate=", 7);
        v68 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"\\", 1);
        std::stringbuf::str();
        if (v79 >= 0)
          v69 = __p;
        else
          v69 = (void **)__p[0];
        if (v79 >= 0)
          v70 = HIBYTE(v79);
        else
          v70 = (std::string::size_type)__p[1];
        std::string::append((std::string *)(*((_QWORD *)this + 21) - 24), (const std::string::value_type *)v69, v70);
        if (SHIBYTE(v79) < 0)
          operator delete(__p[0]);
        __v.__first_ = *(std::__split_buffer<std::string>::pointer *)v25;
        v71 = *(std::string **)(v25 + 72);
        *(std::__split_buffer<std::string>::pointer *)((char *)&__v.__first_
                                                     + __v.__first_[-1].__r_.__value_.__r.__words[0]) = *(std::__split_buffer<std::string>::pointer *)(v25 + 64);
        __v.__end_ = v71;
        __v.__end_cap_.__value_ = (std::string *)(v26 + 16);
        if (v82 < 0)
          operator delete(v81);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1DF0ECF6C](v83);
        v24 = *(TokenAttributes ***)a2;
      }
      relative_prosody(v24, 0xF0uLL, 80.0);
      v72 = *((_DWORD *)a2 + 60);
      if (v72 == 1 || v72 == 2)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 15), (uint64_t)"\x1B\\vol=", 6);
        v73 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"\\", 1);
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__v);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v.__end_, (uint64_t)"\x1B\\vol=", 6);
        v74 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"\\", 1);
        std::stringbuf::str();
        if (v79 >= 0)
          v75 = __p;
        else
          v75 = (void **)__p[0];
        if (v79 >= 0)
          v76 = HIBYTE(v79);
        else
          v76 = (std::string::size_type)__p[1];
        std::string::append((std::string *)(*((_QWORD *)this + 21) - 24), (const std::string::value_type *)v75, v76);
        if (SHIBYTE(v79) < 0)
          operator delete(__p[0]);
        __v.__first_ = *(std::__split_buffer<std::string>::pointer *)v25;
        v77 = *(std::string **)(v25 + 72);
        *(std::__split_buffer<std::string>::pointer *)((char *)&__v.__first_
                                                     + __v.__first_[-1].__r_.__value_.__r.__words[0]) = *(std::__split_buffer<std::string>::pointer *)(v25 + 64);
        __v.__end_ = v77;
        __v.__end_cap_.__value_ = (std::string *)(v26 + 16);
        if (v82 < 0)
          operator delete(v81);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1DF0ECF6C](v83);
      }
      return;
    case 9:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 15), (uint64_t)"\x1B\\nlu=PRM:", 10);
      v28 = *((_DWORD *)a2 + 69);
      if (v28 > 7)
      {
        v29 = (_QWORD *)*((_QWORD *)this + 15);
        if (v28 == 8)
          v30 = 49;
        else
          v30 = 51;
      }
      else
      {
        v29 = (_QWORD *)*((_QWORD *)this + 15);
        v30 = 48;
      }
      LOBYTE(__v.__first_) = v30;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)&__v, 1);
      return;
    case 0xC:
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 15), (uint64_t)"\x1B\\mrk=emo=", 10);
      v32 = *((char *)a2 + 319);
      if (v32 >= 0)
        v33 = (char *)a2 + 296;
      else
        v33 = (char *)*((_QWORD *)a2 + 37);
      if (v32 >= 0)
        v34 = *((unsigned __int8 *)a2 + 319);
      else
        v34 = *((_QWORD *)a2 + 38);
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v33, v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"\\", 1);
      v36 = (std::string *)(*((_QWORD *)this + 21) - 24);
      v37 = "\x1B\\mrk=emo=none\\";
LABEL_60:
      std::string::append(v36, v37);
      return;
    default:
      return;
  }
}

void sub_1DEAB6DDC(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::string> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0)
    operator delete(__pa);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(__p);
}

float relative_prosody(TokenAttributes **a1, unint64_t a2, float result)
{
  int v3;
  float v4;
  float v5;

  if (a1)
  {
    while (1)
    {
      v3 = *(_DWORD *)((char *)a1 + a2);
      if (v3)
        break;
      a1 = (TokenAttributes **)*a1;
      if (!a1)
        return result;
    }
    if (v3 != 1)
    {
      if (v3 == 2)
      {
        v4 = *(float *)((char *)a1 + a2 + 4);
        relative_prosody(*a1, a2, result);
        return v4 * v5;
      }
      else
      {
        return nanf(&byte_1DEBD87CE);
      }
    }
  }
  return result;
}

void lang_escape(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  unint64_t i;
  const void **v9[3];
  std::string v10[2];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[7];

  v50[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v10, "ar-SA", "arw");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v11, "zh-HK", "cah");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v12, "cs-CZ", "czc");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v13, "da-DK", "dad");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v14, "nl-BE", "dub");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v15, "nl-NL", "dun");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v16, "en-AU", "ena");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v17, "en-IE", "ene");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v18, "en-GB", "eng");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v19, "en-IN", "eni");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[4],0>(v20, "en-scotland", "ens");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v21, "en-US", "enu");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v22, "en-ZA", "enz");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v23, "fi-FI", "fif");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v24, "fr-CA", "frc");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v25, "fr-FR", "frf");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v26, "de-DE", "ged");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v27, "el-GR", "grg");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v28, "he-IL", "hei");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v29, "hi-IN", "hii");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v30, "hu-HU", "huh");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v31, "id-ID", "idi");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v32, "it-IT", "iti");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v33, "ja-JP", "jpj");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v34, "ko-KR", "kok");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v35, "zh-CN", "mnc");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v36, "zh-TW", "mnt");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v37, "no-NO", "non");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v38, "pl-PL", "plp");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v39, "pt-BR", "ptb");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v40, "pt-PT", "ptp");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v41, "ro-RO", "ror");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v42, "ru-RU", "rur");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v43, "sk-SK", "sks");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v44, "es-AR", "spa");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v45, "es-CO", "spc");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v46, "es-ES", "spe");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v47, "es-MX", "spm");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v48, "sv-SE", "sws");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v49, "th-TH", "tht");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v50, "tr-TR", "trt");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v9, (const void **)&v10[0].__r_.__value_.__l.__data_, 41);
    NeverDestructed<std::map<std::string,std::string>>::NeverDestructed<>((uint64_t **)&lang_escape(std::string const&)::sISO2VELang, v9);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v9, v9[1]);
    for (i = 1920; i != -48; i -= 48)
      std::pair<std::string,std::string>::~pair((uint64_t)&v10[i / 0x18]);
  }
  v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 8);
  if (v5)
  {
    if (lang_escape(std::string const&)::sISO2VELang + 8 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(lang_escape(std::string const&)::sISO2VELang, (const void **)a2))
    {
      std::string::basic_string[abi:ne180100]<0>(a1, &byte_1DEBD87CE);
    }
    else
    {
      std::operator+<char>();
      v6 = std::string::append(v10, "\\");
      v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      a1[2] = *((_QWORD *)&v6->__r_.__value_.__l + 2);
      *(_OWORD *)a1 = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v10[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v10[0].__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a1, &byte_1DEBD87CE);
  }
}

void sub_1DEAB7520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t i;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a9, a10);
  for (i = 1920; i != -48; i -= 48)
    std::pair<std::string,std::string>::~pair((uint64_t)&__p + i);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1DEAB75E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[4],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1DEAB7634(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t **NeverDestructed<std::map<std::string,std::string>>::NeverDestructed<>(uint64_t **a1, const void ***a2)
{
  uint64_t *v4;

  v4 = (uint64_t *)operator new();
  std::map<std::string,std::string>::map[abi:ne180100](v4, a2);
  *a1 = v4;
  return a1;
}

void sub_1DEAB76A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

__n128 UnparseLegacy::create(__n128 *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  __n128 result;
  void *exception;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;

  if (!a2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    StringFormatter::StringFormatter((StringFormatter *)&v22, "UnparseLegacy::create() needs non-NULL upstream argument");
    MEMORY[0x1DF0EC99C](exception, &v22);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  v6 = operator new(0xD0uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1EA933900;
  v8 = (unint64_t)(v6 + 3);
  v24 = a2;
  v25 = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v26 = a2;
    v27 = a3;
    v11 = (unint64_t *)&a3->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    v22 = a2;
    v23 = a3;
    do
      v13 = __ldxr(v11);
    while (__stxr(v13 + 1, v11));
  }
  else
  {
    v26 = a2;
    v27 = 0;
    v22 = a2;
    v23 = 0;
  }
  UnparserModule::UnparserModule((uint64_t)(v6 + 3), a2, a3);
  if (a3)
  {
    v14 = (unint64_t *)&a3->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  v7[3] = &off_1EA91D6F8;
  v7[16] = &unk_1EA91D760;
  if (v27)
  {
    v16 = &v27->__shared_owners_;
    do
      v17 = __ldaxr((unint64_t *)v16);
    while (__stlxr(v17 - 1, (unint64_t *)v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v7[3] = &off_1EA91F0C0;
  v7[16] = &unk_1EA91F128;
  v7[19] = 0;
  v7[20] = 0;
  v7[24] = 0;
  v7[25] = 0;
  v7[23] = 0;
  if (a3)
  {
    v18 = (unint64_t *)&a3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v7;
  *a1 = result;
  return result;
}

void sub_1DEAB7910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  void *v18;
  int v19;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

void UnparseLegacy::~UnparseLegacy(UnparseLegacy *this)
{
  UnparserModule::~UnparserModule(this);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<UnparseLegacyImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933900;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<UnparseLegacyImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933900;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<UnparseLegacyImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void FS2S1EncoderBaseInference::inference(_QWORD **a1, uint64_t *a2, uint64_t a3)
{
  NSObject *v6;
  const char *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::chrono::steady_clock::time_point v15;
  NSObject *v16;
  std::chrono::steady_clock::time_point v17;
  std::chrono::steady_clock::time_point v18;
  const char *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  NSObject *v25;
  const char *v26;
  NSObject *v27;
  _BOOL4 v28;
  const char *v29;
  _QWORD *v30;
  unint64_t v31;
  NSObject *v32;
  const char *v33;
  unint64_t v34;
  NSObject *v35;
  const char *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint8_t buf[8];
  std::__shared_weak_count *v54;
  uint8_t v55[4];
  double v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v6, OS_LOG_TYPE_DEBUG, "FS2S1Encoder inference begin.", buf, 2u);
  }
  Diagnostics::log(7, "FS2S1Encoder inference begin.", v7);
  v8 = operator new(0x80uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA933078;
  v8[3] = 257;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_OWORD *)v8 + 7) = 0u;
  *(_QWORD *)buf = v8 + 3;
  v54 = (std::__shared_weak_count *)v8;
  v9 = (std::__shared_weak_count *)a2[1];
  v51 = *a2;
  v52 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  ((void (*)(_QWORD **, uint64_t *))(*a1)[1])(a1, &v51);
  v12 = v52;
  if (v52)
  {
    v13 = (unint64_t *)&v52->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  (*(void (**)(_QWORD *))(*a1[1] + 48))(a1[1]);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v16 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v17.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)v55 = 134217984;
    v56 = (double)((v17.__d_.__rep_ - v15.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v16, OS_LOG_TYPE_DEFAULT, "FS2S1Encoder inference time: %.3f s", v55, 0xCu);
  }
  v18.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "FS2S1Encoder inference time: %.3f s", v19, (double)((v18.__d_.__rep_ - v15.__d_.__rep_) / 1000000) / 1000.0);
  v49 = *(_QWORD **)buf;
  v50 = v54;
  if (v54)
  {
    v20 = (unint64_t *)&v54->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  ((void (*)(_QWORD **, _QWORD **))(*a1)[2])(a1, &v49);
  v22 = v50;
  if (v50)
  {
    v23 = (unint64_t *)&v50->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  (*(void (**)(_QWORD *))(*a1[1] + 56))(a1[1]);
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v25 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v55 = 0;
    _os_log_impl(&dword_1DE3F6000, v25, OS_LOG_TYPE_DEBUG, "FS2S1Encoder inference end.", v55, 2u);
  }
  Diagnostics::log(7, "FS2S1Encoder inference end.", v26);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v27 = Diagnostics_GetLogObject(void)::__profile_log_default;
  v28 = os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT);
  v30 = *(_QWORD **)buf;
  if (v28)
  {
    v31 = 0xAAAAAAAAAAAAAAABLL
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)buf + 40) - *(_QWORD *)(*(_QWORD *)buf + 32)) >> 3);
    *(_DWORD *)v55 = 134217984;
    v56 = *(double *)&v31;
    _os_log_impl(&dword_1DE3F6000, v27, OS_LOG_TYPE_DEFAULT, "FS2S1Encoder generates output_embedding of length %zu", v55, 0xCu);
  }
  Diagnostics::log(5, "FS2S1Encoder generates output_embedding of length %zu", v29, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30[5] - v30[4]) >> 3));
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v32 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30[8] - v30[7]) >> 3);
    *(_DWORD *)v55 = 134217984;
    v56 = *(double *)&v34;
    _os_log_impl(&dword_1DE3F6000, v32, OS_LOG_TYPE_DEFAULT, "FS2S1Encoder generates prompt_output_embedding of length %zu", v55, 0xCu);
  }
  Diagnostics::log(5, "FS2S1Encoder generates prompt_output_embedding of length %zu", v33, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30[8] - v30[7]) >> 3));
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v35 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30[11] - v30[10]) >> 3);
    *(_DWORD *)v55 = 134217984;
    v56 = *(double *)&v37;
    _os_log_impl(&dword_1DE3F6000, v35, OS_LOG_TYPE_DEFAULT, "FS2S1Encoder generates pred_output_embedding of length %zu", v55, 0xCu);
  }
  Diagnostics::log(5, "FS2S1Encoder generates pred_output_embedding of length %zu", v36, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30[11] - v30[10]) >> 3));
  v47 = v30;
  v48 = v54;
  if (v54)
  {
    v38 = (unint64_t *)&v54->__shared_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  v40 = *(_QWORD *)(a3 + 24);
  if (!v40)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v40 + 48))(v40, &v47);
  v41 = v48;
  if (v48)
  {
    v42 = (unint64_t *)&v48->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = v54;
  if (v54)
  {
    v45 = (unint64_t *)&v54->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
}

void sub_1DEAB8034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  uint64_t v17;

  if (a2)
  {
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
    __cxa_begin_catch(exception_object);
    (*(void (**)(_QWORD))(**(_QWORD **)(v17 + 8) + 56))(*(_QWORD *)(v17 + 8));
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1DEAB80AC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1DEAB80B8(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1DEAB80C0);
  __clang_call_terminate(a1);
}

void FS2S1EncoderBaseInference::prepare_inputs(_QWORD *a1, _QWORD *a2)
{
  int *v4;
  int *v5;
  void (***v6)(_QWORD, InferenceEngine::DataTensor **);
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void (***v12)(_QWORD, uint64_t *);
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  InferenceEngine::DataTensor *v34;
  std::__shared_weak_count *v35;
  float v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  void *__p;
  void *v40;
  uint64_t v41;
  void *v42[2];
  char v43;
  InferenceEngine::DataTensor *v44;
  std::__shared_weak_count *v45;

  std::string::basic_string[abi:ne180100]<0>(v42, "phone");
  v4 = *(int **)(*a2 + 32);
  v5 = *(int **)(*a2 + 40);
  v40 = 0;
  v41 = 0;
  __p = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>((char *)&__p, v4, v5, v5 - v4);
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&__p, &v44);
  if (__p)
  {
    v40 = __p;
    operator delete(__p);
  }
  if (v43 < 0)
    operator delete(v42[0]);
  InferenceEngine::DataTensor::unsqueeze(v44, 0);
  std::string::basic_string[abi:ne180100]<0>(v42, "phone_lens");
  v36 = (float)(unint64_t)((uint64_t)(*(_QWORD *)(*a2 + 40) - *(_QWORD *)(*a2 + 32)) >> 2);
  std::vector<float>::vector(&__p, 1uLL, &v36);
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&__p, &v37);
  if (__p)
  {
    v40 = __p;
    operator delete(__p);
  }
  if (v43 < 0)
    operator delete(v42[0]);
  v6 = (void (***)(_QWORD, InferenceEngine::DataTensor **))a1[1];
  v34 = v44;
  v35 = v45;
  if (v45)
  {
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  (**v6)(v6, &v34);
  v9 = v35;
  if (v35)
  {
    v10 = (unint64_t *)&v35->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (void (***)(_QWORD, uint64_t *))a1[1];
  v32 = v37;
  v33 = v38;
  if (v38)
  {
    v13 = (unint64_t *)&v38->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  (**v12)(v12, &v32);
  v15 = v33;
  if (v33)
  {
    v16 = (unint64_t *)&v33->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)a2[1];
  v30 = *a2;
  v31 = v18;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  (*(void (**)(_QWORD *, uint64_t *))(*a1 + 24))(a1, &v30);
  v21 = v31;
  if (v31)
  {
    v22 = (unint64_t *)&v31->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v38;
  if (v38)
  {
    v25 = (unint64_t *)&v38->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v45;
  if (v45)
  {
    v28 = (unint64_t *)&v45->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_1DEAB8388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20)
{
  uint64_t v20;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v20 - 48);
  _Unwind_Resume(a1);
}

void sub_1DEAB8404(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  uint64_t v20;

  if (__p)
    operator delete(__p);
  if (*(char *)(v20 - 49) < 0)
    operator delete(*(void **)(v20 - 72));
  JUMPOUT(0x1DEAB83FCLL);
}

void FS2S1EncoderBaseInference::get_outputs(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void **v8[3];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  char v13;
  InferenceEngine::DataTensor *v14;
  std::__shared_weak_count *v15;
  void ***v16;

  v3 = *(_QWORD *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "enc_output");
  (*(void (**)(InferenceEngine::DataTensor **__return_ptr, uint64_t, void **))(*(_QWORD *)v3 + 32))(&v14, v3, __p);
  if (v13 < 0)
    operator delete(__p[0]);
  InferenceEngine::DataTensor::get_3d_array<float>(v14, v8);
  v10 = 0;
  v11 = 0;
  v9 = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v9, (uint64_t)*v8[0], (uint64_t)v8[0][1], 0xAAAAAAAAAAAAAAABLL * (((char *)v8[0][1] - (char *)*v8[0]) >> 3));
  v16 = v8;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  v4 = (uint64_t *)(*a2 + 32);
  if (v4 != &v9)
    std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((uint64_t)v4, v9, v10, 0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 3));
  v8[0] = (void **)&v9;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v8);
  v5 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1DEAB8554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;

  a9 = (void **)&a12;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v12 - 40);
  _Unwind_Resume(a1);
}

void sub_1DEAB8598(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  JUMPOUT(0x1DEAB8590);
}

void FS2S1EncoderBaseInference::add_word_emb_inputs(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL4 parameter_value;
  _BOOL4 v6;
  void (***v7)(_QWORD, InferenceEngine::DataTensor **);
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void (***v13)(_QWORD, uint64_t *);
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  InferenceEngine::DataTensor *v27;
  std::__shared_weak_count *v28;
  float v29;
  void *__p[3];
  uint64_t v31;
  std::__shared_weak_count *v32;
  InferenceEngine::DataTensor *v33;
  std::__shared_weak_count *v34;
  const void *v35[2];
  char v36;

  v4 = *(_QWORD *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(v35, "word_emb");
  parameter_value = InferenceEngine::MilInferenceModel::get_parameter_value_if<BOOL>(*(_QWORD *)(v4 + 8), v35, 0);
  v6 = parameter_value;
  if (v36 < 0)
  {
    operator delete((void *)v35[0]);
    if (!v6)
      return;
  }
  else if (!parameter_value)
  {
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "word_emb");
  InferenceEngine::DataTensor::build_from_2d_array<float>((uint64_t **)(*(_QWORD *)a2 + 56), &v33);
  if (v36 < 0)
    operator delete((void *)v35[0]);
  InferenceEngine::DataTensor::unsqueeze(v33, 0);
  std::string::basic_string[abi:ne180100]<0>(v35, "word_emb_lens");
  v29 = (float)(0xAAAAAAAAAAAAAAABLL
              * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 64) - *(_QWORD *)(*(_QWORD *)a2 + 56)) >> 3));
  std::vector<float>::vector(__p, 1uLL, &v29);
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)__p, &v31);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v36 < 0)
    operator delete((void *)v35[0]);
  v7 = *(void (****)(_QWORD, InferenceEngine::DataTensor **))(a1 + 8);
  v27 = v33;
  v28 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  (**v7)(v7, &v27);
  v10 = v28;
  if (v28)
  {
    v11 = (unint64_t *)&v28->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *(void (****)(_QWORD, uint64_t *))(a1 + 8);
  v25 = v31;
  v26 = v32;
  if (v32)
  {
    v14 = (unint64_t *)&v32->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  (**v13)(v13, &v25);
  v16 = v26;
  if (v26)
  {
    v17 = (unint64_t *)&v26->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v32;
  if (v32)
  {
    v20 = (unint64_t *)&v32->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v34;
  if (v34)
  {
    v23 = (unint64_t *)&v34->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1DEAB881C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v18 - 72);
  _Unwind_Resume(a1);
}

void FS2S1EncoderPromptInference::prepare_inputs(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int *v5;
  int *v6;
  float *v7;
  char *v8;
  int64_t v9;
  float *v10;
  void (***v11)(_QWORD, InferenceEngine::DataTensor **);
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void (***v17)(_QWORD, uint64_t *);
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void (***v23)(_QWORD, uint64_t *);
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  void (***v30)(_QWORD, uint64_t *);
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  InferenceEngine::DataTensor *v59;
  std::__shared_weak_count *v60;
  void *v61[3];
  float v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  void *__p;
  void *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  void *v69[2];
  char v70;
  InferenceEngine::DataTensor *v71;
  std::__shared_weak_count *v72;
  float *v73;
  float *v74;
  uint64_t v75;

  v4 = *a2;
  v5 = *(int **)(*a2 + 32);
  v6 = *(int **)(v4 + 40);
  v74 = 0;
  v75 = 0;
  v73 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>((char *)&v73, v5, v6, v6 - v5);
  v7 = v73;
  v8 = *(char **)(a1 + 40);
  if (*v73 == *(float *)v8)
  {
    v9 = (char *)v74 - (char *)(v73 + 1);
    if (v74 == v73 + 1)
    {
      v10 = v73;
    }
    else
    {
      memmove(v73, v73 + 1, (char *)v74 - (char *)(v73 + 1));
      v10 = v73;
      v8 = *(char **)(a1 + 40);
    }
    v74 = (float *)((char *)v7 + v9);
    v7 = v10;
  }
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)&v73, (uint64_t)v7, v8, *(char **)(a1 + 48), (uint64_t)(*(_QWORD *)(a1 + 48) - (_QWORD)v8) >> 2);
  std::string::basic_string[abi:ne180100]<0>(v69, "phone");
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&v73, &v71);
  if (v70 < 0)
    operator delete(v69[0]);
  InferenceEngine::DataTensor::unsqueeze(v71, 0);
  std::string::basic_string[abi:ne180100]<0>(v69, "phone_lens");
  *(float *)v61 = (float)(unint64_t)(v74 - v73);
  std::vector<float>::vector(&__p, 1uLL, v61);
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&__p, &v67);
  if (__p)
  {
    v66 = __p;
    operator delete(__p);
  }
  if (v70 < 0)
    operator delete(v69[0]);
  std::string::basic_string[abi:ne180100]<0>(v69, "prompt_lens");
  InferenceEngine::DataTensor::get_shape(*(InferenceEngine::DataTensor **)(a1 + 24), 0, (char **)v61);
  v62 = (float)*((unint64_t *)v61[0] + 1);
  std::vector<float>::vector(&__p, 1uLL, &v62);
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&__p, &v63);
  if (__p)
  {
    v66 = __p;
    operator delete(__p);
  }
  if (v61[0])
  {
    v61[1] = v61[0];
    operator delete(v61[0]);
  }
  if (v70 < 0)
    operator delete(v69[0]);
  v11 = *(void (****)(_QWORD, InferenceEngine::DataTensor **))(a1 + 8);
  v59 = v71;
  v60 = v72;
  if (v72)
  {
    p_shared_owners = (unint64_t *)&v72->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  (**v11)(v11, &v59);
  v14 = v60;
  if (v60)
  {
    v15 = (unint64_t *)&v60->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(void (****)(_QWORD, uint64_t *))(a1 + 8);
  v57 = v67;
  v58 = v68;
  if (v68)
  {
    v18 = (unint64_t *)&v68->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  (**v17)(v17, &v57);
  v20 = v58;
  if (v58)
  {
    v21 = (unint64_t *)&v58->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = *(void (****)(_QWORD, uint64_t *))(a1 + 8);
  v24 = *(std::__shared_weak_count **)(a1 + 32);
  v55 = *(_QWORD *)(a1 + 24);
  v56 = v24;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  (**v23)(v23, &v55);
  v27 = v56;
  if (v56)
  {
    v28 = (unint64_t *)&v56->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = *(void (****)(_QWORD, uint64_t *))(a1 + 8);
  v53 = v63;
  v54 = v64;
  if (v64)
  {
    v31 = (unint64_t *)&v64->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  (**v30)(v30, &v53);
  v33 = v54;
  if (v54)
  {
    v34 = (unint64_t *)&v54->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = (std::__shared_weak_count *)a2[1];
  v51 = *a2;
  v52 = v36;
  if (v36)
  {
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, &v51);
  v39 = v52;
  if (v52)
  {
    v40 = (unint64_t *)&v52->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v64;
  if (v64)
  {
    v43 = (unint64_t *)&v64->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = v68;
  if (v68)
  {
    v46 = (unint64_t *)&v68->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = v72;
  if (v72)
  {
    v49 = (unint64_t *)&v72->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  if (v73)
  {
    v74 = v73;
    operator delete(v73);
  }
}

void sub_1DEAB8D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,void *__p,uint64_t a27)
{
  uint64_t v27;
  void *v29;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v27 - 128);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v27 - 88);
  v29 = *(void **)(v27 - 72);
  if (v29)
  {
    *(_QWORD *)(v27 - 64) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

void sub_1DEAB8E14(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  uint64_t v27;

  if (__p)
    operator delete(__p);
  if (*(char *)(v27 - 89) < 0)
    operator delete(*(void **)(v27 - 112));
  JUMPOUT(0x1DEAB8DF4);
}

void sub_1DEAB8E44()
{
  JUMPOUT(0x1DEAB8DF4);
}

void sub_1DEAB8E50()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  JUMPOUT(0x1DEAB8DFCLL);
}

void sub_1DEAB8E68()
{
  JUMPOUT(0x1DEAB8DFCLL);
}

void FS2S1EncoderPromptInference::get_outputs(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v8[3];
  void *__p[2];
  char v10;
  InferenceEngine::DataTensor *v11;
  std::__shared_weak_count *v12;
  void **v13;

  v3 = *(_QWORD *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "enc_output");
  (*(void (**)(InferenceEngine::DataTensor **__return_ptr, uint64_t, void **))(*(_QWORD *)v3 + 32))(&v11, v3, __p);
  if (v10 < 0)
    operator delete(__p[0]);
  InferenceEngine::DataTensor::get_3d_array<float>(v11, v8);
  v4 = *a2 + 32;
  if (v4 != v8[0])
    std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v4, *(_QWORD *)v8[0], *(_QWORD *)(v8[0] + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v8[0] + 8) - *(_QWORD *)v8[0]) >> 3));
  v13 = (void **)v8;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v13);
  v5 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1DEAB8F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  *(_QWORD *)(v18 - 24) = &a10;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 24));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v18 - 40);
  _Unwind_Resume(a1);
}

void FS2S1EncoderP2APromptInference::get_outputs(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  void *__p[2];
  char v19;
  InferenceEngine::DataTensor *v20;
  std::__shared_weak_count *v21;
  void **v22;

  v4 = *(_QWORD *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "enc_output");
  (*(void (**)(InferenceEngine::DataTensor **__return_ptr, uint64_t, void **))(*(_QWORD *)v4 + 32))(&v20, v4, __p);
  if (v19 < 0)
    operator delete(__p[0]);
  InferenceEngine::DataTensor::get_3d_array<float>(v20, &v16);
  v5 = *a2 + 32;
  if (v5 != (_QWORD)v16)
    std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v5, *(_QWORD *)v16, *(_QWORD *)(v16 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v16 + 8) - *(_QWORD *)v16) >> 3));
  v22 = (void **)&v16;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v22);
  v6 = InferenceEngine::DataTensor::accumulate_sum(*(InferenceEngine::DataTensor **)(a1 + 64));
  v7 = *(_QWORD *)(*a2 + 32);
  v8 = (int)v6;
  v17 = 0;
  v16 = 0uLL;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>(&v16, v7, v7 + 24 * (int)v6, (int)v6);
  v9 = *a2;
  std::vector<std::vector<int>>::__vdeallocate((uint64_t *)(*a2 + 56));
  *(_OWORD *)(v9 + 56) = v16;
  *(_QWORD *)(v9 + 72) = v17;
  v17 = 0;
  v16 = 0uLL;
  v22 = (void **)&v16;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v22);
  v10 = *(_QWORD *)(*a2 + 40);
  v11 = *(_QWORD *)(*a2 + 32) + 24 * v8;
  v17 = 0;
  v16 = 0uLL;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>(&v16, v11, v10, 0xAAAAAAAAAAAAAAABLL * ((v10 - v11) >> 3));
  v12 = *a2;
  std::vector<std::vector<int>>::__vdeallocate((uint64_t *)(v12 + 80));
  *(_OWORD *)(v12 + 80) = v16;
  *(_QWORD *)(v12 + 96) = v17;
  v17 = 0;
  v16 = 0uLL;
  v22 = (void **)&v16;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v22);
  v13 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1DEAB915C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;

  *(_QWORD *)(v16 - 40) = &a9;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v16 - 40));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1DEAB9194(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  JUMPOUT(0x1DEAB918CLL);
}

void FS2S1EncoderP2ADualPromptInference::inference(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  NSObject *v6;
  const char *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::chrono::steady_clock::time_point v16;
  NSObject *v17;
  std::chrono::steady_clock::time_point v18;
  std::chrono::steady_clock::time_point v19;
  const char *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  float *v26;
  float *v27;
  float *v28;
  InferenceEngine::DataTensor *v29;
  const void *v30;
  int size;
  InferenceEngine::DataTensor *v32;
  const void *v33;
  int v34;
  _BYTE *v35;
  uint64_t v36;
  InferenceEngine::DataTensor *v37;
  const void *v38;
  int v39;
  InferenceEngine::DataTensor *v40;
  const void *v41;
  int v42;
  _BYTE *v43;
  float *v44;
  float *v45;
  float v46;
  _BOOL4 v47;
  BOOL v48;
  NSObject *v49;
  const char *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  NSObject *v57;
  _BOOL4 v58;
  const char *v59;
  char *v60;
  unint64_t v61;
  NSObject *v62;
  const char *v63;
  unint64_t v64;
  NSObject *v65;
  const char *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  std::chrono::steady_clock::time_point v73;
  NSObject *v74;
  std::chrono::steady_clock::time_point v75;
  std::chrono::steady_clock::time_point v76;
  const char *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  char *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  NSObject *v90;
  _BOOL4 v91;
  const char *v92;
  unint64_t v93;
  unint64_t v94;
  NSObject *v95;
  std::chrono::steady_clock::time_point v96;
  std::chrono::steady_clock::time_point v97;
  const char *v98;
  NSObject *v99;
  const char *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  char *v110;
  std::__shared_weak_count *v111;
  char *v112;
  std::__shared_weak_count *v113;
  void *v114[2];
  char v115;
  _QWORD v116[2];
  char *v117;
  std::__shared_weak_count *v118;
  void *v119;
  _BYTE *v120;
  void *v121;
  _BYTE *v122;
  void *__dst;
  _BYTE *v124;
  char *v125;
  std::__shared_weak_count *v126;
  void *__p[2];
  char v128;
  _QWORD v129[2];
  char *v130;
  std::__shared_weak_count *v131;
  char *v132;
  std::__shared_weak_count *v133;
  char *v134;
  std::__shared_weak_count *v135;
  __int128 buf;
  uint64_t v137;

  v137 = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1DE3F6000, v6, OS_LOG_TYPE_DEBUG, "FS2S1Encoder inference begin.", (uint8_t *)&buf, 2u);
  }
  Diagnostics::log(7, "FS2S1Encoder inference begin.", v7);
  v8 = operator new(0x80uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA933078;
  v8[3] = 257;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_OWORD *)v8 + 7) = 0u;
  v134 = (char *)(v8 + 3);
  v135 = (std::__shared_weak_count *)v8;
  v9 = operator new(0x80uLL);
  v9[1] = 0;
  v9[2] = 0;
  *v9 = &off_1EA933078;
  v9[3] = 257;
  *((_OWORD *)v9 + 2) = 0u;
  *((_OWORD *)v9 + 3) = 0u;
  *((_OWORD *)v9 + 4) = 0u;
  *((_OWORD *)v9 + 5) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  *((_OWORD *)v9 + 7) = 0u;
  v132 = (char *)(v9 + 3);
  v133 = (std::__shared_weak_count *)v9;
  v10 = operator new(0x80uLL);
  v10[1] = 0;
  v10[2] = 0;
  *v10 = &off_1EA933078;
  v10[3] = 257;
  *((_OWORD *)v10 + 2) = 0u;
  *((_OWORD *)v10 + 3) = 0u;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 5) = 0u;
  *((_OWORD *)v10 + 6) = 0u;
  *((_OWORD *)v10 + 7) = 0u;
  v130 = (char *)(v10 + 3);
  v131 = (std::__shared_weak_count *)v10;
  v11 = (std::__shared_weak_count *)a2[1];
  v129[0] = *a2;
  v129[1] = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "semantic");
  FS2S1EncoderP2ADualPromptInference::prepare_inputs(a1, v129, (uint64_t **)__p);
  if (v128 < 0)
    operator delete(__p[0]);
  if (v11)
  {
    v14 = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v16.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v17 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v18.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf) = 134217984;
    *(double *)((char *)&buf + 4) = (double)((v18.__d_.__rep_ - v16.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v17, OS_LOG_TYPE_DEFAULT, "FS2S1Encoder inference time (semantic_prompt): %.3f s", (uint8_t *)&buf, 0xCu);
  }
  v19.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "FS2S1Encoder inference time (semantic_prompt): %.3f s", v20, (double)((v19.__d_.__rep_ - v16.__d_.__rep_) / 1000000) / 1000.0);
  v125 = v132;
  v126 = v133;
  if (v133)
  {
    v21 = (unint64_t *)&v133->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  (*(void (**)(uint64_t, char **))(*(_QWORD *)a1 + 16))(a1, &v125);
  v23 = v126;
  if (v126)
  {
    v24 = (unint64_t *)&v126->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  v27 = *(float **)(a1 + 88);
  v26 = *(float **)(a1 + 96);
  v28 = *(float **)(a1 + 112);
  if ((char *)v26 - (char *)v27 != *(_QWORD *)(a1 + 120) - (_QWORD)v28)
    goto LABEL_71;
  while (v27 != v26)
  {
    if (*v27 != *v28)
      goto LABEL_71;
    ++v27;
    ++v28;
  }
  v29 = *(InferenceEngine::DataTensor **)(a1 + 24);
  v30 = (const void *)*((_QWORD *)v29 + 11);
  size = InferenceEngine::DataTensor::get_size(v29);
  std::vector<float>::vector(&buf, size);
  memcpy((void *)buf, v30, 4 * size);
  v32 = *(InferenceEngine::DataTensor **)(a1 + 40);
  v33 = (const void *)*((_QWORD *)v32 + 11);
  v34 = InferenceEngine::DataTensor::get_size(v32);
  std::vector<float>::vector(&__dst, v34);
  memcpy(__dst, v33, 4 * v34);
  v35 = __dst;
  if (*((_QWORD *)&buf + 1) - (_QWORD)buf != v124 - (_BYTE *)__dst)
  {
LABEL_45:
    v47 = 0;
    if (!__dst)
      goto LABEL_47;
    goto LABEL_46;
  }
  if ((_QWORD)buf != *((_QWORD *)&buf + 1))
  {
    v36 = 0;
    while (*(float *)(buf + v36) == *(float *)((char *)__dst + v36))
    {
      v36 += 4;
      if ((_QWORD)buf + v36 == *((_QWORD *)&buf + 1))
        goto LABEL_36;
    }
    goto LABEL_45;
  }
LABEL_36:
  v37 = *(InferenceEngine::DataTensor **)(a1 + 56);
  v38 = (const void *)*((_QWORD *)v37 + 11);
  v39 = InferenceEngine::DataTensor::get_size(v37);
  std::vector<float>::vector(&v121, v39);
  memcpy(v121, v38, 4 * v39);
  v40 = *(InferenceEngine::DataTensor **)(a1 + 72);
  v41 = (const void *)*((_QWORD *)v40 + 11);
  v42 = InferenceEngine::DataTensor::get_size(v40);
  std::vector<float>::vector(&v119, v42);
  memcpy(v119, v41, 4 * v42);
  v43 = v121;
  if (v122 - (_BYTE *)v121 != v120 - (_BYTE *)v119)
  {
    v47 = 0;
    goto LABEL_144;
  }
  if (v121 != v122)
  {
    v44 = (float *)((char *)v121 + 4);
    v45 = (float *)v119;
    do
    {
      v46 = *v45++;
      v47 = *(v44 - 1) == v46;
      v48 = *(v44 - 1) != v46 || v44 == (float *)v122;
      ++v44;
    }
    while (!v48);
LABEL_144:
    if (!v119)
      goto LABEL_146;
    goto LABEL_145;
  }
  v47 = 1;
  if (v119)
  {
LABEL_145:
    v120 = v119;
    operator delete(v119);
    v43 = v121;
  }
LABEL_146:
  if (v43)
  {
    v122 = v43;
    operator delete(v43);
  }
  v35 = __dst;
  if (__dst)
  {
LABEL_46:
    v124 = v35;
    operator delete(v35);
  }
LABEL_47:
  if ((_QWORD)buf)
  {
    *((_QWORD *)&buf + 1) = buf;
    operator delete((void *)buf);
  }
  if (v47)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v49 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1DE3F6000, v49, OS_LOG_TYPE_DEFAULT, "acoustic_prompt is same as semantic_prompt, skip encoder inference with acoustic_prompt", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(5, "acoustic_prompt is same as semantic_prompt, skip encoder inference with acoustic_prompt", v50);
    v117 = v132;
    v118 = v133;
    if (v133)
    {
      v51 = (unint64_t *)&v133->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    v53 = *(_QWORD *)(a3 + 24);
    if (!v53)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v53 + 48))(v53, &v117);
    v54 = v118;
    if (v118)
    {
      v55 = (unint64_t *)&v118->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v57 = Diagnostics_GetLogObject(void)::__profile_log_default;
    v58 = os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT);
    v60 = v132;
    if (v58)
    {
      v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v132 + 8) - *((_QWORD *)v132 + 7)) >> 3);
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = v61;
      _os_log_impl(&dword_1DE3F6000, v57, OS_LOG_TYPE_DEFAULT, "FS2S1Encoder generates prompt_output_embedding of length %zu", (uint8_t *)&buf, 0xCu);
    }
    Diagnostics::log(5, "FS2S1Encoder generates prompt_output_embedding of length %zu", v59, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v60 + 8) - *((_QWORD *)v60 + 7)) >> 3));
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v62 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      v64 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v60 + 11) - *((_QWORD *)v60 + 10)) >> 3);
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = v64;
LABEL_118:
      _os_log_impl(&dword_1DE3F6000, v62, OS_LOG_TYPE_DEFAULT, "FS2S1Encoder generates pred_output_embedding of length %zu", (uint8_t *)&buf, 0xCu);
      goto LABEL_119;
    }
    goto LABEL_119;
  }
LABEL_71:
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v65 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1DE3F6000, v65, OS_LOG_TYPE_DEFAULT, "acoustic_prompt is different than semantic_prompt, run another encoder inference with acoustic_prompt", (uint8_t *)&buf, 2u);
  }
  Diagnostics::log(5, "acoustic_prompt is different than semantic_prompt, run another encoder inference with acoustic_prompt", v66);
  v67 = *a2;
  v68 = (std::__shared_weak_count *)a2[1];
  v116[0] = v67;
  v116[1] = v68;
  if (v68)
  {
    v69 = (unint64_t *)&v68->__shared_owners_;
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 1, v69));
  }
  std::string::basic_string[abi:ne180100]<0>(v114, "acoustic");
  FS2S1EncoderP2ADualPromptInference::prepare_inputs(a1, v116, (uint64_t **)v114);
  if (v115 < 0)
    operator delete(v114[0]);
  if (v68)
  {
    v71 = (unint64_t *)&v68->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v73.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v74 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v75.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf) = 134217984;
    *(double *)((char *)&buf + 4) = (double)((v75.__d_.__rep_ - v73.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v74, OS_LOG_TYPE_DEFAULT, "FS2S1Encoder inference time (acoustic_prompt): %.3f s", (uint8_t *)&buf, 0xCu);
  }
  v76.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "FS2S1Encoder inference time (acoustic_prompt): %.3f s", v77, (double)((v76.__d_.__rep_ - v73.__d_.__rep_) / 1000000) / 1000.0);
  v112 = v130;
  v113 = v131;
  if (v131)
  {
    v78 = (unint64_t *)&v131->__shared_owners_;
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 1, v78));
  }
  (*(void (**)(uint64_t, char **))(*(_QWORD *)a1 + 16))(a1, &v112);
  v80 = v113;
  if (v113)
  {
    v81 = (unint64_t *)&v113->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  v83 = v134;
  if (v134 != v130)
    std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((uint64_t)(v134 + 56), *((_QWORD *)v130 + 7), *((_QWORD *)v130 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v130 + 8) - *((_QWORD *)v130 + 7)) >> 3));
  if (v83 != v132)
    std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((uint64_t)(v83 + 80), *((_QWORD *)v132 + 10), *((_QWORD *)v132 + 11), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v132 + 11) - *((_QWORD *)v132 + 10)) >> 3));
  v110 = v83;
  v111 = v135;
  if (v135)
  {
    v84 = (unint64_t *)&v135->__shared_owners_;
    do
      v85 = __ldxr(v84);
    while (__stxr(v85 + 1, v84));
  }
  v86 = *(_QWORD *)(a3 + 24);
  if (!v86)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, char **))(*(_QWORD *)v86 + 48))(v86, &v110);
  v87 = v111;
  if (v111)
  {
    v88 = (unint64_t *)&v111->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v90 = Diagnostics_GetLogObject(void)::__profile_log_default;
  v91 = os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT);
  v60 = v134;
  if (v91)
  {
    v93 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v134 + 8) - *((_QWORD *)v134 + 7)) >> 3);
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v93;
    _os_log_impl(&dword_1DE3F6000, v90, OS_LOG_TYPE_DEFAULT, "FS2S1Encoder generates prompt_output_embedding of length %zu", (uint8_t *)&buf, 0xCu);
  }
  Diagnostics::log(5, "FS2S1Encoder generates prompt_output_embedding of length %zu", v92, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v60 + 8) - *((_QWORD *)v60 + 7)) >> 3), v110);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v62 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v94 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v60 + 11) - *((_QWORD *)v60 + 10)) >> 3);
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v94;
    goto LABEL_118;
  }
LABEL_119:
  Diagnostics::log(5, "FS2S1Encoder generates pred_output_embedding of length %zu", v63, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v60 + 11) - *((_QWORD *)v60 + 10)) >> 3));
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v95 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v96.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf) = 134217984;
    *(double *)((char *)&buf + 4) = (double)((v96.__d_.__rep_ - v16.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v95, OS_LOG_TYPE_DEFAULT, "FS2S1Encoder inference time: %.3f s", (uint8_t *)&buf, 0xCu);
  }
  v97.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "FS2S1Encoder inference time: %.3f s", v98, (double)((v97.__d_.__rep_ - v16.__d_.__rep_) / 1000000) / 1000.0);
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v99 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1DE3F6000, v99, OS_LOG_TYPE_DEBUG, "FS2S1Encoder inference end.", (uint8_t *)&buf, 2u);
  }
  Diagnostics::log(7, "FS2S1Encoder inference end.", v100);
  v101 = v131;
  if (v131)
  {
    v102 = (unint64_t *)&v131->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v133;
  if (v133)
  {
    v105 = (unint64_t *)&v133->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v135;
  if (v135)
  {
    v108 = (unint64_t *)&v135->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
}

void sub_1DEAB9F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  uint64_t v41;
  uint64_t v42;
  void *v44;

  if (a2)
  {
    if (__p)
      operator delete(__p);
    if (a30)
      operator delete(a30);
    v44 = *(void **)(v42 - 144);
    if (v44)
    {
      *(_QWORD *)(v42 - 136) = v44;
      operator delete(v44);
    }
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v42 - 192);
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v42 - 176);
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v42 - 160);
    __cxa_begin_catch(exception_object);
    (*(void (**)(_QWORD))(**(_QWORD **)(v41 + 8) + 56))(*(_QWORD *)(v41 + 8));
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1DEABA0D0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1DEABA0DC(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1DEABA0E4);
  __clang_call_terminate(a1);
}

void FS2S1EncoderP2ADualPromptInference::get_outputs(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD v14[3];
  void *v15[2];
  char v16;
  InferenceEngine::DataTensor *v17;
  std::__shared_weak_count *v18;
  void *__p[2];
  char v20;
  InferenceEngine::DataTensor *v21;
  std::__shared_weak_count *v22;
  void **v23;

  v4 = *(_QWORD *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "prompt_enc_output");
  (*(void (**)(InferenceEngine::DataTensor **__return_ptr, uint64_t, void **))(*(_QWORD *)v4 + 32))(&v21, v4, __p);
  if (v20 < 0)
    operator delete(__p[0]);
  v5 = *(_QWORD *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(v15, "pred_enc_output");
  (*(void (**)(InferenceEngine::DataTensor **__return_ptr, uint64_t, void **))(*(_QWORD *)v5 + 32))(&v17, v5, v15);
  if (v16 < 0)
    operator delete(v15[0]);
  InferenceEngine::DataTensor::get_3d_array<float>(v21, v14);
  v6 = *a2 + 56;
  if (v6 != v14[0])
    std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v6, *(_QWORD *)v14[0], *(_QWORD *)(v14[0] + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v14[0] + 8) - *(_QWORD *)v14[0]) >> 3));
  v23 = (void **)v14;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v23);
  InferenceEngine::DataTensor::get_3d_array<float>(v17, v14);
  v7 = *a2 + 80;
  if (v7 != v14[0])
    std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v7, *(_QWORD *)v14[0], *(_QWORD *)(v14[0] + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v14[0] + 8) - *(_QWORD *)v14[0]) >> 3));
  v23 = (void **)v14;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v23);
  v8 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v22;
  if (v22)
  {
    v12 = (unint64_t *)&v22->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1DEABA2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  *(_QWORD *)(v18 - 40) = &a9;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 40));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v18 - 56);
  _Unwind_Resume(a1);
}

void sub_1DEABA300(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  JUMPOUT(0x1DEABA2F8);
}

void FS2S1EncoderP2ADualPromptInference::prepare_inputs(uint64_t a1, _QWORD *a2, uint64_t **a3)
{
  int v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  float *v9;
  char *v10;
  int64_t v11;
  float *v12;
  void (***v13)(_QWORD, InferenceEngine::DataTensor **);
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void (***v19)(_QWORD, uint64_t *);
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void (***v25)(_QWORD, InferenceEngine::DataTensor **);
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  void (***v31)(_QWORD, uint64_t *);
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  void (***v37)(_QWORD, uint64_t *);
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  void *exception;
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  InferenceEngine::DataTensor *v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  InferenceEngine::DataTensor *v75;
  std::__shared_weak_count *v76;
  void *v77[3];
  float v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  void *__p;
  void *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  void *v85[2];
  char v86;
  InferenceEngine::DataTensor *v87;
  std::__shared_weak_count *v88;
  float *v89;
  float *v90;
  uint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  InferenceEngine::DataTensor *v94;
  std::__shared_weak_count *v95;
  char *v96;
  char *v97;
  uint64_t v98;

  v96 = 0;
  v97 = 0;
  v98 = 0;
  v94 = 0;
  v95 = 0;
  v92 = 0;
  v93 = 0;
  v5 = *((char *)a3 + 23);
  if (v5 < 0)
  {
    if (a3[1] != (uint64_t *)8)
      goto LABEL_109;
    a3 = (uint64_t **)*a3;
  }
  else if (v5 != 8)
  {
LABEL_109:
    exception = __cxa_allocate_exception(0x10uLL);
    StringFormatter::StringFormatter((StringFormatter *)&v89, "prompt_type must be set to either semantic or acoustic");
    MEMORY[0x1DF0EC99C](exception, &v89);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (*a3 == (uint64_t *)0x6369746E616D6573)
  {
    if (&v96 != (char **)(a1 + 88))
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v96, *(char **)(a1 + 88), *(_QWORD *)(a1 + 96), (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 2);
    std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100](&v94, (uint64_t *)(a1 + 24));
    v6 = (uint64_t *)(a1 + 56);
  }
  else
  {
    if (*a3 != (uint64_t *)0x63697473756F6361)
      goto LABEL_109;
    if (&v96 != (char **)(a1 + 112))
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v96, *(char **)(a1 + 112), *(_QWORD *)(a1 + 120), (uint64_t)(*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) >> 2);
    std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100](&v94, (uint64_t *)(a1 + 40));
    v6 = (uint64_t *)(a1 + 72);
  }
  std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100](&v92, v6);
  v7 = *(int **)(*a2 + 32);
  v8 = *(int **)(*a2 + 40);
  v90 = 0;
  v91 = 0;
  v89 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>((char *)&v89, v7, v8, v8 - v7);
  v9 = v89;
  v10 = v96;
  if (*v89 == *(float *)v96)
  {
    v11 = (char *)v90 - (char *)(v89 + 1);
    if (v90 == v89 + 1)
    {
      v12 = v89;
    }
    else
    {
      memmove(v89, v89 + 1, (char *)v90 - (char *)(v89 + 1));
      v12 = v89;
      v10 = v96;
    }
    v90 = (float *)((char *)v9 + v11);
    v9 = v12;
  }
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)&v89, (uint64_t)v9, v10, v97, (v97 - v10) >> 2);
  std::string::basic_string[abi:ne180100]<0>(v85, "phone");
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&v89, &v87);
  if (v86 < 0)
    operator delete(v85[0]);
  InferenceEngine::DataTensor::unsqueeze(v87, 0);
  std::string::basic_string[abi:ne180100]<0>(v85, "phone_lens");
  *(float *)v77 = (float)(unint64_t)(v90 - v89);
  std::vector<float>::vector(&__p, 1uLL, v77);
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&__p, &v83);
  if (__p)
  {
    v82 = __p;
    operator delete(__p);
  }
  if (v86 < 0)
    operator delete(v85[0]);
  std::string::basic_string[abi:ne180100]<0>(v85, "prompt_lens");
  InferenceEngine::DataTensor::get_shape(v94, 0, (char **)v77);
  v78 = (float)*((unint64_t *)v77[0] + 1);
  std::vector<float>::vector(&__p, 1uLL, &v78);
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&__p, &v79);
  if (__p)
  {
    v82 = __p;
    operator delete(__p);
  }
  if (v77[0])
  {
    v77[1] = v77[0];
    operator delete(v77[0]);
  }
  if (v86 < 0)
    operator delete(v85[0]);
  v13 = *(void (****)(_QWORD, InferenceEngine::DataTensor **))(a1 + 8);
  v75 = v87;
  v76 = v88;
  if (v88)
  {
    p_shared_owners = (unint64_t *)&v88->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  (**v13)(v13, &v75);
  v16 = v76;
  if (v76)
  {
    v17 = (unint64_t *)&v76->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = *(void (****)(_QWORD, uint64_t *))(a1 + 8);
  v73 = v83;
  v74 = v84;
  if (v84)
  {
    v20 = (unint64_t *)&v84->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  (**v19)(v19, &v73);
  v22 = v74;
  if (v74)
  {
    v23 = (unint64_t *)&v74->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = *(void (****)(_QWORD, InferenceEngine::DataTensor **))(a1 + 8);
  v71 = v94;
  v72 = v95;
  if (v95)
  {
    v26 = (unint64_t *)&v95->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  (**v25)(v25, &v71);
  v28 = v72;
  if (v72)
  {
    v29 = (unint64_t *)&v72->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = *(void (****)(_QWORD, uint64_t *))(a1 + 8);
  v69 = v79;
  v70 = v80;
  if (v80)
  {
    v32 = (unint64_t *)&v80->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  (**v31)(v31, &v69);
  v34 = v70;
  if (v70)
  {
    v35 = (unint64_t *)&v70->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = *(void (****)(_QWORD, uint64_t *))(a1 + 8);
  v67 = v92;
  v68 = v93;
  if (v93)
  {
    v38 = (unint64_t *)&v93->__shared_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  (**v37)(v37, &v67);
  v40 = v68;
  if (v68)
  {
    v41 = (unint64_t *)&v68->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = (std::__shared_weak_count *)a2[1];
  v65 = *a2;
  v66 = v43;
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, &v65);
  v46 = v66;
  if (v66)
  {
    v47 = (unint64_t *)&v66->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = v80;
  if (v80)
  {
    v50 = (unint64_t *)&v80->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = v84;
  if (v84)
  {
    v53 = (unint64_t *)&v84->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = v88;
  if (v88)
  {
    v56 = (unint64_t *)&v88->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
  v58 = v93;
  if (v93)
  {
    v59 = (unint64_t *)&v93->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = v95;
  if (v95)
  {
    v62 = (unint64_t *)&v95->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (v96)
  {
    v97 = v96;
    operator delete(v96);
  }
}

void sub_1DEABA9E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  void *v31;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v30 - 104);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v30 - 88);
  v31 = *(void **)(v30 - 72);
  if (v31)
  {
    *(_QWORD *)(v30 - 64) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

void FS2S1EncoderModule::~FS2S1EncoderModule(FS2S1EncoderModule *this)
{
  FS2S1EncoderModule::~FS2S1EncoderModule(this);
  JUMPOUT(0x1DF0ED014);
}

{
  *(_QWORD *)this = &off_1EA91F1B0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)this + 46, *((unsigned __int8 *)this + 360));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 344);
  std::mutex::~mutex((std::mutex *)((char *)this + 280));
  Module::~Module(this);
}

void FS2S1EncoderModule::prepare(FS2S1EncoderModule *this)
{
  NSObject *v2;
  const char *v3;
  char *v4;
  char *v5;
  unint64_t *v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  char *v31;
  std::__shared_weak_count *v32;
  char *v33;
  std::__shared_weak_count *v34;
  char *v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  uint8_t buf[8];
  __int128 v39;
  void *v40;

  if (*((_BYTE *)this + 272))
    return;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v2 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v2, OS_LOG_TYPE_DEFAULT, "Prepare inference.", buf, 2u);
  }
  Diagnostics::log(5, "Prepare inference.", v3);
  v4 = (char *)operator new(0x208uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1EA9330E8;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_OWORD *)(v4 + 232) = 0u;
  *(_OWORD *)(v4 + 248) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 264) = 0u;
  *(_OWORD *)(v4 + 280) = 0u;
  *(_OWORD *)(v4 + 296) = 0u;
  *(_OWORD *)(v4 + 312) = 0u;
  *(_OWORD *)(v4 + 328) = 0u;
  *(_OWORD *)(v4 + 344) = 0u;
  *(_OWORD *)(v4 + 360) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_WORD *)v4 + 12) = 257;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  *((_OWORD *)v4 + 10) = 0u;
  *((_OWORD *)v4 + 11) = 0u;
  *((_OWORD *)v4 + 12) = 0u;
  *((_OWORD *)v4 + 13) = 0u;
  *((_OWORD *)v4 + 14) = 0u;
  *((_OWORD *)v4 + 15) = 0u;
  *((_OWORD *)v4 + 16) = 0u;
  *((_OWORD *)v4 + 17) = 0u;
  *((_OWORD *)v4 + 18) = 0u;
  *((_OWORD *)v4 + 19) = 0u;
  *((_OWORD *)v4 + 20) = 0u;
  *((_OWORD *)v4 + 21) = 0u;
  *((_OWORD *)v4 + 22) = 0u;
  *(_OWORD *)(v4 + 488) = 0u;
  *(_OWORD *)(v4 + 504) = 0u;
  *(_OWORD *)(v4 + 456) = 0u;
  *(_OWORD *)(v4 + 472) = 0u;
  *(_OWORD *)(v4 + 424) = 0u;
  *(_OWORD *)(v4 + 440) = 0u;
  *(_OWORD *)(v4 + 392) = 0u;
  *(_OWORD *)(v4 + 408) = 0u;
  *(_OWORD *)(v4 + 376) = 0u;
  *(_QWORD *)&v37 = v4 + 24;
  *((_QWORD *)&v37 + 1) = v4;
  std::vector<int>::resize((std::vector<int> *)(v4 + 56), 0xC8uLL);
  v4[26] = 1;
  v5 = (char *)operator new(0xB0uLL);
  *((_QWORD *)v5 + 1) = 0;
  v6 = (unint64_t *)(v5 + 8);
  *(_QWORD *)v5 = &off_1EA932E10;
  *(_OWORD *)(v5 + 24) = 0u;
  *((_QWORD *)v5 + 2) = 0;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 152) = 0u;
  *((_QWORD *)v5 + 21) = 0;
  v35 = v5 + 24;
  v36 = (std::__shared_weak_count *)v5;
  v7 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v7 + 8) = 0u;
  *((_OWORD *)v7 + 2) = 0u;
  *(_QWORD *)v7 = &off_1EA932198;
  *((_QWORD *)v7 + 3) = v7 + 32;
  v33 = v7 + 24;
  v34 = (std::__shared_weak_count *)v7;
  Agglomerate::set<std::shared_ptr<TacotronFeature>>((uint64_t)(v7 + 24), &v37);
  *(_QWORD *)buf = &v40;
  v9 = v8[5];
  if (v9)
  {
    *(_QWORD *)buf = &off_1EA923288;
    *(_QWORD *)&v39 = v5 + 24;
    *((_QWORD *)&v39 + 1) = v5;
    do
      v10 = __ldxr(v6);
    while (__stxr(v10 + 1, v6));
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v9 + 8, &v39);
    *(_QWORD *)buf = &off_1EA923288;
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v7 = (char *)v34;
    v31 = v33;
    v32 = v34;
    if (!v34)
      goto LABEL_24;
  }
  else
  {
    v14 = (_QWORD *)operator new();
    *v14 = &off_1EA923288;
    v14[1] = v5 + 24;
    v14[2] = v5;
    do
      v15 = __ldxr(v6);
    while (__stxr(v15 + 1, v6));
    v16 = v8[5];
    v8[5] = (uint64_t)v14;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v31 = v7 + 24;
    v32 = (std::__shared_weak_count *)v7;
  }
  v17 = (unint64_t *)(v7 + 8);
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
LABEL_24:
  (*(void (**)(FS2S1EncoderModule *, char **))(*(_QWORD *)this + 80))(this, &v31);
  v19 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v34;
  if (v34)
  {
    v23 = (unint64_t *)&v34->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v36;
  if (v36)
  {
    v26 = (unint64_t *)&v36->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
  if (*((_QWORD *)&v37 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_1DEABAFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void FS2S1EncoderModule::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  const char *v10;
  void (***v11)(_QWORD, uint64_t *, _QWORD *);
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint8_t buf[8];
  uint64_t v25;
  std::__shared_weak_count *v26;
  _QWORD v27[3];
  _QWORD *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 8);
  v5 = *(std::__shared_weak_count **)(*(_QWORD *)v4 + 16);
  v25 = v6;
  v26 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v9 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v9, OS_LOG_TYPE_DEFAULT, "FS2S1Encoder module start.", buf, 2u);
  }
  Diagnostics::log(5, "FS2S1Encoder module start.", v10);
  std::mutex::lock((std::mutex *)(a1 + 280));
  *(_BYTE *)(a1 + 272) = 1;
  v11 = *(void (****)(_QWORD, uint64_t *, _QWORD *))(a1 + 344);
  v22 = v6;
  v23 = v5;
  if (v5)
  {
    v12 = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v27[0] = &off_1EA92F880;
  v27[1] = a1;
  v27[2] = a2;
  v28 = v27;
  (**v11)(v11, &v22, v27);
  v14 = v28;
  if (v28 == v27)
  {
    v15 = 4;
    v14 = v27;
    goto LABEL_15;
  }
  if (v28)
  {
    v15 = 5;
LABEL_15:
    (*(void (**)(_QWORD *))(*v14 + 8 * v15))(v14);
  }
  v16 = v23;
  if (v23)
  {
    v17 = (unint64_t *)&v23->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  std::mutex::unlock((std::mutex *)(a1 + 280));
  v19 = v26;
  if (v26)
  {
    v20 = (unint64_t *)&v26->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1DEABB218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  std::mutex *v17;
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a17;
  if (a17 == v18)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::mutex::unlock(v17);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void std::__function::__func<FS2S1EncoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<FS2S1EncoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<SemanticFeature>)>::~__func()
{
  JUMPOUT(0x1DF0ED014);
}

__n128 std::__function::__func<FS2S1EncoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<FS2S1EncoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<SemanticFeature>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1EA92F880;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<FS2S1EncoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<FS2S1EncoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<SemanticFeature>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1EA92F880;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<FS2S1EncoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<FS2S1EncoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<SemanticFeature>)>::operator()(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v2;
  _BYTE *v3;
  NSObject *v4;
  const char *v5;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  __int128 v38;
  uint8_t buf[8];
  __int128 v40;
  void *v41;

  v2 = (std::__shared_weak_count *)a2[1];
  *(_QWORD *)&v38 = *a2;
  *((_QWORD *)&v38 + 1) = v2;
  *a2 = 0;
  a2[1] = 0;
  v3 = *(_BYTE **)(a1 + 8);
  if (v3[160])
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v4 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1DE3F6000, v4, OS_LOG_TYPE_DEFAULT, "FS2S1Encoder inference cancelled.", buf, 2u);
    }
    Diagnostics::log(5, "FS2S1Encoder inference cancelled.", v5, (_QWORD)v38);
    if (!v2)
      return 1;
LABEL_42:
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    return 1;
  }
  v7 = (std::__shared_weak_count *)operator new(0x30uLL);
  *(_OWORD *)&v7->__shared_owners_ = 0u;
  v8 = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932198;
  *(_OWORD *)&v7[1].__shared_owners_ = 0u;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)&v7[1].__shared_owners_;
  v9 = (uint64_t)&v7[1];
  v10 = *(uint64_t **)(a1 + 16);
  v11 = *v10;
  {
    v14 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    v13 = *(std::__shared_weak_count **)(*(_QWORD *)v12 + 16);
    if (v13)
    {
      v15 = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    *(_QWORD *)buf = &v41;
    v18 = v17[5];
    if (v18)
    {
      *(_QWORD *)buf = &off_1EA923288;
      *(_QWORD *)&v40 = v14;
      *((_QWORD *)&v40 + 1) = v13;
      if (v13)
      {
        v19 = (unint64_t *)&v13->__shared_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v18 + 8, &v40);
      *(_QWORD *)buf = &off_1EA923288;
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
      if (*((_QWORD *)&v40 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
    else
    {
      v24 = (_QWORD *)operator new();
      *v24 = &off_1EA923288;
      v24[1] = v14;
      v24[2] = v13;
      if (v13)
      {
        v25 = (unint64_t *)&v13->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      v27 = v17[5];
      v17[5] = (uint64_t)v24;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    }
    if (v13)
    {
      v28 = (unint64_t *)&v13->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  Agglomerate::set<std::shared_ptr<SemanticFeature>>(v9, &v38);
  *(_QWORD *)buf = v7 + 1;
  *(_QWORD *)&v40 = v7;
  do
    v30 = __ldxr(v8);
  while (__stxr(v30 + 1, v8));
  (*(void (**)(_BYTE *, uint8_t *))(*(_QWORD *)v3 + 72))(v3, buf);
  v31 = (std::__shared_weak_count *)v40;
  if ((_QWORD)v40)
  {
    v32 = (unint64_t *)(v40 + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  do
    v34 = __ldaxr(v8);
  while (__stlxr(v34 - 1, v8));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
    goto LABEL_42;
  return 1;
}

void sub_1DEABB63C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12)
{
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;

  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<FS2S1EncoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<FS2S1EncoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<SemanticFeature>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<FS2S1EncoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<FS2S1EncoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<SemanticFeature>)>::target_type()
{
}

uint64_t FS2S1EncoderPromptInference::FS2S1EncoderPromptInference(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  std::string v28;
  std::string v29;
  void *__p[2];
  uint64_t v31;
  void *v32[3];

  v7 = (std::__shared_weak_count *)a3[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = *a4;
  v11 = (std::__shared_weak_count *)a4[1];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    *(_QWORD *)a1 = off_1EA920E60;
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v11;
    do
      v14 = __ldxr(v12);
    while (__stxr(v14 + 1, v12));
    do
      v15 = __ldaxr(v12);
    while (__stlxr(v15 - 1, v12));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    *(_QWORD *)a1 = off_1EA920E60;
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = 0;
  }
  if (v7)
  {
    v16 = (unint64_t *)&v7->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)a1 = off_1EA921398;
  *(_OWORD *)(a1 + 40) = 0u;
  v18 = (void **)(a1 + 40);
  *(_QWORD *)(a1 + 56) = 0;
  v19 = *a3;
  v20 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "prompt_duration");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v20, &v29);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v19 + 40))(__p, v19, 1717662579, &v29, 0);
  InferenceEngine::DataUtils::read_vector_from_file<float>(v32);
  if (SHIBYTE(v31) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  v21 = *a3;
  v22 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "prompt_phones");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v22, &v28);
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v21 + 40))(&v29, v21, 1717662579, &v28, 0);
  InferenceEngine::DataUtils::read_vector_from_file<float>(__p);
  v23 = *v18;
  if (*v18)
  {
    *(_QWORD *)(a1 + 48) = v23;
    operator delete(v23);
    *v18 = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 56) = v31;
  __p[1] = 0;
  v31 = 0;
  __p[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, "prompt_duration");
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)v32, &v29);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a1 + 24, (__int128 *)&v29);
  size = (std::__shared_weak_count *)v29.__r_.__value_.__l.__size_;
  if (v29.__r_.__value_.__l.__size_)
  {
    v25 = (unint64_t *)(v29.__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (SHIBYTE(v31) < 0)
    operator delete(__p[0]);
  InferenceEngine::DataTensor::unsqueeze(*(InferenceEngine::DataTensor **)(a1 + 24), 0);
  if (v32[0])
  {
    v32[1] = v32[0];
    operator delete(v32[0]);
  }
  return a1;
}

void sub_1DEABBA9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28)
{
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  void *v34;

  if (__p)
    operator delete(__p);
  v34 = *v32;
  if (*v32)
  {
    v28[6] = v34;
    operator delete(v34);
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v30);
  *v28 = v31;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v29);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<FS2S1EncoderP2ADualPromptInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA90B138;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FS2S1EncoderP2ADualPromptInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA90B138;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<FS2S1EncoderP2ADualPromptInference>::__on_zero_shared(_QWORD *a1)
{
  void *v2;
  void *v3;

  a1[3] = off_1EA90A958;
  v2 = (void *)a1[17];
  if (v2)
  {
    a1[18] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 12));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 10));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 8));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 6));
  a1[3] = off_1EA920E60;
  return std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
}

void std::__shared_ptr_emplace<FS2S1EncoderP2APromptInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9351B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FS2S1EncoderP2APromptInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9351B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<FS2S1EncoderP2APromptInference>::__on_zero_shared(_QWORD *a1)
{
  void *v2;
  void *v3;

  a1[3] = off_1EA921C78;
  v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 11));
  a1[3] = off_1EA921398;
  v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 6));
  a1[3] = off_1EA920E60;
  return std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
}

void std::__shared_ptr_emplace<FS2S1EncoderPromptInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934C78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FS2S1EncoderPromptInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934C78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<FS2S1EncoderPromptInference>::__on_zero_shared(_QWORD *a1)
{
  void *v2;

  a1[3] = off_1EA921398;
  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 6));
  a1[3] = off_1EA920E60;
  return std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
}

void std::__shared_ptr_emplace<FS2S1EncoderBaseInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934930;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FS2S1EncoderBaseInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934930;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<FS2S1EncoderBaseInference>::__on_zero_shared(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = off_1EA920E60;
  return std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 32);
}

uint64_t FS2S1EncoderModule::FS2S1EncoderModule(uint64_t a1, char *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  const char *v15;
  std::__shared_weak_count *v16;
  __int128 **v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  __int128 *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::string *v34;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  std::string::size_type v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *size;
  unint64_t *v56;
  unint64_t v57;
  void **v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  __int128 v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v108;
  __int128 v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  __int128 v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t *v129;
  unint64_t *v130;
  unint64_t v131;
  __int128 v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t *v136;
  unint64_t *v137;
  unint64_t v138;
  void **v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  unint64_t *v162;
  unint64_t v163;
  __int128 v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  void *v175;
  std::string *v176;
  void *exception;
  void **v178;
  InferenceEngine::DataTensor **v179;
  InferenceEngine::DataTensor **v180;
  __int128 v181;
  __int128 v182;
  InferenceEngine::DataTensor **v183;
  _OWORD *v184;
  std::string v185;
  _BYTE v186[8];
  uint64_t *v187;
  char v188[8];
  uint64_t *v189;
  void *v190[2];
  char v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  uint64_t v194[2];
  std::string v195;
  std::string __p;
  std::string v197;
  std::string v198;
  std::string v199;
  __int128 v200;
  uint64_t v201;
  std::string v202;

  v6 = *(std::__shared_weak_count **)(a3 + 8);
  v194[0] = *(_QWORD *)a3;
  v194[1] = (uint64_t)v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  Module::Module(a1, a2, v194);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *(_QWORD *)a1 = &off_1EA91F1B0;
  *(_BYTE *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 850045863;
  *(_QWORD *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 345) = 0u;
  v184 = (_OWORD *)(a1 + 344);
  SharedObjectPool::get<VoiceConfig>(&v192, *(__int128 ***)a3);
  v11 = v192;
  v12 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "model_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v12, &v202);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v11 + 40))(v190, v11, 1717662579, &v202, 0);
  if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v202.__r_.__value_.__l.__data_);
  InferenceEngine::Utils::read_json_from_file((char *)v190, (uint64_t)v188);
  std::string::basic_string[abi:ne180100]<0>(&v202, "model_parameters");
  LOBYTE(v200) = 0;
  *((_QWORD *)&v200 + 1) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>(v188, (const void **)&v202.__r_.__value_.__l.__data_, (unsigned __int8 *)&v200, (uint64_t)v186);
  v13 = *(unsigned __int8 *)(a1 + 360);
  *(_BYTE *)(a1 + 360) = v186[0];
  v186[0] = v13;
  v14 = *(uint64_t **)(a1 + 368);
  *(_QWORD *)(a1 + 368) = v187;
  v187 = v14;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v187, v13);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v200 + 1, v200);
  if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v202.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v202, "model_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("default", a2, (const void **)&v202.__r_.__value_.__l.__data_, &v185);
  if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v202.__r_.__value_.__l.__data_);
  v15 = (const char *)(a1 + 184);
  v17 = *(__int128 ***)a3;
  v16 = *(std::__shared_weak_count **)(a3 + 8);
  if (v16)
  {
    v18 = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = (std::__shared_weak_count *)v17[3];
  if (v20 && (v21 = std::__shared_weak_count::lock(v20)) != 0)
  {
    v22 = v21;
    v23 = v17[2];
    if (v23
      && (v24 = (uint64_t)v23 + 8,
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)v23 + 1, (unsigned __int8 *)(a1 + 184))))
    {
      v202.__r_.__value_.__r.__words[0] = a1 + 184;
      v25 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v24, (unsigned __int8 *)(a1 + 184), (__int128 **)&v202);
      v27 = *((_QWORD *)v25 + 5);
      v26 = (std::__shared_weak_count *)*((_QWORD *)v25 + 6);
      if (v26)
      {
        v28 = (unint64_t *)&v26->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
    }
    else
    {
      v26 = 0;
      v27 = 0;
    }
    v30 = (unint64_t *)&v22->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  else
  {
    v26 = 0;
    v27 = 0;
  }
  if (v16)
  {
    v32 = (unint64_t *)&v16->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (!v27)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a1 + 207) < 0)
      v15 = *(const char **)v15;
    StringFormatter::StringFormatter((StringFormatter *)&v202, "Persitent module '%s' is null", v15);
    MEMORY[0x1DF0EC99C](exception, &v202);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if ((SHIBYTE(v185.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v34 = &v185;
    switch(*((_BYTE *)&v185.__r_.__value_.__s + 23))
    {
      case 3:
        if (LOWORD(v185.__r_.__value_.__l.__data_) != 12912 || v185.__r_.__value_.__s.__data_[2] != 97)
          goto LABEL_318;
        goto LABEL_51;
      case 6:
        if (LODWORD(v185.__r_.__value_.__l.__data_) != 1836020336 || WORD2(v185.__r_.__value_.__r.__words[0]) != 29808)
          goto LABEL_318;
        goto LABEL_170;
      case 7:
        if (LODWORD(v185.__r_.__value_.__l.__data_) != 1634100580
          || *(_DWORD *)((char *)v185.__r_.__value_.__r.__words + 3) != 1953264993)
        {
          goto LABEL_318;
        }
        goto LABEL_129;
      case 8:
        goto LABEL_144;
      default:
        goto LABEL_318;
    }
  }
  switch(v185.__r_.__value_.__l.__size_)
  {
    case 3uLL:
      if (*(_WORD *)v185.__r_.__value_.__l.__data_ != 12912 || *(_BYTE *)(v185.__r_.__value_.__r.__words[0] + 2) != 97)
        goto LABEL_318;
LABEL_51:
      v37 = *(_OWORD *)(v27 + 296);
      v181 = v37;
      v38 = *(std::__shared_weak_count **)(v27 + 304);
      if (*((_QWORD *)&v37 + 1))
      {
        v39 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      v42 = *(_QWORD *)(v27 + 312);
      v41 = *(std::__shared_weak_count **)(v27 + 320);
      if (v41)
      {
        v43 = (unint64_t *)&v41->__shared_owners_;
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      v45 = operator new(0x80uLL);
      v46 = v45;
      v45[1] = 0;
      v45[2] = 0;
      *v45 = &off_1EA9351B8;
      if (v41)
      {
        v47 = (unint64_t *)&v41->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      *(_OWORD *)&v197.__r_.__value_.__l.__data_ = v181;
      if (v38)
      {
        v49 = (unint64_t *)&v38->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
      __p.__r_.__value_.__r.__words[0] = v42;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v41;
      if (v41)
      {
        v51 = (unint64_t *)&v41->__shared_owners_;
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
      }
      FS2S1EncoderPromptInference::FS2S1EncoderPromptInference((uint64_t)(v45 + 3), (uint64_t)a2, (uint64_t *)&v197, (uint64_t *)&__p);
      if (v41)
      {
        v53 = (unint64_t *)&v41->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      size = (std::__shared_weak_count *)v197.__r_.__value_.__l.__size_;
      if (v197.__r_.__value_.__l.__size_)
      {
        v56 = (unint64_t *)(v197.__r_.__value_.__l.__size_ + 8);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      *(_OWORD *)(v46 + 13) = 0u;
      v58 = (void **)(v46 + 13);
      v46[3] = off_1EA921C78;
      *(_OWORD *)(v46 + 11) = 0u;
      v46[15] = 0;
      v59 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "prompt_duration");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v59, &v199);
      (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t, std::string *, _QWORD))(*(_QWORD *)v181 + 40))(&v200, v181, 1717662579, &v199, 0);
      InferenceEngine::DataUtils::read_vector_from_file<float>(&v202);
      if (SHIBYTE(v201) < 0)
        operator delete((void *)v200);
      if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v199.__r_.__value_.__l.__data_);
      v60 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "prompt_phones");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v60, &v198);
      (*(void (**)(std::string *__return_ptr, _QWORD, uint64_t, std::string *, _QWORD))(*(_QWORD *)v181 + 40))(&v199, v181, 1717662579, &v198, 0);
      InferenceEngine::DataUtils::read_vector_from_file<float>(&v200);
      v61 = *v58;
      if (*v58)
      {
        v46[14] = v61;
        operator delete(v61);
        *v58 = 0;
        v46[14] = 0;
        v46[15] = 0;
      }
      *(_OWORD *)(v46 + 13) = v200;
      v46[15] = v201;
      v201 = 0;
      v200 = 0uLL;
      if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v199.__r_.__value_.__l.__data_);
      if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v198.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v200, "prompt_duration");
      InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&v202, &v199);
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)(v46 + 11), (__int128 *)&v199);
      v62 = (std::__shared_weak_count *)v199.__r_.__value_.__l.__size_;
      if (v199.__r_.__value_.__l.__size_)
      {
        v63 = (unint64_t *)(v199.__r_.__value_.__l.__size_ + 8);
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      if (SHIBYTE(v201) < 0)
        operator delete((void *)v200);
      InferenceEngine::DataTensor::unsqueeze((InferenceEngine::DataTensor *)v46[11], 0);
      if (v202.__r_.__value_.__r.__words[0])
      {
        v202.__r_.__value_.__l.__size_ = v202.__r_.__value_.__r.__words[0];
        operator delete(v202.__r_.__value_.__l.__data_);
      }
      if (v41)
      {
        v65 = (unint64_t *)&v41->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      if (v38)
      {
        v67 = (unint64_t *)&v38->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      *(_QWORD *)&v69 = v46 + 3;
      *((_QWORD *)&v69 + 1) = v46;
      v70 = *(std::__shared_weak_count **)(a1 + 352);
      *v184 = v69;
      if (v70)
      {
        v71 = (unint64_t *)&v70->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      if (!v41)
        goto LABEL_303;
      v73 = (unint64_t *)&v41->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      break;
    case 6uLL:
      if (*(_DWORD *)v185.__r_.__value_.__l.__data_ != 1836020336
        || *(_WORD *)(v185.__r_.__value_.__r.__words[0] + 4) != 29808)
      {
        goto LABEL_318;
      }
LABEL_170:
      v108 = *(_QWORD *)(v27 + 304);
      *(_QWORD *)&v109 = *(_QWORD *)(v27 + 296);
      if (v108)
      {
        v110 = (unint64_t *)(v108 + 8);
        do
          v111 = __ldxr(v110);
        while (__stxr(v111 + 1, v110));
      }
      v112 = *(_QWORD *)(v27 + 312);
      v41 = *(std::__shared_weak_count **)(v27 + 320);
      if (v41)
      {
        v113 = (unint64_t *)&v41->__shared_owners_;
        do
          v114 = __ldxr(v113);
        while (__stxr(v114 + 1, v113));
      }
      *((_QWORD *)&v109 + 1) = v108;
      v182 = v109;
      v115 = operator new(0x58uLL);
      v116 = v115;
      v115[1] = 0;
      v115[2] = 0;
      *v115 = &off_1EA934C78;
      v117 = v115 + 3;
      *(_OWORD *)&v202.__r_.__value_.__l.__data_ = v182;
      *(_QWORD *)&v200 = v112;
      *((_QWORD *)&v200 + 1) = v41;
      if (v41)
      {
        v118 = (unint64_t *)&v41->__shared_owners_;
        do
          v119 = __ldxr(v118);
        while (__stxr(v119 + 1, v118));
      }
      FS2S1EncoderPromptInference::FS2S1EncoderPromptInference((uint64_t)(v115 + 3), (uint64_t)a2, (uint64_t *)&v202, (uint64_t *)&v200);
      if (v41)
      {
        v120 = (unint64_t *)&v41->__shared_owners_;
        do
          v121 = __ldaxr(v120);
        while (__stlxr(v121 - 1, v120));
        if (!v121)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      v122 = (std::__shared_weak_count *)v202.__r_.__value_.__l.__size_;
      if (v202.__r_.__value_.__l.__size_)
      {
        v123 = (unint64_t *)(v202.__r_.__value_.__l.__size_ + 8);
        do
          v124 = __ldaxr(v123);
        while (__stlxr(v124 - 1, v123));
        if (!v124)
        {
          ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
          std::__shared_weak_count::__release_weak(v122);
        }
      }
      *(_QWORD *)&v125 = v117;
      *((_QWORD *)&v125 + 1) = v116;
      v126 = *(std::__shared_weak_count **)(a1 + 352);
      *v184 = v125;
      if (v126)
      {
        v127 = (unint64_t *)&v126->__shared_owners_;
        do
          v128 = __ldaxr(v127);
        while (__stlxr(v128 - 1, v127));
        if (!v128)
        {
          ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
          std::__shared_weak_count::__release_weak(v126);
        }
      }
      if (!v41)
        goto LABEL_303;
      v129 = (unint64_t *)&v41->__shared_owners_;
      do
        v74 = __ldaxr(v129);
      while (__stlxr(v74 - 1, v129));
      break;
    case 7uLL:
      if (*(_DWORD *)v185.__r_.__value_.__l.__data_ != 1634100580
        || *(_DWORD *)(v185.__r_.__value_.__r.__words[0] + 3) != 1953264993)
      {
        goto LABEL_318;
      }
LABEL_129:
      v78 = *(std::__shared_weak_count **)(v27 + 304);
      if (v78)
      {
        v79 = (unint64_t *)&v78->__shared_owners_;
        do
          v80 = __ldxr(v79);
        while (__stxr(v80 + 1, v79));
      }
      v81 = *(_QWORD *)(v27 + 312);
      v41 = *(std::__shared_weak_count **)(v27 + 320);
      if (v41)
      {
        v82 = (unint64_t *)&v41->__shared_owners_;
        do
          v83 = __ldxr(v82);
        while (__stxr(v83 + 1, v82));
      }
      v84 = operator new(0x30uLL);
      v85 = v84;
      v84[1] = 0;
      v84[2] = 0;
      *v84 = &off_1EA934930;
      if (v41)
      {
        v86 = (unint64_t *)&v41->__shared_owners_;
        do
          v87 = __ldxr(v86);
        while (__stxr(v87 + 1, v86));
        v84[3] = off_1EA920E60;
        v84[4] = v81;
        v84[5] = v41;
        do
          v88 = __ldxr(v86);
        while (__stxr(v88 + 1, v86));
        do
          v89 = __ldaxr(v86);
        while (__stlxr(v89 - 1, v86));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      else
      {
        v84[3] = off_1EA920E60;
        v84[4] = v81;
        v84[5] = 0;
      }
      if (v78)
      {
        v130 = (unint64_t *)&v78->__shared_owners_;
        do
          v131 = __ldaxr(v130);
        while (__stlxr(v131 - 1, v130));
        if (!v131)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      *(_QWORD *)&v132 = v85 + 3;
      *((_QWORD *)&v132 + 1) = v85;
      v133 = *(std::__shared_weak_count **)(a1 + 352);
      *v184 = v132;
      if (v133)
      {
        v134 = (unint64_t *)&v133->__shared_owners_;
        do
          v135 = __ldaxr(v134);
        while (__stlxr(v135 - 1, v134));
        if (!v135)
        {
          ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
          std::__shared_weak_count::__release_weak(v133);
        }
      }
      if (!v41)
        goto LABEL_303;
      v136 = (unint64_t *)&v41->__shared_owners_;
      do
        v74 = __ldaxr(v136);
      while (__stlxr(v74 - 1, v136));
      break;
    case 8uLL:
      v34 = (std::string *)v185.__r_.__value_.__r.__words[0];
LABEL_144:
      if (v34->__r_.__value_.__r.__words[0] != 0x6C6175645F613270)
        goto LABEL_318;
      v91 = *(_QWORD *)(v27 + 296);
      v90 = *(std::__shared_weak_count **)(v27 + 304);
      if (v90)
      {
        v92 = (unint64_t *)&v90->__shared_owners_;
        do
          v93 = __ldxr(v92);
        while (__stxr(v93 + 1, v92));
      }
      v94 = *(_QWORD *)(v27 + 312);
      v41 = *(std::__shared_weak_count **)(v27 + 320);
      if (v41)
      {
        v95 = (unint64_t *)&v41->__shared_owners_;
        do
          v96 = __ldxr(v95);
        while (__stxr(v96 + 1, v95));
      }
      v97 = operator new(0xA0uLL);
      v98 = v97;
      v97[1] = 0;
      v97[2] = 0;
      *v97 = &off_1EA90B138;
      if (v41)
      {
        v99 = (unint64_t *)&v41->__shared_owners_;
        do
          v100 = __ldxr(v99);
        while (__stxr(v100 + 1, v99));
      }
      if (v90)
      {
        v101 = (unint64_t *)&v90->__shared_owners_;
        do
          v102 = __ldxr(v101);
        while (__stxr(v102 + 1, v101));
      }
      if (v41)
      {
        v103 = (unint64_t *)&v41->__shared_owners_;
        do
          v104 = __ldxr(v103);
        while (__stxr(v104 + 1, v103));
        v97[4] = v94;
        v97[3] = off_1EA920E60;
        v97[5] = v41;
        do
          v105 = __ldxr(v103);
        while (__stxr(v105 + 1, v103));
        do
          v106 = __ldaxr(v103);
        while (__stlxr(v106 - 1, v103));
        if (!v106)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      else
      {
        v97[4] = v94;
        v97[3] = off_1EA920E60;
        v97[5] = 0;
      }
      if (v90)
      {
        v137 = (unint64_t *)&v90->__shared_owners_;
        do
          v138 = __ldaxr(v137);
        while (__stlxr(v138 - 1, v137));
        if (!v138)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      *((_OWORD *)v98 + 7) = 0u;
      v139 = (void **)(v98 + 14);
      v98[3] = off_1EA90A958;
      *((_OWORD *)v98 + 3) = 0u;
      v183 = (InferenceEngine::DataTensor **)(v98 + 6);
      *((_OWORD *)v98 + 4) = 0u;
      v179 = (InferenceEngine::DataTensor **)(v98 + 8);
      *((_OWORD *)v98 + 5) = 0u;
      v180 = (InferenceEngine::DataTensor **)(v98 + 10);
      *((_OWORD *)v98 + 6) = 0u;
      v178 = (void **)(v98 + 17);
      *((_OWORD *)v98 + 8) = 0u;
      *((_OWORD *)v98 + 9) = 0u;
      v140 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "semantic_prompt_duration");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v140, &v199);
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v91 + 40))(&v200, v91, 1717662579, &v199, 0);
      InferenceEngine::DataUtils::read_vector_from_file<float>(&v202);
      if (SHIBYTE(v201) < 0)
        operator delete((void *)v200);
      if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v199.__r_.__value_.__l.__data_);
      v141 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "semantic_prompt_fuse_target");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v141, &v198);
      (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v91 + 40))(&v199, v91, 1717662579, &v198, 0);
      InferenceEngine::DataUtils::read_vector_from_file<float>(&v200);
      if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v199.__r_.__value_.__l.__data_);
      if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v198.__r_.__value_.__l.__data_);
      v142 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "semantic_prompt_phones");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v142, &v197);
      (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v91 + 40))(&v198, v91, 1717662579, &v197, 0);
      InferenceEngine::DataUtils::read_vector_from_file<float>(&v199);
      v143 = *v139;
      if (*v139)
      {
        v98[15] = v143;
        operator delete(v143);
        *v139 = 0;
        v98[15] = 0;
        v98[16] = 0;
      }
      *(std::string *)(v98 + 14) = v199;
      memset(&v199, 0, sizeof(v199));
      if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v198.__r_.__value_.__l.__data_);
      if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v197.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v199, "prompt_duration");
      InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&v202, &v198);
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)v183, (__int128 *)&v198);
      v144 = (std::__shared_weak_count *)v198.__r_.__value_.__l.__size_;
      if (v198.__r_.__value_.__l.__size_)
      {
        v145 = (unint64_t *)(v198.__r_.__value_.__l.__size_ + 8);
        do
          v146 = __ldaxr(v145);
        while (__stlxr(v146 - 1, v145));
        if (!v146)
        {
          ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
          std::__shared_weak_count::__release_weak(v144);
        }
      }
      if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v199.__r_.__value_.__l.__data_);
      InferenceEngine::DataTensor::unsqueeze(*v183, 0);
      std::string::basic_string[abi:ne180100]<0>(&v199, "prompt_fuse_target");
      InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&v200, &v198);
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)v180, (__int128 *)&v198);
      v147 = (std::__shared_weak_count *)v198.__r_.__value_.__l.__size_;
      if (v198.__r_.__value_.__l.__size_)
      {
        v148 = (unint64_t *)(v198.__r_.__value_.__l.__size_ + 8);
        do
          v149 = __ldaxr(v148);
        while (__stlxr(v149 - 1, v148));
        if (!v149)
        {
          ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
          std::__shared_weak_count::__release_weak(v147);
        }
      }
      if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v199.__r_.__value_.__l.__data_);
      InferenceEngine::DataTensor::unsqueeze(*v180, 0);
      v150 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "acoustic_prompt_duration");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v150, &v197);
      (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v91 + 40))(&v198, v91, 1717662579, &v197, 0);
      InferenceEngine::DataUtils::read_vector_from_file<float>(&v199);
      if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v198.__r_.__value_.__l.__data_);
      if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v197.__r_.__value_.__l.__data_);
      v151 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "acoustic_prompt_fuse_target");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v151, &__p);
      (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v91 + 40))(&v197, v91, 1717662579, &__p, 0);
      InferenceEngine::DataUtils::read_vector_from_file<float>(&v198);
      if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v197.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v152 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "acoustic_prompt_phones");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v152, &v195);
      (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v91 + 40))(&__p, v91, 1717662579, &v195, 0);
      InferenceEngine::DataUtils::read_vector_from_file<float>(&v197);
      v153 = *v178;
      if (*v178)
      {
        v98[18] = v153;
        operator delete(v153);
        *v178 = 0;
        v98[18] = 0;
        v98[19] = 0;
      }
      *(std::string *)(v98 + 17) = v197;
      memset(&v197, 0, sizeof(v197));
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v195.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v197, "prompt_duration");
      InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&v199, &__p);
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)v179, (__int128 *)&__p);
      v154 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v155 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v156 = __ldaxr(v155);
        while (__stlxr(v156 - 1, v155));
        if (!v156)
        {
          ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
          std::__shared_weak_count::__release_weak(v154);
        }
      }
      if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v197.__r_.__value_.__l.__data_);
      InferenceEngine::DataTensor::unsqueeze(*v179, 0);
      std::string::basic_string[abi:ne180100]<0>(&v197, "prompt_fuse_target");
      InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&v198, &__p);
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)(v98 + 12), (__int128 *)&__p);
      v157 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v158 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v159 = __ldaxr(v158);
        while (__stlxr(v159 - 1, v158));
        if (!v159)
        {
          ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
          std::__shared_weak_count::__release_weak(v157);
        }
      }
      if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v197.__r_.__value_.__l.__data_);
      InferenceEngine::DataTensor::unsqueeze((InferenceEngine::DataTensor *)v98[12], 0);
      if (v198.__r_.__value_.__r.__words[0])
      {
        v198.__r_.__value_.__l.__size_ = v198.__r_.__value_.__r.__words[0];
        operator delete(v198.__r_.__value_.__l.__data_);
      }
      if (v199.__r_.__value_.__r.__words[0])
      {
        v199.__r_.__value_.__l.__size_ = v199.__r_.__value_.__r.__words[0];
        operator delete(v199.__r_.__value_.__l.__data_);
      }
      if ((_QWORD)v200)
      {
        *((_QWORD *)&v200 + 1) = v200;
        operator delete((void *)v200);
      }
      if (v202.__r_.__value_.__r.__words[0])
      {
        v202.__r_.__value_.__l.__size_ = v202.__r_.__value_.__r.__words[0];
        operator delete(v202.__r_.__value_.__l.__data_);
      }
      if (v41)
      {
        v160 = (unint64_t *)&v41->__shared_owners_;
        do
          v161 = __ldaxr(v160);
        while (__stlxr(v161 - 1, v160));
        if (!v161)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      if (v90)
      {
        v162 = (unint64_t *)&v90->__shared_owners_;
        do
          v163 = __ldaxr(v162);
        while (__stlxr(v163 - 1, v162));
        if (!v163)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      *(_QWORD *)&v164 = v98 + 3;
      *((_QWORD *)&v164 + 1) = v98;
      v165 = *(std::__shared_weak_count **)(a1 + 352);
      *v184 = v164;
      if (v165)
      {
        v166 = (unint64_t *)&v165->__shared_owners_;
        do
          v167 = __ldaxr(v166);
        while (__stlxr(v167 - 1, v166));
        if (!v167)
        {
          ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
          std::__shared_weak_count::__release_weak(v165);
        }
      }
      if (!v41)
        goto LABEL_303;
      v168 = (unint64_t *)&v41->__shared_owners_;
      do
        v74 = __ldaxr(v168);
      while (__stlxr(v74 - 1, v168));
      break;
    default:
LABEL_318:
      v175 = __cxa_allocate_exception(0x10uLL);
      v176 = &v185;
      if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v176 = (std::string *)v185.__r_.__value_.__r.__words[0];
      StringFormatter::StringFormatter((StringFormatter *)&v202, "Model type '%s' is not supported.", (const char *)v176);
      MEMORY[0x1DF0EC99C](v175, &v202);
      __cxa_throw(v175, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (!v74)
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
LABEL_303:
  *(_BYTE *)(a1 + 272) = 0;
  if (v26)
  {
    v169 = (unint64_t *)&v26->__shared_owners_;
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v185.__r_.__value_.__l.__data_);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v189, v188[0]);
  if (v191 < 0)
    operator delete(v190[0]);
  v171 = v193;
  if (v193)
  {
    v172 = (unint64_t *)&v193->__shared_owners_;
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  return a1;
}

void sub_1DEABD1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::mutex *a15, uint64_t a16, __int128 a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,unsigned __int8 a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,std::__shared_weak_count *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  uint64_t v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  std::mutex *v54;
  unint64_t *p_shared_owners;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;

  p_shared_owners = (unint64_t *)&v53->__shared_owners_;
  do
    v57 = __ldaxr(p_shared_owners);
  while (__stlxr(v57 - 1, p_shared_owners));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
  }
  if (v52)
  {
    v58 = (unint64_t *)&v52->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (a25 < 0)
    operator delete(__p);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a29, a28);
  if (a35 < 0)
    operator delete(a30);
  v60 = a37;
  if (a37)
  {
    v61 = (unint64_t *)&a37->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v51 + 368), *(unsigned __int8 *)(v51 + 360));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a19);
  std::mutex::~mutex(v54);
  Module::~Module((Module *)v51);
  _Unwind_Resume(a1);
}

void sub_1DEABD964()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    JUMPOUT(0x1DEABD8DCLL);
  JUMPOUT(0x1DEABD8E0);
}

void sub_1DEABD9A4()
{
  JUMPOUT(0x1DEABD8F0);
}

void sub_1DEABD9B0()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    JUMPOUT(0x1DEABD8FCLL);
  JUMPOUT(0x1DEABD900);
}

void sub_1DEABD9C8()
{
  JUMPOUT(0x1DEABD938);
}

void sub_1DEABD9D4()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;

  if (v0)
  {
    p_shared_owners = (unint64_t *)&v0->__shared_owners_;
    do
      v2 = __ldaxr(p_shared_owners);
    while (__stlxr(v2 - 1, p_shared_owners));
    if (!v2)
    {
      ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
      std::__shared_weak_count::__release_weak(v0);
    }
  }
  JUMPOUT(0x1DEABD95CLL);
}

void sub_1DEABDA10()
{
  JUMPOUT(0x1DEABD900);
}

void FS2S1EncoderPersistentModule::~FS2S1EncoderPersistentModule(void **this)
{
  *this = &off_1EA921668;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 39));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
}

{
  *this = &off_1EA921668;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 39));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x1DF0ED014);
}

void PhrasingImpl::~PhrasingImpl(PhrasingImpl *this)
{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_1EA91CEE0;
  v2 = (void *)*((_QWORD *)this + 22);
  if (v2)
  {
    *((_QWORD *)this + 23) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 152);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 136);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 120);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  FrontendModule::~FrontendModule((void **)this);
}

{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_1EA91CEE0;
  v2 = (void *)*((_QWORD *)this + 22);
  if (v2)
  {
    *((_QWORD *)this + 23) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 152);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 136);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 120);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  FrontendModule::~FrontendModule((void **)this);
  JUMPOUT(0x1DF0ED014);
}

uint64_t PhrasingImpl::clear(PhrasingImpl *this)
{
  _OWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t result;
  __int128 v11;

  v2 = operator new(0x30uLL);
  *(_OWORD *)((char *)v2 + 8) = 0u;
  *(_QWORD *)v2 = &off_1EA932198;
  *((_QWORD *)&v11 + 1) = v2;
  v2[2] = 0u;
  *((_QWORD *)v2 + 3) = v2 + 2;
  *(_QWORD *)&v11 = (char *)v2 + 24;
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)this + 120, &v11);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = operator new(0x30uLL);
  *(_OWORD *)((char *)v6 + 8) = 0u;
  *(_QWORD *)v6 = &off_1EA932198;
  *((_QWORD *)&v11 + 1) = v6;
  v6[2] = 0u;
  *((_QWORD *)v6 + 3) = v6 + 2;
  *(_QWORD *)&v11 = (char *)v6 + 24;
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)this + 136, &v11);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  FrontendModule::delete_tokens(this);
  *((_BYTE *)this + 8) = 0;
  result = *((_QWORD *)this + 2);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void PhrasingImpl::generate_tokens(PhrasingImpl *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unint64_t v11;
  BOOL v12;
  void **v13;
  char v14;
  __int128 *v15;
  std::vector<std::string>::pointer end;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  std::string *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::string *v53;
  uint64_t v54;
  unint64_t v55;
  std::__shared_weak_count *size;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  int v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  std::string **v78;
  uint64_t v79;
  int v80;
  std::string *v81;
  uint64_t *v82;
  std::vector<std::string>::pointer value_high;
  int v84;
  const std::string::value_type *v85;
  std::string::size_type v86;
  NSObject *v87;
  const char *v88;
  std::string *v89;
  uint64_t *v90;
  char v91;
  std::vector<std::string>::pointer v92;
  _QWORD *v93;
  uint64_t *v94;
  uint64_t v95;
  unint64_t j;
  const std::string *v97;
  int64_t v98;
  char *v99;
  char *v100;
  void *v101;
  char *v102;
  std::string::size_type v103;
  uint64_t v104;
  uint64_t v105;
  std::__split_buffer<std::string>::pointer end_high;
  char v107;
  unsigned __int8 *v108;
  uint64_t v109;
  std::__split_buffer<std::string>::pointer v110;
  unsigned __int8 *p_v;
  unint64_t *v112;
  unint64_t *v113;
  unint64_t *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t *v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  std::string *v126;
  unint64_t *p_size;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *p_shared_owners;
  unint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  int v135;
  std::__split_buffer<std::string>::pointer v136;
  std::string::size_type *v137;
  std::string::size_type v138;
  int v139;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  size_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  const void **v148;
  unsigned __int8 *v149;
  unsigned __int8 *v150;
  unsigned __int8 *v151;
  unsigned __int8 *v152;
  char v153;
  std::__shared_weak_count *begin;
  unint64_t *v155;
  unint64_t v156;
  std::__split_buffer<std::string>::pointer v157;
  std::string::size_type *v158;
  std::string::size_type v159;
  int v160;
  int v162;
  char *v163;
  int v164;
  _QWORD *v166;
  int v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  _OWORD *v171;
  __int128 v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  char *v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::string *value;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::string *v202;
  std::string *v203;
  NSObject *v204;
  const char *v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t *v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  std::string::const_iterator v212;
  std::string *p_buf;
  std::string::size_type v214;
  NSObject *v215;
  const char *v216;
  void *first;
  void *v218;
  void *exception;
  uint64_t i;
  char *v221;
  uint64_t v222;
  uint64_t *v223;
  int v224[2];
  void **v225;
  unint64_t v226;
  std::vector<std::string> v227;
  uint64_t v228;
  std::__shared_weak_count *v229;
  void *v230;
  unint64_t *v231;
  unint64_t *v232;
  std::string v233;
  void *__p[2];
  std::string::size_type v235;
  std::__split_buffer<std::string> __v;
  __int128 v237;
  std::__shared_weak_count *v238;
  _BYTE v239[9];
  std::string buf;
  uint64_t v241;

  v241 = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(&__v, ".");
    std::string::basic_string[abi:ne180100]<0>(&__v.__end_cap_.__value_, "!");
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v237 + 1, "?");
    std::set<std::string>::set[abi:ne180100]((uint64_t)&v227, (const void **)&__v.__first_, 3);
    NeverDestructed<std::set<std::string>>::NeverDestructed<>(&PhrasingImpl::collect_sentence_feat(void)::SENTENCE_PUNCT, (const void ***)&v227);
    std::__tree<std::string>::destroy((uint64_t)&v227, (char *)v227.__end_);
    for (i = 0; i != -72; i -= 24)
    {
      if ((char)v239[i] < 0)
        operator delete(*(void **)((char *)&v237 + i + 8));
    }
  }
  v3 = 0;
  v4 = 0;
  v221 = (char *)this + 192;
  v223 = (uint64_t *)((char *)this + 152);
  v225 = (void **)((char *)this + 176);
  do
  {
    (*(void (**)(std::string *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 2) + 16))(&buf, *((_QWORD *)this + 2), v3);
    v226 = v3;
    v5 = buf.__r_.__value_.__r.__words[0];
    if (!buf.__r_.__value_.__r.__words[0])
    {
      v14 = 0;
      goto LABEL_89;
    }
    if ((_QWORD *)(v5 + 8) == v6)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      StringFormatter::StringFormatter((StringFormatter *)&__v, "Token missing TokenBasicItem");
      MEMORY[0x1DF0EC99C](exception, &__v);
      __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    v7 = v6[5];
    v9 = *(_DWORD *)(v7 + 8);
    v10 = (_QWORD *)(v5 + 8) != v8 && v9 == 1952807028;
    if (v10)
    {
      v15 = (__int128 *)(v8[5] + 8);
      memset(&v227, 0, sizeof(v227));
      v11 = v226;
      v227.__end_ = (std::vector<std::string>::pointer)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v227, v15);
      std::string::basic_string[abi:ne180100]<0>(__p, "null");
      end = v227.__end_;
      if (v227.__end_ >= v227.__end_cap_.__value_)
      {
        v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v227.__end_ - (char *)v227.__begin_) >> 3);
        v22 = v21 + 1;
        if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v227.__end_cap_.__value_ - (char *)v227.__begin_) >> 3) > v22)
          v22 = 0x5555555555555556 * (((char *)v227.__end_cap_.__value_ - (char *)v227.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v227.__end_cap_.__value_ - (char *)v227.__begin_) >> 3) >= 0x555555555555555)
          v23 = 0xAAAAAAAAAAAAAAALL;
        else
          v23 = v22;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v227.__end_cap_;
        if (v23)
          v24 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v227.__end_cap_, v23);
        else
          v24 = 0;
        v36 = v24 + v21;
        __v.__first_ = v24;
        __v.__begin_ = v36;
        __v.__end_cap_.__value_ = &v24[v23];
        v37 = *(_OWORD *)__p;
        v36->__r_.__value_.__r.__words[2] = v235;
        *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v37;
        __p[1] = 0;
        v235 = 0;
        __p[0] = 0;
        __v.__end_ = v36 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v227, &__v);
        v38 = v227.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v227.__end_ = v38;
        if (SHIBYTE(v235) < 0)
          operator delete(__p[0]);
      }
      else
      {
        v17 = *(_OWORD *)__p;
        v227.__end_->__r_.__value_.__r.__words[2] = v235;
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v17;
        v227.__end_ = end + 1;
      }
      v39 = *((_QWORD *)this + 20);
      if (v39 >= *((_QWORD *)this + 21))
      {
        v40 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>(v223, (__int128 **)&v227);
      }
      else
      {
        std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>((uint64_t)v223, (__int128 **)&v227);
        v40 = v39 + 24;
      }
      *((_QWORD *)this + 20) = v40;
      v26 = (char *)*((_QWORD *)this + 23);
      v41 = *((_QWORD *)this + 24);
      if ((unint64_t)v26 >= v41)
      {
        v27 = (char *)*v225;
        v43 = (v26 - (_BYTE *)*v225) >> 3;
        v44 = v43 + 1;
        if ((unint64_t)(v43 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v45 = v41 - (_QWORD)v27;
        if (v45 >> 2 > v44)
          v44 = v45 >> 2;
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
          v31 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v31 = v44;
        if (v31)
        {
          v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v221, v31);
          v27 = (char *)*((_QWORD *)this + 22);
          v26 = (char *)*((_QWORD *)this + 23);
        }
        else
        {
          v32 = 0;
        }
        v46 = &v32[8 * v43];
        *(_QWORD *)v46 = v226;
        v42 = v46 + 8;
        while (v26 != v27)
        {
          v47 = *((_QWORD *)v26 - 1);
          v26 -= 8;
          *((_QWORD *)v46 - 1) = v47;
          v46 -= 8;
        }
        goto LABEL_75;
      }
LABEL_58:
      *(_QWORD *)v26 = v11;
      v42 = v26 + 8;
LABEL_77:
      *((_QWORD *)this + 23) = v42;
      __v.__first_ = (std::__split_buffer<std::string>::pointer)&v227;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
      goto LABEL_78;
    }
    v11 = v226;
    if (v9 <= 1886809698)
    {
      v12 = v9 == 1885892462 || v9 == 1886547312;
      v13 = (void **)((char *)this + 176);
      if (!v12)
        goto LABEL_78;
LABEL_20:
      std::string::basic_string[abi:ne180100]<0>(&__v, "null");
      std::string::basic_string[abi:ne180100]<0>(&__v.__end_cap_.__value_, "null");
      memset(&v227, 0, sizeof(v227));
      __p[0] = &v227;
      LOBYTE(__p[1]) = 0;
      v227.__begin_ = (std::vector<std::string>::pointer)operator new(0x30uLL);
      v227.__end_ = v227.__begin_;
      v227.__end_cap_.__value_ = v227.__begin_ + 2;
      v18 = 0;
      v227.__end_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v227.__end_cap_, (__int128 *)&__v, (__int128 *)((char *)&v237 + 8), v227.__begin_);
      v11 = v226;
      do
      {
        if (*((char *)&v237 + v18 * 8 + 7) < 0)
          operator delete((&__v.__end_cap_.__value_)[v18]);
        v18 -= 3;
      }
      while (v18 != -6);
      v19 = *((_QWORD *)this + 20);
      if (v19 >= *((_QWORD *)this + 21))
      {
        v20 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>(v223, (__int128 **)&v227);
      }
      else
      {
        std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>((uint64_t)v223, (__int128 **)&v227);
        v20 = v19 + 24;
      }
      *((_QWORD *)this + 20) = v20;
      v26 = (char *)*((_QWORD *)this + 23);
      v25 = *((_QWORD *)this + 24);
      if ((unint64_t)v26 >= v25)
      {
        v27 = (char *)*v13;
        v28 = (v26 - (_BYTE *)*v13) >> 3;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v30 = v25 - (_QWORD)v27;
        if (v30 >> 2 > v29)
          v29 = v30 >> 2;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
          v31 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
        {
          v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v221, v31);
          v27 = (char *)*((_QWORD *)this + 22);
          v26 = (char *)*((_QWORD *)this + 23);
        }
        else
        {
          v32 = 0;
        }
        v46 = &v32[8 * v28];
        *(_QWORD *)v46 = v226;
        v42 = v46 + 8;
        while (v26 != v27)
        {
          v48 = *((_QWORD *)v26 - 1);
          v26 -= 8;
          *((_QWORD *)v46 - 1) = v48;
          v46 -= 8;
        }
LABEL_75:
        *((_QWORD *)this + 22) = v46;
        *((_QWORD *)this + 23) = v42;
        *((_QWORD *)this + 24) = &v32[8 * v31];
        if (v27)
          operator delete(v27);
        goto LABEL_77;
      }
      goto LABEL_58;
    }
    v13 = (void **)((char *)this + 176);
    if (v9 == 1886809699)
    {
      if (*((_QWORD *)this + 22) == *((_QWORD *)this + 23))
      {
        std::string::basic_string[abi:ne180100]<0>(&__v, "null");
        std::string::basic_string[abi:ne180100]<0>(&__v.__end_cap_.__value_, "null");
        memset(&v227, 0, sizeof(v227));
        __p[0] = &v227;
        LOBYTE(__p[1]) = 0;
        v227.__begin_ = (std::vector<std::string>::pointer)operator new(0x30uLL);
        v227.__end_ = v227.__begin_;
        v227.__end_cap_.__value_ = v227.__begin_ + 2;
        v33 = 0;
        v227.__end_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v227.__end_cap_, (__int128 *)&__v, (__int128 *)((char *)&v237 + 8), v227.__begin_);
        do
        {
          if (*((char *)&v237 + v33 * 8 + 7) < 0)
            operator delete((&__v.__end_cap_.__value_)[v33]);
          v33 -= 3;
        }
        while (v33 != -6);
        v34 = *((_QWORD *)this + 20);
        if (v34 >= *((_QWORD *)this + 21))
        {
          v35 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>(v223, (__int128 **)&v227);
        }
        else
        {
          std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>((uint64_t)v223, (__int128 **)&v227);
          v35 = v34 + 24;
        }
        *((_QWORD *)this + 20) = v35;
        v60 = (char *)*((_QWORD *)this + 23);
        v59 = *((_QWORD *)this + 24);
        if ((unint64_t)v60 >= v59)
        {
          v62 = (char *)*v225;
          v63 = (v60 - (_BYTE *)*v225) >> 3;
          v64 = v63 + 1;
          if ((unint64_t)(v63 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v65 = v59 - (_QWORD)v62;
          if (v65 >> 2 > v64)
            v64 = v65 >> 2;
          if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
            v66 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v66 = v64;
          if (v66)
          {
            v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v221, v66);
            v62 = (char *)*((_QWORD *)this + 22);
            v60 = (char *)*((_QWORD *)this + 23);
          }
          else
          {
            v67 = 0;
          }
          v68 = &v67[8 * v63];
          *(_QWORD *)v68 = v226;
          v61 = v68 + 8;
          while (v60 != v62)
          {
            v69 = *((_QWORD *)v60 - 1);
            v60 -= 8;
            *((_QWORD *)v68 - 1) = v69;
            v68 -= 8;
          }
          *((_QWORD *)this + 22) = v68;
          *((_QWORD *)this + 23) = v61;
          *((_QWORD *)this + 24) = &v67[8 * v66];
          if (v62)
            operator delete(v62);
        }
        else
        {
          *(_QWORD *)v60 = v226;
          v61 = v60 + 8;
        }
        *((_QWORD *)this + 23) = v61;
        __v.__first_ = (std::__split_buffer<std::string>::pointer)&v227;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
      }
      v70 = *((_QWORD *)this + 20);
      if (*((_QWORD *)this + 19) == v70)
      {
LABEL_133:
        v75 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(PhrasingImpl::collect_sentence_feat(void)::SENTENCE_PUNCT, (const void **)(v7 + 32));
        v11 = v226;
        v49 = v226;
        if (PhrasingImpl::collect_sentence_feat(void)::SENTENCE_PUNCT + 8 != v75)
        {
          v14 = 0;
          ++v226;
          goto LABEL_89;
        }
        goto LABEL_79;
      }
      v71 = *(_QWORD *)(v70 - 16);
      if (*(char *)(v7 + 55) >= 0)
        v72 = (char *)(v7 + 32);
      else
        v72 = *(char **)(v7 + 32);
      v73 = *v72;
      if (v73 > 57)
      {
        if (v73 == 58)
        {
          v74 = "colon";
        }
        else if (v73 == 59)
        {
          v74 = "semicolon";
        }
        else
        {
          v74 = "question";
          if (v73 != 63)
            goto LABEL_132;
        }
      }
      else
      {
        switch(v73)
        {
          case '!':
            v74 = "exclamation";
            break;
          case ',':
            v74 = "comma";
            break;
          case '.':
            v74 = "period";
            break;
          default:
LABEL_132:
            *(_QWORD *)(*((_QWORD *)this + 23) - 8) = v226;
            goto LABEL_133;
        }
      }
      MEMORY[0x1DF0ECA80](v71 - 24, v74);
      goto LABEL_132;
    }
    if (v9 == 1952807028)
      goto LABEL_20;
LABEL_78:
    v49 = v4;
LABEL_79:
    v50 = v11 + 1;
    v51 = *((_QWORD *)this + 20);
    if (0xAAAAAAAAAAAAAAABLL * ((v51 - *((_QWORD *)this + 19)) >> 3) < 0xFF)
    {
      v226 = v50;
      v14 = 1;
    }
    else
    {
      if (v49)
        v50 = v49;
      v52 = *((_QWORD *)this + 23);
      v226 = v50;
      if (v52 != *((_QWORD *)this + 22))
      {
        v53 = (std::string *)(v51 - 24);
        do
        {
          v55 = *(_QWORD *)(v52 - 8);
          v54 = v52 - 8;
          if (v55 <= v50)
            break;
          *((_QWORD *)this + 23) = v54;
          __v.__first_ = v53;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
          *((_QWORD *)this + 20) = v53;
          v52 = *((_QWORD *)this + 23);
          --v53;
        }
        while (v52 != *((_QWORD *)this + 22));
      }
      v14 = 0;
    }
    v4 = v49;
LABEL_89:
    size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    if (buf.__r_.__value_.__l.__size_)
    {
      v57 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v3 = v226;
  }
  while ((v14 & 1) != 0);
  if (*((_QWORD *)this + 22) == *((_QWORD *)this + 23))
    *((_BYTE *)this + 8) = 1;
  v76 = *((_QWORD *)this + 13);
  v77 = kaldi::quasar::TorchEncoderDecoder::InputSymbols(*(kaldi::quasar::TorchEncoderDecoder **)(v76 + 6576));
  memset(&v227, 0, sizeof(v227));
  v78 = (std::string **)*((_QWORD *)this + 19);
  *(_QWORD *)v224 = *((_QWORD *)this + 20);
  if (v78 == *(std::string ***)v224)
  {
    v91 = 0;
    goto LABEL_224;
  }
  v79 = v77;
  v222 = v76;
  v80 = 0;
  do
  {
    v81 = *v78;
    v82 = (uint64_t *)v78[1];
    while (v81 != (std::string *)v82)
    {
      value_high = (std::vector<std::string>::pointer)HIBYTE(v227.__end_cap_.__value_);
      if (SHIBYTE(v227.__end_cap_.__value_) < 0)
        value_high = v227.__end_;
      if (value_high)
        std::string::push_back((std::string *)&v227, 32);
      if ((*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v79 + 96))(v79, v81) == -1)
      {
        std::string::append((std::string *)&v227, "UNK");
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v87 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          v89 = v81;
          if (SHIBYTE(v81->__r_.__value_.__r.__words[2]) < 0)
            v89 = (std::string *)v81->__r_.__value_.__r.__words[0];
          LODWORD(__v.__first_) = 136315138;
          *(std::__split_buffer<std::string>::pointer *)((char *)&__v.__first_ + 4) = v89;
        }
        v90 = (uint64_t *)v81;
        if (SHIBYTE(v81->__r_.__value_.__r.__words[2]) < 0)
          v90 = (uint64_t *)v81->__r_.__value_.__r.__words[0];
      }
      else
      {
        v84 = SHIBYTE(v81->__r_.__value_.__r.__words[2]);
        if (v84 >= 0)
          v85 = (const std::string::value_type *)v81;
        else
          v85 = (const std::string::value_type *)v81->__r_.__value_.__r.__words[0];
        if (v84 >= 0)
          v86 = HIBYTE(v81->__r_.__value_.__r.__words[2]);
        else
          v86 = v81->__r_.__value_.__l.__size_;
        std::string::append((std::string *)&v227, v85, v86);
      }
      ++v81;
    }
    ++v80;
    v78 += 3;
  }
  while (v78 != *(std::string ***)v224);
  v91 = HIBYTE(v227.__end_cap_.__value_);
  v92 = v227.__end_;
  if (SHIBYTE(v227.__end_cap_.__value_) >= 0)
    v92 = (std::vector<std::string>::pointer)HIBYTE(v227.__end_cap_.__value_);
  v3 = v226;
  if (!v92)
  {
LABEL_224:
    v230 = 0;
    v231 = 0;
    v232 = 0;
    v93 = (_QWORD *)((char *)this + 176);
    if (v91 < 0)
      goto LABEL_225;
    goto LABEL_226;
  }
  __p[0] = 0;
  __p[1] = 0;
  v235 = 0;
  *(_DWORD *)(v222 + 12180) = v80;
  EncoderDecoder::decode(v222, (uint64_t)&v227, (uint64_t)__p);
  v93 = (_QWORD *)((char *)this + 176);
  v230 = 0;
  v231 = 0;
  v232 = 0;
  v94 = (uint64_t *)__p[0];
  if (__p[1] == __p[0])
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v204 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__v.__first_) = 0;
      _os_log_impl(&dword_1DE3F6000, v204, OS_LOG_TYPE_ERROR, "PhrasingEngine no paths in n_best", (uint8_t *)&__v, 2u);
    }
    Diagnostics::log(3, "PhrasingEngine no paths in n_best", v205);
    v3 = v226;
  }
  else
  {
    v95 = *(_QWORD *)__p[0];
    if (*((_QWORD *)__p[0] + 1) != *(_QWORD *)__p[0])
    {
      for (j = 0; j != 0xEEEEEEEEEEEEEEEFLL * ((v94[1] - *v94) >> 4); ++j)
      {
        if (j >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 20) - *((_QWORD *)this + 19)) >> 3))
          break;
        v97 = (const std::string *)(v95 + 240 * j);
        if (SHIBYTE(v97->__r_.__value_.__r.__words[2]) < 0)
        {
          v99 = (char *)v97->__r_.__value_.__r.__words[0];
          v98 = v97->__r_.__value_.__l.__size_;
        }
        else
        {
          v98 = HIBYTE(v97->__r_.__value_.__r.__words[2]);
          v99 = (char *)(v95 + 240 * j);
        }
        v100 = &v99[v98];
        if (v98 >= 1)
        {
          v101 = v99;
          do
          {
            v102 = (char *)memchr(v101, 95, v98);
            if (!v102)
              break;
            if (*v102 == 95)
              goto LABEL_180;
            v101 = v102 + 1;
            v98 = v100 - (_BYTE *)v101;
          }
          while (v100 - (_BYTE *)v101 > 0);
        }
        v102 = v100;
LABEL_180:
        if (v102 == v100)
          v103 = -1;
        else
          v103 = v102 - v99;
        std::string::basic_string((std::string *)&__v, v97, 0, v103, (std::allocator<char> *)&buf);
        v104 = *v94 + 240 * j;
        v93 = (_QWORD *)((char *)this + 176);
        v3 = v226;
        if (*(char *)(v104 + 23) < 0)
        {
          v104 = *(_QWORD *)v104;
          v105 = *(_QWORD *)(*v94 + 240 * j + 8);
        }
        else
        {
          v105 = *(unsigned __int8 *)(v104 + 23);
        }
        end_high = (std::__split_buffer<std::string>::pointer)HIBYTE(__v.__end_);
        v107 = HIBYTE(__v.__end_);
        if (*(_BYTE *)(v104 + v105 - 1) == 66)
        {
          v108 = *(unsigned __int8 **)(*v223 + 24 * j);
          v109 = v108[23];
          if ((v109 & 0x80u) == 0)
            v110 = (std::__split_buffer<std::string>::pointer)v108[23];
          else
            v110 = (std::__split_buffer<std::string>::pointer)*((_QWORD *)v108 + 1);
          if (SHIBYTE(__v.__end_) < 0)
            end_high = __v.__begin_;
          if (v110 == end_high)
          {
            if (SHIBYTE(__v.__end_) >= 0)
              p_v = (unsigned __int8 *)&__v;
            else
              p_v = (unsigned __int8 *)__v.__first_;
            if ((v109 & 0x80) == 0)
            {
              if (v108[23])
              {
                while (*v108 == *p_v)
                {
                  ++v108;
                  ++p_v;
                  if (!--v109)
                    goto LABEL_202;
                }
                goto LABEL_219;
              }
LABEL_202:
              v112 = v231;
              if (v231 >= v232)
              {
                v114 = (unint64_t *)v230;
                v115 = ((char *)v231 - (_BYTE *)v230) >> 3;
                v116 = v115 + 1;
                if ((unint64_t)(v115 + 1) >> 61)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v117 = (char *)v232 - (_BYTE *)v230;
                if (((char *)v232 - (_BYTE *)v230) >> 2 > v116)
                  v116 = v117 >> 2;
                if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFF8)
                  v118 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v118 = v116;
                if (v118)
                {
                  v119 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v232, v118);
                  v114 = (unint64_t *)v230;
                  v112 = v231;
                }
                else
                {
                  v119 = 0;
                }
                v120 = (unint64_t *)&v119[8 * v115];
                *v120 = j;
                v113 = v120 + 1;
                while (v112 != v114)
                {
                  v121 = *--v112;
                  *--v120 = v121;
                }
                v230 = v120;
                v231 = v113;
                v232 = (unint64_t *)&v119[8 * v118];
                if (v114)
                  operator delete(v114);
              }
              else
              {
                *v231 = j;
                v113 = v112 + 1;
              }
              v231 = v113;
              v107 = HIBYTE(__v.__end_);
              goto LABEL_219;
            }
            if (!memcmp(*(const void **)v108, p_v, *((_QWORD *)v108 + 1)))
              goto LABEL_202;
          }
        }
LABEL_219:
        if (v107 < 0)
          operator delete(__v.__first_);
        v95 = *v94;
      }
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG)
    || Diagnostics::s_log_level >= 7)
  {
    memset(&__v, 0, 24);
    v206 = *((_QWORD *)this + 19);
    if (*((_QWORD *)this + 20) != v206)
    {
      v207 = 0;
      v208 = (unint64_t *)v230;
      do
      {
        v209 = (uint64_t *)(v206 + 24 * v207);
        v210 = *v209;
        v211 = v209[1];
        while (v210 != v211)
        {
          Censor::global_plaintext(&v233, v210);
          if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v212.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v233;
          else
            v212.__i_ = (std::__wrap_iter<const char *>::iterator_type)v233.__r_.__value_.__r.__words[0];
          std::string::insert(&v233, v212, 32);
          buf = v233;
          memset(&v233, 0, sizeof(v233));
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_buf = &buf;
          else
            p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v214 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
          else
            v214 = buf.__r_.__value_.__l.__size_;
          std::string::append((std::string *)&__v, (const std::string::value_type *)p_buf, v214);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
          if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v233.__r_.__value_.__l.__data_);
          v210 += 24;
        }
        if (v208 != v231 && *v208 == v207)
        {
          std::string::append((std::string *)&__v, " |");
          ++v208;
        }
        ++v207;
        v206 = *((_QWORD *)this + 19);
      }
      while (v207 < 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 20) - v206) >> 3));
      v93 = (_QWORD *)((char *)this + 176);
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    }
    v215 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      first = &__v;
      if (SHIBYTE(__v.__end_) < 0)
        first = __v.__first_;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)first;
      _os_log_impl(&dword_1DE3F6000, v215, OS_LOG_TYPE_DEBUG, "PhrasingEngine%s", (uint8_t *)&buf, 0xCu);
    }
    v218 = &__v;
    if (SHIBYTE(__v.__end_) < 0)
      v218 = __v.__first_;
    Diagnostics::log(7, "PhrasingEngine%s", v216, v218);
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    v3 = v226;
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)__p;
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  if ((HIBYTE(v227.__end_cap_.__value_) & 0x80) != 0)
LABEL_225:
    operator delete(v227.__begin_);
LABEL_226:
  v122 = (unint64_t *)v230;
  if (v230 == v231)
  {
    v124 = v3 - 1;
    v123 = (unint64_t *)v230;
    if (!v3)
      goto LABEL_367;
    goto LABEL_230;
  }
  v123 = (unint64_t *)((char *)v230 + 8);
  v124 = *(_QWORD *)(*v93 + 8 * *(_QWORD *)v230);
  if (v3)
  {
LABEL_230:
    v125 = 0;
    while (1)
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 2) + 16))(__p, *((_QWORD *)this + 2), 0);
      LOWORD(v227.__begin_) = 0;
      v126 = (std::string *)*((_QWORD *)this + 16);
      v227.__end_ = (std::vector<std::string>::pointer)*((_QWORD *)this + 15);
      v227.__end_cap_.__value_ = v126;
      if (v126)
      {
        p_size = &v126->__r_.__value_.__l.__size_;
        do
          v128 = __ldxr(p_size);
        while (__stxr(v128 + 1, p_size));
      }
      v129 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
      v228 = *((_QWORD *)this + 17);
      v229 = v129;
      if (v129)
      {
        p_shared_owners = (unint64_t *)&v129->__shared_owners_;
        do
          v131 = __ldxr(p_shared_owners);
        while (__stxr(v131 + 1, p_shared_owners));
      }
      v132 = (char *)__p[0];
      if (v132 + 8 == v133)
        v134 = 0;
      else
        v134 = *((_QWORD *)v133 + 5) + 8;
      v135 = *(_DWORD *)v134;
      if (*(_DWORD *)v134 != 1718644323)
        goto LABEL_277;
      if (*(char *)(v134 + 47) < 0)
      {
        if (*(_QWORD *)(v134 + 32))
          goto LABEL_276;
      }
      else if (*(_BYTE *)(v134 + 47))
      {
        goto LABEL_276;
      }
      (*(void (**)(std::__split_buffer<std::string> *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 2)
                                                                                              + 16))(&__v, *((_QWORD *)this + 2), 1);
      v136 = __v.__first_;
      if (__v.__first_)
      {
        if (&v136->__r_.__value_.__r.__words[1] != v137)
        {
          v138 = v137[5];
          v139 = *(_DWORD *)(v138 + 8);
          if (v139 == 1718642798 || v139 == 1718909044)
          {
            v141 = *(_QWORD *)(v138 + 56);
            v142 = *(_QWORD *)(v134 + 48);
            v143 = *(unsigned __int8 *)(v141 + 63);
            v144 = *(_QWORD *)(v141 + 48);
            if ((v143 & 0x80u) == 0)
              v145 = *(unsigned __int8 *)(v141 + 63);
            else
              v145 = *(_QWORD *)(v141 + 48);
            v146 = *(unsigned __int8 *)(v142 + 63);
            v147 = (char)v146;
            if ((v146 & 0x80u) != 0)
              v146 = *(_QWORD *)(v142 + 48);
            if (v145 == v146)
            {
              v148 = (const void **)(v141 + 40);
              v151 = *(unsigned __int8 **)(v142 + 40);
              v149 = (unsigned __int8 *)(v142 + 40);
              v150 = v151;
              if (v147 >= 0)
                v152 = v149;
              else
                v152 = v150;
              if ((v143 & 0x80) != 0)
              {
                if (!memcmp(*v148, v152, v144))
                {
LABEL_300:
                  v153 = 0;
                  goto LABEL_268;
                }
              }
              else
              {
                if (!(_DWORD)v143)
                  goto LABEL_300;
                while (*(unsigned __int8 *)v148 == *v152)
                {
                  v148 = (const void **)((char *)v148 + 1);
                  ++v152;
                  if (!--v143)
                    goto LABEL_300;
                }
              }
            }
          }
        }
      }
      v153 = 1;
LABEL_268:
      begin = (std::__shared_weak_count *)__v.__begin_;
      if (!__v.__begin_)
        goto LABEL_272;
      v155 = &__v.__begin_->__r_.__value_.__l.__size_;
      do
        v156 = __ldaxr(v155);
      while (__stlxr(v156 - 1, v155));
      if (!v156)
      {
        ((void (*)(std::__shared_weak_count *))begin->__on_zero_shared)(begin);
        std::__shared_weak_count::__release_weak(begin);
        if ((v153 & 1) == 0)
        {
LABEL_275:
          v132 = (char *)__p[0];
LABEL_276:
          v135 = *(_DWORD *)v134;
LABEL_277:
          if (v124 == v125)
          {
            v124 = v125;
            v10 = v135 == 1886809699;
            v135 = 1886809699;
            if (v10)
              goto LABEL_325;
            (*(void (**)(std::__split_buffer<std::string> *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 2) + 16))(&__v, *((_QWORD *)this + 2), 1);
            v157 = __v.__first_;
            if (!__v.__first_
            {
LABEL_305:
              v162 = 1;
            }
            else
            {
              v159 = v158[5];
              v160 = *(_DWORD *)(v159 + 8);
              if (v160 != 1718642798 && v160 != 1718909044)
              {
                if (v160 != 1853189228)
                  goto LABEL_305;
                v166 = (_QWORD *)(v159 + 32);
                v167 = *(char *)(v159 + 55);
                if (v167 < 0)
                {
                  if (*(_QWORD *)(v159 + 40) != 1)
                    goto LABEL_305;
                  v166 = (_QWORD *)*v166;
                }
                else if (v167 != 1)
                {
                  goto LABEL_305;
                }
                if (*(_BYTE *)v166 != 46)
                  goto LABEL_305;
                v162 = 0;
                v124 = v125 + 1;
LABEL_307:
                v168 = (std::__shared_weak_count *)__v.__begin_;
                if (!__v.__begin_)
                  goto LABEL_311;
                v169 = &__v.__begin_->__r_.__value_.__l.__size_;
                do
                  v170 = __ldaxr(v169);
                while (__stlxr(v170 - 1, v169));
                if (!v170)
                {
                  ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                  std::__shared_weak_count::__release_weak(v168);
                  if (v162)
                    goto LABEL_312;
                }
                else
                {
LABEL_311:
                  if (v162)
                  {
LABEL_312:
                    Agglomerate::set<TokenPhrasingItem>((uint64_t)__p[0], (__int16 *)&v227);
                    std::deque<std::shared_ptr<Agglomerate>>::push_back((_QWORD *)this + 4, (__int128 *)__p);
                    v171 = operator new(0x30uLL);
                    *(_OWORD *)((char *)v171 + 8) = 0u;
                    v171[2] = 0u;
                    *((_QWORD *)v171 + 3) = v171 + 2;
                    *(_QWORD *)v171 = &off_1EA932198;
                    *(_QWORD *)&v172 = (char *)v171 + 24;
                    *((_QWORD *)&v172 + 1) = v171;
                    v173 = (std::__shared_weak_count *)__p[1];
                    *(_OWORD *)__p = v172;
                    if (v173)
                    {
                      v174 = (unint64_t *)&v173->__shared_owners_;
                      do
                        v175 = __ldaxr(v174);
                      while (__stlxr(v175 - 1, v174));
                      if (!v175)
                      {
                        ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                        std::__shared_weak_count::__release_weak(v173);
                      }
                    }
                    v238 = 0;
                    v237 = 0u;
                    LODWORD(__v.__first_) = 1886809699;
                    __v.__begin_ = (std::__split_buffer<std::string>::pointer)(*(_QWORD *)(v134 + 16)
                                                                             + *(_QWORD *)(v134 + 8));
                    memset(&__v.__end_, 0, 24);
                    std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)&v237 + 1, *(_QWORD *)(v134 + 48), *(_QWORD *)(v134 + 56));
                    Agglomerate::set<TokenBasicItem>((uint64_t)__p[0], (__int128 *)&__v);
                    v176 = v238;
                    if (v238)
                    {
                      v177 = (unint64_t *)&v238->__shared_owners_;
                      do
                        v178 = __ldaxr(v177);
                      while (__stlxr(v178 - 1, v177));
                      if (!v178)
                      {
                        ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                        std::__shared_weak_count::__release_weak(v176);
                      }
                    }
                    if (SBYTE7(v237) < 0)
                      operator delete(__v.__end_cap_.__value_);
                    v135 = *(_DWORD *)v134;
LABEL_325:
                    v179 = *((_QWORD *)this + 15);
                    __v.__first_ = &buf;
                    v181 = v180[5];
                    if (v181)
                    {
                      *(_WORD *)(v181 + 8) = (v135 == 1886809699) | ((v124 == v125) << 8);
                    }
                    else
                    {
                      v182 = operator new();
                      *(_QWORD *)v182 = &off_1EA922E28;
                      *(_WORD *)(v182 + 8) = (v135 == 1886809699) | ((v124 == v125) << 8);
                      v183 = v180[5];
                      v180[5] = v182;
                      if (v183)
                        (*(void (**)(uint64_t))(*(_QWORD *)v183 + 8))(v183);
                    }
                    LOBYTE(v227.__begin_) = 1;
                    BYTE1(v227.__begin_) = v125 == v3 - 1;
                  }
                }
                if (v124 <= v125)
                {
                  while (v123 != v231)
                  {
                    v184 = *v123++;
                    v124 = *((_QWORD *)*v225 + v184);
                    if (v124 > v125)
                      goto LABEL_335;
                  }
                  v123 = v231;
                  v124 = v3 - 1;
                }
LABEL_335:
                Agglomerate::set<TokenPhrasingItem>((uint64_t)__p[0], (__int16 *)&v227);
                if (LOBYTE(v227.__begin_))
                {
                  v185 = (char *)operator new(0x30uLL);
                  *(_OWORD *)(v185 + 8) = 0u;
                  *((_OWORD *)v185 + 2) = 0u;
                  *(_QWORD *)v185 = &off_1EA932198;
                  *((_QWORD *)v185 + 3) = v185 + 32;
                  __v.__first_ = (std::__split_buffer<std::string>::pointer)(v185 + 24);
                  __v.__begin_ = (std::__split_buffer<std::string>::pointer)v185;
                  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)this + 120, (__int128 *)&__v);
                  v186 = (std::__shared_weak_count *)__v.__begin_;
                  if (__v.__begin_)
                  {
                    v187 = &__v.__begin_->__r_.__value_.__l.__size_;
                    do
                      v188 = __ldaxr(v187);
                    while (__stlxr(v188 - 1, v187));
                    if (!v188)
                    {
                      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
                      std::__shared_weak_count::__release_weak(v186);
                    }
                  }
                }
                if (BYTE1(v227.__begin_))
                {
                  v189 = (char *)operator new(0x30uLL);
                  *(_OWORD *)(v189 + 8) = 0u;
                  *((_OWORD *)v189 + 2) = 0u;
                  *(_QWORD *)v189 = &off_1EA932198;
                  *((_QWORD *)v189 + 3) = v189 + 32;
                  __v.__first_ = (std::__split_buffer<std::string>::pointer)(v189 + 24);
                  __v.__begin_ = (std::__split_buffer<std::string>::pointer)v189;
                  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)this + 136, (__int128 *)&__v);
                  v190 = (std::__shared_weak_count *)__v.__begin_;
                  if (__v.__begin_)
                  {
                    v191 = &__v.__begin_->__r_.__value_.__l.__size_;
                    do
                      v192 = __ldaxr(v191);
                    while (__stlxr(v192 - 1, v191));
                    if (!v192)
                    {
                      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                      std::__shared_weak_count::__release_weak(v190);
                    }
                  }
                }
                std::deque<std::shared_ptr<Agglomerate>>::push_back((_QWORD *)this + 4, (__int128 *)__p);
                (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
                goto LABEL_348;
              }
              v162 = 0;
            }
            v124 = v125;
            goto LABEL_307;
          }
          if (v135 == 1651664235)
          {
            if (v132 + 8 != v163)
            {
              v164 = *(_DWORD *)(*((_QWORD *)v163 + 5) + 12);
              if (v164 == 1 || v164 >= 9)
                LOWORD(v227.__begin_) = 257;
            }
          }
          else if (v135 == 1886809699)
          {
            goto LABEL_325;
          }
          goto LABEL_335;
        }
      }
      else
      {
LABEL_272:
        if ((v153 & 1) == 0)
          goto LABEL_275;
      }
      (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
LABEL_348:
      v193 = v229;
      if (v229)
      {
        v194 = (unint64_t *)&v229->__shared_owners_;
        do
          v195 = __ldaxr(v194);
        while (__stlxr(v195 - 1, v194));
        if (!v195)
        {
          ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
          std::__shared_weak_count::__release_weak(v193);
        }
      }
      value = v227.__end_cap_.__value_;
      if (v227.__end_cap_.__value_)
      {
        v197 = &v227.__end_cap_.__value_->__r_.__value_.__l.__size_;
        do
          v198 = __ldaxr(v197);
        while (__stlxr(v198 - 1, v197));
        if (!v198)
        {
          (*(void (**)(std::string *))(value->__r_.__value_.__r.__words[0] + 16))(value);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)value);
        }
      }
      v199 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v200 = (unint64_t *)((char *)__p[1] + 8);
        do
          v201 = __ldaxr(v200);
        while (__stlxr(v201 - 1, v200));
        if (!v201)
        {
          ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
          std::__shared_weak_count::__release_weak(v199);
        }
      }
      if (++v125 == v226)
      {
        v122 = (unint64_t *)v230;
        break;
      }
    }
  }
LABEL_367:
  if (v122)
  {
    v231 = v122;
    operator delete(v122);
  }
  v202 = (std::string *)*((_QWORD *)this + 19);
  v203 = (std::string *)*((_QWORD *)this + 20);
  while (v203 != v202)
  {
    __v.__first_ = --v203;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  }
  *((_QWORD *)this + 20) = v202;
  *((_QWORD *)this + 23) = *((_QWORD *)this + 22);
}

void sub_1DEABF530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, char *a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  uint64_t v60;

  std::__tree<std::string>::destroy((uint64_t)&a18, a19);
  v60 = 0;
  while (1)
  {
    if (*(&a59 + v60) < 0)
      operator delete(*(void **)((char *)&a54 + v60));
    v60 -= 24;
    if (v60 == -72)
    {
      _Unwind_Resume(a1);
    }
  }
}

void std::__shared_ptr_emplace<PhrasingImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9323C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PhrasingImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9323C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<PhrasingImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<PhrasingEngine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932AC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PhrasingEngine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932AC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<PhrasingEngine>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 24;
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::~TranslationBeamSearch(a1 + 6464);
  return kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::~TranslationBeamSearch(v1);
}

void PhrasingPersistentModule::~PhrasingPersistentModule(void **this)
{
  *this = &off_1EA920BB0;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
}

{
  *this = &off_1EA920BB0;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x1DF0ED014);
}

void FilterAudioImpl::~FilterAudioImpl(void **this)
{
  FrontendModule::~FrontendModule(this);
  JUMPOUT(0x1DF0ED014);
}

void FilterAudioImpl::generate_tokens(FilterAudioImpl *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;
  _DWORD *prompt_by_id;
  NSObject *v12;
  const char *v13;
  __int128 *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  int v21;
  NSObject *v22;
  const char *v23;
  __int128 *v24;
  unint64_t *v25;
  unint64_t v26;
  NSObject *v27;
  const char *v28;
  __int128 *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *exception;
  __int128 v34;
  __int128 v35;
  _BYTE v36[8];
  uint64_t v37;
  uint64_t v38;
  int v39;
  std::string __p;
  std::string __str;
  __int128 v42;
  _BYTE buf[12];
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 8))
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 2) + 16))(&v42, *((_QWORD *)this + 2), 0);
    if ((_QWORD)v42)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
      if ((**((_QWORD **)this + 13)
         || ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 72))(*((_QWORD *)this + 14)) & 1) != 0)
        && (v2 = v42,
      {
        if ((_QWORD *)(v2 + 8) == v7)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          StringFormatter::StringFormatter((StringFormatter *)v36, "Audio token without associated audio item");
          MEMORY[0x1DF0EC99C](exception, v36);
          __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
        v8 = v7[5];
        v9 = (__int128 *)(v8 + 8);
        if (*(char *)(v8 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v8 + 8), *(_QWORD *)(v8 + 16));
        }
        else
        {
          v10 = *v9;
          __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 24);
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v10;
        }
        PromptStream::normalize_audio_prompt_name((void **)&__str.__r_.__value_.__l.__data_);
        v36[0] = 0;
        v37 = 0;
        v38 = 0;
        v39 = 0x7FFFFFFF;
        memset(&__p, 0, sizeof(__p));
        prompt_by_id = PromptDatabase::find_prompt_by_id(*((_QWORD *)this + 13), &__str, 1);
        if (prompt_by_id)
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v12 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
          {
            v14 = (__int128 *)(v8 + 8);
            if (*(char *)(v8 + 31) < 0)
              v14 = *(__int128 **)v9;
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v14;
          }
          if (*(char *)(v8 + 31) < 0)
            v9 = *(__int128 **)v9;
          std::string::operator=(&__p, &__str);
          v38 = *((_QWORD *)prompt_by_id + 4);
          v15 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
          v35 = v42;
          if (*((_QWORD *)&v42 + 1))
          {
            v16 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
            do
              v17 = __ldxr(v16);
            while (__stxr(v17 + 1, v16));
          }
          FilterAudioImpl::audio_item_post_check((uint64_t)this, (uint64_t *)&v35, v5, (uint64_t)v36);
          if (v15)
          {
            p_shared_owners = (unint64_t *)&v15->__shared_owners_;
            do
              v19 = __ldaxr(p_shared_owners);
            while (__stlxr(v19 - 1, p_shared_owners));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
        }
        else
        {
          v20 = *((_QWORD *)this + 14);
          std::string::basic_string[abi:ne180100]<0>(buf, "🥫");
          v21 = (*(uint64_t (**)(uint64_t, std::string *, _BYTE *))(*(_QWORD *)v20 + 16))(v20, &__str, buf);
          if (v44 < 0)
            operator delete(*(void **)buf);
          if (v21 == -1)
          {
            if (Diagnostics_GetLogObject(void)::onceToken != -1)
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
            v27 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
            {
              v29 = (__int128 *)(v8 + 8);
              if (*(char *)(v8 + 31) < 0)
                v29 = *(__int128 **)v9;
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = v29;
            }
            if (*(char *)(v8 + 31) < 0)
              v9 = *(__int128 **)v9;
          }
          else
          {
            MEMORY[0x1DF0ECA80](&__p, "GPROMPT");
            v39 = v21;
            if (Diagnostics_GetLogObject(void)::onceToken != -1)
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
            v22 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
            {
              v24 = (__int128 *)(v8 + 8);
              if (*(char *)(v8 + 31) < 0)
                v24 = *(__int128 **)v9;
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = v24;
            }
            if (*(char *)(v8 + 31) < 0)
              v9 = *(__int128 **)v9;
            v34 = v42;
            if (*((_QWORD *)&v42 + 1))
            {
              v25 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
              do
                v26 = __ldxr(v25);
              while (__stxr(v26 + 1, v25));
            }
            FilterAudioImpl::audio_item_post_check((uint64_t)this, (uint64_t *)&v34, v5, (uint64_t)v36);
            std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&v34);
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
      else
      {
        std::deque<std::shared_ptr<Agglomerate>>::push_back((_QWORD *)this + 4, &v42);
      }
    }
    else
    {
      *((_BYTE *)this + 8) = 1;
    }
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (*((_QWORD *)&v42 + 1))
    {
      v31 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }
}

void sub_1DEABFFEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,char a34)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a26 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  _Unwind_Resume(a1);
}

void FilterAudioImpl::audio_item_post_check(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _BOOL4 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  char v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t *v39;
  std::__shared_weak_count *v40;
  uint64_t *v41;
  std::__shared_weak_count *v42;

  Agglomerate::set<TokenPromptItem>(*a2, a4);
  std::deque<std::shared_ptr<Agglomerate>>::push_back((_QWORD *)(a1 + 32), (__int128 *)a2);
  v7 = *(uint64_t **)(a3 + 48);
  v8 = *(std::__shared_weak_count **)(a3 + 56);
  v39 = v7;
  v40 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (v7)
  {
    while (*((_DWORD *)v7 + 8) != 10)
    {
      std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](&v39, *v7, v7[1]);
      v7 = v39;
      if (!v39)
        goto LABEL_47;
    }
    do
    {
      (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 16))(&v37, *(_QWORD *)(a1 + 16), 0);
      if (!v37)
        goto LABEL_40;
      v12 = *(uint64_t **)(v11 + 56);
      v13 = *(std::__shared_weak_count **)(v11 + 64);
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      v17 = v39;
      v16 = v40;
      if (v40)
      {
        v18 = (unint64_t *)&v40->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v41 = v12;
      v42 = v13;
      if (v13)
      {
        v20 = (unint64_t *)&v13->__shared_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      if (v12)
      {
        do
        {
          v22 = v12 == v17;
          if (v12 == v17)
            break;
          std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](&v41, *v12, v12[1]);
          v12 = v41;
        }
        while (v41);
        v23 = v42;
        if (!v42)
        {
LABEL_27:
          if (!v16)
            goto LABEL_33;
          goto LABEL_28;
        }
      }
      else
      {
        v22 = 0;
        v23 = v13;
        if (!v13)
          goto LABEL_27;
      }
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (v25)
        goto LABEL_27;
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      if (!v16)
        goto LABEL_33;
LABEL_28:
      v26 = (unint64_t *)&v16->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      if (!v13)
        goto LABEL_37;
LABEL_33:
      v28 = (unint64_t *)&v13->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
        if (v22)
        {
LABEL_38:
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
          v30 = 1;
          goto LABEL_41;
        }
      }
      else
      {
LABEL_37:
        if (v22)
          goto LABEL_38;
      }
LABEL_40:
      v30 = 0;
LABEL_41:
      v31 = v38;
      if (v38)
      {
        v32 = (unint64_t *)&v38->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
    }
    while ((v30 & 1) != 0);
  }
LABEL_47:
  v34 = v40;
  if (v40)
  {
    v35 = (unint64_t *)&v40->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_1DEAC0340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<FilterAudioImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932DA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FilterAudioImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932DA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<FilterAudioImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void FilterAudioPersistentModule::~FilterAudioPersistentModule(void **this)
{
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x1DF0ED014);
}

void NormAction_en::~NormAction_en(NormAction_en *this)
{
  UTFNumberFormatter *v2;

  *(_QWORD *)this = &off_1EA91D108;
  v2 = (NormAction_en *)((char *)this + 48);
  UTFNumberFormatter::~UTFNumberFormatter((NormAction_en *)((char *)this + 56));
  UTFNumberFormatter::~UTFNumberFormatter(v2);
  NormAction::~NormAction(this);
}

{
  UTFNumberFormatter *v2;

  *(_QWORD *)this = &off_1EA91D108;
  v2 = (NormAction_en *)((char *)this + 48);
  UTFNumberFormatter::~UTFNumberFormatter((NormAction_en *)((char *)this + 56));
  UTFNumberFormatter::~UTFNumberFormatter(v2);
  NormAction::~NormAction(this);
  JUMPOUT(0x1DF0ED014);
}

void NormAction_en::cardinal(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  unint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  const std::string::value_type *v10;
  UChar32 v11;
  int v12;
  const char *v13;
  unint64_t v14;
  uint64_t v15;
  std::string::size_type v16;
  std::string *v17;
  uint64_t v18;
  std::string *p_p;
  std::string __p;
  std::string *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int8 *)(a2 + 23);
  v7 = (char)v6;
  v8 = *(_QWORD *)(a2 + 8);
  if ((v6 & 0x80u) == 0)
    v9 = *(unsigned __int8 *)(a2 + 23);
  else
    v9 = *(_QWORD *)(a2 + 8);
  if (v9)
  {
    v10 = *(const std::string::value_type **)a2;
    if (v7 >= 0)
      v10 = (const std::string::value_type *)a2;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
    __p.__r_.__value_.__l.__size_ = v9 << 32;
    v11 = UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)&__p);
    v12 = u_isdigit(v11);
    v6 = *(unsigned __int8 *)(a2 + 23);
    v7 = (char)v6;
    if (!v12)
    {
      if ((char)v6 < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        __p = *(std::string *)a2;
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      p_p->__r_.__value_.__s.__data_[0] = 114;
      NormAction::roman(a3, a1, (char *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      return;
    }
    v8 = *(_QWORD *)(a2 + 8);
  }
  if (v7 >= 0)
    v13 = (const char *)a2;
  else
    v13 = *(const char **)a2;
  if (v7 >= 0)
    v14 = v6;
  else
    v14 = v8;
  UTFString::to_utf16((std::basic_string<char16_t> *)&__p, v13, v14);
  v15 = unum_parseInt64();
  v16 = a1 + 48;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA931C98;
  __p.__r_.__value_.__l.__size_ = v16;
  __p.__r_.__value_.__r.__words[2] = v15;
  v21 = &__p;
  UTFString_Impl::formatNumberAsUTF8(a3, &__p);
  v17 = v21;
  if (v21 == &__p)
  {
    v18 = 4;
    v17 = &__p;
  }
  else
  {
    if (!v21)
      return;
    v18 = 5;
  }
  (*(void (**)(void))(v17->__r_.__value_.__r.__words[0] + 8 * v18))();
}

void sub_1DEAC0644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void NormAction_en::ordinal(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  unint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  const std::string::value_type *v10;
  UChar32 v11;
  int v12;
  const char *v13;
  unint64_t v14;
  uint64_t v15;
  std::string::size_type v16;
  std::string *v17;
  uint64_t v18;
  std::string *p_p;
  std::string __p;
  std::string *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int8 *)(a2 + 23);
  v7 = (char)v6;
  v8 = *(_QWORD *)(a2 + 8);
  if ((v6 & 0x80u) == 0)
    v9 = *(unsigned __int8 *)(a2 + 23);
  else
    v9 = *(_QWORD *)(a2 + 8);
  if (v9)
  {
    v10 = *(const std::string::value_type **)a2;
    if (v7 >= 0)
      v10 = (const std::string::value_type *)a2;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
    __p.__r_.__value_.__l.__size_ = v9 << 32;
    v11 = UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)&__p);
    v12 = u_isdigit(v11);
    v6 = *(unsigned __int8 *)(a2 + 23);
    v7 = (char)v6;
    if (!v12)
    {
      if ((char)v6 < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        __p = *(std::string *)a2;
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      p_p->__r_.__value_.__s.__data_[0] = 82;
      NormAction::roman(a3, a1, (char *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      return;
    }
    v8 = *(_QWORD *)(a2 + 8);
  }
  if (v7 >= 0)
    v13 = (const char *)a2;
  else
    v13 = *(const char **)a2;
  if (v7 >= 0)
    v14 = v6;
  else
    v14 = v8;
  UTFString::to_utf16((std::basic_string<char16_t> *)&__p, v13, v14);
  v15 = unum_parseInt64();
  v16 = a1 + 56;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA931C98;
  __p.__r_.__value_.__l.__size_ = v16;
  __p.__r_.__value_.__r.__words[2] = v15;
  v21 = &__p;
  UTFString_Impl::formatNumberAsUTF8(a3, &__p);
  v17 = v21;
  if (v21 == &__p)
  {
    v18 = 4;
    v17 = &__p;
  }
  else
  {
    if (!v21)
      return;
    v18 = 5;
  }
  (*(void (**)(void))(v17->__r_.__value_.__r.__words[0] + 8 * v18))();
}

void sub_1DEAC086C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL NormAction_en::consume_next_token(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const char *v3;
  __int128 *v4;

  v2 = 0;
  if (*(char *)(a2 + 23) >= 0)
    v3 = (const char *)a2;
  else
    v3 = *(const char **)a2;
  while (strcmp((&NormAction_en::consume_next_token(std::string const&)::multipliers)[v2], v3))
  {
    if (++v2 == 3)
    {
      v4 = &xmmword_1EA94BC28;
      return v4 != &xmmword_1EA94BC28;
    }
  }
  v4 = (__int128 *)&(&NormAction_en::consume_next_token(std::string const&)::multipliers)[v2];
  return v4 != &xmmword_1EA94BC28;
}

void PartOfSpeechImpl::~PartOfSpeechImpl(void **this)
{
  *this = &off_1EA91E920;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 13));
  FrontendModule::~FrontendModule(this);
}

{
  *this = &off_1EA91E920;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 13));
  FrontendModule::~FrontendModule(this);
  JUMPOUT(0x1DF0ED014);
}

uint64_t PartOfSpeechImpl::clear(PartOfSpeechImpl *this)
{
  _QWORD *v2;
  void **v3;
  void **v4;
  _QWORD *v5;
  unint64_t v6;
  void **v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t result;
  __n128 __p;
  char v18;

  v2 = (_QWORD *)*((_QWORD *)this + 13);
  v3 = (void **)v2[1];
  v4 = (void **)v2[2];
  if (v4 == v3)
  {
    v5 = v2 + 5;
    v4 = (void **)v2[1];
  }
  else
  {
    v5 = v2 + 5;
    v6 = v2[4];
    v7 = &v3[v6 / 0xAA];
    v8 = (unint64_t)*v7;
    v9 = (unint64_t)*v7 + 24 * (v6 % 0xAA);
    v10 = (unint64_t)v3[(v2[5] + v6) / 0xAA] + 24 * ((v2[5] + v6) % 0xAA);
    if (v9 != v10)
    {
      do
      {
        if (*(char *)(v9 + 23) < 0)
        {
          operator delete(*(void **)v9);
          v8 = (unint64_t)*v7;
        }
        v9 += 24;
        if (v9 - v8 == 4080)
        {
          v11 = (unint64_t)v7[1];
          ++v7;
          v8 = v11;
          v9 = v11;
        }
      }
      while (v9 != v10);
      v3 = (void **)v2[1];
      v4 = (void **)v2[2];
    }
  }
  *v5 = 0;
  v12 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      v13 = v2[2];
      v3 = (void **)(v2[1] + 8);
      v2[1] = v3;
      v12 = v13 - (_QWORD)v3;
    }
    while (v12 > 0x10);
  }
  if (v12 >> 3 == 1)
  {
    v14 = 85;
  }
  else
  {
    if (v12 >> 3 != 2)
      goto LABEL_17;
    v14 = 170;
  }
  v2[4] = v14;
LABEL_17:
  std::string::basic_string[abi:ne180100]<0>(&__p, "-START-");
  std::deque<std::string>::push_back(v2, &__p);
  if (v18 < 0)
    operator delete((void *)__p.n128_u64[0]);
  std::string::basic_string[abi:ne180100]<0>(&__p, "-START2-");
  v15 = std::deque<std::string>::push_back(v2, &__p);
  if (v18 < 0)
    operator delete((void *)__p.n128_u64[0]);
  MEMORY[0x1DF0ECA80](v2 + 16, "-START2-", v15);
  MEMORY[0x1DF0ECA80](v2 + 19, "-START-");
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  FrontendModule::delete_tokens(this);
  *((_BYTE *)this + 8) = 0;
  result = *((_QWORD *)this + 2);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void sub_1DEAC0B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void PartOfSpeechImpl::generate_tokens(PartOfSpeechImpl *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  unint64_t v7;
  uint64_t v8;
  std::string::size_type v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  std::string::size_type size;
  NSObject *v20;
  std::string *v21;
  std::string *v22;
  const char *v23;
  std::string *v24;
  std::string *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  int v34;
  void *v35;
  uint64_t v36;
  NSObject *v37;
  std::string *v38;
  const char *v39;
  std::string *v40;
  const char *v41;
  const char *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  std::string *p_buf;
  char *v52;
  unint64_t v53;
  int v54;
  std::string *v55;
  unint64_t v56;
  int v57;
  std::string *v58;
  char *v59;
  int *v60;
  char *v61;
  char *v62;
  int v63;
  int *v64;
  int v65;
  int v66;
  BOOL v67;
  unint64_t v68;
  NSObject *v69;
  std::string *v70;
  std::string::size_type v71;
  const char *v72;
  std::string *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  std::string *v78;
  std::string *p_p;
  std::string::size_type v80;
  NSObject *v81;
  std::string *v82;
  std::string *v83;
  std::string *v84;
  const char *v85;
  std::string *v86;
  std::string *v87;
  std::string *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  const char *v92;
  std::string *__str;
  std::string v94;
  std::string v95;
  __int128 v96;
  std::string v97;
  std::string __p;
  std::string v99;
  std::string *v100;
  std::string buf;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 8))
    return;
  (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 2) + 16))(&v96, *((_QWORD *)this + 2), 0);
  v2 = v96;
  if (!(_QWORD)v96)
  {
    *((_BYTE *)this + 8) = 1;
    goto LABEL_232;
  }
  if ((_QWORD *)(v2 + 8) != v3)
  {
    v4 = v3[5];
    v5 = *(_DWORD *)(v4 + 8);
    if (v5 == 1952807028 || v5 == 1886809699)
    {
      v7 = *((_QWORD *)this + 16);
      if (!v7)
        *((_QWORD *)this + 17) = 0;
      if (v7 >= *((_QWORD *)this + 15))
      {
LABEL_31:
        memset(&v95, 0, sizeof(v95));
        if ((_QWORD *)(v2 + 8) == v18)
          goto LABEL_53;
        std::string::operator=(&v95, (const std::string *)(v18[5] + 40));
        size = HIBYTE(v95.__r_.__value_.__r.__words[2]);
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v95.__r_.__value_.__l.__size_;
        if (!size)
        {
LABEL_53:
          v26 = *((_QWORD *)this + 13);
          __str = (std::string *)(v4 + 32);
          v27 = *(_DWORD *)(*(_QWORD *)(v26 + 80) + 12);
          if (v27)
          {
            v28 = 0;
            if (*(char *)(v4 + 55) >= 0)
              v29 = (const char *)(v4 + 32);
            else
              v29 = *(const char **)(v4 + 32);
            v31 = *(_QWORD *)(v26 + 112);
            v30 = *(_QWORD *)(v26 + 120);
            do
            {
              v32 = (v28 + v27) >> 1;
              v33 = *(unsigned int *)(v31 + 4 * v32);
              v34 = strcmp(v29, (const char *)(v30 + (v33 & 0xFFFFFF)));
              if (v34 < 1)
              {
                v27 = (v28 + v27) >> 1;
                if ((v34 & 0x80000000) == 0)
                {
                  if (Diagnostics_GetLogObject(void)::onceToken != -1)
                    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                  v68 = v33 >> 24;
                  v69 = Diagnostics_GetLogObject(void)::__profile_log_default;
                  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                  {
                    Censor::global_plaintext(&v99, (uint64_t)__str);
                    v70 = (v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                        ? &v99
                        : (std::string *)v99.__r_.__value_.__r.__words[0];
                    v71 = *(_QWORD *)(v26 + 120) + *(unsigned int *)(*(_QWORD *)(v26 + 88) + 4 * v68);
                    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
                    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v70;
                    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
                    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v71;
                    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v99.__r_.__value_.__l.__data_);
                  }
                  Censor::global_plaintext(&v99, (uint64_t)__str);
                  if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v73 = &v99;
                  else
                    v73 = (std::string *)v99.__r_.__value_.__r.__words[0];
                  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
                  {
                    v74 = (void *)v99.__r_.__value_.__r.__words[0];
                    goto LABEL_222;
                  }
                  goto LABEL_223;
                }
              }
              else
              {
                v28 = v32 + 1;
              }
            }
            while (v28 < v27);
          }
          v35 = *(void **)(v26 + 176);
          v36 = *(_QWORD *)(v26 + 184) - (_QWORD)v35;
          if (v36 >= 1)
            bzero(v35, 4 * (((unint64_t)v36 >> 2) - ((unint64_t)v36 > 3)) + 4);
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v37 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
          {
            Censor::global_plaintext(&v99, (uint64_t)__str);
            v38 = (v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &v99
                : (std::string *)v99.__r_.__value_.__r.__words[0];
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v38;
            if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v99.__r_.__value_.__l.__data_);
          }
          Censor::global_plaintext(&v99, (uint64_t)__str);
          if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v40 = &v99;
          else
            v40 = (std::string *)v99.__r_.__value_.__r.__words[0];
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v99.__r_.__value_.__l.__data_);
          v41 = (const char *)(v26 + 152);
          if (*(char *)(v26 + 175) < 0)
            v41 = *(const char **)v41;
          v42 = (const char *)(v26 + 128);
          if (*(char *)(v26 + 151) < 0)
            v42 = *(const char **)v42;
          v43 = *(_QWORD *)(v26 + 32);
          v44 = *(_QWORD *)(v26 + 8);
          v45 = *(_QWORD *)(v44 + 8 * ((v43 + 2) / 0xAA)) + 24 * ((v43 + 2) % 0xAA);
          if (*(char *)(v45 + 23) < 0)
            v45 = *(_QWORD *)v45;
          v46 = *(_QWORD *)(v44 + 8 * ((v43 + 1) / 0xAA)) + 24 * ((v43 + 1) % 0xAA);
          if (*(char *)(v46 + 23) < 0)
            v46 = *(_QWORD *)v46;
          v47 = *(_QWORD *)(v44 + 8 * (v43 / 0xAA)) + 24 * (v43 % 0xAA);
          if (*(char *)(v47 + 23) < 0)
            v47 = *(_QWORD *)v47;
          v48 = *(_QWORD *)(v44 + 8 * ((v43 + 3) / 0xAA)) + 24 * ((v43 + 3) % 0xAA);
          if (*(char *)(v48 + 23) < 0)
            v48 = *(_QWORD *)v48;
          v49 = *(_QWORD *)(v44 + 8 * ((v43 + 4) / 0xAA)) + 24 * ((v43 + 4) % 0xAA);
          if (*(char *)(v49 + 23) < 0)
            v49 = *(_QWORD *)v49;
          v92 = (const char *)v49;
          StringFormatter::StringFormatter((StringFormatter *)&v99, "%c", 1);
          POSEngine::add_feature((_QWORD *)v26, &v99);
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v99.__r_.__value_.__l.__data_);
          v50 = *(unsigned __int8 *)(v4 + 55);
          if ((v50 & 0x80u) != 0)
            v50 = *(_DWORD *)(v4 + 40);
          if (v50 <= 3)
            v50 = 3;
          std::string::basic_string(&buf, __str, (v50 - 3), 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__p);
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_buf = &buf;
          else
            p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          StringFormatter::StringFormatter((StringFormatter *)&v99, "%c%s", 2, (const char *)p_buf);
          POSEngine::add_feature((_QWORD *)v26, &v99);
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v99.__r_.__value_.__l.__data_);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
          v52 = (char *)(v4 + 32);
          if (*(char *)(v4 + 55) < 0)
            v52 = *(char **)(v4 + 32);
          StringFormatter::StringFormatter((StringFormatter *)&v99, "%c%c", 3, *v52);
          POSEngine::add_feature((_QWORD *)v26, &v99);
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v99.__r_.__value_.__l.__data_);
          StringFormatter::StringFormatter((StringFormatter *)&v99, "%c%s %s", 4, v41, (const char *)v45);
          POSEngine::add_feature((_QWORD *)v26, &v99);
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v99.__r_.__value_.__l.__data_);
          StringFormatter::StringFormatter((StringFormatter *)&v99, "%c%s %s", 5, v41, v42);
          POSEngine::add_feature((_QWORD *)v26, &v99);
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v99.__r_.__value_.__l.__data_);
          StringFormatter::StringFormatter((StringFormatter *)&v99, "%c%s", 6, v41);
          POSEngine::add_feature((_QWORD *)v26, &v99);
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v99.__r_.__value_.__l.__data_);
          StringFormatter::StringFormatter((StringFormatter *)&v99, "%c%s", 7, v42);
          POSEngine::add_feature((_QWORD *)v26, &v99);
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v99.__r_.__value_.__l.__data_);
          StringFormatter::StringFormatter((StringFormatter *)&v99, "%c%s", 8, (const char *)v45);
          POSEngine::add_feature((_QWORD *)v26, &v99);
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v99.__r_.__value_.__l.__data_);
          StringFormatter::StringFormatter((StringFormatter *)&v99, "%c%s", 9, (const char *)v46);
          POSEngine::add_feature((_QWORD *)v26, &v99);
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v99.__r_.__value_.__l.__data_);
          v53 = *(_QWORD *)(*(_QWORD *)(v26 + 8) + 8 * ((*(_QWORD *)(v26 + 32) + 1) / 0xAAuLL))
              + 24 * ((*(_QWORD *)(v26 + 32) + 1) % 0xAAuLL);
          v54 = *(unsigned __int8 *)(v53 + 23);
          if ((v54 & 0x80u) != 0)
            v54 = *(_DWORD *)(v53 + 8);
          if (v54 <= 3)
            v54 = 3;
          std::string::basic_string(&buf, (const std::string *)v53, (v54 - 3), 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__p);
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v55 = &buf;
          else
            v55 = (std::string *)buf.__r_.__value_.__r.__words[0];
          StringFormatter::StringFormatter((StringFormatter *)&v99, "%c%s", 10, (const char *)v55);
          POSEngine::add_feature((_QWORD *)v26, &v99);
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v99.__r_.__value_.__l.__data_);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
          StringFormatter::StringFormatter((StringFormatter *)&v99, "%c%s", 11, (const char *)v47);
          POSEngine::add_feature((_QWORD *)v26, &v99);
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v99.__r_.__value_.__l.__data_);
          StringFormatter::StringFormatter((StringFormatter *)&v99, "%c%s", 12, (const char *)v48);
          POSEngine::add_feature((_QWORD *)v26, &v99);
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v99.__r_.__value_.__l.__data_);
          v56 = *(_QWORD *)(*(_QWORD *)(v26 + 8) + 8 * ((*(_QWORD *)(v26 + 32) + 3) / 0xAAuLL))
              + 24 * ((*(_QWORD *)(v26 + 32) + 3) % 0xAAuLL);
          v57 = *(unsigned __int8 *)(v56 + 23);
          if ((v57 & 0x80u) != 0)
            v57 = *(_DWORD *)(v56 + 8);
          if (v57 <= 3)
            v57 = 3;
          std::string::basic_string(&buf, (const std::string *)v56, (v57 - 3), 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__p);
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v58 = &buf;
          else
            v58 = (std::string *)buf.__r_.__value_.__r.__words[0];
          StringFormatter::StringFormatter((StringFormatter *)&v99, "%c%s", 13, (const char *)v58);
          POSEngine::add_feature((_QWORD *)v26, &v99);
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v99.__r_.__value_.__l.__data_);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
          StringFormatter::StringFormatter((StringFormatter *)&v99, "%c%s", 14, v92);
          POSEngine::add_feature((_QWORD *)v26, &v99);
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v99.__r_.__value_.__l.__data_);
          v59 = *(char **)(v26 + 176);
          v60 = *(int **)(v26 + 184);
          if (v59 == (char *)v60)
          {
            v62 = *(char **)(v26 + 176);
          }
          else
          {
            v61 = v59 + 4;
            v62 = *(char **)(v26 + 176);
            if (v59 + 4 != (char *)v60)
            {
              v63 = *(_DWORD *)v59;
              v62 = *(char **)(v26 + 176);
              v64 = (int *)(v59 + 4);
              do
              {
                v66 = *v64++;
                v65 = v66;
                v67 = v63 < v66;
                if (v63 <= v66)
                  v63 = v65;
                if (v67)
                  v62 = v61;
                v61 = (char *)v64;
              }
              while (v64 != v60);
            }
          }
          v75 = v62 - v59;
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v68 = v75 >> 2;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG)
            || Diagnostics::s_log_level >= 7)
          {
            memset(&buf, 0, sizeof(buf));
            v76 = *(_QWORD *)(v26 + 80);
            if (*(_BYTE *)(v76 + 4))
            {
              v77 = 0;
              do
              {
                if (*(_DWORD *)(*(_QWORD *)(v26 + 176) + 4 * v77))
                {
                  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)(*(_QWORD *)(v26 + 120) + *(unsigned int *)(*(_QWORD *)(v26 + 88) + 4 * v77)));
                  UTFString::escape_invalid_utf8_codes(&v99, (uint64_t *)&__p);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                  if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v78 = &v99;
                  else
                    v78 = (std::string *)v99.__r_.__value_.__r.__words[0];
                  StringFormatter::StringFormatter((StringFormatter *)&__p, " %s:%lld", (const char *)v78, *(unsigned int *)(*(_QWORD *)(v26 + 176) + 4 * v77));
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    p_p = &__p;
                  else
                    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v80 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                  else
                    v80 = __p.__r_.__value_.__l.__size_;
                  std::string::append(&buf, (const std::string::value_type *)p_p, v80);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v99.__r_.__value_.__l.__data_);
                  v76 = *(_QWORD *)(v26 + 80);
                }
                ++v77;
              }
              while (v77 < *(unsigned __int8 *)(v76 + 4));
            }
            std::string::basic_string[abi:ne180100]<0>(&v99, (char *)(*(_QWORD *)(v26 + 120) + *(unsigned int *)(*(_QWORD *)(v26 + 88) + 4 * v68)));
            UTFString::escape_invalid_utf8_codes(&__p, (uint64_t *)&v99);
            if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v99.__r_.__value_.__l.__data_);
            if (Diagnostics_GetLogObject(void)::onceToken != -1)
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
            v81 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
            {
              Censor::global_plaintext(&v97, (uint64_t)__str);
              if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v82 = &v97;
              else
                v82 = (std::string *)v97.__r_.__value_.__r.__words[0];
              v83 = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v83 = (std::string *)__p.__r_.__value_.__r.__words[0];
              v84 = &buf;
              if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v84 = (std::string *)buf.__r_.__value_.__r.__words[0];
              LODWORD(v99.__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)v99.__r_.__value_.__r.__words + 4) = (std::string::size_type)v82;
              WORD2(v99.__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&v99.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v83;
              HIWORD(v99.__r_.__value_.__r.__words[2]) = 2080;
              v100 = v84;
              if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v97.__r_.__value_.__l.__data_);
            }
            Censor::global_plaintext(&v99, (uint64_t)__str);
            if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v86 = &v99;
            else
              v86 = (std::string *)v99.__r_.__value_.__r.__words[0];
            v87 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v87 = (std::string *)__p.__r_.__value_.__r.__words[0];
            v88 = &buf;
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v88 = (std::string *)buf.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v99.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            {
              v74 = (void *)buf.__r_.__value_.__r.__words[0];
LABEL_222:
              operator delete(v74);
            }
          }
LABEL_223:
          std::string::operator=((std::string *)(v26 + 128), (const std::string *)(v26 + 152));
          MEMORY[0x1DF0ECA80](v26 + 152, *(_QWORD *)(v26 + 120) + *(unsigned int *)(*(_QWORD *)(v26 + 88) + 4 * v68));
          if (*(char *)(v26 + 175) < 0)
            std::string::__init_copy_ctor_external(&v94, *(const std::string::value_type **)(v26 + 152), *(_QWORD *)(v26 + 160));
          else
            v94 = *(std::string *)(v26 + 152);
          if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v95.__r_.__value_.__l.__data_);
          v95 = v94;
        }
        else
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v20 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
          {
            Censor::global_plaintext(&v99, v4 + 32);
            if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v21 = &v99;
            else
              v21 = (std::string *)v99.__r_.__value_.__r.__words[0];
            v22 = &v95;
            if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v22 = (std::string *)v95.__r_.__value_.__r.__words[0];
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v22;
            if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v99.__r_.__value_.__l.__data_);
          }
          Censor::global_plaintext(&v99, v4 + 32);
          if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v24 = &v99;
          else
            v24 = (std::string *)v99.__r_.__value_.__r.__words[0];
          v25 = &v95;
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v25 = (std::string *)v95.__r_.__value_.__r.__words[0];
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v99.__r_.__value_.__l.__data_);
        }
        Agglomerate::set<TokenPartOfSpeechItem>(v96, (uint64_t)&v95);
        --*((_QWORD *)this + 16);
        if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v95.__r_.__value_.__l.__data_);
        goto LABEL_231;
      }
      while (1)
      {
        v8 = *((_QWORD *)this + 2);
        ++*((_QWORD *)this + 17);
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v8 + 16))(&buf);
        v9 = buf.__r_.__value_.__r.__words[0];
        if (buf.__r_.__value_.__r.__words[0])
        {
          if ((_QWORD *)(v9 + 8) == v10)
            goto LABEL_24;
          v11 = v10[5];
          v12 = *(_DWORD *)(v11 + 8);
          if (v12 != 1952807028 && v12 != 1886809699)
            goto LABEL_24;
          POSEngine::add_context(*((_QWORD *)this + 13), v11 + 32);
        }
        else
        {
          v14 = *((_QWORD *)this + 13);
          std::string::basic_string[abi:ne180100]<0>(&v99, &byte_1DEBD87CE);
          POSEngine::add_context(v14, (uint64_t)&v99);
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v99.__r_.__value_.__l.__data_);
        }
        ++*((_QWORD *)this + 16);
LABEL_24:
        v15 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
        if (buf.__r_.__value_.__l.__size_)
        {
          v16 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        if (*((_QWORD *)this + 16) >= *((_QWORD *)this + 15))
        {
          v2 = v96;
          goto LABEL_31;
        }
      }
    }
  }
LABEL_231:
  std::deque<std::shared_ptr<Agglomerate>>::push_back((_QWORD *)this + 4, &v96);
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
  --*((_QWORD *)this + 17);
LABEL_232:
  v89 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
  if (*((_QWORD *)&v96 + 1))
  {
    v90 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
}

void sub_1DEAC1B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  if (a36 < 0)
    operator delete(__p);
  if (*(char *)(v36 - 105) < 0)
    operator delete(*(void **)(v36 - 128));
  if (a24 < 0)
    operator delete(a19);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<PartOfSpeechImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9333C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PartOfSpeechImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9333C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<PartOfSpeechImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<POSEngine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935D50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<POSEngine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935D50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<POSEngine>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 200);
  if (v2)
  {
    *(_QWORD *)(a1 + 208) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 199) < 0)
    operator delete(*(void **)(a1 + 176));
  if (*(char *)(a1 + 175) < 0)
    operator delete(*(void **)(a1 + 152));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 72);
  return std::deque<std::string>::~deque[abi:ne180100](a1 + 24);
}

void PartOfSpeechPersistentModule::~PartOfSpeechPersistentModule(void **this)
{
  *this = &off_1EA921858;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
}

{
  *this = &off_1EA921858;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x1DF0ED014);
}

void TrimUtteranceImpl::~TrimUtteranceImpl(void **this)
{
  FrontendModule::~FrontendModule(this);
  JUMPOUT(0x1DF0ED014);
}

uint64_t TrimUtteranceImpl::clear(TrimUtteranceImpl *this)
{
  uint64_t result;

  *((_DWORD *)this + 26) = 0;
  *((_BYTE *)this + 108) = 0;
  FrontendModule::delete_tokens(this);
  *((_BYTE *)this + 8) = 0;
  result = *((_QWORD *)this + 2);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void TrimUtteranceImpl::generate_tokens(TrimUtteranceImpl *this)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const void **v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  const void **v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  int v40;
  __int128 v41;

  v2 = (_QWORD *)((char *)this + 32);
  while (!*((_BYTE *)this + 8))
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 2) + 16))(&v41, *((_QWORD *)this + 2), 0);
    if (!(_QWORD)v41)
    {
      v7 = 1;
      *((_BYTE *)this + 8) = 1;
      goto LABEL_78;
    }
    (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
    v3 = *((_DWORD *)this + 26);
    if (v3 == 1)
      goto LABEL_62;
    if (v3 == 3 && *((_BYTE *)this + 108))
      goto LABEL_77;
    v4 = v41;
    if ((_QWORD *)(v4 + 8) == v5)
    {
      v6 = 0;
      if (v3)
        goto LABEL_20;
    }
    else
    {
      v6 = v5[5] + 8;
      if (v3)
        goto LABEL_20;
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 16);
    if (*(char *)(v8 + 79) < 0)
    {
      if (!*(_QWORD *)(v8 + 64))
      {
LABEL_16:
        if (*(char *)(v8 + 103) < 0)
        {
          if (!*(_QWORD *)(v8 + 88))
          {
LABEL_61:
            *((_DWORD *)this + 26) = 1;
            goto LABEL_62;
          }
        }
        else if (!*(_BYTE *)(v8 + 103))
        {
          goto LABEL_61;
        }
        v3 = 4;
        goto LABEL_19;
      }
    }
    else if (!*(_BYTE *)(v8 + 79))
    {
      goto LABEL_16;
    }
    v3 = 2;
LABEL_19:
    *((_DWORD *)this + 26) = v3;
LABEL_20:
    v9 = *(_DWORD *)v6;
    if (*(_DWORD *)v6 != 1835102827)
    {
      if (v3 == 3)
      {
        v7 = 0;
        if (v9 != 1886809699 || *((_BYTE *)this + 108))
          goto LABEL_78;
LABEL_59:
        *((_BYTE *)this + 108) = 1;
LABEL_62:
        std::deque<std::shared_ptr<Agglomerate>>::push_back(v2, &v41);
        v7 = 1;
        goto LABEL_78;
      }
      if (v3 == 4)
      {
        if (v9 != 1886809699)
        {
          if (v9 == 1952807028)
            *((_BYTE *)this + 108) = 0;
          goto LABEL_62;
        }
        goto LABEL_59;
      }
      goto LABEL_77;
    }
    if (v3 != 4)
    {
      if (v3 != 2)
        goto LABEL_77;
      v10 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 16);
      v11 = *(unsigned __int8 *)(v6 + 47);
      v12 = *(_QWORD *)(v6 + 32);
      if ((v11 & 0x80u) == 0)
        v13 = *(unsigned __int8 *)(v6 + 47);
      else
        v13 = *(_QWORD *)(v6 + 32);
      v14 = *(unsigned __int8 *)(v10 + 79);
      v15 = (char)v14;
      if ((v14 & 0x80u) != 0)
        v14 = *(_QWORD *)(v10 + 64);
      if (v13 != v14)
        goto LABEL_64;
      v16 = (const void **)(v6 + 24);
      if (v15 >= 0)
        v17 = (unsigned __int8 *)(v10 + 56);
      else
        v17 = *(unsigned __int8 **)(v10 + 56);
      if ((v11 & 0x80) != 0)
      {
        if (memcmp(*v16, v17, v12))
          goto LABEL_64;
      }
      else if (*(_BYTE *)(v6 + 47))
      {
        v18 = (unsigned __int8 *)(v6 + 24);
        v19 = v11;
        while (*v18 == *v17)
        {
          ++v18;
          ++v17;
          if (!--v19)
            goto LABEL_65;
        }
LABEL_64:
        v7 = 0;
        goto LABEL_78;
      }
LABEL_65:
      v31 = *(unsigned __int8 *)(v10 + 103);
      v32 = (char)v31;
      if ((v31 & 0x80u) != 0)
        v31 = *(_QWORD *)(v10 + 88);
      if (v13 == v31)
      {
        v35 = *(unsigned __int8 **)(v10 + 80);
        v34 = (unsigned __int8 *)(v10 + 80);
        v33 = v35;
        if (v32 >= 0)
          v36 = v34;
        else
          v36 = v33;
        if ((v11 & 0x80) != 0)
        {
          if (memcmp(*v16, v36, v12))
            goto LABEL_89;
        }
        else if ((_DWORD)v11)
        {
          while (*(unsigned __int8 *)v16 == *v36)
          {
            v16 = (const void **)((char *)v16 + 1);
            ++v36;
            if (!--v11)
              goto LABEL_90;
          }
LABEL_89:
          v40 = 4;
LABEL_91:
          v7 = 0;
          *((_DWORD *)this + 26) = v40;
          goto LABEL_78;
        }
LABEL_90:
        v40 = 3;
        goto LABEL_91;
      }
      v40 = 4;
      goto LABEL_91;
    }
    v20 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 16);
    v21 = *(unsigned __int8 *)(v6 + 47);
    v22 = *(_QWORD *)(v6 + 32);
    v23 = *(_QWORD *)(v20 + 88);
    v24 = *(char *)(v20 + 103);
    if ((v21 & 0x80u) == 0)
      v25 = *(unsigned __int8 *)(v6 + 47);
    else
      v25 = *(_QWORD *)(v6 + 32);
    if (v24 >= 0)
      v23 = *(unsigned __int8 *)(v20 + 103);
    if (v25 != v23)
      goto LABEL_77;
    v26 = (const void **)(v6 + 24);
    v29 = *(unsigned __int8 **)(v20 + 80);
    v27 = (unsigned __int8 *)(v20 + 80);
    v28 = v29;
    if (v24 >= 0)
      v30 = v27;
    else
      v30 = v28;
    if ((v21 & 0x80) != 0)
    {
      if (memcmp(*v26, v30, v22))
        goto LABEL_77;
    }
    else if ((_DWORD)v21)
    {
      while (*(unsigned __int8 *)v26 == *v30)
      {
        v26 = (const void **)((char *)v26 + 1);
        ++v30;
        if (!--v21)
          goto LABEL_86;
      }
LABEL_77:
      v7 = 0;
      goto LABEL_78;
    }
LABEL_86:
    v7 = 0;
    *((_DWORD *)this + 26) = 3;
LABEL_78:
    v37 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
    if (!*((_QWORD *)&v41 + 1))
      goto LABEL_82;
    v38 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
      if ((v7 & 1) != 0)
        return;
    }
    else
    {
LABEL_82:
      if ((v7 & 1) != 0)
        return;
    }
  }
}

void sub_1DEAC224C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<TrimUtteranceImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933858;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TrimUtteranceImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933858;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<TrimUtteranceImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void TrimUtterancePersistentModule::~TrimUtterancePersistentModule(void **this)
{
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x1DF0ED014);
}

void Whisper::Whisper(Whisper *this, int a2)
{
  signed int v2;
  char *v3;
  char *v4;
  _BYTE v5[404];
  _BYTE v6[12];

  *(_QWORD *)&v6[4] = *MEMORY[0x1E0C80C00];
  v2 = (a2 / 1000 + 5) & 0xFFFFFFFE;
  if (v2 >= 48)
    v2 = 48;
  *((_DWORD *)this + 12) = a2;
  *((_DWORD *)this + 13) = v2;
  *(_OWORD *)((char *)this + 56) = 0u;
  v3 = (char *)this + 56;
  v4 = (char *)this + 80;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 8) = xmmword_1DED16CD0;
  *(_DWORD *)this = 16843009;
  *(_OWORD *)((char *)this + 24) = xmmword_1DED16CE0;
  *((_WORD *)this + 2) = 1;
  *((_QWORD *)this + 5) = 0x3E4CCCCD3C23D70ALL;
  if (a2 > 20000)
  {
    if (a2 > 0x7530)
    {
      memcpy(v5, &unk_1DED0D414, sizeof(v5));
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v3, v5, (uint64_t)v6, 0x65uLL);
      *(_OWORD *)v5 = xmmword_1DED0D5A8;
      *(_OWORD *)&v5[16] = unk_1DED0D5B8;
      *(_DWORD *)&v5[32] = 1031671753;
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v4, v5, (uint64_t)&v5[36], 9uLL);
    }
    else
    {
      memcpy(v5, &unk_1DED0D26C, sizeof(v5));
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v3, v5, (uint64_t)v6, 0x65uLL);
      *(_OWORD *)v5 = xmmword_1DED0D400;
      *(_DWORD *)&v5[16] = 1042381762;
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v4, v5, (uint64_t)&v5[20], 5uLL);
    }
  }
  else
  {
    memcpy(v5, &unk_1DED0D0C4, sizeof(v5));
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v3, v5, (uint64_t)v6, 0x65uLL);
    *(_OWORD *)v5 = xmmword_1DED0D258;
    *(_DWORD *)&v5[16] = 1040627139;
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v4, v5, (uint64_t)&v5[20], 5uLL);
  }
}

void sub_1DEAC24F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 88) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 64) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void Whisper::whisper(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  double v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BOOL4 v9;
  uint64_t v10;
  float *v11;
  uint64x2_t v12;
  int64x2_t v13;
  double v14;
  float v15;
  float v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  double v20;
  uint64_t v21;
  double v22;
  float v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  float *v29;
  char *v30;
  uint64_t v31;
  double v32;
  float *v33;
  double v34;
  float v35;
  float *v36;
  float *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  double v42;
  const void *v43;
  unint64_t v45;
  double *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  unint64_t v53;
  double v54;
  double *v55;
  uint64_t v56;
  double v57;
  double v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  double *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double *v68;
  double *v69;
  float *v70;
  double v71;
  float v72;
  const void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  int v78;
  int v79;
  int v80;
  float *v81;
  unsigned int v82;
  int v83;
  int v84;
  double v85;
  const float *v86;
  float v87;
  unint64_t v88;
  double v89;
  float *v90;
  double v91;
  float v92;
  float *v93;
  void *v94;
  unint64_t v95;
  float *v96;
  float v97;
  float *v98;
  unint64_t v99;
  float *v100;
  float v101;
  uint64_t v102;
  float *v103;
  float v104;
  double v105;
  void *v106;
  float *v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  float v111;
  unint64_t v112;
  double v113;
  uint64_t v114;
  unint64_t v115;
  uint64x2_t v116;
  int64x2_t v117;
  float *v118;
  int32x2_t v119;
  int64x2_t v120;
  float v121;
  float v122;
  float *v123;
  float *v124;
  float *v125;
  uint64_t v126;
  float *v127;
  float *v128;
  float *v129;
  float *v130;
  float v131;
  float v132;
  float v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  float v137;
  float *v138;
  unint64_t v139;
  float v140;
  float *v141;
  uint64_t v142;
  unint64_t v143;
  float v144;
  uint64_t v145;
  unint64_t v146;
  float v147;
  __int128 v148;
  unint64_t v149;
  uint64_t v150;
  float *v151;
  double *v152;
  float v153;
  double *v154;
  unint64_t v155;
  float *v156;
  float v157;
  double *v158;
  char *v159;
  unint64_t v160;
  uint64_t v161;
  float *v162;
  long double v163;
  float v164;
  double *v165;
  uint64_t v166;
  float *v167;
  long double v168;
  float v169;
  void *v170;
  uint64_t v171;
  __int128 v172;
  float *v173;
  double v174;
  float v175;
  float v176;
  unint64_t v177;
  float v178;
  uint64_t v180;
  void *v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  uint64_t v185;
  float *v186;
  double v187;
  float v188;
  __float2 v189;
  float v190;
  uint64_t v191;
  unint64_t v192;
  int v193;
  unint64_t v194;
  uint64_t v195;
  float *v196;
  double *v197;
  uint64_t v198;
  double *v199;
  uint64_t v200;
  int v201;
  unint64_t v202;
  uint64_t v203;
  float *v204;
  double *v205;
  float *v206;
  double *v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t v210;
  long double v211;
  uint64_t v212;
  unint64_t v213;
  long double v214;
  void *v215;
  uint64_t *v216;
  uint64_t v217;
  void *v218;
  uint64_t v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  double *v225;
  double *v226;
  double v227;
  double v228;
  double v229;
  float v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  int v236;
  double v237;
  uint64_t v238;
  float *v239;
  float v240;
  float v241;
  double *v242;
  double v243;
  double v244;
  unint64_t v245;
  double v246;
  __int128 v247;
  _DWORD *v248;
  unint64_t v249;
  int v250;
  BOOL v251;
  float *v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  uint64_t v256;
  int v257;
  float v258;
  unint64_t v259;
  int v260;
  float v261;
  void *v262;
  uint64_t v263;
  uint64_t v264;
  double v265;
  float *v266;
  double *v267;
  double *v268;
  float *v269;
  uint64_t v270;
  double v271;
  double *v272;
  double *v273;
  uint64_t v274;
  double v275;
  double v276;
  double v277;
  float v278;
  double v279;
  double v280;
  double *v281;
  uint64_t v282;
  double v283;
  double v284;
  double v285;
  float v286;
  float *v287;
  float *v288;
  float *v289;
  unint64_t v290;
  float v291;
  float v292;
  float v293;
  unint64_t v294;
  float64x2_t v296;
  int64x2_t v297;
  float64x2_t v298;
  uint64_t v299;
  uint64x2_t v300;
  uint64_t v301;
  float64x2_t __x;
  double v303;
  unint64_t v304;
  int32x2_t v305;
  void *v306;
  void *v307;
  void *v308[2];
  void *v309;
  void *v310;
  _BYTE *v311;
  uint64_t v312;
  void *v313;
  _BYTE *v314;
  uint64_t v315;
  void *v316;
  _BYTE *v317;
  uint64_t v318;
  void *v319;
  _BYTE *v320;
  uint64_t v321;
  void *v322;
  _BYTE *v323;
  uint64_t v324;
  void *v325;
  void *v326;
  uint64_t v327;
  void *v328;
  _BYTE *v329;
  uint64_t v330;
  char *v331;
  uint64_t v332;
  uint64_t v333;
  void *v334;
  _BYTE *v335;
  uint64_t v336;
  void *v337;
  void *v338;
  uint64_t v339;
  void *v340;
  void *v341;
  uint64_t v342;
  __int128 v343;
  uint64_t v344;
  void *v345;
  _BYTE *v346;
  uint64_t v347;
  void *v348;
  void *v349;
  uint64_t v350;
  void *v351;
  void *v352;
  uint64_t v353;
  void *v354;
  void *v355;
  uint64_t v356;
  void *v357;
  void *v358;
  uint64_t v359;
  void *v360;
  void *v361;
  uint64_t v362;
  void *v363;
  void *v364;
  uint64_t v365;
  float *__X;
  float *v367;
  uint64_t v368;
  void *v369[3];
  void *v370;
  _BYTE *v371;
  __int128 v372;
  uint64_t v373;
  void *v374;
  _BYTE *v375;
  void *__dst;
  _BYTE *v377;
  void *v378;
  void *v379;
  uint64_t v380;
  uint64_t *v381;
  uint64_t *v382;
  uint64_t v383;
  void *v384;
  void *v385;
  uint64_t v386;
  void *v387;
  void *v388;
  uint64_t v389;
  __int128 v390;
  uint64_t v391;
  void *v392;
  _BYTE *v393;
  uint64_t v394;
  void *v395;
  void *v396;
  uint64_t v397;
  void *v398;
  _BYTE *v399;
  uint64_t v400;
  void *v401;
  void *v402;
  uint64_t v403;
  __int128 v404;
  uint64_t v405;
  __int128 v406;
  uint64_t v407;
  __int128 v408;
  uint64_t v409;
  __int128 __p;
  uint64_t v411;
  __int128 v412;
  uint64_t v413;
  __int128 v414;
  uint64_t v415;
  __int128 v416;
  uint64_t v417;

  v4 = (double)*(int *)(a2 + 48);
  v5 = (unint64_t)(v4 * 0.025);
  v6 = a3[1] - *a3;
  v7 = v6 >> 2;
  if (v6 >> 2 < v5)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    return;
  }
  LODWORD(v416) = 0;
  std::vector<float>::vector(a1, v6 >> 2, &v416);
  std::vector<float>::vector(&__dst, (unint64_t)(v4 * 0.025));
  std::vector<float>::vector(&v374, *(int *)(a2 + 52) + v5);
  std::vector<float>::vector(&v372, *(int *)(a2 + 52) + v5);
  LODWORD(v416) = 1065353216;
  std::vector<float>::vector(&v370, 1uLL, &v416);
  v9 = *(_BYTE *)a2 == 0;
  std::vector<float>::vector(v369, (int)v5);
  if ((int)v5 >= 1)
  {
    v10 = 0;
    v298 = (float64x2_t)vdupq_n_s64(0x401921FB54442D18uLL);
    v300 = (uint64x2_t)vdupq_n_s64((unint64_t)(unint64_t)(v4 * 0.025) - 1);
    v11 = (float *)v369[0];
    v296 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(int)v5 + -1.0), 0);
    v297 = vdupq_n_s64(2uLL);
    v12 = (uint64x2_t)xmmword_1DEC3D320;
    do
    {
      *(uint64x2_t *)v308 = v12;
      v305 = vmovn_s64((int64x2_t)vcgeq_u64(v300, v12));
      v13.i64[0] = (int)v10;
      v13.i64[1] = (int)v10 + 1;
      __x = vdivq_f64(vmulq_f64(vcvtq_f64_s64(v13), v298), v296);
      v303 = cos(__x.f64[1]);
      v14 = cos(__x.f64[0]);
      if ((v305.i8[0] & 1) != 0)
      {
        v15 = (1.0 - v14) * 0.5;
        v11[v10] = v15;
      }
      if ((v305.i8[4] & 1) != 0)
      {
        v16 = (1.0 - v303) * 0.5;
        v11[v10 + 1] = v16;
      }
      v10 += 2;
      v12 = (uint64x2_t)vaddq_s64(*(int64x2_t *)v308, v297);
    }
    while ((((unint64_t)(v4 * 0.025) + 1) & 0x1FFFFFFFELL) != v10);
  }
  if (v7 > v5)
  {
    v17 = 0;
    v18 = 0;
    v306 = 0;
    v19 = 0;
    v309 = 0;
    v20 = dbl_1DED16CF0[v9];
    v21 = 0;
    v294 = v7;
    v304 = (unint64_t)(v4 * 0.005);
    v22 = 16.0;
    v23 = 5.0;
    v24 = v5;
    while (1)
    {
      if (v5)
        memmove(__dst, (const void *)(*a3 + 4 * v18), *a3 + 4 * v24 - (*a3 + 4 * v18));
      v25 = cblas_dsdot(v5, (const float *)__dst, 1, (const float *)__dst, 1);
      if (log(v25) <= v22)
        goto LABEL_380;
      v301 = v21;
      v26 = *(int *)(a2 + 52);
      v27 = v18 - v26;
      if (v18 <= v26)
      {
        v30 = (char *)v374;
        v28 = v306;
        if (v375 - (_BYTE *)v374 >= 1)
          bzero(v374, 4 * (((unint64_t)(v375 - (_BYTE *)v374) >> 2) - ((unint64_t)(v375 - (_BYTE *)v374) > 3)) + 4);
        v29 = (float *)__dst;
        if (v5)
        {
          memmove(&v30[4 * v26], __dst, 4 * v5);
          v29 = (float *)__dst;
LABEL_24:
          v31 = 0;
          v32 = 0.0;
          v33 = (float *)v369[0];
          do
          {
            v34 = v29[v31];
            v35 = (v34 + -v20 * v32) * v33[v31];
            v29[v31++] = v35;
            v32 = v34;
          }
          while (v5 != v31);
        }
      }
      else
      {
        v28 = v306;
        if (v24 != v27)
          memmove(v374, (const void *)(*a3 + 4 * v27), *a3 + 4 * v24 - (*a3 + 4 * v27));
        v29 = (float *)__dst;
        if (v5)
          goto LABEL_24;
      }
      v368 = 0;
      __X = 0;
      v367 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__X, v29, (uint64_t)v377, (v377 - (_BYTE *)v29) >> 2);
      v36 = v367;
      v37 = __X;
      v38 = *(int *)(a2 + 52) + 1;
      *(_QWORD *)&v416 = 0;
      std::vector<double>::vector(&v412, v38, &v416);
      if ((*(_DWORD *)(a2 + 52) & 0x80000000) != 0)
      {
        v43 = (const void *)v412;
      }
      else
      {
        v39 = 0;
        v40 = 0;
        v41 = (unint64_t)((char *)v36 - (char *)v37) >> 2;
        do
        {
          v42 = cblas_dsdot(v41, __X, 1, &__X[v39], 1);
          v43 = (const void *)v412;
          *(double *)(v412 + 8 * v40) = v42;
          ++v39;
          LODWORD(v41) = v41 - 1;
        }
        while (v40++ < *(int *)(a2 + 52));
        v28 = v306;
      }
      __p = 0uLL;
      v411 = 0;
      std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&__p, v43, *((uint64_t *)&v412 + 1), (uint64_t)(*((_QWORD *)&v412 + 1) - (_QWORD)v43) >> 3);
      if (*(double *)__p == 0.0)
      {
        v45 = *(int *)(a2 + 52) + 1;
        LODWORD(v416) = 0;
        std::vector<float>::vector(&v408, v45, &v416);
        *(_DWORD *)v408 = 1065353216;
      }
      else
      {
        std::vector<double>::vector(&v416, *(int *)(a2 + 52) + 1);
        std::vector<double>::vector(&v414, *(int *)(a2 + 52) + 1);
        v46 = (double *)v416;
        *(_QWORD *)v416 = 0x3FF0000000000000;
        v47 = (char *)v414;
        *(_QWORD *)v414 = 0x3FF0000000000000;
        v48 = *(unsigned int *)(a2 + 52);
        if ((int)v48 >= 1)
        {
          v49 = 0;
          v50 = __p;
          v51 = *(double *)__p;
          v52 = v48 + 1;
          v53 = 1;
          do
          {
            if (v53 < 2)
            {
              v58 = *(double *)(v50 + 8 * v53) / v51;
              v46[v53] = v58;
              v59 = -v58;
            }
            else
            {
              v54 = 0.0;
              v55 = (double *)(v47 + 8);
              v56 = v49;
              do
              {
                v57 = *v55++;
                v54 = v54 + v57 * *(double *)(v50 + v56);
                v56 -= 8;
              }
              while (v56);
              v58 = (*(double *)(v50 + 8 * v53) - v54) / v51;
              v46[v53] = v58;
              v59 = -v58;
              v60 = 1;
              v61 = v49;
              do
              {
                v46[v60] = *(double *)&v47[v60 * 8] + v59 * *(double *)&v47[v61];
                ++v60;
                v61 -= 8;
              }
              while (v61);
            }
            v62 = v59 * v58 + 1.0;
            v63 = v46;
            v64 = v47;
            v65 = v52;
            do
            {
              v66 = *(_QWORD *)v63++;
              *v64++ = v66;
              --v65;
            }
            while (v65);
            v51 = v51 * v62;
            ++v53;
            v49 += 8;
          }
          while (v53 != v52);
          v67 = v52 - 1;
          v68 = v46 + 1;
          do
          {
            *v68 = -*v68;
            ++v68;
            --v67;
          }
          while (v67);
        }
        *v46 = 1.0;
        v69 = (double *)*((_QWORD *)&v416 + 1);
        v409 = 0;
        v408 = 0uLL;
        if (*((double **)&v416 + 1) != v46)
        {
          std::vector<int>::__vallocate[abi:ne180100](&v408, (uint64_t)(*((_QWORD *)&v416 + 1) - (_QWORD)v46) >> 3);
          v70 = (float *)*((_QWORD *)&v408 + 1);
          do
          {
            v71 = *v46++;
            v72 = v71;
            *v70++ = v72;
          }
          while (v46 != v69);
          *((_QWORD *)&v408 + 1) = v70;
          v47 = (char *)v414;
        }
        if (v47)
        {
          *((_QWORD *)&v414 + 1) = v47;
          operator delete(v47);
        }
        if ((_QWORD)v416)
        {
          *((_QWORD *)&v416 + 1) = v416;
          operator delete((void *)v416);
        }
      }
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      if ((_QWORD)v412)
      {
        *((_QWORD *)&v412 + 1) = v412;
        operator delete((void *)v412);
      }
      v299 = v17;
      if (v28)
        operator delete(v28);
      v74 = *((_QWORD *)&v408 + 1);
      v73 = (const void *)v408;
      v409 = 0;
      v408 = 0uLL;
      if (__X)
      {
        v367 = __X;
        operator delete(__X);
      }
      v365 = 0;
      v363 = 0;
      v364 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v363, v73, v74, (v74 - (uint64_t)v73) >> 2);
      v361 = 0;
      v360 = 0;
      v362 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v360, v374, (uint64_t)v375, (v375 - (_BYTE *)v374) >> 2);
      Whisper::firfilter(&v416, v363, (uint64_t)v364, (uint64_t *)&v360);
      if (v309)
        operator delete(v309);
      v309 = (void *)v416;
      v417 = 0;
      v416 = 0uLL;
      if (v360)
      {
        v361 = v360;
        operator delete(v360);
      }
      if (v363)
      {
        v364 = v363;
        operator delete(v363);
      }
      if (*(_BYTE *)a2)
      {
        v75 = *(int *)(a2 + 52);
        v76 = v75 + v5;
        if (v75 + v5)
        {
          v77 = xorshift128(void)::w;
          v78 = xorshift128(void)::z;
          v79 = xorshift128(void)::y;
          v80 = xorshift128(void)::x;
          v81 = (float *)v372;
          do
          {
            v82 = v77;
            v83 = v78;
            v84 = v79;
            v77 = ((v80 ^ (v80 << 11)) >> 8) ^ (v82 >> 19) ^ v80 ^ (v80 << 11) ^ v82;
            *v81++ = (float)((float)v77 * 4.6566e-10) + -1.0;
            v80 = v79;
            v79 = v78;
            v78 = v82;
            --v76;
          }
          while (v76);
          xorshift128(void)::x = v84;
          xorshift128(void)::y = v83;
          xorshift128(void)::z = v82;
          xorshift128(void)::w = v77;
        }
        v85 = cblas_dsdot(v5, (const float *)v309 + v75, 1, (const float *)v309 + v75, 1);
        v86 = (const float *)(v372 + 4 * *(int *)(a2 + 52));
        v87 = sqrt(v85 / cblas_dsdot(v5, v86, 1, v86, 1)) * 3.0 / 5.0;
        cblas_sscal(*(_DWORD *)(a2 + 52) + v5, v87, (float *)v372, 1);
        v88 = *(int *)(a2 + 52) + v5;
        if (v88)
        {
          v89 = 0.0;
          v90 = (float *)v372;
          do
          {
            v91 = *v90;
            v92 = v91 - v89;
            *v90++ = v92;
            v89 = v91;
            --v88;
          }
          while (v88);
        }
        v359 = 0;
        v357 = 0;
        v358 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v357, *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
        v355 = 0;
        v354 = 0;
        v356 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v354, (const void *)v372, *((uint64_t *)&v372 + 1), (uint64_t)(*((_QWORD *)&v372 + 1) - v372) >> 2);
        Whisper::firfilter(&v416, v357, (uint64_t)v358, (uint64_t *)&v354);
        if ((_QWORD)v372)
        {
          *((_QWORD *)&v372 + 1) = v372;
          operator delete((void *)v372);
        }
        v372 = v416;
        v373 = v417;
        v417 = 0;
        v416 = 0uLL;
        if (v354)
        {
          v355 = v354;
          operator delete(v354);
        }
        if (v357)
        {
          v358 = v357;
          operator delete(v357);
        }
        v416 = 0uLL;
        v417 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v416, (const void *)v372, *((uint64_t *)&v372 + 1), (uint64_t)(*((_QWORD *)&v372 + 1) - v372) >> 2);
        v353 = 0;
        v351 = 0;
        v352 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v351, *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
        v348 = 0;
        v349 = 0;
        v350 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v348, (const void *)v372, *((uint64_t *)&v372 + 1), (uint64_t)(*((_QWORD *)&v372 + 1) - v372) >> 2);
        Whisper::firfilter(&v414, v351, (uint64_t)v352, (uint64_t *)&v348);
        if ((_QWORD)v372)
        {
          *((_QWORD *)&v372 + 1) = v372;
          operator delete((void *)v372);
        }
        v372 = v414;
        v373 = v415;
        v415 = 0;
        v414 = 0uLL;
        if (v348)
        {
          v349 = v348;
          operator delete(v348);
        }
        if (v351)
        {
          v352 = v351;
          operator delete(v351);
        }
        v93 = (float *)v372;
        v94 = (void *)v416;
        if (*((_QWORD *)&v372 + 1) == (_QWORD)v372)
        {
          if (!(_QWORD)v416)
            goto LABEL_103;
        }
        else
        {
          v95 = (uint64_t)(*((_QWORD *)&v372 + 1) - v372) >> 2;
          if (v95 <= 1)
            v95 = 1;
          v96 = (float *)v416;
          do
          {
            v97 = *v96++;
            *v93 = (float)(*v93 + v97) * 0.5;
            ++v93;
            --v95;
          }
          while (v95);
        }
        *((_QWORD *)&v416 + 1) = v94;
        operator delete(v94);
      }
      else
      {
        v98 = (float *)v372;
        if (*((_QWORD *)&v372 + 1) != (_QWORD)v372)
        {
          v99 = (uint64_t)(*((_QWORD *)&v372 + 1) - v372) >> 2;
          if (v99 <= 1)
            v99 = 1;
          v100 = (float *)v309;
          do
          {
            v101 = *v100++;
            *v98++ = v101 / v23;
            --v99;
          }
          while (v99);
        }
      }
LABEL_103:
      v102 = v5 - 1 + *(int *)(a2 + 52);
      if (v102)
      {
        v103 = (float *)(v372 + 4);
        v104 = *(float *)v372;
        do
        {
          v105 = v104;
          v104 = *v103;
          *(float *)&v105 = v105 + v20 * *v103;
          *(v103++ - 1) = *(float *)&v105;
          --v102;
        }
        while (v102);
      }
      if (*(_BYTE *)(a2 + 1) || *(_BYTE *)(a2 + 3) || *(_BYTE *)(a2 + 2) || *(_BYTE *)(a2 + 4))
      {
        v346 = 0;
        v347 = 0;
        v345 = 0;
        v106 = (void *)v73;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v345, v73, v74, (v74 - (uint64_t)v73) >> 2);
        v107 = (float *)v345;
        v108 = v346 - (_BYTE *)v345;
        if (v346 == v345)
          goto LABEL_128;
        v109 = 0;
        v110 = v108 >> 2;
        if ((unint64_t)(v108 >> 2) <= 1)
          v110 = 1;
        do
        {
          v111 = *v107++;
          if (v111 != 0.0)
            ++v109;
          --v110;
        }
        while (v110);
        if (v109 != 1)
        {
LABEL_128:
          std::vector<float>::vector(&v416, ((v108 << 30) + 0x100000000) >> 32);
          std::vector<float>::vector(&v414, ((v108 << 30) + 0x100000000) >> 32);
          v123 = (float *)v345;
          v124 = (float *)v416;
          v125 = (float *)v414;
          if ((int)((unint64_t)v108 >> 2) >= 2)
          {
            v126 = ((unint64_t)v108 >> 2) - 1;
            v127 = (float *)(v414 + 4);
            v128 = (float *)(v416 + 4);
            v129 = (float *)(v346 - 4);
            v130 = (float *)((char *)v345 + 4);
            do
            {
              *v128++ = *v130 - *v129;
              v131 = *v130++;
              v132 = v131;
              v133 = *v129--;
              *v127++ = v132 + v133;
              --v126;
            }
            while (v126);
          }
          *v124 = *v123;
          *v125 = *v123;
          v134 = v108 << 30 >> 30;
          *(float *)((char *)v124 + v134) = -*v123;
          *(float *)((char *)v125 + v134) = *v123;
          v135 = *((_QWORD *)&v416 + 1);
          if ((((unint64_t)v108 >> 2) & 1) != 0)
          {
            if (*((float **)&v416 + 1) != v124)
            {
              v143 = (uint64_t)(*((_QWORD *)&v416 + 1) - (_QWORD)v124) >> 2;
              if (v143 <= 1)
                v143 = 1;
              v144 = 0.0;
              do
              {
                v144 = v144 + *v124;
                *v124++ = v144;
                --v143;
              }
              while (v143);
            }
            v142 = v135 - 4;
            *((_QWORD *)&v416 + 1) = v135 - 4;
            v145 = *((_QWORD *)&v414 + 1);
            if (*((float **)&v414 + 1) != v125)
            {
              v146 = (uint64_t)(*((_QWORD *)&v414 + 1) - (_QWORD)v125) >> 2;
              if (v146 <= 1)
                v146 = 1;
              v147 = 0.0;
              do
              {
                v147 = *v125 - v147;
                *v125++ = v147;
                --v146;
              }
              while (v146);
            }
            *((_QWORD *)&v414 + 1) = v145 - 4;
          }
          else
          {
            if (*((float **)&v416 + 1) != v124)
            {
              v136 = (uint64_t)(*((_QWORD *)&v416 + 1) - (_QWORD)v124) >> 2;
              if (v136 <= 1)
                v136 = 1;
              v137 = 0.0;
              v138 = v124;
              v139 = v136;
              do
              {
                v137 = *v138 - v137;
                *v138++ = v137;
                --v139;
              }
              while (v139);
              v140 = 0.0;
              v141 = v124;
              do
              {
                v140 = v140 + *v141;
                *v141++ = v140;
                --v136;
              }
              while (v136);
            }
            v142 = v135 - 8;
            *((_QWORD *)&v416 + 1) = v135 - 8;
          }
          std::vector<double>::vector(&v412, (unint64_t)(((v142 - (uint64_t)v416) >> 2) + 1) >> 1);
          std::vector<double>::vector(&__p, (unint64_t)(((uint64_t)(*((_QWORD *)&v414 + 1) - v414) >> 2) + 1) >> 1);
          v148 = v412;
          v149 = (uint64_t)(*((_QWORD *)&v412 + 1) - v412) >> 3;
          if (*((_QWORD *)&v412 + 1) != (_QWORD)v412)
          {
            if (v149 <= 1)
              v150 = 1;
            else
              v150 = (uint64_t)(*((_QWORD *)&v412 + 1) - v412) >> 3;
            v151 = (float *)(v416 + ((((uint64_t)(*((_QWORD *)&v416 + 1) - v416) >> 1) - 2) & 0xFFFFFFFFFFFFFFFCLL));
            v152 = (double *)v412;
            do
            {
              v153 = *v151++;
              *v152++ = v153;
              --v150;
            }
            while (v150);
          }
          v154 = (double *)__p;
          if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
          {
            v155 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3;
            if (v155 <= 1)
              v155 = 1;
            v156 = (float *)(v414 + ((((uint64_t)(*((_QWORD *)&v414 + 1) - v414) >> 1) - 2) & 0xFFFFFFFFFFFFFFFCLL));
            do
            {
              v157 = *v156++;
              *v154++ = v157;
              --v155;
            }
            while (v155);
          }
          v407 = 0;
          v406 = 0uLL;
          std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v406, (const void *)v148, *((uint64_t *)&v148 + 1), v149);
          Whisper::chebyshev_transform((double **)&v408, (double **)&v406);
          if ((_QWORD)v412)
          {
            *((_QWORD *)&v412 + 1) = v412;
            operator delete((void *)v412);
          }
          v412 = v408;
          v413 = v409;
          if ((_QWORD)v406)
          {
            *((_QWORD *)&v406 + 1) = v406;
            operator delete((void *)v406);
          }
          v405 = 0;
          v404 = 0uLL;
          std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v404, (const void *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3);
          Whisper::chebyshev_transform((double **)&v408, (double **)&v404);
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          __p = v408;
          v411 = v409;
          if ((_QWORD)v404)
          {
            *((_QWORD *)&v404 + 1) = v404;
            operator delete((void *)v404);
          }
          v403 = 0;
          v401 = 0;
          v402 = 0;
          std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v401, (const void *)v412, *((uint64_t *)&v412 + 1), (uint64_t)(*((_QWORD *)&v412 + 1) - v412) >> 3);
          Whisper::find_real_roots_cacm283((uint64_t *)&v408, (uint64_t *)&v401);
          if (v401)
          {
            v402 = v401;
            operator delete(v401);
          }
          v397 = 0;
          v395 = 0;
          v396 = 0;
          std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v395, (const void *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3);
          Whisper::find_real_roots_cacm283((uint64_t *)&v398, (uint64_t *)&v395);
          if (v395)
          {
            v396 = v395;
            operator delete(v395);
          }
          std::vector<float>::vector(&v392, ((v399 - (_BYTE *)v398) >> 3) + ((uint64_t)(*((_QWORD *)&v408 + 1) - v408) >> 3));
          v158 = (double *)v408;
          v159 = (char *)v392;
          v160 = (uint64_t)(*((_QWORD *)&v408 + 1) - v408) >> 3;
          if (*((_QWORD *)&v408 + 1) != (_QWORD)v408)
          {
            if (v160 <= 1)
              v161 = 1;
            else
              v161 = (uint64_t)(*((_QWORD *)&v408 + 1) - v408) >> 3;
            v162 = (float *)v392;
            do
            {
              v163 = *v158++;
              v164 = acos(v163);
              *v162++ = v164;
              --v161;
            }
            while (v161);
          }
          v165 = (double *)v398;
          if (v399 != v398)
          {
            if ((unint64_t)((v399 - (_BYTE *)v398) >> 3) <= 1)
              v166 = 1;
            else
              v166 = (v399 - (_BYTE *)v398) >> 3;
            v167 = (float *)&v159[4 * v160];
            do
            {
              v168 = *v165++;
              v169 = acos(v168);
              *v167++ = v169;
              --v166;
            }
            while (v166);
          }
          std::__sort<std::__less<float,float> &,float *>();
          if (v398)
          {
            v399 = v398;
            operator delete(v398);
          }
          if ((_QWORD)v408)
          {
            *((_QWORD *)&v408 + 1) = v408;
            operator delete((void *)v408);
          }
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          if ((_QWORD)v412)
          {
            *((_QWORD *)&v412 + 1) = v412;
            operator delete((void *)v412);
          }
          if ((_QWORD)v414)
          {
            *((_QWORD *)&v414 + 1) = v414;
            operator delete((void *)v414);
          }
          if ((_QWORD)v416)
          {
            *((_QWORD *)&v416 + 1) = v416;
            operator delete((void *)v416);
          }
        }
        else
        {
          std::vector<float>::vector(&v392, (v108 >> 2) - 1);
          if (v393 != v392)
          {
            v112 = (v393 - (_BYTE *)v392) >> 2;
            v113 = (double)(v112 + 1);
            if (v112 <= 1)
              v114 = 1;
            else
              v114 = (v393 - (_BYTE *)v392) >> 2;
            v115 = (v114 + 1) & 0xFFFFFFFFFFFFFFFELL;
            v116 = (uint64x2_t)vdupq_n_s64(v114 - 1);
            v117 = (int64x2_t)xmmword_1DEC3D320;
            v118 = (float *)((char *)v392 + 4);
            do
            {
              v119 = vmovn_s64((int64x2_t)vcgeq_u64(v116, (uint64x2_t)v117));
              v120 = vaddq_s64(v117, vdupq_n_s64(1uLL));
              if ((v119.i8[0] & 1) != 0)
              {
                v121 = (double)v120.i32[0] * 3.14159265 / v113;
                *(v118 - 1) = v121;
              }
              if ((v119.i8[4] & 1) != 0)
              {
                v122 = (double)v120.i32[2] * 3.14159265 / v113;
                *v118 = v122;
              }
              v117 = vaddq_s64(v117, vdupq_n_s64(2uLL));
              v118 += 2;
              v115 -= 2;
            }
            while (v115);
          }
        }
        if (v19)
          operator delete(v19);
        v170 = v392;
        v171 = (uint64_t)v393;
        v394 = 0;
        v392 = 0;
        v393 = 0;
        if (v345)
        {
          v346 = v345;
          operator delete(v345);
        }
        v344 = 0;
        v343 = 0uLL;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v343, v170, v171, (v171 - (uint64_t)v170) >> 2);
        if (*(_BYTE *)(a2 + 1))
        {
          v172 = v343;
          v173 = (float *)v343;
          if (*((_QWORD *)&v343 + 1) != (_QWORD)v343)
          {
            v174 = (float)*(int *)(a2 + 48) * 0.5;
            v175 = *(float *)(a2 + 8) * 3.14159265 / v174;
            v176 = *(float *)(a2 + 12) * 3.14159265 / v174;
            v177 = (uint64_t)(*((_QWORD *)&v343 + 1) - v343) >> 2;
            if (v177 <= 1)
              v177 = 1;
            do
            {
              v178 = *v173;
              if (*v173 > v175 && v178 < v176)
                *v173 = v178
                      * (float)(*(float *)(a2 + 16)
                              + (float)((float)((float)-(float)(v178 - v175) / (float)(v176 - v175))
                                      * (float)(*(float *)(a2 + 16) - *(float *)(a2 + 20))));
              ++v173;
              --v177;
            }
            while (v177);
          }
        }
        else
        {
          v172 = v343;
        }
        v343 = 0uLL;
        v344 = 0;
        v180 = *((_QWORD *)&v172 + 1);
        if (v170)
        {
          v307 = (void *)v172;
          operator delete(v170);
          v181 = v307;
          if ((_QWORD)v343)
          {
            *((_QWORD *)&v343 + 1) = v343;
            operator delete((void *)v343);
          }
        }
        else
        {
          v181 = (void *)v172;
        }
        v341 = 0;
        v342 = 0;
        v340 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v340, v181, v180, (v180 - (uint64_t)v181) >> 2);
        Whisper::whisper_formant_sharpening((float **)&v416, a2, (uint64_t)&v340);
        if (v181)
          operator delete(v181);
        v182 = v416;
        if (v340)
        {
          v341 = v340;
          operator delete(v340);
        }
        v338 = 0;
        v339 = 0;
        v337 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v337, (const void *)v182, *((uint64_t *)&v182 + 1), (uint64_t)(*((_QWORD *)&v182 + 1) - v182) >> 2);
        Whisper::whisper_reduce_first_formant((float **)&v416, a2, (uint64_t)&v337);
        if ((_QWORD)v182)
          operator delete((void *)v182);
        v183 = v416;
        if (v337)
        {
          v338 = v337;
          operator delete(v337);
        }
        v335 = 0;
        v336 = 0;
        v334 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v334, (const void *)v183, *((uint64_t *)&v183 + 1), (uint64_t)(*((_QWORD *)&v183 + 1) - v183) >> 2);
        v19 = v334;
        v184 = (uint64_t)v335;
        if (*(_BYTE *)(a2 + 4) && v335 != v334)
        {
          if ((unint64_t)((v335 - (_BYTE *)v334) >> 2) <= 1)
            v185 = 1;
          else
            v185 = (v335 - (_BYTE *)v334) >> 2;
          v186 = (float *)v334;
          do
          {
            v187 = *v186;
            v188 = *(float *)(a2 + 40);
            v189 = __sincosf_stret(*v186);
            v190 = v187 + atan((float)(v188 * v189.__sinval) / (1.0 - (float)(v188 * v189.__cosval))) * 2.0;
            *v186++ = v190;
            --v185;
          }
          while (v185);
        }
        v334 = 0;
        v335 = 0;
        v336 = 0;
        if ((_QWORD)v183)
        {
          operator delete((void *)v183);
          if (v334)
          {
            v335 = v334;
            operator delete(v334);
          }
        }
        v329 = 0;
        v330 = 0;
        v328 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v328, v19, v184, (v184 - (uint64_t)v19) >> 2);
        v191 = v329 - (_BYTE *)v328;
        v192 = (unint64_t)(v329 - (_BYTE *)v328) >> 2;
        v416 = 0uLL;
        v417 = 0;
        v414 = 0uLL;
        v415 = 0;
        if (((v329 - (_BYTE *)v328) & 4) != 0)
        {
          v201 = v192 + 2;
          if ((int)v192 >= -1)
            v201 = v192 + 1;
          std::vector<double>::resize((uint64_t)&v416, (uint64_t)v201 >> 1);
          v22 = 16.0;
          v202 = (v192 - 1);
          if ((int)v192 >= 1)
          {
            v203 = 0;
            v204 = (float *)v328;
            v205 = (double *)v416;
            do
            {
              *v205++ = v204[v203];
              v203 += 2;
            }
            while (v203 < (int)(v191 >> 2));
            if ((int)v192 > 2)
            {
              std::vector<double>::resize((uint64_t)&v414, v202 >> 1);
              v206 = (float *)v328;
              v207 = (double *)v414;
              v208 = 1;
              do
              {
                *v207++ = v206[v208];
                v208 += 2;
              }
              while (v208 < v202);
            }
          }
        }
        else
        {
          if ((v192 & 0x80000000) == 0)
            v193 = (unint64_t)(v329 - (_BYTE *)v328) >> 2;
          else
            v193 = v192 + 1;
          v194 = (uint64_t)v193 >> 1;
          std::vector<double>::resize((uint64_t)&v416, v194);
          v22 = 16.0;
          std::vector<double>::resize((uint64_t)&v414, v194);
          if ((int)v192 >= 1)
          {
            v195 = 0;
            v196 = (float *)v328;
            v197 = (double *)v416;
            v198 = (int)(v191 >> 2);
            do
            {
              *v197++ = v196[v195];
              v195 += 2;
            }
            while (v195 < v198);
            if ((int)v192 >= 2)
            {
              v199 = (double *)v414;
              v200 = 1;
              do
              {
                *v199++ = v196[v200];
                v200 += 2;
              }
              while (v200 < v198);
            }
          }
        }
        *(_QWORD *)&__p = 0x3FF0000000000000;
        std::vector<double>::vector(&v412, 3uLL, &__p);
        *(_QWORD *)&v408 = 0x3FF0000000000000;
        std::vector<double>::vector(&__p, 3uLL, &v408);
        *(_QWORD *)&v406 = 0x3FF0000000000000;
        std::vector<double>::vector(&v408, 1uLL, &v406);
        *(_QWORD *)&v404 = 0x3FF0000000000000;
        std::vector<double>::vector(&v406, 1uLL, &v404);
        v209 = v416;
        if (*((_QWORD *)&v416 + 1) != (_QWORD)v416)
        {
          v210 = 0;
          do
          {
            v211 = cos(*(long double *)(v209 + 8 * v210));
            *(long double *)(v412 + 8) = v211 * -2.0;
            v403 = 0;
            v401 = 0;
            v402 = 0;
            std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v401, (const void *)v408, *((uint64_t *)&v408 + 1), (uint64_t)(*((_QWORD *)&v408 + 1) - v408) >> 3);
            v399 = 0;
            v398 = 0;
            v400 = 0;
            std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v398, (const void *)v412, *((uint64_t *)&v412 + 1), (uint64_t)(*((_QWORD *)&v412 + 1) - v412) >> 3);
            Whisper::convolve(&v404, (uint64_t **)&v401, (uint64_t)&v398);
            if ((_QWORD)v408)
            {
              *((_QWORD *)&v408 + 1) = v408;
              operator delete((void *)v408);
            }
            v408 = v404;
            v409 = v405;
            v405 = 0;
            v404 = 0uLL;
            if (v398)
            {
              v399 = v398;
              operator delete(v398);
            }
            if (v401)
            {
              v402 = v401;
              operator delete(v401);
            }
            ++v210;
            v209 = v416;
          }
          while (v210 < (uint64_t)(*((_QWORD *)&v416 + 1) - v416) >> 3);
        }
        if ((int)v192 >= 3)
        {
          v212 = v414;
          if (*((_QWORD *)&v414 + 1) != (_QWORD)v414)
          {
            v213 = 0;
            do
            {
              v214 = cos(*(long double *)(v212 + 8 * v213));
              *(long double *)(__p + 8) = v214 * -2.0;
              v397 = 0;
              v395 = 0;
              v396 = 0;
              std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v395, (const void *)v406, *((uint64_t *)&v406 + 1), (uint64_t)(*((_QWORD *)&v406 + 1) - v406) >> 3);
              v393 = 0;
              v392 = 0;
              v394 = 0;
              std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v392, (const void *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3);
              Whisper::convolve(&v404, (uint64_t **)&v395, (uint64_t)&v392);
              if ((_QWORD)v406)
              {
                *((_QWORD *)&v406 + 1) = v406;
                operator delete((void *)v406);
              }
              v406 = v404;
              v407 = v405;
              v405 = 0;
              v404 = 0uLL;
              if (v392)
              {
                v393 = v392;
                operator delete(v392);
              }
              if (v395)
              {
                v396 = v395;
                operator delete(v395);
              }
              ++v213;
              v212 = v414;
            }
            while (v213 < (uint64_t)(*((_QWORD *)&v414 + 1) - v414) >> 3);
          }
        }
        if ((v192 & 1) != 0)
        {
          *(_QWORD *)&v390 = 0;
          v215 = v106;
          std::vector<double>::vector(&v404, 3uLL, &v390);
          v217 = v404;
          *(_QWORD *)v404 = 0xBFF0000000000000;
          *(_QWORD *)(v217 + 16) = 0x3FF0000000000000;
          v389 = 0;
          v388 = 0;
          v387 = 0;
          std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v387, (const void *)v406, *((uint64_t *)&v406 + 1), (uint64_t)(*((_QWORD *)&v406 + 1) - v406) >> 3);
          v385 = 0;
          v384 = 0;
          v386 = 0;
          std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v384, (const void *)v404, *((uint64_t *)&v404 + 1), (uint64_t)(*((_QWORD *)&v404 + 1) - v404) >> 3);
          Whisper::convolve(&v390, (uint64_t **)&v387, (uint64_t)&v384);
          if ((_QWORD)v406)
          {
            *((_QWORD *)&v406 + 1) = v406;
            operator delete((void *)v406);
          }
          v406 = v390;
          v407 = v391;
          v391 = 0;
          v390 = 0uLL;
          if (v384)
          {
            v385 = v384;
            operator delete(v384);
          }
          v216 = (uint64_t *)v387;
          if (v387)
          {
            v388 = v387;
LABEL_294:
            operator delete(v216);
          }
        }
        else
        {
          *(_QWORD *)&v390 = 0x3FF0000000000000;
          v215 = v106;
          std::vector<double>::vector(&v404, 2uLL, &v390);
          v389 = 0;
          v387 = 0;
          v388 = 0;
          std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v387, (const void *)v408, *((uint64_t *)&v408 + 1), (uint64_t)(*((_QWORD *)&v408 + 1) - v408) >> 3);
          v385 = 0;
          v384 = 0;
          v386 = 0;
          std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v384, (const void *)v404, *((uint64_t *)&v404 + 1), (uint64_t)(*((_QWORD *)&v404 + 1) - v404) >> 3);
          Whisper::convolve(&v390, (uint64_t **)&v387, (uint64_t)&v384);
          if ((_QWORD)v408)
          {
            *((_QWORD *)&v408 + 1) = v408;
            operator delete((void *)v408);
          }
          v408 = v390;
          v409 = v391;
          v391 = 0;
          v390 = 0uLL;
          if (v384)
          {
            v385 = v384;
            operator delete(v384);
          }
          if (v387)
          {
            v388 = v387;
            operator delete(v387);
          }
          *(_QWORD *)v404 = 0xBFF0000000000000;
          v383 = 0;
          v381 = 0;
          v382 = 0;
          std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v381, (const void *)v406, *((uint64_t *)&v406 + 1), (uint64_t)(*((_QWORD *)&v406 + 1) - v406) >> 3);
          v379 = 0;
          v378 = 0;
          v380 = 0;
          std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v378, (const void *)v404, *((uint64_t *)&v404 + 1), (uint64_t)(*((_QWORD *)&v404 + 1) - v404) >> 3);
          Whisper::convolve(&v390, &v381, (uint64_t)&v378);
          if ((_QWORD)v406)
          {
            *((_QWORD *)&v406 + 1) = v406;
            operator delete((void *)v406);
          }
          v406 = v390;
          v407 = v391;
          v391 = 0;
          v390 = 0uLL;
          if (v378)
          {
            v379 = v378;
            operator delete(v378);
          }
          v216 = v381;
          if (v381)
          {
            v382 = v381;
            goto LABEL_294;
          }
        }
        if ((_QWORD)v404)
        {
          *((_QWORD *)&v404 + 1) = v404;
          operator delete((void *)v404);
        }
        LODWORD(v404) = 0;
        std::vector<float>::vector(&v331, ((uint64_t)(*((_QWORD *)&v408 + 1) - v408) >> 3) - 1, &v404);
        v218 = (void *)v408;
        v219 = *((_QWORD *)&v408 + 1) - v408;
        v220 = (void *)v406;
        if (*((_QWORD *)&v408 + 1) - (_QWORD)v408 < 9uLL)
        {
          if ((_QWORD)v406)
            goto LABEL_305;
        }
        else
        {
          v221 = v219 >> 3;
          if ((unint64_t)(v219 >> 3) <= 2)
            v222 = 2;
          else
            v222 = v219 >> 3;
          v223 = v222 - 1;
          v224 = &v331[4 * v221 - 8];
          v225 = (double *)(v406 + 8);
          v226 = (double *)(v408 + 8);
          do
          {
            v227 = *v226++;
            v228 = v227;
            v229 = *v225++;
            *(float *)&v228 = (v228 + v229) * 0.5;
            *(_DWORD *)v224 = LODWORD(v228);
            v224 -= 4;
            --v223;
          }
          while (v223);
LABEL_305:
          *((_QWORD *)&v406 + 1) = v220;
          operator delete(v220);
          v218 = (void *)v408;
        }
        if (v218)
        {
          *((_QWORD *)&v408 + 1) = v218;
          operator delete(v218);
        }
        if ((_QWORD)__p)
        {
          *((_QWORD *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
        if ((_QWORD)v412)
        {
          *((_QWORD *)&v412 + 1) = v412;
          operator delete((void *)v412);
        }
        if ((_QWORD)v414)
        {
          *((_QWORD *)&v414 + 1) = v414;
          operator delete((void *)v414);
        }
        if ((_QWORD)v416)
        {
          *((_QWORD *)&v416 + 1) = v416;
          operator delete((void *)v416);
        }
        if (v215)
          operator delete(v215);
        v73 = v331;
        v74 = v332;
        v332 = 0;
        v333 = 0;
        v331 = 0;
        if (v328)
        {
          v329 = v328;
          operator delete(v328);
        }
      }
      v306 = (void *)v73;
      if (*(_BYTE *)(a2 + 5))
      {
        v317 = 0;
        v318 = 0;
        v316 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v316, v370, (uint64_t)v371, (v371 - (_BYTE *)v370) >> 2);
        v313 = 0;
        v314 = 0;
        v315 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v313, v73, v74, (v74 - (uint64_t)v73) >> 2);
        v310 = 0;
        v311 = 0;
        v312 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v310, (const void *)v372, *((uint64_t *)&v372 + 1), (uint64_t)(*((_QWORD *)&v372 + 1) - v372) >> 2);
        v230 = *(float *)(a2 + 44);
        v231 = v311 - (_BYTE *)v310;
        v232 = (unint64_t)(v317 - (_BYTE *)v316) >> 2;
        v233 = v314 - (_BYTE *)v313;
        v234 = (unint64_t)(v314 - (_BYTE *)v313) >> 2;
        if ((int)v232 < (int)v234)
          v235 = (v234 + 1);
        else
          v235 = v232;
        LODWORD(v416) = 0;
        std::vector<float>::vector(&__p, (int)(v231 >> 2), &v416);
        if ((int)v232 <= (int)v234)
          v236 = v234;
        else
          v236 = v232;
        *(_QWORD *)&v414 = 0;
        std::vector<double>::vector(&v416, v236 + 2, &v414);
        *(_QWORD *)&v412 = 0;
        std::vector<double>::vector(&v414, ((v233 << 30) + 0x200000000) >> 32, &v412);
        v413 = 0;
        v412 = 0uLL;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v412, v313, (uint64_t)v314, (v314 - (_BYTE *)v313) >> 2);
        v237 = v230;
        v238 = (v234 - 1);
        v239 = (float *)v412;
        v240 = *(float *)(v412 + 4 * (int)v238);
        v241 = *(float *)v412;
        v242 = (double *)v414;
        *(double *)(v414 + 8 * (int)v238) = v240 * v237 / *(float *)v412;
        if ((int)v234 <= 2)
        {
          v244 = -v237;
          v243 = 0.0;
        }
        else
        {
          v243 = (float)(v240 / v241);
          v244 = -v237;
          v245 = v238 + 1;
          do
          {
            v246 = v243;
            v243 = (float)(v239[(v245 - 2)] / v241) + v244 * v243;
            v242[(v245-- - 2)] = v246 + v237 * v243;
          }
          while (v245 > 2);
        }
        *v242 = v243;
        v263 = (int)(v233 >> 2);
        v242[v263] = v244 * v243 + 1.0;
        *((_QWORD *)&v412 + 1) = v239;
        operator delete(v239);
        if ((int)((unint64_t)v231 >> 2) >= 1)
        {
          v264 = 0;
          v265 = 1.0 / *(float *)v313;
          v266 = (float *)v310;
          v267 = (double *)v414;
          v268 = (double *)v416;
          v269 = (float *)v316;
          v270 = __p;
          do
          {
            v271 = v265 * v266[v264];
            v272 = v267;
            v273 = v268;
            v274 = ((unint64_t)v233 >> 2);
            if ((int)v234 >= 1)
            {
              do
              {
                v275 = *v272++;
                v276 = v275;
                v277 = *v273++;
                v271 = v271 - v276 * v277;
                --v274;
              }
              while (v274);
            }
            v278 = *v269;
            v279 = v271 / v267[v263];
            if ((int)v235 >= 1)
            {
              v280 = *v268;
              v281 = v268 + 1;
              v282 = v235;
              v283 = v279;
              do
              {
                v284 = *v281;
                v285 = *v281 - v283;
                *(v281 - 1) = v283;
                v283 = v280 + v237 * v285;
                ++v281;
                v280 = v284;
                --v282;
              }
              while (v282);
            }
            v286 = v279 * v278 + 0.0;
            *(float *)(v270 + 4 * v264++) = v286;
          }
          while (v264 != ((unint64_t)v231 >> 2));
        }
        if ((_QWORD)v414)
        {
          *((_QWORD *)&v414 + 1) = v414;
          operator delete((void *)v414);
        }
        v7 = v294;
        v17 = v299;
        v21 = v301;
        v23 = 5.0;
        if ((_QWORD)v416)
        {
          *((_QWORD *)&v416 + 1) = v416;
          operator delete((void *)v416);
        }
        if ((_QWORD)v372)
        {
          *((_QWORD *)&v372 + 1) = v372;
          operator delete((void *)v372);
        }
        v372 = __p;
        v373 = v411;
        v411 = 0;
        __p = 0uLL;
        if (v310)
        {
          v311 = v310;
          operator delete(v310);
        }
        if (v313)
        {
          v314 = v313;
          operator delete(v313);
        }
        v262 = v316;
        if (!v316)
          goto LABEL_377;
        v317 = v316;
      }
      else
      {
        v326 = 0;
        v327 = 0;
        v325 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v325, v370, (uint64_t)v371, (v371 - (_BYTE *)v370) >> 2);
        v322 = 0;
        v323 = 0;
        v324 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v322, v73, v74, (v74 - (uint64_t)v73) >> 2);
        v319 = 0;
        v320 = 0;
        v321 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v319, (const void *)v372, *((uint64_t *)&v372 + 1), (uint64_t)(*((_QWORD *)&v372 + 1) - v372) >> 2);
        v7 = v294;
        v17 = v299;
        v416 = 0uLL;
        v417 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v416, v322, (uint64_t)v323, (v323 - (_BYTE *)v322) >> 2);
        v247 = v416;
        if ((_QWORD)v416 != *((_QWORD *)&v416 + 1))
        {
          v248 = (_DWORD *)(*((_QWORD *)&v416 + 1) - 4);
          if (*((_QWORD *)&v416 + 1) - 4 > (unint64_t)v416)
          {
            v249 = v416 + 4;
            do
            {
              v250 = *(_DWORD *)(v249 - 4);
              *(_DWORD *)(v249 - 4) = *v248;
              *v248-- = v250;
              v251 = v249 >= (unint64_t)v248;
              v249 += 4;
            }
            while (!v251);
          }
        }
        LODWORD(v412) = 0;
        std::vector<float>::vector(&v414, (v320 - (_BYTE *)v319) >> 2, &v412);
        v252 = (float *)v319;
        if (v320 != v319)
        {
          v253 = 0;
          v254 = (*((_QWORD *)&v247 + 1) - (_QWORD)v247) >> 2;
          v255 = 1;
          v256 = v414;
          do
          {
            if (v255 >= (int)v254)
              v257 = (*((_QWORD *)&v247 + 1) - (_QWORD)v247) >> 2;
            else
              v257 = v255;
            v258 = v252[v253];
            v259 = v253 + 1;
            if ((int)v253 + 1 >= (int)v254)
              v260 = (*((_QWORD *)&v247 + 1) - (_QWORD)v247) >> 2;
            else
              v260 = v253 + 1;
            v261 = v258
                 - cblas_dsdot(v260 - 1, (const float *)(v256 + 4 * ((int)v253 - v257 + 1)), 1, (const float *)(v416 + 4 * ((int)v254 - v260)), 1);
            v256 = v414;
            *(float *)(v414 + 4 * v253) = v261;
            v252 = (float *)v319;
            ++v255;
            ++v253;
          }
          while (v259 < (v320 - (_BYTE *)v319) >> 2);
        }
        if ((_QWORD)v416)
        {
          *((_QWORD *)&v416 + 1) = v416;
          operator delete((void *)v416);
        }
        v21 = v301;
        v23 = 5.0;
        if ((_QWORD)v372)
        {
          *((_QWORD *)&v372 + 1) = v372;
          operator delete((void *)v372);
        }
        v372 = v414;
        v373 = v415;
        v415 = 0;
        v414 = 0uLL;
        if (v319)
        {
          v320 = v319;
          operator delete(v319);
        }
        if (v322)
        {
          v323 = v322;
          operator delete(v322);
        }
        v262 = v325;
        if (!v325)
          goto LABEL_377;
        v326 = v325;
      }
      operator delete(v262);
LABEL_377:
      if (v5)
      {
        v287 = (float *)v369[0];
        v288 = (float *)(*a1 + v17);
        v289 = (float *)(v372 + 4 * *(int *)(a2 + 52));
        v290 = v5;
        do
        {
          v291 = *v289++;
          v292 = v291;
          v293 = *v287++;
          *v288 = *v288 + (float)(v292 * v293);
          ++v288;
          --v290;
        }
        while (v290);
      }
LABEL_380:
      v18 = ++v21 * v304;
      v24 = v21 * v304 + v5;
      v17 += 4 * v304;
      if (v24 >= v7)
        goto LABEL_383;
    }
  }
  v309 = 0;
  v19 = 0;
  v306 = 0;
LABEL_383:
  if (v369[0])
  {
    v369[1] = v369[0];
    operator delete(v369[0]);
  }
  if (v19)
    operator delete(v19);
  if (v309)
    operator delete(v309);
  if (v306)
    operator delete(v306);
  if (v370)
  {
    v371 = v370;
    operator delete(v370);
  }
  if ((_QWORD)v372)
  {
    *((_QWORD *)&v372 + 1) = v372;
    operator delete((void *)v372);
  }
  if (v374)
  {
    v375 = v374;
    operator delete(v374);
  }
  if (__dst)
  {
    v377 = __dst;
    operator delete(__dst);
  }
}

void sub_1DEAC44C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = (void *)STACK[0x2A8];
  if (STACK[0x2A8])
  {
    STACK[0x2B0] = (unint64_t)v3;
    operator delete(v3);
  }
  v4 = (void *)STACK[0x2C0];
  if (STACK[0x2C0])
  {
    STACK[0x2C8] = (unint64_t)v4;
    operator delete(v4);
  }
  v5 = (void *)STACK[0x2E0];
  if (STACK[0x2E0])
  {
    STACK[0x2E8] = (unint64_t)v5;
    operator delete(v5);
  }
  v6 = (void *)STACK[0x2F8];
  if (STACK[0x2F8])
  {
    STACK[0x300] = (unint64_t)v6;
    operator delete(v6);
  }
  v7 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

void Whisper::firfilter(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v6;
  char *v7;
  char *v9;
  int v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  void *__p;
  char *v21;
  uint64_t v22;

  v6 = (a3 - (uint64_t)a2) >> 2;
  __p = 0;
  v21 = 0;
  v22 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, a2, a3, v6);
  v7 = v21 - 4;
  if (__p != v21 && v7 > __p)
  {
    v9 = (char *)__p + 4;
    do
    {
      v10 = *((_DWORD *)v9 - 1);
      *((_DWORD *)v9 - 1) = *(_DWORD *)v7;
      *(_DWORD *)v7 = v10;
      v7 -= 4;
      v11 = v9 >= v7;
      v9 += 4;
    }
    while (!v11);
  }
  v12 = (a4[1] - *a4) >> 2;
  v19 = 0;
  std::vector<float>::vector(a1, v12, &v19);
  v13 = *a4;
  if (a4[1] != *a4)
  {
    v14 = 0;
    v15 = 1;
    do
    {
      v16 = v14 + 1;
      if (v15 >= (int)v6)
        v17 = v6;
      else
        v17 = v15;
      if ((int)v16 >= (int)v6)
        v18 = v6;
      else
        v18 = v14 + 1;
      *(float *)(*a1 + 4 * v14) = cblas_sdot(v18, (const float *)(v13 + 4 * ((int)v14 - v17 + 1)), 1, (const float *)__p + (int)v6 - v18, 1);
      v13 = *a4;
      ++v15;
      ++v14;
    }
    while (v16 < (a4[1] - *a4) >> 2);
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1DEAC4C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float **Whisper::whisper_formant_sharpening(float **result, uint64_t a2, uint64_t a3)
{
  float *v3;
  float *v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  float *v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float *v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  v3 = *(float **)a3;
  if (*(_BYTE *)(a2 + 3))
  {
    v4 = *(float **)(a3 + 8);
    v5 = *(float *)(a2 + 32);
    if (v5 > 0.0 && v5 != 1.0)
    {
      result = (float **)MEMORY[0x1E0C80A78]();
      v9 = (char *)v18 - ((v8 + 11) & 0xFFFFFFFFFFFFFFF0);
      if ((int)v7 >= 1)
      {
        v10 = 0;
        v11 = *(float **)a3;
        v12 = **(float **)a3;
        do
        {
          v13 = v12;
          v12 = v11[v10 + 1];
          v14 = *(float *)(v6 + 32) * (float)(v12 - v13);
          *(float *)&v9[4 * v10] = v14;
          if (v10)
          {
            v15 = *(float *)&v9[4 * (v10 - 1)];
            v16 = (float)(v11[(v10 - 1)] + v15)
                + v15
                * v15
                / (v14 * v14 + v15 * v15)
                * (float)((float)((float)(v12 - v11[(v10 - 1)]) - v14) - v15);
            v11[v10] = v16;
          }
          ++v10;
        }
        while (v7 != v10);
      }
      v3 = *(float **)a3;
      v4 = *(float **)(a3 + 8);
    }
    *result = v3;
    result[1] = v4;
  }
  else
  {
    v17 = *(float **)(a3 + 8);
    *result = v3;
    result[1] = v17;
  }
  result[2] = *(float **)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

float **Whisper::whisper_reduce_first_formant(float **result, uint64_t a2, uint64_t a3)
{
  float *v3;
  float *v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  float *v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float *v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  v3 = *(float **)a3;
  if (*(_BYTE *)(a2 + 2))
  {
    v4 = *(float **)(a3 + 8);
    v5 = *(float *)(a2 + 24);
    if (v5 > 0.0 && v5 != 1.0)
    {
      result = (float **)MEMORY[0x1E0C80A78]();
      v9 = (char *)v18 - ((v8 + 11) & 0xFFFFFFFFFFFFFFF0);
      if ((int)v7 >= 1)
      {
        v10 = 0;
        v11 = *(float **)a3;
        v12 = **(float **)a3;
        do
        {
          v13 = v12;
          v12 = v11[v10 + 1];
          v14 = *(float *)(v6 + 24) * (float)(v12 - v13);
          *(float *)&v9[4 * v10] = v14;
          if (v10)
          {
            v15 = *(float *)&v9[4 * (v10 - 1)];
            v16 = (float)(v11[(v10 - 1)] + v15)
                + v15
                * v15
                / (v14 * v14 + v15 * v15)
                * (float)((float)((float)(v12 - v11[(v10 - 1)]) - v14) - v15);
            v11[v10] = v16;
          }
          ++v10;
        }
        while (v7 != v10);
      }
      v3 = *(float **)a3;
      v4 = *(float **)(a3 + 8);
    }
    *result = v3;
    result[1] = v4;
  }
  else
  {
    v17 = *(float **)(a3 + 8);
    *result = v3;
    result[1] = v17;
  }
  result[2] = *(float **)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

void Whisper::convolve(_QWORD *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t *v12;
  double *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  void *__p;
  double *v27;

  v6 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3;
  std::vector<double>::vector(a1, v6 + a2[1] - *a2 - 1);
  std::vector<double>::vector(&__p, a2[1] - *a2 + ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3) - 1);
  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v23, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  v7 = (char *)v23;
  if ((char *)v23 != v24)
  {
    v8 = v24 - 8;
    if ((unint64_t)(v24 - 8) > v23)
    {
      v9 = v23 + 8;
      do
      {
        v10 = *(_QWORD *)(v9 - 8);
        *(_QWORD *)(v9 - 8) = *(_QWORD *)v8;
        *(_QWORD *)v8 = v10;
        v8 -= 8;
        v11 = v9 >= (unint64_t)v8;
        v9 += 8;
      }
      while (!v11);
    }
  }
  v12 = *a2;
  v13 = (double *)__p;
  v14 = (char *)a2[1] - (char *)*a2;
  if (v14)
  {
    v15 = v14 >> 3;
    if (v15 <= 1)
      v15 = 1;
    v16 = __p;
    do
    {
      v17 = *v12++;
      *v16++ = v17;
      --v15;
    }
    while (v15);
  }
  if (v27 != v13)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      v20 = v18 + 1;
      if (v19 >= (int)v6)
        v21 = v6;
      else
        v21 = v19;
      if ((int)v20 >= (int)v6)
        v22 = v6;
      else
        v22 = v18 + 1;
      *(double *)(*a1 + 8 * v18) = cblas_ddot(v22, &v13[(int)v18 - v21 + 1], 1, (const double *)(v23 + 8 * ((int)v6 - v22)), 1);
      v13 = (double *)__p;
      ++v19;
      ++v18;
    }
    while (v20 < ((char *)v27 - (_BYTE *)__p) >> 3);
    v7 = (char *)v23;
  }
  if (v7)
  {
    v24 = v7;
    operator delete(v7);
    v13 = (double *)__p;
  }
  if (v13)
  {
    v27 = v13;
    operator delete(v13);
  }
}

void sub_1DEAC50C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;
  void *v15;

  if (__p)
    operator delete(__p);
  v15 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

double **Whisper::chebyshev_transform(double **result, double **a2)
{
  double *v2;
  double *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  double v10;

  v3 = *a2;
  v2 = a2[1];
  v4 = (char *)v2 - (char *)*a2;
  v5 = (v4 >> 3) - 1;
  **a2 = **a2 * 0.5;
  if ((int)v5 >= 2)
  {
    v6 = (v4 >> 3);
    v7 = 2;
    do
    {
      v8 = v5;
      do
      {
        v9 = &v3[v8];
        v10 = *v9;
        *(v9 - 2) = *(v9 - 2) - *v9;
        *v9 = v10 + v10;
      }
      while (v8-- > v7);
      ++v7;
    }
    while (v7 != v6);
  }
  *result = v3;
  result[1] = v2;
  result[2] = a2[2];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t Whisper::find_real_roots_cacm283(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int32x2_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  BOOL v21;
  double v22;

  v4 = (unint64_t)(a2[1] - *a2) >> 3;
  v5 = (int)v4 - 1;
  v6 = *std::vector<double>::vector(a1, v5);
  if ((int)v4 - 1 >= 1)
  {
    v7 = 0;
    v8 = (double)(int)v5;
    v9 = (uint64x2_t)vdupq_n_s64((unint64_t)v5 - 1);
    v10 = (int64x2_t)xmmword_1DEC3D320;
    v11 = vdupq_n_s64(2uLL);
    do
    {
      v12 = vmovn_s64((int64x2_t)vcgeq_u64(v9, (uint64x2_t)v10));
      if ((v12.i8[0] & 1) != 0)
        *(double *)(v6 + 8 * v7) = ((double)(int)v7 + 0.5 + (double)(int)v7 + 0.5) / v8 + -1.0;
      if ((v12.i8[4] & 1) != 0)
        *(double *)(v6 + 8 * v7 + 8) = ((double)((int)v7 + 1) + 0.5 + (double)((int)v7 + 1) + 0.5) / v8 + -1.0;
      v7 += 2;
      v10 = vaddq_s64(v10, v11);
    }
    while (((v5 + 1) & 0x1FFFFFFFELL) != v7);
    v13 = 0;
    v14 = *a1;
    v15 = *a2;
    v16 = 0.0;
    while (1)
    {
      v17 = *(double *)(v14 + 8 * v13);
      v18 = *(double *)(v15 + 8 * ((int)v4 - 1));
      if ((_DWORD)v4 - 2 < 0)
      {
        v20 = *(double *)(v15 + 8 * v5);
      }
      else
      {
        v19 = (v4 - 2);
        v20 = *(double *)(v15 + 8 * v5);
        do
        {
          if (v13 != v19)
            v18 = v18 * (v17 - *(double *)(v14 + 8 * v19));
          v20 = *(double *)(v15 + 8 * v19) + v20 * v17;
          v21 = v19-- <= 0;
        }
        while (!v21);
      }
      v22 = v20 / v18;
      *(double *)(v14 + 8 * v13) = v17 - v22;
      v16 = v16 + v22 * v22;
      if (++v13 == v5)
      {
        v13 = 0;
        v21 = v16 <= 1.0e-12;
        v16 = 0.0;
        if (v21)
          break;
      }
    }
  }
  return std::__sort<std::__less<double,double> &,double *>();
}

void sub_1DEAC532C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__call_once_proxy[abi:ne180100]<std::tuple<EncoderDecoderInit::EncoderDecoderInit(void)::$_0 &&>>()
{
  uint64_t result;

  result = setenv("QSR_ALLOW_MEMLOCK_FAIL", "1", 1);
  kaldi::g_kaldi_verbose_level = -2;
  return result;
}

uint64_t EncoderDecoder::EncoderDecoder(uint64_t a1, std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, float a7)
{
  unint64_t v14;
  clockid_t v15;
  _QWORD *v16;
  uint64_t exception_class_low;
  char *v18;
  __int128 *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  __int128 *v24;
  uint64_t v25;
  clockid_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  uint64_t v37;
  fst::MappedFile *v38;
  kaldi::quasar::Encdec *v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t **v44;
  uint64_t *v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  std::string::size_type v48;
  const char *v49;
  int v50;
  uint64_t v51;
  int v52;
  ssize_t v53;
  int v54;
  _BOOL4 v56;
  std::string *v57;
  uint64_t v58;
  fst::MappedFile *v59;
  uint64_t *v60;
  _QWORD *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  void *v72;
  uint64_t v73;
  kaldi::Input *v74;
  uint64_t *v75;
  char v76;
  char v77;
  _QWORD *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  std::string::size_type v82;
  std::__shared_weak_count *v83;
  unint64_t *p_shared_owners;
  BOOL v85;
  uint64_t v86;
  kaldi::quasar::Encdec *v87;
  _QWORD *v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  unint64_t v93;
  int v94;
  uint64_t *v95;
  uint64_t v96;
  _QWORD *v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t **v102;
  uint64_t *v103;
  uint64_t v104;
  unint64_t *p_shared_weak_owners;
  unint64_t v106;
  std::__shared_weak_count *v107;
  _QWORD *v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  std::__shared_weak_count *size;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  int32x2_t *v118;
  int32x2_t v119;
  int v120;
  _QWORD *v121;
  _QWORD *v122;
  int v123;
  int32x2_t *v124;
  int v125;
  int v126;
  uint64_t v127;
  const char *v128;
  _QWORD *v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  _QWORD *v139;
  void *v140;
  uint64_t v141;
  NSObject *v142;
  const char *v143;
  std::string::size_type v144;
  double v145;
  uint64_t v146;
  uint64_t v147;
  std::string::size_type v148;
  _QWORD *v150;
  void *v151;
  uint64_t v152;
  _QWORD *v153;
  void *v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  _QWORD *v158;
  fst::MappedFile *v159;
  uint64_t *v160;
  _Unwind_Exception *exception_object;
  int32x2_t **v162;
  std::string *v163;
  std::string *v164[2];
  std::string *v165[2];
  uint64_t v166;
  uint64_t v167;
  std::string *__str;
  uint64_t v169;
  _BYTE v170[15];
  unsigned __int8 v171;
  std::string v172;
  __int128 v173;
  void *v174;
  uint64_t v175;
  unsigned __int8 v176;
  int v177;
  std::string __p;
  __int16 v179;
  int v180;
  __int16 v181;
  double v182;
  __int16 v183;
  int v184;
  __int16 v185;
  int v186;
  unint64_t v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  uint64_t v197;

  v197 = *MEMORY[0x1E0C80C00];
  v14 = atomic_load(&EncoderDecoderInit::EncoderDecoderInit(void)::setup);
  if (v14 != -1)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v174;
    *(_QWORD *)&v188 = &__p;
    std::__call_once(&EncoderDecoderInit::EncoderDecoderInit(void)::setup, &v188, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<EncoderDecoderInit::EncoderDecoderInit(void)::$_0 &&>>);
  }
  *(_QWORD *)a1 = &off_1EA92DE90;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_WORD *)(a1 + 112) = 1;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 124) = 0x400000003;
  *(_BYTE *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v162 = (int32x2_t **)(a1 + 136);
  *(_QWORD *)(a1 + 144) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "UNK");
  kaldi::quasar::BPE::BPE(a1 + 152, 1, (__int128 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __str = a2;
  std::allocate_shared[abi:ne180100]<kaldi::quasar::PhraseBook,std::allocator<kaldi::quasar::PhraseBook>,BOOL &,void>((_QWORD *)(a1 + 392), 0);
  kaldi::quasar::NNMTTransliterator::NNMTTransliterator((kaldi::quasar::NNMTTransliterator *)(a1 + 408));
  v166 = a4;
  v167 = a5;
  v169 = a3;
  *(_BYTE *)(a1 + 5400) = 1;
  kaldi::Timer::Reset((kaldi::Timer *)(a1 + 5376), v15);
  *(_QWORD *)(a1 + 5408) = 0;
  *(_BYTE *)(a1 + 5416) = 0;
  v163 = (std::string *)(a1 + 5424);
  *(_QWORD *)(a1 + 5424) = 0;
  *(_QWORD *)(a1 + 5440) = 0;
  *(_QWORD *)(a1 + 5432) = 0;
  *(_BYTE *)(a1 + 5449) = 0;
  *(_QWORD *)(a1 + 5456) = 0;
  *(_QWORD *)(a1 + 5472) = 0;
  *(_QWORD *)(a1 + 5464) = 0;
  *(_OWORD *)(a1 + 5488) = 0u;
  *(_OWORD *)(a1 + 5504) = 0u;
  *(_QWORD *)(a1 + 5480) = &unk_1EA92DFA8;
  *(_BYTE *)(a1 + 5520) = 0;
  *(_OWORD *)(a1 + 5536) = 0u;
  *(_OWORD *)(a1 + 5552) = 0u;
  *(_QWORD *)(a1 + 5528) = &unk_1EA92DFA8;
  *(_BYTE *)(a1 + 5568) = 0;
  *(_OWORD *)(a1 + 5600) = 0u;
  *(_OWORD *)(a1 + 5584) = 0u;
  *(_QWORD *)(a1 + 5576) = &unk_1EA92DFA8;
  *(_BYTE *)(a1 + 5616) = 0;
  kaldi::Matrix<float>::Matrix(a1 + 5624);
  *(_OWORD *)(a1 + 5712) = 0u;
  v158 = (_QWORD *)(a1 + 5664);
  *(_OWORD *)(a1 + 5696) = 0u;
  *(_OWORD *)(a1 + 5680) = 0u;
  *(_OWORD *)(a1 + 5664) = 0u;
  *(_QWORD *)(a1 + 5728) = -1;
  *(_DWORD *)(a1 + 5736) = -1;
  *(_DWORD *)(a1 + 5740) = a3;
  *(_QWORD *)(a1 + 5744) = 3212836864;
  *(float *)(a1 + 5752) = a7;
  *(_OWORD *)(a1 + 5756) = 0u;
  *(_QWORD *)(a1 + 5772) = 0x100000000;
  *(_QWORD *)(a1 + 5780) = 0x40A000003F800000;
  *(_DWORD *)(a1 + 5788) = 16777217;
  *(_BYTE *)(a1 + 5792) = 0;
  *(_DWORD *)(a1 + 5796) = 0;
  *(_DWORD *)(a1 + 5800) = 0;
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(a1 + 5808));
  kaldi::Matrix<float>::Matrix(a1 + 6184);
  exception_object = (_Unwind_Exception *)(a1 + 5796);
  *(_QWORD *)(a1 + 6296) = 0;
  *(_QWORD *)(a1 + 6288) = 0;
  *(_QWORD *)(a1 + 6304) = 0;
  *(_DWORD *)(a1 + 6224) = 0;
  *(_OWORD *)(a1 + 6240) = 0u;
  *(_BYTE *)(a1 + 6256) = 0;
  *(_OWORD *)(a1 + 6336) = 0u;
  *(_OWORD *)(a1 + 6352) = 0u;
  *(_OWORD *)(a1 + 6368) = 0u;
  *(_DWORD *)(a1 + 6436) = 0;
  *(_OWORD *)(a1 + 6388) = 0u;
  *(_OWORD *)(a1 + 6404) = 0u;
  *(_OWORD *)(a1 + 6420) = 0u;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&__p, "TranslationBeamSearch", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 465);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Apply BPE source : ", 19);
    exception_class_low = LODWORD(exception_object->exception_class);
    if (exception_class_low > 2)
      v18 = &byte_1DEBD87CE;
    else
      v18 = off_1EA94BC58[exception_class_low];
    std::string::basic_string[abi:ne180100]<0>(&v188, v18);
    if ((SBYTE7(v189) & 0x80u) == 0)
      v19 = &v188;
    else
      v19 = (__int128 *)v188;
    if ((SBYTE7(v189) & 0x80u) == 0)
      v20 = BYTE7(v189);
    else
      v20 = *((_QWORD *)&v188 + 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v19, v20);
    if (SBYTE7(v189) < 0)
      operator delete((void *)v188);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&__p, "TranslationBeamSearch", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 466);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Apply BPE target : ", 19);
      v22 = *(unsigned int *)(a1 + 5800);
      if (v22 > 2)
        v23 = &byte_1DEBD87CE;
      else
        v23 = off_1EA94BC58[v22];
      std::string::basic_string[abi:ne180100]<0>(&v188, v23);
      if ((SBYTE7(v189) & 0x80u) == 0)
        v24 = &v188;
      else
        v24 = (__int128 *)v188;
      if ((SBYTE7(v189) & 0x80u) == 0)
        v25 = BYTE7(v189);
      else
        v25 = *((_QWORD *)&v188 + 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v24, v25);
      if (SBYTE7(v189) < 0)
        operator delete((void *)v188);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
    }
  }
  *(_QWORD *)(a1 + 6440) = &off_1EA92DE70;
  *(_OWORD *)(a1 + 6448) = 0u;
  *(_OWORD *)(a1 + 6464) = 0u;
  *(_DWORD *)(a1 + 6480) = 1065353216;
  *(_OWORD *)(a1 + 6488) = 0u;
  *(_OWORD *)(a1 + 6504) = 0u;
  v157 = a1 + 6440;
  *(_DWORD *)(a1 + 6520) = 1065353216;
  *(_QWORD *)(a1 + 6528) = 0;
  *(_QWORD *)(a1 + 6544) = 0;
  *(_QWORD *)(a1 + 6536) = 0;
  *(_WORD *)(a1 + 6552) = 1;
  *(_BYTE *)(a1 + 6560) = 0;
  *(_QWORD *)(a1 + 6564) = 0x400000003;
  *(_BYTE *)(a1 + 6572) = 0;
  *(_QWORD *)(a1 + 6584) = 0;
  *(_QWORD *)(a1 + 6576) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "UNK");
  kaldi::quasar::BPE::BPE(a1 + 6592, 1, (__int128 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::allocate_shared[abi:ne180100]<kaldi::quasar::PhraseBook,std::allocator<kaldi::quasar::PhraseBook>,BOOL &,void>((_QWORD *)(a1 + 6832), 0);
  kaldi::quasar::NNMTTransliterator::NNMTTransliterator((kaldi::quasar::NNMTTransliterator *)(a1 + 6848));
  *(_BYTE *)(a1 + 11840) = 1;
  kaldi::Timer::Reset((kaldi::Timer *)(a1 + 11816), v26);
  *(_QWORD *)(a1 + 11848) = 0;
  *(_BYTE *)(a1 + 11856) = 0;
  *(_QWORD *)(a1 + 11864) = 0;
  *(_QWORD *)(a1 + 11880) = 0;
  *(_QWORD *)(a1 + 11872) = 0;
  *(_BYTE *)(a1 + 11889) = 0;
  *(_QWORD *)(a1 + 11896) = 0;
  *(_QWORD *)(a1 + 11912) = 0;
  *(_QWORD *)(a1 + 11904) = 0;
  *(_OWORD *)(a1 + 11928) = 0u;
  *(_OWORD *)(a1 + 11944) = 0u;
  *(_QWORD *)(a1 + 11920) = &unk_1EA92DFA8;
  *(_BYTE *)(a1 + 11960) = 0;
  *(_OWORD *)(a1 + 11976) = 0u;
  *(_OWORD *)(a1 + 11992) = 0u;
  *(_QWORD *)(a1 + 11968) = &unk_1EA92DFA8;
  *(_BYTE *)(a1 + 12008) = 0;
  *(_OWORD *)(a1 + 12040) = 0u;
  *(_OWORD *)(a1 + 12024) = 0u;
  *(_QWORD *)(a1 + 12016) = &unk_1EA92DFA8;
  *(_BYTE *)(a1 + 12056) = 0;
  kaldi::Matrix<float>::Matrix(a1 + 12064);
  *(_OWORD *)(a1 + 12152) = 0u;
  *(_OWORD *)(a1 + 12136) = 0u;
  v156 = (_QWORD *)(a1 + 12104);
  *(_OWORD *)(a1 + 12120) = 0u;
  *(_OWORD *)(a1 + 12104) = 0u;
  *(_QWORD *)(a1 + 12168) = -1;
  *(_DWORD *)(a1 + 12176) = -1;
  *(_DWORD *)(a1 + 12180) = a3;
  *(_QWORD *)(a1 + 12184) = 3212836864;
  *(float *)(a1 + 12192) = a7;
  *(_OWORD *)(a1 + 12196) = 0u;
  *(_QWORD *)(a1 + 12212) = 0x100000000;
  *(_QWORD *)(a1 + 12220) = 0x40A000003F800000;
  *(_DWORD *)(a1 + 12228) = 16777217;
  *(_BYTE *)(a1 + 12232) = 0;
  *(_DWORD *)(a1 + 12236) = 0;
  *(_DWORD *)(a1 + 12240) = 0;
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(a1 + 12248));
  kaldi::Matrix<float>::Matrix(a1 + 12624);
  *(_QWORD *)(a1 + 12736) = 0;
  *(_QWORD *)(a1 + 12728) = 0;
  *(_QWORD *)(a1 + 12744) = 0;
  *(_DWORD *)(a1 + 12664) = 0;
  *(_OWORD *)(a1 + 12680) = 0u;
  *(_BYTE *)(a1 + 12696) = 0;
  *(_OWORD *)(a1 + 12776) = 0u;
  *(_OWORD *)(a1 + 12792) = 0u;
  *(_OWORD *)(a1 + 12808) = 0u;
  *(_DWORD *)(a1 + 12876) = 0;
  *(_OWORD *)(a1 + 12828) = 0u;
  *(_OWORD *)(a1 + 12844) = 0u;
  *(_OWORD *)(a1 + 12860) = 0u;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&__p, "TranslationBeamSearch", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 465);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Apply BPE source : ", 19);
    v28 = *(unsigned int *)(a1 + 12236);
    if (v28 > 2)
      v29 = &byte_1DEBD87CE;
    else
      v29 = off_1EA94BC58[v28];
    std::string::basic_string[abi:ne180100]<0>(&v188, v29);
    if ((SBYTE7(v189) & 0x80u) == 0)
      v30 = &v188;
    else
      v30 = (__int128 *)v188;
    if ((SBYTE7(v189) & 0x80u) == 0)
      v31 = BYTE7(v189);
    else
      v31 = *((_QWORD *)&v188 + 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v30, v31);
    if (SBYTE7(v189) < 0)
      operator delete((void *)v188);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&__p, "TranslationBeamSearch", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 466);
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Apply BPE target : ", 19);
      v33 = *(unsigned int *)(a1 + 12240);
      if (v33 > 2)
        v34 = &byte_1DEBD87CE;
      else
        v34 = off_1EA94BC58[v33];
      std::string::basic_string[abi:ne180100]<0>(&v188, v34);
      if ((SBYTE7(v189) & 0x80u) == 0)
        v35 = &v188;
      else
        v35 = (__int128 *)v188;
      if ((SBYTE7(v189) & 0x80u) == 0)
        v36 = BYTE7(v189);
      else
        v36 = *((_QWORD *)&v188 + 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v35, v36);
      if (SBYTE7(v189) < 0)
        operator delete((void *)v188);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
    }
  }
  *(_DWORD *)(a1 + 12880) = a4;
  *(_DWORD *)(a1 + 12884) = a5;
  *(_BYTE *)(a1 + 12888) = a6;
  if (a6)
  {
    std::string::operator=(v163, __str);
    *(_WORD *)(a1 + 5448) = 0;
    fst::FstReadOptions::FstReadOptions(&v174, __str, 0, 0, 0);
    v177 = 1;
    if (*v158)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "ReadMapped", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 2282);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Already mapped from a file", 26);
    }
    else
    {
      LOBYTE(v173) = 0;
      kaldi::Input::Input(&v172, &v174, &v173);
      if (!(_BYTE)v173)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "ReadMapped", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.h", 251);
        v150 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Memory mapping failed. Not a valid Kaldi binary file: ", 54);
        if ((v176 & 0x80u) == 0)
          v151 = &v174;
        else
          v151 = v174;
        if ((v176 & 0x80u) == 0)
          v152 = v176;
        else
          v152 = v175;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v150, (uint64_t)v151, v152);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
      v37 = kaldi::Input::Stream((kaldi::Input *)&v172);
      std::istream::seekg();
      std::istream::tellg();
      v196 = 0;
      v194 = 0u;
      v195 = 0u;
      v192 = 0u;
      v193 = 0u;
      v190 = 0u;
      v191 = 0u;
      v188 = 0u;
      v189 = 0u;
      std::istream::seekg();
      v38 = fst::MappedFile::Map(v37, (uint64_t)&v174, v187);
      kaldi::Input::~Input((kaldi::Input *)&v172);
      if (v38)
      {
        v171 = 0;
        kaldi::Input::Input(v170, &v174, &v171);
        v39 = (kaldi::quasar::Encdec *)kaldi::Input::Stream((kaldi::Input *)v170);
        v159 = v38;
        v160 = (uint64_t *)v39;
        v40 = v171;
        v41 = *((_QWORD *)v38 + 1);
        v42 = *(unsigned __int8 *)(a1 + 5448);
        v43 = *(unsigned __int8 *)(a1 + 5449);
        *(_OWORD *)&v172.__r_.__value_.__l.__data_ = 0uLL;
        if (v42)
        {
          v44 = (uint64_t **)kaldi::quasar::Encdec::ModelFileMap(v39);
          __p.__r_.__value_.__r.__words[0] = a1 + 5424;
          v45 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::Encdec>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::Encdec>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::Encdec>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v44, (const void **)&v163->__r_.__value_.__l.__data_, (__int128 **)&__p);
          v46 = (std::__shared_weak_count *)v45[8];
          if (v46)
          {
            v47 = std::__shared_weak_count::lock(v46);
            if (v47)
              v48 = v45[7];
            else
              v48 = 0;
          }
          else
          {
            v48 = 0;
            v47 = 0;
          }
          v172.__r_.__value_.__r.__words[0] = v48;
          v172.__r_.__value_.__l.__size_ = (std::string::size_type)v47;
        }
        else
        {
          v47 = 0;
          v48 = 0;
        }
        v82 = operator new();
        kaldi::quasar::Encdec::Encdec(v82, v163, v43 != 0, v42 != 0);
        *(_QWORD *)&v173 = v82;
        __p.__r_.__value_.__r.__words[0] = v82;
        v83 = (std::__shared_weak_count *)operator new();
        v83->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v83->__shared_owners_;
        v83->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936D10;
        v83->__shared_weak_owners_ = 0;
        v83[1].__vftable = (std::__shared_weak_count_vtbl *)v82;
        *((_QWORD *)&v173 + 1) = v83;
        if (v48)
          v85 = v42 == 0;
        else
          v85 = 1;
        v86 = !v85;
        v87 = (kaldi::quasar::Encdec *)kaldi::quasar::Encdec::Read(v82, v160, v40 != 0, v41, (const char *)v86);
        if (v42)
        {
          if (v48)
          {
            if (kaldi::g_kaldi_verbose_level >= 5)
            {
              kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "GetModel", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-model-tools.h", 57, 5);
              v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Getting existing model for: ", 28);
              v89 = *(_BYTE *)(a1 + 5447);
              if (v89 >= 0)
                v90 = a1 + 5424;
              else
                v90 = *(_QWORD *)(a1 + 5424);
              if (v89 >= 0)
                v91 = *(unsigned __int8 *)(a1 + 5447);
              else
                v91 = *(_QWORD *)(a1 + 5432);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, v90, v91);
              kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
            }
            *(_QWORD *)&v92 = v48;
            *((_QWORD *)&v92 + 1) = v47;
            *(_OWORD *)&v172.__r_.__value_.__l.__data_ = 0uLL;
            do
              v93 = __ldaxr(p_shared_owners);
            while (__stlxr(v93 - 1, p_shared_owners));
            v57 = __str;
            if (!v93)
            {
              *(_OWORD *)v164 = v92;
              ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
              std::__shared_weak_count::__release_weak(v83);
              v92 = *(_OWORD *)v164;
            }
            v51 = v167;
            v94 = v40;
            v96 = (uint64_t)v159;
            v95 = v160;
LABEL_164:
            size = (std::__shared_weak_count *)v172.__r_.__value_.__l.__size_;
            if (v172.__r_.__value_.__l.__size_)
            {
              v113 = (unint64_t *)(v172.__r_.__value_.__l.__size_ + 8);
              do
                v114 = __ldaxr(v113);
              while (__stlxr(v114 - 1, v113));
              if (!v114)
              {
                *(_OWORD *)v165 = v92;
                ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                std::__shared_weak_count::__release_weak(size);
                v92 = *(_OWORD *)v165;
              }
            }
            v115 = *(std::__shared_weak_count **)(a1 + 144);
            *(_OWORD *)(a1 + 136) = v92;
            if (v115)
            {
              v116 = (unint64_t *)&v115->__shared_owners_;
              do
                v117 = __ldaxr(v116);
              while (__stlxr(v117 - 1, v116));
              if (!v117)
              {
                ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                std::__shared_weak_count::__release_weak(v115);
              }
            }
            v118 = *(int32x2_t **)(a1 + 136);
            v119 = v118[91];
            v120 = kaldi::g_kaldi_verbose_level;
            *(_BYTE *)(a1 + 5416) = 1;
            *(int32x2_t *)(a1 + 5728) = vadd_s32(v119, (int32x2_t)-1);
            *(_DWORD *)(a1 + 5736) = v118[92].i32[0] - 1;
            if (v120 < 0)
            {
              *(_BYTE *)(a1 + 5790) = v118[169].i8[0];
            }
            else
            {
              kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 2327);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Using the special symbols ids <unk>=", 36);
              v121 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v121, (uint64_t)", <s> = ", 8);
              v122 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)", </s> = ", 9);
              std::ostream::operator<<();
              kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
              v118 = *v162;
              v120 = kaldi::g_kaldi_verbose_level;
              *(_BYTE *)(a1 + 5790) = (*v162)[169].i8[0];
              if ((v120 & 0x80000000) == 0)
              {
                kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 2331);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Applying log to output probs ", 29);
                std::ostream::operator<<();
                kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
                v118 = *v162;
                v120 = kaldi::g_kaldi_verbose_level;
              }
            }
            if (v118[167].i8[1])
            {
              if ((v120 & 0x80000000) == 0)
              {
                kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 2333);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Has BPE Model", 13);
                kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
                v118 = *v162;
              }
              kaldi::quasar::BPE::operator=(a1 + 152, (uint64_t)&v118[59]);
              if (!LODWORD(exception_object->exception_class))
                LODWORD(exception_object->exception_class) = 1;
              if (*(_DWORD *)(a1 + 5800))
                goto LABEL_192;
              v123 = 1;
            }
            else
            {
              if ((v120 & 0x80000000) == 0)
              {
                kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 2338);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"No embedded BPE Model", 21);
                kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
              }
              if (!LODWORD(exception_object->exception_class))
                LODWORD(exception_object->exception_class) = 2;
              if (*(_DWORD *)(a1 + 5800))
                goto LABEL_192;
              v123 = 2;
            }
            *(_DWORD *)(a1 + 5800) = v123;
LABEL_192:
            v124 = *v162;
            if ((*v162)[335].i8[0])
            {
              if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
              {
                kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 2344);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Configuring multilang decorator", 31);
                kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
                v124 = *v162;
              }
              if (v124[338].i8[7] < 0)
              {
                std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)&v124[336], *(_QWORD *)&v124[337]);
                v124 = *v162;
              }
              else
              {
                __p = *(std::string *)v124[336].i8;
              }
              if (v124[341].i8[7] < 0)
                std::string::__init_copy_ctor_external(&v172, *(const std::string::value_type **)&v124[339], *(_QWORD *)&v124[340]);
              else
                v172 = *(std::string *)v124[339].i8;
              v125 = kaldi::quasar::ToAddTag((uint64_t)&__p);
              v126 = kaldi::quasar::ToTagFormat(&v172);
              *(_BYTE *)(a1 + 120) = 1;
              *(_DWORD *)(a1 + 124) = v125;
              *(_DWORD *)(a1 + 128) = v126;
              if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v172.__r_.__value_.__l.__data_);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
            if ((kaldi::PeekToken(v95, v94 != 0) & 0x80000000) == 0)
            {
              kaldi::ExpectToken(v95, v94 != 0, (kaldi *)"<HasPhraseBook>");
              *(_BYTE *)(a1 + 5792) = 0;
              kaldi::ReadBasicType<BOOL>(v95, v94 != 0, (char *)(a1 + 5792), v127, v128);
              if (*(_BYTE *)(a1 + 5792))
                kaldi::quasar::PhraseBook::Read(*(_QWORD *)(a1 + 392), v95, v94 != 0);
              if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
              {
                kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 2354);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"# PhraseBook entries ", 21);
                std::ostream::operator<<();
                kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
              }
            }
            kaldi::Input::Close((kaldi::Input *)v170);
            if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
            {
              kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&__p, "ReadMapped", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.h", 270);
              v129 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"memory mapped file ", 19);
              if ((v176 & 0x80u) == 0)
                v130 = &v174;
              else
                v130 = v174;
              if ((v176 & 0x80u) == 0)
                v131 = v176;
              else
                v131 = v175;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)v130, v131);
              kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
            }
            kaldi::Input::~Input((kaldi::Input *)v170);
            std::shared_ptr<fst::MappedFile>::reset[abi:ne180100]<fst::MappedFile,void>(v158, v96);
            v132 = *(_QWORD *)(a1 + 136);
            v133 = *(_QWORD *)(a1 + 5672);
            *(_QWORD *)&v188 = *(_QWORD *)(a1 + 5664);
            *((_QWORD *)&v188 + 1) = v133;
            if (v133)
            {
              v134 = (unint64_t *)(v133 + 8);
              do
                v135 = __ldxr(v134);
              while (__stxr(v135 + 1, v134));
            }
            kaldi::quasar::Encdec::SetMappedFile(v132, (uint64_t *)&v188);
            v136 = (std::__shared_weak_count *)*((_QWORD *)&v188 + 1);
            if (*((_QWORD *)&v188 + 1))
            {
              v137 = (unint64_t *)(*((_QWORD *)&v188 + 1) + 8);
              do
                v138 = __ldaxr(v137);
              while (__stlxr(v138 - 1, v137));
              if (!v138)
              {
                ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                std::__shared_weak_count::__release_weak(v136);
              }
            }
            if (kaldi::g_kaldi_verbose_level < 0)
              goto LABEL_235;
            kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&__p, "ReadMapped", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 2286);
            v139 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"memory mapped file ", 19);
            if ((v176 & 0x80u) == 0)
              v140 = &v174;
            else
              v140 = v174;
            if ((v176 & 0x80u) == 0)
              v141 = v176;
            else
              v141 = v175;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, (uint64_t)v140, v141);
LABEL_234:
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
LABEL_235:
            if ((char)v176 < 0)
              operator delete(v174);
            goto LABEL_237;
          }
          v102 = (uint64_t **)kaldi::quasar::Encdec::ModelFileMap(v87);
          __p.__r_.__value_.__r.__words[0] = a1 + 5424;
          v103 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::Encdec>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::Encdec>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::Encdec>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v102, (const void **)&v163->__r_.__value_.__l.__data_, (__int128 **)&__p);
          v104 = v173;
          p_shared_weak_owners = (unint64_t *)&v83->__shared_weak_owners_;
          do
            v106 = __ldxr(p_shared_weak_owners);
          while (__stxr(v106 + 1, p_shared_weak_owners));
          v107 = (std::__shared_weak_count *)v103[8];
          v103[7] = v104;
          v103[8] = (uint64_t)v83;
          v51 = v167;
          v57 = __str;
          if (v107)
            std::__shared_weak_count::__release_weak(v107);
          v94 = v40;
          v96 = (uint64_t)v159;
          v95 = v160;
          if (kaldi::g_kaldi_verbose_level >= 5)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "GetModel", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-model-tools.h", 62, 5);
            v108 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Getting new model for: ", 23);
            v109 = *(_BYTE *)(a1 + 5447);
            if (v109 >= 0)
              v110 = a1 + 5424;
            else
              v110 = *(_QWORD *)(a1 + 5424);
            if (v109 >= 0)
              v111 = *(unsigned __int8 *)(a1 + 5447);
            else
              v111 = *(_QWORD *)(a1 + 5432);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, v110, v111);
LABEL_162:
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
          }
        }
        else
        {
          v51 = v167;
          v57 = __str;
          v94 = v40;
          v96 = (uint64_t)v159;
          v95 = v160;
          if (kaldi::g_kaldi_verbose_level >= 5)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "GetModel", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-model-tools.h", 51, 5);
            v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Getting model for: ", 19);
            v98 = *(_BYTE *)(a1 + 5447);
            if (v98 >= 0)
              v99 = a1 + 5424;
            else
              v99 = *(_QWORD *)(a1 + 5424);
            if (v98 >= 0)
              v100 = *(unsigned __int8 *)(a1 + 5447);
            else
              v100 = *(_QWORD *)(a1 + 5432);
            v101 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, v99, v100);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)" (sharing disabled)", 19);
            goto LABEL_162;
          }
        }
        v92 = v173;
        goto LABEL_164;
      }
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "ReadMapped", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.h", 261);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Memory mapping failed. mapped_file_ is NULL", 43);
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  *(_BYTE *)(a1 + 6572) = 1;
  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v49 = (const char *)__str;
  else
    v49 = (const char *)__str->__r_.__value_.__r.__words[0];
  v50 = open(v49, 0);
  v51 = a5;
  v52 = v50;
  if (v50 < 0)
  {
    v56 = 0;
  }
  else
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    v53 = read(v50, &__p, 1uLL);
    v54 = __p.__r_.__value_.__s.__data_[0];
    close(v52);
    v56 = v53 == 1 && v54 == 0;
    v51 = v167;
  }
  std::string::operator=((std::string *)(a1 + 11864), __str);
  *(_WORD *)(a1 + 11888) = 0;
  if (v56)
  {
    fst::FstReadOptions::FstReadOptions(&v174, __str, 0, 0, 0);
    v177 = 1;
    if (*v156)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "ReadMapped", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 2282);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Already mapped from a file", 26);
    }
    else
    {
      LOBYTE(v173) = 0;
      kaldi::Input::Input(&v172, &v174, &v173);
      v57 = __str;
      if (!(_BYTE)v173)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "ReadMapped", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.h", 251);
        v153 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Memory mapping failed. Not a valid Kaldi binary file: ", 54);
        if ((v176 & 0x80u) == 0)
          v154 = &v174;
        else
          v154 = v174;
        if ((v176 & 0x80u) == 0)
          v155 = v176;
        else
          v155 = v175;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v153, (uint64_t)v154, v155);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
      v58 = kaldi::Input::Stream((kaldi::Input *)&v172);
      std::istream::seekg();
      std::istream::tellg();
      v196 = 0;
      v194 = 0u;
      v195 = 0u;
      v192 = 0u;
      v193 = 0u;
      v190 = 0u;
      v191 = 0u;
      v188 = 0u;
      v189 = 0u;
      std::istream::seekg();
      v59 = fst::MappedFile::Map(v58, (uint64_t)&v174, v187);
      kaldi::Input::~Input((kaldi::Input *)&v172);
      if (v59)
      {
        LOBYTE(v173) = 0;
        kaldi::Input::Input(&v172, &v174, &v173);
        v60 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)&v172);
        kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Read(v157, v60, v173, *((_QWORD *)v59 + 1));
        kaldi::Input::Close((kaldi::Input *)&v172);
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&__p, "ReadMapped", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.h", 270);
          v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"memory mapped file ", 19);
          if ((v176 & 0x80u) == 0)
            v62 = &v174;
          else
            v62 = v174;
          if ((v176 & 0x80u) == 0)
            v63 = v176;
          else
            v63 = v175;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)v62, v63);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
        }
        kaldi::Input::~Input((kaldi::Input *)&v172);
        std::shared_ptr<fst::MappedFile>::reset[abi:ne180100]<fst::MappedFile,void>(v156, (uint64_t)v59);
        v64 = *(_QWORD *)(a1 + 6576);
        v65 = *(_QWORD *)(a1 + 12112);
        *(_QWORD *)&v188 = *(_QWORD *)(a1 + 12104);
        *((_QWORD *)&v188 + 1) = v65;
        if (v65)
        {
          v66 = (unint64_t *)(v65 + 8);
          do
            v67 = __ldxr(v66);
          while (__stxr(v67 + 1, v66));
        }
        kaldi::quasar::TorchEncoderDecoder::SetMappedFile(v64, (uint64_t *)&v188);
        v68 = (std::__shared_weak_count *)*((_QWORD *)&v188 + 1);
        if (*((_QWORD *)&v188 + 1))
        {
          v69 = (unint64_t *)(*((_QWORD *)&v188 + 1) + 8);
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }
        if (kaldi::g_kaldi_verbose_level < 0)
          goto LABEL_235;
        kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&__p, "ReadMapped", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 2286);
        v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"memory mapped file ", 19);
        if ((v176 & 0x80u) == 0)
          v72 = &v174;
        else
          v72 = v174;
        if ((v176 & 0x80u) == 0)
          v73 = v176;
        else
          v73 = v175;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)v72, v73);
        goto LABEL_234;
      }
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "ReadMapped", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.h", 261);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Memory mapping failed. mapped_file_ is NULL", 43);
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  LOBYTE(v174) = 0;
  v74 = (kaldi::Input *)kaldi::Input::Input(&v188, __str, &v174);
  v75 = (uint64_t *)kaldi::Input::Stream(v74);
  v76 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Read(v157, v75, v174, 0);
  if (kaldi::g_kaldi_verbose_level < -1)
    v77 = 1;
  else
    v77 = v76;
  v57 = __str;
  if ((v77 & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p, "ReadMappedModelWithoutLock", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 2273);
    v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Failed to read model from ", 26);
    v79 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (v79 >= 0)
      v80 = (uint64_t)__str;
    else
      v80 = __str->__r_.__value_.__r.__words[0];
    if (v79 >= 0)
      v81 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    else
      v81 = __str->__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, v80, v81);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
  }
  kaldi::Input::~Input((kaldi::Input *)&v188);
LABEL_237:
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v142 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    if ((v57->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v144 = (std::string::size_type)v57;
    else
      v144 = v57->__r_.__value_.__r.__words[0];
    v145 = a7;
    LODWORD(__p.__r_.__value_.__l.__data_) = 136316674;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v144;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v51;
    WORD1(__p.__r_.__value_.__r.__words[2]) = 1024;
    v146 = v169;
    HIDWORD(__p.__r_.__value_.__r.__words[2]) = v169;
    v179 = 1024;
    v147 = v166;
    v180 = v166;
    v181 = 2048;
    v182 = v145;
    v183 = 1024;
    v184 = 1;
    v185 = 1024;
    v186 = 1;
    _os_log_impl(&dword_1DE3F6000, v142, OS_LOG_TYPE_DEBUG, "Runtime parameters for '%s':\n\t=> [chunk_size]: %d, [max_seq_len]: %d, [beam]: %d, [veto_float]: %f, [oov]: %d, [Normalizer]: %d(0: OFF, 1: Length, 2: GNMT)", (uint8_t *)&__p, 0x34u);
  }
  else
  {
    v145 = a7;
    v146 = v169;
    v147 = v166;
  }
  if ((v57->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v148 = (std::string::size_type)v57;
  else
    v148 = v57->__r_.__value_.__r.__words[0];
  Diagnostics::log(7, "Runtime parameters for '%s':\n\t=> [chunk_size]: %d, [max_seq_len]: %d, [beam]: %d, [veto_float]: %f, [oov]: %d, [Normalizer]: %d(0: OFF, 1: Length, 2: GNMT)", v143, v148, v51, v146, v147, *(_QWORD *)&v145, 1, 1, a1 + 12064, a1 + 6848, a1 + 6832, a1 + 6592);
  return a1;
}

void sub_1DEAC6C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a53);
  JUMPOUT(0x1DEAC6CE0);
}

void sub_1DEAC6C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  uint64_t v56;

  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a56);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  kaldi::Input::~Input((kaldi::Input *)&a37);
  if (a51 < 0)
    operator delete(a46);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::~TranslationBeamSearch(a24);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::~TranslationBeamSearch(v56);
  _Unwind_Resume(a1);
}

void sub_1DEAC6C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a53);
  JUMPOUT(0x1DEAC7188);
}

void sub_1DEAC6C48(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1DEAC71DCLL);
}

void sub_1DEAC6C5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a53);
  JUMPOUT(0x1DEAC6FC4);
}

void sub_1DEAC6C94()
{
  uint64_t v0;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v0 - 256);
  JUMPOUT(0x1DEAC71BCLL);
}

void sub_1DEAC6CA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,kaldi::quasar::Encdec *a53)
{
  std::unique_ptr<kaldi::quasar::Encdec>::reset[abi:ne180100](&a53);
  JUMPOUT(0x1DEAC6FA8);
}

void sub_1DEAC6CB4()
{
  uint64_t v0;

  MEMORY[0x1DF0ED014](v0, 0x10B2C4084D026C5);
  JUMPOUT(0x1DEAC6FA8);
}

void sub_1DEAC6CDC()
{
  uint64_t v0;

  kaldi::Input::~Input((kaldi::Input *)(v0 - 256));
  JUMPOUT(0x1DEAC71CCLL);
}

void sub_1DEAC6CEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a53);
  JUMPOUT(0x1DEAC71BCLL);
}

void sub_1DEAC6D00(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  void *v44;
  char v45;

  if (a44 < 0)
    operator delete(__p);
  if (v45 < 0)
    operator delete(v44);
  JUMPOUT(0x1DEAC71B4);
}

void sub_1DEAC6D28()
{
  JUMPOUT(0x1DEAC6FA8);
}

void sub_1DEAC6D34(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, kaldi::quasar::NNMTTransliterator *a17, uint64_t a18, kaldi::quasar::BPE *a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,_QWORD *a53)
{
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  kaldi::nnet1::Nnet *v58;
  uint64_t v59;
  void *v60;
  void **v61;
  void *v62;
  void **v63;
  void *v64;
  void *v65;
  void *v66;

  if (*(char *)(v59 - 233) < 0)
    operator delete(*(void **)(v59 - 256));
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a53);
  v60 = (void *)v53[1607];
  if (v60)
  {
    v53[1608] = v60;
    operator delete(v60);
  }
  v61 = (void **)(v54 + 6336);
  v62 = (void *)v53[1604];
  if (v62)
  {
    v53[1605] = v62;
    operator delete(v62);
  }
  v63 = (void **)(v53 + 1591);
  v64 = (void *)v53[1600];
  if (v64)
  {
    v53[1601] = v64;
    operator delete(v64);
  }
  v65 = *v61;
  if (*v61)
  {
    v53[1598] = v65;
    operator delete(v65);
  }
  v66 = *v63;
  if (*v63)
  {
    v53[1592] = v66;
    operator delete(v66);
  }
  kaldi::Matrix<float>::~Matrix(v57);
  kaldi::nnet1::Nnet::~Nnet(v58);
  a53 = v53 + 1518;
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a53);
  a53 = (_QWORD *)(v55 + 5680);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a53);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a22);
  kaldi::Matrix<float>::~Matrix(a16);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)(v53 + 1502));
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)(v53 + 1496));
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)(v53 + 1490));
  a53 = v53 + 1487;
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a53);
  if (*(char *)(v56 + 47) < 0)
    operator delete(*a23);
  kaldi::quasar::NNMTTransliterator::~NNMTTransliterator(a17);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a18);
  kaldi::quasar::BPE::~BPE(a19);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(v53 + 822));
  kaldi::quasar::InputHammer::~InputHammer((kaldi::quasar::InputHammer *)(v53 + 806));
  JUMPOUT(0x1DEAC71D4);
}

void sub_1DEAC6E64(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, kaldi::quasar::BPE *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void **a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,_QWORD *a53)
{
  _QWORD *v53;
  uint64_t v54;
  kaldi::nnet1::Nnet *v55;
  kaldi::quasar::NNMTTransliterator *v56;
  uint64_t v57;
  kaldi::quasar::InputHammer *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void **v62;
  void *v63;
  void **v64;
  void *v65;
  void *v66;
  void *v67;

  if (*(char *)(v60 - 233) < 0)
    operator delete(*(void **)(v60 - 256));
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a53);
  v61 = (void *)v53[802];
  if (v61)
  {
    v53[803] = v61;
    operator delete(v61);
  }
  v62 = (void **)(v53 + 792);
  v63 = (void *)v53[799];
  if (v63)
  {
    v53[800] = v63;
    operator delete(v63);
  }
  v64 = (void **)(v53 + 786);
  v65 = (void *)v53[795];
  if (v65)
  {
    v53[796] = v65;
    operator delete(v65);
  }
  v66 = *v62;
  if (*v62)
  {
    v53[793] = v66;
    operator delete(v66);
  }
  v67 = *v64;
  if (*v64)
  {
    v53[787] = v67;
    operator delete(v67);
  }
  kaldi::Matrix<float>::~Matrix(v57);
  kaldi::nnet1::Nnet::~Nnet(v55);
  a53 = v53 + 713;
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a53);
  a53 = v53 + 710;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a53);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a25);
  kaldi::Matrix<float>::~Matrix(v54);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)(v53 + 697));
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)(v53 + 691));
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)(v53 + 685));
  a53 = v53 + 682;
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a53);
  if (*(char *)(v59 + 47) < 0)
    operator delete(*a31);
  kaldi::quasar::NNMTTransliterator::~NNMTTransliterator(v56);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a21);
  kaldi::quasar::BPE::~BPE(a20);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a30);
  kaldi::quasar::InputHammer::~InputHammer(v58);
  JUMPOUT(0x1DEAC71DCLL);
}

void sub_1DEAC6F94()
{
  JUMPOUT(0x1DEAC71DCLL);
}

void sub_1DEAC6FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,_Unwind_Exception *exception_object,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::exception a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  uint64_t v53;
  _BYTE *v54;

  if (a2 == 2)
  {
    __cxa_get_exception_ptr(a1);
    a43.__vftable = (std::exception_vtbl *)(MEMORY[0x1E0DE5060] + 16);
    __cxa_begin_catch(a1);
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&a53, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 2356);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a53, (uint64_t)"No phrasebook in the model", 26);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a53);
    }
    *v54 = 0;
    std::exception::~exception(&a43);
    __cxa_end_catch();
    JUMPOUT(0x1DEAC6728);
  }
  kaldi::Input::~Input((kaldi::Input *)&a37);
  if (SHIBYTE(a48) < 0)
    operator delete(a46);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::~TranslationBeamSearch(a24);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::~TranslationBeamSearch(v53);
  _Unwind_Resume(a1);
}

void sub_1DEAC7054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::exception a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  uint64_t v53;

  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a53);
  std::exception::~exception(&a43);
  __cxa_end_catch();
  kaldi::Input::~Input((kaldi::Input *)&a37);
  if (SHIBYTE(a48) < 0)
    operator delete(a46);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::~TranslationBeamSearch(a24);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::~TranslationBeamSearch(v53);
  _Unwind_Resume(a1);
}

void sub_1DEAC7084()
{
  JUMPOUT(0x1DEAC6DCCLL);
}

void sub_1DEAC708C()
{
  JUMPOUT(0x1DEAC6DD4);
}

void sub_1DEAC7094()
{
  JUMPOUT(0x1DEAC6E0CLL);
}

void sub_1DEAC70D8()
{
  JUMPOUT(0x1DEAC70A8);
}

void sub_1DEAC70E0()
{
  JUMPOUT(0x1DEAC70B0);
}

void sub_1DEAC70E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a58 < 0)
    operator delete(__p);
  JUMPOUT(0x1DEAC70B8);
}

void sub_1DEAC7100()
{
  JUMPOUT(0x1DEAC70B8);
}

void sub_1DEAC7108()
{
  JUMPOUT(0x1DEAC6EFCLL);
}

void sub_1DEAC7110()
{
  JUMPOUT(0x1DEAC6F04);
}

void sub_1DEAC7118()
{
  JUMPOUT(0x1DEAC6F3CLL);
}

void sub_1DEAC7150()
{
  JUMPOUT(0x1DEAC712CLL);
}

void sub_1DEAC7158()
{
  JUMPOUT(0x1DEAC7134);
}

void sub_1DEAC7160(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a58 < 0)
    operator delete(__p);
  JUMPOUT(0x1DEAC713CLL);
}

void sub_1DEAC7178()
{
  JUMPOUT(0x1DEAC713CLL);
}

void sub_1DEAC7184()
{
  JUMPOUT(0x1DEAC71B8);
}

void sub_1DEAC7190()
{
  JUMPOUT(0x1DEAC71CCLL);
}

void sub_1DEAC7198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  uint64_t v56;

  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a56);
  kaldi::Input::~Input((kaldi::Input *)&a37);
  if (a51 < 0)
    operator delete(a46);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::~TranslationBeamSearch(a24);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::~TranslationBeamSearch(v56);
  _Unwind_Resume(a1);
}

void sub_1DEAC71A8()
{
  JUMPOUT(0x1DEAC71BCLL);
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Read(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v7;
  const void **v8;
  uint64_t **v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  kaldi::quasar::TorchEncoderDecoder *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  kaldi::quasar::TorchEncoderDecoder *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t *p_shared_weak_owners;
  unint64_t v35;
  std::__shared_weak_count *v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  kaldi::quasar::TorchEncoderDecoder *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  const char *v56;
  __int128 v58;
  __int128 v59;
  _BYTE *v60;
  std::string v62;
  std::string v63;
  __int128 v64;
  uint64_t v65;
  std::__shared_weak_count *v66;

  v7 = *(unsigned __int8 *)(a1 + 5448);
  v8 = (const void **)(a1 + 5424);
  v65 = 0;
  v66 = 0;
  v60 = (_BYTE *)(a1 + 5416);
  if (v7)
  {
    v9 = (uint64_t **)kaldi::quasar::TorchEncoderDecoder::ModelFileMap((kaldi::quasar::TorchEncoderDecoder *)a1);
    v63.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v10 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, v8, (__int128 **)&v63);
    v11 = (std::__shared_weak_count *)v10[8];
    if (v11)
    {
      v12 = std::__shared_weak_count::lock(v11);
      if (v12)
        v13 = v10[7];
      else
        v13 = 0;
    }
    else
    {
      v13 = 0;
      v12 = 0;
    }
    v65 = v13;
    v66 = v12;
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = (kaldi::quasar::TorchEncoderDecoder *)operator new();
  kaldi::quasar::TorchEncoderDecoder::TorchEncoderDecoder(v14);
  *(_QWORD *)&v64 = v14;
  v15 = (std::__shared_weak_count *)operator new();
  v15->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  v15->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936CA0;
  v15->__shared_weak_owners_ = 0;
  v15[1].__vftable = (std::__shared_weak_count_vtbl *)v14;
  *((_QWORD *)&v64 + 1) = v15;
  v17 = (kaldi::quasar::TorchEncoderDecoder *)kaldi::quasar::TorchEncoderDecoder::Read((uint64_t)v14, a2, a3, a4);
  if (!v7)
  {
    v24 = v60;
    v25 = a2;
    if (kaldi::g_kaldi_verbose_level < 5)
    {
LABEL_44:
      v22 = v64;
      goto LABEL_45;
    }
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v63, "GetModel", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-model-tools.h", 51, 5);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)"Getting model for: ", 19);
    v27 = (char)v60[31];
    if (v27 >= 0)
      v28 = (uint64_t)v8;
    else
      v28 = *(_QWORD *)(a1 + 5424);
    if (v27 >= 0)
      v29 = v60[31];
    else
      v29 = *(_QWORD *)(a1 + 5432);
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" (sharing disabled)", 19);
LABEL_43:
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v63);
    goto LABEL_44;
  }
  if (!v13)
  {
    v31 = (uint64_t **)kaldi::quasar::TorchEncoderDecoder::ModelFileMap(v17);
    v63.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v32 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v31, v8, (__int128 **)&v63);
    v33 = v64;
    p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v35 = __ldxr(p_shared_weak_owners);
    while (__stxr(v35 + 1, p_shared_weak_owners));
    v36 = (std::__shared_weak_count *)v32[8];
    v32[7] = v33;
    v32[8] = (uint64_t)v15;
    v24 = v60;
    v25 = a2;
    if (v36)
      std::__shared_weak_count::__release_weak(v36);
    if (kaldi::g_kaldi_verbose_level < 5)
      goto LABEL_44;
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v63, "GetModel", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-model-tools.h", 62, 5);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)"Getting new model for: ", 23);
    v38 = (char)v60[31];
    if (v38 >= 0)
      v39 = (uint64_t)v8;
    else
      v39 = *(_QWORD *)(a1 + 5424);
    if (v38 >= 0)
      v40 = v60[31];
    else
      v40 = *(_QWORD *)(a1 + 5432);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, v39, v40);
    goto LABEL_43;
  }
  if (kaldi::g_kaldi_verbose_level >= 5)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v63, "GetModel", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-model-tools.h", 57, 5);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)"Getting existing model for: ", 28);
    v19 = (char)v60[31];
    if (v19 >= 0)
      v20 = (uint64_t)v8;
    else
      v20 = *(_QWORD *)(a1 + 5424);
    if (v19 >= 0)
      v21 = v60[31];
    else
      v21 = *(_QWORD *)(a1 + 5432);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v63);
  }
  *(_QWORD *)&v22 = v13;
  *((_QWORD *)&v22 + 1) = v12;
  v65 = 0;
  v66 = 0;
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  v24 = v60;
  v25 = a2;
  if (!v23)
  {
    v58 = v22;
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    v22 = v58;
  }
LABEL_45:
  v41 = v66;
  if (v66)
  {
    v42 = (unint64_t *)&v66->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      v59 = v22;
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
      v22 = v59;
    }
  }
  v44 = *(std::__shared_weak_count **)(a1 + 144);
  *(_OWORD *)(a1 + 136) = v22;
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = *(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136);
  *v24 = 1;
  *(_DWORD *)(a1 + 5728) = kaldi::quasar::TorchEncoderDecoder::BosTargetId(v47) - 1;
  *(_DWORD *)(a1 + 5732) = kaldi::quasar::TorchEncoderDecoder::EosTargetId(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136))
                         - 1;
  *(_DWORD *)(a1 + 5736) = kaldi::quasar::TorchEncoderDecoder::UnkTargetId(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136))
                         - 1;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v63, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 2327);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)"Using the special symbols ids <unk>=", 36);
    v48 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)", <s> = ", 8);
    v49 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)", </s> = ", 9);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v63);
  }
  v24[374] = kaldi::nnet1::UpdatableComponent::IsUpdatable(*(kaldi::nnet1::UpdatableComponent **)(a1 + 136));
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v63, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 2331);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)"Applying log to output probs ", 29);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v63);
  }
  if (kaldi::quasar::TorchEncoderDecoder::HasBpeModel(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136)))
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v63, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 2333);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)"Has BPE Model", 13);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v63);
    }
    v50 = kaldi::quasar::TorchEncoderDecoder::BpeModel(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136));
    kaldi::quasar::BPE::operator=(a1 + 152, v50);
    if (!*(_DWORD *)(a1 + 5796))
      *(_DWORD *)(a1 + 5796) = 1;
    if (!*(_DWORD *)(a1 + 5800))
    {
      v51 = 1;
LABEL_72:
      *(_DWORD *)(a1 + 5800) = v51;
    }
  }
  else
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v63, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 2338);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)"No embedded BPE Model", 21);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v63);
    }
    if (!*(_DWORD *)(a1 + 5796))
      *(_DWORD *)(a1 + 5796) = 2;
    if (!*(_DWORD *)(a1 + 5800))
    {
      v51 = 2;
      goto LABEL_72;
    }
  }
  v52 = *(_QWORD *)(a1 + 136);
  if (*(_BYTE *)(v52 + 4442))
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v63, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 2344);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)"Configuring multilang decorator", 31);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v63);
      v52 = *(_QWORD *)(a1 + 136);
    }
    if (*(char *)(v52 + 4471) < 0)
    {
      std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)(v52 + 4448), *(_QWORD *)(v52 + 4456));
      v52 = *(_QWORD *)(a1 + 136);
    }
    else
    {
      v63 = *(std::string *)(v52 + 4448);
    }
    if (*(char *)(v52 + 4495) < 0)
      std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)(v52 + 4472), *(_QWORD *)(v52 + 4480));
    else
      v62 = *(std::string *)(v52 + 4472);
    v53 = kaldi::quasar::ToAddTag((uint64_t)&v63);
    v54 = kaldi::quasar::ToTagFormat(&v62);
    *(_BYTE *)(a1 + 120) = 1;
    *(_DWORD *)(a1 + 124) = v53;
    *(_DWORD *)(a1 + 128) = v54;
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
  }
  if ((kaldi::PeekToken(v25, a3) & 0x80000000) == 0)
  {
    kaldi::ExpectToken(v25, a3, (kaldi *)"<HasPhraseBook>");
    v24[376] = 0;
    kaldi::ReadBasicType<BOOL>(v25, a3, v24 + 376, v55, v56);
    if (v24[376])
      kaldi::quasar::PhraseBook::Read(*(_QWORD *)(a1 + 392), v25, a3);
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v63, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 2354);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)"# PhraseBook entries ", 21);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v63);
    }
  }
  return 1;
}

void sub_1DEAC7930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v25 - 128);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v25 - 104);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::BPE::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  BOOL v8;
  void **v9;
  BOOL v10;
  char *v11;
  char *v12;
  _OWORD *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t j;
  uint64_t v19;
  BOOL v20;
  _QWORD *v21;
  char *v22;
  uint64_t v24;
  uint64_t v25;
  char v26;

  if (a1 != a2)
  {
    std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t *)a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    v4 = *(uint64_t **)(a2 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * i) = 0;
      v7 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = 0;
      *(_QWORD *)(a1 + 48) = 0;
      if (v7)
        v8 = v4 == 0;
      else
        v8 = 1;
      if (v8)
      {
        v9 = (void **)v7;
      }
      else
      {
        do
        {
          std::string::operator=((std::string *)(v7 + 16), (const std::string *)(v4 + 2));
          *(_DWORD *)(v7 + 40) = *((_DWORD *)v4 + 10);
          v9 = *(void ***)v7;
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(a1 + 24, v7);
          v4 = (uint64_t *)*v4;
          if (v9)
            v10 = v4 == 0;
          else
            v10 = 1;
          v7 = (uint64_t)v9;
        }
        while (!v10);
      }
      std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__deallocate_node(a1 + 24, v9);
    }
    for (; v4; v4 = (uint64_t *)*v4)
    {
      v11 = (char *)operator new(0x30uLL);
      v12 = v11;
      v24 = (uint64_t)v11;
      v25 = a1 + 40;
      v26 = 0;
      v13 = v11 + 16;
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v11 + 1) = 0;
      if (*((char *)v4 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v11 + 16), (const std::string::value_type *)v4[2], v4[3]);
        v15 = v24;
      }
      else
      {
        v14 = *((_OWORD *)v4 + 1);
        *((_QWORD *)v11 + 4) = v4[4];
        *v13 = v14;
        v15 = (uint64_t)v11;
      }
      *((_DWORD *)v12 + 10) = *((_DWORD *)v4 + 10);
      v26 = 1;
      *((_QWORD *)v12 + 1) = std::__string_hash<char>::operator()[abi:ne180100](a1 + 48, (uint64_t)v13);
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(a1 + 24, v15);
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 64), *(std::string **)(a2 + 64), *(__int128 **)(a2 + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 3));
    *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
    v16 = *(uint64_t **)(a2 + 104);
    v17 = *(_QWORD *)(a1 + 96);
    if (v17)
    {
      for (j = 0; j != v17; ++j)
        *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * j) = 0;
      v19 = *(_QWORD *)(a1 + 104);
      *(_QWORD *)(a1 + 104) = 0;
      *(_QWORD *)(a1 + 112) = 0;
      if (v19)
        v20 = v16 == 0;
      else
        v20 = 1;
      if (v20)
      {
        v21 = (_QWORD *)v19;
      }
      else
      {
        do
        {
          std::string::operator=((std::string *)(v19 + 16), (const std::string *)(v16 + 2));
          std::string::operator=((std::string *)(v19 + 40), (const std::string *)(v16 + 5));
          v21 = *(_QWORD **)v19;
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(a1 + 88, v19);
          v16 = (uint64_t *)*v16;
          if (!v21)
            break;
          v19 = (uint64_t)v21;
        }
        while (v16);
      }
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1 + 88, v21);
    }
    for (; v16; v16 = (uint64_t *)*v16)
    {
      v22 = (char *)operator new(0x40uLL);
      v24 = (uint64_t)v22;
      v25 = a1 + 104;
      v26 = 0;
      *(_QWORD *)v22 = 0;
      *((_QWORD *)v22 + 1) = 0;
      std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v22 + 16), (__int128 *)v16 + 1);
      v26 = 1;
      *((_QWORD *)v22 + 1) = std::__string_hash<char>::operator()[abi:ne180100](a1 + 112, (uint64_t)(v22 + 16));
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(a1 + 88, v24);
      v24 = 0;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&v24);
    }
  }
  std::string::operator=((std::string *)(a1 + 136), (const std::string *)(a2 + 136));
  std::string::operator=((std::string *)(a1 + 160), (const std::string *)(a2 + 160));
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  std::string::operator=((std::string *)(a1 + 192), (const std::string *)(a2 + 192));
  std::string::operator=((std::string *)(a1 + 216), (const std::string *)(a2 + 216));
  return a1;
}

void sub_1DEAC7DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p)
{
  void **v10;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,float>,void *>>>::operator()[abi:ne180100]((uint64_t)a9, v10);
  _Unwind_Resume(a1);
}

void kaldi::quasar::PhraseBook::Read(uint64_t a1, uint64_t *a2, int a3)
{
  int *v6;
  uint64_t v7;
  const char *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  std::locale::id *v26;
  const std::locale::facet *v27;
  unsigned __int8 v28;
  std::string *v29;
  std::string::size_type v30;
  uint64_t v31;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  __int128 *v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  void *v51;
  char v52;
  void *v53;
  char v54;
  void *v55;
  char v56;
  void *__p;
  char v58;
  std::string *v59;
  std::string *v60;
  std::string *v61;
  std::string *v62;
  unint64_t v63;
  unsigned __int8 *v64;

  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v50, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/phrasebook.h", 178);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"Reading phrasebook", 18);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v50);
  }
  kaldi::ExpectToken(a2, a3, (kaldi *)"<PhraseBook>");
  v6 = (int *)(a1 + 64);
  kaldi::ReadBasicType<int>(a2, a3, a1 + 64, v7, v8);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v50, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/phrasebook.h", 181);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"num_entries ", 12);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v50);
  }
  v9 = *v6;
  if ((a3 & 1) == 0)
  {
    if (v9 < 1)
      goto LABEL_111;
    v25 = 0;
    v26 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    while (1)
    {
      memset(&v49, 0, sizeof(v49));
      std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
      v27 = std::locale::use_facet((const std::locale *)&v50, v26);
      v28 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
      std::locale::~locale((std::locale *)&v50);
      std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v49, v28);
      kaldi::Trim(&v49);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v49.__r_.__value_.__l.__size_ != 13)
          goto LABEL_68;
        v29 = (std::string *)v49.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) != 13)
          goto LABEL_68;
        v29 = &v49;
      }
      v30 = v29->__r_.__value_.__r.__words[0];
      v31 = *(std::string::size_type *)((char *)v29->__r_.__value_.__r.__words + 5);
      if (v30 == 0x6573617268502F3CLL && v31 == 0x3E6B6F6F42657361)
      {
        v36 = 1;
        if ((*((_BYTE *)&v49.__r_.__value_.__s + 23) & 0x80) == 0)
          goto LABEL_109;
        goto LABEL_108;
      }
LABEL_68:
      memset(&v48, 0, sizeof(v48));
      kaldi::SplitStringOnString((uint64_t)&v49, (char *)(a1 + 40), (uint64_t *)&v48);
      if (((0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48.__r_.__value_.__l.__size_ - v48.__r_.__value_.__r.__words[0]) >> 3)) & 0xFFFFFFFFFFFFFFFELL) == 2)
      {
        kaldi::Trim((std::string *)v48.__r_.__value_.__l.__data_);
        kaldi::quasar::PhraseBook::PreProcess(&v47, *(_BYTE *)(a1 + 68), (uint64_t)v48.__r_.__value_.__l.__data_);
        kaldi::Trim((std::string *)(v48.__r_.__value_.__r.__words[0] + 24));
        if (v48.__r_.__value_.__l.__size_ - v48.__r_.__value_.__r.__words[0] == 72)
          kaldi::Trim((std::string *)(v48.__r_.__value_.__r.__words[0] + 48));
        if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)a1, (unsigned __int8 *)&v47))
        {
          memset(&v50, 0, sizeof(v50));
          v46.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
          v33 = std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (unsigned __int8 *)&v47, (__int128 **)&v46);
          std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__vdeallocate((void **)v33 + 5);
          *(std::string *)(v33 + 40) = v50;
          memset(&v50, 0, sizeof(v50));
          v60 = &v50;
          std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
        }
        v60 = &v47;
        v34 = std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (unsigned __int8 *)&v47, (__int128 **)&v60);
        v35 = (__int128 *)v48.__r_.__value_.__r.__words[0];
        if (v48.__r_.__value_.__l.__size_ - v48.__r_.__value_.__r.__words[0] == 72)
        {
          if (*(char *)(v48.__r_.__value_.__r.__words[0] + 71) < 0)
            std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)(v48.__r_.__value_.__r.__words[0] + 48), *(_QWORD *)(v48.__r_.__value_.__r.__words[0] + 56));
          else
            v46 = *(std::string *)(v48.__r_.__value_.__r.__words[0] + 48);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&v46, &byte_1DEBD87CE);
        }
        kaldi::quasar::PhraseBook::PhraseBookEntry::PhraseBookEntry(&v50, (__int128 *)&v47, v35, (__int128 *)((char *)v35 + 24), (__int128 *)&v46);
        v37 = *((_QWORD *)v34 + 7);
        v38 = *((_QWORD *)v34 + 6);
        if (v38 >= v37)
        {
          v40 = *((_QWORD *)v34 + 5);
          v41 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v38 - v40) >> 3);
          v42 = v41 + 1;
          if (v41 + 1 > 0x222222222222222)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v43 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v37 - v40) >> 3);
          if (2 * v43 > v42)
            v42 = 2 * v43;
          if (v43 >= 0x111111111111111)
            v44 = 0x222222222222222;
          else
            v44 = v42;
          v64 = v34 + 56;
          if (v44)
            v44 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioSegmentation>>(v44);
          else
            v45 = 0;
          v60 = (std::string *)v44;
          v61 = (std::string *)(v44 + 120 * v41);
          v62 = v61;
          v63 = v44 + 120 * v45;
          kaldi::quasar::PhraseBook::PhraseBookEntry::PhraseBookEntry(v61, (__int128 *)&v50);
          v62 += 5;
          std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__swap_out_circular_buffer((std::string *)(v34 + 40), &v60);
          v39 = *((_QWORD *)v34 + 6);
          std::__split_buffer<kaldi::quasar::PhraseBook::PhraseBookEntry>::~__split_buffer((uint64_t)&v60);
        }
        else
        {
          kaldi::quasar::PhraseBook::PhraseBookEntry::PhraseBookEntry(*((std::string **)v34 + 6), (__int128 *)&v50);
          v39 = v38 + 120;
          *((_QWORD *)v34 + 6) = v38 + 120;
        }
        *((_QWORD *)v34 + 6) = v39;
        if (v58 < 0)
          operator delete(__p);
        if (v56 < 0)
          operator delete(v55);
        if (v54 < 0)
          operator delete(v53);
        if (v52 < 0)
          operator delete(v51);
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v50.__r_.__value_.__l.__data_);
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v46.__r_.__value_.__l.__data_);
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v47.__r_.__value_.__l.__data_);
      }
      else
      {
        --v25;
      }
      v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
      v36 = 0;
      if ((*((_BYTE *)&v49.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_109;
LABEL_108:
      operator delete(v49.__r_.__value_.__l.__data_);
LABEL_109:
      if ((v36 & 1) == 0 && ++v25 < *v6)
        continue;
      goto LABEL_111;
    }
  }
  if (v9 >= 1)
  {
    v10 = 0;
    do
    {
      memset(&v49, 0, sizeof(v49));
      memset(&v48, 0, sizeof(v48));
      memset(&v47, 0, sizeof(v47));
      LODWORD(v50.__r_.__value_.__l.__data_) = 0;
      std::istream::read();
      if (SLODWORD(v50.__r_.__value_.__l.__data_) >= 1)
      {
        v11 = 0;
        do
        {
          LOBYTE(v60) = 0;
          std::istream::read();
          std::string::push_back(&v49, (std::string::value_type)v60);
          ++v11;
        }
        while (v11 < SLODWORD(v50.__r_.__value_.__l.__data_));
      }
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      {
        *v48.__r_.__value_.__l.__data_ = 0;
        v48.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        v48.__r_.__value_.__s.__data_[0] = 0;
        *((_BYTE *)&v48.__r_.__value_.__s + 23) = 0;
      }
      LODWORD(v50.__r_.__value_.__l.__data_) = 0;
      std::istream::read();
      if (SLODWORD(v50.__r_.__value_.__l.__data_) >= 1)
      {
        v12 = 0;
        do
        {
          LOBYTE(v60) = 0;
          std::istream::read();
          std::string::push_back(&v48, (std::string::value_type)v60);
          ++v12;
        }
        while (v12 < SLODWORD(v50.__r_.__value_.__l.__data_));
      }
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      {
        *v47.__r_.__value_.__l.__data_ = 0;
        v47.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        v47.__r_.__value_.__s.__data_[0] = 0;
        *((_BYTE *)&v47.__r_.__value_.__s + 23) = 0;
      }
      LODWORD(v50.__r_.__value_.__l.__data_) = 0;
      std::istream::read();
      if (SLODWORD(v50.__r_.__value_.__l.__data_) >= 1)
      {
        v13 = 0;
        do
        {
          LOBYTE(v60) = 0;
          std::istream::read();
          std::string::push_back(&v47, (std::string::value_type)v60);
          ++v13;
        }
        while (v13 < SLODWORD(v50.__r_.__value_.__l.__data_));
      }
      kaldi::quasar::PhraseBook::PreProcess(&v46, *(_BYTE *)(a1 + 68), (uint64_t)&v49);
      if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)a1, (unsigned __int8 *)&v46))
      {
        memset(&v50, 0, sizeof(v50));
        v59 = &v46;
        v14 = std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (unsigned __int8 *)&v46, (__int128 **)&v59);
        std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__vdeallocate((void **)v14 + 5);
        *(std::string *)(v14 + 40) = v50;
        memset(&v50, 0, sizeof(v50));
        v60 = &v50;
        std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
      }
      v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
      v15 = std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (unsigned __int8 *)&v46, (__int128 **)&v50);
      kaldi::quasar::PhraseBook::PhraseBookEntry::PhraseBookEntry(&v50, (__int128 *)&v46, (__int128 *)&v49, (__int128 *)&v48, (__int128 *)&v47);
      v16 = *((_QWORD *)v15 + 7);
      v17 = *((_QWORD *)v15 + 6);
      if (v17 >= v16)
      {
        v19 = *((_QWORD *)v15 + 5);
        v20 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v17 - v19) >> 3);
        v21 = v20 + 1;
        if (v20 + 1 > 0x222222222222222)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v22 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v16 - v19) >> 3);
        if (2 * v22 > v21)
          v21 = 2 * v22;
        if (v22 >= 0x111111111111111)
          v23 = 0x222222222222222;
        else
          v23 = v21;
        v64 = v15 + 56;
        if (v23)
          v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioSegmentation>>(v23);
        else
          v24 = 0;
        v60 = (std::string *)v23;
        v61 = (std::string *)(v23 + 120 * v20);
        v62 = v61;
        v63 = v23 + 120 * v24;
        kaldi::quasar::PhraseBook::PhraseBookEntry::PhraseBookEntry(v61, (__int128 *)&v50);
        v62 += 5;
        std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__swap_out_circular_buffer((std::string *)(v15 + 40), &v60);
        v18 = *((_QWORD *)v15 + 6);
        std::__split_buffer<kaldi::quasar::PhraseBook::PhraseBookEntry>::~__split_buffer((uint64_t)&v60);
      }
      else
      {
        kaldi::quasar::PhraseBook::PhraseBookEntry::PhraseBookEntry(*((std::string **)v15 + 6), (__int128 *)&v50);
        v18 = v17 + 120;
        *((_QWORD *)v15 + 6) = v17 + 120;
      }
      *((_QWORD *)v15 + 6) = v18;
      if (v58 < 0)
        operator delete(__p);
      if (v56 < 0)
        operator delete(v55);
      if (v54 < 0)
        operator delete(v53);
      if (v52 < 0)
        operator delete(v51);
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v50.__r_.__value_.__l.__data_);
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v46.__r_.__value_.__l.__data_);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v47.__r_.__value_.__l.__data_);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v48.__r_.__value_.__l.__data_);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v49.__r_.__value_.__l.__data_);
      ++v10;
    }
    while (v10 < *v6);
  }
  kaldi::ExpectToken(a2, 1, (kaldi *)"</PhraseBook>");
LABEL_111:
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v50, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/phrasebook.h", 215);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"# of keys ", 10);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v50);
  }
}

void sub_1DEAC8738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,std::locale a33)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a33);
  _Unwind_Resume(a1);
}

void kaldi::quasar::PhraseBook::PreProcess(std::string *this, char a2, uint64_t a3)
{
  UChar *v4;
  int32_t v5;
  char *v6;
  UChar *v7;
  uint64_t v8;
  uint64_t v9;
  UErrorCode pErrorCode;
  UChar *src;

  if (a2)
  {
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      *this = *(std::string *)a3;
  }
  else
  {
    kaldi::quasar::NNMTTransliterator::UnicodeVectorFromString((uint64_t)&src, a3);
    pErrorCode = U_ZERO_ERROR;
    v4 = src;
    v5 = u_strToLower(0, 0, src, -1, &byte_1DEBD87CE, &pErrorCode);
    v7 = 0;
    v8 = 0;
    v9 = 0;
    std::vector<unsigned short>::resize((char **)&v7, v5 + 1);
    pErrorCode = U_ZERO_ERROR;
    v6 = (char *)v7;
    u_strToLower(v7, (unint64_t)(v8 - (_QWORD)v7) >> 1, v4, -1, &byte_1DEBD87CE, &pErrorCode);
    kaldi::quasar::NNMTTransliterator::StringFromUnicodeVector(this, (const UChar **)&v7);
    if (v6)
      operator delete(v6);
    if (v4)
      operator delete(v4);
  }
}

void sub_1DEAC89B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  void *v10;

  if (v10)
    operator delete(v10);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  std::string *v18;
  __int128 *v19;
  __int128 v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  int8x8_t prime;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint8x8_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unsigned __int8 **v38;
  unint64_t v39;
  void *v41;
  _QWORD v42[2];
  char v43;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  v17 = operator new(0x40uLL);
  v42[0] = v17;
  v42[1] = a1 + 16;
  v43 = 0;
  *v17 = 0;
  v17[1] = v9;
  v18 = (std::string *)(v17 + 2);
  v19 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)v19, *((_QWORD *)v19 + 1));
  }
  else
  {
    v20 = *v19;
    v17[4] = *((_QWORD *)v19 + 2);
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v20;
  }
  v17[5] = 0;
  v17[6] = 0;
  v17[7] = 0;
  v43 = 1;
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (!v10 || (float)(v22 * (float)v10) < v21)
  {
    v23 = 1;
    if (v10 >= 3)
      v23 = (v10 & (v10 - 1)) != 0;
    v24 = v23 | (2 * v10);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      prime = (int8x8_t)v25;
    else
      prime = (int8x8_t)v24;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v10)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v10)
    {
      v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        v33 = std::__next_prime(v33);
      }
      else
      {
        v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2)
          v33 = v35;
      }
      if (*(_QWORD *)&prime <= v33)
        prime = (int8x8_t)v33;
      if (*(_QWORD *)&prime >= v10)
      {
        v10 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v27 = operator new(8 * *(_QWORD *)&prime);
          v28 = *(void **)a1;
          *(_QWORD *)a1 = v27;
          if (v28)
            operator delete(v28);
          v29 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v29++) = 0;
          while (*(_QWORD *)&prime != v29);
          v30 = (_QWORD *)*v16;
          if (*v16)
          {
            v31 = v30[1];
            v32 = (uint8x8_t)vcnt_s8(prime);
            v32.i16[0] = vaddlv_u8(v32);
            if (v32.u32[0] > 1uLL)
            {
              if (v31 >= *(_QWORD *)&prime)
                v31 %= *(_QWORD *)&prime;
            }
            else
            {
              v31 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v16;
            v36 = (_QWORD *)*v30;
            if (*v30)
            {
              do
              {
                v37 = v36[1];
                if (v32.u32[0] > 1uLL)
                {
                  if (v37 >= *(_QWORD *)&prime)
                    v37 %= *(_QWORD *)&prime;
                }
                else
                {
                  v37 &= *(_QWORD *)&prime - 1;
                }
                if (v37 != v31)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v37))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v30;
                    goto LABEL_58;
                  }
                  *v30 = *v36;
                  *v36 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v37);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v37) = v36;
                  v36 = v30;
                }
                v37 = v31;
LABEL_58:
                v30 = v36;
                v36 = (_QWORD *)*v36;
                v31 = v37;
              }
              while (v36);
            }
          }
          v10 = (unint64_t)prime;
          goto LABEL_62;
        }
        v41 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v41)
          operator delete(v41);
        v10 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v38 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
  i = (unsigned __int8 *)v42[0];
  if (v38)
  {
    *(_QWORD *)v42[0] = *v38;
LABEL_75:
    *v38 = i;
    goto LABEL_76;
  }
  *(_QWORD *)v42[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v16;
  if (*(_QWORD *)i)
  {
    v39 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v39 >= v10)
        v39 %= v10;
    }
    else
    {
      v39 &= v10 - 1;
    }
    v38 = (unsigned __int8 **)(*(_QWORD *)a1 + 8 * v39);
    goto LABEL_75;
  }
LABEL_76:
  v42[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,void *>>>>::reset[abi:ne180100]((uint64_t)v42);
  return i;
}

void sub_1DEAC8E3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 120;
        std::allocator<kaldi::quasar::PhraseBook::PhraseBookEntry>::destroy[abi:ne180100](v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 120;
        std::allocator<kaldi::quasar::PhraseBook::PhraseBookEntry>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

std::string *kaldi::quasar::PhraseBook::PhraseBookEntry::PhraseBookEntry(std::string *this, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5)
{
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v9;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v10 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v10;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v11 = *a4;
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v11;
  }
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *(const std::string::value_type **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v12 = *a5;
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a5 + 2);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v12;
  }
  std::string::basic_string[abi:ne180100]<0>(this[4].__r_.__value_.__r.__words, "*");
  return this;
}

void sub_1DEAC9024(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *kaldi::quasar::PhraseBook::PhraseBookEntry::PhraseBookEntry(std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v7 = *(__int128 *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v7;
  }
  v8 = this + 4;
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v9 = a2[6];
    this[4].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 14);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  return this;
}

void sub_1DEAC91A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;

  if (*(char *)(v1 + 95) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::PhraseBook::PhraseBookEntry::~PhraseBookEntry(void **this)
{
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

std::string *std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__swap_out_circular_buffer(std::string *result, _QWORD *a2)
{
  std::string::__raw *v3;
  std::string::size_type size;
  std::string::size_type v5;
  std::string::size_type v6;
  uint64_t v7;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string::size_type v10;

  v3 = (std::string::__raw *)result;
  v5 = result->__r_.__value_.__r.__words[0];
  size = result->__r_.__value_.__l.__size_;
  v6 = a2[1];
  if (size != result->__r_.__value_.__r.__words[0])
  {
    v7 = 0;
    do
    {
      result = kaldi::quasar::PhraseBook::PhraseBookEntry::PhraseBookEntry((std::string *)(v6 + v7 - 120), (__int128 *)(size + v7 - 120));
      v7 -= 120;
    }
    while (size + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v8 = v3->__words[0];
  v3->__words[0] = v6;
  a2[1] = v8;
  v9 = v3->__words[1];
  v3->__words[1] = a2[2];
  a2[2] = v9;
  v10 = v3->__words[2];
  v3->__words[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<kaldi::quasar::PhraseBook::PhraseBookEntry>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 120;
    std::allocator<kaldi::quasar::PhraseBook::PhraseBookEntry>::destroy[abi:ne180100](i - 120);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::allocator<kaldi::quasar::PhraseBook::PhraseBookEntry>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

UChar *kaldi::quasar::NNMTTransliterator::UnicodeVectorFromString(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;
  UChar *result;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  size_t v14;
  _QWORD v15[34];
  UErrorCode pErrorCode[2];

  *(_QWORD *)pErrorCode = 0;
  if (*(char *)(a2 + 23) >= 0)
    v4 = (const char *)a2;
  else
    v4 = *(const char **)a2;
  u_strFromUTF8(0, 0, (int32_t *)pErrorCode, v4, -1, &pErrorCode[1]);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  std::vector<unsigned short>::resize((char **)a1, (int)pErrorCode[0] + 1);
  pErrorCode[1] = U_ZERO_ERROR;
  if (*(char *)(a2 + 23) >= 0)
    v5 = (const char *)a2;
  else
    v5 = *(const char **)a2;
  result = u_strFromUTF8(*(UChar **)a1, (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1, (int32_t *)pErrorCode, v5, -1, &pErrorCode[1]);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15, "UnicodeVectorFromString", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.h", 662);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Failed to create unicode string for \"", 37);
    v8 = *(char *)(a2 + 23);
    if (v8 >= 0)
      v9 = a2;
    else
      v9 = *(_QWORD *)a2;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a2 + 23);
    else
      v10 = *(_QWORD *)(a2 + 8);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\": ", 3);
    v13 = u_errorName(pErrorCode[1]);
    v14 = strlen(v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  return result;
}

void sub_1DEAC95E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned short>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int16 v18;
  char *v19;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 1;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v19 = &v3[2 * a2];
    goto LABEL_16;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 1)
  {
    bzero(a1[1], 2 * v6);
    v19 = &v4[2 * v6];
LABEL_16:
    a1[1] = v19;
    return;
  }
  if ((a2 & 0x8000000000000000) != 0)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v8 = v7 - v3;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v8 >= 0x7FFFFFFFFFFFFFFELL)
    v10 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v10);
  v12 = *a1;
  v13 = a1[1];
  v14 = &v11[2 * v5];
  v16 = &v11[2 * v15];
  bzero(v14, 2 * v6);
  v17 = &v14[2 * v6];
  while (v13 != v12)
  {
    v18 = *((_WORD *)v13 - 1);
    v13 -= 2;
    *((_WORD *)v14 - 1) = v18;
    v14 -= 2;
  }
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v16;
  if (v12)
    operator delete(v12);
}

void kaldi::quasar::NNMTTransliterator::StringFromUnicodeVector(_QWORD *a1, const UChar **a2)
{
  int v4;
  int v5;
  char *v6;
  size_t v7;
  char *v8;
  _QWORD *v9;
  const char *v10;
  size_t v11;
  _QWORD v12[34];
  int32_t pDestLength;
  void *v14;
  char *v15;
  char *v16;
  UErrorCode pErrorCode;

  pErrorCode = U_ZERO_ERROR;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  pDestLength = 0;
  u_strToUTF8(0, 0, &pDestLength, *a2, -1, &pErrorCode);
  v4 = pDestLength + 1;
  if (pDestLength == -1)
  {
    v5 = 0;
    v6 = 0;
  }
  else
  {
    if (pDestLength <= -2)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v7 = v4;
    v6 = (char *)operator new(v4);
    v5 = (_DWORD)v6 + v7;
    bzero(v6, v7);
    v14 = v6;
    v15 = &v6[v7];
    v16 = &v6[v7];
  }
  pErrorCode = U_ZERO_ERROR;
  v8 = u_strToUTF8(v6, v5 - (int)v6, 0, *a2, -1, &pErrorCode);
  if (!v8)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12, "StringFromUnicodeVector", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.h", 677);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Failed to create UTF-8 string: ", 31);
    v10 = u_errorName(pErrorCode);
    v11 = strlen(v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  std::string::basic_string[abi:ne180100]<0>(a1, v8);
  if (v14)
    operator delete(v14);
}

void sub_1DEAC986C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 80);
  if (v3)
  {
    *(_QWORD *)(v1 - 72) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t *v4;
  unint64_t v5;
  float v6;
  unint64_t v7;
  float v8;
  _BOOL8 v9;
  unint64_t v10;
  unint64_t v11;
  int8x8_t prime;
  void *v13;
  void *v14;
  uint64_t v15;
  unsigned __int8 **v16;
  unint64_t v17;
  uint8x8_t v18;
  unint64_t v19;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  int v27;
  unsigned __int8 *v28;
  void *v29;
  uint8x8_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  uint8x8_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  unint64_t *v44;
  unsigned __int8 *v45;
  unint64_t v46;

  v2 = (_QWORD *)a2;
  v4 = (unint64_t *)(a1 + 24);
  v45 = (unsigned __int8 *)(a2 + 16);
  v5 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, a2 + 16);
  v6 = *(float *)(a1 + 32);
  v46 = v5;
  v2[1] = v5;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  if (!v7 || (float)(v6 * (float)v7) < v8)
  {
    v9 = 1;
    if (v7 >= 3)
      v9 = (v7 & (v7 - 1)) != 0;
    v10 = v9 | (2 * v7);
    v11 = vcvtps_u32_f32(v8 / v6);
    if (v10 <= v11)
      prime = (int8x8_t)v11;
    else
      prime = (int8x8_t)v10;
    v44 = v4;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    v43 = v2;
    if (*(_QWORD *)&prime > v7)
    {
LABEL_13:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(8 * *(_QWORD *)&prime);
      v14 = *(void **)a1;
      *(_QWORD *)a1 = v13;
      if (v14)
        operator delete(v14);
      v15 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v15++) = 0;
      while (*(_QWORD *)&prime != v15);
      v16 = *(unsigned __int8 ***)(a1 + 16);
      if (v16)
      {
        v17 = (unint64_t)v16[1];
        v18 = (uint8x8_t)vcnt_s8(prime);
        v18.i16[0] = vaddlv_u8(v18);
        v19 = v18.u32[0];
        if (v18.u32[0] > 1uLL)
        {
          if (v17 >= *(_QWORD *)&prime)
            v17 %= *(_QWORD *)&prime;
        }
        else
        {
          v17 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v17) = a1 + 16;
        v23 = *v16;
        if (*v16)
        {
          v42 = v18.u32[0];
          do
          {
            v24 = *((_QWORD *)v23 + 1);
            if (v19 > 1)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            if (v24 == v17)
            {
              v16 = (unsigned __int8 **)v23;
            }
            else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v24))
            {
              v25 = *(unsigned __int8 **)v23;
              if (*(_QWORD *)v23)
              {
                v26 = v23;
                while (1)
                {
                  v27 = std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, v23 + 16, v25 + 16);
                  v28 = *(unsigned __int8 **)v26;
                  if (!v27)
                    break;
                  v25 = *(unsigned __int8 **)v28;
                  v26 = *(unsigned __int8 **)v26;
                  if (!*(_QWORD *)v28)
                    goto LABEL_46;
                }
                v25 = *(unsigned __int8 **)v26;
                v28 = v26;
LABEL_46:
                v19 = v42;
              }
              else
              {
                v28 = v23;
              }
              *v16 = v25;
              *(_QWORD *)v28 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v24);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v24) = v23;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v16;
              v16 = (unsigned __int8 **)v23;
              v17 = v24;
            }
            v23 = *v16;
          }
          while (*v16);
        }
      }
      goto LABEL_58;
    }
    if (*(_QWORD *)&prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*v4 / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (*(_QWORD *)&prime <= v20)
        prime = (int8x8_t)v20;
      if (*(_QWORD *)&prime < v7)
      {
        if (prime)
          goto LABEL_13;
        v29 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v29)
          operator delete(v29);
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_58:
    v7 = *(_QWORD *)(a1 + 8);
    v2 = v43;
    v4 = v44;
  }
  v30 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
  v30.i16[0] = vaddlv_u8(v30);
  v31 = v30.u32[0];
  if (v30.u32[0] > 1uLL)
  {
    v32 = v46;
    if (v7 <= v46)
      v32 = v46 % v7;
  }
  else
  {
    v32 = (v7 - 1) & v46;
  }
  v33 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8 * v32);
  if (v33)
  {
    v34 = *(unsigned __int8 **)v33;
    if (*(_QWORD *)v33)
    {
      v35 = 0;
      do
      {
        v36 = *((_QWORD *)v34 + 1);
        if (v31 > 1)
        {
          v37 = *((_QWORD *)v34 + 1);
          if (v36 >= v7)
            v37 = v36 % v7;
        }
        else
        {
          v37 = v36 & (v7 - 1);
        }
        if (v37 != v32)
          break;
        v38 = v36 == v46 ? std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, v34 + 16, v45) : 0;
        if ((v35 & (v38 ^ 1) & 1) != 0)
          break;
        v35 |= v38;
        v33 = *(unsigned __int8 **)v33;
        v34 = *(unsigned __int8 **)v33;
      }
      while (*(_QWORD *)v33);
      v7 = *(_QWORD *)(a1 + 8);
      v39 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
      v39.i16[0] = vaddlv_u8(v39);
      v31 = v39.u32[0];
    }
  }
  v40 = v2[1];
  if (v31 > 1)
  {
    if (v40 >= v7)
      v40 %= v7;
  }
  else
  {
    v40 &= v7 - 1;
  }
  if (!v33)
  {
    *v2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = a1 + 16;
    if (!*v2)
      goto LABEL_95;
    v41 = *(_QWORD *)(*v2 + 8);
    if (v31 > 1)
    {
      if (v41 >= v7)
        v41 %= v7;
    }
    else
    {
      v41 &= v7 - 1;
    }
LABEL_94:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v41) = v2;
    goto LABEL_95;
  }
  *v2 = *(_QWORD *)v33;
  *(_QWORD *)v33 = v2;
  if (*v2)
  {
    v41 = *(_QWORD *)(*v2 + 8);
    if (v31 > 1)
    {
      if (v41 >= v7)
        v41 %= v7;
    }
    else
    {
      v41 &= v7 - 1;
    }
    if (v41 != v40)
      goto LABEL_94;
  }
LABEL_95:
  ++*v4;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, __int128 **a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t **v8;
  const void **v10;
  uint64_t *v11;
  std::string *v12;
  __int128 *v13;
  __int128 v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v18[2];
  char v19;

  v6 = (uint64_t)(a1 + 1);
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (!v5)
    goto LABEL_10;
  v7 = a1 + 1;
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v10 = (const void **)(v5 + 4);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a2, (const void **)v5 + 4))
        break;
      v5 = *v8;
      v7 = v8;
      if (!*v8)
        goto LABEL_10;
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v10, a2))
      break;
    v7 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_10;
  }
  v11 = *v7;
  if (!*v7)
  {
LABEL_10:
    v11 = (uint64_t *)operator new(0x48uLL);
    v18[0] = (uint64_t)v11;
    v18[1] = v6;
    v19 = 0;
    v12 = (std::string *)(v11 + 4);
    v13 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
    }
    else
    {
      v14 = *v13;
      v11[6] = *((_QWORD *)v13 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v14;
    }
    v11[7] = 0;
    v11[8] = 0;
    v19 = 1;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v8;
    *v7 = v11;
    v15 = (uint64_t *)**a1;
    v16 = v11;
    if (v15)
    {
      *a1 = v15;
      v16 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v16);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v18[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,void *>>>>::reset[abi:ne180100](v18);
  }
  return v11;
}

void sub_1DEAC9EC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,void *>>>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<kaldi::quasar::TorchEncoderDecoder *,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>::__shared_ptr_default_delete<kaldi::quasar::TorchEncoderDecoder,kaldi::quasar::TorchEncoderDecoder>,std::allocator<kaldi::quasar::TorchEncoderDecoder>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::TorchEncoderDecoder *,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>::__shared_ptr_default_delete<kaldi::quasar::TorchEncoderDecoder,kaldi::quasar::TorchEncoderDecoder>,std::allocator<kaldi::quasar::TorchEncoderDecoder>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::TorchEncoderDecoder *,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>::__shared_ptr_default_delete<kaldi::quasar::TorchEncoderDecoder,kaldi::quasar::TorchEncoderDecoder>,std::allocator<kaldi::quasar::TorchEncoderDecoder>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,void *>>>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;

  v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v2 = *(std::__shared_weak_count **)(v1 + 64);
      if (v2)
        std::__shared_weak_count::__release_weak(v2);
      if (*(char *)(v1 + 55) < 0)
        operator delete(*(void **)(v1 + 32));
    }
    operator delete((void *)v1);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::Encdec>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::Encdec>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::Encdec>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, __int128 **a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t **v8;
  const void **v10;
  uint64_t *v11;
  std::string *v12;
  __int128 *v13;
  __int128 v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v18[2];
  char v19;

  v6 = (uint64_t)(a1 + 1);
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (!v5)
    goto LABEL_10;
  v7 = a1 + 1;
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v10 = (const void **)(v5 + 4);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a2, (const void **)v5 + 4))
        break;
      v5 = *v8;
      v7 = v8;
      if (!*v8)
        goto LABEL_10;
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v10, a2))
      break;
    v7 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_10;
  }
  v11 = *v7;
  if (!*v7)
  {
LABEL_10:
    v11 = (uint64_t *)operator new(0x48uLL);
    v18[0] = (uint64_t)v11;
    v18[1] = v6;
    v19 = 0;
    v12 = (std::string *)(v11 + 4);
    v13 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
    }
    else
    {
      v14 = *v13;
      v11[6] = *((_QWORD *)v13 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v14;
    }
    v11[7] = 0;
    v11[8] = 0;
    v19 = 1;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v8;
    *v7 = v11;
    v15 = (uint64_t *)**a1;
    v16 = v11;
    if (v15)
    {
      *a1 = v15;
      v16 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v16);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v18[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,void *>>>>::reset[abi:ne180100](v18);
  }
  return v11;
}

void sub_1DEACA0FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,void *>>>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

kaldi::quasar::Encdec *std::unique_ptr<kaldi::quasar::Encdec>::reset[abi:ne180100](kaldi::quasar::Encdec **a1)
{
  kaldi::quasar::Encdec *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    kaldi::quasar::Encdec::~Encdec(result);
    JUMPOUT(0x1DF0ED014);
  }
  return result;
}

void kaldi::quasar::Encdec::~Encdec(kaldi::quasar::Encdec *this)
{
  void **v2;
  void **v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;

  v2 = (void **)*((_QWORD *)this + 342);
  if (v2)
  {
    v3 = (void **)*((_QWORD *)this + 343);
    v4 = (void *)*((_QWORD *)this + 342);
    if (v3 != v2)
    {
      do
      {
        v3 -= 3;
        v10 = v3;
        std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v10);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 342);
    }
    *((_QWORD *)this + 343) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 2735) < 0)
    operator delete(*((void **)this + 339));
  if (*((char *)this + 2711) < 0)
    operator delete(*((void **)this + 336));
  kaldi::nnet1::Nnet::~Nnet((kaldi::quasar::Encdec *)((char *)this + 2168));
  v5 = (void *)*((_QWORD *)this + 267);
  if (v5)
  {
    *((_QWORD *)this + 268) = v5;
    operator delete(v5);
  }
  v10 = (void **)((char *)this + 2112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = (void **)((char *)this + 2088);
  std::vector<kaldi::MappableVector<int>>::__destroy_vector::operator()[abi:ne180100](&v10);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 2048);
  v10 = (void **)((char *)this + 2024);
  std::vector<kaldi::MappableVector<int>>::__destroy_vector::operator()[abi:ne180100](&v10);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 1976);
  v6 = (void *)*((_QWORD *)this + 244);
  if (v6)
  {
    *((_QWORD *)this + 245) = v6;
    operator delete(v6);
  }
  v10 = (void **)((char *)this + 1864);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = (void **)((char *)this + 1840);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = (void **)((char *)this + 1816);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v10);
  if (*((char *)this + 1815) < 0)
    operator delete(*((void **)this + 224));
  if (*((char *)this + 1791) < 0)
    operator delete(*((void **)this + 221));
  if (*((char *)this + 1767) < 0)
    operator delete(*((void **)this + 218));
  if (*((char *)this + 1743) < 0)
    operator delete(*((void **)this + 215));
  if (*((char *)this + 1719) < 0)
    operator delete(*((void **)this + 212));
  if (*((char *)this + 1695) < 0)
    operator delete(*((void **)this + 209));
  if (*((char *)this + 1671) < 0)
    operator delete(*((void **)this + 206));
  if (*((char *)this + 1647) < 0)
    operator delete(*((void **)this + 203));
  if (*((char *)this + 1623) < 0)
    operator delete(*((void **)this + 200));
  if (*((char *)this + 1599) < 0)
    operator delete(*((void **)this + 197));
  if (*((char *)this + 1575) < 0)
    operator delete(*((void **)this + 194));
  if (*((char *)this + 1551) < 0)
    operator delete(*((void **)this + 191));
  if (*((char *)this + 1527) < 0)
    operator delete(*((void **)this + 188));
  v10 = (void **)((char *)this + 1480);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v10);
  if (*((char *)this + 1479) < 0)
    operator delete(*((void **)this + 182));
  v10 = (void **)((char *)this + 1432);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = (void **)((char *)this + 1408);
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = (void **)((char *)this + 1384);
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = (void **)((char *)this + 1360);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v10);
  kaldi::nnet1::Nnet::~Nnet((kaldi::quasar::Encdec *)((char *)this + 960));
  if (*((char *)this + 935) < 0)
    operator delete(*((void **)this + 114));
  if (*((char *)this + 911) < 0)
    operator delete(*((void **)this + 111));
  if (*((char *)this + 887) < 0)
    operator delete(*((void **)this + 108));
  if (*((char *)this + 863) < 0)
    operator delete(*((void **)this + 105));
  if (*((char *)this + 839) < 0)
    operator delete(*((void **)this + 102));
  v10 = (void **)((char *)this + 784);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v10);
  v7 = (void *)*((_QWORD *)this + 95);
  if (v7)
  {
    *((_QWORD *)this + 96) = v7;
    operator delete(v7);
  }
  kaldi::quasar::BPE::~BPE((kaldi::quasar::Encdec *)((char *)this + 472));
  v8 = *((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 440);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 416, *((_QWORD **)this + 53));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 392, *((_QWORD **)this + 50));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 368, *((_QWORD **)this + 47));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 344, *((_QWORD **)this + 44));
  v10 = (void **)((char *)this + 320);
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v10);
  std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>>>::destroy((uint64_t)this + 296, *((_QWORD **)this + 38));
  std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>>>::destroy((uint64_t)this + 272, *((_QWORD **)this + 35));
  std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>>>::destroy((uint64_t)this + 248, *((_QWORD **)this + 32));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 232);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 200);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 184);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 168);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 152);
  if (*((char *)this + 151) < 0)
    operator delete(*((void **)this + 16));
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void std::__shared_ptr_pointer<kaldi::quasar::Encdec *,std::shared_ptr<kaldi::quasar::Encdec>::__shared_ptr_default_delete<kaldi::quasar::Encdec,kaldi::quasar::Encdec>,std::allocator<kaldi::quasar::Encdec>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

kaldi::quasar::Encdec *std::__shared_ptr_pointer<kaldi::quasar::Encdec *,std::shared_ptr<kaldi::quasar::Encdec>::__shared_ptr_default_delete<kaldi::quasar::Encdec,kaldi::quasar::Encdec>,std::allocator<kaldi::quasar::Encdec>>::__on_zero_shared(uint64_t a1)
{
  kaldi::quasar::Encdec *result;

  result = *(kaldi::quasar::Encdec **)(a1 + 24);
  if (result)
  {
    kaldi::quasar::Encdec::~Encdec(result);
    JUMPOUT(0x1DF0ED014);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::Encdec *,std::shared_ptr<kaldi::quasar::Encdec>::__shared_ptr_default_delete<kaldi::quasar::Encdec,kaldi::quasar::Encdec>,std::allocator<kaldi::quasar::Encdec>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::quasar::PhraseBook,std::allocator<kaldi::quasar::PhraseBook>,BOOL &,void>(_QWORD *a1, char a2)
{
  char *v4;
  _QWORD *result;

  v4 = (char *)operator new(0x60uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1EA9361B0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *((_DWORD *)v4 + 14) = 1065353216;
  result = std::string::basic_string[abi:ne180100]<0>((_QWORD *)v4 + 8, "|||");
  *((_DWORD *)v4 + 22) = 0;
  v4[92] = a2 != 0;
  *a1 = v4 + 24;
  a1[1] = v4;
  return result;
}

void sub_1DEACA668(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::~__hash_table(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

kaldi::quasar::NNMTTransliterator *kaldi::quasar::NNMTTransliterator::NNMTTransliterator(kaldi::quasar::NNMTTransliterator *this)
{
  uint64_t v2;
  void *__p[2];
  char v5;

  v2 = kaldi::quasar::TorchEncoderDecoder::TorchEncoderDecoder(this);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v2 + 4688), "<space>");
  *((_QWORD *)this + 589) = 0;
  *((_WORD *)this + 2360) = 256;
  std::string::basic_string[abi:ne180100]<0>(__p, "UNK");
  kaldi::quasar::BPE::BPE((uint64_t)this + 4728, 1, (__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return this;
}

void sub_1DEACA71C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  kaldi::quasar::TorchEncoderDecoder *v15;
  void **v16;
  char *v17;

  if (a15 < 0)
    operator delete(__p);
  if (*v17 < 0)
    operator delete(*v16);
  kaldi::quasar::TorchEncoderDecoder::~TorchEncoderDecoder(v15);
  _Unwind_Resume(a1);
}

void kaldi::quasar::InputHammer::~InputHammer(kaldi::quasar::InputHammer *this)
{
  void **v2;

  v2 = (void **)((char *)this + 80);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::~__hash_table((uint64_t)this + 40);
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)this);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__shared_ptr_emplace<kaldi::quasar::PhraseBook>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9361B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::PhraseBook>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9361B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<kaldi::quasar::PhraseBook>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  return std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::~__hash_table(a1 + 24);
}

uint64_t EncoderDecoder::decode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  _BYTE v9[160];
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  if (*(_BYTE *)(a1 + 12888))
  {
    v6 = *(_DWORD *)(a1 + 12880);
    kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DecodeOptions((uint64_t)v9, v6, *(_DWORD *)(a1 + 5776), *(float *)(a1 + 5752));
    v10 = v6;
    v11 = 1;
    v14 = 0;
    v12 = 0;
    v13 = 1;
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Decode<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, (uint64_t)v9, a3);
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 12880);
    kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DecodeOptions((uint64_t)v9, v7, *(_DWORD *)(a1 + 12216), *(float *)(a1 + 12192));
    v10 = v7;
    v11 = 1;
    v14 = 0;
    v12 = 0;
    v13 = 1;
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Decode<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1 + 6440, a2, (uint64_t)v9, a3);
  }
  return kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~DecodeOptions((uint64_t)v9);
}

void sub_1DEACA958(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~DecodeOptions((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DecodeOptions(uint64_t a1, int a2, int a3, float a4)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = a2;
  *(_QWORD *)(a1 + 164) = 0x4F0000004F000000;
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 172) = 0;
  *(_QWORD *)(a1 + 184) = 1;
  *(_DWORD *)(a1 + 192) = 1;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 216) = a3;
  *(_QWORD *)(a1 + 220) = 0x40A000003F800000;
  *(float *)(a1 + 228) = a4;
  *(_BYTE *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 252) = 0;
  *(_DWORD *)(a1 + 260) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 264), &byte_1DEBD87CE);
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 304) = 0x10000;
  *(_BYTE *)(a1 + 308) = 0;
  *(_DWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 316) = 0;
  return a1;
}

void sub_1DEACAA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;

  a10 = (void **)(v10 + 240);
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 159) < 0)
    operator delete(*(void **)(v10 + 136));
  if (*(char *)(v10 + 135) < 0)
    operator delete(*(void **)(v10 + 112));
  if (*(char *)(v10 + 111) < 0)
    operator delete(*(void **)(v10 + 88));
  if (*(char *)(v10 + 87) < 0)
    operator delete(*(void **)(v10 + 64));
  if (*(char *)(v10 + 63) < 0)
    operator delete(*(void **)(v10 + 40));
  if (*(char *)(v10 + 39) < 0)
    operator delete(*v11);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Decode<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  int v8;
  float v9;
  int v10;
  float v11;
  std::string *i;
  std::string *v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  std::string *p_p;
  std::string::size_type size;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  std::string *v28;
  std::string::size_type v29;
  char *v30;
  uint64_t *v31;
  int v32;
  char *v33;
  const std::string *v34;
  const char *v35;
  uint64_t v36;
  _QWORD *v37;
  std::string::size_type v38;
  const std::string *j;
  std::string::size_type v40;
  uint64_t v41;
  _DWORD *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  char *v47;
  char *v48;
  _DWORD *v49;
  int v50;
  std::string::size_type v51;
  std::string::size_type v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  _BOOL4 v72;
  uint64_t v73;
  int v74;
  int v76;
  int v77;
  std::string::size_type v78;
  std::string::size_type v79;
  void *v80;
  uint64_t v81;
  unint64_t v82;
  int64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  int v87;
  _BYTE *v88;
  std::string *v89;
  std::string *v90;
  std::string::size_type v91;
  std::string::size_type v92;
  unint64_t v93;
  uint64_t v94;
  std::string::size_type v95;
  _QWORD **v96;
  std::string::size_type *p_size;
  uint64_t v98;
  std::string *v99;
  uint64_t v100;
  std::string::size_type v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  __int128 *v107;
  __int128 v108;
  uint64_t v109;
  char *v110;
  _DWORD *v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  char *v118;
  int v119;
  std::string *v120;
  std::string::size_type v121;
  int v122;
  const std::string::value_type *v123;
  std::string::size_type v124;
  std::string::size_type v125;
  std::string::size_type v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  std::string::size_type v131;
  uint64_t v132;
  std::string::size_type v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  std::string::size_type v138;
  std::string::size_type v139;
  char *v140;
  _DWORD *v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  char *v151;
  char *v152;
  int v153;
  std::string::size_type v154;
  std::string::size_type v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  std::string *p_str;
  std::string::size_type v162;
  _QWORD *v163;
  _QWORD *v164;
  std::string *v165;
  std::string::size_type v166;
  _QWORD *v167;
  _QWORD **v168;
  uint64_t v169;
  float *v170;
  std::string *v171;
  std::string *v172;
  float v173;
  unint64_t v174;
  std::string *v175;
  std::string *v176;
  uint64_t v177;
  _QWORD *v178;
  _QWORD *v179;
  void **v180;
  unint64_t v181;
  char *v182;
  _DWORD *v183;
  char *v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  int v190;
  _QWORD *v191;
  _QWORD *v192;
  int *v193;
  int *v194;
  char *v195;
  int v196;
  char *v197;
  char *v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  char *v203;
  char *v204;
  int v205;
  int *v206;
  int *v207;
  char *v208;
  int v209;
  char *v210;
  char *v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;
  char *v216;
  char *v217;
  int v218;
  char *v219;
  char *v220;
  _QWORD *v221;
  float *v222;
  void **v223;
  std::string::size_type *v224;
  float *v225;
  float *v226;
  int v227;
  float *v228;
  float v229;
  float v230;
  float *v231;
  float *v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  char *v236;
  float *v237;
  int v238;
  int64_t v239;
  _QWORD *v240;
  _QWORD *v241;
  unint64_t v242;
  unint64_t v243;
  int v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  const char *v248;
  int v249;
  int v250;
  const char *v251;
  unint64_t v252;
  uint64_t v253;
  std::string::pointer data;
  unint64_t v255;
  int v256;
  uint64_t v257;
  uint64_t v258;
  const char *v259;
  int v260;
  uint64_t v261;
  uint64_t v262;
  const char *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  const char *v267;
  uint64_t v268;
  uint64_t v269;
  const char *v270;
  unsigned int v271;
  void **p_data;
  const char *v273;
  std::string::size_type v275;
  unint64_t v276;
  char *v277;
  _DWORD *v278;
  char *v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  unint64_t v283;
  char *v284;
  char *v285;
  int v286;
  _QWORD *v287;
  _QWORD *v288;
  uint64_t v289;
  unint64_t v290;
  int v291;
  uint64_t v292;
  _QWORD *v293;
  int *v294;
  int *v295;
  double v296;
  int *v297;
  uint64_t v298;
  double v299;
  float v300;
  unint64_t v301;
  unint64_t v302;
  const kaldi::quasar::TranslationUtil::NbestElement *v303;
  const kaldi::quasar::TranslationUtil::NbestElement *v304;
  uint64_t v305;
  unint64_t v306;
  kaldi::quasar::TranslationUtil::NbestElement *v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  _QWORD *v311;
  std::string::size_type v312;
  int v313;
  uint64_t v314;
  uint64_t v315;
  _QWORD *v316;
  _QWORD *v317;
  _QWORD *v318;
  _QWORD *v319;
  int v320;
  int v321;
  int v322;
  uint64_t v323;
  std::string *v324;
  std::string::size_type v325;
  std::string::size_type v326;
  std::string::size_type v327;
  std::string *v328;
  uint64_t v329;
  _BYTE *v330;
  const std::string *v333;
  std::string *v334;
  int v335;
  std::string::size_type v336;
  uint64_t v337;
  uint64_t v338;
  const std::string *v339;
  char *v340;
  char *v341;
  uint64_t v342;
  std::string v343;
  __int128 *v344;
  __int128 *v345;
  uint64_t v346;
  std::string v347;
  void *v348;
  uint64_t v349;
  uint64_t v350;
  std::string v351;
  unint64_t v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  _BYTE v364[28];
  std::string __p;
  uint64_t v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  _BYTE v373[152];
  std::string __str;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 __dst;
  _BYTE v386[28];
  std::string v387;
  unint64_t v388;
  std::string::value_type *v389;
  std::string v390;
  uint64_t v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  _QWORD v396[4];
  _BYTE v397[152];
  std::string v398;
  char *v399;
  char *v400;
  char *v401;
  char *v402;
  char *v403;
  char *v404;

  if (!a4)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v390, "Decode", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 1820);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v390, "Nbestlist cannot be null");
    goto LABEL_548;
  }
  if (*(_BYTE *)(a3 + 307) || (v4 = a1, v330 = (_BYTE *)(a1 + 5416), *(_BYTE *)(a1 + 5789)))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v390, "Decode", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 1824);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v390, "Decoder not configured for string decoding (use SentencePiece ID decoding).");
    goto LABEL_548;
  }
  v6 = *(_QWORD *)(a1 + 136);
  if (v6 && *(_BYTE *)(v6 + 4446))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v390, "Decode", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 1827);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v390, "Model lacks full symbol tables (use SentencePiece ID decoding).");
LABEL_548:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v390);
  }
  v7 = *(_DWORD *)(a1 + 5752);
  v321 = *(_DWORD *)(a1 + 5740);
  v322 = *(_DWORD *)(a1 + 5776);
  v8 = *(_DWORD *)(a1 + 5744);
  v320 = *(_DWORD *)(a1 + 5748);
  *(_DWORD *)(a1 + 5752) = *(_DWORD *)(a3 + 228);
  *(_DWORD *)(a1 + 5776) = *(_DWORD *)(a3 + 216);
  if (*(_DWORD *)a3)
    *(_DWORD *)(a1 + 5740) = *(_DWORD *)a3;
  v9 = *(float *)(a3 + 4);
  if (v9 != 0.0)
    *(float *)(a1 + 5744) = v9;
  v10 = *(_DWORD *)(a3 + 8);
  if (v10)
    *(_DWORD *)(a1 + 5748) = v10;
  if ((*(_DWORD *)(a3 + 160) & 0x80000000) != 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v390, "ValidateDecodingParameters", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 1683);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v390, (uint64_t)"Decoder beam (", 14);
    v317 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v317, ") should not be negative.");
    goto LABEL_548;
  }
  v11 = *(float *)(a3 + 176);
  if (v11 < 0.0 || v11 > 1000.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v390, "ValidateDecodingParameters", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 1686);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v390, (uint64_t)"Decoder confidence threshold (", 30);
    v318 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v318, ") should be in the range [0, 1000].");
    goto LABEL_548;
  }
  if ((*(_DWORD *)(a3 + 172) & 0x80000000) != 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v390, "ValidateDecodingParameters", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 1689);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v390, (uint64_t)"Decoder maximum nbest list size (", 33);
    v319 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v319, ") should not be negative.");
    goto LABEL_548;
  }
  v13 = *(std::string **)a4;
  for (i = *(std::string **)(a4 + 8);
        i != v13;
  *(_QWORD *)(a4 + 8) = v13;
  v348 = 0;
  v349 = 0;
  v350 = 0;
  kaldi::quasar::InputHammer::FilterTags(v4 + 8, a2, (uint64_t)&v348, a3 + 64);
  kaldi::quasar::MultiLangDecorator::Apply(&v347, v4 + 120, (uint64_t)&v348, a3 + 64, a3 + 88);
  v14 = *(unsigned __int8 *)(a3 + 232);
  if (*(_BYTE *)(a3 + 232))
  {
    v15 = *(unsigned int *)(v4 + 128);
    v14 = v15 > 3 ? 0 : dword_1DED16D10[v15];
    v16 = *(_DWORD *)(v4 + 124);
    if (v16 >= 2)
    {
      if (v16 == 2)
        v14 *= 2;
      else
        v14 = 0;
    }
  }
  *(_DWORD *)(v4 + 5756) = v14;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v390, "Decode", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 1854);
    kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::LanguageInfo((uint64_t)&__p, a3);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v390, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v390);
    if (kaldi::g_kaldi_verbose_level >= 2)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v390, "Decode", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 1856, 2);
      v19 = *(char *)(a2 + 23);
      if (v19 >= 0)
        v20 = a2;
      else
        v20 = *(_QWORD *)a2;
      if (v19 >= 0)
        v21 = *(unsigned __int8 *)(a2 + 23);
      else
        v21 = *(_QWORD *)(a2 + 8);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v390, v20, v21);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" -> ", 4);
      if (v350 >= 0)
        v24 = &v348;
      else
        v24 = v348;
      if (v350 >= 0)
        v25 = HIBYTE(v350);
      else
        v25 = v349;
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" -> ", 4);
      if ((v347.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = &v347;
      else
        v28 = (std::string *)v347.__r_.__value_.__r.__words[0];
      if ((v347.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = HIBYTE(v347.__r_.__value_.__r.__words[2]);
      else
        v29 = v347.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v390);
    }
  }
  v344 = 0;
  v345 = 0;
  v346 = 0;
  if (SHIBYTE(v347.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v343, v347.__r_.__value_.__l.__data_, v347.__r_.__value_.__l.__size_);
  else
    v343 = v347;
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::TokenizeInputString(v4, &v343, (uint64_t *)&v344);
  if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v343.__r_.__value_.__l.__data_);
  if (v345 == v344)
    goto LABEL_519;
  v340 = 0;
  v341 = 0;
  v342 = 0;
  std::vector<std::shared_ptr<kaldi::quasar::PhraseBook>>::__init_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::PhraseBook>*,std::shared_ptr<kaldi::quasar::PhraseBook>*>(&v340, *(_QWORD **)(a3 + 240), *(_QWORD **)(a3 + 248), (uint64_t)(*(_QWORD *)(a3 + 248) - *(_QWORD *)(a3 + 240)) >> 4);
  if (v330[376])
    std::vector<std::shared_ptr<Agglomerate>>::push_back[abi:ne180100](&v340, (__int128 *)(v4 + 392));
  v31 = (uint64_t *)v340;
  v30 = v341;
  v338 = v4;
  v329 = a2;
  if (v341 != v340 && *(_DWORD *)(v4 + 5772) != 1)
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v390, "FindInPhraseBooks", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 1493);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v390, (uint64_t)"FindInPhraseBooks # ", 20);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v390);
      v31 = (uint64_t *)v340;
      v30 = v341;
    }
    memset(&v351, 0, sizeof(v351));
    if (v31 == (uint64_t *)v30)
    {
      v34 = 0;
      v32 = 0;
      v33 = v30;
    }
    else
    {
      v32 = 0;
      do
      {
        if (*v31 && kaldi::quasar::PhraseBook::Find(*v31, (uint64_t)&v348, &v351))
          break;
        ++v32;
        v31 += 2;
      }
      while (v31 != (uint64_t *)v30);
      v30 = v340;
      v33 = v341;
      v34 = (const std::string *)v351.__r_.__value_.__r.__words[0];
    }
    if ((unint64_t)(v33 - v30) >= 0x11
      && (const std::string *)v351.__r_.__value_.__l.__size_ != v34
      && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v390, "FindInPhraseBooks", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 1505);
      if (v32)
        v35 = "Phrasebook fallback match";
      else
        v35 = "Phrasebook locale match";
      if (v32)
        v36 = 25;
      else
        v36 = 23;
      v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v390, (uint64_t)v35, v36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)", phrasebook idx=", 17);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v390);
      v34 = (const std::string *)v351.__r_.__value_.__r.__words[0];
    }
    v38 = v351.__r_.__value_.__l.__size_;
    if ((const std::string *)v351.__r_.__value_.__l.__size_ != v34)
    {
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v390, "Decode", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 1871);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v390, (uint64_t)"Total # of phrasebook matches : ", 32);
        std::ostream::operator<<();
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v390);
        v38 = v351.__r_.__value_.__l.__size_;
        v34 = (const std::string *)v351.__r_.__value_.__r.__words[0];
      }
      if (v34 != (const std::string *)v38)
      {
        v333 = (const std::string *)v38;
        do
        {
          memset(&__str, 0, sizeof(__str));
          v339 = v34;
          kaldi::SplitStringToVector(v34 + 2, " ", 1, (uint64_t)&__str);
          memset(&v387, 0, sizeof(v387));
          v40 = __str.__r_.__value_.__l.__size_;
          for (j = (const std::string *)__str.__r_.__value_.__r.__words[0]; j != (const std::string *)v40; ++j)
          {
            memset(&v390, 0, sizeof(v390));
            v392 = 0u;
            v393 = 0u;
            v394 = 0u;
            v395 = 0u;
            memset(v396, 0, sizeof(v396));
            memset(v397, 0, 108);
            std::string::operator=(&v390, j);
            v41 = *((_QWORD *)&v395 + 1);
            v396[0] = *((_QWORD *)&v395 + 1);
            if (*((_QWORD *)&v395 + 1) >= v396[1])
            {
              v43 = (uint64_t)(v396[1] - *((_QWORD *)&v395 + 1)) >> 1;
              if (v43 <= 1)
                v43 = 1;
              if (v396[1] - *((_QWORD *)&v395 + 1) >= 0x7FFFFFFFFFFFFFFCuLL)
                v44 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v44 = v43;
              v46 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v396[1], v44);
              v47 = (char *)v396[0];
              v48 = (char *)*((_QWORD *)&v395 + 1);
              *v46 = -1;
              v42 = v46 + 1;
              v49 = v46;
              while (v47 != v48)
              {
                v50 = *((_DWORD *)v47 - 1);
                v47 -= 4;
                *--v49 = v50;
              }
              *((_QWORD *)&v395 + 1) = v49;
              v396[0] = v46 + 1;
              v396[1] = &v46[v45];
              if (v48)
                operator delete(v48);
            }
            else
            {
              **((_DWORD **)&v395 + 1) = -1;
              v42 = (_DWORD *)(v41 + 4);
            }
            v396[0] = v42;
            *(_QWORD *)&v395 = 0;
            v51 = v387.__r_.__value_.__l.__size_;
            if (v387.__r_.__value_.__l.__size_ >= v387.__r_.__value_.__r.__words[2])
            {
              v53 = 0xEEEEEEEEEEEEEEEFLL
                  * ((uint64_t)(v387.__r_.__value_.__l.__size_ - v387.__r_.__value_.__r.__words[0]) >> 4);
              v54 = v53 + 1;
              if (v53 + 1 > 0x111111111111111)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              if (0xDDDDDDDDDDDDDDDELL
                 * ((uint64_t)(v387.__r_.__value_.__r.__words[2] - v387.__r_.__value_.__r.__words[0]) >> 4) > v54)
                v54 = 0xDDDDDDDDDDDDDDDELL
                    * ((uint64_t)(v387.__r_.__value_.__r.__words[2] - v387.__r_.__value_.__r.__words[0]) >> 4);
              if (0xEEEEEEEEEEEEEEEFLL
                 * ((uint64_t)(v387.__r_.__value_.__r.__words[2] - v387.__r_.__value_.__r.__words[0]) >> 4) >= 0x88888888888888)
                v55 = 0x111111111111111;
              else
                v55 = v54;
              *(_QWORD *)&v367 = (char *)&v387.__r_.__value_.__l + 16;
              if (v55)
                v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::PathElement>>(v55);
              else
                v56 = 0;
              __p.__r_.__value_.__r.__words[0] = v55;
              __p.__r_.__value_.__l.__size_ = v55 + 240 * v53;
              __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
              v366 = v55 + 240 * v56;
              kaldi::quasar::TranslationUtil::PathElement::PathElement((std::string *)__p.__r_.__value_.__l.__size_, (const kaldi::quasar::TranslationUtil::PathElement *)&v390);
              __p.__r_.__value_.__r.__words[2] += 240;
              std::vector<kaldi::quasar::TranslationUtil::PathElement>::__swap_out_circular_buffer(&v387, &__p);
              v52 = v387.__r_.__value_.__l.__size_;
              std::__split_buffer<kaldi::quasar::TranslationUtil::PathElement>::~__split_buffer((uint64_t)&__p);
            }
            else
            {
              kaldi::quasar::TranslationUtil::PathElement::PathElement((std::string *)v387.__r_.__value_.__l.__size_, (const kaldi::quasar::TranslationUtil::PathElement *)&v390);
              v52 = v51 + 240;
            }
            v387.__r_.__value_.__l.__size_ = v52;
            kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)&v390);
          }
          kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v390);
          std::vector<kaldi::quasar::TranslationUtil::PathElement>::__assign_with_size[abi:ne180100]<kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*>((uint64_t *)&v390, (uint64_t)v387.__r_.__value_.__l.__data_, v387.__r_.__value_.__l.__size_, 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v387.__r_.__value_.__l.__size_ - v387.__r_.__value_.__r.__words[0]) >> 4));
          v391 = 0;
          *(_QWORD *)&v392 = 0;
          *(_QWORD *)&v393 = 0xAAAAAAAAAAAAAAABLL
                           * ((uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3);
          DWORD2(v393) = 5;
          std::string::operator=((std::string *)&v394, v339 + 3);
          v58 = *(_QWORD *)(a4 + 8);
          v57 = *(_QWORD *)(a4 + 16);
          if (v58 >= v57)
          {
            v61 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v58 - *(_QWORD *)a4) >> 4);
            v62 = v61 + 1;
            if (v61 + 1 > 0xF0F0F0F0F0F0F0)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v63 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v57 - *(_QWORD *)a4) >> 4);
            if (2 * v63 > v62)
              v62 = 2 * v63;
            if (v63 >= 0x78787878787878)
              v64 = 0xF0F0F0F0F0F0F0;
            else
              v64 = v62;
            *(_QWORD *)&v367 = a4 + 16;
            if (v64)
              v64 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::NbestElement>>(v64);
            else
              v65 = 0;
            __p.__r_.__value_.__r.__words[0] = v64;
            __p.__r_.__value_.__l.__size_ = v64 + 272 * v61;
            __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
            v366 = v64 + 272 * v65;
            kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)__p.__r_.__value_.__l.__size_, (const kaldi::quasar::TranslationUtil::NbestElement *)&v390);
            v60 = a4;
            __p.__r_.__value_.__r.__words[2] += 272;
            std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__swap_out_circular_buffer((kaldi::quasar::TranslationUtil::NbestElement *)a4, &__p);
            v59 = *(_QWORD *)(a4 + 8);
            std::__split_buffer<kaldi::quasar::TranslationUtil::NbestElement>::~__split_buffer((uint64_t)&__p);
          }
          else
          {
            kaldi::quasar::TranslationUtil::NbestElement::NbestElement(*(kaldi::quasar::TranslationUtil::NbestElement **)(a4 + 8), (const kaldi::quasar::TranslationUtil::NbestElement *)&v390);
            v59 = v58 + 272;
            v60 = a4;
            *(_QWORD *)(a4 + 8) = v59;
          }
          *(_QWORD *)(v60 + 8) = v59;
          kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v390);
          v390.__r_.__value_.__r.__words[0] = (std::string::size_type)&v387;
          std::vector<kaldi::quasar::TranslationUtil::PathElement>::__destroy_vector::operator()[abi:ne180100]((void ***)&v390);
          v390.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v390);
          v34 = v339 + 5;
        }
        while (&v339[5] != v333);
      }
    }
    v390.__r_.__value_.__r.__words[0] = (std::string::size_type)&v351;
    std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v390);
    v4 = v338;
    a2 = v329;
  }
  v66 = *(_QWORD *)(v4 + 136);
  if (v66 && *(_BYTE *)(v66 + 4443) && *(_BYTE *)(v66 + 4444))
    v330[840] = 1;
  v67 = *(_DWORD *)(v4 + 5772);
  if (*(_QWORD *)(a4 + 8) == *(_QWORD *)a4)
  {
    if (v67 == 3)
      goto LABEL_171;
LABEL_139:
    if (*v330)
    {
      memset(&__p, 0, sizeof(__p));
      memset(&v351, 0, sizeof(v351));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v351, v344, v345, 0xAAAAAAAAAAAAAAABLL * (((char *)v345 - (char *)v344) >> 3));
      v68 = kaldi::quasar::TorchEncoderDecoder::InputSymbols(*(kaldi::quasar::TorchEncoderDecoder **)(v4 + 136));
      v69 = kaldi::quasar::TorchEncoderDecoder::UnkSourceId(*(kaldi::quasar::TorchEncoderDecoder **)(v4 + 136));
      if (v351.__r_.__value_.__l.__size_ != v351.__r_.__value_.__r.__words[0])
      {
        v70 = v69;
        v71 = 0;
        do
        {
          v72 = kaldi::quasar::TorchEncoderDecoder::Reverse(*(kaldi::quasar::TorchEncoderDecoder **)(v338 + 136));
          LODWORD(v73) = v71;
          if (v72)
            v73 = ~v71
                - 0x5555555555555555
                * ((uint64_t)(v351.__r_.__value_.__l.__size_ - v351.__r_.__value_.__r.__words[0]) >> 3);
          v74 = (*(uint64_t (**)(uint64_t, std::string::size_type))(*(_QWORD *)v68 + 96))(v68, v351.__r_.__value_.__r.__words[0] + 24 * (int)v73);
          if (v74 == -1 && v70 == -1)
          {
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v390, "Symbolize", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 483);
            v311 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v390, (uint64_t)"Couldn't find symbol ", 21);
            v312 = v351.__r_.__value_.__r.__words[0] + 24 * v71;
            v313 = *(char *)(v312 + 23);
            if (v313 >= 0)
              v314 = v351.__r_.__value_.__r.__words[0] + 24 * v71;
            else
              v314 = *(_QWORD *)v312;
            if (v313 >= 0)
              v315 = *(unsigned __int8 *)(v312 + 23);
            else
              v315 = *(_QWORD *)(v312 + 8);
            v316 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v311, v314, v315);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v316, (uint64_t)" or <unk> UNK symbol", 20);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v390);
          }
          if (v74 == -1)
            v76 = v70;
          else
            v76 = v74;
          v77 = v76 - 1;
          v78 = __p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
          {
            v80 = (void *)__p.__r_.__value_.__r.__words[0];
            v81 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
            v82 = v81 + 1;
            if ((unint64_t)(v81 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v83 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
            if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v82)
              v82 = v83 >> 1;
            if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFFCLL)
              v84 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v84 = v82;
            if (v84)
            {
              v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v84);
              v78 = __p.__r_.__value_.__l.__size_;
              v80 = (void *)__p.__r_.__value_.__r.__words[0];
            }
            else
            {
              v85 = 0;
            }
            v86 = &v85[4 * v81];
            *(_DWORD *)v86 = v77;
            v79 = (std::string::size_type)(v86 + 4);
            while ((void *)v78 != v80)
            {
              v87 = *(_DWORD *)(v78 - 4);
              v78 -= 4;
              *((_DWORD *)v86 - 1) = v87;
              v86 -= 4;
            }
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v86;
            __p.__r_.__value_.__l.__size_ = v79;
            __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v85[4 * v84];
            if (v80)
              operator delete(v80);
          }
          else
          {
            *(_DWORD *)__p.__r_.__value_.__l.__size_ = v77;
            v79 = v78 + 4;
          }
          __p.__r_.__value_.__l.__size_ = v79;
          ++v71;
        }
        while (v71 != 0xAAAAAAAAAAAAAAABLL
                     * ((uint64_t)(v351.__r_.__value_.__l.__size_ - v351.__r_.__value_.__r.__words[0]) >> 3));
      }
      v390.__r_.__value_.__r.__words[0] = (std::string::size_type)&v351;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v390);
      v4 = v338;
      kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::DecodeSymbolized<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(v338, (uint64_t *)&__p, a3, (unint64_t *)a4, (uint64_t *)&v344);
      a2 = v329;
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v66 = *(_QWORD *)(v338 + 136);
    }
    goto LABEL_171;
  }
  if (v67 == 2)
    goto LABEL_139;
LABEL_171:
  if (v66)
  {
    v88 = (_BYTE *)(v66 + 4443);
    if (*v88)
    {
      if (v88[1])
      {
        v89 = *(std::string **)a4;
        v90 = *(std::string **)(a4 + 8);
        if (*(std::string **)a4 != v90)
        {
          do
          {
            v92 = v89->__r_.__value_.__r.__words[0];
            v91 = v89->__r_.__value_.__l.__size_;
            if (v91 != v89->__r_.__value_.__r.__words[0])
            {
              v93 = 0;
              v94 = -152;
              do
              {
                if (v93)
                {
                  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v92 + v94), *(char **)(v92 + v94 + 240), *(_QWORD *)(v92 + v94 + 248), (uint64_t)(*(_QWORD *)(v92 + v94 + 248) - *(_QWORD *)(v92 + v94 + 240)) >> 2);
                  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v89->__r_.__value_.__r.__words[0] + v94 + 24), *(char **)(v89->__r_.__value_.__r.__words[0] + v94 + 264), *(_QWORD *)(v89->__r_.__value_.__r.__words[0] + v94 + 272), (uint64_t)(*(_QWORD *)(v89->__r_.__value_.__r.__words[0] + v94 + 272)- *(_QWORD *)(v89->__r_.__value_.__r.__words[0] + v94 + 264)) >> 2);
                  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v89->__r_.__value_.__r.__words[0] + v94 + 48), *(char **)(v89->__r_.__value_.__r.__words[0] + v94 + 288), *(_QWORD *)(v89->__r_.__value_.__r.__words[0] + v94 + 296), (uint64_t)(*(_QWORD *)(v89->__r_.__value_.__r.__words[0] + v94 + 296)- *(_QWORD *)(v89->__r_.__value_.__r.__words[0] + v94 + 288)) >> 2);
                  v92 = v89->__r_.__value_.__r.__words[0];
                  v91 = v89->__r_.__value_.__l.__size_;
                }
                ++v93;
                v94 += 240;
              }
              while (v93 < 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v91 - v92) >> 4));
              a2 = v329;
              if (v92 != v91 && *(_DWORD *)(v91 - 216) == *(_DWORD *)(v4 + 5732))
              {
                kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)(v91 - 240));
                v89->__r_.__value_.__l.__size_ = v95;
              }
            }
            v89 = (std::string *)((char *)v89 + 272);
          }
          while (v89 != v90);
        }
      }
      kaldi::quasar::TranslationUtil::ComputeBackwardAlignments(a4);
      kaldi::quasar::TranslationUtil::MergeAlignments(a4);
    }
  }
  v96 = *(_QWORD ***)(a3 + 200);
  if (v96 && *(_DWORD *)(a3 + 184) == 3)
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Rescore<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(v4, (const kaldi::quasar::TranslationUtil::NbestElement **)a4, v96, *(float *)(a3 + 180), *(float *)(a3 + 220), *(float *)(a3 + 224));
  if (*(_DWORD *)(v4 + 5800) == 1)
  {
    p_size = *(std::string::size_type **)a4;
    v324 = *(std::string **)(a4 + 8);
    if (*(std::string **)a4 != v324)
    {
      v98 = v338 + 152;
      v327 = *MEMORY[0x1E0DE4F50];
      v325 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      v326 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      v323 = MEMORY[0x1E0DE4FB8] + 16;
      do
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v390);
        memset(&__str, 0, sizeof(__str));
        v375 = 0u;
        v376 = 0u;
        v377 = 0u;
        v378 = 0u;
        v379 = 0u;
        v380 = 0u;
        v381 = 0u;
        v382 = 0u;
        v383 = 0u;
        v384 = 0u;
        __dst = 0u;
        memset(v386, 0, sizeof(v386));
        memset(&v398, 0, sizeof(v398));
        v99 = (std::string *)p_size;
        v100 = *p_size;
        v334 = v99;
        v101 = v99->__r_.__value_.__l.__size_;
        if (v100 != v101)
        {
          v102 = 0;
          do
          {
            *(float32x2_t *)&v378 = vadd_f32(*(float32x2_t *)(v100 + 80), *(float32x2_t *)&v378);
            std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>((std::vector<int> *)((char *)&v378 + 8), (int *)v379, *(char **)(v100 + 88), *(char **)(v100 + 96), (uint64_t)(*(_QWORD *)(v100 + 96) - *(_QWORD *)(v100 + 88)) >> 2);
            std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)&v384 + 8, __dst, *(char **)(v100 + 184), *(char **)(v100 + 192), (uint64_t)(*(_QWORD *)(v100 + 192) - *(_QWORD *)(v100 + 184)) >> 2);
            v103 = *(char *)(v100 + 23);
            if (v103 >= 0)
              v104 = v100;
            else
              v104 = *(_QWORD *)v100;
            if (v103 >= 0)
              v105 = *(unsigned __int8 *)(v100 + 23);
            else
              v105 = *(_QWORD *)(v100 + 8);
            v106 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v390.__r_.__value_.__r.__words[2], v104, v105);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, (uint64_t)" ", 1);
            v107 = (__int128 *)*((_QWORD *)&v375 + 1);
            if (*((_QWORD *)&v375 + 1) >= (unint64_t)v376)
            {
              v109 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v375, (__int128 *)v100);
            }
            else
            {
              if (*(char *)(v100 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(*((std::string **)&v375 + 1), *(const std::string::value_type **)v100, *(_QWORD *)(v100 + 8));
              }
              else
              {
                v108 = *(_OWORD *)v100;
                *(_QWORD *)(*((_QWORD *)&v375 + 1) + 16) = *(_QWORD *)(v100 + 16);
                *v107 = v108;
              }
              v109 = (uint64_t)v107 + 24;
            }
            *((_QWORD *)&v375 + 1) = v109;
            v110 = (char *)*((_QWORD *)&v383 + 1);
            if (*((_QWORD *)&v383 + 1) >= (unint64_t)v384)
            {
              v112 = (char *)v383;
              v113 = (uint64_t)(*((_QWORD *)&v383 + 1) - v383) >> 2;
              v114 = v113 + 1;
              if ((unint64_t)(v113 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v115 = v384 - v383;
              if ((uint64_t)(v384 - v383) >> 1 > v114)
                v114 = v115 >> 1;
              if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL)
                v116 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v116 = v114;
              if (v116)
              {
                v117 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v384, v116);
                v110 = (char *)*((_QWORD *)&v383 + 1);
                v112 = (char *)v383;
              }
              else
              {
                v117 = 0;
              }
              v118 = &v117[4 * v113];
              *(_DWORD *)v118 = v102;
              v111 = v118 + 4;
              while (v110 != v112)
              {
                v119 = *((_DWORD *)v110 - 1);
                v110 -= 4;
                *((_DWORD *)v118 - 1) = v119;
                v118 -= 4;
              }
              *(_QWORD *)&v383 = v118;
              *((_QWORD *)&v383 + 1) = v111;
              *(_QWORD *)&v384 = &v117[4 * v116];
              if (v112)
                operator delete(v112);
            }
            else
            {
              **((_DWORD **)&v383 + 1) = v102;
              v111 = v110 + 4;
            }
            *((_QWORD *)&v383 + 1) = v111;
            if (kaldi::quasar::BPE::IsIntraWord(v98, (uint64_t **)v100))
            {
              kaldi::quasar::BPE::StripSeparator(v98, (const std::string *)v100, &__p);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v120 = &__p;
              else
                v120 = (std::string *)__p.__r_.__value_.__r.__words[0];
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v121 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              else
                v121 = __p.__r_.__value_.__l.__size_;
              std::string::append(&__str, (const std::string::value_type *)v120, v121);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
            else
            {
              v122 = *(char *)(v100 + 23);
              if (v122 >= 0)
                v123 = (const std::string::value_type *)v100;
              else
                v123 = *(const std::string::value_type **)v100;
              if (v122 >= 0)
                v124 = *(unsigned __int8 *)(v100 + 23);
              else
                v124 = *(_QWORD *)(v100 + 8);
              std::string::append(&__str, v123, v124);
              v125 = v398.__r_.__value_.__l.__size_;
              if (v398.__r_.__value_.__l.__size_ >= v398.__r_.__value_.__r.__words[2])
              {
                v127 = 0xEEEEEEEEEEEEEEEFLL
                     * ((uint64_t)(v398.__r_.__value_.__l.__size_ - v398.__r_.__value_.__r.__words[0]) >> 4);
                v128 = v127 + 1;
                if (v127 + 1 > 0x111111111111111)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                if (0xDDDDDDDDDDDDDDDELL
                   * ((uint64_t)(v398.__r_.__value_.__r.__words[2] - v398.__r_.__value_.__r.__words[0]) >> 4) > v128)
                  v128 = 0xDDDDDDDDDDDDDDDELL
                       * ((uint64_t)(v398.__r_.__value_.__r.__words[2] - v398.__r_.__value_.__r.__words[0]) >> 4);
                if (0xEEEEEEEEEEEEEEEFLL
                   * ((uint64_t)(v398.__r_.__value_.__r.__words[2] - v398.__r_.__value_.__r.__words[0]) >> 4) >= 0x88888888888888)
                  v129 = 0x111111111111111;
                else
                  v129 = v128;
                *(_QWORD *)&v367 = (char *)&v398.__r_.__value_.__l + 16;
                if (v129)
                  v129 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::PathElement>>(v129);
                else
                  v130 = 0;
                __p.__r_.__value_.__r.__words[0] = v129;
                __p.__r_.__value_.__l.__size_ = v129 + 240 * v127;
                __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
                v366 = v129 + 240 * v130;
                kaldi::quasar::TranslationUtil::PathElement::PathElement((std::string *)__p.__r_.__value_.__l.__size_, (const kaldi::quasar::TranslationUtil::PathElement *)&__str);
                __p.__r_.__value_.__r.__words[2] += 240;
                std::vector<kaldi::quasar::TranslationUtil::PathElement>::__swap_out_circular_buffer(&v398, &__p);
                v126 = v398.__r_.__value_.__l.__size_;
                std::__split_buffer<kaldi::quasar::TranslationUtil::PathElement>::~__split_buffer((uint64_t)&__p);
              }
              else
              {
                kaldi::quasar::TranslationUtil::PathElement::PathElement((std::string *)v398.__r_.__value_.__l.__size_, (const kaldi::quasar::TranslationUtil::PathElement *)&__str);
                v126 = v125 + 240;
              }
              v398.__r_.__value_.__l.__size_ = v126;
              memset(&__p, 0, sizeof(__p));
              v367 = 0u;
              v368 = 0u;
              v369 = 0u;
              v370 = 0u;
              v371 = 0u;
              v372 = 0u;
              memset(v373, 0, 108);
              kaldi::quasar::TranslationUtil::PathElement::operator=((uint64_t)&__str, (__int128 *)&__p);
              kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)&__p);
            }
            ++v102;
            v100 += 240;
          }
          while (v100 != v101);
          v131 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v131 = __str.__r_.__value_.__l.__size_;
          if (v131)
          {
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
            v132 = v334->__r_.__value_.__r.__words[0];
            v133 = v334->__r_.__value_.__l.__size_;
            while (v132 != v133)
            {
              v134 = *(char *)(v132 + 23);
              if (v134 >= 0)
                v135 = v132;
              else
                v135 = *(_QWORD *)v132;
              if (v134 >= 0)
                v136 = *(unsigned __int8 *)(v132 + 23);
              else
                v136 = *(_QWORD *)(v132 + 8);
              v137 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], v135, v136);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)" ", 1);
              v132 += 240;
            }
            if (*(_BYTE *)(v338 + 132))
            {
              memset(&v351, 0, sizeof(v351));
              v353 = 0u;
              v354 = 0u;
              v355 = 0u;
              v356 = 0u;
              v357 = 0u;
              v358 = 0u;
              v359 = 0u;
              v360 = 0u;
              v361 = 0u;
              v362 = 0u;
              v363 = 0u;
              memset(v364, 0, sizeof(v364));
              v138 = v398.__r_.__value_.__l.__size_;
              if (v398.__r_.__value_.__l.__size_ >= v398.__r_.__value_.__r.__words[2])
              {
                v142 = 0xEEEEEEEEEEEEEEEFLL
                     * ((uint64_t)(v398.__r_.__value_.__l.__size_ - v398.__r_.__value_.__r.__words[0]) >> 4);
                v143 = v142 + 1;
                if (v142 + 1 > 0x111111111111111)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                if (0xDDDDDDDDDDDDDDDELL
                   * ((uint64_t)(v398.__r_.__value_.__r.__words[2] - v398.__r_.__value_.__r.__words[0]) >> 4) > v143)
                  v143 = 0xDDDDDDDDDDDDDDDELL
                       * ((uint64_t)(v398.__r_.__value_.__r.__words[2] - v398.__r_.__value_.__r.__words[0]) >> 4);
                if (0xEEEEEEEEEEEEEEEFLL
                   * ((uint64_t)(v398.__r_.__value_.__r.__words[2] - v398.__r_.__value_.__r.__words[0]) >> 4) >= 0x88888888888888)
                  v144 = 0x111111111111111;
                else
                  v144 = v143;
                v389 = &v398.__r_.__value_.__s.__data_[16];
                if (v144)
                  v144 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::PathElement>>(v144);
                else
                  v145 = 0;
                v387.__r_.__value_.__r.__words[0] = v144;
                v387.__r_.__value_.__l.__size_ = v144 + 240 * v142;
                v387.__r_.__value_.__r.__words[2] = v387.__r_.__value_.__l.__size_;
                v388 = v144 + 240 * v145;
                std::allocator<kaldi::quasar::TranslationUtil::PathElement>::construct[abi:ne180100]<kaldi::quasar::TranslationUtil::PathElement,kaldi::quasar::TranslationUtil::PathElement>(v387.__r_.__value_.__l.__size_, (__int128 *)&v351);
                v387.__r_.__value_.__r.__words[2] += 240;
                std::vector<kaldi::quasar::TranslationUtil::PathElement>::__swap_out_circular_buffer(&v398, &v387);
                v139 = v398.__r_.__value_.__l.__size_;
                std::__split_buffer<kaldi::quasar::TranslationUtil::PathElement>::~__split_buffer((uint64_t)&v387);
              }
              else
              {
                std::allocator<kaldi::quasar::TranslationUtil::PathElement>::construct[abi:ne180100]<kaldi::quasar::TranslationUtil::PathElement,kaldi::quasar::TranslationUtil::PathElement>(v398.__r_.__value_.__l.__size_, (__int128 *)&v351);
                v139 = v138 + 240;
              }
              v398.__r_.__value_.__l.__size_ = v139;
              kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)&v351);
            }
            else
            {
              v140 = (char *)*((_QWORD *)&v383 + 1);
              if (*((_QWORD *)&v383 + 1) >= (unint64_t)v384)
              {
                v146 = (char *)v383;
                v147 = (uint64_t)(*((_QWORD *)&v383 + 1) - v383) >> 2;
                v148 = v147 + 1;
                if ((unint64_t)(v147 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v149 = v384 - v383;
                if ((uint64_t)(v384 - v383) >> 1 > v148)
                  v148 = v149 >> 1;
                if ((unint64_t)v149 >= 0x7FFFFFFFFFFFFFFCLL)
                  v150 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v150 = v148;
                if (v150)
                {
                  v151 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v384, v150);
                  v140 = (char *)*((_QWORD *)&v383 + 1);
                  v146 = (char *)v383;
                }
                else
                {
                  v151 = 0;
                }
                v152 = &v151[4 * v147];
                *(_DWORD *)v152 = v102;
                v141 = v152 + 4;
                while (v140 != v146)
                {
                  v153 = *((_DWORD *)v140 - 1);
                  v140 -= 4;
                  *((_DWORD *)v152 - 1) = v153;
                  v152 -= 4;
                }
                *(_QWORD *)&v383 = v152;
                *((_QWORD *)&v383 + 1) = v141;
                *(_QWORD *)&v384 = &v151[4 * v150];
                if (v146)
                  operator delete(v146);
              }
              else
              {
                **((_DWORD **)&v383 + 1) = v102;
                v141 = v140 + 4;
              }
              *((_QWORD *)&v383 + 1) = v141;
              v154 = v398.__r_.__value_.__l.__size_;
              if (v398.__r_.__value_.__l.__size_ >= v398.__r_.__value_.__r.__words[2])
              {
                v156 = 0xEEEEEEEEEEEEEEEFLL
                     * ((uint64_t)(v398.__r_.__value_.__l.__size_ - v398.__r_.__value_.__r.__words[0]) >> 4);
                v157 = v156 + 1;
                if (v156 + 1 > 0x111111111111111)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                if (0xDDDDDDDDDDDDDDDELL
                   * ((uint64_t)(v398.__r_.__value_.__r.__words[2] - v398.__r_.__value_.__r.__words[0]) >> 4) > v157)
                  v157 = 0xDDDDDDDDDDDDDDDELL
                       * ((uint64_t)(v398.__r_.__value_.__r.__words[2] - v398.__r_.__value_.__r.__words[0]) >> 4);
                if (0xEEEEEEEEEEEEEEEFLL
                   * ((uint64_t)(v398.__r_.__value_.__r.__words[2] - v398.__r_.__value_.__r.__words[0]) >> 4) >= 0x88888888888888)
                  v158 = 0x111111111111111;
                else
                  v158 = v157;
                *(_QWORD *)&v353 = (char *)&v398.__r_.__value_.__l + 16;
                if (v158)
                  v158 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::PathElement>>(v158);
                else
                  v159 = 0;
                v351.__r_.__value_.__r.__words[0] = v158;
                v351.__r_.__value_.__l.__size_ = v158 + 240 * v156;
                v351.__r_.__value_.__r.__words[2] = v351.__r_.__value_.__l.__size_;
                v352 = v158 + 240 * v159;
                kaldi::quasar::TranslationUtil::PathElement::PathElement((std::string *)v351.__r_.__value_.__l.__size_, (const kaldi::quasar::TranslationUtil::PathElement *)&__str);
                v351.__r_.__value_.__r.__words[2] += 240;
                std::vector<kaldi::quasar::TranslationUtil::PathElement>::__swap_out_circular_buffer(&v398, &v351);
                v155 = v398.__r_.__value_.__l.__size_;
                std::__split_buffer<kaldi::quasar::TranslationUtil::PathElement>::~__split_buffer((uint64_t)&v351);
              }
              else
              {
                kaldi::quasar::TranslationUtil::PathElement::PathElement((std::string *)v398.__r_.__value_.__l.__size_, (const kaldi::quasar::TranslationUtil::PathElement *)&__str);
                v155 = v154 + 240;
              }
              v398.__r_.__value_.__l.__size_ = v155;
            }
            if (kaldi::g_kaldi_verbose_level >= -1)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v351, "JoinBPEUnitsInNbestList", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 1757);
              v160 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v351, (uint64_t)"Error converting BPE to word list ", 34);
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_str = &__str;
              else
                p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v162 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              else
                v162 = __str.__r_.__value_.__l.__size_;
              v163 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160, (uint64_t)p_str, v162);
              v164 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"( ", 2);
              std::stringbuf::str();
              if ((v387.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v165 = &v387;
              else
                v165 = (std::string *)v387.__r_.__value_.__r.__words[0];
              if ((v387.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v166 = HIBYTE(v387.__r_.__value_.__r.__words[2]);
              else
                v166 = v387.__r_.__value_.__l.__size_;
              v167 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)v165, v166);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v167, (uint64_t)")", 1);
              if (SHIBYTE(v387.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v387.__r_.__value_.__l.__data_);
              kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v351);
            }
            __p.__r_.__value_.__r.__words[0] = v327;
            *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v327 - 24)) = v326;
            __p.__r_.__value_.__r.__words[2] = v325;
            v366 = MEMORY[0x1E0DE4FB8] + 16;
            if (SHIBYTE(v371) < 0)
              operator delete(*((void **)&v370 + 1));
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x1DF0ECF6C](v373);
          }
        }
        if (v334 != &v398)
          std::vector<kaldi::quasar::TranslationUtil::PathElement>::__assign_with_size[abi:ne180100]<kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*>((uint64_t *)v334, (uint64_t)v398.__r_.__value_.__l.__data_, v398.__r_.__value_.__l.__size_, 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v398.__r_.__value_.__l.__size_ - v398.__r_.__value_.__r.__words[0]) >> 4));
        v334[3].__r_.__value_.__s.__data_[16] = 1;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v398;
        std::vector<kaldi::quasar::TranslationUtil::PathElement>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)&__str);
        v390.__r_.__value_.__r.__words[0] = v327;
        *(std::string::size_type *)((char *)v390.__r_.__value_.__r.__words + *(_QWORD *)(v327 - 24)) = v326;
        v390.__r_.__value_.__r.__words[2] = v325;
        v391 = v323;
        a2 = v329;
        if (SHIBYTE(v396[1]) < 0)
          operator delete(*((void **)&v395 + 1));
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1DF0ECF6C](v397);
        p_size = &v334[11].__r_.__value_.__l.__size_;
      }
      while (&v334[11].__r_.__value_.__r.__words[1] != (std::string::size_type *)v324);
    }
  }
  else if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v390, "JoinBPEUnitsInNbestList", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 1763);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v390, (uint64_t)"Not applying BPE to target", 26);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v390);
  }
  v168 = *(_QWORD ***)(a3 + 200);
  v169 = v338;
  if (v168 && *(_DWORD *)(a3 + 184) == 4)
  {
    if (kaldi::g_kaldi_verbose_level < 0)
    {
      v170 = (float *)a3;
    }
    else
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v390, "PostProcessNbestList", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 1797);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v390, (uint64_t)"Word level LM re-scoring", 24);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v390);
      v170 = (float *)a3;
      v168 = *(_QWORD ***)(a3 + 200);
    }
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Rescore<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(v338, (const kaldi::quasar::TranslationUtil::NbestElement **)a4, v168, v170[45], v170[55], v170[56]);
  }
  v171 = *(std::string **)a4;
  v172 = *(std::string **)(a4 + 8);
  while (v171 != v172)
  {
    std::string::operator=(v171 + 5, (const std::string *)a2);
    std::string::operator=(v171 + 6, (const std::string *)a2);
    v171 = (std::string *)((char *)v171 + 272);
  }
  kaldi::quasar::NNMTTransliterator::Transliterate<std::vector<kaldi::quasar::TranslationUtil::NbestElement>>(v338 + 408, (uint64_t *)a4, a3 + 112);
  if (kaldi::g_kaldi_verbose_level > 0)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v390, "PostProcessNbestList", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 1807, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v390, (uint64_t)"Applying confidence scores to n-best list", 41);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v390);
  }
  v173 = *(float *)(a3 + 176);
  std::string::basic_string[abi:ne180100]<0>(&v390, &byte_1DEBD87CE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)&v351, (double *)(v338 + 5376), v338 + 6248, (__int128 *)&v390);
  if (SHIBYTE(v390.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v390.__r_.__value_.__l.__data_);
  v175 = *(std::string **)a4;
  v176 = *(std::string **)(a4 + 8);
  if (*(std::string **)a4 != v176)
  {
    v335 = (int)v173;
    v177 = v338 + 6184;
    v337 = v338 + 6184;
    v328 = *(std::string **)(a4 + 8);
    do
    {
      if ((LODWORD(v175[2].__r_.__value_.__r.__words[1]) - 5) > 1)
      {
        if (v330[809])
        {
          kaldi::Matrix<float>::Matrix((uint64_t)&__str);
          if (*(_QWORD *)(v169 + 5688) == *(_QWORD *)(v169 + 5680) || !v330[811])
          {
            kaldi::quasar::TorchEncoderDecoder::Align(*(_QWORD *)(v169 + 136), (uint64_t *)&v175[7], (uint64_t)&v175[8], v177, (uint64_t)&__str);
            if (kaldi::g_kaldi_verbose_level >= 1)
            {
              kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v390, "AssignConfidencesFromConfidenceModel", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 2177, 1);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v390, (uint64_t)"Alignment cost ", 15);
              std::ostream::operator<<();
              kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v390);
            }
          }
          else
          {
            v402 = 0;
            v403 = 0;
            v404 = 0;
            v399 = 0;
            v400 = 0;
            v401 = 0;
            v191 = (_QWORD *)v175->__r_.__value_.__r.__words[0];
            v192 = (_QWORD *)v175->__r_.__value_.__l.__size_;
            if (v175->__r_.__value_.__l.__data_ == (std::string::pointer)v192)
            {
              v220 = 0;
              v219 = 0;
            }
            else
            {
              do
              {
                v193 = (int *)v191[11];
                v194 = (int *)v191[12];
                if (v193 != v194)
                {
                  v195 = v403;
                  do
                  {
                    v196 = *v193;
                    if (v195 >= v404)
                    {
                      v198 = v402;
                      v199 = (v195 - v402) >> 2;
                      v200 = v199 + 1;
                      if ((unint64_t)(v199 + 1) >> 62)
                        std::vector<int>::__throw_length_error[abi:ne180100]();
                      v201 = v404 - v402;
                      if ((v404 - v402) >> 1 > v200)
                        v200 = v201 >> 1;
                      if ((unint64_t)v201 >= 0x7FFFFFFFFFFFFFFCLL)
                        v202 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v202 = v200;
                      if (v202)
                      {
                        v203 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v404, v202);
                        v198 = v402;
                        v195 = v403;
                      }
                      else
                      {
                        v203 = 0;
                      }
                      v204 = &v203[4 * v199];
                      *(_DWORD *)v204 = v196;
                      v197 = v204 + 4;
                      while (v195 != v198)
                      {
                        v205 = *((_DWORD *)v195 - 1);
                        v195 -= 4;
                        *((_DWORD *)v204 - 1) = v205;
                        v204 -= 4;
                      }
                      v402 = v204;
                      v403 = v197;
                      v404 = &v203[4 * v202];
                      if (v198)
                        operator delete(v198);
                    }
                    else
                    {
                      *(_DWORD *)v195 = v196;
                      v197 = v195 + 4;
                    }
                    v403 = v197;
                    ++v193;
                    v195 = v197;
                  }
                  while (v193 != v194);
                }
                v206 = (int *)v191[23];
                v207 = (int *)v191[24];
                v169 = v338;
                if (v206 != v207)
                {
                  v208 = v400;
                  do
                  {
                    v209 = *v206;
                    if (v208 >= v401)
                    {
                      v211 = v399;
                      v212 = (v208 - v399) >> 2;
                      v213 = v212 + 1;
                      if ((unint64_t)(v212 + 1) >> 62)
                        std::vector<int>::__throw_length_error[abi:ne180100]();
                      v214 = v401 - v399;
                      if ((v401 - v399) >> 1 > v213)
                        v213 = v214 >> 1;
                      if ((unint64_t)v214 >= 0x7FFFFFFFFFFFFFFCLL)
                        v215 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v215 = v213;
                      if (v215)
                      {
                        v216 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v401, v215);
                        v211 = v399;
                        v208 = v400;
                      }
                      else
                      {
                        v216 = 0;
                      }
                      v217 = &v216[4 * v212];
                      *(_DWORD *)v217 = v209;
                      v210 = v217 + 4;
                      while (v208 != v211)
                      {
                        v218 = *((_DWORD *)v208 - 1);
                        v208 -= 4;
                        *((_DWORD *)v217 - 1) = v218;
                        v217 -= 4;
                      }
                      v399 = v217;
                      v400 = v210;
                      v401 = &v216[4 * v215];
                      if (v211)
                        operator delete(v211);
                    }
                    else
                    {
                      *(_DWORD *)v208 = v209;
                      v210 = v208 + 4;
                    }
                    v400 = v210;
                    ++v206;
                    v208 = v210;
                  }
                  while (v206 != v207);
                }
                v191 += 30;
              }
              while (v191 != v192);
              v220 = v402;
              v219 = v403;
            }
            v244 = kaldi::MatrixBase<float>::NumCols(v337);
            kaldi::Matrix<float>::Resize((uint64_t)&__str, (unint64_t)(v219 - v220) >> 2, (v244 + 1), 0, 0);
            if (v403 == v402)
            {
              v252 = 0;
            }
            else
            {
              v245 = 0;
              v246 = LODWORD(__str.__r_.__value_.__r.__words[1]);
              do
              {
                kaldi::SubMatrix<float>::SubMatrix(&v390, &__str, v245, 1, 0, v246);
                kaldi::CuMatrixBase<float>::CopyToMat<float>(*(_QWORD *)(v169 + 5680) + 48 * *(int *)&v402[4 * v245], (unsigned int *)&v390, 111, v247, v248);
                kaldi::CuMatrixBase<float>::~CuMatrixBase(&v390);
                v249 = *(_DWORD *)&v399[4 * v245];
                v250 = kaldi::MatrixBase<float>::NumCols((uint64_t)&__str);
                if (v245 >= HIDWORD(__str.__r_.__value_.__r.__words[1])
                  || (v246 = LODWORD(__str.__r_.__value_.__r.__words[1]),
                      LODWORD(__str.__r_.__value_.__r.__words[1]) <= v250 - 1))
                {
                  kaldi::KaldiAssertFailure_((kaldi *)"operator()", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v251);
                }
                *(_DWORD *)(__str.__r_.__value_.__r.__words[0]
                          + 4 * LODWORD(__str.__r_.__value_.__r.__words[2]) * (int)v245++
                          + 4 * (v250 - 1)) = v249;
                v252 = (v403 - v402) >> 2;
              }
              while (v252 > v245);
            }
            v253 = kaldi::MatrixBase<float>::NumCols(v337);
            kaldi::Matrix<float>::Matrix((uint64_t)&v390, v252, v253, 0, 0);
            data = v175[8].__r_.__value_.__l.__data_;
            if ((std::string::pointer)v175[8].__r_.__value_.__l.__size_ != data)
            {
              v255 = 0;
              do
              {
                v256 = *(_DWORD *)&data[4 * v255];
                kaldi::SubMatrix<float>::SubMatrix(&__p, &v390, v255, 1, 0, LODWORD(v390.__r_.__value_.__r.__words[1]));
                v257 = (v256 - 1);
                kaldi::SubMatrix<float>::SubMatrix(&v387, v337, v257, 1, 0, *(unsigned int *)(v169 + 6192));
                kaldi::SubMatrix<float>::SubMatrix(&v398, v337, v257, 1, 0, *(unsigned int *)(v169 + 6192));
                kaldi::MatrixBase<float>::CopyFromMat<float>((unsigned int *)&__p, (uint64_t)&v398, 111, v258, v259);
                kaldi::CuMatrixBase<float>::~CuMatrixBase(&v398);
                kaldi::CuMatrixBase<float>::~CuMatrixBase(&v387);
                kaldi::CuMatrixBase<float>::~CuMatrixBase(&__p);
                ++v255;
                data = v175[8].__r_.__value_.__l.__data_;
              }
              while (v255 < (uint64_t)(v175[8].__r_.__value_.__l.__size_ - (_QWORD)data) >> 2);
            }
            v260 = kaldi::MatrixBase<float>::NumCols((uint64_t)&__str);
            kaldi::SubMatrix<float>::SubMatrix(&__p, &__str, 0, HIDWORD(__str.__r_.__value_.__r.__words[1]), 0, (v260 - 1));
            kaldi::MatrixBase<float>::MulElements((uint64_t)&__p, (uint64_t)&v390, v261, v262, v263);
            kaldi::CuMatrixBase<float>::~CuMatrixBase(&__p);
            kaldi::Matrix<float>::~Matrix((uint64_t)&v390);
            if (v399)
            {
              v400 = v399;
              operator delete(v399);
            }
            if (v402)
            {
              v403 = v402;
              operator delete(v402);
            }
          }
          v264 = kaldi::MatrixBase<float>::NumRows((uint64_t)&__str);
          v265 = kaldi::MatrixBase<float>::NumCols((uint64_t)&__str);
          kaldi::CuMatrix<float>::CuMatrix((uint64_t)&v390, v264, v265, 0, 0, 0);
          kaldi::CuMatrixBase<float>::CopyFromMat((uint64_t)&v390, (uint64_t)&__str, 111, v266, v267);
          v268 = kaldi::MatrixBase<float>::NumRows((uint64_t)&__str);
          kaldi::CuMatrix<float>::CuMatrix((uint64_t)&__p, v268, 1, 0, 0, 0);
          kaldi::nnet1::Nnet::Feedforward((uint64_t *)(v338 + 5808), (uint64_t)&v390, (uint64_t)&__p, -1, 0);
          kaldi::Matrix<float>::Resize((uint64_t)&__str, HIDWORD(__p.__r_.__value_.__r.__words[2]), LODWORD(__p.__r_.__value_.__r.__words[2]), 0, 0);
          kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)&__p, (unsigned int *)&__str, 111, v269, v270);
          v271 = 0;
          p_data = (void **)&v175[9].__r_.__value_.__l.__data_;
          while (v271 != kaldi::MatrixBase<float>::NumRows((uint64_t)&__str))
          {
            if (HIDWORD(__str.__r_.__value_.__r.__words[1]) <= v271 || LODWORD(__str.__r_.__value_.__r.__words[1]) <= 1)
              kaldi::KaldiAssertFailure_((kaldi *)"operator()", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v273);
            v275 = __str.__r_.__value_.__r.__words[0] + 4 * (int)(LODWORD(__str.__r_.__value_.__r.__words[2]) * v271);
            v277 = (char *)v175[9].__r_.__value_.__l.__size_;
            v276 = v175[9].__r_.__value_.__r.__words[2];
            if ((unint64_t)v277 >= v276)
            {
              v279 = (char *)*p_data;
              v280 = (v277 - (_BYTE *)*p_data) >> 2;
              v281 = v280 + 1;
              if ((unint64_t)(v280 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v282 = v276 - (_QWORD)v279;
              if (v282 >> 1 > v281)
                v281 = v282 >> 1;
              if ((unint64_t)v282 >= 0x7FFFFFFFFFFFFFFCLL)
                v283 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v283 = v281;
              if (v283)
              {
                v284 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v175[9].__r_.__value_.__r.__words[2], v283);
                v279 = v175[9].__r_.__value_.__l.__data_;
                v277 = (char *)v175[9].__r_.__value_.__l.__size_;
              }
              else
              {
                v284 = 0;
              }
              v285 = &v284[4 * v280];
              *(_DWORD *)v285 = *(_DWORD *)(v275 + 4);
              v278 = v285 + 4;
              while (v277 != v279)
              {
                v286 = *((_DWORD *)v277 - 1);
                v277 -= 4;
                *((_DWORD *)v285 - 1) = v286;
                v285 -= 4;
              }
              v175[9].__r_.__value_.__r.__words[0] = (std::string::size_type)v285;
              v175[9].__r_.__value_.__l.__size_ = (std::string::size_type)v278;
              v175[9].__r_.__value_.__r.__words[2] = (std::string::size_type)&v284[4 * v283];
              if (v279)
                operator delete(v279);
            }
            else
            {
              *(_DWORD *)v277 = *(_DWORD *)(v275 + 4);
              v278 = v277 + 4;
            }
            v175[9].__r_.__value_.__l.__size_ = (std::string::size_type)v278;
            ++v271;
          }
          v288 = (_QWORD *)v175->__r_.__value_.__r.__words[0];
          v287 = (_QWORD *)v175->__r_.__value_.__l.__size_;
          if (v287 == (_QWORD *)v175->__r_.__value_.__l.__data_)
          {
            LODWORD(v302) = 0;
          }
          else
          {
            v289 = 0;
            v290 = (uint64_t)((uint64_t)v287 - v175->__r_.__value_.__r.__words[0]) / 240;
            v291 = v175[3].__r_.__value_.__s.__data_[16];
            if (v290 <= 1)
              v292 = 1;
            else
              v292 = (uint64_t)((uint64_t)v287 - v175->__r_.__value_.__r.__words[0]) / 240;
            do
            {
              if (v291)
              {
                v293 = &v288[30 * v289];
                v294 = (int *)v293[20];
                v295 = (int *)v293[21];
                if (v294 == v295)
                {
                  v296 = 0.0;
                }
                else
                {
                  v296 = 0.0;
                  v297 = v294;
                  do
                  {
                    v298 = *v297++;
                    v296 = v296 + *((float *)*p_data + v298);
                  }
                  while (v297 != v295);
                }
                v299 = v296 / (double)(unint64_t)(v295 - v294);
              }
              else
              {
                v299 = *((float *)*p_data + v289);
              }
              v300 = v299;
              LODWORD(v288[30 * v289++ + 29]) = llround(v300 * 998.0 + 1.0);
            }
            while (v289 != v292);
            LODWORD(v301) = 0;
            do
            {
              v301 = *((int *)v288 + 58) + (uint64_t)(int)v301;
              v288 += 30;
            }
            while (v288 != v287);
            v302 = v301 / v290;
          }
          v175[10].__r_.__value_.__s.__data_[0] = (int)v302 < v335;
          kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
          kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v390);
          kaldi::Matrix<float>::~Matrix((uint64_t)&__str);
        }
        else
        {
          v222 = (float *)v175->__r_.__value_.__r.__words[0];
          v221 = (_QWORD *)v175->__r_.__value_.__l.__size_;
          if (v175->__r_.__value_.__l.__data_ == (std::string::pointer)v221)
          {
            LODWORD(v243) = 0;
            v176 = v328;
          }
          else
          {
            v223 = (void **)&v175[9].__r_.__value_.__l.__data_;
            v224 = &v175[9].__r_.__value_.__r.__words[2];
            v336 = v175->__r_.__value_.__l.__size_;
            do
            {
              if (v175[3].__r_.__value_.__s.__data_[16])
              {
                v225 = (float *)*((_QWORD *)v222 + 23);
                v226 = (float *)*((_QWORD *)v222 + 24);
                if (v225 == v226)
                {
                  LODWORD(v239) = 0;
                }
                else
                {
                  v227 = 0;
                  v228 = (float *)v175[9].__r_.__value_.__l.__size_;
                  do
                  {
                    v229 = expf(-*v225);
                    v230 = v229;
                    if ((unint64_t)v228 >= *v224)
                    {
                      v232 = (float *)*v223;
                      v233 = ((char *)v228 - (_BYTE *)*v223) >> 2;
                      v234 = v233 + 1;
                      if ((unint64_t)(v233 + 1) >> 62)
LABEL_524:
                        std::vector<int>::__throw_length_error[abi:ne180100]();
                      v235 = *v224 - (_QWORD)v232;
                      if (v235 >> 1 > v234)
                        v234 = v235 >> 1;
                      if ((unint64_t)v235 >= 0x7FFFFFFFFFFFFFFCLL)
                        v174 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v174 = v234;
                      if (v174)
                      {
                        v236 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v175[9].__r_.__value_.__r.__words[2], v174);
                        v232 = (float *)v175[9].__r_.__value_.__l.__data_;
                        v228 = (float *)v175[9].__r_.__value_.__l.__size_;
                      }
                      else
                      {
                        v236 = 0;
                      }
                      v237 = (float *)&v236[4 * v233];
                      *v237 = v230;
                      v231 = v237 + 1;
                      while (v228 != v232)
                      {
                        v238 = *((_DWORD *)v228-- - 1);
                        *((_DWORD *)v237-- - 1) = v238;
                      }
                      v175[9].__r_.__value_.__r.__words[0] = (std::string::size_type)v237;
                      v175[9].__r_.__value_.__l.__size_ = (std::string::size_type)v231;
                      v175[9].__r_.__value_.__r.__words[2] = (std::string::size_type)&v236[4 * v174];
                      if (v232)
                        operator delete(v232);
                    }
                    else
                    {
                      *v228 = v229;
                      v231 = v228 + 1;
                    }
                    v227 += llround(v230 * 998.0 + 1.0);
                    v175[9].__r_.__value_.__l.__size_ = (std::string::size_type)v231;
                    ++v225;
                    v228 = v231;
                  }
                  while (v225 != v226);
                  v239 = *((_QWORD *)v222 + 24) - *((_QWORD *)v222 + 23);
                  v169 = v338;
                  if (v239)
                    v239 = v227 / (unint64_t)(v239 >> 2);
                  v221 = (_QWORD *)v336;
                }
              }
              else
              {
                LODWORD(v239) = llround(expf(-v222[21]) * 998.0 + 1.0);
              }
              *((_DWORD *)v222 + 58) = v239;
              v222 += 60;
            }
            while (v222 != (float *)v221);
            v241 = (_QWORD *)v175->__r_.__value_.__r.__words[0];
            v240 = (_QWORD *)v175->__r_.__value_.__l.__size_;
            v176 = v328;
            if (v240 == (_QWORD *)v175->__r_.__value_.__l.__data_)
            {
              LODWORD(v243) = 0;
            }
            else
            {
              LODWORD(v242) = 0;
              do
              {
                v242 = *((int *)v241 + 58) + (uint64_t)(int)v242;
                v241 += 30;
              }
              while (v241 != v240);
              v243 = v242
                   / (0xEEEEEEEEEEEEEEEFLL
                    * ((uint64_t)((uint64_t)v240 - v175->__r_.__value_.__r.__words[0]) >> 4));
            }
          }
          v175[10].__r_.__value_.__s.__data_[0] = (int)v243 < v335;
        }
      }
      else
      {
        v175[10].__r_.__value_.__s.__data_[0] = 0;
        v178 = (_QWORD *)v175->__r_.__value_.__r.__words[0];
        v179 = (_QWORD *)v175->__r_.__value_.__l.__size_;
        if (v175->__r_.__value_.__l.__data_ != (std::string::pointer)v179)
        {
          v180 = (void **)&v175[9].__r_.__value_.__l.__data_;
          do
          {
            if (v175[3].__r_.__value_.__s.__data_[16])
            {
              v182 = (char *)v175[9].__r_.__value_.__l.__size_;
              v181 = v175[9].__r_.__value_.__r.__words[2];
              if ((unint64_t)v182 >= v181)
              {
                v184 = (char *)*v180;
                v185 = (v182 - (_BYTE *)*v180) >> 2;
                v186 = v185 + 1;
                if ((unint64_t)(v185 + 1) >> 62)
                  goto LABEL_524;
                v187 = v181 - (_QWORD)v184;
                if (v187 >> 1 > v186)
                  v186 = v187 >> 1;
                if ((unint64_t)v187 >= 0x7FFFFFFFFFFFFFFCLL)
                  v174 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v174 = v186;
                if (v174)
                {
                  v188 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v175[9].__r_.__value_.__r.__words[2], v174);
                  v184 = v175[9].__r_.__value_.__l.__data_;
                  v182 = (char *)v175[9].__r_.__value_.__l.__size_;
                }
                else
                {
                  v188 = 0;
                }
                v189 = &v188[4 * v185];
                *(_DWORD *)v189 = 1065353216;
                v183 = v189 + 4;
                while (v182 != v184)
                {
                  v190 = *((_DWORD *)v182 - 1);
                  v182 -= 4;
                  *((_DWORD *)v189 - 1) = v190;
                  v189 -= 4;
                }
                v175[9].__r_.__value_.__r.__words[0] = (std::string::size_type)v189;
                v175[9].__r_.__value_.__l.__size_ = (std::string::size_type)v183;
                v175[9].__r_.__value_.__r.__words[2] = (std::string::size_type)&v188[4 * v174];
                if (v184)
                  operator delete(v184);
              }
              else
              {
                *(_DWORD *)v182 = 1065353216;
                v183 = v182 + 4;
              }
              v175[9].__r_.__value_.__l.__size_ = (std::string::size_type)v183;
            }
            *((_DWORD *)v178 + 58) = 1000;
            v178 += 30;
          }
          while (v178 != v179);
        }
      }
      v175 = (std::string *)((char *)v175 + 272);
      v177 = v338 + 6184;
    }
    while (v175 != v176);
  }
  if (v330[810])
  {
    v303 = *(const kaldi::quasar::TranslationUtil::NbestElement **)a4;
    v304 = *(const kaldi::quasar::TranslationUtil::NbestElement **)(a4 + 8);
    v305 = (uint64_t)v304 - *(_QWORD *)a4;
    v306 = 0xF0F0F0F0F0F0F0F1 * (v305 >> 4);
    if (v305 < 1)
    {
      v307 = 0;
      v309 = 0;
    }
    else
    {
      v307 = (kaldi::quasar::TranslationUtil::NbestElement *)std::get_temporary_buffer[abi:ne180100]<kaldi::quasar::TranslationUtil::NbestElement>(0xF0F0F0F0F0F0F0F1 * (v305 >> 4));
      v309 = v308;
    }
    std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(v303, v304, (uint64_t)&v390, v306, v307, v309);
    if (v307)
      operator delete(v307);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&v351, (clockid_t)v174);
  v310 = *(int *)(a3 + 172);
  if ((_DWORD)v310 && 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 4) > v310)
    std::vector<kaldi::quasar::TranslationUtil::NbestElement>::resize((kaldi::quasar::TranslationUtil::NbestElement *)a4, v310);
  *(_DWORD *)(v169 + 5776) = v322;
  *(_DWORD *)(v169 + 5752) = v7;
  *(_DWORD *)(v169 + 5740) = v321;
  *(_DWORD *)(v169 + 5744) = v8;
  *(_DWORD *)(v169 + 5748) = v320;
  v390.__r_.__value_.__r.__words[0] = (std::string::size_type)&v340;
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v390);
LABEL_519:
  v390.__r_.__value_.__r.__words[0] = (std::string::size_type)&v344;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v390);
  if (SHIBYTE(v347.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v347.__r_.__value_.__l.__data_);
  if (SHIBYTE(v350) < 0)
    operator delete(v348);
}

void sub_1DEACD1C8()
{
  if (SLOBYTE(STACK[0x45F]) < 0)
    operator delete((void *)STACK[0x448]);
  JUMPOUT(0x1DEACD230);
}

void sub_1DEACD1E8()
{
  std::__split_buffer<kaldi::quasar::TranslationUtil::NbestElement>::~__split_buffer((uint64_t)&STACK[0x240]);
  JUMPOUT(0x1DEACD254);
}

void sub_1DEACD1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53)
{
  uint64_t v53;

  STACK[0x470] = (unint64_t)&STACK[0x448];
  std::vector<kaldi::quasar::TranslationUtil::PathElement>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x470]);
  STACK[0x470] = (unint64_t)&STACK[0x358];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x470]);
  STACK[0x470] = (unint64_t)&a53;
  std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x470]);
  *(_QWORD *)(v53 - 216) = &a32;
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 216));
  *(_QWORD *)(v53 - 216) = &a38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 216));
  if (a46 < 0)
    operator delete(a41);
  if (a52 < 0)
    operator delete(a47);
  _Unwind_Resume(a1);
}

void sub_1DEACD200()
{
  JUMPOUT(0x1DEACD394);
}

void sub_1DEACD20C()
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&STACK[0x470]);
  kaldi::Matrix<float>::~Matrix((uint64_t)&STACK[0x358]);
  JUMPOUT(0x1DEACD438);
}

void sub_1DEACD264()
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&STACK[0x470]);
  kaldi::Matrix<float>::~Matrix((uint64_t)&STACK[0x358]);
  JUMPOUT(0x1DEACD438);
}

void sub_1DEACD26C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  STACK[0x358] = (unint64_t)&a47;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x358]);
  JUMPOUT(0x1DEACD280);
}

void sub_1DEACD298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53)
{
  uint64_t v53;
  clockid_t v55;

  kaldi::Matrix<float>::~Matrix((uint64_t)&STACK[0x358]);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a53, v55);
  *(_QWORD *)(v53 - 216) = &a32;
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 216));
  *(_QWORD *)(v53 - 216) = &a38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 216));
  if (a46 < 0)
    operator delete(__p);
  if (a52 < 0)
    operator delete(a47);
  _Unwind_Resume(a1);
}

void sub_1DEACD2A0()
{
  unint64_t v0;
  uint64_t v1;

  STACK[0x380] = v0;
  *(_QWORD *)(v1 - 160) = v1 - 216;
  std::vector<kaldi::quasar::TranslationUtil::PathElement>::__destroy_vector::operator()[abi:ne180100](v1 - 160);
  kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)&STACK[0x358]);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(&STACK[0x470]);
  JUMPOUT(0x1DEACD468);
}

void sub_1DEACD2B0()
{
  unint64_t v0;

  STACK[0x450] = v0;
  kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)&STACK[0x470]);
  JUMPOUT(0x1DEACD384);
}

void sub_1DEACD2C8()
{
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x448]);
  JUMPOUT(0x1DEACD2F4);
}

void sub_1DEACD2E8()
{
  JUMPOUT(0x1DEACD2FCLL);
}

void sub_1DEACD30C()
{
  uint64_t v0;
  void *v1;
  void *v2;

  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x470]);
  v1 = *(void **)(v0 - 184);
  if (v1)
  {
    *(_QWORD *)(v0 - 176) = v1;
    operator delete(v1);
  }
  v2 = *(void **)(v0 - 160);
  if (v2)
  {
    *(_QWORD *)(v0 - 152) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1DEACD428);
}

void sub_1DEACD328()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 208) = v0;
  *(_QWORD *)(v1 - 160) = v1 - 216;
  std::vector<kaldi::quasar::TranslationUtil::PathElement>::__destroy_vector::operator()[abi:ne180100](v1 - 160);
  kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)&STACK[0x358]);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(&STACK[0x470]);
  JUMPOUT(0x1DEACD468);
}

void sub_1DEACD338()
{
  std::__split_buffer<kaldi::quasar::TranslationUtil::PathElement>::~__split_buffer((uint64_t)&STACK[0x240]);
  kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)&STACK[0x470]);
  JUMPOUT(0x1DEACD384);
}

void sub_1DEACD348()
{
  uint64_t v0;

  std::__split_buffer<kaldi::quasar::TranslationUtil::PathElement>::~__split_buffer((uint64_t)&STACK[0x240]);
  *(_QWORD *)(v0 - 160) = v0 - 216;
  std::vector<kaldi::quasar::TranslationUtil::PathElement>::__destroy_vector::operator()[abi:ne180100]((void ***)(v0 - 160));
  kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)&STACK[0x358]);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x470]);
  JUMPOUT(0x1DEACD468);
}

void sub_1DEACD35C()
{
  uint64_t v0;

  if (SLOBYTE(STACK[0x257]) < 0)
    operator delete((void *)STACK[0x240]);
  *(_QWORD *)(v0 - 160) = v0 - 216;
  std::vector<kaldi::quasar::TranslationUtil::PathElement>::__destroy_vector::operator()[abi:ne180100]((void ***)(v0 - 160));
  kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)&STACK[0x358]);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x470]);
  JUMPOUT(0x1DEACD468);
}

void sub_1DEACD3B8()
{
  uint64_t v0;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x240]);
  *(_QWORD *)(v0 - 160) = v0 - 216;
  std::vector<kaldi::quasar::TranslationUtil::PathElement>::__destroy_vector::operator()[abi:ne180100]((void ***)(v0 - 160));
  kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)&STACK[0x358]);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x470]);
  JUMPOUT(0x1DEACD468);
}

void sub_1DEACD3C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  *(_QWORD *)(v52 - 216) = &a32;
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](v52 - 216);
  *(_QWORD *)(v52 - 216) = &a38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v52 - 216);
  if (a46 < 0)
    operator delete(a41);
  if (a52 < 0)
    operator delete(a47);
  _Unwind_Resume(a1);
}

void sub_1DEACD3DC()
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&STACK[0x240]);
  JUMPOUT(0x1DEACD3E8);
}

uint64_t kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~DecodeOptions(uint64_t a1)
{
  void **v3;

  if (*(char *)(a1 + 287) < 0)
    operator delete(*(void **)(a1 + 264));
  v3 = (void **)(a1 + 240);
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void kaldi::quasar::InputHammer::FilterTags(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v9;
  int8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *v16;
  float *v17;
  unint64_t v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const std::string::value_type *v25;
  uint64_t v26;
  int v27;
  __int128 *v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  std::string *v32;
  __int128 v33;
  std::string::size_type v34;
  std::string *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  int v48;
  _BYTE *v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint8x8_t v55;
  unint64_t v56;
  void **v57;
  void *v58;
  unint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  std::string *v62;
  float v63;
  float v64;
  _BOOL8 v65;
  unint64_t v66;
  unint64_t v67;
  int8x8_t prime;
  void *v69;
  void *v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  uint8x8_t v74;
  unint64_t v75;
  uint8x8_t v76;
  uint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  const std::string::value_type *v85;
  uint64_t v86;
  int v87;
  std::string *v88;
  __int128 *v89;
  __int128 v90;
  std::string::size_type v91;
  std::string *v92;
  __int128 v93;
  std::string *v94;
  std::string *v95;
  unsigned int v96;
  _BYTE *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  unsigned __int8 *v103;
  unsigned __int8 *v104;
  _QWORD *v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  int v110;
  int v111;
  void *v112;
  unint64_t *v113;
  void *__p;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  std::string *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void **v124[2];

  v5 = a2;
  if (!*(_BYTE *)(a1 + 105))
  {
    v121 = 0;
    v122 = 0;
    v123 = 0;
    v118 = 0;
    v119 = 0;
    v120 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, " ");
    kaldi::SplitStringOnString(v5, (char *)&__p, &v121);
    if (SHIBYTE(v117) < 0)
      operator delete(__p);
    if (*(char *)(a3 + 23) < 0)
    {
      **(_BYTE **)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 23) = 0;
    }
    v23 = v121;
    v24 = v122;
    if (v121 != v122)
    {
      while (1)
      {
        if (*(char *)(v23 + 23) < 0)
        {
          v25 = *(const std::string::value_type **)v23;
          v26 = *(_QWORD *)(v23 + 8);
        }
        else
        {
          v25 = (const std::string::value_type *)v23;
          v26 = *(unsigned __int8 *)(v23 + 23);
        }
        do
        {
          if (!v26)
            goto LABEL_45;
          v27 = v25[--v26];
        }
        while (v27 != 92);
        if (v26 != -1)
          break;
LABEL_45:
        v29 = v119;
        if ((unint64_t)v119 >= v120)
        {
          v31 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v118, (__int128 *)v23);
        }
        else
        {
          if ((*(_BYTE *)(v23 + 23) & 0x80) != 0)
          {
            std::string::__init_copy_ctor_external(v119, *(const std::string::value_type **)v23, *(_QWORD *)(v23 + 8));
          }
          else
          {
            v30 = *(_OWORD *)v23;
            v119->__r_.__value_.__r.__words[2] = *(_QWORD *)(v23 + 16);
            *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v30;
          }
          v31 = v29 + 1;
        }
        v119 = v31;
LABEL_66:
        v23 += 24;
        if (v23 == v24)
          goto LABEL_67;
      }
      __p = 0;
      v116 = 0;
      v117 = 0;
      kaldi::SplitStringToVector((const std::string *)v23, "\\", 0, (uint64_t)&__p);
      if (v116 - (_QWORD)__p == 48)
      {
        if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)a1, (unsigned __int8 *)__p + 24))
        {
          v32 = v119;
          v28 = (__int128 *)v23;
          if ((unint64_t)v119 < v120)
          {
            if (*(char *)(v23 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v119, *(const std::string::value_type **)v23, *(_QWORD *)(v23 + 8));
              goto LABEL_63;
            }
            v33 = *(_OWORD *)v23;
            v34 = *(_QWORD *)(v23 + 16);
            goto LABEL_59;
          }
LABEL_60:
          v35 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v118, v28);
LABEL_64:
          v119 = v35;
          goto LABEL_65;
        }
        v28 = (__int128 *)__p;
        if ((*((char *)__p + 23) & 0x80000000) == 0)
        {
          if (!*((_BYTE *)__p + 23))
            goto LABEL_65;
LABEL_56:
          v32 = v119;
          if ((unint64_t)v119 < v120)
          {
            if ((*((_BYTE *)__p + 23) & 0x80) != 0)
            {
              std::string::__init_copy_ctor_external(v119, *(const std::string::value_type **)__p, *((_QWORD *)__p + 1));
              goto LABEL_63;
            }
            v33 = *(_OWORD *)__p;
            v34 = *((_QWORD *)__p + 2);
LABEL_59:
            v32->__r_.__value_.__r.__words[2] = v34;
            *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v33;
LABEL_63:
            v35 = v32 + 1;
            goto LABEL_64;
          }
          goto LABEL_60;
        }
        if (*((_QWORD *)__p + 1))
          goto LABEL_56;
      }
LABEL_65:
      v124[0] = &__p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v124);
      goto LABEL_66;
    }
LABEL_67:
    kaldi::JoinVectorToString<std::string>(&v118, a3);
    v36 = *(unsigned __int8 *)(a3 + 23);
    if ((v36 & 0x80u) == 0)
      v37 = *(unsigned __int8 *)(a3 + 23);
    else
      v37 = *(_QWORD *)(a3 + 8);
    v38 = *(unsigned __int8 *)(v5 + 23);
    v39 = (char)v38;
    if ((v38 & 0x80u) != 0)
      v38 = *(_QWORD *)(v5 + 8);
    if (v37 != v38)
      goto LABEL_83;
    if (v39 >= 0)
      v40 = (unsigned __int8 *)v5;
    else
      v40 = *(unsigned __int8 **)v5;
    if ((v36 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a3, v40, *(_QWORD *)(a3 + 8)))
      {
LABEL_83:
        if (kaldi::g_kaldi_verbose_level < 1)
          goto LABEL_265;
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "RemoveSpecifiedTags", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/input-hammer.h", 336, 1);
        v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Input hammer removed tags ", 26);
        v43 = *(char *)(v5 + 23);
        if (v43 >= 0)
          v44 = v5;
        else
          v44 = *(_QWORD *)v5;
        if (v43 >= 0)
          v45 = *(unsigned __int8 *)(v5 + 23);
        else
          v45 = *(_QWORD *)(v5 + 8);
        v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, v44, v45);
        v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)" -> ", 4);
        v48 = *(char *)(a3 + 23);
        if (v48 >= 0)
          v49 = (_BYTE *)a3;
        else
          v49 = *(_BYTE **)a3;
        if (v48 >= 0)
          v50 = *(unsigned __int8 *)(a3 + 23);
        else
          v50 = *(_QWORD *)(a3 + 8);
LABEL_264:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)v49, v50);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
        goto LABEL_265;
      }
    }
    else if (*(_BYTE *)(a3 + 23))
    {
      v41 = (unsigned __int8 *)a3;
      while (*v41 == *v40)
      {
        ++v41;
        ++v40;
        if (!--v36)
          goto LABEL_96;
      }
      goto LABEL_83;
    }
LABEL_96:
    if (kaldi::g_kaldi_verbose_level < 1)
      goto LABEL_265;
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "RemoveSpecifiedTags", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/input-hammer.h", 334, 1);
    v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Input hammer did not change anything ", 37);
    v51 = *(char *)(v5 + 23);
    if (v51 >= 0)
      v49 = (_BYTE *)v5;
    else
      v49 = *(_BYTE **)v5;
    if (v51 >= 0)
      v50 = *(unsigned __int8 *)(v5 + 23);
    else
      v50 = *(_QWORD *)(v5 + 8);
    goto LABEL_264;
  }
  v113 = (unint64_t *)(a1 + 64);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 64, a4);
  v10 = *(int8x8_t *)(a1 + 48);
  if (!*(_QWORD *)&v10)
    goto LABEL_23;
  v11 = v9;
  v12 = (uint8x8_t)vcnt_s8(v10);
  v12.i16[0] = vaddlv_u8(v12);
  v13 = v12.u32[0];
  if (v12.u32[0] > 1uLL)
  {
    v14 = v9;
    if (v9 >= *(_QWORD *)&v10)
      v14 = v9 % *(_QWORD *)&v10;
  }
  else
  {
    v14 = (*(_QWORD *)&v10 - 1) & v9;
  }
  v15 = *(unsigned __int8 ***)(*(_QWORD *)(a1 + 40) + 8 * v14);
  if (!v15 || (v16 = *v15) == 0)
  {
LABEL_23:
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&__p, "PassSpecifiedTags", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/input-hammer.h", 348);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Locale not in pass list ", 24);
      v20 = *(char *)(a4 + 23);
      if (v20 >= 0)
        v21 = a4;
      else
        v21 = *(_QWORD *)a4;
      if (v20 >= 0)
        v22 = *(unsigned __int8 *)(a4 + 23);
      else
        v22 = *(_QWORD *)(a4 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
    }
    std::string::operator=((std::string *)a3, (const std::string *)v5);
    return;
  }
  v17 = (float *)(a1 + 72);
  while (1)
  {
    v18 = *((_QWORD *)v16 + 1);
    if (v18 == v11)
      break;
    if (v13 > 1)
    {
      if (v18 >= *(_QWORD *)&v10)
        v18 %= *(_QWORD *)&v10;
    }
    else
    {
      v18 &= *(_QWORD *)&v10 - 1;
    }
    if (v18 != v14)
      goto LABEL_23;
LABEL_22:
    v16 = *(unsigned __int8 **)v16;
    if (!v16)
      goto LABEL_23;
  }
  if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 72, v16 + 16, (unsigned __int8 *)a4) & 1) == 0)
    goto LABEL_22;
  v121 = 0;
  v122 = 0;
  v123 = 0;
  v118 = 0;
  v119 = 0;
  v120 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, " ");
  kaldi::SplitStringOnString(v5, (char *)&__p, &v121);
  if (SHIBYTE(v117) < 0)
    operator delete(__p);
  if (*(char *)(a3 + 23) < 0)
  {
    **(_BYTE **)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 23) = 0;
  }
  v52 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v113, a4);
  v53 = v52;
  v54 = *(_QWORD *)(a1 + 48);
  if (v54)
  {
    v55 = (uint8x8_t)vcnt_s8((int8x8_t)v54);
    v55.i16[0] = vaddlv_u8(v55);
    v56 = v55.u32[0];
    if (v55.u32[0] > 1uLL)
    {
      v11 = v52;
      if (v52 >= v54)
        v11 = v52 % v54;
    }
    else
    {
      v11 = (v54 - 1) & v52;
    }
    v57 = *(void ***)(*(_QWORD *)(a1 + 40) + 8 * v11);
    if (v57)
    {
      v58 = *v57;
      if (*v57)
      {
        while (1)
        {
          v59 = *((_QWORD *)v58 + 1);
          if (v59 == v53)
          {
            if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 72, (unsigned __int8 *)v58 + 16, (unsigned __int8 *)a4) & 1) != 0)
            {
              v5 = a2;
              goto LABEL_185;
            }
          }
          else
          {
            if (v56 > 1)
            {
              if (v59 >= v54)
                v59 %= v54;
            }
            else
            {
              v59 &= v54 - 1;
            }
            if (v59 != v11)
            {
LABEL_125:
              v5 = a2;
              break;
            }
          }
          v58 = *(void **)v58;
          if (!v58)
            goto LABEL_125;
        }
      }
    }
  }
  v60 = operator new(0x50uLL);
  v61 = (_QWORD *)(a1 + 56);
  __p = v60;
  v116 = a1 + 56;
  LOBYTE(v117) = 0;
  *v60 = 0;
  v60[1] = v53;
  v62 = (std::string *)(v60 + 2);
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v62, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)&v62->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
    v60[4] = *(_QWORD *)(a4 + 16);
  }
  *(_OWORD *)(v60 + 7) = 0u;
  *(_OWORD *)(v60 + 5) = 0u;
  *((_DWORD *)v60 + 18) = 1065353216;
  LOBYTE(v117) = 1;
  v63 = (float)(*v113 + 1);
  v64 = *v17;
  if (!v54 || (float)(v64 * (float)v54) < v63)
  {
    v65 = 1;
    if (v54 >= 3)
      v65 = (v54 & (v54 - 1)) != 0;
    v66 = v65 | (2 * v54);
    v67 = vcvtps_u32_f32(v63 / v64);
    if (v66 <= v67)
      prime = (int8x8_t)v67;
    else
      prime = (int8x8_t)v66;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v54 = *(_QWORD *)(a1 + 48);
    if (*(_QWORD *)&prime <= v54)
    {
      if (*(_QWORD *)&prime < v54)
      {
        v75 = vcvtps_u32_f32((float)*v113 / *v17);
        if (v54 < 3 || (v76 = (uint8x8_t)vcnt_s8((int8x8_t)v54), v76.i16[0] = vaddlv_u8(v76), v76.u32[0] > 1uLL))
        {
          v75 = std::__next_prime(v75);
        }
        else
        {
          v77 = 1 << -(char)__clz(v75 - 1);
          if (v75 >= 2)
            v75 = v77;
        }
        if (*(_QWORD *)&prime <= v75)
          prime = (int8x8_t)v75;
        if (*(_QWORD *)&prime >= v54)
        {
          v54 = *(_QWORD *)(a1 + 48);
        }
        else
        {
          if (prime)
            goto LABEL_141;
          v112 = *(void **)(a1 + 40);
          *(_QWORD *)(a1 + 40) = 0;
          if (v112)
            operator delete(v112);
          v54 = 0;
          *(_QWORD *)(a1 + 48) = 0;
        }
      }
    }
    else
    {
LABEL_141:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v69 = operator new(8 * *(_QWORD *)&prime);
      v70 = *(void **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v69;
      if (v70)
        operator delete(v70);
      v71 = 0;
      *(int8x8_t *)(a1 + 48) = prime;
      do
        *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v71++) = 0;
      while (*(_QWORD *)&prime != v71);
      v72 = (_QWORD *)*v61;
      if (*v61)
      {
        v73 = v72[1];
        v74 = (uint8x8_t)vcnt_s8(prime);
        v74.i16[0] = vaddlv_u8(v74);
        if (v74.u32[0] > 1uLL)
        {
          if (v73 >= *(_QWORD *)&prime)
            v73 %= *(_QWORD *)&prime;
        }
        else
        {
          v73 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v73) = v61;
        v78 = (_QWORD *)*v72;
        if (*v72)
        {
          do
          {
            v79 = v78[1];
            if (v74.u32[0] > 1uLL)
            {
              if (v79 >= *(_QWORD *)&prime)
                v79 %= *(_QWORD *)&prime;
            }
            else
            {
              v79 &= *(_QWORD *)&prime - 1;
            }
            if (v79 != v73)
            {
              v80 = *(_QWORD *)(a1 + 40);
              if (!*(_QWORD *)(v80 + 8 * v79))
              {
                *(_QWORD *)(v80 + 8 * v79) = v72;
                goto LABEL_166;
              }
              *v72 = *v78;
              *v78 = **(_QWORD **)(*(_QWORD *)(a1 + 40) + 8 * v79);
              **(_QWORD **)(*(_QWORD *)(a1 + 40) + 8 * v79) = v78;
              v78 = v72;
            }
            v79 = v73;
LABEL_166:
            v72 = v78;
            v78 = (_QWORD *)*v78;
            v73 = v79;
          }
          while (v78);
        }
      }
      v54 = (unint64_t)prime;
    }
    if ((v54 & (v54 - 1)) != 0)
    {
      if (v53 >= v54)
        v11 = v53 % v54;
      else
        v11 = v53;
    }
    else
    {
      v11 = (v54 - 1) & v53;
    }
  }
  v81 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8 * v11);
  v58 = __p;
  if (v81)
  {
    *(_QWORD *)__p = *v81;
    goto LABEL_183;
  }
  *(_QWORD *)__p = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v58;
  *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v11) = a1 + 56;
  if (*(_QWORD *)v58)
  {
    v82 = *(_QWORD *)(*(_QWORD *)v58 + 8);
    if ((v54 & (v54 - 1)) != 0)
    {
      if (v82 >= v54)
        v82 %= v54;
    }
    else
    {
      v82 &= v54 - 1;
    }
    v81 = (_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v82);
LABEL_183:
    *v81 = v58;
  }
  __p = 0;
  ++*v113;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p);
LABEL_185:
  v83 = v121;
  v84 = v122;
  if (v121 != v122)
  {
    while (1)
    {
      if (*(char *)(v83 + 23) < 0)
      {
        v85 = *(const std::string::value_type **)v83;
        v86 = *(_QWORD *)(v83 + 8);
      }
      else
      {
        v85 = (const std::string::value_type *)v83;
        v86 = *(unsigned __int8 *)(v83 + 23);
      }
      do
      {
        if (!v86)
          goto LABEL_197;
        v87 = v85[--v86];
      }
      while (v87 != 92);
      if (v86 != -1)
        break;
LABEL_197:
      v92 = v119;
      if ((unint64_t)v119 >= v120)
      {
        v94 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v118, (__int128 *)v83);
      }
      else
      {
        if ((*(_BYTE *)(v83 + 23) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(v119, *(const std::string::value_type **)v83, *(_QWORD *)(v83 + 8));
        }
        else
        {
          v93 = *(_OWORD *)v83;
          v119->__r_.__value_.__r.__words[2] = *(_QWORD *)(v83 + 16);
          *(_OWORD *)&v92->__r_.__value_.__l.__data_ = v93;
        }
        v94 = v92 + 1;
      }
      v119 = v94;
LABEL_218:
      v83 += 24;
      if (v83 == v84)
        goto LABEL_219;
    }
    __p = 0;
    v116 = 0;
    v117 = 0;
    kaldi::SplitStringToVector((const std::string *)v83, "\\", 0, (uint64_t)&__p);
    if (v116 - (_QWORD)__p != 48)
      goto LABEL_217;
    if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)v58 + 5, (unsigned __int8 *)__p + 24))
    {
      v88 = v119;
      v89 = (__int128 *)v83;
      if ((unint64_t)v119 < v120)
      {
        if ((*(char *)(v83 + 23) & 0x80000000) == 0)
        {
          v90 = *(_OWORD *)v83;
          v91 = *(_QWORD *)(v83 + 16);
          goto LABEL_211;
        }
        std::string::__init_copy_ctor_external(v119, *(const std::string::value_type **)v83, *(_QWORD *)(v83 + 8));
LABEL_215:
        v95 = v88 + 1;
LABEL_216:
        v119 = v95;
LABEL_217:
        v124[0] = &__p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v124);
        goto LABEL_218;
      }
    }
    else
    {
      v89 = (__int128 *)__p;
      if (*((char *)__p + 23) < 0)
      {
        if (!*((_QWORD *)__p + 1))
          goto LABEL_217;
      }
      else if (!*((_BYTE *)__p + 23))
      {
        goto LABEL_217;
      }
      v88 = v119;
      if ((unint64_t)v119 < v120)
      {
        if ((*((_BYTE *)__p + 23) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(v119, *(const std::string::value_type **)__p, *((_QWORD *)__p + 1));
        }
        else
        {
          v90 = *(_OWORD *)__p;
          v91 = *((_QWORD *)__p + 2);
LABEL_211:
          v88->__r_.__value_.__r.__words[2] = v91;
          *(_OWORD *)&v88->__r_.__value_.__l.__data_ = v90;
        }
        goto LABEL_215;
      }
    }
    v95 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v118, v89);
    goto LABEL_216;
  }
LABEL_219:
  kaldi::JoinVectorToString<std::string>(&v118, a3);
  v96 = *(unsigned __int8 *)(a3 + 23);
  if (*(_BYTE *)(a1 + 104))
  {
    if ((v96 & 0x80) != 0)
    {
      v97 = *(_BYTE **)a3;
      v98 = *(_QWORD *)(a3 + 8);
    }
    else
    {
      v97 = (_BYTE *)a3;
      v98 = *(unsigned __int8 *)(a3 + 23);
    }
    if (v98)
    {
      do
      {
        if (*v97 == 95)
          *v97 = 32;
        ++v97;
        --v98;
      }
      while (v98);
      v96 = *(unsigned __int8 *)(a3 + 23);
    }
  }
  v99 = v96;
  if ((v96 & 0x80u) == 0)
    v100 = v96;
  else
    v100 = *(_QWORD *)(a3 + 8);
  v101 = *(unsigned __int8 *)(v5 + 23);
  v102 = (char)v101;
  if ((v101 & 0x80u) != 0)
    v101 = *(_QWORD *)(v5 + 8);
  if (v100 != v101)
  {
LABEL_244:
    if (kaldi::g_kaldi_verbose_level < 1)
      goto LABEL_265;
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "PassSpecifiedTags", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/input-hammer.h", 390, 1);
    v105 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Input hammer removed tags ", 26);
    v106 = *(char *)(v5 + 23);
    if (v106 >= 0)
      v107 = v5;
    else
      v107 = *(_QWORD *)v5;
    if (v106 >= 0)
      v108 = *(unsigned __int8 *)(v5 + 23);
    else
      v108 = *(_QWORD *)(v5 + 8);
    v109 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, v107, v108);
    v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)" -> ", 4);
    v110 = *(char *)(a3 + 23);
    if (v110 >= 0)
      v49 = (_BYTE *)a3;
    else
      v49 = *(_BYTE **)a3;
    if (v110 >= 0)
      v50 = *(unsigned __int8 *)(a3 + 23);
    else
      v50 = *(_QWORD *)(a3 + 8);
    goto LABEL_264;
  }
  if (v102 >= 0)
    v103 = (unsigned __int8 *)v5;
  else
    v103 = *(unsigned __int8 **)v5;
  if ((v99 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a3, v103, *(_QWORD *)(a3 + 8)))
      goto LABEL_244;
  }
  else if ((_DWORD)v99)
  {
    v104 = (unsigned __int8 *)a3;
    while (*v104 == *v103)
    {
      ++v104;
      ++v103;
      if (!--v99)
        goto LABEL_257;
    }
    goto LABEL_244;
  }
LABEL_257:
  if (kaldi::g_kaldi_verbose_level >= 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "PassSpecifiedTags", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/input-hammer.h", 388, 1);
    v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Input hammer did not change anything ", 37);
    v111 = *(char *)(v5 + 23);
    if (v111 >= 0)
      v49 = (_BYTE *)v5;
    else
      v49 = *(_BYTE **)v5;
    if (v111 >= 0)
      v50 = *(unsigned __int8 *)(v5 + 23);
    else
      v50 = *(_QWORD *)(v5 + 8);
    goto LABEL_264;
  }
LABEL_265:
  __p = &v118;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &v121;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1DEACE284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v18 - 136) = v17;
  *(_QWORD *)(v18 - 96) = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 96));
  *(_QWORD *)(v18 - 96) = v18 - 144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 96));
  *(_QWORD *)(v18 - 144) = v18 - 120;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 144));
  _Unwind_Resume(a1);
}

void kaldi::quasar::MultiLangDecorator::Apply(std::string *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  const std::string::value_type *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  const std::string::value_type *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  void *v31;
  uint64_t v32;
  unsigned __int8 v33;
  _QWORD v34[2];
  _QWORD v35[11];
  char v36;
  uint64_t v37;

  if (!*(_BYTE *)a2)
  {
    v16 = *(unsigned __int8 *)(a4 + 23);
    if ((v16 & 0x80u) != 0)
      v16 = *(_QWORD *)(a4 + 8);
    if (v16)
    {
      if (kaldi::g_kaldi_verbose_level < 5)
      {
LABEL_56:
        if (*(char *)(a3 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
        }
        else
        {
          *(_OWORD *)&this->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
          this->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
        }
        return;
      }
    }
    else
    {
      v29 = *(unsigned __int8 *)(a5 + 23);
      if ((v29 & 0x80u) != 0)
        v29 = *(_QWORD *)(a5 + 8);
      if (v29)
        v30 = kaldi::g_kaldi_verbose_level < 5;
      else
        v30 = 1;
      if (v30)
        goto LABEL_56;
    }
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v34, "Apply", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/input-hammer.h", 127, 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"model does not require the use of src/tar tags", 46);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v34);
    goto LABEL_56;
  }
  kaldi::quasar::MultiLangDecorator::GetTags((uint64_t)&v31, a2, a4, a5);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v34);
  v8 = *(_DWORD *)(a2 + 4);
  if (v8)
  {
    if (v8 == 1)
    {
      v12 = v35;
      v17 = *(char *)(a3 + 23);
      if (v17 >= 0)
        v14 = (const std::string::value_type *)a3;
      else
        v14 = *(const std::string::value_type **)a3;
      if (v17 >= 0)
        v15 = *(unsigned __int8 *)(a3 + 23);
      else
        v15 = *(_QWORD *)(a3 + 8);
      goto LABEL_28;
    }
    if (v8 == 2)
    {
      if ((v33 & 0x80u) == 0)
        v9 = &v31;
      else
        v9 = v31;
      if ((v33 & 0x80u) == 0)
        v10 = v33;
      else
        v10 = v32;
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v9, v10);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" ", 1);
      v13 = *(char *)(a3 + 23);
      if (v13 >= 0)
        v14 = (const std::string::value_type *)a3;
      else
        v14 = *(const std::string::value_type **)a3;
      if (v13 >= 0)
        v15 = *(unsigned __int8 *)(a3 + 23);
      else
        v15 = *(_QWORD *)(a3 + 8);
LABEL_28:
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" ", 1);
      v20 = v33;
      v21 = v32;
      v22 = (v33 & 0x80u) != 0;
      if ((v33 & 0x80u) == 0)
        v23 = (const std::string::value_type *)&v31;
      else
        v23 = (const std::string::value_type *)v31;
      goto LABEL_42;
    }
    v19 = v35;
  }
  else
  {
    if ((v33 & 0x80u) == 0)
      v24 = &v31;
    else
      v24 = v31;
    if ((v33 & 0x80u) == 0)
      v25 = v33;
    else
      v25 = v32;
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v24, v25);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" ", 1);
  }
  v20 = *(unsigned __int8 *)(a3 + 23);
  v21 = *(_QWORD *)(a3 + 8);
  v22 = (v20 & 0x80u) != 0;
  if ((v20 & 0x80u) == 0)
    v23 = (const std::string::value_type *)a3;
  else
    v23 = *(const std::string::value_type **)a3;
LABEL_42:
  if (v22)
    v27 = v21;
  else
    v27 = v20;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v23, v27);
  std::stringbuf::str();
  v34[0] = *MEMORY[0x1E0DE4F50];
  v28 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v34 + *(_QWORD *)(v34[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v35[0] = v28;
  v35[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v36 < 0)
    operator delete((void *)v35[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1DF0ECF6C](&v37);
  if ((char)v33 < 0)
    operator delete(v31);
}

void sub_1DEACE6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a15);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::LanguageInfo(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD v25[2];
  _QWORD v26[11];
  char v27;
  uint64_t v28;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v25);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Source locale ", 14);
  v4 = *(char *)(a2 + 39);
  if (v4 >= 0)
    v5 = a2 + 16;
  else
    v5 = *(_QWORD *)(a2 + 16);
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 39);
  else
    v6 = *(_QWORD *)(a2 + 24);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, v5, v6);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", Target locale ", 16);
  v9 = *(char *)(a2 + 63);
  if (v9 >= 0)
    v10 = a2 + 40;
  else
    v10 = *(_QWORD *)(a2 + 40);
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a2 + 63);
  else
    v11 = *(_QWORD *)(a2 + 48);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" source tag ", 12);
  v14 = *(char *)(a2 + 87);
  if (v14 >= 0)
    v15 = a2 + 64;
  else
    v15 = *(_QWORD *)(a2 + 64);
  if (v14 >= 0)
    v16 = *(unsigned __int8 *)(a2 + 87);
  else
    v16 = *(_QWORD *)(a2 + 72);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" target locale ", 15);
  v19 = *(char *)(a2 + 111);
  if (v19 >= 0)
    v20 = a2 + 88;
  else
    v20 = *(_QWORD *)(a2 + 88);
  if (v19 >= 0)
    v21 = *(unsigned __int8 *)(a2 + 111);
  else
    v21 = *(_QWORD *)(a2 + 96);
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", # of phrasebooks ", 19);
  std::ostream::operator<<();
  std::stringbuf::str();
  v25[0] = *MEMORY[0x1E0DE4F50];
  v23 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v25 + *(_QWORD *)(v25[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v26[0] = v23;
  v26[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v27 < 0)
    operator delete((void *)v26[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1DF0ECF6C](&v28);
}

void sub_1DEACE87C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::TokenizeInputString(uint64_t a1, const std::string *a2, uint64_t *a3)
{
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  void **v8[34];
  void **v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12[3];

  if (*(_DWORD *)(a1 + 5796) == 1)
  {
    memset(v12, 0, sizeof(v12));
    kaldi::SplitStringToVector(a2, " ", 1, (uint64_t)v12);
    kaldi::quasar::BPE::Apply(a1 + 152, v12, a3);
    v9 = 0;
    v10 = 0;
    v11 = 0;
    kaldi::JoinVectorToString<std::string>(a3, (uint64_t)&v9);
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v8, "TokenizeInputString", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 1700);
      v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"BPE input ", 10);
      if (v11 >= 0)
        v6 = (void **)&v9;
      else
        v6 = v9;
      if (v11 >= 0)
        v7 = HIBYTE(v11);
      else
        v7 = v10;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v8);
    }
    if (SHIBYTE(v11) < 0)
      operator delete(v9);
    v8[0] = (void **)v12;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v8);
  }
  else
  {
    kaldi::SplitStringToVector(a2, " ", 1, (uint64_t)a3);
  }
}

void sub_1DEACE9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;

  if (*(char *)(v9 - 57) < 0)
    operator delete(*(void **)(v9 - 80));
  a9 = (void **)(v9 - 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::shared_ptr<kaldi::quasar::PhraseBook>>::__init_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::PhraseBook>*,std::shared_ptr<kaldi::quasar::PhraseBook>*>(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    if (a4 >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v6 = result;
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(a4);
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[2 * v7];
    while (a2 != a3)
    {
      *result = *a2;
      v8 = a2[1];
      result[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      result += 2;
    }
    v6[1] = result;
  }
  return result;
}

void sub_1DEACEAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

kaldi::quasar::TranslationUtil::NbestElement *kaldi::quasar::TranslationUtil::NbestElement::NbestElement(kaldi::quasar::TranslationUtil::NbestElement *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(int32x4_t *)((char *)this + 24) = vdupq_n_s32(0x7F800000u);
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 8, "{}");
  *((_BYTE *)this + 88) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_BYTE *)this + 240) = 0;
  *((_QWORD *)this + 31) = (char *)this + 256;
  return this;
}

void sub_1DEACEB48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<kaldi::quasar::TranslationUtil::PathElement>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

std::string *kaldi::quasar::TranslationUtil::PathElement::PathElement(std::string *this, const kaldi::quasar::TranslationUtil::PathElement *a2)
{
  __int128 v4;
  int v5;
  __int128 v6;
  std::string::size_type v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *((_DWORD *)a2 + 6);
  this[1].__r_.__value_.__l.__size_ = 0;
  LODWORD(this[1].__r_.__value_.__l.__data_) = v5;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__r.__words[0] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 32), *((__int128 **)a2 + 4), *((__int128 **)a2 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3));
  if (*((char *)a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 56), *((const std::string::value_type **)a2 + 7), *((_QWORD *)a2 + 8));
  }
  else
  {
    v6 = *(_OWORD *)((char *)a2 + 56);
    this[3].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 9);
    *(_OWORD *)&this[2].__r_.__value_.__r.__words[1] = v6;
  }
  v7 = *((_QWORD *)a2 + 10);
  this[3].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__l.__size_ = v7;
  this[4].__r_.__value_.__r.__words[0] = 0;
  this[4].__r_.__value_.__l.__size_ = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&this[3].__r_.__value_.__r.__words[2], *((const void **)a2 + 11), *((_QWORD *)a2 + 12), (uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 2);
  this[4].__r_.__value_.__r.__words[2] = 0;
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&this[4].__r_.__value_.__r.__words[2], *((const void **)a2 + 14), *((_QWORD *)a2 + 15), (uint64_t)(*((_QWORD *)a2 + 15) - *((_QWORD *)a2 + 14)) >> 2);
  this[5].__r_.__value_.__r.__words[2] = 0;
  this[6].__r_.__value_.__r.__words[0] = 0;
  this[6].__r_.__value_.__l.__size_ = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&this[5].__r_.__value_.__r.__words[2], *((const void **)a2 + 17), *((_QWORD *)a2 + 18), (uint64_t)(*((_QWORD *)a2 + 18) - *((_QWORD *)a2 + 17)) >> 2);
  this[6].__r_.__value_.__r.__words[2] = 0;
  this[7].__r_.__value_.__r.__words[0] = 0;
  this[7].__r_.__value_.__l.__size_ = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&this[6].__r_.__value_.__r.__words[2], *((const void **)a2 + 20), *((_QWORD *)a2 + 21), (uint64_t)(*((_QWORD *)a2 + 21) - *((_QWORD *)a2 + 20)) >> 2);
  this[7].__r_.__value_.__r.__words[2] = 0;
  this[8].__r_.__value_.__r.__words[0] = 0;
  this[8].__r_.__value_.__l.__size_ = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&this[7].__r_.__value_.__r.__words[2], *((const void **)a2 + 23), *((_QWORD *)a2 + 24), (uint64_t)(*((_QWORD *)a2 + 24) - *((_QWORD *)a2 + 23)) >> 2);
  this[8].__r_.__value_.__r.__words[2] = 0;
  this[9].__r_.__value_.__r.__words[0] = 0;
  this[9].__r_.__value_.__l.__size_ = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&this[8].__r_.__value_.__r.__words[2], *((const void **)a2 + 26), *((_QWORD *)a2 + 27), (uint64_t)(*((_QWORD *)a2 + 27) - *((_QWORD *)a2 + 26)) >> 2);
  LODWORD(this[9].__r_.__value_.__r.__words[2]) = *((_DWORD *)a2 + 58);
  return this;
}

void sub_1DEACED04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

void sub_1DEACEDBC()
{
  JUMPOUT(0x1DEACEDA4);
}

void std::vector<kaldi::quasar::TranslationUtil::PathElement>::__assign_with_size[abi:ne180100]<kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;

  v8 = a1[2];
  v9 = *a1;
  if (0xEEEEEEEEEEEEEEEFLL * ((v8 - *a1) >> 4) < a4)
  {
    if (v9)
    {
      v10 = a1[1];
      v11 = (void *)v9;
      if (v10 != v9)
      {
        do
          kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)(v10 - 240));
        while (v10 != v9);
        v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x111111111111111)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = 0xEEEEEEEEEEEEEEEFLL * (v8 >> 4);
    v13 = 2 * v12;
    if (2 * v12 <= a4)
      v13 = a4;
    if (v12 >= 0x88888888888888)
      v14 = 0x111111111111111;
    else
      v14 = v13;
    std::vector<kaldi::quasar::TranslationUtil::PathElement>::__vallocate[abi:ne180100](a1, v14);
    v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::PathElement>,kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*>(a2, a3, a1[1]);
    goto LABEL_16;
  }
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[1] - v9) >> 4) < a4)
  {
    v16 = a2 + 16 * ((a1[1] - v9) >> 4);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::quasar::TranslationUtil::PathElement *,kaldi::quasar::TranslationUtil::PathElement *,kaldi::quasar::TranslationUtil::PathElement *,0>(a2, v16, v9);
    v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::PathElement>,kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*>(v16, a3, a1[1]);
LABEL_16:
    a1[1] = v15;
    return;
  }
  v17 = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::quasar::TranslationUtil::PathElement *,kaldi::quasar::TranslationUtil::PathElement *,kaldi::quasar::TranslationUtil::PathElement *,0>(a2, a3, v9);
  for (i = a1[1];
        i != v17;
  a1[1] = v17;
}

void sub_1DEACEF3C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1DEACEF44(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

kaldi::quasar::TranslationUtil::NbestElement *kaldi::quasar::TranslationUtil::NbestElement::NbestElement(kaldi::quasar::TranslationUtil::NbestElement *this, const kaldi::quasar::TranslationUtil::NbestElement *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;
  const void **v11;
  char *v12;
  char *v13;
  char *v14;
  BOOL v15;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v4 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  if (v5 != *(_QWORD *)a2)
  {
    std::vector<kaldi::quasar::TranslationUtil::PathElement>::__vallocate[abi:ne180100](this, 0xEEEEEEEEEEEEEEEFLL * ((v5 - v4) >> 4));
    *((_QWORD *)this + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::PathElement>,kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*>(v4, v5, *((_QWORD *)this + 1));
  }
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *((const std::string::value_type **)a2 + 8), *((_QWORD *)a2 + 9));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 4);
    *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
    *((_OWORD *)this + 4) = v6;
  }
  *((_BYTE *)this + 88) = *((_BYTE *)a2 + 88);
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 4, *((const std::string::value_type **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v7 = *((_OWORD *)a2 + 6);
    *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
    *((_OWORD *)this + 6) = v7;
  }
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 5, *((const std::string::value_type **)a2 + 15), *((_QWORD *)a2 + 16));
  }
  else
  {
    v8 = *(_OWORD *)((char *)a2 + 120);
    *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
    *(_OWORD *)((char *)this + 120) = v8;
  }
  if (*((char *)a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 6, *((const std::string::value_type **)a2 + 18), *((_QWORD *)a2 + 19));
  }
  else
  {
    v9 = *((_OWORD *)a2 + 9);
    *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
    *((_OWORD *)this + 9) = v9;
  }
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 21, *((const void **)a2 + 21), *((_QWORD *)a2 + 22), (uint64_t)(*((_QWORD *)a2 + 22) - *((_QWORD *)a2 + 21)) >> 2);
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 24, *((const void **)a2 + 24), *((_QWORD *)a2 + 25), (uint64_t)(*((_QWORD *)a2 + 25) - *((_QWORD *)a2 + 24)) >> 2);
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 27, *((const void **)a2 + 27), *((_QWORD *)a2 + 28), (uint64_t)(*((_QWORD *)a2 + 28) - *((_QWORD *)a2 + 27)) >> 2);
  v10 = *((_BYTE *)a2 + 240);
  *((_QWORD *)this + 31) = (char *)this + 256;
  *((_BYTE *)this + 240) = v10;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  v11 = (const void **)*((_QWORD *)a2 + 31);
  v12 = (char *)a2 + 256;
  if (v11 != (const void **)v12)
  {
    do
    {
      std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,double> const&>((uint64_t **)this + 31, (uint64_t *)this + 32, v11 + 4, (uint64_t)(v11 + 4));
      v13 = (char *)v11[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(char **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (char *)v11[2];
          v15 = *(_QWORD *)v14 == (_QWORD)v11;
          v11 = (const void **)v14;
        }
        while (!v15);
      }
      v11 = (const void **)v14;
    }
    while (v14 != v12);
  }
  return this;
}

void sub_1DEACF1B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void **a11)
{
  uint64_t v11;
  void **v12;

  if (*(char *)(v11 + 143) < 0)
    operator delete(*v12);
  if (*(char *)(v11 + 119) < 0)
    operator delete(*a9);
  if (*(char *)(v11 + 87) < 0)
    operator delete(*a10);
  a11 = (void **)v11;
  std::vector<kaldi::quasar::TranslationUtil::PathElement>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Rescore<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, const kaldi::quasar::TranslationUtil::NbestElement **a2, _QWORD **a3, float a4, float a5, float a6)
{
  double *v12;
  uint64_t v13;
  clockid_t v14;
  unint64_t v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const kaldi::quasar::TranslationUtil::NbestElement *v25;
  const kaldi::quasar::TranslationUtil::NbestElement *v26;
  float v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  float v52;
  float v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  void **v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  const kaldi::quasar::TranslationUtil::NbestElement *v63;
  const kaldi::quasar::TranslationUtil::NbestElement *v64;
  kaldi::quasar::TranslationUtil::NbestElement *v65;
  uint64_t v66;
  uint64_t v67;
  const kaldi::quasar::TranslationUtil::NbestElement *v68;
  const kaldi::quasar::TranslationUtil::NbestElement *v69;
  int v70;
  uint64_t v71;
  float v72;
  float v73;
  float v74;
  uint64_t v75;
  float v76;
  _QWORD *v78;
  void *v79;
  uint64_t v80;
  const kaldi::quasar::TranslationUtil::NbestElement **v81;
  uint64_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  const kaldi::quasar::TranslationUtil::NbestElement *v86;
  void *v87[2];
  uint64_t v88;
  float v89[2];
  float v90[2];
  void *v91;
  uint64_t v92;
  unsigned __int8 v93;
  _BYTE v94[48];
  __int128 v95;
  uint64_t v96;
  void *__p[2];
  _QWORD v98[11];
  char v99;
  uint64_t v100;

  v12 = (double *)(a1 + 5376);
  v13 = a1 + 6240;
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_1DEBD87CE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v94, v12, v13, (__int128 *)__p);
  if (SHIBYTE(v98[0]) < 0)
    operator delete(__p[0]);
  v15 = 0xF0F0F0F0F0F0F0F1 * ((a2[1] - *a2) >> 4);
  if (v15)
  {
    if (v15 == 1)
    {
      v16 = 0.0;
    }
    else
    {
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)__p, "Rescore", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 591);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Looking for UNK symbol ", 23);
        std::ostream::operator<<();
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
      }
      v17 = kaldi::quasar::TorchEncoderDecoder::OutputSymbols(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136));
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v17 + 88))(&v91, v17, *(int *)(a1 + 5736) + 1);
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)__p, "Rescore", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 593);
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"UNK label : ", 12);
        if ((v93 & 0x80u) == 0)
          v19 = &v91;
        else
          v19 = v91;
        if ((v93 & 0x80u) == 0)
          v20 = v93;
        else
          v20 = v92;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
      }
      v21 = v93;
      if ((v93 & 0x80u) != 0)
        v21 = v92;
      if (!v21)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "Rescore", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 594);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"No UNK symbol in translation model vocabulary", 45);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
      v22 = (*(uint64_t (**)(_QWORD *))(*a3[4] + 120))(a3[4]);
      v23 = v22;
      if (!v22)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "Rescore", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 597);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Language model does not have output symbol table", 48);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
      v24 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v22 + 96))(v22, &v91);
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)__p, "Rescore", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 600);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"LM UNK ID ", 10);
        std::ostream::operator<<();
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
      }
      if ((_DWORD)v24 == -1)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "Rescore", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 601);
        v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Language model does not have OOV symbol : ", 42);
        if ((v93 & 0x80u) == 0)
          v79 = &v91;
        else
          v79 = v91;
        if ((v93 & 0x80u) == 0)
          v80 = v93;
        else
          v80 = v92;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)v79, v80);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
      v81 = a2;
      v26 = *a2;
      v25 = a2[1];
      if (v26 == v25)
      {
        v16 = 2147500000.0;
      }
      else
      {
        v27 = 1.0 - a4;
        v84 = (void *)*MEMORY[0x1E0DE4F50];
        v85 = MEMORY[0x1E0DE4FB8] + 16;
        v82 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
        v83 = *(void **)(MEMORY[0x1E0DE4F50] + 64);
        v16 = 2147500000.0;
        v86 = v25;
        do
        {
          v28 = ((uint64_t (*)(_QWORD **))**a3)(a3);
          if ((*((_DWORD *)v26 + 14) - 5) > 1)
          {
            v30 = v28;
            v32 = *(_QWORD *)v26;
            v31 = *((_QWORD *)v26 + 1);
            v33 = 0.0;
            while (v32 != v31)
            {
              v34 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 96))(v23, v32);
              if ((_DWORD)v34 == -1)
              {
                v34 = v24;
                if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
                {
                  kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)__p, "Rescore", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 618);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to find ", 15);
                  v35 = (_QWORD *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" in LM", 6);
                  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
                  v34 = v24;
                }
              }
              if ((((uint64_t (*)(_QWORD **, uint64_t, uint64_t, __int128 *))(*a3)[4])(a3, v30, v34, &v95) & 1) == 0)
              {
                if (kaldi::g_kaldi_verbose_level >= -1)
                {
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p, "Rescore", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 621);
                  v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Word lookup failure : ", 22);
                  v37 = *(char *)(v32 + 23);
                  if (v37 >= 0)
                    v38 = v32;
                  else
                    v38 = *(_QWORD *)v32;
                  if (v37 >= 0)
                    v39 = *(unsigned __int8 *)(v32 + 23);
                  else
                    v39 = *(_QWORD *)(v32 + 8);
                  v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, v38, v39);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" (label=", 8);
                  v41 = (_QWORD *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)")", 1);
                  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                }
                v33 = INFINITY;
                break;
              }
              v30 = HIDWORD(v95);
              v33 = v33 + *((float *)&v95 + 2);
              v32 += 240;
            }
            v42 = ((float (*)(_QWORD **, uint64_t))(*a3)[2])(a3, v30);
            *((float *)v26 + 8) = v42 * a4;
            v43 = *((float *)v26 + 7);
            v90[0] = *((float *)v26 + 6);
            v90[1] = v43;
            v44 = (float)(v33 + v42) * a4;
            *((float *)v26 + 6) = v44;
            *((float *)v26 + 7) = v27 * v43;
            *((float *)v26 + 9) = v27 * *((float *)v26 + 9);
            v89[0] = v44;
            v89[1] = v27 * v43;
            v87[0] = 0;
            v87[1] = 0;
            v88 = 0;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
            v45 = *(_QWORD *)v26;
            v46 = *((_QWORD *)v26 + 1);
            v47 = 0.0;
            while (v45 != v46)
            {
              v48 = *(char *)(v45 + 23);
              if (v48 >= 0)
                v49 = v45;
              else
                v49 = *(_QWORD *)v45;
              if (v48 >= 0)
                v50 = *(unsigned __int8 *)(v45 + 23);
              else
                v50 = *(_QWORD *)(v45 + 8);
              v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, v49, v50);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)" ", 1);
              v47 = v47 + (float)(*(float *)(v45 + 80) + *(float *)(v45 + 84));
              v45 += 240;
            }
            if (SHIBYTE(v88) < 0)
            {
              *(_BYTE *)v87[0] = 0;
              v87[1] = 0;
            }
            else
            {
              LOBYTE(v87[0]) = 0;
              HIBYTE(v88) = 0;
            }
            v25 = v86;
            std::stringbuf::str();
            if (SHIBYTE(v88) < 0)
              operator delete(v87[0]);
            *(_OWORD *)v87 = v95;
            v88 = v96;
            __p[0] = v84;
            *(void **)((char *)__p + *((_QWORD *)v84 - 3)) = v83;
            v98[0] = v82;
            v98[1] = v85;
            if (v99 < 0)
              operator delete((void *)v98[9]);
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x1DF0ECF6C](&v100);
            v52 = *((float *)v26 + 8);
            v53 = *((float *)v26 + 9);
            if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
            {
              kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)__p, "Rescore", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 640);
              v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Old Cost = ", 11);
              v55 = fst::operator<<<float>(v54, v90);
              v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)", New cost = ", 13);
              v57 = fst::operator<<<float>(v56, v89);
              v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)", Hyp = ", 8);
              if (v88 >= 0)
                v59 = v87;
              else
                v59 = (void **)v87[0];
              if (v88 >= 0)
                v60 = HIBYTE(v88);
              else
                v60 = (uint64_t)v87[1];
              v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)v59, v60);
              v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)" finalcost=", 11);
              fst::operator<<<float>(v62, (float *)v26 + 8);
              kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
            }
            if ((float)((float)(v47 + v52) + v53) < v16)
              v16 = (float)(v47 + v52) + v53;
            if (SHIBYTE(v88) < 0)
              operator delete(v87[0]);
          }
          else
          {
            v29 = *((float *)v26 + 7);
            if ((float)(*((float *)v26 + 6) + v29) < v16)
              v16 = *((float *)v26 + 6) + v29;
          }
          v26 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v26 + 272);
        }
        while (v26 != v25);
      }
      kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::NbestCompare((uint64_t)&v95, *(_DWORD *)(a1 + 5776), a5, a6);
      v63 = *v81;
      v64 = v81[1];
      __p[0] = (void *)v95;
      LODWORD(__p[1]) = DWORD2(v95);
      if (v64 - v63 < 1)
      {
        v65 = 0;
        v67 = 0;
      }
      else
      {
        v65 = (kaldi::quasar::TranslationUtil::NbestElement *)std::get_temporary_buffer[abi:ne180100]<kaldi::quasar::TranslationUtil::NbestElement>(0xF0F0F0F0F0F0F0F1 * ((v64 - v63) >> 4));
        v67 = v66;
      }
      std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(v63, v64, (float *)__p, 0xF0F0F0F0F0F0F0F1 * ((v64 - v63) >> 4), v65, v67);
      if (v65)
        operator delete(v65);
      v68 = *v81;
      v69 = v81[1];
      if (*v81 != v69)
      {
        v70 = v95;
        v71 = *(_QWORD *)((char *)&v95 + 4);
        v72 = powf(*((float *)&v95 + 2) + 1.0, *((float *)&v95 + 1));
        do
        {
          v73 = *((float *)v68 + 6);
          v74 = *((float *)v68 + 7);
          v75 = (uint64_t)(*((_QWORD *)v68 + 25) - *((_QWORD *)v68 + 24)) >> 2;
          if (v70 == 2)
          {
            v76 = powf(*((float *)&v71 + 1) + (float)(unint64_t)v75, *(float *)&v71) / v72;
          }
          else
          {
            v76 = 1.0;
            if (v70 == 1)
              v76 = (float)(unint64_t)(v75 + 1);
          }
          *((float *)v68 + 10) = (float)(v73 + v74) / v76;
          v68 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v68 + 272);
        }
        while (v68 != v69);
      }
      if ((char)v93 < 0)
        operator delete(v91);
    }
  }
  else
  {
    v16 = 2147500000.0;
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v94, v14);
  return v16;
}

void sub_1DEACFB54(_Unwind_Exception *a1, clockid_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a33 < 0)
    operator delete(__p);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a34, a2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::NNMTTransliterator::Transliterate<std::vector<kaldi::quasar::TranslationUtil::NbestElement>>(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  const std::string *v4;
  const std::string *v5;
  __int128 *p_p;
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  std::string::size_type size;
  unint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  std::wstring::size_type v18;
  __n128 v19;
  std::wstring::size_type v20;
  std::wstring *v21;
  char *v22;
  int v23;
  std::wstring *v24;
  uint64_t v25;
  std::wstring::size_type v26;
  std::wstring *v27;
  std::wstring *v28;
  char v29;
  uint64_t v30;
  std::wstring::size_type v31;
  std::wstring *v32;
  std::wstring::size_type v33;
  std::wstring *v34;
  uint64_t *v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t **v38;
  uint64_t **v39;
  int v40;
  uint64_t **v41;
  uint64_t **v42;
  const __int32 *v43;
  uint64_t *v44;
  std::wstring *v45;
  uint64_t i;
  uint64_t **v47;
  uint64_t v48;
  std::wstring::size_type v49;
  std::wstring::size_type v50;
  std::wstring *v51;
  char v52;
  const __int32 *v53;
  int64_t v54;
  __int32 *v55;
  __int32 *v56;
  uint64_t v57;
  __int32 v58;
  uint64_t v59;
  __int32 *v60;
  __int32 *v61;
  std::wstring::size_type v62;
  const std::wstring::value_type *p_v;
  uint64_t v64;
  int v65;
  uint64_t *v66;
  uint64_t **v67;
  std::string *v68;
  std::wstring::size_type v69;
  std::string::size_type v70;
  std::string *v71;
  __n128 v72;
  std::string::size_type v73;
  std::string *p_b;
  char *v75;
  int v76;
  std::string *v77;
  uint64_t v78;
  std::string::size_type v79;
  std::string *v80;
  std::string *v81;
  std::string *v82;
  std::string::size_type v83;
  std::string::size_type v84;
  std::string::size_type v85;
  std::string::size_type v86;
  std::string *v87;
  std::vector<std::string>::pointer v88;
  std::string::size_type v89;
  char *j;
  int v91;
  std::string *v92;
  char *v93;
  std::string::size_type v94;
  std::string *v95;
  std::string *v96;
  std::string *v97;
  unint64_t v98;
  std::string *v99;
  std::string::size_type v100;
  BOOL v101;
  std::string::size_type v102;
  std::string::size_type v103;
  std::string::size_type v104;
  std::string *v105;
  std::string::value_type v106;
  uint64_t v107;
  std::string::size_type v108;
  std::vector<std::string>::pointer end;
  __int128 v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  __int128 v116;
  std::string *v117;
  std::string::size_type v118;
  std::vector<std::string>::pointer v119;
  std::vector<std::string>::pointer v120;
  std::string *v121;
  __int128 v122;
  std::vector<std::string>::pointer v123;
  __int128 v124;
  std::string *v125;
  _BOOL4 v126;
  _DWORD *v127;
  _DWORD *v128;
  _DWORD *v129;
  unint64_t v130;
  int v131;
  std::string *v132;
  std::vector<std::string>::pointer k;
  int *v134;
  int *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  std::vector<std::string>::pointer v139;
  __int128 v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  char *v145;
  char *v146;
  __int128 v147;
  std::string *v148;
  uint64_t v149;
  int v150;
  std::string *v151;
  std::vector<std::string>::pointer m;
  std::vector<std::string>::pointer v153;
  std::vector<std::string>::pointer v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  unsigned __int8 *v159;
  uint64_t v160;
  std::vector<std::string>::pointer v161;
  std::vector<std::string>::pointer v162;
  __int128 v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  char *v167;
  char *v168;
  __int128 v169;
  std::string *v170;
  std::string *v171;
  std::vector<std::string>::pointer n;
  uint64_t v173;
  std::vector<std::string>::pointer v174;
  __int128 v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  char *v179;
  std::vector<std::string>::pointer v180;
  std::vector<std::string>::pointer v181;
  std::string::size_type v182;
  std::string::size_type v183;
  unint64_t v184;
  int v185;
  std::string::size_type v186;
  std::string::size_type v187;
  BOOL v188;
  size_t v189;
  std::vector<std::string>::pointer v190;
  std::string::size_type v192;
  _QWORD *v193;
  int v194;
  BOOL v195;
  uint64_t v196;
  std::vector<std::string>::pointer v197;
  __int128 v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  char *v202;
  __int128 *v203;
  uint64_t v204;
  char *v205;
  __int128 v206;
  std::string *v207;
  char *v208;
  __int128 v209;
  std::string *v210;
  std::vector<std::string>::pointer v211;
  int v212;
  std::vector<std::string>::pointer v213;
  std::vector<std::string>::pointer v214;
  __int128 *v215;
  __int128 v216;
  uint64_t v217;
  std::string *v218;
  __int128 *v219;
  void **v220;
  unint64_t v221;
  std::string *v222;
  std::wstring *v223;
  std::wstring *v224;
  std::wstring::value_type data;
  uint64_t v226;
  uint64_t v227;
  int v228;
  const std::wstring::value_type *begin;
  std::vector<std::string>::pointer value_high;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unsigned __int8 *v241;
  __int128 v242;
  uint64_t v243;
  std::string v244;
  _QWORD v245[2];
  _QWORD v246[11];
  char v247;
  uint64_t v248;
  std::vector<std::string> v249;
  std::string *__str;
  int v251[2];
  uint64_t v252;
  std::string __b;
  uint64_t **v254;
  uint64_t *v255;
  uint64_t v256;
  std::wstring v257;
  std::vector<std::string> v258;
  __int128 v259;
  std::string::size_type v260;
  __int128 __s;
  uint64_t v262;
  void (**v263)();
  uint64_t v264;
  std::vector<std::string> v265;
  __int128 __p;
  __int128 v267;
  __n128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 __v;
  _BYTE __v_16[32];
  uint64_t v276;
  __int128 v277;
  __int128 v278;
  __n128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  uint64_t v285;
  uint64_t v286;

  v3 = result;
  v286 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(result + 4712) && !*(_BYTE *)(result + 4720))
    return result;
  v239 = *a2;
  v234 = a2[1];
  if (*a2 == v234)
    return result;
  v237 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v238 = *MEMORY[0x1E0DE4F50];
  v236 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  v240 = result + 4688;
  v232 = result + 4728;
  v235 = (_QWORD *)(result + 4864);
  v233 = MEMORY[0x1E0DE4FB8] + 16;
  v241 = (unsigned __int8 *)(result + 4711);
  do
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v245);
    v5 = *(const std::string **)v239;
    v4 = *(const std::string **)(v239 + 8);
    while (v5 != v4)
    {
      __v = 0uLL;
      *(_QWORD *)__v_16 = 0;
      kaldi::SplitStringToVector(v5, "\\", 1, (uint64_t)&__v);
      if (*((_QWORD *)&__v + 1) != (_QWORD)__v)
      {
        __p = 0uLL;
        *(_QWORD *)&v267 = 0;
        memset(&v265, 0, sizeof(v265));
        kaldi::SplitStringToVector((const std::string *)__v, "_", 1, (uint64_t)&v265);
        kaldi::JoinVectorToString<std::string>((uint64_t *)&v265, (uint64_t)&__p);
        if ((SBYTE7(v267) & 0x80u) == 0)
          p_p = &__p;
        else
          p_p = (__int128 *)__p;
        if ((SBYTE7(v267) & 0x80u) == 0)
          v7 = BYTE7(v267);
        else
          v7 = *((_QWORD *)&__p + 1);
        v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v246, (uint64_t)p_p, v7);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
        *(_QWORD *)&__s = &v265;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
        if (SBYTE7(v267) < 0)
          operator delete((void *)__p);
      }
      *(_QWORD *)&__p = &__v;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      v5 += 10;
    }
    std::stringbuf::str();
    kaldi::Trim(&v244);
    if (!*(_QWORD *)(v3 + 4712) && !v241[9])
    {
      std::string::basic_string[abi:ne180100]<0>(&v242, &byte_1DEBD87CE);
      goto LABEL_507;
    }
    std::wstring_convert<std::codecvt_utf8<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::wstring_convert[abi:ne180100]((uint64_t)&__v);
    if ((v244.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v244;
    else
      v9 = (std::string *)v244.__r_.__value_.__r.__words[0];
    if ((v244.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v244.__r_.__value_.__r.__words[2]);
    else
      size = v244.__r_.__value_.__l.__size_;
    v285 = 0;
    if (!v276)
      goto LABEL_57;
    v11 = 2 * size;
    if (2 * size >= 0x3FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v11 >= 5)
    {
      v13 = v11 + 2;
      if ((v11 | 1) != 5)
        v13 = v11 | 1;
      v12 = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v13 + 1);
      v257.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
      v257.__r_.__value_.__r.__words[0] = (std::wstring::size_type)v12;
      v257.__r_.__value_.__l.__size_ = 2 * size;
LABEL_33:
      v15 = (unint64_t)v9 + size;
      v16 = -2 * size;
      v17 = v12;
      do
      {
        *v17++ = 0;
        v188 = __CFADD__(v16++, 1);
      }
      while (!v188);
      v12[2 * size] = 0;
      if (size)
      {
        if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = 4;
        else
          v18 = (v257.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        std::wstring::resize(&v257, v18, 0);
        v270 = v281;
        v271 = v282;
        v272 = v283;
        v273 = v284;
        __p = v277;
        v267 = v278;
        v19 = v279;
        v20 = HIBYTE(v257.__r_.__value_.__r.__words[2]);
        if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v21 = &v257;
        else
          v21 = (std::wstring *)v257.__r_.__value_.__r.__words[0];
        if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v20 = v257.__r_.__value_.__l.__size_;
        v22 = (char *)v21 + 4 * v20;
        v268 = v279;
        v269 = v280;
        while (1)
        {
          v23 = (*(uint64_t (**)(uint64_t, __int128 *, std::string *, unint64_t, __int128 *, std::wstring *, char *, __int128 *, __n128))(*(_QWORD *)v276 + 32))(v276, &__p, v9, v15, &__s, v21, v22, &v259, v19);
          v285 += __s - (_QWORD)v9;
          if ((std::string *)__s == v9)
            goto LABEL_71;
          if (v23 != 1)
            break;
          if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v24 = &v257;
          else
            v24 = (std::wstring *)v257.__r_.__value_.__r.__words[0];
          v25 = v259 - (_QWORD)v24;
          std::wstring::resize(&v257, (uint64_t)(v259 - (_QWORD)v24) >> 1, 0);
          v26 = HIBYTE(v257.__r_.__value_.__r.__words[2]);
          v27 = (std::wstring *)v257.__r_.__value_.__r.__words[0];
          if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = &v257;
          v21 = (std::wstring *)((char *)v27 + v25);
          if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v26 = v257.__r_.__value_.__l.__size_;
          v22 = (char *)v27 + 4 * v26;
          v9 = (std::string *)__s;
          if ((unint64_t)__s >= v15)
          {
            if ((*((_BYTE *)&v257.__r_.__value_.__s + 23) & 0x80) == 0)
              goto LABEL_57;
LABEL_72:
            operator delete(v257.__r_.__value_.__l.__data_);
LABEL_57:
            if ((__v_16[31] & 0x80000000) == 0)
            {
              if (__v_16[31])
              {
                v257 = *(std::wstring *)&__v_16[8];
                goto LABEL_78;
              }
LABEL_553:
              std::__throw_range_error[abi:ne180100]("wstring_convert: from_bytes error");
            }
            if (!*(_QWORD *)&__v_16[16])
              goto LABEL_553;
            std::wstring::__init_copy_ctor_external(&v257, *(const std::wstring::value_type **)&__v_16[8], *(std::wstring::size_type *)&__v_16[16]);
            goto LABEL_78;
          }
        }
        if (v23)
        {
          if (v23 != 3)
          {
LABEL_71:
            if ((*((_BYTE *)&v257.__r_.__value_.__s + 23) & 0x80) != 0)
              goto LABEL_72;
            goto LABEL_57;
          }
          if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v28 = &v257;
          else
            v28 = (std::wstring *)v257.__r_.__value_.__r.__words[0];
          std::wstring::resize(&v257, ((char *)v21 - (char *)v28) >> 2, 0);
          v29 = HIBYTE(v257.__r_.__value_.__r.__words[2]);
          if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
          {
            v30 = v15 - (_QWORD)v9;
            if ((std::string *)v15 == v9)
              goto LABEL_78;
            v33 = (v257.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
            v31 = v257.__r_.__value_.__l.__size_;
            v32 = (std::wstring *)v257.__r_.__value_.__r.__words[0];
            v29 = HIBYTE(v257.__r_.__value_.__r.__words[2]);
          }
          else
          {
            v30 = v15 - (_QWORD)v9;
            if ((std::string *)v15 == v9)
              goto LABEL_78;
            v31 = HIBYTE(v257.__r_.__value_.__r.__words[2]);
            v32 = &v257;
            v33 = 4;
          }
          v221 = v30 >> 2;
          if (v32 > (std::wstring *)v9 || (char *)v32->__r_.__value_.__r.__words + 4 * v31 + 4 <= (char *)v9)
          {
            if (v33 - v31 < v221)
            {
              std::wstring::__grow_by(&v257, v33, v31 - v33 + v221, v31, v31, 0, 0);
              v257.__r_.__value_.__l.__size_ = v31;
              v29 = HIBYTE(v257.__r_.__value_.__r.__words[2]);
            }
            if (v29 >= 0)
              v223 = &v257;
            else
              v223 = (std::wstring *)v257.__r_.__value_.__r.__words[0];
            v224 = (std::wstring *)((char *)v223 + 4 * v31);
            while (v9 != (std::string *)v15)
            {
              data = (std::wstring::value_type)v9->__r_.__value_.__l.__data_;
              v9 = (std::string *)((char *)v9 + 4);
              v224->__r_.__value_.__s.__data_[0] = data;
              v224 = (std::wstring *)((char *)v224 + 4);
            }
            v224->__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
              v257.__r_.__value_.__l.__size_ = v221 + v31;
            else
              *((_BYTE *)&v257.__r_.__value_.__s + 23) = (v221 + v31) & 0x7F;
          }
          else
          {
            if (v30 < 0)
              std::string::__throw_length_error[abi:ne180100]();
            if ((unint64_t)v30 > 0x13)
            {
              v226 = (v221 & 0xFFFFFFFFFFFFFFFELL) + 2;
              if ((v221 | 1) != 5)
                v226 = v221 | 1;
              v222 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v226 + 1);
              v265.__end_cap_.__value_ = (std::string *)(v227 | 0x8000000000000000);
              v265.__begin_ = v222;
              v265.__end_ = (std::vector<std::string>::pointer)v221;
            }
            else
            {
              HIBYTE(v265.__end_cap_.__value_) = (unint64_t)v30 >> 2;
              v222 = (std::string *)&v265;
            }
            while (v9 != (std::string *)v15)
            {
              v228 = (int)v9->__r_.__value_.__l.__data_;
              v9 = (std::string *)((char *)v9 + 4);
              LODWORD(v222->__r_.__value_.__l.__data_) = v228;
              v222 = (std::string *)((char *)v222 + 4);
            }
            LODWORD(v222->__r_.__value_.__l.__data_) = 0;
            if (SHIBYTE(v265.__end_cap_.__value_) >= 0)
              begin = (const std::wstring::value_type *)&v265;
            else
              begin = (const std::wstring::value_type *)v265.__begin_;
            if (SHIBYTE(v265.__end_cap_.__value_) >= 0)
              value_high = (std::vector<std::string>::pointer)HIBYTE(v265.__end_cap_.__value_);
            else
              value_high = v265.__end_;
            std::wstring::append(&v257, begin, (std::wstring::size_type)value_high);
            if (SHIBYTE(v265.__end_cap_.__value_) < 0)
              operator delete(v265.__begin_);
          }
        }
        else
        {
          if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v34 = &v257;
          else
            v34 = (std::wstring *)v257.__r_.__value_.__r.__words[0];
          std::wstring::resize(&v257, (uint64_t)(v259 - (_QWORD)v34) >> 2, 0);
        }
      }
      goto LABEL_78;
    }
    *((_BYTE *)&v257.__r_.__value_.__s + 23) = 2 * size;
    if (size)
    {
      v12 = &v257;
      goto LABEL_33;
    }
    v257.__r_.__value_.__s.__data_[0] = 0;
LABEL_78:
    std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)&__v);
    std::wstring::basic_string[abi:ne180100]<0>(&__v, (__int32 *)"\t");
    std::wstring::basic_string[abi:ne180100]<0>(&__v_16[8], (__int32 *)"\n");
    std::wstring::basic_string[abi:ne180100]<0>(&v276, (__int32 *)&unk_1DED10864);
    v35 = 0;
    v36 = 0;
    v255 = 0;
    v256 = 0;
    v254 = &v255;
    while (1)
    {
      v37 = &__v_16[24 * v36 - 16];
      if (v254 == &v255)
      {
        v39 = &v255;
      }
      else
      {
        v38 = &v255;
        if (v35)
        {
          do
          {
            v39 = (uint64_t **)v35;
            v35 = (uint64_t *)v35[1];
          }
          while (v35);
        }
        else
        {
          do
          {
            v39 = (uint64_t **)v38[2];
            v195 = *v39 == (uint64_t *)v38;
            v38 = v39;
          }
          while (v195);
        }
        v40 = std::less<std::wstring>::operator()[abi:ne180100]((const __int32 *)v39 + 8, (const __int32 *)&__v_16[24 * v36 - 16]);
        v35 = v255;
        if (!v40)
        {
          v41 = &v255;
          v42 = &v255;
          if (v255)
          {
            v42 = &v255;
            while (1)
            {
              while (1)
              {
                v41 = (uint64_t **)v35;
                v43 = (const __int32 *)(v35 + 4);
                if (!std::less<std::wstring>::operator()[abi:ne180100]((const __int32 *)&__v_16[24 * v36 - 16], (const __int32 *)v35 + 8))break;
                v35 = *v41;
                v42 = v41;
                if (!*v41)
                  goto LABEL_97;
              }
              if (!std::less<std::wstring>::operator()[abi:ne180100](v43, (const __int32 *)&__v_16[24 * v36 - 16]))break;
              v42 = v41 + 1;
              v35 = v41[1];
              if (!v35)
                goto LABEL_97;
            }
LABEL_96:
            if (*v42)
              goto LABEL_103;
            goto LABEL_97;
          }
          goto LABEL_97;
        }
      }
      v41 = &v255;
      v42 = &v255;
      if (v35)
      {
        v42 = v39 + 1;
        v41 = v39;
        goto LABEL_96;
      }
LABEL_97:
      v44 = (uint64_t *)operator new(0x38uLL);
      v45 = (std::wstring *)(v44 + 4);
      if ((char)v37[23] < 0)
      {
        std::wstring::__init_copy_ctor_external(v45, *(const std::wstring::value_type **)v37, *((_QWORD *)v37 + 1));
      }
      else
      {
        *(_OWORD *)&v45->__r_.__value_.__l.__data_ = *(_OWORD *)v37;
        v44[6] = *((_QWORD *)v37 + 2);
      }
      *v44 = 0;
      v44[1] = 0;
      v44[2] = (uint64_t)v41;
      *v42 = v44;
      if (*v254)
      {
        v254 = (uint64_t **)*v254;
        v44 = *v42;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v255, v44);
      ++v256;
LABEL_103:
      if (++v36 == 3)
        break;
      v35 = v255;
    }
    for (i = 0; i != -72; i -= 24)
    {
      if (*((char *)&v277 + i + 15) < 0)
        operator delete(*(void **)((char *)&v276 + i));
    }
    v47 = v254;
    if (v254 != &v255)
    {
      do
      {
        std::wstring::basic_string[abi:ne180100]<0>(&__v, (__int32 *)&unk_1DED1086C);
        v48 = v3;
        v49 = 0;
        v50 = HIBYTE(v257.__r_.__value_.__r.__words[2]);
        if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v51 = &v257;
        else
          v51 = (std::wstring *)v257.__r_.__value_.__r.__words[0];
        if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v50 = v257.__r_.__value_.__l.__size_;
        v52 = *((_BYTE *)v47 + 55);
        if (v52 >= 0)
          v53 = (const __int32 *)(v47 + 4);
        else
          v53 = (const __int32 *)v47[4];
        if (v52 >= 0)
          v54 = *((unsigned __int8 *)v47 + 55);
        else
          v54 = (int64_t)v47[5];
        while (!v54)
        {
LABEL_131:
          if (v49 != -1)
          {
            if (__v_16[7] >= 0)
              v62 = __v_16[7];
            else
              v62 = *((_QWORD *)&__v + 1);
            if (__v_16[7] >= 0)
              p_v = (const std::wstring::value_type *)&__v;
            else
              p_v = (const std::wstring::value_type *)__v;
            std::wstring::replace(&v257, v49, v62, p_v, v62);
            v64 = __v_16[7];
            if (__v_16[7] < 0)
              v64 = *((_QWORD *)&__v + 1);
            v49 += v64;
            v50 = HIBYTE(v257.__r_.__value_.__r.__words[2]);
            if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v51 = &v257;
            else
              v51 = (std::wstring *)v257.__r_.__value_.__r.__words[0];
            if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v50 = v257.__r_.__value_.__l.__size_;
            v65 = *((char *)v47 + 55);
            v53 = v65 >= 0 ? (const __int32 *)(v47 + 4) : (const __int32 *)v47[4];
            v54 = v65 >= 0 ? *((unsigned __int8 *)v47 + 55) : (int64_t)v47[5];
            if (v50 >= v49)
              continue;
          }
          goto LABEL_152;
        }
        v55 = (__int32 *)((char *)v51 + 4 * v49);
        v56 = (__int32 *)((char *)v51 + 4 * v50);
        v57 = v56 - v55;
        if (v57 >= v54)
        {
          v58 = *v53;
          do
          {
            v59 = v57 - v54;
            if (v59 == -1)
              break;
            v60 = wmemchr(v55, v58, v59 + 1);
            if (!v60)
              break;
            v61 = v60;
            if (!wmemcmp(v60, v53, v54))
            {
              if (v61 == v56)
                break;
              v49 = ((char *)v61 - (char *)v51) >> 2;
              goto LABEL_131;
            }
            v55 = v61 + 1;
            v57 = v56 - (v61 + 1);
          }
          while (v57 >= v54);
        }
LABEL_152:
        if ((__v_16[7] & 0x80000000) != 0)
          operator delete((void *)__v);
        v66 = v47[1];
        v3 = v48;
        if (v66)
        {
          do
          {
            v67 = (uint64_t **)v66;
            v66 = (uint64_t *)*v66;
          }
          while (v66);
        }
        else
        {
          do
          {
            v67 = (uint64_t **)v47[2];
            v195 = *v67 == (uint64_t *)v47;
            v47 = v67;
          }
          while (!v195);
        }
        v47 = v67;
      }
      while (v67 != &v255);
    }
    std::wstring_convert<std::codecvt_utf8<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::wstring_convert[abi:ne180100]((uint64_t)&__v);
    if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v68 = (std::string *)&v257;
    else
      v68 = (std::string *)v257.__r_.__value_.__r.__words[0];
    if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v69 = HIBYTE(v257.__r_.__value_.__r.__words[2]);
    else
      v69 = v257.__r_.__value_.__l.__size_;
    v285 = 0;
    if (!v276)
      goto LABEL_226;
    std::string::basic_string[abi:ne180100](&__b, 2 * v69, 0);
    if (!v69)
    {
      v270 = v281;
      v271 = v282;
      v272 = v283;
      v273 = v284;
      __p = v277;
      v267 = v278;
      v268 = v279;
      v269 = v280;
      goto LABEL_200;
    }
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v70 = 22;
    else
      v70 = (__b.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    std::string::resize(&__b, v70, 0);
    v71 = (std::string *)((char *)v68 + 4 * v69);
    v270 = v281;
    v271 = v282;
    v272 = v283;
    v273 = v284;
    __p = v277;
    v267 = v278;
    v72 = v279;
    v73 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_b = &__b;
    else
      p_b = (std::string *)__b.__r_.__value_.__r.__words[0];
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v73 = __b.__r_.__value_.__l.__size_;
    v75 = (char *)p_b + v73;
    v268 = v279;
    v269 = v280;
    while (1)
    {
      v76 = (*(uint64_t (**)(uint64_t, __int128 *, std::string *, std::string *, std::vector<std::string> *, std::string *, char *, __int128 *, __n128))(*(_QWORD *)v276 + 24))(v276, &__p, v68, v71, &v265, p_b, v75, &__s, v72);
      v285 += ((char *)v265.__begin_ - (char *)v68) >> 2;
      if (v265.__begin_ == v68)
        goto LABEL_224;
      if (v76 != 1)
        break;
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v77 = &__b;
      else
        v77 = (std::string *)__b.__r_.__value_.__r.__words[0];
      v78 = __s - (_QWORD)v77;
      std::string::resize(&__b, 2 * (__s - (_QWORD)v77), 0);
      v79 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v80 = &__b;
      else
        v80 = (std::string *)__b.__r_.__value_.__r.__words[0];
      p_b = (std::string *)((char *)v80 + v78);
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v79 = __b.__r_.__value_.__l.__size_;
      v75 = (char *)v80 + v79;
      v68 = v265.__begin_;
      if (v265.__begin_ >= v71)
        goto LABEL_224;
    }
    if (v76)
    {
      if (v76 == 3)
      {
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v81 = &__b;
        else
          v81 = (std::string *)__b.__r_.__value_.__r.__words[0];
        std::string::resize(&__b, (char *)p_b - (char *)v81, 0);
        std::string::append[abi:ne180100]<char const*,0>(&__b, (char *)v68, (char *)v71);
        goto LABEL_200;
      }
LABEL_224:
      if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__b.__r_.__value_.__l.__data_);
LABEL_226:
      if ((__v_16[7] & 0x80000000) == 0)
      {
        if (__v_16[7])
        {
          *(_OWORD *)&__b.__r_.__value_.__l.__data_ = __v;
          __b.__r_.__value_.__r.__words[2] = *(_QWORD *)__v_16;
          goto LABEL_236;
        }
LABEL_549:
        std::__throw_range_error[abi:ne180100]("wstring_convert: to_bytes error");
      }
      if (!*((_QWORD *)&__v + 1))
        goto LABEL_549;
      std::string::__init_copy_ctor_external(&__b, (const std::string::value_type *)__v, *((std::string::size_type *)&__v + 1));
    }
    else
    {
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v82 = &__b;
      else
        v82 = (std::string *)__b.__r_.__value_.__r.__words[0];
      std::string::resize(&__b, __s - (_QWORD)v82, 0);
LABEL_200:
      v83 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
      v84 = __b.__r_.__value_.__l.__size_;
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v85 = 22;
      else
        v85 = (__b.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      std::string::resize(&__b, v85, 0);
      if ((v83 & 0x80u) == 0)
        v86 = v83;
      else
        v86 = v84;
      v87 = &__b;
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v87 = (std::string *)__b.__r_.__value_.__r.__words[0];
      v88 = (std::string *)((char *)v87 + v86);
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v89 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
      else
        v89 = __b.__r_.__value_.__l.__size_;
      for (j = (char *)v88 + v89; ; j = (char *)v95 + v94)
      {
        v91 = (*(uint64_t (**)(uint64_t, __int128 *, std::vector<std::string>::pointer, char *, std::vector<std::string> *))(*(_QWORD *)v276 + 40))(v276, &__p, v88, j, &v265);
        if (v91 != 1)
          break;
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v92 = &__b;
        else
          v92 = (std::string *)__b.__r_.__value_.__r.__words[0];
        v93 = (char *)((char *)v265.__begin_ - (char *)v92);
        std::string::resize(&__b, 2 * ((char *)v265.__begin_ - (char *)v92), 0);
        v94 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v95 = &__b;
        else
          v95 = (std::string *)__b.__r_.__value_.__r.__words[0];
        v88 = (std::vector<std::string>::pointer)&v93[(_QWORD)v95];
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v94 = __b.__r_.__value_.__l.__size_;
      }
      if (v91)
      {
        if (v91 != 3)
          goto LABEL_224;
      }
      else
      {
        v88 = v265.__begin_;
      }
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v96 = &__b;
      else
        v96 = (std::string *)__b.__r_.__value_.__r.__words[0];
      std::string::resize(&__b, (char *)v88 - (char *)v96, 0);
    }
LABEL_236:
    std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)&__v);
    *(_QWORD *)v251 = 0;
    __str = 0;
    v252 = 0;
    kaldi::SplitStringToVector(&__b, " ", 1, (uint64_t)&__str);
    memset(&v249, 0, sizeof(v249));
    if (!*(_QWORD *)(v3 + 4712) && !v241[9])
      goto LABEL_503;
    v97 = __str;
    if (__str == *(std::string **)v251)
      goto LABEL_503;
    if (!v241[9])
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v249, __str, *(__int128 **)v251, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v251 - (_QWORD)__str) >> 3));
      goto LABEL_487;
    }
    if (v241[10])
    {
      v98 = 0;
      do
      {
        memset(&v265, 0, sizeof(v265));
        v99 = &v97[v98];
        v100 = HIBYTE(v99->__r_.__value_.__r.__words[2]);
        v101 = (v99->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
        v102 = v99->__r_.__value_.__l.__size_;
        if ((v99->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v103 = HIBYTE(v99->__r_.__value_.__r.__words[2]);
        else
          v103 = v99->__r_.__value_.__l.__size_;
        if (v103)
        {
          v104 = 0;
          do
          {
            v105 = (std::string *)v99->__r_.__value_.__r.__words[0];
            if (!v101)
              v105 = v99;
            v106 = v105->__r_.__value_.__s.__data_[v104];
            if ((v106 & 0xF8) == 0xF0)
            {
              v107 = 4;
            }
            else if ((v106 & 0xF0) == 0xE0)
            {
              v107 = 3;
            }
            else
            {
              v195 = (v106 & 0xE0) == 192;
              v107 = 1;
              if (v195)
                v107 = 2;
            }
            if (v101)
              v100 = v102;
            if (v104 + v107 > v100)
              v108 = 1;
            else
              v108 = v107;
            std::string::basic_string((std::string *)&__p, v99, v104, v108, (std::allocator<char> *)&__v);
            end = v265.__end_;
            if (v265.__end_ >= v265.__end_cap_.__value_)
            {
              v111 = 0xAAAAAAAAAAAAAAABLL * (((char *)v265.__end_ - (char *)v265.__begin_) >> 3);
              v112 = v111 + 1;
              if (v111 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)v265.__end_cap_.__value_ - (char *)v265.__begin_) >> 3) > v112)
                v112 = 0x5555555555555556 * (((char *)v265.__end_cap_.__value_ - (char *)v265.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v265.__end_cap_.__value_ - (char *)v265.__begin_) >> 3) >= 0x555555555555555)
                v113 = 0xAAAAAAAAAAAAAAALL;
              else
                v113 = v112;
              *(_QWORD *)&__v_16[16] = &v265.__end_cap_;
              if (v113)
                v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v265.__end_cap_, v113);
              else
                v114 = 0;
              v115 = &v114[24 * v111];
              *(_QWORD *)&__v = v114;
              *((_QWORD *)&__v + 1) = v115;
              *(_QWORD *)&__v_16[8] = &v114[24 * v113];
              v116 = __p;
              *((_QWORD *)v115 + 2) = v267;
              *(_OWORD *)v115 = v116;
              *(_QWORD *)&v267 = 0;
              __p = 0uLL;
              *(_QWORD *)__v_16 = v115 + 24;
              std::vector<std::string>::__swap_out_circular_buffer(&v265, (std::__split_buffer<std::string> *)&__v);
              v117 = v265.__end_;
              std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&__v);
              v265.__end_ = v117;
              if (SBYTE7(v267) < 0)
                operator delete((void *)__p);
            }
            else
            {
              v110 = __p;
              v265.__end_->__r_.__value_.__r.__words[2] = v267;
              *(_OWORD *)&end->__r_.__value_.__l.__data_ = v110;
              v265.__end_ = end + 1;
            }
            v104 += v108;
            v100 = HIBYTE(v99->__r_.__value_.__r.__words[2]);
            v101 = (v99->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
            v102 = v99->__r_.__value_.__l.__size_;
            if ((v99->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v118 = HIBYTE(v99->__r_.__value_.__r.__words[2]);
            else
              v118 = v99->__r_.__value_.__l.__size_;
          }
          while (v104 < v118);
          v119 = v265.__begin_;
          v120 = v265.__end_;
          if (v265.__begin_ != v265.__end_)
          {
            v121 = v249.__end_;
            do
            {
              if (v121 >= v249.__end_cap_.__value_)
              {
                v121 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v249, (__int128 *)v119);
              }
              else
              {
                if (SHIBYTE(v119->__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(v121, v119->__r_.__value_.__l.__data_, v119->__r_.__value_.__l.__size_);
                }
                else
                {
                  v122 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
                  v121->__r_.__value_.__r.__words[2] = v119->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v121->__r_.__value_.__l.__data_ = v122;
                }
                ++v121;
              }
              v249.__end_ = v121;
              ++v119;
            }
            while (v119 != v120);
          }
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v251 - (_QWORD)__str) >> 3) > ++v98)
        {
          v123 = v249.__end_;
          if (v249.__end_ >= v249.__end_cap_.__value_)
          {
            v125 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v249, (__int128 *)v240);
          }
          else
          {
            if ((char)*v241 < 0)
            {
              std::string::__init_copy_ctor_external(v249.__end_, *(const std::string::value_type **)(v3 + 4688), *(_QWORD *)(v3 + 4696));
            }
            else
            {
              v124 = *(_OWORD *)v240;
              v249.__end_->__r_.__value_.__r.__words[2] = *(_QWORD *)(v240 + 16);
              *(_OWORD *)&v123->__r_.__value_.__l.__data_ = v124;
            }
            v125 = v123 + 1;
          }
          v249.__end_ = v125;
        }
        *(_QWORD *)&__v = &v265;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
        v97 = __str;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v251 - (_QWORD)__str) >> 3) > v98);
    }
    else if (kaldi::quasar::TorchEncoderDecoder::HasBpeModel((kaldi::quasar::TorchEncoderDecoder *)v3))
    {
      kaldi::quasar::BPE::Apply(v232, (__int128 **)&__str, (uint64_t *)&v249);
    }
    else
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v249, __str, *(__int128 **)v251, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v251 - (_QWORD)__str) >> 3));
    }
    memset(&v258, 0, sizeof(v258));
    __p = 0uLL;
    *(_QWORD *)&v267 = 0;
    kaldi::quasar::TorchEncoderDecoder::Symbolize(v3, (__int128 **)&v249, (uint64_t)&__p, 0, 0);
    v126 = kaldi::quasar::TorchEncoderDecoder::Reverse((kaldi::quasar::TorchEncoderDecoder *)v3);
    v128 = (_DWORD *)*((_QWORD *)&__p + 1);
    v127 = (_DWORD *)__p;
    if (v126 && (_QWORD)__p != *((_QWORD *)&__p + 1))
    {
      v129 = (_DWORD *)(*((_QWORD *)&__p + 1) - 4);
      if (*((_QWORD *)&__p + 1) - 4 > (unint64_t)__p)
      {
        v130 = __p + 4;
        do
        {
          v131 = *(_DWORD *)(v130 - 4);
          *(_DWORD *)(v130 - 4) = *v129;
          *v129-- = v131;
          v188 = v130 >= (unint64_t)v129;
          v130 += 4;
        }
        while (!v188);
      }
    }
    while (v127 != v128)
      --*v127++;
    memset(&v265, 0, sizeof(v265));
    kaldi::JoinVectorToString<int>(&__p, " ", (uint64_t)&v265);
    fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>::VectorFst(&v263);
    __s = 0uLL;
    v262 = 0;
    kaldi::quasar::TMTools::GreedyDecode<kaldi::quasar::TorchEncoderDecoder>((kaldi::quasar::TorchEncoderDecoder *)v3, (uint64_t *)&__p, (uint64_t)&__s, a3, (uint64_t)&v263, 0, 100);
    v132 = v258.__begin_;
    for (k = v258.__end_; k != v132; --k)
    {
      if (SHIBYTE(k[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(k[-1].__r_.__value_.__l.__data_);
    }
    v258.__end_ = v132;
    v135 = (int *)*((_QWORD *)&__s + 1);
    v134 = (int *)__s;
    if ((_QWORD)__s != *((_QWORD *)&__s + 1))
    {
      while (2)
      {
        v136 = *v134;
        if (kaldi::quasar::TorchEncoderDecoder::OutputSymbols((kaldi::quasar::TorchEncoderDecoder *)v3))
        {
          v137 = kaldi::quasar::TorchEncoderDecoder::OutputSymbols((kaldi::quasar::TorchEncoderDecoder *)v3);
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v137 + 88))(&__v, v137, v136);
          if ((__v_16[7] & 0x80000000) != 0)
          {
            v141 = *((_QWORD *)&__v + 1);
            operator delete((void *)__v);
            if (v141)
              goto LABEL_318;
          }
          else if (__v_16[7])
          {
LABEL_318:
            v138 = kaldi::quasar::TorchEncoderDecoder::OutputSymbols((kaldi::quasar::TorchEncoderDecoder *)v3);
            (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v138 + 88))(&v259, v138, v136);
            v139 = v258.__end_;
            if (v258.__end_ >= v258.__end_cap_.__value_)
            {
              v142 = 0xAAAAAAAAAAAAAAABLL * (((char *)v258.__end_ - (char *)v258.__begin_) >> 3);
              v143 = v142 + 1;
              if (v142 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)v258.__end_cap_.__value_ - (char *)v258.__begin_) >> 3) > v143)
                v143 = 0x5555555555555556 * (((char *)v258.__end_cap_.__value_ - (char *)v258.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v258.__end_cap_.__value_ - (char *)v258.__begin_) >> 3) >= 0x555555555555555)
                v144 = 0xAAAAAAAAAAAAAAALL;
              else
                v144 = v143;
              *(_QWORD *)&__v_16[16] = &v258.__end_cap_;
              if (v144)
                v145 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v258.__end_cap_, v144);
              else
                v145 = 0;
              v146 = &v145[24 * v142];
              *(_QWORD *)&__v = v145;
              *((_QWORD *)&__v + 1) = v146;
              *(_QWORD *)&__v_16[8] = &v145[24 * v144];
              v147 = v259;
              *((_QWORD *)v146 + 2) = v260;
              *(_OWORD *)v146 = v147;
              v260 = 0;
              v259 = 0uLL;
              *(_QWORD *)__v_16 = v146 + 24;
              std::vector<std::string>::__swap_out_circular_buffer(&v258, (std::__split_buffer<std::string> *)&__v);
              v148 = v258.__end_;
              std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&__v);
              v258.__end_ = v148;
              if (SHIBYTE(v260) < 0)
                operator delete((void *)v259);
            }
            else
            {
              v140 = v259;
              v258.__end_->__r_.__value_.__r.__words[2] = v260;
              *(_OWORD *)&v139->__r_.__value_.__l.__data_ = v140;
              v258.__end_ = v139 + 1;
            }
            goto LABEL_334;
          }
        }
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__v, "GreedyDecode", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-model-tools.h", 199);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v, (uint64_t)"no symbol ", 10);
          std::ostream::operator<<();
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__v);
        }
LABEL_334:
        if (++v134 == v135)
        {
          v134 = (int *)__s;
          break;
        }
        continue;
      }
    }
    if (v134)
    {
      *((_QWORD *)&__s + 1) = v134;
      operator delete(v134);
    }
    v263 = off_1EA925BE0;
    v149 = v264;
    if (v264)
    {
      v150 = *(_DWORD *)(v264 + 56) - 1;
      *(_DWORD *)(v264 + 56) = v150;
      if (!v150)
        (*(void (**)(uint64_t))(*(_QWORD *)v149 + 8))(v149);
    }
    if (SHIBYTE(v265.__end_cap_.__value_) < 0)
      operator delete(v265.__begin_);
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    v151 = v249.__begin_;
    for (m = v249.__end_; m != v151; --m)
    {
      if (SHIBYTE(m[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(m[-1].__r_.__value_.__l.__data_);
    }
    v249.__end_ = v151;
    if (!v241[10])
    {
      if (!kaldi::quasar::TorchEncoderDecoder::HasBpeModel((kaldi::quasar::TorchEncoderDecoder *)v3))
      {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v249, v258.__begin_, (__int128 *)v258.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v258.__end_ - (char *)v258.__begin_) >> 3));
        goto LABEL_486;
      }
      v171 = v249.__begin_;
      for (n = v249.__end_; n != v171; --n)
      {
        if (SHIBYTE(n[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(n[-1].__r_.__value_.__l.__data_);
      }
      v249.__end_ = v171;
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__v);
      v180 = v258.__begin_;
      v181 = v258.__end_;
      while (1)
      {
        if (v180 == v181)
          goto LABEL_483;
        v182 = HIBYTE(v180->__r_.__value_.__r.__words[2]);
        v183 = v180->__r_.__value_.__l.__size_;
        if ((v182 & 0x80u) == 0)
          v184 = HIBYTE(v180->__r_.__value_.__r.__words[2]);
        else
          v184 = v180->__r_.__value_.__l.__size_;
        v185 = (char)v241[176];
        if (v185 >= 0)
          v186 = v241[176];
        else
          v186 = *(_QWORD *)(v3 + 4872);
        v187 = v184 - v186;
        if (v184 < v186)
          goto LABEL_445;
        if ((v182 & 0x80) != 0)
        {
          if (v186 == -1 || v183 < v187)
LABEL_550:
            std::string::__throw_out_of_range[abi:ne180100]();
          v192 = v183 - v187;
          v189 = v192 >= v186 ? v186 : v192;
          v190 = (std::vector<std::string>::pointer)v180->__r_.__value_.__r.__words[0];
        }
        else
        {
          v188 = v186 != -1 && v182 >= v187;
          if (!v188)
            goto LABEL_550;
          v189 = v182 - v187 >= v186 ? v186 : v182 - v187;
          v190 = v180;
        }
        v193 = v185 >= 0 ? v235 : (_QWORD *)*v235;
        v194 = memcmp((char *)v190 + v187, v193, v189);
        v195 = v189 == v186 && v194 == 0;
        if (v195)
        {
          kaldi::quasar::BPE::StripSeparator(v232, v180, (std::string *)&__p);
          if ((SBYTE7(v267) & 0x80u) == 0)
            v203 = &__p;
          else
            v203 = (__int128 *)__p;
          if ((SBYTE7(v267) & 0x80u) == 0)
            v204 = BYTE7(v267);
          else
            v204 = *((_QWORD *)&__p + 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__v_16, (uint64_t)v203, v204);
        }
        else
        {
LABEL_445:
          if ((v182 & 0x80u) == 0)
            v196 = (uint64_t)v180;
          else
            v196 = v180->__r_.__value_.__r.__words[0];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__v_16, v196, v184);
          std::stringbuf::str();
          v197 = v249.__end_;
          if (v249.__end_ >= v249.__end_cap_.__value_)
          {
            v199 = 0xAAAAAAAAAAAAAAABLL * (((char *)v249.__end_ - (char *)v249.__begin_) >> 3);
            v200 = v199 + 1;
            if (v199 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * (((char *)v249.__end_cap_.__value_ - (char *)v249.__begin_) >> 3) > v200)
              v200 = 0x5555555555555556 * (((char *)v249.__end_cap_.__value_ - (char *)v249.__begin_) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v249.__end_cap_.__value_ - (char *)v249.__begin_) >> 3) >= 0x555555555555555)
              v201 = 0xAAAAAAAAAAAAAAALL;
            else
              v201 = v200;
            v268.n128_u64[0] = (unint64_t)&v249.__end_cap_;
            if (v201)
              v202 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v249.__end_cap_, v201);
            else
              v202 = 0;
            v205 = &v202[24 * v199];
            *(_QWORD *)&__p = v202;
            *((_QWORD *)&__p + 1) = v205;
            *((_QWORD *)&v267 + 1) = &v202[24 * v201];
            v206 = *(_OWORD *)&v265.__begin_;
            *((_QWORD *)v205 + 2) = v265.__end_cap_.__value_;
            *(_OWORD *)v205 = v206;
            memset(&v265, 0, sizeof(v265));
            *(_QWORD *)&v267 = v205 + 24;
            std::vector<std::string>::__swap_out_circular_buffer(&v249, (std::__split_buffer<std::string> *)&__p);
            v207 = v249.__end_;
            std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&__p);
            v249.__end_ = v207;
            if (SHIBYTE(v265.__end_cap_.__value_) < 0)
              operator delete(v265.__begin_);
          }
          else
          {
            v198 = *(_OWORD *)&v265.__begin_;
            v249.__end_->__r_.__value_.__r.__words[2] = (std::string::size_type)v265.__end_cap_.__value_;
            *(_OWORD *)&v197->__r_.__value_.__l.__data_ = v198;
            v249.__end_ = v197 + 1;
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, &byte_1DEBD87CE);
          std::string::operator=((std::string *)&v279, (const std::string *)&__p);
          std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)&__v_16[8]);
        }
        if (SBYTE7(v267) < 0)
          operator delete((void *)__p);
        ++v180;
      }
    }
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__v);
    v153 = v258.__begin_;
    v154 = v258.__end_;
    while (2)
    {
      if (v153 != v154)
      {
        v155 = HIBYTE(v153->__r_.__value_.__r.__words[2]);
        if ((v155 & 0x80u) == 0)
          v156 = HIBYTE(v153->__r_.__value_.__r.__words[2]);
        else
          v156 = v153->__r_.__value_.__l.__size_;
        v157 = *v241;
        v158 = (char)v157;
        if ((v157 & 0x80u) != 0)
          v157 = *(_QWORD *)(v3 + 4696);
        if (v156 != v157)
          goto LABEL_369;
        if (v158 >= 0)
          v159 = (unsigned __int8 *)v240;
        else
          v159 = *(unsigned __int8 **)v240;
        if ((v155 & 0x80) != 0)
        {
          if (memcmp(v153->__r_.__value_.__l.__data_, v159, v153->__r_.__value_.__l.__size_))
            goto LABEL_369;
        }
        else if (*((_BYTE *)&v153->__r_.__value_.__s + 23))
        {
          v160 = 0;
          while (v153->__r_.__value_.__s.__data_[v160] == v159[v160])
          {
            if (v155 == ++v160)
              goto LABEL_374;
          }
LABEL_369:
          if ((v155 & 0x80u) == 0)
            v161 = v153;
          else
            v161 = (std::vector<std::string>::pointer)v153->__r_.__value_.__r.__words[0];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__v_16, (uint64_t)v161, v156);
LABEL_373:
          ++v153;
          continue;
        }
LABEL_374:
        std::stringbuf::str();
        v162 = v249.__end_;
        if (v249.__end_ >= v249.__end_cap_.__value_)
        {
          v164 = 0xAAAAAAAAAAAAAAABLL * (((char *)v249.__end_ - (char *)v249.__begin_) >> 3);
          v165 = v164 + 1;
          if (v164 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * (((char *)v249.__end_cap_.__value_ - (char *)v249.__begin_) >> 3) > v165)
            v165 = 0x5555555555555556 * (((char *)v249.__end_cap_.__value_ - (char *)v249.__begin_) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v249.__end_cap_.__value_ - (char *)v249.__begin_) >> 3) >= 0x555555555555555)
            v166 = 0xAAAAAAAAAAAAAAALL;
          else
            v166 = v165;
          v268.n128_u64[0] = (unint64_t)&v249.__end_cap_;
          if (v166)
            v167 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v249.__end_cap_, v166);
          else
            v167 = 0;
          v168 = &v167[24 * v164];
          *(_QWORD *)&__p = v167;
          *((_QWORD *)&__p + 1) = v168;
          *((_QWORD *)&v267 + 1) = &v167[24 * v166];
          v169 = *(_OWORD *)&v265.__begin_;
          *((_QWORD *)v168 + 2) = v265.__end_cap_.__value_;
          *(_OWORD *)v168 = v169;
          memset(&v265, 0, sizeof(v265));
          *(_QWORD *)&v267 = v168 + 24;
          std::vector<std::string>::__swap_out_circular_buffer(&v249, (std::__split_buffer<std::string> *)&__p);
          v170 = v249.__end_;
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&__p);
          v249.__end_ = v170;
          if (SHIBYTE(v265.__end_cap_.__value_) < 0)
            operator delete(v265.__begin_);
        }
        else
        {
          v163 = *(_OWORD *)&v265.__begin_;
          v249.__end_->__r_.__value_.__r.__words[2] = (std::string::size_type)v265.__end_cap_.__value_;
          *(_OWORD *)&v162->__r_.__value_.__l.__data_ = v163;
          v249.__end_ = v162 + 1;
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, &byte_1DEBD87CE);
        std::string::operator=((std::string *)&v279, (const std::string *)&__p);
        std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)&__v_16[8]);
        if (SBYTE7(v267) < 0)
          operator delete((void *)__p);
        goto LABEL_373;
      }
      break;
    }
    std::stringbuf::str();
    if (SBYTE7(v267) < 0)
    {
      v173 = *((_QWORD *)&__p + 1);
      operator delete((void *)__p);
      if (!v173)
        goto LABEL_475;
    }
    else if (!BYTE7(v267))
    {
      goto LABEL_475;
    }
    std::stringbuf::str();
    v174 = v249.__end_;
    if (v249.__end_ >= v249.__end_cap_.__value_)
    {
      v176 = 0xAAAAAAAAAAAAAAABLL * (((char *)v249.__end_ - (char *)v249.__begin_) >> 3);
      v177 = v176 + 1;
      if (v176 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v249.__end_cap_.__value_ - (char *)v249.__begin_) >> 3) > v177)
        v177 = 0x5555555555555556 * (((char *)v249.__end_cap_.__value_ - (char *)v249.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v249.__end_cap_.__value_ - (char *)v249.__begin_) >> 3) >= 0x555555555555555)
        v178 = 0xAAAAAAAAAAAAAAALL;
      else
        v178 = v177;
      v268.n128_u64[0] = (unint64_t)&v249.__end_cap_;
      if (v178)
        v179 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v249.__end_cap_, v178);
      else
        v179 = 0;
      v208 = &v179[24 * v176];
      *(_QWORD *)&__p = v179;
      *((_QWORD *)&__p + 1) = v208;
      *((_QWORD *)&v267 + 1) = &v179[24 * v178];
      v209 = *(_OWORD *)&v265.__begin_;
      *((_QWORD *)v208 + 2) = v265.__end_cap_.__value_;
      *(_OWORD *)v208 = v209;
      memset(&v265, 0, sizeof(v265));
      *(_QWORD *)&v267 = v208 + 24;
      std::vector<std::string>::__swap_out_circular_buffer(&v249, (std::__split_buffer<std::string> *)&__p);
      v210 = v249.__end_;
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&__p);
      v249.__end_ = v210;
      if (SHIBYTE(v265.__end_cap_.__value_) < 0)
        operator delete(v265.__begin_);
    }
    else
    {
      v175 = *(_OWORD *)&v265.__begin_;
      v249.__end_->__r_.__value_.__r.__words[2] = (std::string::size_type)v265.__end_cap_.__value_;
      *(_OWORD *)&v174->__r_.__value_.__l.__data_ = v175;
      v249.__end_ = v174 + 1;
    }
LABEL_475:
    v211 = v249.__end_ - 1;
    v212 = SHIBYTE(v249.__end_[-1].__r_.__value_.__r.__words[2]);
    if ((v212 & 0x80000000) == 0)
    {
      if (v212 != 1 || v211->__r_.__value_.__s.__data_[0] != 32)
        goto LABEL_483;
LABEL_482:
      v249.__end_ = v211;
      goto LABEL_483;
    }
    if (v249.__end_[-1].__r_.__value_.__l.__size_ == 1 && *v211->__r_.__value_.__l.__data_ == 32)
    {
      operator delete(v211->__r_.__value_.__l.__data_);
      goto LABEL_482;
    }
LABEL_483:
    *(_QWORD *)&__v = v238;
    *(_QWORD *)&__v_16[*(_QWORD *)(v238 - 24) - 16] = v237;
    *(_QWORD *)__v_16 = v236;
    *(_QWORD *)&__v_16[8] = MEMORY[0x1E0DE4FB8] + 16;
    if (SBYTE7(v280) < 0)
      operator delete((void *)v279.n128_u64[0]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1DF0ECF6C]((char *)&v281 + 8);
LABEL_486:
    *(_QWORD *)&__v = &v258;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
LABEL_487:
    if (*(_QWORD *)(v3 + 4712))
    {
      __p = 0uLL;
      *(_QWORD *)&v267 = 0;
      v213 = v249.__begin_;
      v214 = v249.__end_;
      if (v249.__begin_ == v249.__end_)
      {
        v219 = 0;
        v218 = 0;
      }
      else
      {
        do
        {
          kaldi::quasar::NNMTTransliterator::UnicodeVectorFromString((uint64_t)&v265, (uint64_t)v213);
          __v = xmmword_1EA94BC28;
          *(_OWORD *)__v_16 = *(_OWORD *)&off_1EA94BC38;
          *(_OWORD *)&__v_16[16] = xmmword_1EA94BC48;
          LODWORD(v259) = 0;
          LODWORD(v259) = u_strlen((const UChar *)v265.__begin_);
          LODWORD(v258.__begin_) = 0;
          utrans_trans();
          kaldi::quasar::NNMTTransliterator::StringFromUnicodeVector(&__s, (const UChar **)&v265);
          v215 = (__int128 *)*((_QWORD *)&__p + 1);
          if (*((_QWORD *)&__p + 1) >= (unint64_t)v267)
          {
            v217 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&__p, &__s);
          }
          else
          {
            if (SHIBYTE(v262) < 0)
            {
              std::string::__init_copy_ctor_external(*((std::string **)&__p + 1), (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
            }
            else
            {
              v216 = __s;
              *(_QWORD *)(*((_QWORD *)&__p + 1) + 16) = v262;
              *v215 = v216;
            }
            v217 = (uint64_t)v215 + 24;
          }
          *((_QWORD *)&__p + 1) = v217;
          if (SHIBYTE(v262) < 0)
            operator delete((void *)__s);
          if (v265.__begin_)
          {
            v265.__end_ = v265.__begin_;
            operator delete(v265.__begin_);
          }
          ++v213;
        }
        while (v213 != v214);
        v219 = (__int128 *)*((_QWORD *)&__p + 1);
        v218 = (std::string *)__p;
      }
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v249, v218, v219, 0xAAAAAAAAAAAAAAABLL * (((char *)v219 - (char *)v218) >> 3));
      *(_QWORD *)&__v = &__p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    }
LABEL_503:
    v242 = 0uLL;
    v243 = 0;
    kaldi::JoinVectorToString<std::string>((uint64_t *)&v249, (uint64_t)&v242);
    *(_QWORD *)&__v = &v249;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    *(_QWORD *)&__v = &__str;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__b.__r_.__value_.__l.__data_);
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((char *)v255);
    if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v257.__r_.__value_.__l.__data_);
LABEL_507:
    v220 = (void **)(v239 + 96);
    if (*(char *)(v239 + 119) < 0)
      operator delete(*v220);
    *(_OWORD *)v220 = v242;
    *(_QWORD *)(v239 + 112) = v243;
    if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v244.__r_.__value_.__l.__data_);
    v245[0] = v238;
    *(_QWORD *)((char *)v245 + *(_QWORD *)(v238 - 24)) = v237;
    v246[0] = v236;
    v246[1] = v233;
    if (v247 < 0)
      operator delete((void *)v246[9]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    result = MEMORY[0x1DF0ECF6C](&v248);
    v239 += 272;
  }
  while (v239 != v234);
  return result;
}

void sub_1DEAD1A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)&STACK[0x370]);
  if (a40 < 0)
    operator delete(a35);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void std::vector<kaldi::quasar::TranslationUtil::NbestElement>::resize(kaldi::quasar::TranslationUtil::NbestElement *a1, unint64_t a2)
{
  uint64_t v4;
  kaldi::quasar::TranslationUtil::NbestElement *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  kaldi::quasar::TranslationUtil::NbestElement *v13;
  uint64_t v14;
  uint64_t v15;
  kaldi::quasar::TranslationUtil::NbestElement *v16;
  uint64_t v17;
  kaldi::quasar::TranslationUtil::NbestElement *v18;
  char *v19;
  uint64_t v20;
  _QWORD v21[2];
  kaldi::quasar::TranslationUtil::NbestElement *v22;
  char *v23;
  _QWORD *v24;

  v4 = *(_QWORD *)a1;
  v5 = (kaldi::quasar::TranslationUtil::NbestElement *)*((_QWORD *)a1 + 1);
  v6 = 0xF0F0F0F0F0F0F0F1 * (((uint64_t)v5 - *(_QWORD *)a1) >> 4);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      v18 = (kaldi::quasar::TranslationUtil::NbestElement *)(v4 + 272 * a2);
      while (v5 != v18)
      {
        v5 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v5 - 272);
        kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v5);
      }
      *((_QWORD *)a1 + 1) = v18;
    }
  }
  else
  {
    v8 = *((_QWORD *)a1 + 2);
    if (0xF0F0F0F0F0F0F0F1 * ((v8 - (uint64_t)v5) >> 4) >= v7)
    {
      v19 = (char *)v5 + 272 * v7;
      v20 = 272 * a2 - 16 * (((uint64_t)v5 - *(_QWORD *)a1) >> 4);
      do
      {
        kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v5);
        v5 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v5 + 272);
        v20 -= 272;
      }
      while (v20);
      *((_QWORD *)a1 + 1) = v19;
    }
    else
    {
      if (a2 > 0xF0F0F0F0F0F0F0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v24 = (_QWORD *)((char *)a1 + 16);
      v9 = 0xF0F0F0F0F0F0F0F1 * ((v8 - v4) >> 4);
      v10 = 2 * v9;
      if (2 * v9 <= a2)
        v10 = a2;
      if (v9 >= 0x78787878787878)
        v11 = 0xF0F0F0F0F0F0F0;
      else
        v11 = v10;
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::NbestElement>>(v11);
      v13 = (kaldi::quasar::TranslationUtil::NbestElement *)&v12[272 * v6];
      v21[0] = v12;
      v21[1] = v13;
      v22 = v13;
      v23 = &v12[272 * v14];
      v15 = 17 * a2;
      v16 = (kaldi::quasar::TranslationUtil::NbestElement *)&v12[272 * a2];
      v17 = 16 * v15 - 272 * v6;
      do
      {
        kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v13);
        v13 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v13 + 272);
        v17 -= 272;
      }
      while (v17);
      v22 = v16;
      std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__swap_out_circular_buffer(a1, v21);
      std::__split_buffer<kaldi::quasar::TranslationUtil::NbestElement>::~__split_buffer((uint64_t)v21);
    }
  }
}

void sub_1DEAD200C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::quasar::TranslationUtil::NbestElement>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::NbestElement>>(unint64_t a1)
{
  if (a1 >= 0xF0F0F0F0F0F0F1)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(272 * a1);
}

kaldi::quasar::TranslationUtil::NbestElement *std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__swap_out_circular_buffer(kaldi::quasar::TranslationUtil::NbestElement *result, _QWORD *a2)
{
  kaldi::quasar::TranslationUtil::NbestElement *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  const kaldi::quasar::TranslationUtil::NbestElement *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = result;
  v5 = *(_QWORD *)result;
  v4 = *((_QWORD *)result + 1);
  v6 = a2[1];
  for (i = 272; ; i -= 272)
  {
    v8 = v6 + i;
    if (v4 + i - 272 == v5)
      break;
    v9 = (const kaldi::quasar::TranslationUtil::NbestElement *)(v4 + i - 544);
    result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)(v8 - 544), v9);
  }
  v10 = v8 - 272;
  a2[1] = v10;
  v11 = *(_QWORD *)v3;
  *(_QWORD *)v3 = v10;
  a2[1] = v11;
  v12 = *((_QWORD *)v3 + 1);
  *((_QWORD *)v3 + 1) = a2[2];
  a2[2] = v12;
  v13 = *((_QWORD *)v3 + 2);
  *((_QWORD *)v3 + 2) = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<kaldi::quasar::TranslationUtil::NbestElement>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 272;
    kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)(i - 272));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void *std::get_temporary_buffer[abi:ne180100]<kaldi::quasar::TranslationUtil::NbestElement>(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0x78787878787878)
    v1 = 0x78787878787878;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  while (1)
  {
    result = operator new(272 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

void std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(const kaldi::quasar::TranslationUtil::NbestElement *a1, const kaldi::quasar::TranslationUtil::NbestElement *a2, uint64_t a3, unint64_t a4, kaldi::quasar::TranslationUtil::NbestElement *a5, uint64_t a6)
{
  const kaldi::quasar::TranslationUtil::NbestElement *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  kaldi::quasar::TranslationUtil::NbestElement *v14;
  unint64_t v16;
  const kaldi::quasar::TranslationUtil::NbestElement *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  const kaldi::quasar::TranslationUtil::NbestElement *v23;
  const kaldi::quasar::TranslationUtil::NbestElement *v24;
  const kaldi::quasar::TranslationUtil::NbestElement *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  kaldi::quasar::TranslationUtil::NbestElement *v43;
  const kaldi::quasar::TranslationUtil::NbestElement *v44;
  const kaldi::quasar::TranslationUtil::NbestElement *v45;
  kaldi::quasar::TranslationUtil::NbestElement *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE v60[272];
  uint64_t v61;
  uint64_t v62;

  if (a4 >= 2)
  {
    v7 = a1;
    if (a4 == 2)
    {
      v8 = (uint64_t)a2 - 272;
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v56, (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a2 - 272));
      v9 = v56;
      if (v57 == v56)
      {
        LODWORD(v11) = 0;
      }
      else
      {
        LODWORD(v10) = 0;
        do
        {
          v10 = *(int *)(v9 + 232) + (uint64_t)(int)v10;
          v9 += 240;
        }
        while (v9 != v57);
        v11 = v10 / (0xEEEEEEEEEEEEEEEFLL * ((v57 - v56) >> 4));
      }
      v20 = *(_QWORD *)v7;
      v19 = *((_QWORD *)v7 + 1);
      if (v19 == *(_QWORD *)v7)
      {
        LODWORD(v22) = 0;
      }
      else
      {
        LODWORD(v21) = 0;
        do
        {
          v21 = *(int *)(v20 + 232) + (uint64_t)(int)v21;
          v20 += 240;
        }
        while (v20 != v19);
        v22 = v21 / (0xEEEEEEEEEEEEEEEFLL * ((v19 - *(_QWORD *)v7) >> 4));
      }
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v56);
      if ((int)v11 > (int)v22)
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &>(v7, v8);
    }
    else
    {
      v12 = a4;
      if ((uint64_t)a4 <= 0)
      {
        if (a1 != a2)
        {
          v23 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a1 + 272);
          if ((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a1 + 272) != a2)
          {
            v24 = a1;
            do
            {
              v25 = v23;
              kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v61, v23);
              v26 = v61;
              if (v62 == v61)
              {
                LODWORD(v28) = 0;
              }
              else
              {
                LODWORD(v27) = 0;
                do
                {
                  v27 = *(int *)(v26 + 232) + (uint64_t)(int)v27;
                  v26 += 240;
                }
                while (v26 != v62);
                v28 = v27 / (0xEEEEEEEEEEEEEEEFLL * ((v62 - v61) >> 4));
              }
              v30 = *(_QWORD *)v24;
              v29 = *((_QWORD *)v24 + 1);
              if (v29 == *(_QWORD *)v24)
              {
                LODWORD(v32) = 0;
              }
              else
              {
                LODWORD(v31) = 0;
                do
                {
                  v31 = *(int *)(v30 + 232) + (uint64_t)(int)v31;
                  v30 += 240;
                }
                while (v30 != v29);
                v32 = v31 / (0xEEEEEEEEEEEEEEEFLL * ((v29 - *(_QWORD *)v24) >> 4));
              }
              kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v61);
              if ((int)v28 > (int)v32)
              {
                kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v60, v25);
                v33 = (uint64_t)v25;
                while (1)
                {
                  v34 = (uint64_t)v24;
                  kaldi::quasar::TranslationUtil::NbestElement::operator=(v33, (uint64_t)v24);
                  if (v24 == v7)
                    break;
                  kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v58, (const kaldi::quasar::TranslationUtil::NbestElement *)v60);
                  v35 = v58;
                  if (v59 == v58)
                  {
                    LODWORD(v37) = 0;
                  }
                  else
                  {
                    LODWORD(v36) = 0;
                    do
                    {
                      v36 = *(int *)(v35 + 232) + (uint64_t)(int)v36;
                      v35 += 240;
                    }
                    while (v35 != v59);
                    v37 = v36 / (0xEEEEEEEEEEEEEEEFLL * ((v59 - v58) >> 4));
                  }
                  v24 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v24 - 272);
                  v38 = *(_QWORD *)(v34 - 264);
                  v39 = *(_QWORD *)(v34 - 272);
                  if (v38 == v39)
                  {
                    LODWORD(v42) = 0;
                  }
                  else
                  {
                    LODWORD(v40) = 0;
                    v41 = 0xEEEEEEEEEEEEEEEFLL * ((v38 - v39) >> 4);
                    do
                    {
                      v40 = *(int *)(v39 + 232) + (uint64_t)(int)v40;
                      v39 += 240;
                    }
                    while (v39 != v38);
                    v42 = v40 / v41;
                  }
                  kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v58);
                  v33 = v34;
                  if ((int)v37 <= (int)v42)
                    goto LABEL_45;
                }
                v34 = (uint64_t)v7;
LABEL_45:
                kaldi::quasar::TranslationUtil::NbestElement::operator=(v34, (uint64_t)v60);
                kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v60);
              }
              v23 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v25 + 272);
              v24 = v25;
            }
            while ((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v25 + 272) != a2);
          }
        }
      }
      else
      {
        v14 = a5;
        v16 = a4 >> 1;
        v17 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a1 + 272 * (a4 >> 1));
        v18 = a4 >> 1;
        if ((uint64_t)v12 <= a6)
        {
          std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(a1, v17, a3, v18, a5);
          v43 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v14 + 272 * v16);
          std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v7 + 272 * (v12 >> 1)), a2, a3, v12 - (v12 >> 1), v43);
          v44 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v14 + 272 * v12);
          v45 = v43;
          v46 = v14;
          while (v45 != v44)
          {
            kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v61, v45);
            v47 = v61;
            if (v62 == v61)
            {
              LODWORD(v49) = 0;
            }
            else
            {
              LODWORD(v48) = 0;
              do
              {
                v48 = *(int *)(v47 + 232) + (uint64_t)(int)v48;
                v47 += 240;
              }
              while (v47 != v62);
              v49 = v48 / (0xEEEEEEEEEEEEEEEFLL * ((v62 - v61) >> 4));
            }
            v51 = *(_QWORD *)v46;
            v50 = *((_QWORD *)v46 + 1);
            if (v50 == *(_QWORD *)v46)
            {
              LODWORD(v53) = 0;
            }
            else
            {
              LODWORD(v52) = 0;
              do
              {
                v52 = *(int *)(v51 + 232) + (uint64_t)(int)v52;
                v51 += 240;
              }
              while (v51 != v50);
              v53 = v52 / (0xEEEEEEEEEEEEEEEFLL * ((v50 - *(_QWORD *)v46) >> 4));
            }
            kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v61);
            if ((int)v49 <= (int)v53)
            {
              kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)v7, (uint64_t)v46);
              v46 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v46 + 272);
            }
            else
            {
              kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)v7, (uint64_t)v45);
              v45 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v45 + 272);
            }
            v7 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v7 + 272);
            if (v46 == v43)
            {
              if (v45 != v44)
              {
                v54 = 0;
                do
                {
                  kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)v7 + v54, (uint64_t)v45 + v54);
                  v54 += 272;
                }
                while ((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v45 + v54) != v44);
              }
              goto LABEL_74;
            }
          }
          if (v46 != v43)
          {
            v55 = 0;
            do
            {
              kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)v7 + v55, (uint64_t)v46 + v55);
              v55 += 272;
            }
            while ((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v46 + v55) != v43);
          }
LABEL_74:
          if (v14)
          {
            do
            {
              kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v14);
              v14 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v14 + 272);
              --v12;
            }
            while (v12);
          }
        }
        else
        {
          std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(a1, v17, a3, v18, a5, a6);
          std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>((char *)v7 + 272 * (v12 >> 1), a2, a3, v12 - (v12 >> 1), v14, a6);
          std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(v7, (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v7 + 272 * (v12 >> 1)), (uint64_t)a2, a3, v12 >> 1, v12 - (v12 >> 1), v14, a6);
        }
      }
    }
  }
}

void sub_1DEAD26B4(_Unwind_Exception *a1)
{
  kaldi::quasar::TranslationUtil::NbestElement *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = v2;
  if (v1)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
      v1 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v1 + 272);
      --v4;
    }
    while (v4);
  }
  _Unwind_Resume(a1);
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &>(kaldi::quasar::TranslationUtil::NbestElement *a1, uint64_t a2)
{
  _BYTE v4[272];

  kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v4, a1);
  kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)a1, a2);
  kaldi::quasar::TranslationUtil::NbestElement::operator=(a2, (uint64_t)v4);
  kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v4);
}

void sub_1DEAD275C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&a9);
  _Unwind_Resume(a1);
}

const kaldi::quasar::TranslationUtil::NbestElement *std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(const kaldi::quasar::TranslationUtil::NbestElement *result, const kaldi::quasar::TranslationUtil::NbestElement *a2, uint64_t a3, unint64_t a4, kaldi::quasar::TranslationUtil::NbestElement *this)
{
  const kaldi::quasar::TranslationUtil::NbestElement *v8;
  const kaldi::quasar::TranslationUtil::NbestElement *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const kaldi::quasar::TranslationUtil::NbestElement *v13;
  uint64_t v14;
  kaldi::quasar::TranslationUtil::NbestElement *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  kaldi::quasar::TranslationUtil::NbestElement *v23;
  kaldi::quasar::TranslationUtil::NbestElement *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  kaldi::quasar::TranslationUtil::NbestElement *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  const kaldi::quasar::TranslationUtil::NbestElement *v35;
  uint64_t v36;
  kaldi::quasar::TranslationUtil::NbestElement *v37;
  const kaldi::quasar::TranslationUtil::NbestElement *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  const kaldi::quasar::TranslationUtil::NbestElement *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  if (a4)
  {
    v8 = result;
    if (a4 == 2)
    {
      v9 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a2 - 272);
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v53, (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a2 - 272));
      v10 = v53;
      if (v54 == v53)
      {
        LODWORD(v12) = 0;
      }
      else
      {
        LODWORD(v11) = 0;
        do
        {
          v11 = *(int *)(v10 + 232) + (uint64_t)(int)v11;
          v10 += 240;
        }
        while (v10 != v54);
        v12 = v11 / (0xEEEEEEEEEEEEEEEFLL * ((v54 - v53) >> 4));
      }
      v48 = *(_QWORD *)v8;
      v47 = *((_QWORD *)v8 + 1);
      if (v47 == *(_QWORD *)v8)
      {
        LODWORD(v50) = 0;
      }
      else
      {
        LODWORD(v49) = 0;
        do
        {
          v49 = *(int *)(v48 + 232) + (uint64_t)(int)v49;
          v48 += 240;
        }
        while (v48 != v47);
        v50 = v49 / (0xEEEEEEEEEEEEEEEFLL * ((v47 - *(_QWORD *)v8) >> 4));
      }
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v53);
      if ((int)v12 <= (int)v50)
        v51 = v8;
      else
        v51 = v9;
      if ((int)v12 > (int)v50)
        v9 = v8;
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement(this, v51);
      return kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)this + 272), v9);
    }
    else if (a4 == 1)
    {
      return kaldi::quasar::TranslationUtil::NbestElement::NbestElement(this, result);
    }
    else if ((uint64_t)a4 > 8)
    {
      v35 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)result + 272 * (a4 >> 1));
      std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(result, v35, a3, a4 >> 1, this, a4 >> 1);
      result = (const kaldi::quasar::TranslationUtil::NbestElement *)std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>((char *)v8 + 272 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), (char *)this + 272 * (a4 >> 1), a4 - (a4 >> 1));
      v36 = 0;
      v37 = this;
      v38 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + 272 * (a4 >> 1));
      while (v38 != a2)
      {
        kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v57, v38);
        v39 = v57;
        if (v58 == v57)
        {
          LODWORD(v41) = 0;
        }
        else
        {
          LODWORD(v40) = 0;
          do
          {
            v40 = *(int *)(v39 + 232) + (uint64_t)(int)v40;
            v39 += 240;
          }
          while (v39 != v58);
          v41 = v40 / (0xEEEEEEEEEEEEEEEFLL * ((v58 - v57) >> 4));
        }
        v43 = *(_QWORD *)v8;
        v42 = *((_QWORD *)v8 + 1);
        if (v42 == *(_QWORD *)v8)
        {
          LODWORD(v45) = 0;
        }
        else
        {
          LODWORD(v44) = 0;
          do
          {
            v44 = *(int *)(v43 + 232) + (uint64_t)(int)v44;
            v43 += 240;
          }
          while (v43 != v42);
          v45 = v44 / (0xEEEEEEEEEEEEEEEFLL * ((v42 - *(_QWORD *)v8) >> 4));
        }
        kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v57);
        if ((int)v41 <= (int)v45)
        {
          result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v37, v8);
          v8 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + 272);
        }
        else
        {
          result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v37, v38);
          v38 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v38 + 272);
        }
        ++v36;
        v37 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v37 + 272);
        if (v8 == v35)
        {
          if (v38 != a2)
          {
            v46 = 0;
            do
            {
              result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v37 + v46), (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v38 + v46));
              ++v36;
              v46 += 272;
            }
            while ((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v38 + v46) != a2);
          }
          return result;
        }
      }
      if (v8 != v35)
      {
        v52 = 0;
        do
        {
          result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v37 + v52), (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + v52));
          ++v36;
          v52 += 272;
        }
        while ((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + v52) != v35);
      }
    }
    else if (result != a2)
    {
      result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(this, result);
      v13 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + 272);
      if (v13 != a2)
      {
        v14 = 1;
        v15 = this;
        do
        {
          kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v57, v13);
          v16 = v57;
          if (v58 == v57)
          {
            LODWORD(v18) = 0;
          }
          else
          {
            LODWORD(v17) = 0;
            do
            {
              v17 = *(int *)(v16 + 232) + (uint64_t)(int)v17;
              v16 += 240;
            }
            while (v16 != v58);
            v18 = v17 / (0xEEEEEEEEEEEEEEEFLL * ((v58 - v57) >> 4));
          }
          v20 = *(_QWORD *)v15;
          v19 = *((_QWORD *)v15 + 1);
          if (v19 == *(_QWORD *)v15)
          {
            LODWORD(v22) = 0;
          }
          else
          {
            LODWORD(v21) = 0;
            do
            {
              v21 = *(int *)(v20 + 232) + (uint64_t)(int)v21;
              v20 += 240;
            }
            while (v20 != v19);
            v22 = v21 / (0xEEEEEEEEEEEEEEEFLL * ((v19 - *(_QWORD *)v15) >> 4));
          }
          v23 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v15 + 272);
          kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v57);
          if ((int)v18 <= (int)v22)
          {
            result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v15 + 272), v13);
            ++v14;
          }
          else
          {
            kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v15 + 272), v15);
            ++v14;
            v24 = this;
            if (v15 != this)
            {
              while (1)
              {
                kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v55, v13);
                v25 = v55;
                if (v56 == v55)
                {
                  LODWORD(v27) = 0;
                }
                else
                {
                  LODWORD(v26) = 0;
                  do
                  {
                    v26 = *(int *)(v25 + 232) + (uint64_t)(int)v26;
                    v25 += 240;
                  }
                  while (v25 != v56);
                  v27 = v26 / (0xEEEEEEEEEEEEEEEFLL * ((v56 - v55) >> 4));
                }
                v28 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v15 - 272);
                v29 = *((_QWORD *)v15 - 33);
                v30 = *((_QWORD *)v15 - 34);
                if (v29 == v30)
                {
                  LODWORD(v33) = 0;
                }
                else
                {
                  LODWORD(v31) = 0;
                  v32 = 0xEEEEEEEEEEEEEEEFLL * ((v29 - v30) >> 4);
                  do
                  {
                    v31 = *(int *)(v30 + 232) + (uint64_t)(int)v31;
                    v30 += 240;
                  }
                  while (v30 != v29);
                  v33 = v31 / v32;
                }
                kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v55);
                if ((int)v27 <= (int)v33)
                  break;
                kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)v15, (uint64_t)v15 - 272);
                v15 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v15 - 272);
                if (v28 == this)
                {
                  v24 = this;
                  goto LABEL_40;
                }
              }
              v24 = v15;
            }
LABEL_40:
            result = (const kaldi::quasar::TranslationUtil::NbestElement *)kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)v24, (uint64_t)v13);
          }
          v13 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v13 + 272);
          v15 = v23;
        }
        while (v13 != a2);
      }
    }
  }
  return result;
}

void sub_1DEAD2C04(_Unwind_Exception *exception_object)
{
  kaldi::quasar::TranslationUtil::NbestElement *v1;

  if (v1)
    kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
  _Unwind_Resume(exception_object);
}

void std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(kaldi::quasar::TranslationUtil::NbestElement *a1, const kaldi::quasar::TranslationUtil::NbestElement *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, kaldi::quasar::TranslationUtil::NbestElement *a7, uint64_t a8)
{
  kaldi::quasar::TranslationUtil::NbestElement *v12;
  kaldi::quasar::TranslationUtil::NbestElement *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const kaldi::quasar::TranslationUtil::NbestElement *v24;
  const kaldi::quasar::TranslationUtil::NbestElement *v25;
  const kaldi::quasar::TranslationUtil::NbestElement *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  const kaldi::quasar::TranslationUtil::NbestElement *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  kaldi::quasar::TranslationUtil::NbestElement *v50;
  uint64_t v51;
  kaldi::quasar::TranslationUtil::NbestElement *v52;
  uint64_t v53;
  uint64_t v54;
  const kaldi::quasar::TranslationUtil::NbestElement *v55;
  uint64_t v56;
  uint64_t v57;
  kaldi::quasar::TranslationUtil::NbestElement *v58;
  const kaldi::quasar::TranslationUtil::NbestElement *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  kaldi::quasar::TranslationUtil::NbestElement *v70;
  kaldi::quasar::TranslationUtil::NbestElement *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  kaldi::quasar::TranslationUtil::NbestElement *v84;
  uint64_t v87;
  kaldi::quasar::TranslationUtil::NbestElement *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v87 = a6;
  if (a6)
  {
    v12 = a1;
    v13 = a1;
    while (1)
    {
      v88 = a2;
      if (v87 <= a8 || a5 <= a8)
        break;
      if (!a5)
        return;
      while (1)
      {
        kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v89, a2);
        v14 = v89;
        if (v90 == v89)
        {
          LODWORD(v16) = 0;
        }
        else
        {
          LODWORD(v15) = 0;
          do
          {
            v15 = *(int *)(v14 + 232) + (uint64_t)(int)v15;
            v14 += 240;
          }
          while (v14 != v90);
          v16 = v15 / (0xEEEEEEEEEEEEEEEFLL * ((v90 - v89) >> 4));
        }
        v18 = *(_QWORD *)v12;
        v17 = *((_QWORD *)v12 + 1);
        if (v17 == *(_QWORD *)v12)
        {
          LODWORD(v20) = 0;
        }
        else
        {
          LODWORD(v19) = 0;
          do
          {
            v19 = *(int *)(v18 + 232) + (uint64_t)(int)v19;
            v18 += 240;
          }
          while (v18 != v17);
          v20 = v19 / (0xEEEEEEEEEEEEEEEFLL * ((v17 - *(_QWORD *)v12) >> 4));
        }
        kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v89);
        if ((int)v16 > (int)v20)
          break;
        v12 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v12 + 272);
        v13 = v12;
        if (!--a5)
          return;
      }
      v21 = v87;
      v83 = a3;
      v84 = a7;
      if (a5 >= v87)
      {
        if (a5 == 1)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &>(v12, (uint64_t)a2);
          return;
        }
        if (a5 >= 0)
          v37 = a5;
        else
          v37 = a5 + 1;
        v36 = v37 >> 1;
        v38 = a3;
        v25 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v12 + 272 * v36);
        v24 = a2;
        v39 = v38 - (_QWORD)a2;
        if (v39)
        {
          v82 = v36;
          v40 = 0xF0F0F0F0F0F0F0F1 * (v39 >> 4);
          v24 = a2;
          do
          {
            v41 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v24 + 272 * (v40 >> 1));
            kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v91, v41);
            v42 = v91;
            if (v92 == v91)
            {
              LODWORD(v44) = 0;
            }
            else
            {
              LODWORD(v43) = 0;
              do
              {
                v43 = *(int *)(v42 + 232) + (uint64_t)(int)v43;
                v42 += 240;
              }
              while (v42 != v92);
              v44 = v43 / (0xEEEEEEEEEEEEEEEFLL * ((v92 - v91) >> 4));
            }
            v46 = *(_QWORD *)v25;
            v45 = *((_QWORD *)v25 + 1);
            if (v45 == *(_QWORD *)v25)
            {
              LODWORD(v48) = 0;
            }
            else
            {
              LODWORD(v47) = 0;
              do
              {
                v47 = *(int *)(v46 + 232) + (uint64_t)(int)v47;
                v46 += 240;
              }
              while (v46 != v45);
              v48 = v47 / (0xEEEEEEEEEEEEEEEFLL * ((v45 - *(_QWORD *)v25) >> 4));
            }
            kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v91);
            if ((int)v44 <= (int)v48)
              v40 >>= 1;
            else
              v40 += ~(v40 >> 1);
            if ((int)v44 > (int)v48)
              v24 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v41 + 272);
          }
          while (v40);
          v21 = v87;
          a2 = v88;
          v36 = v82;
        }
        v23 = 0xF0F0F0F0F0F0F0F1 * ((v24 - a2) >> 4);
      }
      else
      {
        if (v87 >= 0)
          v22 = v87;
        else
          v22 = v87 + 1;
        v23 = v22 >> 1;
        v24 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a2 + 272 * (v22 >> 1));
        v25 = a2;
        v26 = a2;
        if (a2 != v13)
        {
          v81 = v23;
          v27 = 0xF0F0F0F0F0F0F0F1 * ((a2 - v13) >> 4);
          do
          {
            kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v91, v24);
            v28 = v91;
            if (v92 == v91)
            {
              LODWORD(v30) = 0;
            }
            else
            {
              LODWORD(v29) = 0;
              do
              {
                v29 = *(int *)(v28 + 232) + (uint64_t)(int)v29;
                v28 += 240;
              }
              while (v28 != v92);
              v30 = v29 / (0xEEEEEEEEEEEEEEEFLL * ((v92 - v91) >> 4));
            }
            v31 = (uint64_t *)((char *)v13 + 272 * (v27 >> 1));
            v33 = *v31;
            v32 = v31[1];
            if (v32 == *v31)
            {
              LODWORD(v35) = 0;
            }
            else
            {
              LODWORD(v34) = 0;
              do
              {
                v34 = *(int *)(v33 + 232) + (uint64_t)(int)v34;
                v33 += 240;
              }
              while (v33 != v32);
              v35 = v34 / (0xEEEEEEEEEEEEEEEFLL * ((v32 - *v31) >> 4));
            }
            kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v91);
            if ((int)v30 > (int)v35)
            {
              v27 >>= 1;
            }
            else
            {
              v13 = (kaldi::quasar::TranslationUtil::NbestElement *)(v31 + 34);
              v27 += ~(v27 >> 1);
            }
            a2 = v88;
          }
          while (v27);
          v25 = v13;
          v26 = v13;
          v21 = v87;
          v23 = v81;
        }
        v36 = 0xF0F0F0F0F0F0F0F1 * ((v26 - v12) >> 4);
        v13 = v12;
      }
      if (v25 == a2)
      {
        v50 = v24;
      }
      else if (v24 == a2)
      {
        v50 = v25;
      }
      else
      {
        v49 = std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(v25, (uint64_t)a2, (uint64_t)v24);
        v21 = v87;
        v50 = (kaldi::quasar::TranslationUtil::NbestElement *)v49;
      }
      a5 -= v36;
      v51 = v21 - v23;
      if (v36 + v23 >= a5 + v51)
      {
        v55 = v24;
        a7 = v84;
        std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(v50, v55, v83, a4, a5);
        a2 = v25;
        v54 = v23;
        a5 = v36;
        a3 = (uint64_t)v50;
      }
      else
      {
        v52 = v12;
        v53 = v51;
        std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(v52, v25, v50, a4, v36);
        v54 = v53;
        v12 = v50;
        v13 = v50;
        a2 = v24;
        a7 = v84;
        a3 = v83;
      }
      v87 = v54;
      if (!v54)
        return;
    }
    if (a5 <= v87)
    {
      if (v12 == a2)
      {
        v57 = 0;
      }
      else
      {
        v69 = 0;
        v57 = 0;
        do
        {
          kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)a7 + v69), (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v12 + v69));
          ++v57;
          v69 += 272;
        }
        while ((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v12 + v69) != a2);
        v70 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)a7 + v69);
        if ((kaldi::quasar::TranslationUtil::NbestElement *)((char *)a7 + v69) != a7)
        {
          v71 = a7;
          while (v88 != (kaldi::quasar::TranslationUtil::NbestElement *)a3)
          {
            kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v91, v88);
            v72 = v91;
            if (v92 == v91)
            {
              LODWORD(v74) = 0;
            }
            else
            {
              LODWORD(v73) = 0;
              do
              {
                v73 = *(int *)(v72 + 232) + (uint64_t)(int)v73;
                v72 += 240;
              }
              while (v72 != v92);
              v74 = v73 / (0xEEEEEEEEEEEEEEEFLL * ((v92 - v91) >> 4));
            }
            v76 = *(_QWORD *)v71;
            v75 = *((_QWORD *)v71 + 1);
            if (v75 == *(_QWORD *)v71)
            {
              LODWORD(v78) = 0;
            }
            else
            {
              LODWORD(v77) = 0;
              do
              {
                v77 = *(int *)(v76 + 232) + (uint64_t)(int)v77;
                v76 += 240;
              }
              while (v76 != v75);
              v78 = v77 / (0xEEEEEEEEEEEEEEEFLL * ((v75 - *(_QWORD *)v71) >> 4));
            }
            kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v91);
            if ((int)v74 <= (int)v78)
            {
              kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)v12, (uint64_t)v71);
              v71 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v71 + 272);
            }
            else
            {
              kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)v12, (uint64_t)v88);
              v88 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v88 + 272);
            }
            v12 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v12 + 272);
            if (v71 == v70)
              goto LABEL_127;
          }
          if (v71 != v70)
          {
            v80 = 0;
            do
            {
              kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)v12 + v80, (uint64_t)v71 + v80);
              v80 += 272;
            }
            while ((char *)v71 + v80 - 272 != (char *)v70 - 272);
          }
        }
      }
    }
    else
    {
      if ((const kaldi::quasar::TranslationUtil::NbestElement *)a3 == a2)
        return;
      v56 = 0;
      v57 = 0;
      do
      {
        kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)a7 + v56), (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a2 + v56));
        ++v57;
        v56 += 272;
      }
      while ((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a2 + v56) != (const kaldi::quasar::TranslationUtil::NbestElement *)a3);
      v58 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)a7 + v56);
      while (v58 != a7)
      {
        if (a2 == v12)
        {
          v79 = 0;
          do
          {
            kaldi::quasar::TranslationUtil::NbestElement::operator=(a3 + v79 - 272, (uint64_t)v58 + v79 - 272);
            v79 -= 272;
          }
          while ((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v58 + v79) != a7);
          break;
        }
        v59 = a2;
        kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v91, (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v58 - 272));
        v60 = v91;
        if (v92 == v91)
        {
          LODWORD(v62) = 0;
        }
        else
        {
          LODWORD(v61) = 0;
          do
          {
            v61 = *(int *)(v60 + 232) + (uint64_t)(int)v61;
            v60 += 240;
          }
          while (v60 != v92);
          v62 = v61 / (0xEEEEEEEEEEEEEEEFLL * ((v92 - v91) >> 4));
        }
        v63 = *((_QWORD *)a2 - 33);
        v64 = *((_QWORD *)a2 - 34);
        if (v63 == v64)
        {
          LODWORD(v67) = 0;
        }
        else
        {
          LODWORD(v65) = 0;
          v66 = 0xEEEEEEEEEEEEEEEFLL * ((v63 - v64) >> 4);
          do
          {
            v65 = *(int *)(v64 + 232) + (uint64_t)(int)v65;
            v64 += 240;
          }
          while (v64 != v63);
          v67 = v65 / v66;
        }
        kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v91);
        a3 -= 272;
        if ((int)v62 <= (int)v67)
          v68 = (uint64_t)v58 - 272;
        else
          v68 = (uint64_t)v59 - 272;
        kaldi::quasar::TranslationUtil::NbestElement::operator=(a3, v68);
        if ((int)v62 > (int)v67)
        {
          a2 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v59 - 272);
        }
        else
        {
          v58 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v58 - 272);
          a2 = v59;
        }
      }
    }
LABEL_127:
    if (a7 && v57)
    {
      do
      {
        kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(a7);
        a7 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)a7 + 272);
        --v57;
      }
      while (v57);
    }
  }
}

void sub_1DEAD338C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  kaldi::quasar::TranslationUtil::NbestElement *v2;
  kaldi::quasar::TranslationUtil::NbestElement *v4;
  uint64_t v5;

  if (v2 && v1)
  {
    v4 = v2;
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v4);
      v4 = (kaldi::quasar::TranslationUtil::NbestElement *)(v5 + 272);
      --v1;
    }
    while (v1);
  }
  _Unwind_Resume(exception_object);
}

char *std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(kaldi::quasar::TranslationUtil::NbestElement *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  kaldi::quasar::TranslationUtil::NbestElement *v5;
  char *v6;
  uint64_t v7;
  kaldi::quasar::TranslationUtil::NbestElement *v8;

  v4 = a2;
  v5 = a1;
  v6 = (char *)a1 + 272;
  v7 = a2;
  while (1)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &>(v5, v4);
    v5 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v5 + 272);
    v4 += 272;
    if (v4 == a3)
      break;
    if (v5 == (kaldi::quasar::TranslationUtil::NbestElement *)v7)
      v7 = v4;
    v6 += 272;
  }
  if (v5 != (kaldi::quasar::TranslationUtil::NbestElement *)v7)
  {
    v8 = (kaldi::quasar::TranslationUtil::NbestElement *)v7;
    do
    {
      while (1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &>(v5, v7);
        v5 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v5 + 272);
        v7 += 272;
        if (v7 == a3)
          break;
        if (v5 == v8)
          v8 = (kaldi::quasar::TranslationUtil::NbestElement *)v7;
      }
      v7 = (uint64_t)v8;
    }
    while (v5 != v8);
  }
  return v6;
}

uint64_t kaldi::quasar::TranslationUtil::NbestElement::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (a1 != a2)
    std::vector<kaldi::quasar::TranslationUtil::PathElement>::__assign_with_size[abi:ne180100]<kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*>((uint64_t *)a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4));
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  std::string::operator=((std::string *)(a1 + 96), (const std::string *)(a2 + 96));
  std::string::operator=((std::string *)(a1 + 120), (const std::string *)(a2 + 120));
  std::string::operator=((std::string *)(a1 + 144), (const std::string *)(a2 + 144));
  if (a1 != a2)
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 168), *(char **)(a2 + 168), *(_QWORD *)(a2 + 176), (uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 192), *(char **)(a2 + 192), *(_QWORD *)(a2 + 200), (uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 216), *(char **)(a2 + 216), *(_QWORD *)(a2 + 224), (uint64_t)(*(_QWORD *)(a2 + 224) - *(_QWORD *)(a2 + 216)) >> 2);
    *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,double>,std::__tree_node<std::__value_type<std::string,double>,void *> *,long>>((uint64_t *)(a1 + 248), *(_QWORD **)(a2 + 248), (_QWORD *)(a2 + 256));
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,double>,std::__tree_node<std::__value_type<std::string,double>,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t **leaf_high;
  _QWORD *v12;
  BOOL v13;
  uint64_t **v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  const void **v18;
  _QWORD *v19;
  _QWORD *v20;

  v5 = (uint64_t **)result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t)(result + 1);
    *(_QWORD *)(v7 + 16) = 0;
    result[1] = 0;
    result[2] = 0;
    if (*(_QWORD *)(v6 + 8))
      v8 = *(_QWORD **)(v6 + 8);
    else
      v8 = (_QWORD *)v6;
    v18 = (const void **)result;
    v19 = v8;
    v20 = v8;
    if (v8)
    {
      v19 = std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          v8[7] = v9[7];
          v10 = v20;
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__find_leaf_high((uint64_t)v5, &v17, (const void **)v20 + 4);
          std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(v5, v17, leaf_high, v10);
          v8 = v19;
          v20 = v19;
          if (v19)
            v19 = std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::_DetachedTreeCache::__detach_next((uint64_t)v19);
          v12 = (_QWORD *)v9[1];
          if (v12)
          {
            do
            {
              a2 = v12;
              v12 = (_QWORD *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v13 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v13);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t *)std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v18);
  }
  if (a2 != a3)
  {
    do
    {
      std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__construct_node<std::pair<std::string const,double> const&>((uint64_t)v5, (uint64_t)(a2 + 4), (uint64_t)&v18);
      v14 = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__find_leaf_high((uint64_t)v5, &v17, v18 + 4);
      result = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(v5, v17, v14, (uint64_t *)v18);
      v15 = (_QWORD *)a2[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)a2[2];
          v13 = *v16 == (_QWORD)a2;
          a2 = v16;
        }
        while (!v13);
      }
      a2 = v16;
    }
    while (v16 != a3);
  }
  return result;
}

void sub_1DEAD3714(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::JoinVectorToString<std::string>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  _QWORD v16[2];
  _QWORD v17[11];
  char v18;
  uint64_t v19;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v16);
  v4 = *a1;
  if (a1[1] != *a1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = v4 + v5;
      v8 = *(char *)(v7 + 23);
      if (v8 >= 0)
        v9 = v7;
      else
        v9 = *(_QWORD *)v7;
      if (v8 >= 0)
        v10 = *(unsigned __int8 *)(v7 + 23);
      else
        v10 = *(_QWORD *)(v7 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v9, v10);
      ++v6;
      v4 = *a1;
      v11 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
      if (v6 < v11)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" ", 1);
        v4 = *a1;
        v11 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
      }
      v5 += 24;
    }
    while (v6 < v11);
  }
  std::stringbuf::str();
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = v14;
  *(_QWORD *)(a2 + 16) = v15;
  v16[0] = *MEMORY[0x1E0DE4F50];
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v17[0] = v12;
  v17[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v18 < 0)
    operator delete((void *)v17[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1DF0ECF6C](&v19);
}

void sub_1DEAD389C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::wstring_convert<std::codecvt_utf8<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::wstring_convert[abi:ne180100](uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  std::codecvt<wchar_t,char,__mbstate_t>::codecvt((std::codecvt<wchar_t, char, mbstate_t> *)v2, 0);
  *(_QWORD *)(v2 + 24) = 1114111;
  *(_DWORD *)(v2 + 32) = 0;
  *(_QWORD *)v2 = &off_1EA931E98;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = v2;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  return a1;
}

void sub_1DEAD3944(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10A1C408EF24B1CLL);
  _Unwind_Resume(a1);
}

_QWORD *std::wstring::basic_string[abi:ne180100]<0>(_QWORD *a1, __int32 *a2)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = wcslen(a2);
  if (v4 >= 0x3FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 5)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((v4 | 1) != 5)
      v7 = v4 | 1;
    v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, a2, 4 * v5);
LABEL_9:
  *((_DWORD *)v6 + v5) = 0;
  return a1;
}

void kaldi::quasar::BPE::Apply(uint64_t a1, __int128 **a2, uint64_t *a3)
{
  __int128 *v6;
  char *v7;
  std::vector<std::string>::pointer begin;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::string *v12;
  __int128 v13;
  std::string::size_type v14;
  std::string *v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  int v19;
  std::string *v20;
  uint64_t size;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  __int128 *v29;
  int v30;
  unsigned __int16 *v31;
  int v32;
  int v33;
  std::vector<std::string>::pointer end;
  __int128 v36;
  std::string *v37;
  char v38;
  const std::string::value_type *v39;
  std::string::size_type v40;
  unint64_t v41;
  unint64_t v43;
  std::vector<std::string>::pointer v44;
  uint64_t v45;
  std::string::size_type v46;
  std::string::size_type v47;
  char v48;
  std::string::size_type v49;
  uint64_t v50;
  std::vector<std::string>::pointer v51;
  const std::string::value_type *v52;
  const std::string::value_type *v53;
  std::vector<std::string>::pointer v54;
  void *v55;
  const std::string::value_type *v56;
  std::string::size_type v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  std::string *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  const std::string *v70;
  std::string *v71;
  std::string::size_type v72;
  char *v73;
  std::string::size_type v74;
  char v75;
  char *v76;
  __int128 *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 *v81;
  __int128 *v82;
  __int128 *v83;
  __int128 *v84;
  __int128 *v85;
  std::string __str;
  std::string v87;
  std::string *v88;
  char *v89;
  _QWORD v90[11];
  char v91;
  uint64_t v92;
  std::string *v93;
  std::string *v94;
  unint64_t v95;
  std::vector<std::string> v96;
  char v97[9];

  std::vector<std::string>::__clear[abi:ne180100](a3);
  v6 = *a2;
  v84 = a2[1];
  if (*a2 != v84)
  {
    v85 = (__int128 *)(a1 + 192);
    v83 = (__int128 *)(a1 + 160);
    v81 = *(__int128 **)(MEMORY[0x1E0DE4F50] + 64);
    v82 = (__int128 *)*MEMORY[0x1E0DE4F50];
    v80 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    v79 = MEMORY[0x1E0DE4FB8] + 16;
    while (1)
    {
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(a1 + 88), (unsigned __int8 *)v6))
      {
        v88 = (std::string *)v6;
        v7 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 88, (unsigned __int8 *)v6, (__int128 **)&v88);
        if (v7[63] < 0)
          std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v7 + 5), *((_QWORD *)v7 + 6));
        else
          __str = *(std::string *)(v7 + 40);
        goto LABEL_139;
      }
      memset(&v96, 0, sizeof(v96));
      v93 = 0;
      v94 = 0;
      v95 = 0;
      kaldi::quasar::BPE::SplitUtfString(a1, (std::string *)v6, (uint64_t)&v96);
      begin = v96.__begin_;
      if (v96.__end_ != v96.__begin_)
      {
        v9 = 0;
        v10 = 0;
        do
        {
          if (std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(a1, (const void **)&begin[v9].__r_.__value_.__l.__data_))
          {
            v11 = &v96.__begin_[v9];
            v12 = v94;
            if ((unint64_t)v94 >= v95)
            {
LABEL_34:
              v28 = (__int128 *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v93, (__int128 *)v11);
              goto LABEL_37;
            }
            if (SHIBYTE(v11->__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v94, v96.__begin_[v9].__r_.__value_.__l.__data_, v96.__begin_[v9].__r_.__value_.__l.__size_);
            }
            else
            {
              v13 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
              v14 = v11->__r_.__value_.__r.__words[2];
LABEL_12:
              v12->__r_.__value_.__r.__words[2] = v14;
              *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
            }
          }
          else
          {
            switch(*(_DWORD *)(a1 + 184))
            {
              case 0:
                v15 = &v96.__begin_[v9];
                v16 = v94;
                if ((unint64_t)v94 >= v95)
                {
                  v29 = (__int128 *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v93, (__int128 *)v15);
                }
                else
                {
                  if (SHIBYTE(v15->__r_.__value_.__r.__words[2]) < 0)
                  {
                    std::string::__init_copy_ctor_external(v94, v96.__begin_[v9].__r_.__value_.__l.__data_, v96.__begin_[v9].__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    v17 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
                    v94->__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
                  }
                  v29 = (__int128 *)&v16[1];
                }
                v94 = (std::string *)v29;
                std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)a1, (const void **)&v96.__begin_[v9].__r_.__value_.__l.__data_, (uint64_t)&v96.__begin_[v9]);
                goto LABEL_38;
              case 1:
                if (kaldi::g_kaldi_verbose_level >= -1)
                {
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v88, "ApplyWord", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/bpe.h", 345);
                  v18 = &v96.__begin_[v9];
                  v19 = SHIBYTE(v96.__begin_[v9].__r_.__value_.__r.__words[2]);
                  if (v19 >= 0)
                    v20 = &v96.__begin_[v9];
                  else
                    v20 = (std::string *)v18->__r_.__value_.__r.__words[0];
                  if (v19 >= 0)
                    size = HIBYTE(v18->__r_.__value_.__r.__words[2]);
                  else
                    size = v18->__r_.__value_.__l.__size_;
                  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v88, (uint64_t)v20, size);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" not contained in BPE encoder ", 30);
                  v23 = (_QWORD *)std::ostream::operator<<();
                  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" mapping to ", 12);
                  v25 = *(_BYTE *)(a1 + 215);
                  if (v25 >= 0)
                    v26 = a1 + 192;
                  else
                    v26 = *(_QWORD *)(a1 + 192);
                  if (v25 >= 0)
                    v27 = *(unsigned __int8 *)(a1 + 215);
                  else
                    v27 = *(_QWORD *)(a1 + 200);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v26, v27);
                  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v88);
                }
                v12 = v94;
                v11 = (std::string *)(a1 + 192);
                if ((unint64_t)v94 >= v95)
                  goto LABEL_34;
                if ((*(char *)(a1 + 215) & 0x80000000) == 0)
                {
                  v13 = *v85;
                  v14 = *(_QWORD *)(a1 + 208);
                  goto LABEL_12;
                }
                std::string::__init_copy_ctor_external(v94, *(const std::string::value_type **)(a1 + 192), *(_QWORD *)(a1 + 200));
                break;
              case 2:
                if (*(char *)(a1 + 215) < 0)
                {
                  std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(a1 + 192), *(_QWORD *)(a1 + 200));
                }
                else
                {
                  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v85;
                  __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 208);
                }
                goto LABEL_138;
              case 4:
                goto LABEL_50;
              default:
                goto LABEL_38;
            }
          }
          v28 = (__int128 *)&v12[1];
LABEL_37:
          v94 = (std::string *)v28;
LABEL_38:
          ++v10;
          begin = v96.__begin_;
          ++v9;
        }
        while (v10 != 0xAAAAAAAAAAAAAAABLL * (((char *)v96.__end_ - (char *)v96.__begin_) >> 3));
      }
      if (v93 != v94)
        break;
LABEL_50:
      std::string::basic_string[abi:ne180100]<0>(&__str, &byte_1DEBD87CE);
LABEL_138:
      v88 = (std::string *)&v93;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
      v88 = (std::string *)&v96;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
LABEL_139:
      v74 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      v75 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v74 = __str.__r_.__value_.__l.__size_;
      if (v74)
      {
        v88 = 0;
        v89 = 0;
        v90[0] = 0;
        kaldi::SplitStringToVector(&__str, " ", 1, (uint64_t)&v88);
        v77 = (__int128 *)v88;
        v76 = v89;
        if (v88 != (std::string *)v89)
        {
          v78 = a3[1];
          do
          {
            if (v78 >= a3[2])
            {
              v78 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, v77);
            }
            else
            {
              std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a3, v77);
              v78 += 24;
            }
            a3[1] = v78;
            v77 = (__int128 *)((char *)v77 + 24);
          }
          while (v77 != (__int128 *)v76);
        }
        v96.__begin_ = (std::vector<std::string>::pointer)&v88;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
        v75 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      if (v75 < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v6 = (__int128 *)((char *)v6 + 24);
      if (v6 == v84)
        return;
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v96, v93, (__int128 *)v94, 0xAAAAAAAAAAAAAAABLL * (((char *)v94 - (char *)v93) >> 3));
    v30 = *(char *)(a1 + 239);
    if (v30 < 0)
    {
      if (*(_QWORD *)(a1 + 224) != 3)
        goto LABEL_57;
      v31 = *(unsigned __int16 **)(a1 + 216);
    }
    else
    {
      v31 = (unsigned __int16 *)(a1 + 216);
      if (v30 != 3)
        goto LABEL_57;
    }
    v32 = *v31;
    v33 = *((unsigned __int8 *)v31 + 2);
    if (v32 == 11824 && v33 == 50)
    {
      v38 = *(_BYTE *)(a1 + 183);
      if (v38 >= 0)
        v39 = (const std::string::value_type *)(a1 + 160);
      else
        v39 = *(const std::string::value_type **)(a1 + 160);
      if (v38 >= 0)
        v40 = *(unsigned __int8 *)(a1 + 183);
      else
        v40 = *(_QWORD *)(a1 + 168);
      std::string::append(v96.__end_ - 1, v39, v40);
      v88 = 0;
      v89 = 0;
      v90[0] = 0;
      while (1)
      {
        kaldi::quasar::BPE::GetPairs(a1, &v96.__begin_, (uint64_t)&v88);
        v41 = 0xAAAAAAAAAAAAAAABLL * ((v89 - (char *)v88) >> 3);
        if ((std::vector<std::string>::pointer)((char *)v96.__end_ - (char *)v96.__begin_) == (std::vector<std::string>::pointer)24
          || 0xAAAAAAAAAAAAAAABLL * (((char *)v96.__end_ - (char *)v96.__begin_) >> 3) == v41)
        {
          break;
        }
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v96, v88, (__int128 *)v89, v41);
      }
      v87.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v87);
      goto LABEL_107;
    }
LABEL_57:
    end = v96.__end_;
    if (v96.__end_ >= v96.__end_cap_.__value_)
    {
      v37 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v96, v83);
    }
    else
    {
      if (*(char *)(a1 + 183) < 0)
      {
        std::string::__init_copy_ctor_external(v96.__end_, *(const std::string::value_type **)(a1 + 160), *(_QWORD *)(a1 + 168));
      }
      else
      {
        v36 = *v83;
        v96.__end_->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 176);
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v36;
      }
      v37 = end + 1;
    }
    v96.__end_ = v37;
    v88 = 0;
    v89 = 0;
    v90[0] = 0;
    while (1)
    {
      kaldi::quasar::BPE::GetPairs(a1, &v96.__begin_, (uint64_t)&v88);
      v43 = 0xAAAAAAAAAAAAAAABLL * ((v89 - (char *)v88) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v96.__end_ - (char *)v96.__begin_) >> 3) == v43)
        break;
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v96, v88, (__int128 *)v89, v43);
    }
    v87.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v87);
    v44 = v96.__end_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v96.__end_ - (char *)v96.__begin_) >> 3) <= 1)
      goto LABEL_107;
    v45 = HIBYTE(v96.__end_[-1].__r_.__value_.__r.__words[2]);
    v46 = (v45 & 0x80u) == 0
        ? HIBYTE(v96.__end_[-1].__r_.__value_.__r.__words[2])
        : v96.__end_[-1].__r_.__value_.__l.__size_;
    v47 = *(unsigned __int8 *)(a1 + 183);
    v48 = v47;
    v49 = *(_QWORD *)(a1 + 168);
    v50 = (v47 & 0x80u) == 0 ? *(unsigned __int8 *)(a1 + 183) : *(_QWORD *)(a1 + 168);
    if (v46 != v50)
      goto LABEL_107;
    v51 = v96.__end_ - 1;
    v52 = *(const std::string::value_type **)v83;
    if ((v47 & 0x80u) == 0)
      v53 = (const std::string::value_type *)(a1 + 160);
    else
      v53 = *(const std::string::value_type **)v83;
    if ((v45 & 0x80) != 0)
    {
      v55 = (void *)v51->__r_.__value_.__r.__words[0];
      if (memcmp(v51->__r_.__value_.__l.__data_, v53, v96.__end_[-1].__r_.__value_.__l.__size_))
      {
LABEL_107:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v88);
        v58 = (unint64_t)v96.__begin_;
        if (v96.__end_ != v96.__begin_)
        {
          v59 = 0;
          v60 = 0;
          v61 = 0xAAAAAAAAAAAAAAABLL * (((char *)v96.__end_ - (char *)v96.__begin_) >> 3);
          do
          {
            if (v61 <= ++v60)
            {
              v70 = (const std::string *)(v58 + v59);
              LODWORD(v58) = *(char *)(v58 + v59 + 23);
              if ((v58 & 0x80000000) != 0)
                v58 = v70->__r_.__value_.__l.__size_;
              else
                v58 = v58;
              std::string::basic_string(&v87, v70, 0, v58 - 4, (std::allocator<char> *)v97);
              if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v71 = &v87;
              else
                v71 = (std::string *)v87.__r_.__value_.__r.__words[0];
              if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v72 = HIBYTE(v87.__r_.__value_.__r.__words[2]);
              else
                v72 = v87.__r_.__value_.__l.__size_;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)v71, v72);
              if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v87.__r_.__value_.__l.__data_);
            }
            else
            {
              v62 = (std::string *)(v58 + v59);
              v63 = SHIBYTE(v62->__r_.__value_.__r.__words[2]);
              if (v63 >= 0)
                v64 = (uint64_t)v62;
              else
                v64 = v62->__r_.__value_.__r.__words[0];
              if (v63 >= 0)
                v65 = HIBYTE(v62->__r_.__value_.__r.__words[2]);
              else
                v65 = v62->__r_.__value_.__l.__size_;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, v64, v65);
              v66 = *(char *)(a1 + 159);
              if (v66 >= 0)
                v67 = a1 + 136;
              else
                v67 = *(_QWORD *)(a1 + 136);
              if (v66 >= 0)
                v68 = *(unsigned __int8 *)(a1 + 159);
              else
                v68 = *(_QWORD *)(a1 + 144);
              v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, v67, v68);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)" ", 1);
            }
            v58 = (unint64_t)v96.__begin_;
            v61 = 0xAAAAAAAAAAAAAAABLL * (((char *)v96.__end_ - (char *)v96.__begin_) >> 3);
            v59 += 24;
          }
          while (v61 > v60);
        }
        std::stringbuf::str();
        v87.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
        v73 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 88, (unsigned __int8 *)v6, (__int128 **)&v87);
        std::string::operator=((std::string *)(v73 + 40), &__str);
        v88 = (std::string *)v82;
        *(std::string **)((char *)&v88 + *((_QWORD *)v82 - 3)) = (std::string *)v81;
        v90[0] = v80;
        v90[1] = v79;
        if (v91 < 0)
          operator delete((void *)v90[9]);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1DF0ECF6C](&v92);
        goto LABEL_138;
      }
      operator delete(v55);
      v47 = *(unsigned __int8 *)(a1 + 183);
      v52 = *(const std::string::value_type **)(a1 + 160);
      v49 = *(_QWORD *)(a1 + 168);
      v48 = *(_BYTE *)(a1 + 183);
    }
    else if (*((_BYTE *)&v96.__end_[-1].__r_.__value_.__s + 23))
    {
      v54 = v96.__end_ - 1;
      while (v54->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v53)
      {
        v54 = (std::vector<std::string>::pointer)((char *)v54 + 1);
        ++v53;
        if (!--v45)
          goto LABEL_100;
      }
      goto LABEL_107;
    }
LABEL_100:
    v96.__end_ = v44 - 1;
    if (v48 >= 0)
      v56 = (const std::string::value_type *)(a1 + 160);
    else
      v56 = v52;
    if (v48 >= 0)
      v57 = v47;
    else
      v57 = v49;
    std::string::append(v44 - 2, v56, v57);
    goto LABEL_107;
  }
}

void sub_1DEAD4278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32)
{
  uint64_t v32;

  a32 = v32 - 144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  a32 = v32 - 120;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::NNMTTransliterator::Transliterate(std::vector<std::string> const&,std::string const&,BOOL)::VectorUReplaceable::length(const UChar **a1)
{
  return u_strlen(*a1);
}

uint64_t kaldi::quasar::NNMTTransliterator::Transliterate(std::vector<std::string> const&,std::string const&,BOOL)::VectorUReplaceable::charAt(_QWORD *a1, int a2)
{
  if (a2 >= (unint64_t)((uint64_t)(a1[1] - *a1) >> 1))
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  return *(unsigned __int16 *)(*a1 + 2 * a2);
}

uint64_t kaldi::quasar::NNMTTransliterator::Transliterate(std::vector<std::string> const&,std::string const&,BOOL)::VectorUReplaceable::char32At(_QWORD *a1, int a2)
{
  if (a2 >= (unint64_t)((uint64_t)(a1[1] - *a1) >> 1))
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  return *(unsigned __int16 *)(*a1 + 2 * a2);
}

void kaldi::quasar::NNMTTransliterator::Transliterate(std::vector<std::string> const&,std::string const&,BOOL)::VectorUReplaceable::replace(void **a1, int a2, int a3, UChar *s, int32_t a5)
{
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  int64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  char *v16;
  _BYTE *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  UChar *v24;
  uint64_t v25;
  UChar *v26;
  size_t v27;
  char *v28;
  char *v29;
  __int16 *v30;
  char *v31;
  __int16 v32;
  _WORD *v33;
  uint64_t v34;
  _WORD *v35;
  __int16 v36;
  void *__p[5];

  if (a2 != a3)
  {
    v9 = a1[1];
    v10 = (uint64_t)*a1 + 2 * a2;
    v11 = (char *)*a1 + 2 * a3;
    v12 = v9 - v11;
    if (v9 != v11)
      memmove((char *)*a1 + 2 * a2, v11, v9 - v11);
    a1[1] = (void *)(v10 + v12);
  }
  if (a5 == -1)
    a5 = u_strlen(s);
  if (a5 >= 1)
  {
    v13 = a2;
    v14 = *a1;
    v15 = a5;
    v16 = (char *)*a1 + 2 * a2;
    v17 = a1[2];
    v18 = (unint64_t)a1[1];
    if (a5 <= (uint64_t)&v17[-v18] >> 1)
    {
      v24 = &s[a5];
      v25 = (uint64_t)(v18 - (_QWORD)v16) >> 1;
      if (v25 >= a5)
      {
        v28 = (char *)a1[1];
      }
      else
      {
        v26 = &s[v25];
        v27 = (char *)v24 - (char *)v26;
        memmove(a1[1], v26, v27);
        v28 = (char *)(v18 + v27);
        a1[1] = (void *)(v18 + v27);
        if ((uint64_t)(v18 - (_QWORD)v16) < 1)
          return;
        v24 = v26;
      }
      v29 = &v16[2 * v15];
      v30 = (__int16 *)&v28[-2 * v15];
      v31 = v28;
      if ((unint64_t)v30 < v18)
      {
        v31 = v28;
        do
        {
          v32 = *v30++;
          *(_WORD *)v31 = v32;
          v31 += 2;
        }
        while ((unint64_t)v30 < v18);
      }
      a1[1] = v31;
      if (v28 != v29)
        memmove(&v28[-2 * ((v28 - v29) >> 1)], v16, v28 - v29);
      if (v24 != s)
        memmove(v16, s, (char *)v24 - (char *)s);
    }
    else
    {
      v19 = a5 + ((uint64_t)(v18 - (_QWORD)v14) >> 1);
      if (v19 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v20 = v17 - v14;
      if (v20 <= v19)
        v21 = v19;
      else
        v21 = v20;
      if (v20 >= 0x7FFFFFFFFFFFFFFELL)
        v22 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v22 = v21;
      __p[4] = a1 + 2;
      if (v22)
        v22 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v22);
      else
        v23 = 0;
      v33 = (_WORD *)(v22 + 2 * v13);
      __p[0] = (void *)v22;
      __p[1] = v33;
      __p[3] = (void *)(v22 + 2 * v23);
      v34 = a5;
      v35 = &v33[v34];
      do
      {
        v36 = *s++;
        *v33++ = v36;
        --v34;
      }
      while (v34 * 2);
      __p[2] = v35;
      std::vector<unsigned short>::__swap_out_circular_buffer(a1, (uint64_t)__p, v16);
      if (__p[0])
        operator delete(__p[0]);
    }
  }
}

void *kaldi::quasar::NNMTTransliterator::Transliterate(std::vector<std::string> const&,std::string const&,BOOL)::VectorUReplaceable::extract(_QWORD *a1, int a2, int a3, void *__dst)
{
  return memmove(__dst, (const void *)(*a1 + 2 * a2), 2 * (a3 - a2));
}

void kaldi::quasar::NNMTTransliterator::Transliterate(std::vector<std::string> const&,std::string const&,BOOL)::VectorUReplaceable::copy(void **a1, int a2, int a3, int a4)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  __int16 v29;
  _WORD *v30;
  _WORD *v31;
  uint64_t v32;
  __int16 *v33;
  __int16 v34;
  void *__p[5];

  v6 = (char *)*a1;
  if (a3 == a2)
  {
    v7 = 0;
    v8 = 0;
  }
  else
  {
    v9 = a3 - (uint64_t)a2;
    if (v9 < 0)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = &v6[2 * a2];
    v11 = &v6[2 * a3];
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v9);
    v12 = v11 - v10;
    memmove(v7, v10, v12);
    v8 = &v7[v12];
    v6 = (char *)*a1;
  }
  v13 = v8 - v7;
  if (v8 - v7 >= 1)
  {
    v14 = &v6[2 * a4];
    v15 = v13 >> 1;
    v16 = (char *)a1[2];
    v17 = (unint64_t)a1[1];
    if (v13 >> 1 > (uint64_t)&v16[-v17] >> 1)
    {
      v18 = v15 + ((uint64_t)(v17 - (_QWORD)v6) >> 1);
      if (v18 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v19 = v16 - v6;
      if (v19 > v18)
        v18 = v19;
      if (v19 >= 0x7FFFFFFFFFFFFFFELL)
        v20 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v20 = v18;
      __p[4] = a1 + 2;
      if (v20)
        v20 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v20);
      else
        v21 = 0;
      v30 = (_WORD *)(v20 + 2 * a4);
      __p[0] = (void *)v20;
      __p[1] = v30;
      __p[3] = (void *)(v20 + 2 * v21);
      v31 = &v30[v15];
      v32 = 2 * v15;
      v33 = (__int16 *)v7;
      do
      {
        v34 = *v33++;
        *v30++ = v34;
        v32 -= 2;
      }
      while (v32);
      __p[2] = v31;
      std::vector<unsigned short>::__swap_out_circular_buffer(a1, (uint64_t)__p, v14);
      if (__p[0])
        operator delete(__p[0]);
      goto LABEL_33;
    }
    v22 = (uint64_t)(v17 - (_QWORD)v14) >> 1;
    if (v22 >= v15)
    {
      v23 = &v7[2 * v15];
      v25 = (char *)a1[1];
    }
    else
    {
      v23 = &v7[2 * v22];
      v24 = v8 - v23;
      if (v8 != v23)
        memmove(a1[1], &v7[2 * v22], v8 - v23);
      v25 = (char *)(v17 + v24);
      a1[1] = (void *)(v17 + v24);
      if ((uint64_t)(v17 - (_QWORD)v14) < 1)
        goto LABEL_33;
    }
    v26 = &v14[2 * v15];
    v27 = &v25[-2 * v15];
    v28 = v25;
    if ((unint64_t)v27 < v17)
    {
      v28 = v25;
      do
      {
        v29 = *(_WORD *)v27;
        v27 += 2;
        *(_WORD *)v28 = v29;
        v28 += 2;
      }
      while ((unint64_t)v27 < v17);
    }
    a1[1] = v28;
    if (v25 != v26)
      memmove(&v25[-2 * ((v25 - v26) >> 1)], v14, v25 - v26);
    if (v23 != v7)
      memmove(v14, v7, v23 - v7);
  }
LABEL_33:
  if (v7)
    operator delete(v7);
}

void sub_1DEAD480C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned short>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  __int16 v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_WORD *)v8 - 1);
      v8 -= 2;
      *((_WORD *)v7 - 1) = v9;
      v7 -= 2;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

_QWORD *fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>::VectorFst(_QWORD *a1)
{
  uint64_t v2;
  std::string __str;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1EA925710;
  *(_QWORD *)(v2 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v2 + 16), "null");
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 56) = 1;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_DWORD *)(v2 + 88) = -1;
  *(_QWORD *)v2 = &off_1EA9249F8;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=((std::string *)(v2 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(v2 + 8) & 4 | 0x156A5A950003;
  *a1 = &off_1EA926308;
  a1[1] = v2;
  return a1;
}

void sub_1DEAD49D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  if (a15 < 0)
    operator delete(__p);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>::~VectorFstBaseImpl(v15);
  MEMORY[0x1DF0ED014](v15, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

float kaldi::quasar::TMTools::GreedyDecode<kaldi::quasar::TorchEncoderDecoder>(kaldi::quasar::TorchEncoderDecoder *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  float *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  const char *v23;
  int v24;
  float v25;
  uint64_t v26;
  const char *v27;
  int IsUpdatable;
  unsigned int SoftmaxEosId;
  const char *v30;
  float v31;
  int v32;
  int v33;
  const char *v34;
  float v35;
  float *v36;
  float *v37;
  unint64_t v38;
  int VocabWordIdx;
  const char *v40;
  float *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  float *v47;
  int v48;
  int BestAlignment;
  uint64_t v50;
  const char *v51;
  int v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  int v70;
  _QWORD *v71;
  uint64_t v72;
  int v73;
  unint64_t v74;
  int *v75;
  _DWORD *v76;
  int *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  int *v83;
  int v84;
  char *v85;
  int v86;
  _QWORD *v87;
  uint64_t v88;
  int v89;
  unint64_t v90;
  int *v91;
  _DWORD *v92;
  int *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  int *v99;
  int v100;
  float *v101;
  float *v102;
  float *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  float *v109;
  int v110;
  _QWORD *v112;
  char *v113;
  char *v114;
  int v115;
  BOOL v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  unsigned int v124;
  float v125;
  float v126;
  uint64_t v128;
  void *v130;
  __int128 v131;
  __int128 v132;
  char v133;
  void *v134;
  _BYTE *v135;
  uint64_t v136;
  void *v137;
  void *v138;
  _BYTE *v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  void *v143;
  void *v144;
  uint64_t v145;
  int v146;
  void *__p;
  float *v148;
  char *v149;
  uint64_t v150;
  _QWORD *v151;
  unint64_t v152;
  char *v153;
  char *v154;
  char *v155;
  char v156[8];
  float *v157;
  int v158;
  int v159;
  void *v160;
  __int128 v161;
  __int128 v162;
  char v163;

  v131 = 0u;
  v132 = 0u;
  v130 = &unk_1EA92DFA8;
  v133 = 0;
  kaldi::CuMatrix<float>::Resize((uint64_t)&v130, (unint64_t)(a2[1] - *a2) >> 2, 1, 0, 0);
  v14 = *a2;
  v15 = a2[1];
  v16 = v15 - *a2;
  if (v15 != *a2)
  {
    v17 = 0;
    v18 = v16 >> 2;
    v19 = (float *)v131;
    v20 = HIDWORD(v131);
    if (v18 <= 1)
      v18 = 1;
    v21 = 4 * (int)v132;
    do
    {
      if (v17 >= v20 || !DWORD2(v131))
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x221, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v13);
      *v19 = (float)*(int *)(v14 + 4 * v17++);
      v19 = (float *)((char *)v19 + v21);
    }
    while (v18 != v17);
  }
  kaldi::quasar::TorchEncoderDecoder::ResetHistoryState(a1, 1);
  kaldi::quasar::TorchEncoderDecoder::Start(a1, (clockid_t)1u, a4);
  kaldi::quasar::TorchEncoderDecoder::StartFeedforward((uint64_t)a1, (uint64_t)&v130, 0);
  v162 = 0u;
  v161 = 0u;
  v160 = &unk_1EA92DFA8;
  v163 = 0;
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v156, 1, 1, 0, 0, 0);
  v22 = kaldi::quasar::TorchEncoderDecoder::BosTargetId(a1);
  if (!v159 || !v158)
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x221, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v23);
  *v157 = (float)(v22 - 1);
  v153 = 0;
  v154 = 0;
  v155 = 0;
  v150 = 0;
  v151 = 0;
  v152 = 0;
  __p = 0;
  v148 = 0;
  v149 = 0;
  v24 = 0;
  if (a7 < 0)
  {
    v25 = 0.0;
  }
  else
  {
    v128 = a3 + 16;
    v25 = 0.0;
    while (1)
    {
      kaldi::quasar::TorchEncoderDecoder::Feedforward((uint64_t)a1, (uint64_t)v156, (uint64_t)&v160, 0);
      kaldi::Matrix<float>::Matrix((uint64_t)&v141, HIDWORD(v161), DWORD2(v161), 0, 0);
      kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)&v160, (unsigned int *)&v141, 111, v26, v27);
      IsUpdatable = kaldi::nnet1::UpdatableComponent::IsUpdatable(a1);
      if (v24 == a7)
      {
        SoftmaxEosId = kaldi::quasar::TorchEncoderDecoder::GetSoftmaxEosId(a1);
        if (!HIDWORD(v142) || v142 <= SoftmaxEosId)
          kaldi::KaldiAssertFailure_((kaldi *)"operator()", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v30);
        v31 = *(float *)(v141 + 4 * (int)SoftmaxEosId);
        v32 = kaldi::quasar::TorchEncoderDecoder::EosTargetId(a1) - 1;
      }
      else
      {
        v38 = 0;
        v32 = 0;
        v31 = IsUpdatable ? 0.0 : -3.4028e38;
        while (v38 != kaldi::MatrixBase<float>::NumCols((uint64_t)&v141))
        {
          VocabWordIdx = kaldi::quasar::TorchEncoderDecoder::GetVocabWordIdx(a1, v38);
          if ((v24 >= a6 || VocabWordIdx != kaldi::quasar::TorchEncoderDecoder::EosTargetId(a1) - 1)
            && (!kaldi::quasar::TorchEncoderDecoder::HasBpeModel(a1)
             || VocabWordIdx != kaldi::quasar::TorchEncoderDecoder::UnkTargetId(a1) - 1))
          {
            if (!HIDWORD(v142) || v38 >= v142)
              kaldi::KaldiAssertFailure_((kaldi *)"operator()", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v40);
            if (*(float *)(v141 + 4 * v38) > v31)
            {
              v31 = *(float *)(v141 + 4 * v38);
              v32 = VocabWordIdx;
            }
          }
          ++v38;
        }
      }
      v33 = kaldi::nnet1::UpdatableComponent::IsUpdatable(a1);
      v35 = logf(v31);
      if (v33)
        v31 = v35;
      if (!v159 || !v158)
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x221, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v34);
      *v157 = (float)v32;
      v36 = v148;
      if (v148 >= (float *)v149)
      {
        v41 = (float *)__p;
        v42 = ((char *)v148 - (_BYTE *)__p) >> 2;
        v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v44 = v149 - (_BYTE *)__p;
        if ((v149 - (_BYTE *)__p) >> 1 > v43)
          v43 = v44 >> 1;
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
          v45 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v45 = v43;
        if (v45)
        {
          v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v149, v45);
          v41 = (float *)__p;
          v36 = v148;
        }
        else
        {
          v46 = 0;
        }
        v47 = (float *)&v46[4 * v42];
        *v47 = v31;
        v37 = v47 + 1;
        while (v36 != v41)
        {
          v48 = *((_DWORD *)v36-- - 1);
          *((_DWORD *)v47-- - 1) = v48;
        }
        __p = v47;
        v148 = v37;
        v149 = &v46[4 * v45];
        if (v41)
          operator delete(v41);
      }
      else
      {
        *v148 = v31;
        v37 = v36 + 1;
      }
      v148 = v37;
      BestAlignment = kaldi::quasar::TorchEncoderDecoder::GetBestAlignment(a1, 0);
      v137 = 0;
      v138 = 0;
      v139 = 0;
      kaldi::quasar::TorchEncoderDecoder::GetAlignmentProbabilities((uint64_t)a1, (uint64_t)&v137, 0, v50, v51);
      v52 = kaldi::quasar::TorchEncoderDecoder::EosTargetId(a1) - 1;
      if (v32 == v52)
      {
        if (*((_BYTE *)a1 + 4443) && *((_BYTE *)a1 + 4444))
        {
          v53 = v154;
          if (v154 >= v155)
          {
            v63 = v153;
            v64 = (v154 - v153) >> 2;
            v65 = v64 + 1;
            if ((unint64_t)(v64 + 1) >> 62)
LABEL_184:
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v66 = v155 - v153;
            if ((v155 - v153) >> 1 > v65)
              v65 = v66 >> 1;
            if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL)
              v67 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v67 = v65;
            if (v67)
            {
              v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v155, v67);
              v63 = v153;
              v53 = v154;
            }
            else
            {
              v68 = 0;
            }
            v85 = &v68[4 * v64];
            *(_DWORD *)v85 = BestAlignment;
            v54 = v85 + 4;
            while (v53 != v63)
            {
              v86 = *((_DWORD *)v53 - 1);
              v53 -= 4;
              *((_DWORD *)v85 - 1) = v86;
              v85 -= 4;
            }
            v153 = v85;
            v154 = v54;
            v155 = &v68[4 * v67];
            if (v63)
              operator delete(v63);
          }
          else
          {
            *(_DWORD *)v154 = BestAlignment;
            v54 = v53 + 4;
          }
          v154 = v54;
          v87 = v151;
          if ((unint64_t)v151 >= v152)
          {
            v88 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(&v150, (uint64_t)&v137);
          }
          else
          {
            *v151 = 0;
            v87[1] = 0;
            v87[2] = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v87, v137, (uint64_t)v138, ((_BYTE *)v138 - (_BYTE *)v137) >> 2);
            v88 = (uint64_t)(v87 + 3);
          }
          v151 = (_QWORD *)v88;
          v89 = v32 + 1;
          v91 = *(int **)(a3 + 8);
          v90 = *(_QWORD *)(a3 + 16);
          if ((unint64_t)v91 >= v90)
          {
            v93 = *(int **)a3;
            v94 = ((uint64_t)v91 - *(_QWORD *)a3) >> 2;
            v95 = v94 + 1;
            if ((unint64_t)(v94 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v96 = v90 - (_QWORD)v93;
            if (v96 >> 1 > v95)
              v95 = v96 >> 1;
            if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFFCLL)
              v97 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v97 = v95;
            if (v97)
            {
              v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v128, v97);
              v93 = *(int **)a3;
              v91 = *(int **)(a3 + 8);
            }
            else
            {
              v98 = 0;
            }
            v99 = (int *)&v98[4 * v94];
            *v99 = v89;
            v92 = v99 + 1;
            while (v91 != v93)
            {
              v100 = *--v91;
              *--v99 = v100;
            }
            *(_QWORD *)a3 = v99;
            *(_QWORD *)(a3 + 8) = v92;
            *(_QWORD *)(a3 + 16) = &v98[4 * v97];
            if (v93)
              operator delete(v93);
          }
          else
          {
            *v91 = v89;
            v92 = v91 + 1;
          }
          *(_QWORD *)(a3 + 8) = v92;
          v101 = v148;
          if (v148 >= (float *)v149)
          {
            v103 = (float *)__p;
            v104 = ((char *)v148 - (_BYTE *)__p) >> 2;
            v105 = v104 + 1;
            if ((unint64_t)(v104 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v106 = v149 - (_BYTE *)__p;
            if ((v149 - (_BYTE *)__p) >> 1 > v105)
              v105 = v106 >> 1;
            if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFFCLL)
              v107 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v107 = v105;
            if (v107)
            {
              v108 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v149, v107);
              v103 = (float *)__p;
              v101 = v148;
            }
            else
            {
              v108 = 0;
            }
            v109 = (float *)&v108[4 * v104];
            *v109 = 0.0;
            v102 = v109 + 1;
            while (v101 != v103)
            {
              v110 = *((_DWORD *)v101-- - 1);
              *((_DWORD *)v109-- - 1) = v110;
            }
            __p = v109;
            v148 = v102;
            v149 = &v108[4 * v107];
            if (v103)
              operator delete(v103);
          }
          else
          {
            *v148 = 0.0;
            v102 = v101 + 1;
          }
          v148 = v102;
        }
      }
      else
      {
        v55 = v154;
        if (v154 >= v155)
        {
          v57 = v153;
          v58 = (v154 - v153) >> 2;
          v59 = v58 + 1;
          if ((unint64_t)(v58 + 1) >> 62)
            goto LABEL_184;
          v60 = v155 - v153;
          if ((v155 - v153) >> 1 > v59)
            v59 = v60 >> 1;
          if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL)
            v61 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v61 = v59;
          if (v61)
          {
            v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v155, v61);
            v57 = v153;
            v55 = v154;
          }
          else
          {
            v62 = 0;
          }
          v69 = &v62[4 * v58];
          *(_DWORD *)v69 = BestAlignment;
          v56 = v69 + 4;
          while (v55 != v57)
          {
            v70 = *((_DWORD *)v55 - 1);
            v55 -= 4;
            *((_DWORD *)v69 - 1) = v70;
            v69 -= 4;
          }
          v153 = v69;
          v154 = v56;
          v155 = &v62[4 * v61];
          if (v57)
            operator delete(v57);
        }
        else
        {
          *(_DWORD *)v154 = BestAlignment;
          v56 = v55 + 4;
        }
        v154 = v56;
        v71 = v151;
        if ((unint64_t)v151 >= v152)
        {
          v72 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(&v150, (uint64_t)&v137);
        }
        else
        {
          *v151 = 0;
          v71[1] = 0;
          v71[2] = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v71, v137, (uint64_t)v138, ((_BYTE *)v138 - (_BYTE *)v137) >> 2);
          v72 = (uint64_t)(v71 + 3);
        }
        v151 = (_QWORD *)v72;
        v73 = v32 + 1;
        v75 = *(int **)(a3 + 8);
        v74 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v75 >= v74)
        {
          v77 = *(int **)a3;
          v78 = ((uint64_t)v75 - *(_QWORD *)a3) >> 2;
          v79 = v78 + 1;
          if ((unint64_t)(v78 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v80 = v74 - (_QWORD)v77;
          if (v80 >> 1 > v79)
            v79 = v80 >> 1;
          if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL)
            v81 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v81 = v79;
          if (v81)
          {
            v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v128, v81);
            v77 = *(int **)a3;
            v75 = *(int **)(a3 + 8);
          }
          else
          {
            v82 = 0;
          }
          v83 = (int *)&v82[4 * v78];
          *v83 = v73;
          v76 = v83 + 1;
          while (v75 != v77)
          {
            v84 = *--v75;
            *--v83 = v84;
          }
          *(_QWORD *)a3 = v83;
          *(_QWORD *)(a3 + 8) = v76;
          *(_QWORD *)(a3 + 16) = &v82[4 * v81];
          if (v77)
            operator delete(v77);
        }
        else
        {
          *v75 = v73;
          v76 = v75 + 1;
        }
        *(_QWORD *)(a3 + 8) = v76;
      }
      if (v137)
      {
        v138 = v137;
        operator delete(v137);
      }
      v25 = v25 + v31;
      kaldi::Matrix<float>::~Matrix((uint64_t)&v141);
      if (v32 == v52)
        break;
      if (v24++ == a7)
        goto LABEL_150;
    }
  }
  if (v24 == a7 && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v141, "GreedyDecode", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-model-tools.h", 141);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v141, (uint64_t)"Decoder hit max sentence length : ", 34);
    v112 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)" ", 1);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v141);
  }
LABEL_150:
  if (kaldi::quasar::TorchEncoderDecoder::Reverse(a1) && v153 != v154)
  {
    v113 = v154 - 4;
    if (v154 - 4 > v153)
    {
      v114 = v153 + 4;
      do
      {
        v115 = *((_DWORD *)v114 - 1);
        *((_DWORD *)v114 - 1) = *(_DWORD *)v113;
        *(_DWORD *)v113 = v115;
        v113 -= 4;
        v116 = v114 >= v113;
        v114 += 4;
      }
      while (!v116);
    }
  }
  v117 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 192))(a5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a5 + 168))(a5, v117);
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3)
  {
    v119 = 0;
    v121 = a5;
  }
  else
  {
    v118 = 0;
    v119 = 0;
    v120 = v117;
    v121 = a5;
    do
    {
      v122 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v121 + 192))(v121);
      if (v119 >= (v154 - v153) >> 2 || v119 >= (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2)
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v151 - v150) >> 3) <= v119)
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      v117 = v122;
      v123 = *(_DWORD *)&v153[4 * v119];
      v124 = *(_DWORD *)(*(_QWORD *)a3 + 4 * v119);
      v125 = *((float *)__p + v119);
      v134 = 0;
      v135 = 0;
      v136 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v134, *(const void **)(v150 + v118), *(_QWORD *)(v150 + v118 + 8), (uint64_t)(*(_QWORD *)(v150 + v118 + 8) - *(_QWORD *)(v150 + v118)) >> 2);
      LODWORD(v137) = 0;
      *((float *)&v137 + 1) = -v125;
      v139 = 0;
      v140 = 0;
      v138 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v138, v134, (uint64_t)v135, (v135 - (_BYTE *)v134) >> 2);
      v141 = __PAIR64__(v124, v123);
      v142 = v137;
      v144 = 0;
      v145 = 0;
      v143 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v143, v138, (uint64_t)v139, (v139 - (_BYTE *)v138) >> 2);
      v146 = v117;
      (*(void (**)(uint64_t, uint64_t, unint64_t *))(*(_QWORD *)a5 + 200))(a5, v120, &v141);
      if (v143)
      {
        v144 = v143;
        operator delete(v143);
      }
      if (v138)
      {
        v139 = v138;
        operator delete(v138);
      }
      if (v134)
      {
        v135 = v134;
        operator delete(v134);
      }
      ++v119;
      v118 += 24;
      v120 = v117;
      v121 = a5;
    }
    while (v119 != (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  }
  v126 = -*((float *)__p + v119);
  LODWORD(v141) = 0;
  *((float *)&v141 + 1) = v126;
  v143 = 0;
  v144 = 0;
  v142 = 0;
  (*(void (**)(uint64_t, uint64_t, unint64_t *))(*(_QWORD *)v121 + 176))(v121, v117, &v141);
  if (v142)
  {
    v143 = v142;
    operator delete(v142);
  }
  if (__p)
  {
    v148 = (float *)__p;
    operator delete(__p);
  }
  v137 = &v150;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
  if (v153)
  {
    v154 = v153;
    operator delete(v153);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v156);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v160);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v130);
  return -v25;
}

void sub_1DEAD5638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,uint64_t a63)
{
  char a64;
  uint64_t v64;
  void *v66;

  if (__p)
  {
    a62 = (uint64_t)__p;
    operator delete(__p);
  }
  a23 = &a64;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  v66 = *(void **)(v64 - 240);
  if (v66)
  {
    *(_QWORD *)(v64 - 232) = v66;
    operator delete(v66);
  }
  kaldi::CuMatrix<float>::~CuMatrix(v64 - 216);
  kaldi::CuMatrix<float>::~CuMatrix(v64 - 168);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 88);
}

_QWORD *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2);
  *a3 = *(_QWORD *)v3;
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a3 + 1, *(const void **)(v3 + 8), *(_QWORD *)(v3 + 16), (uint64_t)(*(_QWORD *)(v3 + 16) - *(_QWORD *)(v3 + 8)) >> 2);
}

unint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::NumArcs(uint64_t a1, int a2)
{
  return 0xAAAAAAAAAAAAAAABLL
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 56)
                  - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 48)) >> 4);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 32);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::Properties(_QWORD **a1, uint64_t a2, int a3)
{
  unint64_t v5;
  unint64_t v6;
  fst *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v11;
  void *__p[2];
  char v13;
  char v14;

  if (!a3)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1[1] + 32))(a1[1], a2);
  v11 = 0;
  if (FLAGS_fst_verify_properties)
  {
    v5 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD))(*a1)[8])(a1, 0x3FFFFFFF0007, 0);
    v6 = fst::ComputeProperties<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>((uint64_t)a1, a2, &v11, 0);
    if (!fst::CompatProperties(v5, v6))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      v7 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
      v8 = (_QWORD *)fst::cerr(v7);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" (stored: props1, computed: props2)", 35);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
      if (v13 < 0)
        operator delete(__p[0]);
    }
  }
  else
  {
    v6 = fst::ComputeProperties<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>((uint64_t)a1, a2, &v11, 1);
  }
  a1[1][1] = a1[1][1] & (~v11 | 4) | v11 & v6;
  return v6 & a2;
}

void sub_1DEAD599C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

void fst::Fst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  _DWORD *v26;

  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(_QWORD *)a1 + 136))(a1, a2, &v23);
  if (!v23 && (a4 & 1) == 0)
  {
    v8 = v24 + 48 * v25;
    *(_QWORD *)(a3 + 16) = v24;
    *(_QWORD *)(a3 + 24) = v8;
    if (*(_QWORD *)a3)
    {
      free(*(void **)a3);
      *(_QWORD *)a3 = 0;
    }
    *(_QWORD *)(a3 + 8) = 0;
    return;
  }
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2);
  v10 = 2;
  if (!a4)
    v10 = 0;
  v11 = v9 + v10;
  if (*(_QWORD *)(a3 + 8) < (unint64_t)(v9 + v10))
  {
    if (*(_QWORD *)a3)
      free(*(void **)a3);
    v22 = 0x4000;
    if (v11 > 0x4000)
      v22 = v11;
    *(_QWORD *)(a3 + 8) = v22;
    v13 = malloc_type_malloc(48 * v22, 0x108004053AFDD15uLL);
    *(_QWORD *)a3 = v13;
    *(_QWORD *)(a3 + 16) = v13;
    v12 = v13;
  }
  else
  {
    v12 = *(_QWORD **)(a3 + 16);
    v13 = *(_QWORD **)a3;
  }
  *(_QWORD *)(a3 + 24) = &v12[6 * v11];
  v14 = v23;
  v15 = v24;
  v17 = v25;
  v16 = v26;
  if (v26)
    ++*v26;
  v18 = 0;
LABEL_13:
  v13 += 6;
  while (v14)
  {
    v19 = (*(uint64_t (**)(uint64_t *))(*v14 + 24))(v14);
    v20 = *v14;
    if (v19)
    {
      (*(void (**)(uint64_t *))(v20 + 8))(v14);
      return;
    }
    v21 = (*(uint64_t (**)(uint64_t *))(v20 + 32))(v14);
LABEL_18:
    *(v13 - 6) = *(_QWORD *)v21;
    fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>::operator=((uint64_t)(v13 - 5), v21 + 8);
    *((_DWORD *)v13 - 2) = *(_DWORD *)(v21 + 40);
    if (!v14)
    {
      ++v18;
      goto LABEL_13;
    }
    v13 += 6;
    (*(void (**)(uint64_t *))(*v14 + 40))(v14);
  }
  v21 = v15 + 48 * v18;
  if (v18 < v17)
    goto LABEL_18;
  if (v16)
    --*v16;
}

void sub_1DEAD5BBC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _DWORD *v2;

  if (v1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  else if (v2)
  {
    --*v2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::Fst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::Write(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1DEAD5CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1DEAD5D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::Fst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::InitMatcher()
{
  return 0;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::operator=(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  void *__p[2];
  char v6;
  char v7;

  if (FLAGS_fst_error_fatal)
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  else
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1DEAD5E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>::operator=(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (a1 != a2)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 8), *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  return a1;
}

unint64_t fst::ComputeProperties<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::vector<int>::size_type v18;
  char v19;
  char *v20;
  unint64_t v21;
  int v22;
  int v23;
  unint64_t v24;
  float v25;
  float v26;
  int v27;
  std::vector<int>::pointer end;
  int *v29;
  std::vector<int>::pointer begin;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  unint64_t v34;
  char *v35;
  int *v36;
  int v37;
  std::vector<int>::pointer v38;
  int *v39;
  std::vector<int>::pointer v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  unint64_t v44;
  char *v45;
  int *v46;
  int v47;
  unint64_t v48;
  std::vector<int>::pointer v49;
  int v50;
  unint64_t v51;
  int v52;
  int v53;
  unint64_t v54;
  std::vector<int>::pointer v55;
  int v56;
  unint64_t v57;
  int v58;
  int v59;
  __n128 v60;
  uint64_t v62;
  uint64_t v63;
  void *__p;
  void *v65;
  _DWORD *v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  unsigned int v70;
  std::vector<int> v71;
  std::vector<int> v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  unint64_t *v76;
  uint64_t v77;
  int v78;
  unint64_t v79;
  float v80;
  int v81;
  float v82;
  float v83;

  v7 = a1;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v9 = v8;
  if (!a4
    || (v10 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7, (a2 & ~v10) != 0))
  {
    v9 = v8 & 7;
    v79 = v9;
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    if ((a2 & 0xF3C00000000) != 0 && v11)
    {
      v73 = 0;
      v74 = 0;
      v75 = 0;
      v76 = &v79;
      fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>(v7, (uint64_t)&v73);
      v9 = v79;
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) != 0)
    {
      v12 = a2 & 0xC0000;
      v13 = 0x10425A810000;
      if ((a2 & 0xC0000) != 0)
        v13 = 0x10425A850000;
      v14 = v9 | v13;
      v15 = a2 & 0x300000;
      if ((a2 & 0x300000) != 0)
        v14 |= 0x100000uLL;
      v79 = v14;
      memset(&v72, 0, sizeof(v72));
      memset(&v71, 0, sizeof(v71));
      v70 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 128))(v7, &v68);
      v16 = 0;
      v62 = v7;
LABEL_12:
      if (v68)
      {
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v68 + 16))(v68))
        {
          if (v68)
            v17 = (*(uint64_t (**)(void))(*(_QWORD *)v68 + 24))();
          else
            v17 = v70;
          goto LABEL_19;
        }
        if (v68)
          (*(void (**)(void))(*(_QWORD *)v68 + 8))();
      }
      else
      {
        v17 = v70;
        if ((int)v70 < v69)
        {
LABEL_19:
          v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, v17);
          v75 = 0;
          v76 = 0;
          v77 = 0;
          v72.__end_ = v72.__begin_;
          v71.__end_ = v71.__begin_;
          if (v12)
            std::vector<int>::reserve(&v72, v18);
          if (v15)
            std::vector<int>::reserve(&v71, v18);
          v67 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v7 + 136))(v7, v17, &v63);
          v19 = 1;
          while (1)
          {
            if (v63)
            {
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v63 + 24))(v63))
              {
                if (v63)
                {
                  (*(void (**)(void))(*(_QWORD *)v63 + 8))();
                }
                else
                {
LABEL_97:
                  if (v66)
                    --*v66;
                }
                v7 = v62;
                if (v12
                  && (std::__sort<std::__less<int,int> &,int *>(),
                      (std::vector<int>::pointer)((char *)v72.__end_ - (char *)v72.__begin_) >= (std::vector<int>::pointer)5))
                {
                  v48 = v72.__end_ - v72.__begin_;
                  if (v48 <= 2)
                    v48 = 2;
                  v49 = v72.__begin_ + 1;
                  v50 = *v72.__begin_;
                  v51 = v48 - 1;
                  while (1)
                  {
                    v53 = *v49++;
                    v52 = v53;
                    if (v53 == v50)
                      break;
                    v50 = v52;
                    if (!--v51)
                      goto LABEL_106;
                  }
                  v79 = v79 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
                  if (!v15)
                  {
LABEL_117:
                    if (v16 >= 1)
                      v79 = v79 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v62 + 32))(&v63, v62, v17);
                    v82 = *((float *)&v63 + 1);
                    v83 = *(float *)&v63;
                    v81 = 2139095040;
                    v80 = INFINITY;
                    if (*(float *)&v63 == INFINITY && v82 == v80)
                    {
                      if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v62 + 40))(v62, v17) != 1)
                        v79 = v79 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                    }
                    else
                    {
                      v82 = *((float *)&v63 + 1);
                      v83 = *(float *)&v63;
                      v81 = 0;
                      v80 = 0.0;
                      v60.n128_u32[0] = v63;
                      if (*(float *)&v63 != 0.0 || (v60.n128_f32[0] = v82, v82 != v80))
                        v79 = v79 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                      ++v16;
                    }
                    if (__p)
                    {
                      v65 = __p;
                      operator delete(__p);
                    }
                    if (v75)
                    {
                      v76 = (unint64_t *)v75;
                      operator delete(v75);
                    }
                    if (v68)
                      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v68 + 32))(v68, v60);
                    else
                      ++v70;
                    goto LABEL_12;
                  }
                }
                else
                {
LABEL_106:
                  if (!v15)
                    goto LABEL_117;
                }
                std::__sort<std::__less<int,int> &,int *>();
                if ((std::vector<int>::pointer)((char *)v71.__end_ - (char *)v71.__begin_) >= (std::vector<int>::pointer)5)
                {
                  v54 = v71.__end_ - v71.__begin_;
                  if (v54 <= 2)
                    v54 = 2;
                  v55 = v71.__begin_ + 1;
                  v56 = *v71.__begin_;
                  v57 = v54 - 1;
                  while (1)
                  {
                    v59 = *v55++;
                    v58 = v59;
                    if (v59 == v56)
                      break;
                    v56 = v58;
                    if (!--v57)
                      goto LABEL_117;
                  }
                  v79 = v79 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                }
                goto LABEL_117;
              }
              if (v63)
              {
                v20 = (char *)(*(uint64_t (**)(void))(*(_QWORD *)v63 + 32))();
                goto LABEL_32;
              }
              v21 = v67;
            }
            else
            {
              v21 = v67;
              if (v67 >= (unint64_t)v65)
                goto LABEL_97;
            }
            v20 = (char *)__p + 48 * v21;
LABEL_32:
            v22 = *(_DWORD *)v20;
            v23 = *(_DWORD *)v20;
            if (*(_DWORD *)v20 != *((_DWORD *)v20 + 1))
            {
              v79 = v79 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
              v23 = *((_DWORD *)v20 + 1);
            }
            if (v22 | v23)
            {
              if (v22)
              {
                if (v23)
                  goto LABEL_38;
                goto LABEL_42;
              }
              v24 = v79;
            }
            else
            {
              v24 = v79 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
            }
            v79 = v24 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
            if (v23)
            {
LABEL_38:
              if ((v19 & 1) != 0)
                goto LABEL_47;
              goto LABEL_43;
            }
LABEL_42:
            v79 = v79 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
            if ((v19 & 1) != 0)
              goto LABEL_47;
LABEL_43:
            if (v22 < (int)v73)
              v79 = v79 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
            if (v23 < SHIDWORD(v73))
              v79 = v79 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
LABEL_47:
            v26 = *((float *)v20 + 2);
            v25 = *((float *)v20 + 3);
            v83 = v26;
            v82 = v25;
            v81 = 0;
            v80 = 0.0;
            if (v26 != 0.0 || v82 != v80)
            {
              v83 = v26;
              v82 = v25;
              v81 = 2139095040;
              v80 = INFINITY;
              if (v26 != INFINITY || v82 != v80)
                v79 = v79 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
            }
            v27 = *((_DWORD *)v20 + 10);
            if (v27 <= (int)v17)
              v79 = v79 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
            if (v27 != (_DWORD)v17 + 1)
              v79 = v79 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
            v73 = *(_QWORD *)v20;
            fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>::operator=((uint64_t)&v74, (uint64_t)(v20 + 8));
            v78 = *((_DWORD *)v20 + 10);
            if (v12)
            {
              end = v72.__end_;
              if (v72.__end_ >= v72.__end_cap_.__value_)
              {
                begin = v72.__begin_;
                v31 = v72.__end_ - v72.__begin_;
                v32 = v31 + 1;
                if ((unint64_t)(v31 + 1) >> 62)
                  goto LABEL_146;
                v33 = (char *)v72.__end_cap_.__value_ - (char *)v72.__begin_;
                if (((char *)v72.__end_cap_.__value_ - (char *)v72.__begin_) >> 1 > v32)
                  v32 = v33 >> 1;
                if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
                  v34 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v34 = v32;
                if (v34)
                {
                  v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v72.__end_cap_, v34);
                  begin = v72.__begin_;
                  end = v72.__end_;
                }
                else
                {
                  v35 = 0;
                }
                v36 = (int *)&v35[4 * v31];
                *v36 = *(_DWORD *)v20;
                v29 = v36 + 1;
                while (end != begin)
                {
                  v37 = *--end;
                  *--v36 = v37;
                }
                v72.__begin_ = v36;
                v72.__end_ = v29;
                v72.__end_cap_.__value_ = (int *)&v35[4 * v34];
                if (begin)
                  operator delete(begin);
              }
              else
              {
                *v72.__end_ = *(_DWORD *)v20;
                v29 = end + 1;
              }
              v72.__end_ = v29;
            }
            if (v15)
            {
              v38 = v71.__end_;
              if (v71.__end_ >= v71.__end_cap_.__value_)
              {
                v40 = v71.__begin_;
                v41 = v71.__end_ - v71.__begin_;
                v42 = v41 + 1;
                if ((unint64_t)(v41 + 1) >> 62)
LABEL_146:
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v43 = (char *)v71.__end_cap_.__value_ - (char *)v71.__begin_;
                if (((char *)v71.__end_cap_.__value_ - (char *)v71.__begin_) >> 1 > v42)
                  v42 = v43 >> 1;
                if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
                  v44 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v44 = v42;
                if (v44)
                {
                  v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v71.__end_cap_, v44);
                  v40 = v71.__begin_;
                  v38 = v71.__end_;
                }
                else
                {
                  v45 = 0;
                }
                v46 = (int *)&v45[4 * v41];
                *v46 = *((_DWORD *)v20 + 1);
                v39 = v46 + 1;
                while (v38 != v40)
                {
                  v47 = *--v38;
                  *--v46 = v47;
                }
                v71.__begin_ = v46;
                v71.__end_ = v39;
                v71.__end_cap_.__value_ = (int *)&v45[4 * v44];
                if (v40)
                  operator delete(v40);
              }
              else
              {
                *v71.__end_ = *((_DWORD *)v20 + 1);
                v39 = v38 + 1;
              }
              v71.__end_ = v39;
            }
            if (v63)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v63 + 40))(v63);
              v19 = 0;
            }
            else
            {
              v19 = 0;
              ++v67;
            }
          }
        }
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7) != -1
        && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7))
      {
        v79 = v79 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
      }
      if (v71.__begin_)
      {
        v71.__end_ = v71.__begin_;
        operator delete(v71.__begin_);
      }
      if (v72.__begin_)
      {
        v72.__end_ = v72.__begin_;
        operator delete(v72.__begin_);
      }
      v9 = v79;
    }
    v10 = v9 & 0x3FFFFFFF0000 | (2 * v9) & 0x2AAAAAAA0000 | (v9 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v10;
  return v9;
}

void sub_1DEAD67B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p)
    operator delete(__p);
  if (a27)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  std::vector<char>::pointer begin;
  unint64_t v33;
  int v34;
  char v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  std::vector<char>::pointer end;
  std::vector<char>::pointer v51;
  int64_t v52;
  int64_t v53;
  unint64_t v54;
  size_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char v60;
  int v61;
  uint64_t v62;
  std::vector<char>::value_type v63[8];
  std::vector<char>::value_type __x[8];
  int v65;
  int v66;
  uint64_t (**v67)();
  _QWORD v68[6];
  int *v69;
  _OWORD v70[2];
  __int128 v71;
  std::vector<char> v72;

  if (*(_QWORD *)a2)
    *(_QWORD *)(*(_QWORD *)a2 + 8) = **(_QWORD **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
    *(_QWORD *)(v4 + 8) = 0;
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v6 = 0;
    *(_QWORD *)(v5 + 8) = 0;
  }
  else
  {
    v7 = (_QWORD *)operator new();
    v7[1] = 0;
    v7[2] = 0;
    *v7 = 0;
    *(_QWORD *)(a2 + 16) = v7;
    v6 = 1;
  }
  *(_BYTE *)(a2 + 52) = v6;
  **(_QWORD **)(a2 + 24) = **(_QWORD **)(a2 + 24) & 0xFFFFF0C3FFFFFFFFLL | 0x52800000000;
  *(_QWORD *)(a2 + 32) = a1;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  *(_DWORD *)(a2 + 44) = 0;
  *(_DWORD *)(a2 + 48) = 0;
  *(_DWORD *)(a2 + 40) = v8;
  v9 = (_QWORD *)operator new();
  v9[1] = 0;
  v9[2] = 0;
  *v9 = 0;
  *(_QWORD *)(a2 + 56) = v9;
  v10 = (_QWORD *)operator new();
  v10[1] = 0;
  v10[2] = 0;
  *v10 = 0;
  *(_QWORD *)(a2 + 64) = v10;
  v11 = (_QWORD *)operator new();
  v11[1] = 0;
  v11[2] = 0;
  *v11 = 0;
  *(_QWORD *)(a2 + 72) = v11;
  v12 = (_QWORD *)operator new();
  v12[1] = 0;
  v12[2] = 0;
  *v12 = 0;
  *(_QWORD *)(a2 + 80) = v12;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)v13 == -1)
  {
    fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishVisit(a2);
    return;
  }
  v14 = (char *)v13;
  memset(&v72, 0, sizeof(v72));
  v71 = 0u;
  memset(v70, 0, sizeof(v70));
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::MemoryPool((uint64_t)&v67);
  v62 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v62)
    v15 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>(a1);
  else
    v15 = ((_DWORD)v14 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v15 <= (std::vector<char>::pointer)(v72.__end_ - v72.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v15 < (std::vector<char>::pointer)(v72.__end_ - v72.__begin_))
      v72.__end_ = &v72.__begin_[(int)v15];
  }
  else
  {
    std::vector<char>::__append(&v72, (int)v15 - (unint64_t)(v72.__end_ - v72.__begin_), __x);
  }
  v66 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if ((int)v14 >= (int)v15)
    goto LABEL_112;
  v16 = (unint64_t)v14;
  v61 = (int)v14;
  do
  {
    v72.__begin_[(int)v16] = 1;
    v17 = (uint64_t)v69;
    if (v69)
    {
      v69 = (int *)*((_QWORD *)v69 + 6);
    }
    else
    {
      v17 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::Allocate(v68);
      *(_QWORD *)(v17 + 48) = 0;
    }
    *(_DWORD *)v17 = v16;
    *(_QWORD *)(v17 + 40) = 0;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v16, v17 + 8);
    *(_QWORD *)v63 = v17;
    std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>> *>>::push_back(v70, v63);
    fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitState((uint64_t *)a2, v16, v16);
    while (*((_QWORD *)&v71 + 1))
    {
      v18 = *(int **)(*(_QWORD *)(*((_QWORD *)&v70[0] + 1)
                                + (((unint64_t)(*((_QWORD *)&v71 + 1) + v71 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                    + 8 * ((*((_QWORD *)&v71 + 1) + v71 - 1) & 0x1FF));
      v19 = *v18;
      v20 = v72.__end_ - v72.__begin_;
      if (v72.__end_ - v72.__begin_ <= v19)
      {
        v15 = v19 + 1;
        v63[0] = 0;
        if (v19 + 1 <= v20)
        {
          if (v19 + 1 < v20)
            v72.__end_ = &v72.__begin_[v15];
        }
        else
        {
          std::vector<char>::__append(&v72, v19 + 1 - v20, v63);
        }
      }
      v21 = *((_QWORD *)v18 + 1);
      if (v21)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21))
          goto LABEL_34;
        v22 = *((_QWORD *)v18 + 1);
        if (!v22)
        {
          v24 = *((_QWORD *)v18 + 5);
LABEL_45:
          v23 = *((_QWORD *)v18 + 2) + 48 * v24;
          goto LABEL_46;
        }
        v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
LABEL_46:
        v30 = *(_DWORD *)(v23 + 40);
        v31 = v30;
        begin = v72.__begin_;
        v33 = v72.__end_ - v72.__begin_;
        if ((std::vector<char>::pointer)(v72.__end_ - v72.__begin_) <= (std::vector<char>::pointer)v30)
        {
          v15 = v30 + 1;
          v63[0] = 0;
          if (v15 <= v33)
          {
            if (v30 + 1 < v33)
              v72.__end_ = &v72.__begin_[v15];
          }
          else
          {
            std::vector<char>::__append(&v72, v30 + 1 - v33, v63);
            v30 = *(_DWORD *)(v23 + 40);
            begin = v72.__begin_;
            v31 = v30;
          }
        }
        v34 = begin[v31];
        if (v34 == 1)
        {
          v41 = *(_DWORD *)(**(_QWORD **)(a2 + 56) + 4 * v30);
          v42 = **(_QWORD **)(a2 + 64);
          if (v41 < *(_DWORD *)(v42 + 4 * v19))
            *(_DWORD *)(v42 + 4 * v19) = v41;
          v43 = v30;
          v44 = **(_QWORD **)(a2 + 16);
          if (((*(_QWORD *)(v44 + ((v43 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v43) & 1) != 0)
            *(_QWORD *)(v44 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
          v45 = *(unint64_t **)(a2 + 24);
          v46 = *v45 & 0xFFFFFFF3FFFFFFFFLL | 0x400000000;
          *v45 = v46;
          if (*(_DWORD *)(v23 + 40) == *(_DWORD *)(a2 + 40))
            *v45 = v46 & 0xFFFFFFC7FFFFFFFFLL | 0x1000000000;
LABEL_68:
          v29 = *((_QWORD *)v18 + 1);
          if (!v29)
            goto LABEL_69;
LABEL_42:
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
        }
        else
        {
          if (v34 == 2)
          {
            v35 = v30;
            v36 = **(_QWORD **)(a2 + 56);
            v37 = *(_DWORD *)(v36 + 4 * v30);
            if (v37 >= *(_DWORD *)(v36 + 4 * v19))
            {
              v38 = (unint64_t)v30 >> 6;
              v39 = 1 << v35;
            }
            else
            {
              v38 = (unint64_t)v30 >> 6;
              v39 = 1 << v35;
              if ((*(_QWORD *)(**(_QWORD **)(a2 + 72) + 8 * v38) & v39) != 0)
              {
                v40 = **(_QWORD **)(a2 + 64);
                if (v37 < *(_DWORD *)(v40 + 4 * v19))
                  *(_DWORD *)(v40 + 4 * v19) = v37;
              }
            }
            v48 = **(_QWORD **)(a2 + 16);
            if ((*(_QWORD *)(v48 + 8 * v38) & v39) != 0)
              *(_QWORD *)(v48 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
            goto LABEL_68;
          }
          begin[v31] = 1;
          v47 = (uint64_t)v69;
          if (v69)
          {
            v69 = (int *)*((_QWORD *)v69 + 6);
          }
          else
          {
            v47 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::Allocate(v68);
            *(_QWORD *)(v47 + 48) = 0;
          }
          *(_DWORD *)v47 = *(_DWORD *)(v23 + 40);
          *(_QWORD *)(v47 + 40) = 0;
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
          *(_QWORD *)v63 = v47;
          std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>> *>>::push_back(v70, v63);
          fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitState((uint64_t *)a2, *(_DWORD *)(v23 + 40), v16);
        }
      }
      else
      {
        v24 = *((_QWORD *)v18 + 5);
        if (v24 < *((_QWORD *)v18 + 3))
          goto LABEL_45;
LABEL_34:
        v72.__begin_[v19] = 2;
        v25 = *((_QWORD *)v18 + 1);
        if (v25)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
        }
        else
        {
          v26 = (_DWORD *)*((_QWORD *)v18 + 4);
          if (v26)
            --*v26;
        }
        *((_QWORD *)v18 + 6) = v69;
        v69 = v18;
        --*((_QWORD *)&v71 + 1);
        std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::__maybe_remove_back_spare[abi:ne180100](v70);
        if (*((_QWORD *)&v71 + 1))
        {
          v18 = *(int **)(*(_QWORD *)(*((_QWORD *)&v70[0] + 1)
                                    + (((unint64_t)(*((_QWORD *)&v71 + 1) + v71 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((*((_QWORD *)&v71 + 1) + v71 - 1) & 0x1FF));
          v27 = *v18;
          v28 = *((_QWORD *)v18 + 1);
          if (v28)
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
          fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::FinishState(a2, v19, v27);
          v29 = *((_QWORD *)v18 + 1);
          if (v29)
            goto LABEL_42;
LABEL_69:
          ++*((_QWORD *)v18 + 5);
        }
        else
        {
          fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::FinishState(a2, v19, -1);
        }
      }
    }
    if ((_DWORD)v16 == (_DWORD)v14)
      v16 = 0;
    else
      v16 = (v16 + 1);
    if ((int)v16 < (int)v15)
    {
      v16 = (int)v16;
      while (v72.__begin_[v16])
      {
        if ((int)v15 == ++v16)
        {
          v16 = v15;
          break;
        }
      }
    }
    if (!v62 && (_DWORD)v16 == (_DWORD)v15)
    {
      while (1)
      {
        if (*(_QWORD *)__x)
        {
          if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
            goto LABEL_111;
          v49 = *(_QWORD *)__x ? (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x) : v66;
        }
        else
        {
          v49 = v66;
          if (v66 >= v65)
            goto LABEL_111;
        }
        if (v49 == (_DWORD)v15)
          break;
        if (*(_QWORD *)__x)
          (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
        else
          ++v66;
      }
      end = v72.__end_;
      if (v72.__end_ >= v72.__end_cap_.__value_)
      {
        v51 = v72.__begin_;
        v52 = v72.__end_ - v72.__begin_;
        v53 = v72.__end_ - v72.__begin_ + 1;
        if (v53 < 0)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v54 = v72.__end_cap_.__value_ - v72.__begin_;
        if (2 * (v72.__end_cap_.__value_ - v72.__begin_) > (unint64_t)v53)
          v53 = 2 * v54;
        if (v54 >= 0x3FFFFFFFFFFFFFFFLL)
          v55 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v55 = v53;
        if (v55)
          v56 = (char *)operator new(v55);
        else
          v56 = 0;
        v57 = &v56[v52];
        v58 = &v56[v52];
        *v58 = 0;
        v14 = v58 + 1;
        if (end != v51)
        {
          v59 = &end[~(unint64_t)v51];
          do
          {
            v60 = *--end;
            (v59--)[(_QWORD)v56] = v60;
          }
          while (end != v51);
          end = v72.__begin_;
          v57 = v56;
        }
        v72.__begin_ = v57;
        v72.__end_ = v14;
        v72.__end_cap_.__value_ = &v56[v55];
        if (end)
          operator delete(end);
      }
      else
      {
        *v72.__end_ = 0;
        v14 = end + 1;
      }
      v72.__end_ = v14;
      v15 = (v15 + 1);
      LODWORD(v14) = v61;
    }
LABEL_111:
    ;
  }
  while ((int)v16 < (int)v15);
LABEL_112:
  fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishVisit(a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v67 = &off_1EA924028;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::Link>::~MemoryArena(v68);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v67);
  std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((uint64_t)v70);
  if (v72.__begin_)
  {
    v72.__end_ = v72.__begin_;
    operator delete(v72.__begin_);
  }
}

void sub_1DEAD70EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  uint64_t (**v12)();
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &off_1EA924028;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::Link>::~MemoryArena((uint64_t *)va1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase((uint64_t (***)())va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((uint64_t)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::MemoryPool(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_1EA924028;
  *(_QWORD *)(a1 + 8) = &off_1EA924650;
  *(_OWORD *)(a1 + 16) = xmmword_1DED16C20;
  v2 = a1 + 32;
  *(_QWORD *)(a1 + 32) = a1 + 32;
  *(_QWORD *)(a1 + 40) = a1 + 32;
  *(_QWORD *)(a1 + 48) = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = *(_QWORD **)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  *v4 = v2;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v6 + 1;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

void sub_1DEAD7224(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::CountStates<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>(uint64_t a1)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;

  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  v7 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v5);
  v3 = 0;
  while (1)
  {
    while (!v5)
    {
      v4 = v7;
      if (v7 >= v6)
        return v3;
      v3 = (v3 + 1);
LABEL_11:
      v7 = v4 + 1;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5))
      break;
    v3 = (v3 + 1);
    if (!v5)
    {
      v4 = v7;
      goto LABEL_11;
    }
    (*(void (**)(void))(*(_QWORD *)v5 + 32))();
  }
  if (v5)
    (*(void (**)(void))(*(_QWORD *)v5 + 8))();
  return v3;
}

void sub_1DEAD7330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  void *v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  int64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t i;
  _QWORD *v79;
  char *v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  v6 = v4 - v5;
  if (v4 == v5)
    v7 = 0;
  else
    v7 = ((v4 - v5) << 6) - 1;
  v9 = a1[4];
  v8 = a1[5];
  v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 >= 0x200)
    {
      a1[4] = v9 - 512;
      v13 = *(_QWORD *)v5;
      v11 = v5 + 8;
      v12 = v13;
      a1[1] = v11;
      if ((char *)a1[3] == v4)
      {
        v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v4 == (char *)*a1)
            v42 = 1;
          else
            v42 = (uint64_t)&v4[-*a1] >> 2;
          v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v42);
          v45 = &v43[8 * (v42 >> 2)];
          v46 = (uint64_t *)a1[1];
          v4 = v45;
          v47 = a1[2] - (_QWORD)v46;
          if (v47)
          {
            v4 = &v45[v47 & 0xFFFFFFFFFFFFFFF8];
            v48 = 8 * (v47 >> 3);
            v49 = &v43[8 * (v42 >> 2)];
            do
            {
              v50 = *v46++;
              *(_QWORD *)v49 = v50;
              v49 += 8;
              v48 -= 8;
            }
            while (v48);
          }
          v51 = (char *)*a1;
          *a1 = v43;
          a1[1] = v45;
          a1[2] = v4;
          a1[3] = &v43[8 * v44];
          if (v51)
          {
            operator delete(v51);
            v4 = (char *)a1[2];
          }
        }
        else
        {
          v15 = v14 >> 3;
          v16 = v14 >> 3 < -1;
          v17 = (v14 >> 3) + 2;
          if (v16)
            v18 = v17;
          else
            v18 = v15 + 1;
          v19 = -(v18 >> 1);
          v20 = v18 >> 1;
          v21 = &v11[-8 * v20];
          v22 = v4 - v11;
          if (v4 == v11)
          {
            v23 = v4;
          }
          else
          {
            memmove(&v11[-8 * v20], v11, v4 - v11);
            v23 = (char *)a1[1];
          }
          v4 = &v21[v22];
          a1[1] = &v23[8 * v19];
          a1[2] = &v21[v22];
        }
      }
      *(_QWORD *)v4 = v12;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      v5 = (char *)a1[1];
      v8 = a1[5];
      v10 = a1[4] + v8;
      goto LABEL_84;
    }
    v24 = v6 >> 3;
    v25 = (char *)a1[3];
    v26 = (char *)*a1;
    v27 = (uint64_t)&v25[-*a1];
    if (v6 >> 3 < (unint64_t)(v27 >> 3))
    {
      v28 = operator new(0x1000uLL);
      v29 = v28;
      if (v25 == v4)
      {
        if (v26 == v5)
        {
          if (v4 == v5)
            v52 = 1;
          else
            v52 = v27 >> 2;
          v53 = 2 * v52;
          v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v52);
          v5 = &v54[(v53 + 6) & 0xFFFFFFFFFFFFFFF8];
          v56 = (uint64_t *)a1[1];
          v57 = v5;
          v58 = a1[2] - (_QWORD)v56;
          if (v58)
          {
            v57 = &v5[v58 & 0xFFFFFFFFFFFFFFF8];
            v59 = 8 * (v58 >> 3);
            v60 = v5;
            do
            {
              v61 = *v56++;
              *(_QWORD *)v60 = v61;
              v60 += 8;
              v59 -= 8;
            }
            while (v59);
          }
          v62 = (char *)*a1;
          *a1 = v54;
          a1[1] = v5;
          a1[2] = v57;
          a1[3] = &v54[8 * v55];
          if (v62)
          {
            operator delete(v62);
            v5 = (char *)a1[1];
          }
        }
        *((_QWORD *)v5 - 1) = v29;
        v63 = (char *)a1[1];
        v64 = (char *)a1[2];
        a1[1] = v63 - 8;
        v65 = *((_QWORD *)v63 - 1);
        a1[1] = v63;
        if (v64 == (char *)a1[3])
        {
          v66 = (uint64_t)&v63[-*a1];
          if ((unint64_t)v63 <= *a1)
          {
            if (v64 == (char *)*a1)
              v97 = 1;
            else
              v97 = (uint64_t)&v64[-*a1] >> 2;
            v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v97);
            v100 = &v98[8 * (v97 >> 2)];
            v101 = (uint64_t *)a1[1];
            v64 = v100;
            v102 = a1[2] - (_QWORD)v101;
            if (v102)
            {
              v64 = &v100[v102 & 0xFFFFFFFFFFFFFFF8];
              v103 = 8 * (v102 >> 3);
              v104 = &v98[8 * (v97 >> 2)];
              do
              {
                v105 = *v101++;
                *(_QWORD *)v104 = v105;
                v104 += 8;
                v103 -= 8;
              }
              while (v103);
            }
            v106 = (char *)*a1;
            *a1 = v98;
            a1[1] = v100;
            a1[2] = v64;
            a1[3] = &v98[8 * v99];
            if (v106)
            {
              operator delete(v106);
              v64 = (char *)a1[2];
            }
          }
          else
          {
            v67 = v66 >> 3;
            v16 = v66 >> 3 < -1;
            v68 = (v66 >> 3) + 2;
            if (v16)
              v69 = v68;
            else
              v69 = v67 + 1;
            v70 = -(v69 >> 1);
            v71 = v69 >> 1;
            v72 = &v63[-8 * v71];
            v73 = v64 - v63;
            if (v64 != v63)
            {
              memmove(&v63[-8 * v71], v63, v64 - v63);
              v63 = (char *)a1[1];
            }
            v64 = &v72[v73];
            a1[1] = &v63[8 * v70];
            a1[2] = &v72[v73];
          }
        }
        *(_QWORD *)v64 = v65;
      }
      else
      {
        *(_QWORD *)v4 = v28;
      }
      goto LABEL_82;
    }
    if (v25 == v26)
      v30 = 1;
    else
      v30 = v27 >> 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v30);
    v33 = v32;
    v34 = &v31[8 * v24];
    *(_QWORD *)&v35 = v31;
    *((_QWORD *)&v35 + 1) = v34;
    v110 = v35;
    v36 = operator new(0x1000uLL);
    *(_QWORD *)&v37 = v34;
    *((_QWORD *)&v37 + 1) = &v31[8 * v33];
    if (v24 == v33)
    {
      v38 = 8 * v24;
      *(_QWORD *)&v39 = v110;
      if (v6 >= 1)
      {
        v40 = v38 >> 3;
        if (v40 >= -1)
          v41 = v40 + 1;
        else
          v41 = v40 + 2;
        v34 -= 8 * (v41 >> 1);
        *(_QWORD *)&v37 = v34;
        *((_QWORD *)&v39 + 1) = v34;
        goto LABEL_56;
      }
      v74 = v38 >> 2;
      if (v4 == v5)
        v75 = 1;
      else
        v75 = v74;
      v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v75);
      v34 = &v76[8 * (v75 >> 2)];
      *(_QWORD *)&v39 = v76;
      *((_QWORD *)&v39 + 1) = v34;
      *(_QWORD *)&v37 = v34;
      *((_QWORD *)&v37 + 1) = &v76[8 * v77];
      if (!v31)
        goto LABEL_56;
      v107 = v37;
      v110 = v39;
      operator delete(v31);
      v37 = v107;
    }
    v39 = v110;
LABEL_56:
    *(_QWORD *)v34 = v36;
    *(_QWORD *)&v37 = v37 + 8;
    for (i = a1[2]; i != a1[1]; i -= 8)
    {
      v79 = (_QWORD *)*((_QWORD *)&v39 + 1);
      if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      {
        v81 = (_BYTE *)v37;
        if ((unint64_t)v37 >= *((_QWORD *)&v37 + 1))
        {
          if (*((_QWORD *)&v37 + 1) == *((_QWORD *)&v39 + 1))
            v86 = 1;
          else
            v86 = (uint64_t)(*((_QWORD *)&v37 + 1) - *((_QWORD *)&v39 + 1)) >> 2;
          v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v86);
          v80 = &v87[(2 * v86 + 6) & 0xFFFFFFFFFFFFFFF8];
          v89 = v80;
          v90 = v81 - (_BYTE *)v79;
          if (v81 != (_BYTE *)v79)
          {
            v89 = &v80[v90 & 0xFFFFFFFFFFFFFFF8];
            v91 = 8 * (v90 >> 3);
            v92 = v80;
            v93 = v79;
            do
            {
              v94 = *v93++;
              *(_QWORD *)v92 = v94;
              v92 += 8;
              v91 -= 8;
            }
            while (v91);
          }
          *(_QWORD *)&v39 = v87;
          *((_QWORD *)&v39 + 1) = v80;
          *(_QWORD *)&v37 = v89;
          *((_QWORD *)&v37 + 1) = &v87[8 * v88];
          if (v79)
          {
            v108 = v37;
            v112 = v39;
            operator delete(v79);
            v37 = v108;
            v39 = v112;
          }
        }
        else
        {
          v82 = (uint64_t)(*((_QWORD *)&v37 + 1) - v37) >> 3;
          if (v82 >= -1)
            v83 = v82 + 1;
          else
            v83 = v82 + 2;
          v84 = v83 >> 1;
          v85 = v37 + 8 * (v83 >> 1);
          v80 = (char *)(v85 - (v37 - *((_QWORD *)&v39 + 1)));
          if ((_QWORD)v37 == *((_QWORD *)&v39 + 1))
          {
            v81 = (_BYTE *)*((_QWORD *)&v39 + 1);
          }
          else
          {
            v109 = *((_QWORD *)&v37 + 1);
            v111 = v39;
            memmove((void *)(v85 - (v37 - *((_QWORD *)&v39 + 1))), *((const void **)&v39 + 1), v37 - *((_QWORD *)&v39 + 1));
            *((_QWORD *)&v37 + 1) = v109;
            *(_QWORD *)&v39 = v111;
          }
          *((_QWORD *)&v39 + 1) = v80;
          *(_QWORD *)&v37 = &v81[8 * v84];
        }
      }
      else
      {
        v80 = (char *)*((_QWORD *)&v39 + 1);
      }
      v95 = *(_QWORD *)(i - 8);
      *((_QWORD *)v80 - 1) = v95;
      *((_QWORD *)&v39 + 1) -= 8;
    }
    v96 = (char *)*a1;
    *(_OWORD *)a1 = v39;
    *((_OWORD *)a1 + 1) = v37;
    if (v96)
      operator delete(v96);
    goto LABEL_83;
  }
LABEL_84:
  *(_QWORD *)(*(_QWORD *)&v5[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_1DEAD78A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  void *v11;

  operator delete(v11);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  _Unwind_Resume(a1);
}

void fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::FinishState(uint64_t a1, int a2, int a3)
{
  BOOL v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int *i;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void *__p;
  void *v24;
  float v25;
  int v26;
  float v27;
  int v28;

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 32) + 32))(&v22);
  v27 = *((float *)&v22 + 1);
  v28 = v22;
  v26 = 2139095040;
  v25 = INFINITY;
  v6 = *(float *)&v22 != INFINITY || v27 != v25;
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  if (v6)
    *(_QWORD *)(**(_QWORD **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  v7 = **(_QWORD **)(a1 + 64);
  if (*(_DWORD *)(**(_QWORD **)(a1 + 56) + 4 * a2) != *(_DWORD *)(v7 + 4 * a2))
    goto LABEL_21;
  v8 = 0;
  v9 = *(_QWORD **)(a1 + 80);
  v10 = v9[1];
  v11 = **(_QWORD **)(a1 + 16);
  v12 = (int *)(((v10 - *v9) & 0xFFFFFFFFFFFFFFFCLL) + *v9 - 4);
  do
  {
    v13 = *v12--;
    v8 |= *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13;
  }
  while ((_DWORD)v13 != a2);
  v14 = *(_QWORD **)a1;
  v15 = **(_QWORD **)(a1 + 72);
  for (i = (int *)(v10 - 4); ; --i)
  {
    v17 = *i;
    if (v14)
      *(_DWORD *)(*v14 + 4 * v17) = *(_DWORD *)(a1 + 48);
    v18 = v17 >> 6;
    v19 = 1 << v17;
    if ((v8 & 1) == 0)
      break;
    *(_QWORD *)(v11 + 8 * v18) |= v19;
    *(_QWORD *)(v15 + 8 * v18) &= ~v19;
    if ((_DWORD)v17 == a2)
    {
      v9[1] = i;
      goto LABEL_20;
    }
LABEL_18:
    ;
  }
  *(_QWORD *)(v15 + 8 * v18) &= ~v19;
  if ((_DWORD)v17 != a2)
    goto LABEL_18;
  v9[1] = i;
  **(_QWORD **)(a1 + 24) = **(_QWORD **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_20:
  ++*(_DWORD *)(a1 + 48);
LABEL_21:
  if (a3 != -1)
  {
    v20 = **(_QWORD **)(a1 + 16);
    if (((*(_QWORD *)(v20 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
      *(_QWORD *)(v20 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    v21 = *(_DWORD *)(v7 + 4 * a2);
    if (v21 < *(_DWORD *)(v7 + 4 * a3))
      *(_DWORD *)(v7 + 4 * a3) = v21;
  }
}

double fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::Link>::~MemoryArena(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;
  double result;

  *a1 = &off_1EA924650;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1DF0ECFFC](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::Link>::Size()
{
  return 56;
}

double fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::~MemoryPool(_QWORD *a1)
{
  double result;

  *a1 = &off_1EA924028;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::Link>::~MemoryArena(a1 + 1);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

void fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_1EA924028;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::Size()
{
  return 48;
}

_QWORD *fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = off_1EA925BE0;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = off_1EA925BE0;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1DF0ED014);
}

_QWORD *fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>::Copy(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  ++*(_DWORD *)(v3 + 56);
  *result = &off_1EA926308;
  result[1] = v3;
  return result;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>::Write(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  fst *v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v28;
  uint64_t v29;
  fst *v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  fst *v36;
  _QWORD *v37;
  fst *v38;
  _QWORD *v39;
  int v40;
  char *v41;
  fst *v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  std::string v47;
  _BYTE v48[8];
  void *v49[2];
  void *__p[2];
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[16];
  _QWORD v57[17];
  _BYTE __str[32];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v51 = 0u;
  v52 = 0u;
  *(_OWORD *)v49 = 0u;
  *(_OWORD *)__p = 0u;
  v54 = 0;
  v55 = 0;
  v53 = -1;
  v53 = (*(int (**)(_QWORD *))(*a1 + 24))(a1);
  v54 = -1;
  if ((*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 1, 0))
  {
    v6 = 0;
LABEL_3:
    v46 = v6;
    v7 = 0;
    v54 = (int)fst::CountStates<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>((uint64_t)a1);
    goto LABEL_6;
  }
  v8 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v8 + 5) + 32))(__str, *((_QWORD *)v8 + 5), 0, 1, 16);
    v6 = v65;
    if (v65 != -1)
      goto LABEL_3;
  }
  v46 = -1;
  v7 = 1;
LABEL_6:
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__str, "vector");
  v45 = v9 | 3;
  fst::FstImpl<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (_BYTE *)a3, (std::string *)__str, v9 | 3, (uint64_t)v48);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  v10 = *(_QWORD *)(a1[1] + 72) - *(_QWORD *)(a1[1] + 64);
  v11 = v10 >> 3;
  if ((int)(v10 >> 3) < 1)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    v12 = v7;
    v13 = 0;
    v14 = (v10 >> 3);
    do
    {
      (*(void (**)(_BYTE *__return_ptr, _QWORD *, uint64_t))(*a1 + 32))(__str, a1, v13);
      LODWORD(v57[0]) = *(_DWORD *)__str;
      std::ostream::write();
      LODWORD(v57[0]) = *(_DWORD *)&__str[4];
      std::ostream::write();
      if (*(_QWORD *)&__str[8])
      {
        *(_QWORD *)&__str[16] = *(_QWORD *)&__str[8];
        operator delete(*(void **)&__str[8]);
      }
      *(_QWORD *)__str = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, v13);
      std::ostream::write();
      v15 = *(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v13);
      v17 = *(_QWORD *)(v15 + 48);
      v16 = *(_QWORD *)(v15 + 56);
      if (v16 == v17)
        v18 = 0;
      else
        v18 = *(_DWORD **)(v15 + 48);
      if (v16 != v17)
      {
        if ((unint64_t)((v16 - v17) / 48) <= 1)
          v19 = 1;
        else
          v19 = (v16 - v17) / 48;
        do
        {
          *(_DWORD *)__str = *v18;
          std::ostream::write();
          *(_DWORD *)__str = v18[1];
          std::ostream::write();
          fst::LatticeWeightTpl<float>::Write((uint64_t)(v18 + 2), (uint64_t)a2);
          *(_DWORD *)__str = v18[10];
          std::ostream::write();
          v18 += 12;
          --v19;
        }
        while (v19);
      }
      ++v13;
    }
    while (v13 != v14);
    v7 = v12;
  }
  std::ostream::flush();
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__str, "ERROR");
    v20 = fst::LogMessage::LogMessage((fst *)v57, (uint64_t)__str);
    v21 = (_QWORD *)fst::cerr(v20);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"VectorFst::Write: write failed: ", 32);
    v23 = *(char *)(a3 + 23);
    if (v23 >= 0)
      v24 = a3;
    else
      v24 = *(_QWORD *)a3;
    if (v23 >= 0)
      v25 = *(unsigned __int8 *)(a3 + 23);
    else
      v25 = *(_QWORD *)(a3 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
LABEL_31:
    fst::LogMessage::~LogMessage((fst::LogMessage *)v57);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    v26 = 0;
    goto LABEL_34;
  }
  if (!v7)
  {
    if (v54 == v11)
    {
      v26 = 1;
      goto LABEL_34;
    }
    std::string::basic_string[abi:ne180100]<0>(__str, "ERROR");
    v36 = fst::LogMessage::LogMessage((fst *)v57, (uint64_t)__str);
    v37 = (_QWORD *)fst::cerr(v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_31;
  }
  v54 = v11;
  std::string::basic_string[abi:ne180100]<0>(&v47, "vector");
  MEMORY[0x1DF0ECC6C](v56, a2);
  v28 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v28[32] & 5) == 0)
  {
    v29 = *((_QWORD *)v28 + 5);
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    memset(__str, 0, sizeof(__str));
    v65 = v46;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v29 + 40))(v57, v29, __str, 16);
    if (v57[16] == -1)
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
  }
  MEMORY[0x1DF0ECC78](v56);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__str, "ERROR");
    v30 = fst::LogMessage::LogMessage((fst *)v57, (uint64_t)__str);
    v31 = (_QWORD *)fst::cerr(v30);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    v33 = *(char *)(a3 + 23);
    if (v33 >= 0)
      v34 = a3;
    else
      v34 = *(_QWORD *)a3;
    if (v33 >= 0)
      v35 = *(unsigned __int8 *)(a3 + 23);
    else
      v35 = *(_QWORD *)(a3 + 8);
LABEL_72:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v34, v35);
    fst::LogMessage::~LogMessage((fst::LogMessage *)v57);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    v26 = 0;
    goto LABEL_75;
  }
  fst::FstImpl<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (_BYTE *)a3, &v47, v45, (uint64_t)v48);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__str, "ERROR");
    v38 = fst::LogMessage::LogMessage((fst *)v57, (uint64_t)__str);
    v39 = (_QWORD *)fst::cerr(v38);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    v40 = *(char *)(a3 + 23);
    if (v40 >= 0)
      v34 = a3;
    else
      v34 = *(_QWORD *)a3;
    if (v40 >= 0)
      v35 = *(unsigned __int8 *)(a3 + 23);
    else
      v35 = *(_QWORD *)(a3 + 8);
    goto LABEL_72;
  }
  MEMORY[0x1DF0ECC6C](v57, a2);
  v41 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v41[32] & 5) == 0)
  {
    (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v41 + 5) + 32))(__str, *((_QWORD *)v41 + 5), 0, 2, 16);
    if (v65 == -1)
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
  }
  MEMORY[0x1DF0ECC78](v57);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__str, "ERROR");
    v42 = fst::LogMessage::LogMessage((fst *)v57, (uint64_t)__str);
    v43 = (_QWORD *)fst::cerr(v42);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    v44 = *(char *)(a3 + 23);
    if (v44 >= 0)
      v34 = a3;
    else
      v34 = *(_QWORD *)a3;
    if (v44 >= 0)
      v35 = *(unsigned __int8 *)(a3 + 23);
    else
      v35 = *(_QWORD *)(a3 + 8);
    goto LABEL_72;
  }
  v26 = 1;
LABEL_75:
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
LABEL_34:
  if (SHIBYTE(v51) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v49[0]);
  return v26;
}

void sub_1DEAD83B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37)
{
  MEMORY[0x1DF0ECC78](&a37);
  if (a16 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>::Write(fst *a1, uint64_t a2)
{
  fst *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  const std::string::value_type *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  std::string __p;
  __int16 v16;
  char v17;
  char v18;
  char v19;
  std::string v20;
  __int16 v21;
  char v22;
  char v23;
  _BYTE v24[384];
  _QWORD v25[20];

  v25[19] = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream(&v20);
      if ((v24[*(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        v5 = (_QWORD *)fst::cerr(v4);
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        v7 = *(char *)(a2 + 23);
        if (v7 >= 0)
          v8 = (const std::string::value_type *)a2;
        else
          v8 = *(const std::string::value_type **)a2;
        if (v7 >= 0)
          v9 = *(unsigned __int8 *)(a2 + 23);
        else
          v9 = *(_QWORD *)(a2 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v10 = 0;
      }
      else
      {
        v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          __p = *(std::string *)a2;
        v16 = 257;
        v17 = 1;
        v18 = v13;
        v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(_QWORD *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F48];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48]
                                                                                                  + 24);
      MEMORY[0x1DF0ECB94](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1DF0ECF6C](v25);
      return v10;
    }
  }
  else if (*(_BYTE *)(a2 + 23))
  {
    goto LABEL_5;
  }
  v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v20 = __p;
  v21 = 257;
  v22 = 1;
  v23 = v12;
  v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(_QWORD *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v10;
}

void sub_1DEAD8728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,_QWORD *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a72;

  a21 = (_QWORD *)*MEMORY[0x1E0DE4F48];
  *(_QWORD **)((char *)&a21 + *(a21 - 3)) = *(_QWORD **)(MEMORY[0x1E0DE4F48] + 24);
  MEMORY[0x1DF0ECB94](&a22);
  std::ostream::~ostream();
  MEMORY[0x1DF0ECF6C](&a72);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(_QWORD *)(v2 + 72) - *(_QWORD *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>::InitArcIterator(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;

  v3 = *(_QWORD *)(result + 8);
  *a3 = 0;
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 8 * a2) + 48);
  v4 = *v5;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v5[1] - *v5) >> 4);
  if (v5[1] == *v5)
    v4 = 0;
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::NumStates(uint64_t a1)
{
  return (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64)) >> 3;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  int v6;

  if (a1 != a2)
  {
    v4 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>::VectorFstImpl(v4, a2);
    v5 = *(_DWORD **)(a1 + 8);
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a1;
}

void sub_1DEAD88D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::SetStart(uint64_t a1, int a2)
{
  uint64_t v4;
  unint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_QWORD *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(_QWORD *)(v4 + 8) & 4;
  return result;
}

void fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::SetFinal(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *__p;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _BYTE *v27;
  uint64_t v28;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  v9 = *(_QWORD *)a3;
  v11 = 0;
  v12 = 0;
  v10 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v10, *(const void **)(a3 + 8), *(_QWORD *)(a3 + 16), (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 2);
  v7 = *(uint64_t **)(v6[8] + 8 * a2);
  v25 = *v7;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v26, (const void *)v7[1], v7[2], (v7[2] - v7[1]) >> 2);
  v21 = v9;
  v23 = 0;
  v24 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v10, (uint64_t)v11, (v11 - (_BYTE *)v10) >> 2);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>::SetFinal(v6[8], a2, &v21);
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  v8 = (*(uint64_t (**)(_QWORD *))(*v6 + 24))(v6);
  v17 = v25;
  v19 = 0;
  v20 = 0;
  v18 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v18, v26, (uint64_t)v27, (v27 - (_BYTE *)v26) >> 2);
  v13 = v9;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v14, v10, (uint64_t)v11, (v11 - (_BYTE *)v10) >> 2);
  v6[1] = v6[1] & 4 | fst::SetFinalProperties<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(v8, (float *)&v17, (float *)&v13);
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  if (v10)
  {
    v11 = v10;
    operator delete(v10);
  }
}

void sub_1DEAD8B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  void *v25;

  if (__p)
    operator delete(__p);
  v25 = *(void **)(v23 - 56);
  if (v25)
  {
    *(_QWORD *)(v23 - 48) = v25;
    operator delete(v25);
  }
  if (a10)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = a3 & 4;
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), v6);
  if (result != (v6 & a2))
    result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::MutateCheck(a1);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::AddState(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::AddArc(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  v7 = *(_QWORD *)(*(_QWORD *)(v6[8] + 8 * a2) + 56);
  if (v7 == *(_QWORD *)(*(_QWORD *)(v6[8] + 8 * a2) + 48))
    v8 = 0;
  else
    v8 = (_DWORD *)(v7 - 48);
  v9 = (*(uint64_t (**)(_QWORD *))(*v6 + 24))(v6);
  v10 = *(_DWORD *)a3;
  v11 = *(_DWORD *)(a3 + 4);
  v12 = v9 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (*(_DWORD *)a3 == v11)
    v12 = v9;
  v13 = v12 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
  if (!v11)
    v13 = v12 & 0xFFFFFFFFFC3FFFFFLL | 0x1400000;
  if (!v10)
    v12 = v13;
  if (!v11)
    v12 = v12 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
  if (v8)
  {
    if (*v8 > v10)
      v12 = v12 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
    if (v8[1] > v11)
      v12 = v12 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
  }
  if ((*(float *)(a3 + 8) != INFINITY || *(float *)(a3 + 12) != INFINITY)
    && (*(float *)(a3 + 8) != 0.0 || *(float *)(a3 + 12) != 0.0))
  {
    v12 = v12 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  if (*(_DWORD *)(a3 + 40) <= a2)
    v12 = v12 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
  if ((v12 & 0x4000000000) != 0)
    v14 = v12 & 0x5D7FFEB0007 | 0x2800000000;
  else
    v14 = v12 & 0x5D7FFEB0007;
  v6[1] = v6[1] & 4 | v14;
  return fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::AddArc(*(_QWORD **)(v6[8] + 8 * a2), a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::DeleteStates(uint64_t a1, char **a2)
{
  uint64_t v4;
  std::vector<int>::size_type v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  std::vector<int>::pointer begin;
  uint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  int64x2_t *v31;
  int64x2_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int *v37;
  int v38;
  _QWORD *v39;
  uint64_t v40;
  int64x2_t v41;
  unint64_t v42;
  uint64_t v43;
  int *v44;
  uint64_t result;
  int64x2_t v46;
  int64x2_t v47;
  std::vector<int>::value_type __x;
  std::vector<int> v49;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = (uint64_t)(*(_QWORD *)(v4 + 72) - *(_QWORD *)(v4 + 64)) >> 3;
  __x = 0;
  std::vector<int>::vector(&v49, v5, &__x);
  v6 = *a2;
  v7 = a2[1] - *a2;
  if (v7)
  {
    v8 = v7 >> 2;
    begin = v49.__begin_;
    if (v8 <= 1)
      v8 = 1;
    do
    {
      v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  v11 = *(char **)(v4 + 64);
  v12 = *(char **)(v4 + 72);
  if (v12 == v11)
  {
    v16 = 0;
    v14 = 0;
    v15 = *(char **)(v4 + 72);
    v11 = v15;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    do
    {
      if (v49.__begin_[v13] == -1)
      {
        fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::Destroy(*(uint64_t **)&v11[8 * v13]);
      }
      else
      {
        v49.__begin_[v13] = v14;
        if (v13 != v14)
          *(_QWORD *)&v11[8 * v14] = *(_QWORD *)&v11[8 * v13];
        ++v14;
      }
      ++v13;
      v11 = *(char **)(v4 + 64);
      v15 = *(char **)(v4 + 72);
      v16 = (v15 - v11) >> 3;
    }
    while (v16 > v13);
    v12 = *(char **)(v4 + 64);
  }
  v17 = v14 - v16;
  if (v14 <= v16)
  {
    if (v14 >= v16)
      goto LABEL_32;
    v15 = &v11[8 * v14];
    goto LABEL_31;
  }
  v18 = *(_QWORD *)(v4 + 80);
  if (v17 <= (v18 - (uint64_t)v15) >> 3)
  {
    bzero(v15, 8 * v17);
    v15 += 8 * v17;
LABEL_31:
    *(_QWORD *)(v4 + 72) = v15;
    goto LABEL_32;
  }
  if (v14 < 0)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v19 = v18 - (_QWORD)v12;
  v20 = v19 >> 2;
  if (v19 >> 2 <= (unint64_t)v14)
    v20 = v14;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v21 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v21 = v20;
  v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v21);
  v23 = &v22[8 * v16];
  v25 = &v22[8 * v24];
  bzero(v23, 8 * v17);
  v15 = &v23[8 * v17];
  v27 = *(char **)(v4 + 64);
  v26 = *(char **)(v4 + 72);
  if (v26 != v27)
  {
    do
    {
      v28 = *((_QWORD *)v26 - 1);
      v26 -= 8;
      *((_QWORD *)v23 - 1) = v28;
      v23 -= 8;
    }
    while (v26 != v27);
    v26 = *(char **)(v4 + 64);
  }
  *(_QWORD *)(v4 + 64) = v23;
  *(_QWORD *)(v4 + 72) = v15;
  *(_QWORD *)(v4 + 80) = v25;
  if (v26)
  {
    operator delete(v26);
    v15 = *(char **)(v4 + 72);
  }
LABEL_32:
  v29 = *(char **)(v4 + 64);
  if (v15 != v29)
  {
    v30 = 0;
    do
    {
      v31 = *(int64x2_t **)&v29[8 * v30];
      v32 = v31[2];
      v33 = v31[3].i64[1] - v31[3].i64[0];
      if (v33)
        v34 = v31[3].i64[0];
      else
        v34 = 0;
      if (v33)
      {
        v35 = 0;
        v36 = 0;
        v37 = (int *)(v34 + 40);
        do
        {
          v38 = v49.__begin_[*v37];
          if (v38 == -1)
          {
            v40 = *((_QWORD *)v37 - 5);
            v41.i64[0] = v40;
            v41.i64[1] = HIDWORD(v40);
            v32 = vaddq_s64(v32, vceqzq_s64(v41));
          }
          else
          {
            *v37 = v38;
            if (v35 != v36)
            {
              v46 = v32;
              v39 = (_QWORD *)(v34 + 48 * v36);
              *v39 = *((_QWORD *)v37 - 5);
              fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>::operator=((uint64_t)(v39 + 1), (uint64_t)(v37 - 8));
              *(_DWORD *)(v34 + 48 * v36 + 40) = *v37;
              v29 = *(char **)(v4 + 64);
              v32 = v46;
            }
            ++v36;
          }
          ++v35;
          v31 = *(int64x2_t **)&v29[8 * v30];
          v42 = 0xAAAAAAAAAAAAAAABLL * ((v31[3].i64[1] - v31[3].i64[0]) >> 4);
          v37 += 12;
        }
        while (v35 < v42);
        v47 = v32;
      }
      else
      {
        v47 = v31[2];
        v36 = 0;
        v42 = 0;
      }
      fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::DeleteArcs(v31, v42 - v36);
      v29 = *(char **)(v4 + 64);
      *(int64x2_t *)(*(_QWORD *)&v29[8 * v30++] + 32) = v47;
    }
    while (v30 < (uint64_t)(*(_QWORD *)(v4 + 72) - (_QWORD)v29) >> 3);
  }
  v43 = *(int *)(v4 + 88);
  if ((_DWORD)v43 != -1)
  {
    v44 = v49.__begin_;
    *(_DWORD *)(v4 + 88) = v49.__begin_[v43];
LABEL_51:
    v49.__end_ = v44;
    operator delete(v44);
    goto LABEL_52;
  }
  v44 = v49.__begin_;
  if (v49.__begin_)
    goto LABEL_51;
LABEL_52:
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(v4 + 8) & 4 | result & 0x6A5A950007;
  return result;
}

void sub_1DEAD9128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::DeleteStates(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::MutateCheck(a1);
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 72);
  if (v3 != *(_QWORD *)(v2 + 64))
  {
    v4 = 0;
    v3 = *(_QWORD *)(v2 + 64);
    do
    {
      fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::Destroy(*(uint64_t **)(v3 + 8 * v4++));
      v3 = *(_QWORD *)(v2 + 64);
    }
    while (v4 < (*(_QWORD *)(v2 + 72) - v3) >> 3);
  }
  *(_QWORD *)(v2 + 72) = v3;
  *(_DWORD *)(v2 + 88) = -1;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  *(_QWORD *)(v2 + 8) = (*(_DWORD *)(v2 + 8) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::DeleteArcs(*(_QWORD **)(v6[8] + 8 * a2), a3);
  result = (*(uint64_t (**)(_QWORD *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::DeleteArcs(uint64_t a1, int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::MutateCheck(a1);
  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD **)(v4[8] + 8 * a2);
  v5[4] = 0;
  v5[5] = 0;
  std::vector<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::__clear[abi:ne180100](v5 + 6);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0xA6A5A950007;
  return result;
}

void fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::MutateCheck(a1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *>>::reserve((void **)(*(_QWORD *)(a1 + 8) + 64), a2);
}

uint64_t *fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::MutateCheck(a1);
  return std::vector<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::reserve((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 48), a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::MutableInputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::MutableOutputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 40);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 40) = result;
  }
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 48);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 48) = result;
  }
  return result;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>::InitMutableArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;

  v6 = (_QWORD *)operator new();
  *v6 = &off_1EA9254A8;
  v6[3] = 0;
  result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::MutateCheck(a1);
  v8 = *(_QWORD *)(a1 + 8);
  v6[1] = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 8 * a2);
  v6[2] = v8 + 8;
  *a3 = v6;
  return result;
}

void sub_1DEAD94BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::MutateCheck(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  if (*(int *)(*(_QWORD *)(result + 8) + 56) >= 2)
  {
    v1 = result;
    v2 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>::VectorFstImpl(v2, v1);
    result = *(_QWORD *)(v1 + 8);
    if (result)
    {
      v3 = *(_DWORD *)(result + 56) - 1;
      *(_DWORD *)(result + 56) = v3;
      if (!v3)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    *(_QWORD *)(v1 + 8) = v2;
  }
  return result;
}

void sub_1DEAD9558(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  std::string::size_type v17;
  std::string __p;
  _DWORD *v20;
  std::string::size_type v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  int v26;
  unsigned int v27;

  *(_QWORD *)a1 = &off_1EA925710;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = (uint64_t *)(a1 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &off_1EA9249F8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "vector");
  std::string::operator=(v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v8 = *v5;
  if (*v5 != v7)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v7)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    else
      v9 = 0;
    *v5 = v9;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v11 = *(_QWORD *)(a1 + 48);
  if (v11 != v10)
  {
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v10)
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    else
      v12 = 0;
    *(_QWORD *)(a1 + 48) = v12;
  }
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 1, 0))
  {
    v13 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *>>::reserve((void **)(a1 + 64), v13);
  }
  v27 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v25);
  while (1)
  {
    if (!v25)
    {
      v14 = v27;
      if ((int)v27 >= v26)
        goto LABEL_50;
      goto LABEL_27;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25))
      break;
    if (v25)
      v14 = (*(uint64_t (**)(void))(*(_QWORD *)v25 + 24))();
    else
      v14 = v27;
LABEL_27:
    fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>::AddState((_QWORD *)a1);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(&v22, a2, v14);
    fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>::SetFinal(*v6, v14, &v22);
    if (v23)
    {
      v24 = v23;
      operator delete(v23);
    }
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v14);
    std::vector<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::reserve((uint64_t *)(*(_QWORD *)(*v6 + 8 * (int)v14) + 48), v15);
    v21 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)a2 + 136))(a2, v14, &__p);
    while (1)
    {
      if (!__p.__r_.__value_.__r.__words[0])
      {
        v17 = v21;
        if (v21 >= __p.__r_.__value_.__r.__words[2])
          goto LABEL_43;
        goto LABEL_37;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 24))(__p.__r_.__value_.__r.__words[0]))
        break;
      if (!__p.__r_.__value_.__r.__words[0])
      {
        v17 = v21;
LABEL_37:
        v16 = __p.__r_.__value_.__l.__size_ + 48 * v17;
        goto LABEL_38;
      }
      v16 = (*(uint64_t (**)(void))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 32))();
LABEL_38:
      fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::AddArc(*(_QWORD **)(*v6 + 8 * (int)v14), v16);
      if (__p.__r_.__value_.__r.__words[0])
        (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 40))(__p.__r_.__value_.__r.__words[0]);
      else
        ++v21;
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_45;
    }
LABEL_43:
    if (v20)
      --*v20;
LABEL_45:
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 32))(v25);
    else
      ++v27;
  }
  if (v25)
    (*(void (**)(void))(*(_QWORD *)v25 + 8))();
LABEL_50:
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(_QWORD *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1DEAD992C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  _QWORD *v21;

  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>::~VectorFstBaseImpl(v21);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>::AddState(_QWORD *a1)
{
  char *v2;
  char *v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v2 = (char *)operator new(0x48uLL);
  v3 = v2;
  *(int32x2_t *)v2 = vdup_n_s32(0x7F800000u);
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  v5 = (_QWORD *)a1[9];
  v4 = a1[10];
  if ((unint64_t)v5 >= v4)
  {
    v7 = a1[8];
    v8 = ((uint64_t)v5 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v9 = v4 - v7;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v11);
    else
      v12 = 0;
    v13 = (_QWORD *)(v11 + 8 * v8);
    v14 = v11 + 8 * v12;
    *v13 = v3;
    v6 = v13 + 1;
    v16 = (char *)a1[8];
    v15 = (char *)a1[9];
    if (v15 != v16)
    {
      do
      {
        v17 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *--v13 = v17;
      }
      while (v15 != v16);
      v15 = (char *)a1[8];
    }
    a1[8] = v13;
    a1[9] = v6;
    a1[10] = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[9] = v6;
  return (((unint64_t)v6 - a1[8]) >> 3) - 1;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>::SetFinal(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  void *__p;
  _BYTE *v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 8 * a2);
  v4 = *a3;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)a3[1], a3[2], (a3[2] - a3[1]) >> 2);
  *(_QWORD *)v3 = v4;
  if ((uint64_t *)v3 != &v4)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v3 + 8), (char *)__p, (uint64_t)v6, (v6 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_1DEAD9B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::reserve(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  if (0xAAAAAAAAAAAAAAABLL * ((result[2] - *result) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v2 = result;
    v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 48 * v4;
    std::vector<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::__swap_out_circular_buffer(v2, v5);
    return (uint64_t *)std::__split_buffer<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

void sub_1DEAD9C14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::AddArc(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[2];
  _QWORD *v20;
  char *v21;
  _QWORD *v22;

  if (!*(_DWORD *)a2)
    ++a1[4];
  if (!*(_DWORD *)(a2 + 4))
    ++a1[5];
  v4 = a1[8];
  v5 = a1[7];
  if (v5 >= v4)
  {
    v9 = a1 + 6;
    v10 = a1[6];
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v10) >> 4);
    if (v11 + 1 > 0x555555555555555)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v10) >> 4);
    v13 = 2 * v12;
    if (2 * v12 <= v11 + 1)
      v13 = v11 + 1;
    if (v12 >= 0x2AAAAAAAAAAAAAALL)
      v14 = 0x555555555555555;
    else
      v14 = v13;
    v22 = a1 + 8;
    if (v14)
    {
      v16 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>>(v14);
    }
    else
    {
      v16 = 0;
      v15 = 0;
    }
    v17 = &v16[12 * v11];
    v19[0] = v16;
    v19[1] = v17;
    v20 = v17;
    v21 = (char *)&v16[12 * v15];
    *v17 = *(_QWORD *)a2;
    v18 = *(_QWORD *)(a2 + 8);
    v17[2] = 0;
    v17 += 2;
    *(v17 - 1) = v18;
    v17[1] = 0;
    v17[2] = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v17, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
    v16[12 * v11 + 10] = *(_DWORD *)(a2 + 40);
    v20 += 6;
    std::vector<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::__swap_out_circular_buffer(v9, v19);
    v8 = a1[7];
    result = std::__split_buffer<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::~__split_buffer((uint64_t)v19);
  }
  else
  {
    *(_QWORD *)v5 = *(_QWORD *)a2;
    v6 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 8) = v6;
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 32) = 0;
    result = (uint64_t)std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v5 + 16), *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
    *(_DWORD *)(v5 + 40) = *(_DWORD *)(a2 + 40);
    v8 = v5 + 48;
    a1[7] = v5 + 48;
  }
  a1[7] = v8;
  return result;
}

void sub_1DEAD9DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 56) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  uint64_t **v2;
  unint64_t v3;

  *a1 = &off_1EA925150;
  v2 = (uint64_t **)a1[9];
  if (v2 != (uint64_t **)a1[8])
  {
    v3 = 0;
    v2 = (uint64_t **)a1[8];
    do
    {
      fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::Destroy(v2[v3++]);
      v2 = (uint64_t **)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (_QWORD)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::~FstImpl((uint64_t)a1);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::~FstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_1EA925710;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::Destroy(uint64_t *__p)
{
  void **v2;
  void *v3;

  if (__p)
  {
    v2 = (void **)(__p + 6);
    if (__p[6])
    {
      std::vector<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::__clear[abi:ne180100](__p + 6);
      operator delete(*v2);
    }
    v3 = (void *)__p[1];
    if (v3)
    {
      __p[2] = (uint64_t)v3;
      operator delete(v3);
    }
    operator delete(__p);
  }
}

void std::vector<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 48)
  {
    v4 = *(void **)(i - 32);
    if (v4)
    {
      *(_QWORD *)(i - 24) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::Properties(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t std::vector<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  char v16;
  __int128 v17;
  __int128 v18;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  *(_QWORD *)&v18 = v6;
  *((_QWORD *)&v18 + 1) = v6;
  v17 = v18;
  v15[0] = a1 + 2;
  v15[1] = &v17;
  v15[2] = &v18;
  v16 = 0;
  if (v5 != v4)
  {
    v7 = v5;
    do
    {
      v8 = *(_QWORD *)(v7 - 48);
      v7 -= 48;
      *(_QWORD *)(v6 - 48) = v8;
      v9 = *(_QWORD *)(v7 + 8);
      *(_QWORD *)(v6 - 32) = 0;
      v10 = v6 - 32;
      *(_QWORD *)(v6 - 40) = v9;
      *(_QWORD *)(v10 + 8) = 0;
      *(_QWORD *)(v10 + 16) = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v6 - 32), *(const void **)(v7 + 16), *(_QWORD *)(v7 + 24), (uint64_t)(*(_QWORD *)(v7 + 24) - *(_QWORD *)(v7 + 16)) >> 2);
      *(_DWORD *)(v6 - 8) = *(_DWORD *)(v5 - 8);
      v6 = *((_QWORD *)&v18 + 1) - 48;
      *((_QWORD *)&v18 + 1) -= 48;
      v5 = v7;
    }
    while (v7 != v4);
  }
  v16 = 1;
  result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,std::reverse_iterator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  a2[1] = v6;
  v12 = *a1;
  *a1 = v6;
  a2[1] = v12;
  v13 = a1[1];
  a1[1] = a2[2];
  a2[2] = v13;
  v14 = a1[2];
  a1[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

void sub_1DEADA0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,std::reverse_iterator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 48;
    v4 = *(void **)(v2 - 32);
    if (v4)
    {
      *(_QWORD *)(v2 - 24) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 48;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,std::reverse_iterator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      v5 = *(void **)(v3 + 16);
      if (v5)
      {
        *(_QWORD *)(v3 + 24) = v5;
        operator delete(v5);
      }
      v3 += 48;
    }
  }
  return a1;
}

void fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>::~VectorFstImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1DF0ED014);
}

void fst::FstImpl<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::~FstImpl(a1);
  JUMPOUT(0x1DF0ED014);
}

void fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>>::~MutableArcIterator()
{
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::ArcIteratorBase<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::Reinit()
{
  return 0;
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>>::Done_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) >= 0xAAAAAAAAAAAAAAABLL
                               * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56)
                                          - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48)) >> 4);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>>::Value_(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) + 48 * *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>>::Next_(uint64_t result)
{
  ++*(_QWORD *)(result + 24);
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>>::Position_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>>::Reset_(uint64_t result)
{
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>>::Flags_()
{
  return 15;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>>::SetValue_(uint64_t a1, float *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  int v18;
  float v19;
  uint64_t result;
  int v22;
  int v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;

  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = v4[6];
  v7 = (int *)(v6 + 48 * v5);
  v9 = *v7;
  v8 = v7[1];
  if (*v7 != v8)
    **(_QWORD **)(a1 + 16) &= ~0x20000uLL;
  if (v9)
  {
    if (v8)
      goto LABEL_9;
    v10 = *(unint64_t **)(a1 + 16);
    v11 = *v10;
  }
  else
  {
    v10 = *(unint64_t **)(a1 + 16);
    v12 = *v10;
    *v10 &= ~0x1000000uLL;
    if (v8)
      goto LABEL_9;
    v11 = v12 & 0xFFFFFFFFFEBFFFFFLL;
    *v10 = v11;
  }
  *v10 = v11 & 0xFFFFFFFFFBFFFFFFLL;
LABEL_9:
  v13 = v6 + 48 * v5;
  v16 = *(float *)(v13 + 8);
  v15 = *(float *)(v13 + 12);
  v14 = v13 + 8;
  if ((v16 != INFINITY || v15 != INFINITY) && (v16 != 0.0 || v15 != 0.0))
    **(_QWORD **)(a1 + 16) &= ~0x100000000uLL;
  v17 = 0x30FC30007;
  v19 = *a2;
  v18 = *((_DWORD *)a2 + 1);
  if (*(_DWORD *)a2 == v9 && v18 == v8)
  {
    if (*((_DWORD *)a2 + 10) == *(_DWORD *)(v6 + 48 * v5 + 40))
      v17 = 0x3FFFFFFF0007;
    if (v9)
    {
LABEL_19:
      if (v8)
        goto LABEL_20;
      goto LABEL_32;
    }
  }
  else if (v9)
  {
    goto LABEL_19;
  }
  --v4[4];
  if (v8)
  {
LABEL_20:
    if (v19 != 0.0)
      goto LABEL_21;
    goto LABEL_33;
  }
LABEL_32:
  --v4[5];
  if (v19 != 0.0)
  {
LABEL_21:
    if (v18)
      goto LABEL_23;
    goto LABEL_22;
  }
LABEL_33:
  ++v4[4];
  if (!v18)
LABEL_22:
    ++v4[5];
LABEL_23:
  *(_QWORD *)v7 = *(_QWORD *)a2;
  result = fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>::operator=(v14, (uint64_t)(a2 + 2));
  *(float *)(v6 + 48 * v5 + 40) = a2[10];
  v22 = *(_DWORD *)a2;
  v23 = *((_DWORD *)a2 + 1);
  if (*(_DWORD *)a2 != v23)
    **(_QWORD **)(a1 + 16) = **(_QWORD **)(a1 + 16) & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (v22)
  {
    if (!v23)
    {
      v24 = *(unint64_t **)(a1 + 16);
      v25 = *v24;
LABEL_37:
      *v24 = v25 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
    }
  }
  else
  {
    v24 = *(unint64_t **)(a1 + 16);
    v26 = *v24 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
    *v24 = v26;
    if (!v23)
    {
      v25 = v26 & 0xFFFFFFFFFD3FFFFFLL | 0x400000;
      *v24 = v25;
      goto LABEL_37;
    }
  }
  if ((a2[2] != INFINITY || a2[3] != INFINITY) && (a2[2] != 0.0 || a2[3] != 0.0))
    **(_QWORD **)(a1 + 16) = **(_QWORD **)(a1 + 16) & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  **(_QWORD **)(a1 + 16) &= v17;
  return result;
}

void fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>::DeleteArcs(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  void *v5;

  if (a2)
  {
    v2 = a2;
    v4 = a1[7] - 48;
    do
    {
      if (!*(_DWORD *)v4)
        --a1[4];
      if (!*(_DWORD *)(v4 + 4))
        --a1[5];
      v5 = *(void **)(v4 + 16);
      if (v5)
      {
        *(_QWORD *)(v4 + 24) = v5;
        operator delete(v5);
      }
      a1[7] = v4;
      v4 -= 48;
      --v2;
    }
    while (v2);
  }
}

uint64_t fst::SetFinalProperties<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(unint64_t a1, float *a2, float *a3)
{
  if ((*a2 != INFINITY || a2[1] != INFINITY) && (*a2 != 0.0 || a2[1] != 0.0))
    a1 &= ~0x100000000uLL;
  if ((*a3 != INFINITY || a3[1] != INFINITY) && (*a3 != 0.0 || a3[1] != 0.0))
    a1 = a1 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  return a1 & 0x3FFFFFF0007;
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::WriteFstHeader(uint64_t a1, uint64_t a2, _BYTE *a3, std::string *__str, uint64_t a5, uint64_t a6)
{
  const std::string *v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t result;
  BOOL v20;
  uint64_t v21;

  if (a3[24])
  {
    std::string::operator=((std::string *)(a6 + 8), __str);
    v11 = (const std::string *)fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::Type();
    std::string::operator=((std::string *)(a6 + 32), v11);
    *(_DWORD *)(a6 + 56) = 2;
    *(_QWORD *)(a6 + 64) = a5;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
      v12 = a3[25] == 0;
    else
      v12 = 1;
    v13 = !v12;
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    if (a3[26])
      v15 = v14 == 0;
    else
      v15 = 1;
    v16 = v13 | 2;
    if (v15)
      v16 = v13;
    if (a3[27])
      v16 |= 4u;
    *(_DWORD *)(a6 + 60) = v16;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
    v17 = a3[25] == 0;
  else
    v17 = 1;
  if (!v17)
  {
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 72))(v18, a2);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  if (result)
    v20 = a3[26] == 0;
  else
    v20 = 1;
  if (!v20)
  {
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 72))(v21, a2);
  }
  return result;
}

uint64_t fst::LatticeWeightTpl<float>::Write(uint64_t a1, uint64_t a2)
{
  std::ostream::write();
  std::ostream::write();
  return a2;
}

uint64_t fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::Type()
{
  unsigned __int8 v0;
  std::string *v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;

  if ((v0 & 1) == 0
  {
    v2 = (std::string *)operator new();
    v3 = (_QWORD *)fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>::Type();
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "tropical"))
    {
      std::string::basic_string[abi:ne180100]<0>(v2, "standard");
    }
    else
    {
      v4 = fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>::Type();
      if (*(char *)(v4 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)v4, *(_QWORD *)(v4 + 8));
      }
      else
      {
        v5 = *(_OWORD *)v4;
        v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 16);
        *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v5;
      }
    }
    fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::Type(void)::type = (uint64_t)v2;
  }
  return fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::Type(void)::type;
}

void sub_1DEADA98C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>::Type()
{
  unsigned __int8 v0;
  _QWORD *v2;

  if ((v0 & 1) == 0
  {
    v2 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v2, "lattice4");
    fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>::Type(void)::type = (uint64_t)v2;
  }
  return fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>::Type(void)::type;
}

void sub_1DEADAA40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  unint64_t v15;
  _QWORD *v16;
  std::string *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD v30[2];
  char v31;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = (char *)*v13;
      if (*v13)
      {
        do
        {
          v15 = *((_QWORD *)v14 + 1);
          if (v15 == v9)
          {
            if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)v14 + 16, a2) & 1) != 0)
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3)
              break;
          }
          v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  v14 = (char *)operator new(0x40uLL);
  v30[0] = v14;
  v30[1] = a1 + 16;
  v31 = 0;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v9;
  v17 = (std::string *)(v14 + 16);
  v18 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v18, *((_QWORD *)v18 + 1));
  }
  else
  {
    v19 = *v18;
    *((_QWORD *)v14 + 4) = *((_QWORD *)v18 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v19;
  }
  *((_QWORD *)v14 + 5) = 0;
  *((_QWORD *)v14 + 6) = 0;
  *((_QWORD *)v14 + 7) = 0;
  v31 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__rehash<true>(a1, v25);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v27)
  {
    *(_QWORD *)v14 = *v27;
LABEL_41:
    *v27 = v14;
    goto LABEL_42;
  }
  *(_QWORD *)v14 = *v16;
  *v16 = v14;
  *(_QWORD *)(v26 + 8 * v3) = v16;
  if (*(_QWORD *)v14)
  {
    v28 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v28 >= v10)
        v28 %= v10;
    }
    else
    {
      v28 &= v10 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_41;
  }
LABEL_42:
  v30[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v30);
  return v14;
}

void sub_1DEADACF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::BPE::GetPairs(uint64_t a1, std::string **a2, uint64_t a3)
{
  std::string *v4;
  __int128 *v5;
  uint64_t v7;
  unint64_t v8;
  __int128 v10;
  char v11;
  void *v12;
  float *v13;
  float v14;
  std::string *v15;
  __int128 v16;
  unint64_t v17;
  int8x8_t v18;
  unint64_t v19;
  uint8x8_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t **v24;
  unint64_t v25;
  float *v26;
  float v27;
  size_t size;
  std::__split_buffer<std::string>::pointer p_p;
  std::string *v30;
  uint64_t v31;
  int v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  std::string *v35;
  void *v36;
  char v37;
  const void **v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  __int128 v43;
  __int128 *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  std::string *v51;
  std::string *v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  void *v56;
  char v57;
  int v59;
  void *v60[2];
  std::string::size_type v61;
  std::string v62;
  std::string v63;
  std::__split_buffer<std::string> __p;

  v4 = *a2;
  v5 = (__int128 *)a2[1];
  v7 = (char *)v5 - (char *)v4;
  v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)v4) >> 3);
  if (v8 < 2)
    return;
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v63, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
    v4 = *a2;
    v5 = (__int128 *)a2[1];
    v7 = (char *)v5 - (char *)*a2;
    v8 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
  }
  else
  {
    v10 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v10;
  }
  if (v7 == 24)
  {
    v11 = 0;
    v12 = 0;
    goto LABEL_89;
  }
  v57 = 0;
  v13 = (float *)(a1 + 128);
  v14 = *(float *)(a1 + 128);
  v59 = -1;
  v8 = 1;
  v56 = 0;
  do
  {
    v15 = &v4[v8];
    if (SHIBYTE(v15->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v62, v15->__r_.__value_.__l.__data_, v15->__r_.__value_.__l.__size_);
    }
    else
    {
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v62.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v16;
    }
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v63.__r_.__value_.__l.__data_, (const void **)&v62.__r_.__value_.__l.__data_, (uint64_t)&__p);
    v17 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 48, (uint64_t)&__p);
    v18 = *(int8x8_t *)(a1 + 32);
    if (!*(_QWORD *)&v18)
    {
      v23 = 0;
      goto LABEL_32;
    }
    v19 = v17;
    v20 = (uint8x8_t)vcnt_s8(v18);
    v20.i16[0] = vaddlv_u8(v20);
    v21 = v20.u32[0];
    if (v20.u32[0] > 1uLL)
    {
      v22 = v17;
      if (v17 >= *(_QWORD *)&v18)
        v22 = v17 % *(_QWORD *)&v18;
    }
    else
    {
      v22 = (*(_QWORD *)&v18 - 1) & v17;
    }
    v24 = *(uint64_t ***)(*(_QWORD *)(a1 + 24) + 8 * v22);
    if (!v24)
    {
      v23 = 0;
      goto LABEL_32;
    }
    v23 = *v24;
    if (!*v24)
      goto LABEL_32;
    while (1)
    {
      v25 = v23[1];
      if (v25 == v19)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 56, (unsigned __int8 *)v23 + 16, (unsigned __int8 *)&__p) & 1) != 0)goto LABEL_31;
        goto LABEL_27;
      }
      if (v21 > 1)
      {
        if (v25 >= *(_QWORD *)&v18)
          v25 %= *(_QWORD *)&v18;
      }
      else
      {
        v25 &= *(_QWORD *)&v18 - 1;
      }
      if (v25 != v22)
        break;
LABEL_27:
      v23 = (uint64_t *)*v23;
      if (!v23)
        goto LABEL_31;
    }
    v23 = 0;
LABEL_31:
    v13 = (float *)(a1 + 128);
LABEL_32:
    if (SHIBYTE(__p.__end_) < 0)
      operator delete(__p.__first_);
    v26 = (float *)(v23 + 5);
    if (!v23)
      v26 = v13;
    v27 = *v26;
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    if (v27 >= v14 || v27 == *v13)
    {
      v27 = v14;
    }
    else
    {
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v63.__r_.__value_.__r.__words[2]);
      else
        size = v63.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, size + 1);
      if (SHIBYTE(__p.__end_) >= 0)
        p_p = (std::__split_buffer<std::string>::pointer)&__p;
      else
        p_p = __p.__first_;
      if (size)
      {
        if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v30 = &v63;
        else
          v30 = (std::string *)v63.__r_.__value_.__r.__words[0];
        memmove(p_p, v30, size);
      }
      *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + size) = 32;
      v31 = (uint64_t)&(*a2)[v8];
      v32 = *(char *)(v31 + 23);
      if (v32 >= 0)
        v33 = (const std::string::value_type *)&(*a2)[v8];
      else
        v33 = *(const std::string::value_type **)v31;
      if (v32 >= 0)
        v34 = *(unsigned __int8 *)(v31 + 23);
      else
        v34 = *(_QWORD *)(v31 + 8);
      v35 = std::string::append((std::string *)&__p, v33, v34);
      v36 = (void *)v35->__r_.__value_.__r.__words[0];
      v37 = HIBYTE(v35->__r_.__value_.__r.__words[2]);
      v35->__r_.__value_.__r.__words[0] = 0;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      if (v57 < 0)
        operator delete(v56);
      if (SHIBYTE(__p.__end_) < 0)
        operator delete(__p.__first_);
      v59 = v8 - 1;
      v56 = v36;
      v57 = v37;
      v13 = (float *)(a1 + 128);
    }
    std::string::operator=(&v63, &(*a2)[v8++]);
    v4 = *a2;
    v5 = (__int128 *)a2[1];
    v14 = v27;
  }
  while (0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)*a2) >> 3) != v8);
  if (v59 == -1)
  {
    v12 = v56;
    v11 = v57;
LABEL_89:
    if ((std::string **)a3 != a2)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)a3, v4, v5, v8);
    goto LABEL_91;
  }
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)a3);
  v38 = (const void **)*a2;
  if (a2[1] != *a2)
  {
    v39 = 0;
    v40 = 0;
    do
    {
      if (v40 == v59)
      {
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v38[3 * v39], &v38[3 * v59 + 3], (uint64_t)v60);
        v42 = *(_QWORD *)(a3 + 8);
        v41 = *(_QWORD *)(a3 + 16);
        if (v42 >= v41)
        {
          v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - *(_QWORD *)a3) >> 3);
          v48 = v47 + 1;
          if (v47 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - *(_QWORD *)a3) >> 3);
          if (2 * v49 > v48)
            v48 = 2 * v49;
          if (v49 >= 0x555555555555555)
            v50 = 0xAAAAAAAAAAAAAAALL;
          else
            v50 = v48;
          __p.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
          if (v50)
            v51 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a3 + 16, v50);
          else
            v51 = 0;
          v52 = v51 + v47;
          __p.__first_ = v51;
          __p.__begin_ = v52;
          __p.__end_cap_.__value_ = &v51[v50];
          v53 = *(_OWORD *)v60;
          v52->__r_.__value_.__r.__words[2] = v61;
          *(_OWORD *)&v52->__r_.__value_.__l.__data_ = v53;
          v60[1] = 0;
          v61 = 0;
          v60[0] = 0;
          __p.__end_ = v52 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__p);
          v54 = *(_QWORD *)(a3 + 8);
          std::__split_buffer<std::string>::~__split_buffer(&__p);
          v55 = SHIBYTE(v61);
          *(_QWORD *)(a3 + 8) = v54;
          if (v55 < 0)
            operator delete(v60[0]);
        }
        else
        {
          v43 = *(_OWORD *)v60;
          *(_QWORD *)(v42 + 16) = v61;
          *(_OWORD *)v42 = v43;
          *(_QWORD *)(a3 + 8) = v42 + 24;
        }
        v40 = v59 + 1;
      }
      else
      {
        v44 = (__int128 *)&v38[3 * v39];
        v45 = *(_QWORD *)(a3 + 8);
        if (v45 >= *(_QWORD *)(a3 + 16))
        {
          v46 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a3, v44);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a3, v44);
          v46 = v45 + 24;
        }
        *(_QWORD *)(a3 + 8) = v46;
      }
      v39 = ++v40;
      v38 = (const void **)*a2;
    }
    while (0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3) > v40);
  }
  v12 = v56;
  v11 = v57;
LABEL_91:
  if (v11 < 0)
    operator delete(v12);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
}

void sub_1DEADB260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,std::__split_buffer<std::string> *a37)
{
  void *v37;
  char v38;
  char v40;

  v40 = v38;
  if (v40 < 0)
    operator delete(v37);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

void std::wstring::__init_copy_ctor_external(std::wstring *this, const std::wstring::value_type *__s, std::wstring::size_type __sz)
{
  std::wstring *v5;
  std::wstring::size_type v6;
  std::wstring *v7;
  uint64_t v8;

  v5 = this;
  if (__sz > 4)
  {
    if (__sz >= 0x3FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((__sz | 1) != 5)
      v6 = __sz | 1;
    v7 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::wstring::size_type)v7;
    v5 = v7;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, 4 * __sz + 4);
}

uint64_t std::less<std::wstring>::operator()[abi:ne180100](const __int32 *a1, const __int32 *a2)
{
  int v2;
  size_t v3;
  int v4;
  size_t v5;
  size_t v6;
  unsigned int v7;

  v2 = *((char *)a2 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  else
    v3 = *((_QWORD *)a2 + 1);
  v4 = *((char *)a1 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = *((_QWORD *)a1 + 1);
  if (v3 >= v5)
    v6 = v5;
  else
    v6 = v3;
  if (!v6)
    goto LABEL_16;
  if (v4 < 0)
    a1 = *(const __int32 **)a1;
  if (v2 < 0)
    a2 = *(const __int32 **)a2;
  v7 = wmemcmp(a1, a2, v6);
  if (!v7)
  {
LABEL_16:
    if (v5 < v3)
      v7 = -1;
    else
      v7 = v3 < v5;
  }
  return v7 >> 31;
}

void std::codecvt_utf8<wchar_t,1114111ul,(std::codecvt_mode)0>::~codecvt_utf8[abi:ne180100](std::codecvt<wchar_t, char, mbstate_t> *a1)
{
  std::codecvt<wchar_t,char,__mbstate_t>::~codecvt(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(std::vector<int> *a1, int *__dst, char *__src, char *a4, uint64_t a5)
{
  int *v6;
  std::allocator<int> *p_end_cap;
  int *v10;
  int *value;
  unint64_t v12;
  std::vector<int>::pointer begin;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  int *v23;
  char *v24;
  int *v25;
  int *v26;
  int v27;
  int *v28;
  uint64_t v29;
  int *v30;
  int v31;
  std::__split_buffer<int> __v;

  if (a5 < 1)
    return;
  v6 = (int *)__src;
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<int> *)&a1->__end_cap_;
  v10 = value;
  v12 = *((_QWORD *)p_end_cap - 1);
  if (a5 > (uint64_t)((uint64_t)value - v12) >> 2)
  {
    begin = a1->__begin_;
    v14 = a5 + ((uint64_t)(v12 - (unint64_t)a1->__begin_) >> 2);
    if (v14 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v15 = __dst - begin;
    v16 = (char *)v10 - (char *)begin;
    if (v16 >> 1 > v14)
      v14 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v17)
      v18 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v17);
    else
      v18 = 0;
    v28 = &v18[v15];
    __v.__first_ = v18;
    __v.__begin_ = v28;
    __v.__end_cap_.__value_ = &v18[v17];
    v29 = 4 * a5;
    v30 = &v28[a5];
    do
    {
      v31 = *v6++;
      *v28++ = v31;
      v29 -= 4;
    }
    while (v29);
    __v.__end_ = v30;
    std::vector<int>::__swap_out_circular_buffer(a1, &__v, __dst);
    if (__v.__end_ != __v.__begin_)
      __v.__end_ = (std::__split_buffer<int>::pointer)((char *)__v.__end_
                                                     + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_)
      operator delete(__v.__first_);
    return;
  }
  v19 = v12 - (_QWORD)__dst;
  v20 = (uint64_t)(v12 - (_QWORD)__dst) >> 2;
  if (v20 >= a5)
  {
    v21 = &__src[4 * a5];
    v23 = (int *)*((_QWORD *)p_end_cap - 1);
LABEL_17:
    v24 = (char *)&__dst[a5];
    v25 = &v23[-a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *v25++;
        *v26++ = v27;
      }
      while ((unint64_t)v25 < v12);
    }
    a1->__end_ = v26;
    if (v23 != (int *)v24)
      memmove(&v23[-(((char *)v23 - v24) >> 2)], __dst, (char *)v23 - v24);
    if (v21 != (char *)v6)
      memmove(__dst, v6, v21 - (char *)v6);
    return;
  }
  v21 = &__src[4 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*((void **)p_end_cap - 1), &__src[4 * v20], a4 - v21);
  v23 = (int *)(v12 + v22);
  a1->__end_ = (std::vector<int>::pointer)(v12 + v22);
  if (v19 >= 1)
    goto LABEL_17;
}

void sub_1DEADB608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL kaldi::quasar::BPE::IsIntraWord(uint64_t a1, uint64_t **a2)
{
  size_t v2;
  size_t v3;
  size_t v4;
  int v5;
  size_t v6;
  size_t v7;
  BOOL v9;
  size_t v10;
  size_t v11;
  const void *v13;
  int v14;

  v2 = *((unsigned __int8 *)a2 + 23);
  v3 = (size_t)a2[1];
  if ((v2 & 0x80u) == 0)
    v4 = *((unsigned __int8 *)a2 + 23);
  else
    v4 = (size_t)a2[1];
  v5 = *(char *)(a1 + 159);
  if (v5 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 159);
  else
    v6 = *(_QWORD *)(a1 + 144);
  v9 = v4 >= v6;
  v7 = v4 - v6;
  if (!v9)
    return 0;
  if ((v2 & 0x80) != 0)
  {
    if (v6 == -1 || v3 < v7)
LABEL_36:
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v3 - v7 >= v6)
      v11 = v6;
    else
      v11 = v3 - v7;
    a2 = (uint64_t **)*a2;
  }
  else
  {
    v9 = v6 != -1 && v2 >= v7;
    if (!v9)
      goto LABEL_36;
    v10 = v2 - v7;
    if (v10 >= v6)
      v11 = v6;
    else
      v11 = v10;
  }
  if (v5 >= 0)
    v13 = (const void *)(a1 + 136);
  else
    v13 = *(const void **)(a1 + 136);
  v14 = memcmp((char *)a2 + v7, v13, v11);
  return v11 == v6 && v14 == 0;
}

uint64_t kaldi::quasar::TranslationUtil::PathElement::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 32));
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 6) = 0;
  v5 = (void **)(a1 + 56);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*v5);
  v6 = *(__int128 *)((char *)a2 + 56);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 79) = 0;
  *((_BYTE *)a2 + 56) = 0;
  v7 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
  if (v7)
  {
    *(_QWORD *)(a1 + 96) = v7;
    operator delete(v7);
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
  }
  *(_OWORD *)(a1 + 88) = *(__int128 *)((char *)a2 + 88);
  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 11) = 0;
  *((_QWORD *)a2 + 12) = 0;
  *((_QWORD *)a2 + 13) = 0;
  v8 = *(void **)(a1 + 112);
  if (v8)
  {
    *(_QWORD *)(a1 + 120) = v8;
    operator delete(v8);
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
  }
  *(_OWORD *)(a1 + 112) = a2[7];
  *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  *((_QWORD *)a2 + 16) = 0;
  v9 = *(void **)(a1 + 136);
  if (v9)
  {
    *(_QWORD *)(a1 + 144) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
  }
  *(_OWORD *)(a1 + 136) = *(__int128 *)((char *)a2 + 136);
  *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 17) = 0;
  *((_QWORD *)a2 + 18) = 0;
  *((_QWORD *)a2 + 19) = 0;
  v10 = *(void **)(a1 + 160);
  if (v10)
  {
    *(_QWORD *)(a1 + 168) = v10;
    operator delete(v10);
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
  }
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 20) = 0;
  *((_QWORD *)a2 + 21) = 0;
  *((_QWORD *)a2 + 22) = 0;
  v11 = *(void **)(a1 + 184);
  if (v11)
  {
    *(_QWORD *)(a1 + 192) = v11;
    operator delete(v11);
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0;
    *(_QWORD *)(a1 + 200) = 0;
  }
  *(_OWORD *)(a1 + 184) = *(__int128 *)((char *)a2 + 184);
  *(_QWORD *)(a1 + 200) = *((_QWORD *)a2 + 25);
  *((_QWORD *)a2 + 23) = 0;
  *((_QWORD *)a2 + 24) = 0;
  *((_QWORD *)a2 + 25) = 0;
  v12 = *(void **)(a1 + 208);
  if (v12)
  {
    *(_QWORD *)(a1 + 216) = v12;
    operator delete(v12);
    *(_QWORD *)(a1 + 208) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
  }
  *(_OWORD *)(a1 + 208) = a2[13];
  *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
  *((_QWORD *)a2 + 26) = 0;
  *((_QWORD *)a2 + 27) = 0;
  *((_QWORD *)a2 + 28) = 0;
  *(_DWORD *)(a1 + 232) = *((_DWORD *)a2 + 58);
  return a1;
}

__n128 std::allocator<kaldi::quasar::TranslationUtil::PathElement>::construct[abi:ne180100]<kaldi::quasar::TranslationUtil::PathElement,kaldi::quasar::TranslationUtil::PathElement>(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;

  v2 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 6) = 0;
  v3 = *(__int128 *)((char *)a2 + 56);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  *(_OWORD *)(a1 + 56) = v3;
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 9) = 0;
  *((_QWORD *)a2 + 7) = 0;
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 88) = *(__int128 *)((char *)a2 + 88);
  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 11) = 0;
  *((_QWORD *)a2 + 12) = 0;
  *((_QWORD *)a2 + 13) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 112) = a2[7];
  *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  *((_QWORD *)a2 + 16) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = *(__int128 *)((char *)a2 + 136);
  *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 17) = 0;
  *((_QWORD *)a2 + 18) = 0;
  *((_QWORD *)a2 + 19) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 20) = 0;
  *((_QWORD *)a2 + 21) = 0;
  *((_QWORD *)a2 + 22) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 184) = *(__int128 *)((char *)a2 + 184);
  *(_QWORD *)(a1 + 200) = *((_QWORD *)a2 + 25);
  *((_QWORD *)a2 + 23) = 0;
  *((_QWORD *)a2 + 24) = 0;
  *((_QWORD *)a2 + 25) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  result = (__n128)a2[13];
  *(__n128 *)(a1 + 208) = result;
  *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
  *((_QWORD *)a2 + 26) = 0;
  *((_QWORD *)a2 + 27) = 0;
  *((_QWORD *)a2 + 28) = 0;
  *(_DWORD *)(a1 + 232) = *((_DWORD *)a2 + 58);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::PathElement>>(unint64_t a1)
{
  if (a1 >= 0x111111111111112)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(240 * a1);
}

std::string *std::vector<kaldi::quasar::TranslationUtil::PathElement>::__swap_out_circular_buffer(std::string *result, _QWORD *a2)
{
  std::string::__raw *v3;
  std::string::size_type size;
  std::string::size_type v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  const kaldi::quasar::TranslationUtil::PathElement *v9;
  std::string::size_type v10;
  std::string::size_type v11;
  std::string::size_type v12;
  std::string::size_type v13;

  v3 = (std::string::__raw *)result;
  v5 = result->__r_.__value_.__r.__words[0];
  size = result->__r_.__value_.__l.__size_;
  v6 = a2[1];
  for (i = 240; ; i -= 240)
  {
    v8 = v6 + i;
    if (size + i - 240 == v5)
      break;
    v9 = (const kaldi::quasar::TranslationUtil::PathElement *)(size + i - 480);
    result = kaldi::quasar::TranslationUtil::PathElement::PathElement((std::string *)(v8 - 480), v9);
  }
  v10 = v8 - 240;
  a2[1] = v10;
  v11 = v3->__words[0];
  v3->__words[0] = v10;
  a2[1] = v11;
  v12 = v3->__words[1];
  v3->__words[1] = a2[2];
  a2[2] = v12;
  v13 = v3->__words[2];
  v3->__words[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<kaldi::quasar::TranslationUtil::PathElement>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 240;
    kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)(i - 240));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::NbestCompare(uint64_t a1, int a2, float a3, float a4)
{
  _QWORD *v5;
  _QWORD v7[35];

  *(_DWORD *)a1 = a2;
  *(float *)(a1 + 4) = a3;
  *(float *)(a1 + 8) = a4;
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v7, "NbestCompare", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 1459, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Initializing NbestCompare. alpha: ", 34);
    v5 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", sigma: ", 9);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v7);
  }
  return a1;
}

void sub_1DEADBC34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *fst::operator<<<float>(_QWORD *a1, float *a2)
{
  const char *v4;
  uint64_t v5;
  char v6;
  float v7;
  const char *v8;
  _QWORD *v9;
  uint64_t v10;
  char v12;

  if (*a2 == INFINITY)
  {
    v4 = "Infinity";
    v5 = 8;
LABEL_5:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v4, v5);
    goto LABEL_6;
  }
  if (*a2 == -INFINITY)
  {
    v4 = "-Infinity";
    v5 = 9;
    goto LABEL_5;
  }
  std::ostream::operator<<();
LABEL_6:
  v6 = strlen(FLAGS_fst_weight_separator) == 1;
  FstCheck(v6, "strlen(FLAGS_fst_weight_separator) == 1", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/fstext/lattice-weight.h");
  v12 = *FLAGS_fst_weight_separator;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&v12, 1);
  v7 = a2[1];
  if (v7 == INFINITY)
  {
    v8 = "Infinity";
    v9 = a1;
    v10 = 8;
  }
  else
  {
    if (v7 != -INFINITY)
    {
      std::ostream::operator<<();
      return a1;
    }
    v8 = "-Infinity";
    v9 = a1;
    v10 = 9;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v8, v10);
  return a1;
}

void std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(const kaldi::quasar::TranslationUtil::NbestElement *a1, const kaldi::quasar::TranslationUtil::NbestElement *a2, float *a3, unint64_t a4, kaldi::quasar::TranslationUtil::NbestElement *a5, uint64_t a6)
{
  kaldi::quasar::TranslationUtil::NbestElement *v8;
  unint64_t v9;
  kaldi::quasar::TranslationUtil::NbestElement *v11;
  unint64_t v12;
  const kaldi::quasar::TranslationUtil::NbestElement *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const kaldi::quasar::TranslationUtil::NbestElement *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  kaldi::quasar::TranslationUtil::NbestElement *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[272];

  if (a4 >= 2)
  {
    v8 = a1;
    if (a4 == 2)
    {
      if (kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a3, (uint64_t)a2 - 272, (uint64_t)a1))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &>(v8, (uint64_t)a2 - 272);
      }
    }
    else
    {
      v9 = a4;
      if ((uint64_t)a4 <= 0)
      {
        if (a1 != a2)
        {
          v15 = (uint64_t)a1 + 272;
          if ((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a1 + 272) != a2)
          {
            v16 = 0;
            v17 = a1;
            do
            {
              v18 = (uint64_t)v17;
              v17 = (const kaldi::quasar::TranslationUtil::NbestElement *)v15;
              if (kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a3, v15, v18))
              {
                kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v27, v17);
                v19 = v16;
                while (1)
                {
                  kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)v8 + v19 + 272, (uint64_t)v8 + v19);
                  if (!v19)
                    break;
                  v19 -= 272;
                  if (!kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a3, (uint64_t)v27, (uint64_t)v8 + v19))
                  {
                    v20 = (uint64_t)v8 + v19 + 272;
                    goto LABEL_18;
                  }
                }
                v20 = (uint64_t)v8;
LABEL_18:
                kaldi::quasar::TranslationUtil::NbestElement::operator=(v20, (uint64_t)v27);
                kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v27);
              }
              v15 = (uint64_t)v17 + 272;
              v16 += 272;
            }
            while ((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v17 + 272) != a2);
          }
        }
      }
      else
      {
        v11 = a5;
        v12 = a4 >> 1;
        v13 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a1 + 272 * (a4 >> 1));
        v14 = a4 >> 1;
        if ((uint64_t)v9 <= a6)
        {
          std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(a1, v13, a3, v14, a5);
          v21 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v11 + 272 * v12);
          std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + 272 * (v9 >> 1)), a2, a3, v9 - (v9 >> 1), v21);
          v22 = (char *)v11 + 272 * v9;
          v23 = (uint64_t)v21;
          v24 = (uint64_t)v11;
          while ((char *)v23 != v22)
          {
            if (kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a3, v23, v24))
            {
              kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)v8, v23);
              v23 += 272;
            }
            else
            {
              kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)v8, v24);
              v24 += 272;
            }
            v8 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + 272);
            if ((kaldi::quasar::TranslationUtil::NbestElement *)v24 == v21)
            {
              if ((char *)v23 != v22)
              {
                v25 = 0;
                do
                {
                  kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)v8 + v25, v23 + v25);
                  v25 += 272;
                }
                while ((char *)(v23 + v25) != v22);
              }
              goto LABEL_34;
            }
          }
          if ((kaldi::quasar::TranslationUtil::NbestElement *)v24 != v21)
          {
            v26 = 0;
            do
            {
              kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)v8 + v26, v24 + v26);
              v26 += 272;
            }
            while ((kaldi::quasar::TranslationUtil::NbestElement *)(v24 + v26) != v21);
          }
LABEL_34:
          if (v11)
          {
            do
            {
              kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v11);
              v11 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v11 + 272);
              --v9;
            }
            while (v9);
          }
        }
        else
        {
          std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(a1, v13, a3, v14, a5, a6);
          std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>((char *)v8 + 272 * (v9 >> 1), a2, a3, v9 - (v9 >> 1), v11, a6);
          std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(v8, (uint64_t)v8 + 272 * (v9 >> 1), a2, a3, v9 >> 1, v9 - (v9 >> 1), v11, a6);
        }
      }
    }
  }
}

void sub_1DEADC068(_Unwind_Exception *exception_object)
{
  kaldi::quasar::TranslationUtil::NbestElement *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = v2;
  if (v1)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
      v1 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v1 + 272);
      --v4;
    }
    while (v4);
  }
  _Unwind_Resume(exception_object);
}

BOOL kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(float *a1, uint64_t a2, uint64_t a3)
{
  float v5;
  float v6;
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;

  v5 = *a1;
  v6 = 1.0;
  if (*(_DWORD *)a1)
  {
    v7 = (uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 2;
    if (LODWORD(v5) == 2)
    {
      v9 = a1[1];
      v10 = a1[2];
      v11 = powf(v10 + (float)(unint64_t)v7, v9);
      v12 = powf(v10 + 1.0, v9);
      v6 = v11 / v12;
      v8 = powf(v10 + (float)(unint64_t)((uint64_t)(*(_QWORD *)(a3 + 200) - *(_QWORD *)(a3 + 192)) >> 2), v9)
         / v12;
    }
    else
    {
      v8 = 1.0;
      if (LODWORD(v5) == 1)
      {
        v6 = (float)(unint64_t)(v7 + 1);
        v8 = (float)(unint64_t)(((uint64_t)(*(_QWORD *)(a3 + 200) - *(_QWORD *)(a3 + 192)) >> 2) + 1);
      }
    }
  }
  else
  {
    v8 = 1.0;
  }
  return (float)((float)(*(float *)(a2 + 24) + *(float *)(a2 + 28)) / v6) < (float)((float)(*(float *)(a3 + 24)
                                                                                          + *(float *)(a3 + 28))
                                                                                  / v8);
}

const kaldi::quasar::TranslationUtil::NbestElement *std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(const kaldi::quasar::TranslationUtil::NbestElement *result, const kaldi::quasar::TranslationUtil::NbestElement *a2, float *a3, unint64_t a4, kaldi::quasar::TranslationUtil::NbestElement *this)
{
  const kaldi::quasar::TranslationUtil::NbestElement *v9;
  const kaldi::quasar::TranslationUtil::NbestElement *v10;
  _BOOL4 v11;
  const kaldi::quasar::TranslationUtil::NbestElement *v12;
  const kaldi::quasar::TranslationUtil::NbestElement *v13;
  uint64_t v14;
  uint64_t v15;
  kaldi::quasar::TranslationUtil::NbestElement *v16;
  kaldi::quasar::TranslationUtil::NbestElement *v17;
  uint64_t v18;
  const kaldi::quasar::TranslationUtil::NbestElement *v19;
  uint64_t v20;
  kaldi::quasar::TranslationUtil::NbestElement *v21;
  const kaldi::quasar::TranslationUtil::NbestElement *v22;
  uint64_t v23;
  uint64_t v24;

  if (a4)
  {
    v9 = result;
    if (a4 == 2)
    {
      v10 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a2 - 272);
      v11 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a3, (uint64_t)a2 - 272, (uint64_t)result);
      if (v11)
        v12 = v10;
      else
        v12 = v9;
      if (v11)
        v10 = v9;
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement(this, v12);
      return kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)this + 272), v10);
    }
    else if (a4 == 1)
    {
      return kaldi::quasar::TranslationUtil::NbestElement::NbestElement(this, result);
    }
    else if ((uint64_t)a4 > 8)
    {
      v19 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)result + 272 * (a4 >> 1));
      std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(result, v19, a3, a4 >> 1, this, a4 >> 1);
      result = (const kaldi::quasar::TranslationUtil::NbestElement *)std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>((char *)v9 + 272 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), (char *)this + 272 * (a4 >> 1), a4 - (a4 >> 1));
      v20 = 0;
      v21 = this;
      v22 = v19;
      while (v22 != a2)
      {
        if (kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a3, (uint64_t)v22, (uint64_t)v9))
        {
          result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v21, v22);
          v22 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v22 + 272);
        }
        else
        {
          result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v21, v9);
          v9 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v9 + 272);
        }
        ++v20;
        v21 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v21 + 272);
        if (v9 == v19)
        {
          if (v22 != a2)
          {
            v23 = 0;
            do
            {
              result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v21 + v23), (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v22 + v23));
              ++v20;
              v23 += 272;
            }
            while ((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v22 + v23) != a2);
          }
          return result;
        }
      }
      if (v9 != v19)
      {
        v24 = 0;
        do
        {
          result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v21 + v24), (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v9 + v24));
          ++v20;
          v24 += 272;
        }
        while ((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v9 + v24) != v19);
      }
    }
    else if (result != a2)
    {
      result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(this, result);
      v13 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v9 + 272);
      if (v13 != a2)
      {
        v14 = 0;
        v15 = 1;
        v16 = this;
        do
        {
          if (kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a3, (uint64_t)v13, (uint64_t)v16))
          {
            kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v16 + 272), v16);
            ++v15;
            v17 = this;
            if (v16 != this)
            {
              v18 = v14;
              while (1)
              {
                v17 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)this + v18);
                if (!kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a3, (uint64_t)v13, (uint64_t)this + v18 - 272))break;
                kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)this + v18, (uint64_t)this + v18 - 272);
                v18 -= 272;
                if (!v18)
                {
                  v17 = this;
                  break;
                }
              }
            }
            result = (const kaldi::quasar::TranslationUtil::NbestElement *)kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)v17, (uint64_t)v13);
          }
          else
          {
            result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v16 + 272), v13);
            ++v15;
          }
          v13 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v13 + 272);
          v14 += 272;
          v16 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v16 + 272);
        }
        while (v13 != a2);
      }
    }
  }
  return result;
}

void sub_1DEADC438(_Unwind_Exception *exception_object)
{
  kaldi::quasar::TranslationUtil::NbestElement *v1;

  if (v1)
    kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
  _Unwind_Resume(exception_object);
}

void std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(kaldi::quasar::TranslationUtil::NbestElement *a1, uint64_t a2, kaldi::quasar::TranslationUtil::NbestElement *a3, float *a4, uint64_t a5, uint64_t a6, kaldi::quasar::TranslationUtil::NbestElement *a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  kaldi::quasar::TranslationUtil::NbestElement *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  kaldi::quasar::TranslationUtil::NbestElement *v31;
  kaldi::quasar::TranslationUtil::NbestElement *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  kaldi::quasar::TranslationUtil::NbestElement *v39;
  uint64_t v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;
  kaldi::quasar::TranslationUtil::NbestElement *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  kaldi::quasar::TranslationUtil::NbestElement *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  kaldi::quasar::TranslationUtil::NbestElement *v53;
  kaldi::quasar::TranslationUtil::NbestElement *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;

  if (a6)
  {
    v10 = a6;
    while (v10 > a8 && a5 > a8)
    {
      if (!a5)
        return;
      while (!kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a4, a2, (uint64_t)a1))
      {
        a1 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)a1 + 272);
        if (!--a5)
          return;
      }
      v55 = a8;
      if (a5 >= v10)
      {
        if (a5 == 1)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &>(a1, a2);
          return;
        }
        if (a5 >= 0)
          v22 = a5;
        else
          v22 = a5 + 1;
        v21 = v22 >> 1;
        v23 = *((_DWORD *)a4 + 2);
        v19 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)a1 + 272 * (v22 >> 1));
        v56 = *(_QWORD *)a4;
        v57 = v23;
        v18 = a2;
        if (a3 != (kaldi::quasar::TranslationUtil::NbestElement *)a2)
        {
          v52 = v22 >> 1;
          v54 = a7;
          v24 = 0xF0F0F0F0F0F0F0F1 * (((uint64_t)a3 - a2) >> 4);
          v18 = a2;
          do
          {
            v25 = v18 + 272 * (v24 >> 1);
            v26 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()((float *)&v56, v25, (uint64_t)v19);
            if (v26)
              v24 += ~(v24 >> 1);
            else
              v24 >>= 1;
            if (v26)
              v18 = v25 + 272;
          }
          while (v24);
          a7 = v54;
          v21 = v52;
        }
        v17 = 0xF0F0F0F0F0F0F0F1 * ((v18 - a2) >> 4);
      }
      else
      {
        if (v10 >= 0)
          v16 = v10;
        else
          v16 = v10 + 1;
        v17 = v16 >> 1;
        v18 = a2 + 272 * (v16 >> 1);
        v19 = (kaldi::quasar::TranslationUtil::NbestElement *)a2;
        if ((kaldi::quasar::TranslationUtil::NbestElement *)a2 != a1)
        {
          v51 = v16 >> 1;
          v53 = a7;
          v20 = 0xF0F0F0F0F0F0F0F1 * ((a2 - (uint64_t)a1) >> 4);
          v19 = a1;
          do
          {
            if (kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a4, v18, (uint64_t)v19 + 272 * (v20 >> 1)))
            {
              v20 >>= 1;
            }
            else
            {
              v19 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v19 + 272 * (v20 >> 1) + 272);
              v20 += ~(v20 >> 1);
            }
          }
          while (v20);
          a7 = v53;
          v17 = v51;
        }
        v21 = 0xF0F0F0F0F0F0F0F1 * ((v19 - a1) >> 4);
      }
      if (v19 == (kaldi::quasar::TranslationUtil::NbestElement *)a2)
      {
        v31 = (kaldi::quasar::TranslationUtil::NbestElement *)v18;
      }
      else if (v18 == a2)
      {
        v31 = v19;
      }
      else
      {
        v27 = a2;
        v28 = v21;
        v29 = v17;
        v30 = std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(v19, v27, v18);
        v17 = v29;
        v21 = v28;
        v31 = (kaldi::quasar::TranslationUtil::NbestElement *)v30;
      }
      a5 -= v21;
      v10 -= v17;
      if (v21 + v17 >= a5 + v10)
      {
        v33 = v18;
        v34 = v21;
        v35 = a5;
        v36 = v17;
        std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(v31, v33, a3, a4, v35, v10, a7, v55);
        a2 = (uint64_t)v19;
        a8 = v55;
        v10 = v36;
        a5 = v34;
        a3 = v31;
      }
      else
      {
        v32 = v19;
        a8 = v55;
        std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(a1, v32, v31, a4, v21, v17, a7, v55);
        a1 = v31;
        a2 = v18;
      }
      if (!v10)
        return;
    }
    if (a5 <= v10)
    {
      if (a1 == (kaldi::quasar::TranslationUtil::NbestElement *)a2)
        return;
      v43 = 0;
      v38 = 0;
      do
      {
        kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)a7 + v43), (kaldi::quasar::TranslationUtil::NbestElement *)((char *)a1 + v43));
        ++v38;
        v43 += 272;
      }
      while ((kaldi::quasar::TranslationUtil::NbestElement *)((char *)a1 + v43) != (kaldi::quasar::TranslationUtil::NbestElement *)a2);
      v44 = a3;
      v45 = (uint64_t)a7;
      v46 = (char *)a7 + v43;
      if (v46 == (char *)v45)
      {
        a7 = (kaldi::quasar::TranslationUtil::NbestElement *)v45;
      }
      else
      {
        v47 = v46 - 272;
        v48 = (kaldi::quasar::TranslationUtil::NbestElement *)v45;
        while ((kaldi::quasar::TranslationUtil::NbestElement *)a2 != v44)
        {
          if (kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a4, a2, v45))
          {
            kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)a1, a2);
            a2 += 272;
          }
          else
          {
            kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)a1, v45);
            v45 += 272;
          }
          a1 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)a1 + 272);
          if ((char *)v45 == v46)
            goto LABEL_80;
        }
        if ((char *)v45 == v46)
        {
LABEL_80:
          a7 = v48;
          goto LABEL_81;
        }
        v50 = 0;
        a7 = v48;
        do
        {
          kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)a1 + v50, v45 + v50);
          v50 += 272;
        }
        while ((char *)(v45 + v50 - 272) != v47);
      }
    }
    else
    {
      if (a3 == (kaldi::quasar::TranslationUtil::NbestElement *)a2)
        return;
      v37 = 0;
      v38 = 0;
      do
      {
        kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)a7 + v37), (const kaldi::quasar::TranslationUtil::NbestElement *)(a2 + v37));
        ++v38;
        v37 += 272;
      }
      while ((kaldi::quasar::TranslationUtil::NbestElement *)(a2 + v37) != a3);
      v39 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)a7 + v37);
      if ((kaldi::quasar::TranslationUtil::NbestElement *)((char *)a7 + v37) != a7)
      {
        v40 = (uint64_t)a3 - 272;
        while ((kaldi::quasar::TranslationUtil::NbestElement *)a2 != a1)
        {
          v41 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a4, (uint64_t)v39 - 272, a2 - 272);
          if (v41)
            v42 = a2 - 272;
          else
            v42 = (uint64_t)v39 - 272;
          kaldi::quasar::TranslationUtil::NbestElement::operator=(v40, v42);
          if (v41)
            a2 -= 272;
          else
            v39 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v39 - 272);
          v40 -= 272;
          if (v39 == a7)
            goto LABEL_81;
        }
        v49 = 0;
        do
        {
          kaldi::quasar::TranslationUtil::NbestElement::operator=(v40 + v49, (uint64_t)v39 + v49 - 272);
          v49 -= 272;
        }
        while ((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v39 + v49) != a7);
      }
    }
LABEL_81:
    if (a7 && v38)
    {
      do
      {
        kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(a7);
        a7 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)a7 + 272);
        --v38;
      }
      while (v38);
    }
  }
}

void sub_1DEADC950(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  kaldi::quasar::TranslationUtil::NbestElement *v2;
  kaldi::quasar::TranslationUtil::NbestElement *v4;
  uint64_t v5;

  if (v2 && v1)
  {
    v4 = v2;
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v4);
      v4 = (kaldi::quasar::TranslationUtil::NbestElement *)(v5 + 272);
      --v1;
    }
    while (v1);
  }
  _Unwind_Resume(exception_object);
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::DecodeSymbolized<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t *a4, uint64_t *a5)
{
  char *v10;
  float v11;
  const kaldi::quasar::TranslationUtil::NbestElement *v12;
  const kaldi::quasar::TranslationUtil::NbestElement *v13;
  kaldi::quasar::TranslationUtil::NbestElement *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  float v26;
  void **v27;
  unint64_t v28;
  void **v29;
  void **v30;
  void **v31;
  void **v32;
  uint64_t v33;
  int v34;
  int v35;
  char *v36;
  char **v37;
  BOOL v38;
  unint64_t i;
  unint64_t v40;
  uint64_t v41;
  int v42;
  void **v44;
  float v45;
  char **v46;
  char *v47;
  uint64_t v48;
  _QWORD v49[3];
  void (**v50)();
  uint64_t v51;
  char **v52;
  char *v53;
  uint64_t v54;
  __int128 *v55;

  v53 = 0;
  v54 = 0;
  v52 = &v53;
  if (*(_BYTE *)(a3 + 308))
  {
    kaldi::quasar::TorchEncoderDecoder::GetTiming(*(const void ***)(a1 + 136), (uint64_t)&v46);
    std::__tree<std::string>::destroy((uint64_t)&v52, v53);
    v10 = v47;
    v52 = v46;
    v53 = v47;
    v54 = v48;
    if (v48)
    {
      *((_QWORD *)v47 + 2) = &v53;
      v46 = &v47;
      v47 = 0;
      v48 = 0;
      v10 = 0;
    }
    else
    {
      v52 = &v53;
    }
    std::__tree<std::string>::destroy((uint64_t)&v46, v10);
  }
  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>::VectorFst(&v50);
  memset(v49, 0, sizeof(v49));
  v11 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::DecodeCore<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, a3, (uint64_t)&v50);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::LatticeToNbest<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a3, (uint64_t)&v50, a4, a5, (uint64_t)a2);
  if (a4[1] == *a4 && *(_QWORD *)(a3 + 200))
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v46, "DecodeSymbolized", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 1643);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"Re-decode without LM ", 21);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v46);
    }
    kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DecodeOptions((uint64_t)&v46, *(_DWORD *)(a3 + 160), *(_DWORD *)(a3 + 216), *(float *)(a3 + 228));
    v11 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::DecodeSymbolized<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, &v46, a4, a5);
    kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~DecodeOptions((uint64_t)&v46);
  }
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::NbestCompare((uint64_t)&v44, *(_DWORD *)(a1 + 5776), *(float *)(a3 + 220), *(float *)(a3 + 224));
  v12 = (const kaldi::quasar::TranslationUtil::NbestElement *)*a4;
  v13 = (const kaldi::quasar::TranslationUtil::NbestElement *)a4[1];
  v46 = (char **)v44;
  *(float *)&v47 = v45;
  if (v13 - v12 < 1)
  {
    v14 = 0;
    v16 = 0;
  }
  else
  {
    v14 = (kaldi::quasar::TranslationUtil::NbestElement *)std::get_temporary_buffer[abi:ne180100]<kaldi::quasar::TranslationUtil::NbestElement>(0xF0F0F0F0F0F0F0F1 * ((v13 - v12) >> 4));
    v16 = v15;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(v12, v13, (float *)&v46, 0xF0F0F0F0F0F0F0F1 * ((v13 - v12) >> 4), v14, v16);
  if (v14)
    operator delete(v14);
  v17 = *a4;
  v18 = a4[1];
  if (*a4 != v18)
  {
    v19 = (int)v44;
    v20 = *((float *)&v44 + 1);
    v21 = v45;
    v22 = powf(v45 + 1.0, *((float *)&v44 + 1));
    do
    {
      v23 = *(float *)(v17 + 24);
      v24 = *(float *)(v17 + 28);
      v25 = (uint64_t)(*(_QWORD *)(v17 + 200) - *(_QWORD *)(v17 + 192)) >> 2;
      if (v19 == 2)
      {
        v26 = powf(v21 + (float)(unint64_t)v25, v20) / v22;
      }
      else
      {
        v26 = 1.0;
        if (v19 == 1)
          v26 = (float)(unint64_t)(v25 + 1);
      }
      *(float *)(v17 + 40) = (float)(v23 + v24) / v26;
      v17 += 272;
    }
    while (v17 != v18);
  }
  if (*(_BYTE *)(a3 + 308))
  {
    kaldi::quasar::TorchEncoderDecoder::GetTiming(*(const void ***)(a1 + 136), (uint64_t)&v46);
    v27 = (void **)v46;
    if (v46 != &v47)
    {
      do
      {
        if (*((char *)v27 + 55) < 0)
        {
          v29 = (void **)v27[4];
          v28 = (unint64_t)v27[5];
        }
        else
        {
          v28 = *((unsigned __int8 *)v27 + 55);
          v29 = v27 + 4;
        }
        if (v28 >= 4)
          v28 = 4;
        if (v28)
        {
          v30 = (void **)((char *)v29 + v28);
          v31 = v29;
          v32 = v30;
          do
          {
            if (*(_BYTE *)v31 == 116)
            {
              v33 = 1u;
              while (v33 != 4)
              {
                if ((void **)((char *)v31 + v33) == v30)
                  goto LABEL_41;
                v34 = *((unsigned __int8 *)v31 + v33);
                v35 = aTime_0[v33++];
                if (v34 != v35)
                  goto LABEL_33;
              }
              v32 = v31;
            }
LABEL_33:
            v31 = (void **)((char *)v31 + 1);
          }
          while (v31 != v30);
LABEL_41:
          if (v32 != v30 && v32 == v29)
          {
            v55 = (__int128 *)(v27 + 4);
            *((double *)v27 + 7) = *((double *)v27 + 7)
                                 - *((double *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v52, (const void **)v27 + 4, &v55)+ 7);
          }
        }
        v36 = (char *)v27[1];
        if (v36)
        {
          do
          {
            v37 = (char **)v36;
            v36 = *(char **)v36;
          }
          while (v36);
        }
        else
        {
          do
          {
            v37 = (char **)v27[2];
            v38 = *v37 == (char *)v27;
            v27 = (void **)v37;
          }
          while (!v38);
        }
        v27 = (void **)v37;
      }
      while (v37 != &v47);
    }
    v40 = *a4;
    for (i = a4[1]; v40 != i; v40 += 272)
    {
      if ((char ***)(v40 + 248) != &v46)
        std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,double>,std::__tree_node<std::__value_type<std::string,double>,void *> *,long>>((uint64_t *)(v40 + 248), v46, &v47);
    }
    std::__tree<std::string>::destroy((uint64_t)&v46, v47);
  }
  v46 = (char **)v49;
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
  v50 = off_1EA925BE0;
  v41 = v51;
  if (v51)
  {
    v42 = *(_DWORD *)(v51 + 56) - 1;
    *(_DWORD *)(v51 + 56) = v42;
    if (!v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  std::__tree<std::string>::destroy((uint64_t)&v52, v53);
  return v11;
}

void sub_1DEADCDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  uint64_t v11;
  _DWORD *v13;
  int v14;

  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a11);
  a9 = (void **)(v11 - 184);
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100](&a9);
  *(_QWORD *)(v11 - 160) = off_1EA925BE0;
  v13 = *(_DWORD **)(v11 - 152);
  if (v13)
  {
    v14 = v13[14] - 1;
    v13[14] = v14;
    if (!v14)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
  }
  std::__tree<std::string>::destroy(v11 - 144, *(char **)(v11 - 136));
  _Unwind_Resume(a1);
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::DecodeCore<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  double *v8;
  uint64_t v9;
  _QWORD *v10;
  std::string *v11;
  std::string::size_type size;
  float v13;
  int v14;
  int v15;
  float v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  int v48;
  int v49;
  char v50;
  int64_t v51;
  uint64_t v52;
  _BYTE *v53;
  void *v54;
  _BYTE *v55;
  std::string::size_type v56;
  char v57;
  int64_t v58;
  uint64_t v59;
  _BYTE *v60;
  void *v61;
  _BYTE *v62;
  std::string::size_type v63;
  _QWORD *v64;
  std::string *v65;
  std::string::size_type v66;
  _QWORD *v67;
  _QWORD *v68;
  std::string *v69;
  std::string::size_type v70;
  __int128 v71;
  std::__shared_weak_count *v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  _QWORD *v78;
  std::string *v79;
  std::string::size_type v80;
  _QWORD *v81;
  _QWORD *v82;
  std::string *v83;
  std::string::size_type v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  int v88;
  int v89;
  int v90;
  kaldi::nnet1::Nnet *v91;
  int v92;
  int v93;
  float v94;
  clockid_t v95;
  clockid_t v96;
  _QWORD *v97;
  uint64_t v98;
  int v99;
  uint64_t *v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  BOOL v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  const char *v114;
  uint64_t v115;
  unint64_t v116;
  int v117;
  uint64_t v118;
  const char *v119;
  uint64_t v120;
  unint64_t v121;
  int v122;
  kaldi::nnet1::Nnet *v123;
  int v124;
  int v125;
  uint64_t v126;
  uint64_t (***v127)(_QWORD);
  int v128;
  uint64_t v129;
  int v130;
  _DWORD *v131;
  uint64_t *v132;
  unint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  unint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  _QWORD *v147;
  std::string *v148;
  std::string::size_type v149;
  _QWORD *v150;
  _QWORD *v151;
  std::string *v152;
  std::string::size_type v153;
  _QWORD *v154;
  __int128 v155;
  _BYTE v156[48];
  std::string v157;
  std::string v158;
  void *__p[2];
  uint64_t v160;

  v8 = (double *)(a1 + 5376);
  v9 = a1 + 6232;
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_1DEBD87CE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v156, v8, v9, (__int128 *)__p);
  if (SHIBYTE(v160) < 0)
    operator delete(__p[0]);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    memset(&v158, 0, sizeof(v158));
    kaldi::JoinVectorToString<int>(a2, ",", (uint64_t)&v158);
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, "DecodeCore", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 708, 3);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Input : ", 8);
      if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = &v158;
      else
        v11 = (std::string *)v158.__r_.__value_.__r.__words[0];
      if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v158.__r_.__value_.__r.__words[2]);
      else
        size = v158.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, size);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
    }
    if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v158.__r_.__value_.__l.__data_);
  }
  v13 = (float)(int)(((unint64_t)(a2[1] - *a2) >> 2) - (*(_DWORD *)(a3 + 236) + *(_DWORD *)(a1 + 5756)));
  if ((int)(float)(*(float *)(a1 + 5752) * v13) <= 1)
    v14 = 1;
  else
    v14 = (int)(float)(*(float *)(a1 + 5752) * v13);
  v15 = *(_DWORD *)(a1 + 5740);
  v16 = *(float *)(a1 + 5744);
  if (v16 != -1.0)
  {
    v17 = (int)(float)(v16 * v13);
    if (*(_DWORD *)(a1 + 5748) > v17)
      v17 = *(_DWORD *)(a1 + 5748);
    if (v17 < v15)
      v15 = v17;
  }
  v18 = *(_QWORD *)(a1 + 136);
  if (*(_BYTE *)(v18 + 4445))
  {
    v19 = *(unsigned __int8 *)(a3 + 111);
    if ((v19 & 0x80u) != 0)
      v19 = *(_QWORD *)(a3 + 96);
    if (!v19)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "SelectModel", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 679);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"No tar tag specified but required by model!", 43);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
    }
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, "SelectModel", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 661, 3);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Select models for ", 18);
      v21 = *(char *)(a3 + 159);
      if (v21 >= 0)
        v22 = a3 + 136;
      else
        v22 = *(_QWORD *)(a3 + 136);
      if (v21 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 159);
      else
        v23 = *(_QWORD *)(a3 + 144);
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"-", 1);
      v26 = *(char *)(a3 + 111);
      if (v26 >= 0)
        v27 = a3 + 88;
      else
        v27 = *(_QWORD *)(a3 + 88);
      if (v26 >= 0)
        v28 = *(unsigned __int8 *)(a3 + 111);
      else
        v28 = *(_QWORD *)(a3 + 96);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
      v18 = *(_QWORD *)(a1 + 136);
    }
    kaldi::quasar::TorchEncoderDecoder::SelectModel((_QWORD *)v18, (__int128 *)(a3 + 88), &v155);
    if ((_QWORD)v155)
    {
      if (kaldi::g_kaldi_verbose_level >= 3)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, "SelectModel", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 664, 3);
        v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Selected: ", 10);
        v30 = *(char *)(a3 + 159);
        if (v30 >= 0)
          v31 = a3 + 136;
        else
          v31 = *(_QWORD *)(a3 + 136);
        if (v30 >= 0)
          v32 = *(unsigned __int8 *)(a3 + 159);
        else
          v32 = *(_QWORD *)(a3 + 144);
        v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"-", 1);
        v35 = *(char *)(a3 + 111);
        if (v35 >= 0)
          v36 = a3 + 88;
        else
          v36 = *(_QWORD *)(a3 + 88);
        if (v35 >= 0)
          v37 = *(unsigned __int8 *)(a3 + 111);
        else
          v37 = *(_QWORD *)(a3 + 96);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, v36, v37);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
      }
    }
    else
    {
      if (kaldi::g_kaldi_verbose_level >= 3)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, "SelectModel", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 666, 3);
        v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Models for ", 11);
        v39 = *(char *)(a3 + 159);
        if (v39 >= 0)
          v40 = a3 + 136;
        else
          v40 = *(_QWORD *)(a3 + 136);
        if (v39 >= 0)
          v41 = *(unsigned __int8 *)(a3 + 159);
        else
          v41 = *(_QWORD *)(a3 + 144);
        v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, v40, v41);
        v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"-", 1);
        v44 = *(char *)(a3 + 111);
        if (v44 >= 0)
          v45 = a3 + 88;
        else
          v45 = *(_QWORD *)(a3 + 88);
        if (v44 >= 0)
          v46 = *(unsigned __int8 *)(a3 + 111);
        else
          v46 = *(_QWORD *)(a3 + 96);
        v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, v45, v46);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" not found", 10);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
      }
      v48 = v15;
      v49 = v14;
      v50 = *(_BYTE *)(a3 + 159);
      if (v50 >= 0)
        v51 = *(unsigned __int8 *)(a3 + 159);
      else
        v51 = *(_QWORD *)(a3 + 144);
      if (v50 >= 0)
        v52 = a3 + 136;
      else
        v52 = *(_QWORD *)(a3 + 136);
      v53 = (_BYTE *)(v52 + v51);
      if (v51 >= 1)
      {
        v54 = (void *)v52;
        do
        {
          v55 = memchr(v54, 95, v51);
          if (!v55)
            break;
          if (*v55 == 95)
            goto LABEL_82;
          v54 = v55 + 1;
          v51 = v53 - (_BYTE *)v54;
        }
        while (v53 - (_BYTE *)v54 > 0);
      }
      v55 = v53;
LABEL_82:
      if (v55 == v53)
        v56 = -1;
      else
        v56 = (std::string::size_type)&v55[-v52];
      std::string::basic_string(&v158, (const std::string *)(a3 + 136), 0, v56, (std::allocator<char> *)__p);
      v57 = *(_BYTE *)(a3 + 111);
      if (v57 >= 0)
        v58 = *(unsigned __int8 *)(a3 + 111);
      else
        v58 = *(_QWORD *)(a3 + 96);
      if (v57 >= 0)
        v59 = a3 + 88;
      else
        v59 = *(_QWORD *)(a3 + 88);
      v60 = (_BYTE *)(v59 + v58);
      v14 = v49;
      if (v58 < 1)
      {
        v62 = (_BYTE *)(v59 + v58);
        v15 = v48;
      }
      else
      {
        v61 = (void *)v59;
        v15 = v48;
        do
        {
          v62 = memchr(v61, 95, v58);
          if (!v62)
            break;
          if (*v62 == 95)
            goto LABEL_98;
          v61 = v62 + 1;
          v58 = v60 - (_BYTE *)v61;
        }
        while (v60 - (_BYTE *)v61 > 0);
        v62 = v60;
      }
LABEL_98:
      if (v62 == v60)
        v63 = -1;
      else
        v63 = (std::string::size_type)&v62[-v59];
      std::string::basic_string(&v157, (const std::string *)(a3 + 88), 0, v63, (std::allocator<char> *)__p);
      if (kaldi::g_kaldi_verbose_level >= 3)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, "SelectModel", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 669, 3);
        v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Try to find models for ", 23);
        if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v65 = &v158;
        else
          v65 = (std::string *)v158.__r_.__value_.__r.__words[0];
        if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v66 = HIBYTE(v158.__r_.__value_.__r.__words[2]);
        else
          v66 = v158.__r_.__value_.__l.__size_;
        v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)v65, v66);
        v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"-", 1);
        if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v69 = &v157;
        else
          v69 = (std::string *)v157.__r_.__value_.__r.__words[0];
        if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v70 = HIBYTE(v157.__r_.__value_.__r.__words[2]);
        else
          v70 = v157.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)v69, v70);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
      }
      kaldi::quasar::TorchEncoderDecoder::SelectModel(*(_QWORD **)(a1 + 136), (__int128 *)&v157, __p);
      v71 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v72 = (std::__shared_weak_count *)*((_QWORD *)&v155 + 1);
      v155 = v71;
      if (v72)
      {
        p_shared_owners = (unint64_t *)&v72->__shared_owners_;
        do
          v74 = __ldaxr(p_shared_owners);
        while (__stlxr(v74 - 1, p_shared_owners));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      v75 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v76 = (unint64_t *)((char *)__p[1] + 8);
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      if (!(_QWORD)v155)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "SelectModel", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 674);
        v147 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Models for ", 11);
        if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v148 = &v158;
        else
          v148 = (std::string *)v158.__r_.__value_.__r.__words[0];
        if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v149 = HIBYTE(v158.__r_.__value_.__r.__words[2]);
        else
          v149 = v158.__r_.__value_.__l.__size_;
        v150 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v147, (uint64_t)v148, v149);
        v151 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v150, (uint64_t)"-", 1);
        if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v152 = &v157;
        else
          v152 = (std::string *)v157.__r_.__value_.__r.__words[0];
        if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v153 = HIBYTE(v157.__r_.__value_.__r.__words[2]);
        else
          v153 = v157.__r_.__value_.__l.__size_;
        v154 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v151, (uint64_t)v152, v153);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, (uint64_t)" not found!", 11);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
      if (kaldi::g_kaldi_verbose_level >= 3)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, "SelectModel", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 672, 3);
        v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Selected: ", 10);
        if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v79 = &v158;
        else
          v79 = (std::string *)v158.__r_.__value_.__r.__words[0];
        if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v80 = HIBYTE(v158.__r_.__value_.__r.__words[2]);
        else
          v80 = v158.__r_.__value_.__l.__size_;
        v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)v79, v80);
        v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"-", 1);
        if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v83 = &v157;
        else
          v83 = (std::string *)v157.__r_.__value_.__r.__words[0];
        if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v84 = HIBYTE(v157.__r_.__value_.__r.__words[2]);
        else
          v84 = v157.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)v83, v84);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
      }
      if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v157.__r_.__value_.__l.__data_);
      if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v158.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    v155 = 0uLL;
  }
  v85 = (std::__shared_weak_count *)*((_QWORD *)&v155 + 1);
  if (*((_QWORD *)&v155 + 1))
  {
    v86 = (unint64_t *)(*((_QWORD *)&v155 + 1) + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = kaldi::g_kaldi_verbose_level;
  if (*(_DWORD *)(a3 + 160))
  {
    if (kaldi::g_kaldi_verbose_level >= 5)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, "DecodeCore", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 734, 5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Beam decoding", 13);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
      v88 = kaldi::g_kaldi_verbose_level;
    }
    if (v88 >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, "Init", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 875, 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"entered Init with #ActiveHyps: ", 31);
      v97 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)" at decoding-position: ", 23);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
    }
    *(_QWORD *)(a1 + 6264) = a4;
    kaldi::quasar::TorchEncoderDecoder::Start(*(_QWORD **)(a1 + 136), *(clockid_t *)(a3 + 312), a3 + 112);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 6264) + 216))(*(_QWORD *)(a1 + 6264));
    v98 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 192))(a4);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 6264) + 168))(*(_QWORD *)(a1 + 6264), v98);
    *(_DWORD *)(a1 + 6272) = -1;
    *(int32x2_t *)(a1 + 6280) = vdup_n_s32(0x7F800000u);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 6288), 0, 0, 0);
    v99 = *(_DWORD *)(a3 + 184);
    *(_QWORD *)(a1 + 6312) = 0x3F8000004F000000;
    if (v99 == 1)
      *(float *)(a1 + 6316) = 1.0 - *(float *)(a3 + 180);
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::NbestCompare((uint64_t)__p, *(_DWORD *)(a3 + 216), *(float *)(a3 + 220), *(float *)(a3 + 224));
    *(void **)(a1 + 6320) = __p[0];
    *(_DWORD *)(a1 + 6328) = __p[1];
    *(_QWORD *)(a1 + 6344) = *(_QWORD *)(a1 + 6336);
    v100 = (uint64_t *)(a1 + 5456);
    std::vector<kaldi::Matrix<float>>::resize((uint64_t *)(a1 + 5456), 1uLL);
    kaldi::Matrix<float>::Resize(*(_QWORD *)(a1 + 5456), 0, 0, 0, 0);
    v101 = *(_QWORD **)(a1 + 5688);
    v102 = *(_QWORD **)(a1 + 5680);
    if (v101 != v102)
    {
      v103 = v101 - 6;
      v104 = v101 - 6;
      do
      {
        v105 = *v104;
        v104 -= 6;
        (*(void (**)(_QWORD *))(v105 + 16))(v103);
        v106 = v103 == v102;
        v103 = v104;
      }
      while (!v106);
    }
    *(_QWORD *)(a1 + 5688) = v102;
    v107 = *(_QWORD *)(a1 + 5712);
    v108 = *(_QWORD *)(a1 + 5704);
    while (v107 != v108)
      v107 = kaldi::Matrix<float>::~Matrix(v107 - 40);
    *(_QWORD *)(a1 + 5712) = v108;
    *(_QWORD *)(a1 + 6384) = 0;
    *(_QWORD *)(a1 + 6424) = *(_QWORD *)(a1 + 6416);
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 914, 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"entered Read to process #tokens: ", 33);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
    }
    v109 = *(_QWORD *)(a1 + 5456);
    if (*(_QWORD *)(a1 + 5464) == v109)
    {
      std::vector<kaldi::Matrix<float>>::resize((uint64_t *)(a1 + 5456), 1uLL);
      v109 = *v100;
    }
    v110 = kaldi::MatrixBase<float>::NumRows(v109);
    v111 = *v100;
    if (v110)
    {
      v112 = kaldi::MatrixBase<float>::NumRows(v111);
      kaldi::Matrix<float>::Resize(*v100, v112 + ((unint64_t)(a2[1] - *a2) >> 2), 1, 2, 0);
      v115 = *a2;
      if (a2[1] == *a2)
      {
        v113 = 0;
      }
      else
      {
        v116 = 0;
        do
        {
          v117 = *(_DWORD *)(v115 + 4 * v116);
          *(float *)kaldi::MatrixBase<float>::operator()(*v100, (int)v112 + (int)v116++, 0, v113, v114) = (float)v117;
          v115 = *a2;
          v113 = (a2[1] - *a2) >> 2;
        }
        while (v113 > v116);
      }
      kaldi::SubMatrix<float>::SubMatrix(__p, *v100, v112, v113, 0, *(unsigned int *)(*v100 + 8));
      kaldi::CuMatrix<float>::operator=(a1 + 5480, (uint64_t)__p);
      kaldi::CuMatrixBase<float>::~CuMatrixBase(__p);
      kaldi::quasar::TorchEncoderDecoder::EncFeedforward(*(_QWORD *)(a1 + 136), a1 + 5480, 0);
    }
    else
    {
      kaldi::Matrix<float>::Resize(v111, (unint64_t)(a2[1] - *a2) >> 2, 1, 0, 0);
      v120 = *a2;
      if (a2[1] != *a2)
      {
        v121 = 0;
        do
        {
          v122 = *(_DWORD *)(v120 + 4 * v121);
          *(float *)kaldi::MatrixBase<float>::operator()(*v100, v121++, 0, v118, v119) = (float)v122;
          v120 = *a2;
        }
        while (v121 < (a2[1] - *a2) >> 2);
      }
      kaldi::CuMatrix<float>::operator=(a1 + 5480, *(_QWORD *)(a1 + 5456));
      v123 = *(kaldi::nnet1::Nnet **)(a1 + 136);
      v124 = *(_DWORD *)(a3 + 288);
      v125 = *(_DWORD *)(a3 + 292);
      __p[0] = 0;
      __p[1] = 0;
      v160 = 0;
      kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::SuppressedIds((uint64_t *)&v158, a1, a3 + 64, a3 + 88);
      kaldi::quasar::TorchEncoderDecoder::ConstrainSoftmax(v123, (unsigned __int8 *)(a3 + 264), v124, v125, a2, (int **)__p, &v158);
      std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::destroy((uint64_t)&v158, (_QWORD *)v158.__r_.__value_.__l.__size_);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      kaldi::quasar::TorchEncoderDecoder::ResetHistoryState(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136), 1);
      v126 = *(_QWORD *)(a1 + 136);
      if (*(_DWORD *)(a3 + 300))
        kaldi::quasar::TorchEncoderDecoder::EncFeedforward(v126, a1 + 5480, 0);
      else
        kaldi::quasar::TorchEncoderDecoder::StartFeedforward(v126, a1 + 5480, 0);
      v127 = *(uint64_t (****)(_QWORD))(a3 + 200);
      if (v127)
        v128 = (**v127)(v127);
      else
        v128 = 0;
      if (*(_DWORD *)(a3 + 184) == 2)
        v128 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 208) + 24))(*(_QWORD *)(a3 + 208));
      v129 = operator new();
      v130 = *(_DWORD *)(a1 + 5728);
      *(_QWORD *)(v129 + 8) = 0;
      *(_QWORD *)(v129 + 16) = 0;
      *(_QWORD *)(v129 + 24) = 0;
      *(_DWORD *)(v129 + 32) = 0;
      *(_DWORD *)(v129 + 36) = v128;
      *(_DWORD *)(v129 + 44) = 0;
      *(_DWORD *)(v129 + 48) = 0;
      *(_DWORD *)(v129 + 40) = v130;
      *(_OWORD *)(v129 + 56) = 0u;
      *(_OWORD *)(v129 + 72) = 0u;
      *(_OWORD *)(v129 + 88) = 0u;
      *(_QWORD *)(v129 + 104) = 0;
      *(_DWORD *)(v129 + 112) = 1065353216;
      *(_OWORD *)(v129 + 120) = 0u;
      *(_OWORD *)(v129 + 136) = 0u;
      *(_DWORD *)(v129 + 152) = 1065353216;
      *(_OWORD *)(v129 + 160) = 0u;
      *(_OWORD *)(v129 + 176) = 0u;
      *(_DWORD *)(v129 + 192) = 1065353216;
      *(_BYTE *)(v129 + 200) = 0;
      *(_QWORD *)(v129 + 208) = 0;
      *(_QWORD *)(v129 + 216) = 0;
      *(_OWORD *)(v129 + 240) = 0u;
      *(_OWORD *)(v129 + 256) = 0u;
      *(_QWORD *)(v129 + 224) = 0;
      *(_QWORD *)(v129 + 232) = &unk_1EA92DFA8;
      *(_BYTE *)(v129 + 272) = 0;
      *(_DWORD *)v129 = 0;
      v131 = operator new(4uLL);
      *v131 = v130;
      *(_QWORD *)(v129 + 56) = v131;
      *(_QWORD *)(v129 + 64) = v131 + 1;
      *(_QWORD *)(v129 + 72) = v131 + 1;
      kaldi::quasar::TorchEncoderDecoder::GetHistoryState(*(_QWORD *)(a1 + 136), (uint64_t *)(v129 + 8), 0);
      v132 = *(uint64_t **)(a1 + 6344);
      v133 = *(_QWORD *)(a1 + 6352);
      if ((unint64_t)v132 >= v133)
      {
        v135 = *(_QWORD *)(a1 + 6336);
        v136 = ((uint64_t)v132 - v135) >> 3;
        if ((unint64_t)(v136 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v137 = v133 - v135;
        v138 = v137 >> 2;
        if (v137 >> 2 <= (unint64_t)(v136 + 1))
          v138 = v136 + 1;
        if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFF8)
          v139 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v139 = v138;
        if (v139)
          v139 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v139);
        else
          v140 = 0;
        v141 = (uint64_t *)(v139 + 8 * v136);
        v142 = v139 + 8 * v140;
        *v141 = v129;
        v134 = v141 + 1;
        v143 = *(char **)(a1 + 6344);
        v144 = *(char **)(a1 + 6336);
        if (v143 != v144)
        {
          do
          {
            v145 = *((_QWORD *)v143 - 1);
            v143 -= 8;
            *--v141 = v145;
          }
          while (v143 != v144);
          v143 = *(char **)(a1 + 6336);
        }
        *(_QWORD *)(a1 + 6336) = v141;
        *(_QWORD *)(a1 + 6344) = v134;
        *(_QWORD *)(a1 + 6352) = v142;
        if (v143)
          operator delete(v143);
      }
      else
      {
        *v132 = v129;
        v134 = v132 + 1;
      }
      *(_QWORD *)(a1 + 6344) = v134;
    }
    v94 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Write<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a3, v15);
  }
  else
  {
    if (kaldi::g_kaldi_verbose_level >= 5)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, "DecodeCore", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 722, 5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Greedy decoding", 15);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
    }
    kaldi::quasar::TorchEncoderDecoder::Start(*(_QWORD **)(a1 + 136), *(clockid_t *)(a3 + 312), a3 + 112);
    v89 = v15;
    v90 = v14;
    v91 = *(kaldi::nnet1::Nnet **)(a1 + 136);
    v92 = *(_DWORD *)(a3 + 288);
    v93 = *(_DWORD *)(a3 + 292);
    __p[0] = 0;
    __p[1] = 0;
    v160 = 0;
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::SuppressedIds((uint64_t *)&v158, a1, a3 + 64, a3 + 88);
    kaldi::quasar::TorchEncoderDecoder::ConstrainSoftmax(v91, (unsigned __int8 *)(a3 + 264), v92, v93, a2, (int **)__p, &v158);
    std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::destroy((uint64_t)&v158, (_QWORD *)v158.__r_.__value_.__l.__size_);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a4 + 216))(a4);
    __p[0] = 0;
    __p[1] = 0;
    v160 = 0;
    v94 = kaldi::quasar::TMTools::GreedyDecode<kaldi::quasar::TorchEncoderDecoder>(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136), a2, (uint64_t)__p, a3 + 112, a4, v90, v89);
    kaldi::quasar::TorchEncoderDecoder::Finish(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136), v95);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v156, v96);
  return v94;
}

void sub_1DEADDE28()
{
  JUMPOUT(0x1DEADDE90);
}

void sub_1DEADDE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  clockid_t v12;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a11, v12);
  _Unwind_Resume(a1);
}

void sub_1DEADDE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,_QWORD *a21,uint64_t a22,void *__p,uint64_t a24)
{
  clockid_t v25;

  std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::destroy((uint64_t)&a20, a21);
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a11, v25);
  _Unwind_Resume(a1);
}

void sub_1DEADDE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(va1);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)va);
  _Unwind_Resume(a1);
}

void sub_1DEADDE70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  JUMPOUT(0x1DEADDE80);
}

void sub_1DEADDEA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  JUMPOUT(0x1DEADDEB8);
}

void sub_1DEADDEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if ((a25 & 0x80000000) == 0)
  {
    kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a11);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1DEADDEE0);
}

void sub_1DEADDEE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  JUMPOUT(0x1DEADDEF4);
}

void sub_1DEADDF00(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  JUMPOUT(0x1DEADDF40);
}

void sub_1DEADDF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  clockid_t v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va1);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)va, v4);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::LatticeToNbest<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t *a5, uint64_t a6)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  float v18;
  float v19;
  float v20;
  float v21;
  __n128 v22;
  _BOOL4 v23;
  uint64_t *v24;
  int v25;
  _DWORD *v26;
  _DWORD *v27;
  float v28;
  float v29;
  _DWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  int v37;
  _DWORD *v38;
  uint64_t v39;
  _DWORD *v40;
  char *v41;
  char *v42;
  _DWORD *v43;
  _DWORD *v44;
  int v45;
  int v46;
  char *v47;
  _DWORD *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  int v56;
  char *v57;
  _DWORD *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  int v66;
  int v67;
  _BOOL4 v68;
  int v69;
  _QWORD **v70;
  _QWORD *v71;
  _QWORD **v72;
  BOOL v73;
  _QWORD *v74;
  _QWORD *v75;
  std::string *v76;
  std::string::size_type size;
  std::string::size_type v78;
  std::string::size_type v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  std::string::size_type v85;
  float v86;
  float v87;
  _DWORD *v88;
  _DWORD *v89;
  kaldi::quasar::TranslationUtil::NbestElement *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t result;
  int v102;
  unint64_t *v103;
  unint64_t *v104;
  uint64_t v105;
  int v107;
  _BYTE *v108;
  std::string __p;
  unint64_t v111;
  std::string::value_type *v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  _QWORD v116[3];
  char v117[96];
  std::string v118;
  unint64_t v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  _QWORD v126[4];
  __int128 v127;
  _QWORD v128[8];
  uint64_t v129;
  uint64_t v130;
  void *v131;
  _BYTE *v132;
  uint64_t v133;
  unsigned int v134;
  void *__src;
  _DWORD *v136;
  unint64_t v137;
  std::string v138;
  _QWORD **v139;
  _QWORD *v140[2];
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void (**v144)();
  uint64_t v145;
  std::string::size_type v146;
  void *v147[3];
  uint64_t v148[4];
  void (**v149)();
  uint64_t v150;
  float v151;
  int v152;

  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>::VectorFst(&v149);
  v10 = *(_DWORD *)(a2 + 172);
  if (v10 <= 0)
    v10 = *(_DWORD *)(a2 + 160);
  v148[0] = (uint64_t)vdup_n_s32(0x7F800000u);
  memset(&v148[1], 0, 24);
  fst::ShortestPath<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>(a3, (uint64_t)&v149, v10 + 1, v148);
  fst::ShortestDistance<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>((uint64_t)&v146, (uint64_t)&v149);
  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>::VectorFst(&v144);
  v142 = 0;
  v141 = 0;
  v143 = 0;
  fst::ConvertNbestToVector<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>((uint64_t)&v149, &v141);
  v11 = kaldi::quasar::TorchEncoderDecoder::OutputSymbols(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136));
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::SuppressedIds((uint64_t *)&v139, a1, a2 + 64, a2 + 88);
  v12 = v142;
  v13 = v141;
  if (v142 == v141 && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&__p, "LatticeToNbest", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 1526);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Didn't extract any paths from the lattice", 41);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
    v12 = v142;
    v13 = v141;
  }
  if (v12 != v13)
  {
    v14 = 0;
    v108 = (_BYTE *)(a1 + 5788);
    v104 = a4;
    v103 = a4 + 2;
    do
    {
      v15 = (_QWORD *)(v13 + 16 * v14);
      fst::ShortestDistance<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>((uint64_t)&__p, (uint64_t)v15);
      v146 = __p.__r_.__value_.__r.__words[0];
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v147, (char *)__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__r.__words[2], (uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__l.__size_) >> 2);
      if (__p.__r_.__value_.__l.__size_)
      {
        __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
        operator delete((void *)__p.__r_.__value_.__l.__size_);
      }
      v105 = v14;
      memset(&v138, 0, sizeof(v138));
      v16 = (*(uint64_t (**)(_QWORD *))(*v15 + 24))(v15);
      v17 = 0;
      v136 = 0;
      __src = 0;
      v107 = 1;
      v18 = 0.0;
      v19 = 0.0;
      v20 = 0.0;
      v137 = 0;
      v21 = 0.0;
      while (1)
      {
        (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t))(*v15 + 32))(&__p, v15, v16);
        LODWORD(v129) = HIDWORD(__p.__r_.__value_.__r.__words[0]);
        LODWORD(v118.__r_.__value_.__l.__data_) = __p.__r_.__value_.__l.__data_;
        v152 = 2139095040;
        v151 = INFINITY;
        v22.n128_u32[0] = (unsigned __int32)__p.__r_.__value_.__l.__data_;
        if (*(float *)&__p.__r_.__value_.__l.__data_ == INFINITY)
        {
          v22.n128_u32[0] = v129;
          v23 = *(float *)&v129 == v151;
        }
        else
        {
          v23 = 0;
        }
        if (__p.__r_.__value_.__l.__size_)
        {
          __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
          operator delete((void *)__p.__r_.__value_.__l.__size_);
        }
        if (!v23)
          break;
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15[1] + 64) + 8 * (int)v16) + 56) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15[1] + 64) + 8 * (int)v16) + 48))
          v24 = 0;
        else
          v24 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v15[1] + 64) + 8 * (int)v16) + 48);
        v129 = *v24;
        v130 = v24[1];
        v132 = 0;
        v133 = 0;
        v131 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v131, (const void *)v24[2], v24[3], (v24[3] - v24[2]) >> 2);
        v16 = *((unsigned int *)v24 + 10);
        v134 = v16;
        if ((v129 & 0x80000000) != 0)
        {
          v107 = -(int)v129;
          LODWORD(v129) = 0;
        }
        v25 = HIDWORD(v129);
        if (!HIDWORD(v129))
        {
          v29 = *((float *)&v130 + 1);
          v28 = *(float *)&v130;
          v18 = v18 + *(float *)&v130;
          v19 = v19 + *((float *)&v130 + 1);
          goto LABEL_132;
        }
        v26 = v136;
        if ((unint64_t)v136 >= v137)
        {
          v30 = __src;
          v31 = ((char *)v136 - (_BYTE *)__src) >> 2;
          v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v33 = v137 - (_QWORD)__src;
          if ((uint64_t)(v137 - (_QWORD)__src) >> 1 > v32)
            v32 = v33 >> 1;
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
            v34 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v34 = v32;
          if (v34)
          {
            v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v137, v34);
            v26 = v136;
            v30 = __src;
            v25 = HIDWORD(v129);
          }
          else
          {
            v35 = 0;
          }
          v36 = &v35[4 * v31];
          *(_DWORD *)v36 = v25;
          v27 = v36 + 4;
          while (v26 != v30)
          {
            v37 = *--v26;
            *((_DWORD *)v36 - 1) = v37;
            v36 -= 4;
          }
          __src = v36;
          v136 = v27;
          v137 = (unint64_t)&v35[4 * v34];
          if (v30)
            operator delete(v30);
        }
        else
        {
          *v136 = HIDWORD(v129);
          v27 = v26 + 1;
        }
        v136 = v27;
        memset(&v118, 0, sizeof(v118));
        v120 = 0u;
        v121 = 0u;
        v122 = 0u;
        v123 = 0u;
        v124 = 0u;
        v125 = 0u;
        memset(v126, 0, sizeof(v126));
        v127 = 0u;
        memset(v128, 0, 60);
        v38 = operator new(4uLL);
        *v38 = v129;
        *((_QWORD *)&v123 + 1) = v38;
        *(_QWORD *)&v124 = v38 + 1;
        *((_QWORD *)&v124 + 1) = v38 + 1;
        v40 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v128[6], 1uLL);
        v41 = (char *)v128[5];
        v42 = (char *)v128[4];
        *v40 = HIDWORD(v129);
        v43 = v40 + 1;
        v44 = v40;
        while (v41 != v42)
        {
          v45 = *((_DWORD *)v41 - 1);
          v41 -= 4;
          *--v44 = v45;
        }
        v128[4] = v44;
        v128[5] = v40 + 1;
        v128[6] = &v40[v39];
        if (v42)
          operator delete(v42);
        v128[5] = v43;
        v46 = HIDWORD(v130);
        v47 = (char *)v128[2];
        if (v128[2] >= v128[3])
        {
          v49 = (char *)v128[1];
          v50 = (uint64_t)(v128[2] - v128[1]) >> 2;
          v51 = v50 + 1;
          if ((unint64_t)(v50 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v52 = v128[3] - v128[1];
          if ((uint64_t)(v128[3] - v128[1]) >> 1 > v51)
            v51 = v52 >> 1;
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
            v53 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v53 = v51;
          if (v53)
          {
            v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v128[3], v53);
            v47 = (char *)v128[2];
            v49 = (char *)v128[1];
          }
          else
          {
            v54 = 0;
          }
          v55 = &v54[4 * v50];
          *(_DWORD *)v55 = v46;
          v48 = v55 + 4;
          while (v47 != v49)
          {
            v56 = *((_DWORD *)v47 - 1);
            v47 -= 4;
            *((_DWORD *)v55 - 1) = v56;
            v55 -= 4;
          }
          v128[1] = v55;
          v128[2] = v48;
          v128[3] = &v54[4 * v53];
          if (v49)
            operator delete(v49);
        }
        else
        {
          *(_DWORD *)v128[2] = HIDWORD(v130);
          v48 = v47 + 4;
        }
        v128[2] = v48;
        v126[2] = v126[1];
        memset(&__p, 0, sizeof(__p));
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v131, (uint64_t)v132, (v132 - (_BYTE *)v131) >> 2);
        if (v126[1])
        {
          v126[2] = v126[1];
          operator delete((void *)v126[1]);
        }
        *(std::string *)&v126[1] = __p;
        v57 = (char *)*((_QWORD *)&v127 + 1);
        if (*((_QWORD *)&v127 + 1) >= v128[0])
        {
          v59 = (char *)v127;
          v60 = (uint64_t)(*((_QWORD *)&v127 + 1) - v127) >> 2;
          v61 = v60 + 1;
          if ((unint64_t)(v60 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v62 = v128[0] - v127;
          if ((uint64_t)(v128[0] - v127) >> 1 > v61)
            v61 = v62 >> 1;
          if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL)
            v63 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v63 = v61;
          if (v63)
          {
            v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v128, v63);
            v57 = (char *)*((_QWORD *)&v127 + 1);
            v59 = (char *)v127;
          }
          else
          {
            v64 = 0;
          }
          v65 = &v64[4 * v60];
          *(_DWORD *)v65 = v17;
          v58 = v65 + 4;
          while (v57 != v59)
          {
            v66 = *((_DWORD *)v57 - 1);
            v57 -= 4;
            *((_DWORD *)v65 - 1) = v66;
            v65 -= 4;
          }
          *(_QWORD *)&v127 = v65;
          *((_QWORD *)&v127 + 1) = v58;
          v128[0] = &v64[4 * v63];
          if (v59)
            operator delete(v59);
        }
        else
        {
          **((_DWORD **)&v127 + 1) = v17;
          v58 = v57 + 4;
        }
        *((_QWORD *)&v127 + 1) = v58;
        v29 = *((float *)&v130 + 1);
        v28 = *(float *)&v130;
        *(_QWORD *)&v123 = v130;
        LODWORD(v119) = HIDWORD(v129) - 1;
        if (HIDWORD(v129) == *(_DWORD *)(a1 + 5736) + 1)
        {
          v67 = *(unsigned __int8 *)(a2 + 307);
          v68 = *(_BYTE *)(a2 + 307) == 0;
          if (a5 && *v108 && !*(_BYTE *)(a2 + 307))
          {
            if (!*(_BYTE *)(a1 + 5792)
              || !kaldi::quasar::PhraseBook::Find(*(_QWORD *)(a1 + 392), *a5 + 24 * (int)v129, (uint64_t)&v118))
            {
              std::string::operator=(&v118, (const std::string *)(*a5 + 24 * (int)v129));
            }
            if (v11)
            {
              v69 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v11 + 96))(v11, &v118);
              if (v69 != -1)
                LODWORD(v119) = v69 - 1;
            }
            goto LABEL_96;
          }
          if (a6 && *v108)
          {
            v84 = *(char **)a6;
            LODWORD(v119) = *(_DWORD *)(*(_QWORD *)a6 + 4 * (int)v129);
            if (!v67)
            {
              (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v11 + 88))(&__p, v11, *(int *)&v84[4 * (int)v129] + 1);
              goto LABEL_93;
            }
            goto LABEL_96;
          }
        }
        else
        {
          v68 = *(_BYTE *)(a2 + 307) == 0;
        }
        if (v11 && v68)
        {
          (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v11 + 88))(&__p, v11);
LABEL_93:
          if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v118.__r_.__value_.__l.__data_);
          v118 = __p;
        }
LABEL_96:
        v70 = v139;
        if (v139 != v140)
        {
          while (*((_DWORD *)v70 + 7) != (_DWORD)v119)
          {
            v71 = v70[1];
            if (v71)
            {
              do
              {
                v72 = (_QWORD **)v71;
                v71 = (_QWORD *)*v71;
              }
              while (v71);
            }
            else
            {
              do
              {
                v72 = (_QWORD **)v70[2];
                v73 = *v72 == v70;
                v70 = v72;
              }
              while (!v73);
            }
            v70 = v72;
            if (v72 == v140)
              goto LABEL_115;
          }
          if (v70 != v140)
          {
            if (kaldi::g_kaldi_verbose_level >= 5)
            {
              kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "LatticeToNbest", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/translation-beam-decoder.h", 1588, 5);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown replacement disabled for: ", 34);
              v74 = (_QWORD *)std::ostream::operator<<();
              v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)" / ", 3);
              if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v76 = &v118;
              else
                v76 = (std::string *)v118.__r_.__value_.__r.__words[0];
              if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v118.__r_.__value_.__r.__words[2]);
              else
                size = v118.__r_.__value_.__l.__size_;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)v76, size);
              kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
            }
            MEMORY[0x1DF0ECA80](&v118, &byte_1DEBD87CE);
            LODWORD(v119) = *(_DWORD *)(a1 + 5736);
          }
        }
LABEL_115:
        v78 = v138.__r_.__value_.__l.__size_;
        if (v138.__r_.__value_.__l.__size_ >= v138.__r_.__value_.__r.__words[2])
        {
          v80 = 0xEEEEEEEEEEEEEEEFLL
              * ((uint64_t)(v138.__r_.__value_.__l.__size_ - v138.__r_.__value_.__r.__words[0]) >> 4);
          v81 = v80 + 1;
          if (v80 + 1 > 0x111111111111111)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          if (0xDDDDDDDDDDDDDDDELL
             * ((uint64_t)(v138.__r_.__value_.__r.__words[2] - v138.__r_.__value_.__r.__words[0]) >> 4) > v81)
            v81 = 0xDDDDDDDDDDDDDDDELL
                * ((uint64_t)(v138.__r_.__value_.__r.__words[2] - v138.__r_.__value_.__r.__words[0]) >> 4);
          if (0xEEEEEEEEEEEEEEEFLL
             * ((uint64_t)(v138.__r_.__value_.__r.__words[2] - v138.__r_.__value_.__r.__words[0]) >> 4) >= 0x88888888888888)
            v82 = 0x111111111111111;
          else
            v82 = v81;
          v112 = &v138.__r_.__value_.__s.__data_[16];
          if (v82)
            v82 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::PathElement>>(v82);
          else
            v83 = 0;
          __p.__r_.__value_.__r.__words[0] = v82;
          __p.__r_.__value_.__l.__size_ = v82 + 240 * v80;
          __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
          v111 = v82 + 240 * v83;
          kaldi::quasar::TranslationUtil::PathElement::PathElement((std::string *)__p.__r_.__value_.__l.__size_, (const kaldi::quasar::TranslationUtil::PathElement *)&v118);
          __p.__r_.__value_.__r.__words[2] += 240;
          std::vector<kaldi::quasar::TranslationUtil::PathElement>::__swap_out_circular_buffer(&v138, &__p);
          v79 = v138.__r_.__value_.__l.__size_;
          std::__split_buffer<kaldi::quasar::TranslationUtil::PathElement>::~__split_buffer((uint64_t)&__p);
        }
        else
        {
          kaldi::quasar::TranslationUtil::PathElement::PathElement((std::string *)v138.__r_.__value_.__l.__size_, (const kaldi::quasar::TranslationUtil::PathElement *)&v118);
          v79 = v78 + 240;
        }
        ++v17;
        v138.__r_.__value_.__l.__size_ = v79;
        v16 = v134;
        kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)&v118);
LABEL_132:
        if (v131)
        {
          v132 = v131;
          operator delete(v131);
        }
        v21 = v21 + v29;
        v20 = v20 + v28;
      }
      (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t, __n128))(*v15 + 32))(&__p, v15, v16, v22);
      v85 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_)
      {
        __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
        operator delete((void *)__p.__r_.__value_.__l.__size_);
      }
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&__p);
      std::vector<kaldi::quasar::TranslationUtil::PathElement>::__assign_with_size[abi:ne180100]<kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*>((uint64_t *)&__p, (uint64_t)v138.__r_.__value_.__l.__data_, v138.__r_.__value_.__l.__size_, 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v138.__r_.__value_.__l.__size_ - v138.__r_.__value_.__r.__words[0]) >> 4));
      *(float *)&v111 = v20 + *(float *)&v85;
      *((float *)&v111 + 1) = v21 + *((float *)&v85 + 1);
      (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t))(*v15 + 32))(&v118, v15, v16);
      v87 = *((float *)v118.__r_.__value_.__r.__words + 1);
      v86 = *(float *)&v118.__r_.__value_.__l.__data_;
      v112 = (std::string::value_type *)v118.__r_.__value_.__r.__words[0];
      if (v118.__r_.__value_.__l.__size_)
      {
        v118.__r_.__value_.__r.__words[2] = v118.__r_.__value_.__l.__size_;
        operator delete((void *)v118.__r_.__value_.__l.__size_);
        v87 = *((float *)&v112 + 1);
        v86 = *(float *)&v112;
      }
      *(float *)&v112 = v18 + v86;
      *((float *)&v112 + 1) = v19 + v87;
      v114 = v107;
      if (a5)
        kaldi::JoinVectorToString<std::string>(a5, (uint64_t)&v115);
      if (a6)
      {
        if (v116 != (_QWORD *)a6)
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v116, *(char **)a6, *(_QWORD *)(a6 + 8), (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2);
        v113 = (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2;
        v88 = (_DWORD *)v116[0];
        v89 = (_DWORD *)v116[1];
        while (v88 != v89)
          ++*v88++;
      }
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v117, (char *)__src, (uint64_t)v136, ((char *)v136 - (_BYTE *)__src) >> 2);
      v90 = (kaldi::quasar::TranslationUtil::NbestElement *)v104;
      v92 = v104[1];
      v91 = v104[2];
      if (v92 >= v91)
      {
        v94 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v92 - *v104) >> 4);
        v95 = v94 + 1;
        if (v94 + 1 > 0xF0F0F0F0F0F0F0)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v96 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v91 - *v104) >> 4);
        if (2 * v96 > v95)
          v95 = 2 * v96;
        if (v96 >= 0x78787878787878)
          v97 = 0xF0F0F0F0F0F0F0;
        else
          v97 = v95;
        *(_QWORD *)&v120 = v103;
        if (v97)
        {
          v97 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::NbestElement>>(v97);
          v90 = (kaldi::quasar::TranslationUtil::NbestElement *)v104;
        }
        else
        {
          v98 = 0;
        }
        v118.__r_.__value_.__r.__words[0] = v97;
        v118.__r_.__value_.__l.__size_ = v97 + 272 * v94;
        v118.__r_.__value_.__r.__words[2] = v118.__r_.__value_.__l.__size_;
        v119 = v97 + 272 * v98;
        kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v118.__r_.__value_.__l.__size_, (const kaldi::quasar::TranslationUtil::NbestElement *)&__p);
        v118.__r_.__value_.__r.__words[2] += 272;
        std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__swap_out_circular_buffer(v90, &v118);
        v93 = *((_QWORD *)v90 + 1);
        std::__split_buffer<kaldi::quasar::TranslationUtil::NbestElement>::~__split_buffer((uint64_t)&v118);
      }
      else
      {
        kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v104[1], (const kaldi::quasar::TranslationUtil::NbestElement *)&__p);
        v93 = v92 + 272;
        v104[1] = v92 + 272;
      }
      *((_QWORD *)v90 + 1) = v93;
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&__p);
      if (__src)
      {
        v136 = __src;
        operator delete(__src);
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
      std::vector<kaldi::quasar::TranslationUtil::PathElement>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      v14 = v105 + 1;
      v13 = v141;
    }
    while (v105 + 1 != (v142 - v141) >> 4);
  }
  std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::destroy((uint64_t)&v139, v140[0]);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v141;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v144 = off_1EA925BE0;
  v99 = v145;
  if (v145)
  {
    v100 = *(_DWORD *)(v145 + 56) - 1;
    *(_DWORD *)(v145 + 56) = v100;
    if (!v100)
      (*(void (**)(uint64_t))(*(_QWORD *)v99 + 8))(v99);
  }
  if (v147[0])
  {
    v147[1] = v147[0];
    operator delete(v147[0]);
  }
  v149 = off_1EA925BE0;
  result = v150;
  if (v150)
  {
    v102 = *(_DWORD *)(v150 + 56) - 1;
    *(_DWORD *)(v150 + 56) = v102;
    if (!v102)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_1DEADEC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  _DWORD *v31;
  int v32;
  void *v33;
  _DWORD *v34;
  int v35;

  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a29);
  std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::destroy((uint64_t)&STACK[0x310], (_QWORD *)STACK[0x318]);
  STACK[0x2B0] = (unint64_t)&STACK[0x328];
  std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2B0]);
  *(_QWORD *)(v29 - 240) = off_1EA925BE0;
  v31 = *(_DWORD **)(v29 - 232);
  if (v31)
  {
    v32 = v31[14] - 1;
    v31[14] = v32;
    if (!v32)
      (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 8))(v31);
  }
  v33 = *(void **)(v29 - 216);
  if (v33)
  {
    *(_QWORD *)(v29 - 208) = v33;
    operator delete(v33);
  }
  *(_QWORD *)(v29 - 160) = off_1EA925BE0;
  v34 = *(_DWORD **)(v29 - 152);
  if (v34)
  {
    v35 = v34[14] - 1;
    v34[14] = v35;
    if (!v35)
      (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 8))(v34);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, __int128 **a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v12;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (uint64_t *)operator new(0x40uLL);
    v8 = (std::string *)(v6 + 4);
    v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      v6[6] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[7] = 0;
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, v12, v7, v6);
  }
  return v6;
}

void sub_1DEADEED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  void **v9;
  uint64_t v10;

  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,int>,void *>>>::operator()[abi:ne180100](v10, v9);
  _Unwind_Resume(a1);
}

void fst::ShortestPath<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  void *__p;
  _BYTE *v10;
  uint64_t v11;
  _DWORD v12[5];
  char v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  int v20;
  _QWORD v21[9];
  uint64_t v22[3];

  memset(v22, 0, sizeof(v22));
  fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>((uint64_t)v21, a1, (uint64_t)v22);
  v8 = *a4;
  v10 = 0;
  v11 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)a4[1], a4[2], (a4[2] - a4[1]) >> 2);
  *(_QWORD *)v12 = v21;
  *(_QWORD *)&v12[3] = 0x3A800000FFFFFFFFLL;
  v13 = 0;
  v14 = a3;
  v15 = 0;
  v16 = v8;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v17, __p, (uint64_t)v10, (v10 - (_BYTE *)__p) >> 2);
  v20 = -1;
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  fst::ShortestPath<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>(a1, a2, v22, (uint64_t *)v12);
  if (v17)
  {
    v18 = v17;
    operator delete(v17);
  }
  fst::AutoQueue<int>::~AutoQueue(v21);
  *(_QWORD *)v12 = v22;
  std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v12);
}

void sub_1DEADF010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  fst::AutoQueue<int>::~AutoQueue(&a23);
  a13 = v23 - 72;
  std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void fst::ShortestDistance<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>(uint64_t a1, uint64_t a2)
{
  float *v4;
  float *v5;
  uint64_t v6;
  unint64_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  void ****v13;
  BOOL v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void ***v18;
  __int128 v19;
  uint64_t v20;
  float *v21;
  float *v22;
  uint64_t v23;
  float **v24;
  void *__p;
  _BYTE *v26;
  uint64_t v27;

  v21 = 0;
  v22 = 0;
  v23 = 0;
  fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>((uint64_t)&v24, a2, (uint64_t)&v21);
  v18 = (void ***)&v24;
  *(_QWORD *)((char *)&v19 + 4) = 0x3A800000FFFFFFFFLL;
  BYTE12(v19) = 0;
  fst::ShortestDistance<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>(a2, (uint64_t *)&v21, (float *)&v18);
  fst::AutoQueue<int>::~AutoQueue(&v24);
  v5 = v21;
  v4 = v22;
  if ((char *)v22 - (char *)v21 == 32 && !fst::LatticeWeightTpl<float>::Member(v21))
  {
    *(int32x2_t *)a1 = vdup_n_s32(0x7FC00000u);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  else
  {
    *(int32x2_t *)a1 = vdup_n_s32(0x7F800000u);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    if (v4 != v5)
    {
      v6 = 0;
      v7 = 0;
      do
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)a2 + 32))(&v15, a2, v7);
        v8 = v5[v6] + *(float *)&v15;
        v9 = v5[v6 + 1] + *((float *)&v15 + 1);
        v20 = 0;
        v19 = 0uLL;
        v11 = *(float *)a1;
        v10 = *(float *)(a1 + 4);
        v12 = *(float *)a1 + v10;
        if (v12 >= (float)(v8 + v9))
        {
          if (v12 > (float)(v8 + v9) || (v11 >= v8 ? (v14 = v11 <= v8) : (v14 = 1), v13 = (void ****)a1, !v14))
          {
            v13 = &v18;
            v10 = v9;
            v11 = v8;
          }
        }
        else
        {
          v13 = (void ****)a1;
        }
        v24 = (float **)__PAIR64__(LODWORD(v10), LODWORD(v11));
        v26 = 0;
        v27 = 0;
        __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v13[1], (uint64_t)v13[2], ((char *)v13[2] - (char *)v13[1]) >> 2);
        *(_QWORD *)a1 = v24;
        if (&v24 != (float ***)a1)
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 8), (char *)__p, (uint64_t)v26, (v26 - (_BYTE *)__p) >> 2);
        if (__p)
        {
          v26 = __p;
          operator delete(__p);
        }
        if (v16)
        {
          v17 = v16;
          operator delete(v16);
        }
        ++v7;
        v5 = v21;
        v6 += 8;
      }
      while (v7 < ((char *)v22 - (char *)v21) >> 5);
    }
  }
  v24 = &v21;
  std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
}

void sub_1DEADF25C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  fst::AutoQueue<int>::~AutoQueue(&a20);
  a13 = &a17;
  std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

uint64_t fst::ConvertNbestToVector<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (***v6)(_QWORD);
  void (***v7)(_QWORD);
  void (**v8)(_QWORD);
  BOOL v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  __n128 v31;
  uint64_t v32;
  void *v33;
  void *v34;
  _QWORD v35[3];
  _DWORD *v36;
  uint64_t v37;
  char *v38;
  void *__p;
  void *v40;
  char *v41;
  uint64_t *v42;
  int v43;
  _QWORD v44[3];
  _DWORD *v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  int v50;
  float v51;
  int v52;

  v5 = *a2;
  v4 = a2[1];
  if (v4 != *a2)
  {
    v6 = (void (***)(_QWORD))(v4 - 16);
    v7 = (void (***)(_QWORD))(v4 - 16);
    do
    {
      v8 = *v7;
      v7 -= 2;
      (*v8)(v6);
      v9 = v6 == (void (***)(_QWORD))v5;
      v6 = v7;
    }
    while (!v9);
  }
  a2[1] = v5;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result == -1)
    return result;
  v11 = result;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, result);
  (*(void (**)(char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v38, a1, v11);
  LODWORD(v35[0]) = HIDWORD(v38);
  LODWORD(v44[0]) = (_DWORD)v38;
  v52 = 2139095040;
  v51 = INFINITY;
  v13 = *(float *)&v38 != INFINITY || *(float *)v35 != v51;
  if (__p)
  {
    v40 = __p;
    operator delete(__p);
  }
  v14 = v12 + v13;
  if (v14 > (a2[2] - *a2) >> 4)
  {
    if (v14 >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v15 = a2[1] - *a2;
    v42 = a2 + 2;
    v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v14);
    __p = &v38[v15];
    v40 = &v38[v15];
    v41 = &v38[16 * v16];
    std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>>::__swap_out_circular_buffer(a2, &v38);
    std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>>::~__split_buffer((uint64_t)&v38);
  }
  if (v13)
  {
    std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>>::resize(a2, ((a2[1] - *a2) >> 4) + 1);
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a2[1] - 16) + 192))(a2[1] - 16);
    v18 = a2[1];
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v47, a1, v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(v18 - 16) + 176))(v18 - 16, v17, &v47);
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
  }
  v46 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 136))(a1, v11, v44);
  while (1)
  {
    result = v44[0];
    if (v44[0])
      break;
    if (v46 >= v44[2])
      goto LABEL_54;
LABEL_22:
    std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>>::resize(a2, ((a2[1] - *a2) >> 4) + 1);
    v19 = a2[1];
    if (v44[0])
      v20 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v44[0] + 32))(v44[0]);
    else
      v20 = v44[1] + 48 * v46;
    v22 = *(_QWORD *)(v19 - 16);
    v21 = v19 - 16;
    v23 = (*(uint64_t (**)(uint64_t))(v22 + 192))(v21);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 168))(v21, v23);
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 192))(v21);
    v25 = *(void **)(v20 + 8);
    v38 = *(char **)v20;
    __p = v25;
    v41 = 0;
    v42 = 0;
    v40 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v40, *(const void **)(v20 + 16), *(_QWORD *)(v20 + 24), (uint64_t)(*(_QWORD *)(v20 + 24) - *(_QWORD *)(v20 + 16)) >> 2);
    v43 = v24;
    (*(void (**)(uint64_t, uint64_t, char **))(*(_QWORD *)v21 + 200))(v21, v23, &v38);
    if (v40)
    {
      v41 = (char *)v40;
      operator delete(v40);
    }
    v26 = *(unsigned int *)(v20 + 40);
    while ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v26))
    {
      (*(void (**)(char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v38, a1, v26);
      v52 = HIDWORD(v38);
      LODWORD(v35[0]) = (_DWORD)v38;
      v51 = INFINITY;
      v50 = 2139095040;
      v27.n128_u32[0] = v38;
      if (*(float *)&v38 == INFINITY)
        v27.n128_u32[0] = v50;
      if (__p)
      {
        v40 = __p;
        operator delete(__p);
      }
      v37 = 0;
      (*(void (**)(uint64_t, uint64_t, _QWORD *, __n128))(*(_QWORD *)a1 + 136))(a1, v26, v35, v27);
      if (v35[0])
        v28 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v35[0] + 32))(v35[0]);
      else
        v28 = v35[1] + 48 * v37;
      v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 192))(v21);
      v30 = *(void **)(v28 + 8);
      v38 = *(char **)v28;
      __p = v30;
      v41 = 0;
      v42 = 0;
      v40 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v40, *(const void **)(v28 + 16), *(_QWORD *)(v28 + 24), (uint64_t)(*(_QWORD *)(v28 + 24) - *(_QWORD *)(v28 + 16)) >> 2);
      v43 = v29;
      (*(void (**)(uint64_t, uint64_t, char **))(*(_QWORD *)v21 + 200))(v21, v24, &v38);
      if (v40)
      {
        v41 = (char *)v40;
        operator delete(v40);
      }
      v26 = *(unsigned int *)(v28 + 40);
      if (v35[0])
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v35[0] + 8))(v35[0]);
      }
      else if (v36)
      {
        --*v36;
      }
      v24 = v29;
    }
    (*(void (**)(char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v38, a1, v26);
    v52 = HIDWORD(v38);
    LODWORD(v35[0]) = (_DWORD)v38;
    v51 = INFINITY;
    v50 = 2139095040;
    v31.n128_u32[0] = v38;
    if (*(float *)&v38 == INFINITY)
      v31.n128_u32[0] = v50;
    if (__p)
    {
      v40 = __p;
      operator delete(__p);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, __n128))(*(_QWORD *)a1 + 32))(&v32, a1, v26, v31);
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v21 + 176))(v21, v24, &v32);
    if (v33)
    {
      v34 = v33;
      operator delete(v33);
    }
    if (v44[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v44[0] + 40))(v44[0]);
    else
      ++v46;
  }
  if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)v44[0] + 24))(v44[0]))
    goto LABEL_22;
  result = v44[0];
  if (v44[0])
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v44[0] + 8))(v44[0]);
LABEL_54:
  if (v45)
    --*v45;
  return result;
}

void sub_1DEADF848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  void *v29;

  v29 = *(void **)(v27 - 120);
  if (v29)
  {
    *(_QWORD *)(v27 - 112) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::SuppressedIds(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string __p;
  void **v14;

  kaldi::quasar::MultiLangDecorator::GetTags((uint64_t)&__p, a2 + 120, a3, a4);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  kaldi::SplitStringToVector(&__p, " ", 1, (uint64_t)&v10);
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  v6 = v10;
  v7 = v11;
  while (v6 != v7)
  {
    v8 = kaldi::quasar::TorchEncoderDecoder::OutputSymbols(*(kaldi::quasar::TorchEncoderDecoder **)(a2 + 136));
    v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 96))(v8, v6);
    std::__tree<int>::__emplace_unique_key_args<int,int>(a1, v9 - 1, v9 - 1);
    v6 += 24;
  }
  v14 = (void **)&v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1DEADFA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  *(_QWORD *)(v18 - 40) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 40));
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 16;
      v7 = v4 - 16;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 16;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL kaldi::quasar::PhraseBook::Find(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v5;
  std::string __p;

  kaldi::quasar::PhraseBook::PreProcess(&__p, *(_BYTE *)(a1 + 68), a2);
  v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)a1, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*(char *)(a3 + 23) < 0)
  {
    **(_BYTE **)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    if (!v5)
      return v5 != 0;
    goto LABEL_5;
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 23) = 0;
  if (v5)
LABEL_5:
    std::string::operator=((std::string *)a3, (const std::string *)(*((_QWORD *)v5 + 5) + 48));
  return v5 != 0;
}

void kaldi::quasar::MultiLangDecorator::GetTags(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  std::string *v16;
  std::string::size_type v17;
  char v18;
  int v19;
  std::string::size_type v20;
  void *v21;
  std::string *v22;
  __int128 v23;
  int v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  int v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  std::string::size_type v33;
  char v34;
  int v35;
  uint64_t v36;
  std::string v37;
  std::string v38;
  std::string v39;
  _QWORD v40[3];

  v40[2] = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(a2 + 8);
  if ((v8 & 0xFFFFFFFE) == 2)
  {
    v9 = *(unsigned __int8 *)(a3 + 23);
    if ((v9 & 0x80u) != 0)
      v9 = *(_QWORD *)(a3 + 8);
    if (v9)
    {
      v10 = *(unsigned __int8 *)(a4 + 23);
      if ((v10 & 0x80u) != 0)
        v10 = *(_QWORD *)(a4 + 8);
      if (v10)
        v11 = 1;
      else
        v11 = kaldi::g_kaldi_verbose_level <= -2;
      if (v11)
        goto LABEL_33;
    }
    else if (kaldi::g_kaldi_verbose_level < -1)
    {
      goto LABEL_33;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38, "GetTags", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/input-hammer.h", 89);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"A Both type TagFormat requires non-empty source and target tags", 63);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
    v8 = *(_DWORD *)(a2 + 8);
  }
  if (!v8)
  {
    v12 = *(unsigned __int8 *)(a3 + 23);
    if ((v12 & 0x80u) != 0)
      v12 = *(_QWORD *)(a3 + 8);
    if (v12)
      v13 = 1;
    else
      v13 = kaldi::g_kaldi_verbose_level <= -2;
    if (v13)
    {
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      goto LABEL_34;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38, "GetTags", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/input-hammer.h", 93);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"SrcTag cannot be empty for TagFormat::Src", 41);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
    v8 = *(_DWORD *)(a2 + 8);
  }
  if (v8 != 1)
    goto LABEL_33;
  v14 = *(unsigned __int8 *)(a4 + 23);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a4 + 8);
  if (v14)
    v15 = 1;
  else
    v15 = kaldi::g_kaldi_verbose_level <= -2;
  if (!v15)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38, "GetTags", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/input-hammer.h", 97);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"TarTag cannot be empty for TagFormat::Tar", 41);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
    v8 = *(_DWORD *)(a2 + 8);
LABEL_33:
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    switch(v8)
    {
      case 0:
      case 1:
        goto LABEL_34;
      case 2:
        std::operator+<char>();
        v22 = std::string::append(&v37, "-");
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v39.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        v24 = *(char *)(a4 + 23);
        if (v24 >= 0)
          v25 = (const std::string::value_type *)a4;
        else
          v25 = *(const std::string::value_type **)a4;
        if (v24 >= 0)
          v26 = *(unsigned __int8 *)(a4 + 23);
        else
          v26 = *(_QWORD *)(a4 + 8);
        goto LABEL_48;
      case 3:
        std::operator+<char>();
        v27 = std::string::append(&v37, "> <tar-");
        v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v39.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        v29 = *(char *)(a4 + 23);
        if (v29 >= 0)
          v25 = (const std::string::value_type *)a4;
        else
          v25 = *(const std::string::value_type **)a4;
        if (v29 >= 0)
          v26 = *(unsigned __int8 *)(a4 + 23);
        else
          v26 = *(_QWORD *)(a4 + 8);
LABEL_48:
        v30 = std::string::append(&v39, v25, v26);
        v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v38.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        v32 = std::string::append(&v38, ">");
        v33 = v32->__r_.__value_.__r.__words[0];
        v40[0] = v32->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v40 + 7) = *(std::string::size_type *)((char *)&v32->__r_.__value_.__r.__words[1] + 7);
        v34 = HIBYTE(v32->__r_.__value_.__r.__words[2]);
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        v35 = SHIBYTE(v38.__r_.__value_.__r.__words[2]);
        *(_QWORD *)(a1 + 15) = *(_QWORD *)((char *)v40 + 7);
        v36 = v40[0];
        *(_QWORD *)a1 = v33;
        *(_QWORD *)(a1 + 8) = v36;
        *(_BYTE *)(a1 + 23) = v34;
        if (v35 < 0)
          operator delete(v38.__r_.__value_.__l.__data_);
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v39.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        v21 = (void *)v37.__r_.__value_.__r.__words[0];
        break;
      default:
        MEMORY[0x1DF0ECA80](a1, &byte_1DEBD87CE);
        return;
    }
    goto LABEL_54;
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
LABEL_34:
  std::operator+<char>();
  v16 = std::string::append(&v38, ">");
  v17 = v16->__r_.__value_.__r.__words[0];
  v39.__r_.__value_.__r.__words[0] = v16->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
  v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v19 = SHIBYTE(v38.__r_.__value_.__r.__words[2]);
  *(_QWORD *)(a1 + 15) = *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words + 7);
  v20 = v39.__r_.__value_.__r.__words[0];
  *(_QWORD *)a1 = v17;
  *(_QWORD *)(a1 + 8) = v20;
  *(_BYTE *)(a1 + 23) = v18;
  if ((v19 & 0x80000000) == 0)
    return;
  v21 = (void *)v38.__r_.__value_.__r.__words[0];
LABEL_54:
  operator delete(v21);
}

