uint64_t little2_cdataSectionTok(uint64_t a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 **a4)
{
  unint64_t v4;
  BOOL v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;

  if ((unint64_t)a2 >= a3)
    return 4294967292;
  v4 = (a3 - (_QWORD)a2) & 0xFFFFFFFFFFFFFFFELL;
  if (v4)
    v5 = ((a3 - (_QWORD)a2) & 1) == 0;
  else
    v5 = 1;
  v6 = &a2[v4];
  if (v5)
    v6 = (unsigned __int8 *)a3;
  if ((((_BYTE)a3 - (_BYTE)a2) & 1) == 0 || v4)
  {
    v8 = a2[1];
    if (v8 > 0xDB)
    {
      if (v8 - 220 < 4 || v8 == 255 && *a2 > 0xFDu)
      {
        v7 = 0;
        goto LABEL_51;
      }
    }
    else
    {
      if (v8 - 216 < 4)
      {
LABEL_13:
        if (v6 - a2 < 4)
          return 4294967294;
        v9 = a2 + 4;
        goto LABEL_30;
      }
      if (!a2[1])
      {
        v7 = 0;
        switch(*(_BYTE *)(a1 + *a2 + 136))
        {
          case 0:
          case 1:
          case 8:
            goto LABEL_51;
          case 4:
            v9 = a2 + 2;
            if (v6 - (a2 + 2) < 2)
              return 0xFFFFFFFFLL;
            if (a2[3] || *v9 != 93)
              goto LABEL_30;
            if (v6 - (a2 + 4) < 2)
              return 0xFFFFFFFFLL;
            if (a2[5] || a2[4] != 62)
              goto LABEL_30;
            a2 += 6;
            v7 = 40;
            goto LABEL_51;
          case 5:
            if (v6 - a2 >= 2)
              goto LABEL_29;
            return 4294967294;
          case 6:
            if (v6 - a2 < 3)
              return 4294967294;
            v9 = a2 + 3;
            goto LABEL_30;
          case 7:
            goto LABEL_13;
          case 9:
            v9 = a2 + 2;
            if (v6 - (a2 + 2) < 2)
              return 0xFFFFFFFFLL;
            if (a2[3])
            {
              v7 = 7;
              goto LABEL_50;
            }
            if (*(_BYTE *)(a1 + a2[2] + 136) == 10)
              a2 += 4;
            else
              a2 += 2;
LABEL_61:
            v7 = 7;
            break;
          case 0xA:
            a2 += 2;
            goto LABEL_61;
          default:
            goto LABEL_29;
        }
        goto LABEL_51;
      }
    }
LABEL_29:
    v9 = a2 + 2;
LABEL_30:
    v10 = v6 - v9;
    if (v6 - v9 >= 2)
    {
      while (1)
      {
        v11 = v9[1];
        if (v11 > 0xDB)
          break;
        if (v11 - 216 < 4)
          goto LABEL_33;
        v12 = 2;
        if (!v9[1])
        {
          v13 = *(unsigned __int8 *)(a1 + *v9 + 136);
          if (v13 <= 0xA)
          {
            if (v13 == 6)
            {
              if (v10 < 3)
                goto LABEL_49;
              v12 = 3;
              goto LABEL_48;
            }
            if (v13 != 7)
            {
              v12 = 2;
              if (((1 << v13) & 0x713) != 0)
                goto LABEL_49;
              goto LABEL_48;
            }
LABEL_33:
            if (v10 < 4)
              goto LABEL_49;
            v12 = 4;
            goto LABEL_48;
          }
          goto LABEL_37;
        }
LABEL_48:
        v9 += v12;
        v10 = v6 - v9;
        if (v6 - v9 <= 1)
          goto LABEL_49;
      }
      if (v11 != 255)
      {
        v12 = 2;
        if (v11 - 220 < 4)
          goto LABEL_49;
        goto LABEL_48;
      }
      if (*v9 > 0xFDu)
        goto LABEL_49;
LABEL_37:
      v12 = 2;
      goto LABEL_48;
    }
LABEL_49:
    v7 = 6;
LABEL_50:
    a2 = v9;
LABEL_51:
    *a4 = a2;
    return v7;
  }
  return 0xFFFFFFFFLL;
}

uint64_t little2_ignoreSectionTok(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 **a4)
{
  unsigned __int8 *v4;
  unint64_t v5;
  int v6;
  unsigned int v7;
  unsigned __int8 *v8;
  uint64_t v9;

  v4 = &a2[(a3 - a2) & 0xFFFFFFFFFFFFFFFELL];
  if (((a3 - a2) & 1) == 0)
    v4 = a3;
  v5 = v4 - a2;
  if (v4 - a2 < 2)
    return 0xFFFFFFFFLL;
  v6 = 0;
  while (1)
  {
    v7 = a2[1];
    if (v7 > 0xDB)
    {
      if (v7 == 255)
      {
        if (*a2 > 0xFDu)
          goto LABEL_37;
      }
      else if (v7 - 220 < 4)
      {
LABEL_37:
        v9 = 0;
        goto LABEL_38;
      }
      goto LABEL_22;
    }
    if (v7 - 216 >= 4)
      break;
LABEL_7:
    if (v5 < 4)
      return 4294967294;
    v8 = a2 + 4;
LABEL_23:
    v5 = v4 - v8;
    a2 = v8;
    if (v4 - v8 <= 1)
      return 0xFFFFFFFFLL;
  }
  if (a2[1])
  {
LABEL_22:
    v8 = a2 + 2;
    goto LABEL_23;
  }
  v9 = 0;
  switch(*(_BYTE *)(a1 + *a2 + 136))
  {
    case 0:
    case 1:
    case 8:
      goto LABEL_38;
    case 2:
      v8 = a2 + 2;
      if (v4 - (a2 + 2) < 2)
        return 0xFFFFFFFFLL;
      if (a2[3] || *v8 != 33)
        goto LABEL_23;
      v8 = a2 + 4;
      if (v4 - (a2 + 4) < 2)
        return 0xFFFFFFFFLL;
      if (!a2[5] && *v8 == 91)
      {
        ++v6;
        v8 = a2 + 6;
      }
      goto LABEL_23;
    case 4:
      v8 = a2 + 2;
      if (v4 - (a2 + 2) < 2)
        return 0xFFFFFFFFLL;
      if (a2[3] || *v8 != 93)
        goto LABEL_23;
      v8 = a2 + 4;
      if (v4 - (a2 + 4) < 2)
        return 0xFFFFFFFFLL;
      if (a2[5] || *v8 != 62)
        goto LABEL_23;
      v8 = a2 + 6;
      if (v6)
      {
        --v6;
        goto LABEL_23;
      }
      v9 = 42;
      a2 += 6;
LABEL_38:
      *a4 = a2;
      return v9;
    case 6:
      if (v5 < 3)
        return 4294967294;
      v8 = a2 + 3;
      goto LABEL_23;
    case 7:
      goto LABEL_7;
    default:
      goto LABEL_22;
  }
}

uint64_t little2_attributeValueTok(uint64_t a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 **a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t result;
  unsigned __int8 *v7;

  if ((unint64_t)a2 >= a3)
    return 4294967292;
  if ((uint64_t)(a3 - (_QWORD)a2) < 2)
    return 0xFFFFFFFFLL;
  v4 = a2;
  while (v4[1] - 216 < 4)
  {
LABEL_5:
    v5 = 4;
LABEL_6:
    v4 += v5;
    if ((uint64_t)(a3 - (_QWORD)v4) <= 1)
    {
LABEL_27:
      *a4 = v4;
      return 6;
    }
  }
  if (v4[1])
  {
    v5 = 2;
    goto LABEL_6;
  }
  v5 = 2;
  switch(*(_BYTE *)(a1 + *v4 + 136))
  {
    case 2:
      result = 0;
      *a4 = v4;
      return result;
    case 3:
      if (v4 != a2)
        goto LABEL_27;
      return little2_scanRef(a1, a2 + 2, a3, a4);
    case 4:
    case 5:
    case 8:
      goto LABEL_6;
    case 6:
      v5 = 3;
      goto LABEL_6;
    case 7:
      goto LABEL_5;
    case 9:
      if (v4 != a2)
        goto LABEL_27;
      v7 = a2 + 2;
      if ((uint64_t)(a3 - (_QWORD)(a2 + 2)) < 2)
      {
        result = 4294967293;
      }
      else
      {
        if (!a2[3] && *(_BYTE *)(a1 + a2[2] + 136) == 10)
          v7 = a2 + 4;
LABEL_29:
        *a4 = v7;
        result = 7;
      }
      break;
    case 0xA:
      if (v4 != a2)
        goto LABEL_27;
      v7 = a2 + 2;
      goto LABEL_29;
    default:
      if (*(_BYTE *)(a1 + *v4 + 136) != 21)
        goto LABEL_6;
      if (v4 != a2)
        goto LABEL_27;
      *a4 = a2 + 2;
      result = 39;
      break;
  }
  return result;
}

uint64_t little2_entityValueTok(uint64_t a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 **a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t result;
  unsigned __int8 *v7;

  if ((unint64_t)a2 >= a3)
    return 4294967292;
  if ((uint64_t)(a3 - (_QWORD)a2) < 2)
    return 0xFFFFFFFFLL;
  v4 = a2;
  while (v4[1] - 216 < 4)
  {
LABEL_5:
    v5 = 4;
LABEL_6:
    v4 += v5;
    if ((uint64_t)(a3 - (_QWORD)v4) <= 1)
    {
LABEL_28:
      *a4 = v4;
      return 6;
    }
  }
  if (v4[1])
  {
    v5 = 2;
    goto LABEL_6;
  }
  v5 = 2;
  switch(*(_BYTE *)(a1 + *v4 + 136))
  {
    case 3:
      if (v4 != a2)
        goto LABEL_28;
      return little2_scanRef(a1, a2 + 2, a3, a4);
    case 4:
    case 5:
    case 8:
      goto LABEL_6;
    case 6:
      v5 = 3;
      goto LABEL_6;
    case 7:
      goto LABEL_5;
    case 9:
      if (v4 != a2)
        goto LABEL_28;
      v7 = a2 + 2;
      if ((uint64_t)(a3 - (_QWORD)(a2 + 2)) < 2)
      {
        result = 4294967293;
      }
      else
      {
        if (!a2[3] && *(_BYTE *)(a1 + a2[2] + 136) == 10)
          v7 = a2 + 4;
LABEL_31:
        *a4 = v7;
        result = 7;
      }
      break;
    case 0xA:
      if (v4 != a2)
        goto LABEL_28;
      v7 = a2 + 2;
      goto LABEL_31;
    default:
      if (*(_BYTE *)(a1 + *v4 + 136) != 30)
        goto LABEL_6;
      if (v4 != a2)
        goto LABEL_28;
      LODWORD(result) = little2_scanPercent(a1, a2 + 2, a3, a4);
      if ((_DWORD)result == 22)
        result = 0;
      else
        result = result;
      break;
  }
  return result;
}

BOOL little2_nameMatchesAscii(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, _BYTE *a4)
{
  int v4;
  unsigned __int8 *v5;
  uint64_t v6;
  BOOL v7;
  int v8;

  v4 = *a4;
  if (!*a4)
    return a2 == a3;
  v5 = a4 + 1;
  v6 = a3 - a2;
  while (1)
  {
    v7 = v6 < 2;
    v6 -= 2;
    if (v7 || a2[1] || *a2 != v4)
      break;
    a2 += 2;
    v8 = *v5++;
    v4 = v8;
    if (!v8)
      return a2 == a3;
  }
  return 0;
}

uint64_t little2_nameLength(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *i;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;

  for (i = a2; ; i += v4)
  {
    v3 = i[1];
    if (v3 > 0xDB)
    {
      if (v3 == 255)
      {
        if (*i > 0xFDu)
          return ((_DWORD)i - (_DWORD)a2);
        v4 = 2;
      }
      else
      {
        v4 = 2;
        if (v3 - 220 < 4)
          return ((_DWORD)i - (_DWORD)a2);
      }
      continue;
    }
    if (v3 - 216 < 4)
    {
      v4 = 4;
      continue;
    }
    v4 = 2;
    if (!i[1])
      break;
LABEL_5:
    ;
  }
  v5 = *(unsigned __int8 *)(a1 + *i + 136) - 5;
  if (v5 < 0x19 && ((0x17E0007u >> v5) & 1) != 0)
  {
    v4 = qword_1DEC5E740[(char)v5];
    goto LABEL_5;
  }
  return ((_DWORD)i - (_DWORD)a2);
}

unsigned __int8 *little2_skipS(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  unsigned int v3;
  BOOL v4;
  int v5;
  int v7;

  if (!a2[1])
  {
    while (1)
    {
      v3 = *(unsigned __int8 *)(a1 + *a2 + 136);
      v4 = v3 > 0x15;
      v5 = (1 << v3) & 0x200600;
      if (v4 || v5 == 0)
        break;
      v2 = a2 + 2;
      v7 = a2[3];
      a2 += 2;
      if (v7)
        return v2;
    }
  }
  return a2;
}

uint64_t little2_getAtts(uint64_t a1, unsigned __int8 *a2, int a3, uint64_t a4)
{
  uint64_t result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;

  result = 0;
  v6 = 0;
  v7 = 1;
  while (1)
  {
    while (1)
    {
      v8 = v7;
      v10 = a2 + 3;
      v9 = a2[3];
      v11 = a2 + 2;
      if (v9 > 0xDB)
        break;
      v12 = a2;
      if (v9 - 216 >= 4)
      {
        if (a2[3])
          goto LABEL_16;
        v14 = *v11;
        a2 += 2;
        switch(*(_BYTE *)(a1 + v14 + 136))
        {
          case 3:
            a2 = v11;
            if ((int)result < a3)
            {
              *(_BYTE *)(a4 + 32 * (int)result + 24) = 0;
              a2 = v11;
            }
            continue;
          case 5:
          case 0x16:
          case 0x18:
          case 0x1D:
            goto LABEL_16;
          case 6:
            a2 = v10;
            if (!(_DWORD)v7)
            {
              v7 = 1;
              a2 = v10;
              if ((int)result < a3)
              {
                v17 = a4 + 32 * (int)result;
                *(_QWORD *)v17 = v11;
                *(_BYTE *)(v17 + 24) = 1;
                a2 = v10;
              }
            }
            continue;
          case 7:
            goto LABEL_4;
          case 9:
          case 0xA:
            v7 = 0;
            a2 = v11;
            if ((_DWORD)v8 == 1)
              continue;
            a2 = v11;
            v7 = v8;
            if ((_DWORD)v8 != 2)
              continue;
            a2 = v11;
            if ((int)result >= a3)
              continue;
            *(_BYTE *)(a4 + 32 * (int)result + 24) = 0;
            goto LABEL_66;
          case 0xB:
          case 0x11:
            v7 = 2;
            a2 = v11;
            if ((_DWORD)v8 == 2)
              continue;
            return result;
          case 0xC:
            if ((_DWORD)v7 == 2)
            {
              v7 = 2;
              a2 = v11;
              if (v6 == 12)
              {
                if ((int)result < a3)
                  *(_QWORD *)(a4 + 32 * (int)result + 16) = v11;
                v7 = 0;
                result = (result + 1);
                v6 = 12;
                a2 = v11;
              }
              continue;
            }
            v6 = 12;
            v7 = 2;
            a2 = v11;
            if ((int)result >= a3)
              continue;
            *(_QWORD *)(a4 + 32 * (int)result + 8) = v12 + 4;
            v6 = 12;
            goto LABEL_66;
          case 0xD:
            if ((_DWORD)v7 == 2)
            {
              v7 = 2;
              a2 = v11;
              if (v6 == 13)
              {
                if ((int)result < a3)
                  *(_QWORD *)(a4 + 32 * (int)result + 16) = v11;
                v7 = 0;
                result = (result + 1);
                v6 = 13;
                a2 = v11;
              }
              continue;
            }
            v6 = 13;
            v7 = 2;
            a2 = v11;
            if ((int)result >= a3)
              continue;
            *(_QWORD *)(a4 + 32 * (int)result + 8) = v12 + 4;
            v6 = 13;
            goto LABEL_66;
          case 0x15:
            v7 = 0;
            a2 = v11;
            if ((_DWORD)v8 == 1)
              continue;
            a2 = v11;
            v7 = v8;
            if ((_DWORD)v8 != 2)
              continue;
            a2 = v11;
            if ((int)result >= a3)
              continue;
            v18 = a4 + 32 * (int)result;
            v20 = *(unsigned __int8 *)(v18 + 24);
            v19 = (_BYTE *)(v18 + 24);
            v7 = 2;
            a2 = v11;
            if (!v20)
              continue;
            if (v11 == *(unsigned __int8 **)(a4 + 32 * (int)result + 8) || (_DWORD)v14 != 32)
              goto LABEL_65;
            v21 = v12[5];
            if (v21 > 0xDB)
            {
              if (v21 - 220 < 4)
              {
                v22 = 8;
                goto LABEL_64;
              }
              if (v21 == 255 && v12[4] > 0xFDu)
              {
                v22 = 0;
                goto LABEL_64;
              }
LABEL_63:
              v22 = 29;
              goto LABEL_64;
            }
            if (v21 - 216 < 4)
            {
              v22 = 7;
              goto LABEL_64;
            }
            if (v12[5])
              goto LABEL_63;
            v23 = v12[4];
            if (v23 == 32)
              goto LABEL_65;
            v22 = *(unsigned __int8 *)(a1 + v23 + 136);
LABEL_64:
            v7 = 2;
            a2 = v11;
            if (v22 != v6)
              continue;
LABEL_65:
            *v19 = 0;
LABEL_66:
            v7 = 2;
            a2 = v11;
            break;
          default:
            continue;
        }
      }
      else
      {
LABEL_4:
        if (!(_DWORD)v7)
        {
          v8 = 1;
          if ((int)result < a3)
          {
            v16 = a4 + 32 * (int)result;
            *(_QWORD *)v16 = v11;
            *(_BYTE *)(v16 + 24) = 1;
          }
        }
        a2 = v12 + 4;
        v7 = v8;
      }
    }
    a2 += 2;
    if (v9 - 220 >= 4)
    {
      if (v9 == 255)
      {
        v13 = *v11 <= 0xFDu && (_DWORD)v7 == 0;
        a2 = v11;
        if (v13)
          goto LABEL_17;
      }
      else
      {
LABEL_16:
        a2 = v11;
        if (!(_DWORD)v7)
        {
LABEL_17:
          v7 = 1;
          a2 = v11;
          if ((int)result < a3)
          {
            v15 = a4 + 32 * (int)result;
            *(_QWORD *)v15 = v11;
            *(_BYTE *)(v15 + 24) = 1;
            a2 = v11;
          }
        }
      }
    }
  }
}

uint64_t little2_charRefNumber(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  _BYTE *i;
  int v4;
  int v5;
  _BYTE *j;
  int v7;

  if (!a2[5] && a2[4] == 120)
  {
    v2 = 0;
    for (i = a2 + 7; ; i += 2)
    {
      if (!*i)
      {
        v4 = (char)*(i - 1);
        if (v4 == 59)
          return checkCharRefNumber(v2);
        v5 = v4 - 48;
        if ((v4 - 48) <= 0x36)
        {
          if (((1 << v5) & 0x3FF) != 0)
          {
            v2 = v5 | (16 * v2);
          }
          else if (((1 << v5) & 0x7E0000) != 0)
          {
            v2 = (v4 + 16 * v2 - 55);
          }
          else
          {
            if (((1 << v5) & 0x7E000000000000) == 0)
              continue;
            v2 = (v4 + 16 * v2 - 87);
          }
          if ((int)v2 >= 1114112)
            return 0xFFFFFFFFLL;
        }
      }
    }
  }
  v2 = 0;
  for (j = a2 + 5; *j; j += 2)
  {
    v7 = -1;
LABEL_19:
    v2 = (v7 + 10 * v2 - 48);
    if ((int)v2 >= 1114112)
      return 0xFFFFFFFFLL;
  }
  v7 = (char)*(j - 1);
  if (v7 != 59)
    goto LABEL_19;
  return checkCharRefNumber(v2);
}

uint64_t little2_predefinedEntityName(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  int v7;

  v3 = (a3 - (uint64_t)a2) / 2;
  if (v3 == 4)
  {
    if (!a2[1])
    {
      v7 = (char)*a2;
      if (v7 == 97)
      {
        if (!a2[3] && a2[2] == 112 && !a2[5] && a2[4] == 111 && !a2[7] && a2[6] == 115)
          return 39;
      }
      else if (v7 == 113 && !a2[3] && a2[2] == 117 && !a2[5] && a2[4] == 111 && !a2[7] && a2[6] == 116)
      {
        return 34;
      }
    }
    return 0;
  }
  if (v3 == 3)
  {
    if (!a2[1] && *a2 == 97 && !a2[3] && a2[2] == 109 && !a2[5] && a2[4] == 112)
      return 38;
    return 0;
  }
  if (v3 != 2 || a2[3] || a2[2] != 116 || a2[1])
    return 0;
  v4 = *a2;
  if (v4 == 103)
    v5 = 62;
  else
    v5 = 0;
  if (v4 == 108)
    return 60;
  else
    return v5;
}

uint64_t little2_updatePosition(uint64_t result, unsigned __int8 *a2, uint64_t a3, _QWORD *a4)
{
  unsigned __int8 *v4;

  if (a3 - (uint64_t)a2 >= 2)
  {
    do
    {
      if (a2[1] - 216 >= 4)
      {
        if (!a2[1])
        {
          switch(*(_BYTE *)(result + *a2 + 136))
          {
            case 6:
              a2 += 3;
              goto LABEL_7;
            case 7:
              goto LABEL_3;
            case 9:
              ++*a4;
              v4 = a2 + 2;
              if (a3 - (uint64_t)(a2 + 2) >= 2 && !a2[3] && *(_BYTE *)(result + a2[2] + 136) == 10)
                v4 = a2 + 4;
              a4[1] = 0;
              a2 = v4;
              break;
            case 0xA:
              ++*a4;
              a4[1] = 0;
              a2 += 2;
              break;
            default:
              goto LABEL_6;
          }
          continue;
        }
LABEL_6:
        a2 += 2;
      }
      else
      {
LABEL_3:
        a2 += 4;
      }
LABEL_7:
      ++a4[1];
    }
    while (a3 - (uint64_t)a2 > 1);
  }
  return result;
}

uint64_t little2_isPublicId(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t result;

  v4 = (unsigned __int8 *)(a2 + 2);
  v5 = a3 - (a2 + 2) - 2;
  if (v5 >= 2)
  {
    do
    {
      if (v4[1])
      {
LABEL_15:
        result = 0;
        *a4 = v4;
        return result;
      }
      v6 = *v4;
      v7 = (char)v6;
      v8 = *(unsigned __int8 *)(a1 + v6 + 136);
      if (v8 <= 0x23)
      {
        if (((1 << v8) & 0xFCB8FE600) != 0)
          goto LABEL_5;
        if (((1 << v8) & 0x4400000) != 0)
        {
          if ((v7 & 0x80000000) == 0)
            goto LABEL_5;
        }
        else if (v8 == 21)
        {
          if (v7 == 9)
            goto LABEL_15;
          goto LABEL_5;
        }
      }
      if (v7 != 64 && v7 != 36)
        goto LABEL_15;
LABEL_5:
      v4 += 2;
      v5 -= 2;
    }
    while (v5 > 1);
  }
  return 1;
}

uint64_t little2_toUtf8(uint64_t a1, unsigned __int8 **a2, uint64_t a3, _BYTE **a4, _BYTE *a5)
{
  unsigned __int8 *v5;
  int64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  _BYTE *v11;
  unint64_t v12;
  char v13;
  char v14;
  _BYTE *v15;
  _BYTE *v16;
  unsigned int v17;
  _BYTE *v18;
  unsigned int v19;
  char v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t result;

  v5 = *a2;
  v6 = (a3 - (_QWORD)*a2) & 0xFFFFFFFFFFFFFFFELL;
  if (v6 >= 1)
  {
    v7 = &v5[v6];
    do
    {
      v8 = *v5;
      v9 = (char)v8;
      v10 = v5[1];
      if (v10 - 1 >= 7)
      {
        if (v10 - 216 < 4)
        {
          v16 = *a4;
          if (a5 - *a4 < 4)
            goto LABEL_21;
          if (v7 - v5 < 4)
          {
            result = 1;
            goto LABEL_23;
          }
          v17 = ((v8 >> 6) & 0xFFFFFFF3 | (4 * (v10 & 3))) + 1;
          *a4 = v16 + 1;
          *v16 = (v17 >> 2) | 0xF0;
          LOBYTE(v17) = (v8 >> 2) & 0xF | (16 * (v17 & 3)) | 0x80;
          v18 = (*a4)++;
          *v18 = v17;
          v19 = v5[2];
          v5 += 2;
          v20 = (v19 >> 6) & 0xC3 | (16 * (v9 & 3)) | (4 * (v5[1] & 3)) | 0x80;
          v21 = (*a4)++;
          *v21 = v20;
          LOBYTE(v9) = v19 & 0x3F | 0x80;
          v22 = *a4;
          goto LABEL_11;
        }
        if (v5[1])
        {
          v23 = *a4;
          if (a5 - *a4 < 3)
          {
LABEL_21:
            result = 2;
            goto LABEL_23;
          }
          *a4 = v23 + 1;
          *v23 = (v10 >> 4) | 0xE0;
          v13 = (4 * (v10 & 0xF)) | (v9 >> 6) | 0x80;
          v11 = *a4;
          goto LABEL_6;
        }
        if (((char)v8 & 0x80000000) == 0)
        {
          v22 = *a4;
          if (*a4 == a5)
            goto LABEL_21;
LABEL_11:
          *a4 = v22 + 1;
          *v22 = v9;
          goto LABEL_12;
        }
      }
      v11 = *a4;
      if (a5 - *a4 < 2)
        goto LABEL_21;
      HIDWORD(v12) = v5[1];
      LODWORD(v12) = v9 << 24;
      v13 = (v12 >> 30) | 0xC0;
LABEL_6:
      *a4 = v11 + 1;
      *v11 = v13;
      v14 = v9 & 0x3F | 0x80;
      v15 = (*a4)++;
      *v15 = v14;
LABEL_12:
      v5 += 2;
    }
    while (v5 < v7);
  }
  result = 0;
LABEL_23:
  *a2 = v5;
  return result;
}

uint64_t little2_toUtf16(uint64_t a1, char **a2, uint64_t a3, unint64_t *a4, unint64_t a5)
{
  char *v5;
  int64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  _WORD *v10;

  v5 = *a2;
  v6 = (a3 - (_QWORD)*a2) & 0xFFFFFFFFFFFFFFFELL;
  v7 = &(*a2)[v6];
  if (v6 <= (uint64_t)(a5 - *a4))
  {
    result = 0;
  }
  else
  {
    result = (*(v7 - 1) & 0xF8) == 216;
    v9 = -2;
    if ((*(v7 - 1) & 0xF8) != 0xD8)
      v9 = 0;
    v7 += v9;
  }
  while (v5 < v7)
  {
    v10 = (_WORD *)*a4;
    if (*a4 >= a5)
    {
      if (*a4 == a5)
        return 2;
      return result;
    }
    *v10 = *(_WORD *)v5;
    *a4 = (unint64_t)(v10 + 1);
    v5 = *a2 + 2;
    *a2 = v5;
  }
  return result;
}

uint64_t little2_scanLit(int a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, unsigned __int8 **a5)
{
  unint64_t v5;
  unsigned int v6;
  unsigned __int8 *v7;
  uint64_t result;
  unsigned int v9;
  BOOL v10;
  int v11;

  v5 = a4 - (_QWORD)a3;
  if (a4 - (uint64_t)a3 < 2)
    return 0xFFFFFFFFLL;
  while (1)
  {
    v6 = a3[1];
    if (v6 > 0xDB)
    {
      if (v6 == 255)
      {
        if (*a3 > 0xFDu)
          goto LABEL_20;
      }
      else if (v6 - 220 < 4)
      {
LABEL_20:
        result = 0;
        *a5 = a3;
        return result;
      }
      goto LABEL_14;
    }
    if (v6 - 216 >= 4)
    {
      if (!a3[1])
      {
        switch(*(_BYTE *)(a2 + *a3 + 136))
        {
          case 0:
          case 1:
          case 8:
            goto LABEL_20;
          case 6:
            if (v5 < 3)
              return 4294967294;
            v7 = a3 + 3;
            goto LABEL_15;
          case 7:
            goto LABEL_4;
          case 0xC:
          case 0xD:
            v7 = a3 + 2;
            if (*(unsigned __int8 *)(a2 + *a3 + 136) != a1)
              goto LABEL_15;
            if (a4 - (uint64_t)v7 < 2)
              return 4294967269;
            *a5 = v7;
            if (a3[3])
              return 0;
            v9 = *(unsigned __int8 *)(a2 + *v7 + 136);
            v10 = v9 > 0x1E;
            v11 = (1 << v9) & 0x40300E00;
            if (v10 || v11 == 0)
              return 0;
            else
              return 27;
          default:
            break;
        }
      }
LABEL_14:
      v7 = a3 + 2;
      goto LABEL_15;
    }
LABEL_4:
    if (v5 < 4)
      return 4294967294;
    v7 = a3 + 4;
LABEL_15:
    v5 = a4 - (_QWORD)v7;
    a3 = v7;
    if (a4 - (uint64_t)v7 <= 1)
      return 0xFFFFFFFFLL;
  }
}

uint64_t little2_scanDecl(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned int v8;
  BOOL v9;
  int v10;

  if (a3 - (uint64_t)a2 < 2)
    return 0xFFFFFFFFLL;
  if (!a2[1])
  {
    switch(*(_BYTE *)(a1 + *a2 + 136))
    {
      case 0x14:
        *a4 = a2 + 2;
        return 33;
      case 0x16:
      case 0x18:
        v5 = a2 + 2;
        v6 = a3 - (_QWORD)(a2 + 2);
        if (v6 < 2)
          return 0xFFFFFFFFLL;
        while (2)
        {
          if (v5[1])
          {
LABEL_20:
            v4 = 0;
            *a4 = v5;
          }
          else
          {
            switch(*(_BYTE *)(a1 + *v5 + 136))
            {
              case 0x15:
                goto LABEL_13;
              case 0x16:
              case 0x18:
                v5 += 2;
                v6 -= 2;
                v4 = 0xFFFFFFFFLL;
                if (v6 > 1)
                  continue;
                return v4;
              case 0x17:
              case 0x19:
              case 0x1A:
              case 0x1B:
              case 0x1C:
              case 0x1D:
                goto LABEL_20;
              case 0x1E:
                if ((unint64_t)v6 < 4)
                  return 0xFFFFFFFFLL;
                if (!v5[3])
                {
                  v8 = *(unsigned __int8 *)(a1 + v5[2] + 136);
                  v9 = v8 > 0x1E;
                  v10 = (1 << v8) & 0x40200600;
                  if (!v9 && v10 != 0)
                    goto LABEL_20;
                }
                goto LABEL_13;
              default:
                if (*(unsigned __int8 *)(a1 + *v5 + 136) - 9 >= 2)
                  goto LABEL_20;
LABEL_13:
                *a4 = v5;
                v4 = 16;
                break;
            }
          }
          return v4;
        }
      case 0x1B:
        return little2_scanComment(a1, a2 + 2, a3, a4);
      default:
        break;
    }
  }
  v4 = 0;
  *a4 = a2;
  return v4;
}

uint64_t little2_scanPi(uint64_t a1, char *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unsigned int v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unsigned int v26;

  v4 = a3 - (_QWORD)a2;
  v5 = a3 - (_QWORD)a2 - 2;
  if (a3 - (uint64_t)a2 < 2)
    return 0xFFFFFFFFLL;
  v10 = a2[1];
  if (a2[1] > 0xDBu)
  {
    if ((v10 - 220) < 4)
      goto LABEL_7;
    if ((_DWORD)v10 == 255)
    {
      LODWORD(v12) = *a2;
      if (v12 > 0xFD)
        goto LABEL_7;
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if ((v10 - 216) < 4)
    goto LABEL_4;
  if (a2[1])
  {
LABEL_17:
    LODWORD(v12) = *a2;
    goto LABEL_18;
  }
  v12 = *a2;
  v13 = *(unsigned __int8 *)(a1 + v12 + 136);
  if (v13 <= 0x15)
  {
    if (v13 == 5)
      goto LABEL_7;
    if (v13 == 6)
    {
      if (v4 < 3)
        return 4294967294;
      goto LABEL_7;
    }
    if (v13 != 7)
      goto LABEL_7;
LABEL_4:
    if (v4 < 4)
      return 4294967294;
LABEL_7:
    result = 0;
    *a4 = (uint64_t)a2;
    return result;
  }
  if (v13 != 22 && v13 != 24)
  {
    if (v13 != 29)
      goto LABEL_7;
LABEL_18:
    if (((namingBitmap[(v12 >> 5) | (8 * nmstrtPages[v10])] >> v12) & 1) == 0)
      goto LABEL_7;
  }
  if (v5 < 2)
    return 0xFFFFFFFFLL;
  v15 = 0;
  v26 = 0;
  result = 0xFFFFFFFFLL;
  while (1)
  {
    v16 = (unint64_t)&a2[v15];
    v17 = a2[v15 + 3];
    if (a2[v15 + 3] <= 0xDBu)
    {
      if (!a2[v15 + 3])
      {
        v16 = *(unsigned __int8 *)(v16 + 2);
        switch(*(_BYTE *)(a1 + v16 + 136))
        {
          case 5:
            goto LABEL_45;
          case 6:
            if ((unint64_t)v5 >= 3)
              goto LABEL_45;
            return 4294967294;
          case 7:
            goto LABEL_44;
          case 9:
          case 0xA:
          case 0x15:
            v19 = (unsigned __int8 *)&a2[v15];
            v20 = (uint64_t)&a2[v15 + 2];
            result = little2_checkPiTarget(a2, v20, &v26);
            if (!(_DWORD)result)
            {
              *a4 = v20;
              return result;
            }
            v21 = v5 - 2;
            if (v5 - 2 < 2)
              return 0xFFFFFFFFLL;
            v22 = v19 + 4;
            result = 0xFFFFFFFFLL;
            while (2)
            {
              v23 = v22[1];
              if (v23 <= 0xDB)
              {
                if (v23 - 216 < 4)
                {
LABEL_54:
                  if (v21 < 4)
                    return 4294967294;
                  v24 = v22 + 4;
LABEL_65:
                  v21 = a3 - (_QWORD)v24;
                  v22 = v24;
                  if (a3 - (uint64_t)v24 <= 1)
                    return result;
                  continue;
                }
                if (!v22[1])
                {
                  switch(*(_BYTE *)(a1 + *v22 + 136))
                  {
                    case 0:
                    case 1:
                    case 8:
                      goto LABEL_83;
                    case 6:
                      if (v21 < 3)
                        return 4294967294;
                      v24 = v22 + 3;
                      goto LABEL_65;
                    case 7:
                      goto LABEL_54;
                    case 0xF:
                      v24 = v22 + 2;
                      if (a3 - (uint64_t)(v22 + 2) < 2)
                        return 0xFFFFFFFFLL;
                      if (v22[3] || *v24 != 62)
                        goto LABEL_65;
                      v25 = (uint64_t)(v22 + 4);
                      break;
                    default:
                      goto LABEL_64;
                  }
LABEL_79:
                  *a4 = v25;
                  return v26;
                }
LABEL_64:
                v24 = v22 + 2;
                goto LABEL_65;
              }
              break;
            }
            if (v23 == 255)
            {
              if (*v22 <= 0xFDu)
                goto LABEL_64;
            }
            else if (v23 - 220 >= 4)
            {
              goto LABEL_64;
            }
LABEL_83:
            result = 0;
            *a4 = (uint64_t)v22;
            return result;
          case 0xF:
            result = little2_checkPiTarget(a2, (uint64_t)&a2[v15 + 2], &v26);
            if (!(_DWORD)result)
            {
              *a4 = (uint64_t)&a2[v15 + 2];
              return result;
            }
            if (v5 - 2 < 2)
              return 0xFFFFFFFFLL;
            v18 = (unsigned __int8 *)&a2[v15 + 4];
            if (!a2[v15 + 5] && *v18 == 62)
            {
              v25 = (uint64_t)&a2[v15 + 6];
              goto LABEL_79;
            }
            goto LABEL_41;
          case 0x16:
          case 0x18:
          case 0x19:
          case 0x1A:
          case 0x1B:
            goto LABEL_38;
          case 0x1D:
            goto LABEL_37;
          default:
            goto LABEL_40;
        }
      }
      if ((v17 - 216) < 4)
      {
LABEL_44:
        if ((unint64_t)v5 >= 4)
        {
LABEL_45:
          result = 0;
          v18 = (unsigned __int8 *)&a2[v15 + 2];
          goto LABEL_46;
        }
        return 4294967294;
      }
      goto LABEL_36;
    }
    if ((_DWORD)v17 == 255)
    {
      LODWORD(v16) = *(unsigned __int8 *)(v16 + 2);
      if (v16 > 0xFD)
        break;
      goto LABEL_37;
    }
    if ((v17 - 220) < 4)
      break;
LABEL_36:
    LODWORD(v16) = *(unsigned __int8 *)(v16 + 2);
LABEL_37:
    if (((namingBitmap[(v16 >> 5) | (8 * namePages[v17])] >> v16) & 1) == 0)
      goto LABEL_45;
LABEL_38:
    v5 -= 2;
    v15 += 2;
    if (v5 <= 1)
      return result;
  }
LABEL_40:
  v18 = (unsigned __int8 *)&a2[v15 + 2];
LABEL_41:
  result = 0;
LABEL_46:
  *a4 = (uint64_t)v18;
  return result;
}

uint64_t little2_scanPercent(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v4 = a3 - (_QWORD)a2;
  if (a3 - (uint64_t)a2 < 2)
    return 0xFFFFFFFFLL;
  v5 = a2[1];
  if (a2[1] > 0xDBu)
  {
    if ((v5 - 220) < 4 || (_DWORD)v5 == 255 && *a2 > 0xFDu)
      goto LABEL_7;
  }
  else
  {
    if ((v5 - 216) < 4)
      goto LABEL_4;
    if (!a2[1])
    {
      v6 = 0;
      v7 = *(unsigned __int8 *)(a1 + *a2 + 136);
      if (v7 > 0x14)
      {
        switch(*(_BYTE *)(a1 + *a2 + 136))
        {
          case 0x15:
          case 0x1E:
            goto LABEL_35;
          case 0x16:
          case 0x18:
            goto LABEL_15;
          case 0x1D:
            goto LABEL_14;
          default:
            goto LABEL_8;
        }
      }
      if (v7 - 9 < 2)
      {
LABEL_35:
        v6 = 22;
        goto LABEL_8;
      }
      if (v7 == 6)
      {
        if (v4 >= 3)
          goto LABEL_7;
        return 4294967294;
      }
      if (v7 != 7)
        goto LABEL_8;
LABEL_4:
      if (v4 >= 4)
        goto LABEL_7;
      return 4294967294;
    }
  }
LABEL_14:
  if (((namingBitmap[(*a2 >> 5) | (8 * nmstrtPages[v5])] >> *a2) & 1) == 0)
    goto LABEL_7;
LABEL_15:
  a2 += 2;
  v8 = a3 - (_QWORD)a2;
  if (a3 - (uint64_t)a2 < 2)
    return 0xFFFFFFFFLL;
  while (1)
  {
    v9 = a2[1];
    if (a2[1] <= 0xDBu)
      break;
    if ((_DWORD)v9 == 255)
    {
      LODWORD(v10) = *a2;
      if (v10 > 0xFD)
        goto LABEL_7;
      goto LABEL_26;
    }
    if ((v9 - 220) < 4)
      goto LABEL_7;
LABEL_25:
    LODWORD(v10) = *a2;
LABEL_26:
    if (((namingBitmap[(v10 >> 5) | (8 * namePages[v9])] >> v10) & 1) == 0)
      goto LABEL_7;
LABEL_27:
    a2 += 2;
    v8 -= 2;
    v6 = 0xFFFFFFFFLL;
    if (v8 <= 1)
      return v6;
  }
  if (!a2[1])
  {
    v6 = 0;
    v10 = *a2;
    v11 = *(unsigned __int8 *)(a1 + v10 + 136);
    switch(*(_BYTE *)(a1 + v10 + 136))
    {
      case 0x12:
        a2 += 2;
        v6 = 28;
        goto LABEL_8;
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x17:
      case 0x1C:
        goto LABEL_8;
      case 0x16:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
        goto LABEL_27;
      case 0x1D:
        goto LABEL_26;
      default:
        if (v11 != 6)
        {
          if (v11 != 7)
            goto LABEL_8;
          goto LABEL_40;
        }
        if ((unint64_t)v8 < 3)
          return 4294967294;
        break;
    }
    goto LABEL_7;
  }
  if ((v9 - 216) >= 4)
    goto LABEL_25;
LABEL_40:
  if ((unint64_t)v8 < 4)
    return 4294967294;
LABEL_7:
  v6 = 0;
LABEL_8:
  *a4 = a2;
  return v6;
}

uint64_t little2_scanPoundName(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a3 - (_QWORD)a2;
  if (a3 - (uint64_t)a2 < 2)
    return 0xFFFFFFFFLL;
  v5 = a2[1];
  if (a2[1] > 0xDBu)
  {
    if ((v5 - 220) >= 4 && ((_DWORD)v5 != 255 || *a2 <= 0xFDu))
      goto LABEL_21;
    goto LABEL_8;
  }
  if ((v5 - 216) < 4)
    goto LABEL_4;
  if (a2[1])
    goto LABEL_21;
  v6 = 0;
  v8 = *(unsigned __int8 *)(a1 + *a2 + 136);
  if (v8 <= 0x15)
  {
    if (v8 != 6)
    {
      if (v8 == 7)
      {
LABEL_4:
        if (v4 >= 4)
          goto LABEL_8;
        return 4294967294;
      }
LABEL_9:
      *a4 = a2;
      return v6;
    }
    if (v4 < 3)
      return 4294967294;
LABEL_8:
    v6 = 0;
    goto LABEL_9;
  }
  if (v8 == 22 || v8 == 24)
    goto LABEL_22;
  if (v8 != 29)
    goto LABEL_9;
LABEL_21:
  if (((namingBitmap[(*a2 >> 5) | (8 * nmstrtPages[v5])] >> *a2) & 1) == 0)
    goto LABEL_8;
LABEL_22:
  a2 += 2;
  v10 = a3 - (_QWORD)a2;
  if (a3 - (uint64_t)a2 < 2)
    return 4294967276;
  while (1)
  {
    v11 = a2[1];
    if (a2[1] <= 0xDBu)
      break;
    if ((_DWORD)v11 == 255)
    {
      LODWORD(v12) = *a2;
      if (v12 > 0xFD)
        goto LABEL_8;
      goto LABEL_33;
    }
    if ((v11 - 220) < 4)
      goto LABEL_8;
LABEL_32:
    LODWORD(v12) = *a2;
LABEL_33:
    if (((namingBitmap[(v12 >> 5) | (8 * namePages[v11])] >> v12) & 1) == 0)
      goto LABEL_8;
LABEL_34:
    a2 += 2;
    v10 -= 2;
    v6 = 4294967276;
    if (v10 <= 1)
      return v6;
  }
  if (!a2[1])
  {
    v6 = 0;
    v12 = *a2;
    switch(*(_BYTE *)(a1 + v12 + 136))
    {
      case 6:
        if ((unint64_t)v10 >= 3)
          goto LABEL_8;
        return 4294967294;
      case 7:
        goto LABEL_40;
      case 9:
      case 0xA:
      case 0xB:
      case 0x15:
      case 0x1E:
      case 0x20:
      case 0x24:
        v6 = 20;
        goto LABEL_9;
      case 0x16:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
        goto LABEL_34;
      case 0x1D:
        goto LABEL_33;
      default:
        goto LABEL_9;
    }
  }
  if ((v11 - 216) >= 4)
    goto LABEL_32;
LABEL_40:
  if ((unint64_t)v10 >= 4)
    goto LABEL_8;
  return 4294967294;
}

uint64_t little2_scanComment(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unsigned int v5;
  unsigned __int8 *v6;
  uint64_t v7;
  int v9;

  if (a3 - (uint64_t)a2 < 2)
    return 0xFFFFFFFFLL;
  if (a2[1] || *a2 != 45)
  {
LABEL_26:
    v7 = 0;
    goto LABEL_27;
  }
  a2 += 2;
  v4 = a3 - (_QWORD)a2;
  if (a3 - (uint64_t)a2 < 2)
    return 0xFFFFFFFFLL;
  while (1)
  {
    v5 = a2[1];
    if (v5 > 0xDB)
    {
      if (v5 == 255)
      {
        if (*a2 > 0xFDu)
          goto LABEL_26;
      }
      else if (v5 - 220 < 4)
      {
        goto LABEL_26;
      }
      goto LABEL_23;
    }
    if (v5 - 216 >= 4)
      break;
LABEL_7:
    if (v4 < 4)
      return 4294967294;
    v6 = a2 + 4;
LABEL_24:
    v4 = a3 - (_QWORD)v6;
    v7 = 0xFFFFFFFFLL;
    a2 = v6;
    if (a3 - (uint64_t)v6 <= 1)
      return v7;
  }
  if (a2[1])
  {
LABEL_23:
    v6 = a2 + 2;
    goto LABEL_24;
  }
  v7 = 0;
  switch(*(_BYTE *)(a1 + *a2 + 136))
  {
    case 0:
    case 1:
    case 8:
      break;
    case 2:
    case 3:
    case 4:
    case 5:
      goto LABEL_23;
    case 6:
      if (v4 < 3)
        return 4294967294;
      v6 = a2 + 3;
      goto LABEL_24;
    case 7:
      goto LABEL_7;
    default:
      if (*(_BYTE *)(a1 + *a2 + 136) != 27)
        goto LABEL_23;
      v6 = a2 + 2;
      if (a3 - (uint64_t)(a2 + 2) < 2)
        return 0xFFFFFFFFLL;
      if (a2[3] || *v6 != 45)
        goto LABEL_24;
      if (a3 - (uint64_t)(a2 + 4) < 2)
        return 0xFFFFFFFFLL;
      if (a2[5])
      {
        v7 = 0;
        a2 += 4;
      }
      else
      {
        v9 = a2[4];
        if (v9 == 62)
          a2 += 6;
        else
          a2 += 4;
        if (v9 == 62)
          v7 = 13;
        else
          v7 = 0;
      }
      break;
  }
LABEL_27:
  *a4 = a2;
  return v7;
}

BOOL little2_checkPiTarget(char *a1, uint64_t a2, _DWORD *a3)
{
  int v4;
  int v5;
  int v6;
  int v7;

  *a3 = 11;
  if (a2 - (_QWORD)a1 != 6 || a1[1])
    return 1;
  v4 = *a1;
  if (v4 == 120)
  {
    v5 = 0;
  }
  else
  {
    if (v4 != 88)
      return 1;
    v5 = 1;
  }
  if (a1[3])
    return 1;
  v6 = a1[2];
  if (v6 != 109)
  {
    if (v6 != 77)
      return 1;
    v5 = 1;
  }
  if (a1[5])
    return 1;
  v7 = a1[4];
  if (v7 == 108)
  {
    if (v5)
      return 0;
    *a3 = 12;
    return 1;
  }
  return v7 != 76;
}

uint64_t little2_scanRef(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 *v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  int v18;

  v4 = a3 - (_QWORD)a2;
  if (a3 - (uint64_t)a2 < 2)
    return 0xFFFFFFFFLL;
  v5 = a2[1];
  if (a2[1] > 0xDBu)
  {
    if ((v5 - 220) < 4 || (_DWORD)v5 == 255 && *a2 > 0xFDu)
      goto LABEL_7;
    goto LABEL_26;
  }
  if ((v5 - 216) < 4)
    goto LABEL_4;
  if (a2[1])
    goto LABEL_26;
  v6 = 0;
  v7 = *(unsigned __int8 *)(a1 + *a2 + 136);
  if (v7 > 0x15)
  {
    if (v7 == 22 || v7 == 24)
      goto LABEL_27;
    if (v7 != 29)
      goto LABEL_8;
LABEL_26:
    if (((namingBitmap[(*a2 >> 5) | (8 * nmstrtPages[v5])] >> *a2) & 1) == 0)
      goto LABEL_7;
LABEL_27:
    a2 += 2;
    v4 = a3 - (_QWORD)a2;
    if (a3 - (uint64_t)a2 < 2)
      return 0xFFFFFFFFLL;
    while (1)
    {
      v10 = a2[1];
      if (a2[1] > 0xDBu)
      {
        if ((_DWORD)v10 == 255)
        {
          LODWORD(v11) = *a2;
          if (v11 > 0xFD)
            goto LABEL_7;
          goto LABEL_38;
        }
        if ((v10 - 220) < 4)
          goto LABEL_7;
      }
      else
      {
        if (!a2[1])
        {
          v6 = 0;
          v11 = *a2;
          v12 = *(unsigned __int8 *)(a1 + v11 + 136);
          switch(*(_BYTE *)(a1 + v11 + 136))
          {
            case 0x12:
              a2 += 2;
              v6 = 9;
              goto LABEL_8;
            case 0x13:
            case 0x14:
            case 0x15:
            case 0x17:
            case 0x1C:
              goto LABEL_8;
            case 0x16:
            case 0x18:
            case 0x19:
            case 0x1A:
            case 0x1B:
              goto LABEL_39;
            case 0x1D:
              goto LABEL_38;
            default:
              if (v12 == 6)
                goto LABEL_53;
              if (v12 != 7)
                goto LABEL_8;
              goto LABEL_4;
          }
        }
        if ((v10 - 216) < 4)
          goto LABEL_4;
      }
      LODWORD(v11) = *a2;
LABEL_38:
      if (((namingBitmap[(v11 >> 5) | (8 * namePages[v10])] >> v11) & 1) == 0)
        goto LABEL_7;
LABEL_39:
      a2 += 2;
      v4 -= 2;
      v6 = 0xFFFFFFFFLL;
      if (v4 <= 1)
        return v6;
    }
  }
  if (v7 == 6)
  {
LABEL_53:
    if ((unint64_t)v4 < 3)
      return 4294967294;
    goto LABEL_7;
  }
  if (v7 != 7)
  {
    if (v7 != 19)
      goto LABEL_8;
    v8 = a2 + 2;
    if (a3 - (uint64_t)(a2 + 2) >= 2)
    {
      if (a2[3])
        goto LABEL_16;
      v13 = *v8;
      if (v13 == 120)
      {
        if (a3 - (uint64_t)(a2 + 4) >= 2)
        {
          if (a2[5] || (*(_BYTE *)(a1 + a2[4] + 136) & 0xFE) != 0x18)
          {
            v6 = 0;
            a2 += 4;
            goto LABEL_8;
          }
          a2 += 6;
          v14 = a3 - (_QWORD)a2;
          if (a3 - (uint64_t)a2 >= 2)
          {
            while (!a2[1])
            {
              v15 = *(unsigned __int8 *)(a1 + *a2 + 136);
              if ((v15 - 24) >= 2)
              {
                if (v15 != 18)
                  goto LABEL_7;
                a2 += 2;
                v6 = 10;
                goto LABEL_8;
              }
              a2 += 2;
              v14 -= 2;
              v6 = 0xFFFFFFFFLL;
              if (v14 <= 1)
                return v6;
            }
            goto LABEL_7;
          }
        }
      }
      else
      {
        if (*(_BYTE *)(a1 + v13 + 136) != 25)
        {
LABEL_16:
          v6 = 0;
LABEL_17:
          a2 = v8;
          goto LABEL_8;
        }
        v8 = a2 + 4;
        v16 = v4 - 4;
        while (1)
        {
          v17 = v16 < 2;
          v16 -= 2;
          if (v17)
            break;
          a2 = v8;
          if (v8[1])
            goto LABEL_7;
          v8 += 2;
          v18 = *(unsigned __int8 *)(a1 + *a2 + 136);
          if (v18 != 25)
          {
            if (v18 != 18)
              goto LABEL_7;
            v6 = 10;
            goto LABEL_17;
          }
        }
      }
    }
    return 0xFFFFFFFFLL;
  }
LABEL_4:
  if ((unint64_t)v4 >= 4)
  {
LABEL_7:
    v6 = 0;
LABEL_8:
    *a4 = a2;
    return v6;
  }
  return 4294967294;
}

uint64_t little2_scanAtts(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 **a4)
{
  unint64_t v4;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t i;
  unsigned int v21;
  unsigned int v24;
  int v25;
  unsigned __int8 **v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned __int8 *v32;

  v32 = a2;
  v4 = a3 - (_QWORD)a2;
  if (a3 - (uint64_t)a2 < 2)
    return 0xFFFFFFFFLL;
  v7 = 0;
  v8 = a3 - 4;
  while (1)
  {
    v9 = a2[1];
    if (a2[1] <= 0xDBu)
      break;
    if ((_DWORD)v9 != 255)
    {
      if ((v9 - 220) < 4)
        goto LABEL_106;
LABEL_21:
      LODWORD(v11) = *a2;
      goto LABEL_22;
    }
    LODWORD(v11) = *a2;
    if (v11 > 0xFD)
      goto LABEL_106;
LABEL_22:
    if (((namingBitmap[(v11 >> 5) | (8 * namePages[v9])] >> v11) & 1) == 0)
      goto LABEL_106;
LABEL_23:
    a2 += 2;
    v32 = a2;
LABEL_24:
    v4 = a3 - (_QWORD)a2;
    if (a3 - (uint64_t)a2 <= 1)
      return 0xFFFFFFFFLL;
  }
  if (a2[1])
  {
    if ((v9 - 216) < 4)
    {
LABEL_101:
      if (v4 >= 4)
      {
LABEL_106:
        result = 0;
        goto LABEL_107;
      }
      return 4294967294;
    }
    goto LABEL_21;
  }
  result = 0;
  v11 = *a2;
  switch(*(_BYTE *)(a1 + v11 + 136))
  {
    case 6:
      if (v4 >= 3)
        goto LABEL_106;
      return 4294967294;
    case 7:
      goto LABEL_101;
    case 9:
    case 0xA:
    case 0x15:
      a2 += 2;
      v12 = a3 - (_QWORD)a2;
      if (a3 - (uint64_t)a2 < 2)
        return 0xFFFFFFFFLL;
      while (2)
      {
        if (a2[1])
          goto LABEL_106;
        v13 = *(unsigned __int8 *)(a1 + *a2 + 136);
        if ((v13 - 9) < 2 || v13 == 21)
        {
          a2 += 2;
          v12 -= 2;
          if (v12 <= 1)
            return 0xFFFFFFFFLL;
          continue;
        }
        break;
      }
      if (v13 != 14)
        goto LABEL_106;
      v32 = a2;
LABEL_36:
      v15 = a2 + 2;
      if (a3 - (uint64_t)(a2 + 2) < 2)
        return 0xFFFFFFFFLL;
      for (i = v8 - (_QWORD)a2; ; i -= 2)
      {
        if (v15[1])
          goto LABEL_113;
        v21 = *(unsigned __int8 *)(a1 + *v15 + 136);
        if ((v21 & 0xFE) == 0xC)
          break;
        if (v21 > 0x15 || ((1 << v21) & 0x200600) == 0)
          goto LABEL_113;
        v15 += 2;
        result = 0xFFFFFFFFLL;
        if (i <= 1)
          return result;
      }
      v15 += 2;
      v32 = v15;
      if (i < 2)
        return 0xFFFFFFFFLL;
      while (2)
      {
        v24 = v15[1];
        if (v24 > 0xDB)
        {
          if (v24 - 220 < 4)
          {
            v25 = 8;
            goto LABEL_62;
          }
          if (v24 == 255 && *v15 > 0xFDu)
          {
            v25 = 0;
            goto LABEL_62;
          }
        }
        else
        {
          if (v24 - 216 < 4)
          {
            v25 = 7;
            goto LABEL_62;
          }
          if (!v15[1])
          {
            v25 = *(unsigned __int8 *)(a1 + *v15 + 136);
            goto LABEL_62;
          }
        }
        v25 = 29;
LABEL_62:
        if (v25 == v21)
        {
          a2 = v15 + 2;
          v32 = v15 + 2;
          if (a3 - (uint64_t)(v15 + 2) < 2)
            return 0xFFFFFFFFLL;
          if (v15[3])
            goto LABEL_106;
          result = 0;
          v27 = *(unsigned __int8 *)(a1 + *a2 + 136);
          if (v27 <= 0xA)
          {
            if (v27 - 9 >= 2)
              goto LABEL_107;
            goto LABEL_88;
          }
          if (v27 == 21)
          {
LABEL_88:
            a2 = v15 + 4;
            v28 = a3 - (_QWORD)(v15 + 4);
            if (v28 < 2)
              return 0xFFFFFFFFLL;
            while (2)
            {
              v29 = a2[1];
              if (!a2[1])
              {
                result = 0;
                switch(*(_BYTE *)(a1 + *a2 + 136))
                {
                  case 6:
                    if ((unint64_t)v28 >= 3)
                      goto LABEL_106;
                    return 4294967294;
                  case 7:
                    goto LABEL_103;
                  case 9:
                  case 0xA:
                  case 0x15:
                    a2 += 2;
                    v28 -= 2;
                    result = 0xFFFFFFFFLL;
                    if (v28 <= 1)
                      return result;
                    continue;
                  case 0xB:
                    goto LABEL_128;
                  case 0x11:
                    goto LABEL_118;
                  case 0x16:
                  case 0x18:
                    goto LABEL_100;
                  case 0x1D:
                    goto LABEL_98;
                  default:
                    goto LABEL_107;
                }
              }
              break;
            }
            if ((v29 - 216) < 4)
            {
LABEL_103:
              if ((unint64_t)v28 >= 4)
                goto LABEL_106;
              return 4294967294;
            }
            if ((v29 - 220) < 4)
              goto LABEL_106;
            if (v29 == 255)
            {
              v32 = a2;
              v30 = *a2;
              if (v30 > 0xFD)
                goto LABEL_106;
            }
            else
            {
LABEL_98:
              v32 = a2;
              v30 = *a2;
            }
            if (((namingBitmap[(v30 >> 5) | (8 * nmstrtPages[a2[1]])] >> v30) & 1) == 0)
              goto LABEL_106;
LABEL_100:
            v7 = 0;
            goto LABEL_23;
          }
          if (v27 == 11)
          {
LABEL_128:
            a2 += 2;
            result = 1;
            goto LABEL_107;
          }
          if (v27 != 17)
          {
LABEL_107:
            *a4 = a2;
            return result;
          }
LABEL_118:
          v15 = a2 + 2;
          v32 = a2 + 2;
          if (a3 - (uint64_t)(a2 + 2) >= 2)
          {
            if (!a2[3])
            {
              v31 = a2[2];
              if (v31 == 62)
                a2 += 4;
              else
                a2 += 2;
              if (v31 == 62)
                result = 3;
              else
                result = 0;
              goto LABEL_107;
            }
            goto LABEL_113;
          }
          return 0xFFFFFFFFLL;
        }
        switch(v25)
        {
          case 0:
          case 1:
          case 2:
          case 8:
            goto LABEL_113;
          case 3:
            v26 = a4;
            result = little2_scanRef(a1, v15 + 2, a3, &v32);
            if ((int)result >= 1)
            {
              v15 = v32;
              a4 = v26;
LABEL_72:
              i = a3 - (_QWORD)v15;
              result = 0xFFFFFFFFLL;
              if (a3 - (uint64_t)v15 <= 1)
                return result;
              continue;
            }
            if (!(_DWORD)result)
            {
              a4 = v26;
              a2 = v32;
              goto LABEL_107;
            }
            return result;
          case 6:
            if ((unint64_t)i < 3)
              return 4294967294;
            v15 += 3;
            goto LABEL_71;
          case 7:
            if ((unint64_t)i < 4)
              return 4294967294;
            v15 += 4;
            goto LABEL_71;
          default:
            v15 += 2;
LABEL_71:
            v32 = v15;
            goto LABEL_72;
        }
      }
    case 0xE:
      goto LABEL_36;
    case 0x16:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
      goto LABEL_23;
    case 0x17:
      if (v7)
        goto LABEL_106;
      v15 = a2 + 2;
      v32 = a2 + 2;
      v16 = a3 - (_QWORD)(a2 + 2);
      if (v16 < 2)
        return 0xFFFFFFFFLL;
      v17 = a2[3];
      if (a2[3] > 0xDBu)
      {
        if ((_DWORD)v17 == 255)
        {
          LODWORD(v18) = *v15;
          if (v18 > 0xFD)
            goto LABEL_113;
LABEL_78:
          if (((namingBitmap[(v18 >> 5) | (8 * nmstrtPages[v17])] >> v18) & 1) == 0)
            goto LABEL_113;
          goto LABEL_79;
        }
        if ((v17 - 220) < 4)
          goto LABEL_113;
      }
      else
      {
        if (!a2[3])
        {
          v18 = *v15;
          v19 = *(unsigned __int8 *)(a1 + v18 + 136);
          if (v19 <= 0x17)
          {
            if (v19 != 22)
            {
              if (v19 == 6)
              {
                if ((unint64_t)v16 < 3)
                  return 4294967294;
              }
              else if (v19 == 7)
              {
LABEL_112:
                if ((unint64_t)v16 < 4)
                  return 4294967294;
              }
LABEL_113:
              result = 0;
              a2 = v15;
              goto LABEL_107;
            }
          }
          else if (v19 != 24)
          {
            if (v19 != 29)
              goto LABEL_113;
            goto LABEL_78;
          }
LABEL_79:
          a2 += 4;
          v32 = a2;
          v7 = 1;
          goto LABEL_24;
        }
        if ((v17 - 216) < 4)
          goto LABEL_112;
      }
      LODWORD(v18) = *v15;
      goto LABEL_78;
    case 0x1D:
      goto LABEL_22;
    default:
      goto LABEL_107;
  }
}

BOOL streqci(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;

  do
  {
    v3 = *a1++;
    v2 = v3;
    v5 = *a2++;
    v4 = v5;
    if ((v2 - 97) < 0x1A)
      LOBYTE(v2) = v2 - 32;
    if ((v4 - 97) < 0x1A)
      LOBYTE(v4) = v4 - 32;
    if (v2 == v4)
      v6 = 2 * (v2 == 0);
    else
      v6 = 1;
  }
  while (!v6);
  return v6 == 2;
}

uint64_t initScan(_QWORD *a1, uint64_t a2, int a3, unsigned __int8 *a4, unsigned __int8 *a5, _QWORD *a6)
{
  uint64_t (***v6)(void);
  int v7;
  unsigned int v8;
  uint64_t (**v9)(void);
  uint64_t v10;
  int v12;
  int v13;
  uint64_t (**v14)(void);
  uint64_t (*v15)(void);
  uint64_t (**v16)(void);

  if (a4 >= a5)
    return 4294967292;
  v6 = *(uint64_t (****)(void))(a2 + 136);
  if (a4 + 1 == a5)
  {
    if ((*(char *)(a2 + 133) - 3) < 3)
      return 0xFFFFFFFFLL;
    v12 = *a4;
    if ((v12 - 239) <= 0x10 && ((1 << (v12 + 17)) & 0x18001) != 0)
    {
      v10 = 0xFFFFFFFFLL;
      if (a3 != 1 || *(_BYTE *)(a2 + 133))
        return v10;
    }
    else
    {
      v10 = 0xFFFFFFFFLL;
      if (!*a4 || v12 == 60)
        return v10;
    }
LABEL_45:
    v16 = (uint64_t (**)(void))a1[*(char *)(a2 + 133)];
    goto LABEL_46;
  }
  v7 = a4[1] | (*a4 << 8);
  if (v7 > 65278)
  {
    if (v7 == 65534)
    {
      if (a3 != 1 || *(_BYTE *)(a2 + 133))
      {
        *a6 = a4 + 2;
        v9 = (uint64_t (**)(void))a1[5];
        goto LABEL_32;
      }
      goto LABEL_45;
    }
    if (v7 == 65279)
    {
      if (a3 != 1 || *(_BYTE *)(a2 + 133))
      {
        *a6 = a4 + 2;
        v9 = (uint64_t (**)(void))a1[4];
        goto LABEL_32;
      }
      goto LABEL_45;
    }
  }
  else
  {
    if (v7 == 15360)
    {
      v13 = *(unsigned __int8 *)(a2 + 133);
      if (v13 == 4)
      {
        if (a3 == 1)
          goto LABEL_45;
      }
      else if (a3 == 1 && v13 == 3)
      {
        goto LABEL_45;
      }
      v16 = (uint64_t (**)(void))a1[5];
LABEL_46:
      *v6 = v16;
      v15 = v16[a3];
      return v15();
    }
    if (v7 == 61371)
    {
      if (a3 != 1 || (v8 = *(unsigned __int8 *)(a2 + 133), v8 > 5) || ((1 << v8) & 0x39) == 0)
      {
        if (a4 + 2 != a5)
        {
          if (a4[2] == 191)
          {
            *a6 = a4 + 3;
            v9 = (uint64_t (**)(void))a1[2];
LABEL_32:
            *v6 = v9;
            return 14;
          }
          goto LABEL_45;
        }
        return 0xFFFFFFFFLL;
      }
      goto LABEL_45;
    }
  }
  if (!*a4)
  {
    if (a3 != 1 || *(_BYTE *)(a2 + 133) != 5)
    {
      v16 = (uint64_t (**)(void))a1[4];
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  if (a3 == 1 || a4[1])
    goto LABEL_45;
  v14 = (uint64_t (**)(void))a1[5];
  *v6 = v14;
  v15 = *v14;
  return v15();
}

uint64_t ascii_toUtf8(uint64_t a1, char **a2, unint64_t a3, unint64_t *a4, unint64_t a5)
{
  char *v5;
  char v6;
  _BYTE *v7;

  while (1)
  {
    v5 = *a2;
    if ((unint64_t)*a2 >= a3)
      return 0;
    if (*a4 >= a5)
      break;
    *a2 = v5 + 1;
    v6 = *v5;
    v7 = (_BYTE *)(*a4)++;
    *v7 = v6;
  }
  if (*a4 != a5)
    return 0;
  return 2;
}

uint64_t big2_prologTok(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  _BYTE *v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  int v29;
  unsigned __int8 *v32;
  int v33;
  int v34;
  int v35;

  if ((unint64_t)a2 >= a3)
    return 4294967292;
  if (((a3 - (_QWORD)a2) & 0xFFFFFFFFFFFFFFFELL) == 0 || ((a3 - (_QWORD)a2) & 1) == 0)
    v6 = a3;
  else
    v6 = (uint64_t)&a2[(a3 - (_QWORD)a2) & 0xFFFFFFFFFFFFFFFELL];
  if (a3 - (_QWORD)a2 == 1)
    return 0xFFFFFFFFLL;
  v9 = *a2;
  if (*a2 > 0xDBu)
  {
    if ((v9 - 220) < 4)
      goto LABEL_16;
    if ((_DWORD)v9 == 255)
    {
      LODWORD(v10) = a2[1];
      if (v10 > 0xFD)
        goto LABEL_16;
      goto LABEL_29;
    }
LABEL_28:
    LODWORD(v10) = a2[1];
LABEL_29:
    v13 = v10 >> 5;
    v14 = namingBitmap[(v10 >> 5) | (8 * nmstrtPages[v9])];
    v15 = 1 << v10;
    if ((v15 & v14) != 0)
    {
      result = 18;
    }
    else
    {
      if ((namingBitmap[v13 | (8 * namePages[v9])] & v15) == 0)
        goto LABEL_16;
LABEL_32:
      result = 19;
    }
LABEL_33:
    v16 = a2 + 2;
    v17 = v6 - (_QWORD)(a2 + 2);
    if (v17 < 2)
      return -(int)result;
    while (1)
    {
      v18 = *v16;
      if (*v16 > 0xDBu)
        break;
      if (*v16)
      {
        if ((v18 - 216) < 4)
        {
LABEL_75:
          if ((unint64_t)v17 < 4)
            return 4294967294;
LABEL_76:
          result = 0;
LABEL_77:
          *a4 = (uint64_t)v16;
          return result;
        }
LABEL_49:
        LODWORD(v19) = v16[1];
        goto LABEL_50;
      }
      v19 = v16[1];
      switch(*(_BYTE *)(a1 + v19 + 136))
      {
        case 6:
          if ((unint64_t)v17 >= 3)
            goto LABEL_76;
          return 4294967294;
        case 7:
          goto LABEL_75;
        case 9:
        case 0xA:
        case 0xB:
        case 0x14:
        case 0x15:
        case 0x1E:
        case 0x20:
        case 0x23:
        case 0x24:
          goto LABEL_77;
        case 0xF:
          if ((_DWORD)result == 19)
            goto LABEL_76;
          *a4 = (uint64_t)(v16 + 2);
          return 30;
        case 0x16:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
          goto LABEL_51;
        case 0x17:
          v20 = v16 + 2;
          if ((_DWORD)result == 41)
            goto LABEL_42;
          if ((_DWORD)result != 18)
            break;
          v21 = v6 - (_QWORD)v20;
          if (v6 - (uint64_t)v20 < 2)
            return 0xFFFFFFFFLL;
          v22 = *v20;
          if (*v20 > 0xDBu)
          {
            if ((v22 - 220) < 4)
              goto LABEL_42;
            if ((_DWORD)v22 == 255)
            {
              LODWORD(v23) = v16[3];
              if (v23 > 0xFD)
              {
LABEL_42:
                result = 19;
                break;
              }
              goto LABEL_64;
            }
LABEL_63:
            LODWORD(v23) = v16[3];
            goto LABEL_64;
          }
          if (*v20)
          {
            if ((v22 - 216) < 4)
              goto LABEL_72;
            goto LABEL_63;
          }
          v23 = v16[3];
          v24 = *(unsigned __int8 *)(a1 + v23 + 136);
          result = 19;
          if (v24 > 0x17)
          {
            if (v24 - 24 >= 4)
            {
              if (v24 != 29)
                break;
LABEL_64:
              if (((namingBitmap[(v23 >> 5) | (8 * namePages[v22])] >> v23) & 1) == 0)
                goto LABEL_73;
            }
LABEL_65:
            v20 = v16 + 4;
            result = 41;
            break;
          }
          if (*(unsigned __int8 *)(a1 + v23 + 136) <= 0x15u)
          {
            switch(v24)
            {
              case 5u:
                goto LABEL_73;
              case 6u:
                if (v21 >= 3)
                {
LABEL_73:
                  result = 0;
                  *a4 = (uint64_t)v20;
                  return result;
                }
                return 4294967294;
              case 7u:
LABEL_72:
                if (v21 >= 4)
                  goto LABEL_73;
                return 4294967294;
            }
          }
          else if (v24 == 22)
          {
            goto LABEL_65;
          }
          break;
        case 0x1D:
          goto LABEL_50;
        case 0x21:
          if ((_DWORD)result == 19)
            goto LABEL_76;
          *a4 = (uint64_t)(v16 + 2);
          return 31;
        case 0x22:
          if ((_DWORD)result == 19)
            goto LABEL_76;
          *a4 = (uint64_t)(v16 + 2);
          return 32;
        default:
          goto LABEL_76;
      }
LABEL_52:
      v17 = v6 - (_QWORD)v20;
      v16 = v20;
      if (v6 - (uint64_t)v20 <= 1)
        return -(int)result;
    }
    if ((_DWORD)v18 != 255)
    {
      if ((v18 - 220) < 4)
        goto LABEL_76;
      goto LABEL_49;
    }
    LODWORD(v19) = v16[1];
    if (v19 > 0xFD)
      goto LABEL_76;
LABEL_50:
    if (((namingBitmap[(v19 >> 5) | (8 * namePages[v18])] >> v19) & 1) == 0)
      goto LABEL_76;
LABEL_51:
    v20 = v16 + 2;
    goto LABEL_52;
  }
  if ((v9 - 216) < 4)
  {
LABEL_13:
    if (v6 - (uint64_t)a2 < 4)
      return 4294967294;
LABEL_16:
    result = 0;
    *a4 = (uint64_t)a2;
    return result;
  }
  if (*a2)
    goto LABEL_28;
  v10 = a2[1];
  result = 18;
  switch(*(_BYTE *)(a1 + v10 + 136))
  {
    case 2:
      v11 = a2 + 2;
      if (v6 - (uint64_t)(a2 + 2) < 2)
        return 0xFFFFFFFFLL;
      v12 = *v11;
      if ((v12 - 220) < 4)
        goto LABEL_112;
      if (!*v11)
      {
        v35 = *(unsigned __int8 *)(a1 + a2[3] + 136);
        switch(*(_BYTE *)(a1 + a2[3] + 136))
        {
          case 0xF:
            result = big2_scanPi(a1, a2 + 4, v6, a4);
            break;
          case 0x10:
            result = big2_scanDecl(a1, a2 + 4, v6, a4);
            break;
          case 0x11:
          case 0x12:
          case 0x13:
          case 0x14:
          case 0x15:
          case 0x17:
            goto LABEL_112;
          case 0x16:
          case 0x18:
            goto LABEL_139;
          default:
            if ((v35 - 5) < 3 || v35 == 29)
              goto LABEL_139;
            goto LABEL_112;
        }
        return result;
      }
      if (v12 != 255 || a2[3] <= 0xFDu)
      {
LABEL_139:
        *a4 = (uint64_t)a2;
        return 29;
      }
      goto LABEL_112;
    case 4:
      v25 = a2 + 2;
      v26 = v6 - (_QWORD)(a2 + 2);
      if (v26 < 2)
        return 4294967270;
      if (*v25 || a2[3] != 93)
        goto LABEL_117;
      if ((unint64_t)v26 < 4)
        return 0xFFFFFFFFLL;
      if (a2[4] || a2[5] != 62)
      {
LABEL_117:
        *a4 = (uint64_t)v25;
        return 26;
      }
      else
      {
        *a4 = (uint64_t)(a2 + 6);
        return 34;
      }
    case 5:
      if (v6 - (uint64_t)a2 >= 2)
        goto LABEL_16;
      return 4294967294;
    case 6:
      if (v6 - (uint64_t)a2 >= 3)
        goto LABEL_16;
      return 4294967294;
    case 7:
      goto LABEL_13;
    case 9:
      if (a2 + 2 != (unsigned __int8 *)v6)
        goto LABEL_90;
      *a4 = v6;
      return 4294967281;
    case 0xA:
    case 0x15:
LABEL_90:
      v27 = a2 + 2;
      v28 = v6 - (_QWORD)(a2 + 2);
      if (v28 >= 2)
      {
        do
        {
          if (*v27)
            break;
          v29 = *(unsigned __int8 *)(a1 + v27[1] + 136);
          if (v29 != 21 && v29 != 10 && (v29 != 9 || v27 + 2 == (_BYTE *)v6))
            break;
          v27 += 2;
          v28 -= 2;
        }
        while (v28 > 1);
      }
      *a4 = (uint64_t)v27;
      return 15;
    case 0xB:
      *a4 = (uint64_t)(a2 + 2);
      return 17;
    case 0xC:
      v32 = a2 + 2;
      v33 = 12;
      return big2_scanLit(v33, a1, v32, v6, (unsigned __int8 **)a4);
    case 0xD:
      v32 = a2 + 2;
      v33 = 13;
      return big2_scanLit(v33, a1, v32, v6, (unsigned __int8 **)a4);
    case 0x13:
      return big2_scanPoundName(a1, a2 + 2, v6, a4);
    case 0x14:
      *a4 = (uint64_t)(a2 + 2);
      return 25;
    case 0x16:
    case 0x18:
      goto LABEL_33;
    case 0x17:
    case 0x19:
    case 0x1A:
    case 0x1B:
      goto LABEL_32;
    case 0x1D:
      goto LABEL_29;
    case 0x1E:
      return big2_scanPercent(a1, a2 + 2, v6, a4);
    case 0x1F:
      *a4 = (uint64_t)(a2 + 2);
      return 23;
    case 0x20:
      v11 = a2 + 2;
      if (v6 - (uint64_t)(a2 + 2) < 2)
        return 4294967272;
      if (*v11)
        goto LABEL_112;
      v34 = *(unsigned __int8 *)(a1 + a2[3] + 136);
      if (v34 <= 31)
      {
        if ((v34 - 9) >= 3)
        {
          if (v34 == 15)
          {
            *a4 = (uint64_t)(a2 + 4);
            return 35;
          }
          if (v34 != 21)
          {
LABEL_112:
            result = 0;
            *a4 = (uint64_t)v11;
            return result;
          }
        }
LABEL_133:
        *a4 = (uint64_t)v11;
        return 24;
      }
      switch(v34)
      {
        case ' ':
        case '#':
        case '$':
          goto LABEL_133;
        case '!':
          *a4 = (uint64_t)(a2 + 4);
          result = 36;
          break;
        case '"':
          *a4 = (uint64_t)(a2 + 4);
          result = 37;
          break;
        default:
          goto LABEL_112;
      }
      break;
    case 0x23:
      *a4 = (uint64_t)(a2 + 2);
      return 38;
    case 0x24:
      *a4 = (uint64_t)(a2 + 2);
      return 21;
    default:
      goto LABEL_16;
  }
  return result;
}

uint64_t big2_contentTok(uint64_t a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 **a4)
{
  char v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  BOOL v45;
  int v46;

  if ((unint64_t)a2 >= a3)
    return 4294967292;
  v4 = a3 - (_BYTE)a2;
  v5 = (a3 - (_QWORD)a2) & 0xFFFFFFFFFFFFFFFELL;
  if (v5)
    v6 = ((a3 - (_QWORD)a2) & 1) == 0;
  else
    v6 = 1;
  if (!v6)
    a3 = (unint64_t)&a2[v5];
  if ((v4 & 1) != 0 && !v5)
    return 0xFFFFFFFFLL;
  v9 = *a2;
  if (v9 > 0xDB)
  {
    if (v9 - 220 < 4 || v9 == 255 && a2[1] > 0xFDu)
    {
LABEL_17:
      v7 = 0;
      *a4 = a2;
      return v7;
    }
    goto LABEL_28;
  }
  if (v9 - 216 < 4)
  {
LABEL_14:
    if ((uint64_t)(a3 - (_QWORD)a2) < 4)
      return 4294967294;
    v10 = a2 + 4;
    goto LABEL_29;
  }
  if (*a2)
  {
LABEL_28:
    v10 = a2 + 2;
LABEL_29:
    v14 = a3 - (_QWORD)v10;
    if ((uint64_t)(a3 - (_QWORD)v10) < 2)
    {
      v16 = v10;
LABEL_53:
      *a4 = v16;
      return 6;
    }
    while (1)
    {
      v15 = *v10;
      if (v15 > 0xDB)
        break;
      if (v15 - 216 >= 4)
      {
        if (!*v10)
        {
          switch(*(_BYTE *)(a1 + v10[1] + 136))
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 8:
            case 9:
            case 0xA:
              goto LABEL_54;
            case 4:
              if (v14 < 4)
                goto LABEL_54;
              v16 = v10 + 2;
              if (v10[2] || v10[3] != 93)
                goto LABEL_48;
              if (v14 < 6)
                goto LABEL_54;
              if (v10[4] || v10[5] != 62)
                goto LABEL_48;
              v7 = 0;
              v11 = v10 + 4;
              break;
            case 6:
              if (v14 <= 2)
                goto LABEL_54;
              v16 = v10 + 3;
              goto LABEL_48;
            case 7:
              goto LABEL_32;
            default:
              goto LABEL_47;
          }
          goto LABEL_79;
        }
        goto LABEL_47;
      }
LABEL_32:
      if (v14 <= 3)
        goto LABEL_54;
      v16 = v10 + 4;
LABEL_48:
      v14 = a3 - (_QWORD)v16;
      v10 = v16;
      if ((uint64_t)(a3 - (_QWORD)v16) <= 1)
        goto LABEL_53;
    }
    if (v15 == 255)
    {
      if (v10[1] > 0xFDu)
        goto LABEL_54;
    }
    else if (v15 - 220 < 4)
    {
LABEL_54:
      *a4 = v10;
      return 6;
    }
LABEL_47:
    v16 = v10 + 2;
    goto LABEL_48;
  }
  switch(*(_BYTE *)(a1 + a2[1] + 136))
  {
    case 0:
    case 1:
    case 8:
      goto LABEL_17;
    case 2:
      v11 = a2 + 2;
      v12 = a3 - (_QWORD)(a2 + 2);
      if (v12 < 2)
        return 0xFFFFFFFFLL;
      v13 = *v11;
      if (*v11 > 0xDBu)
      {
        if ((v13 - 220) < 4)
          goto LABEL_78;
        if ((_DWORD)v13 == 255)
        {
          LODWORD(v19) = a2[3];
          if (v19 > 0xFD)
            goto LABEL_78;
          goto LABEL_88;
        }
LABEL_87:
        LODWORD(v19) = a2[3];
LABEL_88:
        if (((namingBitmap[(v19 >> 5) | (8 * nmstrtPages[v13])] >> v19) & 1) == 0)
          goto LABEL_78;
LABEL_89:
        v20 = a2 + 4;
        v21 = a3 - (_QWORD)(a2 + 4);
        if (v21 < 2)
          return 0xFFFFFFFFLL;
        v22 = 0;
        while (1)
        {
          v23 = *v20;
          if (*v20 > 0xDBu)
            break;
          if (*v20)
          {
            if ((v23 - 216) < 4)
            {
LABEL_124:
              if ((unint64_t)v21 >= 4)
              {
LABEL_125:
                v7 = 0;
                *a4 = v20;
                return v7;
              }
              return 4294967294;
            }
LABEL_109:
            LODWORD(v24) = v20[1];
            goto LABEL_110;
          }
          v24 = v20[1];
          v25 = 2;
          switch(*(_BYTE *)(a1 + v24 + 136))
          {
            case 6:
              if ((unint64_t)v21 >= 3)
                goto LABEL_125;
              return 4294967294;
            case 7:
              goto LABEL_124;
            case 9:
            case 0xA:
            case 0x15:
              v35 = a3 - (_QWORD)v20 - 2;
              if (v35 < 2)
                return 0xFFFFFFFFLL;
              v36 = v20 + 4;
              while (2)
              {
                v37 = *(v36 - 2);
                if (!*(v36 - 2))
                {
                  v38 = *(v36 - 1);
                  switch(*(_BYTE *)(a1 + v38 + 136))
                  {
                    case 6:
                      if ((unint64_t)v35 >= 3)
                        goto LABEL_220;
                      return 4294967294;
                    case 7:
                      goto LABEL_195;
                    case 9:
                    case 0xA:
                    case 0x15:
                      v35 -= 2;
                      v36 += 2;
                      v7 = 0xFFFFFFFFLL;
                      if (v35 <= 1)
                        return v7;
                      continue;
                    case 0xB:
                      v20 = v36 - 2;
                      goto LABEL_211;
                    case 0x11:
                      v20 = v36 - 2;
                      goto LABEL_213;
                    case 0x16:
                    case 0x18:
                      return big2_scanAtts(a1, v36, a3, a4);
                    case 0x1D:
                      v37 = 0;
                      goto LABEL_218;
                    default:
                      goto LABEL_220;
                  }
                }
                break;
              }
              if ((v37 - 216) < 4)
              {
LABEL_195:
                if ((unint64_t)v35 < 4)
                  return 4294967294;
              }
              else
              {
                if ((v37 - 220) < 4)
                  goto LABEL_220;
                if ((_DWORD)v37 == 255)
                {
                  LODWORD(v38) = *(v36 - 1);
                  if (v38 > 0xFD)
                    goto LABEL_220;
                  v37 = 0xFFu;
                }
                else
                {
                  LODWORD(v38) = *(v36 - 1);
                }
LABEL_218:
                if (((namingBitmap[(v38 >> 5) | (8 * nmstrtPages[v37])] >> v38) & 1) != 0)
                  return big2_scanAtts(a1, v36, a3, a4);
              }
LABEL_220:
              v7 = 0;
              v11 = v36 - 2;
              goto LABEL_79;
            case 0xB:
LABEL_211:
              *a4 = v20 + 2;
              return 2;
            case 0x11:
LABEL_213:
              v11 = v20 + 2;
              if ((uint64_t)(a3 - (_QWORD)(v20 + 2)) < 2)
                return 0xFFFFFFFFLL;
              if (*v11 || v20[3] != 62)
                goto LABEL_78;
              *a4 = v20 + 4;
              return 4;
            case 0x16:
            case 0x18:
            case 0x19:
            case 0x1A:
            case 0x1B:
              break;
            case 0x17:
              if (v22)
                goto LABEL_125;
              v26 = v20 + 2;
              v27 = a3 - (_QWORD)(v20 + 2);
              if (v27 < 2)
                return 0xFFFFFFFFLL;
              v28 = *v26;
              if (*v26 > 0xDBu)
              {
                if ((_DWORD)v28 == 255)
                {
                  LODWORD(v29) = v20[3];
                  if (v29 > 0xFD)
                    goto LABEL_174;
                  goto LABEL_121;
                }
                if ((v28 - 220) < 4)
                  goto LABEL_174;
                goto LABEL_120;
              }
              if (*v26)
              {
                if ((v28 - 216) < 4)
                  goto LABEL_146;
LABEL_120:
                LODWORD(v29) = v20[3];
LABEL_121:
                if (((namingBitmap[(v29 >> 5) | (8 * nmstrtPages[v28])] >> v29) & 1) == 0)
                  goto LABEL_174;
                v22 = 1;
LABEL_123:
                v25 = 4;
                break;
              }
              v29 = v20[3];
              v30 = *(unsigned __int8 *)(a1 + v29 + 136);
              if (v30 <= 0x15)
              {
                if (v30 != 5)
                {
                  if (v30 == 6)
                  {
                    if ((unint64_t)v27 < 3)
                      return 4294967294;
                  }
                  else if (v30 == 7)
                  {
LABEL_146:
                    if ((unint64_t)v27 < 4)
                      return 4294967294;
                  }
                }
LABEL_174:
                v7 = 0;
                *a4 = v26;
                return v7;
              }
              v22 = 1;
              if (v30 == 22)
                goto LABEL_123;
              v25 = 4;
              if (v30 != 24)
              {
                if (v30 != 29)
                  goto LABEL_174;
                goto LABEL_121;
              }
              break;
            case 0x1D:
              goto LABEL_110;
            default:
              goto LABEL_125;
          }
LABEL_112:
          v20 += v25;
          v21 = a3 - (_QWORD)v20;
          v7 = 0xFFFFFFFFLL;
          if ((uint64_t)(a3 - (_QWORD)v20) <= 1)
            return v7;
        }
        if ((_DWORD)v23 != 255)
        {
          if ((v23 - 220) < 4)
            goto LABEL_125;
          goto LABEL_109;
        }
        LODWORD(v24) = v20[1];
        if (v24 > 0xFD)
          goto LABEL_125;
LABEL_110:
        if (((namingBitmap[(v24 >> 5) | (8 * namePages[v23])] >> v24) & 1) == 0)
          goto LABEL_125;
        v25 = 2;
        goto LABEL_112;
      }
      if ((v13 - 216) < 4)
      {
LABEL_24:
        if ((unint64_t)v12 < 4)
          return 4294967294;
LABEL_78:
        v7 = 0;
        goto LABEL_79;
      }
      if (*v11)
        goto LABEL_87;
      v19 = a2[3];
      switch(*(_BYTE *)(a1 + v19 + 136))
      {
        case 5:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x17:
          goto LABEL_78;
        case 6:
          if ((unint64_t)v12 >= 3)
            goto LABEL_78;
          return 4294967294;
        case 7:
          goto LABEL_24;
        case 0xF:
          return big2_scanPi(a1, a2 + 4, a3, (uint64_t *)a4);
        case 0x10:
          v11 = a2 + 4;
          if ((uint64_t)(a3 - (_QWORD)(a2 + 4)) < 2)
            return 0xFFFFFFFFLL;
          if (*v11)
            goto LABEL_78;
          v31 = *(unsigned __int8 *)(a1 + a2[5] + 136);
          if (v31 != 20)
          {
            if (v31 != 27)
              goto LABEL_78;
            return big2_scanComment(a1, a2 + 6, a3, a4);
          }
          v11 = a2 + 6;
          if ((uint64_t)(a3 - (_QWORD)(a2 + 6)) < 12)
            return 0xFFFFFFFFLL;
          v40 = 0;
          while (!*v11 && v11[1] == big2_scanCdataSection_CDATA_LSQB[v40])
          {
            ++v40;
            v11 += 2;
            if (v40 == 6)
            {
              v7 = 8;
              v11 = a2 + 18;
              goto LABEL_79;
            }
          }
          goto LABEL_78;
        case 0x11:
          v11 = a2 + 4;
          v32 = a3 - (_QWORD)(a2 + 4);
          if (v32 < 2)
            return 0xFFFFFFFFLL;
          v33 = *v11;
          if (*v11 > 0xDBu)
          {
            if ((v33 - 220) < 4)
              goto LABEL_78;
            if ((_DWORD)v33 == 255)
            {
              LODWORD(v34) = a2[5];
              if (v34 > 0xFD)
                goto LABEL_78;
              goto LABEL_176;
            }
LABEL_175:
            LODWORD(v34) = a2[5];
            goto LABEL_176;
          }
          if ((v33 - 216) < 4)
          {
LABEL_137:
            if ((unint64_t)v32 < 4)
              return 4294967294;
            goto LABEL_78;
          }
          if (*v11)
            goto LABEL_175;
          v7 = 0;
          v34 = a2[5];
          v39 = *(unsigned __int8 *)(a1 + v34 + 136);
          if (v39 <= 0x15)
          {
            if (v39 == 6)
            {
              if ((unint64_t)v32 < 3)
                return 4294967294;
              goto LABEL_78;
            }
            if (v39 != 7)
              goto LABEL_79;
            goto LABEL_137;
          }
          if (v39 != 22 && v39 != 24)
          {
            if (v39 != 29)
              goto LABEL_79;
LABEL_176:
            if (((namingBitmap[(v34 >> 5) | (8 * nmstrtPages[v33])] >> v34) & 1) == 0)
              goto LABEL_78;
          }
          if ((uint64_t)(a3 - (_QWORD)a2 - 6) < 2)
            return 0xFFFFFFFFLL;
          v41 = a3 - (_QWORD)a2 - 8;
          v11 = a2 + 8;
          while (1)
          {
            v42 = *(v11 - 2);
            if (*(v11 - 2) > 0xDBu)
            {
              if ((_DWORD)v42 == 255)
              {
                LODWORD(v43) = *(v11 - 1);
                if (v43 > 0xFD)
                  goto LABEL_207;
                goto LABEL_191;
              }
              if ((v42 - 220) < 4)
                goto LABEL_207;
LABEL_190:
              LODWORD(v43) = *(v11 - 1);
              goto LABEL_191;
            }
            if (*(v11 - 2))
            {
              if ((v42 - 216) < 4)
              {
LABEL_206:
                if ((unint64_t)(v41 + 2) < 4)
                  return 4294967294;
LABEL_207:
                v7 = 0;
                v11 -= 2;
                goto LABEL_79;
              }
              goto LABEL_190;
            }
            v43 = *(v11 - 1);
            v44 = *(unsigned __int8 *)(a1 + v43 + 136);
            if ((v44 - 22) < 6)
              goto LABEL_192;
            if (v44 != 29)
              break;
LABEL_191:
            if (((namingBitmap[(v43 >> 5) | (8 * namePages[v42])] >> v43) & 1) == 0)
              goto LABEL_207;
LABEL_192:
            v11 += 2;
            v7 = 0xFFFFFFFFLL;
            v45 = v41 <= 1;
            v41 -= 2;
            if (v45)
              return v7;
          }
          switch(*(_BYTE *)(a1 + v43 + 136))
          {
            case 6:
              if ((unint64_t)(v41 + 2) >= 3)
                goto LABEL_207;
              return 4294967294;
            case 7:
              goto LABEL_206;
            case 8:
              goto LABEL_207;
            case 9:
            case 0xA:
              goto LABEL_222;
            case 0xB:
              goto LABEL_233;
            default:
              if (v44 != 21)
                goto LABEL_207;
LABEL_222:
              if (v41 < 2)
                return 0xFFFFFFFFLL;
              break;
          }
          while (1)
          {
            if (*v11)
              goto LABEL_78;
            v46 = *(unsigned __int8 *)(a1 + v11[1] + 136);
            if ((v46 - 9) >= 2 && v46 != 21)
              break;
            v11 += 2;
            v41 -= 2;
            v7 = 0xFFFFFFFFLL;
            if (v41 <= 1)
              return v7;
          }
          if (v46 != 11)
            goto LABEL_78;
          v11 += 2;
LABEL_233:
          v7 = 5;
LABEL_79:
          *a4 = v11;
          return v7;
        case 0x16:
        case 0x18:
          goto LABEL_89;
        default:
          if (*(_BYTE *)(a1 + v19 + 136) != 29)
            goto LABEL_78;
          goto LABEL_88;
      }
    case 3:
      return big2_scanRef(a1, a2 + 2, a3, a4);
    case 4:
      v10 = a2 + 2;
      if ((uint64_t)(a3 - (_QWORD)(a2 + 2)) < 2)
        return 4294967291;
      if (*v10 || a2[3] != 93)
        goto LABEL_29;
      v17 = a2 + 4;
      if ((uint64_t)(a3 - (_QWORD)(a2 + 4)) < 2)
        return 4294967291;
      if (!*v17 && a2[5] == 62)
      {
        v7 = 0;
        *a4 = v17;
        return v7;
      }
      goto LABEL_29;
    case 5:
      if ((uint64_t)(a3 - (_QWORD)a2) >= 2)
        goto LABEL_28;
      return 4294967294;
    case 6:
      if ((uint64_t)(a3 - (_QWORD)a2) < 3)
        return 4294967294;
      v10 = a2 + 3;
      goto LABEL_29;
    case 7:
      goto LABEL_14;
    case 9:
      v18 = a2 + 2;
      if ((uint64_t)(a3 - (_QWORD)(a2 + 2)) < 2)
        return 4294967293;
      if (!*v18 && *(_BYTE *)(a1 + a2[3] + 136) == 10)
        v18 = a2 + 4;
LABEL_74:
      *a4 = v18;
      return 7;
    case 0xA:
      v18 = a2 + 2;
      goto LABEL_74;
    default:
      goto LABEL_28;
  }
}

uint64_t big2_cdataSectionTok(uint64_t a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 **a4)
{
  unint64_t v4;
  BOOL v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;

  if ((unint64_t)a2 >= a3)
    return 4294967292;
  v4 = (a3 - (_QWORD)a2) & 0xFFFFFFFFFFFFFFFELL;
  if (v4)
    v5 = ((a3 - (_QWORD)a2) & 1) == 0;
  else
    v5 = 1;
  v6 = &a2[v4];
  if (v5)
    v6 = (unsigned __int8 *)a3;
  if ((((_BYTE)a3 - (_BYTE)a2) & 1) == 0 || v4)
  {
    v8 = *a2;
    if (v8 > 0xDB)
    {
      if (v8 - 220 < 4 || v8 == 255 && a2[1] > 0xFDu)
      {
        v7 = 0;
        goto LABEL_51;
      }
    }
    else
    {
      if (v8 - 216 < 4)
      {
LABEL_13:
        if (v6 - a2 < 4)
          return 4294967294;
        v9 = a2 + 4;
        goto LABEL_30;
      }
      if (!*a2)
      {
        v7 = 0;
        switch(*(_BYTE *)(a1 + a2[1] + 136))
        {
          case 0:
          case 1:
          case 8:
            goto LABEL_51;
          case 4:
            v9 = a2 + 2;
            if (v6 - (a2 + 2) < 2)
              return 0xFFFFFFFFLL;
            if (*v9 || a2[3] != 93)
              goto LABEL_30;
            if (v6 - (a2 + 4) < 2)
              return 0xFFFFFFFFLL;
            if (a2[4] || a2[5] != 62)
              goto LABEL_30;
            a2 += 6;
            v7 = 40;
            goto LABEL_51;
          case 5:
            if (v6 - a2 >= 2)
              goto LABEL_29;
            return 4294967294;
          case 6:
            if (v6 - a2 < 3)
              return 4294967294;
            v9 = a2 + 3;
            goto LABEL_30;
          case 7:
            goto LABEL_13;
          case 9:
            v9 = a2 + 2;
            if (v6 - (a2 + 2) < 2)
              return 0xFFFFFFFFLL;
            if (*v9)
            {
              v7 = 7;
              goto LABEL_50;
            }
            if (*(_BYTE *)(a1 + a2[3] + 136) == 10)
              a2 += 4;
            else
              a2 += 2;
LABEL_61:
            v7 = 7;
            break;
          case 0xA:
            a2 += 2;
            goto LABEL_61;
          default:
            goto LABEL_29;
        }
        goto LABEL_51;
      }
    }
LABEL_29:
    v9 = a2 + 2;
LABEL_30:
    v10 = v6 - v9;
    if (v6 - v9 >= 2)
    {
      while (1)
      {
        v11 = *v9;
        if (v11 > 0xDB)
          break;
        if (v11 - 216 < 4)
          goto LABEL_33;
        v12 = 2;
        if (!*v9)
        {
          v13 = *(unsigned __int8 *)(a1 + v9[1] + 136);
          if (v13 <= 0xA)
          {
            if (v13 == 6)
            {
              if (v10 < 3)
                goto LABEL_49;
              v12 = 3;
              goto LABEL_48;
            }
            if (v13 != 7)
            {
              v12 = 2;
              if (((1 << v13) & 0x713) != 0)
                goto LABEL_49;
              goto LABEL_48;
            }
LABEL_33:
            if (v10 < 4)
              goto LABEL_49;
            v12 = 4;
            goto LABEL_48;
          }
          goto LABEL_37;
        }
LABEL_48:
        v9 += v12;
        v10 = v6 - v9;
        if (v6 - v9 <= 1)
          goto LABEL_49;
      }
      if (v11 != 255)
      {
        v12 = 2;
        if (v11 - 220 < 4)
          goto LABEL_49;
        goto LABEL_48;
      }
      if (v9[1] > 0xFDu)
        goto LABEL_49;
LABEL_37:
      v12 = 2;
      goto LABEL_48;
    }
LABEL_49:
    v7 = 6;
LABEL_50:
    a2 = v9;
LABEL_51:
    *a4 = a2;
    return v7;
  }
  return 0xFFFFFFFFLL;
}

uint64_t big2_ignoreSectionTok(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, _QWORD *a4)
{
  unsigned __int8 *v4;
  unint64_t v5;
  int v6;
  unsigned int v7;
  unsigned __int8 *v8;
  uint64_t v9;

  v4 = &a2[(a3 - a2) & 0xFFFFFFFFFFFFFFFELL];
  if (((a3 - a2) & 1) == 0)
    v4 = a3;
  v5 = v4 - a2;
  if (v4 - a2 < 2)
    return 0xFFFFFFFFLL;
  v6 = 0;
  while (1)
  {
    v7 = *a2;
    if (v7 > 0xDB)
    {
      if (v7 == 255)
      {
        if (a2[1] > 0xFDu)
          goto LABEL_37;
      }
      else if (v7 - 220 < 4)
      {
LABEL_37:
        v9 = 0;
        goto LABEL_38;
      }
      goto LABEL_22;
    }
    if (v7 - 216 >= 4)
      break;
LABEL_7:
    if (v5 < 4)
      return 4294967294;
    v8 = a2 + 4;
LABEL_23:
    v5 = v4 - v8;
    a2 = v8;
    if (v4 - v8 <= 1)
      return 0xFFFFFFFFLL;
  }
  if (*a2)
  {
LABEL_22:
    v8 = a2 + 2;
    goto LABEL_23;
  }
  v9 = 0;
  switch(*(_BYTE *)(a1 + a2[1] + 136))
  {
    case 0:
    case 1:
    case 8:
      goto LABEL_38;
    case 2:
      v8 = a2 + 2;
      if (v4 - (a2 + 2) < 2)
        return 0xFFFFFFFFLL;
      if (*v8 || a2[3] != 33)
        goto LABEL_23;
      v8 = a2 + 4;
      if (v4 - (a2 + 4) < 2)
        return 0xFFFFFFFFLL;
      if (!*v8 && a2[5] == 91)
      {
        ++v6;
        v8 = a2 + 6;
      }
      goto LABEL_23;
    case 4:
      v8 = a2 + 2;
      if (v4 - (a2 + 2) < 2)
        return 0xFFFFFFFFLL;
      if (*v8 || a2[3] != 93)
        goto LABEL_23;
      v8 = a2 + 4;
      if (v4 - (a2 + 4) < 2)
        return 0xFFFFFFFFLL;
      if (*v8 || a2[5] != 62)
        goto LABEL_23;
      v8 = a2 + 6;
      if (v6)
      {
        --v6;
        goto LABEL_23;
      }
      v9 = 42;
      a2 += 6;
LABEL_38:
      *a4 = a2;
      return v9;
    case 6:
      if (v5 < 3)
        return 4294967294;
      v8 = a2 + 3;
      goto LABEL_23;
    case 7:
      goto LABEL_7;
    default:
      goto LABEL_22;
  }
}

uint64_t big2_attributeValueTok(uint64_t a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 **a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t result;
  unsigned __int8 *v7;

  if ((unint64_t)a2 >= a3)
    return 4294967292;
  if ((uint64_t)(a3 - (_QWORD)a2) < 2)
    return 0xFFFFFFFFLL;
  v4 = a2;
  while (*v4 - 216 < 4)
  {
LABEL_5:
    v5 = 4;
LABEL_6:
    v4 += v5;
    if ((uint64_t)(a3 - (_QWORD)v4) <= 1)
    {
LABEL_27:
      *a4 = v4;
      return 6;
    }
  }
  if (*v4)
  {
    v5 = 2;
    goto LABEL_6;
  }
  v5 = 2;
  switch(*(_BYTE *)(a1 + v4[1] + 136))
  {
    case 2:
      result = 0;
      *a4 = v4;
      return result;
    case 3:
      if (v4 != a2)
        goto LABEL_27;
      return big2_scanRef(a1, a2 + 2, a3, a4);
    case 4:
    case 5:
    case 8:
      goto LABEL_6;
    case 6:
      v5 = 3;
      goto LABEL_6;
    case 7:
      goto LABEL_5;
    case 9:
      if (v4 != a2)
        goto LABEL_27;
      v7 = a2 + 2;
      if ((uint64_t)(a3 - (_QWORD)(a2 + 2)) < 2)
      {
        result = 4294967293;
      }
      else
      {
        if (!*v7 && *(_BYTE *)(a1 + a2[3] + 136) == 10)
          v7 = a2 + 4;
LABEL_29:
        *a4 = v7;
        result = 7;
      }
      break;
    case 0xA:
      if (v4 != a2)
        goto LABEL_27;
      v7 = a2 + 2;
      goto LABEL_29;
    default:
      if (*(_BYTE *)(a1 + v4[1] + 136) != 21)
        goto LABEL_6;
      if (v4 != a2)
        goto LABEL_27;
      *a4 = a2 + 2;
      result = 39;
      break;
  }
  return result;
}

uint64_t big2_entityValueTok(uint64_t a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 **a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t result;
  unsigned __int8 *v7;

  if ((unint64_t)a2 >= a3)
    return 4294967292;
  if ((uint64_t)(a3 - (_QWORD)a2) < 2)
    return 0xFFFFFFFFLL;
  v4 = a2;
  while (*v4 - 216 < 4)
  {
LABEL_5:
    v5 = 4;
LABEL_6:
    v4 += v5;
    if ((uint64_t)(a3 - (_QWORD)v4) <= 1)
    {
LABEL_28:
      *a4 = v4;
      return 6;
    }
  }
  if (*v4)
  {
    v5 = 2;
    goto LABEL_6;
  }
  v5 = 2;
  switch(*(_BYTE *)(a1 + v4[1] + 136))
  {
    case 3:
      if (v4 != a2)
        goto LABEL_28;
      return big2_scanRef(a1, a2 + 2, a3, a4);
    case 4:
    case 5:
    case 8:
      goto LABEL_6;
    case 6:
      v5 = 3;
      goto LABEL_6;
    case 7:
      goto LABEL_5;
    case 9:
      if (v4 != a2)
        goto LABEL_28;
      v7 = a2 + 2;
      if ((uint64_t)(a3 - (_QWORD)(a2 + 2)) < 2)
      {
        result = 4294967293;
      }
      else
      {
        if (!*v7 && *(_BYTE *)(a1 + a2[3] + 136) == 10)
          v7 = a2 + 4;
LABEL_31:
        *a4 = v7;
        result = 7;
      }
      break;
    case 0xA:
      if (v4 != a2)
        goto LABEL_28;
      v7 = a2 + 2;
      goto LABEL_31;
    default:
      if (*(_BYTE *)(a1 + v4[1] + 136) != 30)
        goto LABEL_6;
      if (v4 != a2)
        goto LABEL_28;
      LODWORD(result) = big2_scanPercent(a1, a2 + 2, a3, a4);
      if ((_DWORD)result == 22)
        result = 0;
      else
        result = result;
      break;
  }
  return result;
}

BOOL big2_nameMatchesAscii(uint64_t a1, _BYTE *a2, _BYTE *a3, _BYTE *a4)
{
  int v4;
  unsigned __int8 *v5;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  int v9;

  v4 = *a4;
  if (!*a4)
    return a2 == a3;
  v5 = a4 + 1;
  v6 = a3 - a2;
  while (1)
  {
    v8 = __OFSUB__(v6, 2);
    v7 = v6 - 2 < 0;
    v6 -= 2;
    if (v7 != v8 || *a2 || a2[1] != v4)
      break;
    a2 += 2;
    v9 = *v5++;
    v4 = v9;
    if (!v9)
      return a2 == a3;
  }
  return 0;
}

uint64_t big2_nameLength(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *i;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;

  for (i = a2; ; i += v4)
  {
    v3 = *i;
    if (v3 > 0xDB)
    {
      if (v3 == 255)
      {
        if (i[1] > 0xFDu)
          return ((_DWORD)i - (_DWORD)a2);
        v4 = 2;
      }
      else
      {
        v4 = 2;
        if (v3 - 220 < 4)
          return ((_DWORD)i - (_DWORD)a2);
      }
      continue;
    }
    if (v3 - 216 < 4)
    {
      v4 = 4;
      continue;
    }
    v4 = 2;
    if (!*i)
      break;
LABEL_5:
    ;
  }
  v5 = *(unsigned __int8 *)(a1 + i[1] + 136) - 5;
  if (v5 < 0x19 && ((0x17E0007u >> v5) & 1) != 0)
  {
    v4 = qword_1DEC5E740[(char)v5];
    goto LABEL_5;
  }
  return ((_DWORD)i - (_DWORD)a2);
}

_BYTE *big2_skipS(uint64_t a1, _BYTE *a2)
{
  unsigned int v2;
  BOOL v3;
  int v4;
  int v6;

  if (!*a2)
  {
    do
    {
      v2 = *(unsigned __int8 *)(a1 + a2[1] + 136);
      v3 = v2 > 0x15;
      v4 = (1 << v2) & 0x200600;
      if (v3 || v4 == 0)
        break;
      v6 = a2[2];
      a2 += 2;
    }
    while (!v6);
  }
  return a2;
}

uint64_t big2_getAtts(uint64_t a1, unsigned __int8 *a2, int a3, uint64_t a4)
{
  uint64_t result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;

  result = 0;
  v6 = 0;
  v7 = 1;
  while (1)
  {
    while (1)
    {
      v8 = v7;
      v9 = a2;
      v10 = a2 + 2;
      v11 = a2[2];
      if (v11 > 0xDB)
        break;
      if (v11 - 216 >= 4)
      {
        if (a2[2])
          goto LABEL_16;
        v14 = a2 + 3;
        v13 = a2[3];
        a2 += 2;
        switch(*(_BYTE *)(a1 + v13 + 136))
        {
          case 3:
            a2 = v10;
            if ((int)result < a3)
            {
              *(_BYTE *)(a4 + 32 * (int)result + 24) = 0;
              a2 = v10;
            }
            continue;
          case 5:
          case 0x16:
          case 0x18:
          case 0x1D:
            goto LABEL_16;
          case 6:
            a2 = v9 + 3;
            if (!(_DWORD)v7)
            {
              v7 = 1;
              a2 = v9 + 3;
              if ((int)result < a3)
              {
                v17 = a4 + 32 * (int)result;
                *(_QWORD *)v17 = v10;
                *(_BYTE *)(v17 + 24) = 1;
                a2 = v14;
              }
            }
            continue;
          case 7:
            goto LABEL_4;
          case 9:
          case 0xA:
            v7 = 0;
            a2 = v10;
            if ((_DWORD)v8 == 1)
              continue;
            a2 = v10;
            v7 = v8;
            if ((_DWORD)v8 != 2)
              continue;
            a2 = v10;
            if ((int)result >= a3)
              continue;
            *(_BYTE *)(a4 + 32 * (int)result + 24) = 0;
            goto LABEL_66;
          case 0xB:
          case 0x11:
            v7 = 2;
            a2 = v10;
            if ((_DWORD)v8 == 2)
              continue;
            return result;
          case 0xC:
            if ((_DWORD)v7 == 2)
            {
              v7 = 2;
              a2 = v10;
              if (v6 == 12)
              {
                if ((int)result < a3)
                  *(_QWORD *)(a4 + 32 * (int)result + 16) = v10;
                v7 = 0;
                result = (result + 1);
                v6 = 12;
                a2 = v10;
              }
              continue;
            }
            v6 = 12;
            v7 = 2;
            a2 = v10;
            if ((int)result >= a3)
              continue;
            *(_QWORD *)(a4 + 32 * (int)result + 8) = v9 + 4;
            v6 = 12;
            goto LABEL_66;
          case 0xD:
            if ((_DWORD)v7 == 2)
            {
              v7 = 2;
              a2 = v10;
              if (v6 == 13)
              {
                if ((int)result < a3)
                  *(_QWORD *)(a4 + 32 * (int)result + 16) = v10;
                v7 = 0;
                result = (result + 1);
                v6 = 13;
                a2 = v10;
              }
              continue;
            }
            v6 = 13;
            v7 = 2;
            a2 = v10;
            if ((int)result >= a3)
              continue;
            *(_QWORD *)(a4 + 32 * (int)result + 8) = v9 + 4;
            v6 = 13;
            goto LABEL_66;
          case 0x15:
            v7 = 0;
            a2 = v10;
            if ((_DWORD)v8 == 1)
              continue;
            a2 = v10;
            v7 = v8;
            if ((_DWORD)v8 != 2)
              continue;
            a2 = v10;
            if ((int)result >= a3)
              continue;
            v18 = a4 + 32 * (int)result;
            v20 = *(unsigned __int8 *)(v18 + 24);
            v19 = (_BYTE *)(v18 + 24);
            v7 = 2;
            a2 = v10;
            if (!v20)
              continue;
            if (v10 == *(unsigned __int8 **)(a4 + 32 * (int)result + 8) || (_DWORD)v13 != 32)
              goto LABEL_65;
            v21 = v9[4];
            if (v21 > 0xDB)
            {
              if (v21 - 220 < 4)
              {
                v22 = 8;
                goto LABEL_64;
              }
              if (v21 == 255 && v9[5] > 0xFDu)
              {
                v22 = 0;
                goto LABEL_64;
              }
LABEL_63:
              v22 = 29;
              goto LABEL_64;
            }
            if (v21 - 216 < 4)
            {
              v22 = 7;
              goto LABEL_64;
            }
            if (v9[4])
              goto LABEL_63;
            v23 = v9[5];
            if (v23 == 32)
              goto LABEL_65;
            v22 = *(unsigned __int8 *)(a1 + v23 + 136);
LABEL_64:
            v7 = 2;
            a2 = v10;
            if (v22 != v6)
              continue;
LABEL_65:
            *v19 = 0;
LABEL_66:
            v7 = 2;
            a2 = v10;
            break;
          default:
            continue;
        }
      }
      else
      {
LABEL_4:
        if (!(_DWORD)v7)
        {
          v8 = 1;
          if ((int)result < a3)
          {
            v16 = a4 + 32 * (int)result;
            *(_QWORD *)v16 = v10;
            *(_BYTE *)(v16 + 24) = 1;
          }
        }
        a2 = v9 + 4;
        v7 = v8;
      }
    }
    a2 += 2;
    if (v11 - 220 >= 4)
    {
      if (v11 == 255)
      {
        v12 = v9[3] <= 0xFDu && (_DWORD)v7 == 0;
        a2 = v10;
        if (v12)
          goto LABEL_17;
      }
      else
      {
LABEL_16:
        a2 = v10;
        if (!(_DWORD)v7)
        {
LABEL_17:
          v7 = 1;
          a2 = v10;
          if ((int)result < a3)
          {
            v15 = a4 + 32 * (int)result;
            *(_QWORD *)v15 = v10;
            *(_BYTE *)(v15 + 24) = 1;
            a2 = v10;
          }
        }
      }
    }
  }
}

uint64_t big2_charRefNumber(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  char *i;
  int v4;
  int v5;
  char *j;
  int v7;

  if (!a2[4] && a2[5] == 120)
  {
    v2 = 0;
    for (i = a2 + 7; ; i += 2)
    {
      if (!*(i - 1))
      {
        v4 = *i;
        if (v4 == 59)
          return checkCharRefNumber(v2);
        v5 = v4 - 48;
        if ((v4 - 48) <= 0x36)
        {
          if (((1 << v5) & 0x3FF) != 0)
          {
            v2 = v5 | (16 * v2);
          }
          else if (((1 << v5) & 0x7E0000) != 0)
          {
            v2 = (v4 + 16 * v2 - 55);
          }
          else
          {
            if (((1 << v5) & 0x7E000000000000) == 0)
              continue;
            v2 = (v4 + 16 * v2 - 87);
          }
          if ((int)v2 >= 1114112)
            return 0xFFFFFFFFLL;
        }
      }
    }
  }
  v2 = 0;
  for (j = a2 + 5; *(j - 1); j += 2)
  {
    v7 = -1;
LABEL_19:
    v2 = (v7 + 10 * v2 - 48);
    if ((int)v2 >= 1114112)
      return 0xFFFFFFFFLL;
  }
  v7 = *j;
  if (v7 != 59)
    goto LABEL_19;
  return checkCharRefNumber(v2);
}

uint64_t big2_predefinedEntityName(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  int v7;

  v3 = (a3 - (uint64_t)a2) / 2;
  if (v3 == 4)
  {
    if (!*a2)
    {
      v7 = (char)a2[1];
      if (v7 == 97)
      {
        if (!a2[2] && a2[3] == 112 && !a2[4] && a2[5] == 111 && !a2[6] && a2[7] == 115)
          return 39;
      }
      else if (v7 == 113 && !a2[2] && a2[3] == 117 && !a2[4] && a2[5] == 111 && !a2[6] && a2[7] == 116)
      {
        return 34;
      }
    }
    return 0;
  }
  if (v3 == 3)
  {
    if (!*a2 && a2[1] == 97 && !a2[2] && a2[3] == 109 && !a2[4] && a2[5] == 112)
      return 38;
    return 0;
  }
  if (v3 != 2 || a2[2] || a2[3] != 116 || *a2)
    return 0;
  v4 = a2[1];
  if (v4 == 103)
    v5 = 62;
  else
    v5 = 0;
  if (v4 == 108)
    return 60;
  else
    return v5;
}

uint64_t big2_updatePosition(uint64_t result, unsigned __int8 *a2, uint64_t a3, _QWORD *a4)
{
  unsigned __int8 *v4;

  if (a3 - (uint64_t)a2 >= 2)
  {
    do
    {
      if (*a2 - 216 >= 4)
      {
        if (!*a2)
        {
          switch(*(_BYTE *)(result + a2[1] + 136))
          {
            case 6:
              a2 += 3;
              goto LABEL_7;
            case 7:
              goto LABEL_3;
            case 9:
              ++*a4;
              v4 = a2 + 2;
              if (a3 - (uint64_t)(a2 + 2) >= 2 && !*v4 && *(_BYTE *)(result + a2[3] + 136) == 10)
                v4 = a2 + 4;
              a4[1] = 0;
              a2 = v4;
              break;
            case 0xA:
              ++*a4;
              a4[1] = 0;
              a2 += 2;
              break;
            default:
              goto LABEL_6;
          }
          continue;
        }
LABEL_6:
        a2 += 2;
      }
      else
      {
LABEL_3:
        a2 += 4;
      }
LABEL_7:
      ++a4[1];
    }
    while (a3 - (uint64_t)a2 > 1);
  }
  return result;
}

uint64_t big2_isPublicId(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t result;

  v4 = (_BYTE *)(a2 + 2);
  v5 = a3 - (a2 + 2) - 2;
  if (v5 >= 2)
  {
    do
    {
      if (*v4)
      {
LABEL_15:
        result = 0;
        *a4 = v4;
        return result;
      }
      v6 = v4[1];
      v7 = (char)v6;
      v8 = *(unsigned __int8 *)(a1 + v6 + 136);
      if (v8 <= 0x23)
      {
        if (((1 << v8) & 0xFCB8FE600) != 0)
          goto LABEL_5;
        if (((1 << v8) & 0x4400000) != 0)
        {
          if ((v7 & 0x80000000) == 0)
            goto LABEL_5;
        }
        else if (v8 == 21)
        {
          if (v7 == 9)
            goto LABEL_15;
          goto LABEL_5;
        }
      }
      if (v7 != 64 && v7 != 36)
        goto LABEL_15;
LABEL_5:
      v4 += 2;
      v5 -= 2;
    }
    while (v5 > 1);
  }
  return 1;
}

uint64_t big2_toUtf8(uint64_t a1, unsigned __int8 **a2, uint64_t a3, _BYTE **a4, _BYTE *a5)
{
  unsigned __int8 *v5;
  int64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  _BYTE *v11;
  unint64_t v12;
  char v13;
  char v14;
  _BYTE *v15;
  _BYTE *v16;
  unsigned int v17;
  _BYTE *v18;
  unsigned __int8 v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t result;

  v5 = *a2;
  v6 = (a3 - (_QWORD)*a2) & 0xFFFFFFFFFFFFFFFELL;
  if (v6 >= 1)
  {
    v7 = &v5[v6];
    do
    {
      v8 = v5[1];
      v9 = (char)v8;
      v10 = *v5;
      if (v10 - 1 >= 7)
      {
        if (v10 - 216 < 4)
        {
          v16 = *a4;
          if (a5 - *a4 < 4)
            goto LABEL_21;
          if (v7 - v5 < 4)
          {
            result = 1;
            goto LABEL_23;
          }
          v17 = ((v8 >> 6) & 0xFFFFFFF3 | (4 * (v10 & 3))) + 1;
          *a4 = v16 + 1;
          *v16 = (v17 >> 2) | 0xF0;
          LOBYTE(v17) = (v8 >> 2) & 0xF | (16 * (v17 & 3)) | 0x80;
          v18 = (*a4)++;
          *v18 = v17;
          v19 = v5[2];
          v5 += 2;
          LOBYTE(v18) = v5[1];
          v20 = (*a4)++;
          *v20 = (v18 >> 6) & 0xC3 | (16 * (v9 & 3)) | (4 * (v19 & 3)) | 0x80;
          LOBYTE(v9) = v18 & 0x3F | 0x80;
          v21 = *a4;
          goto LABEL_11;
        }
        if (*v5)
        {
          v22 = *a4;
          if (a5 - *a4 < 3)
          {
LABEL_21:
            result = 2;
            goto LABEL_23;
          }
          *a4 = v22 + 1;
          *v22 = (v10 >> 4) | 0xE0;
          v13 = (4 * (v10 & 0xF)) | (v9 >> 6) | 0x80;
          v11 = *a4;
          goto LABEL_6;
        }
        if (((char)v8 & 0x80000000) == 0)
        {
          v21 = *a4;
          if (*a4 == a5)
            goto LABEL_21;
LABEL_11:
          *a4 = v21 + 1;
          *v21 = v9;
          goto LABEL_12;
        }
      }
      v11 = *a4;
      if (a5 - *a4 < 2)
        goto LABEL_21;
      HIDWORD(v12) = *v5;
      LODWORD(v12) = v9 << 24;
      v13 = (v12 >> 30) | 0xC0;
LABEL_6:
      *a4 = v11 + 1;
      *v11 = v13;
      v14 = v9 & 0x3F | 0x80;
      v15 = (*a4)++;
      *v15 = v14;
LABEL_12:
      v5 += 2;
    }
    while (v5 < v7);
  }
  result = 0;
LABEL_23:
  *a2 = v5;
  return result;
}

uint64_t big2_toUtf16(uint64_t a1, unsigned __int16 **a2, uint64_t a3, unint64_t *a4, unint64_t a5)
{
  unsigned __int16 *v5;
  int64_t v6;
  unsigned __int16 *v7;
  int v8;
  uint64_t result;
  _WORD *v10;

  v5 = *a2;
  v6 = (a3 - (_QWORD)*a2) & 0xFFFFFFFFFFFFFFFELL;
  v7 = (unsigned __int16 *)((char *)*a2 + v6);
  if (v6 <= (uint64_t)(a5 - *a4))
  {
    result = 0;
  }
  else
  {
    v8 = *(_BYTE *)(v7 - 1) & 0xF8;
    result = v8 == 216;
    if (v8 == 216)
      --v7;
  }
  while (v5 < v7)
  {
    v10 = (_WORD *)*a4;
    if (*a4 >= a5)
    {
      if (*a4 == a5)
        return 2;
      return result;
    }
    *v10 = bswap32(*v5) >> 16;
    *a4 = (unint64_t)(v10 + 1);
    v5 = *a2 + 1;
    *a2 = v5;
  }
  return result;
}

uint64_t big2_scanLit(int a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, unsigned __int8 **a5)
{
  unint64_t v5;
  unsigned int v6;
  unsigned __int8 *v7;
  uint64_t result;
  unsigned int v9;
  BOOL v10;
  int v11;

  v5 = a4 - (_QWORD)a3;
  if (a4 - (uint64_t)a3 < 2)
    return 0xFFFFFFFFLL;
  while (1)
  {
    v6 = *a3;
    if (v6 > 0xDB)
    {
      if (v6 == 255)
      {
        if (a3[1] > 0xFDu)
          goto LABEL_20;
      }
      else if (v6 - 220 < 4)
      {
LABEL_20:
        result = 0;
        *a5 = a3;
        return result;
      }
      goto LABEL_14;
    }
    if (v6 - 216 >= 4)
    {
      if (!*a3)
      {
        switch(*(_BYTE *)(a2 + a3[1] + 136))
        {
          case 0:
          case 1:
          case 8:
            goto LABEL_20;
          case 6:
            if (v5 < 3)
              return 4294967294;
            v7 = a3 + 3;
            goto LABEL_15;
          case 7:
            goto LABEL_4;
          case 0xC:
          case 0xD:
            v7 = a3 + 2;
            if (*(unsigned __int8 *)(a2 + a3[1] + 136) != a1)
              goto LABEL_15;
            if (a4 - (uint64_t)v7 < 2)
              return 4294967269;
            *a5 = v7;
            if (*v7)
              return 0;
            v9 = *(unsigned __int8 *)(a2 + a3[3] + 136);
            v10 = v9 > 0x1E;
            v11 = (1 << v9) & 0x40300E00;
            if (v10 || v11 == 0)
              return 0;
            else
              return 27;
          default:
            break;
        }
      }
LABEL_14:
      v7 = a3 + 2;
      goto LABEL_15;
    }
LABEL_4:
    if (v5 < 4)
      return 4294967294;
    v7 = a3 + 4;
LABEL_15:
    v5 = a4 - (_QWORD)v7;
    a3 = v7;
    if (a4 - (uint64_t)v7 <= 1)
      return 0xFFFFFFFFLL;
  }
}

uint64_t big2_scanDecl(uint64_t a1, _BYTE *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  unsigned int v8;
  BOOL v9;
  int v10;

  if (a3 - (uint64_t)a2 < 2)
    return 0xFFFFFFFFLL;
  if (!*a2)
  {
    switch(*(_BYTE *)(a1 + a2[1] + 136))
    {
      case 0x14:
        *a4 = a2 + 2;
        return 33;
      case 0x16:
      case 0x18:
        v5 = a2 + 2;
        v6 = a3 - (_QWORD)(a2 + 2);
        if (v6 < 2)
          return 0xFFFFFFFFLL;
        while (2)
        {
          if (*v5)
          {
LABEL_20:
            v4 = 0;
            *a4 = v5;
          }
          else
          {
            switch(*(_BYTE *)(a1 + v5[1] + 136))
            {
              case 0x15:
                goto LABEL_13;
              case 0x16:
              case 0x18:
                v5 += 2;
                v6 -= 2;
                v4 = 0xFFFFFFFFLL;
                if (v6 > 1)
                  continue;
                return v4;
              case 0x17:
              case 0x19:
              case 0x1A:
              case 0x1B:
              case 0x1C:
              case 0x1D:
                goto LABEL_20;
              case 0x1E:
                if ((unint64_t)v6 < 4)
                  return 0xFFFFFFFFLL;
                if (!v5[2])
                {
                  v8 = *(unsigned __int8 *)(a1 + v5[3] + 136);
                  v9 = v8 > 0x1E;
                  v10 = (1 << v8) & 0x40200600;
                  if (!v9 && v10 != 0)
                    goto LABEL_20;
                }
                goto LABEL_13;
              default:
                if (*(unsigned __int8 *)(a1 + v5[1] + 136) - 9 >= 2)
                  goto LABEL_20;
LABEL_13:
                *a4 = v5;
                v4 = 16;
                break;
            }
          }
          return v4;
        }
      case 0x1B:
        return big2_scanComment(a1, a2 + 2, a3, a4);
      default:
        break;
    }
  }
  v4 = 0;
  *a4 = a2;
  return v4;
}

uint64_t big2_scanPi(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;

  v4 = a3 - (_QWORD)a2;
  v5 = a3 - (_QWORD)a2 - 2;
  if (a3 - (uint64_t)a2 < 2)
    return 0xFFFFFFFFLL;
  v10 = *a2;
  if (*a2 > 0xDBu)
  {
    if ((v10 - 220) < 4)
      goto LABEL_7;
    if ((_DWORD)v10 == 255)
    {
      LODWORD(v12) = a2[1];
      if (v12 > 0xFD)
        goto LABEL_7;
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if ((v10 - 216) < 4)
    goto LABEL_4;
  if (*a2)
  {
LABEL_17:
    LODWORD(v12) = a2[1];
    goto LABEL_18;
  }
  v12 = a2[1];
  v13 = *(unsigned __int8 *)(a1 + v12 + 136);
  if (v13 <= 0x15)
  {
    if (v13 == 5)
      goto LABEL_7;
    if (v13 == 6)
    {
      if (v4 < 3)
        return 4294967294;
      goto LABEL_7;
    }
    if (v13 != 7)
      goto LABEL_7;
LABEL_4:
    if (v4 < 4)
      return 4294967294;
LABEL_7:
    result = 0;
    *a4 = (uint64_t)a2;
    return result;
  }
  if (v13 != 22 && v13 != 24)
  {
    if (v13 != 29)
      goto LABEL_7;
LABEL_18:
    if (((namingBitmap[(v12 >> 5) | (8 * nmstrtPages[v10])] >> v12) & 1) == 0)
      goto LABEL_7;
  }
  if (v5 < 2)
    return 0xFFFFFFFFLL;
  v15 = 0;
  v27 = 0;
  result = 0xFFFFFFFFLL;
  while (1)
  {
    v16 = a2[v15 + 2];
    if (a2[v15 + 2] <= 0xDBu)
    {
      if (!a2[v15 + 2])
      {
        v17 = a2[v15 + 3];
        switch(*(_BYTE *)(a1 + v17 + 136))
        {
          case 5:
            goto LABEL_45;
          case 6:
            if ((unint64_t)v5 >= 3)
              goto LABEL_45;
            return 4294967294;
          case 7:
            goto LABEL_44;
          case 9:
          case 0xA:
          case 0x15:
            v19 = &a2[v15];
            v20 = (uint64_t)&a2[v15 + 2];
            result = big2_checkPiTarget(a2, v20, &v27);
            if (!(_DWORD)result)
            {
              *a4 = v20;
              return result;
            }
            v21 = v5 - 2;
            if (v5 - 2 < 2)
              return 0xFFFFFFFFLL;
            v22 = v19 + 4;
            result = 0xFFFFFFFFLL;
            while (2)
            {
              v23 = *v22;
              if (v23 <= 0xDB)
              {
                if (v23 - 216 < 4)
                {
LABEL_54:
                  if (v21 < 4)
                    return 4294967294;
                  v24 = v22 + 4;
LABEL_65:
                  v21 = a3 - (_QWORD)v24;
                  v22 = v24;
                  if (a3 - (uint64_t)v24 <= 1)
                    return result;
                  continue;
                }
                if (!*v22)
                {
                  switch(*(_BYTE *)(a1 + v22[1] + 136))
                  {
                    case 0:
                    case 1:
                    case 8:
                      goto LABEL_83;
                    case 6:
                      if (v21 < 3)
                        return 4294967294;
                      v24 = v22 + 3;
                      goto LABEL_65;
                    case 7:
                      goto LABEL_54;
                    case 0xF:
                      v24 = v22 + 2;
                      if (a3 - (uint64_t)(v22 + 2) < 2)
                        return 0xFFFFFFFFLL;
                      if (*v24 || v22[3] != 62)
                        goto LABEL_65;
                      v25 = (uint64_t)(v22 + 4);
                      break;
                    default:
                      goto LABEL_64;
                  }
LABEL_79:
                  *a4 = v25;
                  return v27;
                }
LABEL_64:
                v24 = v22 + 2;
                goto LABEL_65;
              }
              break;
            }
            if (v23 == 255)
            {
              if (v22[1] <= 0xFDu)
                goto LABEL_64;
            }
            else if (v23 - 220 >= 4)
            {
              goto LABEL_64;
            }
LABEL_83:
            result = 0;
            *a4 = (uint64_t)v22;
            return result;
          case 0xF:
            v26 = &a2[v15];
            result = big2_checkPiTarget(a2, (uint64_t)&a2[v15 + 2], &v27);
            if (!(_DWORD)result)
            {
              *a4 = (uint64_t)&a2[v15 + 2];
              return result;
            }
            if (v5 - 2 < 2)
              return 0xFFFFFFFFLL;
            v18 = (uint64_t)(v26 + 4);
            if (!v26[4] && a2[v15 + 5] == 62)
            {
              v25 = (uint64_t)&a2[v15 + 6];
              goto LABEL_79;
            }
            goto LABEL_41;
          case 0x16:
          case 0x18:
          case 0x19:
          case 0x1A:
          case 0x1B:
            goto LABEL_38;
          case 0x1D:
            goto LABEL_37;
          default:
            goto LABEL_40;
        }
      }
      if ((v16 - 216) < 4)
      {
LABEL_44:
        if ((unint64_t)v5 >= 4)
        {
LABEL_45:
          result = 0;
          v18 = (uint64_t)&a2[v15 + 2];
          goto LABEL_46;
        }
        return 4294967294;
      }
      goto LABEL_36;
    }
    if ((_DWORD)v16 == 255)
    {
      LODWORD(v17) = a2[v15 + 3];
      if (v17 > 0xFD)
        break;
      goto LABEL_37;
    }
    if ((v16 - 220) < 4)
      break;
LABEL_36:
    LODWORD(v17) = a2[v15 + 3];
LABEL_37:
    if (((namingBitmap[(v17 >> 5) | (8 * namePages[v16])] >> v17) & 1) == 0)
      goto LABEL_45;
LABEL_38:
    v5 -= 2;
    v15 += 2;
    if (v5 <= 1)
      return result;
  }
LABEL_40:
  v18 = (uint64_t)&a2[v15 + 2];
LABEL_41:
  result = 0;
LABEL_46:
  *a4 = v18;
  return result;
}

uint64_t big2_scanPercent(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v4 = a3 - (_QWORD)a2;
  v5 = a3 - (_QWORD)a2 - 2;
  if (a3 - (uint64_t)a2 < 2)
    return 0xFFFFFFFFLL;
  v6 = *a2;
  if (*a2 > 0xDBu)
  {
    if ((v6 - 220) < 4 || (_DWORD)v6 == 255 && a2[1] > 0xFDu)
      goto LABEL_7;
  }
  else
  {
    if ((v6 - 216) < 4)
      goto LABEL_4;
    if (!*a2)
    {
      v7 = 0;
      v8 = *(unsigned __int8 *)(a1 + a2[1] + 136);
      if (v8 > 0x14)
      {
        switch(*(_BYTE *)(a1 + a2[1] + 136))
        {
          case 0x15:
          case 0x1E:
            goto LABEL_36;
          case 0x16:
          case 0x18:
            goto LABEL_15;
          case 0x1D:
            goto LABEL_14;
          default:
            goto LABEL_8;
        }
      }
      if (v8 - 9 < 2)
      {
LABEL_36:
        v7 = 22;
        goto LABEL_8;
      }
      if (v8 == 6)
      {
        if (v4 < 3)
          return 4294967294;
        goto LABEL_7;
      }
      if (v8 != 7)
        goto LABEL_8;
LABEL_4:
      if (v4 < 4)
        return 4294967294;
LABEL_7:
      v7 = 0;
      goto LABEL_8;
    }
  }
LABEL_14:
  if (((namingBitmap[(a2[1] >> 5) | (8 * nmstrtPages[v6])] >> a2[1]) & 1) == 0)
    goto LABEL_7;
LABEL_15:
  if (v5 < 2)
    return 0xFFFFFFFFLL;
  for (a2 += 4; ; a2 += 2)
  {
    v9 = *(a2 - 2);
    if (*(a2 - 2) <= 0xDBu)
      break;
    if ((_DWORD)v9 != 255)
    {
      if ((v9 - 220) < 4)
        goto LABEL_42;
LABEL_26:
      LODWORD(v10) = *(a2 - 1);
      goto LABEL_27;
    }
    LODWORD(v10) = *(a2 - 1);
    if (v10 > 0xFD)
      goto LABEL_42;
LABEL_27:
    if (((namingBitmap[(v10 >> 5) | (8 * namePages[v9])] >> v10) & 1) == 0)
      goto LABEL_42;
LABEL_28:
    v5 -= 2;
    v7 = 0xFFFFFFFFLL;
    if (v5 <= 1)
      return v7;
  }
  if (!*(a2 - 2))
  {
    v10 = *(a2 - 1);
    v11 = *(unsigned __int8 *)(a1 + v10 + 136);
    switch(*(_BYTE *)(a1 + v10 + 136))
    {
      case 0x12:
        v7 = 28;
        goto LABEL_8;
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x17:
      case 0x1C:
        goto LABEL_42;
      case 0x16:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
        goto LABEL_28;
      case 0x1D:
        goto LABEL_27;
      default:
        if (v11 != 6)
        {
          if (v11 != 7)
            goto LABEL_42;
          goto LABEL_41;
        }
        if ((unint64_t)v5 < 3)
          return 4294967294;
        break;
    }
    goto LABEL_42;
  }
  if ((v9 - 216) >= 4)
    goto LABEL_26;
LABEL_41:
  if ((unint64_t)v5 < 4)
    return 4294967294;
LABEL_42:
  v7 = 0;
  a2 -= 2;
LABEL_8:
  *a4 = a2;
  return v7;
}

uint64_t big2_scanPoundName(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a3 - (_QWORD)a2;
  if (a3 - (uint64_t)a2 < 2)
    return 0xFFFFFFFFLL;
  v5 = *a2;
  if (*a2 > 0xDBu)
  {
    if ((v5 - 220) >= 4 && ((_DWORD)v5 != 255 || a2[1] <= 0xFDu))
      goto LABEL_21;
    goto LABEL_8;
  }
  if ((v5 - 216) < 4)
    goto LABEL_4;
  if (*a2)
    goto LABEL_21;
  v6 = 0;
  v8 = *(unsigned __int8 *)(a1 + a2[1] + 136);
  if (v8 <= 0x15)
  {
    if (v8 != 6)
    {
      if (v8 == 7)
      {
LABEL_4:
        if (v4 >= 4)
          goto LABEL_8;
        return 4294967294;
      }
LABEL_9:
      *a4 = a2;
      return v6;
    }
    if (v4 < 3)
      return 4294967294;
LABEL_8:
    v6 = 0;
    goto LABEL_9;
  }
  if (v8 == 22 || v8 == 24)
    goto LABEL_22;
  if (v8 != 29)
    goto LABEL_9;
LABEL_21:
  if (((namingBitmap[(a2[1] >> 5) | (8 * nmstrtPages[v5])] >> a2[1]) & 1) == 0)
    goto LABEL_8;
LABEL_22:
  a2 += 2;
  v10 = a3 - (_QWORD)a2;
  if (a3 - (uint64_t)a2 < 2)
    return 4294967276;
  while (1)
  {
    v11 = *a2;
    if (*a2 <= 0xDBu)
      break;
    if ((_DWORD)v11 == 255)
    {
      LODWORD(v12) = a2[1];
      if (v12 > 0xFD)
        goto LABEL_8;
      goto LABEL_33;
    }
    if ((v11 - 220) < 4)
      goto LABEL_8;
LABEL_32:
    LODWORD(v12) = a2[1];
LABEL_33:
    if (((namingBitmap[(v12 >> 5) | (8 * namePages[v11])] >> v12) & 1) == 0)
      goto LABEL_8;
LABEL_34:
    a2 += 2;
    v10 -= 2;
    v6 = 4294967276;
    if (v10 <= 1)
      return v6;
  }
  if (!*a2)
  {
    v6 = 0;
    v12 = a2[1];
    switch(*(_BYTE *)(a1 + v12 + 136))
    {
      case 6:
        if ((unint64_t)v10 >= 3)
          goto LABEL_8;
        return 4294967294;
      case 7:
        goto LABEL_40;
      case 9:
      case 0xA:
      case 0xB:
      case 0x15:
      case 0x1E:
      case 0x20:
      case 0x24:
        v6 = 20;
        goto LABEL_9;
      case 0x16:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
        goto LABEL_34;
      case 0x1D:
        goto LABEL_33;
      default:
        goto LABEL_9;
    }
  }
  if ((v11 - 216) >= 4)
    goto LABEL_32;
LABEL_40:
  if ((unint64_t)v10 >= 4)
    goto LABEL_8;
  return 4294967294;
}

uint64_t big2_scanComment(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unsigned int v5;
  unsigned __int8 *v6;
  uint64_t v7;
  int v9;

  if (a3 - (uint64_t)a2 < 2)
    return 0xFFFFFFFFLL;
  if (*a2 || a2[1] != 45)
  {
LABEL_26:
    v7 = 0;
    goto LABEL_27;
  }
  a2 += 2;
  v4 = a3 - (_QWORD)a2;
  if (a3 - (uint64_t)a2 < 2)
    return 0xFFFFFFFFLL;
  while (1)
  {
    v5 = *a2;
    if (v5 > 0xDB)
    {
      if (v5 == 255)
      {
        if (a2[1] > 0xFDu)
          goto LABEL_26;
      }
      else if (v5 - 220 < 4)
      {
        goto LABEL_26;
      }
      goto LABEL_23;
    }
    if (v5 - 216 >= 4)
      break;
LABEL_7:
    if (v4 < 4)
      return 4294967294;
    v6 = a2 + 4;
LABEL_24:
    v4 = a3 - (_QWORD)v6;
    v7 = 0xFFFFFFFFLL;
    a2 = v6;
    if (a3 - (uint64_t)v6 <= 1)
      return v7;
  }
  if (*a2)
  {
LABEL_23:
    v6 = a2 + 2;
    goto LABEL_24;
  }
  v7 = 0;
  switch(*(_BYTE *)(a1 + a2[1] + 136))
  {
    case 0:
    case 1:
    case 8:
      break;
    case 2:
    case 3:
    case 4:
    case 5:
      goto LABEL_23;
    case 6:
      if (v4 < 3)
        return 4294967294;
      v6 = a2 + 3;
      goto LABEL_24;
    case 7:
      goto LABEL_7;
    default:
      if (*(_BYTE *)(a1 + a2[1] + 136) != 27)
        goto LABEL_23;
      v6 = a2 + 2;
      if (a3 - (uint64_t)(a2 + 2) < 2)
        return 0xFFFFFFFFLL;
      if (*v6 || a2[3] != 45)
        goto LABEL_24;
      if (a3 - (uint64_t)(a2 + 4) < 2)
        return 0xFFFFFFFFLL;
      if (a2[4])
      {
        v7 = 0;
        a2 += 4;
      }
      else
      {
        v9 = a2[5];
        if (v9 == 62)
          a2 += 6;
        else
          a2 += 4;
        if (v9 == 62)
          v7 = 13;
        else
          v7 = 0;
      }
      break;
  }
LABEL_27:
  *a4 = a2;
  return v7;
}

BOOL big2_checkPiTarget(_BYTE *a1, uint64_t a2, _DWORD *a3)
{
  int v4;
  int v5;
  int v6;
  int v7;

  *a3 = 11;
  if (a2 - (_QWORD)a1 != 6 || *a1)
    return 1;
  v4 = (char)a1[1];
  if (v4 == 120)
  {
    v5 = 0;
  }
  else
  {
    if (v4 != 88)
      return 1;
    v5 = 1;
  }
  if (a1[2])
    return 1;
  v6 = (char)a1[3];
  if (v6 != 109)
  {
    if (v6 != 77)
      return 1;
    v5 = 1;
  }
  if (a1[4])
    return 1;
  v7 = (char)a1[5];
  if (v7 == 108)
  {
    if (v5)
      return 0;
    *a3 = 12;
    return 1;
  }
  return v7 != 76;
}

uint64_t big2_scanRef(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 *v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  BOOL v18;
  int v19;

  v4 = a3 - (_QWORD)a2;
  v5 = a3 - (_QWORD)a2 - 2;
  if (a3 - (uint64_t)a2 < 2)
    return 0xFFFFFFFFLL;
  v6 = *a2;
  if (*a2 > 0xDBu)
  {
    if ((v6 - 220) < 4 || (_DWORD)v6 == 255 && a2[1] > 0xFDu)
      goto LABEL_7;
  }
  else
  {
    if ((v6 - 216) < 4)
      goto LABEL_4;
    if (!*a2)
    {
      v7 = 0;
      v8 = *(unsigned __int8 *)(a1 + a2[1] + 136);
      if (v8 <= 0x15)
      {
        if (v8 == 6)
        {
          if (v4 < 3)
            return 4294967294;
          goto LABEL_7;
        }
        if (v8 == 7)
        {
LABEL_4:
          if (v4 < 4)
            return 4294967294;
LABEL_7:
          v7 = 0;
          goto LABEL_8;
        }
        if (v8 != 19)
          goto LABEL_8;
        v9 = a2 + 2;
        if (a3 - (uint64_t)(a2 + 2) >= 2)
        {
          if (*v9)
            goto LABEL_16;
          v14 = a2[3];
          if (v14 == 120)
          {
            v9 = a2 + 4;
            if (a3 - (uint64_t)(a2 + 4) < 2)
              return 0xFFFFFFFFLL;
            if (!*v9 && (*(_BYTE *)(a1 + a2[5] + 136) & 0xFE) == 0x18)
            {
              a2 += 6;
              v15 = a3 - (_QWORD)a2;
              if (a3 - (uint64_t)a2 >= 2)
              {
                while (!*a2)
                {
                  v16 = *(unsigned __int8 *)(a1 + a2[1] + 136);
                  if ((v16 - 24) >= 2)
                  {
                    if (v16 != 18)
                      goto LABEL_7;
                    a2 += 2;
                    v7 = 10;
                    goto LABEL_8;
                  }
                  a2 += 2;
                  v15 -= 2;
                  v7 = 0xFFFFFFFFLL;
                  if (v15 <= 1)
                    return v7;
                }
                goto LABEL_7;
              }
              return 0xFFFFFFFFLL;
            }
          }
          else if (*(_BYTE *)(a1 + v14 + 136) == 25)
          {
            v9 = a2 + 4;
            v17 = v4 - 4;
            while (1)
            {
              v18 = v17 < 2;
              v17 -= 2;
              if (v18)
                return 0xFFFFFFFFLL;
              a2 = v9;
              if (*v9)
                goto LABEL_7;
              v19 = *(unsigned __int8 *)(a1 + v9[1] + 136);
              v9 += 2;
              if (v19 != 25)
              {
                if (v19 != 18)
                  goto LABEL_7;
                v7 = 10;
                goto LABEL_17;
              }
            }
          }
LABEL_16:
          v7 = 0;
LABEL_17:
          a2 = v9;
          goto LABEL_8;
        }
        return 0xFFFFFFFFLL;
      }
      if (v8 == 22 || v8 == 24)
        goto LABEL_27;
      if (v8 != 29)
        goto LABEL_8;
    }
  }
  if (((namingBitmap[(a2[1] >> 5) | (8 * nmstrtPages[v6])] >> a2[1]) & 1) == 0)
    goto LABEL_7;
LABEL_27:
  if (v5 < 2)
    return 0xFFFFFFFFLL;
  for (a2 += 4; ; a2 += 2)
  {
    v11 = *(a2 - 2);
    if (*(a2 - 2) <= 0xDBu)
      break;
    if ((_DWORD)v11 != 255)
    {
      if ((v11 - 220) < 4)
        goto LABEL_56;
LABEL_38:
      LODWORD(v12) = *(a2 - 1);
      goto LABEL_39;
    }
    LODWORD(v12) = *(a2 - 1);
    if (v12 > 0xFD)
      goto LABEL_56;
LABEL_39:
    if (((namingBitmap[(v12 >> 5) | (8 * namePages[v11])] >> v12) & 1) == 0)
      goto LABEL_56;
LABEL_40:
    v5 -= 2;
    v7 = 0xFFFFFFFFLL;
    if (v5 <= 1)
      return v7;
  }
  if (!*(a2 - 2))
  {
    v12 = *(a2 - 1);
    v13 = *(unsigned __int8 *)(a1 + v12 + 136);
    switch(*(_BYTE *)(a1 + v12 + 136))
    {
      case 0x12:
        v7 = 9;
        goto LABEL_8;
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x17:
      case 0x1C:
        goto LABEL_56;
      case 0x16:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
        goto LABEL_40;
      case 0x1D:
        goto LABEL_39;
      default:
        if (v13 != 6)
        {
          if (v13 != 7)
            goto LABEL_56;
          goto LABEL_55;
        }
        if ((unint64_t)v5 < 3)
          return 4294967294;
        break;
    }
    goto LABEL_56;
  }
  if ((v11 - 216) >= 4)
    goto LABEL_38;
LABEL_55:
  if ((unint64_t)v5 < 4)
    return 4294967294;
LABEL_56:
  v7 = 0;
  a2 -= 2;
LABEL_8:
  *a4 = a2;
  return v7;
}

uint64_t big2_scanAtts(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 **a4)
{
  unint64_t v4;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t i;
  unsigned int v21;
  unsigned int v24;
  int v25;
  unsigned __int8 **v26;
  unsigned int v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  unsigned __int8 *v33;

  v33 = a2;
  v4 = a3 - (_QWORD)a2;
  if (a3 - (uint64_t)a2 < 2)
    return 0xFFFFFFFFLL;
  v7 = 0;
  v8 = a3 - 4;
  while (1)
  {
    v9 = *a2;
    if (*a2 <= 0xDBu)
      break;
    if ((_DWORD)v9 == 255)
    {
      LODWORD(v11) = a2[1];
      if (v11 > 0xFD)
        goto LABEL_108;
      goto LABEL_22;
    }
    if ((v9 - 220) < 4)
      goto LABEL_108;
LABEL_21:
    LODWORD(v11) = a2[1];
LABEL_22:
    if (((namingBitmap[(v11 >> 5) | (8 * namePages[v9])] >> v11) & 1) == 0)
      goto LABEL_108;
LABEL_23:
    a2 += 2;
LABEL_24:
    v33 = a2;
LABEL_25:
    v4 = a3 - (_QWORD)a2;
    if (a3 - (uint64_t)a2 <= 1)
      return 0xFFFFFFFFLL;
  }
  if (*a2)
  {
    if ((v9 - 216) < 4)
    {
LABEL_103:
      if (v4 >= 4)
      {
LABEL_108:
        result = 0;
        goto LABEL_109;
      }
      return 4294967294;
    }
    goto LABEL_21;
  }
  result = 0;
  v11 = a2[1];
  switch(*(_BYTE *)(a1 + v11 + 136))
  {
    case 6:
      if (v4 >= 3)
        goto LABEL_108;
      return 4294967294;
    case 7:
      goto LABEL_103;
    case 9:
    case 0xA:
    case 0x15:
      a2 += 2;
      v12 = a3 - (_QWORD)a2;
      if (a3 - (uint64_t)a2 < 2)
        return 0xFFFFFFFFLL;
      while (2)
      {
        if (*a2)
          goto LABEL_108;
        v13 = *(unsigned __int8 *)(a1 + a2[1] + 136);
        if ((v13 - 9) < 2 || v13 == 21)
        {
          a2 += 2;
          v12 -= 2;
          if (v12 <= 1)
            return 0xFFFFFFFFLL;
          continue;
        }
        break;
      }
      if (v13 != 14)
        goto LABEL_108;
      v33 = a2;
LABEL_37:
      v15 = a2 + 2;
      if (a3 - (uint64_t)(a2 + 2) < 2)
        return 0xFFFFFFFFLL;
      for (i = v8 - (_QWORD)a2; ; i -= 2)
      {
        if (*v15)
          goto LABEL_115;
        v21 = *(unsigned __int8 *)(a1 + v15[1] + 136);
        if ((v21 & 0xFE) == 0xC)
          break;
        if (v21 > 0x15 || ((1 << v21) & 0x200600) == 0)
          goto LABEL_115;
        v15 += 2;
        result = 0xFFFFFFFFLL;
        if (i <= 1)
          return result;
      }
      v15 += 2;
      v33 = v15;
      if (i < 2)
        return 0xFFFFFFFFLL;
      while (2)
      {
        v24 = *v15;
        if (v24 > 0xDB)
        {
          if (v24 - 220 < 4)
          {
            v25 = 8;
            goto LABEL_63;
          }
          if (v24 == 255 && v15[1] > 0xFDu)
          {
            v25 = 0;
            goto LABEL_63;
          }
        }
        else
        {
          if (v24 - 216 < 4)
          {
            v25 = 7;
            goto LABEL_63;
          }
          if (!*v15)
          {
            v25 = *(unsigned __int8 *)(a1 + v15[1] + 136);
            goto LABEL_63;
          }
        }
        v25 = 29;
LABEL_63:
        if (v25 == v21)
        {
          a2 = v15 + 2;
          v33 = v15 + 2;
          if (a3 - (uint64_t)(v15 + 2) < 2)
            return 0xFFFFFFFFLL;
          if (*a2)
            goto LABEL_108;
          result = 0;
          v27 = *(unsigned __int8 *)(a1 + v15[3] + 136);
          if (v27 <= 0xA)
          {
            if (v27 - 9 >= 2)
              goto LABEL_109;
            goto LABEL_89;
          }
          if (v27 == 21)
          {
LABEL_89:
            v28 = v15 + 4;
            v29 = a3 - (_QWORD)(v15 + 4);
            if (v29 < 2)
              return 0xFFFFFFFFLL;
            a2 = v15 + 6;
            while (2)
            {
              v30 = *(a2 - 2);
              if (!*(a2 - 2))
              {
                switch(*(_BYTE *)(a1 + *(a2 - 1) + 136))
                {
                  case 6:
                    if ((unint64_t)v29 >= 3)
                      goto LABEL_106;
                    return 4294967294;
                  case 7:
                    goto LABEL_105;
                  case 9:
                  case 0xA:
                  case 0x15:
                    v28 += 2;
                    v29 -= 2;
                    a2 += 2;
                    result = 0xFFFFFFFFLL;
                    if (v29 <= 1)
                      return result;
                    continue;
                  case 0xB:
                    a2 -= 2;
                    goto LABEL_124;
                  case 0x11:
                    a2 -= 2;
                    goto LABEL_126;
                  case 0x16:
                  case 0x18:
                    goto LABEL_102;
                  case 0x1D:
                    goto LABEL_100;
                  default:
                    goto LABEL_106;
                }
              }
              break;
            }
            if ((v30 - 216) < 4)
            {
LABEL_105:
              if ((unint64_t)v29 >= 4)
              {
LABEL_106:
                result = 0;
                a2 -= 2;
                goto LABEL_109;
              }
              return 4294967294;
            }
            if ((v30 - 220) < 4)
              goto LABEL_106;
            if ((_DWORD)v30 == 255)
            {
              v33 = a2 - 2;
              v31 = *(a2 - 1);
              if (v31 >= 0xFE)
              {
                result = 0;
                a2 -= 2;
                goto LABEL_109;
              }
            }
            else
            {
LABEL_100:
              v33 = a2 - 2;
              v31 = *(a2 - 1);
            }
            if (((namingBitmap[(v31 >> 5) | (8 * nmstrtPages[v30])] >> v31) & 1) == 0)
            {
              result = 0;
              a2 = v28;
              goto LABEL_109;
            }
LABEL_102:
            v7 = 0;
            goto LABEL_24;
          }
          if (v27 == 11)
          {
LABEL_124:
            a2 += 2;
            result = 1;
            goto LABEL_109;
          }
          if (v27 != 17)
            goto LABEL_109;
LABEL_126:
          v15 = a2 + 2;
          v33 = a2 + 2;
          if (a3 - (uint64_t)(a2 + 2) >= 2)
          {
            if (!*v15)
            {
              v32 = a2[3];
              if (v32 == 62)
                a2 += 4;
              else
                a2 += 2;
              if (v32 == 62)
                result = 3;
              else
                result = 0;
              goto LABEL_109;
            }
LABEL_115:
            result = 0;
            a2 = v15;
LABEL_109:
            *a4 = a2;
            return result;
          }
          return 0xFFFFFFFFLL;
        }
        switch(v25)
        {
          case 0:
          case 1:
          case 2:
          case 8:
            goto LABEL_115;
          case 3:
            v26 = a4;
            result = big2_scanRef(a1, v15 + 2, a3, &v33);
            if ((int)result >= 1)
            {
              v15 = v33;
              a4 = v26;
LABEL_73:
              i = a3 - (_QWORD)v15;
              result = 0xFFFFFFFFLL;
              if (a3 - (uint64_t)v15 <= 1)
                return result;
              continue;
            }
            if (!(_DWORD)result)
            {
              a4 = v26;
              a2 = v33;
              goto LABEL_109;
            }
            return result;
          case 6:
            if ((unint64_t)i < 3)
              return 4294967294;
            v15 += 3;
            goto LABEL_72;
          case 7:
            if ((unint64_t)i < 4)
              return 4294967294;
            v15 += 4;
            goto LABEL_72;
          default:
            v15 += 2;
LABEL_72:
            v33 = v15;
            goto LABEL_73;
        }
      }
    case 0xE:
      goto LABEL_37;
    case 0x16:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
      goto LABEL_23;
    case 0x17:
      if (v7)
        goto LABEL_108;
      v15 = a2 + 2;
      v33 = a2 + 2;
      v16 = a3 - (_QWORD)(a2 + 2);
      if (v16 < 2)
        return 0xFFFFFFFFLL;
      v17 = *v15;
      if (*v15 > 0xDBu)
      {
        if ((_DWORD)v17 == 255)
        {
          LODWORD(v18) = a2[3];
          if (v18 > 0xFD)
            goto LABEL_115;
LABEL_79:
          if (((namingBitmap[(v18 >> 5) | (8 * nmstrtPages[v17])] >> v18) & 1) == 0)
            goto LABEL_115;
          goto LABEL_80;
        }
        if ((v17 - 220) < 4)
          goto LABEL_115;
      }
      else
      {
        if (!*v15)
        {
          v18 = a2[3];
          v19 = *(unsigned __int8 *)(a1 + v18 + 136);
          if (v19 <= 0x17)
          {
            if (v19 != 22)
            {
              if (v19 == 6)
              {
                if ((unint64_t)v16 < 3)
                  return 4294967294;
              }
              else if (v19 == 7)
              {
LABEL_114:
                if ((unint64_t)v16 < 4)
                  return 4294967294;
              }
              goto LABEL_115;
            }
          }
          else if (v19 != 24)
          {
            if (v19 != 29)
              goto LABEL_115;
            goto LABEL_79;
          }
LABEL_80:
          a2 += 4;
          v33 = a2;
          v7 = 1;
          goto LABEL_25;
        }
        if ((v17 - 216) < 4)
          goto LABEL_114;
      }
      LODWORD(v18) = a2[3];
      goto LABEL_79;
    case 0x1D:
      goto LABEL_22;
    default:
      goto LABEL_109;
  }
}

uint64_t parsePseudoAttribute(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t result;
  uint64_t v10;

  if (a2 == a3)
  {
    *a4 = 0;
    return 1;
  }
  else
  {
    v10 = a2;
    (*(void (**)(uint64_t, uint64_t *))(a1 + 112))(a1, &v10);
    result = 0;
    *a7 = a2;
  }
  return result;
}

size_t UriGetUrlPrefixLength(const char *a1, _DWORD *a2)
{
  uint64_t v4;
  const char *v5;
  size_t v6;

  if (a2)
    *a2 = 0;
  if (!a1 || !*a1)
    return 0;
  v4 = 0;
  while (1)
  {
    v5 = (&off_1EA93C3B0)[v4];
    v6 = strlen(v5);
    if (!strncmp(a1, v5, v6))
      break;
    v4 += 2;
    if (v4 == 10)
      return 0;
  }
  if (a2)
    *a2 = (&off_1EA93C3B0)[v4 + 1];
  return strlen(v5);
}

char *FileFullPath(char *a1, char *__s1, char *a3)
{
  const char *v3;
  char *v4;
  int v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  char v19;
  BOOL v20;
  char v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  int v26;
  int v27;
  int v28;
  int v29;
  void *v30;
  int v31;
  int v32;
  const char *v34;
  char *v35;
  int v36;
  char v37[3];

  *a1 = 0;
  if (a3)
  {
    v3 = a3;
    v4 = a1;
    v5 = 0;
    v6 = *a3;
    if (v6 == 47 || v6 == 92)
    {
LABEL_21:
      if (!strncmp(v3, "\\\\", 2uLL))
      {
        strcpy(&v4[v5], "/net/");
        v5 = 5;
        v16 = 2;
      }
      else
      {
        v16 = 0;
      }
      v17 = v5;
      v34 = v3;
      v35 = v4;
      while (1)
      {
        v18 = v3[v16];
        if (v18 == 92)
        {
          v4[v17] = 47;
        }
        else
        {
          if (!v3[v16])
          {
            v4[(int)v17] = 0;
            return v4;
          }
          v4[v17] = v18;
          if (v18 == 37)
          {
            v19 = v3[v16 + 1];
            if ((v19 - 48) < 0xAu
              || (v3[v16 + 1] - 65 <= 0x25
                ? (v20 = ((1 << (v19 - 65)) & 0x3F0000003FLL) == 0)
                : (v20 = 1),
                  !v20))
            {
              v21 = v3[v16 + 2];
              if ((v21 - 48) < 0xAu
                || (v3[v16 + 2] - 65 <= 0x25
                  ? (v22 = ((1 << (v21 - 65)) & 0x3F0000003FLL) == 0)
                  : (v22 = 1),
                    !v22))
              {
                v36 = v16 + 2;
                v23 = 0;
                LODWORD(v24) = 0;
                v37[0] = v19;
                v37[1] = v21;
                v25 = 1;
                v37[2] = 0;
                do
                {
                  v26 = v37[v23];
                  v27 = 16 * v26;
                  if (memchr("ABCDEF", v26, 7uLL))
                  {
                    v28 = v27 - 880;
                    v29 = -55;
                  }
                  else
                  {
                    v30 = memchr("abcdef", v26, 7uLL);
                    v28 = v27 - 768;
                    if (v30)
                      v29 = -87;
                    else
                      v29 = -48;
                    if (v30)
                      v28 = v27 - 1392;
                  }
                  v31 = v29 + v26;
                  v32 = v25 & 1;
                  if ((v25 & 1) == 0)
                    v28 = v31;
                  v24 = (v28 + v24);
                  v23 = 1;
                  v25 = 0;
                }
                while (v32);
                __sprintf_chk(v37, 0, 3uLL, "%c", v24);
                v3 = v34;
                v4 = v35;
                v35[v17] = v37[0];
                v16 = v36;
              }
            }
          }
        }
        ++v16;
        ++v17;
      }
    }
    if (__s1 && *__s1)
    {
      if (!strncmp(__s1, "\\\\", 2uLL))
      {
        strcpy(v4, "/net/");
        v9 = 2;
        v8 = 5;
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
      v12 = (v8 << 32) - 0x100000000;
      v13 = &__s1[v9];
      while (1)
      {
        v15 = *v13++;
        v14 = v15;
        if (v15 == 92)
        {
          LOBYTE(v14) = 47;
        }
        else if (!v14)
        {
          if (v4[v12 >> 32] == 47)
          {
            v5 = v8;
            goto LABEL_21;
          }
          v5 = v8 + 1;
          v11 = v8;
          v10 = 47;
LABEL_20:
          v4[v11] = v10;
          goto LABEL_21;
        }
        v4[v8++] = v14;
        v12 += 0x100000000;
      }
    }
    v10 = 0;
    *(_WORD *)a1 = 12078;
    v11 = 2;
    v5 = 2;
    goto LABEL_20;
  }
  return 0;
}

const char *UriCompleteUrl(const char *__src, char *a2, char *__dst)
{
  char *v4;
  int v6;
  char *v7;
  char *v8;
  char *v9;
  size_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  char *v18;
  char *v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  _OWORD v25[64];
  char __srca[80];
  uint64_t v27;

  v4 = (char *)__src;
  v27 = *MEMORY[0x1E0C80C00];
  memset(v25, 0, 512);
  if (!a2 || (v6 = *a2, !*a2))
  {
    if (__src)
      return strcpy(__dst, __src);
    *__dst = 0;
    return __src;
  }
  if (!__src || !*__src)
    return strcpy(__dst, a2);
  if (!UriGetUrlPrefixLength(__src, 0) && !UriGetUrlPrefixLength(a2, 0))
    return FileFullPath(__dst, v4, a2);
  v7 = strchr(a2, 58);
  if (v7)
  {
    v8 = v7;
    v9 = strchr(a2, 47);
    if (!v9 || v8 < v9)
      return strcpy(__dst, a2);
  }
  else if (v6 == 47)
  {
    return strcpy(__dst, a2);
  }
  v10 = strlen(a2);
  v11 = strlen(v4);
  if (v6 == 47)
  {
    v12 = v11;
    v13 = strchr(v4, 58);
    if (!v13 || (v14 = (unint64_t)v13, (__src = strchr(v4, 47)) != 0) && v14 >= (unint64_t)__src)
    {
      __srca[0] = 0;
    }
    else
    {
      v15 = v14 - (_QWORD)v4;
      if (v15 > 0x4E)
        return __src;
      __strncpy_chk();
      __srca[v15] = 0;
    }
    v18 = strchr(v4, 47);
    if (v18 && (v19 = v18, v20 = v18 - v4, v18 - v4 + 1 < v12) && *v18 == 47)
    {
      __src = strchr(v18 + 2, 47);
      if (__src)
        v21 = __src - v19 - 2;
      else
        v21 = v12 - v20;
      if (v21 > 0x4E)
        return __src;
      __strncpy_chk();
      *((_BYTE *)v25 + v21) = 0;
    }
    else
    {
      LOBYTE(v25[0]) = 0;
    }
    if (__srca[0])
    {
      v22 = strcpy(__dst, __srca);
      *(_WORD *)&__dst[strlen(v22)] = 58;
    }
    else
    {
      *__dst = 0;
    }
    if (v10 >= 2 && a2[1] == 47 || !LOBYTE(v25[0]))
    {
      v24 = __dst;
    }
    else
    {
      strcat(__dst, "//");
      v24 = strcat(__dst, (const char *)v25);
    }
    return strcat(v24, a2);
  }
  else
  {
    v16 = strrchr(v4, 47);
    if (v16)
    {
      v17 = v16 - v4 + 1;
      strncpy(__dst, v4, v17);
      __dst[v17] = 0;
    }
    else
    {
      v23 = strcpy(__dst, v4);
      *(_WORD *)&__dst[strlen(v23)] = 47;
    }
    return strcat(__dst, a2);
  }
}

uint64_t SplitpathOrUrl(uint64_t result, char *a2, uint64_t a3, _BYTE *a4, _BYTE *a5, _BYTE *a6)
{
  const char *v11;
  size_t UrlPrefixLength;
  size_t v13;
  char *v14;
  unsigned __int8 v15;
  char v16;
  const char *v17;
  int v18;
  const char *v19;
  int v20;
  int v21;
  int v22;
  unsigned __int8 *v23;
  _BYTE *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  int v29;
  char v30;

  if (result)
  {
    v11 = (const char *)result;
    UrlPrefixLength = UriGetUrlPrefixLength((const char *)result, 0);
    if (UrlPrefixLength)
    {
      v13 = UrlPrefixLength;
      if (a2)
      {
        strncpy(a2, v11, UrlPrefixLength);
        a2[v13] = 0;
      }
      v11 += v13;
      v14 = ";";
    }
    else
    {
      if (a2)
        *a2 = 0;
      v14 = ";:";
    }
    if (*v11 && v11[1] == 58)
    {
      if (a3)
      {
        *(_BYTE *)a3 = *v11;
        v15 = v11[1];
        v11 += 2;
        *(_WORD *)(a3 + 1) = v15;
      }
      else
      {
        v11 += 2;
      }
    }
    else if (a3)
    {
      *(_BYTE *)a3 = 0;
    }
    v16 = *v11;
    v17 = v11;
    if (*v11)
    {
      v17 = v11;
      do
      {
        if (strchr(v14, v16))
          break;
        v18 = *(unsigned __int8 *)++v17;
        v16 = v18;
      }
      while (v18);
    }
    v19 = v17;
    while (v19 > v11)
    {
      v21 = *(unsigned __int8 *)--v19;
      v20 = v21;
      if (v21 == 92 || v20 == 47)
        break;
      if (v20 == 46)
      {
        if (!a6)
          goto LABEL_31;
        goto LABEL_28;
      }
    }
    v19 = v17;
    if (!a6)
      goto LABEL_31;
LABEL_28:
    v22 = *(unsigned __int8 *)v19;
    *a6 = v22;
    if (v22)
    {
      v23 = (unsigned __int8 *)(v19 + 1);
      v24 = a6 + 1;
      do
      {
        v25 = *v23++;
        *v24++ = v25;
      }
      while (v25);
    }
LABEL_31:
    v26 = 0;
    do
    {
      v27 = v26;
      v28 = (unsigned __int8 *)&v19[v26];
      if (&v19[v26] <= v11)
        break;
      v29 = *(v28 - 1);
      if (v29 == 92)
        break;
      --v26;
    }
    while (v29 != 47);
    if (a5)
    {
      if (v28 < (unsigned __int8 *)v19)
      {
        do
          *a5++ = v19[v27++];
        while (v27);
      }
      *a5 = 0;
    }
    if (a4)
    {
      for (; v11 < (const char *)v28; ++a4)
      {
        v30 = *v11++;
        *a4 = v30;
      }
      *a4 = 0;
    }
    return 1;
  }
  return result;
}

uint64_t IsThisUrlOrRealPath(char *__s, _DWORD *a2)
{
  size_t v4;
  size_t v5;
  char *v6;
  char v7;
  unsigned int v8;
  uint64_t result;
  BOOL v10;
  int v11;
  int v12;

  if (a2)
    *a2 = 0;
  if (!__s)
    return 0;
  v4 = strlen(__s);
  if (v4)
  {
    v5 = v4;
    v6 = __s;
    do
    {
      v7 = *v6++;
      v8 = v7;
      if (v7 < 32)
        return 0;
      result = 0;
      v10 = v8 > 0x3F || ((1 << v8) & 0xD000040400000000) == 0;
      if (!v10 || v8 == 124)
        return result;
    }
    while (--v5);
  }
  v11 = *__s;
  result = 1;
  if (v11 != 47 && v11 != 92)
  {
    if (UriGetUrlPrefixLength(__s, 0))
    {
      result = 1;
      if (a2)
        *a2 = 1;
      return result;
    }
    if ((v11 & 0xFFFFFFDF) - 65 <= 0x19 && __s[1] == 58)
      return 1;
    result = (uint64_t)strrchr(__s, 46);
    if (result)
    {
      while (1)
      {
        v12 = *(unsigned __int8 *)result;
        if ((v12 - 32) <= 0x3C && ((1 << (v12 - 32)) & 0x1000000000008001) != 0)
          break;
        if (!*(_BYTE *)result)
          return 1;
        ++result;
      }
      return 0;
    }
  }
  return result;
}

size_t UriGetExtensionFromURI(char *__s, _BYTE *a2, unint64_t a3)
{
  size_t result;
  unint64_t v5;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  _BYTE *v17;
  unint64_t v18;

  result = 0;
  if (__s)
  {
    v5 = a3 - 2;
    if (a3 >= 2)
    {
      result = strlen(__s);
      if (result)
      {
        v7 = 0;
        v8 = result - 1;
        do
        {
          if (__s[v8] == 63)
            v7 = v8;
          --v8;
        }
        while (v8 != -1);
        v9 = 0;
        if (v7)
          v10 = v7;
        else
          v10 = result;
        v11 = v10;
        do
        {
          v12 = v11;
          v13 = v9;
          if (!v11)
            break;
          --v11;
          ++v9;
        }
        while (__s[v12 - 1] != 46);
        if (v12 - 1 >= v10)
        {
          v15 = 0;
        }
        else
        {
          if (v13 >= v5)
            v14 = v5;
          else
            v14 = v13;
          v15 = v14 + 1;
          v16 = __s - 1;
          v17 = a2;
          v18 = v15;
          do
          {
            *v17++ = v16[v12];
            ++v16;
            --v18;
          }
          while (v18);
        }
        a2[v15] = 0;
        return (size_t)a2;
      }
    }
  }
  return result;
}

char *UriToBrokerString(_QWORD *a1, char *__s)
{
  int v4;
  int v5;
  int v6;
  int v7;
  unint64_t v8;
  int v9;
  size_t v10;
  char *result;

  v4 = strlen(__s);
  v5 = v4;
  if (v4 < 1)
    return 0;
  v6 = 0;
  v7 = 0;
  v8 = v4 + 1;
  do
  {
    v9 = __s[(v8 - 2)];
    if (v9 == 46)
    {
      v7 = 1;
      v6 = v5 - 1;
    }
    else if (v9 == 47 || v9 == 92)
    {
      goto LABEL_10;
    }
    --v8;
    --v5;
  }
  while (v8 > 1);
  v5 = 0;
LABEL_10:
  if (!v7)
    return 0;
  v10 = (v6 - v5);
  result = (char *)heap_Calloc(a1, 1, (v10 + 1));
  if (result)
  {
    result = strncpy(result, &__s[v5], v10);
    result[v10] = 0;
  }
  return result;
}

void *strhelper_Strdup(uint64_t a1, char *__s)
{
  size_t v4;
  void *v5;
  void *v6;

  if (!__s)
    return 0;
  v4 = strlen(__s) + 1;
  v5 = (void *)heap_Alloc(a1, v4);
  v6 = v5;
  if (v5)
    memcpy(v5, __s, v4);
  return v6;
}

_BYTE *strhelper_SafeStrtok(uint64_t a1, char *__s, uint64_t *a3)
{
  _BYTE *v3;
  int v4;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;

  v3 = (_BYTE *)(a1 + *a3);
  LOBYTE(v4) = *v3;
  if (!*v3)
    return 0;
  v8 = *a3 + 1;
  while (!strchr(__s, (char)v4))
  {
    *a3 = v8;
    v4 = *(unsigned __int8 *)(a1 + v8++);
    if (!v4)
      return v3;
  }
  v9 = (unsigned __int8 *)(a1 + v8);
  do
  {
    if (!strchr(__s, (char)v4))
      break;
    *(v9 - 1) = 0;
    ++*a3;
    v10 = *v9++;
    LOBYTE(v4) = v10;
  }
  while (v10);
  return v3;
}

char *strhelper_StringAppend(uint64_t *a1, char *__s, char *a3, size_t a4, uint64_t *a5, unint64_t a6)
{
  char *v6;
  size_t v9;
  size_t v12;
  size_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;

  v6 = __s;
  if (a3)
  {
    v9 = a4;
    if (a4 == -1)
    {
      v9 = strlen(a3);
      if (v6)
        goto LABEL_4;
    }
    else if (__s)
    {
LABEL_4:
      if (!a5)
        return 0;
      v12 = strlen(v6);
      if (v9 >= ~v12)
        return 0;
      v13 = v12;
      v14 = *a5;
      if (v9 + v12 + 1 >= *a5)
      {
        if (~v9 > a6 && -2 - (v9 + a6) >= v14)
        {
          v15 = v9 + a6 + v14 + 1;
          *a5 = v15;
          v6 = (char *)heap_Realloc(a1, (uint64_t)v6, v15);
          if (!v6)
            return v6;
          goto LABEL_17;
        }
        return 0;
      }
LABEL_17:
      strncat(v6, a3, v9);
      v6[v13 + v9] = 0;
      return v6;
    }
    if (~v9 <= a6)
      return 0;
    v16 = (char *)heap_Alloc((uint64_t)a1, a6 + v9 + 1);
    v6 = v16;
    if (v16)
    {
      if (a5)
        *a5 = a6 + v9 + 1;
      v13 = 0;
      *v16 = 0;
      goto LABEL_17;
    }
  }
  return v6;
}

uint64_t strhelper_SafeCat(char *a1, char *__s, size_t a3, size_t a4)
{
  uint64_t v4;
  size_t v9;

  v4 = 2246057991;
  if (a1 && __s)
  {
    v9 = strlen(__s);
    if (v9 < a3)
      a3 = v9;
    if (strlen(a1) + a3 >= a4)
    {
      return 2246057993;
    }
    else
    {
      strncat(a1, __s, a3);
      return 0;
    }
  }
  return v4;
}

uint64_t strhelper_SafeCpy(char *a1, char *a2, size_t a3, size_t a4)
{
  if (!a1 || !a2)
    return 2246057991;
  *a1 = 0;
  return strhelper_SafeCat(a1, a2, a3, a4);
}

char *strhelper_csv_EndOfElem(char *a1)
{
  char *result;

  result = strchr(a1, 44);
  if (!result)
    return &a1[strlen(a1)];
  return result;
}

uint64_t strhelper_csv_HasElem(char *a1, char *__s)
{
  uint64_t result;
  size_t v5;
  char *v6;

  result = 0;
  if (a1 && __s)
  {
    v5 = strlen(__s);
    while (1)
    {
      v6 = strhelper_csv_EndOfElem(a1);
      if (v6 - a1 == (int)v5 && !memcmp(a1, __s, v5))
        break;
      a1 = v6 + 1;
      if (!*v6)
        return 0;
    }
    return 1;
  }
  return result;
}

uint64_t tinystack_Reset(uint64_t result)
{
  if (result)
  {
    if (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))result == tinystack_Ini)
      *(_QWORD *)(result + 32) = 0;
  }
  return result;
}

uint64_t tinystack_Ini(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v3 = 2166366218;
  if (!a2)
    return 2166366215;
  v7 = (_QWORD *)heap_Alloc(*(_QWORD *)(a1 + 8), 48);
  if (v7)
  {
    v8 = v7;
    *v7 = 0;
    v9 = heap_Alloc(*(_QWORD *)(a1 + 8), 8 * a2);
    v8[1] = v9;
    if (v9)
    {
      v3 = 0;
      v8[2] = a2;
      v8[3] = a2;
      *v8 = tinystack_Ini;
      v8[4] = 0;
      v8[5] = a1;
      *a3 = v8;
    }
    else
    {
      heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v8);
    }
  }
  return v3;
}

_QWORD *tinystack_Delete(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    if ((uint64_t (*)(uint64_t, uint64_t, _QWORD *))*result == tinystack_Ini)
    {
      v2 = result[1];
      if (v2)
        heap_Free(*(_QWORD **)(result[5] + 8), v2);
      *v1 = 0;
      return heap_Free(*(_QWORD **)(v1[5] + 8), (uint64_t)v1);
    }
  }
  return result;
}

uint64_t tinystack_Push(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = 2166366215;
  if (a1 && *(uint64_t (**)(uint64_t, uint64_t, _QWORD *))a1 == tinystack_Ini)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 16);
    v7 = v6 - 1;
    if (v5 > v6 - 1)
    {
      v8 = *(_QWORD *)(a1 + 24) + v6;
      v9 = heap_Realloc(*(uint64_t **)(*(_QWORD *)(a1 + 40) + 8), *(_QWORD *)(a1 + 8), 8 * v8);
      if (!v9)
        return 2166366218;
      *(_QWORD *)(a1 + 8) = v9;
      *(_QWORD *)(a1 + 16) = v8;
      v7 = v8 - 1;
      v5 = *(_QWORD *)(a1 + 32);
    }
    if (v5 <= v7)
    {
      v2 = 0;
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v5) = a2;
      *(_QWORD *)(a1 + 32) = v5 + 1;
      return v2;
    }
    return 2166366218;
  }
  return v2;
}

uint64_t tinystack_Pop(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = 2166366215;
  if (a1)
  {
    if (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))a1 == tinystack_Ini)
    {
      result = 2166366223;
      if (a2)
      {
        v4 = *(_QWORD *)(a1 + 32);
        if (v4)
        {
          result = 0;
          v5 = v4 - 1;
          *a2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v5);
          *(_QWORD *)(a1 + 32) = v5;
        }
      }
    }
  }
  return result;
}

uint64_t tinystack_View(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;

  result = 2166366215;
  if (a1 && a2 && *(uint64_t (**)(uint64_t, uint64_t, _QWORD *))a1 == tinystack_Ini)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      result = 0;
      *a2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4 - 8);
    }
    else
    {
      return 2166366223;
    }
  }
  return result;
}

uint64_t ttsJSON_InitHooks(uint64_t result)
{
  uint64_t (*v1)(int, void *, size_t);
  void (*v2)(int, void *);
  uint64_t (*v3)(int, size_t);
  void *(*v4)(int, size_t);
  void (*v5)(int, void *);

  v1 = (uint64_t (*)(int, void *, size_t))glob_heap_Realloc;
  v2 = glob_heap_Free;
  v3 = (uint64_t (*)(int, size_t))glob_heap_Alloc;
  if (result)
  {
    v4 = *(void *(**)(int, size_t))result;
    v5 = *(void (**)(int, void *))(result + 8);
    if (!*(_QWORD *)result)
      v4 = glob_heap_Alloc;
    global_hooks = (uint64_t (*)(int, size_t))glob_heap_Alloc;
    off_1F0440158 = (uint64_t (*)(int, void *))glob_heap_Free;
    if (!v5)
      v5 = glob_heap_Free;
    if (v5 != glob_heap_Free || v4 != glob_heap_Alloc)
      v1 = 0;
    v3 = (uint64_t (*)(int, size_t))v4;
    v2 = v5;
  }
  global_hooks = v3;
  off_1F0440158 = (uint64_t (*)(int, void *))v2;
  off_1F0440160 = v1;
  return result;
}

void *glob_heap_Alloc(int a1, size_t size)
{
  return malloc_type_malloc(size, 0x669BCC68uLL);
}

void glob_heap_Free(int a1, void *a2)
{
  free(a2);
}

void *glob_heap_Realloc(int a1, void *ptr, size_t size)
{
  return malloc_type_realloc(ptr, size, 0xE04DAA27uLL);
}

uint64_t hashtable_ObjOpen(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;

  v8 = 2385518602;
  v9 = heap_Alloc(*(_QWORD *)(a2 + 8), 104);
  if (v9)
  {
    v10 = (_QWORD *)v9;
    *(_QWORD *)(v9 + 96) = a2;
    *(_DWORD *)(v9 + 8) = a4;
    *(_QWORD *)(v9 + 16) = a3;
    *(_QWORD *)v9 = 0;
    *(_OWORD *)(v9 + 24) = 0u;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    v11 = heap_Alloc(*(_QWORD *)(a2 + 8), 8 * a3);
    v10[11] = v11;
    if (v11)
    {
      if (a4)
      {
        if (a4 != 1)
        {
          heap_Free(*(_QWORD **)(a2 + 8), v11);
          heap_Free(*(_QWORD **)(a2 + 8), (uint64_t)v10);
          return 2385518599;
        }
        v12 = nadd;
        v13 = nlookup;
      }
      else
      {
        v12 = add;
        v13 = lookup_0;
      }
      v10[9] = v13;
      v10[10] = v12;
      if (a3)
      {
        v14 = 0;
        do
          *(_QWORD *)(v10[11] + 8 * v14++) = 0;
        while (a3 != v14);
      }
      v8 = 0;
      *v10 = hashtable_ObjOpen;
      *a1 = v10;
    }
    else
    {
      heap_Free(*(_QWORD **)(a2 + 8), (uint64_t)v10);
    }
  }
  return v8;
}

uint64_t lookup_0(_QWORD *a1, const char *a2)
{
  uint64_t v4;
  uint64_t (*v5)(const char *, _QWORD);
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  uint64_t i;
  const char *v12;
  unsigned int (*v13)(const char *, const char *, _QWORD);

  v4 = a1[11];
  v5 = (uint64_t (*)(const char *, _QWORD))a1[5];
  if (v5)
  {
    v6 = v5(a2, a1[6]);
  }
  else
  {
    v7 = *(unsigned __int8 *)a2;
    if (*a2)
    {
      v8 = 0;
      v9 = (unsigned __int8 *)(a2 + 1);
      do
      {
        v8 = 31 * v8 + v7;
        v10 = *v9++;
        v7 = v10;
      }
      while (v10);
    }
    else
    {
      v8 = 0;
    }
    v6 = v8 % a1[2];
  }
  for (i = *(_QWORD *)(v4 + 8 * v6); i; i = *(_QWORD *)(i + 16))
  {
    v12 = *(const char **)i;
    v13 = (unsigned int (*)(const char *, const char *, _QWORD))a1[7];
    if (v13)
    {
      if (v13(a2, v12, a1[8]))
        return i;
    }
    else if (!strcmp(a2, v12))
    {
      return i;
    }
  }
  return i;
}

_QWORD *add(_QWORD *a1, char *a2, uint64_t a3)
{
  _QWORD *v6;
  void *v8;
  uint64_t (*v9)(char *, _QWORD);
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  uint64_t v15;

  v6 = (_QWORD *)lookup_0(a1, a2);
  if (!v6)
  {
    v6 = (_QWORD *)heap_Alloc(*(_QWORD *)(a1[12] + 8), 24);
    if (!v6)
      return v6;
    v8 = strhelper_Strdup(*(_QWORD *)(a1[12] + 8), a2);
    *v6 = v8;
    if (!v8)
    {
      heap_Free(*(_QWORD **)(a1[12] + 8), (uint64_t)v6);
      return 0;
    }
    v9 = (uint64_t (*)(char *, _QWORD))a1[5];
    if (v9)
    {
      v10 = v9(a2, a1[6]);
    }
    else
    {
      v11 = *a2;
      if (*a2)
      {
        v12 = 0;
        v13 = (unsigned __int8 *)(a2 + 1);
        do
        {
          v12 = 31 * v12 + v11;
          v14 = *v13++;
          v11 = v14;
        }
        while (v14);
      }
      else
      {
        v12 = 0;
      }
      v10 = v12 % a1[2];
    }
    v15 = a1[11];
    v6[2] = *(_QWORD *)(v15 + 8 * v10);
    *(_QWORD *)(v15 + 8 * v10) = v6;
  }
  v6[1] = a3;
  return v6;
}

const void **nlookup(_QWORD *a1, const void *a2)
{
  uint64_t v3;
  const void **result;

  v3 = a1[11];
  for (result = *(const void ***)(v3 + 8 * Num2Hashval(a1, a2)); result; result = (const void **)result[2])
  {
    if (*result == a2)
      break;
  }
  return result;
}

const void **nadd(_QWORD *a1, const void *a2, const void *a3)
{
  const void **v6;
  const void **v7;
  uint64_t v8;
  uint64_t v9;

  v6 = nlookup(a1, a2);
  if (v6)
    goto LABEL_4;
  v7 = (const void **)heap_Alloc(*(_QWORD *)(a1[12] + 8), 24);
  v6 = v7;
  if (v7)
  {
    *v7 = a2;
    v8 = Num2Hashval(a1, a2);
    v9 = a1[11];
    v6[2] = *(const void **)(v9 + 8 * v8);
    *(_QWORD *)(v9 + 8 * v8) = v6;
LABEL_4:
    v6[1] = a3;
  }
  return v6;
}

uint64_t hashtable_ElementSetDestructor(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, int))result == hashtable_ObjOpen)
      *(_QWORD *)(result + 32) = a2;
  }
  return result;
}

uint64_t hashtable_SetStringToHashFunction(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    if (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, int))result == hashtable_ObjOpen)
    {
      *(_QWORD *)(result + 40) = a2;
      *(_QWORD *)(result + 48) = a3;
    }
  }
  return result;
}

uint64_t hashtable_SetStringCompareFunction(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    if (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, int))result == hashtable_ObjOpen)
    {
      *(_QWORD *)(result + 56) = a2;
      *(_QWORD *)(result + 64) = a3;
    }
  }
  return result;
}

_QWORD *hashtable_ObjClose(_QWORD *result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v1 = (uint64_t)result;
    if (!*result || *result == (_QWORD)hashtable_ObjOpen)
    {
      v3 = result[11];
      if (v3)
      {
        v4 = result[2];
        if (v4)
        {
          v5 = v4 - 1;
          do
          {
            FreeDupla(*(_QWORD **)(*(_QWORD *)(v1 + 96) + 8), *(uint64_t **)(*(_QWORD *)(v1 + 88) + 8 * v5), *(void (**)(_QWORD *))(v1 + 32), *(_DWORD *)(v1 + 8) != 1);
            *(_QWORD *)(*(_QWORD *)(v1 + 88) + 8 * v5--) = 0;
          }
          while (v5 != -1);
          v3 = *(_QWORD *)(v1 + 88);
        }
        heap_Free(*(_QWORD **)(*(_QWORD *)(v1 + 96) + 8), v3);
        *(_QWORD *)(v1 + 88) = 0;
      }
      *(_QWORD *)v1 = 0;
      return heap_Free(*(_QWORD **)(*(_QWORD *)(v1 + 96) + 8), v1);
    }
  }
  return result;
}

_QWORD *FreeDupla(_QWORD *result, uint64_t *a2, void (*a3)(_QWORD *), int a4)
{
  uint64_t *v6;
  _QWORD *v7;
  uint64_t *v8;

  if (a2)
  {
    v6 = a2;
    v7 = result;
    do
    {
      v8 = v6;
      v6 = (uint64_t *)v6[2];
      if (a4)
        heap_Free(v7, *v8);
      *v8 = 0;
      if (a3)
      {
        if (v8[1])
          a3(v7);
      }
      v8[1] = 0;
      result = heap_Free(v7, (uint64_t)v8);
    }
    while (v6);
  }
  return result;
}

BOOL hashtable_Set(_BOOL8 result)
{
  if (result)
    return *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, int))result == hashtable_ObjOpen
        && (*(uint64_t (**)(void))(result + 80))() != 0;
  return result;
}

uint64_t hashtable_Get(uint64_t result)
{
  if (result)
  {
    if (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, int))result == hashtable_ObjOpen)
    {
      result = (*(uint64_t (**)(void))(result + 72))();
      if (result)
        return *(_QWORD *)(result + 8);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t hashtable_Dump(uint64_t a1)
{
  uint64_t result;
  const char *v2;
  void (*v3)(_QWORD, char *, uint64_t);
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(_QWORD, char *, uint64_t);
  const char *v10;
  FILE *v11;
  FILE **v12;
  int v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v34[80];
  char v35[4096];
  uint64_t v36;

  result = MEMORY[0x1E0C80A78](a1);
  v36 = *MEMORY[0x1E0C80C00];
  if (!result)
    return result;
  v6 = result;
  if (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, int))result != hashtable_ObjOpen)
    return result;
  v7 = v5;
  v8 = v4;
  v9 = v3;
  v10 = v2;
  if (LH_stricmp(v4, "stderr"))
  {
    if (LH_stricmp(v8, "stdout"))
    {
      if (LH_stricmp(v8, "trace"))
      {
        result = (uint64_t)fopen(v8, "w");
        v11 = (FILE *)result;
        if (!result)
          return result;
      }
      else
      {
        v11 = 0;
      }
      goto LABEL_12;
    }
    v12 = (FILE **)MEMORY[0x1E0C80C20];
  }
  else
  {
    v12 = (FILE **)MEMORY[0x1E0C80C10];
  }
  v11 = *v12;
LABEL_12:
  v13 = *(_DWORD *)(v6 + 8);
  v14 = "unknown";
  if (!v13)
    v14 = "string";
  if (v13 == 1)
    v15 = "integer";
  else
    v15 = v14;
  __sprintf_chk(v35, 0, 0x1000uLL, "<HASH address=\"%p\" title=\"%s\" type=\"%s\">", (const void *)v6, v10, v15);
  if (v11)
  {
    fputs(v35, v11);
    fputs("\n", v11);
  }
  else
  {
    log_OutText(*(_QWORD *)(*(_QWORD *)(v6 + 96) + 32), (uint64_t)"HASHTABLE", 4, 0, (uint64_t)"%s", v16, v17, v18, (uint64_t)v35);
  }
  if (*(_QWORD *)(v6 + 16))
  {
    v19 = 0;
    do
    {
      v20 = *(_QWORD *)(*(_QWORD *)(v6 + 88) + 8 * v19);
      if (v20)
      {
        __sprintf_chk(v35, 0, 0x1000uLL, "<ELEM value=\"%lu\">", v19);
        if (v11)
        {
          fputs(v35, v11);
          fputs("\n", v11);
        }
        else
        {
          log_OutText(*(_QWORD *)(*(_QWORD *)(v6 + 96) + 32), (uint64_t)"HASHTABLE", 4, 0, (uint64_t)"%s", v21, v22, v23, (uint64_t)v35);
        }
        do
        {
          while (1)
          {
            if (v9)
              v9(*(_QWORD *)(v20 + 8), v34, v7);
            else
              __sprintf_chk(v34, 0, 0x50uLL, "%s", *(const char **)(v20 + 8));
            if (*(_DWORD *)(v6 + 8) == 1)
              __sprintf_chk(v35, 0, 0x1000uLL, "<DUPLA key =\"%lu\" value = \"%s\"/>");
            else
              __sprintf_chk(v35, 0, 0x1000uLL, "<DUPLA key =\"%s\" value = \"%s\"/>");
            if (!v11)
              break;
            fputs(v35, v11);
            fputs("\n", v11);
            v20 = *(_QWORD *)(v20 + 16);
            if (!v20)
            {
              __sprintf_chk(v35, 0, 0x1000uLL, "</ELEM>");
              fputs(v35, v11);
              fputs("\n", v11);
              goto LABEL_37;
            }
          }
          log_OutText(*(_QWORD *)(*(_QWORD *)(v6 + 96) + 32), (uint64_t)"HASHTABLE", 4, 0, (uint64_t)"%s", v24, v25, v26, (uint64_t)v35);
          v20 = *(_QWORD *)(v20 + 16);
        }
        while (v20);
        __sprintf_chk(v35, 0, 0x1000uLL, "</ELEM>");
        log_OutText(*(_QWORD *)(*(_QWORD *)(v6 + 96) + 32), (uint64_t)"HASHTABLE", 4, 0, (uint64_t)"%s", v27, v28, v29, (uint64_t)v35);
      }
LABEL_37:
      ++v19;
    }
    while (v19 < *(_QWORD *)(v6 + 16));
  }
  __sprintf_chk(v35, 0, 0x1000uLL, "</HASH>");
  if (!v11)
    return log_OutText(*(_QWORD *)(*(_QWORD *)(v6 + 96) + 32), (uint64_t)"HASHTABLE", 4, 0, (uint64_t)"%s", v30, v31, v32, (uint64_t)v35);
  fputs(v35, v11);
  result = fputs("\n", v11);
  if (v11 != (FILE *)*MEMORY[0x1E0C80C20] && v11 != (FILE *)*MEMORY[0x1E0C80C10])
    return fclose(v11);
  return result;
}

uint64_t Num2Hashval(_QWORD *a1, const void *a2)
{
  uint64_t (*v3)(char *, _QWORD);
  unsigned int v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  char v9;
  _BYTE v10[27];

  *(_QWORD *)&v10[19] = *MEMORY[0x1E0C80C00];
  __sprintf_chk(&v9, 0, 0x14uLL, "%p", a2);
  v3 = (uint64_t (*)(char *, _QWORD))a1[5];
  if (v3)
    return v3(&v9, a1[6]);
  v5 = v9;
  if (v9)
  {
    v6 = 0;
    v7 = v10;
    do
    {
      v6 = 31 * v6 + v5;
      v8 = *v7++;
      v5 = v8;
    }
    while (v8);
  }
  else
  {
    v6 = 0;
  }
  return v6 % a1[2];
}

uint64_t log_OutText(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  _BOOL4 v22;
  int v24;
  uint64_t v25;
  int v26;

  if (!a1 || log_GetLogLevel(a1) < a3)
    return 0;
  v14 = 0;
  v17 = a3 > 4 && *(_DWORD *)(a1 + 100) != 0;
  if (a5 && !v17)
  {
    if (a2)
    {
      v18 = 0;
      v14 = 0;
      do
      {
        v19 = *(_QWORD *)(a1 + v18 + 24);
        if (v19)
        {
          v20 = *(_QWORD *)(v19 + 48);
          v21 = a3 >= 2 && v18 == 16;
          v22 = !v21;
          if (v20 && v22)
          {
            v24 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(a1 + v18 + 24) + 48))(*(_QWORD *)(a1 + v18 + 16), a2, a3, a4, a5, &a9);
            if (v24 >= 0)
              v14 = v14;
            else
              v14 = v24;
          }
        }
        v18 += 16;
      }
      while (v18 != 80);
      v25 = *(_QWORD *)(a1 + 112);
      if (v25 && *(_QWORD *)(v25 + 48))
      {
        v26 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(a1 + 112)
                                                                                               + 48))(*(_QWORD *)(a1 + 104), a2, a3, a4, a5, &a9);
        if (v26 >= 0)
          return v14;
        else
          return v26;
      }
    }
    else
    {
      return 2226135046;
    }
  }
  return v14;
}

uint64_t log_GetLogLevel(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD);
  unsigned int v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD);
  unsigned int v9;

  if (result)
  {
    v1 = result;
    v2 = 0;
    v3 = 1;
    do
    {
      v4 = *(_QWORD *)(v1 + v2 + 24);
      if (v4)
      {
        v5 = *(uint64_t (**)(_QWORD))(v4 + 80);
        if (v5)
        {
          v6 = v5(*(_QWORD *)(v1 + v2 + 16));
          if (v6 > v3)
            v3 = v6;
        }
      }
      v2 += 16;
    }
    while (v2 != 80);
    v7 = *(_QWORD *)(v1 + 112);
    if (v7)
    {
      v8 = *(uint64_t (**)(_QWORD))(v7 + 80);
      if (v8)
      {
        v9 = v8(*(_QWORD *)(v1 + 104));
        if (v9 > v3)
          v3 = v9;
      }
    }
    if (v3 <= 4 || *(_DWORD *)(v1 + 100) == 0)
      return v3;
    else
      return 4;
  }
  return result;
}

uint64_t log_VOutText(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  if (!a1 || log_GetLogLevel(a1) < a3)
    return 0;
  v10 = 0;
  v13 = a3 > 4 && *(_DWORD *)(a1 + 100) != 0;
  if (a5 && !v13)
  {
    if (a2)
    {
      v14 = 0;
      v10 = 0;
      do
      {
        v15 = *(_QWORD *)(a1 + v14 + 24);
        if (v15 && *(_QWORD *)(v15 + 48))
        {
          v16 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + v14 + 24) + 48))(*(_QWORD *)(a1 + v14 + 16), a2, a3, a4, a5);
          if (v16 >= 0)
            v10 = v10;
          else
            v10 = v16;
        }
        v14 += 16;
      }
      while (v14 != 80);
      v17 = *(_QWORD *)(a1 + 112);
      if (v17 && *(_QWORD *)(v17 + 48))
      {
        v18 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 112) + 48))(*(_QWORD *)(a1 + 104), a2, a3, a4, a5);
        if (v18 >= 0)
          return v10;
        else
          return v18;
      }
    }
    else
    {
      return 2226135046;
    }
  }
  return v10;
}

uint64_t log_OutBinary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v24;
  uint64_t v25;
  int v26;

  if (!a1 || log_GetLogLevel(a1) < a3 || a3 >= 5 && *(_DWORD *)(a1 + 100))
    return 0;
  v14 = 2226135046;
  if (a2 && a7)
  {
    if (a9)
      ssftstring_Clear(a9);
    v16 = 0;
    v14 = 0;
    do
    {
      v17 = *(_QWORD *)(a1 + v16 + 24);
      if (v17)
      {
        v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v17 + 56);
        if (v18)
        {
          v19 = *(_QWORD *)(a1 + v16 + 16);
          if (a9)
          {
            if (ssftstring_Size(a9))
              v20 = 0;
            else
              v20 = a9;
          }
          else
          {
            v20 = 0;
          }
          v21 = v18(v19, a2, a3, a4, a5, a6, a7, a8, v20);
          if (v21 >= 0)
            v14 = v14;
          else
            v14 = v21;
        }
      }
      v16 += 16;
    }
    while (v16 != 80);
    v22 = *(_QWORD *)(a1 + 112);
    if (v22)
    {
      v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v22 + 56);
      if (v23)
      {
        v24 = *(_QWORD *)(a1 + 104);
        if (a9)
        {
          if (ssftstring_Size(a9))
            v25 = 0;
          else
            v25 = a9;
        }
        else
        {
          v25 = 0;
        }
        v26 = v23(v24, a2, a3, a4, a5, a6, a7, a8, v25);
        if (v26 >= 0)
          return v14;
        else
          return v26;
      }
    }
  }
  return v14;
}

uint64_t log_OutPublic(uint64_t result, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  if (result)
  {
    if (a2)
      return log_VOutPublic((uint64_t **)result, a2, a3, a4, &a9);
    else
      return 2226135046;
  }
  return result;
}

uint64_t log_VOutPublic(uint64_t **a1, uint64_t a2, uint64_t a3, char *__s, unsigned int *a5)
{
  uint64_t v8;
  uint64_t i;
  uint64_t *v10;
  uint64_t (*v11)(uint64_t *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);
  int v12;
  uint64_t *v13;
  uint64_t (*v14)(uint64_t *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);
  int v15;
  __int128 v17;
  __int128 v18;
  unsigned int *v19;

  v19 = a5;
  if (!a1)
    return 0;
  if (!a2)
    return 2226135046;
  v17 = 0u;
  v18 = 0u;
  if (__s)
  {
    v8 = log_ParseKeyValuePairs_Restricted(*a1, __s, v19, (uint64_t)&v17);
    if ((v8 & 0x80000000) != 0)
      return v8;
  }
  else
  {
    v8 = 0;
  }
  for (i = 0; i != 10; i += 2)
  {
    v10 = a1[i + 3];
    if (v10)
    {
      v11 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))v10[8];
      if (v11)
      {
        v12 = v11(a1[i + 2], a2, a3, HIDWORD(v17), v18, *((_QWORD *)&v18 + 1));
        if (v12 >= 0)
          v8 = v8;
        else
          v8 = v12;
      }
    }
  }
  v13 = a1[14];
  if (v13)
  {
    v14 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))v13[8];
    if (v14)
    {
      v15 = v14(a1[13], a2, a3, HIDWORD(v17), v18, *((_QWORD *)&v18 + 1));
      if (v15 >= 0)
        v8 = v8;
      else
        v8 = v15;
    }
  }
  log_FreeKeyValuePairs(*a1, (uint64_t *)&v17);
  return v8;
}

uint64_t log_ParseKeyValuePairs_Restricted(uint64_t *a1, char *__s, unsigned int *a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  char v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  _BYTE *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unsigned int *v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unsigned int *v33;
  const __int32 **v34;
  const __int32 *v35;
  size_t v36;
  unsigned int *v37;
  const char **v38;
  const char *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  size_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _WORD *v53;
  size_t v54;
  int v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  _BYTE *v62;
  unint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  size_t v67;
  uint64_t v69;
  _BYTE v71[128];
  char __sa[32];
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v7 = 2226135047;
  if (strlen(__s) > 0x7F)
    goto LABEL_112;
  v8 = 0;
  v9 = 0;
  while (1)
  {
    v10 = __s[v8];
    if (v10 != 37)
      break;
    v11 = v8 + 1;
    if (__s[v8 + 1] == 108 && __s[v8 + 2] == 115)
    {
      v71[v9] = 37;
      v71[v9 + 1] = 83;
      v9 += 2;
      v8 += 3;
    }
    else
    {
LABEL_9:
      v71[v9++] = v10;
      v8 = v11;
    }
  }
  if (__s[v8])
  {
    v11 = v8 + 1;
    goto LABEL_9;
  }
  v71[v9] = 0;
  if (!a4)
    goto LABEL_112;
  v12 = 0;
  v13 = 0;
  while (2)
  {
    v14 = v71[v12];
    if (v14 == 32)
    {
      v17 = 1;
      goto LABEL_18;
    }
    if (v14 == 37)
    {
      ++v13;
      v15 = v71[v12 + 1];
      v16 = v15 - 83;
      if ((v15 - 83) <= 0x25)
      {
        if (((1 << v16) & 0x25200B0001) != 0)
        {
          v17 = 2;
LABEL_18:
          v12 += v17;
          continue;
        }
        if (((1 << v16) & 0x2200000) != 0)
        {
          v18 = v71[v12 + 2] - 100;
          if (v18 > 0x11 || ((1 << v18) & 0x28001) == 0)
            goto LABEL_112;
          v17 = 3;
          goto LABEL_18;
        }
      }
      if (v15 != 46 || v71[v12 + 2] != 42 || (v71[v12 + 3] | 0x20) != 0x73)
        goto LABEL_112;
      v17 = 4;
      goto LABEL_18;
    }
    break;
  }
  if (v71[v12])
    goto LABEL_112;
  if ((v13 & 1) != 0)
    v19 = 2226135047;
  else
    v19 = 0;
  *(_DWORD *)(a4 + 8) = 0;
  v20 = (_BYTE *)heap_Alloc((uint64_t)a1, 4096);
  *(_QWORD *)a4 = v20;
  if (!v20)
  {
LABEL_91:
    v7 = 2226135050;
    goto LABEL_112;
  }
  v21 = v13 & 0xFFFFFFFE;
  *(_DWORD *)(a4 + 8) = 4096;
  *v20 = 0;
  *(_DWORD *)(a4 + 12) = 0;
  if ((v13 & 0xFFFFFFFE) >= 2)
  {
    v22 = heap_Calloc(a1, v21 >> 1, 8);
    *(_QWORD *)(a4 + 16) = v22;
    if (!v22 || (v23 = heap_Calloc(a1, v21 >> 1, 8), (*(_QWORD *)(a4 + 24) = v23) == 0))
    {
      v7 = 2226135050;
      goto LABEL_112;
    }
  }
  else if (!v21)
  {
    goto LABEL_109;
  }
  v24 = 0;
  v25 = 0;
  while (2)
  {
    v26 = v71[v25];
    if (v26 == 32)
    {
      v27 = v25;
      goto LABEL_82;
    }
    if (v26 == 37)
    {
      v27 = v25 + 1;
      v28 = v71[v25 + 1];
      if (v28 == 46)
      {
        if (v71[v25 + 2] == 42)
        {
          v29 = a3;
          a3 += 2;
          v30 = *v29;
          v27 = v25 + 3;
          v28 = v71[v25 + 3];
          goto LABEL_45;
        }
        v30 = -1;
      }
      else
      {
        v30 = -1;
LABEL_45:
        if (v28 == 108)
          v31 = v27 + 1;
        else
          v31 = v27;
        if (v28 == 104)
          ++v27;
        else
          v27 = v31;
      }
      v32 = v71[v27];
      if (v32 > 0x65)
      {
        switch(v71[v27])
        {
          case 'p':
            a3 += 2;
            __sprintf_chk(__sa, 0, 0x20uLL, "%p");
            goto LABEL_75;
          case 'q':
          case 'r':
          case 't':
          case 'v':
          case 'w':
            goto LABEL_112;
          case 's':
            v38 = (const char **)a3;
            a3 += 2;
            v39 = *v38;
            if (v39)
              v40 = v39;
            else
              v40 = &byte_1DEBD87CE;
            if (v30 == -1)
              v30 = strlen(v40);
            v41 = aux_ResizeKeyValueVect(a1, a4, v30 + 2);
            if ((v41 & 0x80000000) != 0)
              goto LABEL_111;
            v42 = *(_QWORD *)a4 + strlen(*(const char **)a4);
            strncat(*(char **)a4, v40, v30);
            v43 = *(const char **)a4;
            v44 = strlen(*(const char **)a4);
            goto LABEL_77;
          case 'u':
            v45 = a3;
            a3 += 2;
            v46 = *v45;
            v47 = 10;
            goto LABEL_74;
          case 'x':
            v48 = a3;
            a3 += 2;
            v46 = *v48;
            v47 = 16;
LABEL_74:
            LH_utoa(v46, __sa, v47);
            break;
          default:
            if (v32 != 102)
              goto LABEL_112;
            a3 += 2;
            __sprintf_chk(__sa, 0, 0x20uLL, "%f");
            break;
        }
        goto LABEL_75;
      }
      if (v32 == 83)
      {
        v34 = (const __int32 **)a3;
        a3 += 2;
        v35 = *v34;
        if (v30 == -1)
          v36 = wcslen(*v34);
        else
          v36 = v30;
        v51 = heap_Calloc(a1, v36 + 1, 2);
        if (!v51)
          goto LABEL_91;
        v52 = v51;
        if (v36)
        {
          v53 = (_WORD *)v51;
          v54 = v36;
          do
          {
            v55 = *v35++;
            *v53++ = v55;
            --v54;
          }
          while (v54);
        }
        *(_WORD *)(v51 + 2 * v36) = 0;
        v56 = utf8_16BitNbrOfUtf8Chars(v51);
        v57 = aux_ResizeKeyValueVect(a1, a4, v56 + 2);
        if ((v57 & 0x80000000) != 0)
        {
          v69 = v57;
          heap_Free(a1, v52);
          v7 = v69;
          goto LABEL_112;
        }
        v42 = *(_QWORD *)a4 + strlen(*(const char **)a4);
        utf8_16bitToUtf8(v52, v42);
        *(_WORD *)(*(_QWORD *)a4 + strlen(*(const char **)a4)) = 32;
        heap_Free(a1, v52);
      }
      else
      {
        if (v32 == 99)
        {
          v37 = a3;
          a3 += 2;
          *(_WORD *)__sa = *v37;
        }
        else
        {
          if (v32 != 100)
            goto LABEL_112;
          v33 = a3;
          a3 += 2;
          LH_itoa(*v33, __sa, 0xAu);
        }
LABEL_75:
        v49 = strlen(__sa);
        v41 = aux_ResizeKeyValueVect(a1, a4, v49 + 2);
        if ((v41 & 0x80000000) != 0)
        {
LABEL_111:
          v7 = v41;
          goto LABEL_112;
        }
        v42 = *(_QWORD *)a4 + strlen(*(const char **)a4);
        strcat(*(char **)a4, __sa);
        v43 = *(const char **)a4;
        v44 = strlen(*(const char **)a4);
LABEL_77:
        *(_WORD *)&v43[v44] = 32;
      }
      v50 = v24 >> 1;
      if ((v24 & 1) != 0)
      {
        *(_QWORD *)(*(_QWORD *)(a4 + 24) + 8 * v50) = v42;
        ++*(_DWORD *)(a4 + 12);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(a4 + 16) + 8 * v50) = v42;
      }
      v19 = 0;
      ++v24;
LABEL_82:
      v25 = v27 + 1;
      if (v24 >= v21)
        goto LABEL_94;
      continue;
    }
    break;
  }
  if (v71[v25])
    goto LABEL_112;
LABEL_94:
  if (*(_DWORD *)(a4 + 12))
  {
    v58 = 0;
    do
    {
      if (v58)
      {
        v59 = *(_QWORD *)(*(_QWORD *)(a4 + 16) + 8 * v58);
        if (v59)
        {
          v60 = (_BYTE *)(v59 - 1);
          if ((unint64_t)v60 > *(_QWORD *)a4 && *v60 == 32)
            *v60 = 0;
        }
      }
      v61 = *(_QWORD *)(*(_QWORD *)(a4 + 24) + 8 * v58);
      if (v61)
      {
        v62 = (_BYTE *)(v61 - 1);
        if ((unint64_t)v62 > *(_QWORD *)a4 && *v62 == 32)
          *v62 = 0;
      }
      ++v58;
      v63 = *(unsigned int *)(a4 + 12);
    }
    while (v58 < v63);
    v64 = *(_QWORD *)(a4 + 24);
    v65 = v63 - 1;
    v66 = *(_QWORD *)(v64 + 8 * v65);
    if (v66)
    {
      v67 = v66 + strlen(*(const char **)(v64 + 8 * v65));
      if (*(_BYTE *)(v67 - 1) == 32)
        *(_BYTE *)(v67 - 1) = 0;
    }
  }
LABEL_109:
  v7 = v19;
  if ((v19 & 0x80000000) != 0)
LABEL_112:
    log_FreeKeyValuePairs(a1, (uint64_t *)a4);
  return v7;
}

_QWORD *log_FreeKeyValuePairs(_QWORD *result, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = result;
  v4 = *a2;
  if (v4)
  {
    result = heap_Free(result, v4);
    *a2 = 0;
  }
  v5 = a2[2];
  if (v5)
  {
    result = heap_Free(v3, v5);
    a2[2] = 0;
  }
  v6 = a2[3];
  if (v6)
  {
    result = heap_Free(v3, v6);
    a2[3] = 0;
  }
  return result;
}

uint64_t **log_OutEvent(uint64_t **result, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  if (result)
    return (uint64_t **)log_VOutEvent(result, a2, a3, &a9);
  return result;
}

uint64_t log_VOutEvent(uint64_t **a1, uint64_t a2, char *__s, unsigned int *a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t *v13;
  uint64_t (*v14)(uint64_t *, uint64_t, _QWORD, _QWORD, _QWORD);
  int v15;
  uint64_t *v16;
  uint64_t (*v17)(uint64_t *, uint64_t, _QWORD, _QWORD, _QWORD);
  int v18;
  __int128 v20;
  __int128 v21;
  unsigned int *v22;

  v22 = a4;
  if (!a1)
    return 0;
  v20 = 0u;
  v21 = 0u;
  if (__s)
  {
    v6 = log_ParseKeyValuePairs_Restricted(*a1, __s, v22, (uint64_t)&v20);
    if ((v6 & 0x80000000) != 0)
      return v6;
    v7 = a1[15];
    if (v7)
    {
      if (*(_BYTE *)v7)
      {
        v8 = *a1;
        v9 = heap_Realloc(*a1, v21, 8 * (HIDWORD(v20) + 1));
        if (v9)
        {
          *(_QWORD *)&v21 = v9;
          v10 = heap_Realloc(v8, *((uint64_t *)&v21 + 1), 8 * (HIDWORD(v20) + 1));
          if (v10)
          {
            *((_QWORD *)&v21 + 1) = v10;
            v11 = HIDWORD(v20);
            *(_QWORD *)(v21 + 8 * HIDWORD(v20)) = "SECURE";
            *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * v11) = v7;
            HIDWORD(v20) = v11 + 1;
          }
        }
      }
    }
  }
  else
  {
    v6 = 0;
  }
  for (i = 0; i != 10; i += 2)
  {
    v13 = a1[i + 3];
    if (v13)
    {
      v14 = (uint64_t (*)(uint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))v13[9];
      if (v14)
      {
        v15 = v14(a1[i + 2], a2, HIDWORD(v20), v21, *((_QWORD *)&v21 + 1));
        if (v15 >= 0)
          v6 = v6;
        else
          v6 = v15;
      }
    }
  }
  v16 = a1[14];
  if (v16)
  {
    v17 = (uint64_t (*)(uint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))v16[9];
    if (v17)
    {
      v18 = v17(a1[13], a2, HIDWORD(v20), v21, *((_QWORD *)&v21 + 1));
      if (v18 >= 0)
        v6 = v6;
      else
        v6 = v18;
    }
  }
  log_FreeKeyValuePairs(*a1, (uint64_t *)&v20);
  return v6;
}

uint64_t log_SetSessionID(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t);
  int v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD, uint64_t);
  int v11;

  if (!a1)
    return 0;
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = *(_QWORD *)(a1 + v4 + 24);
    if (v6)
    {
      v7 = *(uint64_t (**)(_QWORD, uint64_t))(v6 + 88);
      if (v7)
      {
        v8 = v7(*(_QWORD *)(a1 + v4 + 16), a2);
        if (v8 >= 0)
          v5 = v5;
        else
          v5 = v8;
      }
    }
    v4 += 16;
  }
  while (v4 != 80);
  v9 = *(_QWORD *)(a1 + 112);
  if (v9)
  {
    v10 = *(uint64_t (**)(_QWORD, uint64_t))(v9 + 88);
    if (v10)
    {
      v11 = v10(*(_QWORD *)(a1 + 104), a2);
      if (v11 >= 0)
        return v5;
      else
        return v11;
    }
  }
  return v5;
}

uint64_t log_OutTraceTuningData(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  uint64_t i;
  uint64_t *v13;
  uint64_t (*v14)(uint64_t *, uint64_t, _QWORD, _QWORD, _QWORD);
  int v15;
  uint64_t *v16;
  uint64_t (*v17)(uint64_t *, uint64_t, _QWORD, _QWORD, _QWORD);
  int v18;
  __int128 v20;
  __int128 v21;

  if (!a1 || !log_HasTraceTuningDataSubscriber((_BOOL8)a1))
    return 0;
  v20 = 0u;
  v21 = 0u;
  if (!a3 || (a3 = log_ParseKeyValuePairs_Restricted(*a1, (char *)a3, &a9, (uint64_t)&v20), (a3 & 0x80000000) == 0))
  {
    for (i = 0; i != 10; i += 2)
    {
      v13 = a1[i + 3];
      if (v13)
      {
        v14 = (uint64_t (*)(uint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))v13[12];
        if (v14)
        {
          v15 = v14(a1[i + 2], a2, HIDWORD(v20), v21, *((_QWORD *)&v21 + 1));
          if (v15 >= 0)
            a3 = a3;
          else
            a3 = v15;
        }
      }
    }
    v16 = a1[14];
    if (v16)
    {
      v17 = (uint64_t (*)(uint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))v16[12];
      if (v17)
      {
        v18 = v17(a1[13], a2, HIDWORD(v20), v21, *((_QWORD *)&v21 + 1));
        if (v18 >= 0)
          a3 = a3;
        else
          a3 = v18;
      }
    }
    log_FreeKeyValuePairs(*a1, (uint64_t *)&v20);
  }
  return a3;
}

BOOL log_HasTraceTuningDataSubscriber(_BOOL8 result)
{
  _BOOL8 v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    v2 = 16;
    while (!TraceTuningDataEnabled((_QWORD *)(v1 + v2)))
    {
      v2 += 16;
      if (v2 == 96)
        return TraceTuningDataEnabled((_QWORD *)(v1 + 104));
    }
    return 1;
  }
  return result;
}

uint64_t log_OutTraceTuningDataBinary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  int v16;
  uint64_t v17;
  uint64_t (*v18)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  int v19;

  if (!a1 || !log_HasTraceTuningDataSubscriber(a1))
    return 0;
  if (!a5)
    return 2226135046;
  v12 = 0;
  v13 = 0;
  do
  {
    v14 = *(_QWORD *)(a1 + v12 + 24);
    if (v14)
    {
      v15 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 104);
      if (v15)
      {
        v16 = v15(*(_QWORD *)(a1 + v12 + 16), a2, a3, a4, a5, a6);
        if (v16 >= 0)
          v13 = v13;
        else
          v13 = v16;
      }
    }
    v12 += 16;
  }
  while (v12 != 80);
  v17 = *(_QWORD *)(a1 + 112);
  if (v17)
  {
    if ((a2 - 402) <= 0xFFFFFFFD)
    {
      v18 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 104);
      if (v18)
      {
        v19 = v18(*(_QWORD *)(a1 + 104), a2, a3, a4, a5, a6);
        if (v19 >= 0)
          return v13;
        else
          return v19;
      }
    }
  }
  return v13;
}

BOOL TraceTuningDataEnabled(_QWORD *a1)
{
  _QWORD *v1;
  unsigned int (*v3)(_QWORD, uint64_t);
  unsigned int (*v4)(_QWORD);

  v1 = (_QWORD *)a1[1];
  if (!v1 || !v1[13] && !v1[12])
    return 0;
  v3 = (unsigned int (*)(_QWORD, uint64_t))v1[14];
  if (v3)
  {
    if (v3(*a1, 231) != 1)
      return 0;
    v1 = (_QWORD *)a1[1];
  }
  v4 = (unsigned int (*)(_QWORD))v1[10];
  return !v4 || v4(*a1) > 3;
}

uint64_t log_RefreshParameters(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD, _QWORD);
  int v6;

  v2 = 0;
  v3 = 0;
  do
  {
    v4 = *(_QWORD *)(a1 + v2 + 40);
    if (v4)
    {
      v5 = *(uint64_t (**)(_QWORD, _QWORD))(v4 + 120);
      if (v5)
      {
        v6 = v5(*(_QWORD *)(a1 + v2 + 48), *(_QWORD *)(a1 + v2 + 56));
        if (v6 >= 0)
          v3 = v3;
        else
          v3 = v6;
      }
    }
    v2 += 40;
  }
  while (v2 != 200);
  return v3;
}

uint64_t log_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2226135041;
  result = 0;
  *a2 = &ILog;
  return result;
}

uint64_t aux_ResizeKeyValueVect(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  const char *v6;
  size_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v6 = *(const char **)a2;
  v7 = strlen(*(const char **)a2) + a3;
  v8 = *(unsigned int *)(a2 + 8);
  if (v7 < v8)
    return 0;
  v9 = 0;
  v10 = a3;
  LODWORD(v11) = *(_DWORD *)(a2 + 8);
  while (1)
  {
    v12 = heap_Realloc(a1, v9, (v11 + 4096));
    if (!v12)
      break;
    v13 = (char *)v12;
    v11 = (*(_DWORD *)(a2 + 8) + 4096);
    *(_DWORD *)(a2 + 8) = v11;
    v9 = v12;
    if (strlen(*(const char **)a2) + v10 < v11)
    {
      v14 = 0;
      if (v7 >= v8 && v6)
      {
        strcpy(v13, *(const char **)a2);
        v15 = 0;
        v16 = *(_DWORD *)(a2 + 12);
        if ((v16 + 1) > 1)
          v17 = v16 + 1;
        else
          v17 = 1;
        v18 = 8 * v17;
        do
        {
          v19 = *(_QWORD *)(a2 + 16);
          v20 = *(_QWORD *)(v19 + v15);
          if (v20 >= (unint64_t)v6)
            *(_QWORD *)(v19 + v15) = &v13[(v20 - (_DWORD)v6)];
          v21 = *(_QWORD *)(a2 + 24);
          v22 = *(_QWORD *)(v21 + v15);
          if (v22 >= (unint64_t)v6)
            *(_QWORD *)(v21 + v15) = &v13[(v22 - (_DWORD)v6)];
          v15 += 8;
        }
        while (v18 != v15);
        heap_Free(a1, *(_QWORD *)a2);
        v14 = 0;
        *(_QWORD *)a2 = v13;
      }
      return v14;
    }
  }
  v14 = 2226135050;
  if (v9)
    heap_Free(a1, v9);
  return v14;
}

uint64_t cupreader_open(_WORD *a1, int a2, uint64_t *a3, uint64_t **a4)
{
  uint64_t inited;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  size_t v13;
  void *v14;
  uint64_t Data;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  const char **v30;
  char *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char **v41;
  size_t v42;
  void *v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;

  v49 = 0;
  inited = InitRsrcFunction(a1, a2, &v49);
  if ((inited & 0x80000000) != 0)
  {
    v9 = inited;
    v11 = 0;
  }
  else
  {
    v9 = 2166366218;
    if (a3)
    {
      v10 = (uint64_t *)heap_Calloc(*(_QWORD **)(v49 + 8), 1, 80);
      v11 = v10;
      if (v10)
      {
        *v10 = (uint64_t)a3;
        v12 = *a3;
        v13 = *(unsigned int *)(a3[1] + 16);
        v14 = (void *)heap_Calloc(*(_QWORD **)(v12 + 8), (v13 + 1), 1);
        v11[5] = (uint64_t)v14;
        if (!v14)
          goto LABEL_24;
        memcpy(v14, *(const void **)(*(_QWORD *)(*v11 + 8) + 8), v13);
        v50 = 0;
        Data = clcarchive_GetData(*v11, 1u, 0, *(_DWORD *)(*(_QWORD *)(*v11 + 8) + 56), (uint64_t *)&v50);
        if ((Data & 0x80000000) != 0)
          goto LABEL_23;
        v16 = (uint64_t)v50;
        *((_DWORD *)v11 + 8) = (v50[2] << 16) | (v50[3] << 24) | (v50[1] << 8) | *v50;
        heap_Free(*(_QWORD **)(*(_QWORD *)*v11 + 8), v16);
        v50 = 0;
        Data = clcarchive_GetData(*v11, 2u, 0, *(_DWORD *)(*(_QWORD *)(*v11 + 8) + 96), (uint64_t *)&v50);
        if ((Data & 0x80000000) != 0)
          goto LABEL_23;
        v17 = (uint64_t)v50;
        *((_DWORD *)v11 + 6) = *(_DWORD *)v50;
        heap_Free(*(_QWORD **)(*(_QWORD *)*v11 + 8), v17);
        Data = clcarchive_GetData(*v11, 3u, 0, *(_DWORD *)(*(_QWORD *)(*v11 + 8) + 136), (uint64_t *)&v50);
        if ((Data & 0x80000000) != 0)
          goto LABEL_23;
        v18 = (uint64_t)v50;
        *((_DWORD *)v11 + 7) = *(_DWORD *)v50;
        heap_Free(*(_QWORD **)(*(_QWORD *)*v11 + 8), v18);
        v19 = *((unsigned int *)v11 + 6);
        if ((_DWORD)v19)
        {
          v20 = heap_Calloc(*(_QWORD **)(*(_QWORD *)*v11 + 8), v19, 32);
          v11[1] = v20;
          if (!v20)
            goto LABEL_24;
          if (*((_DWORD *)v11 + 6))
          {
            v21 = 0;
            v22 = 0;
            v23 = 4;
            while (1)
            {
              v24 = v23;
              v25 = v23 + 1;
              v47 = v11[1];
              v26 = v47 + v21;
              v27 = *(_QWORD *)(*v11 + 8);
              v28 = *(_DWORD *)(v27 + 40 * v25 + 16);
              v44 = v24;
              Data = clcarchive_GetData(*v11, v24, 0, *(_DWORD *)(v27 + 40 * v24 + 16), (uint64_t *)(v47 + v21));
              if ((Data & 0x80000000) != 0)
                break;
              v45 = v22;
              v29 = v21;
              v30 = (const char **)(v26 + 8);
              Data = clcarchive_GetData(*v11, v25, 0, v28, (uint64_t *)(v26 + 8));
              if ((Data & 0x80000000) != 0)
                break;
              v31 = *(char **)v26;
              if (!v31)
                goto LABEL_24;
              v32 = *v30;
              if (!v32)
                goto LABEL_24;
              if (!strcmp(v32, "application/x-vocalizer-resources")
                || !strcmp(v32, "application/x-vocalizer-resources-package"))
              {
                v9 = 2166366226;
                goto LABEL_24;
              }
              v33 = v29;
              v34 = cupreader_readData(v11, v31, (uint64_t *)(v47 + v29 + 16), (unsigned int *)(v47 + v29 + 24));
              v35 = v34;
              if ((v34 & 0x80000000) != 0)
              {
                v9 = v34;
                goto LABEL_24;
              }
              v22 = v45 + 1;
              v21 = v33 + 32;
              v23 = v25 + 1;
              if (v45 + 1 >= (unint64_t)*((unsigned int *)v11 + 6))
              {
                v36 = v44 + 2;
                goto LABEL_30;
              }
            }
LABEL_23:
            v9 = Data;
            goto LABEL_24;
          }
          v35 = 0;
          v36 = 4;
LABEL_30:
          v38 = *((unsigned int *)v11 + 7);
          if (!(_DWORD)v38)
          {
LABEL_37:
            *a4 = v11;
            return v35;
          }
          v39 = heap_Calloc(*(_QWORD **)(*(_QWORD *)*v11 + 8), v38, 8);
          v11[2] = v39;
          if (v39)
          {
            if (*((_DWORD *)v11 + 7))
            {
              v40 = 0;
              v46 = *((_DWORD *)v11 + 6) + v36;
              while (1)
              {
                v41 = (const char **)(*(_QWORD *)(*v11 + 8) + 40 * (v46 + v40));
                if (!*v41)
                  break;
                v48 = v11[2];
                v42 = strlen(*v41);
                v43 = (void *)heap_Calloc(*(_QWORD **)(*(_QWORD *)*v11 + 8), v42 + 1, 1);
                *(_QWORD *)(v48 + 8 * v40) = v43;
                if (!v43)
                  goto LABEL_24;
                memcpy(v43, *v41, v42);
                if (++v40 >= (unint64_t)*((unsigned int *)v11 + 7))
                  goto LABEL_37;
              }
              v9 = 2166366224;
              goto LABEL_24;
            }
            goto LABEL_37;
          }
        }
        else
        {
          v9 = 2166366223;
        }
LABEL_24:
        if (*v11)
          *v11 = 0;
      }
    }
    else
    {
      v11 = 0;
      v9 = 2166366214;
    }
  }
  cupreader_close(a1, a2, (uint64_t)v11);
  return v9;
}

uint64_t cupreader_close(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t i;
  uint64_t v12;
  uint64_t v14;

  v14 = 0;
  inited = InitRsrcFunction(a1, a2, &v14);
  v5 = inited;
  if (a3 && (inited & 0x80000000) == 0)
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (v6)
    {
      if (*(_DWORD *)(a3 + 24))
      {
        v7 = 0;
        v8 = 0;
        do
        {
          if (*(_QWORD *)(v6 + v7))
          {
            heap_Free(*(_QWORD **)(v14 + 8), *(_QWORD *)(v6 + v7));
            v6 = *(_QWORD *)(a3 + 8);
            *(_QWORD *)(v6 + v7) = 0;
          }
          if (*(_QWORD *)(v6 + v7 + 8))
          {
            heap_Free(*(_QWORD **)(v14 + 8), *(_QWORD *)(v6 + v7 + 8));
            v6 = *(_QWORD *)(a3 + 8);
            *(_QWORD *)(v6 + v7 + 8) = 0;
          }
          ++v8;
          v7 += 32;
        }
        while (v8 < *(unsigned int *)(a3 + 24));
      }
      heap_Free(*(_QWORD **)(v14 + 8), v6);
      *(_QWORD *)(a3 + 8) = 0;
    }
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
      v10 = *(unsigned int *)(a3 + 28);
      if ((_DWORD)v10)
      {
        for (i = 0; i < v10; ++i)
        {
          if (*(_QWORD *)(v9 + 8 * i))
          {
            heap_Free(*(_QWORD **)(v14 + 8), *(_QWORD *)(v9 + 8 * i));
            v9 = *(_QWORD *)(a3 + 16);
            *(_QWORD *)(v9 + 8 * i) = 0;
            v10 = *(unsigned int *)(a3 + 28);
          }
        }
      }
      heap_Free(*(_QWORD **)(v14 + 8), v9);
      *(_QWORD *)(a3 + 16) = 0;
    }
    v12 = *(_QWORD *)(a3 + 40);
    if (v12)
    {
      heap_Free(*(_QWORD **)(v14 + 8), v12);
      *(_QWORD *)(a3 + 40) = 0;
    }
    heap_Free(*(_QWORD **)(v14 + 8), a3);
  }
  return v5;
}

uint64_t cupreader_readData(uint64_t *a1, char *__s1, uint64_t *a3, unsigned int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *i;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;

  result = 2166366214;
  if (a3 && a1 && __s1 && a4)
  {
    v9 = *a1;
    v10 = *(unsigned int *)(*a1 + 16);
    if (!(_DWORD)v10)
      return 0;
    v11 = 0;
    v16 = 0;
    v12 = *(_QWORD *)(v9 + 8);
    for (i = (unsigned int *)(v12 + 16); !v12 || strcmp(__s1, *((const char **)i - 2)); i += 10)
    {
      if (v10 == ++v11)
        return 0;
    }
    v14 = *((_QWORD *)i - 1);
    if (v14)
    {
      result = 0;
LABEL_15:
      *a3 = v14;
      v15 = *i;
LABEL_20:
      *a4 = v15;
      return result;
    }
    result = clcarchive_GetData(v9, v11, 0, *i, &v16);
    if ((result & 0x80000000) == 0)
    {
      v14 = v16;
      *((_QWORD *)i - 1) = v16;
      goto LABEL_15;
    }
  }
  if (a3)
    *a3 = 0;
  if (a4)
  {
    v15 = 0;
    goto LABEL_20;
  }
  return result;
}

BOOL cupreader_IsCupInTheScope(uint64_t a1, _QWORD *a2)
{
  return !paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"cup_name", a2) && *a2 != 0;
}

BOOL cupreader_GetTuningDataNameInCup(uint64_t a1, _QWORD *a2)
{
  return !paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"tuning_data_name_in_cup", a2) && *a2 != 0;
}

uint64_t cupreader_PrependCupName(char *a1, const char *a2, unint64_t a3)
{
  size_t v6;
  size_t v7;
  unint64_t v8;
  uint64_t result;

  v6 = strlen(a1);
  v7 = strlen(a2);
  v8 = v7 + v6 + 1;
  if (v8 > a3)
    return 2166366226;
  for (; v7 + v6 >= v7 + 1; --v6)
    a1[v7 + v6] = a1[v6 - 1];
  a1[v7] = 58;
  strncpy(a1, a2, v7);
  result = 0;
  a1[v8] = 0;
  return result;
}

uint64_t clcarchive_ObjOpen(_WORD *a1, int a2, const char *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char *v11;
  int v12;
  uint64_t v13;
  uint64_t v15;

  v15 = 0;
  v4 = 2349867018;
  if (!a4)
    return 2349867015;
  inited = InitRsrcFunction(a1, a2, &v15);
  if ((inited & 0x80000000) != 0)
    return inited;
  *a4 = 0;
  v8 = heap_Calloc(*(_QWORD **)(v15 + 8), 1, 144);
  if (v8)
  {
    v9 = v8;
    v10 = strlen(a3);
    v11 = (char *)heap_Alloc(*(_QWORD *)(v15 + 8), (v10 + 1));
    *(_QWORD *)(v9 + 128) = v11;
    if (v11)
    {
      strcpy(v11, a3);
      *(_QWORD *)(v9 + 64) = heap_Alloc;
      *(_QWORD *)(v9 + 72) = heap_Calloc;
      *(_QWORD *)(v9 + 80) = heap_Realloc;
      *(_QWORD *)(v9 + 88) = heap_Free;
      v12 = OOCAllocator_Con(v9 + 24, (_OWORD *)(v9 + 64), *(_QWORD *)(v15 + 8));
      v13 = LH_ERROR_to_VERROR(v12);
      if ((v13 & 0x80000000) != 0)
      {
        heap_Free(*(_QWORD **)(v15 + 8), *(_QWORD *)(v9 + 128));
        heap_Free(*(_QWORD **)(v15 + 8), v9);
        return 2349867012;
      }
      else
      {
        *(_QWORD *)v9 = v15;
        *(_DWORD *)(v9 + 120) = 0;
        v4 = v13;
        *a4 = v9;
      }
    }
    else
    {
      heap_Free(*(_QWORD **)(v15 + 8), v9);
    }
  }
  return v4;
}

uint64_t clcarchive_GetData(uint64_t a1, unsigned int a2, int a3, unsigned int a4, uint64_t *a5)
{
  uint64_t v10;
  int v11;
  int v12;
  uint64_t result;

  v10 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), a4 + 3, 1);
  if (v10)
  {
    v11 = (***(uint64_t (****)(_QWORD, _QWORD))(a1 + 104))(*(_QWORD *)(a1 + 104) - *(_QWORD *)(**(_QWORD **)(a1 + 104) + 56), (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 40 * a2 + 20) + a3));
    if ((LH_ERROR_to_VERROR(v11) & 0x80000000) != 0
      || (v12 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 104) + 8))(*(_QWORD *)(a1 + 104) - *(_QWORD *)(**(_QWORD **)(a1 + 104) + 56), v10, a4), result = LH_ERROR_to_VERROR(v12), (result & 0x80000000) != 0))
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v10);
      v10 = 0;
      result = 2349867012;
    }
  }
  else
  {
    result = 2349867018;
  }
  *a5 = v10;
  return result;
}

uint64_t clcarchive_Parse(uint64_t a1, _OWORD *a2, uint64_t a3, _DWORD *a4, int a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  _DWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v41;
  unsigned __int8 v42;
  unsigned __int16 v43;
  uint64_t v44;
  _QWORD v45[2];

  v45[1] = *MEMORY[0x1E0C80C00];
  v43 = 0;
  v42 = 0;
  v5 = 2349867012;
  v44 = 0;
  v45[0] = 0;
  if (!a1)
    return 2349867016;
  v7 = 2349867015;
  if (a2 && a3)
  {
    if (a5)
      v9 = 0;
    else
      v9 = a3;
    v41 = 0;
    *(_QWORD *)(a1 + 112) = v9;
    v10 = PNEW_BinBlockStreamReader_Con(a1 + 24, a1 + 24, a2, a3, a4, (uint64_t *)(a1 + 96));
    if ((LH_ERROR_to_VERROR(v10) & 0x80000000) != 0)
      goto LABEL_66;
    v11 = a1 + 104;
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, unsigned int *))(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32)
                                                                                       + 120))(*(_QWORD *)(a1 + 96) + 32 - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32) + 224), 535211295, 0, a1 + 104, &v41);
    v13 = LH_ERROR_to_VERROR(v12);
    v14 = v41;
    *(_DWORD *)(a1 + 136) = v41;
    if (v13 < 0
      || !BinBlockStreamReader_IsVersionAccepted(v14, 1703936)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 1638400)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 1572864)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 1507328)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 1441792)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 1376256)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 1310720)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 1245184)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 1179648)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 1114112)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 0x100000)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 983040)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 917504)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 851968)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 786432)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 720896)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 655360)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 589824)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 0x80000)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 459008)
      && (!BinBlockStreamReader_IsVersionAccepted(v41, 393216) || strstr(*(char **)(a1 + 128), "/cfg4")))
    {
      goto LABEL_66;
    }
    v15 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)v11 + 8))(*(_QWORD *)v11 - *(_QWORD *)(**(_QWORD **)v11 + 56), &v44, 7);
    if ((LH_ERROR_to_VERROR(v15) & 0x80000000) != 0
      || (_DWORD)v44 != 1380013646
      || BYTE4(v44) > 7u
      || BYTE4(v44) == 7 && (BYTE5(v44) > 4u || BYTE5(v44) == 4 && BYTE6(v44)))
    {
      goto LABEL_66;
    }
    v16 = (_DWORD *)(a1 + 16);
    v17 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 104) + 8))(*(_QWORD *)(a1 + 104) - *(_QWORD *)(**(_QWORD **)(a1 + 104) + 56), a1 + 16, 4);
    v18 = LH_ERROR_to_VERROR(v17);
    if ((v18 & 0x80000000) != 0)
      goto LABEL_66;
    v7 = v18;
    v19 = *v16;
    if ((_DWORD)v19)
    {
      v20 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), v19, 40);
      *(_QWORD *)(a1 + 8) = v20;
      if (!v20)
        goto LABEL_65;
      if (*v16)
      {
        v21 = 0;
        v22 = 11;
LABEL_41:
        v23 = (*(uint64_t (**)(_QWORD, unsigned __int16 *, uint64_t))(**(_QWORD **)v11 + 8))(*(_QWORD *)v11 - *(_QWORD *)(**(_QWORD **)v11 + 56), &v43, 2);
        if ((LH_ERROR_to_VERROR(v23) & 0x80000000) != 0)
          goto LABEL_66;
        v24 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), v43 + 1, 1);
        *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40 * v21) = v24;
        if (v24)
        {
          v25 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)v11 + 8))(*(_QWORD *)v11 - *(_QWORD *)(**(_QWORD **)v11 + 56), v24, v43);
          if ((LH_ERROR_to_VERROR(v25) & 0x80000000) != 0)
            goto LABEL_66;
          v26 = v43;
          v27 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 104) + 8))(*(_QWORD *)(a1 + 104) - *(_QWORD *)(**(_QWORD **)(a1 + 104) + 56), *(_QWORD *)(a1 + 8) + 40 * v21 + 16, 4);
          if ((LH_ERROR_to_VERROR(v27) & 0x80000000) != 0)
            goto LABEL_66;
          v28 = v22 + v26 + 6;
          v29 = *(_QWORD *)(a1 + 8);
          if (!a5 && v21)
          {
            v30 = v29 + 40 * v21;
            *(_DWORD *)(v30 + 20) = v28;
            v31 = (***(uint64_t (****)(_QWORD, _QWORD))v11)(*(_QWORD *)v11 - *(_QWORD *)(**(_QWORD **)v11 + 56), (*(_DWORD *)(v30 + 16) + v28));
            goto LABEL_50;
          }
          v32 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, *(unsigned int *)(v29 + 40 * v21 + 16));
          v33 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(v33 + 40 * v21 + 8) = v32;
          if (v32)
          {
            v34 = v33 + 40 * v21;
            *(_DWORD *)(v34 + 20) = v28;
            v31 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)v11 + 8))(*(_QWORD *)v11 - *(_QWORD *)(**(_QWORD **)v11 + 56), v32, *(unsigned int *)(v34 + 16));
LABEL_50:
            if ((LH_ERROR_to_VERROR(v31) & 0x80000000) == 0)
            {
              v22 += v26 + *(_DWORD *)(*(_QWORD *)(a1 + 8) + 40 * v21 + 16) + 15;
              while (1)
              {
                v35 = (*(uint64_t (**)(_QWORD, unsigned __int8 *, uint64_t))(**(_QWORD **)v11 + 8))(*(_QWORD *)v11 - *(_QWORD *)(**(_QWORD **)v11 + 56), &v42, 1);
                if ((LH_ERROR_to_VERROR(v35) & 0x80000000) != 0)
                  break;
                v36 = (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)v11 + 8))(*(_QWORD *)v11 - *(_QWORD *)(**(_QWORD **)v11 + 56), v45, 8);
                v37 = LH_ERROR_to_VERROR(v36);
                if ((v37 & 0x80000000) != 0)
                  break;
                if (!v42 && !v45[0])
                {
                  v7 = v37;
                  if (++v21 < (unint64_t)*v16)
                    goto LABEL_41;
                  return v7;
                }
                v38 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 40 * v21 + 16);
                v22 += 9;
                if (LODWORD(v45[0]) > v38 || LODWORD(v45[0]) + HIDWORD(v45[0]) * v42 > v38)
                  goto LABEL_66;
              }
            }
            goto LABEL_66;
          }
        }
LABEL_65:
        v5 = 2349867018;
LABEL_66:
        clcarchive_ObjClose(a1);
        return v5;
      }
    }
  }
  return v7;
}

uint64_t clcarchive_ObjClose(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
    return 2349867016;
  v2 = *(_QWORD *)(a1 + 104);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2 - *(_QWORD *)(*(_QWORD *)v2 + 56));
  v3 = *(_QWORD *)(a1 + 96);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  v4 = *(_QWORD *)(a1 + 128);
  if (v4)
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v4);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    if (*(_DWORD *)(a1 + 16))
    {
      v6 = 0;
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(a1 + 8);
        v9 = *(_QWORD *)(v8 + v6);
        if (v9)
        {
          heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v9);
          v8 = *(_QWORD *)(a1 + 8);
        }
        v10 = *(_QWORD *)(v8 + v6 + 8);
        if (v10)
        {
          heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v10);
          v8 = *(_QWORD *)(a1 + 8);
        }
        v11 = *(_QWORD *)(v8 + v6 + 24);
        if (v11)
          heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v11);
        ++v7;
        v6 += 40;
      }
      while (v7 < *(unsigned int *)(a1 + 16));
      v5 = *(_QWORD *)(a1 + 8);
    }
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v5);
  }
  heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), a1);
  return 0;
}

double clcarchive_GetMemoryStreamInterface@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = *(double *)&clcMemoryStreamInterface;
  *a1 = clcMemoryStreamInterface;
  a1[1] = *(_OWORD *)off_1EA939238;
  return result;
}

size_t ClcDataRead(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  size_t v7;

  v6 = *(unsigned int *)(a4 + 12);
  if (a3 * a2 >= (*(_DWORD *)(a4 + 8) - v6))
    v7 = (*(_DWORD *)(a4 + 8) - v6);
  else
    v7 = a3 * a2;
  memcpy(a1, (const void *)(*(_QWORD *)a4 + v6), v7);
  *(_DWORD *)(a4 + 12) += v7;
  return v7 / a2;
}

uint64_t ClcDataSeek(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t v5;

  if (a3 == 1)
  {
    v5 = *(unsigned int *)(a1 + 12) + a2;
    if (v5 >= 0 && v5 < (unint64_t)*(unsigned int *)(a1 + 8))
    {
      result = 0;
      *(_DWORD *)(a1 + 12) = v5;
      return result;
    }
  }
  else if (!a3 && *(_DWORD *)(a1 + 8) > a2)
  {
    result = 0;
    *(_DWORD *)(a1 + 12) = a2;
    return result;
  }
  return 1;
}

BOOL ClcDataError(uint64_t a1)
{
  return *(_DWORD *)(a1 + 12) > *(_DWORD *)(a1 + 8);
}

uint64_t ClcDataFinished()
{
  return 0;
}

size_t auxil_strlcat(const char *a1, const char *a2, uint64_t a3)
{
  size_t v6;
  size_t v7;
  size_t v8;
  size_t v9;

  v6 = strlen(a1);
  v7 = strlen(a2);
  v8 = v7;
  if (a3 && v6 < a3 - 1)
  {
    if (v7 >= a3 - v6)
      v9 = a3 - v6 - 1;
    else
      v9 = v7;
    memcpy((void *)&a1[v6], a2, v9);
    a1[v9 + v6] = 0;
  }
  return v8 + v6;
}

size_t auxil_strlcpy(void *a1, char *__s, size_t a3)
{
  size_t v6;
  size_t v7;
  size_t v8;

  v6 = strlen(__s);
  v7 = v6;
  if (a3)
  {
    if (v6 >= a3)
      v8 = a3 - 1;
    else
      v8 = v6;
    memcpy(a1, __s, v8);
    *((_BYTE *)a1 + v8) = 0;
  }
  return v7;
}

uint64_t brokeraux_ComposeBrokerString(uint64_t a1, const char *a2, int a3, int a4, char *a5, const char *a6, char *a7, char *a8, unint64_t a9)
{
  char *v9;
  const char *v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  const char *v21;
  size_t v22;
  size_t i;
  uint64_t result;
  _BOOL4 IsUniVoice;
  const char *v26;
  char *v27;
  const char *v28;
  char *__s1;
  const char *v30;
  const char *v31;

  v9 = a8;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  auxil_strlcpy(a8, &byte_1DEBD87CE, a9);
  if ((paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"datapackagename", &v26) & 0x80000000) != 0)
  {
    v26 = 0;
  }
  else if (v26 && *v26)
  {
    auxil_strlcat(v9, v26, a9);
    auxil_strlcat(v9, ":", a9);
  }
  if (!a4)
    goto LABEL_22;
  if ((paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"fedatapackaging", &v27) & 0x80000000) != 0)
    v27 = 0;
  v30 = 0;
  v31 = a6;
  __s1 = 0;
  switch(a3)
  {
    case 0:
      goto LABEL_19;
    case 1:
      paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"fecfg", &__s1);
      if (__s1 && !strcmp(__s1, "mpthreeml"))
        goto LABEL_18;
      v18 = (uint64_t)a6;
      if (!a6)
      {
        paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"voice", &v31);
        v18 = (uint64_t)v31;
      }
      if (hlp_IsUniVoice(v18, a5))
      {
LABEL_18:
        v19 = "feextcfgdataprefix";
        goto LABEL_20;
      }
LABEL_19:
      v19 = "fedataprefix";
LABEL_20:
      paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)v19, &v30);
      v17 = v30;
      if (v30)
        goto LABEL_21;
      break;
    case 2:
      auxil_strlcat(v9, a6, a9);
      v17 = "/";
LABEL_21:
      auxil_strlcat(v9, v17, a9);
      break;
  }
LABEL_22:
  v20 = v27;
  if (!v27 || !*v27)
  {
LABEL_31:
    v22 = auxil_strlcat(v9, a2, a9);
    if (v22 >= a9)
      return 9;
    for (i = v22; i; --i)
    {
      *v9 = ssft_tolower(*v9);
      ++v9;
    }
    return 0;
  }
  if (strcmp(v27, "clc"))
    goto LABEL_25;
  auxil_strlcat(v9, "clc/", a9);
  auxil_strlcat(v9, a5, a9);
  if (a6)
  {
    IsUniVoice = hlp_IsUniVoice((uint64_t)a6, a5);
    if (a3 != 2 && !IsUniVoice)
    {
      auxil_strlcat(v9, "/", a9);
      auxil_strlcat(v9, a6, a9);
    }
  }
  auxil_strlcat(v9, "/", a9);
  result = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"fecfg", &v28);
  if ((result & 0x80000000) == 0)
  {
    auxil_strlcat(v9, v28, a9);
    if (!a7)
    {
LABEL_26:
      if (v26 && *v26)
        v21 = "/";
      else
        v21 = ":";
      auxil_strlcat(v9, v21, a9);
      goto LABEL_31;
    }
    auxil_strlcat(v9, "/", a9);
    v20 = "bet2";
    if (!strstr(a7, "bet2"))
    {
      v20 = "bet3";
      if (!strstr(a7, "bet3"))
      {
        if (strstr(a7, "bet4"))
          v20 = "bet4";
        else
          v20 = "bet1";
      }
    }
LABEL_25:
    auxil_strlcat(v9, v20, a9);
    goto LABEL_26;
  }
  return result;
}

BOOL hlp_IsUniVoice(uint64_t a1, char *a2)
{
  _BOOL8 result;
  char v5;
  uint64_t v6;
  int v7;
  __darwin_ct_rune_t v8;

  result = 0;
  if (a1 && a2)
  {
    v5 = *a2;
    if (*a2)
    {
      v6 = 0;
      v7 = 0;
      while (1)
      {
        v8 = __tolower(v5);
        if (v8 != __tolower(*(char *)(a1 + v6)))
          break;
        v6 = (unsigned __int16)++v7;
        v5 = a2[(unsigned __int16)v7];
        if (!v5)
          return strcmp((const char *)(a1 + v6), "uni") == 0;
      }
      if (a2[v6])
        return 0;
    }
    else
    {
      v6 = 0;
    }
    return strcmp((const char *)(a1 + v6), "uni") == 0;
  }
  return result;
}

uint64_t xmlaux_calculateExtraEscapeBytes(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;

  result = 0;
  if (a1 && a2)
  {
    v4 = 0;
    result = 0;
    do
    {
      if (!*(_BYTE *)(a1 + v4))
        break;
      for (i = 0; i != 168; i += 24)
      {
        if (*(unsigned __int8 *)(a1 + v4) == xmlESC[i + 16])
          v6 = *(_QWORD *)&xmlESC[i + 8] - 1;
        else
          v6 = 0;
        result += v6;
      }
      ++v4;
    }
    while (v4 != a2);
  }
  return result;
}

char *xmlaux_escape(char *result, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v8;

  v3 = result;
  v4 = 0;
  if (a2 && a3)
  {
    v4 = 0;
    for (i = 0; i != a3; ++i)
    {
      if (!*(_BYTE *)(a2 + i))
        break;
      v8 = 0;
      v3[v4] = *(_BYTE *)(a2 + i);
      do
      {
        if (*(unsigned __int8 *)(a2 + i) == xmlESC[v8 + 16])
        {
          result = strcpy(&v3[v4], &xmlESC[v8]);
          v4 = v4 + *(_QWORD *)&xmlESC[v8 + 8] - 1;
        }
        v8 += 24;
      }
      while (v8 != 168);
      ++v4;
    }
  }
  v3[v4] = 0;
  return result;
}

uint64_t synstrmaux_InitStreamOpener(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_WORD *)result = 0;
  *(_QWORD *)(result + 808) = a2;
  *(_QWORD *)(result + 816) = a3;
  return result;
}

_WORD *synstrmaux_RegisterStream(_WORD *result, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6)
{
  unint64_t v6;
  _WORD *v7;

  v6 = (unsigned __int16)*result;
  if (v6 <= 0x13)
  {
    v7 = &result[20 * (unsigned __int16)*result];
    *((_QWORD *)v7 + 1) = a2;
    *((_DWORD *)v7 + 4) = a3;
    *((_QWORD *)v7 + 3) = a4;
    *((_DWORD *)v7 + 8) = a5;
    *((_QWORD *)v7 + 5) = a6;
    *(_QWORD *)a6 = 0;
    *(_DWORD *)(a6 + 8) = 0;
  }
  *result = v6 + 1;
  return result;
}

_WORD *synstrmaux_RegisterInStream(_WORD *result, uint64_t a2, int a3, uint64_t a4)
{
  unint64_t v4;
  _WORD *v5;

  v4 = (unsigned __int16)*result;
  if (v4 <= 0x13)
  {
    v5 = &result[20 * (unsigned __int16)*result];
    *((_QWORD *)v5 + 1) = a2;
    *((_DWORD *)v5 + 4) = 0;
    *((_QWORD *)v5 + 3) = 0;
    *((_DWORD *)v5 + 8) = a3;
    *((_QWORD *)v5 + 5) = a4;
    *(_QWORD *)a4 = 0;
    *(_DWORD *)(a4 + 8) = 0;
  }
  *result = v4 + 1;
  return result;
}

_WORD *synstrmaux_RegisterOutStream(_WORD *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _WORD *v4;

  v3 = (unsigned __int16)*result;
  if (v3 <= 0x13)
  {
    v4 = &result[20 * (unsigned __int16)*result];
    *((_QWORD *)v4 + 1) = a2;
    *((_DWORD *)v4 + 4) = 1;
    *((_QWORD *)v4 + 3) = 0;
    *((_DWORD *)v4 + 8) = 0;
    *((_QWORD *)v4 + 5) = a3;
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
  }
  *result = v3 + 1;
  return result;
}

uint64_t synstrmaux_OpenStreams(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t (**v10)(void);
  uint64_t (**v11)(void);
  unsigned __int16 *i;
  const char *v13;
  int v14;
  uint64_t (**v15)(void);
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;

  if (*a1 <= 0x14u)
    v4 = 0;
  else
    v4 = 9;
  if (!*a1)
    return v4;
  v9 = 0;
  v10 = (uint64_t (**)(void))(a2 + 184);
  v11 = (uint64_t (**)(void))(a2 + 152);
  for (i = a1 + 12; ; i += 20)
  {
    if (*((_DWORD *)i - 2))
    {
      v13 = (const char *)*((_QWORD *)i - 2);
      v14 = strcmp("application/x-realspeak-markers-pp;version=4.0", v13);
      v15 = v11;
      if (!v14 || (v16 = strcmp("application/x-tnplus-words;version=1.0", v13), v15 = v10, !v16))
        *(_QWORD *)i = (*v15)();
    }
    v4 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a2 + 64))(a3, a4, *(unsigned __int16 *)(*((_QWORD *)a1 + 102) + 64), *((_QWORD *)i - 2), *(_QWORD *)i, *((unsigned int *)i - 2), *((_QWORD *)i + 2));
    if ((v4 & 0x80000000) == 0)
      goto LABEL_15;
    v21 = *((_QWORD *)a1 + 101);
    v22 = *((_QWORD *)a1 + 102);
    if (!*((_DWORD *)i + 2))
      break;
    v23 = "output";
    if (!*((_DWORD *)i - 2))
      v23 = "input";
    log_OutText(v21, v22, 3, 0, (uint64_t)"Cannot open %s stream of type %s", v18, v19, v20, (uint64_t)v23);
    v4 = 0;
LABEL_15:
    if (++v9 >= (unint64_t)*a1)
      return v4;
  }
  if (*((_DWORD *)i - 2))
    v24 = 65001;
  else
    v24 = 65000;
  log_OutPublic(v21, v22, v24, "%s%s", v17, v18, v19, v20, "contentType");
  return v4;
}

uint64_t synstrmaux_CloseStreams(_WORD *a1, uint64_t a2)
{
  unsigned int v2;
  unint64_t v5;
  uint64_t v6;
  _QWORD **v7;

  v2 = (unsigned __int16)*a1;
  if (!*a1)
    return 0;
  v5 = 0;
  v6 = 0;
  v7 = (_QWORD **)(a1 + 20);
  do
  {
    if (**v7)
    {
      v6 = CloseStream((uint64_t)a1, a2, (uint64_t)(v7 - 4), v6);
      v2 = (unsigned __int16)*a1;
    }
    ++v5;
    v7 += 5;
  }
  while (v5 < v2);
  return v6;
}

uint64_t CloseStream(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  const char *v12;

  v10 = (*(uint64_t (**)(_QWORD, _QWORD))(a2 + 72))(**(_QWORD **)(a3 + 32), *(_QWORD *)(*(_QWORD *)(a3 + 32) + 8));
  v11 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)v11 = 0;
  *(_DWORD *)(v11 + 8) = 0;
  if ((v10 & 0x80000000) != 0)
  {
    v12 = "output";
    if (!*(_DWORD *)(a3 + 8))
      v12 = "input";
    log_OutText(*(_QWORD *)(a1 + 808), *(_QWORD *)(a1 + 816), 3, 0, (uint64_t)"Cannot close %s stream of type %s", v7, v8, v9, (uint64_t)v12);
  }
  if (a4 >= 0)
    return v10;
  else
    return a4;
}

uint64_t synstrmaux_CloseOutStreamsOnly(_WORD *a1, uint64_t a2)
{
  unsigned int v2;
  unint64_t v5;
  uint64_t v6;
  _QWORD **v7;

  v2 = (unsigned __int16)*a1;
  if (!*a1)
    return 0;
  v5 = 0;
  v6 = 0;
  v7 = (_QWORD **)(a1 + 20);
  do
  {
    if (**v7 && *((_DWORD *)v7 - 6))
    {
      v6 = CloseStream((uint64_t)a1, a2, (uint64_t)(v7 - 4), v6);
      v2 = (unsigned __int16)*a1;
    }
    ++v5;
    v7 += 5;
  }
  while (v5 < v2);
  return v6;
}

size_t synstrmaux_BuildAudioContentType(const char *a1, unsigned int a2, char *a3, size_t a4)
{
  size_t v7;
  size_t v8;
  char __s[16];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  LH_utoa(a2, __s, 0xAu);
  v7 = strlen(a1);
  v8 = strlen(__s);
  strncpy(a3, a1, a4);
  if (a4 > v7)
  {
    strncpy(&a3[v7], __s, a4 - v7);
LABEL_4:
    a3[a4 - 1] = 0;
    return v8 + v7;
  }
  if (a4)
    goto LABEL_4;
  return v8 + v7;
}

uint64_t esc_seq_deinit(_WORD *a1, int a2, _QWORD *a3, int a4)
{
  esc_seq_remove_params(a1, a2);
  nuance_pcre_DeInit(a3, a4);
  return nuance_pcre_ObjClose((uint64_t)a3, a4);
}

uint64_t esc_seq_remove_params(_WORD *a1, int a2)
{
  uint64_t result;
  uint64_t *v3;
  int v4;
  uint64_t v5;

  v5 = 0;
  v4 = 0;
  v3 = 0;
  result = InitRsrcFunction(a1, a2, &v5);
  if ((result & 0x80000000) == 0)
  {
    if ((paramc_ParamGet(*(_QWORD *)(v5 + 40), (uint64_t)"fullescseqdata", &v3, &v4) & 0x80000000) == 0)
    {
      if (*v3)
        heap_Free(*(_QWORD **)(v5 + 8), *v3);
      paramc_ParamRemove(*(_QWORD *)(v5 + 40), (uint64_t)"fullescseqdata");
    }
    if ((paramc_ParamGet(*(_QWORD *)(v5 + 40), (uint64_t)"fullesctnseqdata", &v3, &v4) & 0x80000000) == 0)
    {
      if (*v3)
        heap_Free(*(_QWORD **)(v5 + 8), *v3);
      paramc_ParamRemove(*(_QWORD *)(v5 + 40), (uint64_t)"fullesctnseqdata");
    }
    result = paramc_ParamGet(*(_QWORD *)(v5 + 40), (uint64_t)"fullescvoiceseqdata", &v3, &v4);
    if ((result & 0x80000000) == 0)
    {
      if (*v3)
        heap_Free(*(_QWORD **)(v5 + 8), *v3);
      return paramc_ParamRemove(*(_QWORD *)(v5 + 40), (uint64_t)"fullescvoiceseqdata");
    }
  }
  return result;
}

uint64_t esc_seq_init(_WORD *a1, int a2, uint64_t *a3)
{
  uint64_t inited;
  int UInt;
  unsigned __int16 v8;
  int v9;
  __int16 v10;
  __int16 v11;
  unsigned __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  size_t v20;
  const char *v21;
  size_t v22;
  uint64_t v23;
  char *v24;
  size_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  size_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  const char *v41;
  char *__s;
  uint64_t v43;

  v36 = 0;
  v35 = 0;
  inited = InitRsrcFunction(a1, a2, &v36);
  if ((inited & 0x80000000) != 0)
    return inited;
  UInt = paramc_ParamGetUInt(*(_QWORD *)(v36 + 40), (uint64_t)"ppmaxpcreframeblocks", (unsigned int *)&v35);
  v8 = v35;
  v9 = paramc_ParamGetUInt(*(_QWORD *)(v36 + 40), (uint64_t)"ppnumframesinblock", (unsigned int *)&v35);
  v10 = v35;
  inited = nuance_pcre_ObjOpen(a1, a2, (uint64_t)a3);
  if ((inited & 0x80000000) != 0)
    return inited;
  if (v9 < 0)
    v11 = 50;
  else
    v11 = v10;
  if (UInt < 0)
    v12 = 30;
  else
    v12 = v8;
  v13 = nuance_pcre_Init((_QWORD *)*a3, a3[1], v12, v11);
  if ((v13 & 0x80000000) != 0)
  {
    v17 = v13;
    nuance_pcre_ObjClose(*a3, a3[1]);
    *a3 = safeh_GetNullHandle();
    a3[1] = v19;
    return v17;
  }
  esc_seq_remove_params(a1, a2);
  v14 = *a3;
  v15 = a3[1];
  __s = 0;
  v43 = 0;
  v41 = 0;
  v40 = 0;
  inited = InitRsrcFunction(a1, a2, &v43);
  if ((inited & 0x80000000) != 0)
    return inited;
  paramc_ParamGetStr(*(_QWORD *)(v43 + 40), (uint64_t)"__NUAN_alternative_esc_seq__", &__s);
  v16 = 0;
  while (strcmp((&g_RegExPlainPatterns)[v16], "esc"))
  {
    v16 += 2;
    if (v16 == 12)
      return 0;
  }
  if (__s && *__s)
    v20 = strlen(__s);
  else
    v20 = 0;
  v17 = 3489669120;
  v21 = (&g_RegExPlainPatterns)[v16 + 1];
  v22 = strlen(v21);
  v23 = heap_Calloc(*(_QWORD **)(v43 + 8), 1, v20 + v22 + 2);
  if (!v23)
    return 3489669130;
  v24 = (char *)v23;
  v25 = strlen(v21);
  v26 = heap_Calloc(*(_QWORD **)(v43 + 8), 1, v20 + v25 + 6);
  if (v26)
  {
    v27 = (char *)v26;
    strcpy(v24, v21);
    if (v20)
    {
      v24[strlen(v21) - 1] = 0;
      *(_WORD *)&v24[strlen(v24)] = 124;
      v28 = strcat(v24, __s);
      *(_WORD *)&v24[strlen(v28)] = 41;
    }
    v29 = strlen(v24);
    v30 = (char *)heap_Calloc(*(_QWORD **)(v43 + 8), 1, v29 + 107);
    v31 = v30;
    if (v30)
    {
      v32 = strcpy(v30, v24);
      strcpy(&v31[strlen(v32)], "(?:[\\t\\r\\n ])*[\\\\]([vV][oO][iI][cC][eE])(?:[\\t\\r\\n ])*[=](?:[\\t\\r\\n ])*(([\\w-():,{}])*)(?:[\\t\\r\\n ])*[\\\\]");
      v33 = strcpy(v27, v24);
      strcpy(&v27[strlen(v33)], "\\\\tn");
      v39 = nuance_pcre_compile(v14, v15, v24, 2048, &v41, &v40, 0);
      if (v39)
      {
        heap_Free(*(_QWORD **)(v43 + 8), (uint64_t)v24);
        v34 = nuance_pcre_compile(v14, v15, v27, 2048, &v41, &v40, 0);
        v38 = v34;
        heap_Free(*(_QWORD **)(v43 + 8), (uint64_t)v27);
        if (v34)
        {
          v37 = nuance_pcre_compile(v14, v15, v31, 2048, &v41, &v40, 0);
          if (v37)
          {
            heap_Free(*(_QWORD **)(v43 + 8), (uint64_t)v31);
            paramc_ParamSetPermanent(*(_QWORD *)(v43 + 40), (uint64_t)"fullescseqdata", &v39, 8uLL);
            paramc_ParamSetPermanent(*(_QWORD *)(v43 + 40), (uint64_t)"fullesctnseqdata", &v38, 8uLL);
            paramc_ParamSetPermanent(*(_QWORD *)(v43 + 40), (uint64_t)"fullescvoiceseqdata", &v37, 8uLL);
            return 0;
          }
        }
        goto LABEL_35;
      }
    }
    else
    {
      v17 = 3489669130;
    }
    heap_Free(*(_QWORD **)(v43 + 8), (uint64_t)v24);
    heap_Free(*(_QWORD **)(v43 + 8), (uint64_t)v27);
    if (v31)
LABEL_35:
      heap_Free(*(_QWORD **)(v43 + 8), (uint64_t)v31);
  }
  else
  {
    heap_Free(*(_QWORD **)(v43 + 8), (uint64_t)v24);
    return 3489669130;
  }
  return v17;
}

uint64_t esc_seq_exePattern(_WORD *a1, int a2, _QWORD *a3, int a4, uint64_t a5, char *a6, int a7, int a8, _WORD *a9, unsigned int a10, _DWORD *a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  unsigned int v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  const char *v32;
  uint64_t *v33;
  int v34;
  uint64_t v35;
  _OWORD v36[25];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v35 = 0;
  v34 = 0;
  v33 = 0;
  *a11 = 0;
  if ((InitRsrcFunction(a1, a2, &v35) & 0x80000000) != 0)
    return 0;
  v17 = paramc_ParamGet(*(_QWORD *)(v35 + 40), a5, &v33, &v34);
  if ((v17 & 0x80000000) != 0)
    return 0;
  v18 = v17;
  v19 = *v33;
  *(_QWORD *)&v20 = -1;
  *((_QWORD *)&v20 + 1) = -1;
  v36[0] = v20;
  v36[1] = v20;
  v36[2] = v20;
  v36[3] = v20;
  v36[4] = v20;
  v36[5] = v20;
  v36[6] = v20;
  v36[7] = v20;
  v36[8] = v20;
  v36[9] = v20;
  v36[10] = v20;
  v36[11] = v20;
  v36[12] = v20;
  v36[13] = v20;
  v36[14] = v20;
  v36[15] = v20;
  v36[16] = v20;
  v36[17] = v20;
  v36[18] = v20;
  v36[19] = v20;
  v36[20] = v20;
  v36[21] = v20;
  v36[22] = v20;
  v36[23] = v20;
  v36[24] = v20;
  v21 = nuance_pcre_exec(a3, a4, v19, 0, a6, a7, a8, a10, v36, 100);
  if ((v21 & 0x80000000) == 0)
  {
    if (v21)
    {
      *a11 = 1;
      v22 = WORD2(v36[0]);
      *a9 = v36[0];
      a9[1] = v22;
    }
    return v18;
  }
  v23 = nuance_pcre_ErrorToLhError(v21);
  v18 = v23;
  if (v23 >> 20 != 2213)
    return v18;
  if ((v23 & 0x1FFF) == 0x14)
    return 0;
  if ((v23 & 0x1FFF) == 0xA)
  {
    v28 = *(_QWORD *)(v35 + 32);
    v29 = 11002;
    v30 = 0;
  }
  else
  {
    v28 = *(_QWORD *)(v35 + 32);
    v32 = "lhError";
    v30 = "%s%x";
    v29 = 11027;
  }
  log_OutPublic(v28, (uint64_t)&modAux, v29, v30, v24, v25, v26, v27, v32);
  return v18;
}

uint64_t esc_seq_tn_strncmp(_WORD *a1, int a2, _QWORD *a3, int a4, char *a5, int a6, _WORD *a7)
{
  uint64_t result;
  int v10;
  int v11;

  v11 = 0;
  v10 = 0;
  if ((esc_seq_exePattern(a1, a2, a3, a4, (uint64_t)"fullesctnseqdata", a5, a6, 0, &v10, 0x2000u, &v11) & 0x80000000) != 0)
    return 0xFFFFFFFFLL;
  if (v11 != 1 || (unsigned __int16)v10 != 0)
    return 0xFFFFFFFFLL;
  result = 0;
  *a7 = HIWORD(v10);
  return result;
}

char *esc_seq_tn_seq(_WORD *a1, int a2, _QWORD *a3, int a4, char *a5, int a6)
{
  int v7;
  int v10;
  int v11;

  v11 = 0;
  v10 = 0;
  v7 = esc_seq_exePattern(a1, a2, a3, a4, (uint64_t)"fullesctnseqdata", a5, a6, 0, &v10, 0x2000u, &v11);
  if (v11 != 1 || v7 <= -1)
    return 0;
  else
    return &a5[(unsigned __int16)v10];
}

char *esc_seq_strstr(_WORD *a1, int a2, _QWORD *a3, int a4, char *__s, _WORD *a6)
{
  unsigned __int16 v12;
  int v13;
  char *result;
  uint64_t v15;
  uint64_t v16;

  v16 = 0;
  v12 = strlen(__s);
  v13 = esc_seq_exePattern(a1, a2, a3, a4, (uint64_t)"fullescseqdata", __s, v12, 0, &v16, 0x2000u, (_DWORD *)&v16 + 1);
  result = 0;
  if ((v13 & 0x80000000) == 0 && HIDWORD(v16) == 1)
  {
    v15 = (unsigned __int16)v16;
    *a6 = WORD1(v16) - v16;
    return &__s[v15];
  }
  return result;
}

uint64_t hdrpars_ReadHeader(_WORD *a1, int a2, _BYTE *a3, const char *a4, _QWORD *a5, uint64_t *a6)
{
  _QWORD *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  int FileSize;
  int v16;
  uint64_t v17;
  char *v18;
  int v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  const char *v24;
  char *v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  _QWORD *v30;
  const char *v31;
  char *i;
  unsigned int v33;
  uint64_t v34;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *j;
  unsigned int v40;
  uint64_t v41;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  char *__s1[2];
  uint64_t v54;
  char *v55;
  __int128 v56;
  uint64_t v57;

  v7 = a5;
  v54 = 0;
  v10 = 2183159812;
  if (a3 && *a3)
  {
    v11 = 2183159815;
    if (!a5 || !a6)
      return v11;
  }
  else
  {
    v11 = 2183159815;
    if (!a4 || !a6 || !a5 || !*a4)
      return v11;
  }
  v49 = 0;
  v50 = 0;
  v51 = 0;
  inited = InitRsrcFunction(a1, a2, &v54);
  if ((inited & 0x80000000) != 0)
    return inited;
  *v7 = 0;
  *a6 = 0;
  v52 = 0u;
  *(_OWORD *)__s1 = 0u;
  if (!a3 || !*a3)
  {
    v20 = *(_QWORD *)(v54 + 8);
    *(_QWORD *)&v52 = v20;
    v21 = strlen(a4);
    if (!v21)
    {
      v11 = 2183159812;
      goto LABEL_95;
    }
    v22 = (char *)heap_Alloc(v20, (v21 + 1));
    *((_QWORD *)&v52 + 1) = v22;
    if (!v22)
    {
      v11 = 2183159818;
      goto LABEL_95;
    }
    v11 = 0;
    __s1[0] = strcpy(v22, a4);
    goto LABEL_21;
  }
  v13 = v54;
  *(_QWORD *)&v56 = 0;
  *(_QWORD *)&v52 = *(_QWORD *)(v54 + 8);
  v14 = filespi_fopen(*(_QWORD *)(v54 + 64), (_QWORD *)v52, (uint64_t)a3, (uint64_t)"rb", (uint64_t *)&v56);
  if ((v14 & 0x80000000) != 0)
  {
    v10 = 2183159811;
LABEL_94:
    v11 = v10;
    goto LABEL_95;
  }
  v11 = v14;
  FileSize = filespi_GetFileSize((_QWORD *)v56);
  if (!FileSize)
  {
LABEL_92:
    filespi_fclose(v56);
    goto LABEL_94;
  }
  v16 = FileSize;
  v17 = heap_Alloc(*(_QWORD *)(v13 + 8), (FileSize + 1));
  *((_QWORD *)&v52 + 1) = v17;
  if (!v17)
  {
    v10 = 2183159818;
    goto LABEL_92;
  }
  v18 = (char *)v17;
  v19 = filespi_fread(v17, 1, v16, v56);
  if (!v19)
  {
    filespi_fclose(v56);
    heap_Free(*(_QWORD **)(v13 + 8), (uint64_t)v18);
    goto LABEL_94;
  }
  v18[v19] = 0;
  filespi_fclose(v56);
  __s1[0] = v18;
LABEL_21:
  v23 = 0;
  v24 = "<?xml";
  while (1)
  {
    v25 = __s1[0];
    if (v23)
    {
      if (!*__s1[0])
        break;
    }
    v49 = 0;
    v50 = 0;
    v51 = 0;
    if (strncmp(__s1[0], v24, 5uLL))
      goto LABEL_45;
    v26 = v25[5];
    v27 = v26 > 0x20;
    v28 = (1 << v26) & 0x100002600;
    if (v27 || v28 == 0)
      goto LABEL_45;
    v30 = v7;
    v31 = v24;
    for (i = v25 + 21; ; ++i)
    {
      v33 = *(i - 15);
      v27 = v33 > 0x20;
      v34 = (1 << v33) & 0x100002600;
      if (v27 || v34 == 0)
        break;
    }
    __s1[0] = i - 15;
    if (!strncmp(i - 15, "version=\"1.0\"?>", 0xFuLL) || !strncmp(i - 15, "version='1.0'?>", 0xFuLL))
    {
      __s1[0] = i;
      v24 = v31;
      v7 = v30;
      goto LABEL_45;
    }
    v55 = 0;
    v56 = 0uLL;
    v57 = 0;
    v36 = hdrpars_ParseAttributes((uint64_t)&v52, (uint64_t)&v56);
    v37 = __s1[0];
    if ((_DWORD)v36)
      goto LABEL_38;
    v44 = strncmp(__s1[0], "?>", 2uLL);
    v38 = *((_QWORD *)&v56 + 1);
    if (!v44 && *((_QWORD *)&v56 + 1))
    {
      v11 = 2183159812;
      if ((ssftmap_FindReadOnly(*((uint64_t *)&v56 + 1), (uint64_t)"version", &v55) & 0x80000000) == 0
        && !strcmp(v55, "1.0"))
      {
LABEL_38:
        __s1[0] = v37 + 2;
        v11 = v36;
      }
      v38 = *((_QWORD *)&v56 + 1);
      goto LABEL_40;
    }
    v11 = 2183159812;
LABEL_40:
    v24 = v31;
    v7 = v30;
    if (v38)
      ssftmap_ObjClose(v38);
    if ((v11 & 0x80000000) != 0)
      goto LABEL_53;
LABEL_45:
    LODWORD(__s1[1]) = 0;
    v11 = hdrpars_ParseElement((uint64_t)&v52, (uint64_t)&v49);
    if (!(_DWORD)v11)
    {
      v11 = 2183159812;
      if (v51)
      {
        if (ssftmap_GetSize(v51) && !v50 && !v49)
        {
          for (j = __s1[0]; ; ++j)
          {
            v40 = *j;
            v27 = v40 > 0x20;
            v41 = (1 << v40) & 0x100002600;
            if (v27 || v41 == 0)
              break;
          }
          v11 = 0;
          __s1[0] = j;
        }
      }
    }
    if (v50)
    {
      ssftmap_ObjClose(v50);
      v50 = 0;
    }
    if (a3 && !(_DWORD)v11)
    {
      if (!*a3)
        goto LABEL_57;
      v57 = 0;
      v56 = (unint64_t)a3;
      v11 = ssftmap_Insert(v51, (uint64_t)"HDRFILE", (uint64_t)&v56);
    }
    if ((_DWORD)v11)
    {
LABEL_53:
      if (v51)
      {
        ssftmap_ObjClose(v51);
        v51 = 0;
      }
      if ((v11 & 0x80000000) != 0)
        break;
    }
    else
    {
LABEL_57:
      if (v23 == 1)
      {
        v43 = *(_QWORD **)(v54 + 8);
        v56 = *(_OWORD *)"\b";
        v57 = 0;
        v11 = 2183159818;
        if (!vector_ObjOpen(v43, &v56, 8, a6) || !vector_Add(*a6, v7))
          goto LABEL_53;
        *v7 = 0;
      }
      else if (!v23)
      {
        *v7 = v51;
        goto LABEL_74;
      }
      if (!vector_Add(*a6, &v51))
      {
        v11 = 2183159818;
        goto LABEL_53;
      }
LABEL_74:
      v11 = 0;
      ++v23;
    }
  }
  if (*((_QWORD *)&v52 + 1))
    heap_Free(*(_QWORD **)(v54 + 8), *((uint64_t *)&v52 + 1));
  if ((v11 & 0x80000000) != 0)
  {
LABEL_95:
    v45 = *a6;
    if (*a6)
    {
      *(_QWORD *)&v56 = 0;
      if (vector_GetElemAt(v45, 0, &v56))
      {
        v46 = 1;
        do
          ssftmap_ObjClose(*(_QWORD *)v56);
        while (vector_GetElemAt(*a6, v46++, &v56));
      }
      vector_ObjClose(*a6);
      *a6 = 0;
    }
    if (*v7)
    {
      ssftmap_ObjClose(*v7);
      *v7 = 0;
    }
  }
  return v11;
}

uint64_t hdrpars_ParseElement(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned __int8 *i;
  unsigned int v6;
  unsigned __int8 *v8;
  int v9;
  const char *v10;
  unsigned __int8 *j;
  int v12;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  char v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  char v24;
  unsigned __int8 *k;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  char *v30;
  int v31;
  char *v32;
  char *v33;
  char *v34;
  _BYTE *m;
  unsigned int v36;
  uint64_t v37;
  unsigned int v39;
  const char *v40;
  uint64_t v41;
  const char *n;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  _QWORD *v48;
  __int128 v49[2];
  _QWORD *(*v50)(_QWORD *, _QWORD *);
  char *__s1;
  uint64_t v52;
  uint64_t v53;

  v4 = *(_DWORD *)(a1 + 24);
  v52 = 0;
  v53 = 0;
  __s1 = 0;
  for (i = (unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 1); ; ++i)
  {
    v6 = *(i - 1);
    if (v6 > 0x20 || ((1 << v6) & 0x100002600) == 0)
      break;
    *(_QWORD *)(a1 + 16) = i;
  }
  v9 = *i;
  v8 = i - 1;
  if (v9 == 33)
  {
    hdrpars_SkipComments(a1);
    v8 = *(unsigned __int8 **)(a1 + 16);
    v6 = *v8;
  }
  if (v6 != 60)
    goto LABEL_44;
  v10 = (const char *)(v8 + 1);
  for (j = v8 + 1; ; ++j)
  {
    *(_QWORD *)(a1 + 16) = j;
    v12 = *j;
    if ((v12 - 48) < 0xA || (v12 & 0xFFFFFFDF) - 65 < 0x1A)
      continue;
    if (*j <= 0x2Cu)
    {
      v15 = (v12 - 9) < 2 || v12 == 13;
      if (!v15 && v12 != 32)
        goto LABEL_44;
      *j = 0;
      ++*(_QWORD *)(a1 + 16);
      v16 = hdrpars_ParseAttributes(a1, (uint64_t)&__s1);
      if ((_DWORD)v16)
        goto LABEL_45;
      v17 = *(unsigned __int8 **)(a1 + 16);
      v18 = *v17;
      if (v18 != 47)
      {
        if (v18 == 62)
        {
          v19 = 0;
          goto LABEL_32;
        }
        goto LABEL_44;
      }
      if (v17[1] != 62)
        goto LABEL_44;
LABEL_36:
      v20 = v17 + 2;
      v19 = 1;
      goto LABEL_37;
    }
    v14 = (v12 - 45);
    if (v14 > 0x32)
      goto LABEL_44;
    if (((1 << v14) & 0x4000000002003) == 0)
      break;
  }
  if (v14 == 2)
  {
    if (j[1] != 62)
      goto LABEL_44;
    *j = 0;
    v17 = *(unsigned __int8 **)(a1 + 16);
    goto LABEL_36;
  }
  if (v14 != 17)
    goto LABEL_44;
  v19 = 0;
  *j = 0;
  v17 = *(unsigned __int8 **)(a1 + 16);
LABEL_32:
  v20 = v17 + 1;
LABEL_37:
  *(_QWORD *)(a1 + 16) = v20;
  v21 = *(_DWORD *)(a1 + 24);
  switch(v21)
  {
    case 2:
      if (strcmp(v10, "HEADER"))
        goto LABEL_44;
      v16 = 0;
      v22 = 3;
LABEL_56:
      *(_DWORD *)(a1 + 24) = v22;
      break;
    case 1:
      if (!strcmp(v10, "VERSION"))
        v16 = 0;
      else
        v16 = 2183159812;
      break;
    case 0:
      if (!strcmp(v10, "SCANSOFT") || !strcmp(v10, "NUANCE"))
      {
        v16 = 0;
        v22 = 1;
        goto LABEL_56;
      }
LABEL_44:
      v16 = 2183159812;
LABEL_45:
      *(_DWORD *)(a1 + 24) = v4;
      goto LABEL_46;
    default:
      v16 = 0;
      break;
  }
  if ((_DWORD)v16)
    v24 = 1;
  else
    v24 = v19;
  if ((v24 & 1) == 0)
  {
    for (k = v20 + 1; ; ++k)
    {
      v26 = *(k - 1);
      v27 = v26 > 0x20;
      v28 = (1 << v26) & 0x100002600;
      if (v27 || v28 == 0)
        break;
      *(_QWORD *)(a1 + 16) = k;
    }
    v31 = *k;
    v30 = (char *)(k - 1);
    if (v31 == 33)
    {
      hdrpars_SkipComments(a1);
      v30 = *(char **)(a1 + 16);
    }
    v16 = 0;
    v19 = 0;
    __s1 = v30;
  }
  if ((v19 & 1) == 0 && !(_DWORD)v16)
  {
    v32 = 0;
    while (1)
    {
      v33 = *(char **)(a1 + 16);
      if (!*v33)
        goto LABEL_80;
      if (*v33 == 60)
        break;
      if (v53)
        goto LABEL_80;
      v16 = 0;
      v34 = v33 + 1;
      *(_QWORD *)(a1 + 16) = v33 + 1;
      v32 = v33;
LABEL_81:
      for (m = v34 + 1; ; ++m)
      {
        v36 = *(m - 1);
        v27 = v36 > 0x20;
        v37 = (1 << v36) & 0x100002600;
        if (v27 || v37 == 0)
          break;
        *(_QWORD *)(a1 + 16) = m;
      }
      if (*m == 33)
        hdrpars_SkipComments(a1);
      if ((_DWORD)v16)
        goto LABEL_45;
    }
    if (v33[1] == 47)
    {
      if (__s1)
      {
        if (v32)
          v33 = v32 + 1;
        *v33 = 0;
      }
      v39 = strlen(v10);
      v40 = (const char *)(*(_QWORD *)(a1 + 16) + 2);
      *(_QWORD *)(a1 + 16) = v40;
      v41 = v39;
      if (!strncmp(v40, v10, v39))
      {
        for (n = &v40[v41]; ; ++n)
        {
          *(_QWORD *)(a1 + 16) = n;
          v43 = *(unsigned __int8 *)n;
          if (v43 > 0x3E)
            break;
          if (((1 << v43) & 0x100002600) == 0)
          {
            if (v43 != 62)
              break;
            *(_QWORD *)(a1 + 16) = n + 1;
            if (__s1)
            {
              v16 = (uint64_t)hdrpars_Unescape(__s1);
              goto LABEL_109;
            }
            goto LABEL_95;
          }
        }
      }
      *(_DWORD *)(a1 + 24) = v4;
LABEL_122:
      v16 = 2183159812;
      goto LABEL_46;
    }
    if (!__s1 || v33 == __s1)
    {
      __s1 = 0;
      v16 = hdrpars_ParseElement(a1, &__s1);
      v34 = *(char **)(a1 + 16);
      goto LABEL_81;
    }
LABEL_80:
    v34 = *(char **)(a1 + 16);
    v16 = 2183159812;
    goto LABEL_81;
  }
  if ((_DWORD)v16 || !__s1)
  {
LABEL_109:
    *(_DWORD *)(a1 + 24) = v4;
    if ((_DWORD)v16)
      goto LABEL_46;
  }
  else
  {
    **(_BYTE **)(a1 + 16) = 0;
LABEL_95:
    *(_DWORD *)(a1 + 24) = v4;
  }
  if (v4 == 2)
  {
LABEL_113:
    if (v52)
      goto LABEL_122;
    v16 = 2183159812;
    if (!v53)
      goto LABEL_46;
    v16 = 0;
    *(_QWORD *)(a2 + 16) = v53;
    goto LABEL_126;
  }
  if (v4 != 1)
  {
    if (!v4)
      goto LABEL_113;
    v47 = *(_QWORD *)(a2 + 16);
    v46 = (uint64_t *)(a2 + 16);
    v45 = v47;
    if (!v47)
    {
      v48 = *(_QWORD **)a1;
      v49[0] = HDRPARS_TAG_MAP_IELEM;
      v49[1] = *(_OWORD *)off_1EA90B490;
      v50 = hdrpars_ElemFreeTag;
      v16 = ssftmap_ObjOpen(v48, 1, v49, v46);
      if ((_DWORD)v16)
        goto LABEL_46;
      v45 = *v46;
    }
    v16 = ssftmap_Insert(v45, (uint64_t)v10, (uint64_t)&__s1);
    if ((_DWORD)v16)
      goto LABEL_46;
    __s1 = 0;
    v52 = 0;
LABEL_126:
    v53 = 0;
    goto LABEL_46;
  }
  if (v52)
    goto LABEL_122;
  if (v53)
    goto LABEL_122;
  v44 = __s1;
  if (!__s1)
    goto LABEL_122;
  if (!strcmp(__s1, "SSFT_1.0") || (v16 = 2183159812, !strcmp(v44, "NUAN_1.0")))
  {
    v16 = 0;
    *(_DWORD *)(a1 + 24) = 2;
  }
LABEL_46:
  if (v52)
  {
    ssftmap_ObjClose(v52);
    v52 = 0;
  }
  if (v53)
    ssftmap_ObjClose(v53);
  return v16;
}

uint64_t hdrpars_FreeHeader(uint64_t a1)
{
  if (a1)
    ssftmap_ObjClose(a1);
  return 0;
}

uint64_t hdrpars_CreateSurrogateTagMap(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  _QWORD *(*v13)(_QWORD *, _QWORD *);

  v11 = HDRPARS_TAG_MAP_IELEM;
  v12 = *(_OWORD *)off_1EA90B490;
  v13 = hdrpars_ElemFreeTag;
  v7 = ssftmap_ObjOpen(a1, 1, &v11, a4);
  *(_QWORD *)&v12 = 0;
  v11 = a2;
  if ((v7 & 0x80000000) != 0)
  {
    v9 = v7;
    *(_QWORD *)&v11 = a3;
LABEL_7:
    ssftmap_ObjClose(*a4);
    return v9;
  }
  v8 = ssftmap_Insert(*a4, (uint64_t)"BROKERSTRING", (uint64_t)&v11);
  *(_QWORD *)&v11 = a3;
  if ((v8 & 0x80000000) != 0)
  {
    v9 = v8;
    goto LABEL_7;
  }
  v9 = ssftmap_Insert(*a4, (uint64_t)"FULLPATHCOMPONENT", (uint64_t)&v11);
  if ((v9 & 0x80000000) != 0)
    goto LABEL_7;
  return v9;
}

uint64_t hdrpars_ParseAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t *v9;
  unsigned __int8 *v10;
  unsigned int v11;
  _BYTE *j;
  unsigned int v14;
  unsigned __int8 *k;
  unsigned int v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v24;
  _QWORD *v25;
  unsigned __int8 *m;
  unsigned int v27;
  uint64_t v28;
  uint64_t result;
  __int128 v31[2];
  _QWORD *(*v32)(_QWORD *, _QWORD *);

  for (i = *(_QWORD *)(a1 + 16) + 1; ; ++i)
  {
    v5 = *(unsigned __int8 *)(i - 1);
    v6 = v5 > 0x20;
    v7 = (1 << v5) & 0x100002600;
    if (v6 || v7 == 0)
      break;
    *(_QWORD *)(a1 + 16) = i;
  }
  v9 = (uint64_t *)(a2 + 8);
LABEL_8:
  v10 = *(unsigned __int8 **)(a1 + 16);
  v11 = *v10;
  if (v11 <= 0x3F && ((1 << v11) & 0xC000800000000000) != 0)
    return 0;
  if ((v11 & 0xFFFFFFDF) - 65 >= 0x1A && v11 != 95 && v11 != 58)
    return 2183159812;
  for (j = v10 + 1; ; ++j)
  {
    *(_QWORD *)(a1 + 16) = j;
    v14 = *j;
    if (v14 - 48 < 0xA || (v14 & 0xFFFFFFDF) - 65 < 0x1A)
      continue;
    if (v14 <= 0x3A)
    {
      if (((1 << v14) & 0x400600000000000) != 0)
        continue;
      if (((1 << v14) & 0x100002600) != 0)
        break;
    }
    if (v14 != 95)
      goto LABEL_33;
  }
  *j = 0;
  j = *(_BYTE **)(a1 + 16);
  do
  {
    *(_QWORD *)(a1 + 16) = ++j;
    v14 = *j;
  }
  while (v14 <= 0x20 && ((1 << v14) & 0x100002600) != 0);
LABEL_33:
  if (v14 == 61)
  {
    *j = 0;
    for (k = (unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 1); ; ++k)
    {
      *(_QWORD *)(a1 + 16) = k;
      v18 = *k;
      if (v18 > 0x27)
        break;
      if (((1 << v18) & 0x100002600) == 0)
      {
        if (((1 << v18) & 0x8400000000) == 0)
          return 2183159812;
        v19 = (char *)(k + 1);
        v20 = k + 1;
        do
        {
          *(_QWORD *)(a1 + 16) = v20;
          v22 = *v20++;
          v21 = v22;
        }
        while (v22 != 60 && v21 != v18);
        if (v21 != v18)
          return 2183159812;
        *(v20 - 1) = 0;
        ++*(_QWORD *)(a1 + 16);
        result = (uint64_t)hdrpars_Unescape(v19);
        if (a2 && !(_DWORD)result)
        {
          v24 = *v9;
          if (!*v9)
          {
            v25 = *(_QWORD **)a1;
            v31[0] = HDRPARS_ATTR_MAP_IELEM;
            v31[1] = *(_OWORD *)&off_1EA90B468;
            v32 = ssftmap_ElemFreeString;
            result = ssftmap_ObjOpen(v25, 0, v31, (uint64_t *)(a2 + 8));
            if ((_DWORD)result)
              return result;
            v24 = *v9;
          }
          result = ssftmap_Insert(v24, (uint64_t)v10, (uint64_t)v19);
        }
        if (!(_DWORD)result)
        {
          for (m = *(unsigned __int8 **)(a1 + 16); ; *(_QWORD *)(a1 + 16) = m)
          {
            v27 = *m++;
            v6 = v27 > 0x20;
            v28 = (1 << v27) & 0x100002600;
            if (v6 || v28 == 0)
              break;
          }
          goto LABEL_8;
        }
        return result;
      }
    }
  }
  return 2183159812;
}

char *hdrpars_Unescape(char *a1)
{
  char *result;
  const char *v2;
  _BYTE *i;
  int v4;
  uint64_t v5;

  result = strchr(a1, 38);
  if (result)
  {
    v2 = result;
    for (i = result; ; ++i)
    {
      v4 = *(unsigned __int8 *)v2;
      if (v4 == 38)
      {
        if (!strncmp(v2, "&amp;", 5uLL))
        {
          LOBYTE(v4) = 38;
          v5 = 5;
          goto LABEL_18;
        }
        if (!strncmp(v2, "&lt;", 4uLL))
        {
          LOBYTE(v4) = 60;
LABEL_15:
          v5 = 4;
          goto LABEL_18;
        }
        if (!strncmp(v2, "&gt;", 4uLL))
        {
          LOBYTE(v4) = 62;
          goto LABEL_15;
        }
        if (!strncmp(v2, "&apos;", 6uLL))
        {
          LOBYTE(v4) = 39;
        }
        else
        {
          if (strncmp(v2, "&quot;", 6uLL))
            return (char *)2183159812;
          LOBYTE(v4) = 34;
        }
        v5 = 6;
      }
      else
      {
        if (!*v2)
        {
          result = 0;
          *i = 0;
          return result;
        }
        v5 = 1;
      }
LABEL_18:
      *i = v4;
      v2 += v5;
    }
  }
  return result;
}

char *hdrpars_SkipComments(uint64_t a1)
{
  char *i;
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  char *result;
  char *j;
  unsigned int v9;
  uint64_t v10;

  for (i = *(char **)(a1 + 16); ; *(_QWORD *)(a1 + 16) = i)
  {
    v3 = *i;
    v4 = v3 > 0x20;
    v5 = (1 << v3) & 0x100002600;
    v6 = v4 || v5 == 0;
    if (v6)
      break;
    ++i;
  }
  do
  {
    result = (char *)strncmp(i, "<!--", 4uLL);
    if ((_DWORD)result)
      break;
    result = strstr(i, "-->");
    if (!result || *(result - 1) == 45)
      break;
    for (j = result + 3; ; ++j)
    {
      *(_QWORD *)(a1 + 16) = j;
      v9 = *j;
      v4 = v9 > 0x20;
      v10 = (1 << v9) & 0x100002600;
      if (v4 || v10 == 0)
        break;
    }
    v6 = j == i;
    i = j;
  }
  while (!v6);
  return result;
}

uint64_t hdrpars_ElemCopyTag(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  const char *v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t result;

  v6 = *(const char **)a1;
  if (v6)
    v7 = strlen(v6);
  else
    v7 = 0;
  v8 = heap_Alloc(a2, v7 + 25);
  if (!v8)
    return 2183159818;
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a1;
  *(_QWORD *)(v8 + 16) = v10;
  v11 = (char *)(v8 + 24);
  *v9 = v11;
  if (v7)
    strcpy(v11, *(const char **)a1);
  else
    *v11 = 0;
  result = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *a3 = v9;
  return result;
}

_QWORD *hdrpars_ElemFreeTag(_QWORD *result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v3 = (uint64_t)result;
    v4 = result[1];
    if (v4)
      ssftmap_ObjClose(v4);
    v5 = *(_QWORD *)(v3 + 16);
    if (v5)
      ssftmap_ObjClose(v5);
    return heap_Free(a2, v3);
  }
  return result;
}

_QWORD *dict_free_nodes(_QWORD **a1)
{
  _QWORD *result;

  result = free_nodes(a1, *a1, a1);
  *((_DWORD *)a1 + 12) = 0;
  *a1 = a1;
  a1[1] = a1;
  return result;
}

_QWORD *free_nodes(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  if (a2 != a3)
  {
    v4 = result;
    free_nodes(result, *a2);
    free_nodes(v4, a2[1]);
    v5 = a2[4];
    if (v5)
      (*(void (**)(uint64_t, _QWORD))(v4[8] + 8))(v5, v4[7]);
    v6 = a2[5];
    if (v6)
      (*(void (**)(uint64_t, _QWORD))(v4[8] + 32))(v6, v4[7]);
    return heap_Free((_QWORD *)v4[7], (uint64_t)a2);
  }
  return result;
}

uint64_t dict_init(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)(result + 56) = a4;
  *(_QWORD *)(result + 64) = a3;
  *(_DWORD *)(result + 48) = 0;
  *(_DWORD *)(result + 52) = a2;
  *(_QWORD *)result = result;
  *(_QWORD *)(result + 8) = result;
  *(_QWORD *)(result + 16) = result;
  *(_DWORD *)(result + 24) = 1;
  *(_BYTE *)(result + 72) = 0;
  return result;
}

_QWORD *dict_lookup(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  int v5;
  _QWORD *v7;

  v2 = *(_QWORD **)a1;
  if (*(_QWORD *)a1 == a1)
    return 0;
  while (1)
  {
    v5 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 64) + 16))(a2, v2[4]);
    if ((v5 & 0x80000000) == 0)
      break;
LABEL_5:
    v2 = (_QWORD *)*v2;
    if (v2 == (_QWORD *)a1)
      return 0;
  }
  if (v5)
  {
    ++v2;
    goto LABEL_5;
  }
  if (*(_BYTE *)(a1 + 72))
  {
    while (*v2 != a1)
    {
      v7 = v2;
      v2 = (_QWORD *)*v2;
      while ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 64) + 16))(a2, v2[4]))
      {
        v2 = (_QWORD *)v2[1];
        if (v2 == (_QWORD *)a1)
          return v7;
      }
    }
  }
  return v2;
}

_QWORD *dict_lower_bound(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v5;
  int v6;

  v2 = *(_QWORD **)a1;
  if (*(_QWORD *)a1 == a1)
    return 0;
  v5 = 0;
  do
  {
    v6 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 64) + 16))(a2, v2[4]);
    if (v6 < 1)
    {
      if (v6 < 0)
      {
        v5 = v2;
      }
      else
      {
        v5 = v2;
        if (!*(_BYTE *)(a1 + 72))
          return v5;
      }
    }
    else
    {
      ++v2;
    }
    v2 = (_QWORD *)*v2;
  }
  while (v2 != (_QWORD *)a1);
  return v5;
}

uint64_t dict_insert(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  int v10;
  uint64_t **v11;
  uint64_t result;
  uint64_t **v13;
  _DWORD *i;
  uint64_t *v15;
  uint64_t *v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t **v28;
  uint64_t v29;

  v6 = (uint64_t *)*a1;
  if ((uint64_t *)*a1 == a1)
  {
    v10 = -1;
    v7 = a1;
LABEL_11:
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))a1[8])(a3, a1[7], a2 + 4);
    if ((result & 0x80000000) == 0)
    {
      v13 = (uint64_t **)(v7 + 1);
      if (v10 < 0)
        v13 = (uint64_t **)v7;
      *v13 = a2;
      a2[1] = (uint64_t)a1;
      a2[2] = (uint64_t)v7;
      *a2 = (uint64_t)a1;
      ++*((_DWORD *)a1 + 12);
      *((_DWORD *)a2 + 6) = 0;
      for (i = v7 + 3; !*((_DWORD *)v7 + 6); a2 = v15)
      {
        v15 = (uint64_t *)v7[2];
        v16 = (uint64_t *)*v15;
        if (v7 == (uint64_t *)*v15)
        {
          v19 = v15[1];
          v20 = *(_DWORD *)(v19 + 24);
          v17 = (_DWORD *)(v19 + 24);
          if (v20)
          {
            v21 = (uint64_t *)v7[1];
            if (a2 == v21)
            {
              v27 = *a2;
              v7[1] = *a2;
              *(_QWORD *)(v27 + 16) = v7;
              v28 = (uint64_t **)v7[2];
              a2[2] = (uint64_t)v28;
              v28[*v28 != v7] = a2;
              *a2 = (uint64_t)v7;
              v7[2] = (uint64_t)a2;
              v7 = (uint64_t *)*v15;
              v21 = *(uint64_t **)(*v15 + 8);
            }
            else
            {
              a2 = v7;
            }
            *((_DWORD *)a2 + 6) = 1;
            *((_DWORD *)v15 + 6) = 0;
            *v15 = (uint64_t)v21;
            v21[2] = (uint64_t)v15;
            v29 = v15[2];
            v7[2] = v29;
            *(_QWORD *)(v29 + 8 * (*(_QWORD *)(v29 + 8) == (_QWORD)v15)) = v7;
            v7[1] = (uint64_t)v15;
            v15[2] = (uint64_t)v7;
            break;
          }
        }
        else
        {
          v18 = *((_DWORD *)v16 + 6);
          v17 = v16 + 3;
          if (v18)
          {
            if (a2 == (uint64_t *)*v7)
            {
              v22 = a2[1];
              *v7 = v22;
              *(_QWORD *)(v22 + 16) = v7;
              v23 = v7[2];
              a2[2] = v23;
              *(_QWORD *)(v23 + 8 * (*(_QWORD *)(v23 + 8) == (_QWORD)v7)) = a2;
              a2[1] = (uint64_t)v7;
              v7[2] = (uint64_t)a2;
            }
            else
            {
              a2 = v7;
            }
            *((_DWORD *)a2 + 6) = 1;
            *((_DWORD *)v15 + 6) = 0;
            v24 = (uint64_t *)v15[1];
            v25 = *v24;
            v15[1] = *v24;
            *(_QWORD *)(v25 + 16) = v15;
            v26 = (_QWORD *)v15[2];
            v24[2] = (uint64_t)v26;
            v26[*v26 != (_QWORD)v15] = v24;
            *v24 = (uint64_t)v15;
            v15[2] = (uint64_t)v24;
            break;
          }
        }
        *i = 1;
        *v17 = 1;
        *((_DWORD *)v15 + 6) = 0;
        v7 = (uint64_t *)v15[2];
        i = v7 + 3;
      }
      *(_DWORD *)(*a1 + 24) = 1;
    }
  }
  else
  {
    while (1)
    {
      v7 = v6;
      v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[8] + 16))(a3, v6[4]);
      if (!*((_BYTE *)a1 + 72) && v8 == 0)
        return 2298486786;
      v10 = v8;
      v11 = (uint64_t **)(v7 + 1);
      if (v8 < 0)
        v11 = (uint64_t **)v7;
      v6 = *v11;
      if (v6 == a1)
        goto LABEL_11;
    }
  }
  return result;
}

uint64_t dict_delete(uint64_t *a1, uint64_t a2)
{
  uint64_t **v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _DWORD *v22;
  uint64_t *v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v3 = *(_QWORD *)(a2 + 8);
  v2 = *(uint64_t ***)(a2 + 16);
  v4 = *(uint64_t **)a2;
  if (*(uint64_t **)a2 == a1)
  {
    v8 = *(uint64_t **)(a2 + 8);
    goto LABEL_9;
  }
  if ((uint64_t *)v3 == a1)
  {
    v8 = *(uint64_t **)a2;
LABEL_9:
    v8[2] = (uint64_t)v2;
    if (*v2 == (uint64_t *)a2)
      *v2 = v8;
    else
      v2[1] = v8;
    goto LABEL_16;
  }
  v5 = *(uint64_t **)(a2 + 8);
  do
  {
    v6 = v5;
    v5 = (uint64_t *)*v5;
  }
  while (v5 != a1);
  v7 = *((_DWORD *)v6 + 6);
  v8 = (uint64_t *)v6[1];
  v9 = (uint64_t **)v6[2];
  v8[2] = (uint64_t)v9;
  if (*v9 == v6)
  {
    *v9 = v8;
    v4 = *(uint64_t **)a2;
  }
  else
  {
    v9[1] = v8;
    v3 = *(_QWORD *)(a2 + 8);
  }
  v6[1] = v3;
  v6[2] = (uint64_t)v2;
  *v6 = (uint64_t)v4;
  v4[2] = (uint64_t)v6;
  *(_QWORD *)(v3 + 16) = v6;
  *((_DWORD *)v6 + 6) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = v7;
  if (*v2 == (uint64_t *)a2)
    *v2 = v6;
  else
    v2[1] = v6;
LABEL_16:
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  --*((_DWORD *)a1 + 12);
  if (*(_DWORD *)(a2 + 24) != 1)
    return a2;
  *(_DWORD *)(*a1 + 24) = 0;
  if (*((_DWORD *)v8 + 6) != 1)
  {
    v10 = (uint64_t **)v8;
LABEL_31:
    v22 = v10 + 3;
    goto LABEL_39;
  }
  while (1)
  {
    v10 = (uint64_t **)v8[2];
    v11 = *v10;
    if (v8 != *v10)
    {
      if (!*((_DWORD *)v11 + 6))
      {
        *((_DWORD *)v11 + 6) = 1;
        *((_DWORD *)v10 + 6) = 0;
        v12 = (uint64_t *)v11[1];
        *v10 = v12;
        v12[2] = (uint64_t)v10;
        v13 = v10[2];
        v11[2] = (uint64_t)v13;
        v13[v13[1] == (_QWORD)v10] = (uint64_t)v11;
        v11[1] = (uint64_t)v10;
        v10[2] = v11;
        v11 = *v10;
      }
      v15 = *v11;
      v14 = (uint64_t **)v11[1];
      v16 = *(_DWORD *)(*v11 + 24);
      if (*((_DWORD *)v14 + 6) != 1)
      {
        if (v16 == 1)
        {
          *((_DWORD *)v14 + 6) = 1;
          v23 = *v14;
          v11[1] = (uint64_t)*v14;
          v23[2] = (uint64_t)v11;
          v24 = (uint64_t **)v11[2];
          v14[2] = (uint64_t *)v24;
          v24[*v24 != v11] = (uint64_t *)v14;
          *((_DWORD *)v11 + 6) = 0;
          *v14 = v11;
          v11[2] = (uint64_t)v14;
          v11 = *v10;
          v15 = **v10;
          v14 = (uint64_t **)(*v10)[1];
        }
LABEL_34:
        v22 = v8 + 3;
        *((_DWORD *)v11 + 6) = *((_DWORD *)v10 + 6);
        *(_DWORD *)(v15 + 24) = 1;
        *((_DWORD *)v10 + 6) = 1;
        *v10 = (uint64_t *)v14;
        v14[2] = (uint64_t *)v10;
        v25 = v10[2];
        v11[2] = (uint64_t)v25;
        v25[v25[1] == (_QWORD)v10] = (uint64_t)v11;
        v11[1] = (uint64_t)v10;
        goto LABEL_38;
      }
      if (v16 != 1)
        goto LABEL_34;
      goto LABEL_28;
    }
    v11 = v10[1];
    if (!*((_DWORD *)v11 + 6))
    {
      *((_DWORD *)v11 + 6) = 1;
      *((_DWORD *)v10 + 6) = 0;
      v17 = *v11;
      v10[1] = (uint64_t *)*v11;
      *(_QWORD *)(v17 + 16) = v10;
      v18 = v10[2];
      v11[2] = (uint64_t)v18;
      v18[*v18 != (_QWORD)v10] = (uint64_t)v11;
      *v11 = (uint64_t)v10;
      v10[2] = v11;
      v11 = v10[1];
    }
    v19 = *v11;
    v20 = v11[1];
    v21 = *(_DWORD *)(v20 + 24);
    if (*(_DWORD *)(*v11 + 24) != 1)
      break;
    if (v21 != 1)
      goto LABEL_37;
LABEL_28:
    *((_DWORD *)v11 + 6) = 0;
    v8 = (uint64_t *)v10;
    if (*((_DWORD *)v10 + 6) != 1)
      goto LABEL_31;
  }
  if (v21 == 1)
  {
    *(_DWORD *)(v19 + 24) = 1;
    v26 = *(_QWORD *)(v19 + 8);
    *v11 = v26;
    *(_QWORD *)(v26 + 16) = v11;
    v27 = v11[2];
    *(_QWORD *)(v19 + 16) = v27;
    *(_QWORD *)(v27 + 8 * (*(_QWORD *)(v27 + 8) == (_QWORD)v11)) = v19;
    *((_DWORD *)v11 + 6) = 0;
    *(_QWORD *)(v19 + 8) = v11;
    v11[2] = v19;
    v11 = v10[1];
    v19 = *v11;
    v20 = v11[1];
  }
LABEL_37:
  v22 = v8 + 3;
  *((_DWORD *)v11 + 6) = *((_DWORD *)v10 + 6);
  *(_DWORD *)(v20 + 24) = 1;
  *((_DWORD *)v10 + 6) = 1;
  v10[1] = (uint64_t *)v19;
  *(_QWORD *)(v19 + 16) = v10;
  v28 = v10[2];
  v11[2] = (uint64_t)v28;
  v28[*v28 != (_QWORD)v10] = (uint64_t)v11;
  *v11 = (uint64_t)v10;
LABEL_38:
  v10[2] = v11;
LABEL_39:
  *v22 = 1;
  *(_DWORD *)(*a1 + 24) = 1;
  return a2;
}

_QWORD *dict_next(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  BOOL v4;

  v2 = *(_QWORD **)(a2 + 8);
  if (v2 == a1)
  {
    while (1)
    {
      v3 = *(_QWORD **)(a2 + 16);
      if (v3 == a1)
        break;
      v4 = a2 == v3[1];
      a2 = *(_QWORD *)(a2 + 16);
      if (!v4)
        return v3;
    }
    return 0;
  }
  else
  {
    do
    {
      v3 = v2;
      v2 = (_QWORD *)*v2;
    }
    while (v2 != a1);
  }
  return v3;
}

uint64_t dict_alloc_insert(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = heap_Alloc(a1[7], 48);
  v13 = 0;
  if (!v6)
    return 2298486794;
  v7 = v6;
  if (a3)
  {
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(a1[8] + 24))(a3, a1[7], &v13);
    if ((v8 & 0x80000000) != 0)
    {
      v11 = v8;
      goto LABEL_13;
    }
    v9 = v13;
  }
  else
  {
    v9 = 0;
  }
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = v9;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)v7 = 0;
  *(_DWORD *)(v7 + 24) = 0;
  v11 = dict_insert(a1, (uint64_t *)v7, a2);
  result = 0;
  if ((v11 & 0x80000000) == 0)
    return result;
  v12 = *(_QWORD *)(v7 + 32);
  if (v12)
    (*(void (**)(uint64_t, uint64_t))(a1[8] + 8))(v12, a1[7]);
  if (*(_QWORD *)(v7 + 40))
    (*(void (**)(uint64_t, uint64_t))(a1[8] + 32))(v13, a1[7]);
LABEL_13:
  heap_Free((_QWORD *)a1[7], v7);
  return v11;
}

_QWORD *dict_delete_free(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  dict_delete(a1, a2);
  v4 = *(_QWORD *)(a2 + 32);
  if (v4)
    (*(void (**)(uint64_t, uint64_t))(a1[8] + 8))(v4, a1[7]);
  v5 = *(_QWORD *)(a2 + 40);
  if (v5)
    (*(void (**)(uint64_t, uint64_t))(a1[8] + 32))(v5, a1[7]);
  return heap_Free((_QWORD *)a1[7], a2);
}

_QWORD **dict_first(_QWORD **a1)
{
  _QWORD *v1;
  _QWORD **v2;

  v1 = *a1;
  v2 = a1;
  while (v1 != a1)
  {
    v2 = (_QWORD **)v1;
    v1 = (_QWORD *)*v1;
  }
  if (v2 == a1)
    return 0;
  else
    return v2;
}

uint64_t dict_allow_dupes(uint64_t result)
{
  *(_BYTE *)(result + 72) = 1;
  return result;
}

uint64_t ssftmap_ObjOpen(_QWORD *a1, int a2, __int128 *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  v4 = 2298486791;
  if (*(_QWORD *)a3 && *((_QWORD *)a3 + 1) && *((_QWORD *)a3 + 3) && *((_QWORD *)a3 + 4) && a4 && *((_QWORD *)a3 + 2))
  {
    v9 = heap_Calloc(a1, 1, 128);
    *a4 = v9;
    if (v9)
    {
      v10 = *a3;
      v11 = a3[1];
      *(_QWORD *)(v9 + 32) = *((_QWORD *)a3 + 4);
      *(_OWORD *)v9 = v10;
      *(_OWORD *)(v9 + 16) = v11;
      *(_QWORD *)(*a4 + 40) = a1;
      dict_init(*a4 + 48, -1, *a4, (uint64_t)a1);
      if (a2 == 1)
        dict_allow_dupes(*a4 + 48);
      return 0;
    }
    else
    {
      return 2298486794;
    }
  }
  return v4;
}

uint64_t ssftmap_ObjClone(__int128 *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _QWORD *v8;
  _QWORD **v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = 2298486791;
  if (a1 && a2)
  {
    v5 = heap_Calloc(*((_QWORD **)a1 + 5), 1, 128);
    *a2 = v5;
    if (v5)
    {
      v6 = *a1;
      v7 = a1[1];
      *(_QWORD *)(v5 + 32) = *((_QWORD *)a1 + 4);
      *(_OWORD *)v5 = v6;
      *(_OWORD *)(v5 + 16) = v7;
      *(_QWORD *)(*a2 + 40) = *((_QWORD *)a1 + 5);
      v8 = a1 + 3;
      dict_init(*a2 + 48, -1, *a2, *(_QWORD *)(*a2 + 40));
      if (*((_BYTE *)a1 + 120))
        dict_allow_dupes(*a2 + 48);
      v9 = dict_first((_QWORD **)a1 + 6);
      if (v9)
      {
        v10 = (uint64_t)v9;
        do
        {
          v2 = dict_alloc_insert((uint64_t *)(*a2 + 48), *(_QWORD *)(v10 + 32), *(_QWORD *)(v10 + 40));
          v11 = dict_next(v8, v10);
          if ((v2 & 0x80000000) != 0)
            break;
          v10 = (uint64_t)v11;
        }
        while (v11);
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 2298486794;
    }
  }
  return v2;
}

uint64_t ssftmap_ObjClose(uint64_t a1)
{
  if (!a1)
    return 2298486791;
  dict_free_nodes((_QWORD **)(a1 + 48));
  heap_Free(*(_QWORD **)(a1 + 40), a1);
  return 0;
}

uint64_t ssftmap_Insert(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2 && a3)
    return dict_alloc_insert((uint64_t *)(a1 + 48), a2, a3);
  else
    return 2298486791;
}

uint64_t ssftmap_FindReadOnly(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v5;

  v3 = 2298486791;
  if (a1 && a2 && a3)
  {
    v5 = dict_lookup(a1 + 48, a2);
    if (v5)
    {
      v3 = 0;
      *a3 = v5[5];
    }
    else
    {
      return 2298486804;
    }
  }
  return v3;
}

uint64_t ssftmap_Remove(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;

  v2 = 2298486791;
  if (a1 && a2)
  {
    v3 = (uint64_t *)(a1 + 48);
    v4 = dict_lookup(a1 + 48, a2);
    if (v4)
    {
      dict_delete_free(v3, (uint64_t)v4);
      return 0;
    }
    else
    {
      return 2298486804;
    }
  }
  return v2;
}

uint64_t ssftmap_GetSize(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 96);
  return result;
}

uint64_t ssftmap_Clear(uint64_t a1)
{
  if (!a1)
    return 2298486791;
  dict_free_nodes((_QWORD **)(a1 + 48));
  return 0;
}

uint64_t ssftmap_IteratorOpen(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD **v7;
  _QWORD *v8;
  _QWORD **v9;
  _QWORD *v10;

  v4 = 2298486791;
  if (a1 && a4)
  {
    v7 = (_QWORD **)(a1 + 48);
    if (a2)
    {
      if (a3)
        v8 = dict_lookup((uint64_t)v7, a2);
      else
        v8 = dict_lower_bound((uint64_t)v7, a2);
      v9 = (_QWORD **)v8;
      if (!v8)
        return 2298486804;
    }
    else
    {
      v9 = dict_first(v7);
    }
    v10 = (_QWORD *)heap_Calloc(*(_QWORD **)(a1 + 40), 1, 24);
    *(_QWORD *)a4 = v10;
    if (v10)
    {
      v4 = 0;
      *v10 = a1;
      *(_QWORD *)(*(_QWORD *)a4 + 8) = 0;
      *(_QWORD *)(*(_QWORD *)a4 + 16) = v9;
    }
    else
    {
      return 2298486794;
    }
  }
  return v4;
}

uint64_t ssftmap_IteratorClose(uint64_t a1)
{
  if (!a1)
    return 2298486791;
  heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 40), a1);
  return 0;
}

uint64_t ssftmap_IteratorNext(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;

  result = 2298486791;
  if (a1 && a2 && a3)
  {
    v5 = a1[2];
    if (v5)
    {
      a1[1] = v5;
      *a2 = *(_QWORD *)(v5 + 32);
      *a3 = *(_QWORD *)(a1[1] + 40);
      v6 = dict_next((_QWORD *)(*a1 + 48), a1[1]);
      result = 0;
      a1[2] = (uint64_t)v6;
    }
    else
    {
      *a2 = 0;
      *a3 = 0;
      return 2298486807;
    }
  }
  return result;
}

uint64_t ssftmap_IteratorRemove(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;

  result = 2298486784;
  if (!a1)
    return 2298486791;
  v3 = a1[1];
  if (v3)
  {
    dict_delete_free((uint64_t *)(*a1 + 48), v3);
    result = 0;
    a1[1] = 0;
  }
  return result;
}

uint64_t ssftmap_ElemCopyString(const char *a1, uint64_t a2, char **a3)
{
  uint64_t v3;
  int v7;
  char *v8;

  v3 = 2298486791;
  if (a1 && a2 && a3)
  {
    v7 = strlen(a1);
    v8 = (char *)heap_Alloc(a2, (v7 + 1));
    if (v8)
    {
      v3 = 0;
      *a3 = strcpy(v8, a1);
    }
    else
    {
      return 2298486794;
    }
  }
  return v3;
}

_QWORD *ssftmap_ElemFreeString(_QWORD *result, _QWORD *a2)
{
  if (result)
    return heap_Free(a2, (uint64_t)result);
  return result;
}

uint64_t ssftmap_ElemCompareKeysString(const char *a1, const char *a2)
{
  uint64_t v2;

  if ((unint64_t)a1 | (unint64_t)a2)
    LODWORD(v2) = -1;
  else
    LODWORD(v2) = 0;
  if (a1)
    v2 = 1;
  else
    v2 = v2;
  if (a1 && a2)
    return strcmp(a1, a2);
  else
    return v2;
}

uint64_t objc_ObjOpen(uint64_t a1, _WORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  __int128 v15[2];
  _QWORD *(*v16)(_QWORD *, _QWORD *);
  uint64_t v17;

  v17 = 0;
  result = InitRsrcFunction(a2, a3, &v17);
  if ((result & 0x80000000) == 0)
  {
    v8 = 2338332682;
    if (a4)
    {
      v9 = (_QWORD *)heap_Calloc(*(_QWORD **)(v17 + 8), 1, 40);
      *a4 = (uint64_t)v9;
      if (v9)
      {
        *v9 = a2;
        v9[1] = a3;
        v10 = v17;
        *(_QWORD *)(*a4 + 16) = v17;
        v11 = critsec_ObjOpen(*(_QWORD *)(v10 + 16), *(_QWORD **)(v10 + 8), (uint64_t *)(*a4 + 24));
        v12 = *(_QWORD **)(v17 + 8);
        v13 = *a4;
        if ((v11 & 0x80000000) != 0)
        {
          heap_Free(v12, v13);
          v8 = v11;
        }
        else
        {
          v15[0] = xmmword_1EA93C460;
          v15[1] = *(_OWORD *)off_1EA93C470;
          v16 = objc_FreeValue;
          v14 = ssftmap_ObjOpen(v12, 0, v15, (uint64_t *)(v13 + 32));
          result = 0;
          if ((v14 & 0x80000000) == 0)
            return result;
          critsec_ObjClose(*(_QWORD *)(*a4 + 24));
          heap_Free(*(_QWORD **)(v17 + 8), *a4);
        }
        *a4 = 0;
        return v8;
      }
      else
      {
        return 2338332682;
      }
    }
    else
    {
      return 2338332679;
    }
  }
  return result;
}

uint64_t objc_CopyValue(__int128 *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = 2338332679;
  if (a1 && a3)
  {
    *a3 = 0;
    v6 = (_OWORD *)heap_Alloc(a2, 64);
    if (v6)
    {
      v3 = 0;
      v7 = *a1;
      v8 = a1[1];
      v9 = a1[3];
      v6[2] = a1[2];
      v6[3] = v9;
      *v6 = v7;
      v6[1] = v8;
      *a3 = v6;
    }
    else
    {
      return 2338332682;
    }
  }
  return v3;
}

_QWORD *objc_FreeValue(_QWORD *result, _QWORD *a2)
{
  if (result)
    return heap_Free(a2, (uint64_t)result);
  return result;
}

uint64_t objc_ObjClose(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;

  v13 = 0;
  v14 = 0;
  v1 = 2338332679;
  v12 = 0;
  if (a1)
  {
    v3 = critsec_Enter(*(_QWORD **)(a1 + 24));
    v4 = v3;
    if ((v3 & 0x80000000) != 0)
    {
      return v3;
    }
    else
    {
      v5 = *(_QWORD *)(a1 + 32);
      if (v5)
      {
        if ((ssftmap_IteratorOpen(v5, 0, 1, (uint64_t)&v14) & 0x80000000) == 0)
        {
          while (!ssftmap_IteratorNext(v14, &v13, &v12))
          {
            if (*(_WORD *)(v12 + 56))
            {
              ssftmap_IteratorClose((uint64_t)v14);
              critsec_Leave(*(_QWORD **)(a1 + 24));
              return 2338332689;
            }
          }
          ssftmap_IteratorClose((uint64_t)v14);
        }
        v6 = *(_QWORD *)(a1 + 32);
        if (v6)
        {
          ssftmap_ObjClose(v6);
          *(_QWORD *)(a1 + 32) = 0;
        }
      }
      v7 = critsec_Leave(*(_QWORD **)(a1 + 24));
      if (v7 >= 0)
        v1 = v4;
      else
        v1 = v7;
      v8 = *(_QWORD *)(a1 + 24);
      if (v8)
      {
        v9 = critsec_ObjClose(v8);
        if (v9 >= 0 || (int)v1 <= -1)
          v1 = v1;
        else
          v1 = v9;
      }
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), a1);
    }
  }
  return v1;
}

uint64_t objc_GetObject(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  unsigned int ReadOnly;
  unsigned int v8;
  uint64_t v9;
  uint64_t v11;

  v11 = 0;
  result = 2338332679;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        result = critsec_Enter(*(_QWORD **)(a1 + 24));
        if ((result & 0x80000000) == 0)
        {
          ReadOnly = ssftmap_FindReadOnly(*(_QWORD *)(a1 + 32), a2, &v11);
          v8 = ReadOnly;
          if ((ReadOnly & 0x80000000) != 0)
          {
            v8 = ReadOnly & 0x1FFF | 0x8B602000;
          }
          else
          {
            v9 = v11;
            *a3 = v11;
            ++*(_WORD *)(v9 + 56);
          }
          LODWORD(result) = critsec_Leave(*(_QWORD **)(a1 + 24));
          if ((int)result >= 0 || (int)v8 <= -1)
            return v8;
          else
            return result;
        }
      }
    }
  }
  return result;
}

uint64_t objc_RegisterObject(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t result;
  int ReadOnly;
  int v8;
  _OWORD *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD *v18;

  v18 = 0;
  result = 2338332679;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        result = critsec_Enter(*(_QWORD **)(a1 + 24));
        if ((result & 0x80000000) == 0)
        {
          v16 = 0u;
          v17 = 0u;
          v14 = 0u;
          v15 = 0u;
          ReadOnly = ssftmap_FindReadOnly(*(_QWORD *)(a1 + 32), a2, &v18);
          if (ReadOnly < 0)
          {
            v17 = 0uLL;
            v12 = a3[1];
            v14 = *a3;
            v15 = v12;
            v16 = *((unint64_t *)a3 + 4);
            v8 = ssftmap_Insert(*(_QWORD *)(a1 + 32), a2, (uint64_t)&v14);
          }
          else
          {
            v8 = ReadOnly;
            v9 = v18;
            v10 = *((_QWORD *)a3 + 4);
            v11 = a3[1];
            *v18 = *a3;
            v9[1] = v11;
            *((_QWORD *)v9 + 4) = v10;
          }
          LODWORD(result) = critsec_Leave(*(_QWORD **)(a1 + 24));
          if (v8 > -1 && (int)result < 0)
            return result;
          else
            return v8;
        }
      }
    }
  }
  return result;
}

uint64_t objc_ReleaseObject(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int ReadOnly;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 *v15;

  v15 = 0;
  result = 2338332679;
  if (a1)
  {
    if (a2)
    {
      result = critsec_Enter(*(_QWORD **)(a1 + 24));
      if ((result & 0x80000000) == 0)
      {
        v13 = 0u;
        v14 = 0u;
        v11 = 0u;
        v12 = 0u;
        ReadOnly = ssftmap_FindReadOnly(*(_QWORD *)(a1 + 32), a2, &v15);
        v6 = ReadOnly;
        if (ReadOnly < 0)
        {
          v6 = ReadOnly & 0x1FFF | 0x8B602000;
        }
        else if (*((_WORD *)v15 + 28))
        {
          if (*((_WORD *)v15 + 28) == 1 && *((_QWORD *)v15 + 6))
          {
            v7 = *v15;
            v8 = v15[1];
            v9 = v15[3];
            v13 = v15[2];
            v14 = v9;
            v11 = v7;
            v12 = v8;
            v6 = ssftmap_Remove(*(_QWORD *)(a1 + 32), a2);
            ((void (*)(_QWORD, _QWORD, __int128 *))v14)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), &v11);
          }
          else
          {
            --*((_WORD *)v15 + 28);
          }
        }
        else
        {
          v6 = -1956634607;
        }
        LODWORD(result) = critsec_Leave(*(_QWORD **)(a1 + 24));
        if (v6 > -1 && (int)result < 0)
          return result;
        else
          return v6;
      }
    }
  }
  return result;
}

uint64_t objc_UnregisterObject(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int ReadOnly;
  int v9;
  uint64_t v12;

  v2 = 2338332679;
  v12 = 0;
  if (!a1 || !a2)
    return v2;
  v5 = critsec_Enter(*(_QWORD **)(a1 + 24));
  v6 = v5;
  if ((v5 & 0x80000000) != 0)
    return v5;
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
  {
    ReadOnly = ssftmap_FindReadOnly(v7, a2, &v12);
    if ((ReadOnly & 0x80000000) == 0)
    {
      if (*(_WORD *)(v12 + 56))
      {
        v6 = -1956634607;
        goto LABEL_11;
      }
      ReadOnly = ssftmap_Remove(*(_QWORD *)(a1 + 32), a2);
    }
    v6 = ReadOnly;
  }
LABEL_11:
  v9 = critsec_Leave(*(_QWORD **)(a1 + 24));
  if (v6 > -1 && v9 < 0)
    return v9;
  else
    return v6;
}

uint64_t objc_GetAddRefCountedObject(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, uint64_t, __int128 *, uint64_t), void (*a4)(_QWORD, _QWORD, __int128 *), uint64_t a5, _QWORD *a6)
{
  uint64_t result;
  unsigned int ReadOnly;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = 0;
  result = 2338332679;
  if (a6)
  {
    if (a1)
    {
      if (a2)
      {
        if (a3)
        {
          if (a4)
          {
            result = critsec_Enter(*(_QWORD **)(a1 + 24));
            if ((result & 0x80000000) == 0)
            {
              v20 = 0u;
              v21 = 0u;
              v18 = 0u;
              v19 = 0u;
              ReadOnly = ssftmap_FindReadOnly(*(_QWORD *)(a1 + 32), a2, &v22);
              if ((ReadOnly & 0x80000000) == 0)
              {
LABEL_8:
                v14 = v22;
                *a6 = v22;
                ++*(_WORD *)(v14 + 56);
                v15 = 1;
                goto LABEL_16;
              }
              v20 = 0u;
              v21 = 0u;
              v18 = 0u;
              v19 = 0u;
              v16 = a3(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), a2, &v18, a5);
              if ((v16 & 0x80000000) != 0)
              {
                ReadOnly = v16;
              }
              else
              {
                *((_QWORD *)&v20 + 1) = a3;
                *(_QWORD *)&v21 = a4;
                v17 = ssftmap_Insert(*(_QWORD *)(a1 + 32), a2, (uint64_t)&v18);
                if ((v17 & 0x80000000) != 0)
                {
                  ReadOnly = v17;
                  a4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), &v18);
                }
                else
                {
                  ReadOnly = ssftmap_FindReadOnly(*(_QWORD *)(a1 + 32), a2, &v22);
                  if ((ReadOnly & 0x80000000) == 0)
                    goto LABEL_8;
                }
              }
              v15 = 0;
LABEL_16:
              LODWORD(result) = critsec_Leave(*(_QWORD **)(a1 + 24));
              if ((v15 & ((int)result < 0)) != 0)
                return result;
              else
                return ReadOnly;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t paramc_ObjOpen(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;
  __int128 v25;
  _QWORD *(*v26)(_QWORD *, _QWORD *);

  v4 = 2339381258;
  if (!a4)
    return 2339381255;
  v7 = (_QWORD *)heap_Calloc(*(_QWORD **)(a2 + 8), 1, 40);
  *(_QWORD *)a4 = v7;
  if (!v7)
    return 2339381258;
  v8 = *(_QWORD **)(a2 + 8);
  *v7 = v8;
  v9 = critsec_ObjOpen(*(_QWORD *)(a2 + 16), v8, (uint64_t *)(*(_QWORD *)a4 + 8));
  if ((v9 & 0x80000000) != 0)
  {
    v4 = v9;
  }
  else
  {
    v10 = *(_QWORD **)(a2 + 8);
    v11 = (uint64_t *)(*(_QWORD *)a4 + 16);
    v24 = paramc_IParam;
    v25 = *(_OWORD *)&off_1EA93ABF8;
    v26 = param_Free;
    v12 = ssftmap_ObjOpen(v10, 0, &v24, v11);
    v13 = v12;
    if ((v12 & 0x80000000) != 0)
    {
      v4 = v12;
    }
    else
    {
      v14 = *(_QWORD **)(a2 + 8);
      v15 = (uint64_t *)(*(_QWORD *)a4 + 24);
      v24 = paramc_IListener;
      *(_QWORD *)&v25 = 0;
      if (vector_ObjOpen(v14, &v24, 1, v15))
      {
        v16 = *(_QWORD **)(a2 + 8);
        v17 = (uint64_t *)(*(_QWORD *)a4 + 32);
        v24 = paramc_IRestorePoints;
        *(_QWORD *)&v25 = param_RestorePointFreeParts;
        if (vector_ObjOpen(v16, &v24, 2, v17))
          return v13;
      }
    }
  }
  v18 = *(_QWORD **)a4;
  if (*(_QWORD *)a4)
  {
    v19 = v18[4];
    if (v19)
    {
      vector_ObjClose(v19);
      v18 = *(_QWORD **)a4;
    }
    v20 = v18[3];
    if (v20)
    {
      vector_ObjClose(v20);
      v18 = *(_QWORD **)a4;
    }
    v21 = v18[2];
    if (v21)
    {
      ssftmap_ObjClose(v21);
      v18 = *(_QWORD **)a4;
    }
    v22 = v18[1];
    if (v22)
    {
      critsec_ObjClose(v22);
      v18 = *(_QWORD **)a4;
    }
    heap_Free(*(_QWORD **)(a2 + 8), (uint64_t)v18);
    *(_QWORD *)a4 = 0;
  }
  return v4;
}

uint64_t paramc_ObjClose(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!a1)
    return 2339381255;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    vector_ObjClose(v2);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    vector_ObjClose(v3);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    ssftmap_ObjClose(v4);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    critsec_ObjClose(v5);
  heap_Free(*(_QWORD **)a1, a1);
  return 0;
}

uint64_t paramc_ListenerAdd(uint64_t a1, _BYTE *a2, _QWORD *a3)
{
  unsigned int v3;
  uint64_t v4;
  int ReadOnly;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v3 = -1955586038;
  v16 = 0;
  v4 = 2339381255;
  if (!a1)
    return v4;
  if (!a3[2])
    return v4;
  v4 = critsec_Enter(*(_QWORD **)(a1 + 8));
  if ((v4 & 0x80000000) != 0)
    return v4;
  if (a2 && *a2)
  {
    ReadOnly = ssftmap_FindReadOnly(*(_QWORD *)(a1 + 16), (uint64_t)a2, &v16);
    LODWORD(v4) = ReadOnly;
    if (ReadOnly < 0)
    {
      v3 = ReadOnly & 0x1FFF | 0x8B702000;
      goto LABEL_14;
    }
    v9 = *(_QWORD *)(v16 + 16);
    if (!v9)
    {
      v10 = *(_QWORD **)a1;
      v14 = paramc_IListener;
      v15 = 0;
      if (!vector_ObjOpen(v10, &v14, 1, (uint64_t *)(v16 + 16)))
        goto LABEL_14;
      v9 = *(_QWORD *)(v16 + 16);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 24);
  }
  if (vector_Add(v9, a3))
    v3 = v4;
  else
    v3 = -1955586038;
LABEL_14:
  v11 = critsec_Leave(*(_QWORD **)(a1 + 8));
  if (v11 >= 0 || (int)v3 <= -1)
    return v3;
  else
    return v11;
}

uint64_t paramc_ListenerRemove(uint64_t a1, _BYTE *a2, __int128 *a3)
{
  uint64_t result;
  int ReadOnly;
  uint64_t v8;
  int v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = 0;
  if (!a1)
    return 2339381255;
  result = critsec_Enter(*(_QWORD **)(a1 + 8));
  if ((result & 0x80000000) == 0)
  {
    if (a2 && *a2)
    {
      ReadOnly = ssftmap_FindReadOnly(*(_QWORD *)(a1 + 16), (uint64_t)a2, &v13);
      if (ReadOnly < 0)
      {
        v9 = ReadOnly & 0x1FFF | 0x8B702000;
        goto LABEL_10;
      }
      v8 = *(_QWORD *)(v13 + 16);
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 24);
    }
    v11 = *a3;
    v12 = *((_QWORD *)a3 + 2);
    v9 = param_ListenerRemove(v8, &v11);
LABEL_10:
    LODWORD(result) = critsec_Leave(*(_QWORD **)(a1 + 8));
    if (v9 > -1 && (int)result < 0)
      return result;
    else
      return v9;
  }
  return result;
}

uint64_t param_ListenerRemove(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v5;
  _QWORD *v7;

  v2 = 2339381268;
  v7 = 0;
  if (a1 && vector_GetElemAt(a1, 0, &v7))
  {
    v5 = 0;
    while (*a2 != *v7 || a2[1] != v7[1] || a2[2] != v7[2])
    {
      if (!vector_GetElemAt(a1, ++v5, &v7))
        return v2;
    }
    if (vector_Remove(a1, v5))
      return 0;
    else
      return 2339381504;
  }
  return v2;
}

uint64_t paramc_ParamSet(uint64_t a1, uint64_t a2, void *a3, size_t a4)
{
  return paramc_ParamSetInternal(a1, a2, a3, a4, 0);
}

uint64_t paramc_ParamSetInternal(uint64_t a1, uint64_t a2, void *a3, size_t a4, int a5)
{
  uint64_t v5;
  uint64_t v11;
  unsigned int v12;
  const void *v13;
  int v14;
  void *v15;
  size_t v16;
  int v17;
  int v18;
  void *v19;
  size_t v20;
  int v21;
  _QWORD v24[3];
  int v25[2];

  *(_QWORD *)v25 = 0;
  v5 = 2339381255;
  if (!a1)
    return v5;
  if (!a2)
    return v5;
  if (!a3)
    return v5;
  v5 = critsec_Enter(*(_QWORD **)(a1 + 8));
  if ((v5 & 0x80000000) != 0)
    return v5;
  if ((ssftmap_FindReadOnly(*(_QWORD *)(a1 + 16), a2, v25) & 0x80000000) == 0)
  {
    v11 = *(_QWORD *)v25;
    if (*(_QWORD *)v25)
    {
      v12 = *(_DWORD *)(*(_QWORD *)v25 + 8);
      if (v12)
        v13 = **(const void ***)v25;
      else
        v13 = 0;
    }
    else
    {
      v13 = 0;
      v12 = 0;
    }
    if (v12 == (_DWORD)a4 && !memcmp(v13, a3, a4))
      goto LABEL_37;
    v14 = param_ConsultListeners(a1, a2, v11, (uint64_t)a3);
    if ((v14 & 0x80000000) == 0)
    {
      v19 = a5 ? a3 : (void *)v13;
      v20 = a5 ? a4 : v12;
      v14 = param_TrackForRestore(a1, a2, v19, v20, a5);
      if ((v14 & 0x80000000) == 0)
      {
        v14 = param_SetValue(*(uint64_t *)v25, a3, a4, *(uint64_t **)a1);
        if ((v14 & 0x80000000) == 0)
        {
          v14 = param_NotifyListeners(a1, a2, *(uint64_t *)v25, (uint64_t)a3);
          if ((v14 & 0x80000000) == 0)
          {
            LODWORD(v5) = 0;
            goto LABEL_37;
          }
        }
      }
    }
LABEL_36:
    LODWORD(v5) = v14;
    goto LABEL_37;
  }
  v24[2] = 0;
  v24[0] = a3;
  v24[1] = a4;
  v14 = param_ConsultListeners(a1, a2, (uint64_t)v24, (uint64_t)a3);
  if (v14 < 0)
    goto LABEL_36;
  v15 = a5 ? a3 : 0;
  v16 = a5 ? a4 : 0;
  v14 = param_TrackForRestore(a1, a2, v15, v16, a5);
  if (v14 < 0)
    goto LABEL_36;
  v17 = ssftmap_Insert(*(_QWORD *)(a1 + 16), a2, (uint64_t)v24);
  if (v17 < 0)
  {
    LODWORD(v5) = v17 & 0x1FFF | 0x8B702000;
  }
  else
  {
    v18 = param_NotifyListeners(a1, a2, (uint64_t)v24, (uint64_t)a3);
    if (v18 < 0)
      LODWORD(v5) = v18 & 0x1FFF | 0x8B702000;
    else
      LODWORD(v5) = 0;
  }
LABEL_37:
  v21 = critsec_Leave(*(_QWORD **)(a1 + 8));
  if (v21 >= 0 || (int)v5 <= -1)
    return v5;
  else
    return v21;
}

uint64_t paramc_ParamSetPermanent(uint64_t a1, uint64_t a2, void *a3, size_t a4)
{
  return paramc_ParamSetInternal(a1, a2, a3, a4, 1);
}

uint64_t paramc_ParamRipple(uint64_t a1, uint64_t a2, void *a3, size_t a4)
{
  uint64_t result;
  size_t v9;
  void *v10;
  int v11;
  int v12;
  _QWORD v13[3];
  int v14[2];

  *(_QWORD *)v14 = 0;
  result = 2339381255;
  if (a1 && a2 && a3)
  {
    if ((ssftmap_FindReadOnly(*(_QWORD *)(a1 + 16), a2, v14) & 0x80000000) != 0)
    {
      v13[2] = 0;
      v13[0] = a3;
      v13[1] = a4;
      result = param_TrackForRestore(a1, a2, 0, 0, 0);
      if ((result & 0x80000000) == 0)
      {
        v11 = ssftmap_Insert(*(_QWORD *)(a1 + 16), a2, (uint64_t)v13);
        if (v11 < 0)
        {
          return v11 & 0x1FFF | 0x8B702000;
        }
        else
        {
          v12 = param_NotifyListeners(a1, a2, (uint64_t)v13, (uint64_t)a3);
          if (v12 < 0)
            return v12 & 0x1FFF | 0x8B702000;
          else
            return 0;
        }
      }
    }
    else
    {
      if (*(_QWORD *)v14)
      {
        v9 = *(unsigned int *)(*(_QWORD *)v14 + 8);
        if ((_DWORD)v9)
          v10 = **(void ***)v14;
        else
          v10 = 0;
      }
      else
      {
        v10 = 0;
        v9 = 0;
      }
      if ((_DWORD)v9 == (_DWORD)a4 && !memcmp(v10, a3, a4))
        return 0;
      result = param_TrackForRestore(a1, a2, v10, v9, 0);
      if ((result & 0x80000000) == 0)
      {
        result = param_SetValue(*(uint64_t *)v14, a3, a4, *(uint64_t **)a1);
        if ((result & 0x80000000) == 0)
        {
          result = param_NotifyListeners(a1, a2, *(uint64_t *)v14, (uint64_t)a3);
          if ((result & 0x80000000) == 0)
            return 0;
        }
      }
    }
  }
  return result;
}

uint64_t param_TrackForRestore(uint64_t a1, uint64_t a2, void *a3, size_t a4, int a5)
{
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int ReadOnly;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  v18 = 0;
  v19 = 0;
  v17[2] = 0;
  v17[0] = a3;
  v17[1] = a4;
  if (vector_GetElemAt(*(_QWORD *)(a1 + 32), 0, &v19))
  {
    v10 = 1;
    while (1)
    {
      v11 = ssftmap_Insert(*(_QWORD *)(v19 + 8), a2, (uint64_t)v17);
      if ((v11 & 0x1FFF) == 2)
        v12 = 0;
      else
        v12 = v11;
      if ((v11 & 0x1FFF) == 2 && a5 != 0)
      {
        ReadOnly = ssftmap_FindReadOnly(*(_QWORD *)(v19 + 8), a2, &v18);
        if (ReadOnly < 0)
          return ReadOnly & 0x1FFF | 0x8B702000;
        v12 = param_SetValue(v18, a3, a4, **(uint64_t ***)v19);
      }
      if ((v12 & 0x80000000) == 0)
      {
        if (vector_GetElemAt(*(_QWORD *)(a1 + 32), v10++, &v19))
          continue;
      }
      return v12;
    }
  }
  return 0;
}

uint64_t param_SetValue(uint64_t a1, void *__src, size_t __n, uint64_t *a4)
{
  uint64_t v4;
  int v5;
  unsigned int v8;
  void *v9;
  size_t v10;
  uint64_t v11;

  v4 = 2339381258;
  if (!a1)
    return 2339381255;
  v5 = __n;
  if ((_DWORD)__n)
  {
    v8 = *(_DWORD *)(a1 + 8);
    if (v8)
    {
      v9 = *(void **)a1;
      v10 = __n;
      if (v8 >= __n)
      {
LABEL_13:
        memcpy(v9, __src, v10);
        v4 = 0;
        *(_DWORD *)(a1 + 8) = v5;
        return v4;
      }
      v11 = heap_Realloc(a4, (uint64_t)v9, __n);
      if (v11)
      {
        v9 = (void *)v11;
        *(_QWORD *)a1 = v11;
        goto LABEL_13;
      }
    }
    else
    {
      v10 = __n;
      v9 = (void *)heap_Alloc((uint64_t)a4, __n);
      *(_QWORD *)a1 = v9;
      if (v9)
        goto LABEL_13;
    }
  }
  else
  {
    if (*(_QWORD *)a1 && *(_DWORD *)(a1 + 8))
      heap_Free(a4, *(_QWORD *)a1);
    v4 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    *(_QWORD *)a1 = __src;
  }
  return v4;
}

uint64_t param_NotifyListeners(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  int Size;
  int v12;
  unsigned int v13;
  uint64_t result;
  uint64_t v15;

  v15 = 0;
  if (!a3)
    return 0;
  v6 = a3 + 16;
  v7 = a1 + 24;
  v8 = 1;
  while (1)
  {
    v9 = (uint64_t *)(v8 == 1 ? v6 : v7);
    v10 = *v9;
    if (*v9)
    {
      Size = vector_GetSize(*v9);
      if (Size)
        break;
    }
LABEL_12:
    if (++v8 == 3)
      return 0;
  }
  v12 = Size;
  v13 = 0;
  while (vector_GetElemAt(v10, v13, &v15))
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v15 + 16))(*(_QWORD *)v15, a2, a4);
    if ((result & 0x80000000) != 0)
      return result;
    if (v12 == ++v13)
      goto LABEL_12;
  }
  return 2339381504;
}

uint64_t paramc_ParamGet(uint64_t a1, uint64_t a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t result;
  unsigned int ReadOnly;
  unsigned int v10;
  int v11;
  uint64_t v13;

  v13 = 0;
  result = 2339381255;
  if (a1 && a2 && a3)
  {
    *a3 = 0;
    if (a4)
      *a4 = 0;
    result = critsec_Enter(*(_QWORD **)(a1 + 8));
    if ((result & 0x80000000) == 0)
    {
      ReadOnly = ssftmap_FindReadOnly(*(_QWORD *)(a1 + 16), a2, &v13);
      v10 = ReadOnly;
      if ((ReadOnly & 0x80000000) != 0)
      {
        v10 = ReadOnly & 0x1FFF | 0x8B702000;
      }
      else if (v13)
      {
        v11 = *(_DWORD *)(v13 + 8);
        if (v11)
        {
          *a3 = *(_QWORD *)v13;
          if (!a4)
            goto LABEL_15;
          goto LABEL_14;
        }
        *a3 = 0;
        if (a4)
LABEL_14:
          *a4 = v11;
      }
LABEL_15:
      LODWORD(result) = critsec_Leave(*(_QWORD **)(a1 + 8));
      if ((int)result >= 0 || (int)v10 <= -1)
        return v10;
      else
        return result;
    }
  }
  return result;
}

uint64_t paramc_ParamRelease(uint64_t a1)
{
  if (a1)
    return 0;
  else
    return 2339381255;
}

uint64_t paramc_ParamSetInt(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  char __s[32];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  LH_itoa(a3, __s, 0xAu);
  v5 = strlen(__s);
  return paramc_ParamSetInternal(a1, a2, __s, (v5 + 1), 0);
}

uint64_t paramc_ParamGetInt(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  int v5;
  unsigned int v7;
  char *v8;

  v8 = 0;
  v7 = 0;
  v4 = paramc_ParamGet(a1, a2, &v8, &v7);
  v5 = 0;
  if ((v4 & 0x80000000) == 0 && v7 >= 2)
    v5 = atoi(v8);
  *a3 = v5;
  return v4;
}

uint64_t paramc_ParamSetUInt(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  char __s[32];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  LH_utoa(a3, __s, 0xAu);
  v5 = strlen(__s);
  return paramc_ParamSetInternal(a1, a2, __s, (v5 + 1), 0);
}

uint64_t paramc_ParamSetUIntPermanent(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  char __s[32];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  LH_utoa(a3, __s, 0xAu);
  v5 = strlen(__s);
  return paramc_ParamSetInternal(a1, a2, __s, (v5 + 1), 1);
}

uint64_t paramc_ParamGetUInt(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v7;
  const char *v8;

  v8 = 0;
  v7 = 0;
  v4 = paramc_ParamGet(a1, a2, &v8, &v7);
  v5 = 0;
  if ((v4 & 0x80000000) == 0 && v7 >= 2)
    v5 = LH_atou(v8);
  *a3 = v5;
  return v4;
}

uint64_t paramc_ParamSetStr(uint64_t a1, uint64_t a2, char *a3)
{
  char *v5;
  size_t v6;

  if (a3)
    v5 = a3;
  else
    v5 = &byte_1DEBD87CE;
  v6 = strlen(v5) + 1;
  return paramc_ParamSetInternal(a1, a2, v5, v6, 0);
}

uint64_t paramc_ParamSetStrPermanent(uint64_t a1, uint64_t a2, char *a3)
{
  char *v5;
  size_t v6;

  if (a3)
    v5 = a3;
  else
    v5 = &byte_1DEBD87CE;
  v6 = strlen(v5) + 1;
  return paramc_ParamSetInternal(a1, a2, v5, v6, 1);
}

uint64_t paramc_ParamGetStr(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return paramc_ParamGet(a1, a2, a3, 0);
}

uint64_t paramc_ParamRemove(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int ReadOnly;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  size_t v9;
  void *v10;
  unsigned int v11;
  int v12;
  uint64_t v14;

  v14 = 0;
  result = 2339381255;
  if (!a1)
    return result;
  if (!a2)
    return result;
  result = critsec_Enter(*(_QWORD **)(a1 + 8));
  if ((result & 0x80000000) != 0)
    return result;
  ReadOnly = ssftmap_FindReadOnly(*(_QWORD *)(a1 + 16), a2, &v14);
  if (ReadOnly < 0)
  {
    v8 = ReadOnly & 0x1FFF | 0x8B702000;
    goto LABEL_19;
  }
  v6 = v14;
  v7 = *(_QWORD *)(v14 + 16);
  if (!v7)
    goto LABEL_10;
  if (vector_GetSize(v7))
  {
    v8 = -1955586031;
    goto LABEL_19;
  }
  v6 = v14;
  if (!v14)
  {
    v10 = 0;
    v9 = 0;
  }
  else
  {
LABEL_10:
    v9 = *(unsigned int *)(v6 + 8);
    if ((_DWORD)v9)
      v10 = *(void **)v6;
    else
      v10 = 0;
  }
  v11 = param_TrackForRestore(a1, a2, v10, v9, 0);
  if ((v11 & 0x80000000) != 0)
  {
    v8 = v11;
  }
  else
  {
    v12 = ssftmap_Remove(*(_QWORD *)(a1 + 16), a2);
    if (v12 >= 0)
      v8 = v12;
    else
      v8 = v12 & 0x1FFF | 0x8B702000;
  }
LABEL_19:
  LODWORD(result) = critsec_Leave(*(_QWORD **)(a1 + 8));
  if ((int)result >= 0 || (int)v8 <= -1)
    return v8;
  else
    return result;
}

uint64_t paramc_ParamSetRestorePoint(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int Size;
  int v9;
  _QWORD v12[2];

  v2 = 2339381255;
  if (a1 && a2)
  {
    v5 = critsec_Enter(*(_QWORD **)(a1 + 8));
    v6 = v5;
    if ((v5 & 0x80000000) != 0)
    {
      return v5;
    }
    else
    {
      v12[0] = a1;
      v12[1] = 0;
      if (vector_Add(*(_QWORD *)(a1 + 32), v12))
      {
        v7 = *(_QWORD *)(a1 + 32);
        Size = vector_GetSize(v7);
        if (vector_GetElemAt(v7, Size - 1, a2))
          LODWORD(v2) = v6;
        else
          LODWORD(v2) = -1955585792;
      }
      else
      {
        LODWORD(v2) = -1955586038;
      }
      v9 = critsec_Leave(*(_QWORD **)(a1 + 8));
      if (v9 >= 0 || (int)v2 <= -1)
        return v2;
      else
        return v9;
    }
  }
  return v2;
}

uint64_t paramc_ParamRestore(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  v12 = 0;
  v13 = 0;
  v2 = 2339381255;
  v11 = 0;
  if (a1)
  {
    if (a2)
    {
      v2 = ssftmap_IteratorOpen(a2[1], 0, 1, (uint64_t)&v13);
      if ((v2 & 0x80000000) == 0)
      {
        if (ssftmap_IteratorNext(v13, &v12, &v11))
        {
LABEL_5:
          ssftmap_IteratorClose((uint64_t)v13);
          return v2;
        }
        while (1)
        {
          v5 = v12;
          v6 = *(unsigned int *)(v11 + 8);
          v7 = *a2;
          if ((_DWORD)v6)
          {
            v8 = *(char **)v11;
          }
          else
          {
            v9 = paramc_ParamRemove(v7, v12);
            if ((v9 & 0x1FFF) != 0x11)
            {
              if ((v9 & 0x1FFF) == 0x14)
                v9 = 0;
              goto LABEL_13;
            }
            v7 = *a2;
            v5 = v12;
            v8 = &byte_1DEBD87CE;
            v6 = 1;
          }
          v9 = paramc_ParamSetInternal(v7, v5, v8, v6, 0);
LABEL_13:
          if ((int)v2 > -1 && v9 < 0)
            v2 = v9;
          else
            v2 = v2;
          if (ssftmap_IteratorNext(v13, &v12, &v11))
            goto LABEL_5;
        }
      }
    }
  }
  return v2;
}

uint64_t paramc_ParamCloseRestorePoint(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v5;
  int v6;
  int v7;

  v2 = 2339381255;
  if (a1 && a2)
  {
    v5 = critsec_Enter(*(_QWORD **)(a1 + 8));
    v6 = v5;
    if ((v5 & 0x80000000) != 0)
    {
      return v5;
    }
    else
    {
      if (vector_RemoveAddress(*(_QWORD *)(a1 + 32), a2))
        LODWORD(v2) = v6;
      else
        LODWORD(v2) = -1955586041;
      v7 = critsec_Leave(*(_QWORD **)(a1 + 8));
      if ((int)v2 > -1 && v7 < 0)
        return v7;
      else
        return v2;
    }
  }
  return v2;
}

uint64_t param_Copy(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v3 = 0;
  if (a1 && a3)
  {
    *a3 = 0;
    v7 = heap_Calloc(a2, 1, 24);
    if (v7)
    {
      v8 = (_QWORD *)v7;
      v9 = param_SetValue(v7, *(void **)a1, *(unsigned int *)(a1 + 8), a2);
      if ((v9 & 0x80000000) != 0)
      {
        v3 = v9;
        param_Free(v8, a2);
      }
      else
      {
        v3 = 0;
        *a3 = v8;
      }
    }
    else
    {
      return 2339381258;
    }
  }
  return v3;
}

_QWORD *param_Free(_QWORD *result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = (uint64_t)result;
    v4 = result[2];
    if (v4)
    {
      vector_ObjClose(v4);
      *(_QWORD *)(v3 + 16) = 0;
    }
    if (*(_QWORD *)v3)
    {
      heap_Free(a2, *(_QWORD *)v3);
      *(_QWORD *)v3 = 0;
    }
    *(_DWORD *)(v3 + 8) = 0;
    return heap_Free(a2, v3);
  }
  return result;
}

BOOL param_RestorePointCopyParts(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  __int128 *v3;
  int v4;
  __int128 v6[2];
  _QWORD *(*v7)(_QWORD *, _QWORD *);

  *a3 = *a1;
  v3 = (__int128 *)a1[1];
  if (v3)
  {
    v4 = ssftmap_ObjClone(v3, a3 + 1);
  }
  else
  {
    v6[0] = paramc_IParam;
    v6[1] = *(_OWORD *)&off_1EA93ABF8;
    v7 = param_Free;
    v4 = ssftmap_ObjOpen(a2, 0, v6, a3 + 1);
  }
  return v4 >= 0;
}

uint64_t param_RestorePointFreeParts(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    result = ssftmap_ObjClose(result);
    *(_QWORD *)(a1 + 8) = 0;
  }
  return result;
}

uint64_t param_ConsultListeners(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int Size;
  unsigned int v13;
  unsigned int v14;
  uint64_t (*v15)(_QWORD, uint64_t, uint64_t, int *);
  int v16;
  BOOL v17;
  _QWORD *v20;
  int v21;

  v21 = 1;
  v20 = 0;
  if (!a3)
    return 0;
  v6 = 0;
  v7 = a3 + 16;
  v8 = a1 + 24;
  v9 = 1;
  while (1)
  {
    v10 = (uint64_t *)(v9 == 1 ? v7 : v8);
    v11 = *v10;
    if (*v10)
    {
      Size = vector_GetSize(*v10);
      if (Size)
      {
        if ((v6 & 0x80000000) == 0)
          break;
      }
    }
LABEL_21:
    if (++v9 == 3)
      return v6;
  }
  v13 = Size;
  v14 = 1;
  while (vector_GetElemAt(v11, v14 - 1, &v20))
  {
    v15 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, int *))v20[1];
    if (v15)
    {
      v16 = v15(*v20, a2, a4, &v21);
      if (v21)
        v17 = 1;
      else
        v17 = v16 < 0;
      if (v17)
        v6 = v16;
      else
        v6 = 2339381263;
    }
    if ((v6 & 0x80000000) == 0 && v14++ < v13)
      continue;
    goto LABEL_21;
  }
  return 2339381504;
}

uint64_t ssftriff_reader_ObjOpen(_WORD *a1, uint64_t a2, uint64_t a3, const char *a4, char *a5, int a6, uint64_t *a7)
{
  return ssftriff_reader_ObjOpenEx(a1, a2, a3, a4, 0, 0, a5, a6 & 0xFFFFFF, a7);
}

uint64_t ssftriff_reader_ObjOpenEx(_WORD *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, int a6, char *a7, int a8, uint64_t *a9)
{
  uint64_t v13;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t inited;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t ChunkData;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint8x8_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int16 v71;
  int v72;
  uint64_t v73;
  char v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint8x8_t v80;
  __int16 v81;
  int Chunk;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  char *__endptr;
  char *v100;
  int v101[2];
  _OWORD v102[3];
  int v103;
  unsigned int v104;
  char __s2[4];
  unsigned __int8 v106;
  int v107;
  unsigned __int8 v108;
  uint64_t v109;
  char v110[32];
  __int128 v111;
  uint64_t v112;
  char __str[16];
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  v109 = 0;
  v106 = 0;
  v104 = 16;
  *(_DWORD *)__s2 = 0;
  v103 = 0;
  __str[0] = 0;
  v13 = a3;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 1;
  switch((int)a3)
  {
    case 0:
      goto LABEL_6;
    case 1:
      goto LABEL_5;
    case 2:
      v18 = 0;
      v13 = 0;
      v17 = 1;
      if (!a4)
        return 2317361159;
      goto LABEL_7;
    case 3:
      v16 = 1;
LABEL_5:
      v19 = 0;
      v18 = 0;
      v13 = 1;
      v17 = v16;
LABEL_6:
      if (a4)
        goto LABEL_7;
      return 2317361159;
    case 4:
      v17 = 0;
      v19 = 0;
      v13 = 4;
      v18 = 1;
      if (!a4)
        return 2317361159;
LABEL_7:
      if (!a7 || !*a4 || v19 && !*a7 || v18 && (!a5 || !a6) || !a9)
        return 2317361159;
      v108 = 0;
      v107 = 0;
      memset(v102, 0, sizeof(v102));
      *(_QWORD *)v101 = 0;
      *a9 = 0;
      inited = InitRsrcFunction(a1, a2, &v109);
      if ((inited & 0x80000000) != 0)
        return inited;
      v24 = a8;
      v25 = BYTE1(a8);
      v26 = BYTE2(a8);
      v97 = v24;
      log_OutText(*(_QWORD *)(v109 + 32), (uint64_t)"RIFFREADER", 4, 0, (uint64_t)"ssftriff_reader_ObjOpen : Begin (%d, %s, %s, [%u.%u.%u])", v21, v22, v23, v13);
      memset((char *)v102 + 8, 0, 40);
      *(_QWORD *)&v102[0] = v109;
      if ((_DWORD)v13 == 4)
      {
        v96 = v25;
        *(_QWORD *)&v102[2] = a5;
        DWORD2(v102[2]) = 0;
        HIDWORD(v102[2]) = a6;
      }
      else if ((_DWORD)v13 == 1)
      {
        v96 = v25;
        v32 = osspi_DataOpen(*(_QWORD **)(v109 + 64), *(_QWORD **)(v109 + 8), (uint64_t)a4, (uint64_t *)&v102[1] + 1);
        if ((v32 & 0x80000000) != 0)
        {
          ChunkData = v32;
          v70 = *(_QWORD *)(v109 + 32);
          if ((_DWORD)v17)
            log_OutText(v70, (uint64_t)"RIFFREADER", 4, 0, (uint64_t)"osspi_DataOpen failed for %s, %x", v34, v35, v36, (uint64_t)a4);
          else
            log_OutPublic(v70, (uint64_t)"RIFFREADER", 27002, "%s%s%s%x", v33, v34, v35, v36, "file");
          return ChunkData;
        }
      }
      else
      {
        if ((_DWORD)v13)
        {
          log_OutPublic(*(_QWORD *)(v109 + 32), (uint64_t)"RIFFREADER", 27003, "%s%s%s%d", v27, v28, v29, v30, "file");
          return 2317361159;
        }
        v96 = v25;
        inited = brk_DataOpenEx(*(_QWORD *)(v109 + 24), (uint64_t)a4, v17, (uint64_t)&v102[1]);
        if ((inited & 0x80000000) != 0)
          return inited;
      }
      v37 = heap_Calloc(*(_QWORD **)(v109 + 8), 1, 112);
      if (v37)
      {
        v42 = v37;
        *(_QWORD *)v37 = a1;
        *(_QWORD *)(v37 + 8) = a2;
        v43 = v109;
        *(_QWORD *)(v37 + 16) = v109;
        *(_DWORD *)(v37 + 24) = v13;
        v44 = v102[1];
        *(_OWORD *)(v37 + 56) = v102[0];
        *(_OWORD *)(v37 + 72) = v44;
        *(_OWORD *)(v37 + 88) = v102[2];
        v45 = *(_QWORD *)(v43 + 8);
        v46 = strlen(a4);
        v47 = (char *)heap_Alloc(v45, (v46 + 1));
        *(_QWORD *)(v42 + 40) = v47;
        if (v47
          && (strcpy(v47, a4),
              v52 = *(_QWORD **)(v109 + 8),
              v111 = SSFTRIFF_CHUNK_STACK_ELEM_IT,
              v112 = 0,
              vector_ObjOpen(v52, &v111, 4, (uint64_t *)(v42 + 48))))
        {
          v53 = ssftriff_reader_OpenChunk(v42, &v107, (unsigned int *)&v103, 0, v48, v49, v50, v51);
          if ((v53 & 0x80000000) != 0)
            goto LABEL_93;
          ChunkData = ssftriff_reader_GetChunkData(v42, 4, v101, v56, v57, v58, v59, v60);
          if ((ChunkData & 0x80000000) == 0)
          {
            if (v107 ^ 0x46464952 | v108)
            {
              if (v107 ^ 0x34464952 | v108)
              {
                if (v107 ^ 0x38464952 | v108)
                {
                  if (!*(_WORD *)(v42 + 32))
                    goto LABEL_53;
LABEL_49:
                  ssftriff_reader_ReadFourCC(v42, *(uint64_t *)v101, v103, 0, (uint64_t)__s2, v61);
                  if (v72 < 0)
                  {
LABEL_53:
                    log_OutPublic(*(_QWORD *)(v109 + 32), (uint64_t)"RIFFREADER", 27004, "%s%s", v57, v58, v59, v60, "file");
                    goto LABEL_54;
                  }
                  if (*a7)
                  {
                    if (strcmp(a7, __s2))
                    {
                      log_OutPublic(*(_QWORD *)(v109 + 32), (uint64_t)"RIFFREADER", 27005, "%s%s", v73, v58, v59, v60, "file");
LABEL_54:
                      ChunkData = 2317361156;
                      goto LABEL_39;
                    }
                  }
                  else
                  {
                    strcpy(a7, __s2);
                  }
                  *(_DWORD *)(v42 + 104) += 4;
                  v74 = v19 ^ 1;
                  if (v97)
                    v74 = 0;
                  if ((v74 & 1) != 0)
                  {
LABEL_92:
                    *a9 = v42;
                    goto LABEL_40;
                  }
                  v75 = ssftriff_reader_OpenChunk(v42, &v107, (unsigned int *)&v103, v101, v73, v58, v59, v60);
                  v81 = v75;
                  if ((v75 & 0x80000000) == 0 && !(v107 ^ 0x5453494C | v108) && v103 >= 5)
                  {
                    ssftriff_reader_ReadFourCC(v42, *(uint64_t *)v101, v103, 0, (uint64_t)__s2, v80);
                    if ((Chunk & 0x80000000) == 0)
                    {
                      if (*(_DWORD *)__s2 ^ 0x4F464E49 | v106
                        || (v83 = *(_DWORD *)(v42 + 104) + 4, *(_DWORD *)(v42 + 104) = v83, v83 < 0))
                      {
                        v81 = 0;
                        goto LABEL_81;
                      }
                      Chunk = ssftriff_reader_FindChunk(v42, "VERS", 3, (unsigned int *)&v103, v101);
                      if ((Chunk & 0x80000000) == 0)
                      {
                        Chunk = ssftriff_reader_ReadStringZ(v42, *(uint64_t *)v101, v103, 0, __str, &v104);
                        if ((Chunk & 0x80000000) == 0)
                        {
                          __endptr = 0;
                          v100 = __str;
                          v88 = strtol(__str, &__endptr, 10);
                          if (v88 < 1
                            || !__endptr
                            || *__endptr != 46
                            || (v89 = strtol(__endptr + 1, &v100, 10), (v89 & 0x80000000) != 0)
                            || !v100
                            || *v100 != 46
                            || (v90 = strtol(v100 + 1, &__endptr, 10), (v90 & 0x80000000) != 0)
                            || !__endptr
                            || *__endptr && *__endptr != 46)
                          {
                            log_OutPublic(*(_QWORD *)(v109 + 32), (uint64_t)"RIFFREADER", 27008, "%s%s", v84, v85, v86, v87, "version");
                            goto LABEL_54;
                          }
                          if (v97 < v88 || v97 == v88 && (v96 < v89 || v96 == v89 && v26 < v90))
                          {
                            LH_itoa(v97, v110, 0xAu);
                            __strcpy_chk();
                            __strcat_chk();
                            LH_itoa(v96, v110, 0xAu);
                            __strcat_chk();
                            __strcat_chk();
                            LH_itoa(v26, v110, 0xAu);
                            __strcat_chk();
                            log_OutPublic(*(_QWORD *)(v109 + 32), (uint64_t)"RIFFREADER", 27009, "%s%s%s%s", v91, v92, v93, v94, "productVersion");
                            goto LABEL_54;
                          }
                          v53 = ssftriff_reader_CloseChunk(v42);
                          if ((v53 & 0x80000000) == 0)
                          {
                            v53 = ssftriff_reader_CloseChunk(v42);
                            if ((v53 & 0x80000000) == 0)
                            {
                              ChunkData = 0;
                              goto LABEL_92;
                            }
                          }
LABEL_93:
                          ChunkData = v53;
                          goto LABEL_39;
                        }
                      }
                    }
                    v81 = Chunk;
                  }
LABEL_81:
                  log_OutPublic(*(_QWORD *)(v109 + 32), (uint64_t)"RIFFREADER", 27006, "%s%s", v76, v77, v78, v79, "file");
                  if ((v81 & 0x1FFF) == 0xA)
                    ChunkData = 2317361162;
                  else
                    ChunkData = 2317361156;
                  goto LABEL_39;
                }
                v71 = 8;
              }
              else
              {
                v71 = 4;
              }
            }
            else
            {
              v71 = 2;
            }
            *(_WORD *)(v42 + 32) = v71;
            goto LABEL_49;
          }
        }
        else
        {
          log_OutPublic(*(_QWORD *)(v109 + 32), (uint64_t)"RIFFREADER", 27000, 0, v48, v49, v50, v51, v95);
          ChunkData = 2317361162;
        }
LABEL_39:
        ssftriff_reader_ObjClose((_QWORD *)v42, v54, v55, v56, v57, v58, v59, v60);
LABEL_40:
        log_OutText(*(_QWORD *)(v109 + 32), (uint64_t)"RIFFREADER", 4, 0, (uint64_t)"ssftriff_reader_ObjOpen : End (%x, %p)", v58, v59, v60, ChunkData);
        return ChunkData;
      }
      log_OutPublic(*(_QWORD *)(v109 + 32), (uint64_t)"RIFFREADER", 27000, 0, v38, v39, v40, v41, v95);
      ssftriff_reader_loc_DataClose((uint64_t)v102, v63, v64, v65, v66, v67, v68, v69);
      return 2317361162;
    default:
      return 2317361159;
  }
}

uint64_t ssftriff_reader_loc_DataClose(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;

  if (*(_DWORD *)(a1 + 8))
  {
    result = 0;
    *(_DWORD *)(a1 + 8) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    return result;
  }
  if (*(_QWORD *)(a1 + 32))
  {
    result = ssftriff_loc_DataUnmap(*(_QWORD *)a1, (_QWORD *)a1, a3, a4, a5, a6, a7, a8);
    *(_QWORD *)(a1 + 32) = 0;
    if ((result & 0x80000000) != 0)
      return result;
  }
  else
  {
    result = 0;
  }
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10
    || (result = brk_DataClose(*(_QWORD *)(*(_QWORD *)a1 + 24), v10),
        *(_QWORD *)(a1 + 16) = 0,
        (result & 0x80000000) == 0))
  {
    if (*(_QWORD *)(a1 + 24))
    {
      result = osspi_DataClose(*(_QWORD *)(a1 + 24));
      *(_QWORD *)(a1 + 24) = 0;
    }
  }
  return result;
}

uint64_t ssftriff_reader_OpenChunk(uint64_t a1, _BYTE *a2, unsigned int *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint8x8_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v9 = 2317361156;
  v41 = 0;
  result = 2317361159;
  if (a2 && a1 && a3)
  {
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"RIFFREADER", 4, 0, (uint64_t)"ssftriff_reader_OpenChunk : Begin (%p)", a6, a7, a8, a1);
    if (vector_StackTop(*(_QWORD *)(a1 + 48), &v41))
    {
      v19 = *(_DWORD *)(a1 + 104);
      if (v19 + 8 > *(_DWORD *)(v41 + 12))
      {
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"RIFFREADER", 3, 0, (uint64_t)"Chunk open failed: no more chunks", v15, v16, v17, v38);
        v9 = 2317361172;
        goto LABEL_39;
      }
      v24 = *(unsigned __int8 **)(a1 + 88);
      if (v24 && v19 >= *(_DWORD *)(a1 + 96) && v19 + 8 <= *(_DWORD *)(a1 + 100))
        goto LABEL_17;
      v23 = ssftriff_loc_DataMap(a1, *(unsigned int *)(a1 + 104), 8, a1 + 56, v14, v15, v16, v17);
      if ((v23 & 0x80000000) == 0)
      {
        v24 = *(unsigned __int8 **)(a1 + 88);
        v19 = *(_DWORD *)(a1 + 104);
        goto LABEL_17;
      }
    }
    else
    {
      v23 = ssftriff_loc_DataMap(a1, 0, 8, a1 + 56, v14, v15, v16, v17);
      *(_DWORD *)(a1 + 104) = 0;
      if ((v23 & 0x80000000) == 0)
      {
        v24 = *(unsigned __int8 **)(a1 + 88);
        v25 = *v24;
        if (v25 == 251 || v25 == 224)
        {
          v19 = 0;
          *(_DWORD *)(a1 + 28) = 1;
        }
        else
        {
          v19 = 0;
        }
LABEL_17:
        ssftriff_reader_ReadFourCC(a1, (uint64_t)v24, *(_DWORD *)(a1 + 100), v19 - *(_DWORD *)(a1 + 96), (uint64_t)a2, v18);
        if ((v23 & 0x80000000) == 0)
        {
          v27 = 0;
          *a3 = *(_DWORD *)(*(_QWORD *)(a1 + 88) + (*(_DWORD *)(a1 + 104) - *(_DWORD *)(a1 + 96) + 4));
          *(_DWORD *)(a1 + 104) += 8;
          do
          {
            v28 = a2[v27];
            if ((v28 & 0xFFFFFFDF) - 65 >= 0x1A)
            {
              v29 = v28 != 32 && (v28 - 48) >= 0xA;
              if (v29)
              {
                v34 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
                if (v41)
                  log_OutPublic(v34, (uint64_t)"RIFFREADER", 27011, "%s%s%s%s%s%u", v26, v20, v21, v22, "file");
                else
                  log_OutPublic(v34, (uint64_t)"RIFFREADER", 27004, "%s%s", v26, v20, v21, v22, "file");
                goto LABEL_39;
              }
            }
            v29 = v27++ >= 3;
          }
          while (!v29);
          if (v41)
          {
            v30 = *(_DWORD *)(v41 + 12);
            if (*a3 > v30 || *(_DWORD *)(a1 + 104) + *a3 > v30)
            {
              log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"RIFFREADER", 27012, "%s%s%s%s", v26, v20, v21, v22, "file");
              goto LABEL_39;
            }
          }
          if (!a4)
          {
LABEL_35:
            v33 = 0;
            goto LABEL_45;
          }
          v31 = *(unsigned int *)(a1 + 104);
          if (*(_QWORD *)(a1 + 88))
          {
            v32 = *a3;
            if (v31 >= *(_DWORD *)(a1 + 96) && (v32 + v31) <= *(_DWORD *)(a1 + 100))
              goto LABEL_35;
          }
          else
          {
            v32 = *a3;
          }
          v33 = ssftriff_loc_DataMap(a1, v31, v32, a1 + 56, v26, v20, v21, v22);
          if ((v33 & 0x80000000) != 0)
          {
            v35 = 0;
            *a2 = 0;
            *a3 = 0;
            goto LABEL_51;
          }
LABEL_45:
          v39 = 0;
          v40 = 0;
          __strcpy_chk();
          v36 = *a3 + *(_DWORD *)(a1 + 104);
          LODWORD(v40) = *(_DWORD *)(a1 + 104);
          HIDWORD(v40) = v36;
          if (vector_Add(*(_QWORD *)(a1 + 48), &v39))
          {
            if (a4)
            {
              v35 = *(_QWORD *)(a1 + 88) + (*(_DWORD *)(a1 + 104) - *(_DWORD *)(a1 + 96));
LABEL_51:
              v9 = v33;
              goto LABEL_40;
            }
            v9 = v33;
          }
          else
          {
            log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"RIFFREADER", 27000, 0, v37, v20, v21, v22, v38);
            v35 = 0;
            *a2 = 0;
            *a3 = 0;
            v9 = 2317361162;
            if (a4)
              goto LABEL_40;
          }
          goto LABEL_41;
        }
      }
    }
    v9 = v23;
LABEL_39:
    v35 = 0;
    *a2 = 0;
    *a3 = 0;
    if (a4)
LABEL_40:
      *a4 = v35;
LABEL_41:
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"RIFFREADER", 4, 0, (uint64_t)"ssftriff_reader_OpenChunk : End (%x, %s, %u, %p)", v20, v21, v22, v9);
    return v9;
  }
  return result;
}

uint64_t ssftriff_reader_GetChunkData(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;

  v8 = 2317361159;
  if (a1 && (_DWORD)a2 && a3)
  {
    if (*(_QWORD *)(a1 + 88))
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"RIFFREADER", 4, 0, (uint64_t)"ssftriff_reader_GetChunkData : Begin (%p, %u, %p)", a6, a7, a8, a1);
      v16 = *(_QWORD *)(a1 + 88);
      v17 = *(unsigned int *)(a1 + 104);
      if (v16
        && (v18 = *(_DWORD *)(a1 + 96), v17 >= v18)
        && (v17 + a2) <= *(_DWORD *)(a1 + 100))
      {
        v8 = 0;
      }
      else
      {
        v8 = ssftriff_loc_DataMap(a1, v17, a2, a1 + 56, v12, v13, v14, v15);
        if ((v8 & 0x80000000) != 0)
        {
          v19 = 0;
LABEL_14:
          *a3 = v19;
          log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"RIFFREADER", 4, 0, (uint64_t)"ssftriff_reader_GetChunkData : End (%x, %p)", v13, v14, v15, v8);
          return v8;
        }
        v16 = *(_QWORD *)(a1 + 88);
        LODWORD(v17) = *(_DWORD *)(a1 + 104);
        v18 = *(_DWORD *)(a1 + 96);
      }
      v19 = v16 + v17 - v18;
      goto LABEL_14;
    }
    return 2317361169;
  }
  return v8;
}

uint8x8_t ssftriff_reader_ReadFourCC(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, uint8x8_t result)
{
  int16x8_t v6;

  if (a1 && a2 && a4 + 4 <= a3 && a5)
  {
    *(_DWORD *)a5 = *(_DWORD *)(a2 + a4);
    *(_BYTE *)(a5 + 4) = 0;
    if (*(_DWORD *)(a1 + 28) == 1)
    {
      result.i32[0] = *(_DWORD *)a5;
      v6 = (int16x8_t)vmovl_u8(result);
      *(int8x8_t *)v6.i8 = veor_s8(*(int8x8_t *)v6.i8, (int8x8_t)0xA900A900A900A9);
      result = (uint8x8_t)vmovn_s16(v6);
      *(_DWORD *)a5 = result.i32[0];
    }
  }
  return result;
}

uint64_t ssftriff_reader_FindChunk(uint64_t a1, const char *a2, int a3, unsigned int *a4, _QWORD *a5)
{
  uint64_t v5;
  unsigned int Size;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t ChunkData;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  BOOL v30;
  unsigned int v32;
  uint64_t *v33;
  char __s1[4];
  char v35;
  uint64_t v36;

  v36 = 0;
  v33 = 0;
  v5 = 2317361159;
  if (a1)
  {
    if (a4)
    {
      Size = vector_GetSize(*(_QWORD *)(a1 + 48));
      if (Size)
      {
        v15 = Size;
        v35 = 0;
        *(_DWORD *)__s1 = 0;
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"RIFFREADER", 4, 0, (uint64_t)"ssftriff_reader_FindChunk : Begin (%p, %s, %d)", v12, v13, v14, a1);
        if (vector_ObjClone(*(__int128 **)(a1 + 48), &v33))
        {
          v20 = *(_DWORD *)(a1 + 104);
          switch(a3)
          {
            case 0:
              *(_DWORD *)(a1 + 104) = 12;
              if (v15 >= 2)
              {
                do
                {
                  vector_StackPop(*(_QWORD *)(a1 + 48));
                  --v15;
                }
                while (v15 > 1);
              }
              goto LABEL_18;
            case 1:
              if (v15 == 1)
                goto LABEL_18;
              if (!vector_GetElemAt(*(_QWORD *)(a1 + 48), 1u, &v36))
              {
LABEL_25:
                LODWORD(ChunkData) = -1977606136;
                v21 = 27013;
LABEL_26:
                log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"RIFFREADER", v21, "%s%s", v16, v17, v18, v19, "chunk");
                goto LABEL_27;
              }
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(v36 + 12);
              do
              {
                vector_StackPop(*(_QWORD *)(a1 + 48));
                --v15;
              }
              while (v15 > 1);
              while (1)
              {
LABEL_18:
                ChunkData = ssftriff_reader_OpenChunk(a1, __s1, a4, 0, v16, v17, v18, v19);
                if ((ChunkData & 0x80000000) != 0)
                  goto LABEL_27;
                if (!strcmp(__s1, a2))
                  break;
                v28 = ssftriff_reader_CloseChunk(a1);
                if (v28 < 0)
                {
                  LODWORD(ChunkData) = v28;
LABEL_27:
                  v30 = a5 != 0;
                  goto LABEL_28;
                }
              }
              if (!a5
                || (ChunkData = ssftriff_reader_GetChunkData(a1, *a4, a5, v23, v24, v25, v26, v27),
                    (ChunkData & 0x80000000) == 0))
              {
                vector_ObjClose((uint64_t)v33);
                v29 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
                goto LABEL_36;
              }
              v30 = 1;
LABEL_28:
              if ((ChunkData & 0x1FFF) == 0xA)
                ChunkData = ChunkData;
              else
                ChunkData = 2317361172;
              if (v33)
              {
                vector_ObjClose(*(_QWORD *)(a1 + 48));
                *(_QWORD *)(a1 + 48) = v33;
                *(_DWORD *)(a1 + 104) = v20;
              }
              *a4 = 0;
              if (v30)
                *a5 = 0;
              v29 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
LABEL_36:
              log_OutText(v29, (uint64_t)"RIFFREADER", 4, 0, (uint64_t)"ssftriff_reader_FindChunk : End (%x, %u, %p)", v17, v18, v19, ChunkData);
              v5 = ChunkData;
              break;
            case 2:
              if (!vector_StackTop(*(_QWORD *)(a1 + 48), &v36))
                goto LABEL_25;
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(v36 + 8);
              goto LABEL_18;
            case 3:
              goto LABEL_18;
            default:
              v21 = 27014;
              LODWORD(ChunkData) = -1977606137;
              goto LABEL_26;
          }
        }
        else
        {
          log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"RIFFREADER", 27000, 0, v16, v17, v18, v19, v32);
          return 2317361162;
        }
      }
    }
  }
  return v5;
}

uint64_t ssftriff_reader_ReadStringZ(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, _BYTE *__dst, unsigned int *a6)
{
  uint64_t result;
  _BYTE *v9;
  unsigned int v10;
  _BYTE *v11;
  unsigned int v12;
  uint64_t v13;

  result = 2317361159;
  if (a1)
  {
    if (a2)
    {
      if (a4 <= a3)
      {
        if (a6)
        {
          v9 = __dst;
          v10 = *a6;
          if (__dst || !v10)
          {
            v11 = (_BYTE *)(a2 + a4);
            if (*(_DWORD *)(a1 + 28) == 1)
            {
              v12 = 0;
              while (v11[v12] != 169)
              {
                ++v12;
                if (a4 + v12 > a3)
                  return 2317361156;
              }
            }
            else
            {
              v12 = 0;
              while (v11[v12])
              {
                ++v12;
                if (a4 + v12 > a3)
                  return 2317361156;
              }
            }
            if (v12 + 1 <= v10)
            {
              v13 = v12;
              memcpy(__dst, v11, v12);
              result = 0;
              v9[v12] = 0;
              if (*(_DWORD *)(a1 + 28) == 1 && v12 != 0)
              {
                do
                {
                  *v9++ ^= 0xA9u;
                  --v13;
                }
                while (v13);
                result = 0;
              }
            }
            else
            {
              result = 2317361161;
              if (v10)
                *__dst = 0;
            }
            *a6 = v12 + 1;
          }
        }
      }
    }
  }
  return result;
}

uint64_t ssftriff_reader_CloseChunk(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v1 = 2317361152;
  v16 = 0;
  if (!a1)
    return 2317361159;
  v7 = vector_StackTop(*(_QWORD *)(a1 + 48), &v16);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
  if (v7)
  {
    log_OutText(v8, (uint64_t)"RIFFREADER", 4, 0, (uint64_t)"ssftriff_reader_CloseChunk : Begin (%p, %s)", v4, v5, v6, a1);
    v9 = *(_DWORD *)(v16 + 12);
    *(_DWORD *)(a1 + 104) = v9;
    v10 = *(unsigned __int16 *)(a1 + 32);
    if (v9 % v10)
      *(_DWORD *)(a1 + 104) = v9 - v9 % v10 + v10;
    if (vector_StackPop(*(_QWORD *)(a1 + 48)))
    {
      v1 = 0;
    }
    else
    {
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"RIFFREADER", 27016, "%s%s", v11, v12, v13, v14, "file");
      v1 = 2317361160;
    }
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"RIFFREADER", 4, 0, (uint64_t)"ssftriff_reader_CloseChunk : End (%x)", v12, v13, v14, v1);
  }
  else
  {
    log_OutPublic(v8, (uint64_t)"RIFFREADER", 27015, "%s%s", v3, v4, v5, v6, "file");
  }
  return v1;
}

uint64_t ssftriff_reader_ObjClose(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (!a1)
    return 2317361159;
  v9 = a1[2];
  log_OutText(*(_QWORD *)(v9 + 32), (uint64_t)"RIFFREADER", 4, 0, (uint64_t)"ssftriff_reader_ObjClose : Begin (%p)", a6, a7, a8, (uint64_t)a1);
  v20 = ssftriff_reader_loc_DataClose((uint64_t)(a1 + 7), v10, v11, v12, v13, v14, v15, v16);
  v21 = a1[5];
  if (v21)
    heap_Free(*(_QWORD **)(a1[2] + 8), v21);
  v22 = a1[6];
  if (v22)
    vector_ObjClose(v22);
  if ((v20 & 0x80000000) == 0)
    heap_Free(*(_QWORD **)(a1[2] + 8), (uint64_t)a1);
  log_OutText(*(_QWORD *)(v9 + 32), (uint64_t)"RIFFREADER", 4, 0, (uint64_t)"ssftriff_reader_ObjClose : End (%x)", v17, v18, v19, v20);
  return v20;
}

uint64_t ssftriff_loc_DataMap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v27;

  v9 = a3;
  if (a3 <= 0x20)
    v12 = 32;
  else
    v12 = a3;
  v27 = v12;
  if (*(_DWORD *)(a4 + 8))
  {
    LODWORD(v13) = 0;
    *(_DWORD *)(a4 + 8) = 0;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
  }
  else if (*(_QWORD *)(a4 + 32))
  {
    v13 = ssftriff_loc_DataUnmap(*(_QWORD *)(a1 + 16), (_QWORD *)a4, a3, a4, a5, a6, a7, a8);
    if ((v13 & 0x80000000) != 0)
      return v13;
  }
  else
  {
    LODWORD(v13) = 0;
  }
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"RIFFREADER", 3, 0, (uint64_t)"Map offset %u, %u bytes", a6, a7, a8, a2);
  v20 = *(_DWORD *)(a1 + 24);
  if (v20 != 4)
  {
    if (v20 != 1)
    {
      if (v20)
      {
        v13 = 2317361153;
        goto LABEL_31;
      }
      v21 = *(_QWORD *)(a4 + 16);
      if (v21)
        goto LABEL_12;
      v22 = brk_DataOpen(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24));
      if ((v22 & 0x80000000) == 0)
      {
        v21 = *(_QWORD *)(a4 + 16);
LABEL_12:
        v23 = brk_DataMapEx(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), v21, a2, (uint64_t)&v27, a4 + 32);
        goto LABEL_25;
      }
LABEL_30:
      v13 = v22;
      goto LABEL_31;
    }
    v24 = *(_QWORD *)(a4 + 24);
    if (!v24)
    {
      v22 = osspi_DataOpen(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 64), *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(a1 + 40), (uint64_t *)(a4 + 24));
      if ((v22 & 0x80000000) != 0)
        goto LABEL_30;
      v24 = *(_QWORD *)(a4 + 24);
    }
    v23 = osspi_DataMap(v24, a2, &v27, (_QWORD *)(a4 + 32));
LABEL_25:
    v13 = v23;
    if ((v23 & 0x80000000) == 0)
      goto LABEL_26;
    goto LABEL_31;
  }
  if (v9 + a2 <= *(_DWORD *)(a4 + 44))
    v13 = v13;
  else
    v13 = 2317361156;
  if ((v13 & 0x80000000) == 0)
  {
LABEL_26:
    if (v27 < v9)
    {
      ssftriff_loc_DataUnmap(*(_QWORD *)(a1 + 16), (_QWORD *)a4, v14, v15, v16, v17, v18, v19);
      v13 = 2317361156;
    }
  }
LABEL_31:
  if (*(_QWORD *)(a4 + 16) || *(_QWORD *)(a4 + 24))
  {
    if ((v13 & 0x80000000) != 0)
    {
      *(_QWORD *)(a4 + 32) = 0;
      *(_QWORD *)(a4 + 40) = 0;
    }
    else
    {
      v25 = v27 + a2;
      *(_DWORD *)(a4 + 40) = a2;
      *(_DWORD *)(a4 + 44) = v25;
    }
  }
  return v13;
}

uint64_t ssftriff_reader_DetachChunkData(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  unsigned int v26;
  uint64_t v27;

  v27 = 0;
  v8 = 2317361159;
  if (a1 && a2 && a3)
  {
    if (*(_QWORD *)(a1 + 88))
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"RIFFREADER", 4, 0, (uint64_t)"ssftriff_reader_DetachChunkData : Begin (%p)", a6, a7, a8, a1);
      v12 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 48);
      *a2 = v12;
      if (v12)
      {
        if (vector_StackTop(*(_QWORD *)(a1 + 48), &v27))
        {
          if (!*(_DWORD *)(a1 + 64)
            && *(_QWORD *)(a1 + 88)
            && *(_DWORD *)(a1 + 96) == *(_DWORD *)(a1 + 104)
            && *(_DWORD *)(a1 + 100) == *(_DWORD *)(v27 + 12))
          {
            v8 = 0;
            goto LABEL_9;
          }
          v8 = ssftriff_loc_DataMap(a1, *(unsigned int *)(a1 + 104), (*(_DWORD *)(v27 + 12) - *(_DWORD *)(a1 + 104)), a1 + 56, v17, v18, v19, v20);
          if ((v8 & 0x80000000) == 0)
          {
LABEL_9:
            v21 = *(_DWORD *)(a1 + 24);
            if (v21 == 1)
            {
              osspi_DataFreeze(*(_QWORD **)(a1 + 80));
            }
            else if (!v21)
            {
              brk_DataFreeze(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), *(_QWORD *)(a1 + 72));
            }
            v22 = (_OWORD *)*a2;
            v23 = *(_OWORD *)(a1 + 56);
            v24 = *(_OWORD *)(a1 + 88);
            v22[1] = *(_OWORD *)(a1 + 72);
            v22[2] = v24;
            *v22 = v23;
            if (*(_DWORD *)(a1 + 24) != 4)
              *(_DWORD *)(a1 + 64) = 1;
            *a3 = *(_QWORD *)(*a2 + 32);
LABEL_26:
            log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"RIFFREADER", 4, 0, (uint64_t)"ssftriff_reader_DetachChunkData : End (%x, %p)", v18, v19, v20, v8);
            return v8;
          }
        }
        else
        {
          log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"RIFFREADER", 27013, "%s%s", v17, v18, v19, v20, "file");
          v8 = 2317361152;
        }
      }
      else
      {
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"RIFFREADER", 27000, 0, v13, v14, v15, v16, v26);
        v8 = 2317361162;
      }
      if (*a2)
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), *a2);
        *a2 = 0;
      }
      goto LABEL_26;
    }
    return 2317361169;
  }
  return v8;
}

uint64_t ssftriff_reader_ReleaseChunkData(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v8 = 2317361159;
  if (a1 && a1[4])
  {
    v10 = *a1;
    log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"RIFFREADER", 4, 0, (uint64_t)"ssftriff_reader_ReleaseChunkData : Begin (%p)", a6, a7, a8, (uint64_t)a1);
    v8 = ssftriff_reader_loc_DataClose((uint64_t)a1, v11, v12, v13, v14, v15, v16, v17);
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)a1);
    log_OutText(*(_QWORD *)(v10 + 32), (uint64_t)"RIFFREADER", 4, 0, (uint64_t)"ssftriff_reader_ReleaseChunkData : End (%x)", v18, v19, v20, v8);
  }
  return v8;
}

uint64_t ssftriff_reader_ReadStringW(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, _BYTE *__dst, unsigned int *a6)
{
  uint64_t result;
  _BYTE *v9;
  unsigned int v10;
  size_t v11;
  size_t v12;

  result = 2317361159;
  if (a1)
  {
    if (a2)
    {
      if (a4 + 2 <= a3)
      {
        if (a6)
        {
          v9 = __dst;
          v10 = *a6;
          if (__dst || !v10)
          {
            v11 = *(unsigned __int16 *)(a2 + a4);
            if (a4 + 2 + v11 <= a3)
            {
              if (v10 <= v11)
              {
                result = 2317361161;
                if (v10)
                  *__dst = 0;
              }
              else
              {
                memcpy(__dst, (const void *)(a2 + a4 + 2), v11);
                result = 0;
                v9[v11] = 0;
                if (*(_DWORD *)(a1 + 28) == 1 && (_DWORD)v11)
                {
                  v12 = v11;
                  do
                  {
                    *v9++ ^= 0xA9u;
                    --v12;
                  }
                  while (v12);
                  result = 0;
                }
              }
            }
            else
            {
              result = 2317361156;
            }
            *a6 = v11 + 1;
          }
        }
      }
    }
  }
  return result;
}

uint64_t ssftriff_reader_Seek(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v16;

  v3 = 2317361159;
  v16 = 0;
  if (a1)
  {
    if (vector_StackTop(*(_QWORD *)(a1 + 48), &v16))
      v10 = 0;
    else
      v10 = 2317361169;
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"RIFFREADER", 4, 0, (uint64_t)"ssftriff_reader_Seek : Begin (%p, %d, %d, %s)", v7, v8, v9, a1);
    if (a3 == 1)
    {
      v14 = *(_DWORD *)(a1 + 104) + a2;
      if (v14 < *(_DWORD *)(v16 + 8) || v14 > *(_DWORD *)(v16 + 12))
        goto LABEL_15;
      *(_DWORD *)(a1 + 104) = v14;
    }
    else
    {
      if (a3 || (a2 & 0x80000000) != 0 || *(_DWORD *)(v16 + 8) > a2 || *(_DWORD *)(v16 + 12) < a2)
        goto LABEL_15;
      *(_DWORD *)(a1 + 104) = a2;
    }
    v3 = v10;
LABEL_15:
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"RIFFREADER", 4, 0, (uint64_t)"ssftriff_reader_Seek : End (%x)", v11, v12, v13, v3);
  }
  return v3;
}

uint64_t ssftriff_reader_GetPosition(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 104);
  return result;
}

uint64_t ssftriff_loc_DataUnmap(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t result;
  uint64_t v12;

  v10 = a2 + 4;
  log_OutText(*(_QWORD *)(a1 + 32), (uint64_t)"RIFFREADER", 3, 0, (uint64_t)"Unmap %p (%u - %u)", a6, a7, a8, a2[4]);
  result = 0;
  if (!*((_DWORD *)v10 - 6))
  {
    v12 = a2[2];
    if (v12)
    {
      result = brk_DataUnmap(*(_QWORD *)(a1 + 24), v12, *v10);
    }
    else
    {
      result = a2[3];
      if (result)
        result = osspi_DataUnmap(result, *v10);
    }
  }
  if (a2[2] || a2[3])
  {
    *v10 = 0;
    v10[1] = 0;
  }
  return result;
}

uint64_t stringmap_reader_ObjOpen(_WORD *a1, uint64_t a2, const char *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _WORD *v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  _WORD *v55;
  unsigned int v56;
  int v57;
  unsigned __int8 v58;
  uint64_t v59;

  v59 = 0;
  v6 = 2317361156;
  v56 = 0;
  v55 = 0;
  result = 2317361159;
  if (a3)
  {
    if (a4)
    {
      if (a5)
      {
        v58 = 0;
        v57 = 0;
        *a5 = 0;
        result = InitRsrcFunction(a1, a2, &v59);
        if ((result & 0x80000000) == 0)
        {
          log_OutText(*(_QWORD *)(v59 + 32), (uint64_t)"STRINGMAPREADER", 4, 0, (uint64_t)"stringmap_reader_ObjOpen : Begin (%s, %p)", v12, v13, v14, (uint64_t)a3);
          v15 = (_QWORD *)heap_Calloc(*(_QWORD **)(v59 + 8), 1, 88);
          if (!v15)
          {
            log_OutPublic(*(_QWORD *)(v59 + 32), (uint64_t)"STRINGMAPREADER", 28000, 0, v16, v17, v18, v19, v54);
            return 2317361162;
          }
          v20 = v15;
          *v15 = a1;
          v15[1] = a2;
          v21 = v59;
          v15[2] = v59;
          v22 = *(_QWORD *)(v21 + 8);
          v23 = strlen(a3);
          v24 = (char *)heap_Alloc(v22, (v23 + 1));
          v20[3] = v24;
          if (v24)
          {
            strcpy(v24, a3);
            v33 = ssftriff_reader_OpenChunk(a4, &v57, &v56, &v55, v29, v30, v31, v32);
            if ((v33 & 0x80000000) == 0)
            {
              if (v57 ^ 0x434D5453 | v58)
              {
                v41 = 28001;
LABEL_15:
                v42 = *(_QWORD *)(v59 + 32);
LABEL_16:
                log_OutPublic(v42, (uint64_t)"STRINGMAPREADER", v41, "%s%s%s%s", v37, v38, v39, v40, "file");
                ssftriff_reader_CloseChunk(a4);
                goto LABEL_17;
              }
              if (v56 <= 9)
              {
                v41 = 28002;
                goto LABEL_15;
              }
              v46 = v55;
              *((_WORD *)v20 + 16) = *v55;
              v55 = v46 + 1;
              *((_WORD *)v20 + 18) = v46[1];
              v55 = v46 + 2;
              *((_WORD *)v20 + 19) = v46[2];
              v55 = v46 + 3;
              *((_WORD *)v20 + 20) = v46[3];
              v47 = v46[4];
              v55 = v46 + 4;
              *((_WORD *)v20 + 32) = v47;
              ssftriff_reader_CloseChunk(a4);
              v52 = ssftriff_reader_OpenChunk(a4, &v57, &v56, &v55, v48, v49, v50, v51);
              if ((v52 & 0x80000000) == 0)
              {
                if (v57 ^ 0x464D5453 | v58)
                {
                  v41 = 28001;
LABEL_25:
                  v42 = *(_QWORD *)(v59 + 32);
                  goto LABEL_16;
                }
                if (v56 < (*((unsigned __int16 *)v20 + 19) + *((unsigned __int16 *)v20 + 18))
                         * *((unsigned __int16 *)v20 + 20))
                {
                  v41 = 28002;
                  goto LABEL_25;
                }
                if ((ssftriff_reader_DetachChunkData(a4, v20 + 7, &v55, v36, v37, v38, v39, v40) & 0x80000000) == 0)
                  v20[6] = v55;
                ssftriff_reader_CloseChunk(a4);
                if (!*((_WORD *)v20 + 32))
                  goto LABEL_39;
                v52 = ssftriff_reader_OpenChunk(a4, &v57, &v56, &v55, v53, v43, v44, v45);
                if ((v52 & 0x80000000) == 0)
                {
                  if (v57 ^ 0x524D5453 | v58)
                  {
                    v41 = 28001;
LABEL_35:
                    v42 = *(_QWORD *)(v59 + 32);
                    goto LABEL_16;
                  }
                  if (v56 < (*((unsigned __int16 *)v20 + 19) + *((unsigned __int16 *)v20 + 18))
                           * *((unsigned __int16 *)v20 + 32))
                  {
                    v41 = 28002;
                    goto LABEL_35;
                  }
                  if ((ssftriff_reader_DetachChunkData(a4, v20 + 10, &v55, v36, v37, v38, v39, v40) & 0x80000000) == 0)
                    v20[9] = v55;
                  ssftriff_reader_CloseChunk(a4);
LABEL_39:
                  *a5 = v20;
                  v6 = v52;
                  goto LABEL_18;
                }
              }
              v6 = v52;
              goto LABEL_17;
            }
            v6 = v33;
          }
          else
          {
            log_OutPublic(*(_QWORD *)(v59 + 32), (uint64_t)"STRINGMAPREADER", 28000, 0, v25, v26, v27, v28, v54);
            v6 = 2317361162;
          }
LABEL_17:
          stringmap_reader_ObjClose(v20, v34, v35, v36, v37, v38, v39, v40);
LABEL_18:
          log_OutText(*(_QWORD *)(v59 + 32), (uint64_t)"STRINGMAPREADER", 4, 0, (uint64_t)"stringmap_reader_ObjOpen : End (%x, %p)", v43, v44, v45, v6);
          return v6;
        }
      }
    }
  }
  return result;
}

uint64_t stringmap_reader_ObjClose(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  uint64_t v23;

  if (!a1)
    return 2317361159;
  v9 = a1[2];
  log_OutText(*(_QWORD *)(v9 + 32), (uint64_t)"STRINGMAPREADER", 4, 0, (uint64_t)"stringmap_reader_ObjClose : Begin (%p)", a6, a7, a8, (uint64_t)a1);
  v17 = (_QWORD *)a1[7];
  if (v17)
  {
    v18 = ssftriff_reader_ReleaseChunkData(v17, v10, v11, v12, v13, v14, v15, v16);
    v19 = v18 & (v18 >> 31);
  }
  else
  {
    v19 = 0;
  }
  v20 = (_QWORD *)a1[10];
  if (v20)
  {
    v21 = ssftriff_reader_ReleaseChunkData(v20, v10, v11, v12, v13, v14, v15, v16);
    if (v21 >= 0 || (int)v19 <= -1)
      v19 = v19;
    else
      v19 = v21;
  }
  v23 = a1[3];
  if (v23)
    heap_Free(*(_QWORD **)(a1[2] + 8), v23);
  if ((v19 & 0x80000000) == 0)
    heap_Free(*(_QWORD **)(v9 + 8), (uint64_t)a1);
  log_OutText(*(_QWORD *)(v9 + 32), (uint64_t)"STRINGMAPREADER", 4, 0, (uint64_t)"stringmap_reader_ObjClose : End (%x)", v14, v15, v16, v19);
  return v19;
}

uint64_t stringmap_reader_Map(uint64_t a1, char *__s2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = 2317361159;
  if (a1 && __s2 && a3)
  {
    *a3 = 0;
    v5 = *(_QWORD *)(a1 + 48);
    if (v5)
    {
      v3 = 2317361153;
      if (!*(_DWORD *)(a1 + 32))
        return stringmap_loc_Map(0, *(unsigned __int16 *)(a1 + 40), v5, *(unsigned __int16 *)(a1 + 36), *(_WORD *)(a1 + 38), __s2, a3);
    }
    else
    {
      return 2317361153;
    }
  }
  return v3;
}

uint64_t stringmap_loc_Map(int a1, int a2, uint64_t a3, unsigned int a4, __int16 a5, char *__s2, uint64_t *a7)
{
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  if (!a2)
    goto LABEL_16;
  v12 = 0;
  v13 = a2 - 1;
  v14 = (unsigned __int16)(a5 + a4);
  while (1)
  {
    v15 = v13 + v12;
    if (v13 + v12 < 0 != __OFADD__(v13, v12))
      ++v15;
    v16 = v15 >> 1;
    v17 = (v15 >> 1) * v14;
    v18 = v17;
    if (a1)
    {
      v19 = LH_wcscmp((_WORD *)(a3 + 2 * v17), (unsigned __int16 *)__s2);
      if (v19 < 0)
        goto LABEL_10;
    }
    else
    {
      v19 = strcmp((const char *)(a3 + v17), __s2);
      if (v19 < 0)
      {
LABEL_10:
        v12 = v16 + 1;
        goto LABEL_11;
      }
    }
    if (!v19)
      break;
    v13 = v16 - 1;
LABEL_11:
    if (v12 > v13)
      goto LABEL_16;
  }
  v20 = a3 + 2 * v18 + 2 * a4;
  if (!a1)
    v20 = a3 + v18 + a4;
  *a7 = v20;
LABEL_16:
  if (*a7)
    return 0;
  else
    return 2317361172;
}

uint64_t stringmap_reader_ReverseMap(uint64_t a1, char *__s2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = 2317361159;
  if (a1 && __s2 && a3)
  {
    *a3 = 0;
    v5 = *(_QWORD *)(a1 + 72);
    if (v5)
    {
      v3 = 2317361153;
      if (!*(_DWORD *)(a1 + 32))
        return stringmap_loc_Map(0, *(unsigned __int16 *)(a1 + 64), v5, *(unsigned __int16 *)(a1 + 38), *(_WORD *)(a1 + 36), __s2, a3);
    }
    else
    {
      return 2317361153;
    }
  }
  return v3;
}

uint64_t stringmap_reader_WReverseMap(uint64_t a1, char *__s2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = 2317361159;
  if (a1 && __s2 && a3)
  {
    *a3 = 0;
    v5 = *(_QWORD *)(a1 + 72);
    if (v5)
    {
      v3 = 2317361153;
      if (*(_DWORD *)(a1 + 32) == 1)
        return stringmap_loc_Map(1, *(unsigned __int16 *)(a1 + 64), v5, *(unsigned __int16 *)(a1 + 38), *(_WORD *)(a1 + 36), __s2, a3);
    }
    else
    {
      return 2317361153;
    }
  }
  return v3;
}

uint64_t stringmap_loc_MapToken(int a1, int a2, uint64_t a3, unsigned int a4, __int16 a5, unsigned __int16 *a6, unsigned __int16 *a7, uint64_t *a8)
{
  int v13;
  unsigned __int16 v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned __int16 v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t result;
  int v28;
  unsigned __int16 *v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unsigned __int16 *v35;
  int v37;
  int v39;

  v39 = 0;
  v13 = a2 - 1;
  v14 = a5 + a4;
  v37 = a2 - 1;
  if (a2)
  {
    v15 = 0;
    while (1)
    {
      v16 = v13 + v15;
      if (v13 + v15 < 0 != __OFADD__(v13, v15))
        ++v16;
      LODWORD(v17) = v16 >> 1;
      v18 = stringmap_loc_ElemCompare(a1, a3, v14, v16 >> 1, a6, &v39);
      if (v18)
        break;
      if (v39 < 0)
        v15 = v17 + 1;
      if (v39 >= 1)
        v13 = v17 - 1;
      if (v15 > v13)
      {
        v19 = v15;
        goto LABEL_13;
      }
    }
LABEL_20:
    v23 = v18;
    v34 = a8;
    v35 = a7;
    if ((int)v17 < 1)
    {
      v25 = v17;
    }
    else
    {
      v24 = v17 + 1;
      v25 = v17;
      do
      {
        if (!stringmap_loc_ElemsCompare(a1, a3, v14, v25, v24 - 2, &v39))
          break;
        v26 = stringmap_loc_ElemCompare(a1, a3, v14, v24 - 2, a6, &v39);
        if (v26 > v23)
        {
          v25 = v24 - 2;
          v23 = v26;
        }
        --v24;
      }
      while (v24 > 1);
    }
    if ((int)v17 >= v37)
    {
      v29 = v35;
    }
    else
    {
      v28 = v17 + 1;
      v29 = v35;
      do
      {
        if (!stringmap_loc_ElemsCompare(a1, a3, v14, v25, v28, &v39))
          break;
        v30 = stringmap_loc_ElemCompare(a1, a3, v14, v28, a6, &v39);
        if (v30 > v23)
        {
          v25 = v28;
          v23 = v30;
        }
        ++v28;
      }
      while (a2 != v28);
    }
    result = 0;
    v31 = v25 * v14;
    v32 = a3 + v31 + a4;
    v33 = a3 + 2 * v31 + 2 * a4;
    if (!a1)
      v33 = v32;
    *v34 = v33;
    *v29 = v23;
  }
  else
  {
    v19 = 0;
LABEL_13:
    v20 = (v19 - 1) * v14;
    while (1)
    {
      v17 = v19 - 1;
      if (v19 < 1)
        return 2317361172;
      if (a1)
      {
        v21 = *(unsigned __int16 *)(a3 + 2 * v20);
        v22 = *a6;
      }
      else
      {
        v21 = *(unsigned __int8 *)(a3 + v20);
        v22 = *(unsigned __int8 *)a6;
      }
      if (v21 != v22)
        return 2317361172;
      v18 = stringmap_loc_ElemCompare(a1, a3, v14, (int)v19 - 1, a6, &v39);
      v20 -= v14;
      v19 = v17;
      if (v18)
        goto LABEL_20;
    }
  }
  return result;
}

uint64_t stringmap_reader_WMapToken(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;

  v4 = 2317361159;
  if (a1 && a2 && a3 && a4)
  {
    *a3 = 0;
    *a4 = 0;
    v6 = *(_QWORD *)(a1 + 48);
    if (v6)
    {
      v4 = 2317361153;
      if (*(_DWORD *)(a1 + 32) == 1)
        return stringmap_loc_MapToken(1, *(unsigned __int16 *)(a1 + 40), v6, *(unsigned __int16 *)(a1 + 36), *(_WORD *)(a1 + 38), a2, a3, a4);
    }
    else
    {
      return 2317361153;
    }
  }
  return v4;
}

uint64_t stringmap_reader_MapGetRawData(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = 2317361159;
  if (a1 && a2 && a3)
  {
    *a2 = 0;
    *a3 = 0;
    v5 = *(_QWORD *)(a1 + 48);
    if (v5)
    {
      result = 2317361153;
      if (!*(_DWORD *)(a1 + 32))
      {
        result = 0;
        *a2 = (*(unsigned __int16 *)(a1 + 38) + *(unsigned __int16 *)(a1 + 36)) * *(unsigned __int16 *)(a1 + 40);
        *a3 = v5;
      }
    }
    else
    {
      return 2317361153;
    }
  }
  return result;
}

uint64_t stringmap_loc_ElemCompare(int a1, uint64_t a2, int a3, int a4, unsigned __int16 *a5, int *a6)
{
  uint64_t v6;

  v6 = a3 * a4;
  if (a1)
    return stringmap_loc_WCompare((_WORD *)(a2 + 2 * v6), a5, a6);
  else
    return stringmap_loc_Compare((unsigned __int8 *)(a2 + v6), (unsigned __int8 *)a5, a6);
}

uint64_t stringmap_loc_ElemsCompare(int a1, uint64_t a2, int a3, int a4, int a5, int *a6)
{
  uint64_t v6;
  uint64_t v7;

  v6 = a3 * (uint64_t)a4;
  v7 = a3 * (uint64_t)a5;
  if (a1)
    return stringmap_loc_WCompare((_WORD *)(a2 + 2 * v6), (unsigned __int16 *)(a2 + 2 * v7), a6);
  else
    return stringmap_loc_Compare((unsigned __int8 *)(a2 + v6), (unsigned __int8 *)(a2 + v7), a6);
}

uint64_t stringmap_loc_WCompare(_WORD *a1, unsigned __int16 *a2, _DWORD *a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v6;
  _WORD *v7;
  unsigned __int16 *v8;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = (unsigned __int16)*a1;
  v4 = *a2;
  if (*a1)
    v5 = v3 == v4;
  else
    v5 = 0;
  if (v5)
  {
    v8 = a2 + 1;
    v7 = a1;
    do
    {
      v9 = (unsigned __int16)v7[1];
      ++v7;
      v3 = v9;
      v11 = *v8++;
      v10 = v11;
      if (v3)
        v12 = v3 == v10;
      else
        v12 = 0;
    }
    while (v12);
    v6 = v3 - v10;
  }
  else
  {
    v6 = v3 - v4;
    LODWORD(v7) = (_DWORD)a1;
  }
  *a3 = v6;
  v13 = ((_DWORD)v7 - (_DWORD)a1) >> 1;
  if (v3)
    return 0;
  else
    return (unsigned __int16)v13;
}

uint64_t stringmap_loc_Compare(unsigned __int8 *a1, unsigned __int8 *a2, int *a3)
{
  _BYTE *v3;
  int v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned __int16 v11;

  v3 = a1;
  v4 = *a1 - *a2;
  *a3 = v4;
  if (!v4)
  {
    v5 = a2 + 1;
    v3 = a1;
    do
    {
      if (!*v3)
        break;
      v7 = *++v3;
      v6 = v7;
      v8 = *v5++;
      v9 = v6 - v8;
      *a3 = v9;
    }
    while (!v9);
  }
  v10 = *v3;
  v11 = (_WORD)v3 - (_WORD)a1;
  if (v10)
    return 0;
  return v11;
}

uint64_t InitRsrcFunction(_WORD *a1, int a2, _QWORD *a3)
{
  uint64_t NullHandle;
  int v7;
  uint64_t v8;
  uint64_t result;

  NullHandle = safeh_GetNullHandle();
  if (safeh_HandlesEqual((uint64_t)a1, a2, NullHandle, v7))
  {
    v8 = 0;
    goto LABEL_3;
  }
  v8 = 2170560520;
  result = safeh_HandleCheck((uint64_t)a1, a2, 7777, 408);
  if ((result & 0x80000000) != 0)
  {
    if ((result & 0x1FFF) == 8)
      v8 = 2170560520;
    else
      v8 = result;
    goto LABEL_3;
  }
  *a3 = a1;
  if (!a1 || *a1 != 7777)
  {
LABEL_3:
    *a3 = &g_NullResource;
    return v8;
  }
  return result;
}

uint64_t rsrc_Open(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;

  v5 = 2170560518;
  if (a5)
  {
    v11 = heap_Calloc(a1, 408, 1);
    if (v11)
    {
      v5 = 0;
      *(_QWORD *)a5 = v11;
      *(_DWORD *)(a5 + 8) = 7777;
      *(_WORD *)v11 = 7777;
      *(_QWORD *)(v11 + 8) = a1;
      *(_QWORD *)(v11 + 16) = a2;
      *(_QWORD *)(v11 + 24) = a3;
      *(_QWORD *)(v11 + 32) = a4;
    }
    else
    {
      FreeRsrc(0);
      *(_QWORD *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
      return 2170560522;
    }
  }
  return v5;
}

_QWORD *FreeRsrc(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;

  if (result)
  {
    v1 = (uint64_t)result;
    v2 = (_QWORD *)result[1];
    *(_OWORD *)(v1 + 32) = 0u;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)(v1 + 64) = 0u;
    *(_OWORD *)(v1 + 80) = 0u;
    *(_OWORD *)(v1 + 96) = 0u;
    *(_OWORD *)(v1 + 112) = 0u;
    *(_OWORD *)(v1 + 128) = 0u;
    *(_OWORD *)(v1 + 144) = 0u;
    *(_OWORD *)(v1 + 160) = 0u;
    *(_OWORD *)(v1 + 176) = 0u;
    *(_OWORD *)(v1 + 192) = 0u;
    *(_OWORD *)(v1 + 208) = 0u;
    *(_OWORD *)(v1 + 224) = 0u;
    *(_OWORD *)(v1 + 240) = 0u;
    *(_OWORD *)(v1 + 256) = 0u;
    *(_OWORD *)(v1 + 272) = 0u;
    *(_OWORD *)(v1 + 288) = 0u;
    *(_OWORD *)(v1 + 304) = 0u;
    *(_OWORD *)(v1 + 320) = 0u;
    *(_OWORD *)(v1 + 336) = 0u;
    *(_OWORD *)(v1 + 352) = 0u;
    *(_OWORD *)(v1 + 368) = 0u;
    *(_OWORD *)(v1 + 384) = 0u;
    *(_QWORD *)(v1 + 400) = 0;
    *(_OWORD *)v1 = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    return heap_Free(v2, v1);
  }
  return result;
}

uint64_t rsrc_Close(_WORD *a1, int a2)
{
  uint64_t inited;
  _QWORD *v4;

  v4 = 0;
  inited = InitRsrcFunction(a1, a2, &v4);
  if ((inited & 0x80000000) == 0)
    FreeRsrc(v4);
  return inited;
}

uint64_t Utf8_DepesLengthInBytesUtf8(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;

  if (!a2)
    return 0;
  result = 0;
  v4 = a2;
  do
  {
    v6 = *a1++;
    v5 = v6;
    if (v6 <= 0xAFuLL)
    {
      v7 = UNICODE_TO_DEPES[v5];
      if (v7 < 0x800)
        v8 = 2;
      else
        v8 = 3;
      if (v7 < 0x80)
        v9 = 1;
      else
        v9 = v8;
      result = (v9 + result);
    }
    --v4;
  }
  while (v4);
  return result;
}

uint64_t utf8_DepesToUtf8(uint64_t a1, unsigned int a2, _DWORD *a3, uint64_t a4, unsigned int a5, unsigned int *a6, _DWORD *a7)
{
  unsigned int v7;
  int v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;

  v7 = 0;
  v8 = 0;
  v9 = 0;
  LODWORD(v10) = 0;
  if (a2 && a5)
  {
    v10 = 0;
    v7 = 0;
    do
    {
      if (a7)
      {
        *a7 = v10;
        a7[1] = v7;
        a7 += 2;
      }
      v11 = *(unsigned __int8 *)(a1 + v10);
      if (v11 <= 0xAF)
      {
        v12 = UNICODE_TO_DEPES[v11];
        if (v12 < 0x800)
          v13 = 2;
        else
          v13 = 3;
        if (v12 < 0x80)
          v14 = 1;
        else
          v14 = v13;
        if (v14 + v7 > a5)
        {
          LODWORD(v10) = v10 + 1;
          *(_BYTE *)(a4 + v7) = 0;
          v8 = 1;
          v9 = -1950343159;
          goto LABEL_24;
        }
        if (v14 != 1)
        {
          if (v14 != 2)
          {
            *(_BYTE *)(a4 + v7 + 2) = v12 & 0x3F | 0x80;
            v12 >>= 6;
          }
          *(_BYTE *)(a4 + v7 + 1) = v12 & 0x3F | 0x80;
          v12 >>= 6;
        }
        *(_BYTE *)(a4 + v7) = UTF8_FIRST_BYTE_MARK[v14] | v12;
        v7 += v14;
      }
      ++v10;
    }
    while (v10 < a2 && v7 < a5);
    v8 = 0;
    v9 = 0;
    if (a3)
      goto LABEL_25;
  }
  else
  {
LABEL_24:
    if (a3)
LABEL_25:
      *a3 = v10;
  }
  if (a6)
    *a6 = v7;
  if ((_DWORD)v10 == a2)
    v15 = 1;
  else
    v15 = v8;
  if (v15)
    return v9;
  else
    return 2344624137;
}

uint64_t utf8_Utf8ToDepes(uint64_t a1, unsigned int a2, _DWORD *a3, uint64_t a4, unsigned int a5, unsigned int *a6, unsigned int *a7)
{
  unsigned int v7;
  _BOOL4 v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;

  v7 = 0;
  v8 = 0;
  v9 = 0;
  LODWORD(v10) = 0;
  if (!a2 || !a5)
  {
LABEL_39:
    if (!a3)
      goto LABEL_41;
    goto LABEL_40;
  }
  v7 = 0;
  v11 = 0;
  while (2)
  {
    v12 = *(unsigned __int8 *)(a1 + v11);
    v13 = UTF8_TRAILING_BYTES[*(unsigned __int8 *)(a1 + v11)];
    v8 = v11 + v13 <= a2;
    if (v11 + v13 > a2)
    {
      v9 = 197140487;
LABEL_38:
      *(_BYTE *)(a4 + v7) = 0;
      LODWORD(v10) = v11;
      goto LABEL_39;
    }
    if ((UTF8_BYTE_INDICATOR_TEST[v13] & v12) != UTF8_BYTE_INDICATOR[v13])
    {
      v9 = -1950342907;
      goto LABEL_38;
    }
    if (a7)
    {
      *a7 = v11;
      a7[1] = v7;
      a7 += 2;
      v12 = *(unsigned __int8 *)(a1 + v11);
    }
    v10 = v11 + 1;
    switch((int)v13)
    {
      case 0:
        goto LABEL_27;
      case 1:
        v14 = *(unsigned __int8 *)(a1 + v10);
        if ((v14 & 0xC0) != 0x80)
          goto LABEL_35;
        LODWORD(v10) = v11 + 2;
        v12 = v14 + (v12 << 6);
        goto LABEL_27;
      case 2:
        v15 = *(unsigned __int8 *)(a1 + v10);
        if (v12 == 224 && v15 < 0xA0)
          goto LABEL_35;
        if ((v15 & 0xC0) != 0x80)
          goto LABEL_35;
        v16 = *(unsigned __int8 *)(a1 + v11 + 2);
        if ((v16 & 0xC0) != 0x80)
          goto LABEL_35;
        LODWORD(v10) = v11 + 3;
        v12 = (v15 << 6) + (v12 << 12) + v16;
        goto LABEL_27;
      case 3:
        if (v12 == 240)
        {
          v17 = *(unsigned __int8 *)(a1 + v10);
          if (v17 < 0x90)
            goto LABEL_35;
        }
        else if (v12 == 244)
        {
          v17 = *(unsigned __int8 *)(a1 + v10);
          if (v17 > 0x8F)
            goto LABEL_35;
        }
        else
        {
          v17 = *(unsigned __int8 *)(a1 + v10);
        }
        if ((v17 & 0xC0) != 0x80
          || (v18 = *(unsigned __int8 *)(a1 + v11 + 2), (v18 & 0xC0) != 0x80)
          || (v19 = *(unsigned __int8 *)(a1 + v11 + 3), (v19 & 0xC0) != 0x80))
        {
LABEL_35:
          v9 = -1950342907;
          ++v11;
          goto LABEL_38;
        }
        LODWORD(v10) = v11 + 4;
        v12 = v19 + (((v17 << 6) + (v12 << 12) + v18) << 6);
LABEL_27:
        v20 = 0;
        while (v12 - UTF8_OFFSETS[v13] != UNICODE_TO_DEPES[v20])
        {
          if (++v20 == 176)
            goto LABEL_32;
        }
        *(_BYTE *)(a4 + v7++) = v20;
LABEL_32:
        v8 = 0;
        if (v10 < a2)
        {
          v11 = v10;
          v9 = 0;
          if (v7 >= a5)
            goto LABEL_39;
          continue;
        }
        v9 = 0;
        if (a3)
LABEL_40:
          *a3 = v10;
LABEL_41:
        if (a6)
          *a6 = v7;
        if ((_DWORD)v10 == a2 || v8)
          return v9;
        else
          return 2344624137;
      default:
        goto LABEL_35;
    }
  }
}

uint64_t utf8_Utf8ToUtf16(uint64_t a1, unsigned int a2, _DWORD *a3, uint64_t a4, unsigned int a5, _DWORD *a6, unsigned int *a7)
{
  _BOOL4 v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;

  v7 = 0;
  LODWORD(v8) = 0;
  if (!a2)
  {
    v9 = 0;
    LODWORD(v10) = 0;
    if (!a3)
      goto LABEL_46;
LABEL_45:
    *a3 = v10;
    goto LABEL_46;
  }
  v9 = 0;
  LODWORD(v10) = 0;
  if (!a5)
    goto LABEL_44;
  v8 = 0;
  v11 = 0;
  while (2)
  {
    v12 = *(unsigned __int8 *)(a1 + v11);
    v13 = UTF8_TRAILING_BYTES[*(unsigned __int8 *)(a1 + v11)];
    v7 = v11 + v13 <= a2;
    if (v11 + v13 > a2)
    {
      v9 = 197140487;
      goto LABEL_43;
    }
    if ((UTF8_BYTE_INDICATOR_TEST[v13] & v12) != UTF8_BYTE_INDICATOR[v13])
    {
      v9 = -1950342907;
      goto LABEL_43;
    }
    if (a7)
    {
      *a7 = v11;
      a7[1] = v11;
      a7 += 2;
      v12 = *(unsigned __int8 *)(a1 + v11);
    }
    v10 = v11 + 1;
    switch((int)v13)
    {
      case 0:
        goto LABEL_27;
      case 1:
        v14 = *(unsigned __int8 *)(a1 + v10);
        if ((v14 & 0xC0) != 0x80)
          goto LABEL_39;
        LODWORD(v10) = v11 + 2;
        v12 = v14 + (v12 << 6);
        goto LABEL_27;
      case 2:
        v15 = *(unsigned __int8 *)(a1 + v10);
        if (v12 == 224 && v15 < 0xA0)
          goto LABEL_39;
        if ((v15 & 0xC0) != 0x80)
          goto LABEL_39;
        v16 = *(unsigned __int8 *)(a1 + v11 + 2);
        if ((v16 & 0xC0) != 0x80)
          goto LABEL_39;
        LODWORD(v10) = v11 + 3;
        v12 = (v15 << 6) + (v12 << 12) + v16;
        goto LABEL_27;
      case 3:
        if (v12 == 240)
        {
          v17 = *(unsigned __int8 *)(a1 + v10);
          if (v17 < 0x90)
            goto LABEL_39;
        }
        else if (v12 == 244)
        {
          v17 = *(unsigned __int8 *)(a1 + v10);
          if (v17 > 0x8F)
            goto LABEL_39;
        }
        else
        {
          v17 = *(unsigned __int8 *)(a1 + v10);
        }
        if ((v17 & 0xC0) != 0x80
          || (v18 = *(unsigned __int8 *)(a1 + v11 + 2), (v18 & 0xC0) != 0x80)
          || (v19 = *(unsigned __int8 *)(a1 + v11 + 3), (v19 & 0xC0) != 0x80))
        {
LABEL_39:
          v9 = -1950342907;
          goto LABEL_40;
        }
        LODWORD(v10) = v11 + 4;
        v12 = v19 + (((v17 << 6) + (v12 << 12) + v18) << 6);
LABEL_27:
        v20 = v12 - UTF8_OFFSETS[v13];
        if (HIWORD(v20))
        {
          if (HIWORD(v20) > 0x10u)
            goto LABEL_34;
          v21 = v8 + 1;
          if (v8 + 1 >= a5)
          {
            v9 = -1950343159;
LABEL_40:
            v11 = v10;
LABEL_43:
            *(_WORD *)(a4 + 2 * v8) = 0;
            LODWORD(v10) = v11;
LABEL_44:
            if (!a3)
              goto LABEL_46;
            goto LABEL_45;
          }
          *(_WORD *)(a4 + 2 * v8) = ((v20 + 67043328) >> 10) - 10240;
          LOWORD(v20) = v20 & 0x3FF | 0xDC00;
          v22 = 2;
        }
        else
        {
          if (v20 >> 11 == 27)
            goto LABEL_34;
          v21 = v8;
          v22 = 1;
        }
        *(_WORD *)(a4 + 2 * v21) = v20;
        v8 += v22;
LABEL_34:
        v7 = 0;
        if (v10 < a2)
        {
          v11 = v10;
          v9 = 0;
          if (v8 >= a5)
            goto LABEL_44;
          continue;
        }
        v9 = 0;
        if (a3)
          goto LABEL_45;
LABEL_46:
        if (a6)
          *a6 = v8;
        if ((_DWORD)v10 == a2 || v7)
          return v9;
        else
          return 2344624137;
      default:
        goto LABEL_39;
    }
  }
}

uint64_t utf8_Utf16ToUtf8(uint64_t a1, unsigned int a2, _DWORD *a3, uint64_t a4, unsigned int a5, unsigned int *a6, _DWORD *a7)
{
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  if (!a2 || !a5)
    goto LABEL_31;
  v11 = 0;
  v10 = 0;
  while (2)
  {
    v12 = *(unsigned __int16 *)(a1 + 2 * v10);
    v13 = v12 & 0xFC00;
    if (v13 != 55296)
      goto LABEL_7;
    v14 = *(unsigned __int16 *)(a1 + 2 * (v10 + 1));
    if ((v14 & 0xFC00) != 0xDC00)
    {
LABEL_29:
      v9 = -1950342907;
LABEL_30:
      *(_BYTE *)(a4 + v11) = 0;
      v8 = 1;
      v7 = v11;
LABEL_31:
      if (!a3)
        goto LABEL_33;
      goto LABEL_32;
    }
    v12 = v14 + (v12 << 10) - 56613888;
    v10 += 2;
LABEL_7:
    if (v12 < 0x10000)
      v15 = 3;
    else
      v15 = 4;
    if (v12 < 0x800)
      v15 = 2;
    if (v12 >= 0x80)
      v16 = v15;
    else
      v16 = 1;
    v7 = v16 + v11;
    if (v16 + v11 > a5)
    {
      v9 = -1950343159;
      goto LABEL_30;
    }
    if (a7)
    {
      v17 = v16;
      do
      {
        *a7++ = 2 * v10;
        --v17;
      }
      while (v17);
    }
    if (v13 != 55296)
      v12 = *(unsigned __int16 *)(a1 + 2 * v10++);
    switch(v16)
    {
      case 1:
        goto LABEL_25;
      case 2:
        goto LABEL_24;
      case 3:
        goto LABEL_23;
      case 4:
        *(_BYTE *)(a4 + v11 + 3) = v12 & 0x3F | 0x80;
        v12 >>= 6;
LABEL_23:
        *(_BYTE *)(a4 + v11 + 2) = v12 & 0x3F | 0x80;
        v12 >>= 6;
LABEL_24:
        *(_BYTE *)(a4 + v11 + 1) = v12 & 0x3F | 0x80;
        v12 >>= 6;
LABEL_25:
        v8 = 0;
        *(_BYTE *)(a4 + v11) = UTF8_FIRST_BYTE_MARK[v16] | v12;
        if (v10 < a2)
        {
          v11 += v16;
          v9 = 0;
          if (v7 >= a5)
            goto LABEL_31;
          continue;
        }
        v9 = 0;
        if (a3)
LABEL_32:
          *a3 = 2 * v10;
LABEL_33:
        if (a6)
          *a6 = v7;
        if (v10 == a2)
          v18 = 1;
        else
          v18 = v8;
        if (v18)
          return v9;
        else
          return 2344624137;
      default:
        goto LABEL_29;
    }
  }
}

uint64_t utf8_16bitToUtf8(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v6;

  v6 = 0;
  v4 = LH_wcslen(a1);
  utf8_Utf16ToUtf8(a1, v4 + 1, 0, a2, 0xFFFFFFFF, &v6, 0);
  return v6;
}

uint64_t Utf8_Utf8NbrOfSymbols(const char *a1)
{
  const char *v1;
  int v2;
  int v3;
  const char *v4;
  uint64_t v5;
  uint64_t result;

  v1 = a1;
  v2 = strlen(a1);
  v3 = *(unsigned __int8 *)v1;
  if (!*v1)
    return 1;
  v4 = &v1[v2];
  v5 = 2;
  do
  {
    result = v5;
    v1 += UTF8_TRAILING_BYTES[v3] + 1;
    if (v1 >= v4)
      break;
    v3 = *(unsigned __int8 *)v1;
    v5 = (v5 + 1);
  }
  while (*v1);
  return result;
}

uint64_t Utf8_LengthInBytes(unsigned __int8 *a1, int a2)
{
  unsigned __int8 *v2;

  LODWORD(v2) = (_DWORD)a1;
  if (a2 >= 1)
  {
    v2 = a1;
    do
    {
      v2 += UTF8_BYTES[*v2];
      --a2;
    }
    while (a2);
  }
  return ((_DWORD)v2 - (_DWORD)a1);
}

unint64_t Utf8_LengthInUtf8chars(unint64_t result, int a2)
{
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;

  if (a2 < 1)
    return 0;
  v2 = (unsigned __int8 *)result;
  v3 = 0;
  LODWORD(result) = 0;
  do
  {
    v4 = UTF8_BYTES[*v2];
    v2 += v4;
    v3 += v4;
    result = (result + 1);
  }
  while (v3 < a2);
  return result;
}

uint64_t utf8_16BitNbrOfUtf8Chars(uint64_t result)
{
  unsigned int v1;
  unsigned __int16 *v2;
  int v3;
  int v4;
  unsigned int v5;

  v1 = *(unsigned __int16 *)result;
  if (!*(_WORD *)result)
    return 1;
  v2 = (unsigned __int16 *)(result + 2);
  LODWORD(result) = 1;
  do
  {
    if (v1 < 0x800)
      v3 = 2;
    else
      v3 = 3;
    if (v1 < 0x80)
      v4 = 1;
    else
      v4 = v3;
    result = (v4 + result);
    v5 = *v2++;
    v1 = v5;
  }
  while (v5);
  return result;
}

uint64_t utf8_CheckValid(uint64_t result, unsigned int a2)
{
  unsigned int i;
  uint64_t v3;
  uint64_t v5;
  int v6;

  if (result)
  {
    if (a2)
    {
      for (i = 0; i < a2; i += v6)
      {
        v3 = *(unsigned __int8 *)result;
        if (!*(_BYTE *)result)
          return 1;
        if ((v3 & UTF8_BYTE_INDICATOR_TEST[UTF8_TRAILING_BYTES[v3]]) != UTF8_BYTE_INDICATOR[UTF8_TRAILING_BYTES[v3]]
          || i + UTF8_TRAILING_BYTES[v3] > a2)
        {
          return 0;
        }
        if (v3 > 0xC1)
        {
          if (v3 > 0xDF)
          {
            if ((_DWORD)v3 == 224)
            {
              if ((*(_BYTE *)(result + 1) & 0xE0) != 0xA0)
                return 0;
              goto LABEL_24;
            }
            if ((v3 < 0xED || (v3 & 0xFE) == 0xEE)
              && *(char *)(result + 1) <= -65
              && *(char *)(result + 2) < -64)
            {
              goto LABEL_25;
            }
            if ((_DWORD)v3 == 240)
            {
              if ((*(_BYTE *)(result + 1) + 112) > 0x2Fu)
                return 0;
            }
            else
            {
              if ((_DWORD)v3 == 237)
              {
                if (*(char *)(result + 1) > -97)
                  return 0;
LABEL_24:
                if (*(char *)(result + 2) >= -64)
                  return 0;
LABEL_25:
                v5 = 3;
                v6 = 3;
                goto LABEL_36;
              }
              if ((v3 + 15) > 2u)
              {
                if ((_DWORD)v3 != 244 || *(char *)(result + 1) > -113)
                  return 0;
              }
              else if (*(char *)(result + 1) > -65)
              {
                return 0;
              }
            }
            if (*(char *)(result + 2) > -65 || *(char *)(result + 3) >= -64)
              return 0;
            v5 = 4;
            v6 = 4;
          }
          else
          {
            if (*(char *)(result + 1) >= -64)
              return 0;
            v5 = 2;
            v6 = 2;
          }
        }
        else
        {
          v5 = 1;
          v6 = 1;
        }
LABEL_36:
        result += v5;
      }
    }
    return 1;
  }
  return result;
}

uint64_t utf8_Utf8CharTo16bit(unsigned __int8 *a1, uint64_t a2)
{
  int v2;

  v2 = UTF8_TRAILING_BYTES[*a1];
  if ((int)utf8_Utf8ToUtf16((uint64_t)a1, v2 + 1, 0, a2, 1u, 0, 0) >= 0)
    return (v2 + 1);
  else
    return 0;
}

uint64_t utf8_Utf8ToUtf32(uint64_t a1, unsigned int a2, _DWORD *a3, uint64_t a4, unsigned int a5, _DWORD *a6, unsigned int *a7)
{
  unint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  int v21;

  LODWORD(v7) = 0;
  v8 = 0;
  v9 = 0;
  LODWORD(v10) = 0;
  if (!a2 || !a5)
  {
LABEL_39:
    if (!a3)
      goto LABEL_41;
    goto LABEL_40;
  }
  v7 = 0;
  v11 = 0;
  v9 = -1950342907;
  v12 = a5;
  while (1)
  {
    v13 = *(unsigned __int8 *)(a1 + v11);
    v14 = UTF8_TRAILING_BYTES[*(unsigned __int8 *)(a1 + v11)];
    if (v11 + v14 > a2)
    {
      v8 = 0;
      *(_DWORD *)(a4 + 4 * v7) = 0;
      v9 = 197140487;
      LODWORD(v10) = v11;
      goto LABEL_39;
    }
    if ((UTF8_BYTE_INDICATOR_TEST[v14] & v13) != UTF8_BYTE_INDICATOR[v14])
      break;
    if (a7)
    {
      *a7 = v11;
      a7[1] = v11;
      a7 += 2;
      v13 = *(unsigned __int8 *)(a1 + v11);
    }
    v10 = v11 + 1;
    switch((int)v14)
    {
      case 0:
        goto LABEL_32;
      case 1:
        v15 = *(unsigned __int8 *)(a1 + v10);
        if ((v15 & 0xC0) != 0x80)
          goto LABEL_36;
        LODWORD(v10) = v11 + 2;
        v13 = v15 + (v13 << 6);
        goto LABEL_32;
      case 2:
        if (v13 == 224)
        {
          v16 = *(unsigned __int8 *)(a1 + v10);
          if (v16 < 0xA0)
            goto LABEL_36;
        }
        else if (v13 == 237)
        {
          v16 = *(unsigned __int8 *)(a1 + v10);
          if (v16 >= 0xA0)
            goto LABEL_36;
        }
        else
        {
          v16 = *(unsigned __int8 *)(a1 + v10);
        }
        if ((v16 & 0xC0) != 0x80)
          goto LABEL_36;
        v18 = *(unsigned __int8 *)(a1 + v11 + 2);
        if ((v18 & 0xC0) != 0x80)
          goto LABEL_36;
        LODWORD(v10) = v11 + 3;
        v13 = (v16 << 6) + (v13 << 12) + v18;
        goto LABEL_32;
      case 3:
        if (v13 == 240)
        {
          v17 = *(unsigned __int8 *)(a1 + v10);
          if (v17 < 0x90)
            goto LABEL_36;
        }
        else if (v13 == 244)
        {
          v17 = *(unsigned __int8 *)(a1 + v10);
          if (v17 >= 0x90)
            goto LABEL_36;
        }
        else
        {
          v17 = *(unsigned __int8 *)(a1 + v10);
        }
        if ((v17 & 0xC0) != 0x80
          || (v19 = *(unsigned __int8 *)(a1 + v11 + 2), (v19 & 0xC0) != 0x80)
          || (v20 = *(unsigned __int8 *)(a1 + v11 + 3), (v20 & 0xC0) != 0x80))
        {
LABEL_36:
          *(_DWORD *)(a4 + 4 * v7) = 0;
          v8 = 1;
          if (!a3)
            goto LABEL_41;
LABEL_40:
          *a3 = v10;
          goto LABEL_41;
        }
        LODWORD(v10) = v11 + 4;
        v13 = v20 + (((v17 << 6) + (v13 << 12) + v19) << 6);
LABEL_32:
        *(_DWORD *)(a4 + 4 * v7++) = v13 - UTF8_OFFSETS[v14];
        if (v10 >= a2 || (v11 = v10, v7 >= v12))
        {
          v8 = 0;
          v9 = 0;
          if (!a3)
            goto LABEL_41;
          goto LABEL_40;
        }
        break;
      default:
        goto LABEL_36;
    }
  }
  *(_DWORD *)(a4 + 4 * v7) = 0;
  v8 = 1;
  LODWORD(v10) = v11;
  if (a3)
    goto LABEL_40;
LABEL_41:
  if (a6)
    *a6 = v7;
  if ((_DWORD)v10 == a2)
    v21 = 1;
  else
    v21 = v8;
  if (v21)
    return v9;
  else
    return 2344624137;
}

uint64_t utf8_Utf8ToUtf32_Tolerant(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, _DWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  char v10;

  LODWORD(v5) = 0;
  if (a2 && a4)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = *(unsigned __int8 *)(a1 + v6);
      v8 = UTF8_TRAILING_BYTES[*(unsigned __int8 *)(a1 + v6++)];
      v9 = v7 & ~UTF8_BYTE_INDICATOR[v8];
      if (v7 >= 0xC2)
      {
        if (v8 <= 1)
          LODWORD(v8) = 1;
        do
        {
          v9 <<= 6;
          if (v6 < a2)
          {
            v10 = *(_BYTE *)(a1 + v6++);
            v9 |= v10 & 0x3F;
          }
          LODWORD(v8) = v8 - 1;
        }
        while ((_DWORD)v8);
      }
      *(_DWORD *)(a3 + 4 * v5++) = v9;
    }
    while (v6 < a2 && v5 < a4);
  }
  if (a5)
    *a5 = v5;
  return 0;
}

uint64_t Utf32SymToUtf8Sym(unsigned int a1, _BYTE *a2, unsigned int a3)
{
  uint64_t result;
  int v5;

  result = 2344624137;
  if (a3 >= 5)
  {
    if (a1 <= 0x7F)
    {
      result = 0;
      *a2 = a1;
      a2[1] = 0;
      return result;
    }
    if (a1 <= 0x7FF)
    {
      result = 0;
      a2[2] = 0;
      a2[1] = a1 & 0x3F | 0x80;
      v5 = (a1 >> 6) | 0xC0;
LABEL_10:
      *a2 = v5;
      return result;
    }
    if (!HIWORD(a1))
    {
      result = 0;
      a2[3] = 0;
      a2[2] = a1 & 0x3F | 0x80;
      a2[1] = (a1 >> 6) & 0x3F | 0x80;
      v5 = (a1 >> 12) - 32;
      goto LABEL_10;
    }
    if (HIWORD(a1) <= 0x10u)
    {
      result = 0;
      a2[4] = 0;
      a2[3] = a1 & 0x3F | 0x80;
      a2[2] = (a1 >> 6) & 0x3F | 0x80;
      a2[1] = (a1 >> 12) & 0x3F | 0x80;
      v5 = (a1 >> 18) - 16;
      goto LABEL_10;
    }
    *a2 = 0;
    return 2344624389;
  }
  return result;
}

uint64_t utf8_Utf32ToUtf8(uint64_t a1, int a2, uint64_t a3, unsigned int a4, _DWORD *a5)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;

  *a5 = 0;
  if (a2)
  {
    v6 = 0;
    v7 = 0;
    result = 2344624137;
    do
    {
      v9 = *(_DWORD *)(a1 + 4 * v6);
      if (v9 > 0x7F)
      {
        if (v9 > 0x7FF)
        {
          if (HIWORD(v9))
          {
            if (HIWORD(v9) > 0x10u)
              return 2344624389;
            v17 = v9 & 0x3F | 0x80;
            v16 = (v9 >> 6) & 0x3F | 0x80;
            v15 = (v9 >> 12) & 0x3F | 0x80;
            v14 = (v9 >> 18) - 16;
            v10 = 4;
          }
          else
          {
            v16 = v9 & 0x3F | 0x80;
            v15 = (v9 >> 6) & 0x3F | 0x80;
            v14 = (v9 >> 12) - 32;
            v10 = 3;
          }
        }
        else
        {
          v15 = v9 & 0x3F | 0x80;
          v14 = (v9 >> 6) | 0xC0;
          v10 = 2;
        }
      }
      else
      {
        v14 = *(_DWORD *)(a1 + 4 * v6);
        v10 = 1;
      }
      if (v10 + v7 > a4)
        return result;
      v11 = v10;
      v12 = &v14;
      do
      {
        v13 = *v12++;
        *(_BYTE *)(a3 + v7++) = v13;
        --v11;
      }
      while (v11);
      *a5 += v10;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t utf8_determineUTF8CharLength(unsigned int a1)
{
  uint64_t result;

  result = 0;
  if (a1 <= 0xF5 && (a1 + 62) <= 0xFDu)
    return UTF8_TRAILING_BYTES[a1] + 1;
  return result;
}

uint64_t utf8_getUTF8Char(uint64_t a1, unsigned int a2, _BYTE *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;

  v3 = *(unsigned __int8 *)(a1 + a2);
  v4 = 2344624389;
  if (v3 <= 0xF5 && (v3 + 62) <= 0xFDu)
  {
    v5 = UTF8_TRAILING_BYTES[v3] + 1;
    v6 = a3;
    v7 = v5;
    do
    {
      *v6++ = *(_BYTE *)(a1 + a2++);
      --v7;
    }
    while (v7);
    v4 = 0;
    a3[v5] = 0;
  }
  return v4;
}

uint64_t utf8_GetWCharFromUtf8(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned __int16 v4;
  char __s[10];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  utf8_GetUtf8Symbol(a1, a2, a3, __s);
  if ((int)Utf8_Utf8NbrOfSymbols(__s) > 2)
    return 0;
  v4 = 0;
  utf8_Utf8ToUtf16((uint64_t)__s, UTF8_TRAILING_BYTES[__s[0]] + 1, 0, (uint64_t)&v4, 1u, 0, 0);
  return v4;
}

_BYTE *utf8_GetUtf8Symbol(_BYTE *result, unsigned int a2, unsigned int a3, char *__s)
{
  _BYTE *v4;
  int v5;
  unint64_t v7;
  unsigned int v8;
  char *v9;
  unsigned int v10;
  int v11;

  *__s = 0;
  if (result)
  {
    v4 = result;
    result = 0;
    if (a2 < a3)
    {
      LOBYTE(v5) = *v4;
      if (*v4)
      {
        if (a2)
        {
          while ((char)v4[a2] <= -65)
          {
            if (!--a2)
              goto LABEL_7;
          }
          LOBYTE(v5) = v4[a2];
          if (!(_BYTE)v5)
          {
LABEL_15:
            v11 = 0;
            return (_BYTE *)(v11 + 1);
          }
        }
        else
        {
LABEL_7:
          a2 = 0;
          result = 0;
          if ((char)v5 < -64)
            return result;
          if (!*v4)
            goto LABEL_15;
        }
        v7 = 0;
        v8 = a2 + 1;
        while (1)
        {
          v9 = &__s[v7];
          *v9 = v5;
          v9[1] = 0;
          v10 = strlen(__s);
          if (utf8_CheckValid((uint64_t)__s, v10))
            break;
          v11 = v7 + 1;
          if (v7 <= 7)
          {
            v5 = v4[v8 + v7++];
            if (v5)
              continue;
          }
          return (_BYTE *)(v11 + 1);
        }
        v11 = v7;
        return (_BYTE *)(v11 + 1);
      }
    }
  }
  return result;
}

uint64_t utf8_GetU32FromUtf8(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v4;
  char __s[10];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  utf8_GetUtf8Symbol(a1, a2, a3, __s);
  if ((int)Utf8_Utf8NbrOfSymbols(__s) > 2)
    return 0;
  v4 = 0;
  utf8_Utf8ToUtf32((uint64_t)__s, UTF8_TRAILING_BYTES[__s[0]] + 1, 0, (uint64_t)&v4, 1u, 0, 0);
  return v4;
}

size_t utf8_GetNextUtf8Offset(char *__s, int a2)
{
  uint64_t v3;
  size_t v4;
  unint64_t v5;
  char *v6;
  int v7;

  if (!__s || !*__s)
    return 0;
  LODWORD(v3) = a2;
  v4 = strlen(__s);
  if (v4 > v3)
  {
    v5 = (v4 - 1) - (unint64_t)v3;
    v6 = &__s[v3 + 1];
    while (v5)
    {
      v7 = *v6++;
      --v5;
      v3 = (v3 + 1);
      if (v7 >= -64)
        return v3;
    }
  }
  return v4;
}

uint64_t utf8_GetNextUtf8OffsetLimit(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  char *v4;
  int v5;

  if (!a1 || !*a1)
    return 1;
  if (a2 < a3)
  {
    v3 = (a3 - 1) - (unint64_t)a2;
    v4 = &a1[a2 + 1];
    while (v3)
    {
      v5 = *v4++;
      --v3;
      a2 = (a2 + 1);
      if (v5 >= -64)
        return a2;
    }
  }
  return a3;
}

uint64_t utf8_GetPreviousValidUtf8Offset(uint64_t result, unsigned int *a2)
{
  unsigned int i;

  for (i = *a2; i; *a2 = --i)
  {
    if (*(char *)(result + i) > -65)
      break;
  }
  return result;
}

uint64_t utf8_GetPreviousUtf8Offset(uint64_t __s, unsigned int a2)
{
  uint64_t v2;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  if (__s)
  {
    v2 = __s;
    if (*(_BYTE *)__s)
    {
      v4 = strlen((const char *)__s);
      if (v4 >= a2)
        v5 = a2;
      else
        v5 = v4;
      if (!v5)
        return 0xFFFFFFFFLL;
      while (*(char *)(v2 + v5) < -64)
      {
        if (!--v5)
          return 0xFFFFFFFFLL;
      }
      v6 = v5 - 1;
      while (v6)
      {
        v7 = *(char *)(v2 + v6--);
        if (v7 >= -64)
          return v6 + 1;
      }
    }
    return 0;
  }
  return __s;
}

uint64_t utf8_GetPreviousUtf8OffsetLimit(uint64_t result, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v4;
  int v5;

  if (result)
  {
    if (!*(_BYTE *)result)
      return 0;
    v3 = a3 - 1;
    if (a2 < a3)
      v3 = a2;
    if (v3)
    {
      while (*(char *)(result + v3) < -64)
      {
        if (!--v3)
          return 0xFFFFFFFFLL;
      }
      v4 = v3 - 1;
      while (v4)
      {
        v5 = *(char *)(result + v4--);
        if (v5 >= -64)
          return v4 + 1;
      }
      return 0;
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

unint64_t utf8_GetCurrentUtf8Offset(unint64_t __s, unsigned int a2)
{
  const char *v2;

  if (__s)
  {
    v2 = (const char *)__s;
    if (*(_BYTE *)__s)
    {
      LODWORD(__s) = strlen((const char *)__s);
      if (__s >= a2)
        __s = a2;
      else
        __s = __s;
      for (; (_DWORD)__s; __s = (__s - 1))
      {
        if (v2[__s] > -65)
          break;
      }
    }
    else
    {
      return 0;
    }
  }
  return __s;
}

uint64_t utf8_BelongsToSet(unsigned int a1, _BYTE *a2, unsigned int a3, unsigned int a4)
{
  const char *v8;
  uint64_t result;
  uint64_t (*v10)(void);

  if (a1 == 4)
  {
    v8 = &a2[a3];
    if (!strncmp(v8, "﻿", 3uLL) || a3 <= a4 && !*v8)
      return 1;
  }
  else if (a1 == 3)
  {
    if (a3 <= a4 && !a2[a3])
      return 1;
  }
  else if (a1 == 2 && !strncmp(&a2[a3], "﻿", 3uLL))
  {
    return 1;
  }
  result = (uint64_t)Utf8_GetWCharClassifier(a1);
  if (result)
  {
    v10 = (uint64_t (*)(void))result;
    result = utf8_GetWCharFromUtf8(a2, a3, a4);
    if ((_DWORD)result)
      return v10();
  }
  return result;
}

uint64_t utf8_ToLower(char *a1, unsigned int a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t WCharFromUtf8;
  uint64_t (*WCharClassifier)();
  uint64_t (*v9)();
  uint64_t (*v10)();
  uint64_t v11;
  uint64_t (*v13)();
  uint64_t (*v14)();
  _WORD v15[2];

  v6 = strlen(a1);
  WCharFromUtf8 = utf8_GetWCharFromUtf8(a1, a2, v6);
  WCharClassifier = Utf8_GetWCharClassifier(0x12u);
  if (WCharClassifier && ((unsigned int (*)(uint64_t))WCharClassifier)(WCharFromUtf8)
    || (v9 = Utf8_GetWCharClassifier(0x15u)) != 0 && ((unsigned int (*)(uint64_t))v9)(WCharFromUtf8))
  {
LABEL_5:
    LOWORD(v10) = 32;
    goto LABEL_6;
  }
  v13 = Utf8_GetWCharClassifier(0x18u);
  if (v13 && ((unsigned int (*)(uint64_t))v13)(WCharFromUtf8))
  {
    if ((_DWORD)WCharFromUtf8 == 304)
    {
      LOWORD(v10) = -199;
    }
    else
    {
      if ((_DWORD)WCharFromUtf8 != 376)
      {
        v11 = 1;
        LOWORD(v10) = 1;
        goto LABEL_7;
      }
      LOWORD(v10) = -121;
    }
    goto LABEL_6;
  }
  v14 = Utf8_GetWCharClassifier(0x1Bu);
  if (v14 && ((unsigned int (*)(uint64_t))v14)(WCharFromUtf8))
  {
    if ((WCharFromUtf8 - 902) < 0xA)
    {
      LOWORD(v10) = asc_1DEC5F13C[(__int16)(WCharFromUtf8 - 902)];
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  v10 = Utf8_GetWCharClassifier(0x1Eu);
  if (!v10)
  {
    v11 = 0;
    goto LABEL_7;
  }
  if (!((unsigned int (*)(uint64_t))v10)(WCharFromUtf8))
  {
    v11 = 0;
    LOWORD(v10) = 0;
    goto LABEL_7;
  }
  if ((WCharFromUtf8 & 0xFFF0) == 0x400)
  {
    LOWORD(v10) = 80;
  }
  else if ((((_WORD)WCharFromUtf8 - 1040) & 0xFFE0) != 0)
  {
    LOWORD(v10) = 1;
  }
  else
  {
    LOWORD(v10) = 32;
  }
LABEL_6:
  v11 = 1;
LABEL_7:
  v15[0] = (_WORD)v10 + WCharFromUtf8;
  v15[1] = 0;
  utf8_16bitToUtf8((uint64_t)v15, a3);
  return v11;
}

char *utf8_strchr(char *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  unint64_t v4;
  char __s2[10];
  uint64_t v7;

  v3 = 0;
  v7 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  if (v4 <= 0xF5 && (v4 + 62) <= 0xFDu)
    v3 = UTF8_TRAILING_BYTES[v4] + 1;
  __strncpy_chk();
  __s2[v3] = 0;
  return strstr(a1, __s2);
}

BOOL utf8_IsChineseLetter(const char *a1)
{
  unsigned int v2;
  int v4;
  unsigned int v5;

  v5 = 0;
  v2 = strlen(a1);
  v4 = 0;
  utf8_Utf8ToUtf32_Tolerant((uint64_t)a1, v2, (uint64_t)&v5, 1u, &v4);
  return v4 && wchar_IsChineseLetter(v5) != 0;
}

uint64_t utf8_GetChineseUTFCharNum(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unsigned __int16 v3;
  __int16 v4;
  unint64_t v5;

  if (a2)
  {
    v2 = 0;
    v3 = 0;
    do
    {
      v4 = 0;
      v5 = *(unsigned __int8 *)(a1 + v2);
      if (v5 <= 0xF5 && (v5 + 62) <= 0xFDu)
        v4 = UTF8_TRAILING_BYTES[v5] + 1;
      ++v3;
      v2 = (unsigned __int16)(v4 + v2);
    }
    while (v2 < a2);
  }
  else
  {
    return 0;
  }
  return v3;
}

uint64_t utf8_countNbrOfPhonWords(_BYTE *a1, unsigned int a2, _WORD *a3, _WORD *a4)
{
  unsigned int i;
  unsigned __int16 v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned __int16 v13;
  char v14;
  int v15;
  uint64_t v16;
  unsigned int j;
  uint64_t v18;
  int v19;
  unsigned __int16 v20;

  *a3 = 0;
  *a4 = a2;
  if (!a2)
  {
    v9 = -1;
LABEL_8:
    v10 = v9;
    do
    {
      if (!utf8_BelongsToSet(0, a1, v10, a2))
        break;
      --*a4;
      --v10;
    }
    while ((_WORD)v10);
    goto LABEL_11;
  }
  for (i = 0; i != a2; ++i)
  {
    if (!utf8_BelongsToSet(0, a1, i, a2))
      break;
    ++*a3;
  }
  v9 = a2 - 1;
  if ((_WORD)a2 != 1)
    goto LABEL_8;
LABEL_11:
  v11 = (unsigned __int16)*a3;
  v12 = (unsigned __int16)*a4;
  if (v11 >= v12)
  {
    return 0;
  }
  else
  {
    v13 = 0;
    v14 = 95;
    do
    {
      v15 = a1[(unsigned __int16)v11];
      if (v15 == 35 || v15 == 95)
      {
        if (v14 != 35 && v14 != 95)
          ++v13;
      }
      else if (v15 == 92)
      {
        v16 = (unsigned __int16)v11 + 1;
        if (v16 < (unsigned __int16)v12 && a1[v16] == 84)
        {
          for (j = v11 + 2; (unsigned __int16)j < (unsigned __int16)v12; j += v19)
          {
            v18 = a1[(unsigned __int16)j];
            if (v18 == 92)
              break;
            v19 = 0;
            if (v18 <= 0xF5 && (v18 + 62) <= 0xFDu)
              v19 = UTF8_TRAILING_BYTES[v18] + 1;
          }
          if (a1[(unsigned __int16)j] == 92)
            v11 = j;
        }
      }
      if (!utf8_BelongsToSet(0, a1, (unsigned __int16)v11, a2))
        v14 = a1[(unsigned __int16)v11];
      ++v11;
      v12 = (unsigned __int16)*a4;
    }
    while (v12 > (unsigned __int16)v11);
    if (v14 == 95)
      v20 = v13;
    else
      v20 = v13 + 1;
    if (v14 == 35)
      return v13;
    else
      return v20;
  }
}

uint64_t wchar_IsChineseLetter(unsigned int a1)
{
  char v1;
  BOOL v3;

  v1 = vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_1DEC5F160, (uint32x4_t)vaddq_s32(vdupq_n_s32(a1), (int32x4_t)xmmword_1DEC5F150))));
  v3 = (a1 - 173824) >> 4 < 0x27B || a1 - 194560 < 0x21E;
  return v1 & 1 | (a1 - 0x20000 < 0xA6D7) | v3;
}

uint64_t (*Utf8_GetWCharClassifier(unsigned int a1))()
{
  if (a1 > 0x24)
    return 0;
  else
    return off_1EA93C488[a1];
}

BOOL wchar_IsBlank(unsigned int a1)
{
  int v3;
  int v4;
  int v5;
  unsigned int v6;

  if (LH_wcschr((uint64_t)&szBLANKS, a1))
    return 1;
  if (a1 < 0xA0)
    return 0;
  v3 = 0;
  v4 = 24;
  while (1)
  {
    v5 = (v3 + v4) / 2;
    v6 = (unsigned __int16)wchar_IsBlank_wisspaceList[v5];
    if (v6 <= a1)
      break;
    v4 = v5 - 1;
LABEL_9:
    if (v3 > v4)
      return 0;
  }
  if (v6 < a1)
  {
    v3 = v5 + 1;
    goto LABEL_9;
  }
  return (_WORD)v5 != 0xFFFF;
}

BOOL wchar_IsBlankNorm(unsigned int a1)
{
  _BOOL4 IsBlank;

  IsBlank = wchar_IsBlank(a1);
  return a1 == 95 || IsBlank;
}

BOOL wchar_IsSpace(int a1)
{
  return a1 == 12288 || a1 == 32;
}

BOOL wchar_IsDigit(int a1)
{
  return (a1 - 48) < 0xA;
}

BOOL wchar_IsQuote(int a1)
{
  return a1 == 34;
}

BOOL wchar_IsColon(int a1)
{
  return a1 == 58;
}

BOOL wchar_IsWordChar(unsigned int a1)
{
  uint64_t v1;
  unsigned __int8 v3;
  BOOL v5;

  v1 = 1;
  if ((a1 - 162 > 0x1C || ((1 << (a1 + 94)) & 0x1D8BD1AB) == 0)
    && (a1 - 36 > 0x3A || ((1 << (a1 - 36)) & 0x400000012000087) == 0)
    && a1 != 126)
  {
    v3 = vmaxv_u16(vcgt_u16((uint16x4_t)0x450006000F0007, (uint16x4_t)vadd_s16(vdup_n_s16(a1), (int16x4_t)0xFF85FFA5FFDFFFC6))) | (a1 - 0x2000 < 0x70);
    v5 = (unsigned __int16)(a1 + 464) < 0x1C0u || (a1 & 0xFFC0) == 12288;
    return ((v3 | v5) & 1) == 0;
  }
  return v1;
}

uint64_t wchar_IsPunctuation(unsigned int a1)
{
  char v1;
  BOOL v3;

  v1 = vmaxv_u16(vcgt_u16((uint16x4_t)0x450006000F0007, (uint16x4_t)vadd_s16(vdup_n_s16(a1), (int16x4_t)0xFF85FFA5FFDFFFC6)));
  v3 = (unsigned __int16)(a1 + 464) < 0x1C0u || (a1 & 0xFFC0) == 12288;
  return v1 & 1 | (a1 - 0x2000 < 0x70) | v3;
}

uint64_t wchar_IsLatinPunctuation(unsigned int a1)
{
  return vmaxv_u16(vcgt_u16((uint16x4_t)0x450006000F0007, (uint16x4_t)vadd_s16(vdup_n_s16(a1), (int16x4_t)0xFF85FFA5FFDFFFC6))) & 1;
}

BOOL wchar_IsGeneralPunctuation(int a1)
{
  return (a1 - 0x2000) < 0x70;
}

BOOL wchar_IsCJKSymbolPunctuation(__int16 a1)
{
  return (a1 & 0xFFC0) == 12288;
}

BOOL wchar_IsCJKCompatibilityForms(__int16 a1)
{
  return (unsigned __int16)(a1 + 464) < 0x120u;
}

BOOL wchar_IsSmallFormVariants(__int16 a1)
{
  return (unsigned __int16)(a1 + 432) < 0x20u;
}

BOOL wchar_IsHalfWidthFullWidthForms(__int16 a1)
{
  return (unsigned __int16)(a1 + 256) < 0xF0u;
}

BOOL wchar_IsBasicLatinCapitalLetter(int a1)
{
  return (a1 - 65) < 0x1A;
}

BOOL wchar_IsLatinOneSupplementCapitalLetter(int a1)
{
  return (a1 - 192) < 0x17 || (a1 - 216) < 7;
}

uint64_t wchar_IsLatinExtendedACapitalLetter(int a1)
{
  BOOL v1;

  v1 = (a1 - 256) <= 0x36 && (a1 & 1) == 0;
  if (v1
    || (a1 - 328) >= 0xFFFFFFF1 && (a1 & 1) != 0
    || (a1 - 330) <= 0x2E && (a1 & 1) == 0)
  {
    return 1;
  }
  if ((a1 - 377) >= 5)
    return 0;
  return a1 & 1;
}

uint64_t wchar_IsGreekCapitalLetter(int a1)
{
  _BOOL4 v1;

  if ((a1 - 902) < 7 && ((0x5Du >> (a1 + 122)) & 1) != 0)
    return 1;
  v1 = (unsigned __int16)(a1 - 913) < 0x11u || (a1 - 931) < 9;
  return (a1 & 0xFFFE) == 0x38E || v1;
}

BOOL wchar_IsCyrillicCapitalLetter(int a1)
{
  unsigned __int16 v1;

  if ((a1 - 1024) < 0x30 || (a1 - 1120) <= 0x20 && (a1 & 1) == 0)
    return 1;
  if ((a1 - 1164) <= 0x32)
    goto LABEL_8;
  v1 = ((unsigned __int16)(a1 - 1217) >> 1) | (((_WORD)a1 - 1217) << 15);
  if (v1 < 6u && ((0x2Bu >> v1) & 1) != 0)
    return 1;
  if ((a1 - 1232) <= 0x24)
  {
LABEL_8:
    if ((a1 & 1) == 0)
      return 1;
  }
  return a1 == 1272;
}

BOOL wchar_IsUnderscore(int a1)
{
  return a1 == 95;
}

BOOL wchar_IsSpaceOrUnderscore(int a1)
{
  return a1 == 32 || a1 == 95 || a1 == 12288;
}

BOOL wchar_IsHyphen(int a1)
{
  return a1 == 45;
}

BOOL wchar_IsHyphenOrUnderscore(int a1)
{
  return a1 == 45 || a1 == 95;
}

char *LH_MapModuleNameToId(char *result)
{
  char *v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    if (*result)
    {
      v2 = 0;
      while (LH_stricmp(v1, (&LH_MapModuleNameToId_moduleMap)[v2]))
      {
        v2 += 2;
        if (v2 == 478)
          return 0;
      }
      return (char *)LOWORD((&LH_MapModuleNameToId_moduleMap)[v2 + 1]);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t LH_MapModuleNamesToIds(char *a1, char *a2, unsigned int a3)
{
  char *v5;
  char *i;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  unsigned int v11;
  size_t v12;
  char __s[64];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (!a3)
    return 18;
  v5 = a1;
  *a2 = 0;
  if (!a1 || !*a1)
    v5 = "all";
  if (LH_stricmp(v5, "all"))
  {
    for (i = v5; ; ++i)
    {
      v7 = *i;
      v8 = v7 > 0x3B;
      v9 = (1 << v7) & 0x800100100000001;
      if (v8 || v9 == 0)
        continue;
      if (((_DWORD)i - (_DWORD)v5 - 1) <= 0x3E)
      {
        __strncpy_chk();
        __s[(_DWORD)i - (_DWORD)v5] = 0;
        if (__s[0] - 48 > 9)
        {
          v11 = LH_MapModuleNameToId(__s);
          if (v11)
          {
LABEL_16:
            if (*a2 && strlen(a2) + 1 < a3)
              *(_WORD *)&a2[strlen(a2)] = 32;
            __sprintf_chk(__s, 0, 0x40uLL, "%d", v11);
            v12 = strlen(a2);
            if (strlen(__s) + v12 < a3)
              strcat(a2, __s);
          }
        }
        else
        {
          v11 = (unsigned __int16)LH_atoi(__s);
          if (v11)
            goto LABEL_16;
        }
      }
      if (!*i)
        return 0;
      LODWORD(v5) = (_DWORD)i++ + 1;
    }
  }
  snprintf(a2, a3, "%s", v5);
  return 0;
}

uint64_t base64_encode(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;

  v4 = 0xFFFFFFFFLL;
  if (a1 && a2 && a3 && a4)
  {
    v5 = 0;
    v6 = 0;
    *a4 = 0;
    v7 = a2;
    while (2)
    {
      v8 = 0;
      v9 = 0;
      v10 = 16;
      while (1)
      {
        v11 = *(unsigned __int8 *)(a1 + v5 + v8);
        v12 = v9 | v11;
        if ((_DWORD)v8 == 2)
          break;
        v9 = ((_DWORD)v12 << 8);
        ++v8;
        v10 -= 8;
        if (v7 - v5 == v8)
        {
          v15 = ((_DWORD)v9 << v10);
          v16 = v6;
          *(_BYTE *)(a3 + v6) = base64_alphabet_[(int)v15 >> 18];
          *(_BYTE *)(a3 + (v6 | 1)) = base64_alphabet_[(v15 >> 12) & 0x3F];
          v17 = 61;
          if ((_DWORD)v8 != 1)
            v17 = base64_alphabet_[(v15 >> 6) & 0x3CLL];
          *(_BYTE *)(a3 + (v6 | 2)) = v17;
          v6 += 4;
          *(_BYTE *)(a3 + (v16 | 3)) = 61;
          goto LABEL_15;
        }
      }
      *(_BYTE *)(a3 + v6) = base64_alphabet_[(int)v9 >> 18];
      *(_BYTE *)(a3 + (v6 | 1)) = base64_alphabet_[(v9 >> 12) & 0x3F];
      v13 = v6 | 3;
      *(_BYTE *)(a3 + (v6 | 2)) = base64_alphabet_[(v12 >> 6) & 0x3F];
      v6 += 4;
      *(_BYTE *)(a3 + v13) = base64_alphabet_[v11 & 0x3F];
      v14 = ~v5 + v7;
      v5 += v8 + 1;
      if (v14 != v8)
        continue;
      break;
    }
LABEL_15:
    v4 = 0;
    *a4 = v6;
  }
  return v4;
}

unint64_t ssft_bsearch(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, unint64_t))
{
  uint64_t v5;
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;

  v5 = (a3 - 1) * a4;
  if ((v5 & 0x8000000000000000) == 0)
  {
    v8 = a2;
    v10 = a2 + v5;
    v11 = -a4;
    do
    {
      if (a3 >= 2)
      {
        v16 = a3 >> 1;
        v17 = (a3 & 1) + (a3 >> 1) - 1;
        v18 = v8 + v17 * a4;
        v19 = a5(a1, v18);
        if (!v19)
        {
          v8 += v17 * a4;
          return v8;
        }
        v13 = v18 + a4;
        v14 = v18 + v11;
        v15 = v19 >= 0;
        if (v19 < 0)
          a3 = v17;
        else
          a3 = v16;
      }
      else
      {
        if (!a3)
          return 0;
        v12 = a5(a1, v8);
        if (!v12)
          return v8;
        v13 = v8 + a4;
        v14 = v10 + v11;
        v15 = v12 >= 0;
        a3 = 1;
      }
      if (v15)
        v8 = v13;
      else
        v10 = v14;
    }
    while (v8 <= v10);
  }
  return 0;
}

uint64_t ssft_qsort(uint64_t result, unint64_t a2, uint64_t a3, uint64_t (*a4)(unint64_t, unint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;

  if (a2 < 2)
    return result;
  v6 = result;
  v30 = a2 >> 1;
  v7 = result + (a2 >> 1) * a3;
  v8 = -a3;
  do
  {
    v9 = 0;
    v26 = a2 - 1;
    v27 = a2;
    v10 = a2 - 1;
    v28 = v6;
    while (1)
    {
      v11 = v9 - 2;
      v12 = a3 * v9;
      v13 = v9 - 1;
      v31 = v9 - 1;
      v32 = v10;
      v14 = v6;
      do
      {
        v15 = v13;
        v16 = a4(v14 + v12, v7);
        ++v11;
        v14 += a3;
        v13 = v15 + 1;
      }
      while (v16 < 0);
      v17 = 0;
      v29 = v11 - v30;
      v18 = v6;
      do
      {
        result = a4(v18 + a3 * v32, v7);
        --v17;
        ++v15;
        v18 += v8;
      }
      while ((int)result > 0);
      v19 = v32 + v17;
      v10 = v32 + v17 + 1;
      if (v11 + 1 < v10)
      {
        if ((int)a3 >= 1)
        {
          v20 = a3 * v31;
          v21 = a3 + a3 * v32;
          v22 = a3;
          do
          {
            v23 = *(_BYTE *)(v14 + v20);
            *(_BYTE *)(v14 + v20) = *(_BYTE *)(v18 + v21);
            *(_BYTE *)(v18 + v21++) = v23;
            ++v20;
            --v22;
          }
          while (v22);
        }
        if (v19 - v30 == -1)
          v24 = v11 + 1;
        else
          v24 = v30;
        v25 = v14 + a3 * v31;
        if (v19 - v30 != -1)
          v25 = v7;
        if (v29 != -1)
          v10 = v24;
        v30 = v10;
        if (v29 == -1)
          v7 = v18 + a3 + a3 * v32;
        else
          v7 = v25;
        v10 = v32 + v17;
        v6 = v28;
        v9 = v11 + 2;
        goto LABEL_24;
      }
      v9 = v11 + 1;
      v6 = v28;
      if (v32 == v15)
        break;
LABEL_24:
      if (v9 >= v10)
      {
        if (!v10)
          goto LABEL_27;
        goto LABEL_26;
      }
    }
    v9 = v11 + 2;
    v10 = v11;
    if (v11)
LABEL_26:
      result = ssft_qsort(v6, v10 + 1, a3, a4);
LABEL_27:
    if (v9 >= v26)
      break;
    v6 += v9 * a3;
    a2 = v27 - v9;
    v30 = (v27 - v9) >> 1;
    v7 = v6 + v30 * a3;
  }
  while (v27 - v9 > 1);
  return result;
}

uint64_t LH_stricmp(char *a1, char *a2)
{
  char v4;
  __darwin_ct_rune_t v5;
  __darwin_ct_rune_t v6;
  char v7;
  unsigned int v8;

  v4 = *a1;
  v5 = __tolower(*a1);
  v6 = __tolower(*a2);
  if (v5 != v6)
    return (v5 - v6);
  v7 = v4;
  v8 = 1;
  while (v7)
  {
    v7 = a1[v8];
    v5 = __tolower(v7);
    v6 = __tolower(a2[v8++]);
    if (v5 != v6)
      return (v5 - v6);
  }
  return 0;
}

uint64_t LH_strnicmp(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  unsigned int v7;
  int v8;
  __darwin_ct_rune_t v9;
  __darwin_ct_rune_t v10;
  __darwin_ct_rune_t v11;
  BOOL v12;
  __darwin_ct_rune_t v15;

  v6 = 0;
  if (a3)
  {
    v7 = 1;
    do
    {
      v8 = *(unsigned __int8 *)(a1 + v6);
      v9 = __tolower((char)v8);
      v10 = *(char *)(a2 + v6);
      v11 = __tolower(v10);
      if (v10)
        v12 = v8 == 0;
      else
        v12 = 1;
      if (v12 || v9 != v11)
        break;
      v6 = v7++;
    }
    while (v6 < a3);
  }
  if (v6 == a3)
    return 0;
  v15 = __tolower(*(char *)(a1 + v6));
  return (v15 - __tolower(*(char *)(a2 + v6)));
}

char *LH_itoa(unsigned int a1, char *a2, unsigned int a3)
{
  char *v3;
  char *v4;
  char v5;
  BOOL v6;
  unint64_t v7;
  char v8;

  if (a1)
  {
    if (a3 - 37 >= 0xFFFFFFDD)
    {
      if ((a1 & 0x80000000) != 0 && a3 == 10)
      {
        *a2 = 45;
        v3 = a2 + 1;
        a1 = -a1;
      }
      else
      {
        v3 = a2;
      }
      v4 = v3 - 1;
      do
      {
        if (a1 % a3 >= 0xA)
          v5 = 87;
        else
          v5 = 48;
        *++v4 = v5 + a1 % a3;
        v6 = a1 >= a3;
        a1 /= a3;
      }
      while (v6);
      v4[1] = 0;
      if (v4 > v3)
      {
        v7 = (unint64_t)(v3 + 1);
        do
        {
          v8 = *v4;
          *v4-- = *(_BYTE *)(v7 - 1);
          *(_BYTE *)(v7 - 1) = v8;
        }
        while ((unint64_t)v4 > v7++);
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    *(_WORD *)a2 = 48;
  }
  return a2;
}

const char *LH_atoi(const char *result)
{
  const char *v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v6;
  int v7;
  const char *v8;
  int v9;
  int v10;
  int v11;

  if (result)
  {
    v1 = result;
    v2 = strlen(result);
    if (v2 < 1)
    {
      LODWORD(v3) = 0;
    }
    else
    {
      v3 = 0;
      while (1)
      {
        v4 = v1[v3];
        if (v4 != 32 && v4 != 9)
          break;
        if (v2 == ++v3)
          return 0;
      }
    }
    LODWORD(v6) = v3;
    if ((int)v3 < v2 - 1)
    {
      v7 = v1[v3];
      if (v7 == 45 || (LODWORD(v6) = v3, v7 == 43))
        LODWORD(v6) = v3 + 1;
    }
    if ((int)v6 < v2)
    {
      v8 = &v1[(int)v6];
      while (1)
      {
        v9 = *(unsigned __int8 *)v8++;
        if ((v9 - 48) > 9)
          break;
        LODWORD(v6) = v6 + 1;
        if (v2 == (_DWORD)v6)
        {
          LODWORD(v6) = v2;
          break;
        }
      }
    }
    if ((int)v6 <= (int)v3)
    {
      return 0;
    }
    else
    {
      result = 0;
      v6 = (int)v6;
      v10 = 1;
      do
      {
        v11 = v1[v6 - 1];
        if ((v11 - 48) > 9)
        {
          if ((int)v3 + 1 != v6)
            return 0;
          if (v11 != 43)
          {
            if (v11 != 45)
              return 0;
            result = (const char *)-(int)result;
          }
        }
        else
        {
          result = (const char *)((_DWORD)result + (v11 - 48) * v10);
          v10 *= 10;
        }
        --v6;
      }
      while (v6 > (int)v3);
    }
  }
  return result;
}

char *LH_utoa(unsigned int a1, char *a2, unsigned int a3)
{
  char *v3;
  char v4;
  BOOL v5;
  char *v6;
  char v7;

  if (a1)
  {
    v3 = a2 - 1;
    do
    {
      if (a1 % a3 >= 0xA)
        v4 = 87;
      else
        v4 = 48;
      *++v3 = v4 + a1 % a3;
      v5 = a1 >= a3;
      a1 /= a3;
    }
    while (v5);
    v3[1] = 0;
    if (v3 > a2)
    {
      v6 = a2 + 1;
      do
      {
        v7 = *v3;
        *v3-- = *(v6 - 1);
        *(v6 - 1) = v7;
      }
      while (v3 > v6++);
    }
  }
  else
  {
    *(_WORD *)a2 = 48;
  }
  return a2;
}

const char *LH_atou(const char *result)
{
  const char *v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v6;
  const char *v7;
  int v8;
  const char *v9;
  int v10;
  int v11;

  if (result)
  {
    v1 = result;
    v2 = strlen(result);
    if (v2 < 1)
    {
      LODWORD(v3) = 0;
    }
    else
    {
      v3 = 0;
      while (1)
      {
        v4 = v1[v3];
        if (v4 != 32 && v4 != 9)
          break;
        if (v2 == ++v3)
          return 0;
      }
    }
    LODWORD(v6) = v3;
    if ((int)v3 < v2 - 1)
    {
      if (v1[v3] == 43)
        LODWORD(v6) = v3 + 1;
      else
        LODWORD(v6) = v3;
    }
    if ((int)v6 < v2)
    {
      v7 = &v1[(int)v6];
      while (1)
      {
        v8 = *(unsigned __int8 *)v7++;
        if ((v8 - 48) > 9)
          break;
        LODWORD(v6) = v6 + 1;
        if (v2 == (_DWORD)v6)
        {
          LODWORD(v6) = v2;
          break;
        }
      }
    }
    if ((int)v6 > (int)v3)
    {
      v9 = 0;
      v6 = (int)v6;
      v10 = 1;
      while (1)
      {
        v11 = v1[v6 - 1];
        if ((v11 - 48) > 9)
        {
          result = 0;
          if ((int)v3 + 1 != v6 || v11 != 43)
            return result;
        }
        else
        {
          v9 = (const char *)((_DWORD)v9 + (v11 - 48) * v10);
          v10 *= 10;
        }
        --v6;
        result = v9;
        if (v6 <= (int)v3)
          return result;
      }
    }
    return 0;
  }
  return result;
}

size_t wcslen(const __int32 *a1)
{
  uint64_t v1;

  v1 = 0;
  while (a1[v1++])
    ;
  return ((v1 * 4) >> 2) - 1;
}

char *__cdecl strtok_r(char *__str, const char *__sep, char **__lasts)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;

  v5 = __str;
  if (!__str)
    v5 = *__lasts;
  v6 = &v5[strspn(v5, __sep)];
  if (!*v6)
    return 0;
  v7 = strpbrk(v6, __sep);
  if (v7)
  {
    *v7 = 0;
    v8 = v7 + 1;
  }
  else
  {
    v8 = &v6[strlen(v6)];
  }
  *__lasts = v8;
  return v6;
}

uint64_t depes_tolower(uint64_t result)
{
  if ((result - 65) > 0x19)
  {
    switch((int)result)
    {
      case 142:
        LOBYTE(result) = -124;
        break;
      case 143:
        LOBYTE(result) = -122;
        break;
      case 144:
        LOBYTE(result) = -126;
        break;
      case 145:
      case 147:
      case 148:
      case 149:
      case 150:
      case 151:
      case 152:
        return result;
      case 146:
        LOBYTE(result) = -111;
        break;
      case 153:
        LOBYTE(result) = -108;
        break;
      case 154:
        LOBYTE(result) = -127;
        break;
      default:
        if ((_DWORD)result == 128)
        {
          LOBYTE(result) = -121;
        }
        else if ((_DWORD)result == 165)
        {
          LOBYTE(result) = -92;
        }
        break;
    }
  }
  else
  {
    LOBYTE(result) = result + 32;
  }
  return result;
}

uint64_t ssft_tolower(int a1)
{
  unsigned __int8 v1;
  BOOL v3;

  switch(a1)
  {
    case 138:
      return (a1 + 16);
    case 159:
      return -1;
    case 140:
      return (a1 + 16);
    default:
      v3 = (a1 + 64) < 0x17u || (a1 - 65) < 0x1Au || (a1 & 0xF8) == 216;
      v1 = a1 + 32;
      if (!v3)
        return a1;
      break;
  }
  return v1;
}

const char *TxtEncodingGetName(int a1)
{
  uint64_t v2;
  const char *result;

  v2 = 0;
  result = "default";
  while (LODWORD((&TXTENC_EncodingTable)[v2 + 1]) != a1)
  {
    v2 += 4;
    if (v2 == 512)
      return result;
  }
  return (&TXTENC_EncodingTable)[v2];
}

uint64_t TxtEncodingGetId(unsigned __int8 *a1)
{
  uint64_t v1;
  char *v2;
  unsigned __int8 *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;

  v1 = 0;
  while (1)
  {
    v2 = (&TXTENC_EncodingTable)[4 * v1];
    v3 = a1;
    do
    {
      v5 = *v3++;
      v4 = v5;
      v6 = v5 + 32;
      if ((v5 - 65) < 0x1A)
        v4 = v6;
      v8 = *v2++;
      v7 = v8;
      v9 = v8 + 32;
      if ((v8 - 65) < 0x1A)
        v7 = v9;
      if (v4)
        v10 = v4 == v7;
      else
        v10 = 0;
    }
    while (v10);
    if (v4 == v7)
      break;
    if (++v1 == 128)
      return 0;
  }
  return LODWORD((&TXTENC_EncodingTable)[4 * v1 + 1]);
}

char *TxtEncodingGetMap(int a1, int a2)
{
  uint64_t v2;
  char **v3;
  char **v5;

  v2 = 0;
  while (1)
  {
    v3 = &(&TXTENC_EncodingTable)[v2];
    if (LODWORD((&TXTENC_EncodingTable)[v2 + 1]) == a1)
      break;
    v2 += 4;
    if (v2 == 512)
      return 0;
  }
  v5 = v3 + 3;
  if (a2)
    v5 = v3 + 2;
  return *v5;
}

uint64_t TxtEncodingCharToWChar(uint64_t result, _DWORD *a2)
{
  if (a2)
  {
    if (a2 == BuckToWChar)
    {
      LODWORD(result) = BuckToWChar[result];
    }
    else if ((result & 0x80) != 0)
    {
      LODWORD(result) = a2[(result - 128)];
    }
  }
  return (unsigned __int16)result;
}

uint64_t TxtEncodingWCharToChar(uint64_t result, __int16 *a2)
{
  int v2;
  int v3;
  unsigned int v4;

  if (!a2 || result <= 0x7F && a2 != WCharToBuck)
    return result;
  v2 = 0;
  if (a2 == WCharToBuck)
    v3 = 94;
  else
    v3 = 127;
  while (1)
  {
    v4 = (unsigned __int16)a2[2 * ((v3 + v2) / 2)];
    if (v4 <= result)
      break;
    v3 = (v3 + v2) / 2 - 1;
LABEL_12:
    if (v2 > v3)
      return 0;
  }
  if (v4 != (_DWORD)result)
  {
    v2 = (v3 + v2) / 2 + 1;
    goto LABEL_12;
  }
  return LOBYTE(a2[2 * ((uint64_t)(v3 + v2 + (v3 + v2 < 0)) >> 1) + 1]);
}

uint64_t TxtEncodingCharUTF8ToUTF16(unsigned __int8 *a1)
{
  unsigned __int16 v1;
  __int16 v2;
  __int16 v3;
  __int16 v4;
  __int16 v5;
  __int16 v6;

  if (!a1)
    return 0;
  v1 = *a1;
  if ((char)*a1 < 0)
  {
    v2 = a1[1];
    if ((v1 + 62) <= 0x1Du)
    {
      v3 = v2 + (v1 << 6);
      v4 = -12416;
      return (unsigned __int16)(v3 + v4);
    }
    if (a1[1])
    {
      v5 = a1[2];
      if ((v1 & 0xF0) != 0xE0)
      {
        if (a1[2])
        {
          v6 = a1[3] - 128;
          v5 <<= 6;
          goto LABEL_13;
        }
LABEL_12:
        v6 = -128;
LABEL_13:
        if ((v1 + 16) <= 4u)
          return (unsigned __int16)(v5 + (v2 << 12) + v6 - 0x2000);
        return 0;
      }
    }
    else
    {
      v5 = 0;
      if ((v1 & 0xF0) != 0xE0)
        goto LABEL_12;
    }
    v3 = (v2 << 6) + (v1 << 12);
    v4 = v5 - 8320;
    return (unsigned __int16)(v3 + v4);
  }
  return v1;
}

uint64_t TxtEncodingCharUTF16ToUTF8(unsigned int a1, uint64_t a2)
{
  *(_DWORD *)a2 = 0;
  if (a1 > 0x7F)
  {
    if (a1 > 0x7FE)
    {
      if (a1 != 0xFFFF)
      {
        *(_BYTE *)a2 = (a1 >> 12) | 0xE0;
        *(_BYTE *)(a2 + 1) = (a1 >> 6) & 0x3F | 0x80;
        *(_BYTE *)(a2 + 2) = a1 & 0x3F | 0x80;
      }
    }
    else
    {
      *(_BYTE *)a2 = (a1 >> 6) - 64;
      *(_BYTE *)(a2 + 1) = a1 & 0x3F | 0x80;
    }
  }
  else
  {
    *(_BYTE *)a2 = a1;
  }
  return a2;
}

char *TxtEncodingConvert(uint64_t a1, int a2, int a3, char *a4, unint64_t a5, uint64_t a6, unint64_t a7, unint64_t *a8)
{
  _BYTE *v9;
  char *v11;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  size_t v31;
  unint64_t v32;
  size_t v33;
  unsigned int v34;
  unsigned int v35;
  size_t v36;
  size_t v37;
  size_t v38;
  unint64_t v39;
  int v40;
  size_t v41;
  unint64_t v42;
  size_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  size_t v61;
  int v62;
  uint64_t v63;
  _WORD *v64;
  uint64_t v65;
  __int16 *v66;
  uint64_t v67;
  char *v68;
  unint64_t v69;
  _BYTE *v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  __int16 *v75;
  unint64_t i;
  unsigned int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  int v90;
  unint64_t v91;
  uint64_t v92;
  __int16 *v93;
  unsigned int v94;
  int v95;
  char *v96;
  uint64_t v97;
  char *v98;
  size_t v99;
  unint64_t v100;
  unint64_t v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unint64_t v105;
  size_t v106;
  size_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  unint64_t v111;
  uint64_t v112;
  int v113;
  __int16 *v114;
  uint64_t v115;
  char __s[20];
  uint64_t v117;

  v9 = (_BYTE *)a6;
  v11 = a4;
  v117 = *MEMORY[0x1E0C80C00];
  v115 = 0;
  if (a8)
    *a8 = 0;
  if (!a4)
    return 0;
  if (a2 != 65001)
  {
    if (a2 != 1201)
    {
      if (a2 != 1200)
      {
        switch(a3)
        {
          case 1200:
            v14 = 0;
            v15 = 0;
            v16 = 0;
            v17 = 0;
            v18 = 0;
            v19 = 4;
            break;
          case 1201:
            v20 = 0;
            v14 = 0;
            v21 = 0;
            v16 = 0;
            v17 = 0;
            v18 = 0;
            v19 = 4;
            v15 = 1;
LABEL_35:
            v22 = 1;
            goto LABEL_36;
          case 65001:
            v20 = 0;
            v22 = 0;
            v16 = 0;
            v17 = 0;
            v18 = 0;
            v19 = 4;
            v14 = 1;
            v15 = 1;
            v21 = 1;
LABEL_36:
            v23 = 1;
            goto LABEL_37;
          default:
            v14 = 0;
            v15 = 0;
            v16 = 0;
            v17 = 0;
            v18 = 0;
            v19 = 3;
            break;
        }
LABEL_34:
        v20 = 1;
        v21 = 1;
        goto LABEL_35;
      }
      if (a3 != 1200)
      {
        if (a3 != 1201)
        {
          v14 = 0;
          v15 = 0;
          v16 = 0;
          v17 = 0;
          v18 = 0;
          if (a3 == 65001)
            v19 = 7;
          else
            v19 = 5;
          goto LABEL_34;
        }
        goto LABEL_23;
      }
      goto LABEL_24;
    }
    switch(a3)
    {
      case 1200:
LABEL_23:
        v14 = 0;
        v15 = 0;
        v16 = 0;
        v17 = 0;
        v18 = 0;
        v19 = 10;
        goto LABEL_34;
      case 1201:
LABEL_24:
        v14 = 0;
        v15 = 0;
        v16 = 0;
        v17 = 0;
        v18 = 0;
        v19 = 2;
        goto LABEL_34;
      case 65001:
        v14 = 0;
        v15 = 0;
        v16 = 0;
        v17 = 0;
        v19 = 8;
        v20 = 1;
        v21 = 1;
        v22 = 1;
        v23 = 1;
        v18 = 1;
        goto LABEL_37;
    }
    v20 = 0;
    v14 = 0;
    v23 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 10;
LABEL_30:
    v15 = 1;
    v21 = 1;
    v22 = 1;
    v16 = 1;
    goto LABEL_37;
  }
  if (a3 == 1200)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 6;
    goto LABEL_34;
  }
  if (a3 == 1201)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v18 = 0;
    v19 = 9;
    v20 = 1;
    v21 = 1;
    v22 = 1;
    v23 = 1;
    v17 = 1;
    goto LABEL_37;
  }
  if (a3 != 65001)
  {
    v20 = 0;
    v14 = 0;
    v23 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 6;
    goto LABEL_30;
  }
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v20 = 1;
  v21 = 1;
  v22 = 1;
  v23 = 1;
  v19 = 1;
LABEL_37:
  if (!(a1 | a6))
    return 0;
  switch(v19)
  {
    case 1:
      if (!v20)
        return 0;
      if (a6)
      {
        if (!a5)
        {
          v32 = 0;
          v38 = 0;
LABEL_289:
          v9[v38] = 0;
          if (a8)
            goto LABEL_310;
          return v9;
        }
        v38 = 0;
        v39 = 0;
        v32 = 0;
        while (1)
        {
          v40 = v11[v39];
          if (!v11[v39])
            goto LABEL_289;
          if ((v40 & 0x80000000) == 0)
            break;
          if ((v40 + 62) < 0x1E)
          {
            v41 = 2;
            goto LABEL_93;
          }
          if ((v40 & 0xFFFFFFF0) == 0xFFFFFFE0)
          {
            v41 = 3;
            goto LABEL_93;
          }
          if ((v40 + 11) >= 0xFBu)
          {
            v41 = 4;
            goto LABEL_93;
          }
          v42 = a7;
          v41 = 1;
LABEL_95:
          if (++v32 < a5)
          {
            v39 += v41;
            a7 = v42;
            if (v39 < a5)
              continue;
          }
          goto LABEL_289;
        }
        v41 = 1;
LABEL_93:
        v43 = v41 + v38;
        if (v41 + v38 >= a7)
          goto LABEL_289;
        v42 = a7;
        memcpy(&v9[v38], &v11[v39], v41);
        v38 = v43;
        goto LABEL_95;
      }
      if (a5)
      {
        v61 = 0;
        v32 = 0;
        while (1)
        {
          v62 = v11[v61];
          if (!v11[v61])
            break;
          if (v62 < 0)
          {
            if ((v62 + 62) >= 0x1E)
            {
              if ((v62 & 0xFFFFFFF0) == 0xFFFFFFE0)
              {
                v63 = 3;
              }
              else if ((v62 + 11) < 0xFBu)
              {
                v63 = 1;
              }
              else
              {
                v63 = 4;
              }
            }
            else
            {
              v63 = 2;
            }
          }
          else
          {
            v63 = 1;
          }
          v61 += v63;
          if (a5 == ++v32)
          {
            v32 = a5;
            break;
          }
        }
      }
      else
      {
        v32 = 0;
        v61 = 0;
      }
      v96 = strhelper_StringAppend((uint64_t *)a1, 0, v11, v61, &v115, 0x100uLL);
      v9 = v96;
      if (!a8 || !v96)
        return v9;
LABEL_310:
      *a8 = v32;
      return v9;
    case 2:
      if (!v20)
        return 0;
      if (!a6)
      {
        v64 = TxtwStringAppend(a1, (unsigned __int16 *)a4, a5, &v115);
        v9 = v64;
        if (a8 && v64)
          *a8 = LH_wcslen((uint64_t)v64);
        return v9;
      }
      v44 = 0;
      if (!a5)
        goto LABEL_104;
      while (*(_WORD *)&a4[2 * v44])
      {
        if (a5 == ++v44)
        {
          v44 = a5;
          break;
        }
      }
LABEL_104:
      v45 = (a7 >> 1) - 1;
      if (v44 < v45)
        v45 = v44;
      if (a7 == 1)
        v45 = 0;
      if (a7)
        v46 = v45;
      else
        v46 = v44;
      LH_wcsncpy(a6, (unsigned __int16 *)a4, v46);
      *(_WORD *)&v9[2 * v46] = 0;
      if (a8)
        goto LABEL_153;
      return v9;
    case 3:
      if (!v20)
        return 0;
      if (a6)
      {
        v47 = 0;
        if (a5)
        {
          do
          {
            if (!a4[v47])
              goto LABEL_119;
            ++v47;
          }
          while (a5 != v47);
          v47 = a5;
        }
LABEL_119:
        if (v47 >= a7)
          v48 = a7;
        else
          v48 = v47;
        goto LABEL_199;
      }
      v48 = 0;
      if (!a5)
        goto LABEL_198;
      while (a4[v48])
      {
        if (a5 == ++v48)
        {
          v48 = a5;
          break;
        }
      }
LABEL_198:
      v9 = (_BYTE *)heap_Alloc(a1, (v48 + 1));
      if (!v9)
        return v9;
LABEL_199:
      v65 = 0;
      while (LODWORD((&TXTENC_EncodingTable)[v65 + 1]) != a3)
      {
        v65 += 4;
        if (v65 == 512)
        {
          v66 = 0;
          goto LABEL_204;
        }
      }
      v66 = (__int16 *)(&TXTENC_EncodingTable)[v65 + 3];
LABEL_204:
      v67 = 0;
      while (LODWORD((&TXTENC_EncodingTable)[v67 + 1]) != a2)
      {
        v67 += 4;
        if (v67 == 512)
        {
          v68 = 0;
          goto LABEL_209;
        }
      }
      v68 = (&TXTENC_EncodingTable)[v67 + 2];
LABEL_209:
      v69 = 0;
      if (v48)
      {
        v70 = v9;
        do
        {
          v72 = *v11++;
          v71 = v72;
          if (v68)
          {
            if (v68 == (char *)BuckToWChar)
            {
              v71 = BuckToWChar[v71];
            }
            else if ((v71 & 0x80) != 0)
            {
              v71 = *(_DWORD *)&v68[4 * (v71 - 128)];
            }
          }
          if (!(_WORD)v71)
            break;
          v73 = TxtEncodingWCharToChar((unsigned __int16)v71, v66);
          *v70 = v73;
          if (v73)
            v9[v69++] = v73;
          ++v70;
          --v48;
        }
        while (v48);
      }
      if (a8)
        *a8 = v69;
      v9[v69] = 0;
      return v9;
    case 4:
      v49 = v14 ^ 1;
      if (a6)
        v49 = 1;
      if ((v49 & 1) == 0)
        return ToUTF8((uint64_t *)a1, (uint64_t)a4, a5, a2, a8);
      if ((v21 & v15 & v22 & 1) != 0)
        return 0;
      __s[0] = 0;
      v55 = a6;
      v113 = v14;
      if (a6)
        goto LABEL_314;
      if (a5)
      {
        v56 = 0;
        while (a4[v56])
        {
          if (a5 == ++v56)
          {
            v57 = a7;
            LODWORD(v56) = a5;
            goto LABEL_313;
          }
        }
        v57 = a7;
      }
      else
      {
        v57 = a7;
        LODWORD(v56) = 0;
      }
LABEL_313:
      v55 = heap_Alloc(a1, (2 * v56 + 2));
      a7 = v57;
      v14 = v113;
      if (!v55)
        return (char *)v55;
LABEL_314:
      v97 = 0;
      while (LODWORD((&TXTENC_EncodingTable)[v97 + 1]) != a2)
      {
        v97 += 4;
        if (v97 == 512)
        {
          v98 = 0;
          goto LABEL_319;
        }
      }
      v98 = (&TXTENC_EncodingTable)[v97 + 2];
LABEL_319:
      if (a5)
      {
        v99 = 0;
        v100 = 0;
        v101 = 2;
        v110 = v98;
        v112 = v55;
        while (1)
        {
          v102 = v11[v100];
          if (v98)
          {
            if (v98 == (char *)BuckToWChar)
            {
              v102 = BuckToWChar[v11[v100]];
            }
            else if ((v102 & 0x80) != 0)
            {
              v102 = *(_DWORD *)&v98[4 * v102 - 512];
            }
          }
          if (!(_WORD)v102)
            break;
          v103 = bswap32(v102) >> 16;
          if (v21)
            v104 = v102;
          else
            v104 = v103;
          if (v14)
          {
            *(_DWORD *)__s = 0;
            v105 = a7;
            if ((unsigned __int16)v104 > 0x7Fu)
            {
              if ((unsigned __int16)v104 > 0x7FEu)
              {
                if ((_WORD)v104 != 0xFFFF)
                {
                  __s[0] = ((unsigned __int16)v104 >> 12) | 0xE0;
                  __s[1] = (v104 >> 6) & 0x3F | 0x80;
                  __s[2] = v104 & 0x3F | 0x80;
                }
              }
              else
              {
                __s[0] = (v104 >> 6) - 64;
                __s[1] = v104 & 0x3F | 0x80;
              }
            }
            else
            {
              __s[0] = v104;
            }
            v106 = strlen(__s);
            v101 = 1;
            a7 = v105;
            v14 = v113;
            v98 = v110;
            v55 = v112;
          }
          else
          {
            v106 = 1;
          }
          if (!v9)
            goto LABEL_342;
          v107 = v106 + v99;
          if (v106 + v99 >= a7 / v101)
            break;
          if (v101 != 2)
          {
            v108 = a7;
            memcpy((void *)(v55 + v99), __s, v106);
            v98 = v110;
            v55 = v112;
            v14 = v113;
            a7 = v108;
            v99 = v107;
          }
          else
          {
LABEL_342:
            *(_WORD *)(v55 + 2 * v99++) = v104;
          }
          if (a5 == ++v100)
          {
            v100 = a5;
            break;
          }
        }
      }
      else
      {
        v100 = 0;
        v99 = 0;
        v101 = 2;
      }
      if (a8)
        *a8 = v100;
      if (v101 == 1)
        *(_BYTE *)(v55 + v99) = 0;
      else
        *(_WORD *)(v55 + 2 * v99) = 0;
      return (char *)v55;
    case 5:
      if (!v20)
        return 0;
      if (a6)
      {
        v50 = 0;
        if (a5)
        {
          do
          {
            if (!*(_WORD *)&a4[2 * v50])
              goto LABEL_132;
            ++v50;
          }
          while (a5 != v50);
          v50 = a5;
        }
LABEL_132:
        v51 = a7 - 1;
        if (v50 < a7 - 1)
          v51 = v50;
        if (a7 == 1)
          v51 = 0;
        if (a7)
          v52 = v51;
        else
          v52 = v50;
        goto LABEL_228;
      }
      v52 = 0;
      if (!a5)
        goto LABEL_227;
      while (*(_WORD *)&a4[2 * v52])
      {
        if (a5 == ++v52)
        {
          v52 = a5;
          break;
        }
      }
LABEL_227:
      v9 = (_BYTE *)heap_Alloc(a1, (v52 + 1));
      if (!v9)
        return v9;
LABEL_228:
      v74 = 0;
      while (LODWORD((&TXTENC_EncodingTable)[v74 + 1]) != a3)
      {
        v74 += 4;
        if (v74 == 512)
        {
          v75 = 0;
          goto LABEL_233;
        }
      }
      v75 = (__int16 *)(&TXTENC_EncodingTable)[v74 + 3];
LABEL_233:
      for (i = 0; v52; --v52)
      {
        v77 = *(unsigned __int16 *)v11;
        v11 += 2;
        v78 = TxtEncodingWCharToChar(v77, v75);
        if (v78)
          v9[i++] = v78;
      }
LABEL_305:
      v9[i] = 0;
      if (a8)
        *a8 = i;
      return v9;
    case 6:
    case 9:
      if ((v15 & v23 & 1) != 0)
        return 0;
      if (a6)
        goto LABEL_251;
      if (!a5)
      {
        v30 = a7;
        LODWORD(v26) = 0;
        goto LABEL_247;
      }
      v25 = 0;
      v26 = 0;
      while (2)
      {
        v27 = a4[v25];
        if (a4[v25])
        {
          if (v27 < 0)
          {
            if ((v27 + 62) >= 0x1E)
            {
              if ((v27 & 0xFFFFFFF0) == 0xFFFFFFE0)
              {
                v28 = 3;
              }
              else
              {
                if ((v27 + 11) < 0xFBu)
                {
                  ++v25;
                  goto LABEL_59;
                }
                v28 = 4;
              }
            }
            else
            {
              v28 = 2;
            }
          }
          else
          {
            v28 = 1;
          }
          v29 = v28 + v25;
          if (v25 < v28 + v25)
          {
            do
            {
              if (!a4[v25])
                goto LABEL_59;
              ++v25;
              --v28;
            }
            while (v28);
            v25 = v29;
          }
LABEL_59:
          if (++v26 == a5)
          {
            v30 = a7;
            LODWORD(v26) = a5;
            goto LABEL_247;
          }
          continue;
        }
        break;
      }
      v30 = a7;
LABEL_247:
      v79 = (v26 + 1);
      v80 = (2 * v26 + 2);
      if (v23)
        v81 = v80;
      else
        v81 = v79;
      v9 = (_BYTE *)heap_Alloc(a1, v81);
      a7 = v30;
      if (!v9)
        return v9;
LABEL_251:
      v82 = 0;
      while (LODWORD((&TXTENC_EncodingTable)[v82 + 1]) != a3)
      {
        v82 += 4;
        if (v82 == 512)
        {
          v114 = 0;
          goto LABEL_256;
        }
      }
      v114 = (__int16 *)(&TXTENC_EncodingTable)[v82 + 3];
LABEL_256:
      v83 = 0;
      if (!a5)
      {
LABEL_283:
        if (a8)
          *a8 = v83;
        if (v16)
          v9[v83] = 0;
        else
          *(_WORD *)&v9[2 * v83] = 0;
        return v9;
      }
      v84 = 0;
      v85 = 0;
      v111 = a7 - 1;
      v109 = (a7 - 1) >> 1;
      break;
    case 7:
    case 8:
      if (!v20)
        return 0;
      if (!a6)
        return ToUTF8((uint64_t *)a1, (uint64_t)a4, a5, a2, a8);
      if (a5)
      {
        v31 = 0;
        v32 = 0;
        v33 = a7 - 1;
        while (1)
        {
          v34 = *(unsigned __int16 *)&v11[2 * v32];
          if (!*(_WORD *)&v11[2 * v32])
            break;
          v35 = __rev16(v34);
          if (v18)
            v34 = v35;
          *(_DWORD *)__s = 0;
          if (v34 > 0x7F)
          {
            if (v34 > 0x7FE)
            {
              if (v34 != 0xFFFF)
              {
                __s[0] = (v34 >> 12) | 0xE0;
                __s[1] = (v34 >> 6) & 0x3F | 0x80;
                __s[2] = v34 & 0x3F | 0x80;
              }
            }
            else
            {
              __s[0] = (v34 >> 6) - 64;
              __s[1] = v34 & 0x3F | 0x80;
            }
          }
          else
          {
            __s[0] = v34;
          }
          v36 = strlen(__s);
          v37 = v36 + v31;
          if (v36 + v31 >= v33)
            break;
          if (v36)
            strncpy(&v9[v31], __s, v36);
          ++v32;
          v31 = v37;
          if (a5 == v32)
          {
            v32 = a5;
            v31 = v37;
            break;
          }
        }
      }
      else
      {
        v32 = 0;
        v31 = 0;
      }
      v9[v31] = 0;
      if (!a8)
        return v9;
      goto LABEL_310;
    case 10:
      if (!v20)
      {
        if (!v16)
          return 0;
        if (a6)
        {
          v58 = 0;
          if (a5)
          {
            do
            {
              if (!*(_WORD *)&a4[2 * v58])
                goto LABEL_167;
              ++v58;
            }
            while (a5 != v58);
            v58 = a5;
          }
LABEL_167:
          v59 = a7 - 1;
          if (v58 < a7 - 1)
            v59 = v58;
          if (a7 == 1)
            v59 = 0;
          if (a7)
            v60 = v59;
          else
            v60 = v58;
        }
        else
        {
          v60 = 0;
          if (a5)
          {
            do
            {
              if (!*(_WORD *)&a4[2 * v60])
                goto LABEL_295;
              ++v60;
            }
            while (a5 != v60);
            v60 = a5;
          }
LABEL_295:
          v9 = (_BYTE *)heap_Alloc(a1, (v60 + 1));
          if (!v9)
            return v9;
        }
        v92 = 0;
        while (LODWORD((&TXTENC_EncodingTable)[v92 + 1]) != a3)
        {
          v92 += 4;
          if (v92 == 512)
          {
            v93 = 0;
            goto LABEL_301;
          }
        }
        v93 = (__int16 *)(&TXTENC_EncodingTable)[v92 + 3];
LABEL_301:
        for (i = 0; v60; --v60)
        {
          v94 = *(unsigned __int16 *)v11;
          v11 += 2;
          v95 = TxtEncodingWCharToChar(bswap32(v94) >> 16, v93);
          if (v95)
            v9[i++] = v95;
        }
        goto LABEL_305;
      }
      if (a6)
      {
        v53 = 0;
        if (a5)
        {
          while (*(_WORD *)&a4[2 * v53])
          {
            if (a5 == ++v53)
            {
              v53 = a5;
              break;
            }
          }
        }
        v54 = (a7 >> 1) - 1;
        if (v53 < v54)
          v54 = v53;
        if (a7 == 1)
          v54 = 0;
        if (a7)
          v46 = v54;
        else
          v46 = v53;
        TXTENC_swab(a4, (_BYTE *)a6, 2 * v46 + 2);
        if (a8)
LABEL_153:
          *a8 = v46;
      }
      else
      {
        v32 = 0;
        if (a5)
        {
          while (*(_WORD *)&a4[2 * v32])
          {
            if (a5 == ++v32)
            {
              v32 = a5;
              break;
            }
          }
        }
        v9 = (_BYTE *)heap_Alloc(a1, (2 * v32 + 2) & 0xFFFFFFFE);
        if (v9)
        {
          TXTENC_swab(v11, v9, 2 * v32 + 2);
          if (a8)
            goto LABEL_310;
        }
      }
      return v9;
    default:
      return 0;
  }
  while (1)
  {
    v86 = v11[v84];
    if (!v11[v84])
      goto LABEL_283;
    if ((v86 & 0x80000000) == 0)
    {
      v87 = 1;
      goto LABEL_268;
    }
    if ((v86 + 62) < 0x1E)
    {
      v87 = 2;
      goto LABEL_268;
    }
    if ((v86 & 0xFFFFFFF0) == 0xFFFFFFE0)
    {
      v87 = 3;
      goto LABEL_268;
    }
    if ((v86 + 11) > 0xFAu)
      break;
    ++v84;
LABEL_282:
    if (++v85 == a5)
      goto LABEL_283;
  }
  v87 = 4;
LABEL_268:
  __strncpy_chk();
  __s[v87] = 0;
  LODWORD(v88) = TxtEncodingCharUTF8ToUTF16((unsigned __int8 *)__s);
  v89 = __rev16(v88);
  if (v17)
    v88 = v89;
  else
    v88 = v88;
  if (v16)
  {
    if (v83 >= v111)
      goto LABEL_283;
    v90 = TxtEncodingWCharToChar(v88, v114);
    if (!v90)
      goto LABEL_278;
    v9[v83] = v90;
  }
  else
  {
    if (v83 >= v109)
      goto LABEL_283;
    *(_WORD *)&v9[2 * v83] = v88;
  }
  ++v83;
LABEL_278:
  v91 = v87 + v84;
  if (v84 < v87 + v84)
  {
    while (v11[v84])
    {
      ++v84;
      if (!--v87)
      {
        v84 = v91;
        goto LABEL_282;
      }
    }
  }
  goto LABEL_282;
}

_WORD *TxtwStringAppend(uint64_t a1, unsigned __int16 *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  _WORD *v8;
  _WORD *v9;
  uint64_t v10;

  if (!a4)
    return 0;
  v5 = a3;
  if ((_DWORD)a3 == -1)
    v5 = LH_wcslen((uint64_t)a2);
  *a4 = v5 + 257;
  v8 = (_WORD *)heap_Alloc(a1, (2 * (v5 + 257)));
  v9 = v8;
  if (v8)
  {
    *v8 = 0;
    v10 = LH_wcslen((uint64_t)v8);
    LH_wcsncpy((uint64_t)&v9[v10], a2, v5);
    v9[v5] = 0;
  }
  return v9;
}

char *TXTENC_swab(char *result, _BYTE *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  char v5;
  char *v6;
  _BYTE *v7;
  unint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;

  v3 = a3 >> 1;
  if ((a3 & 0xE) != 0)
  {
    v4 = v3 - 1;
    do
    {
      v5 = *result;
      v6 = result + 2;
      v7 = a2 + 2;
      *a2 = result[1];
      a2[1] = v5;
      a2 += 2;
      result += 2;
    }
    while (v4-- & 7);
    v3 += ~(unint64_t)(((_BYTE)v3 - 1) & 7);
    result = v6;
    a2 = v7;
  }
  if (v3 >= 8)
  {
    v9 = v3 >> 3;
    do
    {
      v10 = *result;
      *a2 = result[1];
      a2[1] = v10;
      v11 = result[2];
      a2[2] = result[3];
      a2[3] = v11;
      v12 = result[4];
      a2[4] = result[5];
      a2[5] = v12;
      v13 = result[6];
      a2[6] = result[7];
      a2[7] = v13;
      v14 = result[8];
      a2[8] = result[9];
      a2[9] = v14;
      v15 = result[10];
      a2[10] = result[11];
      a2[11] = v15;
      v16 = result[12];
      a2[12] = result[13];
      a2[13] = v16;
      v17 = result[14];
      a2[14] = result[15];
      a2[15] = v17;
      a2 += 16;
      result += 16;
      --v9;
    }
    while (v9);
  }
  return result;
}

char *ToUTF8(uint64_t *a1, uint64_t a2, unint64_t a3, int a4, unint64_t *a5)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  size_t v19;
  int v20;
  char *v21;
  unsigned int v22;
  unint64_t *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  char __src[20];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v28 = 0;
  v27 = a4 & 0xFFFFFFFE;
  if ((_DWORD)v27 == 1200)
  {
    if (a3)
    {
      v10 = 0;
      while (*(_WORD *)(a2 + 2 * v10))
      {
        if (a3 == ++v10)
          goto LABEL_11;
      }
      goto LABEL_13;
    }
  }
  else if (a3)
  {
    v10 = 0;
    while (*(_BYTE *)(a2 + v10))
    {
      if (a3 == ++v10)
      {
LABEL_11:
        v10 = a3;
        goto LABEL_13;
      }
    }
    goto LABEL_13;
  }
  v10 = 0;
LABEL_13:
  v11 = v10 / 0x14;
  if (v11 <= 0x100)
    v11 = 256;
  v26 = v11;
  v12 = heap_Alloc((uint64_t)a1, v11);
  if (!v12)
    return 0;
  v13 = (char *)v12;
  v14 = 0;
  v24 = a5;
  while (LODWORD((&TXTENC_EncodingTable)[v14 + 1]) != a4)
  {
    v14 += 4;
    if (v14 == 512)
    {
      v25 = 0;
      goto LABEL_22;
    }
  }
  v25 = (&TXTENC_EncodingTable)[v14 + 2];
LABEL_22:
  v15 = 0;
  v16 = 0;
  v17 = 0;
  do
  {
    __src[0] = 0;
    if ((_DWORD)v27 == 1200)
    {
      if (v17 < a3)
      {
        LODWORD(v18) = *(unsigned __int16 *)(a2 + 2 * v17);
        if (*(_WORD *)(a2 + 2 * v17))
          goto LABEL_42;
      }
    }
    else if (v17 < a3)
    {
      v18 = *(unsigned __int8 *)(a2 + v17);
      if (*(_BYTE *)(a2 + v17))
      {
        if (v25)
        {
          if (v25 == (char *)BuckToWChar)
          {
            LODWORD(v18) = BuckToWChar[v18];
          }
          else if ((v18 & 0x80) != 0)
          {
            LODWORD(v18) = *(_DWORD *)&v25[4 * (v18 - 128)];
          }
        }
LABEL_42:
        v22 = bswap32(v18) >> 16;
        if (a4 == 1201)
          LODWORD(v18) = v22;
        *(_DWORD *)__src = 0;
        if ((unsigned __int16)v18 > 0x7Fu)
        {
          if ((unsigned __int16)v18 > 0x7FEu)
          {
            if ((_WORD)v18 != 0xFFFF)
            {
              __src[0] = ((unsigned __int16)v18 >> 12) | 0xE0;
              __src[1] = (v18 >> 6) & 0x3F | 0x80;
              __src[2] = v18 & 0x3F | 0x80;
            }
          }
          else
          {
            __src[0] = (v18 >> 6) - 64;
            __src[1] = v18 & 0x3F | 0x80;
          }
        }
        else
        {
          __src[0] = v18;
        }
        v19 = strlen(__src);
        v20 = 0;
        ++v17;
        if (v19 + v16 < v26)
          goto LABEL_36;
        goto LABEL_34;
      }
    }
    v19 = 0;
    v20 = 1;
LABEL_34:
    v13[v16] = 0;
    v21 = strhelper_StringAppend(a1, v15, v13, 0xFFFFFFFFFFFFFFFFLL, (uint64_t *)((char *)&v27 + 4), 0x100uLL);
    if (!v21)
    {
      heap_Free(a1, (uint64_t)v15);
      v15 = 0;
      goto LABEL_55;
    }
    v16 = 0;
    v15 = v21;
LABEL_36:
    if (v19 && !v20)
    {
      memcpy(&v13[v16], __src, v19);
      v16 += v19;
    }
  }
  while (!v20);
  if (v24)
    *v24 = v17;
LABEL_55:
  heap_Free(a1, (uint64_t)v13);
  return v15;
}

size_t TxtEncodingGetOutputBytesRequired(char *__s, size_t a2, int a3, int a4, _QWORD *a5)
{
  size_t v7;
  uint64_t i;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  size_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v27;
  char __sa[8];

  v7 = a2;
  for (i = 0; i != 512; i += 4)
  {
    if (LODWORD((&TXTENC_EncodingTable)[i + 1]) == a3)
    {
      v10 = (&TXTENC_EncodingTable)[i + 2];
      if (__s)
        goto LABEL_7;
      return 0;
    }
  }
  v10 = 0;
  if (!__s)
    return 0;
LABEL_7:
  v12 = a4 & 0xFFFFFFFE;
  if ((a3 - 1200) < 2)
  {
    if (a4 == 65001)
    {
      if (a2 == -1)
        v13 = -1;
      else
        v13 = a2 >> 1;
      if (v13)
      {
        v14 = 0;
        v11 = 0;
        while (1)
        {
          v15 = *(unsigned __int16 *)&__s[2 * v14];
          if (!*(_WORD *)&__s[2 * v14])
            break;
          v16 = __rev16(v15);
          if (a3 == 1201)
            v15 = v16;
          *(_DWORD *)__sa = 0;
          if (v15 > 0x7F)
          {
            if (v15 > 0x7FE)
            {
              if (v15 != 0xFFFF)
              {
                __sa[0] = (v15 >> 12) | 0xE0;
                __sa[1] = (v15 >> 6) & 0x3F | 0x80;
                __sa[2] = v15 & 0x3F | 0x80;
              }
            }
            else
            {
              __sa[0] = (v15 >> 6) - 64;
              __sa[1] = v15 & 0x3F | 0x80;
            }
          }
          else
          {
            __sa[0] = v15;
          }
          v11 += strlen(__sa);
          if (v13 == ++v14)
          {
            v14 = v13;
            break;
          }
        }
      }
      else
      {
        v11 = 0;
        v14 = 0;
      }
      if (a5)
        *a5 = v14;
      return v11;
    }
    if (a2 == -1)
    {
      v21 = LH_wcslen((uint64_t)__s);
      if (a5)
LABEL_43:
        *a5 = v21;
    }
    else
    {
      v21 = a2 >> 1;
      if (a5)
        goto LABEL_43;
    }
    return v21 << (v12 == 1200);
  }
  if (a3 == 65001)
  {
    if (a2)
    {
      v17 = 0;
      v18 = 0;
      do
      {
        v19 = __s[v17];
        if (!__s[v17])
          break;
        if (v19 < 0)
        {
          if ((v19 + 62) >= 0x1E)
            LODWORD(v20) = (v19 & 0xFFFFFFF0) == 0xFFFFFFE0 ? 3 : 4 * ((v19 + 11) > 0xFAu);
          else
            LODWORD(v20) = 2;
        }
        else
        {
          LODWORD(v20) = 1;
        }
        if ((_DWORD)v20)
        {
          ++v18;
          v20 = v20;
        }
        else
        {
          v20 = 1;
        }
        v17 += v20;
      }
      while (v17 < a2);
    }
    else
    {
      v18 = 0;
      v17 = 0;
    }
    if (a5)
      *a5 = v18;
    v25 = v18 << (v12 == 1200);
    if (a4 == 65001)
      return v17;
    else
      return v25;
  }
  if (a4 != 65001)
  {
    if (a2 == -1)
      v7 = strlen(__s);
    if (a5)
      *a5 = v7;
    return v7 << (v12 == 1200);
  }
  if (a2)
  {
    v22 = 0;
    v11 = 0;
    while (1)
    {
      v23 = __s[v22];
      if (!__s[v22])
        goto LABEL_81;
      if (v10)
      {
        if (v10 == (char *)BuckToWChar)
        {
          v24 = BuckToWChar[v23];
        }
        else
        {
          if ((v23 & 0x80) == 0)
          {
            v27 = 0;
            goto LABEL_57;
          }
          v24 = *(_DWORD *)&v10[4 * (v23 - 128)];
        }
      }
      else
      {
        v24 = __s[v22];
      }
      v27 = 0;
      LOBYTE(v23) = v24;
      if ((unsigned __int16)v24 > 0x7Fu)
      {
        if ((unsigned __int16)v24 > 0x7FEu)
        {
          if ((_WORD)v24 != 0xFFFF)
          {
            LOBYTE(v27) = ((unsigned __int16)v24 >> 12) | 0xE0;
            BYTE1(v27) = (v24 >> 6) & 0x3F | 0x80;
            BYTE2(v27) = v24 & 0x3F | 0x80;
          }
        }
        else
        {
          LOBYTE(v27) = (v24 >> 6) - 64;
          BYTE1(v27) = v24 & 0x3F | 0x80;
        }
        goto LABEL_62;
      }
LABEL_57:
      LOBYTE(v27) = v23;
LABEL_62:
      v11 += strlen((const char *)&v27);
      if (v7 == ++v22)
      {
        v22 = v7;
        goto LABEL_81;
      }
    }
  }
  v11 = 0;
  v22 = 0;
LABEL_81:
  if (a5)
    *a5 = v22;
  return v11;
}

uint64_t TxtEncodingDetect(unsigned __int8 *a1, unint64_t a2, _QWORD *a3)
{
  int v5;
  int v6;
  uint64_t result;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _BOOL4 v41;
  _BOOL4 v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t i;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  BOOL v55;
  _BOOL4 v57;
  unint64_t v58;

  if (a3)
    *a3 = 0;
  if (!a2)
    return 65001;
  v5 = *a1;
  if (v5 != 239)
  {
    if (v5 == 254)
    {
      v10 = a1[1];
      if (v10 == 255)
        result = 1201;
      else
        result = 28591;
      if (!a3 || v10 != 255)
        return result;
      *a3 = 2;
    }
    else
    {
      if (v5 == 255)
      {
        v6 = a1[1];
        if (v6 == 254)
          result = 1200;
        else
          result = 28591;
        if (a3 && v6 == 254)
        {
          *a3 = 2;
          return 1200;
        }
        return result;
      }
      v11 = a2 - 2;
      if (a2 < 2)
        return 65001;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      if (a2 >= 0xFA00)
        v16 = 64000;
      else
        v16 = a2;
      while (2)
      {
        while (2)
        {
          v17 = 0;
          v18 = v12;
          while (1)
          {
            v19 = a1[v15 + v17];
            if ((v19 - 127) < 0xFFFFFF82)
              break;
            ++v17;
            if (v15 + v17 >= a2)
              goto LABEL_74;
          }
          v20 = v15 + v17;
          if (v15 + v17 < a2 - 1 && (v19 & 0xE0) == 0xC0 && (a1[v15 + 1 + v17] & 0xC0) == 0x80)
          {
            v27 = 2;
          }
          else if (v20 < v11
                 && (v19 & 0xF0) == 0xE0
                 && (v21 = &a1[v15 + v17], (v21[1] & 0xC0) == 0x80)
                 && (v21[2] & 0xC0) == 0x80)
          {
            v27 = 3;
          }
          else if (v20 < a2 - 3
                 && (v19 & 0xF8) == 0xF0
                 && (v22 = &a1[v15 + v17], (v22[1] & 0xC0) == 0x80)
                 && (v22[2] & 0xC0) == 0x80
                 && (a1[v15 + 3 + v17] & 0xC0) == 0x80)
          {
            v27 = 4;
          }
          else if (v20 < a2 - 4
                 && (v19 & 0xFC) == 0xF8
                 && (v23 = &a1[v15 + v17], (v23[1] & 0xC0) == 0x80)
                 && (v23[2] & 0xC0) == 0x80
                 && (v24 = &a1[v15 + v17], (v24[3] & 0xC0) == 0x80)
                 && (v24[4] & 0xC0) == 0x80)
          {
            v27 = 5;
          }
          else
          {
            if (v20 >= a2 - 5
              || (v19 & 0xFE) != 0xFC
              || (v25 = &a1[v15 + v17], (v25[1] & 0xC0) != 0x80)
              || (v25[2] & 0xC0) != 0x80
              || (v26 = &a1[v15 + v17], (v26[3] & 0xC0) != 0x80)
              || (v26[4] & 0xC0) != 0x80
              || (a1[v15 + 5 + v17] & 0xC0) != 0x80)
            {
              v12 = v18 + v17;
              v15 += v17 + 1;
              ++v13;
              if (v15 < a2)
                continue;
LABEL_74:
              v12 = v18 + v17;
              goto LABEL_75;
            }
            v27 = 6;
          }
          break;
        }
        v15 += v27 + v17;
        ++v14;
        v12 = v18 + v17;
        if (v15 < a2)
          continue;
        break;
      }
LABEL_75:
      if (v13)
        v28 = 1;
      else
        v28 = v14 == 0;
      result = 65001;
      if (!v28 || v12 == a2)
        return result;
      v57 = (a2 & 1) == 0 && (!v12 || 10 * a2 / v12 > 0xA);
      v29 = 0;
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v58 = v16;
      if (v16 <= 1)
        v35 = 1;
      else
        v35 = v16;
      do
      {
        v36 = a1[v34];
        if (memchr("\xAF\xB3\xB9\x9F\xE6\xD0\xFD", a1[v34], 6uLL))
          ++v29;
        if (memchr("\xF0\xD0\xFDvocalizer", v36, 4uLL))
          ++v30;
        v33 += v36;
        v32 += (v34 << 63 >> 63) & v36;
        if ((v34 & 1) != 0)
          v37 = 0;
        else
          v37 = v36;
        v31 += v37;
        ++v34;
      }
      while (v35 != v34);
      v38 = v33 / v58;
      v39 = v33 / v58;
      v40 = v33 / v58;
      if (v58 >= 3)
      {
        v39 = v32 / (v58 >> 1);
        v40 = v31 / (v58 >> 1);
      }
      v41 = v39 < 4 && v57;
      if (v41 && v40 > 0x32)
        return 1200;
      v42 = v40 < 4 && v57;
      if (!v42 || v39 <= 0x32)
      {
        if (v57)
        {
          v43 = 0;
          v44 = 0;
          v45 = 0;
          for (i = 0; i != v35; ++i)
          {
            v47 = a1[i];
            v45 += ((v47 - v38) * (v47 - v38));
            v48 = ((v47 - v39) * (v47 - v39));
            v44 += (i << 63 >> 63) & v48;
            if ((i & 1) != 0)
              v48 = 0;
            v43 += v48;
          }
          v49 = v45 / v58;
          v50 = v49;
          v51 = v49;
          if (v58 >= 3)
          {
            v50 = v44 / (v58 >> 1);
            v51 = v43 / (v58 >> 1);
          }
          if (a2 >= 0x21)
          {
            v52 = v49 - v50;
            if ((int)v49 - (int)v50 < 0)
              v52 = v50 - v49;
            if (v52 > 0x3E8)
              return 1200;
            v53 = v51 - v49;
            if ((int)v51 - (int)v49 < 0)
              v53 = v49 - v51;
            if (v53 > 0x3E8)
              return 1200;
            v54 = v51 - v50;
            if ((int)v51 - (int)v50 < 0)
              v54 = v50 - v51;
            if (v54 > 0x3E8)
              return 1200;
            v55 = v50 <= 2 * v49 && 2 * v50 >= v51;
            if (!v55 || 2 * v51 < v49)
              return 1200;
          }
        }
        if (v38 > 0x80)
          return 28597;
        if (v30 > 5)
          return 28599;
        if (v29 <= 0xA)
          return 28591;
        return 28592;
      }
    }
    return 1201;
  }
  if (a2 < 3)
    return 28591;
  v8 = a1[1];
  result = 28591;
  if (v8 == 187)
  {
    v9 = a1[2];
    result = v9 == 191 ? 65001 : 28591;
    if (a3 && v9 == 191)
    {
      *a3 = 3;
      return 65001;
    }
  }
  return result;
}

uint64_t txtlog_ObjOpen(uint64_t a1, const char *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;

  v4 = 2226135046;
  if (a4)
  {
    *a4 = 0;
    v9 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 552);
    if (v9)
    {
      v10 = v9;
      *(_QWORD *)v9 = a1;
      *(_WORD *)(strncpy((char *)(v9 + 8), a2, 0x100uLL) + 255) = 0;
      *(_QWORD *)(v10 + 520) = a3;
      *(_QWORD *)(v10 + 528) = 0;
      *(_DWORD *)(v10 + 536) = 0;
      *(_QWORD *)(v10 + 544) = 0;
      txtlog_resetLogFileName(v10);
      v4 = 0;
      *a4 = v10;
    }
    else
    {
      return 2226135050;
    }
  }
  return v4;
}

uint64_t txtlog_resetLogFileName(uint64_t a1)
{
  int v1;
  uint64_t v2;
  char *v3;
  const char *v4;
  uint64_t result;
  char v6[16];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  strcpy(v6, "vocalizer");
  v2 = a1 + 8;
  v1 = *(unsigned __int8 *)(a1 + 8);
  v3 = (char *)(a1 + 264);
  if (v1)
    v4 = "/";
  else
    v4 = &byte_1DEBD87CE;
  result = __sprintf_chk(v3, 0, 0x100uLL, "%s%s%s_%lu.txt", (const char *)v2, v4, v6, *(unsigned int *)(v2 + 528));
  ++*(_DWORD *)(v2 + 528);
  return result;
}

uint64_t txtlog_ObjClose(uint64_t a1)
{
  if (!a1)
    return 2226135046;
  heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), a1);
  return 0;
}

uint64_t txtlog_startSession(uint64_t *a1)
{
  unint64_t FileSize;
  uint64_t result;

  if (!a1)
    return 2226135046;
  if ((filespi_fopen(*(_QWORD *)(*a1 + 64), *(_QWORD **)(*a1 + 8), (uint64_t)(a1 + 33), (uint64_t)"w", a1 + 68) & 0x80000000) != 0)
    FileSize = 0;
  else
    FileSize = filespi_GetFileSize((_QWORD *)a1[68]);
  result = 0;
  a1[66] = FileSize;
  return result;
}

uint64_t txtlog_stopSession(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return 2226135046;
  result = *(_QWORD *)(a1 + 544);
  if (result)
  {
    result = filespi_fclose(result);
    *(_QWORD *)(a1 + 544) = 0;
  }
  return result;
}

uint64_t txtlog_recordEntry(uint64_t *a1, char *__s)
{
  size_t v4;
  size_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;

  if (!a1)
    return 2226135046;
  v4 = strlen(__s);
  v5 = a1[65];
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (v6 && a1[66] <= v7)
  {
    result = 0;
  }
  else
  {
    result = txtlog_switchLogFiles(a1);
    if ((result & 0x80000000) != 0)
      return result;
  }
  v9 = a1[68];
  if (v9)
  {
    if (filespi_fwrite((uint64_t)__s, 1, v4, v9))
    {
      result = filespi_fflush((_QWORD *)a1[68]);
      a1[66] += v4;
    }
    else
    {
      return 2226135045;
    }
  }
  return result;
}

uint64_t txtlog_switchLogFiles(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;

  v2 = a1 + 68;
  v3 = a1[68];
  if (!v3 || (result = filespi_fclose(v3), *v2 = 0, (result & 0x80000000) == 0))
  {
    txtlog_resetLogFileName((uint64_t)a1);
    LODWORD(result) = filespi_fopen(*(_QWORD *)(*a1 + 64), *(_QWORD **)(*a1 + 8), (uint64_t)(a1 + 33), (uint64_t)"w", v2);
    if ((int)result >= 0)
      result = result;
    else
      result = 2226135043;
    a1[66] = 0;
  }
  return result;
}

uint64_t txtlog_changeDirectory(uint64_t a1, const char *a2)
{
  if (!a1 || !a2)
    return 2226135046;
  *(_WORD *)(strncpy((char *)(a1 + 8), a2, 0x100uLL) + 255) = 0;
  *(_DWORD *)(a1 + 536) = 0;
  return txtlog_switchLogFiles((uint64_t *)a1);
}

uint64_t txtfmt_printEntry(uint64_t a1, char *__str, size_t __size)
{
  int v3;
  uint64_t v6;
  const void *v7;
  int v8;
  unint64_t v9;
  char *v10;

  v3 = __size;
  v6 = *(_QWORD *)(a1 + 128);
  v7 = *(const void **)(a1 + 136);
  v8 = *(unsigned __int16 *)(v6 + 64);
  if (*(_DWORD *)(a1 + 148))
  {
    snprintf(__str, __size, "%s|%hu|%s|%s|%lu|%p|SEVERE|%lu|%s", (const char *)a1, v8, (const char *)v6, (const char *)(v6 + 32), 0, v7, *(unsigned int *)(a1 + 148), *(const char **)(a1 + 152));
    if (*(_DWORD *)(a1 + 164))
    {
      v9 = 0;
      do
      {
        *(_WORD *)&__str[strlen(__str)] = 124;
        v10 = strcat(__str, *(const char **)(*(_QWORD *)(a1 + 168) + 8 * v9));
        *(_WORD *)&__str[strlen(v10)] = 61;
        strcat(__str, *(const char **)(*(_QWORD *)(a1 + 176) + 8 * v9++));
      }
      while (v9 < *(unsigned int *)(a1 + 164));
    }
    *(_WORD *)&__str[strlen(__str)] = 10;
  }
  else
  {
    snprintf(__str, __size, "%s|%hu|%s|%s|%lu|%p|%d|%s\n", (const char *)a1, v8, (const char *)v6, (const char *)(v6 + 32), 0, v7, *(_DWORD *)(a1 + 144), *(const char **)(a1 + 152));
  }
  __str[v3 - 1] = 0;
  return 0;
}

uint64_t txtfmt_vsprintFormattedEntry_v(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, va_list a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  _BYTE *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  size_t v21;
  char *v22;
  _BYTE *v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  char *v35;
  char v37;
  char __str[2048];
  _OWORD v39[11];
  uint64_t v40;
  uint64_t v41;

  v9 = MEMORY[0x1E0C80A78]();
  v16 = v13;
  v17 = v12;
  v18 = v11;
  v19 = v10;
  v21 = v20;
  v22 = (char *)v9;
  v41 = *MEMORY[0x1E0C80C00];
  v40 = 0;
  memset(v39, 0, sizeof(v39));
  if (v15)
  {
    v23 = v15;
    bzero(&v37, 0x800uLL);
    v24 = *v23;
    if (*v23)
    {
      v25 = 0;
      v26 = 0;
      do
      {
        __str[v25 + 2046] = v24;
        v27 = v26 + 1;
        if (v24 == 37)
        {
          v28 = v26 + 2;
          if (v23[v27] == 108)
            LODWORD(v27) = v28;
        }
        v24 = v23[(int)v27];
        ++v25;
        v29 = v27 > 0x7FF || v24 == 0;
        v26 = v27;
      }
      while (!v29);
      v25 = v25;
    }
    else
    {
      v25 = 0;
    }
    __str[v25 + 2046] = v24;
    vsnprintf(__str, 0x800uLL, &v37, a9);
    __str[2047] = 0;
    v35 = __str;
    v30 = v19;
    v31 = v18;
    v32 = v17;
    v33 = v16;
    v34 = 0;
  }
  else
  {
    v30 = v10;
    v31 = v11;
    v32 = v12;
    v33 = v13;
    v34 = v14;
    v35 = 0;
  }
  txtfmt_fillLogEntry((uint64_t)v39, v30, v31, v32, v33, v34, v35);
  txtfmt_printEntry((uint64_t)v39, v22, v21);
  return 0;
}

size_t txtfmt_fillLogEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, const char *a7)
{
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v18;
  size_t result;
  uint64_t v20;

  v20 = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  osspi_time(*(_QWORD *)(a2 + 64), &v20);
  osspi_ctime(*(_QWORD **)(a2 + 64), &v20, 128, (char *)a1);
  v14 = strlen((const char *)a1);
  if (v14)
  {
    v15 = v14 - 1;
    do
    {
      v16 = *(unsigned __int8 *)(a1 + v15);
      if (v16 != 13 && v16 != 10)
        break;
      v18 = v15;
      *(_BYTE *)(a1 + v15--) = 0;
    }
    while (v18);
  }
  *(_QWORD *)(a1 + 128) = a4;
  *(_QWORD *)(a1 + 136) = a3;
  *(_DWORD *)(a1 + 144) = a5;
  *(_DWORD *)(a1 + 148) = a6;
  *(_QWORD *)(a1 + 152) = a7;
  if (a7)
    result = strlen(a7);
  else
    result = 0;
  *(_DWORD *)(a1 + 160) = result;
  return result;
}

uint64_t logsub_logfile_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2226135041;
  result = 0;
  *a2 = &ITxtWriter;
  return result;
}

uint64_t txtwriter_ClassOpen(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t updated;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  const char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  char **v31;
  char *v32[2];
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v3 = 2226135040;
  v30 = 0;
  if (!a3)
    return 2226135046;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  if ((InitRsrcFunction(a1, a2, &v30) & 0x80000000) != 0)
    return 2226135047;
  v5 = (_QWORD *)heap_Calloc(*(_QWORD **)(v30 + 8), 1, 464);
  if (!v5)
    return 2226135050;
  v6 = (uint64_t)v5;
  *v5 = v30;
  updated = critsec_ObjOpen(*(_QWORD *)(v30 + 16), *(_QWORD **)(v30 + 8), v5 + 53);
  if ((updated & 0x80000000) != 0)
    goto LABEL_49;
  v8 = *(_QWORD *)(v30 + 40);
  if (!v8)
  {
    v3 = 2226135046;
    goto LABEL_52;
  }
  if ((v32[0] = 0, (paramc_ParamGetStr(v8, (uint64_t)"logfile.enabled", v32) & 0x80000000) != 0)
    && ((v9 = getenv("TTS_FILELOG_ENABLE")) != 0 ? (v10 = v9) : (v10 = "0"),
        v32[0] = v10,
        updated = paramc_ParamSetStr(v8, (uint64_t)"logfile.enabled", v10),
        (updated & 0x80000000) != 0)
    || (v11 = v32[0], updated = txtwriter_UpdateEnabled(v6, v32[0]), (updated & 0x80000000) != 0))
  {
LABEL_49:
    v3 = updated;
    goto LABEL_52;
  }
  if (v11)
    paramc_ParamRelease(v8);
  v32[0] = 0;
  if ((paramc_ParamGetStr(v8, (uint64_t)"logfile.filter.level", v32) & 0x80000000) != 0)
  {
    v12 = getenv("TTS_FILELOG_LEVEL");
    v13 = v12 ? v12 : "0";
    v32[0] = v13;
    if ((paramc_ParamSetStr(v8, (uint64_t)"logfile.filter.level", v13) & 0x80000000) != 0)
      goto LABEL_52;
  }
  v14 = v32[0];
  v15 = atoi(v32[0]);
  if ((v15 & 0x80000000) == 0)
  {
    *(_DWORD *)(v6 + 280) = v15;
    if (v14)
      paramc_ParamRelease(v8);
    v31 = 0;
    bzero(v32, 0x400uLL);
    if ((paramc_ParamGetStr(v8, (uint64_t)"logfile.filter.modules", &v31) & 0x80000000) != 0)
    {
      v16 = getenv("TTS_FILELOG_MODULES");
      if (!v16)
        v16 = &byte_1DEBD87CE;
      v31 = (char **)v16;
      LH_MapModuleNamesToIds(v16, (char *)v32, 0x400u);
      v31 = v32;
      if ((paramc_ParamSetStr(v8, (uint64_t)"logfile.filter.modules", (char *)v32) & 0x80000000) != 0)
        goto LABEL_52;
    }
    v17 = (char *)v31;
    updated = txtwriter_UpdateModules(v6, v31);
    if ((updated & 0x80000000) == 0)
    {
      if (v17 != &byte_1DEBD87CE)
        paramc_ParamRelease(v8);
      v32[0] = 0;
      if ((paramc_ParamGetStr(v8, (uint64_t)"logfile.filename.1", v32) & 0x80000000) == 0
        || ((v18 = getenv("TTS_FILELOG_DIRECTORY")) != 0 ? (v19 = v18) : (v19 = &byte_1DEBD87CE),
            v32[0] = v19,
            (paramc_ParamSetStr(v8, (uint64_t)"logfile.filename.1", v19) & 0x80000000) == 0))
      {
        v20 = v32[0];
        __strcpy_chk();
        txtlog_changeDirectory(*(_QWORD *)(v6 + 432), v20);
        if (v32[0] != &byte_1DEBD87CE)
          paramc_ParamRelease(v8);
        v32[0] = 0;
        if ((paramc_ParamGetStr(v8, (uint64_t)"logfile.max_size", v32) & 0x80000000) == 0
          || ((v21 = getenv("TTS_FILELOG_MAXSIZE")) != 0 ? (v22 = v21) : (v22 = "0"),
              v32[0] = v22,
              (paramc_ParamSetStr(v8, (uint64_t)"logfile.max_size", v22) & 0x80000000) == 0))
        {
          v23 = LH_atou(v32[0]);
          *(_QWORD *)(v6 + 272) = v23;
          if (v32[0] != "0")
          {
            paramc_ParamRelease(v8);
            v23 = *(_QWORD *)(v6 + 272);
          }
          v3 = txtlog_ObjOpen(*(_QWORD *)v6, (const char *)(v6 + 12), v23, (uint64_t *)(v6 + 432));
          if ((v3 & 0x80000000) == 0 && *(_DWORD *)(v6 + 8) == 1)
            txtlog_startSession(*(uint64_t **)(v6 + 432));
        }
      }
      goto LABEL_52;
    }
    goto LABEL_49;
  }
  v3 = 2226135047;
LABEL_52:
  *(_QWORD *)(v6 + 440) = 0;
  *(_QWORD *)(v6 + 448) = 0;
  *(_QWORD *)(v6 + 448) = txtwriter_ParamCheckChange;
  *(_QWORD *)(v6 + 456) = 0;
  *(_QWORD *)(v6 + 440) = v6;
  *(_QWORD *)(v6 + 456) = txtwriter_ParamLearnChange;
  v24 = *(_QWORD *)(v30 + 40);
  *(_OWORD *)v32 = *(_OWORD *)(v6 + 440);
  v33 = *(_QWORD *)(v6 + 456);
  paramc_ListenerAdd(v24, "logfile.enabled", v32);
  v25 = *(_QWORD *)(v30 + 40);
  *(_OWORD *)v32 = *(_OWORD *)(v6 + 440);
  v33 = *(_QWORD *)(v6 + 456);
  paramc_ListenerAdd(v25, "logfile.filter.level", v32);
  v26 = *(_QWORD *)(v30 + 40);
  *(_OWORD *)v32 = *(_OWORD *)(v6 + 440);
  v33 = *(_QWORD *)(v6 + 456);
  paramc_ListenerAdd(v26, "logfile.filter.modules", v32);
  v27 = *(_QWORD *)(v30 + 40);
  *(_OWORD *)v32 = *(_OWORD *)(v6 + 440);
  v33 = *(_QWORD *)(v6 + 456);
  paramc_ListenerAdd(v27, "logfile.filename.1", v32);
  v28 = *(_QWORD *)(v30 + 40);
  *(_OWORD *)v32 = *(_OWORD *)(v6 + 440);
  v33 = *(_QWORD *)(v6 + 456);
  paramc_ListenerAdd(v28, "logfile.max_size", v32);
  *(_QWORD *)a3 = v6;
  *(_DWORD *)(a3 + 8) = 472934;
  if ((v3 & 0x80000000) != 0)
  {
    txtwriter_ClassClose(v6, *(_QWORD *)(a3 + 8));
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
  }
  return v3;
}

uint64_t txtwriter_ClassClose(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  uint64_t v16;

  v3 = safeh_HandleCheck(a1, a2, 472934, 464);
  v4 = v3;
  if ((v3 & 0x80000000) != 0)
    return v3 & 0x1FFF | 0x84B02000;
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 432);
  if (v6)
  {
    if (*(_DWORD *)(a1 + 8))
    {
      txtlog_stopSession(v6);
      v6 = *(_QWORD *)(a1 + 432);
    }
    txtlog_ObjClose(v6);
  }
  v7 = *(_QWORD *)(v5 + 40);
  v15 = *(_OWORD *)(a1 + 440);
  v16 = *(_QWORD *)(a1 + 456);
  paramc_ListenerRemove(v7, "logfile.enabled", &v15);
  v8 = *(_QWORD *)(v5 + 40);
  v15 = *(_OWORD *)(a1 + 440);
  v16 = *(_QWORD *)(a1 + 456);
  paramc_ListenerRemove(v8, "logfile.filter.level", &v15);
  v9 = *(_QWORD *)(v5 + 40);
  v15 = *(_OWORD *)(a1 + 440);
  v16 = *(_QWORD *)(a1 + 456);
  paramc_ListenerRemove(v9, "logfile.filter.modules", &v15);
  v10 = *(_QWORD *)(v5 + 40);
  v15 = *(_OWORD *)(a1 + 440);
  v16 = *(_QWORD *)(a1 + 456);
  paramc_ListenerRemove(v10, "logfile.filename.1", &v15);
  v11 = *(_QWORD *)(v5 + 40);
  v15 = *(_OWORD *)(a1 + 440);
  v16 = *(_QWORD *)(a1 + 456);
  paramc_ListenerRemove(v11, "logfile.max_size", &v15);
  v12 = *(_QWORD *)(a1 + 424);
  if (v12)
    v13 = critsec_ObjClose(v12);
  else
    v13 = v4;
  heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), a1);
  return v13;
}

uint64_t txtwriter_ObjOpen(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v5 = safeh_HandleCheck(a1, a2, 472934, 464);
  v6 = v5;
  if ((v5 & 0x80000000) != 0)
    return v5 & 0x1FFF | 0x84B02000;
  if (!a3)
    return 2226135046;
  *a3 = 0;
  v7 = (_QWORD *)heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, 8);
  if (!v7)
    return 2226135050;
  *v7 = a1;
  *a3 = v7;
  return v6;
}

uint64_t txtwriter_ObjClose(uint64_t a1)
{
  if (!a1)
    return 2226135046;
  heap_Free(*(_QWORD **)(**(_QWORD **)a1 + 8), a1);
  return 0;
}

uint64_t txtwriter_OutText(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, va_list a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char __s[3072];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = 2226135046;
  if (a1 && a2 && a5)
  {
    v7 = *(_QWORD *)a1;
    if (!*(_DWORD *)(*(_QWORD *)a1 + 8) || *(_DWORD *)(v7 + 280) < a3)
      return 0;
    if (*(_DWORD *)(v7 + 284) == 1)
      goto LABEL_15;
    v9 = *(unsigned __int16 *)(v7 + 416);
    if (!*(_WORD *)(v7 + 416))
      return 0;
    v10 = *(unsigned __int16 *)(a2 + 64);
    if (*(unsigned __int16 *)(v7 + 288) == v10)
      goto LABEL_15;
    v11 = 0;
    do
    {
      v12 = v11;
      if (v9 - 1 == v11)
        break;
      v13 = *(unsigned __int16 *)(v7 + 290 + 2 * v11++);
    }
    while (v13 != v10);
    if (v12 + 1 < v9)
    {
LABEL_15:
      v14 = txtfmt_vsprintFormattedEntry_v((uint64_t)__s, 3072, *(_QWORD *)v7, a1, a2, a3, 0, a5, a6);
      if ((v14 & 0x80000000) != 0)
        return v14;
      v14 = critsec_Enter(*(_QWORD **)(v7 + 424));
      if ((v14 & 0x80000000) != 0)
      {
        return v14;
      }
      else
      {
        v6 = txtlog_recordEntry(*(uint64_t **)(v7 + 432), __s);
        critsec_Leave(*(_QWORD **)(v7 + 424));
      }
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

uint64_t txtwriter_OutPublic(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD **v9;
  int v14;
  unsigned int v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char __str[3072];
  char __s[16];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v6 = 2226135046;
  if (a1 && a2)
  {
    v9 = *(_QWORD ***)a1;
    if (*(_DWORD *)(*(_QWORD *)a1 + 8))
    {
      v21 = 0;
      *(_OWORD *)__s = 0u;
      v24 = 0u;
      v25 = 0u;
      v26 = 0u;
      v34 = 0;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v27 = 0u;
      osspi_time((*v9)[8], &v21);
      osspi_ctime((_QWORD *)(*v9)[8], &v21, 128, __s);
      v14 = strlen(__s);
      if (v14)
      {
        v15 = v14 - 1;
        do
        {
          v16 = __s[v15];
          if (v16 != 13 && v16 != 10)
            break;
          v18 = v15;
          __s[v15--] = 0;
        }
        while (v18);
      }
      *(_QWORD *)&v31 = a2;
      *((_QWORD *)&v31 + 1) = a1;
      LODWORD(v32) = 0;
      DWORD1(v32) = a3;
      *((_QWORD *)&v32 + 1) = &byte_1DEBD87CE;
      LODWORD(v33) = 0;
      DWORD1(v33) = a4;
      *((_QWORD *)&v33 + 1) = a5;
      v34 = a6;
      v19 = txtfmt_printEntry((uint64_t)__s, __str, 0xC00uLL);
      if ((v19 & 0x80000000) != 0)
        return v19;
      v19 = critsec_Enter(v9[53]);
      if ((v19 & 0x80000000) != 0)
      {
        return v19;
      }
      else
      {
        v6 = txtlog_recordEntry(v9[54], __str);
        critsec_Leave(v9[53]);
      }
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

uint64_t txtwriter_GetLogLevel(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)(*(_QWORD *)result + 8))
      return *(unsigned int *)(*(_QWORD *)result + 280);
    else
      return 1;
  }
  return result;
}

uint64_t txtwriter_IsModuleEnabled(uint64_t result, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (result)
  {
    v2 = *(_QWORD *)result;
    if (*(_DWORD *)(*(_QWORD *)result + 284) == 1)
      return 1;
    v3 = *(unsigned __int16 *)(v2 + 416);
    if (*(_WORD *)(v2 + 416))
    {
      if (*(unsigned __int16 *)(v2 + 288) == a2)
        return 1;
      v4 = 0;
      v5 = v2 + 290;
      do
      {
        v6 = v4;
        if (v3 - 1 == v4)
          break;
        v7 = *(unsigned __int16 *)(v5 + 2 * v4++);
      }
      while (v7 != a2);
      return v6 + 1 < v3;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t txtwriter_ParamCheckChange(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  if (a4)
    *a4 = 1;
  return 0;
}

uint64_t txtwriter_ParamLearnChange(uint64_t a1, char *__s1, _BYTE *a3)
{
  uint64_t v6;

  if (a3 && *a3)
  {
    v6 = 0;
    while (strcmp(__s1, (&txtwriter_ParamLearnChange_Param2UpdateFunction)[v6]))
    {
      v6 += 2;
      if (v6 == 10)
        return 0;
    }
    critsec_Enter(*(_QWORD **)(a1 + 424));
    ((void (*)(uint64_t, _BYTE *))(&txtwriter_ParamLearnChange_Param2UpdateFunction)[v6 + 1])(a1, a3);
    critsec_Leave(*(_QWORD **)(a1 + 424));
  }
  return 0;
}

uint64_t txtwriter_UpdateEnabled(uint64_t a1, char *a2)
{
  uint64_t result;
  char v4;
  int v5;
  _BOOL4 v7;

  result = 2226135047;
  if (a2)
  {
    v4 = *a2;
    if (*a2)
    {
      v5 = atoi(a2);
      result = 0;
      v7 = ((v4 - 84) & 0xDF) == 0 || v5 > 0;
      *(_DWORD *)(a1 + 8) = v7;
    }
  }
  return result;
}

uint64_t txtwriter_UpdateLevel(uint64_t a1, char *a2)
{
  int v3;
  int v4;
  uint64_t result;

  v3 = atoi(a2);
  if (v3 < 0)
    return 2226135047;
  v4 = v3;
  result = 0;
  *(_DWORD *)(a1 + 280) = v4;
  return result;
}

uint64_t txtwriter_UpdateModules(uint64_t a1, _BYTE *a2)
{
  unsigned __int16 v2;
  _BYTE *v3;
  int v4;
  int v5;
  BOOL v6;
  __int16 v7;
  int v8;

  if (!*a2)
    return 0;
  v2 = 0;
  *(_DWORD *)(a1 + 284) = 1;
  *(_WORD *)(a1 + 416) = 0;
LABEL_3:
  v3 = a2;
  while (1)
  {
    v4 = *v3;
    if (!*v3)
      break;
    v3 += 3;
    while (v4 == 32)
    {
      v4 = *(v3 - 2);
      ++v3;
    }
    if (v4 != 65 && v4 != 97)
    {
      a2 = v3 - 3;
      if ((v4 - 48) > 9)
      {
LABEL_18:
        v7 = 0;
      }
      else
      {
        v7 = 0;
        do
        {
          v7 = 10 * v7 + v4 - 48;
          v8 = *++a2;
          v4 = v8;
        }
        while ((v8 - 48) < 0xA);
      }
      v6 = (v4 & 0xDF) == 0;
      if ((v4 | 0x20) == 0x20 && v2 <= 0x3Fu)
      {
        *(_WORD *)(a1 + 2 * v2 + 288) = v7;
        v2 = *(_WORD *)(a1 + 416) + 1;
        *(_WORD *)(a1 + 416) = v2;
        *(_DWORD *)(a1 + 284) = 0;
        goto LABEL_3;
      }
      v5 = 0;
      v3 = a2;
      goto LABEL_22;
    }
    a2 = v3 - 3;
    if ((*(v3 - 2) | 0x20) != 0x6C
      || (*(v3 - 1) | 0x20) != 0x6C
      || (*v3 | 0x20) != 0x20)
    {
      goto LABEL_18;
    }
    v5 = 1;
    v6 = 1;
LABEL_22:
    *(_DWORD *)(a1 + 284) = v5;
    if (!v6)
      return 2226135047;
  }
  if (v2 <= 0x3Fu)
    return 0;
  return 2226135047;
}

uint64_t txtwriter_UpdateDirectory(uint64_t a1, const char *a2)
{
  __strcpy_chk();
  txtlog_changeDirectory(*(_QWORD *)(a1 + 432), a2);
  return 0;
}

uint64_t txtwriter_UpdateMaxSize(uint64_t a1, const char *a2)
{
  *(_QWORD *)(a1 + 272) = LH_atou(a2);
  return 0;
}

uint64_t featextract_closeStreams(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;

  v4 = 0;
  v5 = 0;
  v6 = 1;
  do
  {
    v7 = v6;
    v8 = (uint64_t *)(a2 + 16 * v4);
    if (*v8)
    {
      v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 72))(*v8, v8[1]);
      *v8 = safeh_GetNullHandle();
      v8[1] = v10;
      if ((int)v5 > -1 && v9 < 0)
        v5 = v9;
      else
        v5 = v5;
    }
    v6 = 0;
    v4 = 1;
  }
  while ((v7 & 1) != 0);
  return v5;
}

uint64_t featextract_logFeatures(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  int v8;
  char v10;
  char v11;
  char v12[16];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = *(__int16 *)(a2 + 10);
  if (log_GetLogLevel(*(_QWORD *)(a1 + 32)) >= 8)
  {
    v5 = v4 & ~(v4 >> 31);
    LH_itoa(0x4Eu, v12, 0xAu);
    v6 = 0;
    while ((_DWORD)v6 != 4)
    {
      if ((_DWORD)v6 == 3)
      {
        v7 = "application/x-realspeak-usdurs;version=4.0";
        goto LABEL_9;
      }
      if ((_DWORD)v6 == 2)
      {
        v11 = 5;
        v10 = 0;
        log_OutBinary(*(_QWORD *)(a1 + 32), (uint64_t)"FEATEXTRACT", 99, 0, (uint64_t)v12, (uint64_t)"text/x-realspeak-usphonemes;charset=tts",
          (uint64_t)&v11,
          1u,
          0);
        log_OutBinary(*(_QWORD *)(a1 + 32), (uint64_t)"FEATEXTRACT", 99, 0, (uint64_t)v12, (uint64_t)"text/x-realspeak-usphonemes;charset=tts",
          *(_QWORD *)(a2 + 8 * v6 + 16),
          v5,
          0);
        log_OutBinary(*(_QWORD *)(a1 + 32), (uint64_t)"FEATEXTRACT", 99, 0, (uint64_t)v12, (uint64_t)"text/x-realspeak-usphonemes;charset=tts",
          (uint64_t)&v10,
          1u,
          0);
      }
LABEL_13:
      if (++v6 == 218)
        return 0;
    }
    v7 = "application/x-realspeak-usplosives;version=4.0";
LABEL_9:
    v8 = *(unsigned __int8 *)(*(_QWORD *)a2 + v6 + 2748);
    if (v8 == 2)
    {
      log_OutBinary(*(_QWORD *)(a1 + 32), (uint64_t)"FEATEXTRACT", 99, 0, (uint64_t)v12, (uint64_t)v7, *(_QWORD *)(a2 + 8 * v6 + 1760), 2 * v5, 0);
    }
    else if (v8 == 1)
    {
      log_OutBinary(*(_QWORD *)(a1 + 32), (uint64_t)"FEATEXTRACT", 99, 0, (uint64_t)v12, (uint64_t)v7, *(_QWORD *)(a2 + 8 * v6 + 16), v5, 0);
    }
    goto LABEL_13;
  }
  return 0;
}

uint64_t featextract_writeFeatures(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  _OWORD *v22;
  uint64_t j;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  int *v77;
  _DWORD *v78;
  int v79;
  int v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _BYTE *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _BYTE *v173;

  v173 = 0;
  v10 = (*(uint64_t (**)(_QWORD, _QWORD, _BYTE **, _QWORD))(a2 + 112))(*(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), &v173, 864 * *(unsigned __int16 *)(a5 + 10));
  if ((v10 & 0x80000000) != 0)
  {
    v171 = v10;
    goto LABEL_301;
  }
  v15 = *(__int16 *)(a5 + 10);
  if (v15 < 1)
    goto LABEL_298;
  v16 = 0;
  v17 = 0;
  do
  {
    for (i = 12; i != 50; ++i)
      v173[i] = 0;
    v19 = 0;
    *((_WORD *)v173 + 25) = 0;
    do
    {
      v20 = v173;
      v21 = &v173[4 * v19];
      *((_DWORD *)v21 + 18) = 0;
      *((_DWORD *)v21 + 89) = 0;
      v20[v19++ + 640] = 0;
    }
    while (v19 != 71);
    v22 = v173 + 712;
    *(_OWORD *)(v173 + 712) = 0uLL;
    v22[1] = 0uLL;
    v22[2] = 0uLL;
    v22[3] = 0uLL;
    for (j = 778; j != 863; ++j)
      v173[j] = 0;
    v24 = v173;
    *(_QWORD *)(v173 + 60) = 0;
    *(_QWORD *)(v24 + 52) = 0;
    v24[68] = 0;
    v25 = *(_QWORD *)(a5 + 1800);
    if (v25)
      *(_WORD *)v24 = *(_WORD *)(v25 + 2 * v17);
    v26 = *(_QWORD *)(a5 + 32);
    if (v26)
      v24[2] = *(_BYTE *)(v26 + v17);
    v27 = *(unsigned __int16 *)(a4 + 3578);
    if (*(_WORD *)(a4 + 3578))
    {
      v28 = *(_QWORD *)(a5 + 3608);
      *((_DWORD *)v24 + 1) = *(_DWORD *)(v28 + 4 * (int)v17 * v27);
      *((_DWORD *)v24 + 2) = *(_DWORD *)(v28 + 4 * (v27 + (int)v17 * v27 - 1));
    }
    v29 = *(_QWORD *)(a5 + 1696);
    if (v29)
      v24[776] = *(_BYTE *)(v29 + v17);
    v30 = *(_QWORD *)(a5 + 1704);
    if (v30)
      v24[777] = *(_BYTE *)(v30 + v17);
    if (*(_WORD *)(a4 + 2966))
    {
      v31 = 0;
      v32 = 0;
      while (1)
      {
        v33 = v17 * *(unsigned __int16 *)(*(_QWORD *)a5 + 2966);
        v34 = v173;
        v35 = &v173[4 * v32];
        *((_DWORD *)v35 + 18) = *(_DWORD *)(*(_QWORD *)(a5 + 3568) + 4 * (v32 + v33));
        *((_DWORD *)v35 + 89) = *(_DWORD *)(*(_QWORD *)(a5 + 3576) + 4 * (v32 + v33));
        v34[v32 + 640] = *(_BYTE *)(*(_QWORD *)(a5 + 3600) + v33 + v32);
        switch(*(_DWORD *)(*(_QWORD *)(a4 + 2968) + v31))
        {
          case 5:
            v38 = *(_QWORD *)(a5 + 216);
            if (v38)
              v173[22] = *(_BYTE *)(v38 + v17);
            v39 = *(_QWORD *)(a5 + 224);
            if (v39)
              v173[23] = *(_BYTE *)(v39 + v17);
            v40 = *(_QWORD *)(a5 + 1712);
            if (!v40)
            {
              v41 = v173;
LABEL_92:
              *((_WORD *)v41 + 22) = 0;
              goto LABEL_110;
            }
            v41 = v173;
            if (!*(_QWORD *)(a5 + 1720))
              goto LABEL_92;
            v173[44] = *(_BYTE *)(v40 + v17);
            v41[45] = *(_BYTE *)(*(_QWORD *)(a5 + 1720) + v17);
LABEL_110:
            ++v32;
            v31 += 32;
            if (v32 >= *(unsigned __int16 *)(a4 + 2966))
              goto LABEL_111;
            break;
          case 6:
            v42 = *(_QWORD *)(a5 + 232);
            if (v42)
              v173[24] = *(_BYTE *)(v42 + v17);
            v43 = *(_QWORD *)(a5 + 240);
            if (v43)
              v173[25] = *(_BYTE *)(v43 + v17);
            v44 = *(_QWORD *)(a5 + 1728);
            if (!v44)
            {
              v45 = v173;
LABEL_94:
              *((_WORD *)v45 + 23) = 0;
              goto LABEL_110;
            }
            v45 = v173;
            if (!*(_QWORD *)(a5 + 1736))
              goto LABEL_94;
            v173[46] = *(_BYTE *)(v44 + v17);
            v45[47] = *(_BYTE *)(*(_QWORD *)(a5 + 1736) + v17);
            goto LABEL_110;
          case 7:
            v46 = *(_QWORD *)(a5 + 152);
            if (v46)
              v173[13] = *(_BYTE *)(v46 + v17);
            goto LABEL_110;
          case 8:
            v47 = *(_QWORD *)(a5 + 160);
            if (v47)
              v173[14] = *(_BYTE *)(v47 + v17);
            goto LABEL_110;
          case 9:
            v48 = *(_QWORD *)(a5 + 176);
            if (v48)
              v173[15] = *(_BYTE *)(v48 + v17);
            goto LABEL_110;
          case 0xA:
            v49 = *(_QWORD *)(a5 + 184);
            if (v49)
              v173[16] = *(_BYTE *)(v49 + v17);
            goto LABEL_110;
          case 0xB:
            v50 = *(_QWORD *)(a5 + 248);
            if (v50)
              v173[17] = *(_BYTE *)(v50 + v17);
            goto LABEL_110;
          case 0xC:
          case 0x13:
            v36 = *(_QWORD *)(a5 + 144);
            if (v36)
              v173[18] = *(_BYTE *)(v36 + v17);
            goto LABEL_110;
          case 0xD:
          case 0x14:
            v37 = *(_QWORD *)(a5 + 88);
            if (v37)
              v173[21] = *(_BYTE *)(v37 + v17);
            goto LABEL_110;
          case 0xE:
            v51 = *(_QWORD *)(a5 + 264);
            if (v51)
              v173[26] = *(_BYTE *)(v51 + v17);
            goto LABEL_110;
          case 0xF:
            v52 = *(_QWORD *)(a5 + 272);
            if (v52)
              v173[27] = *(_BYTE *)(v52 + v17);
            goto LABEL_110;
          case 0x10:
            v53 = *(_QWORD *)(a5 + 168);
            if (v53)
              v173[28] = *(_BYTE *)(v53 + v17);
            goto LABEL_110;
          case 0x12:
            v54 = *(_QWORD *)(a5 + 280);
            if (v54)
              v173[29] = *(_BYTE *)(v54 + v17);
            goto LABEL_110;
          case 0x1E:
            v55 = *(_QWORD *)(a5 + 536);
            if (v55)
              v173[30] = *(_BYTE *)(v55 + v17);
            else
              v173[30] = 0;
            goto LABEL_110;
          case 0x1F:
            v56 = *(_QWORD *)(a5 + 544);
            if (v56)
              v173[31] = *(_BYTE *)(v56 + v17);
            else
              v173[31] = 0;
            goto LABEL_110;
          case 0x20:
            v57 = *(_QWORD *)(a5 + 552);
            if (v57)
              v173[32] = *(_BYTE *)(v57 + v17);
            else
              v173[32] = 0;
            goto LABEL_110;
          case 0x21:
            v58 = *(_QWORD *)(a5 + 560);
            if (v58)
              v173[33] = *(_BYTE *)(v58 + v17);
            else
              v173[33] = 0;
            goto LABEL_110;
          case 0x22:
            v59 = *(_QWORD *)(a5 + 568);
            if (v59)
              v173[34] = *(_BYTE *)(v59 + v17);
            else
              v173[34] = 0;
            goto LABEL_110;
          case 0x23:
            v60 = *(_QWORD *)(a5 + 576);
            if (v60)
              v173[35] = *(_BYTE *)(v60 + v17);
            else
              v173[35] = 0;
            goto LABEL_110;
          case 0x24:
            v61 = *(_QWORD *)(a5 + 632);
            if (v61)
              v173[36] = *(_BYTE *)(v61 + v17);
            else
              v173[36] = 0;
            goto LABEL_110;
          case 0x25:
            v62 = *(_QWORD *)(a5 + 592);
            if (v62)
              v173[37] = *(_BYTE *)(v62 + v17);
            else
              v173[37] = 0;
            goto LABEL_110;
          case 0x26:
            v63 = *(_QWORD *)(a5 + 600);
            if (v63)
              v173[38] = *(_BYTE *)(v63 + v17);
            else
              v173[38] = 0;
            goto LABEL_110;
          case 0x27:
            v64 = *(_QWORD *)(a5 + 608);
            if (v64)
              v173[39] = *(_BYTE *)(v64 + v17);
            else
              v173[39] = 0;
            goto LABEL_110;
          case 0x28:
            v65 = *(_QWORD *)(a5 + 616);
            if (v65)
              v173[40] = *(_BYTE *)(v65 + v17);
            goto LABEL_110;
          case 0x29:
            v66 = *(_QWORD *)(a5 + 624);
            if (v66)
              v173[41] = *(_BYTE *)(v66 + v17);
            else
              v173[41] = 0;
            goto LABEL_110;
          case 0x2B:
            v67 = *(_QWORD *)(a5 + 1384);
            if (v67)
              v173[42] = *(_BYTE *)(v67 + v17);
            else
              v173[42] = 0;
            goto LABEL_110;
          case 0x2C:
            v68 = *(_QWORD *)(a5 + 1392);
            if (v68)
              v173[43] = *(_BYTE *)(v68 + v17);
            else
              v173[43] = 0;
            goto LABEL_110;
          case 0x45:
            v69 = *(_QWORD *)(a5 + 1744);
            if (v69)
              v173[48] = *(_BYTE *)(v69 + v17);
            else
              v173[48] = 0;
            goto LABEL_110;
          case 0x46:
            v70 = *(_QWORD *)(a5 + 1752);
            if (v70)
              v173[49] = *(_BYTE *)(v70 + v17);
            else
              v173[49] = 0;
            goto LABEL_110;
          default:
            goto LABEL_110;
        }
      }
    }
LABEL_111:
    if (*(_BYTE *)(*(_QWORD *)(a5 + 72) + v17))
      v173[19] = *(_BYTE *)(*(_QWORD *)(a5 + 72) + v17);
    v71 = *(_QWORD *)(a5 + 80);
    if (v71)
      v173[20] = *(_BYTE *)(v71 + v17);
    v72 = *(_QWORD *)(a5 + 48);
    if (v72)
      v173[12] = *(_BYTE *)(v72 + v17);
    v73 = *(_QWORD *)(a5 + 1784);
    if (v73)
      *((_WORD *)v173 + 25) = *(_WORD *)(v73 + 2 * v17);
    v74 = *(unsigned __int16 *)(a4 + 3360);
    if (*(_WORD *)(a4 + 3360))
    {
      v75 = v16 * *(unsigned __int16 *)(*(_QWORD *)a5 + 3360);
      v76 = (int *)(*(_QWORD *)(a5 + 3592) + v75);
      v77 = (int *)(*(_QWORD *)(a5 + 3584) + v75);
      v78 = v173 + 744;
      do
      {
        v79 = *v77++;
        *(v78 - 8) = v79;
        v80 = *v76++;
        *v78++ = v80;
        --v74;
      }
      while (v74);
    }
    v81 = *(_QWORD *)(a5 + 3552);
    if (v81)
      *(_QWORD *)(v173 + 52) = *(_QWORD *)(v81 + 8 * v17);
    if (*(_DWORD *)(a4 + 2560))
    {
      v82 = v173;
      v83 = *(_QWORD *)(a5 + 3560) + 9 * v17;
      v84 = *(_BYTE *)(v83 + 8);
      *(_QWORD *)(v173 + 60) = *(_QWORD *)v83;
      v82[68] = v84;
    }
    v85 = *(_QWORD *)(a5 + 1000);
    if (v85)
      v173[778] = *(_BYTE *)(v85 + v17);
    v86 = *(_QWORD *)(a5 + 32);
    if (v86)
      v173[779] = *(_BYTE *)(v86 + v17);
    v87 = *(_QWORD *)(a5 + 1008);
    if (v87)
      v173[780] = *(_BYTE *)(v87 + v17);
    v88 = *(_QWORD *)(a5 + 600);
    if (v88)
      v173[781] = *(_BYTE *)(v88 + v17);
    v89 = *(_QWORD *)(a5 + 72);
    if (v89)
      v173[782] = *(_BYTE *)(v89 + v17);
    v90 = *(_QWORD *)(a5 + 80);
    if (v90)
      v173[783] = *(_BYTE *)(v90 + v17);
    v91 = *(_QWORD *)(a5 + 560);
    if (v91)
      v173[784] = *(_BYTE *)(v91 + v17);
    v92 = *(_QWORD *)(a5 + 112);
    if (v92)
      v173[785] = *(_BYTE *)(v92 + v17);
    v93 = *(_QWORD *)(a5 + 184);
    if (v93)
      v173[786] = *(_BYTE *)(v93 + v17);
    v94 = *(_QWORD *)(a5 + 304);
    if (v94)
      v173[787] = *(_BYTE *)(v94 + v17);
    v95 = *(_QWORD *)(a5 + 288);
    if (v95)
      v173[788] = *(_BYTE *)(v95 + v17);
    v96 = *(_QWORD *)(a5 + 312);
    if (v96)
      v173[789] = *(_BYTE *)(v96 + v17);
    v97 = *(_QWORD *)(a5 + 296);
    if (v97)
      v173[790] = *(_BYTE *)(v97 + v17);
    v98 = *(_QWORD *)(a5 + 128);
    if (v98)
      v173[791] = *(_BYTE *)(v98 + v17);
    v99 = *(_QWORD *)(a5 + 96);
    if (v99)
      v173[792] = *(_BYTE *)(v99 + v17);
    v100 = *(_QWORD *)(a5 + 104);
    if (v100)
      v173[793] = *(_BYTE *)(v100 + v17);
    v101 = *(_QWORD *)(a5 + 144);
    if (v101)
      v173[794] = *(_BYTE *)(v101 + v17);
    v102 = *(_QWORD *)(a5 + 192);
    if (v102)
      v173[795] = *(_BYTE *)(v102 + v17);
    v103 = *(_QWORD *)(a5 + 544);
    if (v103)
      v173[796] = *(_BYTE *)(v103 + v17);
    v104 = *(_QWORD *)(a5 + 608);
    if (v104)
      v173[797] = *(_BYTE *)(v104 + v17);
    v105 = *(_QWORD *)(a5 + 168);
    if (v105)
      v173[798] = *(_BYTE *)(v105 + v17);
    v106 = *(_QWORD *)(a5 + 248);
    if (v106)
      v173[799] = *(_BYTE *)(v106 + v17);
    v107 = *(_QWORD *)(a5 + 120);
    if (v107)
      v173[800] = *(_BYTE *)(v107 + v17);
    v108 = *(_QWORD *)(a5 + 136);
    if (v108)
      v173[801] = *(_BYTE *)(v108 + v17);
    v109 = *(_QWORD *)(a5 + 176);
    if (v109)
      v173[802] = *(_BYTE *)(v109 + v17);
    v110 = *(_QWORD *)(a5 + 264);
    if (v110)
      v173[803] = *(_BYTE *)(v110 + v17);
    v111 = *(_QWORD *)(a5 + 272);
    if (v111)
      v173[804] = *(_BYTE *)(v111 + v17);
    v112 = *(_QWORD *)(a5 + 616);
    if (v112)
      v173[805] = *(_BYTE *)(v112 + v17);
    v113 = *(_QWORD *)(a5 + 624);
    if (v113)
      v173[806] = *(_BYTE *)(v113 + v17);
    v114 = *(_QWORD *)(a5 + 568);
    if (v114)
      v173[807] = *(_BYTE *)(v114 + v17);
    v115 = *(_QWORD *)(a5 + 576);
    if (v115)
      v173[808] = *(_BYTE *)(v115 + v17);
    v116 = *(_QWORD *)(a5 + 584);
    if (v116)
      v173[809] = *(_BYTE *)(v116 + v17);
    v117 = *(_QWORD *)(a5 + 592);
    if (v117)
      v173[810] = *(_BYTE *)(v117 + v17);
    v118 = *(_QWORD *)(a5 + 152);
    if (v118)
      v173[811] = *(_BYTE *)(v118 + v17);
    v119 = *(_QWORD *)(a5 + 88);
    if (v119)
      v173[812] = *(_BYTE *)(v119 + v17);
    v120 = *(_QWORD *)(a5 + 160);
    if (v120)
      v173[813] = *(_BYTE *)(v120 + v17);
    v121 = *(_QWORD *)(a5 + 552);
    if (v121)
      v173[814] = *(_BYTE *)(v121 + v17);
    v122 = *(_QWORD *)(a5 + 456);
    if (v122)
      v173[815] = *(_BYTE *)(v122 + v17);
    v123 = *(_QWORD *)(a5 + 984);
    if (v123)
      v173[816] = *(_BYTE *)(v123 + v17);
    v124 = *(_QWORD *)(a5 + 992);
    if (v124)
      v173[817] = *(_BYTE *)(v124 + v17);
    v125 = *(_QWORD *)(a5 + 1000);
    if (v125)
      v173[818] = *(_BYTE *)(v125 + v17);
    v126 = *(_QWORD *)(a5 + 1008);
    if (v126)
      v173[819] = *(_BYTE *)(v126 + v17);
    v127 = *(_QWORD *)(a5 + 1016);
    if (v127)
      v173[820] = *(_BYTE *)(v127 + v17);
    v128 = *(_QWORD *)(a5 + 1024);
    if (v128)
      v173[821] = *(_BYTE *)(v128 + v17);
    v129 = *(_QWORD *)(a5 + 1032);
    if (v129)
      v173[822] = *(_BYTE *)(v129 + v17);
    v130 = *(_QWORD *)(a5 + 1040);
    if (v130)
      v173[823] = *(_BYTE *)(v130 + v17);
    v131 = *(_QWORD *)(a5 + 1048);
    if (v131)
      v173[824] = *(_BYTE *)(v131 + v17);
    v132 = *(_QWORD *)(a5 + 1056);
    if (v132)
      v173[825] = *(_BYTE *)(v132 + v17);
    v133 = *(_QWORD *)(a5 + 1064);
    if (v133)
      v173[826] = *(_BYTE *)(v133 + v17);
    v134 = *(_QWORD *)(a5 + 1072);
    if (v134)
      v173[827] = *(_BYTE *)(v134 + v17);
    v135 = *(_QWORD *)(a5 + 1080);
    if (v135)
      v173[828] = *(_BYTE *)(v135 + v17);
    v136 = *(_QWORD *)(a5 + 1088);
    if (v136)
      v173[829] = *(_BYTE *)(v136 + v17);
    v137 = *(_QWORD *)(a5 + 1096);
    if (v137)
      v173[830] = *(_BYTE *)(v137 + v17);
    v138 = *(_QWORD *)(a5 + 1104);
    if (v138)
      v173[831] = *(_BYTE *)(v138 + v17);
    v139 = *(_QWORD *)(a5 + 1112);
    if (v139)
      v173[832] = *(_BYTE *)(v139 + v17);
    v140 = *(_QWORD *)(a5 + 1120);
    if (v140)
      v173[833] = *(_BYTE *)(v140 + v17);
    v141 = *(_QWORD *)(a5 + 1128);
    if (v141)
      v173[834] = *(_BYTE *)(v141 + v17);
    v142 = *(_QWORD *)(a5 + 1136);
    v143 = v173;
    if (v142)
      v173[835] = *(_BYTE *)(v142 + v17);
    v144 = *(_QWORD *)(a5 + 1144);
    if (v144)
      v143[836] = *(_BYTE *)(v144 + v17);
    v145 = *(_QWORD *)(a5 + 1160);
    if (v145)
      v143[837] = *(_BYTE *)(v145 + v17);
    v146 = *(_QWORD *)(a5 + 1152);
    if (v146)
      v143[838] = *(_BYTE *)(v146 + v17);
    v147 = *(_QWORD *)(a5 + 1168);
    if (v147)
      v143[839] = *(_BYTE *)(v147 + v17);
    v148 = *(_QWORD *)(a5 + 1176);
    if (v148)
      v143[840] = *(_BYTE *)(v148 + v17);
    v149 = *(_QWORD *)(a5 + 1184);
    if (v149)
      v143[841] = *(_BYTE *)(v149 + v17);
    v150 = *(_QWORD *)(a5 + 1192);
    if (v150)
      v143[842] = *(_BYTE *)(v150 + v17);
    v151 = *(_QWORD *)(a5 + 1200);
    if (v151)
      v143[843] = *(_BYTE *)(v151 + v17);
    v152 = *(_QWORD *)(a5 + 1208);
    if (v152)
      v143[844] = *(_BYTE *)(v152 + v17);
    v153 = *(_QWORD *)(a5 + 1216);
    if (v153)
      v143[845] = *(_BYTE *)(v153 + v17);
    v154 = *(_QWORD *)(a5 + 1224);
    if (v154)
      v143[846] = *(_BYTE *)(v154 + v17);
    v155 = *(_QWORD *)(a5 + 1232);
    if (v155)
      v143[847] = *(_BYTE *)(v155 + v17);
    v156 = *(_QWORD *)(a5 + 1240);
    if (v156)
      v143[848] = *(_BYTE *)(v156 + v17);
    v157 = *(_QWORD *)(a5 + 1248);
    if (v157)
      v143[849] = *(_BYTE *)(v157 + v17);
    v158 = *(_QWORD *)(a5 + 1256);
    if (v158)
      v143[850] = *(_BYTE *)(v158 + v17);
    v159 = *(_QWORD *)(a5 + 1264);
    if (v159)
      v143[851] = *(_BYTE *)(v159 + v17);
    v160 = *(_QWORD *)(a5 + 1272);
    if (v160)
      v143[852] = *(_BYTE *)(v160 + v17);
    v161 = *(_QWORD *)(a5 + 1280);
    if (v161)
      v143[853] = *(_BYTE *)(v161 + v17);
    v162 = *(_QWORD *)(a5 + 1288);
    if (v162)
      v143[854] = *(_BYTE *)(v162 + v17);
    v163 = *(_QWORD *)(a5 + 1296);
    if (v163)
      v143[855] = *(_BYTE *)(v163 + v17);
    v164 = *(_QWORD *)(a5 + 1304);
    if (v164)
      v143[856] = *(_BYTE *)(v164 + v17);
    v165 = *(_QWORD *)(a5 + 1312);
    if (v165)
      v143[857] = *(_BYTE *)(v165 + v17);
    v166 = *(_QWORD *)(a5 + 1320);
    if (v166)
      v143[860] = *(_BYTE *)(v166 + v17);
    v167 = *(_QWORD *)(a5 + 1328);
    if (v167)
      v143[861] = *(_BYTE *)(v167 + v17);
    v168 = *(_QWORD *)(a5 + 1336);
    if (v168)
      v143[862] = *(_BYTE *)(v168 + v17);
    v169 = *(_QWORD *)(a5 + 1384);
    if (v169)
      v143[858] = *(_BYTE *)(v169 + v17);
    v170 = *(_QWORD *)(a5 + 1392);
    if (v170)
      v143[859] = *(_BYTE *)(v170 + v17);
    v173 = v143 + 864;
    ++v17;
    v16 += 4;
  }
  while (v17 < *(__int16 *)(a5 + 10));
  LOWORD(v15) = *(_WORD *)(a5 + 10);
LABEL_298:
  v171 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a2 + 120))(*(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), 864 * (unsigned __int16)v15);
  if ((v171 & 0x80000000) != 0)
LABEL_301:
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"FEATEXTRACT", 55008, "%s%s%s%x", v11, v12, v13, v14, "contentType");
  return v171;
}

uint64_t featextract_adjustSilAudioOrder(uint64_t result)
{
  int *v1;
  unsigned __int16 *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;

  v1 = *(int **)(result + 3512);
  if (v1)
  {
    if (*(_DWORD *)(result + 3520))
    {
      v2 = *(unsigned __int16 **)(result + 1800);
      v3 = *v2;
      if (*v2)
      {
        v4 = 0;
        while (*v1 != 26)
        {
          ++v4;
          v1 += 8;
          if (v3 == v4)
            return result;
        }
        if (v3 <= (unsigned __int16)v4)
          goto LABEL_15;
        v5 = 0;
        v6 = v3 - v4;
        do
        {
          v7 = *v1;
          v1 += 8;
          if (v7 == 8)
            v5 = 1;
          --v6;
        }
        while (v6);
        if (!v5)
        {
LABEL_15:
          v2[1] += v3 - v4;
          *v2 = v4;
        }
      }
    }
  }
  return result;
}

uint64_t MapProsodyValue_Scaling(int a1, int a2, int a3, int a4, int a5)
{
  int v5;

  v5 = ((2 * a4 * a5) | 1) / (2 * a2);
  if (v5 <= a1)
    v5 = a1;
  if (v5 >= a3)
    return a3;
  else
    return v5;
}

uint64_t betX_CreateRegularBrokerString(uint64_t a1, int a2, char *a3, size_t a4)
{
  uint64_t result;
  char *v9;
  size_t v10;
  char *__s;
  int v12;
  char v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v12 = 0;
  __s = 0;
  *a3 = 0;
  if ((a2 & 0xFFFFFFFD) != 0)
    return 2364547079;
  if (a2)
    v9 = "synth";
  else
    v9 = "select";
  result = strhelper_SafeCat(a3, v9, 0xFFFFFFFFFFFFFFFFLL, a4);
  if ((result & 0x80000000) == 0)
  {
    result = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"voice", &__s);
    if ((result & 0x80000000) == 0)
    {
      result = strhelper_SafeCat(a3, "/", 0xFFFFFFFFFFFFFFFFLL, a4);
      if ((result & 0x80000000) == 0)
      {
        result = strhelper_SafeCat(a3, __s, 0xFFFFFFFFFFFFFFFFLL, a4);
        if ((result & 0x80000000) == 0)
        {
          result = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"voicemodel", &__s);
          if ((result & 0x80000000) == 0)
          {
            result = strhelper_SafeCat(a3, "/", 0xFFFFFFFFFFFFFFFFLL, a4);
            if ((result & 0x80000000) == 0)
            {
              result = strhelper_SafeCat(a3, __s, 0xFFFFFFFFFFFFFFFFLL, a4);
              if ((result & 0x80000000) == 0)
              {
                result = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"reduction", &__s);
                if ((result & 0x80000000) == 0)
                {
                  result = strhelper_SafeCat(a3, "/", 0xFFFFFFFFFFFFFFFFLL, a4);
                  if ((result & 0x80000000) == 0)
                  {
                    result = strhelper_SafeCat(a3, __s, 0xFFFFFFFFFFFFFFFFLL, a4);
                    if ((result & 0x80000000) == 0)
                    {
                      if (a2 != 2
                        || (result = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"coder", &__s),
                            (result & 0x80000000) == 0)
                        && (result = strhelper_SafeCat(a3, "/", 0xFFFFFFFFFFFFFFFFLL, a4), (result & 0x80000000) == 0)
                        && (result = strhelper_SafeCat(a3, __s, 0xFFFFFFFFFFFFFFFFLL, a4), (result & 0x80000000) == 0))
                      {
                        result = paramc_ParamGetInt(*(_QWORD *)(a1 + 40), (uint64_t)"frequencyhz", &v12);
                        if ((result & 0x80000000) == 0)
                        {
                          result = strhelper_SafeCat(a3, "/", 0xFFFFFFFFFFFFFFFFLL, a4);
                          if ((result & 0x80000000) == 0)
                          {
                            result = strhelper_SafeCat(a3, "f", 0xFFFFFFFFFFFFFFFFLL, a4);
                            if ((result & 0x80000000) == 0)
                            {
                              v10 = strlen(a3);
                              LH_itoa(v12 / 1000, &a3[v10], 0xAu);
                              result = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"datapackagename", &__s);
                              if ((result & 0x80000000) == 0 && __s && *__s)
                              {
                                result = brokeraux_ComposeBrokerString(a1, a3, 0, 0, 0, 0, 0, v13, a4);
                                if ((result & 0x80000000) == 0)
                                {
                                  *a3 = 0;
                                  return strhelper_SafeCat(a3, v13, 0xFFFFFFFFFFFFFFFFLL, a4);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t betX_CreateVAOBrokerString(uint64_t a1, int a2, char *a3, size_t a4, int a5)
{
  uint64_t v5;
  uint64_t Str;
  size_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  char *v18;
  char *v19;
  size_t v20;
  size_t v21;
  size_t v22;
  uint64_t v23;
  const char *v25;
  char *__s;
  char *v27;
  int v28;
  char v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v28 = 0;
  v5 = 2364547079;
  __s = 0;
  v27 = 0;
  v25 = 0;
  *a3 = 0;
  if ((a2 & 0xFFFFFFFD) == 1)
  {
    Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"voiceaddon", &__s);
    if ((Str & 0x80000000) == 0)
    {
      v12 = strlen(__s);
      v13 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, v12 + 19);
      if (!v13)
        return 2364547082;
      v14 = (uint64_t)v13;
      strcpy(v13, "voiceaddonbaseuri.");
      strcat(v13, __s);
      v15 = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), v14, &v27);
      heap_Free(*(_QWORD **)(a1 + 8), v14);
      if ((v15 & 0x80000000) != 0)
        return v15;
      if (v27 && *v27)
      {
        Str = strhelper_SafeCat(a3, v27, 0xFFFFFFFFFFFFFFFFLL, a4);
        if ((Str & 0x80000000) != 0)
          return Str;
        Str = strhelper_SafeCat(a3, "/", 0xFFFFFFFFFFFFFFFFLL, a4);
        if ((Str & 0x80000000) != 0)
          return Str;
        v16 = "_";
        v17 = 1;
      }
      else
      {
        v17 = 0;
        v16 = "/";
      }
      v18 = a2 == 1 ? "selectvao" : "synthvao";
      Str = strhelper_SafeCat(a3, v18, 0xFFFFFFFFFFFFFFFFLL, a4);
      if ((Str & 0x80000000) == 0)
      {
        Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"voice", &v27);
        if ((Str & 0x80000000) == 0)
        {
          Str = strhelper_SafeCat(a3, v16, 0xFFFFFFFFFFFFFFFFLL, a4);
          if ((Str & 0x80000000) == 0)
          {
            v19 = v27;
            if (v27)
            {
              v20 = strlen(a3);
              if (strlen(v27) + v20 >= a4)
                return 2364547081;
              if (*v27)
              {
                v21 = 0;
                do
                {
                  a3[v20 + v21] = __tolower(v19[v21]);
                  ++v21;
                  v19 = v27;
                }
                while (v21 < strlen(v27));
                v20 += v21;
              }
              a3[v20] = 0;
            }
            Str = strhelper_SafeCat(a3, v16, 0xFFFFFFFFFFFFFFFFLL, a4);
            if ((Str & 0x80000000) == 0)
            {
              Str = strhelper_SafeCat(a3, __s, 0xFFFFFFFFFFFFFFFFLL, a4);
              if ((Str & 0x80000000) == 0)
              {
                Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"voicemodel", &v27);
                if ((Str & 0x80000000) == 0)
                {
                  Str = strhelper_SafeCat(a3, v16, 0xFFFFFFFFFFFFFFFFLL, a4);
                  if ((Str & 0x80000000) == 0)
                  {
                    Str = strhelper_SafeCat(a3, v27, 0xFFFFFFFFFFFFFFFFLL, a4);
                    if ((Str & 0x80000000) == 0)
                    {
                      Str = strhelper_SafeCat(a3, v16, 0xFFFFFFFFFFFFFFFFLL, a4);
                      if ((Str & 0x80000000) == 0)
                      {
                        Str = strhelper_SafeCat(a3, "vao", 0xFFFFFFFFFFFFFFFFLL, a4);
                        if ((Str & 0x80000000) == 0)
                        {
                          Str = strhelper_SafeCat(a3, v16, 0xFFFFFFFFFFFFFFFFLL, a4);
                          if ((Str & 0x80000000) == 0)
                          {
                            if (a2 != 3
                              || (Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"coder", &v27),
                                  (Str & 0x80000000) == 0)
                              && (Str = strhelper_SafeCat(a3, v27, 0xFFFFFFFFFFFFFFFFLL, a4), (Str & 0x80000000) == 0)
                              && (Str = strhelper_SafeCat(a3, v16, 0xFFFFFFFFFFFFFFFFLL, a4), (Str & 0x80000000) == 0))
                            {
                              Str = paramc_ParamGetInt(*(_QWORD *)(a1 + 40), (uint64_t)"frequencyhz", &v28);
                              if ((Str & 0x80000000) == 0)
                              {
                                v5 = strhelper_SafeCat(a3, "f", 0xFFFFFFFFFFFFFFFFLL, a4);
                                if ((v5 & 0x80000000) != 0)
                                  return v5;
                                v22 = strlen(a3);
                                LH_itoa(v28 / 1000, &a3[v22], 0xAu);
                                if (v17)
                                {
                                  v23 = strhelper_SafeCat(a3, ".dat", 0xFFFFFFFFFFFFFFFFLL, a4);
                                  v5 = v23;
                                  if (!a5 || (v23 & 0x80000000) != 0)
                                    return v5;
                                  goto LABEL_51;
                                }
                                if (a5 || !v27)
                                {
                                  if (!a5)
                                    return v5;
LABEL_51:
                                  if (!cupreader_IsCupInTheScope(a1, &v25))
                                    return v5;
                                  return cupreader_PrependCupName(a3, v25, a4);
                                }
                                if (!*v27)
                                  return v5;
                                Str = brokeraux_ComposeBrokerString(a1, a3, 0, 0, 0, 0, 0, v29, a4);
                                if ((Str & 0x80000000) == 0)
                                {
                                  *a3 = 0;
                                  return strhelper_SafeCat(a3, v29, 0xFFFFFFFFFFFFFFFFLL, a4);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return Str;
  }
  return v5;
}

uint64_t betX_CreateAddonListParamName(uint64_t a1, char **a2)
{
  uint64_t Str;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *__s2;
  char *__s;
  char *v16;

  __s = 0;
  v16 = 0;
  __s2 = 0;
  Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"voice", &v16);
  if ((Str & 0x80000000) != 0)
    return Str;
  Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"voiceoperatingpoint", &__s);
  if ((Str & 0x80000000) != 0)
    return Str;
  v5 = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"vopversion", &__s2);
  if ((v5 & 0x80000000) == 0)
  {
    v6 = strlen(__s);
    if (__s2)
      v7 = strlen(__s2);
    else
      v7 = 0;
    v8 = strlen(v16);
    v9 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, v7 + v6 + v8 + 15);
    if (v9)
    {
      v10 = v9;
      strcpy(v9, "voiceaddons.");
      v11 = v8;
      if (v8)
      {
        v12 = 0;
        do
        {
          v10[v12 + 12] = __tolower(v16[v12]);
          ++v12;
        }
        while (v11 != v12);
      }
      *(_WORD *)&v10[strlen(v10)] = 46;
      strcat(v10, __s);
      if (__s2)
      {
        *(_WORD *)&v10[strlen(v10)] = 46;
        strcat(v10, __s2);
      }
      *a2 = v10;
    }
    else
    {
      return 2364547082;
    }
  }
  return v5;
}

uint64_t betX_GetVAOName(const char *a1, size_t *a2, char *a3, size_t a4)
{
  size_t v5;
  size_t v10;
  char *v11;
  size_t v12;

  v5 = *a2;
  *a3 = 0;
  if (a1)
  {
    while (a1[v5] == 59)
      ++v5;
    if (!a1[v5])
      return 0;
    v11 = strchr((char *)&a1[v5], 59);
    if (v11)
      v10 = v11 - a1 + 1;
    else
      v10 = strlen(a1);
    if (a1[v10 - 1] == 59)
      v12 = ~v5;
    else
      v12 = -(uint64_t)v5;
    strhelper_SafeCat(a3, (char *)&a1[v5], v10 + v12, a4);
  }
  else
  {
    v10 = 0;
  }
  *a2 = v10;
  return 1;
}

uint64_t nnfeatex_Init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  result = 7;
  if (a3 && a2 && a1 && a5)
  {
    v11 = heap_Alloc(*(_QWORD *)(a5 + 8), 56);
    if (v11)
    {
      v12 = v11;
      result = 0;
      *(_QWORD *)v12 = a5;
      *(_QWORD *)(v12 + 8) = a2;
      *(_QWORD *)(v12 + 16) = a3;
      *(_QWORD *)(v12 + 24) = a4;
      *(_DWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 32) = 0;
      *(_QWORD *)(v12 + 38) = 0;
      *(_QWORD *)a1 = v12;
      *(_DWORD *)(a1 + 8) = -28879052;
    }
    else
    {
      return 6;
    }
  }
  return result;
}

uint64_t nnfeatex_DeInit(uint64_t *a1)
{
  uint64_t result;

  if ((safeh_HandleCheck(*a1, a1[1], -28879052, 56) & 0x80000000) != 0)
    return 8;
  heap_Free(*(_QWORD **)(*(_QWORD *)*a1 + 8), *a1);
  result = 0;
  *a1 = 0;
  *((_DWORD *)a1 + 2) = 0;
  return result;
}

uint64_t nnfeatex_ProcessStart(uint64_t *a1, uint64_t a2, uint64_t a3, _WORD *a4, _DWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  unsigned __int16 v14;
  int v15;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  int v20;
  unsigned __int16 v23;
  unsigned int *v24;
  __int16 v25;
  int v26;

  if ((safeh_HandleCheck(*a1, a1[1], -28879052, 56) & 0x80000000) != 0)
    return 8;
  v10 = *a1;
  v26 = 0;
  v25 = 0;
  v24 = 0;
  v23 = 0;
  v11 = *(_QWORD *)(v10 + 8);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(v11 + 104))(a2, a3, 1, 0, (char *)&v26 + 2);
  if ((v12 & 0x80000000) != 0)
    return v12;
  inited = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)(v10 + 8) + 152))(a2, a3, 2, BYTE2(v26), &v26);
  if ((inited & 0x80000000) == 0)
  {
    v14 = v26;
    if ((_WORD)v26)
    {
      v15 = 1;
      while (1)
      {
        inited = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)(v10 + 8) + 120))(a2, a3, v14, &v26);
        if ((inited & 0x80000000) != 0)
          break;
        v14 = v26;
        if (!(_WORD)v26)
          goto LABEL_11;
        if (__CFADD__(v15++, 1))
          goto LABEL_10;
      }
    }
    else
    {
LABEL_10:
      v15 = 0;
LABEL_11:
      if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, __int16 *))(v11 + 184))(a2, a3, HIWORD(v26), 1, &v25) & 0x80000000) == 0&& v25 == 1)
      {
        inited = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, unsigned int **, unsigned __int16 *))(v11 + 176))(a2, a3, HIWORD(v26), 1, &v24, &v23);
        if ((inited & 0x80000000) != 0)
          return inited;
        v17 = v23;
        if (v23)
        {
          v18 = v24;
          do
          {
            v19 = *v18;
            v18 += 8;
            v20 = (1 << v19) & 0x270F0100;
            if (v19 <= 0x1D && v20 != 0)
              v15 += 3;
            --v17;
          }
          while (v17);
        }
      }
      if (!v15
        || (inited = Init_WrdRec(*(_QWORD **)v10, (uint64_t *)(v10 + 32), (unsigned __int16)v15),
            (inited & 0x80000000) == 0))
      {
        *(_DWORD *)(v10 + 48) = v15;
        if (!(_DWORD)inited)
        {
          inited = Lingdb2NnWordRec(*(_QWORD **)v10, 0, *(_QWORD *)(v10 + 8), a2, a3, a4, a5, *(_QWORD *)(v10 + 32), (_WORD *)(v10 + 40), (_WORD *)(v10 + 42), (_WORD *)(v10 + 44));
          if ((inited & 0x80000000) != 0)
          {
            if (*(_DWORD *)(v10 + 48))
              Free_WrdRec(*(_QWORD **)v10, *(_QWORD *)(v10 + 32), (unsigned __int16)*(_DWORD *)(v10 + 48));
          }
        }
      }
    }
  }
  return inited;
}

uint64_t nnfeatex_Process(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7, _DWORD *a8, int a9)
{
  _QWORD **v14;
  _QWORD *v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v20;
  uint64_t *v21;

  if ((safeh_HandleCheck(*a1, a1[1], -28879052, 56) & 0x80000000) != 0)
    return 8;
  v14 = (_QWORD **)*a1;
  if (a9)
  {
    v20 = 0;
    v21 = 0;
    v15 = v14[2];
    if (*((_DWORD *)v15 + 895))
      v16 = 1;
    else
      v16 = *((_BYTE *)v15 + 3578);
    if (nnextract_Allocate((uint64_t)*v14, &v20, v14[4], *((unsigned __int16 *)v14 + 22), *((unsigned __int16 *)v14 + 20), *((unsigned __int16 *)v14 + 21)))return 10;
    v17 = nnextract_Process2Buff((uint64_t)*v14, (uint64_t)v20, 1u, v16, 0, (uint64_t)v14[3], (uint64_t *)&v21, 0, (uint64_t)(v14[2] + 300), (uint64_t)(v14[2] + 268), a7, a8);
    v18 = v21;
    if (!(_DWORD)v17)
      v17 = nnfeatex_CheckFeatures((uint64_t)v14, (uint64_t)v21, a4);
    nnextract_Deallocate((uint64_t)*v14, (uint64_t)v20, 1, v18, v16);
  }
  else
  {
    v21 = 0;
    if (nnextract_Allocate((uint64_t)*v14, &v21, v14[4], *((unsigned __int16 *)v14 + 22), *((unsigned __int16 *)v14 + 20), *((unsigned __int16 *)v14 + 21)))return 10;
    v17 = nnextract_Rolled(*v14, (uint64_t)v21, 1u, *((unsigned __int8 *)v14[2] + 3578), 0, (uint64_t)v14[3], a6, 0, (uint64_t)(v14[2] + 300), (uint64_t)(v14[2] + 268));
    if (!(_DWORD)v17)
      return nnfeatex_CheckFeatures((uint64_t)v14, *a6, a4);
  }
  return v17;
}

uint64_t nnfeatex_ProcessEnd(uint64_t *a1, uint64_t *a2, _DWORD *a3)
{
  _QWORD *v6;
  uint64_t result;

  if ((safeh_HandleCheck(*a1, a1[1], -28879052, 56) & 0x80000000) != 0)
    return 8;
  v6 = (_QWORD *)*a1;
  if (*((_DWORD *)v6 + 12))
    Free_WrdRec((_QWORD *)*v6, v6[4], (unsigned __int16)*((_DWORD *)v6 + 12));
  heap_Free(*(_QWORD **)(*v6 + 8), *a2);
  result = 0;
  *a2 = 0;
  *a3 = 0;
  *(_QWORD *)((char *)v6 + 38) = 0;
  v6[4] = 0;
  return result;
}

uint64_t nnfeatex_CheckFeatures(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  int v6;

  result = 6;
  if (a2 && a3)
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(_DWORD *)(v5 + 3580);
    if (v6)
    {
      if (v6 != 1 || *(_DWORD *)(a2 + 4024) == *(__int16 *)(a3 + 10))
        return 0;
    }
    else if (*(_DWORD *)(a2 + 4024) / (int)*(unsigned __int16 *)(v5 + 3578) == *(__int16 *)(a3 + 10))
    {
      return 0;
    }
    return 21;
  }
  return result;
}

uint64_t NNFX_logMsg(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;

  if (!a2)
    return log_OutPublic(*(_QWORD *)(result + 32), (uint64_t)"NNFEATEXTRACT", 0, 0, a5, a6, a7, a8, v8);
  return result;
}

uint64_t Init_WrdRec(_QWORD *a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = a3;
  v7 = heap_Calloc((_QWORD *)a1[1], a3, 144);
  *a2 = v7;
  if (v7)
  {
    if (!a3)
      return 0;
    v13 = 0;
    v14 = 144 * v6;
    while (1)
    {
      v15 = *a2 + v13;
      *(_DWORD *)v15 = 4;
      *(_QWORD *)(v15 + 4) = 0;
      *(_QWORD *)(v15 + 20) = 0;
      *(_QWORD *)(v15 + 12) = 0;
      v16 = heap_Alloc(a1[1], 100);
      *(_QWORD *)(*a2 + v13 + 32) = v16;
      if (!v16)
        break;
      **(_BYTE **)(*a2 + v13 + 32) = 0;
      v17 = heap_Alloc(a1[1], 100);
      *(_QWORD *)(*a2 + v13 + 40) = v17;
      if (!v17)
        break;
      **(_BYTE **)(*a2 + v13 + 40) = 0;
      v18 = heap_Alloc(a1[1], 100);
      *(_QWORD *)(*a2 + v13 + 48) = v18;
      if (!v18)
        break;
      **(_BYTE **)(*a2 + v13 + 48) = 0;
      v19 = heap_Alloc(a1[1], 100);
      *(_QWORD *)(*a2 + v13 + 56) = v19;
      if (!v19)
        break;
      **(_BYTE **)(*a2 + v13 + 56) = 0;
      v20 = heap_Alloc(a1[1], 100);
      *(_QWORD *)(*a2 + v13 + 64) = v20;
      if (!v20)
        break;
      **(_BYTE **)(*a2 + v13 + 64) = 0;
      v21 = heap_Alloc(a1[1], 100);
      *(_QWORD *)(*a2 + v13 + 72) = v21;
      if (!v21)
        break;
      **(_BYTE **)(*a2 + v13 + 72) = 0;
      v22 = heap_Alloc(a1[1], 100);
      *(_QWORD *)(*a2 + v13 + 80) = v22;
      if (!v22)
        break;
      **(_BYTE **)(*a2 + v13 + 80) = 0;
      v23 = heap_Alloc(a1[1], 100);
      *(_QWORD *)(*a2 + v13 + 88) = v23;
      if (!v23)
        break;
      **(_BYTE **)(*a2 + v13 + 88) = 0;
      v24 = heap_Alloc(a1[1], 100);
      *(_QWORD *)(*a2 + v13 + 96) = v24;
      if (!v24)
        break;
      **(_BYTE **)(*a2 + v13 + 96) = 0;
      v25 = heap_Alloc(a1[1], 100);
      *(_QWORD *)(*a2 + v13 + 104) = v25;
      if (!v25)
        break;
      **(_BYTE **)(*a2 + v13 + 104) = 0;
      v26 = heap_Alloc(a1[1], 100);
      *(_QWORD *)(*a2 + v13 + 112) = v26;
      if (!v26)
        break;
      **(_BYTE **)(*a2 + v13 + 112) = 0;
      *(_BYTE *)(*a2 + v13 + 120) = 78;
      v27 = heap_Alloc(a1[1], 512);
      *(_QWORD *)(*a2 + v13 + 136) = v27;
      if (!v27)
        break;
      **(_BYTE **)(*a2 + v13 + 136) = 0;
      v28 = heap_Alloc(a1[1], 512);
      *(_QWORD *)(*a2 + v13 + 128) = v28;
      if (!v28)
        break;
      **(_BYTE **)(*a2 + v13 + 128) = 0;
      v13 += 144;
      if (v14 == v13)
        return 0;
    }
  }
  NNFX_logMsg((uint64_t)a1, 0, (uint64_t)"::ldbrec::memory allocation", v8, v9, v10, v11, v12);
  Free_WrdRec(a1, *a2, a3);
  return 2364547082;
}

_QWORD *Free_WrdRec(_QWORD *result, uint64_t a2, unsigned int a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
  {
    v4 = result;
    if (a3)
    {
      v5 = a3;
      v6 = (uint64_t *)(a2 + 72);
      do
      {
        v7 = *(v6 - 5);
        if (v7)
          heap_Free((_QWORD *)v4[1], v7);
        v8 = *(v6 - 4);
        if (v8)
          heap_Free((_QWORD *)v4[1], v8);
        v9 = *(v6 - 3);
        if (v9)
          heap_Free((_QWORD *)v4[1], v9);
        v10 = *(v6 - 2);
        if (v10)
          heap_Free((_QWORD *)v4[1], v10);
        v11 = *(v6 - 1);
        if (v11)
          heap_Free((_QWORD *)v4[1], v11);
        if (*v6)
          heap_Free((_QWORD *)v4[1], *v6);
        v12 = v6[1];
        if (v12)
          heap_Free((_QWORD *)v4[1], v12);
        v13 = v6[3];
        if (v13)
          heap_Free((_QWORD *)v4[1], v13);
        v14 = v6[2];
        if (v14)
          heap_Free((_QWORD *)v4[1], v14);
        v15 = v6[4];
        if (v15)
          heap_Free((_QWORD *)v4[1], v15);
        v16 = v6[5];
        if (v16)
          heap_Free((_QWORD *)v4[1], v16);
        v17 = v6[7];
        if (v17)
          heap_Free((_QWORD *)v4[1], v17);
        v18 = v6[8];
        if (v18)
          heap_Free((_QWORD *)v4[1], v18);
        v6 += 18;
        --v5;
      }
      while (v5);
    }
    return heap_Free((_QWORD *)v4[1], a2);
  }
  return result;
}

uint64_t InitFromWrdRec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  __int128 *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int128 *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  __int128 *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;

  if (a2 && a3)
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a2 + 24);
    *(_BYTE *)(a3 + 120) = *(_BYTE *)(a2 + 120);
    v10 = *(_QWORD *)(a3 + 32);
    v11 = *(__int128 **)(a2 + 32);
    v13 = v11[4];
    v12 = v11[5];
    v14 = v11[3];
    *(_DWORD *)(v10 + 96) = *((_DWORD *)v11 + 24);
    *(_OWORD *)(v10 + 64) = v13;
    *(_OWORD *)(v10 + 80) = v12;
    *(_OWORD *)(v10 + 48) = v14;
    v15 = *v11;
    v16 = v11[2];
    *(_OWORD *)(v10 + 16) = v11[1];
    *(_OWORD *)(v10 + 32) = v16;
    *(_OWORD *)v10 = v15;
    v17 = *(_QWORD *)(a3 + 40);
    v18 = *(__int128 **)(a2 + 40);
    v20 = v18[4];
    v19 = v18[5];
    v21 = v18[3];
    *(_DWORD *)(v17 + 96) = *((_DWORD *)v18 + 24);
    *(_OWORD *)(v17 + 64) = v20;
    *(_OWORD *)(v17 + 80) = v19;
    *(_OWORD *)(v17 + 48) = v21;
    v22 = *v18;
    v23 = v18[2];
    *(_OWORD *)(v17 + 16) = v18[1];
    *(_OWORD *)(v17 + 32) = v23;
    *(_OWORD *)v17 = v22;
    v24 = *(_QWORD *)(a3 + 48);
    v25 = *(__int128 **)(a2 + 48);
    v27 = v25[4];
    v26 = v25[5];
    v28 = v25[3];
    *(_DWORD *)(v24 + 96) = *((_DWORD *)v25 + 24);
    *(_OWORD *)(v24 + 64) = v27;
    *(_OWORD *)(v24 + 80) = v26;
    *(_OWORD *)(v24 + 48) = v28;
    v29 = *v25;
    v30 = v25[2];
    *(_OWORD *)(v24 + 16) = v25[1];
    *(_OWORD *)(v24 + 32) = v30;
    *(_OWORD *)v24 = v29;
    v31 = *(_QWORD *)(a3 + 56);
    v32 = *(__int128 **)(a2 + 56);
    v34 = v32[4];
    v33 = v32[5];
    v35 = v32[3];
    *(_DWORD *)(v31 + 96) = *((_DWORD *)v32 + 24);
    *(_OWORD *)(v31 + 64) = v34;
    *(_OWORD *)(v31 + 80) = v33;
    *(_OWORD *)(v31 + 48) = v35;
    v36 = *v32;
    v37 = v32[2];
    *(_OWORD *)(v31 + 16) = v32[1];
    *(_OWORD *)(v31 + 32) = v37;
    *(_OWORD *)v31 = v36;
    v38 = *(_QWORD *)(a3 + 64);
    v39 = *(__int128 **)(a2 + 64);
    v41 = v39[4];
    v40 = v39[5];
    v42 = v39[3];
    *(_DWORD *)(v38 + 96) = *((_DWORD *)v39 + 24);
    *(_OWORD *)(v38 + 64) = v41;
    *(_OWORD *)(v38 + 80) = v40;
    *(_OWORD *)(v38 + 48) = v42;
    v43 = *v39;
    v44 = v39[2];
    *(_OWORD *)(v38 + 16) = v39[1];
    *(_OWORD *)(v38 + 32) = v44;
    *(_OWORD *)v38 = v43;
    v45 = *(_QWORD *)(a3 + 72);
    v46 = *(__int128 **)(a2 + 72);
    v48 = v46[4];
    v47 = v46[5];
    v49 = v46[3];
    *(_DWORD *)(v45 + 96) = *((_DWORD *)v46 + 24);
    *(_OWORD *)(v45 + 64) = v48;
    *(_OWORD *)(v45 + 80) = v47;
    *(_OWORD *)(v45 + 48) = v49;
    v50 = *v46;
    v51 = v46[2];
    *(_OWORD *)(v45 + 16) = v46[1];
    *(_OWORD *)(v45 + 32) = v51;
    *(_OWORD *)v45 = v50;
    v52 = *(_QWORD *)(a3 + 80);
    v53 = *(__int128 **)(a2 + 80);
    v55 = v53[4];
    v54 = v53[5];
    v56 = v53[3];
    *(_DWORD *)(v52 + 96) = *((_DWORD *)v53 + 24);
    *(_OWORD *)(v52 + 64) = v55;
    *(_OWORD *)(v52 + 80) = v54;
    *(_OWORD *)(v52 + 48) = v56;
    v57 = *v53;
    v58 = v53[2];
    *(_OWORD *)(v52 + 16) = v53[1];
    *(_OWORD *)(v52 + 32) = v58;
    *(_OWORD *)v52 = v57;
    v59 = *(_QWORD *)(a3 + 88);
    v60 = *(__int128 **)(a2 + 88);
    v62 = v60[4];
    v61 = v60[5];
    v63 = v60[3];
    *(_DWORD *)(v59 + 96) = *((_DWORD *)v60 + 24);
    *(_OWORD *)(v59 + 64) = v62;
    *(_OWORD *)(v59 + 80) = v61;
    *(_OWORD *)(v59 + 48) = v63;
    v64 = *v60;
    v65 = v60[2];
    *(_OWORD *)(v59 + 16) = v60[1];
    *(_OWORD *)(v59 + 32) = v65;
    *(_OWORD *)v59 = v64;
    v66 = *(_QWORD *)(a3 + 96);
    v67 = *(__int128 **)(a2 + 96);
    v69 = v67[4];
    v68 = v67[5];
    v70 = v67[3];
    *(_DWORD *)(v66 + 96) = *((_DWORD *)v67 + 24);
    *(_OWORD *)(v66 + 64) = v69;
    *(_OWORD *)(v66 + 80) = v68;
    *(_OWORD *)(v66 + 48) = v70;
    v71 = *v67;
    v72 = v67[2];
    *(_OWORD *)(v66 + 16) = v67[1];
    *(_OWORD *)(v66 + 32) = v72;
    *(_OWORD *)v66 = v71;
    v73 = *(_QWORD *)(a3 + 104);
    v74 = *(__int128 **)(a2 + 104);
    v76 = v74[4];
    v75 = v74[5];
    v77 = v74[3];
    *(_DWORD *)(v73 + 96) = *((_DWORD *)v74 + 24);
    *(_OWORD *)(v73 + 64) = v76;
    *(_OWORD *)(v73 + 80) = v75;
    *(_OWORD *)(v73 + 48) = v77;
    v78 = *v74;
    v79 = v74[2];
    *(_OWORD *)(v73 + 16) = v74[1];
    *(_OWORD *)(v73 + 32) = v79;
    *(_OWORD *)v73 = v78;
    v80 = *(_QWORD *)(a3 + 112);
    v81 = *(__int128 **)(a2 + 112);
    v83 = v81[4];
    v82 = v81[5];
    v84 = v81[3];
    *(_DWORD *)(v80 + 96) = *((_DWORD *)v81 + 24);
    *(_OWORD *)(v80 + 64) = v83;
    *(_OWORD *)(v80 + 80) = v82;
    *(_OWORD *)(v80 + 48) = v84;
    v85 = *v81;
    v86 = v81[2];
    *(_OWORD *)(v80 + 16) = v81[1];
    *(_OWORD *)(v80 + 32) = v86;
    *(_OWORD *)v80 = v85;
    memcpy(*(void **)(a3 + 128), *(const void **)(a2 + 128), 0x200uLL);
    memcpy(*(void **)(a3 + 136), *(const void **)(a2 + 136), 0x200uLL);
    return 0;
  }
  else
  {
    NNFX_logMsg(a1, 0, (uint64_t)"::ldbrec::null pointer", a4, a5, a6, a7, a8);
    return 2364547079;
  }
}

uint64_t Compile_SntWrdRec(uint64_t a1, _DWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v31;
  uint64_t v32;
  unsigned int v34;
  uint64_t v35;

  v12 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 80);
  *a6 = v12;
  if (!v12
    || (*(_DWORD *)(v12 + 8) = a4, (v18 = heap_Calloc(*(_QWORD **)(a1 + 8), a4, 8)) == 0)
    || (v19 = v18,
        *(_QWORD *)*a6 = v18,
        *(_DWORD *)(*a6 + 24) = a5,
        (v20 = heap_Calloc(*(_QWORD **)(a1 + 8), a5, 8)) == 0))
  {
    NNFX_logMsg(a1, 0, (uint64_t)"::ldbrec::memory allocation", v13, v14, v15, v16, v17);
    v26 = 2364547082;
    goto LABEL_15;
  }
  v21 = v20;
  *(_QWORD *)(*a6 + 16) = v20;
  if (!a3)
  {
LABEL_13:
    v26 = 0;
    v27 = *a6;
    *(_DWORD *)(v27 + 72) = 0;
    *(_QWORD *)(v27 + 64) = 0;
    v28 = *a6;
    *(_DWORD *)(v28 + 56) = 0;
    *(_QWORD *)(v28 + 48) = 0;
    v29 = *a6;
    *(_DWORD *)(v29 + 40) = 0;
    a6 = (uint64_t *)(v29 + 32);
    goto LABEL_17;
  }
  v22 = 0;
  v23 = 0;
  v24 = a3;
  while (1)
  {
    if ((*a2 - 5) < 3)
      goto LABEL_12;
    if (*a2 != 15)
      break;
    v25 = Copy_WrdRec(a1, (uint64_t)a2, (uint64_t *)(v21 + 8 * v22));
    if ((v25 & 0x80000000) != 0)
      goto LABEL_19;
    ++v22;
LABEL_12:
    a2 += 36;
    if (!--v24)
      goto LABEL_13;
  }
  v25 = Copy_WrdRec(a1, (uint64_t)a2, (uint64_t *)(v19 + 8 * v23));
  if ((v25 & 0x80000000) == 0)
  {
    ++v23;
    goto LABEL_12;
  }
LABEL_19:
  v26 = v25;
  if (v23)
  {
    v31 = v23 - 1;
    do
    {
      v32 = *(_QWORD *)(v19 + 8 * v31);
      if (v32)
        heap_Free(*(_QWORD **)(a1 + 8), v32);
    }
    while ((unint64_t)v31--);
  }
  if (v22)
  {
    v34 = v22 - 1;
    do
    {
      v35 = *(_QWORD *)(v21 + 8 * v34);
      if (v35)
        heap_Free(*(_QWORD **)(a1 + 8), v35);
    }
    while ((unint64_t)v34--);
  }
LABEL_15:
  if (*a6)
  {
    *(_QWORD *)(*a6 + 16) = 0;
    *(_QWORD *)*a6 = 0;
    heap_Free(*(_QWORD **)(a1 + 8), *a6);
LABEL_17:
    *a6 = 0;
  }
  return v26;
}

uint64_t Copy_WrdRec(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char **v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = 2364547079;
  if (a2)
  {
    v7 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 144);
    *a3 = v7;
    if (v7)
    {
      v13 = (char **)v7;
      *(_OWORD *)v7 = *(_OWORD *)a2;
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(a2 + 16);
      *(_DWORD *)(v7 + 24) = *(_DWORD *)(a2 + 24);
      *(_BYTE *)(v7 + 120) = *(_BYTE *)(a2 + 120);
      v14 = DupWrdRecField(a1, (char **)(v7 + 32), 100, *(const char **)(a2 + 32));
      if ((v14 & 0x80000000) == 0)
      {
        v14 = DupWrdRecField(a1, v13 + 5, 100, *(const char **)(a2 + 40));
        if ((v14 & 0x80000000) == 0)
        {
          v14 = DupWrdRecField(a1, v13 + 6, 100, *(const char **)(a2 + 48));
          if ((v14 & 0x80000000) == 0)
          {
            v14 = DupWrdRecField(a1, v13 + 7, 100, *(const char **)(a2 + 56));
            if ((v14 & 0x80000000) == 0)
            {
              v14 = DupWrdRecField(a1, v13 + 8, 100, *(const char **)(a2 + 64));
              if ((v14 & 0x80000000) == 0)
              {
                v14 = DupWrdRecField(a1, v13 + 9, 100, *(const char **)(a2 + 72));
                if ((v14 & 0x80000000) == 0)
                {
                  v14 = DupWrdRecField(a1, v13 + 10, 100, *(const char **)(a2 + 80));
                  if ((v14 & 0x80000000) == 0)
                  {
                    v14 = DupWrdRecField(a1, v13 + 11, 100, *(const char **)(a2 + 88));
                    if ((v14 & 0x80000000) == 0)
                    {
                      v14 = DupWrdRecField(a1, v13 + 12, 100, *(const char **)(a2 + 96));
                      if ((v14 & 0x80000000) == 0)
                      {
                        v14 = DupWrdRecField(a1, v13 + 13, 100, *(const char **)(a2 + 104));
                        if ((v14 & 0x80000000) == 0)
                        {
                          v14 = DupWrdRecField(a1, v13 + 14, 100, *(const char **)(a2 + 112));
                          if ((v14 & 0x80000000) == 0)
                          {
                            v14 = DupWrdRecField(a1, v13 + 17, 512, *(const char **)(a2 + 136));
                            if ((v14 & 0x80000000) == 0)
                            {
                              v14 = DupWrdRecField(a1, v13 + 16, 512, *(const char **)(a2 + 128));
                              if ((v14 & 0x80000000) == 0)
                                return 0;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v3 = v14;
    }
    else
    {
      NNFX_logMsg(a1, 0, (uint64_t)"::ldbrec::memory allocation", v8, v9, v10, v11, v12);
      v3 = 2364547082;
    }
    v15 = (_QWORD *)*a3;
    if (*a3)
    {
      v16 = v15[4];
      if (v16)
        heap_Free(*(_QWORD **)(a1 + 8), v16);
      v15[4] = 0;
      v17 = v15[5];
      if (v17)
        heap_Free(*(_QWORD **)(a1 + 8), v17);
      v15[5] = 0;
      v18 = v15[6];
      if (v18)
        heap_Free(*(_QWORD **)(a1 + 8), v18);
      v15[6] = 0;
      v19 = v15[7];
      if (v19)
        heap_Free(*(_QWORD **)(a1 + 8), v19);
      v15[7] = 0;
      v20 = v15[8];
      if (v20)
        heap_Free(*(_QWORD **)(a1 + 8), v20);
      v15[8] = 0;
      v21 = v15[9];
      if (v21)
        heap_Free(*(_QWORD **)(a1 + 8), v21);
      v15[9] = 0;
      v22 = v15[10];
      if (v22)
        heap_Free(*(_QWORD **)(a1 + 8), v22);
      v15[10] = 0;
      v23 = v15[11];
      if (v23)
        heap_Free(*(_QWORD **)(a1 + 8), v23);
      v15[11] = 0;
      v24 = v15[12];
      if (v24)
        heap_Free(*(_QWORD **)(a1 + 8), v24);
      v15[12] = 0;
      v25 = v15[13];
      if (v25)
        heap_Free(*(_QWORD **)(a1 + 8), v25);
      v15[13] = 0;
      v26 = v15[14];
      if (v26)
        heap_Free(*(_QWORD **)(a1 + 8), v26);
      v15[14] = 0;
      v27 = v15[17];
      if (v27)
        heap_Free(*(_QWORD **)(a1 + 8), v27);
      v15[17] = 0;
      v28 = v15[16];
      if (v28)
        heap_Free(*(_QWORD **)(a1 + 8), v28);
      v15[16] = 0;
      heap_Free(*(_QWORD **)(a1 + 8), *a3);
    }
    *a3 = 0;
  }
  return v3;
}

_QWORD *MakeSilWord(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7, uint64_t a8)
{
  char v10;
  int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  _BYTE *v34;
  _BYTE *v35;
  _DWORD *v36;
  _DWORD *v37;
  uint64_t v38;
  void *v39;
  const char *v40;

  if (!a6)
  {
    v40 = "::ldbrec:: in MakeSilWord. nullTag parameter is not defined.\n";
    goto LABEL_32;
  }
  v10 = a5;
  v11 = a4;
  v14 = heap_Alloc(*(_QWORD *)(a1 + 8), 200);
  v20 = (_QWORD *)v14;
  if (v14)
  {
    *(_DWORD *)(v14 + 140) = a2;
    *(_DWORD *)(v14 + 144) = 1;
    *(_QWORD *)(v14 + 192) = 1;
    *(_BYTE *)(v14 + 136) = 78;
    *(_DWORD *)v14 = 0;
    *(_DWORD *)(v14 + 4) = a3;
    *(_DWORD *)(v14 + 20) = 0;
    *(_DWORD *)(v14 + 24) = 0;
    *(_DWORD *)(v14 + 12) = 0;
    *(_DWORD *)(v14 + 16) = v11;
    *(_DWORD *)(v14 + 8) = a3;
    v21 = stringdup(a1, &byte_1DEBD87CE);
    v20[4] = v21;
    if (!v21)
    {
      v40 = "::ldbrec:: in MakeSilWord() allocating memory to hold (empty) ortho.\n";
      goto LABEL_32;
    }
    v22 = stringdup(a1, &byte_1DEBD87CE);
    v20[5] = v22;
    if (!v22)
    {
      v40 = "::ldbrec:: in MakeSilWord() allocating memory to hold (empty) SPR.\n";
      goto LABEL_32;
    }
    v23 = stringdup(a1, &byte_1DEBD87CE);
    v20[6] = v23;
    if (!v23)
    {
      v40 = "::ldbrec:: in MakeSilWord() allocating memory to hold (empty) tnTag.\n";
      goto LABEL_32;
    }
    v24 = stringdup(a1, &byte_1DEBD87CE);
    v20[7] = v24;
    if (!v24)
    {
      v40 = "::ldbrec:: in MakeSilWord() allocating memory to hold (empty) POS.\n";
      goto LABEL_32;
    }
    v25 = stringdup(a1, &byte_1DEBD87CE);
    v20[8] = v25;
    if (!v25)
    {
      v40 = "::ldbrec:: in MakeSilWord() allocating memory to hold (empty) CGN.\n";
      goto LABEL_32;
    }
    v26 = stringdup(a1, &byte_1DEBD87CE);
    v20[9] = v26;
    if (!v26)
    {
      v40 = "::ldbrec:: in MakeSilWord() allocating memory to hold (empty) lang.\n";
      goto LABEL_32;
    }
    v27 = stringdup(a1, &byte_1DEBD87CE);
    v20[10] = v27;
    if (!v27 || (v28 = stringdup(a1, &byte_1DEBD87CE), (v20[11] = v28) == 0))
    {
      v40 = "::ldbrec:: in MakeSilWord() allocating memory to hold (empty) nluPOS.\n";
      goto LABEL_32;
    }
    v29 = stringdup(a1, &byte_1DEBD87CE);
    v20[12] = v29;
    if (!v29)
    {
      v40 = "::ldbrec:: in MakeSilWord() allocating memory to hold (empty) nluCLS.\n";
      goto LABEL_32;
    }
    v30 = stringdup(a1, &byte_1DEBD87CE);
    v20[14] = v30;
    if (!v30)
    {
      v40 = "::ldbrec:: in MakeSilWord() allocating memory to hold (empty) nluPNC.\n";
      goto LABEL_32;
    }
    v31 = stringdup(a1, &byte_1DEBD87CE);
    v20[13] = v31;
    if (!v31)
    {
      v40 = "::ldbrec:: in MakeSilWord() allocating memory to hold (empty) nluCMP.\n";
      goto LABEL_32;
    }
    v32 = stringdup(a1, &byte_1DEBD87CE);
    v20[15] = v32;
    if (!v32)
    {
      v40 = "::ldbrec:: in MakeSilWord() allocating memory to hold (empty) nluBDS.\n";
      goto LABEL_32;
    }
    v33 = stringdup(a1, &byte_1DEBD87CE);
    v20[16] = v33;
    if (!v33)
    {
      v40 = "::ldbrec:: in MakeSilWord() allocating memory to hold (empty) nluCPS.\n";
      goto LABEL_32;
    }
    v34 = (_BYTE *)heap_Alloc(*(_QWORD *)(a1 + 8), 2);
    v20[19] = v34;
    if (!v34)
    {
      v40 = "::ldbrec:: in MakeSilWord() allocating memory to hold phones.\n";
      goto LABEL_32;
    }
    *v34 = v10;
    *(_BYTE *)(v20[19] + 1) = 0;
    v35 = (_BYTE *)heap_Alloc(*(_QWORD *)(a1 + 8), 2);
    v20[20] = v35;
    if (!v35)
    {
      v40 = "::ldbrec:: in MakeSilWord() allocating memory to hold differentiators.\n";
      goto LABEL_32;
    }
    *v35 = 32;
    *(_BYTE *)(v20[20] + 1) = 0;
    v36 = (_DWORD *)heap_Alloc(*(_QWORD *)(a1 + 8), 4);
    v20[22] = v36;
    if (!v36)
    {
      v40 = "::ldbrec:: in MakeSilWord() allocating memory to hold lexStressSeq.\n";
      goto LABEL_32;
    }
    *v36 = 0;
    v37 = (_DWORD *)heap_Alloc(*(_QWORD *)(a1 + 8), 4);
    v20[23] = v37;
    if (!v37)
    {
      v40 = "::ldbrec:: in MakeSilWord() allocating memory to hold syllBdrySeq.\n";
      goto LABEL_32;
    }
    *v37 = 1;
    v38 = heap_Alloc(*(_QWORD *)(a1 + 8), 8);
    v20[21] = v38;
    if (!v38)
    {
      v40 = "::ldbrec:: in MakeSilWord() allocating memory to hold phone tags.\n";
      goto LABEL_32;
    }
    v39 = stringdup(a1, a6);
    *(_QWORD *)v20[21] = v39;
    if (!v39)
    {
      v40 = "::ldbrec:: in MakeSilWord() copying (null) phone tag.\n";
LABEL_32:
      NNFX_logMsg(a1, 0, (uint64_t)v40, a4, a5, (uint64_t)a6, a7, a8);
      return 0;
    }
  }
  else
  {
    NNFX_logMsg(a1, 0, (uint64_t)"::ldbrec:: in MakeSilWord() while allocating memory.\n", v15, v16, v17, v18, v19);
  }
  return v20;
}

_QWORD *FillProsWords(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char *v9;
  char *v10;
  _DWORD *v11;
  unsigned int *v12;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  void *v52;
  int v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  char *v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  _DWORD *v84;
  _BOOL4 v85;
  uint64_t v86;
  _DWORD *v87;
  uint64_t v88;
  int *v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _DWORD *v96;
  uint64_t v97;
  int *v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t *v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  _QWORD *SilWord;
  unsigned int v108;
  uint64_t v109;
  uint64_t v111;
  _DWORD *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  unsigned int v118;
  unint64_t v119;
  uint64_t v120;
  unsigned int v121;
  int v122;
  unsigned int v123;
  char v124;
  uint64_t v125;
  char *__s;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  _QWORD *v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;

  v8 = a8;
  v9 = (char *)a7;
  v10 = (char *)a6;
  v11 = (_DWORD *)a5;
  v12 = (unsigned int *)a4;
  v15 = a1;
  v16 = 2;
  *(_DWORD *)a4 = 2;
  if (a3)
  {
    v17 = 0;
    v16 = 2;
    do
    {
      v18 = *(uint64_t **)(a2 + 8 * v17);
      if (*((_DWORD *)v18 + 2))
      {
        v19 = 0;
        v20 = *v18;
        do
        {
          *(_DWORD *)a4 = v16 + 1;
          if (*(_DWORD *)(*(_QWORD *)(v20 + 8 * v19) + 16))
          {
            v16 += 2;
            *(_DWORD *)a4 = v16;
          }
          else
          {
            ++v16;
          }
          ++v19;
        }
        while (v19 < *((unsigned int *)v18 + 2));
      }
      else
      {
        LODWORD(v19) = 0;
      }
      ++v17;
    }
    while (v17 != a3);
    if (!v16)
    {
      v21 = "::ldbrec:: in FillProsWords. Number of prosodic words is %d.\n";
      goto LABEL_145;
    }
  }
  else
  {
    LODWORD(v19) = 0;
  }
  v135 = (_QWORD *)heap_Alloc(*(_QWORD *)(a1 + 8), 8 * v16);
  if (!v135)
  {
    v21 = "::ldbrec:: in FillProsWords while allocating memory to hold ppPWRI\n";
    goto LABEL_145;
  }
  if (**(_BYTE **)(***(_QWORD ***)a2 + 136) != 35)
  {
    SilWord = MakeSilWord(v15, 0, 0, 200, 35, v10, a7, a8);
    *v135 = SilWord;
    if (!SilWord)
    {
      v21 = "::ldbrec:: in FillProsWords while creating initial silence.\n";
      goto LABEL_145;
    }
    v131 = 1;
    if (a3)
      goto LABEL_18;
LABEL_136:
    v104 = 0;
    v24 = 0xFFFFFFFFLL;
    v105 = v131;
    v106 = v131;
    goto LABEL_137;
  }
  v131 = 0;
  if (!a3)
    goto LABEL_136;
LABEL_18:
  v22 = 0;
  v23 = 0;
  v122 = 0;
  v132 = 0;
  v113 = a3;
  v123 = v131;
  v124 = 32;
  do
  {
    v136 = v22;
    if (v23)
      heap_Free(*(_QWORD **)(v15 + 8), (uint64_t)v23);
    v23 = (char *)stringdup(v15, v10);
    if (!v23)
    {
      v21 = "::ldbrec:: in FillProsWords resetting active-tag value.\n";
      goto LABEL_145;
    }
    v24 = v136;
    v25 = *(_QWORD *)(a2 + 8 * v136);
    if (*(_DWORD *)(v25 + 8))
    {
      v115 = v23;
      v116 = v8;
      v114 = v10;
      v112 = v11;
      v19 = 0;
      v138 = v15;
      __s = v9;
LABEL_24:
      v26 = strlen(*(const char **)(*(_QWORD *)(*(_QWORD *)v25 + 8 * v19) + 136));
      v27 = v26 + 1;
      v28 = heap_Alloc(*(_QWORD *)(v15 + 8), v27);
      if (!v28)
      {
        v21 = "::ldbrec:: in FillProsWords allocating memory to hold phone sequences.\n";
        goto LABEL_145;
      }
      v130 = v28;
      v29 = heap_Alloc(*(_QWORD *)(v15 + 8), v27);
      if (!v29)
      {
        v21 = "::ldbrec:: in FillProsWords allocating memory to hold differentiator sequences.\n";
        goto LABEL_145;
      }
      v129 = v29;
      v125 = heap_Calloc(*(_QWORD **)(v15 + 8), v27, 4);
      if (!v125)
      {
        v21 = "::ldbrec:: in FillProsWrods allocating memory to hold lexical stress.\n";
        goto LABEL_145;
      }
      v128 = heap_Calloc(*(_QWORD **)(v15 + 8), v27, 4);
      if (!v128)
      {
        v21 = "::ldbrec:: in FillProsWords allocating memory to hold syllable boundaries.\n";
        goto LABEL_145;
      }
      v137 = (void *)heap_Alloc(*(_QWORD *)(v15 + 8), 8 * v27);
      if (!v137)
      {
        v21 = "::ldbrec:: in FillProsWords allocating memory to hold phone tags.\n";
        goto LABEL_145;
      }
      if (v26 == -1)
      {
        a4 = v136;
      }
      else
      {
        bzero(v137, 8 * v27);
        a4 = v136;
        if (!v26)
          goto LABEL_123;
      }
      v30 = 0;
      v31 = 0;
      v32 = v26;
      v33 = 1;
      v34 = v132;
      v127 = v26;
LABEL_34:
      v35 = v31;
      while (1)
      {
        v36 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 8 * a4) + 8 * v19) + 136);
        v37 = *(_BYTE *)(v36 + v35);
        if (!v37)
        {
LABEL_82:
          v66 = v127;
          goto LABEL_83;
        }
        v38 = *(unsigned __int8 *)(v36 + v35);
        if (v38 == 92)
        {
          v118 = v33;
          v120 = v30;
          v134 = v34;
          v53 = v35 + 1;
          v54 = strchr((char *)(v36 + (v35 + 1)), 92);
          if (v54)
            v60 = (_DWORD)v54 - v36;
          else
            v60 = v35;
          if (!v54)
          {
            NNFX_logMsg(v138, 1, (uint64_t)"::ldbrec:: in FillProsWords. End of SPR reached without finding closing tag.", v55, v56, v57, v58, v59);
            goto LABEL_78;
          }
          if ((v60 - v35 + 1) <= 2)
          {
            NNFX_logMsg(v138, 1, (uint64_t)"::ldbrec:: empty tag in FillProsWords.", v55, v56, v57, v58, v59);
            if (v60 + 1 == (_DWORD)v35)
              v61 = 1;
            else
              v61 = v60 - v35;
            v53 = v61 + v35;
            goto LABEL_78;
          }
          heap_Free(*(_QWORD **)(v138 + 8), (uint64_t)v115);
          v62 = (char *)heap_Alloc(*(_QWORD *)(v138 + 8), (v60 - v35));
          if (!v62)
          {
            v21 = "::ldbrec:: in FillProsWords allocating memory when updating tag value.\n";
            goto LABEL_149;
          }
          v63 = 0;
          v64 = (~(_DWORD)v35 + v60);
          a4 = v136;
          do
          {
            v62[v63] = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 8 * v136) + 8 * v19) + 136)
                                + (v35 + v63 + 1));
            ++v63;
          }
          while (v63 < v64);
          v62[v64] = 0;
          if (*v62 == 47)
          {
            heap_Free(*(_QWORD **)(v138 + 8), (uint64_t)v62);
            v65 = (char *)stringdup(v138, v114);
            if (!v65)
            {
              v21 = "::ldbrec:: in FillProsWords resetting active-tag value.\n";
              goto LABEL_149;
            }
            v115 = v65;
            v53 = v60;
LABEL_78:
            a4 = v136;
          }
          else
          {
            v115 = v62;
            v53 = v60;
          }
          v34 = v134;
          v30 = v120;
          v66 = v127;
          v33 = v118;
          v31 = v53 + 1;
          if (v53 + 1 < v127)
            goto LABEL_34;
LABEL_83:
          if (v30 > v66)
          {
            v21 = "::ldbrec:: in FillProsWords. Trying to null-terminate string at index %d in a buffer of length %d.\n";
LABEL_149:
            v111 = v138;
            goto LABEL_146;
          }
          v15 = v138;
          v132 = v34;
          if (v66 && v122 && v123 >= 2)
          {
            v67 = v30;
            if (!InsertSilWord(v138, a2, (uint64_t)v135, a4, (v19 - 1), (v131 - 1), v123, *v12, v114))return 0;
            LODWORD(v131) = v131 + 1;
            ++v123;
            v9 = __s;
            a4 = v136;
            LODWORD(v30) = v67;
            if (!v67)
            {
LABEL_123:
              v122 = *(_DWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 8 * a4) + 8 * v19) + 16);
              heap_Free(*(_QWORD **)(v15 + 8), v125);
              heap_Free(*(_QWORD **)(v15 + 8), v130);
              heap_Free(*(_QWORD **)(v15 + 8), v129);
              heap_Free(*(_QWORD **)(v15 + 8), v128);
              if ((_DWORD)v27)
              {
                v103 = (uint64_t *)v137;
                do
                {
                  if (*v103)
                  {
                    heap_Free(*(_QWORD **)(v15 + 8), *v103);
                    *v103 = 0;
                  }
                  ++v103;
                  --v27;
                }
                while (v27);
              }
              heap_Free(*(_QWORD **)(v15 + 8), (uint64_t)v137);
              ++v19;
              v24 = v136;
              v25 = *(_QWORD *)(a2 + 8 * v136);
              if (v19 >= *(unsigned int *)(v25 + 8))
              {
                v11 = v112;
                v10 = v114;
                v23 = v115;
                v8 = v116;
                goto LABEL_131;
              }
              goto LABEL_24;
            }
          }
          else
          {
            v9 = __s;
            if (!(_DWORD)v30)
              goto LABEL_123;
          }
          *(_BYTE *)(v130 + v30) = 0;
          v68 = (v30 - 1);
          *(_BYTE *)(v129 + v68) = v124;
          *(_BYTE *)(v129 + v30) = 0;
          if (v131 >= *v12)
          {
            v21 = "::ldbrec:: in FillProsWords trying to allocate for %d-th prosodic word while expecting %d";
          }
          else
          {
            v121 = v30;
            v69 = heap_Alloc(*(_QWORD *)(v138 + 8), 200);
            v135[v131] = v69;
            if (v69)
            {
              v70 = *(_QWORD *)(**(_QWORD **)(a2 + 8 * v136) + 8 * v19);
              *(_OWORD *)v69 = *(_OWORD *)v70;
              *(_QWORD *)(v69 + 16) = *(_QWORD *)(v70 + 16);
              *(_DWORD *)(v69 + 24) = *(_DWORD *)(v70 + 24);
              *(_BYTE *)(v69 + 136) = *(_BYTE *)(v70 + 120);
              v71 = stringdup(v138, *(char **)(v70 + 128));
              *(_QWORD *)(v135[v131] + 32) = v71;
              if (v71)
              {
                v72 = stringdup(v138, *(char **)(*(_QWORD *)(**(_QWORD **)(a2 + 8 * v136) + 8 * v19) + 136));
                *(_QWORD *)(v135[v131] + 40) = v72;
                if (v72)
                {
                  v73 = stringdup(v138, *(char **)(*(_QWORD *)(**(_QWORD **)(a2 + 8 * v136) + 8 * v19) + 32));
                  *(_QWORD *)(v135[v131] + 48) = v73;
                  if (v73)
                  {
                    v74 = stringdup(v138, *(char **)(*(_QWORD *)(**(_QWORD **)(a2 + 8 * v136) + 8 * v19) + 40));
                    *(_QWORD *)(v135[v131] + 56) = v74;
                    if (v74)
                    {
                      v75 = stringdup(v138, *(char **)(*(_QWORD *)(**(_QWORD **)(a2 + 8 * v136) + 8 * v19) + 48));
                      *(_QWORD *)(v135[v131] + 64) = v75;
                      if (v75)
                      {
                        v76 = stringdup(v138, *(char **)(*(_QWORD *)(**(_QWORD **)(a2 + 8 * v136) + 8 * v19) + 56));
                        *(_QWORD *)(v135[v131] + 72) = v76;
                        if (v76)
                        {
                          v77 = stringdup(v138, *(char **)(*(_QWORD *)(**(_QWORD **)(a2 + 8 * v136) + 8 * v19) + 64));
                          *(_QWORD *)(v135[v131] + 80) = v77;
                          if (v77)
                          {
                            v78 = stringdup(v138, *(char **)(*(_QWORD *)(**(_QWORD **)(a2 + 8 * v136) + 8 * v19) + 72));
                            *(_QWORD *)(v135[v131] + 88) = v78;
                            if (v78)
                            {
                              v79 = stringdup(v138, *(char **)(*(_QWORD *)(**(_QWORD **)(a2 + 8 * v136) + 8 * v19) + 80));
                              *(_QWORD *)(v135[v131] + 96) = v79;
                              if (v79)
                              {
                                v80 = stringdup(v138, *(char **)(*(_QWORD *)(**(_QWORD **)(a2 + 8 * v136) + 8 * v19) + 96));
                                *(_QWORD *)(v135[v131] + 112) = v80;
                                if (v80)
                                {
                                  v81 = stringdup(v138, *(char **)(*(_QWORD *)(**(_QWORD **)(a2 + 8 * v136) + 8 * v19) + 88));
                                  *(_QWORD *)(v135[v131] + 104) = v81;
                                  if (v81)
                                  {
                                    v82 = stringdup(v138, *(char **)(*(_QWORD *)(**(_QWORD **)(a2 + 8 * v136) + 8 * v19) + 104));
                                    *(_QWORD *)(v135[v131] + 120) = v82;
                                    if (v82)
                                    {
                                      v83 = stringdup(v138, *(char **)(*(_QWORD *)(**(_QWORD **)(a2 + 8 * v136) + 8 * v19) + 112));
                                      *(_QWORD *)(v135[v131] + 128) = v83;
                                      if (v83)
                                      {
                                        *(_DWORD *)(v128 + 4 * v68) = 1;
                                        v84 = (_DWORD *)v135[v131];
                                        v84[35] = v123;
                                        v84[36] = v121;
                                        v85 = v19 == *(_DWORD *)(*(_QWORD *)(a2 + 8 * v136) + 8) - 1;
                                        v84[48] = 0;
                                        v84[49] = v85;
                                        v86 = heap_Calloc(*(_QWORD **)(v138 + 8), v121, 4);
                                        *(_QWORD *)(v135[v131] + 176) = v86;
                                        if (v86)
                                        {
                                          v123 += v121;
                                          v87 = *(_DWORD **)(v135[v131] + 176);
                                          v88 = v121;
                                          v89 = (int *)v125;
                                          do
                                          {
                                            v90 = *v89++;
                                            *v87++ = v90;
                                            --v88;
                                          }
                                          while (v88);
                                          v91 = heap_Alloc(*(_QWORD *)(v138 + 8), v121 + 1);
                                          *(_QWORD *)(v135[v131] + 152) = v91;
                                          if (v91)
                                          {
                                            v92 = 0;
                                            do
                                            {
                                              *(_BYTE *)(*(_QWORD *)(v135[v131] + 152) + v92) = *(_BYTE *)(v130 + v92);
                                              ++v92;
                                            }
                                            while (v121 != v92);
                                            *(_BYTE *)(*(_QWORD *)(v135[v131] + 152) + v121) = 0;
                                            v93 = heap_Alloc(*(_QWORD *)(v138 + 8), v121 + 1);
                                            *(_QWORD *)(v135[v131] + 160) = v93;
                                            if (v93)
                                            {
                                              v94 = 0;
                                              do
                                              {
                                                *(_BYTE *)(*(_QWORD *)(v135[v131] + 160) + v94) = *(_BYTE *)(v129 + v94);
                                                ++v94;
                                              }
                                              while (v121 != v94);
                                              *(_BYTE *)(*(_QWORD *)(v135[v131] + 160) + v121) = 0;
                                              v95 = heap_Calloc(*(_QWORD **)(v138 + 8), v121, 4);
                                              *(_QWORD *)(v135[v131] + 184) = v95;
                                              if (v95)
                                              {
                                                v96 = *(_DWORD **)(v135[v131] + 184);
                                                v97 = v121;
                                                v98 = (int *)v128;
                                                do
                                                {
                                                  v99 = *v98++;
                                                  *v96++ = v99;
                                                  --v97;
                                                }
                                                while (v97);
                                                v100 = heap_Alloc(*(_QWORD *)(v138 + 8), 8 * v121);
                                                *(_QWORD *)(v135[v131] + 168) = v100;
                                                if (v100)
                                                {
                                                  v101 = 0;
                                                  while (1)
                                                  {
                                                    v102 = stringdup(v138, *((char **)v137 + v101));
                                                    *(_QWORD *)(*(_QWORD *)(v135[v131] + 168) + 8 * v101) = v102;
                                                    if (!v102)
                                                      break;
                                                    if (v121 == ++v101)
                                                    {
                                                      v132 = 0;
                                                      LODWORD(v131) = v131 + 1;
                                                      v124 = 32;
                                                      v15 = v138;
                                                      v9 = __s;
                                                      a4 = v136;
                                                      goto LABEL_123;
                                                    }
                                                  }
                                                  v21 = "::ldbrec:: in FillProsWords allocating mem to hold phone-tag seq"
                                                        "uence for phone %d in pros word %d";
                                                }
                                                else
                                                {
                                                  v21 = "::ldbrec:: in FillProsWords allocating mem to hold phone-tag seq"
                                                        "uences for pros word %d\n";
                                                }
                                              }
                                              else
                                              {
                                                v21 = "::ldbrec:: in FillProsWords allocating mem to hold syll bdry seque"
                                                      "nce for pros word %d\n";
                                              }
                                            }
                                            else
                                            {
                                              v21 = "::ldbrec:: in FillProsWords allocating mem to hold differentiators s"
                                                    "equence for pros word %d\n";
                                            }
                                          }
                                          else
                                          {
                                            v21 = "::ldbrec:: in FillProsWords allocating mem to hold phone sequence for pros word %d\n";
                                          }
                                        }
                                        else
                                        {
                                          v21 = "::ldbrec:: in FillProsWords allocating mem to hold lex stress sequence f"
                                                "or pros word %d\n";
                                        }
                                        goto LABEL_149;
                                      }
                                      v21 = "::ldbrec:: in FillProsWord creating nluCPS field.\n";
                                    }
                                    else
                                    {
                                      v21 = "::ldbrec:: in FillProsWord creating nluBDS field.\n";
                                    }
                                  }
                                  else
                                  {
                                    v21 = "::ldbrec:: in FillProsWord creating nluCMP field.\n";
                                  }
                                }
                                else
                                {
                                  v21 = "::ldbrec:: in FillProsWord creating nluPNC field.\n";
                                }
                              }
                              else
                              {
                                v21 = "::ldbrec:: in FillProsWord creating nluCLS field.\n";
                              }
                            }
                            else
                            {
                              v21 = "::ldbrec:: in FillProsWord creating nluPHR field.\n";
                            }
                          }
                          else
                          {
                            v21 = "::ldbrec:: in FillProsWord creating nluPOS field.\n";
                          }
                        }
                        else
                        {
                          v21 = "::ldbrec:: in FillProsWord creating lang field.\n";
                        }
                      }
                      else
                      {
                        v21 = "::ldbrec:: in FillProsWord creating CGN field.\n";
                      }
                    }
                    else
                    {
                      v21 = "::ldbrec:: in FillProsWord creating POS field.\n";
                    }
                  }
                  else
                  {
                    v21 = "::ldbrec:: in FillProsWord creating tnTag field.\n";
                  }
                }
                else
                {
                  v21 = "::ldbrec:: in FillProsWord creating SPR field.\n";
                }
              }
              else
              {
                v21 = "::ldbrec:: in FillProsWord creating ortho field.\n";
              }
            }
            else
            {
              v21 = "::ldbrec:: in FillProsWords allocating ppPWRI for record %d\n";
            }
          }
LABEL_145:
          v111 = v15;
LABEL_146:
          NNFX_logMsg(v111, 0, (uint64_t)v21, a4, a5, a6, a7, a8);
          return 0;
        }
        if ((v37 & 0xF7) == 0x25)
        {
          v34 = 0;
          v33 = 1;
          goto LABEL_39;
        }
        if (*(unsigned __int8 *)(v36 + v35) > 0x29u)
        {
          if (v38 == 42)
            goto LABEL_39;
          if (v38 == 96)
          {
            v34 = 2;
            goto LABEL_39;
          }
        }
        else
        {
          if (v38 == 34)
          {
            v34 = 1;
            goto LABEL_39;
          }
          if (v38 == 39)
          {
            v34 = 3;
            goto LABEL_39;
          }
        }
        if (__s)
        {
          v39 = *(char *)(v36 + v35);
          v40 = v34;
          v117 = v19;
          v119 = v32;
          v41 = v30;
          v42 = v33;
          v43 = strchr(__s, v39);
          v33 = v42;
          v30 = v41;
          v19 = v117;
          v32 = v119;
          v34 = v40;
          a4 = v136;
          if (v43)
          {
            v124 = v38;
            goto LABEL_39;
          }
        }
        if (v30 >= v127)
        {
          v21 = "::ldbrec:: in FillProsWords. Trying to write information for phone at index %d in buffer of length %d.";
          goto LABEL_149;
        }
        if (*(unsigned __int8 *)(v116 + v37) == 255)
        {
          v47 = v34;
          v48 = v30;
          v49 = v33;
          NNFX_logMsg(v138, 1, (uint64_t)"::ldbrec:: in FillProsWords unvalid phoneme %c.\n", a4, a5, a6, a7, a8);
          v33 = v49;
          v30 = v48;
          v34 = v47;
          a4 = v136;
          goto LABEL_39;
        }
        *(_BYTE *)(v130 + v30) = v38;
        *(_DWORD *)(v125 + 4 * v30) = v34;
        *(_BYTE *)(v129 + v30) = 32;
        v44 = v30;
        v133 = v34;
        if (!(_DWORD)v30)
          break;
        v45 = (v30 - 1);
        *(_BYTE *)(v129 + v45) = v124;
        *(_DWORD *)(v128 + 4 * v30) = 0;
        if ((_DWORD)v33 == 1)
        {
          v46 = 1;
LABEL_59:
          *(_DWORD *)(v128 + 4 * v45) = v46;
        }
        v50 = v19;
        v51 = v30;
        v52 = stringdup(v138, v115);
        *((_QWORD *)v137 + v44) = v52;
        if (!v52)
        {
          v21 = "::ldbrec:: in FillProsWords copying phone tag for phone %c.\n";
          goto LABEL_149;
        }
        v33 = 0;
        v30 = (v51 + 1);
        v124 = 32;
        a4 = v136;
        v34 = v133;
        v19 = v50;
LABEL_39:
        if (++v35 >= v32)
          goto LABEL_82;
      }
      v46 = 0;
      v45 = 0;
      goto LABEL_59;
    }
    LODWORD(v19) = 0;
LABEL_131:
    v22 = v24 + 1;
  }
  while (v24 + 1 != v113);
  v104 = (uint64_t)v23;
  v105 = v131;
  v106 = v123;
LABEL_137:
  if (!InsertSilWord(v15, a2, (uint64_t)v135, v24, (v19 - 1), (v105 - 1), v106, *v12, v10))return 0;
  v108 = v105 + 1;
  if (v108 < *v12)
  {
    v109 = heap_Realloc(*(uint64_t **)(v15 + 8), (uint64_t)v135, 8 * v108);
    if (v109)
    {
      *v12 = v108;
      v135 = (_QWORD *)v109;
    }
  }
  if (v104)
    heap_Free(*(_QWORD **)(v15 + 8), v104);
  *v11 = v106 + 1;
  return v135;
}

uint64_t InsertSilWord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9)
{
  unsigned int v9;
  int v11;
  unsigned int v12;
  uint64_t v15;
  _QWORD *SilWord;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  const char *v21;

  v9 = a6;
  if (a6 >= a8)
  {
    v21 = "::ldbrec:: in FillProsWords trying to allocate for %d-th prosodic (silence) word while expecting %d max";
LABEL_13:
    NNFX_logMsg(a1, 0, (uint64_t)v21, a4, a5, a6, a7, a8);
    return 0;
  }
  v11 = a5;
  v12 = a4;
  v15 = *(_QWORD *)(**(_QWORD **)(a2 + 8 * a4) + 8 * a5);
  SilWord = MakeSilWord(a1, a7, *(_DWORD *)(v15 + 8), *(unsigned int *)(v15 + 16), 35, a9, a7, a8);
  *(_QWORD *)(a3 + 8 * (v9 + 1)) = SilWord;
  if (!SilWord)
  {
    v21 = "::ldbrec:: in FillProsWords while creating silence word after phone %d.\n";
    goto LABEL_13;
  }
  v17 = *(_QWORD *)(a3 + 8 * v9);
  v18 = *(_DWORD *)(*(_QWORD *)(a2 + 8 * v12) + 8) - 1;
  if (*(_DWORD *)(v17 + 144))
    v19 = v18 == v11;
  else
    v19 = 0;
  if (v19)
    *(_DWORD *)(v17 + 196) = 0;
  v20 = 1;
  if (v18 == v11)
    *((_DWORD *)SilWord + 49) = 1;
  return v20;
}

_QWORD *freepWRI(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a2[16];
  if (v4)
    heap_Free(*(_QWORD **)(a1 + 8), v4);
  v5 = a2[17];
  if (v5)
    heap_Free(*(_QWORD **)(a1 + 8), v5);
  v6 = a2[4];
  if (v6)
    heap_Free(*(_QWORD **)(a1 + 8), v6);
  v7 = a2[5];
  if (v7)
    heap_Free(*(_QWORD **)(a1 + 8), v7);
  v8 = a2[6];
  if (v8)
    heap_Free(*(_QWORD **)(a1 + 8), v8);
  v9 = a2[7];
  if (v9)
    heap_Free(*(_QWORD **)(a1 + 8), v9);
  v10 = a2[8];
  if (v10)
    heap_Free(*(_QWORD **)(a1 + 8), v10);
  v11 = a2[9];
  if (v11)
    heap_Free(*(_QWORD **)(a1 + 8), v11);
  v12 = a2[10];
  if (v12)
    heap_Free(*(_QWORD **)(a1 + 8), v12);
  v13 = a2[12];
  if (v13)
    heap_Free(*(_QWORD **)(a1 + 8), v13);
  v14 = a2[11];
  if (v14)
    heap_Free(*(_QWORD **)(a1 + 8), v14);
  v15 = a2[13];
  if (v15)
    heap_Free(*(_QWORD **)(a1 + 8), v15);
  v16 = a2[14];
  if (v16)
    heap_Free(*(_QWORD **)(a1 + 8), v16);
  return heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)a2);
}

_QWORD *freepSRI(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t i;
  _QWORD *v6;
  unint64_t v7;
  unint64_t j;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t k;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t m;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t n;
  _QWORD *v21;
  uint64_t v22;

  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4)
  {
    for (i = 0; i < v4; ++i)
    {
      v6 = *(_QWORD **)(*(_QWORD *)a2 + 8 * i);
      if (v6)
      {
        freepWRI(a1, v6);
        *(_QWORD *)(*(_QWORD *)a2 + 8 * i) = 0;
        v4 = *(unsigned int *)(a2 + 8);
      }
    }
  }
  if (*(_QWORD *)a2)
  {
    heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)a2);
    *(_QWORD *)a2 = 0;
  }
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7)
  {
    for (j = 0; j < v7; ++j)
    {
      v9 = *(_QWORD **)(*(_QWORD *)(a2 + 16) + 8 * j);
      if (v9)
      {
        freepWRI(a1, v9);
        *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * j) = 0;
        v7 = *(unsigned int *)(a2 + 24);
      }
    }
  }
  v10 = *(_QWORD *)(a2 + 16);
  if (v10)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v10);
    *(_QWORD *)(a2 + 16) = 0;
  }
  v11 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v11)
  {
    for (k = 0; k < v11; ++k)
    {
      v13 = *(_QWORD **)(*(_QWORD *)(a2 + 32) + 8 * k);
      if (v13)
      {
        freepWRI(a1, v13);
        *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * k) = 0;
        v11 = *(unsigned int *)(a2 + 40);
      }
    }
  }
  v14 = *(_QWORD *)(a2 + 32);
  if (v14)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v14);
    *(_QWORD *)(a2 + 32) = 0;
  }
  v15 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v15)
  {
    for (m = 0; m < v15; ++m)
    {
      v17 = *(_QWORD **)(*(_QWORD *)(a2 + 48) + 8 * m);
      if (v17)
      {
        freepWRI(a1, v17);
        *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * m) = 0;
        v15 = *(unsigned int *)(a2 + 56);
      }
    }
  }
  v18 = *(_QWORD *)(a2 + 48);
  if (v18)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v18);
    *(_QWORD *)(a2 + 48) = 0;
  }
  v19 = *(unsigned int *)(a2 + 72);
  if ((_DWORD)v19)
  {
    for (n = 0; n < v19; ++n)
    {
      v21 = *(_QWORD **)(*(_QWORD *)(a2 + 64) + 8 * n);
      if (v21)
      {
        freepWRI(a1, v21);
        *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * n) = 0;
        v19 = *(unsigned int *)(a2 + 72);
      }
    }
  }
  v22 = *(_QWORD *)(a2 + 64);
  if (v22)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v22);
    *(_QWORD *)(a2 + 64) = 0;
  }
  return heap_Free(*(_QWORD **)(a1 + 8), a2);
}

_QWORD *freepPWRI(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t i;
  uint64_t v23;
  uint64_t v24;

  v4 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v4);
    *(_QWORD *)(a2 + 32) = 0;
  }
  v5 = *(_QWORD *)(a2 + 40);
  if (v5)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v5);
    *(_QWORD *)(a2 + 40) = 0;
  }
  v6 = *(_QWORD *)(a2 + 48);
  if (v6)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v6);
    *(_QWORD *)(a2 + 48) = 0;
  }
  v7 = *(_QWORD *)(a2 + 56);
  if (v7)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v7);
    *(_QWORD *)(a2 + 56) = 0;
  }
  v8 = *(_QWORD *)(a2 + 64);
  if (v8)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v8);
    *(_QWORD *)(a2 + 64) = 0;
  }
  v9 = *(_QWORD *)(a2 + 72);
  if (v9)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v9);
    *(_QWORD *)(a2 + 72) = 0;
  }
  v10 = *(_QWORD *)(a2 + 88);
  if (v10)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v10);
    *(_QWORD *)(a2 + 88) = 0;
  }
  v11 = *(_QWORD *)(a2 + 80);
  if (v11)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v11);
    *(_QWORD *)(a2 + 80) = 0;
  }
  v12 = *(_QWORD *)(a2 + 96);
  if (v12)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v12);
    *(_QWORD *)(a2 + 96) = 0;
  }
  v13 = *(_QWORD *)(a2 + 112);
  if (v13)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v13);
    *(_QWORD *)(a2 + 112) = 0;
  }
  v14 = *(_QWORD *)(a2 + 104);
  if (v14)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v14);
    *(_QWORD *)(a2 + 104) = 0;
  }
  v15 = *(_QWORD *)(a2 + 120);
  if (v15)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v15);
    *(_QWORD *)(a2 + 120) = 0;
  }
  v16 = *(_QWORD *)(a2 + 128);
  if (v16)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v16);
    *(_QWORD *)(a2 + 128) = 0;
  }
  v17 = *(_QWORD *)(a2 + 152);
  if (v17)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v17);
    *(_QWORD *)(a2 + 152) = 0;
  }
  v18 = *(_QWORD *)(a2 + 160);
  if (v18)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v18);
    *(_QWORD *)(a2 + 160) = 0;
  }
  v19 = *(_QWORD *)(a2 + 176);
  if (v19)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v19);
    *(_QWORD *)(a2 + 176) = 0;
  }
  v20 = *(_QWORD *)(a2 + 184);
  if (v20)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v20);
    *(_QWORD *)(a2 + 184) = 0;
  }
  v21 = *(unsigned int *)(a2 + 144);
  if ((_DWORD)v21)
  {
    for (i = 0; i < v21; ++i)
    {
      v23 = *(_QWORD *)(*(_QWORD *)(a2 + 168) + 8 * i);
      if (v23)
      {
        heap_Free(*(_QWORD **)(a1 + 8), v23);
        *(_QWORD *)(*(_QWORD *)(a2 + 168) + 8 * i) = 0;
        v21 = *(unsigned int *)(a2 + 144);
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 168);
  if (v24)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v24);
    *(_QWORD *)(a2 + 168) = 0;
  }
  return heap_Free(*(_QWORD **)(a1 + 8), a2);
}

_QWORD *freeppSRI(_QWORD *result, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  if (a2)
  {
    v4 = (uint64_t)result;
    if (a3 >= 1)
    {
      v5 = a3;
      v6 = (uint64_t *)a2;
      do
      {
        if (*v6)
        {
          freepSRI(v4, *v6);
          *v6 = 0;
        }
        ++v6;
        --v5;
      }
      while (v5);
    }
    return heap_Free(*(_QWORD **)(v4 + 8), a2);
  }
  return result;
}

uint64_t ParseWnluStr(const char *a1, char **a2)
{
  unsigned int v4;
  char v5;
  const char *v6;
  __int16 v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  const char *v13;
  unint64_t v14;
  char v15;
  int v16;
  char **v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  char v24;
  void *v25;
  char __src[256];
  _BYTE __dst[256];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = strlen(a1);
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v10 = a1[v9];
      if (!a1[v9])
        break;
      if (v10 == 58)
      {
        if (v9 <= v8)
        {
          v12 = 0;
        }
        else
        {
          memcpy(__dst, &a1[v8], v9 + ~v8 + 1);
          v12 = v9 - v8;
        }
        v6 = __dst;
        __dst[v12] = 0;
        ++v9;
        if (__dst[1] == 95)
        {
          v24 = __dst[0];
          v25 = memchr("SsEeIi", __dst[0], 7uLL);
          v6 = &__dst[2 * (v25 != 0)];
          if (v25)
            v5 = v24;
          else
            v5 = 0;
        }
        else
        {
          v5 = 0;
        }
LABEL_32:
        v8 = v9;
        goto LABEL_33;
      }
      if (v10 == 59)
        break;
      ++v9;
LABEL_33:
      if (v9 > v4)
        return v7;
    }
    if (v5)
    {
      __src[0] = v5;
      __src[1] = 95;
      v11 = 2;
    }
    else
    {
      v11 = 0;
    }
    if (v9 > v8)
    {
      v13 = &a1[v8];
      v14 = v9 - (unint64_t)v8;
      do
      {
        v15 = *v13++;
        __src[v11++] = v15;
        --v14;
      }
      while (v14);
    }
    __src[v11] = 0;
    if (v6)
    {
      v16 = strcmp(v6, "POS");
      v17 = a2 + 8;
      if (!v16)
        goto LABEL_23;
      v18 = strcmp(v6, "PHR");
      v17 = a2 + 9;
      if (!v18)
        goto LABEL_23;
      v19 = strcmp(v6, "CLASS");
      v17 = a2 + 10;
      if (!v19)
        goto LABEL_23;
      v20 = strcmp(v6, "PUNC");
      v17 = a2 + 12;
      if (!v20
        || (v21 = strcmp(v6, "COMP"), v17 = a2 + 11, !v21)
        || (v22 = strcmp(v6, "BNDSHAPE"), v17 = a2 + 13, !v22)
        || (v23 = strcmp(v6, "COMPPOS"), v17 = a2 + 14, !v23))
      {
LABEL_23:
        strcpy(*v17, __src);
      }
      ++v7;
    }
    v5 = 0;
    ++v9;
    goto LABEL_32;
  }
  return 0;
}

uint64_t DupWrdRecField(uint64_t a1, char **a2, uint64_t a3, const char *a4)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;

  v8 = (char *)heap_Alloc(*(_QWORD *)(a1 + 8), a3);
  v14 = v8;
  if (v8)
  {
    strncpy(v8, a4, a3 - 1);
    result = 0;
    v14[a3 - 1] = 0;
  }
  else
  {
    NNFX_logMsg(a1, 0, (uint64_t)"::ldbrec::memory allocation", v9, v10, v11, v12, v13);
    result = 2364547082;
  }
  *a2 = v14;
  return result;
}

uint64_t nnextract_Allocate(uint64_t a1, uint64_t **a2, _DWORD *a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v19;

  v12 = (uint64_t *)heap_Alloc(*(_QWORD *)(a1 + 8), 8);
  *a2 = v12;
  if (v12)
  {
    if ((Compile_SntWrdRec(a1, a3, a4, a5, a6, v12) & 0x80000000) == 0)
      return 0;
    v19 = "::nnfeatextract::CompileSntWrdRecord";
  }
  else
  {
    v19 = "::nnfeatextract::memory allocation";
  }
  NNFX_logMsg(a1, 0, (uint64_t)v19, v13, v14, v15, v16, v17);
  return 1;
}

uint64_t nnextract_Process2Buff(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11, _DWORD *a12)
{
  const char **v13;
  unsigned __int8 v17;
  unsigned int v18;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t NnFeatures;
  uint64_t v27;
  int *v28;
  uint64_t Buf;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  const char *v37;
  _BOOL8 v38;
  _OWORD v40[2];
  __int16 v41;

  v13 = *(const char ***)(a6 + 8);
  if (!v13)
  {
    v37 = "::nnfeatextract::Missing NN lingtab data.";
LABEL_13:
    NNFX_logMsg(a1, 0, (uint64_t)v37, a4, a5, a6, (uint64_t)a7, a8);
    return 1;
  }
  v17 = a5;
  v18 = a4;
  v41 = 0;
  memset(v40, 0, sizeof(v40));
  GetLingTabIndex(v13, v40);
  if (SLOWORD(v40[0]) == -1)
    NNFX_logMsg(a1, 1, (uint64_t)"::nnfeatextract::NN - GetLingTabIndex - missing VOWELS entry.", v21, v22, v23, v24, v25);
  if (SWORD1(v40[0]) == -1)
    NNFX_logMsg(a1, 1, (uint64_t)"::nnfeatextract::NN - GetLingTabIndex - missing VOICEDPHONES entry.", v21, v22, v23, v24, v25);
  NnFeatures = extractNnFeatures((_QWORD *)a1, *(_QWORD *)(a6 + 8), (uint64_t)v40, a9, a10, a2, a3, v18, v17, a8);
  *a7 = NnFeatures;
  if (!NnFeatures)
  {
    v37 = "in ";
    goto LABEL_13;
  }
  v27 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 16);
  if (!v27)
  {
    v37 = "::nnfeatextract::Memory allocation.";
    goto LABEL_13;
  }
  v28 = (int *)v27;
  SymTabInit(v27);
  Buf = SymTabReadBuf(a1, v28, *(_QWORD *)(a6 + 16), *(unsigned __int16 *)(a6 + 24), a7);
  if ((_DWORD)Buf)
  {
    v35 = Buf;
    v36 = "::nnfeatextract::NN - SymTabRead.";
  }
  else
  {
    v38 = SymTabToIntInplaceActive(a1, v28, a7, 0, 0x2Du);
    if (v38)
    {
      v35 = v38;
      v36 = "::nnfeatextract:: Symbol table does not seem to be correct.";
    }
    else
    {
      v35 = unrollNnFeatures(a1, (uint64_t **)a7, (uint64_t)v28, a11, a12);
      if (!(_DWORD)v35)
      {
        NNFX_logMsg(a1, 2, (uint64_t)"::nnfeatextract:: N. unrolled features: %4d   N. steps: %4d", v30, v31, v32, v33, v34);
        SymTabFree((_QWORD *)a1, v28);
        heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v28);
        return v35;
      }
      v36 = "::nnfeatextract:: features unroll failed.";
    }
  }
  NNFX_logMsg(a1, 0, (uint64_t)v36, v30, v31, v32, v33, v34);
  return v35;
}

uint64_t GetLingTabIndex(const char **a1, _WORD *a2)
{
  uint64_t v4;
  _WORD *v5;
  _WORD *v6;
  _WORD *v7;
  __int128 v8;
  const char *v9;
  int v10;
  _WORD *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  _WORD *v29;
  _WORD *v30;
  _WORD *v31;
  _WORD *v32;
  _WORD *v33;
  _WORD *v34;
  _WORD *v35;
  _WORD *v36;
  _WORD *v37;
  _WORD *v38;
  _WORD *v39;
  _WORD *v40;
  _WORD *v41;

  v4 = 0;
  v5 = a2 + 1;
  v6 = a2 + 2;
  v7 = a2 + 3;
  v41 = a2 + 4;
  v39 = a2 + 6;
  v40 = a2 + 5;
  *(_QWORD *)&v8 = -1;
  *((_QWORD *)&v8 + 1) = -1;
  *((_OWORD *)a2 + 1) = v8;
  v37 = a2 + 8;
  v38 = a2 + 7;
  v35 = a2 + 10;
  v36 = a2 + 9;
  v33 = a2 + 12;
  v34 = a2 + 11;
  v31 = a2 + 14;
  v32 = a2 + 13;
  *(_OWORD *)a2 = v8;
  v30 = a2 + 15;
  a2[16] = -1;
  v29 = a2 + 16;
  do
  {
    v9 = *a1;
    if (!*a1)
      break;
    v10 = strcmp(*a1, "VOWELS");
    v11 = a2;
    if (!v10)
      goto LABEL_20;
    v12 = strcmp(v9, "VOICEDPHONES");
    v11 = v5;
    if (!v12)
      goto LABEL_20;
    v13 = strcmp(v9, "BC_MONOVOWELS");
    v11 = v6;
    if (!v13)
      goto LABEL_20;
    v14 = strcmp(v9, "BC_DIPTHVOWELS");
    v11 = v7;
    if (!v14)
      goto LABEL_20;
    v15 = strcmp(v9, "BC_AFFRICATES");
    v11 = v41;
    if (!v15)
      goto LABEL_20;
    v16 = strcmp(v9, "BC_FRICATIVES");
    v11 = v40;
    if (!v16)
      goto LABEL_20;
    v17 = strcmp(v9, "BC_STOPS");
    v11 = v39;
    if (!v17)
      goto LABEL_20;
    v18 = strcmp(v9, "BC_LIQUIDS_TAP");
    v11 = v38;
    if (!v18)
      goto LABEL_20;
    v19 = strcmp(v9, "BC_NASALS");
    v11 = v37;
    if (!v19)
      goto LABEL_20;
    v20 = strcmp(v9, "BC_GLIDES");
    v11 = v36;
    if (!v20)
      goto LABEL_20;
    v21 = strcmp(v9, "COMMON_WORDLIST");
    v11 = v35;
    if (!v21)
      goto LABEL_20;
    v22 = strcmp(v9, "FXN_WORDLIST");
    v11 = v34;
    if (!v22)
      goto LABEL_20;
    v23 = strcmp(v9, "WH_WORDLIST");
    v11 = v33;
    if (!v23)
      goto LABEL_20;
    v24 = strcmp(v9, "CONJ_WORDLIST");
    v11 = v32;
    if (v24)
    {
      v25 = strcmp(v9, "AUXV_WORDLIST");
      v11 = v31;
      if (v25)
      {
        v26 = strcmp(v9, "ADPOS_WORDLIST");
        v11 = v30;
        if (v26)
        {
          v27 = strcmp(v9, "EXCL_FEATLIST");
          v11 = v29;
          if (v27)
            continue;
        }
      }
    }
LABEL_20:
    *v11 = v4++;
    a1 += 2;
  }
  while (v4 != 17);
  return (unsigned __int16)v4;
}

uint64_t extractNnFeatures(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, unsigned int a8, unsigned __int8 a9, uint64_t a10)
{
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  int v42;
  int v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  const char *v62;
  const char *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  __int16 v72;
  uint64_t v73;
  int *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int *v80;
  const char *v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unsigned __int16 *v89;
  uint64_t v90;
  int *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int *v98;
  const char *v99;
  uint64_t v100;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  int v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  unsigned __int16 *v109;
  uint64_t v111;
  int *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int *v118;
  const char *v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  unsigned int v125;
  int v126;
  uint64_t v127;
  unsigned int v128;
  int v129;
  unsigned __int16 *v130;
  uint64_t v131;
  int *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int *v139;
  const char *v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  unsigned int v147;
  __int16 v148;
  int v149;
  unsigned int v150;
  BOOL v151;
  unint64_t v152;
  BOOL v153;
  int v154;
  unsigned __int16 *v155;
  uint64_t v156;
  int *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int *v164;
  const char *v165;
  uint64_t v166;
  int v167;
  __int16 v168;
  unint64_t v169;
  uint64_t *v170;
  _WORD *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int v177;
  int v178;
  uint64_t v179;
  unsigned int v180;
  unsigned int v181;
  int v182;
  unsigned __int16 *v183;
  uint64_t v184;
  int *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int *v192;
  const char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _WORD *v198;
  uint64_t v199;
  unsigned int v200;
  int v201;
  unsigned __int16 *v202;
  uint64_t v203;
  int *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int *v211;
  const char *v212;
  uint64_t v213;
  unsigned int v214;
  int v215;
  uint64_t v216;
  unsigned int v217;
  unsigned int v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  __int16 v227;
  int v229;
  unsigned __int16 *v230;
  uint64_t v231;
  uint64_t v233;
  uint64_t *v234;
  uint64_t i;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  _BOOL4 v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  size_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  signed int v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  int v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  int v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unsigned int m;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  int v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  int v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t j;
  uint64_t v306;
  unint64_t v307;
  unint64_t v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  unint64_t v313;
  unint64_t k;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  const char *v320;
  const char *v321;
  uint64_t v322;
  int v323;
  uint64_t v324;
  uint64_t *v325;
  unsigned int v326;
  int v327;
  uint64_t v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  int v332;
  int ElementInGroup;
  int v334;
  unsigned int v335;
  uint64_t v337;
  unsigned int v338;
  int *v340;
  unsigned int *v341;
  uint64_t v342;
  uint64_t v343;
  unsigned int v344;
  _QWORD v345[2];
  uint64_t v346;
  uint64_t v347;
  _QWORD v348[15];

  v348[13] = *MEMORY[0x1E0C80C00];
  v346 = 0;
  v348[0] = fExtGetPhoneFeats;
  v348[1] = fExtGetLexicalFeats;
  v348[2] = fExtGetParseFeats;
  v348[3] = fExtGetPhraseFeats;
  v348[4] = fExtGetPunctFeats;
  v348[5] = fExtGetPhone2BdryFeats;
  v348[6] = fExtGetSyll2BdryFeats;
  v348[7] = fExtGetStrGrp2BdryFeats;
  v348[8] = fExtGetWord2BdryFeats;
  v348[9] = fExtGetParse2BdryFeats;
  v345[0] = 0;
  v345[1] = 0;
  v348[10] = fExtGetPhrase2BdryFeats;
  v348[11] = fExtGetPunct2BdryFeats;
  v348[12] = fExtGetVPhone2BdryFeats;
  TrieIntInit(v345);
  v16 = TrieIntAdd((uint64_t)a1, v345, "Phone", a9);
  v17 = TrieIntAdd((uint64_t)a1, v345, "Voicing", a9) | v16;
  v18 = TrieIntAdd((uint64_t)a1, v345, "ConsVow", a9);
  v19 = v17 | v18 | TrieIntAdd((uint64_t)a1, v345, "BroadClass", a9);
  v20 = TrieIntAdd((uint64_t)a1, v345, "LexStress", a9);
  v21 = v20 | TrieIntAdd((uint64_t)a1, v345, "PhoneTag", a9);
  v22 = v19 | v21 | TrieIntAdd((uint64_t)a1, v345, "PhoneDiff", a9);
  v23 = TrieIntAdd((uint64_t)a1, v345, "Prominence", a9);
  v24 = v23 | TrieIntAdd((uint64_t)a1, v345, "POS", a9);
  v25 = v24 | TrieIntAdd((uint64_t)a1, v345, "nluPOS", a9);
  v26 = v22 | v25 | TrieIntAdd((uint64_t)a1, v345, "nluCLS", a9);
  v27 = TrieIntAdd((uint64_t)a1, v345, "nluPNC", a9);
  v28 = v27 | TrieIntAdd((uint64_t)a1, v345, "nluCMP", a9);
  v29 = v28 | TrieIntAdd((uint64_t)a1, v345, "nluBDS", a9);
  v30 = v29 | TrieIntAdd((uint64_t)a1, v345, "nluCPS", a9);
  v31 = v26 | v30 | TrieIntAdd((uint64_t)a1, v345, "IsFxnWord", a9);
  v32 = TrieIntAdd((uint64_t)a1, v345, "IsWHWord", a9);
  v33 = v32 | TrieIntAdd((uint64_t)a1, v345, "IsAuxWord", a9);
  v34 = v33 | TrieIntAdd((uint64_t)a1, v345, "IsConjWord", a9);
  v35 = v34 | TrieIntAdd((uint64_t)a1, v345, "IsAdposWord", a9);
  if (v31 | v35 | TrieIntAdd((uint64_t)a1, v345, "CommonWord", a9))
  {
    v41 = " in extractFeatures while calling TrieAdd.";
    goto LABEL_54;
  }
  v342 = a2;
  v335 = a8;
  if (a10)
    v42 = 14;
  else
    v42 = 13;
  v43 = kaldi::QuantizedMatrixBase<short>::NumRows((unsigned int *)v345);
  v44 = FillProsWords((uint64_t)a1, a6, a7, (uint64_t)&v346 + 4, (uint64_t)&v346, (uint64_t)"-", a4, a5);
  if (!v44)
  {
    v41 = " in extractFeatures while calling FillProsWords.";
    goto LABEL_54;
  }
  v45 = v44;
  v332 = v43;
  v46 = v346;
  v47 = HIDWORD(v346);
  v48 = heap_Alloc(a1[1], 72);
  if (!v48)
  {
    v63 = " allocating memory in BuildPhoneTiers().";
    goto LABEL_53;
  }
  v54 = (uint64_t *)v48;
  *(_QWORD *)(v48 + 64) = 0;
  *(_OWORD *)(v48 + 32) = 0u;
  *(_OWORD *)(v48 + 48) = 0u;
  *(_OWORD *)v48 = 0u;
  *(_OWORD *)(v48 + 16) = 0u;
  v55 = (int *)heap_Alloc(a1[1], 24);
  if (!v55)
  {
    v62 = " allocating memory in BuildPhonePhT.";
    goto LABEL_14;
  }
  v61 = v55;
  if (TierInit((uint64_t)a1, v55, v46, "Phone-level PHONE tier"))
  {
    v62 = " in BuildPhonePhT initializing tier.";
LABEL_14:
    NNFX_logMsg((uint64_t)a1, 0, (uint64_t)v62, v56, v57, v58, v59, v60);
    *v54 = 0;
    v63 = " building phone tier in BuildPhoneTiers().";
    goto LABEL_53;
  }
  v337 = v47;
  v340 = v61;
  v327 = v42;
  v329 = v54;
  v330 = v46;
  if ((_DWORD)v47)
  {
    v64 = 0;
    v65 = 0;
    do
    {
      v66 = v45[v64];
      v67 = *(unsigned int *)(v66 + 144);
      if ((_DWORD)v67)
      {
        v68 = v45;
        v69 = 0;
        v70 = *((_QWORD *)v340 + 1) + 2 * v65;
        do
        {
          v71 = *(__int16 *)(a3 + 2);
          v72 = 1;
          if (v71 != -1 && v71 <= 499)
          {
            if (strchr(**(char ***)(v342 + 16 * *(__int16 *)(a3 + 2) + 8), *(char *)(*(_QWORD *)(v66 + 152) + v69)))
              v72 = 2;
            else
              v72 = 1;
          }
          *(_WORD *)(v70 + 2 * v69++) = v72;
        }
        while (v67 != v69);
        v65 += v69;
        v45 = v68;
        v47 = v337;
      }
      ++v64;
    }
    while (v64 != v47);
  }
  v73 = v330;
  v340[1] = v330;
  *v329 = (uint64_t)v340;
  v74 = (int *)heap_Alloc(a1[1], 24);
  if (!v74)
  {
    v81 = " allocating memory in BuildSyllablePhT.";
    goto LABEL_52;
  }
  v80 = v74;
  if (TierInit((uint64_t)a1, v74, v330, "Phone-level SYLLABLE tier"))
  {
    v81 = " in BuildSyllablePhT initializing tier.";
LABEL_52:
    NNFX_logMsg((uint64_t)a1, 0, (uint64_t)v81, v75, v76, v77, v78, v79);
    v329[1] = 0;
    v63 = " building syllable tier in BuildPhoneTiers().";
    goto LABEL_53;
  }
  v82 = v337;
  if (!(_DWORD)v337)
    goto LABEL_41;
  v83 = 0;
  v82 = 0;
  do
  {
    v84 = v45[v83];
    v85 = *(unsigned int *)(v84 + 144);
    if (!(_DWORD)v85)
      goto LABEL_40;
    v86 = 0;
    LODWORD(v87) = v330 - v82;
    if (v330 >= v82)
      v87 = v87;
    else
      v87 = 0;
    do
    {
      if (v87 == v86)
      {
        v81 = " in BuildSyllablePhT attempting to write at index %d in a buffer of size %d.";
        goto LABEL_52;
      }
      *(_WORD *)(*((_QWORD *)v80 + 1) + 2 * v82 + 2 * v86) = *(_DWORD *)(*(_QWORD *)(v84 + 184) + 4 * v86);
      ++v86;
    }
    while (v85 != v86);
    v82 += v86;
LABEL_40:
    ++v83;
  }
  while (v83 != v337);
LABEL_41:
  if (v82 != (_DWORD)v330)
  {
    v81 = ": %d phones processed, but total %d phones expected in BuildSyllablePhT.";
    goto LABEL_52;
  }
  v88 = 0;
  if ((_DWORD)v330)
  {
    v89 = (unsigned __int16 *)*((_QWORD *)v80 + 1);
    v90 = v330;
    do
    {
      if (*v89++)
        ++v88;
      --v90;
    }
    while (v90);
  }
  v80[1] = v88;
  v329[1] = (uint64_t)v80;
  v92 = (int *)heap_Alloc(a1[1], 24);
  if (!v92)
  {
    v99 = " allocating memory in BuildSyllablePhT.";
    goto LABEL_57;
  }
  v98 = v92;
  if (TierInit((uint64_t)a1, v92, v330, "Phone-level WORD tier"))
  {
    v99 = " in BuildWordPhT initializing tier.";
    goto LABEL_57;
  }
  if ((_DWORD)v337)
  {
    v102 = 0;
    v103 = 0;
    while (v103 < v330)
    {
      v104 = *((_QWORD *)v98 + 1);
      v105 = *(_DWORD *)(v45[v102] + 144) - 1;
      if (*(_DWORD *)(v45[v102] + 144) != 1)
      {
        v106 = v105 + v103;
        do
        {
          *(_WORD *)(v104 + 2 * v103++) = 0;
          --v105;
        }
        while (v105);
        v103 = v106;
      }
      v107 = v103 + 1;
      *(_WORD *)(v104 + 2 * v103) = 1;
      ++v102;
      ++v103;
      if (v102 == v337)
        goto LABEL_68;
    }
    v99 = " in BuildWordPhT attempting to write at index %d in a buffer of size %d.";
LABEL_57:
    NNFX_logMsg((uint64_t)a1, 0, (uint64_t)v99, v93, v94, v95, v96, v97);
    v329[2] = 0;
    v63 = " building word tier in BuildPhoneTiers().";
    goto LABEL_53;
  }
  v107 = 0;
LABEL_68:
  if (v107 != (_DWORD)v330)
  {
    v99 = ": %d phones processed, but total %d phones expected in BuildWordPhT.";
    goto LABEL_57;
  }
  v108 = 0;
  if ((_DWORD)v330)
  {
    v109 = (unsigned __int16 *)*((_QWORD *)v98 + 1);
    do
    {
      if (*v109++)
        ++v108;
      --v73;
    }
    while (v73);
  }
  v98[1] = v108;
  if (v108 != (_DWORD)v337)
  {
    v99 = ": %d word-boundaries created, but total %d prosodic words in BuildWordPhT.";
    goto LABEL_57;
  }
  v111 = (uint64_t)v45;
  v329[2] = (uint64_t)v98;
  v112 = (int *)heap_Alloc(a1[1], 24);
  if (!v112)
  {
    v119 = " allocating memory in BuildSyllablePhT.";
    goto LABEL_111;
  }
  v118 = v112;
  if (TierInit((uint64_t)a1, v112, v330, "Phone-level PHRASE tier"))
  {
    v119 = " in BuildPrasePhT initializing tier.";
LABEL_111:
    NNFX_logMsg((uint64_t)a1, 0, (uint64_t)v119, v113, v114, v115, v116, v117);
    v329[3] = 0;
    v63 = " building phrase tier in BuildPhoneTiers().";
    goto LABEL_53;
  }
  if (!(_DWORD)v337)
  {
    v128 = 0;
    goto LABEL_101;
  }
  v120 = 0;
  v121 = 0;
  while (2)
  {
    v122 = v45[v120];
    v123 = *(_DWORD *)(v122 + 144) - 1;
    if (*(_DWORD *)(v122 + 144) != 1)
    {
      v124 = 2 * v121;
      if (v121 >= v330)
        v125 = v330;
      else
        v125 = v121;
      while ((_DWORD)v330 != v125)
      {
        *(_WORD *)(*((_QWORD *)v118 + 1) + v124) = 0;
        ++v121;
        v124 += 2;
        ++v125;
        if (!--v123)
          goto LABEL_90;
      }
      goto LABEL_99;
    }
LABEL_90:
    if (v120 != (_DWORD)v337 - 1)
    {
      if (*(_DWORD *)(v122 + 192) == 1)
      {
        if (v121 >= v330)
          goto LABEL_99;
        *(_WORD *)(*((_QWORD *)v118 + 1) + 2 * v121) = 0;
      }
      else
      {
        if (v121 >= v330)
          goto LABEL_99;
        v126 = *(_BYTE *)(v122 + 136) & 0xFB;
        v127 = *((_QWORD *)v118 + 1);
        *(_WORD *)(v127 + 2 * v121) = v126 == 83;
      }
      ++v121;
      ++v120;
      continue;
    }
    break;
  }
  if (v121 >= v330)
  {
LABEL_99:
    v119 = " in BuildPhrasePhT attempting to write at index %d in a buffer of size %d.";
    goto LABEL_111;
  }
  v128 = v121 + 1;
  *(_WORD *)(*((_QWORD *)v118 + 1) + 2 * v121) = 1;
LABEL_101:
  if (v128 != (_DWORD)v330)
  {
    v119 = ": %d phones processed, but total %d phones expected in BuildWordPhT.";
    goto LABEL_111;
  }
  v129 = v330;
  if ((_DWORD)v330)
  {
    v129 = 0;
    v130 = (unsigned __int16 *)*((_QWORD *)v118 + 1);
    v131 = v330;
    do
    {
      if (*v130++)
        ++v129;
      --v131;
    }
    while (v131);
  }
  v118[1] = v129;
  v329[3] = (uint64_t)v118;
  v133 = (int *)heap_Alloc(a1[1], 24);
  if (!v133)
  {
    v140 = " allocating memory in BuildSyllablePhT.";
    goto LABEL_155;
  }
  v139 = v133;
  if (TierInit((uint64_t)a1, v133, v330, "Phone-level PUNCTUATION tier"))
  {
    v140 = " in BuildPunctPhT initializing tier.";
    goto LABEL_155;
  }
  if ((_DWORD)v337)
  {
    v141 = 0;
    v142 = 0;
    v143 = (v337 - 1);
    while (1)
    {
      v144 = *(_QWORD *)(v111 + 8 * v141);
      v145 = *(_DWORD *)(v144 + 144) - 1;
      if (*(_DWORD *)(v144 + 144) != 1)
        break;
LABEL_121:
      if (v141 == v143)
      {
        if (v142 >= v330)
          goto LABEL_143;
        v148 = 1;
      }
      else
      {
        if (*(_DWORD *)(v144 + 192)
          || (v149 = strlen(*(const char **)(v144 + 32))) == 0
          || ((v150 = *(unsigned __int8 *)(*(_QWORD *)(v144 + 32) + (v149 - 1)),
               v151 = v150 > 0x3F,
               v152 = (1 << v150) & 0x8C00500200000000,
               !v151)
            ? (v153 = v152 == 0)
            : (v153 = 1),
              v153))
        {
          v148 = 0;
        }
        else
        {
          v148 = 1;
          if (*(_BYTE *)(v144 + 136) == 78)
            NNFX_logMsg((uint64_t)a1, 1, (uint64_t)"::nnfeatextract, BOD=%c on punctuated word '%s'", v134, v135, v136, v137, v138);
        }
        if (v142 >= v330)
          goto LABEL_143;
        if (v141 == (_DWORD)v337 - 2 && *(_DWORD *)(*(_QWORD *)(v111 + 8 * v143) + 192))
          v148 = 1;
      }
      *(_WORD *)(*((_QWORD *)v139 + 1) + 2 * v142++) = v148;
      if (++v141 == v337)
        goto LABEL_145;
    }
    v146 = 2 * v142;
    if (v142 >= v330)
      v147 = v330;
    else
      v147 = v142;
    while ((_DWORD)v330 != v147)
    {
      *(_WORD *)(*((_QWORD *)v139 + 1) + v146) = 0;
      ++v142;
      v146 += 2;
      ++v147;
      if (!--v145)
        goto LABEL_121;
    }
LABEL_143:
    v140 = " in BuildPunctPhT attempting to write at index %d in a buffer of size %d.";
LABEL_155:
    NNFX_logMsg((uint64_t)a1, 0, (uint64_t)v140, v134, v135, v136, v137, v138);
    v329[4] = 0;
    v63 = " building punctuation tier in BuildPhoneTiers().";
LABEL_53:
    NNFX_logMsg((uint64_t)a1, 0, (uint64_t)v63, v49, v50, v51, v52, v53);
    v41 = " building Phone Tiers in extratFeatures().";
    goto LABEL_54;
  }
  v142 = 0;
LABEL_145:
  if (v142 != (_DWORD)v330)
  {
    v140 = ": Only %d phones were processed while a total of %d phones were expected in BuildWordPhT.";
    goto LABEL_155;
  }
  v154 = v330;
  if ((_DWORD)v330)
  {
    v154 = 0;
    v155 = (unsigned __int16 *)*((_QWORD *)v139 + 1);
    v156 = v330;
    do
    {
      if (*v155++)
        ++v154;
      --v156;
    }
    while (v156);
  }
  v139[1] = v154;
  v329[4] = (uint64_t)v139;
  v158 = (int *)heap_Alloc(a1[1], 24);
  if (!v158)
  {
    v165 = " allocating memory in BuildSentencePhT.";
    goto LABEL_179;
  }
  v164 = v158;
  if (TierInit((uint64_t)a1, v158, v330, "Phone-level SENTENCE tier"))
  {
    v165 = " allocating mem in BuildSentencePhT to hold boundaries.";
    goto LABEL_179;
  }
  v166 = heap_Calloc((_QWORD *)a1[1], v337, 2);
  v167 = v166;
  if (!v166)
  {
    v165 = " allocating memory in BuildSentencePh().";
    v175 = (uint64_t)a1;
LABEL_180:
    NNFX_logMsg(v175, v167, (uint64_t)v165, v159, v160, v161, v162, v163);
    v329[7] = 0;
    v63 = " building sentence tier in BuildPhoneTiers().";
    goto LABEL_53;
  }
  v168 = v337;
  v169 = (v337 - 1);
  if ((_DWORD)v337 == 1)
  {
    v174 = 0;
LABEL_166:
    *(_WORD *)(v166 + 2 * v174) = v168;
    goto LABEL_168;
  }
  v170 = (uint64_t *)v111;
  v171 = (_WORD *)v166;
  v172 = (v337 - 1);
  do
  {
    v173 = *v170++;
    *v171++ = *(_DWORD *)(v173 + 196) == 1;
    --v172;
  }
  while (v172);
  *(_WORD *)(v166 + 2 * v169) = 1;
  if (v337 >= 2 && *(_DWORD *)(*(_QWORD *)(v111 + 8 * v169) + 192))
  {
    v168 = 0;
    v174 = (v337 - 2);
    goto LABEL_166;
  }
  if ((_DWORD)v337)
  {
LABEL_168:
    v176 = 0;
    v177 = 0;
    while (1)
    {
      v178 = *(_DWORD *)(*(_QWORD *)(v111 + 8 * v176) + 144) - 1;
      if (*(_DWORD *)(*(_QWORD *)(v111 + 8 * v176) + 144) != 1)
        break;
LABEL_175:
      if (v177 >= v330)
      {
        v165 = " in BuildPunctPhT attempting to write at index %d in a buffer of size %d.";
        goto LABEL_179;
      }
      v181 = v177 + 1;
      *(_WORD *)(*((_QWORD *)v164 + 1) + 2 * v177++) = *(_WORD *)(v166 + 2 * v176++);
      if (v176 == v337)
        goto LABEL_182;
    }
    v179 = 2 * v177;
    if (v177 >= v330)
      v180 = v330;
    else
      v180 = v177;
    while ((_DWORD)v330 != v180)
    {
      *(_WORD *)(*((_QWORD *)v164 + 1) + v179) = 0;
      ++v177;
      v179 += 2;
      ++v180;
      if (!--v178)
        goto LABEL_175;
    }
    v165 = " in BuildSentencePhT attempting to write at index %d in a buffer of size %d.";
LABEL_179:
    v175 = (uint64_t)a1;
    v167 = 0;
    goto LABEL_180;
  }
  v181 = 0;
LABEL_182:
  heap_Free((_QWORD *)a1[1], v166);
  if (v181 != (_DWORD)v330)
  {
    v165 = ": Only %d phones were processed while a total of %d phones were expected in BuildSentencePhT.";
    goto LABEL_179;
  }
  v182 = v330;
  if ((_DWORD)v330)
  {
    v182 = 0;
    v183 = (unsigned __int16 *)*((_QWORD *)v164 + 1);
    v184 = v330;
    do
    {
      if (*v183++)
        ++v182;
      --v184;
    }
    while (v184);
  }
  v164[1] = v182;
  v329[7] = (uint64_t)v164;
  v186 = (int *)heap_Alloc(a1[1], 24);
  if (!v186)
  {
    v193 = " allocating memory in BuildSentencePhT.";
    goto LABEL_226;
  }
  v192 = v186;
  if (TierInit((uint64_t)a1, v186, v330, "Phone-level PARSE tier")
    || (v194 = heap_Calloc((_QWORD *)a1[1], v337, 2)) == 0)
  {
    v193 = " allocating memory in BuildParsePhT.";
    goto LABEL_226;
  }
  v195 = v194;
  if ((_DWORD)v337 == 1)
  {
    *(_WORD *)(v194 + 2 * v169) = 1;
    goto LABEL_215;
  }
  v196 = v111 + 8;
  v197 = (v337 - 1);
  v198 = (_WORD *)v194;
  do
  {
    v199 = *(_QWORD *)(v196 - 8);
    *v198++ = *(_DWORD *)(v199 + 192) == 1
           || strcmp(*(const char **)(v199 + 88), *(const char **)(*(_QWORD *)v196 + 88));
    v196 += 8;
    --v197;
  }
  while (v197);
  *(_WORD *)(v195 + 2 * v169) = 1;
  if ((_DWORD)v337)
  {
LABEL_215:
    v213 = 0;
    v214 = 0;
    while (1)
    {
      v215 = *(_DWORD *)(*(_QWORD *)(v111 + 8 * v213) + 144) - 1;
      if (*(_DWORD *)(*(_QWORD *)(v111 + 8 * v213) + 144) != 1)
        break;
LABEL_222:
      if (v214 >= v330)
      {
        v193 = " in BuildPunctPhT attempting to write at index %d in a buffer of size %d.";
        goto LABEL_226;
      }
      v200 = v214 + 1;
      *(_WORD *)(*((_QWORD *)v192 + 1) + 2 * v214++) = *(_WORD *)(v195 + 2 * v213++);
      if (v213 == v337)
        goto LABEL_205;
    }
    v216 = 2 * v214;
    if (v214 >= v330)
      v217 = v330;
    else
      v217 = v214;
    while ((_DWORD)v330 != v217)
    {
      *(_WORD *)(*((_QWORD *)v192 + 1) + v216) = 0;
      ++v214;
      v216 += 2;
      ++v217;
      if (!--v215)
        goto LABEL_222;
    }
    v193 = " in BuildParsePhT attempting to write at index %d in a buffer of size %d.";
LABEL_226:
    NNFX_logMsg((uint64_t)a1, 0, (uint64_t)v193, v187, v188, v189, v190, v191);
    v329[5] = 0;
    v63 = " building parse tier in BuildPhoneTiers().";
    goto LABEL_53;
  }
  v200 = 0;
LABEL_205:
  heap_Free((_QWORD *)a1[1], v195);
  if (v200 != (_DWORD)v330)
  {
    v193 = ": Only %d phones were processed while a total of %d phones were expected in BuildSentencePhT.";
    goto LABEL_226;
  }
  v201 = v330;
  if ((_DWORD)v330)
  {
    v201 = 0;
    v202 = (unsigned __int16 *)*((_QWORD *)v192 + 1);
    v203 = v330;
    do
    {
      if (*v202++)
        ++v201;
      --v203;
    }
    while (v203);
  }
  v192[1] = v201;
  v329[5] = (uint64_t)v192;
  v205 = (int *)heap_Alloc(a1[1], 24);
  if (!v205)
  {
    v212 = " allocating memory in BuildStressGroupPhT.";
    goto LABEL_347;
  }
  v211 = v205;
  if (TierInit((uint64_t)a1, v205, v330, "Phone-level STRESS-GROUP tier"))
  {
    v212 = " in BuildStressGroupPhT initializing tier.";
    goto LABEL_347;
  }
  v218 = v337;
  if ((_DWORD)v337)
  {
    v219 = 0;
    v218 = 0;
    while (1)
    {
      v220 = *(_QWORD *)(v111 + 8 * v219);
      v221 = *(unsigned int *)(v220 + 144);
      if ((_DWORD)v221)
        break;
      v225 = v219 + 1;
LABEL_254:
      v219 = v225;
      if (v225 == v337)
        goto LABEL_255;
    }
    v222 = 0;
    v223 = *(_QWORD *)(v220 + 184);
    v224 = (v221 - 1);
    v225 = v219 + 1;
    LODWORD(v226) = v330 - v218;
    if (v330 >= v218)
      v226 = v226;
    else
      v226 = 0;
    while (2)
    {
      if (*(_DWORD *)(v223 + 4 * v222) != 1)
        goto LABEL_243;
      if (v222 < v224 && *(_DWORD *)(*(_QWORD *)(v220 + 176) + 4 * v222 + 4) == 1)
      {
LABEL_242:
        v227 = 1;
      }
      else
      {
        v227 = 0;
        if (v219 < v169 && v224 == v222)
        {
          if (**(_DWORD **)(*(_QWORD *)(v111 + 8 * v225) + 176) == 1)
            goto LABEL_242;
LABEL_243:
          v227 = 0;
        }
      }
      if (v226 == v222)
      {
        v212 = " in BuildStressGroupPhT attempting to write at index %d in a buffer of size %d.";
        goto LABEL_347;
      }
      if (v224 == v222 && v219 == v169)
        v227 = 1;
      *(_WORD *)(*((_QWORD *)v211 + 1) + 2 * v218 + 2 * v222++) = v227;
      if (v221 == v222)
      {
        v218 += v222;
        goto LABEL_254;
      }
      continue;
    }
  }
LABEL_255:
  if (v218 != (_DWORD)v330)
  {
    v212 = ": %d phones processed, but total %d phones expected in BuildStressGroupPhT.";
LABEL_347:
    NNFX_logMsg((uint64_t)a1, 0, (uint64_t)v212, v206, v207, v208, v209, v210);
    v329[6] = 0;
    v63 = " building stress-group tier in BuildPhoneTiers().";
    goto LABEL_53;
  }
  v229 = v330;
  if ((_DWORD)v330)
  {
    v229 = 0;
    v230 = (unsigned __int16 *)*((_QWORD *)v211 + 1);
    v231 = v330;
    do
    {
      if (*v230++)
        ++v229;
      --v231;
    }
    while (v231);
  }
  v211[1] = v229;
  v329[6] = (uint64_t)v211;
  v233 = BuildSilencePhT((uint64_t)a1, v111, v337, v330);
  v329[8] = v233;
  if (!v233)
  {
    v63 = " building silence tier in BuildPhoneTiers().";
    goto LABEL_53;
  }
  v234 = v329;
  TierAddBoundaries((unsigned int *)v329[6], v329[3]);
  TierAddBoundaries((unsigned int *)v234[6], v234[8]);
  TierAddBoundaries((unsigned int *)v234[5], v234[3]);
  TierAddBoundaries((unsigned int *)v234[5], v234[4]);
  TierAddBoundaries((unsigned int *)v234[5], v234[8]);
  v322 = (v332 + v327);
  v325 = (uint64_t *)heap_Calloc((_QWORD *)a1[1], v322, 8);
  if (!v325)
  {
    v41 = " in extractFeatures() while mem-allocating to hold feature extractors.";
    goto LABEL_54;
  }
  for (i = 0; i != 13; ++i)
  {
    v236 = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD))v348[i])(a1, v342, a3, v111, v329, HIDWORD(v346), v346);
    v325[i] = v236;
    if (!v236)
    {
      v41 = " in extractFeatures() while calling extractor %d of %d.";
      goto LABEL_54;
    }
  }
  v324 = 0;
  v323 = 0;
  v321 = " in contextualize() trying to mallocate output.";
  while (1)
  {
    v237 = v325[v324];
    if (*(_DWORD *)(v237 + 4016))
      break;
LABEL_306:
    if (++v324 == 13)
    {
      if (v323 != kaldi::QuantizedMatrixBase<short>::NumRows((unsigned int *)v345))
      {
        v41 = " in extractFeatures. Unknown features in context list.";
        goto LABEL_54;
      }
      if (a10)
        v325[(v322 - 1)] = a10;
      v100 = mergePhoneFeaturesAtStateLevel((uint64_t)a1, v325, v322, v335, v37, v38, v39, v40);
      if (!v100)
      {
        NNFX_logMsg((uint64_t)a1, 0, (uint64_t)" in extractFeatures() while merging phone-level streams at the state level.", v300, v301, v302, v303, v304);
        return v100;
      }
      if ((_DWORD)v322)
      {
        for (j = 0; j != v322; ++j)
        {
          v306 = v325[j];
          if (*(_DWORD *)(v306 + 4016))
          {
            v307 = 0;
            do
            {
              *(_QWORD *)(*(_QWORD *)(v306 + 8) + 8 * v307++) = 0;
              v306 = v325[j];
            }
            while (v307 < *(unsigned int *)(v306 + 4016));
          }
        }
      }
      v308 = HIDWORD(v346);
      if (HIDWORD(v346))
      {
        v309 = 0;
        do
        {
          v310 = *(_QWORD *)(v111 + 8 * v309);
          if (v310)
          {
            freepPWRI((uint64_t)a1, v310);
            *(_QWORD *)(v111 + 8 * v309) = 0;
            v308 = HIDWORD(v346);
          }
          ++v309;
        }
        while (v309 < v308);
      }
      heap_Free((_QWORD *)a1[1], v111);
      freepPhoneTiers((uint64_t)a1, v329);
      if (!(_DWORD)v322)
      {
LABEL_344:
        heap_Free((_QWORD *)a1[1], (uint64_t)v325);
        TrieIntFree(a1, (uint64_t)v345);
        return v100;
      }
      v311 = 0;
      while (2)
      {
        v312 = v325[v311];
        if (v312)
        {
          v313 = *(unsigned int *)(v312 + 4016);
          if ((_DWORD)v313)
          {
            for (k = 0; k < v313; ++k)
            {
              v315 = *(_QWORD *)(*(_QWORD *)(v312 + 8) + 8 * k);
              if (v315)
              {
                heap_Free((_QWORD *)a1[1], v315);
                v313 = *(unsigned int *)(v312 + 4016);
              }
            }
          }
          v316 = *(_QWORD *)(v312 + 8);
          if (v316)
            heap_Free((_QWORD *)a1[1], v316);
          v317 = *(_QWORD *)(v312 + 4040);
          v318 = *(_QWORD *)v312;
          if (!v317)
          {
            freepppFeats(a1, v318, *(_DWORD *)(v312 + 4016), *(_DWORD *)(v312 + 4024));
            goto LABEL_340;
          }
          if (!v318)
            goto LABEL_341;
          if (*(_DWORD *)(v312 + 4016))
          {
            v319 = 0;
            do
            {
              freeppFeats(a1, *(_QWORD *)(*(_QWORD *)v312 + 8 * v319), *(_DWORD *)(v312 + 4024), *(_DWORD *)(*(_QWORD *)(v312 + 4040) + 4 * v319));
              *(_QWORD *)(*(_QWORD *)v312 + 8 * v319++) = 0;
            }
            while (v319 < *(unsigned int *)(v312 + 4016));
            v318 = *(_QWORD *)v312;
          }
          heap_Free((_QWORD *)a1[1], v318);
LABEL_340:
          *(_QWORD *)v312 = 0;
          v317 = *(_QWORD *)(v312 + 4040);
          if (v317)
LABEL_341:
            heap_Free((_QWORD *)a1[1], v317);
          *(_QWORD *)(v312 + 4040) = 0;
          heap_Free((_QWORD *)a1[1], v312);
        }
        if (++v311 == v322)
          goto LABEL_344;
        continue;
      }
    }
  }
  v326 = 0;
  while (2)
  {
    v238 = *(char **)(*(_QWORD *)(v237 + 8) + 8 * v326);
    v344 = 0;
    if (!v238 || (v239 = TrieIntGet((uint64_t)v345, v238, &v344), v237 = v325[v324], v239))
    {
LABEL_305:
      if (++v326 >= *(_DWORD *)(v237 + 4016))
        goto LABEL_306;
      continue;
    }
    break;
  }
  v341 = *(unsigned int **)(v237 + 4032);
  v328 = v344;
  v347 = 0;
  v240 = heap_Calloc((_QWORD *)a1[1], 1, 4048);
  if (!v240)
    goto LABEL_354;
  v246 = v240;
  v247 = (2 * v328);
  *(_DWORD *)(v240 + 4016) = v247;
  *(_DWORD *)(v240 + 4024) = *(_DWORD *)(v237 + 4024);
  if ((int)v247 < 1)
  {
LABEL_279:
    if ((int)v328 >= 1)
    {
      v343 = 0;
      v331 = 0;
      v338 = 1;
      do
      {
        if (v331)
          v252 = 2;
        else
          v252 = 1;
        BYTE4(v347) = 95;
        LOBYTE(v347) = 95;
        memset((char *)&v347 + 5, 76, v252);
        memset((char *)&v347 + 1, 82, v252);
        if (v338 >= 3)
        {
          BYTE6(v347) = v338 + 48;
          BYTE2(v347) = v338 + 48;
        }
        v258 = *(unsigned int *)(v246 + 4024);
        if ((int)v258 >= 1)
        {
          v259 = 0;
          v260 = 8 * v258;
          do
          {
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v246 + 8 * v343) + v259) = 0;
            v259 += 8;
          }
          while (v260 != v259);
        }
        if ((int)v341[1] > (int)v338)
        {
          v261 = 0;
          do
          {
            ElementInGroup = lastElementInGroup((uint64_t)a1, v341, v261, v253, v254, v255, v256, v257);
            v267 = firstElementInGroup((uint64_t)a1, (uint64_t)v341, v261 + v338, v262, v263, v264, v265, v266);
            v273 = lastElementInGroup((uint64_t)a1, v341, v261 + v338, v268, v269, v270, v271, v272);
            if (v267 <= v273)
            {
              v274 = v273 - v267 + 1;
              v275 = 8 * v267;
              do
              {
                *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v246 + 8 * v343) + v275) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v237 + 8 * (int)v326)
                                                                                        + 8 * ElementInGroup);
                v275 += 8;
                --v274;
              }
              while (v274);
            }
            ++v261;
          }
          while (v261 < (int)(v341[1] - v338));
        }
        *(_QWORD *)(*(_QWORD *)(v246 + 8) + 8 * v343) = stringcat((uint64_t)a1, *(char **)(*(_QWORD *)(v237 + 8) + 8 * (int)v326), (const char *)&v347 + 4);
        v281 = v343 | 1;
        v282 = *(unsigned int *)(v246 + 4024);
        if ((int)v282 >= 1)
        {
          v283 = 0;
          v284 = 8 * v282;
          do
          {
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v246 + 8 * v281) + v283) = 0;
            v283 += 8;
          }
          while (v284 != v283);
        }
        for (m = v338; m < v341[1]; ++m)
        {
          v334 = lastElementInGroup((uint64_t)a1, v341, m, v276, v277, v278, v279, v280);
          v291 = firstElementInGroup((uint64_t)a1, (uint64_t)v341, m - v338, v286, v287, v288, v289, v290);
          v297 = lastElementInGroup((uint64_t)a1, v341, m - v338, v292, v293, v294, v295, v296);
          if (v291 <= v297)
          {
            v298 = v297 - v291 + 1;
            v299 = 8 * v291;
            do
            {
              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v246 + 8 * v281) + v299) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v237
                                                                                                  + 8 * (int)v326)
                                                                                      + 8 * v334);
              v299 += 8;
              --v298;
            }
            while (v298);
          }
        }
        *(_QWORD *)(*(_QWORD *)(v246 + 8) + 8 * v281) = stringcat((uint64_t)a1, *(char **)(*(_QWORD *)(v237 + 8) + 8 * (int)v326), (const char *)&v347);
        v343 += 2;
        ++v338;
        ++v331;
      }
      while (v331 != v328);
    }
    v325[v323 + 13] = v246;
    ++v323;
    v237 = v325[v324];
    goto LABEL_305;
  }
  v248 = heap_Calloc((_QWORD *)a1[1], v247, 8);
  *(_QWORD *)(v246 + 8) = v248;
  if (!v248
    || (v249 = heap_Calloc((_QWORD *)a1[1], *(int *)(v246 + 4016), 4), (*(_QWORD *)(v246 + 4040) = v249) == 0))
  {
    v320 = " in contextualize() allocating for feature names";
    goto LABEL_353;
  }
  if (!allocpppFeats((uint64_t)a1, (uint64_t *)v246, *(_DWORD *)(v246 + 4016), *(_DWORD *)(v246 + 4024)))
  {
    if (*(int *)(v246 + 4016) >= 1)
    {
      v250 = 0;
      v251 = *(_QWORD *)(v246 + 4040);
      do
        *(_DWORD *)(v251 + 4 * v250++) = 0;
      while (v250 < *(int *)(v246 + 4016));
    }
    goto LABEL_279;
  }
  v320 = " in contextualize() allocating features";
LABEL_353:
  v321 = v320;
LABEL_354:
  NNFX_logMsg((uint64_t)a1, 0, (uint64_t)v321, v241, v242, v243, v244, v245);
  v325[v323 + 13] = 0;
  v41 = " in extractFeatures() while allocating context features.";
LABEL_54:
  NNFX_logMsg((uint64_t)a1, 0, (uint64_t)v41, v36, v37, v38, v39, v40);
  return 0;
}

uint64_t nnextract_Deallocate(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, int a5)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t i;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t j;
  uint64_t v16;
  unint64_t v17;
  unint64_t k;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  freeppSRI((_QWORD *)a1, a2, a3);
  if (a4)
  {
    v8 = a4[1];
    if (v8)
    {
      v9 = *((unsigned int *)a4 + 1004);
      if ((_DWORD)v9)
      {
        for (i = 0; i < v9; ++i)
        {
          v11 = *(_QWORD *)(a4[1] + 8 * i);
          if (v11)
          {
            heap_Free(*(_QWORD **)(a1 + 8), v11);
            *(_QWORD *)(a4[1] + 8 * i) = 0;
            v9 = *((unsigned int *)a4 + 1004);
          }
        }
        v8 = a4[1];
      }
      heap_Free(*(_QWORD **)(a1 + 8), v8);
      a4[1] = 0;
    }
    v12 = (uint64_t *)*a4;
    if (*a4)
    {
      v13 = *v12;
      if (*v12)
      {
        v14 = *((unsigned int *)a4 + 1006);
        if ((_DWORD)v14)
        {
          for (j = 0; j < v14; ++j)
          {
            v16 = *(_QWORD *)(*(_QWORD *)*a4 + 8 * j);
            if (v16)
            {
              freepFeat((_QWORD *)a1, v16);
              *(_QWORD *)(*(_QWORD *)*a4 + 8 * j) = 0;
              v14 = *((unsigned int *)a4 + 1006);
            }
          }
          v13 = *(_QWORD *)*a4;
        }
        heap_Free(*(_QWORD **)(a1 + 8), v13);
        *(_QWORD *)*a4 = 0;
      }
      v17 = *((unsigned int *)a4 + 1004);
      if (v17 >= 2)
      {
        for (k = 1; k < v17; ++k)
        {
          v19 = *(_QWORD *)(*a4 + 8 * k);
          if (v19)
          {
            v20 = *((_DWORD *)a4 + 1006);
            if (v20)
            {
              v21 = 0;
              do
              {
                v22 = *(_QWORD *)(*a4 + 8 * k);
                v23 = v21;
                v24 = *(_QWORD *)(v22 + 8 * v21);
                if (v24)
                {
                  v25 = a4[505];
                  if (!v25 || *(_DWORD *)(v25 + 4 * k))
                  {
                    freepFeat((_QWORD *)a1, v24);
                    v22 = *(_QWORD *)(*a4 + 8 * k);
                    v20 = *((_DWORD *)a4 + 1006);
                  }
                  *(_QWORD *)(v22 + 8 * v23) = 0;
                }
                v21 = v23 + a5;
              }
              while ((int)v23 + a5 < v20);
              v19 = *(_QWORD *)(*a4 + 8 * k);
            }
            heap_Free(*(_QWORD **)(a1 + 8), v19);
            *(_QWORD *)(*a4 + 8 * k) = 0;
            v17 = *((unsigned int *)a4 + 1004);
          }
        }
      }
      heap_Free(*(_QWORD **)(a1 + 8), *a4);
      *a4 = 0;
    }
    v26 = a4[505];
    if (v26)
      heap_Free(*(_QWORD **)(a1 + 8), v26);
    a4[505] = 0;
    heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)a4);
  }
  return 0;
}

uint64_t nnextract_Skip(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v4 = 0;
  v5 = *(_QWORD *)(a1 + 16 * *(__int16 *)(a2 + 32) + 8);
  v6 = a3 + 16;
  do
  {
    v7 = *(const char **)(v5 + 8 * v4);
    if (!v7)
      break;
    v8 = *(_DWORD *)(a3 + 4016);
    if (v8 >= 1)
    {
      v9 = 0;
      v10 = *(_QWORD *)(a3 + 8);
      do
      {
        if (!strcmp(v7, *(const char **)(v10 + 8 * v9)))
        {
          *(_DWORD *)(v6 + 4 * v9) = 0;
          --*(_DWORD *)(a3 + 4020);
          v8 = *(_DWORD *)(a3 + 4016);
        }
        ++v9;
      }
      while (v9 < v8);
    }
    ++v4;
  }
  while (v4 != 500);
  return 0;
}

uint64_t nnextract_Rolled(_QWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  const char **v11;
  unsigned __int8 v15;
  unsigned int v16;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t NnFeatures;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v29;
  _OWORD v30[2];
  __int16 v31;

  v11 = *(const char ***)(a6 + 8);
  if (!v11)
  {
    v29 = "::nnfeatextract::Missing NN lingtab data.";
LABEL_15:
    NNFX_logMsg((uint64_t)a1, 0, (uint64_t)v29, a4, a5, a6, (uint64_t)a7, a8);
    return 1;
  }
  v15 = a5;
  v16 = a4;
  v31 = 0;
  memset(v30, 0, sizeof(v30));
  GetLingTabIndex(v11, v30);
  if (SLOWORD(v30[0]) == -1)
    NNFX_logMsg((uint64_t)a1, 1, (uint64_t)"::nnfeatextract::NN - GetLingTabIndex - missing VOWELS entry.", v19, v20, v21, v22, v23);
  if (SWORD1(v30[0]) == -1)
    NNFX_logMsg((uint64_t)a1, 1, (uint64_t)"::nnfeatextract::NN - GetLingTabIndex - missing VOICEDPHONES entry.", v19, v20, v21, v22, v23);
  NnFeatures = extractNnFeatures(a1, *(_QWORD *)(a6 + 8), (uint64_t)v30, a9, a10, a2, a3, v16, v15, a8);
  *a7 = NnFeatures;
  if (!NnFeatures)
  {
    v29 = "::nnfeatextract::NN - extractFeatures.";
    goto LABEL_15;
  }
  v25 = NnFeatures;
  *(_DWORD *)(NnFeatures + 4020) = 0;
  if (*(int *)(NnFeatures + 4016) >= 1)
  {
    v26 = 0;
    do
    {
      *(_DWORD *)(NnFeatures + 16 + 4 * v26) = 1;
      ++*(_DWORD *)(NnFeatures + 4020);
      ++v26;
    }
    while (v26 < *(int *)(NnFeatures + 4016));
  }
  v27 = *(_QWORD *)(a6 + 8);
  if (*(_QWORD *)(v27 + 16 * v31 + 8))
    nnextract_Skip(v27, (uint64_t)v30, v25);
  return 0;
}

uint64_t fExtGetPhoneFeats(uint64_t a1, uint64_t a2, __int16 *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v9;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  char *v69;
  uint64_t v70;
  unsigned int v71;
  char *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  void *v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  unint64_t v84;
  int v85;
  char v86;
  char *v87;
  int v88;
  char v89;
  int v90;
  uint64_t v91;
  char **v92;
  uint64_t v93;
  char **v94;
  int v95;
  char v96;
  unint64_t v97;
  void *v98;
  int v99;
  const char *v100;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int16 *v112;
  int v113;
  unint64_t v114;
  __int16 __s;
  uint64_t v116;

  v8 = a7;
  v9 = a6;
  v116 = *MEMORY[0x1E0C80C00];
  NNFX_logMsg(a1, 3, (uint64_t)"Extracting phone-level attributes...", a4, (uint64_t)a5, a6, a7, a8);
  NNFX_logMsg(a1, 3, (uint64_t)"Num pros words: %d", v15, v16, v17, v18, v19);
  NNFX_logMsg(a1, 3, (uint64_t)"First boundary: %c", v20, v21, v22, v23, v24);
  v25 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 4048);
  v31 = v25;
  if (!v25)
  {
    NNFX_logMsg(a1, 0, (uint64_t)" in fExtGetPhoneFeats() trying to mallocate output.", v26, v27, v28, v29, v30);
    return v31;
  }
  *(_DWORD *)(v25 + 4016) = 8;
  *(_DWORD *)(v25 + 4024) = v8;
  *(_QWORD *)(v25 + 4032) = *a5;
  v32 = heap_Alloc(*(_QWORD *)(a1 + 8), 64);
  *(_QWORD *)(v31 + 8) = v32;
  if (!v32)
  {
    v100 = " in fExtGetPhoneFeats() allocating feature names";
    goto LABEL_119;
  }
  **(_QWORD **)(v31 + 8) = stringdup(a1, "Phone");
  *(_QWORD *)(*(_QWORD *)(v31 + 8) + 8) = stringdup(a1, "VowInSyll");
  *(_QWORD *)(*(_QWORD *)(v31 + 8) + 16) = stringdup(a1, "Voicing");
  *(_QWORD *)(*(_QWORD *)(v31 + 8) + 24) = stringdup(a1, "ConsVow");
  *(_QWORD *)(*(_QWORD *)(v31 + 8) + 32) = stringdup(a1, "BroadClass");
  *(_QWORD *)(*(_QWORD *)(v31 + 8) + 40) = stringdup(a1, "LexStress");
  *(_QWORD *)(*(_QWORD *)(v31 + 8) + 48) = stringdup(a1, "PhoneTag");
  *(_QWORD *)(*(_QWORD *)(v31 + 8) + 56) = stringdup(a1, "PhoneDiff");
  v38 = *(_DWORD *)(v31 + 4016);
  if (v38 >= 1)
  {
    v39 = *(_QWORD **)(v31 + 8);
    v40 = *(unsigned int *)(v31 + 4016);
    do
    {
      if (!*v39)
      {
        v100 = " in fExtGetPhoneFeats allocating feature stream names.";
        goto LABEL_119;
      }
      ++v39;
      --v40;
    }
    while (v40);
  }
  v41 = heap_Alloc(*(_QWORD *)(a1 + 8), 8 * v38);
  *(_QWORD *)v31 = v41;
  if (!v41)
  {
    v100 = " in fExtGetPhoneFeats() trying to malloc-ate output.";
    goto LABEL_119;
  }
  if (*(_DWORD *)(v31 + 4016))
  {
    v42 = 0;
    do
    {
      v43 = heap_Alloc(*(_QWORD *)(a1 + 8), 8 * *(int *)(v31 + 4024));
      *(_QWORD *)(*(_QWORD *)v31 + 8 * v42) = v43;
      if (!v43)
      {
        v100 = " in fExtGetPhoneFeats mallocating for output stream %d of %d";
        goto LABEL_119;
      }
      ++v42;
    }
    while (v42 < *(unsigned int *)(v31 + 4016));
  }
  if (v9)
  {
    v44 = 0;
    v45 = 0;
    v102 = v9;
    v103 = v8;
    v112 = a3;
    v104 = a2;
    while (!*(_DWORD *)(*(_QWORD *)(a4 + 8 * v44) + 144))
    {
      v47 = v45;
LABEL_98:
      v45 = v47;
      ++v44;
      v8 = v103;
      if (v44 == v102)
        goto LABEL_106;
    }
    v46 = 0;
    v113 = 1;
    v105 = v44;
    LODWORD(v47) = v45;
    while (1)
    {
      v114 = v46;
      v48 = heap_Alloc(*(_QWORD *)(a1 + 8), 16);
      if (!v48)
      {
        v100 = " in fExtGetPhoneFeats while allocating mem for stream 0 of word %d.";
        goto LABEL_119;
      }
      v49 = v48;
      v50 = heap_Alloc(*(_QWORD *)(a1 + 8), 16);
      if (!v50)
      {
        v100 = " in fExtGetPhoneFeats while allocating mem for stream 1 of word %d.";
        goto LABEL_119;
      }
      v51 = v50;
      v52 = heap_Alloc(*(_QWORD *)(a1 + 8), 16);
      if (!v52)
      {
        v100 = " in fExtGetPhoneFeats while allocating mem for stream 2 of word %d.";
        goto LABEL_119;
      }
      v53 = v52;
      v54 = heap_Alloc(*(_QWORD *)(a1 + 8), 16);
      if (!v54)
      {
        v100 = " in fExtGetPhoneFeats while allocating mem for stream 3 of word %d.";
        goto LABEL_119;
      }
      v111 = v54;
      v55 = heap_Alloc(*(_QWORD *)(a1 + 8), 16);
      if (!v55)
      {
        v100 = " in fExtGetPhoneFeats while allocating mem for stream 4 of word %d.";
        goto LABEL_119;
      }
      v56 = v55;
      v57 = heap_Alloc(*(_QWORD *)(a1 + 8), 16);
      if (!v57)
      {
        v100 = " in fExtGetPhoneFeats while allocating mem for stream 5 of word %d.";
        goto LABEL_119;
      }
      v110 = v57;
      v58 = heap_Alloc(*(_QWORD *)(a1 + 8), 16);
      if (!v58)
      {
        v100 = " in fExtGetPhoneFeats while allocating mem for stream 6 of word %d.";
        goto LABEL_119;
      }
      v108 = v56;
      v109 = v58;
      v59 = heap_Alloc(*(_QWORD *)(a1 + 8), 16);
      if (!v59)
      {
        v100 = " in fExtGetPhoneFeats while allocating mem for stream 7 of word %d.";
        goto LABEL_119;
      }
      v60 = v59;
      *(_DWORD *)(v49 + 8) = 3;
      __s = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a4 + 8 * v44) + 152) + v114);
      v61 = stringdup(a1, (char *)&__s);
      *(_QWORD *)v49 = v61;
      if (!v61)
      {
        v100 = " in fExtGetPhoneFeats while allocating mem for phoneID.";
        goto LABEL_119;
      }
      *(_QWORD *)(**(_QWORD **)v31 + 8 * v47) = v49;
      v62 = *(_QWORD *)(a4 + 8 * v44);
      v106 = v60;
      v107 = v47;
      if (*(_DWORD *)(v62 + 192))
        goto LABEL_51;
      if (v114)
      {
        v63 = v113;
        while (1)
        {
          v64 = v63 - 2;
          if ((int)(v63 - 2) < 0)
            break;
          --v63;
          if (*(_DWORD *)(*(_QWORD *)(v62 + 184) + 4 * v64) == 1)
            goto LABEL_32;
        }
      }
      v63 = 0;
LABEL_32:
      v65 = *(_DWORD *)(v62 + 144) - 1;
      if (v114 <= v65)
      {
        v66 = v114;
        while (*(_DWORD *)(*(_QWORD *)(v62 + 184) + 4 * v66) != 1)
        {
          if (++v66 > v65)
            goto LABEL_38;
        }
        v65 = v66;
      }
LABEL_38:
      v67 = *a3;
      if (v67 == -1 || v63 > v65)
        break;
      v69 = **(char ***)(v104 + 16 * v67 + 8);
      v70 = *(_QWORD *)(v62 + 152);
      v71 = v63;
      while (1)
      {
        v72 = strchr(v69, *(char *)(v70 + v71));
        if (v72)
          break;
        if (++v71 > v65)
          goto LABEL_47;
      }
      v73 = *v72;
      if (v73 == 45)
        break;
LABEL_52:
      *(_DWORD *)(v51 + 8) = 3;
      __s = v73;
      v80 = stringdup(a1, (char *)&__s);
      *(_QWORD *)v51 = v80;
      if (!v80)
      {
        v100 = " in fExtGetPhoneFeats while allocating mem for VowInSyl.";
        goto LABEL_119;
      }
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v31 + 8) + 8 * v107) = v51;
      if (*v112 == -1)
      {
        v82 = 45;
        v81 = v104;
        v44 = v105;
      }
      else
      {
        v81 = v104;
        v44 = v105;
        if (strchr(**(char ***)(v104 + 16 * v112[1] + 8), *(char *)(*(_QWORD *)(*(_QWORD *)(a4 + 8 * v105) + 152) + v114)))
        {
          v82 = 86;
        }
        else
        {
          v82 = 45;
        }
      }
      *(_DWORD *)(v53 + 8) = 2;
      *(_BYTE *)v53 = v82;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v31 + 16) + 8 * v107) = v53;
      v83 = *v112;
      if (v83 == -1)
      {
        v86 = 45;
        v84 = v114;
      }
      else
      {
        v84 = v114;
        v85 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a4 + 8 * v44) + 152) + v114);
        if (v85 == SilPhone[0])
        {
          v86 = 45;
        }
        else
        {
          v87 = strchr(**(char ***)(v81 + 16 * v83 + 8), (char)v85);
          v84 = v114;
          if (v87)
            v86 = 86;
          else
            v86 = 67;
        }
      }
      *(_DWORD *)(v111 + 8) = 2;
      *(_BYTE *)v111 = v86;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v31 + 24) + 8 * v107) = v111;
      v88 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a4 + 8 * v44) + 152) + v84);
      if (v88 == SilPhone[0])
      {
        v89 = 45;
      }
      else
      {
        v90 = (char)v88;
        v91 = v112[2];
        if (v91 != -1 && (v92 = *(char ***)(v81 + 16 * v91 + 8)) != 0 && strchr(*v92, v90))
        {
          v89 = 77;
        }
        else
        {
          v93 = v112[3];
          if (v93 != -1 && (v94 = *(char ***)(v81 + 16 * v93 + 8)) != 0 && strchr(*v94, v90))
          {
            v89 = 68;
          }
          else if (check_phn_class(v81, v112[4], v90))
          {
            v89 = 65;
          }
          else if (check_phn_class(v81, v112[5], v90))
          {
            v89 = 70;
          }
          else if (check_phn_class(v81, v112[6], v90))
          {
            v89 = 83;
          }
          else if (check_phn_class(v81, v112[7], v90))
          {
            v89 = 76;
          }
          else if (check_phn_class(v81, v112[8], v90))
          {
            v89 = 78;
          }
          else if (check_phn_class(v81, v112[9], v90))
          {
            v89 = 71;
          }
          else
          {
            v89 = 45;
          }
        }
        v84 = v114;
      }
      *(_DWORD *)(v108 + 8) = 2;
      *(_BYTE *)v108 = v89;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v31 + 32) + 8 * v107) = v108;
      *(_DWORD *)(v110 + 8) = 2;
      v95 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 8 * v44) + 176) + 4 * v84);
      if (v95)
        v96 = v95 + 48;
      else
        v96 = 45;
      *(_BYTE *)v110 = v96;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v31 + 40) + 8 * v107) = v110;
      *(_DWORD *)(v109 + 8) = 3;
      v97 = v84;
      v98 = stringdup(a1, *(char **)(*(_QWORD *)(*(_QWORD *)(a4 + 8 * v44) + 168) + 8 * v84));
      *(_QWORD *)v109 = v98;
      if (!v98)
      {
        v100 = " in fExtGetPhoneFeats copying phone tag for phone %d in word %d.";
LABEL_119:
        NNFX_logMsg(a1, 0, (uint64_t)v100, v33, v34, v35, v36, v37);
        return 0;
      }
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v31 + 48) + 8 * v107) = v109;
      *(_DWORD *)(v106 + 8) = 2;
      v99 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a4 + 8 * v44) + 160) + v97);
      if (v99 == 32)
        LOBYTE(v99) = 45;
      *(_BYTE *)v106 = v99;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v31 + 56) + 8 * v107) = v106;
      v47 = v107 + 1;
      v46 = v97 + 1;
      ++v113;
      a3 = v112;
      if (v46 >= *(unsigned int *)(*(_QWORD *)(a4 + 8 * v44) + 144))
        goto LABEL_98;
    }
LABEL_47:
    NNFX_logMsg(a1, 1, (uint64_t)"::nnfeatextract, No vowel found in syllable ", v33, v34, v35, v36, v37);
    if (v63 <= v65)
    {
      v79 = v63;
      do
      {
        NNFX_logMsg(a1, 1, (uint64_t)"%c", v74, v75, v76, v77, v78);
        ++v79;
      }
      while (v79 <= v65);
    }
    NNFX_logMsg(a1, 1, (uint64_t)" from %d to %d for phone %d", v74, v75, v76, v77, v78);
LABEL_51:
    LOBYTE(v73) = 45;
    goto LABEL_52;
  }
  LODWORD(v45) = 0;
LABEL_106:
  if ((_DWORD)v45 != v8)
  {
    v100 = " in fExtGetPhoneFeats(). %d phones processed, but %d phones in input.";
    goto LABEL_119;
  }
  return v31;
}

uint64_t fExtGetLexicalFeats(uint64_t a1, uint64_t a2, __int16 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  char *v46;
  int v47;
  char *v48;
  uint64_t v49;
  unsigned int v50;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  char v58;
  char v59;
  char v60;
  int v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  char v77;
  char *v78;
  void *v79;
  uint64_t v80;
  void *v81;
  char *v82;
  void *v83;
  void *v84;
  char *v85;
  void *v86;
  void *v87;
  char *v88;
  void *v89;
  void *v90;
  char *v91;
  void *v92;
  void *v93;
  char *v94;
  void *v95;
  void *v96;
  char *v97;
  void *v98;
  void *v99;
  char *v100;
  uint64_t v101;
  void *v102;
  int v103;
  char v104;
  const char *v106;
  char v107;
  int v108;
  char v109;
  char v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _DWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  unsigned int ElementInGroup;
  int v131;
  int v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;

  v8 = a7;
  v9 = a6;
  NNFX_logMsg(a1, 3, (uint64_t)"Extracting lexical attributes...", a4, a5, a6, a7, a8);
  NNFX_logMsg(a1, 3, (uint64_t)"Num pros words: %d", v15, v16, v17, v18, v19);
  NNFX_logMsg(a1, 3, (uint64_t)"First boundary: %c", v20, v21, v22, v23, v24);
  v25 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 4048);
  v31 = v25;
  if (!v25)
  {
    NNFX_logMsg(a1, 0, (uint64_t)" in fExtGetLexicalFeats() trying to mallocate output.", v26, v27, v28, v29, v30);
    return v31;
  }
  *(_DWORD *)(v25 + 4016) = 15;
  *(_DWORD *)(v25 + 4024) = v8;
  *(_QWORD *)(v25 + 4032) = *(_QWORD *)(a5 + 16);
  v32 = heap_Alloc(*(_QWORD *)(a1 + 8), 120);
  *(_QWORD *)(v31 + 8) = v32;
  if (!v32)
  {
    v106 = " in fExtGetLexicalFeats() allocating feature names";
    goto LABEL_116;
  }
  **(_QWORD **)(v31 + 8) = stringdup(a1, "Prominence");
  *(_QWORD *)(*(_QWORD *)(v31 + 8) + 8) = stringdup(a1, "POS");
  *(_QWORD *)(*(_QWORD *)(v31 + 8) + 16) = stringdup(a1, "nluPOS");
  *(_QWORD *)(*(_QWORD *)(v31 + 8) + 24) = stringdup(a1, "nluCLS");
  *(_QWORD *)(*(_QWORD *)(v31 + 8) + 32) = stringdup(a1, "nluPNC");
  *(_QWORD *)(*(_QWORD *)(v31 + 8) + 40) = stringdup(a1, "nluCMP");
  *(_QWORD *)(*(_QWORD *)(v31 + 8) + 48) = stringdup(a1, "nluBDS");
  *(_QWORD *)(*(_QWORD *)(v31 + 8) + 56) = stringdup(a1, "nluCPS");
  *(_QWORD *)(*(_QWORD *)(v31 + 8) + 64) = stringdup(a1, "IsFxnWord");
  *(_QWORD *)(*(_QWORD *)(v31 + 8) + 72) = stringdup(a1, "IsWHWord");
  *(_QWORD *)(*(_QWORD *)(v31 + 8) + 80) = stringdup(a1, "IsAuxWord");
  *(_QWORD *)(*(_QWORD *)(v31 + 8) + 88) = stringdup(a1, "IsConjWord");
  *(_QWORD *)(*(_QWORD *)(v31 + 8) + 96) = stringdup(a1, "IsAdposWord");
  *(_QWORD *)(*(_QWORD *)(v31 + 8) + 104) = stringdup(a1, "CommonWord");
  *(_QWORD *)(*(_QWORD *)(v31 + 8) + 112) = stringdup(a1, "EndPhraseType");
  v38 = *(_DWORD *)(v31 + 4016);
  if (v38)
  {
    v39 = *(_QWORD **)(v31 + 8);
    v40 = *(unsigned int *)(v31 + 4016);
    do
    {
      if (!*v39)
      {
        v106 = " in fExtGetLexicalFeats allocating feature stream names.";
        goto LABEL_116;
      }
      ++v39;
      --v40;
    }
    while (v40);
  }
  v41 = heap_Alloc(*(_QWORD *)(a1 + 8), 8 * v38);
  *(_QWORD *)v31 = v41;
  if (!v41)
  {
    v106 = " in fExtGetLexicalFeats() trying to malloc-ate feature array.";
    goto LABEL_116;
  }
  if (*(_DWORD *)(v31 + 4016))
  {
    v42 = 0;
    do
    {
      v43 = heap_Alloc(*(_QWORD *)(a1 + 8), 8 * *(int *)(v31 + 4024));
      *(_QWORD *)(*(_QWORD *)v31 + 8 * v42) = v43;
      if (!v43)
      {
        v106 = " in fExtGetLexicalFeats mallocating output stream %d of %d";
        goto LABEL_116;
      }
      ++v42;
    }
    while (v42 < *(unsigned int *)(v31 + 4016));
  }
  v44 = *(_DWORD **)(a5 + 16);
  if (v44[1] != v9)
  {
    v106 = " in fExtGetLexicalFeats. Number of prosodic words %d does not match %d boundaries in the WORD tier.";
    goto LABEL_116;
  }
  if (*v44 != v8)
  {
    v106 = " in fExtGetLexicalFeats. Number of elments %d in WORD tier does not match number of phones.";
    goto LABEL_116;
  }
  if (v9)
  {
    v45 = 0;
    v46 = 0;
    v47 = -1;
    while (1)
    {
      ElementInGroup = firstElementInGroup(a1, (uint64_t)v44, v45, v33, v34, v35, v36, v37);
      if (ElementInGroup == -1)
      {
        v106 = " in fExtGetLexicalFeats finding beginning of group %d in WORD tier.";
        goto LABEL_116;
      }
      v131 = lastElementInGroup(a1, *(unsigned int **)(a5 + 16), v45, v33, v34, v35, v36, v37);
      if (v131 == -1)
      {
        v106 = " in fExtGetLexicalFeats finding end of group %d in WORD tier.";
        goto LABEL_116;
      }
      if (ElementInGroup != v47 + 1)
      {
        v106 = " in fExtGetLexicalFeats on WORD tier. First phone %d in group %d does not follow last phone (%d) processe"
               "d in previous group.";
        goto LABEL_116;
      }
      if (v131 >= v8)
      {
        v106 = " in fExtGetLexicalFeats on WORD tier. Going out of bounds: (index %d ; %d phones)";
        goto LABEL_116;
      }
      if (v46)
        heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v46);
      v48 = (char *)stringdup(a1, *(char **)(*(_QWORD *)(a4 + 8 * v45) + 32));
      if (!v48)
      {
        v106 = " in fExtGetLexicalFeats trying to lowercase ";
        goto LABEL_116;
      }
      v46 = v48;
      v136 = v45;
      if (*v48)
      {
        v49 = 0;
        v50 = 1;
        do
        {
          v46[v49] = __tolower(v46[v49]);
          v49 = v50;
        }
        while (strlen(v46) > v50++);
      }
      v52 = check_lex_feat(a2, v46, a3[11]);
      v132 = check_lex_feat(a2, v46, a3[12]);
      v128 = check_lex_feat(a2, v46, a3[14]);
      v126 = check_lex_feat(a2, v46, a3[13]);
      v53 = check_lex_feat(a2, v46, a3[15]);
      v54 = a3[10];
      LODWORD(v55) = -1;
      if (v54 != -1 && v54 <= 499)
      {
        v134 = v52;
        v56 = *(_QWORD *)(a2 + 16 * a3[10] + 8);
        if (v56)
        {
          v124 = v53;
          v55 = 0;
          do
          {
            v57 = *(const char **)(v56 + 8 * v55);
            if (!v57)
              break;
            if (!strcmp(v46, v57))
              goto LABEL_34;
            ++v55;
          }
          while ((_DWORD)v55 != 500);
          LODWORD(v55) = -1;
LABEL_34:
          v52 = v134;
          v53 = v124;
        }
        else
        {
          LODWORD(v55) = -1;
          v52 = v134;
        }
      }
      if (ElementInGroup <= v131)
      {
        v135 = 0;
        if (v52)
          v58 = 49;
        else
          v58 = 45;
        v111 = v58;
        if (v132)
          v59 = 49;
        else
          v59 = 45;
        v110 = v59;
        if (v128)
          v60 = 49;
        else
          v60 = 45;
        v109 = v60;
        if (v126)
          v61 = 49;
        else
          v61 = 45;
        if (v53)
          v62 = 49;
        else
          v62 = 45;
        v107 = v62;
        v108 = v61;
        v133 = 8 * ElementInGroup;
        v113 = a2;
        do
        {
          v63 = heap_Alloc(*(_QWORD *)(a1 + 8), 16);
          if (!v63)
          {
            v106 = " in fExtGetLexicalFeats while allocating mem for stream 0 of word %d.";
            goto LABEL_116;
          }
          v64 = v63;
          v65 = heap_Alloc(*(_QWORD *)(a1 + 8), 16);
          if (!v65)
          {
            v106 = " in fExtGetLexicalFeats while allocating mem for stream 1 of word %d.";
            goto LABEL_116;
          }
          v125 = v65;
          v127 = heap_Alloc(*(_QWORD *)(a1 + 8), 16);
          if (!v127)
          {
            v106 = " in fExtGetLexicalFeats while allocating mem for stream 2 of word %d.";
            goto LABEL_116;
          }
          v66 = heap_Alloc(*(_QWORD *)(a1 + 8), 16);
          if (!v66)
          {
            v106 = " in fExtGetLexicalFeats while allocating mem for stream 3 of word %d.";
            goto LABEL_116;
          }
          v123 = v66;
          v122 = heap_Alloc(*(_QWORD *)(a1 + 8), 16);
          if (!v122)
          {
            v106 = " in fExtGetLexicalFeats while allocating mem for stream 4 of word %d.";
            goto LABEL_116;
          }
          v67 = heap_Alloc(*(_QWORD *)(a1 + 8), 16);
          if (!v67)
          {
            v106 = " in fExtGetLexicalFeats while allocating mem for stream 5 of word %d.";
            goto LABEL_116;
          }
          v121 = v67;
          v120 = heap_Alloc(*(_QWORD *)(a1 + 8), 16);
          if (!v120)
          {
            v106 = " in fExtGetLexicalFeats while allocating mem for stream 6 of word %d.";
            goto LABEL_116;
          }
          v68 = heap_Alloc(*(_QWORD *)(a1 + 8), 16);
          if (!v68)
          {
            v106 = " in fExtGetLexicalFeats while allocating mem for stream 7 of word %d.";
            goto LABEL_116;
          }
          v119 = v68;
          v69 = heap_Alloc(*(_QWORD *)(a1 + 8), 16);
          if (!v69)
          {
            v106 = " in fExtGetLexicalFeats while allocating mem for stream 8 of word %d.";
            goto LABEL_116;
          }
          v118 = v69;
          v70 = heap_Alloc(*(_QWORD *)(a1 + 8), 16);
          if (!v70)
          {
            v106 = " in fExtGetLexicalFeats while allocating mem for stream 9 of word %d.";
            goto LABEL_116;
          }
          v117 = v70;
          v71 = heap_Alloc(*(_QWORD *)(a1 + 8), 16);
          if (!v71)
          {
            v106 = " in fExtGetLexicalFeats while allocating mem for stream 10 of word %d.";
            goto LABEL_116;
          }
          v116 = v71;
          v72 = heap_Alloc(*(_QWORD *)(a1 + 8), 16);
          if (!v72)
          {
            v106 = " in fExtGetLexicalFeats while allocating mem for stream 11 of word %d.";
            goto LABEL_116;
          }
          v115 = (_DWORD *)v72;
          v73 = heap_Alloc(*(_QWORD *)(a1 + 8), 16);
          if (!v73)
          {
            v106 = " in fExtGetLexicalFeats while allocating mem for stream 12 of word %d.";
            goto LABEL_116;
          }
          v114 = v73;
          v74 = heap_Alloc(*(_QWORD *)(a1 + 8), 16);
          if (!v74)
          {
            v106 = " in fExtGetLexicalFeats while allocating mem for stream 13 of word %d.";
            goto LABEL_116;
          }
          v129 = v74;
          v75 = heap_Alloc(*(_QWORD *)(a1 + 8), 16);
          if (!v75)
          {
            v106 = " in fExtGetLexicalFeats while allocating mem for stream 14 of word %d.";
            goto LABEL_116;
          }
          v112 = v75;
          v76 = *(_DWORD *)(*(_QWORD *)(a4 + 8 * v136) + 20);
          if (v76)
            v77 = v76 + 48;
          else
            v77 = 45;
          *(_BYTE *)v64 = v77;
          *(_QWORD *)(**(_QWORD **)v31 + v133 + 8 * v135) = v64;
          *(_DWORD *)(v64 + 8) = 2;
          *(_DWORD *)(v125 + 8) = 3;
          v78 = *(char **)(*(_QWORD *)(a4 + 8 * v136) + 56);
          if (*v78)
          {
            v79 = stringdup(a1, v78);
            *(_QWORD *)v125 = v79;
            v80 = v127;
            if (!v79)
            {
              v106 = " in fExtGetLexicalFeats copying POS value while processing phone %d (pros word %d)";
              goto LABEL_116;
            }
          }
          else
          {
            v81 = stringdup(a1, "-");
            *(_QWORD *)v125 = v81;
            v80 = v127;
            if (!v81)
            {
              v106 = " in fExtGetLexicalFeats copying null POS value while processing phone %d (pros word %d)";
              goto LABEL_116;
            }
          }
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v31 + 8) + v133 + 8 * v135) = v125;
          *(_DWORD *)(v80 + 8) = 3;
          v82 = *(char **)(*(_QWORD *)(a4 + 8 * v136) + 80);
          if (*v82)
          {
            v83 = stringdup(a1, v82);
            *(_QWORD *)v80 = v83;
            a2 = v113;
            if (!v83)
            {
              v106 = " in fExtGetLexicalFeats copying nluPOS value while processing phone %d (pros word %d)";
              goto LABEL_116;
            }
          }
          else
          {
            v84 = stringdup(a1, "-");
            *(_QWORD *)v80 = v84;
            a2 = v113;
            if (!v84)
            {
              v106 = " in fExtGetLexicalFeats copying null value to nluPOS feature while processing phone %d (pros word %d)";
              goto LABEL_116;
            }
          }
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v31 + 16) + v133 + 8 * v135) = v80;
          *(_DWORD *)(v123 + 8) = 3;
          v85 = *(char **)(*(_QWORD *)(a4 + 8 * v136) + 96);
          if (*v85)
          {
            v86 = stringdup(a1, v85);
            *(_QWORD *)v123 = v86;
            if (!v86)
            {
              v106 = " in fExtGetLexicalFeats copying nluCLS value while processing phone %d (pros word %d)";
              goto LABEL_116;
            }
          }
          else
          {
            v87 = stringdup(a1, "-");
            *(_QWORD *)v123 = v87;
            if (!v87)
            {
              v106 = " in fExtGetLexicalFeats copying null value to nluCLS feature while processing phone %d (pros word %d)";
              goto LABEL_116;
            }
          }
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v31 + 24) + v133 + 8 * v135) = v123;
          *(_DWORD *)(v122 + 8) = 3;
          v88 = *(char **)(*(_QWORD *)(a4 + 8 * v136) + 112);
          if (*v88)
          {
            v89 = stringdup(a1, v88);
            *(_QWORD *)v122 = v89;
            if (!v89)
            {
              v106 = " in fExtGetLexicalFeats copying nluPNC value while processing phone %d (pros word %d)";
              goto LABEL_116;
            }
          }
          else
          {
            v90 = stringdup(a1, "-");
            *(_QWORD *)v122 = v90;
            if (!v90)
            {
              v106 = " in fExtGetLexicalFeats copying null value to nluPNC feature while processing phone %d (pros word %d)";
              goto LABEL_116;
            }
          }
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v31 + 32) + v133 + 8 * v135) = v122;
          *(_DWORD *)(v121 + 8) = 3;
          v91 = *(char **)(*(_QWORD *)(a4 + 8 * v136) + 104);
          if (*v91)
          {
            v92 = stringdup(a1, v91);
            *(_QWORD *)v121 = v92;
            if (!v92)
            {
              v106 = " in fExtGetLexicalFeats copying nluCMP value while processing phone %d (pros word %d)";
              goto LABEL_116;
            }
          }
          else
          {
            v93 = stringdup(a1, "-");
            *(_QWORD *)v121 = v93;
            if (!v93)
            {
              v106 = " in fExtGetLexicalFeats copying null value to nluCMP feature while processing phone %d (pros word %d)";
              goto LABEL_116;
            }
          }
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v31 + 40) + v133 + 8 * v135) = v121;
          *(_DWORD *)(v120 + 8) = 3;
          v94 = *(char **)(*(_QWORD *)(a4 + 8 * v136) + 120);
          if (*v94)
          {
            v95 = stringdup(a1, v94);
            *(_QWORD *)v120 = v95;
            if (!v95)
            {
              v106 = " in fExtGetLexicalFeats copying nluBDS value while processing phone %d (pros word %d)";
              goto LABEL_116;
            }
          }
          else
          {
            v96 = stringdup(a1, "-");
            *(_QWORD *)v120 = v96;
            if (!v96)
            {
              v106 = " in fExtGetLexicalFeats copying null value to nluBDS feature while processing phone %d (pros word %d)";
              goto LABEL_116;
            }
          }
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v31 + 48) + v133 + 8 * v135) = v120;
          *(_DWORD *)(v119 + 8) = 3;
          v97 = *(char **)(*(_QWORD *)(a4 + 8 * v136) + 128);
          if (*v97)
          {
            v98 = stringdup(a1, v97);
            *(_QWORD *)v119 = v98;
            if (!v98)
            {
              v106 = " in fExtGetLexicalFeats copying nluCPS value while processing phone %d (pros word %d)";
              goto LABEL_116;
            }
          }
          else
          {
            v99 = stringdup(a1, "-");
            *(_QWORD *)v119 = v99;
            if (!v99)
            {
              v106 = " in fExtGetLexicalFeats copying null value to nluCPS feature while processing phone %d (pros word %d)";
LABEL_116:
              NNFX_logMsg(a1, 0, (uint64_t)v106, v33, v34, v35, v36, v37);
              return 0;
            }
          }
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v31 + 56) + v133 + 8 * v135) = v119;
          *(_DWORD *)(v118 + 8) = 2;
          *(_BYTE *)v118 = v111;
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v31 + 64) + v133 + 8 * v135) = v118;
          *(_BYTE *)v117 = v110;
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v31 + 72) + v133 + 8 * v135) = v117;
          *(_DWORD *)(v117 + 8) = 2;
          *(_DWORD *)(v116 + 8) = 2;
          *(_BYTE *)v116 = v109;
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v31 + 80) + v133 + 8 * v135) = v116;
          v115[2] = 2;
          *v115 = v108;
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v31 + 88) + v133 + 8 * v135) = v115;
          *(_DWORD *)(v114 + 8) = 2;
          *(_BYTE *)v114 = v107;
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v31 + 96) + v133 + 8 * v135) = v114;
          *(_DWORD *)(v129 + 8) = 3;
          if ((_DWORD)v55 == -1)
          {
            v101 = a1;
            v100 = "-";
          }
          else
          {
            v100 = *(char **)(*(_QWORD *)(a2 + 16 * a3[10] + 8) + 8 * (int)v55);
            v101 = a1;
          }
          v102 = stringdup(v101, v100);
          *(_QWORD *)v129 = v102;
          if (!v102)
          {
            v106 = " in fExtGetLexicalFeats copying value to lexeme.";
            goto LABEL_116;
          }
          v103 = v135;
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v31 + 104) + v133 + 8 * v135) = v129;
          *(_DWORD *)(v112 + 8) = 2;
          v104 = **(_BYTE **)(*(_QWORD *)(a4 + 8 * v136) + 48);
          if (!v104)
            v104 = 45;
          *(_BYTE *)v112 = v104;
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v31 + 112) + v133 + 8 * v135++) = v112;
        }
        while (~v131 + ElementInGroup + v103 + 1);
      }
      v45 = v136 + 1;
      v44 = *(_DWORD **)(a5 + 16);
      v47 = v131;
      if (v136 + 1 >= (unint64_t)v44[1])
      {
        heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v46);
        return v31;
      }
    }
  }
  return v31;
}

uint64_t fExtGetParseFeats(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  unsigned int v40;
  int v41;
  unsigned int ElementInGroup;
  unsigned int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  _QWORD *v52;
  char *v53;
  void *v54;
  const char *v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  uint64_t v60;

  v8 = a7;
  v9 = a6;
  NNFX_logMsg(a1, 3, (uint64_t)"Extracting syntactical attributes...", a4, a5, a6, a7, a8);
  NNFX_logMsg(a1, 3, (uint64_t)"Num pros words: %d", v13, v14, v15, v16, v17);
  NNFX_logMsg(a1, 3, (uint64_t)"First boundary: %c", v18, v19, v20, v21, v22);
  v23 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 4048);
  v29 = v23;
  if (!v23)
  {
    NNFX_logMsg(a1, 0, (uint64_t)" in fExtGetParseFeats() trying to mallocate output.", v24, v25, v26, v27, v28);
    return v29;
  }
  *(_DWORD *)(v23 + 4016) = 1;
  *(_DWORD *)(v23 + 4024) = v8;
  *(_QWORD *)(v23 + 4032) = *(_QWORD *)(a5 + 40);
  v30 = heap_Alloc(*(_QWORD *)(a1 + 8), 8);
  *(_QWORD *)(v29 + 8) = v30;
  if (!v30 || (**(_QWORD **)(v29 + 8) = stringdup(a1, "SyntaxTag")) == 0)
  {
    v56 = " in fExtGetParseFeats() allocating feature names";
LABEL_36:
    NNFX_logMsg(a1, 0, (uint64_t)v56, v31, v32, v33, v34, v35);
    return 0;
  }
  v36 = heap_Alloc(*(_QWORD *)(a1 + 8), 8 * *(int *)(v29 + 4016));
  *(_QWORD *)v29 = v36;
  if (!v36)
  {
    v56 = " in fExtGetParseFeats() trying to malloc-ate output.";
    goto LABEL_36;
  }
  if (*(_DWORD *)(v29 + 4016))
  {
    v37 = 0;
    while (1)
    {
      v38 = heap_Alloc(*(_QWORD *)(a1 + 8), 8 * *(int *)(v29 + 4024));
      *(_QWORD *)(*(_QWORD *)v29 + 8 * v37) = v38;
      if (!v38)
        break;
      if (++v37 >= (unint64_t)*(unsigned int *)(v29 + 4016))
        goto LABEL_9;
    }
    v56 = " in fExtGetParseFeats mallocating for output stream %d of %d";
    goto LABEL_36;
  }
LABEL_9:
  v39 = *(_DWORD **)(a5 + 40);
  if (*v39 != v8)
  {
    v56 = " in fExtGetParseFeats. Number of elments %d in PARSE tier does not match number of phones %d.";
    goto LABEL_36;
  }
  if (v39[1])
  {
    v40 = 0;
    v41 = -1;
    while (1)
    {
      ElementInGroup = firstElementInGroup(a1, (uint64_t)v39, v40, v31, v32, v33, v34, v35);
      if (ElementInGroup == -1)
      {
        v56 = " in fExtGetParseFeats finding beginning of group %d in PARSE tier.";
        goto LABEL_36;
      }
      v43 = ElementInGroup;
      v44 = lastElementInGroup(a1, *(unsigned int **)(a5 + 40), v40, v31, v32, v33, v34, v35);
      if (v44 == -1)
      {
        v56 = " in fExtGetParseFeats finding end of group %d in PARSE tier.";
        goto LABEL_36;
      }
      if (v43 != v41 + 1)
      {
        v56 = " in fExtGetParseFeats on PARSE tier. First phone %d in group %d does not follow last phone (%d) processed "
              "in previous group.";
        goto LABEL_36;
      }
      if (v44 >= v8)
      {
        v56 = " in fExtGetParseFeats on PARSE tier. Going out of bounds: (index %d ; %d phones)";
        goto LABEL_36;
      }
      if (!v9)
      {
LABEL_48:
        v56 = " in fExtGetParseFeats. Initial phone %d in parse group %d does not align with the start of any prosodic word.";
        goto LABEL_36;
      }
      v45 = 0;
      v46 = 0;
      while (*(_DWORD *)(*(_QWORD *)(a4 + 8 * v46) + 140) != v43)
      {
        ++v46;
        v45 += 0x100000000;
        if (v9 == v46)
          goto LABEL_48;
      }
      v58 = v44;
      v59 = v40;
      v47 = 0;
      v48 = 0;
      while (*(_DWORD *)(*(_QWORD *)(a4 + 8 * v48) + 140) + *(_DWORD *)(*(_QWORD *)(a4 + 8 * v48) + 144) - 1 != v44)
      {
        ++v48;
        v47 += 0x100000000;
        if (v9 == v48)
        {
          v56 = " in fExtGetParseFeats. Last phone %d in parse group %d does not align with the end of any prosodic word.";
          goto LABEL_36;
        }
      }
      v57 = v44;
      if (strcmp(*(const char **)(*(_QWORD *)(a4 + (v45 >> 29)) + 88), *(const char **)(*(_QWORD *)(a4 + (v47 >> 29)) + 88)))
      {
        v56 = " in fExtGetParseFeats. First (%d) and last (%d) words in parse group %d (from phone %d to phone %d) do not"
              " share a common nluPHR tag.";
        goto LABEL_36;
      }
      if (v43 <= v57)
        break;
LABEL_33:
      v41 = v58;
      v40 = v59 + 1;
      v39 = *(_DWORD **)(a5 + 40);
      if (v59 + 1 >= v39[1])
        return v29;
    }
    v60 = v47 >> 32;
    v49 = 8 * v43;
    v50 = v57 - v43 + 1;
    while (1)
    {
      v51 = heap_Alloc(*(_QWORD *)(a1 + 8), 16);
      if (!v51)
      {
        v56 = " in fExtGetParseFeats while allocating mem for stream 0 of parse group %d.";
        goto LABEL_36;
      }
      v52 = (_QWORD *)v51;
      *(_DWORD *)(v51 + 8) = 3;
      v53 = *(char **)(*(_QWORD *)(a4 + 8 * v60) + 88);
      if (!*v53)
        v53 = "-";
      v54 = stringdup(a1, v53);
      *v52 = v54;
      if (!v54)
        break;
      *(_QWORD *)(**(_QWORD **)v29 + v49) = v52;
      v49 += 8;
      if (!--v50)
        goto LABEL_33;
    }
    v56 = " in fExtGetParseFeats copying syntactical category feature.";
    goto LABEL_36;
  }
  return v29;
}

uint64_t fExtGetPhraseFeats(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  unsigned int v40;
  int v41;
  unsigned int ElementInGroup;
  unsigned int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  const char *v53;
  int v55;
  unsigned int v56;

  v8 = a7;
  v9 = a6;
  NNFX_logMsg(a1, 3, (uint64_t)"Extracting phrase-level attributes...", a4, a5, a6, a7, a8);
  NNFX_logMsg(a1, 3, (uint64_t)"Num pros words: %d", v13, v14, v15, v16, v17);
  NNFX_logMsg(a1, 3, (uint64_t)"First boundary: %c", v18, v19, v20, v21, v22);
  v23 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 4048);
  v29 = v23;
  if (!v23)
  {
    NNFX_logMsg(a1, 0, (uint64_t)" in fExtGetPhraseFeats() trying to mallocate output.", v24, v25, v26, v27, v28);
    return v29;
  }
  *(_DWORD *)(v23 + 4016) = 1;
  *(_DWORD *)(v23 + 4024) = v8;
  *(_QWORD *)(v23 + 4032) = *(_QWORD *)(a5 + 24);
  v30 = heap_Alloc(*(_QWORD *)(a1 + 8), 8);
  *(_QWORD *)(v29 + 8) = v30;
  if (!v30 || (**(_QWORD **)(v29 + 8) = stringdup(a1, "PhraseBoundaryStrength")) == 0)
  {
    v53 = " in fExtGetPhraseFeats() allocating feature names";
LABEL_30:
    NNFX_logMsg(a1, 0, (uint64_t)v53, v31, v32, v33, v34, v35);
    return 0;
  }
  v36 = heap_Alloc(*(_QWORD *)(a1 + 8), 8 * *(int *)(v29 + 4016));
  *(_QWORD *)v29 = v36;
  if (!v36)
  {
    v53 = " in fExtGetPhraseFeats() trying to malloc-ate output.";
    goto LABEL_30;
  }
  if (*(_DWORD *)(v29 + 4016))
  {
    v37 = 0;
    while (1)
    {
      v38 = heap_Alloc(*(_QWORD *)(a1 + 8), 8 * *(int *)(v29 + 4024));
      *(_QWORD *)(*(_QWORD *)v29 + 8 * v37) = v38;
      if (!v38)
        break;
      if (++v37 >= (unint64_t)*(unsigned int *)(v29 + 4016))
        goto LABEL_9;
    }
    v53 = "in fExtGetPhraseFeats mallocating for output stream %d of %d";
    goto LABEL_30;
  }
LABEL_9:
  v39 = *(_DWORD **)(a5 + 24);
  if (*v39 != v8)
  {
    v53 = " fExtGetPhraseFeats. Number of elements %d in PHRASE tier does not match number of phones %d";
    goto LABEL_30;
  }
  if (v39[1])
  {
    v40 = 0;
    v41 = -1;
    while (1)
    {
      ElementInGroup = firstElementInGroup(a1, (uint64_t)v39, v40, v31, v32, v33, v34, v35);
      if (ElementInGroup == -1)
      {
        v53 = " in fExtGetPhraseFeats finding beginning of group %d in PHRASE tier.";
        goto LABEL_30;
      }
      v43 = ElementInGroup;
      v44 = lastElementInGroup(a1, *(unsigned int **)(a5 + 24), v40, v31, v32, v33, v34, v35);
      if (v44 == -1)
      {
        v53 = " in fExtGetPhraseFeats finding end of group %d in PHRASe tier.";
        goto LABEL_30;
      }
      if (v43 != v41 + 1)
      {
        v53 = " in fExtGetPhraseFeats on PHRASE tier. First phone %d in group %d does not follow last phone (%d) processe"
              "d in previous group.";
        goto LABEL_30;
      }
      if (v44 >= v8)
      {
        v53 = " in fExtGetPhraseFeats on PHRASE tier. Going out of bounds: (index %d ; %d phones)";
        goto LABEL_30;
      }
      if (!v9)
      {
LABEL_41:
        v53 = " in fExtGetPhraseFeats. Last phone %d in phrase %d does not align with the end of any prosodic word.";
        goto LABEL_30;
      }
      v45 = 0;
      v46 = a4;
      v47 = v9;
      while (*(_DWORD *)(*(_QWORD *)v46 + 140) + *(_DWORD *)(*(_QWORD *)v46 + 144) - 1 != v44)
      {
        v45 += 0x100000000;
        v46 += 8;
        if (!--v47)
          goto LABEL_41;
      }
      v55 = v44;
      v56 = v40;
      if (v43 <= v44)
        break;
LABEL_27:
      v41 = v55;
      v40 = v56 + 1;
      v39 = *(_DWORD **)(a5 + 24);
      if (v56 + 1 >= v39[1])
        return v29;
    }
    v48 = v45 >> 32;
    v49 = 8 * v43;
    v50 = v44 - v43 + 1;
    while (1)
    {
      v51 = heap_Alloc(*(_QWORD *)(a1 + 8), 16);
      if (!v51)
        break;
      *(_DWORD *)(v51 + 8) = 2;
      v52 = *(unsigned __int8 *)(*(_QWORD *)(a4 + 8 * v48) + 136);
      if (v52 == 78)
        LOBYTE(v52) = 45;
      *(_BYTE *)v51 = v52;
      *(_QWORD *)(**(_QWORD **)v29 + v49) = v51;
      v49 += 8;
      if (!--v50)
        goto LABEL_27;
    }
    v53 = " in fExtGetPhraseFeats while allocating mem for stream 0 of phrase %d.";
    goto LABEL_30;
  }
  return v29;
}

uint64_t fExtGetPunctFeats(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  unsigned int v30;
  int v31;
  unsigned int ElementInGroup;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v41;
  int v42;
  const char *v43;
  int v44;
  unsigned int v45;
  char *v46;
  char *v47;
  uint64_t v48;
  int i;
  uint64_t v50;
  _QWORD *v51;
  void *v52;
  void *v53;
  const char *v54;
  int v56;
  unsigned int v57;
  int v58;
  char *__s;

  v8 = a7;
  v9 = a6;
  NNFX_logMsg(a1, 3, (uint64_t)"Extracting punctuation attributes...", a4, a5, a6, a7, a8);
  v13 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 4048);
  v19 = v13;
  if (!v13)
  {
    NNFX_logMsg(a1, 0, (uint64_t)" in fExtGetPunctFeats() trying to mallocate output.", v14, v15, v16, v17, v18);
    return v19;
  }
  *(_DWORD *)(v13 + 4016) = 1;
  *(_DWORD *)(v13 + 4024) = v8;
  *(_QWORD *)(v13 + 4032) = *(_QWORD *)(a5 + 32);
  v20 = heap_Alloc(*(_QWORD *)(a1 + 8), 8);
  *(_QWORD *)(v19 + 8) = v20;
  if (!v20)
  {
    v54 = " in fExtGetPunctFeats() allocating feature names";
    goto LABEL_71;
  }
  **(_QWORD **)(v19 + 8) = stringdup(a1, "PunctMark");
  if (!**(_QWORD **)(v19 + 8))
  {
    v54 = " in fExtGetPunctFeats() allocating feature names.";
    goto LABEL_71;
  }
  v26 = heap_Alloc(*(_QWORD *)(a1 + 8), 8 * *(int *)(v19 + 4016));
  *(_QWORD *)v19 = v26;
  if (!v26)
  {
    v54 = " in fExtGetPunctFeats() trying to malloc-ate feature array.";
    goto LABEL_71;
  }
  if (*(_DWORD *)(v19 + 4016))
  {
    v27 = 0;
    do
    {
      v28 = heap_Alloc(*(_QWORD *)(a1 + 8), 8 * *(int *)(v19 + 4024));
      *(_QWORD *)(*(_QWORD *)v19 + 8 * v27) = v28;
      if (!v28)
      {
        v54 = " in fExtGetPunctFeats mallocating output stream %d of %d";
        goto LABEL_71;
      }
      ++v27;
    }
    while (v27 < *(unsigned int *)(v19 + 4016));
  }
  v29 = *(_DWORD **)(a5 + 32);
  if (*v29 != v8)
  {
    v54 = " in fExtGetPunctFeats. Number of elments %d in PUNCT tier does not match number of phones %d.";
    goto LABEL_71;
  }
  if (v29[1])
  {
    v30 = 0;
    __s = 0;
    v31 = -1;
    while (1)
    {
      ElementInGroup = firstElementInGroup(a1, (uint64_t)v29, v30, v21, v22, v23, v24, v25);
      if (ElementInGroup == -1)
      {
        v54 = " in fExtGetPunctFeats finding beginning of group %d in PUNCT tier.";
        goto LABEL_71;
      }
      v33 = ElementInGroup;
      v34 = lastElementInGroup(a1, *(unsigned int **)(a5 + 32), v30, v21, v22, v23, v24, v25);
      if (v34 == -1)
      {
        v54 = " in fExtGetPunctFeats finding end of group %d in PUNCT tier.";
        goto LABEL_71;
      }
      if (v33 != v31 + 1)
      {
        v54 = " in fExtGetPunctFeats on PUNCT tier. First phone %d in group %d does not follow last phone (%d) processed "
              "in previous group.";
        goto LABEL_71;
      }
      if (v34 >= v8)
      {
        v54 = " in fExtGetPunctFeats on PUNCT tier. Going out of bounds: (index %d ; %d phones)";
        goto LABEL_71;
      }
      if (!v9)
      {
LABEL_70:
        v54 = " in fExtGetPunctFeats. First phone %d in parse group %d does not align with the start of any prosodic word.";
        goto LABEL_71;
      }
      v35 = 0;
      v36 = 0;
      v58 = v34;
      while (*(_DWORD *)(*(_QWORD *)(a4 + 8 * v36) + 140) != v33)
      {
        ++v36;
        v35 += 0x100000000;
        if (v9 == v36)
          goto LABEL_70;
      }
      v57 = v30;
      v37 = 0;
      while (*(_DWORD *)(*(_QWORD *)(a4 + 8 * v37) + 140) + *(_DWORD *)(*(_QWORD *)(a4 + 8 * v37) + 144) - 1 != v34)
      {
        if (v9 == ++v37)
        {
          v54 = " in fExtGetPunctFeats. Last phone %d in parse group %d does not align with the end of any prosodic word.";
          goto LABEL_71;
        }
      }
      if (__s)
      {
        v56 = v34;
        heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)__s);
        v34 = v56;
      }
      if ((int)v37 < (int)v36)
      {
LABEL_32:
        __s = 0;
        v41 = v57;
        goto LABEL_45;
      }
      v38 = (int)v37;
      while (1)
      {
        v39 = *(_QWORD *)(a4 + 8 * v38);
        if (!*(_DWORD *)(v39 + 192))
          break;
        if (v38-- <= v35 >> 32)
          goto LABEL_32;
      }
      v42 = v34;
      v43 = *(const char **)(v39 + 32);
      v44 = strlen(v43);
      if (!v44)
        goto LABEL_42;
      v45 = v43[v44 - 1];
      if (v45 > 0x39)
      {
        v41 = v57;
        if (v45 == 58)
        {
          v46 = "COLON";
        }
        else
        {
          if (v45 != 59)
          {
            if (v45 == 63)
              v46 = "QMARK";
            else
LABEL_42:
              v46 = "PERIOD";
            v41 = v57;
            goto LABEL_44;
          }
          v46 = "SEMICOLON";
        }
      }
      else
      {
        v41 = v57;
        if (v45 == 33)
        {
          v46 = "EXCL";
        }
        else
        {
          if (v45 != 44)
            goto LABEL_42;
          v46 = "COMMA";
        }
      }
LABEL_44:
      v47 = (char *)stringdup(a1, v46);
      v34 = v42;
      __s = v47;
      if (!v47)
      {
        v54 = " in fExtGetPunctFeats while allocating mem for punctMark feature.";
LABEL_71:
        NNFX_logMsg(a1, 0, (uint64_t)v54, v21, v22, v23, v24, v25);
        return 0;
      }
LABEL_45:
      if (v33 <= v34)
      {
        v48 = 8 * v33;
        for (i = v34 - v33 + 1; i; --i)
        {
          v50 = heap_Alloc(*(_QWORD *)(a1 + 8), 16);
          if (!v50)
          {
            v54 = " in fExtGetPunctFeats while allocating mem for stream 0 of parse group %d.";
            goto LABEL_71;
          }
          v51 = (_QWORD *)v50;
          *(_DWORD *)(v50 + 8) = 3;
          if (__s)
          {
            v52 = stringdup(a1, __s);
            *v51 = v52;
            if (!v52)
            {
              v54 = " in fExtGetPunctFeats copying punctuation mark feature.";
              goto LABEL_71;
            }
          }
          else
          {
            v53 = stringdup(a1, "-");
            *v51 = v53;
            if (!v53)
            {
              v54 = " in fExtGetPunctFeats copying default punctuation mark feature.";
              goto LABEL_71;
            }
          }
          *(_QWORD *)(**(_QWORD **)v19 + v48) = v51;
          v48 += 8;
        }
      }
      v30 = v41 + 1;
      v29 = *(_DWORD **)(a5 + 32);
      v31 = v58;
      if (v30 >= v29[1])
      {
        if (__s)
          heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)__s);
        return v19;
      }
    }
  }
  return v19;
}

uint64_t **fExtGetPhone2BdryFeats(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return fExtGetPhone2BdryFeats__(a1, a4, a5, a6, a7, 0, a7, a8);
}

uint64_t **fExtGetSyll2BdryFeats(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t LeftCounts;
  uint64_t RightCounts;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;

  NNFX_logMsg(a1, 3, (uint64_t)"Extracting Syllable-to-X boundary features...", a4, (uint64_t)a5, a6, a7, a8);
  NNFX_logMsg(a1, 3, (uint64_t)"Num pros words: %d", v11, v12, v13, v14, v15);
  NNFX_logMsg(a1, 3, (uint64_t)"First boundary: %c", v16, v17, v18, v19, v20);
  v21 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 4048);
  v27 = (uint64_t **)v21;
  if (v21)
  {
    *(_DWORD *)(v21 + 4016) = 24;
    *(_DWORD *)(v21 + 4024) = a7;
    v28 = heap_Alloc(*(_QWORD *)(a1 + 8), 192);
    v27[1] = (uint64_t *)v28;
    if (!v28)
    {
      v62 = " in fExtGetSyll2BdryFeats() allocating feature names";
      goto LABEL_60;
    }
    *v27[1] = (uint64_t)stringdup(a1, "Syll2StrGrpLCtInt");
    v27[1][1] = (uint64_t)stringdup(a1, "Syll2StrGrpRCtInt");
    v27[1][2] = (uint64_t)stringdup(a1, "Syll2StrGrpLCtFloat");
    v27[1][3] = (uint64_t)stringdup(a1, "Syll2StrGrpRCtFloat");
    v27[1][4] = (uint64_t)stringdup(a1, "Syll2WordLCtInt");
    v27[1][5] = (uint64_t)stringdup(a1, "Syll2WordRCtInt");
    v27[1][6] = (uint64_t)stringdup(a1, "Syll2WordLCtFloat");
    v27[1][7] = (uint64_t)stringdup(a1, "Syll2WordRCtFloat");
    v27[1][8] = (uint64_t)stringdup(a1, "Syll2StxGrpLCtInt");
    v27[1][9] = (uint64_t)stringdup(a1, "Syll2StxGrpRCtInt");
    v27[1][10] = (uint64_t)stringdup(a1, "Syll2StxGrpLCtFloat");
    v27[1][11] = (uint64_t)stringdup(a1, "Syll2StxGrpRCtFloat");
    v27[1][12] = (uint64_t)stringdup(a1, "Syll2PhraseLCtInt");
    v27[1][13] = (uint64_t)stringdup(a1, "Syll2PhraseRCtInt");
    v27[1][14] = (uint64_t)stringdup(a1, "Syll2PhraseLCtFloat");
    v27[1][15] = (uint64_t)stringdup(a1, "Syll2PhraseRCtFloat");
    v27[1][16] = (uint64_t)stringdup(a1, "Syll2PunctLCtInt");
    v27[1][17] = (uint64_t)stringdup(a1, "Syll2PunctRCtInt");
    v27[1][18] = (uint64_t)stringdup(a1, "Syll2PunctLCtFloat");
    v27[1][19] = (uint64_t)stringdup(a1, "Syll2PunctRCtFloat");
    v27[1][20] = (uint64_t)stringdup(a1, "Syll2SentLCtInt");
    v27[1][21] = (uint64_t)stringdup(a1, "Syll2SentRCtInt");
    v27[1][22] = (uint64_t)stringdup(a1, "Syll2SentLCtFloat");
    v27[1][23] = (uint64_t)stringdup(a1, "Syll2SentRCtFloat");
    v34 = *((_DWORD *)v27 + 1004);
    if (v34 >= 1)
    {
      v35 = v27[1];
      v36 = *((unsigned int *)v27 + 1004);
      while (*v35)
      {
        ++v35;
        if (!--v36)
          goto LABEL_7;
      }
      v62 = " in fExtGetSyll2BdryFeats allocating feature stream names.";
      goto LABEL_60;
    }
LABEL_7:
    v37 = heap_Alloc(*(_QWORD *)(a1 + 8), 8 * v34);
    *v27 = (uint64_t *)v37;
    if (!v37)
    {
      v62 = " in fExtGetSyll2BdryFeats() trying to malloc-ate feature array.";
      goto LABEL_60;
    }
    LeftCounts = getLeftCounts(a1, a5[1], a5[6]);
    **v27 = LeftCounts;
    if (!LeftCounts)
    {
      v62 = " in fExtGetSyll2BdryFeats() creating LEFT PHONE-TO-STRGRP-BDRY counts.";
      goto LABEL_60;
    }
    RightCounts = getRightCounts(a1, a5[1], a5[6]);
    (*v27)[1] = RightCounts;
    if (!RightCounts)
    {
      v62 = " in fExtGetSyll2BdryFeats() creating RIGHT PHONE-TO-STRGRP-BDRY counts.";
      goto LABEL_60;
    }
    v40 = normalizeCounts(a1, **v27, (*v27)[1], a7, v30, v31, v32, v33);
    (*v27)[2] = v40;
    if (!v40)
    {
      v62 = " in fExtGetSyll2BdryFeats() creating LEFT PHONE-TO-STRGRP-BDRY norm-counts.";
      goto LABEL_60;
    }
    v41 = normalizeCounts(a1, (*v27)[1], **v27, a7, v30, v31, v32, v33);
    (*v27)[3] = v41;
    if (!v41)
    {
      v62 = " in fExtGetSyll2BdryFeats() creating RIGHT PHONE-TO-STRGRP-BDRY norm-counts.";
      goto LABEL_60;
    }
    v42 = getLeftCounts(a1, a5[1], a5[2]);
    (*v27)[4] = v42;
    if (!v42)
    {
      v62 = " in fExtGetSyll2BdryFeats() creating LEFT SYLL-TO-WORD-BDRY counts.";
      goto LABEL_60;
    }
    v43 = getRightCounts(a1, a5[1], a5[2]);
    (*v27)[5] = v43;
    if (!v43)
    {
      v62 = " in fExtGetSyll2BdryFeats() creating RIGHT SYLL-TO-WORD-BDRY counts.";
      goto LABEL_60;
    }
    v44 = normalizeCounts(a1, (*v27)[4], (*v27)[5], a7, v30, v31, v32, v33);
    (*v27)[6] = v44;
    if (!v44)
    {
      v62 = " in fExtGetSyll2BdryFeats() creating LEFT SYLL-TO-WORD-BDRY norm-counts.";
      goto LABEL_60;
    }
    v45 = normalizeCounts(a1, (*v27)[5], (*v27)[4], a7, v30, v31, v32, v33);
    (*v27)[7] = v45;
    if (!v45)
    {
      v62 = " in fExtGetSyll2BdryFeats() creating RIGHT SYLL-TO-WORD-BDRY norm-counts.";
      goto LABEL_60;
    }
    v46 = getLeftCounts(a1, a5[1], a5[5]);
    (*v27)[8] = v46;
    if (!v46)
    {
      v62 = " in fExtGetSyll2BdryFeats() creating LEFT SYLL-TO-SYNTAX-BDRY counts.";
      goto LABEL_60;
    }
    v47 = getRightCounts(a1, a5[1], a5[5]);
    (*v27)[9] = v47;
    if (!v47)
    {
      v62 = " in fExtGetSyll2BdryFeats() creating RIGHT SYLL-TO-SYNTAX-BDRY counts.";
      goto LABEL_60;
    }
    v48 = normalizeCounts(a1, (*v27)[8], (*v27)[9], a7, v30, v31, v32, v33);
    (*v27)[10] = v48;
    if (!v48)
    {
      v62 = " in fExtGetSyll2BdryFeats() creating LEFT SYLL-TO-SYNTAX-BDRY norm-counts.";
      goto LABEL_60;
    }
    v49 = normalizeCounts(a1, (*v27)[9], (*v27)[8], a7, v30, v31, v32, v33);
    (*v27)[11] = v49;
    if (!v49)
    {
      v62 = " in fExtGetSyll2BdryFeats() creating RIGHT SYLL-TO-SYNTAX-BDRY norm-counts.";
      goto LABEL_60;
    }
    v50 = getLeftCounts(a1, a5[1], a5[3]);
    (*v27)[12] = v50;
    if (!v50)
    {
      v62 = " in fExtGetSyll2BdryFeats() creating LEFT SYLL-TO-PHRASE-BDRY counts.";
      goto LABEL_60;
    }
    v51 = getRightCounts(a1, a5[1], a5[3]);
    (*v27)[13] = v51;
    if (!v51)
    {
      v62 = " in fExtGetSyll2BdryFeats() creating RIGHT SYLL-TO-PHRASE-BDRY counts.";
      goto LABEL_60;
    }
    v52 = normalizeCounts(a1, (*v27)[12], (*v27)[13], a7, v30, v31, v32, v33);
    (*v27)[14] = v52;
    if (!v52)
    {
      v62 = " in fExtGetSyll2BdryFeats() creating LEFT SYLL-TO-PHRASE-BDRY norm-counts.";
      goto LABEL_60;
    }
    v53 = normalizeCounts(a1, (*v27)[13], (*v27)[12], a7, v30, v31, v32, v33);
    (*v27)[15] = v53;
    if (!v53)
    {
      v62 = " in fExtGetSyll2BdryFeats creating RIGHT SYLL-TO-PHRASE-BDRY norm-counts.";
      goto LABEL_60;
    }
    v54 = getLeftCounts(a1, a5[1], a5[4]);
    (*v27)[16] = v54;
    if (!v54)
    {
      v62 = " in fExtGetSyll2BdryFeats() creating LEFT SYLL-TO-PUNCT-BDRY counts.";
      goto LABEL_60;
    }
    v55 = getRightCounts(a1, a5[1], a5[4]);
    (*v27)[17] = v55;
    if (!v55)
    {
      v62 = " in fExtGetSyll2BdryFeats() creating RIGHT SYLL-TO-PUNCT-BDRY counts.";
      goto LABEL_60;
    }
    v56 = normalizeCounts(a1, (*v27)[16], (*v27)[17], a7, v30, v31, v32, v33);
    (*v27)[18] = v56;
    if (!v56)
    {
      v62 = " in fExtGetSyll2BdryFeats() creating LEFT SYLL-TO-PUNCT-BDRY norm-counts.";
      goto LABEL_60;
    }
    v57 = normalizeCounts(a1, (*v27)[17], (*v27)[16], a7, v30, v31, v32, v33);
    (*v27)[19] = v57;
    if (!v57)
    {
      v62 = " in fExtGetSyll2BdryFeats() creating RIGHT SYLL-TO-PUNCT-BDRY norm-counts.";
      goto LABEL_60;
    }
    v58 = getLeftCounts(a1, a5[1], a5[7]);
    (*v27)[20] = v58;
    if (!v58)
    {
      v62 = " in fExtGetSyll2BdryFeats() creating LEFT SYLL-TO-SENT-BDRY counts.";
      goto LABEL_60;
    }
    v59 = getRightCounts(a1, a5[1], a5[7]);
    (*v27)[21] = v59;
    if (!v59)
    {
      v62 = " in fExtGetSyll2BdryFeats() creating RIGHT SYLL-TO-SENT-BDRY counts.";
      goto LABEL_60;
    }
    v60 = normalizeCounts(a1, (*v27)[20], (*v27)[21], a7, v30, v31, v32, v33);
    (*v27)[22] = v60;
    if (!v60)
    {
      v62 = " in fExtGetSyll2BdryFeats() creating LEFT SYLL-TO-SENT-BDRY norm-counts.";
      goto LABEL_60;
    }
    v61 = normalizeCounts(a1, (*v27)[21], (*v27)[20], a7, v30, v31, v32, v33);
    (*v27)[23] = v61;
    if (!v61)
    {
      v62 = " in fExtGetSyll2BdryFeats() creating RIGHT SYLL-TO-SENT-BDRY norm-counts.";
LABEL_60:
      NNFX_logMsg(a1, 0, (uint64_t)v62, v29, v30, v31, v32, v33);
      return 0;
    }
  }
  else
  {
    NNFX_logMsg(a1, 0, (uint64_t)" in fExtGetSyll2BdryFeats() trying to mallocate output.", v22, v23, v24, v25, v26);
  }
  return v27;
}

uint64_t **fExtGetStrGrp2BdryFeats(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t LeftCounts;
  uint64_t RightCounts;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;

  NNFX_logMsg(a1, 3, (uint64_t)"Extracting Stress-Group-to-X boundary features...", a4, (uint64_t)a5, a6, a7, a8);
  NNFX_logMsg(a1, 3, (uint64_t)"Num pros words: %d", v11, v12, v13, v14, v15);
  NNFX_logMsg(a1, 3, (uint64_t)"First boundary: %c", v16, v17, v18, v19, v20);
  v21 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 4048);
  v27 = (uint64_t **)v21;
  if (v21)
  {
    *(_DWORD *)(v21 + 4016) = 8;
    *(_DWORD *)(v21 + 4024) = a7;
    v28 = heap_Alloc(*(_QWORD *)(a1 + 8), 64);
    v27[1] = (uint64_t *)v28;
    if (!v28)
    {
      v46 = " in fExtGetStrGrp2BdryFeats() allocating feature names";
      goto LABEL_28;
    }
    *v27[1] = (uint64_t)stringdup(a1, "StrGrp2PhraseLCtInt");
    v27[1][1] = (uint64_t)stringdup(a1, "StrGrp2PhraseRCtInt");
    v27[1][2] = (uint64_t)stringdup(a1, "StrGrp2PhraseLCtFloat");
    v27[1][3] = (uint64_t)stringdup(a1, "StrGrp2PhraseRCtFloat");
    v27[1][4] = (uint64_t)stringdup(a1, "StrGrp2SentLCtInt");
    v27[1][5] = (uint64_t)stringdup(a1, "StrGrp2SentRCtInt");
    v27[1][6] = (uint64_t)stringdup(a1, "StrGrp2SentLCtFloat");
    v27[1][7] = (uint64_t)stringdup(a1, "StrGrp2SentRCtFloat");
    v34 = *((_DWORD *)v27 + 1004);
    if (v34 >= 1)
    {
      v35 = v27[1];
      v36 = *((unsigned int *)v27 + 1004);
      while (*v35)
      {
        ++v35;
        if (!--v36)
          goto LABEL_7;
      }
      v46 = " in fExtGetStrGrp2BdryFeats allocating feature stream names.";
      goto LABEL_28;
    }
LABEL_7:
    v37 = heap_Alloc(*(_QWORD *)(a1 + 8), 8 * v34);
    *v27 = (uint64_t *)v37;
    if (!v37)
    {
      v46 = " in fExtGetStrGrp2BdryFeats() trying to malloc-ate feature array.";
      goto LABEL_28;
    }
    LeftCounts = getLeftCounts(a1, a5[6], a5[3]);
    **v27 = LeftCounts;
    if (!LeftCounts)
    {
      v46 = " in fExtGetStrGrp2BdryFeats() creating LEFT STRGRP-TO-PHRASE-BDRY counts.";
      goto LABEL_28;
    }
    RightCounts = getRightCounts(a1, a5[6], a5[3]);
    (*v27)[1] = RightCounts;
    if (!RightCounts)
    {
      v46 = " in fExtGetStrGrp2BdryFeats() creating RIGHT STRGRP-TO-PHRASE-BDRY counts.";
      goto LABEL_28;
    }
    v40 = normalizeCounts(a1, **v27, (*v27)[1], a7, v30, v31, v32, v33);
    (*v27)[2] = v40;
    if (!v40)
    {
      v46 = " in fExtGetStrGrp2BdryFeats() creating LEFT STRGRP-TO-PHRASE-BDRY norm-counts.";
      goto LABEL_28;
    }
    v41 = normalizeCounts(a1, (*v27)[1], **v27, a7, v30, v31, v32, v33);
    (*v27)[3] = v41;
    if (!v41)
    {
      v46 = " in fExtGetStrGrp2BdryFeats() creating RIGHT STRGRP-TO-PHRASE-BDRY norm-counts.";
      goto LABEL_28;
    }
    v42 = getLeftCounts(a1, a5[6], a5[7]);
    (*v27)[4] = v42;
    if (!v42)
    {
      v46 = " in fExtGetStrGrp2BdryFeats() creating LEFT STRGRP-TO-SENT-BDRY counts.";
      goto LABEL_28;
    }
    v43 = getRightCounts(a1, a5[6], a5[7]);
    (*v27)[5] = v43;
    if (!v43)
    {
      v46 = " in fExtGetStrGrp2BdryFeats() creating RIGHT STRGRP-TO-SENT-BDRY counts.";
      goto LABEL_28;
    }
    v44 = normalizeCounts(a1, (*v27)[4], (*v27)[5], a7, v30, v31, v32, v33);
    (*v27)[6] = v44;
    if (!v44)
    {
      v46 = " in fExtGetStrGrp2BdryFeats() creating LEFT SYLL-TO-SENT-BDRY norm-counts.";
      goto LABEL_28;
    }
    v45 = normalizeCounts(a1, (*v27)[5], (*v27)[4], a7, v30, v31, v32, v33);
    (*v27)[7] = v45;
    if (!v45)
    {
      v46 = " in fExtGetStrGrp2BdryFeats() creating RIGHT SYLL-TO-SENT-BDRY norm-counts.";
LABEL_28:
      NNFX_logMsg(a1, 0, (uint64_t)v46, v29, v30, v31, v32, v33);
      return 0;
    }
  }
  else
  {
    NNFX_logMsg(a1, 0, (uint64_t)" in fExtGetPhone2BdryFeats() trying to mallocate output.", v22, v23, v24, v25, v26);
  }
  return v27;
}

uint64_t **fExtGetWord2BdryFeats(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t LeftCounts;
  uint64_t RightCounts;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;

  NNFX_logMsg(a1, 3, (uint64_t)"Extracting Word-to-X boundary features...", a4, (uint64_t)a5, a6, a7, a8);
  NNFX_logMsg(a1, 3, (uint64_t)"Num pros words: %d", v11, v12, v13, v14, v15);
  NNFX_logMsg(a1, 3, (uint64_t)"First boundary: %c", v16, v17, v18, v19, v20);
  v21 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 4048);
  v27 = (uint64_t **)v21;
  if (v21)
  {
    *(_DWORD *)(v21 + 4016) = 16;
    *(_DWORD *)(v21 + 4024) = a7;
    v28 = heap_Alloc(*(_QWORD *)(a1 + 8), 128);
    v27[1] = (uint64_t *)v28;
    if (!v28)
    {
      v54 = " in fExtGetWord2BdryFeats() allocating feature names";
      goto LABEL_44;
    }
    *v27[1] = (uint64_t)stringdup(a1, "Word2StxGrpLCtInt");
    v27[1][1] = (uint64_t)stringdup(a1, "Word2StxGrpRCtInt");
    v27[1][2] = (uint64_t)stringdup(a1, "Word2StxGrpLCtFloat");
    v27[1][3] = (uint64_t)stringdup(a1, "Word2StxGrpRCtFloat");
    v27[1][4] = (uint64_t)stringdup(a1, "Word2PhraseLCtInt");
    v27[1][5] = (uint64_t)stringdup(a1, "Word2PhraseRCtInt");
    v27[1][6] = (uint64_t)stringdup(a1, "Word2PhraseLCtFloat");
    v27[1][7] = (uint64_t)stringdup(a1, "Word2PhraseRCtFloat");
    v27[1][8] = (uint64_t)stringdup(a1, "Word2PunctLCtInt");
    v27[1][9] = (uint64_t)stringdup(a1, "Word2PunctRCtInt");
    v27[1][10] = (uint64_t)stringdup(a1, "Word2PunctLCtFloat");
    v27[1][11] = (uint64_t)stringdup(a1, "Word2PunctRCtFloat");
    v27[1][12] = (uint64_t)stringdup(a1, "Word2SentLCtInt");
    v27[1][13] = (uint64_t)stringdup(a1, "Word2SentRCtInt");
    v27[1][14] = (uint64_t)stringdup(a1, "Word2SentLCtFloat");
    v27[1][15] = (uint64_t)stringdup(a1, "Word2SentRCtFloat");
    v34 = *((_DWORD *)v27 + 1004);
    if (v34 >= 1)
    {
      v35 = v27[1];
      v36 = *((unsigned int *)v27 + 1004);
      while (*v35)
      {
        ++v35;
        if (!--v36)
          goto LABEL_7;
      }
      v54 = " in fExtGetWord2BdryFeats allocating feature stream names.";
      goto LABEL_44;
    }
LABEL_7:
    v37 = heap_Alloc(*(_QWORD *)(a1 + 8), 8 * v34);
    *v27 = (uint64_t *)v37;
    if (!v37)
    {
      v54 = " in fExtGetWord2BdryFeats() trying to malloc-ate feature array.";
      goto LABEL_44;
    }
    LeftCounts = getLeftCounts(a1, a5[2], a5[5]);
    **v27 = LeftCounts;
    if (!LeftCounts)
    {
      v54 = " in fExtGetWord2BdryFeats() creating LEFT WORD-TO-SYNTAX-BDRY counts.";
      goto LABEL_44;
    }
    RightCounts = getRightCounts(a1, a5[2], a5[5]);
    (*v27)[1] = RightCounts;
    if (!RightCounts)
    {
      v54 = " in fExtGetWord2BdryFeats() creating RIGHT WORD-TO-SYNTAX-BDRY counts.";
      goto LABEL_44;
    }
    v40 = normalizeCounts(a1, **v27, (*v27)[1], a7, v30, v31, v32, v33);
    (*v27)[2] = v40;
    if (!v40)
    {
      v54 = " in fExtGetWord2BdryFeats() creating LEFT WORD-TO-SYNTAX-BDRY norm-counts.";
      goto LABEL_44;
    }
    v41 = normalizeCounts(a1, (*v27)[1], **v27, a7, v30, v31, v32, v33);
    (*v27)[3] = v41;
    if (!v41)
    {
      v54 = " in fExtGetWord2BdryFeats() creating RIGHT WORD-TO-SYNTAX-BDRY norm-counts.";
      goto LABEL_44;
    }
    v42 = getLeftCounts(a1, a5[2], a5[3]);
    (*v27)[4] = v42;
    if (!v42)
    {
      v54 = " in fExtGetWord2BdryFeats() creating LEFT WORD-TO-PHRASE-BDRY counts.";
      goto LABEL_44;
    }
    v43 = getRightCounts(a1, a5[2], a5[3]);
    (*v27)[5] = v43;
    if (!v43)
    {
      v54 = " in fExtGetWord2BdryFeats() creating RIGHT WORD-TO-PHRASE-BDRY counts.";
      goto LABEL_44;
    }
    v44 = normalizeCounts(a1, (*v27)[4], (*v27)[5], a7, v30, v31, v32, v33);
    (*v27)[6] = v44;
    if (!v44)
    {
      v54 = " in fExtGetWord2BdryFeats() creating LEFT WORD-TO-PHRASE-BDRY norm-counts.";
      goto LABEL_44;
    }
    v45 = normalizeCounts(a1, (*v27)[5], (*v27)[4], a7, v30, v31, v32, v33);
    (*v27)[7] = v45;
    if (!v45)
    {
      v54 = " in fExtGetWord2BdryFeats() creating RIGHT WORD-TO-PHRASE-BDRY norm-counts.";
      goto LABEL_44;
    }
    v46 = getLeftCounts(a1, a5[2], a5[4]);
    (*v27)[8] = v46;
    if (!v46)
    {
      v54 = " in fExtGetWord2BdryFeats() creating LEFT WORD-TO-PUNCT-BDRY counts.";
      goto LABEL_44;
    }
    v47 = getRightCounts(a1, a5[2], a5[4]);
    (*v27)[9] = v47;
    if (!v47)
    {
      v54 = " in fExtGetWord2BdryFeats() creating RIGHT WORD-TO-PUNCT-BDRY counts.";
      goto LABEL_44;
    }
    v48 = normalizeCounts(a1, (*v27)[8], (*v27)[9], a7, v30, v31, v32, v33);
    (*v27)[10] = v48;
    if (!v48)
    {
      v54 = " in fExtGetWord2BdryFeats() creating LEFT WORD-TO-PUNCT-BDRY norm-counts.";
      goto LABEL_44;
    }
    v49 = normalizeCounts(a1, (*v27)[9], (*v27)[8], a7, v30, v31, v32, v33);
    (*v27)[11] = v49;
    if (!v49)
    {
      v54 = " in fExtGetWord2BdryFeats() creating RIGHT WORD-TO-PUNCT-BDRY norm-counts.";
      goto LABEL_44;
    }
    v50 = getLeftCounts(a1, a5[2], a5[7]);
    (*v27)[12] = v50;
    if (!v50)
    {
      v54 = " in fExtGetWord2BdryFeats() creating LEFT WORD-TO-SENT-BDRY counts.";
      goto LABEL_44;
    }
    v51 = getRightCounts(a1, a5[2], a5[7]);
    (*v27)[13] = v51;
    if (!v51)
    {
      v54 = " in fExtGetWord2BdryFeats() creating RIGHT WORD-TO-SENT-BDRY counts.";
      goto LABEL_44;
    }
    v52 = normalizeCounts(a1, (*v27)[12], (*v27)[13], a7, v30, v31, v32, v33);
    (*v27)[14] = v52;
    if (!v52)
    {
      v54 = " in fExtGetWord2BdryFeats() creating LEFT WORD-TO-SENT-BDRY norm-counts.";
      goto LABEL_44;
    }
    v53 = normalizeCounts(a1, (*v27)[13], (*v27)[12], a7, v30, v31, v32, v33);
    (*v27)[15] = v53;
    if (!v53)
    {
      v54 = " in fExtGetWord2BdryFeats() creating RIGHT WORD-TO-SENT-BDRY norm-counts.";
LABEL_44:
      NNFX_logMsg(a1, 0, (uint64_t)v54, v29, v30, v31, v32, v33);
      return 0;
    }
  }
  else
  {
    NNFX_logMsg(a1, 0, (uint64_t)" in fExtGetWord2BdryFeats() trying to mallocate output.", v22, v23, v24, v25, v26);
  }
  return v27;
}

uint64_t **fExtGetParse2BdryFeats(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t LeftCounts;
  uint64_t RightCounts;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;

  NNFX_logMsg(a1, 3, (uint64_t)"Extracting Syntax-Group-to-X boundary features...", a4, (uint64_t)a5, a6, a7, a8);
  NNFX_logMsg(a1, 3, (uint64_t)"Num pros words: %d", v11, v12, v13, v14, v15);
  NNFX_logMsg(a1, 3, (uint64_t)"First boundary: %c", v16, v17, v18, v19, v20);
  v21 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 4048);
  v27 = (uint64_t **)v21;
  if (v21)
  {
    *(_DWORD *)(v21 + 4016) = 12;
    *(_DWORD *)(v21 + 4024) = a7;
    v28 = heap_Alloc(*(_QWORD *)(a1 + 8), 96);
    v27[1] = (uint64_t *)v28;
    if (!v28)
    {
      v50 = " in fExtGetParse2BdryFeats() allocating feature names";
      goto LABEL_36;
    }
    *v27[1] = (uint64_t)stringdup(a1, "StxGrp2PhraseLCtInt");
    v27[1][1] = (uint64_t)stringdup(a1, "StxGrp2PhraseRCtInt");
    v27[1][2] = (uint64_t)stringdup(a1, "StxGrp2PhraseLCtFloat");
    v27[1][3] = (uint64_t)stringdup(a1, "StxGrp2PhraseRCtFloat");
    v27[1][4] = (uint64_t)stringdup(a1, "StxGrp2PunctLCtInt");
    v27[1][5] = (uint64_t)stringdup(a1, "StxGrp2PunctRCtInt");
    v27[1][6] = (uint64_t)stringdup(a1, "StxGrp2PunctLCtFloat");
    v27[1][7] = (uint64_t)stringdup(a1, "StxGrp2PunctRCtFloat");
    v27[1][8] = (uint64_t)stringdup(a1, "StxGrp2SentLCtInt");
    v27[1][9] = (uint64_t)stringdup(a1, "StxGrp2SentRCtInt");
    v27[1][10] = (uint64_t)stringdup(a1, "StxGrp2SentLCtFloat");
    v27[1][11] = (uint64_t)stringdup(a1, "StxGrp2SentRCtFloat");
    v34 = *((_DWORD *)v27 + 1004);
    if (v34 >= 1)
    {
      v35 = v27[1];
      v36 = *((unsigned int *)v27 + 1004);
      while (*v35)
      {
        ++v35;
        if (!--v36)
          goto LABEL_7;
      }
      v50 = " in fExtGetParse2BdryFeats allocating feature stream names.";
      goto LABEL_36;
    }
LABEL_7:
    v37 = heap_Alloc(*(_QWORD *)(a1 + 8), 8 * v34);
    *v27 = (uint64_t *)v37;
    if (!v37)
    {
      v50 = " in fExtGetParse2BdryFeats() trying to malloc-ate feature array.";
      goto LABEL_36;
    }
    LeftCounts = getLeftCounts(a1, a5[5], a5[3]);
    **v27 = LeftCounts;
    if (!LeftCounts)
    {
      v50 = " in fExtGetParse2BdryFeats() creating LEFT PARSE-NODE-TO-PHRASE-BDRY counts.";
      goto LABEL_36;
    }
    RightCounts = getRightCounts(a1, a5[5], a5[3]);
    (*v27)[1] = RightCounts;
    if (!RightCounts)
    {
      v50 = " in fExtGetParse2BdryFeats() creating RIGHT PARSE-NODE-TO-PHRASE-BDRY counts.";
      goto LABEL_36;
    }
    v40 = normalizeCounts(a1, **v27, (*v27)[1], a7, v30, v31, v32, v33);
    (*v27)[2] = v40;
    if (!v40)
    {
      v50 = " in fExtGetParse2BdryFeats() creating LEFT PARSE-NODE-TO-PHRASE-BDRY norm-counts.";
      goto LABEL_36;
    }
    v41 = normalizeCounts(a1, (*v27)[1], **v27, a7, v30, v31, v32, v33);
    (*v27)[3] = v41;
    if (!v41)
    {
      v50 = " in fExtGetParse2BdryFeats() creating RIGHT PARSE-NODE-TO-PHRASE-BDRY norm-counts.";
      goto LABEL_36;
    }
    v42 = getLeftCounts(a1, a5[5], a5[4]);
    (*v27)[4] = v42;
    if (!v42)
    {
      v50 = " in fExtGetParse2BdryFeats() creating LEFT PARSE-NODE-TO-PUNCT-BDRY counts.";
      goto LABEL_36;
    }
    v43 = getRightCounts(a1, a5[5], a5[4]);
    (*v27)[5] = v43;
    if (!v43)
    {
      v50 = " in fExtGetParse2BdryFeats() creating RIGHT PARSE-NODE-TO-PUNCT-BDRY counts.";
      goto LABEL_36;
    }
    v44 = normalizeCounts(a1, (*v27)[4], (*v27)[5], a7, v30, v31, v32, v33);
    (*v27)[6] = v44;
    if (!v44)
    {
      v50 = " in fExtGetParse2BdryFeats() creating LEFT PARSE-NODE-TO-PUNCT-BDRY norm-counts.";
      goto LABEL_36;
    }
    v45 = normalizeCounts(a1, (*v27)[5], (*v27)[4], a7, v30, v31, v32, v33);
    (*v27)[7] = v45;
    if (!v45)
    {
      v50 = " in fExtGetParse2BdryFeats() creating RIGHT PARSE-NODE-TO-PUNCT-BDRY norm-counts.";
      goto LABEL_36;
    }
    v46 = getLeftCounts(a1, a5[5], a5[7]);
    (*v27)[8] = v46;
    if (!v46)
    {
      v50 = " in fExtGetParse2BdryFeats() creating LEFT PARSE-NODE-TO-SENT-BDRY counts.";
      goto LABEL_36;
    }
    v47 = getRightCounts(a1, a5[5], a5[7]);
    (*v27)[9] = v47;
    if (!v47)
    {
      v50 = " in fExtGetParse2BdryFeats() creating RIGHT PARSE-NODE-TO-SENT-BDRY counts.";
      goto LABEL_36;
    }
    v48 = normalizeCounts(a1, (*v27)[8], (*v27)[9], a7, v30, v31, v32, v33);
    (*v27)[10] = v48;
    if (!v48)
    {
      v50 = " in fExtGetParse2BdryFeats() creating LEFT PARSE-NODE-TO-SENT-BDRY norm-counts.";
      goto LABEL_36;
    }
    v49 = normalizeCounts(a1, (*v27)[9], (*v27)[8], a7, v30, v31, v32, v33);
    (*v27)[11] = v49;
    if (!v49)
    {
      v50 = " in fExtGetParse2BdryFeats() creating RIGHT PARSE-NODE-TO-SENT-BDRY norm-counts.";
LABEL_36:
      NNFX_logMsg(a1, 0, (uint64_t)v50, v29, v30, v31, v32, v33);
      return 0;
    }
  }
  else
  {
    NNFX_logMsg(a1, 0, (uint64_t)" in fExtGetParse2BdryFeats() trying to mallocate output.", v22, v23, v24, v25, v26);
  }
  return v27;
}

uint64_t **fExtGetPhrase2BdryFeats(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t LeftCounts;
  uint64_t RightCounts;
  uint64_t v40;
  uint64_t v41;
  const char *v42;

  NNFX_logMsg(a1, 3, (uint64_t)"Extracting Phrase-to-X boundary features...", a4, a5, a6, a7, a8);
  NNFX_logMsg(a1, 3, (uint64_t)"Num pros words: %d", v11, v12, v13, v14, v15);
  NNFX_logMsg(a1, 3, (uint64_t)"First boundary: %c", v16, v17, v18, v19, v20);
  v21 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 4048);
  v27 = (uint64_t **)v21;
  if (v21)
  {
    *(_DWORD *)(v21 + 4016) = 4;
    *(_DWORD *)(v21 + 4024) = a7;
    v28 = heap_Alloc(*(_QWORD *)(a1 + 8), 32);
    v27[1] = (uint64_t *)v28;
    if (!v28)
    {
      v42 = " in fExtGetPhrase2BdryFeats() allocating feature names";
      goto LABEL_20;
    }
    *v27[1] = (uint64_t)stringdup(a1, "Phrase2SentLCtInt");
    v27[1][1] = (uint64_t)stringdup(a1, "Phrase2SentRCtInt");
    v27[1][2] = (uint64_t)stringdup(a1, "Phrase2SentLCtFloat");
    v27[1][3] = (uint64_t)stringdup(a1, "Phrase2SentRCtFloat");
    v34 = *((_DWORD *)v27 + 1004);
    if (v34 >= 1)
    {
      v35 = v27[1];
      v36 = *((unsigned int *)v27 + 1004);
      while (*v35)
      {
        ++v35;
        if (!--v36)
          goto LABEL_7;
      }
      v42 = " in fExtGetPhrase2BdryFeats allocating feature stream names.";
      goto LABEL_20;
    }
LABEL_7:
    v37 = heap_Alloc(*(_QWORD *)(a1 + 8), 8 * v34);
    *v27 = (uint64_t *)v37;
    if (!v37)
    {
      v42 = " in fExtGetPhrase2BdryFeats() trying to malloc-ate feature array.";
      goto LABEL_20;
    }
    LeftCounts = getLeftCounts(a1, *(unsigned int **)(a5 + 24), *(_DWORD **)(a5 + 56));
    **v27 = LeftCounts;
    if (!LeftCounts)
    {
      v42 = " in fExtGetPhrase2BdryFeats() creating LEFT PHRASE-NODE-TO-SENT-BDRY counts.";
      goto LABEL_20;
    }
    RightCounts = getRightCounts(a1, *(unsigned int **)(a5 + 24), *(unsigned int **)(a5 + 56));
    (*v27)[1] = RightCounts;
    if (!RightCounts)
    {
      v42 = " in fExtGetPhrase2BdryFeats() creating RIGHT PHRASE-NODE-TO-SENT-BDRY counts.";
      goto LABEL_20;
    }
    v40 = normalizeCounts(a1, **v27, (*v27)[1], a7, v30, v31, v32, v33);
    (*v27)[2] = v40;
    if (!v40)
    {
      v42 = " in fExtGetPhrase2BdryFeats() creating LEFT PHRASE-NODE-TO-SENT-BDRY norm-counts.";
      goto LABEL_20;
    }
    v41 = normalizeCounts(a1, (*v27)[1], **v27, a7, v30, v31, v32, v33);
    (*v27)[3] = v41;
    if (!v41)
    {
      v42 = " in fExtGetPhrase2BdryFeats() creating RIGHT PHRASE-NODE-TO-SENT-BDRY norm-counts.";
LABEL_20:
      NNFX_logMsg(a1, 0, (uint64_t)v42, v29, v30, v31, v32, v33);
      return 0;
    }
  }
  else
  {
    NNFX_logMsg(a1, 0, (uint64_t)" in fExtGetParse2BdryFeats() trying to mallocate output.", v22, v23, v24, v25, v26);
  }
  return v27;
}

uint64_t **fExtGetPunct2BdryFeats(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t LeftCounts;
  uint64_t RightCounts;
  uint64_t v40;
  uint64_t v41;
  const char *v42;

  NNFX_logMsg(a1, 3, (uint64_t)"Extracting Punctuation-to-X boundary features...", a4, a5, a6, a7, a8);
  NNFX_logMsg(a1, 3, (uint64_t)"Num pros words: %d", v11, v12, v13, v14, v15);
  NNFX_logMsg(a1, 3, (uint64_t)"First boundary: %c", v16, v17, v18, v19, v20);
  v21 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 4048);
  v27 = (uint64_t **)v21;
  if (v21)
  {
    *(_DWORD *)(v21 + 4016) = 4;
    *(_DWORD *)(v21 + 4024) = a7;
    v28 = heap_Alloc(*(_QWORD *)(a1 + 8), 32);
    v27[1] = (uint64_t *)v28;
    if (!v28)
    {
      v42 = " in fExtGetLexicalFeats() allocating feature names";
      goto LABEL_20;
    }
    *v27[1] = (uint64_t)stringdup(a1, "Punct2SentLCtInt");
    v27[1][1] = (uint64_t)stringdup(a1, "Punct2SentRCtInt");
    v27[1][2] = (uint64_t)stringdup(a1, "Punct2SentLCtFloat");
    v27[1][3] = (uint64_t)stringdup(a1, "Punct2SentRCtFloat");
    v34 = *((_DWORD *)v27 + 1004);
    if (v34 >= 1)
    {
      v35 = v27[1];
      v36 = *((unsigned int *)v27 + 1004);
      while (*v35)
      {
        ++v35;
        if (!--v36)
          goto LABEL_7;
      }
      v42 = " in fExtGetPunct2BdryFeats allocating feature stream names.";
      goto LABEL_20;
    }
LABEL_7:
    v37 = heap_Alloc(*(_QWORD *)(a1 + 8), 8 * v34);
    *v27 = (uint64_t *)v37;
    if (!v37)
    {
      v42 = " in fExtGetLexicalFeats() trying to malloc-ate feature array.";
      goto LABEL_20;
    }
    LeftCounts = getLeftCounts(a1, *(unsigned int **)(a5 + 32), *(_DWORD **)(a5 + 56));
    **v27 = LeftCounts;
    if (!LeftCounts)
    {
      v42 = " in fExtGetPunct2BdryFeats creating LEFT PUNCT-NODE-TO-SENT-BDRY counts.";
      goto LABEL_20;
    }
    RightCounts = getRightCounts(a1, *(unsigned int **)(a5 + 32), *(unsigned int **)(a5 + 56));
    (*v27)[1] = RightCounts;
    if (!RightCounts)
    {
      v42 = " in fExtGetPunct2BdryFeats creating RIGHT PUNCT-NODE-TO-SENT-BDRY counts.";
      goto LABEL_20;
    }
    v40 = normalizeCounts(a1, **v27, (*v27)[1], a7, v30, v31, v32, v33);
    (*v27)[2] = v40;
    if (!v40)
    {
      v42 = " in fExtGetPunct2BdryFeats creating LEFT PUNCT-NODE-TO-SENT-BDRY norm-counts.";
      goto LABEL_20;
    }
    v41 = normalizeCounts(a1, (*v27)[1], **v27, a7, v30, v31, v32, v33);
    (*v27)[3] = v41;
    if (!v41)
    {
      v42 = " in fExtGetPunct2BdryFeats creating RIGHT PUNCT-NODE-TO-SENT-BDRY norm-counts.";
LABEL_20:
      NNFX_logMsg(a1, 0, (uint64_t)v42, v29, v30, v31, v32, v33);
      return 0;
    }
  }
  else
  {
    NNFX_logMsg(a1, 0, (uint64_t)" in fExtGetPunct2BdryFeats() trying to mallocate output.", v22, v23, v24, v25, v26);
  }
  return v27;
}

uint64_t **fExtGetVPhone2BdryFeats(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **result;
  uint64_t *v9;
  _BYTE *v10;

  result = fExtGetPhone2BdryFeats__(a1, a4, a5, a6, a7, PhoneTierIsVoiced, a7, a8);
  if (result && *((int *)result + 1004) >= 1)
  {
    v9 = result[1];
    do
    {
      v10 = (_BYTE *)*v9++;
      *v10 = 86;
    }
    while (v9 < &result[1][*((int *)result + 1004)]);
  }
  return result;
}

uint64_t mergePhoneFeaturesAtStateLevel(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v9;
  unsigned int v10;
  uint64_t v13;
  uint64_t i;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v42;
  int v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  uint64_t j;
  int k;
  int v57;

  if (a4 > 9)
  {
    v9 = " in mergePhoneFeaturesAtStateLevel(). More than 9 states per phone  used";
    goto LABEL_39;
  }
  v10 = a4;
  v13 = *(unsigned int *)(*a2 + 4024);
  if (a3 >= 2)
  {
    for (i = 1; i != a3; ++i)
    {
      if (*(_DWORD *)(a2[i] + 4024) != (_DWORD)v13)
      {
        v9 = " in mergePhoneFeaturesAtStateLevel(). Record 0 of length %d cannot be merged with record %d of length %d";
        goto LABEL_39;
      }
    }
  }
  if (a3)
  {
    v15 = 0;
    v16 = a3;
    v17 = a2;
    do
    {
      v18 = *v17++;
      v15 += *(_DWORD *)(v18 + 4016);
      --v16;
    }
    while (v16);
    v19 = v15 + 1;
  }
  else
  {
    v19 = 1;
  }
  v20 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 4048);
  v26 = v20;
  if (v20)
  {
    *(_DWORD *)(v20 + 4016) = v19;
    *(_DWORD *)(v20 + 4024) = v13 * v10;
    if (v19
      && ((v27 = heap_Calloc(*(_QWORD **)(a1 + 8), v19, 8), (*(_QWORD *)(v26 + 8) = v27) == 0)
       || (v28 = heap_Calloc(*(_QWORD **)(a1 + 8), *(int *)(v26 + 4016), 4), (*(_QWORD *)(v26 + 4040) = v28) == 0))
      || (**(_QWORD **)(v26 + 8) = stringdup(a1, "StateID")) == 0)
    {
      v9 = " in mergePhoneFeaturesAtStateLevel() allocating feature names";
      goto LABEL_39;
    }
    if (a3)
    {
      v29 = 0;
      v30 = 1;
      do
      {
        v31 = a2[v29];
        v32 = *(_DWORD *)(v31 + 4016);
        if (*(_QWORD *)(v31 + 4040))
        {
          if (v32)
            goto LABEL_21;
        }
        else if (v32)
        {
          v37 = heap_Calloc(*(_QWORD **)(a1 + 8), v32, 4);
          *(_QWORD *)(a2[v29] + 4040) = v37;
          if (!v37)
          {
            v9 = " in mergePhoneFeaturesAtStateLevel() allocating array";
            goto LABEL_39;
          }
          v31 = a2[v29];
          if (*(_DWORD *)(v31 + 4016))
          {
            v38 = 0;
            v39 = *(_QWORD *)(v31 + 4040);
            do
            {
              *(_DWORD *)(v39 + 4 * v38++) = 1;
              v40 = *(unsigned int *)(v31 + 4016);
            }
            while (v38 < v40);
            if ((_DWORD)v40)
            {
LABEL_21:
              v33 = 0;
              do
              {
                v34 = (v30 + v33);
                *(_QWORD *)(*(_QWORD *)(v26 + 8) + 8 * v34) = *(_QWORD *)(*(_QWORD *)(v31 + 8) + 8 * v33);
                v31 = a2[v29];
                v35 = *(_QWORD *)(v31 + 4040);
                if (v35)
                  v36 = *(_DWORD *)(v35 + 4 * v33);
                else
                  v36 = 1;
                *(_DWORD *)(*(_QWORD *)(v26 + 4040) + 4 * v34) = v36;
                *(_DWORD *)(v35 + 4 * v33++) = 0;
              }
              while (v33 < *(unsigned int *)(v31 + 4016));
              v30 += v33;
            }
          }
        }
        ++v29;
      }
      while (v29 != a3);
    }
    if (allocpppFeats(a1, (uint64_t *)v26, *(_DWORD *)(v26 + 4016), *(_DWORD *)(v26 + 4024)))
    {
      v9 = " in mergePhoneFeatures() trying to malloc-ate output.";
      goto LABEL_39;
    }
    if ((_DWORD)v13)
    {
      v42 = 0;
      v43 = 0;
      while (1)
      {
        v57 = v43;
        if (v10)
          break;
        v49 = v42;
LABEL_50:
        v43 = v57 + 1;
        v42 = v49;
        if (v57 + 1 == (_DWORD)v13)
          goto LABEL_51;
      }
      v44 = v10;
      v45 = "S01";
      while (1)
      {
        v46 = heap_Alloc(*(_QWORD *)(a1 + 8), 16);
        if (!v46)
          break;
        v47 = (_QWORD *)v46;
        *(_DWORD *)(v46 + 8) = 3;
        v48 = (char *)heap_Alloc(*(_QWORD *)(a1 + 8), 5);
        *v47 = v48;
        if (!v48)
          break;
        strcpy(v48, v45);
        v49 = (v42 + 1);
        *(_QWORD *)(**(_QWORD **)v26 + 8 * v42) = v47;
        v45 += 5;
        LODWORD(v42) = v42 + 1;
        if (!--v44)
          goto LABEL_50;
      }
      v9 = " in mergePhoneFeatures() while allocating mem for stream state ID.";
LABEL_39:
      NNFX_logMsg(a1, 0, (uint64_t)v9, a4, a5, a6, a7, a8);
      return 0;
    }
    else
    {
LABEL_51:
      if (a3)
      {
        v50 = 0;
        v51 = 1;
        do
        {
          v52 = a2[v50];
          if (*(_DWORD *)(v52 + 4016))
          {
            v53 = 0;
            do
            {
              if ((_DWORD)v13)
              {
                v54 = 0;
                for (j = 0; j != v13; ++j)
                {
                  if (v10)
                  {
                    for (k = 0; k != v10; ++k)
                      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v26 + 8 * v51) + 8 * (v54 + k)) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2[v50] + 8 * v53) + 8 * j);
                  }
                  v54 += v10;
                }
                v52 = a2[v50];
              }
              ++v51;
              ++v53;
            }
            while (v53 < *(unsigned int *)(v52 + 4016));
          }
          ++v50;
        }
        while (v50 != a3);
      }
    }
  }
  else
  {
    NNFX_logMsg(a1, 0, (uint64_t)" in mergePhoneFeaturesAtStateLevel() trying to mallocate output.", v21, v22, v23, v24, v25);
  }
  return v26;
}

_QWORD *freepPhoneTiers(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  if (v4)
  {
    freepTier(a1, v4);
    *a2 = 0;
  }
  v5 = a2[1];
  if (v5)
  {
    freepTier(a1, v5);
    a2[1] = 0;
  }
  v6 = a2[2];
  if (v6)
  {
    freepTier(a1, v6);
    a2[2] = 0;
  }
  v7 = a2[3];
  if (v7)
  {
    freepTier(a1, v7);
    a2[3] = 0;
  }
  v8 = a2[4];
  if (v8)
  {
    freepTier(a1, v8);
    a2[4] = 0;
  }
  v9 = a2[5];
  if (v9)
  {
    freepTier(a1, v9);
    a2[5] = 0;
  }
  v10 = a2[6];
  if (v10)
  {
    freepTier(a1, v10);
    a2[6] = 0;
  }
  v11 = a2[7];
  if (v11)
  {
    freepTier(a1, v11);
    a2[7] = 0;
  }
  v12 = a2[8];
  if (v12)
  {
    freepTier(a1, v12);
    a2[8] = 0;
  }
  return heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)a2);
}

BOOL check_phn_class(uint64_t a1, int a2, int __c)
{
  char **v3;

  if (a2 == -1)
    return 0;
  v3 = *(char ***)(a1 + 16 * a2 + 8);
  return v3 && strchr(*v3, __c) != 0;
}

uint64_t check_lex_feat(uint64_t a1, char *__s1, int a3)
{
  uint64_t v3;
  uint64_t i;
  const char *v6;

  if (a3 == -1)
    return 0;
  v3 = *(_QWORD *)(a1 + 16 * a3 + 8);
  if (v3)
  {
    for (i = 0; i != 4000; i += 8)
    {
      v6 = *(const char **)(v3 + i);
      if (!v6)
        break;
      if (!strcmp(__s1, v6))
        return 1;
    }
  }
  return 0;
}

uint64_t **fExtGetPhone2BdryFeats__(uint64_t a1, uint64_t a2, unsigned int **a3, uint64_t a4, uint64_t a5, BOOL (*a6)(int a1), uint64_t a7, uint64_t a8)
{
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t LeftCounts;
  uint64_t RightCounts;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;

  v12 = *a3;
  NNFX_logMsg(a1, 3, (uint64_t)"Extracting %s-to-X boundary features", a4, a5, (uint64_t)a6, a7, a8);
  NNFX_logMsg(a1, 3, (uint64_t)"Num pros words: %d", v13, v14, v15, v16, v17);
  NNFX_logMsg(a1, 3, (uint64_t)"First boundary: %c", v18, v19, v20, v21, v22);
  v23 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 4048);
  v29 = (uint64_t **)v23;
  if (v23)
  {
    *(_DWORD *)(v23 + 4016) = 28;
    *(_DWORD *)(v23 + 4024) = a5;
    v30 = heap_Alloc(*(_QWORD *)(a1 + 8), 224);
    v29[1] = (uint64_t *)v30;
    if (!v30)
    {
      v68 = " in fExtGetPhone2BdryFeats() allocating feature names";
      goto LABEL_68;
    }
    *v29[1] = (uint64_t)stringdup(a1, "Phone2SyllLCtInt");
    v29[1][1] = (uint64_t)stringdup(a1, "Phone2SyllRCtInt");
    v29[1][2] = (uint64_t)stringdup(a1, "Phone2SyllLCtFloat");
    v29[1][3] = (uint64_t)stringdup(a1, "Phone2SyllRCtFloat");
    v29[1][4] = (uint64_t)stringdup(a1, "Phone2StrGrpLCtInt");
    v29[1][5] = (uint64_t)stringdup(a1, "Phone2StrGrpRCtInt");
    v29[1][6] = (uint64_t)stringdup(a1, "Phone2StrGrpLCtFloat");
    v29[1][7] = (uint64_t)stringdup(a1, "Phone2StrGrpRCtFloat");
    v29[1][8] = (uint64_t)stringdup(a1, "Phone2WordLCtInt");
    v29[1][9] = (uint64_t)stringdup(a1, "Phone2WordRCtInt");
    v29[1][10] = (uint64_t)stringdup(a1, "Phone2WordLCtFloat");
    v29[1][11] = (uint64_t)stringdup(a1, "Phone2WordRCtFloat");
    v29[1][12] = (uint64_t)stringdup(a1, "Phone2StxGrpLCtInt");
    v29[1][13] = (uint64_t)stringdup(a1, "Phone2StxGrpRCtInt");
    v29[1][14] = (uint64_t)stringdup(a1, "Phone2StxGrpLCtFloat");
    v29[1][15] = (uint64_t)stringdup(a1, "Phone2StxGrpRCtFloat");
    v29[1][16] = (uint64_t)stringdup(a1, "Phone2PhraseLCtInt");
    v29[1][17] = (uint64_t)stringdup(a1, "Phone2PhraseRCtInt");
    v29[1][18] = (uint64_t)stringdup(a1, "Phone2PhraseLCtFloat");
    v29[1][19] = (uint64_t)stringdup(a1, "Phone2PhraseRCtFloat");
    v29[1][20] = (uint64_t)stringdup(a1, "Phone2PunctLCtInt");
    v29[1][21] = (uint64_t)stringdup(a1, "Phone2PunctRCtInt");
    v29[1][22] = (uint64_t)stringdup(a1, "Phone2PunctLCtFloat");
    v29[1][23] = (uint64_t)stringdup(a1, "Phone2PunctRCtFloat");
    v29[1][24] = (uint64_t)stringdup(a1, "Phone2SentLCtInt");
    v29[1][25] = (uint64_t)stringdup(a1, "Phone2SentRCtInt");
    v29[1][26] = (uint64_t)stringdup(a1, "Phone2SentLCtFloat");
    v29[1][27] = (uint64_t)stringdup(a1, "Phone2SentRCtFloat");
    v36 = *((_DWORD *)v29 + 1004);
    if (v36 >= 1)
    {
      v37 = v29[1];
      v38 = *((unsigned int *)v29 + 1004);
      while (*v37)
      {
        ++v37;
        if (!--v38)
          goto LABEL_7;
      }
      v68 = " in fExtGetPhone2BdryFeats__ allocating feature stream names.";
      goto LABEL_68;
    }
LABEL_7:
    v39 = heap_Alloc(*(_QWORD *)(a1 + 8), 8 * v36);
    *v29 = (uint64_t *)v39;
    if (!v39)
    {
      v68 = " in fExtGetPhone2BdryFeats() trying to malloc-ate feature array.";
      goto LABEL_68;
    }
    LeftCounts = getLeftCounts_(a1, v12, a3[1], a6);
    **v29 = LeftCounts;
    if (!LeftCounts)
    {
      v68 = " in fExtGetPhone2BdryFeats() creating LEFT PHONE-TO-SYLL-BDRY counts.";
      goto LABEL_68;
    }
    RightCounts = getRightCounts_(a1, v12, a3[1], a6);
    (*v29)[1] = RightCounts;
    if (!RightCounts)
    {
      v68 = " in fExtGetPhone2BdryFeats() creating RIGHT PHONE-TO-SYLL-BDRY     counts.";
      goto LABEL_68;
    }
    v42 = normalizeCounts(a1, **v29, (*v29)[1], a5, v32, v33, v34, v35);
    (*v29)[2] = v42;
    if (!v42)
    {
      v68 = " in fExtGetPhone2BdryFeats() creating LEFT PHONE-TO-SYLL-BDRY norm-counts.";
      goto LABEL_68;
    }
    v43 = normalizeCounts(a1, (*v29)[1], **v29, a5, v32, v33, v34, v35);
    (*v29)[3] = v43;
    if (!v43)
    {
      v68 = " in fExtGetPhone2BdryFeats() creating RIGHT PHONE-TO-SYLL-BDRY norm-counts.";
      goto LABEL_68;
    }
    v44 = getLeftCounts_(a1, v12, a3[6], a6);
    (*v29)[4] = v44;
    if (!v44)
    {
      v68 = " in fExtGetPhone2BdryFeats() creating LEFT PHONE-TO-STRGRP-BDRY counts.";
      goto LABEL_68;
    }
    v45 = getRightCounts_(a1, v12, a3[6], a6);
    (*v29)[5] = v45;
    if (!v45)
    {
      v68 = " in fExtGetPhone2BdryFeats() creating RIGHT PHONE-TO-STRGRP-BDRY counts.";
      goto LABEL_68;
    }
    v46 = normalizeCounts(a1, (*v29)[4], (*v29)[5], a5, v32, v33, v34, v35);
    (*v29)[6] = v46;
    if (!v46)
    {
      v68 = " in fExtGetPhone2BdryFeats() creating LEFT PHONE-TO-STRGRP-BDRY norm-counts.";
      goto LABEL_68;
    }
    v47 = normalizeCounts(a1, (*v29)[5], (*v29)[4], a5, v32, v33, v34, v35);
    (*v29)[7] = v47;
    if (!v47)
    {
      v68 = " in fExtGetPhone2BdryFeats() creating RIGHT PHONE-TO-STRGRP-BDRY norm-counts.";
      goto LABEL_68;
    }
    v48 = getLeftCounts_(a1, v12, a3[2], a6);
    (*v29)[8] = v48;
    if (!v48)
    {
      v68 = " in fExtGetPhone2BdryFeats() creating LEFT PHONE-TO-WORD-BDRY counts.";
      goto LABEL_68;
    }
    v49 = getRightCounts_(a1, v12, a3[2], a6);
    (*v29)[9] = v49;
    if (!v49)
    {
      v68 = " in fExtGetPhone2BdryFeats() creating RIGHT PHONE-TO-WORD-BDRY counts.";
      goto LABEL_68;
    }
    v50 = normalizeCounts(a1, (*v29)[8], (*v29)[9], a5, v32, v33, v34, v35);
    (*v29)[10] = v50;
    if (!v50)
    {
      v68 = " in fExtGetPhone2BdryFeats() creating LEFT PHONE-TO-WORD-BDRY norm-counts.";
      goto LABEL_68;
    }
    v51 = normalizeCounts(a1, (*v29)[9], (*v29)[8], a5, v32, v33, v34, v35);
    (*v29)[11] = v51;
    if (!v51)
    {
      v68 = " in fExtGetPhone2BdryFeats() creating RIGHT PHONE-TO-WORD-BDRY norm-counts.";
      goto LABEL_68;
    }
    v52 = getLeftCounts_(a1, v12, a3[5], a6);
    (*v29)[12] = v52;
    if (!v52)
    {
      v68 = " in fExtGetPhone2BdryFeats() creating LEFT PHONE-TO-SYNTAX-BDRY counts.";
      goto LABEL_68;
    }
    v53 = getRightCounts_(a1, v12, a3[5], a6);
    (*v29)[13] = v53;
    if (!v53)
    {
      v68 = " in fExtGetPhone2BdryFeats() creating RIGHT PHONE-TO-SYNTAX-BDRY counts.";
      goto LABEL_68;
    }
    v54 = normalizeCounts(a1, (*v29)[12], (*v29)[13], a5, v32, v33, v34, v35);
    (*v29)[14] = v54;
    if (!v54)
    {
      v68 = " in fExtGetPhone2BdryFeats() creating LEFT PHONE-TO-SYNTAX-BDRY norm-counts.";
      goto LABEL_68;
    }
    v55 = normalizeCounts(a1, (*v29)[13], (*v29)[12], a5, v32, v33, v34, v35);
    (*v29)[15] = v55;
    if (!v55)
    {
      v68 = " in fExtGetPhone2BdryFeats() creating RIGHT PHONE-TO-SYNTAX-BDRY norm-counts.";
      goto LABEL_68;
    }
    v56 = getLeftCounts_(a1, v12, a3[3], a6);
    (*v29)[16] = v56;
    if (!v56)
    {
      v68 = " in fExtGetPhone2BdryFeats() creating LEFT PHONE-TO-PHRASE-BDRY counts.";
      goto LABEL_68;
    }
    v57 = getRightCounts_(a1, v12, a3[3], a6);
    (*v29)[17] = v57;
    if (!v57)
    {
      v68 = " in fExtGetPhone2BdryFeats() creating RIGHT PHONE-TO-PHRASE-BDRY counts.";
      goto LABEL_68;
    }
    v58 = normalizeCounts(a1, (*v29)[16], (*v29)[17], a5, v32, v33, v34, v35);
    (*v29)[18] = v58;
    if (!v58)
    {
      v68 = " in fExtGetPhone2BdryFeats() creating LEFT PHONE-TO-PHRASE-BDRY norm-counts.";
      goto LABEL_68;
    }
    v59 = normalizeCounts(a1, (*v29)[17], (*v29)[16], a5, v32, v33, v34, v35);
    (*v29)[19] = v59;
    if (!v59)
    {
      v68 = " in fExtGetPhone2BdryFeats() creating RIGHT PHONE-TO-PHRASE-BDRY norm-counts.";
      goto LABEL_68;
    }
    v60 = getLeftCounts_(a1, v12, a3[4], a6);
    (*v29)[20] = v60;
    if (!v60)
    {
      v68 = " in fExtGetPhone2BdryFeats() creating LEFT PHONE-TO-PUNCT-BDRY counts.";
      goto LABEL_68;
    }
    v61 = getRightCounts_(a1, v12, a3[4], a6);
    (*v29)[21] = v61;
    if (!v61)
    {
      v68 = " in fExtGetPhone2BdryFeats() creating RIGHT PHONE-TO-PUNCT-BDRY counts.";
      goto LABEL_68;
    }
    v62 = normalizeCounts(a1, (*v29)[20], (*v29)[21], a5, v32, v33, v34, v35);
    (*v29)[22] = v62;
    if (!v62)
    {
      v68 = " in fExtGetPhone2BdryFeats() creating LEFT PHONE-TO-PUNCT-BDRY norm-counts.";
      goto LABEL_68;
    }
    v63 = normalizeCounts(a1, (*v29)[21], (*v29)[20], a5, v32, v33, v34, v35);
    (*v29)[23] = v63;
    if (!v63)
    {
      v68 = " in fExtGetPhone2BdryFeats() creating RIGHT PHONE-TO-PUNCT-BDRY norm-counts.";
      goto LABEL_68;
    }
    v64 = getLeftCounts_(a1, v12, a3[7], a6);
    (*v29)[24] = v64;
    if (!v64)
    {
      v68 = " in fExtGetPhone2BdryFeats() creating LEFT PHONE-TO-SENT-BDRY counts.";
      goto LABEL_68;
    }
    v65 = getRightCounts_(a1, v12, a3[7], a6);
    (*v29)[25] = v65;
    if (!v65)
    {
      v68 = " in fExtGetPhone2BdryFeats() creating RIGHT PHONE-TO-SENT-BDRY counts.";
      goto LABEL_68;
    }
    v66 = normalizeCounts(a1, (*v29)[24], (*v29)[25], a5, v32, v33, v34, v35);
    (*v29)[26] = v66;
    if (!v66)
    {
      v68 = " in fExtGetPhone2BdryFeats() creating LEFT PHONE-TO-SENT-BDRY norm-counts.";
      goto LABEL_68;
    }
    v67 = normalizeCounts(a1, (*v29)[25], (*v29)[24], a5, v32, v33, v34, v35);
    (*v29)[27] = v67;
    if (!v67)
    {
      v68 = " in fExtGetPhone2BdryFeats() creating RIGHT PHONE-TO-SENT-BDRY norm-counts.";
LABEL_68:
      NNFX_logMsg(a1, 0, (uint64_t)v68, v31, v32, v33, v34, v35);
      return 0;
    }
  }
  else
  {
    NNFX_logMsg(a1, 0, (uint64_t)" in fExtGetPhone2BdryFeats() trying to mallocate output.", v24, v25, v26, v27, v28);
  }
  return v29;
}

BOOL PhoneTierIsVoiced(int a1)
{
  return a1 == 2;
}

uint64_t BuildSilencePhT(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _WORD *v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  int v36;
  unsigned __int16 *v37;
  uint64_t v38;

  v13 = heap_Alloc(*(_QWORD *)(a1 + 8), 24);
  if (!v13)
  {
    NNFX_logMsg(a1, 0, (uint64_t)" allocating memory in BuildSilencePhT.", v8, v9, v10, v11, v12);
    return v13;
  }
  if (TierInit(a1, (int *)v13, a4, "Phone-level SILENCE tier"))
  {
    v19 = " allocating mem in BuildSilencePhT to hold boundaries.";
LABEL_4:
    v20 = a1;
    v21 = 0;
LABEL_5:
    NNFX_logMsg(v20, v21, (uint64_t)v19, v14, v15, v16, v17, v18);
    return 0;
  }
  v23 = heap_Alloc(*(_QWORD *)(a1 + 8), 2 * a3);
  v21 = v23;
  if (!v23)
  {
    v19 = " allocating memory in BuildSilencePh().";
    v20 = a1;
    goto LABEL_5;
  }
  v24 = a3 - 1;
  if (a3 == 1)
  {
    v29 = 1;
  }
  else
  {
    v25 = (uint64_t *)(a2 + 8);
    v26 = a3 - 1;
    v27 = (_WORD *)v23;
    do
    {
      v28 = *v25++;
      *v27++ = *(_DWORD *)(v28 + 192) == 1;
      --v26;
    }
    while (v26);
    *(_WORD *)(v23 + 2 * v24) = 1;
    if (a3 < 2 || !*(_DWORD *)(*(_QWORD *)(a2 + 8 * v24) + 192))
    {
      if (!a3)
        goto LABEL_25;
      goto LABEL_19;
    }
    v29 = 0;
    v24 = a3 - 2;
  }
  *(_WORD *)(v23 + 2 * v24) = v29;
LABEL_19:
  v30 = 0;
  v31 = 0;
  v32 = a3;
  v33 = *(_QWORD *)(v13 + 8);
  do
  {
    v34 = *(_DWORD *)(*(_QWORD *)(a2 + 8 * v30) + 144) - 1;
    if (*(_DWORD *)(*(_QWORD *)(a2 + 8 * v30) + 144) != 1)
    {
      v35 = v34 + v31;
      do
      {
        *(_WORD *)(v33 + 2 * v31++) = 0;
        --v34;
      }
      while (v34);
      v31 = v35;
    }
    a3 = v31 + 1;
    *(_WORD *)(v33 + 2 * v31++) = *(_WORD *)(v23 + 2 * v30++);
  }
  while (v30 != v32);
LABEL_25:
  heap_Free(*(_QWORD **)(a1 + 8), v23);
  if (a3 != a4)
  {
    v19 = ": %d phones processed, but total %d phones expected in BuildStressGroupPhT.";
    goto LABEL_4;
  }
  v36 = 0;
  if (a4)
  {
    v37 = *(unsigned __int16 **)(v13 + 8);
    v38 = a4;
    do
    {
      if (*v37++)
        ++v36;
      --v38;
    }
    while (v38);
  }
  *(_DWORD *)(v13 + 4) = v36;
  return v13;
}

uint64_t allocpppFeats(uint64_t a1, uint64_t *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;

  v8 = a3;
  v9 = heap_Calloc(*(_QWORD **)(a1 + 8), a3, 8);
  if (v9)
  {
    v10 = (_QWORD *)v9;
    *a2 = v9;
    if (!a3)
      return 0;
    v11 = v9 + 8 * v8;
    while (1)
    {
      v12 = heap_Calloc(*(_QWORD **)(a1 + 8), a4, 8);
      *v10 = v12;
      if (!v12)
        break;
      if ((unint64_t)++v10 >= v11)
        return 0;
    }
    freepppFeats((_QWORD *)a1, *a2, a3, a4);
  }
  return 1;
}

_QWORD *freepppFeats(_QWORD *result, uint64_t a2, unsigned int a3, unsigned int a4)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t *v8;

  if (a2)
  {
    v5 = result;
    if (a3)
    {
      v7 = a3;
      v8 = (uint64_t *)a2;
      do
      {
        freeppFeats(v5, *v8, a4, 1);
        *v8++ = 0;
        --v7;
      }
      while (v7);
    }
    return heap_Free((_QWORD *)v5[1], a2);
  }
  return result;
}

_QWORD *freeppFeats(_QWORD *result, uint64_t a2, unsigned int a3, int a4)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t *v8;

  if (a2)
  {
    v5 = result;
    if (a3)
    {
      v7 = a3;
      v8 = (uint64_t *)a2;
      do
      {
        if (a4)
        {
          if (*v8)
          {
            freepFeat(v5, *v8);
            *v8 = 0;
          }
        }
        ++v8;
        --v7;
      }
      while (v7);
    }
    return heap_Free((_QWORD *)v5[1], a2);
  }
  return result;
}

_QWORD *freepFeat(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  if (a2)
  {
    v3 = result;
    if (*(_DWORD *)(a2 + 8) == 3)
    {
      v4 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        heap_Free((_QWORD *)result[1], v4);
        *(_QWORD *)a2 = 0;
      }
    }
    return heap_Free((_QWORD *)v3[1], a2);
  }
  return result;
}

_QWORD *freepTier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v4);
    *(_QWORD *)(a2 + 16) = 0;
  }
  v5 = *(_QWORD *)(a2 + 8);
  if (v5)
  {
    heap_Free(*(_QWORD **)(a1 + 8), v5);
    *(_QWORD *)(a2 + 8) = 0;
  }
  return heap_Free(*(_QWORD **)(a1 + 8), a2);
}

_QWORD *TrieIntInit(_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  return result;
}

_QWORD *TrieIntFree(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t i;

  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v3 = result;
    for (i = 0; i != 2048; i += 8)
    {
      TrieIntFree(v3, *(_QWORD *)(*(_QWORD *)(a2 + 8) + i));
      heap_Free((_QWORD *)v3[1], *(_QWORD *)(*(_QWORD *)(a2 + 8) + i));
    }
    result = heap_Free((_QWORD *)v3[1], *(_QWORD *)(a2 + 8));
    *(_QWORD *)(a2 + 8) = 0;
  }
  return result;
}

uint64_t TrieSet(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result;
  _QWORD *v7;

  result = *(_QWORD *)(a2 + 8);
  if (result || (result = heap_Calloc(*(_QWORD **)(a1 + 8), 256, 8), (*(_QWORD *)(a2 + 8) = result) != 0))
  {
    result = *(_QWORD *)(result + 8 * a3);
    if (!result)
    {
      *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * a3) = heap_Alloc(*(_QWORD *)(a1 + 8), 16);
      v7 = *(_QWORD **)(*(_QWORD *)(a2 + 8) + 8 * a3);
      if (v7)
      {
        *v7 = 0;
        v7[1] = 0;
        return *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * a3);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t TrieIntAdd_(uint64_t a1, _DWORD *a2, unsigned __int8 *a3, int a4, int a5)
{
  unsigned __int8 v5;
  _DWORD *v7;
  int v9;
  unsigned __int8 *i;
  unsigned __int8 v11;
  uint64_t result;

  v5 = *a3;
  if (!*a3)
    return 1;
  v7 = a2;
  if (a4)
  {
    v9 = a4 - 1;
    for (i = a3 + 1; ; ++i)
    {
      if (v5)
      {
        a2 = (_DWORD *)TrieSet(a1, (uint64_t)a2, v5);
        if (!a2)
          break;
      }
      if (!v9)
        goto LABEL_9;
      v11 = *i;
      v5 = v11;
      --v9;
    }
    return 1;
  }
LABEL_9:
  result = 0;
  *a2 = -1;
  a2[1] = a5;
  ++*v7;
  return result;
}

uint64_t TrieIntAdd(uint64_t a1, _DWORD *a2, char *__s, int a4)
{
  int v8;

  v8 = strlen(__s);
  return TrieIntAdd_(a1, a2, (unsigned __int8 *)__s, v8, a4);
}

BOOL TrieIntGet_(uint64_t a1, _BYTE *a2, int a3, _DWORD *a4)
{
  uint64_t v4;

  if (a3)
  {
    while (1)
    {
      if (*a2)
      {
        if (!a1)
          return 1;
        v4 = *(_QWORD *)(a1 + 8);
        if (!v4)
          return 1;
        a1 = *(_QWORD *)(v4 + 8 * *a2);
        if (!a1)
          return 1;
      }
      ++a2;
      if (!--a3)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    *a4 = *(_DWORD *)(a1 + 4);
    return *(_DWORD *)a1 != -1;
  }
}

BOOL TrieIntGet(uint64_t a1, char *__s, _DWORD *a3)
{
  int v6;

  v6 = strlen(__s);
  return TrieIntGet_(a1, __s, v6, a3);
}

_QWORD *TierClear(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = result;
  *a2 = 0;
  v4 = a2[1];
  if (v4)
    result = heap_Free((_QWORD *)result[1], v4);
  a2[1] = 0;
  v5 = a2[2];
  if (v5)
    result = heap_Free((_QWORD *)v3[1], v5);
  a2[2] = 0;
  return result;
}

uint64_t TierInit(uint64_t a1, int *a2, int a3, char *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  TierClear((_QWORD *)a1, a2);
  if (a4)
    *((_QWORD *)a2 + 2) = stringdup(a1, a4);
  if (a3 < 1)
    return 0;
  *a2 = a3;
  *((_QWORD *)a2 + 1) = 0;
  v8 = heap_Calloc(*(_QWORD **)(a1 + 8), a3, 2);
  *((_QWORD *)a2 + 1) = v8;
  if (!v8)
    return 1;
  v9 = *a2 - 1;
  if (!*(_WORD *)(v8 + 2 * v9))
    ++a2[1];
  v10 = 0;
  *(_WORD *)(v8 + 2 * v9) = 1;
  return v10;
}

uint64_t TierAddBoundaries(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = 1;
  if (a1 && a2)
  {
    v3 = *a1;
    if ((_DWORD)v3 == *(_DWORD *)a2)
    {
      if ((_DWORD)v3)
      {
        v4 = 0;
        v5 = *(_QWORD *)(a2 + 8);
        v6 = 2 * v3;
        do
        {
          if (*(_WORD *)(v5 + v4))
          {
            v7 = *((_QWORD *)a1 + 1);
            if (!*(_WORD *)(v7 + v4))
              ++a1[1];
            *(_WORD *)(v7 + v4) = 1;
          }
          v4 += 2;
        }
        while (v6 != v4);
      }
      return 0;
    }
    else
    {
      return 1;
    }
  }
  return v2;
}

uint64_t leftMostSupraBoundary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int ElementInGroup;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t result;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;

  if (*(_DWORD *)a2 != *(_DWORD *)a3)
  {
    v20 = "Sub- and supra-tiers contain different number of elements.\n";
LABEL_11:
    NNFX_logMsg(a1, 0, (uint64_t)v20, a4, a5, a6, a7, a8);
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a2 + 4) <= a4)
  {
    NNFX_logMsg(a1, 0, (uint64_t)"outside range [0-%d] in sub-tier ", a4, a5, a6, a7, a8);
    if (**(_BYTE **)(a2 + 16))
    {
      v26 = 1;
      do
        NNFX_logMsg(a1, 0, (uint64_t)"%c", v21, v22, v23, v24, v25);
      while (strlen(*(const char **)(a2 + 16)) > v26++);
    }
    return 0xFFFFFFFFLL;
  }
  ElementInGroup = lastElementInGroup(a1, (unsigned int *)a2, a4, a4, a5, a6, a7, a8);
  if (ElementInGroup == -1)
    return 0xFFFFFFFFLL;
  v17 = ElementInGroup;
  v18 = ElementInGroup + 1;
  while (1)
  {
    result = v17;
    if ((int)v17 < 1)
      return result;
    --v17;
    --v18;
    if (*(_WORD *)(*(_QWORD *)(a3 + 8) + 2 * result - 2))
    {
      if (v18 < 2)
        return 1;
      if (*(_WORD *)(*(_QWORD *)(a2 + 8) + 2 * v17))
        return result;
      NNFX_logMsg(a1, 0, (uint64_t)"ERROR::tiers:: in leftMostSupraBoundary. Left-most boundary found in supra-tier is not ", v12, v13, v14, v15, v16);
      v20 = "aligned with a boundary %d on the sub-tier.\n";
      goto LABEL_11;
    }
  }
}

uint64_t lastElementInGroup(uint64_t a1, unsigned int *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t result;
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;

  if (a2[1] <= a3)
  {
    NNFX_logMsg(a1, 0, (uint64_t)"trying to access boundary %d beyond last boundary %d in tier ", a4, a5, a6, a7, a8);
    if (**((_BYTE **)a2 + 2))
    {
      v18 = 1;
      do
        NNFX_logMsg(a1, 0, (uint64_t)"%c", v13, v14, v15, v16, v17);
      while (*(unsigned __int8 *)(*((_QWORD *)a2 + 2) + v18++));
    }
    return 0xFFFFFFFFLL;
  }
  else
  {
    v9 = *a2;
    if ((_DWORD)v9)
    {
      result = 0;
      v11 = -1;
      while (1)
      {
        if (*(_WORD *)(*((_QWORD *)a2 + 1) + 2 * result))
          ++v11;
        if (v11 == a3)
          break;
        if (v9 == ++result)
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t rightMostSupraBoundary(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;

  if (*(_DWORD *)a2 != *a3)
  {
    v19 = "Sub- and supra-tiers contain different number of elements.\n";
    goto LABEL_12;
  }
  if (*(_DWORD *)(a2 + 4) <= a4)
  {
    NNFX_logMsg(a1, 0, (uint64_t)"ERROR:tiers::trying to access boundary %d ", a4, a5, a6, a7, a8);
    NNFX_logMsg(a1, 0, (uint64_t)"outside range [0-%d] in sub-tier ", v20, v21, v22, v23, v24);
    if (**(_BYTE **)(a2 + 16))
    {
      v30 = 1;
      do
        NNFX_logMsg(a1, 0, (uint64_t)"%c", v25, v26, v27, v28, v29);
      while (strlen(*(const char **)(a2 + 16)) > v30++);
    }
    return 0xFFFFFFFFLL;
  }
  result = lastElementInGroup(a1, (unsigned int *)a2, a4, a4, a5, a6, a7, a8);
  if ((_DWORD)result != -1)
  {
    if (result < *a3)
    {
      v17 = (unsigned __int16 *)(*((_QWORD *)a3 + 1) + 2 * result);
      while (!*v17++)
      {
        result = (result + 1);
        if (*a3 == (_DWORD)result)
        {
          result = *a3;
          break;
        }
      }
    }
    if (!*(_WORD *)(*(_QWORD *)(a2 + 8) + 2 * result))
    {
      NNFX_logMsg(a1, 0, (uint64_t)"ERROR::tiers:: in rightMostSupraBoundary. Right-most boundary found in supra-tier is not ", v12, v13, v14, v15, v16);
      v19 = "aligned with a boundary on the sub-tier.\n";
LABEL_12:
      NNFX_logMsg(a1, 0, (uint64_t)v19, a4, a5, a6, a7, a8);
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

BOOL TierIsBoundary(int a1)
{
  return a1 != 0;
}

uint64_t getLeftCounts_(uint64_t a1, unsigned int *a2, _DWORD *a3, BOOL (*a4)(int a1))
{
  BOOL (*v5)(int);
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  int v19;
  unsigned int ElementInGroup;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  _DWORD **v28;
  int v29;
  _DWORD *v30;
  int v31;
  const char *v32;
  uint64_t v34;

  if (a4)
    v5 = a4;
  else
    v5 = TierIsBoundary;
  v6 = *a2;
  if ((_DWORD)v6 != *a3)
    return 0;
  v7 = (uint64_t)a3;
  v14 = heap_Calloc(*(_QWORD **)(a1 + 8), v6, 8);
  if (v14)
  {
    LODWORD(v15) = *a2;
    if (*a2)
    {
      v16 = 0;
      while (1)
      {
        v17 = (_DWORD *)heap_Alloc(*(_QWORD *)(a1 + 8), 16);
        if (!v17)
          break;
        v17[2] = 0;
        *v17 = 0;
        *(_QWORD *)(v14 + 8 * v16++) = v17;
        v15 = *a2;
        if (v16 >= v15)
          goto LABEL_10;
      }
      v32 = ":: in getLeftCounts while allocating mem for stream 0 at element %d.\n";
      goto LABEL_33;
    }
LABEL_10:
    if (a2[1])
    {
      v18 = 0;
      v19 = -1;
      v34 = v7;
      while (1)
      {
        ElementInGroup = firstElementInGroup(a1, (uint64_t)a2, v18, v9, v10, v11, v12, v13);
        if (ElementInGroup == -1)
        {
          v32 = ":: in getLeftCounts. Cannot find valid start of group %d on source (sub) tier.";
          goto LABEL_33;
        }
        v21 = ElementInGroup;
        v22 = lastElementInGroup(a1, a2, v18, v9, v10, v11, v12, v13);
        if (v22 == -1)
        {
          v32 = ":: in getLeftCount. Cannot find valid end of group %d on source (sub) tier.";
          goto LABEL_33;
        }
        if (v21 != v19 + 1)
        {
          v32 = ":: in getLeftCount. First element in group %d does not follow last processed item.\n";
          goto LABEL_33;
        }
        v23 = v22;
        v24 = leftMostSupraBoundary(a1, (uint64_t)a2, v7, v18, v10, v11, v12, v13);
        if (v24 == -1)
          break;
        v25 = 0;
        v26 = v23 - v24;
        if (v23 > v24)
        {
          v27 = 2 * v24;
          do
          {
            v25 += ((uint64_t (*)(_QWORD))v5)(*(unsigned __int16 *)(*((_QWORD *)a2 + 1) + v27));
            v27 += 2;
            --v26;
          }
          while (v26);
        }
        if (v21 <= v23)
        {
          v28 = (_DWORD **)(v14 + 8 * v21);
          v29 = v23 - v21 + 1;
          do
          {
            v30 = *v28++;
            *v30 = v25;
            --v29;
          }
          while (v29);
        }
        v18 = (v18 + 1);
        v19 = v23;
        v7 = v34;
        if (v18 >= a2[1])
        {
          LODWORD(v15) = *a2;
          v31 = v23 + 1;
          goto LABEL_27;
        }
      }
      v32 = ":: in getLeftCounts. Cannot find beginning of supra-group for boundary %d.\n";
      goto LABEL_33;
    }
    v31 = 1;
LABEL_27:
    if (v31 != (_DWORD)v15)
    {
      v32 = ":: in getLeftCount. Last item processed not the same as last element in tier.\n";
LABEL_33:
      NNFX_logMsg(a1, 0, (uint64_t)v32, v9, v10, v11, v12, v13);
      return 0;
    }
  }
  else
  {
    NNFX_logMsg(a1, 0, (uint64_t)":: in getLeftCounts allocating memoery for ppFeat.\n", v9, v10, v11, v12, v13);
  }
  return v14;
}

uint64_t firstElementInGroup(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;

  if (*(_DWORD *)(a2 + 4) <= a3)
  {
    NNFX_logMsg(a1, 0, (uint64_t)"ERROR::tiers::trying to access boundary %d beyond last boundary %d in tier ", a4, a5, a6, a7, a8);
    if (**(_BYTE **)(a2 + 16))
    {
      v19 = 1;
      do
        NNFX_logMsg(a1, 0, (uint64_t)"%c", v14, v15, v16, v17, v18);
      while (*(unsigned __int8 *)(*(_QWORD *)(a2 + 16) + v19++));
    }
    return 0xFFFFFFFFLL;
  }
  result = 0;
  v11 = *(_DWORD *)a2;
  if (a3 && v11)
  {
    v12 = 0;
    v13 = -1;
    while (1)
    {
      if (*(_WORD *)(*(_QWORD *)(a2 + 8) + 2 * v12))
        ++v13;
      if (v13 == a3 - 1)
        break;
      if (v11 == (_DWORD)++v12)
      {
        result = 0;
        goto LABEL_15;
      }
    }
    result = (v12 + 1);
  }
LABEL_15:
  if ((int)result >= v11)
  {
    NNFX_logMsg(a1, 0, (uint64_t)"ERROR::tiers::trying to return an initial index exceeding the number of elements in tier\n", a4, a5, a6, a7, a8);
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t getLeftCounts(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  return getLeftCounts_(a1, a2, a3, TierIsBoundary);
}

uint64_t getRightCounts_(uint64_t a1, unsigned int *a2, unsigned int *a3, BOOL (*a4)(int a1))
{
  BOOL (*v5)(int);
  uint64_t v6;
  unsigned int *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  int v19;
  unsigned int ElementInGroup;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  int v27;
  _DWORD **v28;
  int v29;
  _DWORD *v30;
  int v31;
  const char *v32;
  unsigned int *v34;

  if (a4)
    v5 = a4;
  else
    v5 = TierIsBoundary;
  v6 = *a2;
  if ((_DWORD)v6 != *a3)
    return 0;
  v7 = a3;
  v14 = heap_Calloc(*(_QWORD **)(a1 + 8), v6, 8);
  if (v14)
  {
    LODWORD(v15) = *a2;
    if (*a2)
    {
      v16 = 0;
      while (1)
      {
        v17 = (_DWORD *)heap_Alloc(*(_QWORD *)(a1 + 8), 16);
        if (!v17)
          break;
        v17[2] = 0;
        *v17 = 0;
        *(_QWORD *)(v14 + 8 * v16++) = v17;
        v15 = *a2;
        if (v16 >= v15)
          goto LABEL_10;
      }
      v32 = ":: in getLeftCounts while allocating mem for stream 0 at element %d.\n";
      goto LABEL_34;
    }
LABEL_10:
    if (a2[1])
    {
      v18 = 0;
      v19 = -1;
      v34 = v7;
      while (1)
      {
        ElementInGroup = firstElementInGroup(a1, (uint64_t)a2, v18, v9, v10, v11, v12, v13);
        if (ElementInGroup == -1)
        {
          v32 = ":: in getLeftCounts. Cannot find valid start of group %d on source (sub) tier.";
          goto LABEL_34;
        }
        v21 = ElementInGroup;
        v22 = lastElementInGroup(a1, a2, v18, v9, v10, v11, v12, v13);
        if (v22 == -1)
        {
          v32 = ":: in getLeftCount. Cannot find valid end of group %d on source (sub) tier.";
          goto LABEL_34;
        }
        if (v21 != v19 + 1)
        {
          v32 = ":: in getLeftCount. First element in group %d does not follow last processed item.\n";
          goto LABEL_34;
        }
        v23 = v22;
        v24 = rightMostSupraBoundary(a1, (uint64_t)a2, v7, v18, v10, v11, v12, v13);
        if (v24 == -1)
          break;
        if (v23 <= v24)
        {
          v25 = 0;
          v26 = 2 * v23;
          v27 = v24 - v23 + 1;
          do
          {
            v25 += ((uint64_t (*)(_QWORD))v5)(*(unsigned __int16 *)(*((_QWORD *)a2 + 1) + v26));
            v26 += 2;
            --v27;
          }
          while (v27);
        }
        else
        {
          v25 = 0;
        }
        if (v21 <= v23)
        {
          v28 = (_DWORD **)(v14 + 8 * v21);
          v29 = v23 - v21 + 1;
          do
          {
            v30 = *v28++;
            *v30 = v25;
            --v29;
          }
          while (v29);
        }
        v18 = (v18 + 1);
        v19 = v23;
        v7 = v34;
        if (v18 >= a2[1])
        {
          LODWORD(v15) = *a2;
          v31 = v23 + 1;
          goto LABEL_28;
        }
      }
      v32 = ":: in getRightCounts. Cannot find end of supra-group for boundary %d.";
      goto LABEL_34;
    }
    v31 = 1;
LABEL_28:
    if (v31 != (_DWORD)v15)
    {
      v32 = ":: in getLeftCount. Last item processed not the same as last element in tier.\n";
LABEL_34:
      NNFX_logMsg(a1, 0, (uint64_t)v32, v9, v10, v11, v12, v13);
      return 0;
    }
  }
  else
  {
    NNFX_logMsg(a1, 0, (uint64_t)":: in getLeftCounts allocating memoery for ppFeat.\n", v9, v10, v11, v12, v13);
  }
  return v14;
}

uint64_t getRightCounts(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  return getRightCounts_(a1, a2, a3, TierIsBoundary);
}

uint64_t normalizeCounts(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  const char *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  double v24;

  v8 = 0;
  if (a2 && a3 && (_DWORD)a4)
  {
    if (*(_DWORD *)(*(_QWORD *)a2 + 8))
    {
      v12 = ":: in normalizeCounts. Input feature stream #1 is not of type intType.";
    }
    else if (*(_DWORD *)(*(_QWORD *)a3 + 8))
    {
      v12 = ":: in normalizeCounts. Input feature stream #2 is not of type intType.";
    }
    else
    {
      v14 = a4;
      v8 = heap_Calloc(*(_QWORD **)(a1 + 8), a4, 8);
      if (!v8)
      {
        NNFX_logMsg(a1, 0, (uint64_t)":: in normalizeCounts allocating memory for ppNormFeats.", v15, v16, v17, v18, v19);
        return v8;
      }
      v20 = 0;
      while (1)
      {
        v21 = heap_Alloc(*(_QWORD *)(a1 + 8), 16);
        if (!v21)
          break;
        *(_DWORD *)(v21 + 8) = 1;
        v22 = **(_DWORD **)(a2 + 8 * v20);
        v23 = **(_DWORD **)(a3 + 8 * v20) + v22;
        if (v23 < 1)
          v24 = 0.0;
        else
          v24 = (double)v22 / (double)v23;
        *(double *)v21 = v24;
        *(_QWORD *)(v8 + 8 * v20++) = v21;
        if (v14 == v20)
          return v8;
      }
      v12 = ":: in getLeftCounts while allocating mem for stream 0 at element %d.";
    }
    NNFX_logMsg(a1, 0, (uint64_t)v12, a4, a5, a6, a7, a8);
    return 0;
  }
  return v8;
}

uint64_t SymTabInit(uint64_t result)
{
  *(_DWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

_QWORD *SymTabFree(_QWORD *result, int *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  if (a2)
  {
    v3 = *((_QWORD *)a2 + 1);
    if (v3)
    {
      v4 = result;
      if (*a2 >= 1)
      {
        v5 = 0;
        v6 = 0;
        do
        {
          TrieIntFree(v4, *((_QWORD *)a2 + 1) + v5);
          ++v6;
          v5 += 16;
        }
        while (v6 < *a2);
        v3 = *((_QWORD *)a2 + 1);
      }
      result = heap_Free((_QWORD *)v4[1], v3);
      *((_QWORD *)a2 + 1) = 0;
    }
  }
  return result;
}

uint64_t SymTabReadBuf(uint64_t a1, int *a2, uint64_t a3, int a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  char *v19;
  char *v20;
  const char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  int v30;
  int *v31;
  uint64_t v32;
  int v34;
  char __dst[1024];
  _QWORD v36[130];

  v36[128] = *MEMORY[0x1E0C80C00];
  bzero(__dst, 0x800uLL);
  SymTabFree((_QWORD *)a1, a2);
  *a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v32 = a4;
  v9 = heap_Calloc(*(_QWORD **)(a1 + 8), a4, 16);
  *((_QWORD *)a2 + 1) = v9;
  if (!v9)
    return 1;
  if (a4 < 1)
  {
    v17 = 0;
LABEL_25:
    v30 = *(_DWORD *)(*a5 + 4016) - v17;
    *(_DWORD *)(*a5 + 4020) = v30;
    if (*a2 != v30)
      NNFX_logMsg(a1, 0, (uint64_t)"ERROR::nnfeatextract: Symbol table contains %d entries while number of active features is %d.\n", v10, v11, v12, v13, v14);
    return 0;
  }
  else
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    LODWORD(v18) = 0;
    v19 = __dst;
    v20 = (char *)v36;
    v34 = -1;
    v31 = a2;
    while (1)
    {
      v21 = v20;
      v22 = strcpy(v19, *(const char **)(a3 + 8 * v15));
      v23 = strrchr(v22, 10);
      if (v23)
        *v23 = 0;
      v24 = strchr(v19, 32);
      if (v24)
        *v24 = 0;
      v25 = strchr(v19, 9);
      if (v25)
        *v25 = 0;
      v26 = strchr(v19, 61);
      v27 = v26;
      if (v26)
      {
        *v26 = 0;
        v27 = v26 + 1;
      }
      if (!*v19)
        return 2;
      if (strcmp(v19, v21))
      {
        v28 = *a5;
        if ((int)v18 < *(_DWORD *)(*a5 + 4016))
        {
          v18 = (int)v18;
          do
          {
            if (!strcmp(*(const char **)(*(_QWORD *)(v28 + 8) + 8 * v18), v19))
              break;
            NNFX_logMsg(a1, 3, (uint64_t)"Missing feature: %s", v10, v11, v12, v13, v14);
            v28 = *a5;
            *(_DWORD *)(*a5 + 4 * v18++ + 16) = 0;
            ++v17;
          }
          while (v18 < *(int *)(v28 + 4016));
        }
        NNFX_logMsg(a1, 3, (uint64_t)"\nsymtab:%s  feat:%s", v10, v11, v12, v13, v14);
        v16 = 0;
        *(_DWORD *)(*a5 + 4 * (int)v18 + 16) = 1;
        LODWORD(v18) = v18 + 1;
        ++v34;
        a2 = v31;
        ++*v31;
      }
      if (v27)
        TrieIntAdd(a1, (_DWORD *)(*((_QWORD *)a2 + 1) + 16 * v34), v27, ++v16);
      ++v15;
      v20 = v19;
      v19 = (char *)v21;
      if (v15 == v32)
        goto LABEL_25;
    }
  }
}

uint64_t SymTabToIntInplace_(uint64_t a1, uint64_t a2, unsigned __int8 ***a3, int a4, unsigned __int8 a5)
{
  unsigned __int8 ***v5;
  uint64_t v8;
  _BOOL4 v9;
  int v10;
  unint64_t v11;
  _DWORD *v12;
  unsigned int v13;
  unsigned __int8 *v14;
  _BOOL4 v15;
  int v17;
  char __s[2];

  *(_WORD *)__s = 0;
  v17 = 0;
  if (a4 >= 1)
  {
    v5 = a3;
    v8 = 0;
    v9 = 0;
    v10 = a5;
    v11 = (unint64_t)&a3[a4];
    while (1)
    {
      v12 = *v5;
      if (*v5)
      {
        v13 = v12[2];
        if (v13 >= 2)
          break;
      }
LABEL_19:
      if ((unint64_t)++v5 >= v11)
        return v8;
    }
    if (v13 == 2)
    {
      __s[0] = *(_BYTE *)v12;
      v15 = TrieIntGet(a2, __s, &v17);
      v12 = *v5;
      if (*(unsigned __int8 *)*v5 == v10)
      {
LABEL_11:
        v9 = 0;
        v17 = 0;
LABEL_15:
        if (v12[2] == 3 && *(_QWORD *)v12)
        {
          heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)v12);
          *(_QWORD *)v12 = 0;
          v12 = *v5;
        }
        *v12 = v17;
        *((_DWORD *)*v5 + 2) = 0;
        goto LABEL_19;
      }
      v9 = v15;
    }
    else if (v13 == 3)
    {
      v9 = TrieIntGet(a2, *(char **)v12, &v17);
      v12 = *v5;
      v14 = **v5;
      if (*v14 == v10 && !v14[1])
        goto LABEL_11;
    }
    if (v9)
    {
      v17 = 0;
      v8 = (v8 + 1);
    }
    goto LABEL_15;
  }
  return 0;
}

BOOL SymTabToIntInplaceActive(uint64_t a1, int *a2, uint64_t *a3, int a4, unsigned __int8 a5)
{
  uint64_t v6;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v23;
  int v24;

  v6 = *a3;
  v23 = *a2;
  v24 = *(_DWORD *)(*a3 + 4020);
  if (*(int *)(*a3 + 4016) < 1)
  {
    v12 = 0;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    do
    {
      if (a4 + v11 >= *a2)
        break;
      if (*(_DWORD *)(v6 + 4 * v11 + 16))
      {
        v14 = *((_QWORD *)a2 + 1);
        if (*(int *)(v14 + 16 * (v13 + a4)) <= 0)
        {
          ++v12;
        }
        else
        {
          v20 = SymTabToIntInplace_(a1, v14 + 16 * v13 + 16 * a4, *(unsigned __int8 ****)(*(_QWORD *)v6 + 8 * v11), *(_DWORD *)(v6 + 4024), a5);
          if (v20 >= 1)
            NNFX_logMsg(a1, 1, (uint64_t)"::NN unroll:  %d/%d symbols not found in symbol table for feature %d.\n", v15, v16, v17, v18, v19);
          v6 = *a3;
          v12 = v12 - v20 + *(_DWORD *)(*a3 + 4024);
        }
        ++v13;
      }
      ++v11;
    }
    while (v11 < *(int *)(v6 + 4016));
  }
  return v24 + a4 > v23 || v12 < 1;
}

uint64_t unrollNnFeatures(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t *a4, _DWORD *a5)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  int **v31;
  unsigned int v32;
  uint64_t i;
  int *v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  float v41;
  const char *v43;

  v10 = *a2;
  v11 = *((unsigned int *)*a2 + 1005);
  v12 = *((unsigned int *)*a2 + 1006);
  if ((int)v11 < 1)
  {
    v13 = 0;
  }
  else
  {
    v13 = 0;
    v14 = *(int **)(a3 + 8);
    do
    {
      v16 = *v14;
      v14 += 4;
      v15 = v16;
      if (v16 <= 1)
        v15 = 1;
      v13 += v15;
      --v11;
    }
    while (v11);
  }
  v17 = *v10;
  v18 = *((unsigned int *)v10 + 1004);
  v19 = heap_Calloc(*(_QWORD **)(a1 + 8), (v13 * v12), 4);
  if (!v19)
    return 1;
  *a4 = v19;
  *a5 = v13;
  if ((int)v18 < 1)
    return 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = *a2;
  while (!*((_DWORD *)v28 + v25 + 4))
  {
    v29 = v27;
LABEL_34:
    ++v25;
    v27 = v29;
    if (v25 == v18)
      return 0;
  }
  v29 = (v27 + 1);
  v30 = *(_DWORD *)(*(_QWORD *)(a3 + 8) + 16 * (int)v27);
  if (v30)
  {
    if ((int)v12 >= 1)
    {
      v31 = *(int ***)(v17 + 8 * v25);
      v32 = v26 - 1;
      for (i = v12; i; --i)
      {
        v34 = *v31;
        if (*v31)
        {
          if (v34[2])
          {
            v43 = "::NN unroll: expected integer feature in stream %d.\n";
            goto LABEL_39;
          }
          v35 = *v34;
          if (v35 < 0 || v35 > v30)
          {
            v43 = "::NN unroll: value %d out of expected range [0,%d] in stream %d.\n";
            goto LABEL_39;
          }
          if (v35)
            *(_DWORD *)(v19 + 4 * (int)(v32 + v35)) = 1065353216;
        }
        v32 += v13;
        ++v31;
      }
    }
    v26 += v30;
    goto LABEL_34;
  }
  if ((int)v12 < 1)
  {
LABEL_33:
    ++v26;
    goto LABEL_34;
  }
  v36 = *(uint64_t **)(v17 + 8 * v25);
  v37 = v12;
  v38 = v26;
  while (1)
  {
    v39 = *v36;
    if (*v36)
      break;
LABEL_32:
    v38 += v13;
    ++v36;
    if (!--v37)
      goto LABEL_33;
  }
  v40 = *(_DWORD *)(v39 + 8);
  if (v40 == 1)
  {
    v41 = *(double *)v39;
    goto LABEL_31;
  }
  if (!v40)
  {
    v41 = (float)*(int *)v39;
LABEL_31:
    *(float *)(v19 + 4 * v38) = v41;
    goto LABEL_32;
  }
  v43 = "::NN unroll: unexpected type in non-categorical stream %d.\n";
LABEL_39:
  NNFX_logMsg(a1, 0, (uint64_t)v43, v20, v21, v22, v23, v24);
  return 1;
}

void *stringdup(uint64_t a1, char *__s)
{
  size_t v4;
  void *v5;
  size_t v6;

  if (!__s)
    return 0;
  v4 = strlen(__s);
  v5 = (void *)heap_Alloc(*(_QWORD *)(a1 + 8), v4 + 1);
  if (v5)
  {
    v6 = strlen(__s);
    memmove(v5, __s, v6 + 1);
  }
  return v5;
}

void *safe_strcpy(void *result, char *__s)
{
  void *v3;
  size_t v4;

  if (result)
  {
    if (__s)
    {
      v3 = result;
      v4 = strlen(__s) + 1;
      return memmove(v3, __s, v4);
    }
  }
  return result;
}

char *stringcat(uint64_t a1, char *__s, const char *a3)
{
  char *v3;
  size_t v7;
  size_t v8;
  char *v9;

  v3 = 0;
  if (__s)
  {
    if (a3)
    {
      v7 = strlen(__s);
      v8 = strlen(a3);
      v9 = (char *)heap_Alloc(*(_QWORD *)(a1 + 8), v7 + v8 + 1);
      v3 = v9;
      if (v9)
      {
        safe_strcpy(v9, __s);
        strcat(v3, a3);
      }
    }
  }
  return v3;
}

uint64_t Lingdb2NnWordRec(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _WORD *a6, _DWORD *a7, uint64_t a8, _WORD *a9, _WORD *a10, _WORD *a11)
{
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unsigned int v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _WORD *v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  int v31;
  __int16 v32;
  unint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  int v36;
  int v38;
  int v39;
  unsigned __int16 v40;
  uint64_t v41;
  int v42;
  BOOL v43;
  BOOL v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  unsigned int v54;
  const char *v55;
  __int16 v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  unsigned __int8 *v63;
  uint64_t v64;
  int v65;
  BOOL v66;
  char v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  unint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  unsigned __int16 v80;
  uint64_t v81;
  int v82;
  int v84;
  BOOL v85;
  int v86;
  unsigned __int16 v87;
  unsigned __int8 *v88;
  int v89;
  unsigned int *v90;
  unsigned int v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t inited;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned __int16 v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int *v125;
  int v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v129;
  __int16 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  unsigned __int16 v145;
  uint64_t v146;
  int v147;
  unsigned int v149;
  unsigned __int16 v150;
  char v151;
  int v152;
  char **v153;
  uint64_t v154;
  int v155;
  unsigned __int16 v156;
  uint64_t v157;
  int v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v162;
  unsigned __int16 v163;
  int v164;
  unsigned int *v165;
  int v166;
  unsigned __int16 v167;
  unsigned __int16 v168;
  int v169;
  unsigned __int16 v170;
  int v171;
  const char *v172;
  const char *v173;
  const char *v174;
  unsigned __int8 *v175;
  uint64_t v176;
  unsigned __int8 *v177[2];

  v160 = *(_QWORD *)a6;
  v175 = 0;
  v176 = 0;
  v173 = 0;
  v174 = 0;
  v172 = 0;
  v171 = 0;
  v170 = 0;
  v169 = 4;
  v168 = 0;
  v167 = 0;
  v166 = 0;
  v165 = 0;
  v164 = 0;
  v163 = 0;
  v162 = 0;
  *a7 = 0;
  *a9 = 0;
  *a10 = 0;
  v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(a3 + 104))(a4, a5, 1, 0, (char *)&v171 + 2);
  if ((v18 & 0x80000000) != 0)
  {
    v19 = v18;
    goto LABEL_9;
  }
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _DWORD *, unsigned __int16 *))(a3 + 168))(a4, a5, HIWORD(v171), 3, 1, a7, &v170);
  if ((v19 & 0x80000000) != 0)
  {
LABEL_9:
    a6[5] = 0;
    return v19;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(a3 + 184))(a4, a5, HIWORD(v171), 1, &v164) & 0x80000000) == 0&& (unsigned __int16)v164 == 1)
  {
    v19 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, unsigned int **, char *))(a3 + 176))(a4, a5, HIWORD(v171), 1, &v165, (char *)&v164 + 2);
    if ((v19 & 0x80000000) != 0)
      return v19;
  }
  v20 = a11;
  if (HIWORD(v164))
    v21 = v165[3];
  else
    v21 = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, int *))(a3 + 184))(a4, a5, HIWORD(v171), 0, &v164) & 0x80000000) != 0|| (unsigned __int16)v164 != 1)
  {
    v27 = a9;
    if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(a3 + 184))(a4, a5, HIWORD(v171), 4, &v164) & 0x80000000) != 0|| (unsigned __int16)v164 != 1)
    {
      goto LABEL_21;
    }
    v19 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, unsigned __int16 *))(a3 + 176))(a4, a5, HIWORD(v171), 4, &v176, &v170);
    if ((v19 & 0x80000000) != 0)
      goto LABEL_9;
  }
  else
  {
    v19 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t *, unsigned __int16 *))(a3 + 176))(a4, a5, HIWORD(v171), 0, &v176, &v170);
    v27 = a9;
    if ((v19 & 0x80000000) != 0)
    {
      log_OutPublic(a1[4], a2, 0, 0, v23, v24, v25, v26, v149);
      goto LABEL_9;
    }
  }
  if (v170 <= 1u)
  {
    v176 = 0;
    goto LABEL_27;
  }
LABEL_21:
  if (!v176)
  {
LABEL_27:
    v32 = 0;
    if (a8 && HIWORD(v164))
    {
      v33 = 0;
      v34 = v165;
      do
      {
        v35 = *v34;
        v34 += 8;
        v36 = (1 << v35) & 0x270F0100;
        if (v35 <= 0x1D && v36 != 0)
        {
          *(_DWORD *)a8 = 15;
          *(_DWORD *)(a8 + 12) = 0;
          *(_DWORD *)(a8 + 16) = 0;
          *(_BYTE *)(a8 + 120) = 83;
          *(_DWORD *)(a8 + 144) = 4;
          *(_DWORD *)(a8 + 160) = 0;
          **(_WORD **)(a8 + 280) = 35;
          *v27 = 1;
          *a10 = 1;
          v32 = 2;
          *a11 = 2;
          goto LABEL_37;
        }
        ++v33;
      }
      while (v33 < HIWORD(v164));
      v32 = 0;
    }
LABEL_37:
    a6[5] = v32;
    return v19;
  }
  LODWORD(v28) = HIWORD(v164);
  if (HIWORD(v164))
  {
    v29 = 0;
    v30 = (int *)(v165 + 3);
    while (1)
    {
      v31 = *v30;
      v30 += 8;
      if (v31 != v21)
        break;
      if (HIWORD(v164) == ++v29)
        goto LABEL_39;
    }
    LODWORD(v28) = v29;
  }
LABEL_39:
  v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(a3 + 152))(a4, a5, 2, HIWORD(v171), &v164);
  LOWORD(v39) = 0;
  if (v38 < 0 || !(_WORD)v164)
  {
    v156 = 0;
  }
  else
  {
    v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(a3 + 104))(a4, a5, 2, HIWORD(v171), &v171);
    if ((v19 & 0x80000000) != 0)
    {
      v130 = 1;
      goto LABEL_277;
    }
    v40 = v171;
    if ((_WORD)v171)
    {
      v156 = 0;
      v157 = 0;
      v150 = 0;
      v39 = 0;
      v155 = 1;
      v159 = v21;
      v154 = a8;
      while (1)
      {
        v158 = v39;
        v41 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, unsigned __int16 *))(a3 + 168))(a4, a5, v40, 0, 1, &v169, &v170);
        if ((v41 & 0x80000000) != 0)
        {
LABEL_275:
          v19 = v41;
LABEL_276:
          v130 = v155;
LABEL_277:
          a6[5] = v130;
          return v19;
        }
        v42 = v169;
        *(_DWORD *)(a8 + 144 * (unsigned __int16)v158) = v169;
        if ((v42 - 9) >= 6)
        {
          if (v42 == 15)
          {
            ++*a10;
            if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(a3 + 184))(a4, a5, (unsigned __int16)v171, 7, &v164) & 0x80000000) == 0&& (unsigned __int16)v164 == 1)
            {
              v41 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, unsigned __int16 *))(a3 + 168))(a4, a5, (unsigned __int16)v171, 7, 1, &v166, &v170);
              if ((v41 & 0x80000000) != 0)
                goto LABEL_275;
              *(_DWORD *)(a8 + 144 * (unsigned __int16)v158 + 12) = (unsigned __int16)v166;
            }
            if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(a3 + 184))(a4, a5, (unsigned __int16)v171, 1, &v164) & 0x80000000) == 0&& (unsigned __int16)v164 == 1)
            {
              v41 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, unsigned __int16 *))(a3 + 168))(a4, a5, (unsigned __int16)v171, 1, 1, &v167, &v170);
              if ((v41 & 0x80000000) != 0)
                goto LABEL_275;
              *(_DWORD *)(a8 + 144 * (unsigned __int16)v158 + 4) = v167;
            }
            if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(a3 + 184))(a4, a5, (unsigned __int16)v171, 2, &v164) & 0x80000000) == 0&& (unsigned __int16)v164 == 1)
            {
              v41 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, unsigned __int16 *))(a3 + 168))(a4, a5, (unsigned __int16)v171, 2, 1, (char *)&v166 + 2, &v170);
              if ((v41 & 0x80000000) != 0)
                goto LABEL_275;
              *(_DWORD *)(a8 + 144 * (unsigned __int16)v158 + 8) = HIWORD(v166);
            }
            v170 = 0;
            if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(a3 + 184))(a4, a5, (unsigned __int16)v171, 4, &v164) & 0x80000000) == 0&& (unsigned __int16)v164 == 1)
            {
              v41 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, const char **, unsigned __int16 *))(a3 + 176))(a4, a5, (unsigned __int16)v171, 4, &v173, &v170);
              if ((v41 & 0x80000000) != 0)
                goto LABEL_275;
              if (v173)
                strcpy(*(char **)(a8 + 144 * (unsigned __int16)v158 + 32), v173);
            }
            if (v176)
            {
              v163 = 0;
              v76 = v167;
              if (v167 >= HIWORD(v166))
              {
                v77 = 0;
              }
              else
              {
                v77 = 0;
                do
                {
                  v78 = *(_BYTE *)(v176 + v76);
                  v79 = *(_QWORD *)(a8 + 144 * (unsigned __int16)v158 + 128);
                  v163 = v77 + 1;
                  *(_BYTE *)(v79 + v77) = v78;
                  ++v76;
                  v77 = v163;
                }
                while (v76 < HIWORD(v166) && v163 < 0x1FFuLL);
              }
              *(_BYTE *)(*(_QWORD *)(a8 + 144 * (unsigned __int16)v158 + 128) + v77) = 0;
            }
            if ((unsigned __int16)v166 <= 2u)
              *(_BYTE *)(a8 + 144 * (unsigned __int16)v158 + 120) = 0x575353u >> (8 * v166);
            if ((_WORD)v158)
            {
              v80 = v158 - 1;
              while (1)
              {
                v81 = v80;
                v82 = *(_DWORD *)(a8 + 144 * v80);
                if ((v82 - 9) < 6 || v82 == 4)
                  break;
                if (v82 != 15)
                {
                  --v80;
                  if (v81)
                    continue;
                }
                goto LABEL_213;
              }
              *(_BYTE *)(a8 + 144 * v80 + 120) = *(_BYTE *)(a8 + 144 * (unsigned __int16)v158 + 120);
LABEL_213:
              v150 = v158;
            }
            else
            {
              v158 = 0;
              v150 = 0;
            }
            goto LABEL_247;
          }
          if (v42 != 4)
          {
            if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(a3 + 184))(a4, a5, (unsigned __int16)v171, 1, &v164) & 0x80000000) == 0&& (unsigned __int16)v164 == 1)
            {
              v41 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, unsigned __int16 *))(a3 + 168))(a4, a5, (unsigned __int16)v171, 1, 1, &v167, &v170);
              if ((v41 & 0x80000000) != 0)
                goto LABEL_275;
              *(_DWORD *)(a8 + 144 * (unsigned __int16)v158 + 4) = v167;
            }
            if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(a3 + 184))(a4, a5, (unsigned __int16)v171, 2, &v164) & 0x80000000) == 0&& (unsigned __int16)v164 == 1)
            {
              v41 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, unsigned __int16 *))(a3 + 168))(a4, a5, (unsigned __int16)v171, 2, 1, (char *)&v166 + 2, &v170);
              if ((v41 & 0x80000000) != 0)
                goto LABEL_275;
              *(_DWORD *)(a8 + 144 * (unsigned __int16)v158 + 8) = HIWORD(v166);
            }
            v170 = 0;
            if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(a3 + 184))(a4, a5, (unsigned __int16)v171, 4, &v164) & 0x80000000) == 0&& (unsigned __int16)v164 == 1)
            {
              v41 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, const char **, unsigned __int16 *))(a3 + 176))(a4, a5, (unsigned __int16)v171, 4, &v174, &v170);
              if ((v41 & 0x80000000) != 0)
                goto LABEL_275;
              if (v174)
                strcpy(*(char **)(a8 + 144 * (unsigned __int16)v158 + 32), v174);
            }
            if (v176)
            {
              v163 = 0;
              v50 = v167;
              if (v167 >= HIWORD(v166))
              {
                v51 = 0;
              }
              else
              {
                v51 = 0;
                do
                {
                  v52 = *(_BYTE *)(v176 + v50);
                  v53 = *(_QWORD *)(a8 + 144 * (unsigned __int16)v158 + 128);
                  v163 = v51 + 1;
                  *(_BYTE *)(v53 + v51) = v52;
                  ++v50;
                  v51 = v163;
                }
                while (v50 < HIWORD(v166) && v163 < 0x1FFuLL);
              }
              *(_BYTE *)(*(_QWORD *)(a8 + 144 * (unsigned __int16)v158 + 128) + v51) = 0;
            }
            goto LABEL_247;
          }
        }
        v153 = (char **)(a8 + 144 * (unsigned __int16)v158);
        ++*v27;
        v43 = v42 != 12;
        v44 = v42 == 14;
        v45 = HIDWORD(v157);
        if (!HIDWORD(v157))
          v44 = 0;
        v151 = v44;
        if (v43 && HIDWORD(v157) != 0)
          v45 = 0;
        HIDWORD(v157) = v45;
        if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(a3 + 184))(a4, a5, (unsigned __int16)v171, 1, &v164) & 0x80000000) == 0&& (unsigned __int16)v164 == 1)
        {
          v41 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, unsigned __int16 *))(a3 + 168))(a4, a5, (unsigned __int16)v171, 1, 1, &v167, &v170);
          if ((v41 & 0x80000000) != 0)
            goto LABEL_275;
          *(_DWORD *)(a8 + 144 * (unsigned __int16)v158 + 4) = v167;
        }
        if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(a3 + 184))(a4, a5, (unsigned __int16)v171, 2, &v164) & 0x80000000) == 0&& (unsigned __int16)v164 == 1)
        {
          v41 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, unsigned __int16 *))(a3 + 168))(a4, a5, (unsigned __int16)v171, 2, 1, (char *)&v166 + 2, &v170);
          if ((v41 & 0x80000000) != 0)
            goto LABEL_275;
          *(_DWORD *)(a8 + 144 * (unsigned __int16)v158 + 8) = HIWORD(v166);
        }
        if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(a3 + 184))(a4, a5, (unsigned __int16)v171, 13, &v164) & 0x80000000) == 0&& (unsigned __int16)v164 == 1)
        {
          v41 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, const char **, unsigned __int16 *))(a3 + 176))(a4, a5, (unsigned __int16)v171, 13, &v172, &v170);
          if ((v41 & 0x80000000) != 0)
            goto LABEL_275;
          *(_DWORD *)(a8 + 144 * (unsigned __int16)v158 + 20) = atoi(v172);
        }
        if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(a3 + 184))(a4, a5, (unsigned __int16)v171, 7, &v164) & 0x80000000) == 0&& (unsigned __int16)v164 == 1)
        {
          v41 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, unsigned __int16 *))(a3 + 168))(a4, a5, (unsigned __int16)v171, 7, 1, &v168, &v170);
          if ((v41 & 0x80000000) != 0)
            goto LABEL_275;
          *(_DWORD *)(a8 + 144 * (unsigned __int16)v158 + 12) = v168;
        }
        if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(a3 + 184))(a4, a5, (unsigned __int16)v171, 17, &v164) & 0x80000000) == 0&& (unsigned __int16)v164 == 1)
        {
          v41 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, const char **, unsigned __int16 *))(a3 + 176))(a4, a5, (unsigned __int16)v171, 17, &v172, &v170);
          if ((v41 & 0x80000000) != 0)
            goto LABEL_275;
          *(_DWORD *)(a8 + 144 * (unsigned __int16)v158 + 24) = atoi(v172);
        }
        if (v173)
          strcpy(*(char **)(a8 + 144 * (unsigned __int16)v158 + 32), v173);
        if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(a3 + 184))(a4, a5, (unsigned __int16)v171, 5, &v164) & 0x80000000) == 0&& (unsigned __int16)v164 == 1)
        {
          v41 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, const char **, unsigned __int16 *))(a3 + 176))(a4, a5, (unsigned __int16)v171, 5, &v174, &v170);
          if ((v41 & 0x80000000) != 0)
            goto LABEL_275;
          if (v174)
            strcpy(*(char **)(a8 + 144 * (unsigned __int16)v158 + 40), v174);
        }
        if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(a3 + 184))(a4, a5, (unsigned __int16)v171, 6, &v164) & 0x80000000) == 0&& (unsigned __int16)v164 == 1)
        {
          v41 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, const char **, unsigned __int16 *))(a3 + 176))(a4, a5, (unsigned __int16)v171, 6, &v174, &v170);
          if ((v41 & 0x80000000) != 0)
            goto LABEL_275;
          if (v174)
            strcpy(*(char **)(a8 + 144 * (unsigned __int16)v158 + 48), v174);
        }
        if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(a3 + 184))(a4, a5, (unsigned __int16)v171, 9, &v164) & 0x80000000) == 0&& (unsigned __int16)v164 == 1)
        {
          v41 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, const char **, unsigned __int16 *))(a3 + 176))(a4, a5, (unsigned __int16)v171, 9, &v174, &v170);
          if ((v41 & 0x80000000) != 0)
            goto LABEL_275;
          if (v174)
            strcpy(*(char **)(a8 + 144 * (unsigned __int16)v158 + 56), v174);
        }
        if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(a3 + 184))(a4, a5, (unsigned __int16)v171, 14, &v164) & 0x80000000) == 0&& (unsigned __int16)v164 == 1)
        {
          v41 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, const char **, unsigned __int16 *))(a3 + 176))(a4, a5, (unsigned __int16)v171, 14, &v174, &v170);
          if ((v41 & 0x80000000) != 0)
            goto LABEL_275;
          if (v174)
            ParseWnluStr(v174, v153);
        }
        if (v176)
        {
          v163 = 0;
          v46 = v167;
          if (v167 >= HIWORD(v166))
          {
            v47 = 0;
          }
          else
          {
            v47 = 0;
            do
            {
              v48 = *(_BYTE *)(v176 + v46);
              v49 = *(_QWORD *)(a8 + 144 * (unsigned __int16)v158 + 128);
              v163 = v47 + 1;
              *(_BYTE *)(v49 + v47) = v48;
              ++v46;
              v47 = v163;
            }
            while (v46 < HIWORD(v166) && v163 < 0x1FFuLL);
          }
          *(_BYTE *)(*(_QWORD *)(a8 + 144 * (unsigned __int16)v158 + 128) + v47) = 0;
        }
        v170 = 0;
        v175 = 0;
        if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(a3 + 184))(a4, a5, (unsigned __int16)v171, 3, &v164) & 0x80000000) == 0&& (unsigned __int16)v164 == 1)
        {
          v41 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, unsigned __int8 **, unsigned __int16 *))(a3 + 176))(a4, a5, (unsigned __int16)v171, 3, &v175, &v170);
          if ((v41 & 0x80000000) != 0)
            goto LABEL_275;
        }
        v54 = v170;
        if (v170 >= 2u)
        {
          v55 = (const char *)v175;
        }
        else if (v169 == 14)
        {
          v55 = "M";
          v175 = "M";
        }
        else
        {
          v55 = 0;
          v175 = 0;
        }
        v56 = atoi(v172);
        if (!v55 || v56)
        {
          if (!v55)
            goto LABEL_142;
        }
        else if (!strcmp(v55, "\""))
        {
          v175 = 0;
LABEL_142:
          v27 = a9;
          v60 = v160;
          goto LABEL_225;
        }
        if (v54 < 2)
        {
          v58 = 0;
          v57 = 0;
        }
        else
        {
          v57 = 0;
          do
          {
            v58 = (unsigned __int16)v57;
            v59 = v175[(unsigned __int16)v57];
            if ((char)v175[(unsigned __int16)v57] < 0)
            {
              if (!__maskrune(v59, 0x4000uLL))
                goto LABEL_144;
            }
            else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v59 + 60) & 0x4000) == 0)
            {
              goto LABEL_144;
            }
            ++v57;
          }
          while (v170 - 1 > (unsigned __int16)v57);
          v58 = (unsigned __int16)v57;
          v57 = (unsigned __int16)v57;
        }
LABEL_144:
        v61 = 0;
        v62 = (_QWORD *)(v154 + 144 * (unsigned __int16)v158 + 136);
        while (v170 - 1 > (int)v61)
        {
          v63 = v175;
          v64 = v175[v58 + v61];
          if ((char)v175[v58 + v61] < 0)
          {
            if (__maskrune(v64, 0x4000uLL))
            {
LABEL_152:
              v21 = v159;
              break;
            }
          }
          else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v64 + 60) & 0x4000) != 0)
          {
            goto LABEL_152;
          }
          *(_BYTE *)(*v62 + v61) = v63[(v57 + v61)];
          ++v61;
          v21 = v159;
          if (v61 == 511)
            break;
        }
        *(_BYTE *)(*v62 + (unsigned __int16)v61) = 0;
        v27 = a9;
        v60 = v160;
        if (v175)
        {
          a8 = v154;
          v20 = a11;
          if (*v175)
          {
            v65 = (__int16)v155;
            v66 = (__int16)v155 >= 2 && HIDWORD(v157) == 0;
            v67 = v151;
            if (!v66)
              v67 = 1;
            if ((v67 & 1) == 0 && v169 != 14)
            {
              v68 = HIWORD(v164);
              if (v28 < HIWORD(v164))
              {
                v69 = 0;
                v70 = 0;
                v71 = v28;
                v72 = &v165[8 * v28];
                while (v72[3] - v21 <= v167)
                {
                  v74 = *v72;
                  v72 += 8;
                  v73 = v74;
                  if (v74 == 8)
                    v75 = v70 + 1;
                  else
                    v75 = v70;
                  if (v73 == 26)
                    ++v69;
                  else
                    v70 = v75;
                  if (HIWORD(v164) == ++v71)
                    goto LABEL_216;
                }
                v68 = v71;
LABEL_216:
                if (v69)
                {
                  v152 = v68;
                  if (v70)
                    v84 = *(_DWORD *)(v154 + 144 * v156 + 16);
                  else
                    v84 = 200;
                  *(_DWORD *)(v154 + 144 * v156 + 16) = v84;
                  v92 = (char *)(*(_QWORD *)a6 + 152);
                  if (strstr(v92, "bet4") || strstr(v92, "bet5"))
                  {
                    inited = InitFromWrdRec((uint64_t)a1, (uint64_t)v153, v154 + 144 * (unsigned __int16)v158 + 432, v93, v94, v95, v96, v97);
                    if ((inited & 0x80000000) != 0)
                      return inited;
                    inited = Init_WrdRec(a1, &v162, 1u);
                    if ((inited & 0x80000000) != 0)
                      return inited;
                    inited = InitFromWrdRec((uint64_t)a1, v162, (uint64_t)v153, v99, v100, v101, v102, v103);
                    if ((inited & 0x80000000) != 0)
                      return inited;
                    *(_DWORD *)v153 = 15;
                    v109 = v154 + 144 * (unsigned __int16)v158;
                    *(_QWORD *)(v109 + 12) = 0x100000002;
                    *(_BYTE *)(v109 + 120) = 87;
                    inited = InitFromWrdRec((uint64_t)a1, v162, v154 + 144 * (unsigned __int16)(v158 + 1), v104, v105, v106, v107, v108);
                    if ((inited & 0x80000000) != 0)
                      return inited;
                    *(_DWORD *)(v154 + 144 * (unsigned __int16)(v158 + 1)) = 4;
                    **(_WORD **)(v154 + 144 * (unsigned __int16)(v158 + 1) + 136) = 35;
                    inited = InitFromWrdRec((uint64_t)a1, v162, v154 + 144 * (unsigned __int16)(v158 + 2), v110, v111, v112, v113, v114);
                    if ((inited & 0x80000000) != 0)
                      return inited;
                    *(_DWORD *)(v154 + 144 * (unsigned __int16)(v158 + 2)) = 15;
                    v115 = v154 + 144 * v150;
                    v116 = v154 + 144 * (unsigned __int16)(v158 + 2);
                    *(_QWORD *)(v116 + 12) = *(_QWORD *)(v115 + 12);
                    *(_BYTE *)(v116 + 120) = *(_BYTE *)(v115 + 120);
                    v158 += 3;
                    Free_WrdRec(a1, v162, 1u);
                    *a10 += 2;
                    ++*a9;
                    LODWORD(v157) = 5;
                    v60 = v160;
                    v21 = v159;
                    v65 = (__int16)v155;
                    LODWORD(v28) = v152;
                  }
                  else
                  {
                    v60 = v160;
                    v65 = (__int16)v155;
                  }
                }
              }
            }
            if ((_DWORD)v157)
              v85 = v65 <= 1;
            else
              v85 = 1;
            v86 = v155;
            if (!v85)
              v86 = v155 + 1;
            v155 = v86;
          }
        }
        else
        {
          a8 = v154;
          v20 = a11;
        }
LABEL_225:
        if (v169 != 13)
        {
          if (v169 != 14)
            goto LABEL_229;
          HIDWORD(v157) = 1;
        }
        ++a6[7];
LABEL_229:
        LODWORD(v157) = 0;
        if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(a3 + 184))(a4, a5, (unsigned __int16)v171, 8, &v164) & 0x80000000) == 0&& (unsigned __int16)v164 == 1)
        {
          v41 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int16 *, unsigned __int16 *))(a3 + 168))(a4, a5, (unsigned __int16)v171, 8, 1, &v163, &v170);
          if ((v41 & 0x80000000) != 0)
            goto LABEL_275;
          LODWORD(v157) = v163;
          v60 = v160;
        }
        v87 = v158;
        *(_DWORD *)(a8 + 144 * (unsigned __int16)v158 + 16) = v157;
        if (v175 && *v175)
        {
          v177[0] = v175;
          skipUnvalidPhonemes(v60, v177);
          v88 = v177[0];
          if (*v177[0])
          {
            v89 = 0;
            do
            {
              ++v89;
              v177[0] = v88 + 1;
              skipUnvalidPhonemes(v60, v177);
              v88 = v177[0];
            }
            while (*v177[0]);
          }
          else
          {
            v89 = 0;
          }
          v155 += v89;
          v87 = v158;
          v21 = v159;
        }
        if (v28 < HIWORD(v164))
        {
          v28 = v28;
          v90 = &v165[8 * v28 + 3];
          while (1)
          {
            v91 = *v90;
            v90 += 8;
            if (v91 - v21 > v167)
              break;
            if (HIWORD(v164) == ++v28)
            {
              LODWORD(v28) = HIWORD(v164);
              break;
            }
          }
        }
        v156 = v87;
LABEL_247:
        v19 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(a3 + 120))(a4, a5, (unsigned __int16)v171, &v171);
        if ((v19 & 0x80000000) != 0)
          goto LABEL_276;
        v39 = v158 + 1;
        v40 = v171;
        if (!(_WORD)v171)
          goto LABEL_261;
      }
    }
    LOWORD(v39) = 0;
    v156 = 0;
  }
LABEL_261:
  if (!*v27)
  {
LABEL_284:
    if ((_WORD)v39)
    {
      v145 = v39 - 1;
      while (1)
      {
        v146 = v145;
        v147 = *(_DWORD *)(a8 + 144 * v145);
        if ((v147 - 9) < 6 || v147 == 4)
          break;
        if (v147 != 15)
        {
          --v145;
          if (v146)
            continue;
        }
        goto LABEL_294;
      }
      *(_BYTE *)(a8 + 144 * v145 + 120) = 83;
    }
LABEL_294:
    *v20 = v39;
    return v19;
  }
  v117 = v39;
  v118 = (char *)(*(_QWORD *)a6 + 152);
  if (!strstr(v118, "bet4") && !strstr(v118, "bet5") || v28 >= HIWORD(v164))
  {
LABEL_283:
    LOWORD(v39) = v117;
    goto LABEL_284;
  }
  v124 = v28;
  v125 = &v165[8 * v28];
  v126 = -1;
  LOWORD(v39) = v117;
  do
  {
    v127 = *v125;
    v125 += 8;
    if (v127 == 26)
      v126 = v124;
    ++v124;
  }
  while (HIWORD(v164) != v124);
  if (v126 == -1)
    goto LABEL_284;
  v128 = v117 + 1;
  v129 = a8 + 144 * (v117 - 1);
  while (v128 - 2 > v156)
  {
    v19 = InitFromWrdRec((uint64_t)a1, v129, a8 + 144 * v128--, v119, v120, v121, v122, v123);
    v129 -= 144;
    if ((v19 & 0x80000000) != 0)
      return v19;
  }
  *(_DWORD *)(a8 + 144 * v156 + 16) = 0;
  inited = Init_WrdRec(a1, &v162, 1u);
  if ((inited & 0x80000000) != 0)
    return inited;
  v136 = v156 + 1;
  inited = InitFromWrdRec((uint64_t)a1, v162, a8 + 144 * v136, v131, v132, v133, v134, v135);
  if ((inited & 0x80000000) != 0)
    return inited;
  *(_DWORD *)(a8 + 144 * v136) = 15;
  v142 = a8 + 144 * v136;
  *(_QWORD *)(v142 + 12) = 0x100000000;
  *(_BYTE *)(v142 + 120) = 83;
  v143 = v156 + 2;
  v19 = InitFromWrdRec((uint64_t)a1, v162, a8 + 144 * v143, v137, v138, v139, v140, v141);
  if ((v19 & 0x80000000) == 0)
  {
    *(_DWORD *)(a8 + 144 * v143) = 4;
    v144 = a8 + 144 * v143;
    *(_DWORD *)(v144 + 16) = 200;
    **(_WORD **)(v144 + 136) = 35;
    ++v163;
    ++*a10;
    ++*a9;
    v117 += 2;
    Free_WrdRec(a1, v162, 1u);
    goto LABEL_283;
  }
  return v19;
}

uint64_t skipUnvalidPhonemes(uint64_t result, unsigned __int8 **a2)
{
  unsigned __int8 *v2;
  unsigned int v3;
  unsigned __int8 *v4;
  int v5;
  int v6;

  v2 = *a2;
  v3 = **a2;
  if (**a2)
  {
    while (*(unsigned __int8 *)(result + v3 + 2144) == 255)
    {
      if (v3 == 92)
      {
        v4 = v2 + 1;
        do
        {
          *a2 = v4;
          v6 = *v4++;
          v5 = v6;
          if (v6 == 92)
          {
            v2 = v4 - 1;
            goto LABEL_10;
          }
        }
        while (v5);
        *a2 = v2;
        if (*v2)
          goto LABEL_10;
        return result;
      }
LABEL_10:
      *a2 = v2 + 1;
      v3 = *++v2;
      if (!v3)
        return result;
    }
  }
  return result;
}

uint64_t usextract_ProcessStart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  int v33;
  uint64_t v34;
  int *v35;
  int v36;
  char v37;
  int v38;
  unsigned __int16 v39;
  uint64_t v40;
  _BOOL4 v42;
  int v43;
  int v44;
  const char *v45;
  unsigned int v46;
  BOOL v47;
  int v48;
  _DWORD *v49;
  _BOOL4 v50;
  _BOOL4 v51;
  unsigned int v52;
  BOOL v53;
  char *v54;
  unsigned int v55;
  int *v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  __int16 v61;
  void *__src;
  int v63;
  unsigned __int16 v64;
  uint64_t v65;
  char *v66;
  int v67;
  unsigned __int16 v68;
  int v69;
  uint64_t v70;

  v14 = *(_QWORD *)a6;
  v70 = 0;
  v69 = 0;
  v68 = 0;
  v67 = 4;
  v65 = 0;
  v66 = 0;
  v64 = 0;
  v63 = 0;
  __src = 0;
  v61 = 0;
  *a7 = 0;
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(a3 + 272))(a4, a5, 114, 3, 0, 0);
  if ((v15 & 0x80000000) != 0
    || (v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(a3 + 104))(a4, a5, 1, 0, (char *)&v69 + 2), (v15 & 0x80000000) != 0))
  {
    v17 = v15;
    goto LABEL_14;
  }
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _DWORD *, unsigned __int16 *))(a3 + 168))(a4, a5, HIWORD(v69), 3, 1, a7, &v68);
  if ((v17 & 0x80000000) != 0)
  {
LABEL_14:
    LOWORD(v26) = 0;
    goto LABEL_15;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, __int16 *))(a3 + 184))(a4, a5, HIWORD(v69), 1, &v61) & 0x80000000) != 0|| v61 != 1)
  {
    LODWORD(v23) = *(_DWORD *)(a6 + 3520);
  }
  else
  {
    v17 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, void **, unsigned __int16 *))(a3 + 176))(a4, a5, HIWORD(v69), 1, &__src, &v68);
    if ((v17 & 0x80000000) != 0)
      goto LABEL_14;
    v18 = (void *)heap_Alloc(*(_QWORD *)(a1 + 8), 32 * v68);
    *(_QWORD *)(a6 + 3512) = v18;
    if (!v18)
      goto LABEL_47;
    memcpy(v18, __src, 32 * v68);
    LODWORD(v23) = v68;
    *(_DWORD *)(a6 + 3520) = v68;
    if ((_DWORD)v23)
    {
      v24 = 0;
      v25 = 0;
      while (marker_copyParts(*(_QWORD *)(a6 + 3512) + v24, *(_QWORD *)(a1 + 8), *(_QWORD *)(a6 + 3512) + v24))
      {
        ++v25;
        v23 = *(unsigned int *)(a6 + 3520);
        v24 += 32;
        if (v25 >= v23)
          goto LABEL_19;
      }
      if ((_DWORD)v25)
      {
        v38 = 0;
        do
          marker_freeParts((int *)(*(_QWORD *)(a6 + 3512) + 32 * (unsigned __int16)v38++), *(_QWORD **)(a1 + 8));
        while (v25 > (unsigned __int16)v38);
      }
      heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)(a6 + 3512));
      *(_QWORD *)(a6 + 3512) = 0;
LABEL_47:
      log_OutPublic(*(_QWORD *)(a1 + 32), a2, 19000, 0, v19, v20, v21, v22, v58);
      LOWORD(v26) = 0;
      v17 = 2229280778;
      goto LABEL_15;
    }
  }
LABEL_19:
  if ((_DWORD)v23)
    v28 = *(_DWORD *)(*(_QWORD *)(a6 + 3512) + 12);
  else
    v28 = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, __int16 *))(a3 + 184))(a4, a5, HIWORD(v69), 0, &v61) & 0x80000000) == 0&& v61 == 1)
  {
    v29 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t *, unsigned __int16 *))(a3 + 176))(a4, a5, HIWORD(v69), 0, &v70, &v68);
    goto LABEL_28;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, __int16 *))(a3 + 184))(a4, a5, HIWORD(v69), 4, &v61) & 0x80000000) == 0&& v61 == 1)
  {
    v29 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, unsigned __int16 *))(a3 + 176))(a4, a5, HIWORD(v69), 4, &v70, &v68);
LABEL_28:
    v17 = v29;
    if ((v29 & 0x80000000) == 0)
    {
      if (v68 <= 1u)
      {
        v70 = 0;
        goto LABEL_37;
      }
      goto LABEL_31;
    }
    goto LABEL_14;
  }
LABEL_31:
  if (!v70)
  {
LABEL_37:
    v34 = *(unsigned int *)(a6 + 3520);
    if ((_DWORD)v34)
    {
      v35 = *(int **)(a6 + 3512);
      while (1)
      {
        v36 = *v35;
        v35 += 8;
        v37 = v36 - 8;
        if ((v36 - 8) < 0x16 && ((0x270F01u >> v37) & 1) != 0)
          break;
        if (!--v34)
          goto LABEL_115;
      }
      LOWORD(v34) = 2;
    }
LABEL_115:
    *(_WORD *)(a6 + 10) = v34;
    *(_WORD *)(a6 + 3524) = *(_WORD *)(v14 + 3578) * v34;
    if ((v17 & 0x80000000) != 0)
      goto LABEL_16;
    return v17;
  }
  v30 = *(unsigned int *)(a6 + 3520);
  if ((_DWORD)v30)
  {
    v31 = 0;
    v32 = (int *)(*(_QWORD *)(a6 + 3512) + 12);
    while (1)
    {
      v33 = *v32;
      v32 += 8;
      if (v33 != v28)
        break;
      if (v30 == ++v31)
        goto LABEL_49;
    }
    LODWORD(v30) = v31;
  }
LABEL_49:
  HIDWORD(v65) = v30;
  v26 = 1;
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, __int16 *))(a3 + 152))(a4, a5, 2, HIWORD(v69), &v61) & 0x80000000) != 0|| !v61)
  {
    goto LABEL_113;
  }
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(a3 + 104))(a4, a5, 2, HIWORD(v69), &v69);
  if ((v17 & 0x80000000) != 0)
    goto LABEL_15;
  v39 = v69;
  if (!(_WORD)v69)
  {
LABEL_113:
    LOWORD(v34) = v26 + *(_WORD *)(a6 + 14) + 2;
    goto LABEL_115;
  }
  v60 = 0;
  while (1)
  {
    v40 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, unsigned __int16 *))(a3 + 168))(a4, a5, v39, 0, 1, &v67, &v68);
    if ((v40 & 0x80000000) != 0)
      break;
    if ((v67 - 9) >= 6 && v67 != 4)
      goto LABEL_106;
    v42 = v67 == 14;
    v43 = v60;
    if (!v60)
      v42 = 0;
    if (v67 != 12 && v60 != 0)
      v43 = 0;
    v59 = v42;
    v60 = v43;
    v40 = usextract_readFromPos(a3, a4, a5, (unsigned __int16)v69, &v64);
    if ((v40 & 0x80000000) != 0)
      break;
    v68 = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, __int16 *))(a3 + 184))(a4, a5, (unsigned __int16)v69, 3, &v61) & 0x80000000) == 0&& v61 == 1)
    {
      v40 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, unsigned __int16 *))(a3 + 176))(a4, a5, (unsigned __int16)v69, 3, &v66, &v68);
      if ((v40 & 0x80000000) != 0)
        break;
    }
    if (v68 <= 1u)
    {
      v44 = v67;
      if (v67 != 14)
      {
        v66 = 0;
        goto LABEL_93;
      }
      v45 = "M";
      v66 = "M";
LABEL_72:
      if (*v45)
      {
        v46 = *(_DWORD *)(a6 + 3520);
        v47 = v46 >= v30;
        v48 = v46 - v30;
        if (v48 != 0 && v47)
        {
          v49 = (_DWORD *)(*(_QWORD *)(a6 + 3512) + 32 * v30);
          while (v49[3] - v28 <= v64)
          {
            if (*v49 == 26)
            {
              if (((v60 == 0) & ~v59) == 0)
                break;
              v51 = (__int16)v26 > 1;
              v52 = v65;
              v50 = v67 != 14;
              if (v67 != 14 && !(_DWORD)v65 && (__int16)v26 >= 2)
              {
                v52 = 5;
                LODWORD(v65) = 5;
                v51 = 1;
                v63 = 1;
                v50 = 1;
              }
              goto LABEL_83;
            }
            v49 += 8;
            if (!--v48)
              break;
          }
        }
        v50 = 0;
        v51 = (__int16)v26 > 1;
        v52 = v65;
LABEL_83:
        if (v52)
          v53 = !v51;
        else
          v53 = 1;
        if (!v53)
          usextract_insertPause(0, a6, v52, v63, (__int16)v26++, v28, v64, (_DWORD *)&v65 + 1);
        if (v50)
        {
          v54 = (char *)(*(_QWORD *)a6 + 152);
          if (strstr(v54, "bet4") || strstr(v54, "bet5"))
            usextract_insertPause(0, a6, 5u, 1, (__int16)v26++, v28, v64, (_DWORD *)&v65 + 1);
        }
      }
      goto LABEL_92;
    }
    v45 = v66;
    if (v66)
      goto LABEL_72;
LABEL_92:
    v44 = v67;
LABEL_93:
    if (v44 == 13)
      goto LABEL_96;
    if (v44 == 14)
    {
      v60 = 1;
LABEL_96:
      ++*(_WORD *)(a6 + 14);
    }
    v40 = usextract_readSilDur(a3, a4, a5, (unsigned __int16)v69, &v65, &v63);
    if ((v40 & 0x80000000) != 0)
      break;
    v55 = *(_DWORD *)(a6 + 3520);
    LODWORD(v30) = HIDWORD(v65);
    if (HIDWORD(v65) < v55)
    {
      v56 = (int *)(*(_QWORD *)(a6 + 3512) + 32 * HIDWORD(v65) + 12);
      while (1)
      {
        v57 = *v56;
        v56 += 8;
        if (v57 - v28 > v64)
          break;
        LODWORD(v30) = v30 + 1;
        if (v55 == (_DWORD)v30)
        {
          LODWORD(v30) = *(_DWORD *)(a6 + 3520);
          break;
        }
      }
    }
    HIDWORD(v65) = v30;
    if (v66 && *v66)
      v26 += usextract_nrOfValidPhonemes(v14, (unsigned __int8 *)v66);
LABEL_106:
    v17 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(a3 + 120))(a4, a5, (unsigned __int16)v69, &v69);
    if ((v17 & 0x80000000) != 0)
      goto LABEL_15;
    v39 = v69;
    if (!(_WORD)v69)
      goto LABEL_113;
  }
  v17 = v40;
LABEL_15:
  *(_WORD *)(a6 + 10) = v26;
  *(_WORD *)(a6 + 3524) = *(_WORD *)(v14 + 3578) * v26;
LABEL_16:
  usextract_ProcessEnd(a1, v16, a6);
  return v17;
}

uint64_t usextract_readFromPos(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _WORD *a5)
{
  int v10;
  uint64_t result;
  int v12;

  v12 = 0;
  *a5 = 0;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1 + 184))(a2, a3, a4, 1, (char *)&v12 + 2);
  result = 0;
  if ((v10 & 0x80000000) == 0 && HIWORD(v12) == 1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _WORD *, int *))(a1 + 168))(a2, a3, a4, 1, 1, a5, &v12);
  return result;
}

void *usextract_insertPause(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5, int a6, unsigned int a7, _DWORD *a8)
{
  char *v15;
  char *v16;
  char *v17;
  void *result;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  int *v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  int v28;
  BOOL v29;
  __int16 v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;

  v15 = (char *)(*(_QWORD *)a2 + 152);
  v16 = strstr(v15, "bet4");
  v17 = strstr(v15, "bet5");
  result = strstr(v15, "bet6");
  v19 = (unint64_t)result;
  if (a1 && *(__int16 *)(a1 + 674) < a5)
    result = memset((void *)(*(_QWORD *)(a2 + 104) + *(__int16 *)(a1 + 674)), 4, (a5 - *(__int16 *)(a1 + 674)) & ~((a5 - *(__int16 *)(a1 + 674)) >> 31));
  v20 = *a8;
  v21 = *(_DWORD *)(a2 + 3520);
  v22 = v21 - v20;
  if (v21 <= v20)
  {
    v23 = 0;
    v25 = a3;
  }
  else
  {
    v23 = 0;
    v24 = (int *)(*(_QWORD *)(a2 + 3512) + 32 * v20);
    v25 = a3;
    do
    {
      if (v24[3] - a6 > a7)
        break;
      v26 = *v24;
      v24 += 8;
      if (v26 == 8)
        ++v23;
      --v22;
    }
    while (v22);
  }
  if (a4)
    v27 = 1;
  else
    v27 = ((unint64_t)v17 | v19) == 0;
  v28 = !v27;
  if (v16)
    v29 = v23 == 0;
  else
    v29 = 1;
  if (!v29)
    v28 = 1;
  if (v25 >= 0xFFFF)
    v30 = -1;
  else
    v30 = v25;
  if (v23)
  {
    v31 = *(_QWORD *)(a2 + 3512);
    do
    {
      v32 = *(_DWORD *)(v31 + 32 * v20) == 8;
      if (a1)
        ++*(_WORD *)(*(_QWORD *)(a2 + 1800) + 2 * a5);
      LODWORD(v20) = v20 + 1;
      v23 -= v32;
    }
    while (v23);
    *a8 = v20;
  }
  if (a1)
  {
    ++*(_DWORD *)(a1 + 720);
    *(_DWORD *)(a1 + 716) = 0;
    *(_WORD *)(a1 + 682) = a5;
    *(_BYTE *)(*(_QWORD *)(a2 + 32) + a5) = 35;
    if (*(unsigned __int16 *)(a1 + 666) == (unsigned __int16)a5)
      *(_WORD *)(a1 + 666) = a5 + 1;
    if (*(unsigned __int16 *)(a1 + 668) == (unsigned __int16)a5)
      *(_WORD *)(a1 + 668) = a5 + 1;
    v33 = *(_QWORD *)(a2 + 576);
    v34 = a5 - 1;
    if (v33)
      *(_BYTE *)(v33 + a5) = *(_BYTE *)(v33 + v34);
    if (v28)
      v35 = 0;
    else
      v35 = v30;
    *(_WORD *)(*(_QWORD *)(a2 + 1784) + 2 * a5) = v35;
    *(_BYTE *)(*(_QWORD *)(a2 + 112) + v34) = 3;
    *(_BYTE *)(*(_QWORD *)(a2 + 104) + a5) = 3;
    *(_BYTE *)(a1 + 12) = 3;
    *(_BYTE *)(*(_QWORD *)(a2 + 120) + a5) = *(_BYTE *)(a1 + 14);
    *(_BYTE *)(a1 + 15) = 0;
  }
  return result;
}

uint64_t usextract_readSilDur(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t v12;
  char *__s1;
  unsigned __int16 v15;
  int v16;

  v16 = 0;
  *a5 = 0;
  if (a6)
    *a6 = 0;
  v15 = 0;
  __s1 = 0;
  v12 = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1 + 184))(a2, a3, a4, 8, (char *)&v16 + 2) & 0x80000000) == 0&& HIWORD(v16) == 1)
  {
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *, int *))(a1 + 168))(a2, a3, a4, 8, 1, &v15, &v16);
    if ((v12 & 0x80000000) != 0)
      return v12;
    *a5 = v15;
  }
  if (a6)
  {
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1 + 184))(a2, a3, a4, 18, (char *)&v16 + 2) & 0x80000000) == 0&& HIWORD(v16) == 1)
    {
      v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, int *))(a1 + 176))(a2, a3, a4, 18, &__s1, &v16);
      if ((v12 & 0x80000000) == 0 && !strcmp(__s1, "external"))
        *a6 = 1;
    }
  }
  return v12;
}

uint64_t usextract_nrOfValidPhonemes(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  unsigned __int16 v4;
  unsigned __int8 *v6;

  v6 = a2;
  skipUnvalidPhonemes(a1, &v6);
  v3 = v6;
  if (*v6)
  {
    v4 = 0;
    do
    {
      ++v4;
      v6 = v3 + 1;
      skipUnvalidPhonemes(a1, &v6);
      v3 = v6;
    }
    while (*v6);
  }
  else
  {
    return 0;
  }
  return v4;
}

uint64_t usextract_ProcessEnd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(a3 + 3512);
  if (v3)
  {
    if (*(_DWORD *)(a3 + 3520))
    {
      v6 = 0;
      v7 = 0;
      do
      {
        marker_freeParts((int *)(*(_QWORD *)(a3 + 3512) + v6), *(_QWORD **)(a1 + 8));
        ++v7;
        v6 += 32;
      }
      while (v7 < *(unsigned int *)(a3 + 3520));
      v3 = *(_QWORD *)(a3 + 3512);
    }
    heap_Free(*(_QWORD **)(a1 + 8), v3);
    *(_QWORD *)(a3 + 3512) = 0;
  }
  return 0;
}

uint64_t usextract_Process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int SentType;
  int v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  uint64_t v59;
  _DWORD *v60;
  _DWORD *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  char *v68;
  unsigned int v69;
  uint64_t v70;
  _WORD *v71;
  int v72;
  _DWORD *v73;
  int v74;
  unsigned __int16 v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  uint64_t v83;
  size_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  char *v91;
  __int16 v92;
  size_t v93;
  char *v94;
  const char *v95;
  char *v96;
  __int16 v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int16 v103;
  uint64_t v104;
  BOOL v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  int v115;
  char *v116;
  unsigned int v117;
  unsigned int v118;
  unsigned __int16 v119;
  char v120;
  unsigned __int16 v121;
  uint64_t v122;
  uint64_t WordPrm;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  _BYTE *v128;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  size_t v133;
  size_t v134;
  unsigned int v135;
  char *v136;
  int v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  unint64_t v145;
  char *v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int Index;
  int v152;
  char *v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unsigned __int16 v161;
  uint64_t v162;
  unsigned __int16 v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int v166;
  unsigned int v167;
  _DWORD *v168;
  _BOOL4 v169;
  _BOOL4 v170;
  unsigned int v171;
  uint64_t v172;
  BOOL v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  int valid;
  uint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  size_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  size_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unsigned int v198;
  unsigned int v199;
  int *v200;
  int v201;
  char *v202;
  uint64_t v203;
  BOOL v204;
  int v205;
  int v206;
  unsigned int v207;
  char v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  signed int v214;
  int v215;
  uint64_t v216;
  __int16 v217;
  int v219;
  int v220;
  int v221;
  BOOL v222;
  char v223;
  char v224;
  char v225;
  char v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unsigned int v231;
  unsigned int v232;
  _QWORD *v233;
  uint64_t v234;
  _QWORD *v235;
  uint64_t v237;
  uint64_t v238;
  int v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  const char *v243;
  int v244;
  char v245;
  char v246;
  int v247;
  unsigned int v248;
  char v250;
  uint64_t v251;
  char v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  void *v258;
  int v259;
  uint64_t v260;
  int v261;
  char v262;
  char v263;
  char v264;
  int v265;
  unsigned __int8 v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  int v271;
  char *v272;
  int v273;
  unsigned int v274;
  uint64_t v275;
  char *v276;
  char v277;
  uint64_t v278;
  uint64_t v279;
  char v280;
  int v281;
  size_t v282;
  unsigned __int8 v283;
  int v284;
  unsigned int v285;
  char v287;
  signed int v288;
  uint64_t v289;
  _DWORD *v290;
  char *v291;
  int v292;
  int v293;
  int v296;
  int v297;
  int v298;
  int v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unsigned int v303;
  _DWORD *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  int v308;
  int v309;
  uint64_t v310;
  uint64_t v311;
  BOOL v312;
  uint64_t v313;
  char *v314;
  char *v315;
  char *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  unsigned __int16 v323;
  unint64_t v324;
  int *v325;
  int v326;
  int v327;
  int v329;
  unsigned int v330;
  uint64_t v331;
  uint64_t v332;
  int v333;
  _DWORD *v334;
  uint64_t v335;
  int v336;
  __int16 v337;
  int v338;
  uint64_t v339;
  int v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v347;
  uint64_t v348;
  int v349;
  int v350;
  unsigned int v351;
  uint64_t v352;
  _BYTE *v353;
  int v354;
  _BYTE *v355;
  int v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  int v360;
  _DWORD *v361;
  uint64_t v362;
  __int16 v363;
  uint64_t v364;
  int v365;
  unsigned __int16 v366;
  uint64_t v367;
  unsigned int v368;
  uint64_t v369;
  uint64_t v370;
  int v371;
  uint64_t v372;
  char *v373;
  char *v374;
  uint64_t v375;
  __int128 v376;
  char *v377[4];
  __int128 v378;
  unsigned __int16 v379;
  int v380;
  int v381;
  uint64_t v382;
  char *__s;
  unsigned int v384;
  unsigned __int16 v385;
  int v386;
  char *v387;
  __int16 v388;
  int v389;
  int v390;
  char *__s1;
  int v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  _OWORD v397[37];
  _BYTE *v398;
  __int128 v399;
  int v400;
  __int16 v401;
  unsigned __int16 v402;
  __int16 v403;
  uint64_t v404;
  uint64_t v405;
  int v406;
  __int16 v407;
  int v408;
  int v409;
  uint64_t v410;

  v14 = 0;
  v15 = 0;
  v410 = *MEMORY[0x1E0C80C00];
  v16 = *(_QWORD *)a6;
  v386 = 0;
  v385 = 0;
  v384 = 4;
  v382 = 0;
  __s = 0;
  v381 = 0;
  v380 = 0;
  v379 = 0;
  v17 = *(__int16 *)(a6 + 10) & ~(*(__int16 *)(a6 + 10) >> 31);
  v378 = 0u;
  memset(v377, 0, sizeof(v377));
  v376 = 0u;
  memset(v397, 0, 448);
  v395 = 0u;
  v396 = 0u;
  v393 = 0u;
  v394 = 0u;
  v371 = *(unsigned __int8 *)(v16 + 2744);
  v375 = 0;
  LODWORD(v376) = 0;
  v377[3] = 0;
  *(_QWORD *)&v378 = 0x100000000;
  WORD4(v378) = -1;
  v373 = 0;
  v374 = 0;
  *((_QWORD *)&v376 + 1) = 0;
  v377[0] = 0;
  v18 = 9;
  LOWORD(v377[1]) = 0;
  do
  {
    *((_BYTE *)&v393 + v18 + 1) = curFeatTable[v14 + 2];
    if (*(_QWORD *)(a6 + 8 * v18 + 16))
      *((_WORD *)&v397[9] + v15++ + 6) = v18;
    v18 = *(unsigned __int16 *)&curFeatTable[v14 + 4];
    v14 += 4;
  }
  while (v14 != 132);
  *((_WORD *)&v397[9] + v15 + 6) = 218;
  BYTE6(v395) = 0;
  v19 = *(_QWORD **)(v16 + 3336);
  if (v19)
  {
    if (*v19)
    {
      v20 = 0;
      v21 = v19 + 1;
      while (v21[v20++])
        ;
      v23 = v20;
    }
    else
    {
      v23 = 0;
    }
    v398 = (_BYTE *)heap_Alloc(*(_QWORD *)(a1 + 8), v23);
    if (!v398)
      goto LABEL_23;
  }
  else
  {
    v398 = 0;
  }
  LOBYTE(v393) = 0;
  v408 = 0;
  v409 = 0;
  v404 = 0;
  v405 = 0;
  v406 = 0;
  v407 = -1;
  v399 = xmmword_1DEC64660;
  v400 = 0xFFFF;
  if (v17 <= 1)
  {
    log_OutPublic(*(_QWORD *)(a1 + 32), a2, 19010, 0, a5, a6, a7, a8, v348);
    v24 = 0;
    v25 = 0;
    v26 = 2229280785;
    goto LABEL_688;
  }
  if (*(__int16 *)(a6 + 14) >= 1)
  {
    v27 = (_BYTE *)heap_Alloc(*(_QWORD *)(a1 + 8), 500);
    *((_QWORD *)&v376 + 1) = v27;
    if (v27)
    {
      *v27 = 0;
      v28 = (char *)heap_Alloc(*(_QWORD *)(a1 + 8), 500);
      v377[0] = v28;
      if (v28)
      {
        *v28 = 0;
        goto LABEL_19;
      }
    }
LABEL_23:
    v26 = 2229280778;
    log_OutPublic(*(_QWORD *)(a1 + 32), a2, 19000, 0, a5, a6, a7, a8, v348);
    v24 = 0;
LABEL_24:
    v25 = 0;
    goto LABEL_688;
  }
LABEL_19:
  v369 = a5;
  v370 = a4;
  v372 = a3;
  if (!*(_QWORD *)(a6 + 456))
  {
    v24 = 0;
    v25 = 0;
    v33 = 0;
    goto LABEL_26;
  }
  v24 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, (unsigned __int16)v17 + 3);
  if (!v24)
  {
    v26 = 2229280778;
    log_OutPublic(*(_QWORD *)(a1 + 32), a2, 19000, 0, v29, v30, v31, v32, v348);
    goto LABEL_24;
  }
  v33 = (unsigned __int16)v17 + 2;
  v25 = heap_Alloc(*(_QWORD *)(a1 + 8), v33);
  if (!v25)
  {
    v26 = 2229280778;
    log_OutPublic(*(_QWORD *)(a1 + 32), a2, 19000, 0, v34, v35, v36, v37, v348);
    goto LABEL_688;
  }
LABEL_26:
  if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(a1 + 32)))
    log_OutTraceTuningData(*(uint64_t ***)(a1 + 32), 301, (uint64_t)"%s%s %s%.*s %s%s", v38, v39, v40, v41, v42, "BEG");
  SentType = usextract_GetSentType(a1, a2, v16, "\\TS\\", 0, 0, &v380);
  LOBYTE(v393) = SentType;
  BYTE14(v394) = SentType;
  memset(*(void **)(a6 + 184), 4, (unsigned __int16)v17);
  memset(*(void **)(a6 + 96), 3, (unsigned __int16)v17);
  memset(*(void **)(a6 + 248), SentType, (unsigned __int16)v17);
  if (*(_DWORD *)(v16 + 2604) == 2)
    v44 = 87;
  else
    v44 = 88;
  memset(*(void **)(a6 + 48), v44, (unsigned __int16)v17);
  v45 = *(void **)(a6 + 288);
  if (v45)
    memset(v45, 1, (unsigned __int16)v17);
  v46 = *(void **)(a6 + 312);
  if (v46)
    memset(v46, 1, (unsigned __int16)v17);
  if (!*(_DWORD *)(v16 + 2516))
  {
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v50 = *(_QWORD *)a6;
    LODWORD(v51) = *(unsigned __int16 *)(*(_QWORD *)a6 + 2966);
    if ((unsigned __int16)v17 <= 1u)
      v52 = 1;
    else
      v52 = (unsigned __int16)v17;
    do
    {
      if ((_DWORD)v51)
      {
        v53 = 0;
        v54 = 0;
        do
        {
          v55 = *(_QWORD *)(v50 + 2968) + v53;
          v56 = v48 * *(unsigned __int16 *)(*(_QWORD *)a6 + 2966);
          *(_DWORD *)(*(_QWORD *)(a6 + 3568) + 4 * (v54 + v56)) = *(_DWORD *)(v55 + 4);
          *(_DWORD *)(*(_QWORD *)(a6 + 3576) + 4 * (v54 + v56)) = *(_DWORD *)(v55 + 4);
          *(_BYTE *)(*(_QWORD *)(a6 + 3600) + v56 + v54++) = *(_BYTE *)(v55 + 10);
          v51 = *(unsigned __int16 *)(v50 + 2966);
          v53 += 32;
        }
        while (v54 < v51);
      }
      v57 = *(unsigned __int16 *)(v50 + 3360);
      if (*(_WORD *)(v50 + 3360))
      {
        v58 = (_DWORD *)(*(_QWORD *)(v50 + 3368) + 4);
        v59 = v47 * *(unsigned __int16 *)(*(_QWORD *)a6 + 3360);
        v60 = (_DWORD *)(*(_QWORD *)(a6 + 3592) + v59);
        v61 = (_DWORD *)(*(_QWORD *)(a6 + 3584) + v59);
        do
        {
          *v61++ = *v58;
          v62 = *v58;
          v58 += 3;
          *v60++ = v62;
          --v57;
        }
        while (v57);
      }
      ++v49;
      ++v48;
      v47 += 4;
    }
    while (v49 != v52);
  }
  **(_BYTE **)(a6 + 104) = 1;
  *(_BYTE *)(*(_QWORD *)(a6 + 104) + 1) = 5;
  **(_BYTE **)(a6 + 120) = 1;
  *(_BYTE *)(*(_QWORD *)(a6 + 120) + 1) = 1;
  v63 = v369;
  v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(v372 + 104))(v370, v369, 1, 0, (char *)&v386 + 2);
  if ((v64 & 0x80000000) != 0)
    goto LABEL_687;
  v65 = *(unsigned int *)(a6 + 3520);
  v351 = v33;
  if ((_DWORD)v65)
  {
    v66 = *(_QWORD *)(a6 + 3512);
    v67 = *(_DWORD *)(v66 + 12);
    v68 = strstr((char *)(*(_QWORD *)a6 + 152), "bet4");
    v69 = 0;
    v70 = 0;
    v71 = *(_WORD **)(a6 + 1800);
    v72 = (unsigned __int16)*v71;
    v73 = (_DWORD *)(v66 + 24);
    while (1)
    {
      if (*(v73 - 6) == 8)
        v69 += *v73;
      *v71 = ++v72;
      if (v65 - 1 == v70)
        break;
      v74 = v73[5];
      v73 += 8;
      ++v70;
      if (v74 != v67)
        goto LABEL_57;
    }
    LODWORD(v70) = v65;
LABEL_57:
    v356 = v67;
    HIDWORD(v382) = v70;
  }
  else
  {
    v68 = strstr((char *)(*(_QWORD *)a6 + 152), "bet4");
    v356 = 0;
    v69 = 0;
  }
  **(_BYTE **)(a6 + 32) = 35;
  if (v69 >= 0xFFFF)
    LOWORD(v69) = -1;
  if (v68)
    LOWORD(v69) = 0;
  **(_WORD **)(a6 + 1784) = v69;
  LODWORD(v382) = 0;
  v392 = 0;
  v390 = 0;
  v389 = 4;
  v388 = 0;
  v387 = 0;
  __s1 = 0;
  v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(v372 + 104))(v370, v369, 1, 0, (char *)&v392 + 2);
  if ((v64 & 0x80000000) != 0)
    goto LABEL_687;
  v361 = (_DWORD *)v16;
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, __int16 *))(v372 + 152))(v370, v369, 2, HIWORD(v392), &v388) & 0x80000000) != 0|| !v388)
  {
    goto LABEL_110;
  }
  v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(v372 + 104))(v370, v369, 2, HIWORD(v392), &v392);
  if ((v64 & 0x80000000) != 0)
  {
LABEL_687:
    v26 = v64;
    goto LABEL_688;
  }
  v75 = v392;
  if (!(_WORD)v392)
    goto LABEL_110;
  v357 = a2;
  v352 = v25;
  v367 = 0;
  LOWORD(v25) = 0;
  do
  {
    if (!(_WORD)v25)
    {
LABEL_86:
      v82 = v369;
      v83 = v370;
      v80 = v372;
      goto LABEL_87;
    }
    v76 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char *))(v372 + 168))(v370, v369, v75, 0, 1, &v389, (char *)&v390 + 2);
    if ((v76 & 0x80000000) != 0)
    {
      v26 = v76;
      v63 = v369;
      goto LABEL_103;
    }
    __s1 = 0;
    a2 = v357;
    if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, __int16 *))(v372 + 184))(v370, v369, (unsigned __int16)v25, 14, &v388) & 0x80000000) == 0&& v388 == 1)
    {
      v77 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char *))(v372 + 176))(v370, v369, (unsigned __int16)v25, 14, &__s1, (char *)&v390 + 2);
      if ((v77 & 0x80000000) != 0)
      {
        v26 = v77;
        goto LABEL_105;
      }
    }
    if ((v389 - 9) < 6)
      goto LABEL_74;
    if (v389 != 15)
    {
      if (v389 != 4)
        goto LABEL_86;
LABEL_74:
      v78 = __s1;
      if (!__s1)
        goto LABEL_86;
      v387 = __s1;
      do
      {
        if (!strncmp(__s1, "BNDSHAPE", 8uLL))
          v79 = hlp_NLUStrStrip(v78);
        else
          v79 = hlp_NLUStrNext(v78);
        v78 = v79;
        v387 = v79;
      }
      while (v79);
      hlp_NLUStrJoin(__s1, &byte_1DEBD87CE);
      v80 = v372;
      v81 = strlen(__s1);
      v82 = v369;
      v83 = v370;
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, int *))(v372 + 160))(v370, v369, (unsigned __int16)v25, 14, (unsigned __int16)(v81 + 1), __s1, &v390);
      goto LABEL_87;
    }
    if (__s1)
    {
      if (hlp_NLUStrFind(__s1, "BNDSHAPE", (uint64_t *)&v387, (unsigned __int16 *)&v390 + 1))
        goto LABEL_86;
      v84 = strlen(__s1);
      v85 = (char *)heap_Realloc(*(uint64_t **)(a1 + 8), v367, v84 + 13);
      v387 = v85;
      if (!v85)
      {
        v26 = 2229280778;
        v347 = *(_QWORD *)(a1 + 32);
        a2 = v357;
LABEL_704:
        log_OutPublic(v347, a2, 19000, 0, v86, v87, v88, v89, v348);
LABEL_105:
        v63 = v369;
        goto LABEL_107;
      }
      v90 = v85;
      v91 = strcpy(v85, __s1);
      hlp_NLUStrJoin(v91, "BNDSHAPE:L%");
      v80 = v372;
      v92 = strlen(v90);
      v82 = v369;
      v83 = v370;
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, const char *, int *))(v372 + 160))(v370, v369, (unsigned __int16)v25, 14, (unsigned __int16)(v92 + 1), v90, &v390);
      v367 = (uint64_t)v90;
    }
    else
    {
      v80 = v372;
      v82 = v369;
      v83 = v370;
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, const char *, int *))(v372 + 160))(v370, v369, (unsigned __int16)v25, 14, 12, "BNDSHAPE:L%", &v390);
    }
LABEL_87:
    v25 = (unsigned __int16)v392;
    v26 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(v80 + 120))(v83, v82, (unsigned __int16)v392, &v392);
    if ((v26 & 0x80000000) != 0)
    {
      v63 = v369;
LABEL_103:
      a2 = v357;
      goto LABEL_107;
    }
    v75 = v392;
  }
  while ((_WORD)v392);
  a2 = v357;
  if (!(_DWORD)v25)
    goto LABEL_105;
  __s1 = 0;
  v63 = v369;
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(v372 + 184))(v370, v369, v25, 14, &v388) & 0x80000000) != 0|| v388 != 1|| (v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(v372 + 176))(v370, v369, v25, 14, &__s1, (char *)&v390 + 2), (v26 & 0x80000000) == 0))
  {
    if (__s1)
    {
      if (hlp_NLUStrFind(__s1, "BNDSHAPE", (uint64_t *)&v387, (unsigned __int16 *)&v390 + 1))
        goto LABEL_107;
      v93 = strlen(__s1);
      v94 = (char *)heap_Realloc(*(uint64_t **)(a1 + 8), v367, v93 + 13);
      v387 = v94;
      if (v94)
      {
        v95 = v94;
        v96 = strcpy(v94, __s1);
        hlp_NLUStrJoin(v96, "BNDSHAPE:L%");
        v97 = strlen(v95);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, const char *, int *))(v372 + 160))(v370, v369, v25, 14, (unsigned __int16)(v97 + 1), v95, &v390);
        v98 = (uint64_t)v95;
        v63 = v369;
        v25 = v352;
        goto LABEL_108;
      }
      v26 = 2229280778;
      v347 = *(_QWORD *)(a1 + 32);
      goto LABEL_704;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const char *, int *))(v372 + 160))(v370, v369, v25, 14, 12, "BNDSHAPE:L%", &v390);
  }
LABEL_107:
  v25 = v352;
  v98 = v367;
  if (!v367)
    goto LABEL_109;
LABEL_108:
  heap_Free(*(_QWORD **)(a1 + 8), v98);
LABEL_109:
  v16 = (uint64_t)v361;
  if ((v26 & 0x80000000) != 0)
    goto LABEL_688;
LABEL_110:
  v99 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(v372 + 152))(v370, v63, 2, HIWORD(v386), (char *)&v380 + 2);
  v103 = 0;
  LOWORD(v104) = 1;
  if (v99 < 0 || !HIWORD(v380))
    goto LABEL_550;
  v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(v372 + 104))(v370, v63, 2, HIWORD(v386), &v386);
  if ((v64 & 0x80000000) != 0)
    goto LABEL_687;
  v362 = 0;
  v368 = 0;
  v350 = 0;
  if (v24)
    v105 = v25 == 0;
  else
    v105 = 1;
  v106 = v105;
  v349 = v106;
  v104 = 1;
  v358 = a2;
  v355 = (_BYTE *)v24;
  v353 = (_BYTE *)v25;
  while (2)
  {
    if (!(_WORD)v386)
    {
      v103 = v362;
LABEL_550:
      v363 = v103;
      v366 = v104;
      v296 = (__int16)v104;
      if (HIDWORD(v375))
      {
        usextract_finishPrompt((uint64_t)&v373, a1, a2, (_QWORD *)a6, (__int16)v104, v100, v101, v102);
        LOWORD(v104) = v366;
      }
      if (*(_QWORD *)(a6 + 576))
      {
        LOWORD(v297) = v104 - 1;
        do
        {
          *(_BYTE *)(*(_QWORD *)(a6 + 576) + (__int16)v297) = 5;
          v297 = (__int16)(v297 - 1);
        }
        while (v297 >= 1 && *(_BYTE *)(*(_QWORD *)(a6 + 32) + (unsigned __int16)v297) == 35);
      }
      v298 = WORD3(v399);
      v299 = SWORD4(v399);
      v300 = WORD4(v399);
      v301 = SWORD4(v399);
      if (SWORD4(v399) < (__int16)v104)
      {
        memset((void *)(*(_QWORD *)(a6 + 120) + SWORD4(v399)), 3, (v296 - SWORD4(v399)) & ~((v296 - SWORD4(v399)) >> 31));
        LOWORD(v104) = v366;
        if (*(_QWORD *)(a6 + 592))
        {
          v302 = v301;
          do
            *(_BYTE *)(*(_QWORD *)(a6 + 592) + v302++) = 5;
          while (v366 != (unsigned __int16)v302);
        }
      }
      v303 = v300 != v298;
      v204 = v299 < (__int16)v104;
      v304 = v361;
      if (v204 && ((__int16)v300 & 0x80000000) == 0 && *(_QWORD *)(a6 + 544))
      {
        v305 = v300;
        do
        {
          v306 = *(_QWORD *)(a6 + 544);
          if (*(unsigned __int8 *)(v306 + v305) > v303)
            *(_BYTE *)(v306 + v305) = v303;
          ++v305;
        }
        while ((__int16)v104 != v305);
      }
      if ((int)v301 < (__int16)v104 && ((__int16)v300 & 0x80000000) == 0 && *(_QWORD *)(a6 + 1440))
      {
        do
        {
          v307 = *(_QWORD *)(a6 + 1440);
          if (*(unsigned __int8 *)(v307 + v300) > v303)
            *(_BYTE *)(v307 + v300) = v303;
          ++v300;
        }
        while ((__int16)v104 != v300);
      }
      v308 = SWORD5(v399);
      if (SWORD5(v399) < (__int16)v104)
      {
        v309 = WORD3(v399);
        v310 = SWORD5(v399);
        memset((void *)(*(_QWORD *)(a6 + 104) + SWORD5(v399)), 5, (v296 - SWORD5(v399)) & ~((v296 - SWORD5(v399)) >> 31));
        if (*(_QWORD *)(a6 + 608))
        {
          v311 = v308;
          do
            *(_BYTE *)(*(_QWORD *)(a6 + 608) + v311++) = 5;
          while (v366 != (unsigned __int16)v311);
        }
        v312 = v309 != (unsigned __int16)v308;
        if (*(_QWORD *)(a6 + 560))
        {
          v313 = v308;
          do
            *(_BYTE *)(*(_QWORD *)(a6 + 560) + v313++) = v312;
          while (v366 != (unsigned __int16)v313);
        }
        v304 = v361;
        if (*(_QWORD *)(a6 + 1496))
        {
          do
            *(_BYTE *)(*(_QWORD *)(a6 + 1496) + v310++) = v312;
          while (v366 != (unsigned __int16)v310);
        }
      }
      usextract_updateLastStrAcc(a6, v296, SWORD6(v399), 1u);
      usextract_updateLastStrAccShp(a6, v296, SHIWORD(v399), 6u, 1u);
      if (SHIWORD(v400) >= 1)
        memset(*(void **)(a6 + 136), 1, HIWORD(v400));
      v314 = (char *)(*(_QWORD *)a6 + 152);
      v315 = strstr(v314, "bet4");
      v316 = strstr(v314, "bet5");
      v321 = HIDWORD(v382);
      v322 = *(unsigned int *)(a6 + 3520);
      if ((unint64_t)v315 | (unint64_t)v316)
      {
        v323 = v366;
        if (HIDWORD(v382) < v322)
        {
          v324 = HIDWORD(v382) + 1;
          v325 = (int *)(*(_QWORD *)(a6 + 3512) + 32 * HIDWORD(v382));
          do
          {
            v327 = *v325;
            v325 += 8;
            v326 = v327;
          }
          while (v327 != 26 && v324++ < v322);
          if (v326 == 26)
          {
            *(_BYTE *)(*(_QWORD *)(a6 + 32) + (__int16)v366) = 35;
            if (*(_QWORD *)(a6 + 576))
            {
              LOWORD(v329) = v366;
              do
              {
                *(_BYTE *)(*(_QWORD *)(a6 + 576) + (__int16)v329) = 5;
                v329 = (__int16)(v329 - 1);
              }
              while (v329 >= 1 && *(_BYTE *)(*(_QWORD *)(a6 + 32) + (unsigned __int16)v329) == 35);
            }
            *(_BYTE *)(*(_QWORD *)(a6 + 104) + (__int16)v366) = 5;
            *(_BYTE *)(*(_QWORD *)(a6 + 120) + (__int16)v366) = 3;
            *(_BYTE *)(*(_QWORD *)(a6 + 248) + (__int16)v366) = *(_BYTE *)(*(_QWORD *)(a6 + 248) + (__int16)v366 - 1);
            v323 = v366 + 1;
            LODWORD(v322) = *(_DWORD *)(a6 + 3520);
          }
        }
      }
      else
      {
        v323 = v366;
      }
      if (v321 >= v322)
      {
        v330 = 0;
        v332 = (__int16)v323;
      }
      else
      {
        v330 = 0;
        v331 = *(_QWORD *)(a6 + 1800);
        v332 = (__int16)v323;
        v333 = *(unsigned __int16 *)(v331 + 2 * (__int16)v323);
        v334 = (_DWORD *)(*(_QWORD *)(a6 + 3512) + 32 * v321);
        v335 = v322 - v321;
        do
        {
          if (*v334 == 8)
            v330 += v334[6];
          *(_WORD *)(v331 + 2 * (__int16)v323) = ++v333;
          v334 += 8;
          --v335;
        }
        while (v335);
        HIDWORD(v382) = v322;
      }
      *(_BYTE *)(*(_QWORD *)(a6 + 32) + v332) = 35;
      if (*(_QWORD *)(a6 + 576))
      {
        LOWORD(v336) = v323;
        do
        {
          *(_BYTE *)(*(_QWORD *)(a6 + 576) + (__int16)v336) = 5;
          v336 = (__int16)(v336 - 1);
        }
        while (v336 >= 1 && *(_BYTE *)(*(_QWORD *)(a6 + 32) + (unsigned __int16)v336) == 35);
      }
      if (v330 >= 0xFFFF)
        v337 = -1;
      else
        v337 = v330;
      if (v315)
        v337 = 0;
      *(_WORD *)(*(_QWORD *)(a6 + 1784) + 2 * v332) = v337;
      *(_BYTE *)(*(_QWORD *)(a6 + 104) + v332) = 5;
      *(_BYTE *)(*(_QWORD *)(a6 + 120) + v332) = 3;
      *(_BYTE *)(*(_QWORD *)(a6 + 248) + v332) = *(_BYTE *)(*(_QWORD *)(a6 + 248) + v332 - 1);
      v338 = (__int16)(v323 + 1);
      v339 = *(_QWORD *)(a6 + 456);
      if (v339 && *(unsigned __int8 *)(*(_QWORD *)(a6 + 32) + (__int16)(v323 + 1)) == *(unsigned __int8 *)(v24 + v363))
        *(_BYTE *)(v339 + (__int16)(v323 + 1)) = *(_BYTE *)(v25 + v363);
      if (*(__int16 *)(a6 + 10) < v338)
      {
        log_OutPublic(*(_QWORD *)(a1 + 32), a2, 19011, "%s%d%s%d", v317, v318, v319, v320, "allocated");
        v26 = 2229281030;
        goto LABEL_688;
      }
      *(_WORD *)(a6 + 10) = v338;
      usextract_setUnknownOnPauses(a6);
      if ((v304[776] & 0x80000000) == 0 && (v304[802] & 0x80000000) == 0)
        usextract_setNextDifferentiator((size_t)v304, a6);
      if ((v304[773] & 0x80000000) != 0)
      {
        v340 = BYTE14(v394);
        if (BYTE14(v394) == 2 && WORD5(v399) == 1 && WORD4(v399) == 1)
        {
          v340 = 0;
          BYTE14(v394) = 0;
        }
        memset(*(void **)(a6 + 248), v340, v338 & ~(v338 >> 31));
      }
      usextract_setPrePostSylBnd(a6);
      if (!v304[629] && v304[651] != 2)
        usextract_setPlosives((uint64_t)v304, a6);
      usextract_setWordPhrs(a6);
      usextract_setFineSylPosInPhrs(a6);
      usextract_finalizeSylType(a6);
      usextract_setSylPos(a6, SHIWORD(v400));
      usextract_finalizeNrSylInPhrs(a6);
      usextract_finalizePhnCntSyl(a6);
      if (*(_QWORD *)(a6 + 576))
      {
        if (!*(_QWORD *)(a6 + 1416) || !*(_QWORD *)(a6 + 1408) || (usextract_setNrSylInIP4(a6), *(_QWORD *)(a6 + 576)))
        {
          if (!*(_QWORD *)(a6 + 1456)
            || (usextract_setSylNrInIP4(a6), usextract_finalizeFineSylPosInIP4(a6), *(_QWORD *)(a6 + 576)))
          {
            if (!*(_QWORD *)(a6 + 1432)
              || !*(_QWORD *)(a6 + 1424)
              || !*(_QWORD *)(a6 + 1464)
              || !*(_QWORD *)(a6 + 1472)
              || (usextract_setSylStressedPrm(a6), *(_QWORD *)(a6 + 576)))
            {
              if (!*(_QWORD *)(a6 + 1400)
                || !*(_QWORD *)(a6 + 1480)
                || !*(_QWORD *)(a6 + 1488)
                || (usextract_setWrdBndTone(a6), *(_QWORD *)(a6 + 576)))
              {
                if (!*(_QWORD *)(a6 + 1504)
                  || !*(_QWORD *)(a6 + 1512)
                  || (usextract_setIP4PosInSent(a6), *(_QWORD *)(a6 + 576)))
                {
                  if (*(_QWORD *)(a6 + 1432))
                  {
                    if (!*(_QWORD *)(a6 + 1528)
                      || !*(_QWORD *)(a6 + 1544)
                      || !*(_QWORD *)(a6 + 1560)
                      || !*(_QWORD *)(a6 + 1576)
                      || (usextract_setRhythmRelated(a6), *(_QWORD *)(a6 + 576)))
                    {
                      if (*(_QWORD *)(a6 + 1432)
                        && *(_QWORD *)(a6 + 1520)
                        && *(_QWORD *)(a6 + 1536)
                        && *(_QWORD *)(a6 + 1552)
                        && *(_QWORD *)(a6 + 1568))
                      {
                        usextract_setRhythmRelatedBackward(a6);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (*(_QWORD *)(a6 + 568) && *(_QWORD *)(a6 + 1432) && *(_QWORD *)(a6 + 1584))
        usextract_finalizeFineSylBndShape(a6);
      if (*(_QWORD *)(a6 + 1384))
        usextract_setSylIndexInWordFromStart(a6);
      if (*(_QWORD *)(a6 + 1392))
        usextract_setSylIndexInWordFromEnd(a6);
      if (*(_QWORD *)(a6 + 304))
        usextract_setSylPosInWordRelEnd(a6);
      if (*(_QWORD *)(a6 + 296))
        usextract_setSylPosInSenRelStr(a6, (__int16)v400, v407);
      usextract_setPitchAndDurFromCart((uint64_t)v304, a6);
      if ((v304[848] & 0x80000000) == 0 || (v304[849] & 0x80000000) == 0)
        usextract_setSylTrans((uint64_t)v304, a6);
      if (v304[640])
        usextract_setSylChunk(a6);
      v64 = usextract_applyGenericContextRules((uint64_t)v304, a6);
      if ((v64 & 0x80000000) == 0)
      {
        if (*(__int16 *)(a6 + 14) >= 1 && !strstr((char *)(*(_QWORD *)a6 + 152), "bet5"))
          usextract_removePromptColumns(a6);
        usextract_setMNXfeatures(a1, a2, a6);
        if (log_GetLogLevel(*(_QWORD *)(a1 + 32)) >= 6)
          usextract_logAllFeatures(a1, a2, (uint64_t *)a6);
        v26 = 0;
        goto LABEL_688;
      }
      goto LABEL_687;
    }
    v364 = v104;
    v64 = (*(uint64_t (**)(uint64_t, uint64_t))(v372 + 168))(v370, v63);
    if ((v64 & 0x80000000) != 0)
      goto LABEL_687;
    v110 = v384;
    if (v384 - 9 >= 6)
    {
      if (v384 == 15)
      {
        usextract_handlePhraseRecord((uint64_t)&v393, v372, v370, v63, (unsigned __int16)v386, (_QWORD *)a6, (__int16)v364);
        goto LABEL_532;
      }
      if (v384 != 4)
        goto LABEL_532;
    }
    if (v384 != 11 && HIDWORD(v375))
    {
      usextract_finishPrompt((uint64_t)&v373, a1, a2, (_QWORD *)a6, (__int16)v364, v107, v108, v109);
      v350 = 1;
      v110 = v384;
    }
    LODWORD(v376) = 0;
    if (v110 != 12 && (_DWORD)v375)
    {
      LODWORD(v375) = 0;
      LODWORD(v376) = v110 == 14;
    }
    v64 = usextract_readFromPos(v372, v370, v63, (unsigned __int16)v386, &v379);
    if ((v64 & 0x80000000) != 0)
      goto LABEL_687;
    v385 = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char *))(v372 + 184))(v370, v63, (unsigned __int16)v386, 3, (char *)&v380 + 2) & 0x80000000) == 0&& HIWORD(v380) == 1)
    {
      v64 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, unsigned __int16 *))(v372 + 176))(v370, v63, (unsigned __int16)v386, 3, &__s, &v385);
      if ((v64 & 0x80000000) != 0)
        goto LABEL_687;
    }
    if (v385 > 1u)
    {
      v116 = __s;
      if (__s)
      {
        v117 = strlen(__s);
        LOWORD(__s1) = 0;
        v115 = v356;
        v368 = v117;
        if (v117)
        {
          v118 = 0;
          v119 = 0;
          v120 = 1;
          do
          {
            while (1)
            {
              v121 = v119;
              if (!v119 || v116[v119] != 42 || v116[v118 - 1] == 45)
                break;
              v120 = 0;
              v116[v119++] = 45;
              v118 = (unsigned __int16)(v121 + 1);
              if (v118 >= v117)
                goto LABEL_152;
            }
            ++v119;
            v118 = (unsigned __int16)(v121 + 1);
          }
          while (v118 < v117);
          if ((v120 & 1) == 0)
          {
LABEL_152:
            strlen(v116);
            v63 = v369;
            v64 = (*(uint64_t (**)(uint64_t))(v372 + 160))(v370);
            if ((v64 & 0x80000000) != 0)
              goto LABEL_687;
            goto LABEL_158;
          }
        }
        else
        {
          v368 = 0;
        }
        v63 = v369;
      }
      else
      {
        v115 = v356;
      }
LABEL_158:
      v114 = __s;
      goto LABEL_159;
    }
    log_OutText(*(_QWORD *)(a1 + 32), a2, 5, 0, (uint64_t)"Word record with empty phonetization, eTokenType=%d", v111, v112, v113, v384);
    v368 = v384 == 14;
    if (v384 == 14)
      v114 = "M";
    else
      v114 = 0;
    v115 = v356;
LABEL_159:
    v122 = v370;
    if (*(_QWORD *)(a6 + 536)
      && (WordPrm = usextract_readWordPrm(v372, v370, v63, (unsigned __int16)v386, (_BYTE *)v397 + 2),
          (WordPrm & 0x80000000) != 0)
      || *(_QWORD *)(a6 + 1424)
      && (WordPrm = usextract_readWordPrm(v372, v370, v63, (unsigned __int16)v386, (_BYTE *)&v397[7] + 1),
          (WordPrm & 0x80000000) != 0))
    {
LABEL_545:
      v26 = WordPrm;
LABEL_546:
      v24 = (uint64_t)v355;
      goto LABEL_548;
    }
    if (*(_QWORD *)(a6 + 3504))
    {
      v124 = (unsigned __int16)v386;
      v125 = (uint64_t)v398;
      LOWORD(v387) = 0;
      LOWORD(v389) = 0;
      __s1 = 0;
      v126 = *(_QWORD **)(v16 + 3336);
      if (*v126)
      {
        v127 = v126 + 1;
        v128 = v398;
        do
          *v128++ = 0;
        while (*v127++);
      }
      if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **))(v372 + 184))(v370, v63, v124, 14, &v387) & 0x80000000) != 0|| (unsigned __int16)v387 != 1)
      {
LABEL_183:
        a2 = v358;
        v63 = v369;
        goto LABEL_205;
      }
      v359 = v125;
      v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, int *))(v372 + 176))(v370, v369, v124, 14, &__s1, &v389);
      if ((v26 & 0x80000000) == 0 && (_WORD)v389)
      {
        v130 = __s1;
        if (!__s1)
          goto LABEL_183;
        v131 = *__s1;
        if (*__s1)
        {
          v132 = 0;
          do
          {
            if (v130[1] == 95 && memchr("SsEeIi", (char)v131, 7uLL))
            {
              v133 = strlen(v130 + 2);
              memmove(v130, v130 + 2, v133 + 1);
            }
            else if (v131 == 58 && (_BYTE)v132)
            {
              v134 = strlen(v130 + 1);
              memmove(v130 + 3, v130 + 1, v134 + 1);
              v131 = 0;
              v130[2] = 95;
              v130 += 2;
              *(v130 - 1) = v132;
            }
            else
            {
              v131 = v132;
            }
            v132 = v131;
            v135 = *++v130;
            v131 = v135;
          }
          while (v135);
          v130 = __s1;
          v16 = (uint64_t)v361;
          goto LABEL_184;
        }
        while (*v130)
        {
          v136 = v130 - 1;
          do
            v137 = *++v136;
          while (memchr(";: \t", v137, 5uLL));
          v138 = strchr(v136, 58);
          if (!v138)
          {
            log_OutPublic(*(_QWORD *)(a1 + 32), v358, 19021, "%s%s", v139, v140, v141, v142, "missing feature value");
            break;
          }
          v143 = v138;
          v144 = v138 - 1;
          do
          {
            v145 = (unint64_t)v143;
            v146 = v144;
            if (v143 <= v136)
              break;
            --v143;
            v147 = memchr(" \t", *(char *)(v145 - 1), 3uLL);
            v144 = v146 - 1;
          }
          while (v147);
          Index = usextract_getIndex(*(const char ***)(v16 + 3336), v136, v145);
          if ((Index & 0x80000000) != 0)
            log_OutText(*(_QWORD *)(a1 + 32), v358, 3, 0, (uint64_t)"unknown generic feature", v148, v149, v150, v348);
          do
            v152 = *++v146;
          while (memchr(": \t", v152, 4uLL));
          v153 = strchr(v146, 59);
          if (!v153)
            v153 = &v146[strlen(v146)];
          do
          {
            v130 = v153;
            if (v153 <= v146)
              break;
            --v153;
          }
          while (memchr(" \t", *(v130 - 1), 3uLL));
          if ((Index & 0x80000000) == 0)
          {
            v154 = usextract_getIndex(*(const char ***)(*(_QWORD *)(v16 + 3344) + 8 * Index), v146, (unint64_t)v130);
            if ((v154 & 0x80000000) != 0)
              log_OutText(*(_QWORD *)(a1 + 32), v358, 3, 0, (uint64_t)"unknown generic feature", v155, v156, v157, v348);
            else
              *(_BYTE *)(v359 + Index) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v16 + 3352) + 8 * Index) + v154);
          }
LABEL_184:
          v122 = v370;
          if (!v130)
            break;
        }
      }
      a2 = v358;
      v63 = v369;
      if ((v26 & 0x80000000) != 0)
        goto LABEL_546;
    }
LABEL_205:
    v158 = v362;
    v159 = v364;
    if (!*(_QWORD *)(a6 + 456))
      goto LABEL_228;
    v160 = (unsigned __int16)v386;
    __s1 = 0;
    HIWORD(v390) = 0;
    if (v349)
    {
      v26 = 2229280775;
      goto LABEL_546;
    }
    LOWORD(v387) = 0;
    LOWORD(v389) = 0;
    v392 = 0;
    v161 = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(v372 + 152))(v122, v63, 4, (unsigned __int16)v386, (char *)&v390 + 2) & 0x80000000) != 0|| !HIWORD(v390))
    {
      goto LABEL_222;
    }
    v162 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **))(v372 + 104))(v122, v63, 4, v160, &v387);
    if ((v162 & 0x80000000) != 0)
      goto LABEL_547;
    v162 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(v372 + 104))(v122, v63, 5, (unsigned __int16)v387, &v389);
    if ((v162 & 0x80000000) != 0)
      goto LABEL_547;
    v161 = 0;
    if (!v351 || (v163 = v389) == 0)
    {
LABEL_222:
      v158 = 0;
      v355[v161] = 0;
      if (*v355 == 35)
      {
        v159 = v364;
        v115 = v356;
        if ((__int16)v364 >= 1)
        {
          v165 = (unsigned __int16)v364 - 1;
          if (*(_BYTE *)(*(_QWORD *)(a6 + 32) + v165) == 35)
          {
            *(_BYTE *)(*(_QWORD *)(a6 + 456) + v165) = *v353;
            v158 = 1;
          }
          else
          {
            v158 = 0;
          }
        }
      }
      else
      {
        v115 = v356;
        v159 = v364;
      }
LABEL_228:
      v362 = v158;
      if (!v114 || !*v114)
        goto LABEL_261;
      v166 = *(_DWORD *)(a6 + 3520);
      if (v166 > HIDWORD(v382))
      {
        v167 = v166 - HIDWORD(v382);
        v168 = (_DWORD *)(*(_QWORD *)(a6 + 3512) + 32 * HIDWORD(v382));
        while (v168[3] - v115 <= v379)
        {
          if (*v168 == 26)
          {
            if (v375 | v376)
              break;
            v170 = (__int16)v159 > 1;
            v169 = v384 != 14;
            v171 = v382;
            if (v384 != 14 && (_DWORD)v382 == 0 && (__int16)v159 >= 2)
            {
              v171 = 5;
              LODWORD(v382) = 5;
              v170 = 1;
              v381 = 1;
              v169 = 1;
            }
            goto LABEL_238;
          }
          v168 += 8;
          if (!--v167)
            break;
        }
      }
      v169 = 0;
      v170 = (__int16)v159 > 1;
      v171 = v382;
LABEL_238:
      v172 = (__int16)v159;
      if (v171)
        v173 = !v170;
      else
        v173 = 1;
      if (v173)
      {
        if (v350 && (__int16)v159 >= 1 && !*(_DWORD *)(v16 + 2692))
          *(_DWORD *)(*(_QWORD *)(a6 + 3608)
                    + ((uint64_t)(((unint64_t)((__int16)v159 * *(unsigned __int16 *)(v16 + 3578)) << 32)
                               - 0x100000000) >> 30)) = -1;
      }
      else
      {
        usextract_insertPause((uint64_t)&v393, a6, v171, v381, (__int16)v159, v115, v379, (_DWORD *)&v382 + 1);
        v174 = *(_QWORD *)(a6 + 456);
        if (v174 && *(unsigned __int8 *)(*(_QWORD *)(a6 + 32) + v172) == v355[(__int16)v362])
        {
          *(_BYTE *)(v174 + v172) = v353[(__int16)v362];
          v362 = (v362 + 1);
        }
        v175 = v364;
        if ((_DWORD)v375 && *(_WORD *)(v16 + 3578))
        {
          memset_pattern16((void *)(*(_QWORD *)(a6 + 3608) + 4 * (int)v172 * (unint64_t)*(unsigned __int16 *)(v16 + 3578)), &unk_1DEC64670, 4 * *(unsigned __int16 *)(v16 + 3578));
          v175 = v364;
        }
        v159 = (v175 + 1);
      }
      if (!v169)
      {
        v350 = 0;
LABEL_261:
        v360 = 0;
        goto LABEL_262;
      }
      v176 = v159;
      v177 = (char *)(*(_QWORD *)a6 + 152);
      if (strstr(v177, "bet4") || strstr(v177, "bet5"))
      {
        usextract_insertPause((uint64_t)&v393, a6, 5u, 1, (__int16)v176, v115, v379, (_DWORD *)&v382 + 1);
        v178 = *(_QWORD *)(a6 + 456);
        if (v178)
        {
          v179 = v176;
          if (*(unsigned __int8 *)(*(_QWORD *)(a6 + 32) + (__int16)v176) == v355[(__int16)v362])
          {
            *(_BYTE *)(v178 + (__int16)v176) = v353[(__int16)v362];
            v362 = (v362 + 1);
          }
        }
        else
        {
          v179 = v176;
        }
        v350 = 0;
        v159 = (v179 + 1);
        v360 = 1;
      }
      else
      {
        v350 = 0;
        v360 = 1;
        v159 = v176;
      }
LABEL_262:
      v364 = v159;
      v354 = (__int16)v159;
      if (v384 != 11)
      {
        if (v384 == 14)
        {
          LODWORD(v375) = 1;
          goto LABEL_293;
        }
        if (v384 != 13)
          goto LABEL_293;
      }
      v356 = v115;
      HIDWORD(v375) = 1;
      v180 = (unsigned __int16)v386;
      v181 = *(_QWORD *)a6;
      LOWORD(v387) = 0;
      LOWORD(v389) = 0;
      LODWORD(__s1) = 0;
      WordPrm = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(v372 + 176))(v122, v63, (unsigned __int16)v386, 16, &v377[3], &v389);
      if ((WordPrm & 0x80000000) != 0)
        goto LABEL_545;
      WordPrm = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char **))(v372 + 176))(v122, v63, v180, 15, &v374, &v387);
      if ((WordPrm & 0x80000000) != 0)
        goto LABEL_545;
      valid = usextract_nrOfValidPhonemes(v181, (unsigned __int8 *)v374);
      v183 = v122;
      v184 = valid;
      WordPrm = usextract_readSilDur(v372, v183, v63, v180, &__s1, 0);
      if ((WordPrm & 0x80000000) != 0)
        goto LABEL_545;
      v188 = *(unsigned __int16 *)(v181 + 3578);
      if (!(_DWORD)__s1)
      {
        v189 = (unsigned __int16)v389;
        a2 = v358;
LABEL_273:
        LODWORD(v378) = 0;
        if (v188 * v184 != (_DWORD)v189)
        {
          log_OutText(*(_QWORD *)(a1 + 32), a2, 3, 0, (uint64_t)"Warning (incoherent prompt): %d segment ids for %d valid phones", v185, v186, v187, v189);
          HIDWORD(v377[1]) = 1;
          DWORD1(v378) = 0;
        }
        goto LABEL_275;
      }
      v189 = (unsigned __int16)v389;
      a2 = v358;
      if (v188 + v188 * v184 != (unsigned __int16)v389)
        goto LABEL_273;
      LODWORD(v378) = 1;
LABEL_275:
      v373 = v374;
      skipUnvalidPhonemes(v181, (unsigned __int8 **)&v374);
      if (v384 == 13)
        usextract_startNewPrompt((uint64_t)&v373, (uint64_t *)a6, (unsigned __int8 *)v114, v354);
      v63 = v369;
      if (v377[0] && v373)
      {
        v190 = strlen(v377[0]);
        if (strlen(v373) + v190 > 0x1EF)
        {
          if (v190 <= 0x1EF)
            *(_DWORD *)&v377[0][strlen(v377[0])] = 3026478;
          log_OutText(*(_QWORD *)(a1 + 32), a2, 3, 0, (uint64_t)"prompt too long for logging", v191, v192, v193, v348);
        }
        else
        {
          strcat(v377[0], v373);
        }
        v63 = v369;
      }
      v122 = v370;
      if (v114 && *((_QWORD *)&v376 + 1))
      {
        v194 = strlen(*((const char **)&v376 + 1));
        if (strlen(v114) + v194 > 0x1EF)
        {
          if (v194 <= 0x1EF)
            *(_DWORD *)(*((_QWORD *)&v376 + 1) + strlen(*((const char **)&v376 + 1))) = 3026478;
          log_OutText(*(_QWORD *)(a1 + 32), a2, 3, 0, (uint64_t)"phon too long for prompt logging", v195, v196, v197, v348);
        }
        else
        {
          strcat(*((char **)&v376 + 1), v114);
        }
        v63 = v369;
      }
LABEL_293:
      WordPrm = usextract_readSilDur(v372, v122, v63, (unsigned __int16)v386, &v382, &v381);
      if ((WordPrm & 0x80000000) != 0)
        goto LABEL_545;
      v198 = *(_DWORD *)(a6 + 3520);
      v199 = HIDWORD(v382);
      if (HIDWORD(v382) >= v198)
        goto LABEL_309;
      v200 = (int *)(*(_QWORD *)(a6 + 3512) + 32 * HIDWORD(v382) + 12);
      while (1)
      {
        v201 = *v200;
        v200 += 8;
        if (v201 - v115 > v379)
          break;
        if (!v360)
          goto LABEL_300;
        v202 = (char *)(*(_QWORD *)a6 + 152);
        if (!strstr(v202, "bet4"))
        {
          if (strstr(v202, "bet5"))
            v204 = v354 <= 0;
          else
            v204 = 1;
          v203 = (unsigned __int16)v364 - 1;
          if (!v204)
            goto LABEL_301;
LABEL_300:
          v203 = (__int16)v364;
          goto LABEL_301;
        }
        v203 = (unsigned __int16)v364 - 1;
        if (v354 <= 0)
          goto LABEL_300;
LABEL_301:
        ++*(_WORD *)(*(_QWORD *)(a6 + 1800) + 2 * v203);
        if (v198 == ++v199)
        {
          v199 = v198;
          break;
        }
      }
      a2 = v358;
      v16 = (uint64_t)v361;
LABEL_309:
      HIDWORD(v382) = v199;
      v205 = v371;
      if (!v114)
        goto LABEL_531;
      v63 = v369;
      if (*v114)
      {
        usextract_handleWordStart((uint64_t)&v393, (_QWORD *)a6, v114, v354);
        if (*(_QWORD *)(a6 + 280))
        {
          v206 = 0;
          do
          {
            v207 = v114[v206];
            if (v207 <= 0x2D && ((1 << v207) & 0x200800000001) != 0)
              break;
            v209 = v207 - 49;
            if ((v207 - 49) < 4u)
              goto LABEL_321;
            ++v206;
          }
          while (v207 != 53);
          v209 = 0;
LABEL_321:
          BYTE2(v395) = v209;
        }
        usextract_handleBoundaryShape((uint64_t)&v393, (_QWORD *)v16);
        LOWORD(v380) = 0;
        if (v368)
        {
          v214 = 0;
          v215 = 0;
          v216 = v364;
          while (1)
          {
            if (!v205)
              goto LABEL_361;
            if (v401 == -1)
            {
              v220 = 0;
            }
            else
            {
              v217 = v402;
              if ((__int16)v402 == -1 || v214 <= (__int16)v402)
              {
                if (v214 > v403)
                {
                  LOWORD(v220) = v403;
                  v219 = 1;
                  goto LABEL_351;
                }
                goto LABEL_361;
              }
              v220 = v402;
            }
            v401 = v220;
            v217 = v220;
            do
            {
              v402 = ++v217;
              v221 = v114[v217];
              if (v114[v217])
                v222 = v205 == v221;
              else
                v222 = 1;
            }
            while (!v222);
            v219 = 0;
            if (v220)
              v223 = 2;
            else
              v223 = 1;
            if (v220)
              v224 = 3;
            else
              v224 = 0;
            if (v205 == v221)
              v225 = v223;
            else
              v225 = v224;
            BYTE9(v397[9]) = v225;
            v403 = v220;
            if (v114[(__int16)v220 + 1] == 45)
              LOWORD(v220) = v220 + 1;
            while (1)
            {
LABEL_351:
              LOWORD(v220) = v220 + 1;
              v403 = v220;
              if (!v114[(__int16)v220])
              {
LABEL_354:
                if (v219)
                  v226 = 3;
                else
                  v226 = 0;
                goto LABEL_360;
              }
              if (v114[(__int16)v220] == 45)
                break;
              if ((__int16)v220 >= v217)
                goto LABEL_354;
            }
            if (v219)
              v226 = 2;
            else
              v226 = 1;
LABEL_360:
            BYTE10(v397[9]) = v226;
LABEL_361:
            v227 = &v114[(unsigned __int16)v215];
            v228 = *v227;
            v229 = *(_QWORD *)a6;
            if (*(unsigned __int8 *)(v16 + v228 + 2144) == 255)
            {
              LOWORD(__s1) = 0;
              switch((char)v228)
              {
                case '"':
                  if (WORD4(v399) != (unsigned __int16)v216)
                  {
                    v260 = v216;
                    log_OutPublic(*(_QWORD *)(a1 + 32), a2, 19013, "%s%s", v210, v211, v212, v213, "word");
                    v216 = v260;
                  }
                  v261 = v408++;
                  BYTE10(v393) = 3;
                  LOWORD(v400) = v216;
                  BYTE3(v395) = 2;
                  if (BYTE4(v394) <= 1u)
                    BYTE4(v394) = 2;
                  if (BYTE4(v397[7]) <= 2u)
                  {
                    if (BYTE1(v397[7]) <= 1u)
                      v262 = 3;
                    else
                      v262 = 4;
                    BYTE4(v397[7]) = v262;
                  }
                  if (v407 == -1)
                    v407 = v216;
                  if (v409)
                    v263 = 4;
                  else
                    v263 = 3;
                  if (v261)
                    v264 = 2;
                  else
                    v264 = v263;
                  BYTE3(v394) = v264;
                  v265 = BYTE2(v397[0]);
                  if (BYTE2(v397[0]) != 3)
                    goto LABEL_446;
                  goto LABEL_440;
                case '#':
                case '$':
                case '%':
                case '&':
                case '(':
                case ')':
                case '*':
                case '+':
                case ',':
                case '.':
                case '/':
                case '0':
                  goto LABEL_397;
                case '\'':
                  if (WORD4(v399) != (unsigned __int16)v216)
                  {
                    v267 = v216;
                    log_OutPublic(*(_QWORD *)(a1 + 32), a2, 19014, "%s%s", v210, v211, v212, v213, "word");
                    v216 = v267;
                  }
                  BYTE10(v393) = 2;
                  LOWORD(v400) = v216;
                  BYTE3(v395) = 2;
                  if (v407 == -1)
                    v407 = v216;
                  BYTE3(v394) = 1;
                  v265 = BYTE2(v397[0]);
                  if (BYTE2(v397[0]) == 3)
                  {
LABEL_440:
                    v266 = 0;
                  }
                  else
                  {
LABEL_446:
                    if (v265 == 2)
                    {
                      if (HIDWORD(v404))
                      {
                        if ((_DWORD)v404)
                          v266 = 5;
                        else
                          v266 = 4;
                      }
                      else
                      {
                        v266 = 3;
                      }
                    }
                    else
                    {
                      v266 = 6;
                    }
                  }
                  BYTE4(v397[0]) = v266;
                  switch(BYTE1(v397[7]))
                  {
                    case 4u:
                      v283 = 0;
                      break;
                    case 3u:
                      if (HIDWORD(v405))
                      {
                        if ((_DWORD)v405)
                          v283 = 5;
                        else
                          v283 = 4;
                      }
                      else
                      {
                        v283 = 3;
                      }
                      break;
                    case 2u:
                      if (HIDWORD(v405))
                      {
                        if ((_DWORD)v405)
                          v283 = 10;
                        else
                          v283 = 9;
                      }
                      else
                      {
                        v283 = 8;
                      }
                      break;
                    default:
                      v283 = 11;
                      break;
                  }
                  BYTE2(v397[7]) = v283;
                  if (v266 <= 5u)
                  {
                    v404 = 0x100000001;
                    WORD6(v399) = v216;
                  }
                  if (v283 <= 0xAu)
                  {
                    v405 = 0x100000001;
                    HIWORD(v399) = v216;
                  }
                  goto LABEL_414;
                case '-':
                  if (WORD4(v399) == (unsigned __int16)v216)
                  {
                    v268 = v216;
                    log_OutPublic(*(_QWORD *)(a1 + 32), a2, 19019, "%s%s", v210, v211, v212, v213, "word");
                    v216 = v268;
                    goto LABEL_414;
                  }
                  WORD4(v399) = v216;
                  v275 = (__int16)v216 - 1;
                  *(_BYTE *)(*(_QWORD *)(a6 + 112) + v275) = 1;
                  BYTE10(v393) = 0;
                  BYTE6(v394) = 1;
                  if (BYTE6(v395) != 255)
                    ++BYTE6(v395);
                  v254 = v216;
                  if (HIBYTE(v393) != 255)
                    ++HIBYTE(v393);
                  v276 = &v114[(unsigned __int16)v215 + 1];
                  if (strchr(v276, 45))
                    v277 = 2;
                  else
                    v277 = 3;
                  BYTE11(v393) = v277;
                  BYTE7(v394) = 0;
                  BYTE14(v393) = 2;
                  BYTE3(v394) = 0;
                  BYTE3(v397[0]) = 12;
                  BYTE3(v397[7]) = 12;
                  BYTE6(v397[0]) = 1;
                  BYTE8(v397[0]) = 1;
                  BYTE14(v397[0]) = 1;
                  v278 = *(_QWORD *)(a6 + 576);
                  if (v278)
                    *(_BYTE *)(v278 + v275) = 1;
                  if ((_WORD)v215)
                  {
                    v279 = *(_QWORD *)(a6 + 184);
                    if (*(_BYTE *)(v279 + v275) == 2)
                      *(_BYTE *)(v279 + v275) = 3;
                  }
                  BYTE4(v397[0]) = 8;
                  BYTE2(v397[7]) = 13;
                  if (BYTE3(v395) == 2)
                    BYTE3(v395) = 1;
                  if (BYTE4(v394) == 2)
                  {
                    v280 = 3;
                  }
                  else
                  {
                    if (BYTE4(v394) != 3)
                      goto LABEL_507;
                    v280 = 4;
                  }
                  BYTE4(v394) = v280;
LABEL_507:
                  if ((BYTE4(v397[7]) - 3) <= 3u)
                    BYTE4(v397[7]) += 2;
                  if (!*(_QWORD *)(a6 + 280))
                    goto LABEL_520;
                  v284 = 0;
                  do
                  {
                    v285 = v276[v284];
                    if (v285 <= 0x2D && ((1 << v285) & 0x200800000001) != 0)
                      break;
                    v287 = v285 - 49;
                    if ((v285 - 49) < 4u)
                      goto LABEL_519;
                    ++v284;
                  }
                  while (v285 != 53);
                  v287 = 0;
LABEL_519:
                  BYTE2(v395) = v287;
LABEL_520:
                  if (*v276 == 42)
                  {
                    log_OutPublic(*(_QWORD *)(a1 + 32), a2, 19016, "%s%s", v210, v211, v212, v213, "word");
                    LOWORD(v380) = ++v215;
                  }
LABEL_399:
                  v216 = v254;
                  goto LABEL_414;
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                  if (!*(_QWORD *)(a6 + 280))
                    goto LABEL_397;
                  v247 = 0;
                  break;
                default:
                  if ((char)v228 == 96)
                  {
                    if (WORD4(v399) != (unsigned __int16)v216)
                    {
                      v269 = v216;
                      log_OutPublic(*(_QWORD *)(a1 + 32), a2, 19015, "%s%s", v210, v211, v212, v213, "word");
                      v216 = v269;
                    }
                    BYTE10(v393) = 1;
                    BYTE3(v394) = 7;
                    BYTE4(v397[0]) = 7;
                    BYTE2(v397[7]) = 12;
                  }
                  else
                  {
                    if ((char)v228 != 92)
                    {
LABEL_397:
                      v254 = v216;
                      if (!strchr((char *)(v229 + 2400), (char)v228))
                        log_OutPublic(*(_QWORD *)(a1 + 32), a2, 19012, "%s%d%s%s", v210, v211, v212, v213, "phoneme");
                      goto LABEL_399;
                    }
                    v251 = v216;
                    v252 = usextract_GetSentType(a1, a2, v229, v227, v393, 1, &__s1);
                    v216 = v251;
                    BYTE14(v394) = v252;
                    v253 = (unsigned __int16)__s1 - 1;
                    if ((unsigned __int16)__s1 <= 1u)
                      v253 = 1;
                    v215 = v253 + (unsigned __int16)v380;
                  }
                  goto LABEL_414;
              }
              do
              {
                v248 = v114[(unsigned __int16)v215 + 1 + v247];
                if (v248 <= 0x2D && ((1 << v248) & 0x200800000001) != 0)
                  break;
                v250 = v248 - 49;
                if ((v248 - 49) < 4u)
                  goto LABEL_389;
                ++v247;
              }
              while (v248 != 53);
              v250 = 0;
LABEL_389:
              BYTE2(v395) = v250;
              goto LABEL_414;
            }
            if (BYTE7(v394) != 255)
            {
              ++BYTE7(v394);
              LOBYTE(v228) = *v227;
            }
            v230 = (__int16)v216;
            *(_BYTE *)(*(_QWORD *)(a6 + 32) + (__int16)v216) = v228;
            v231 = WORD6(v397[9]);
            if (WORD6(v397[9]) != 218)
            {
              v232 = 1;
              do
              {
                *(_BYTE *)(*(_QWORD *)(a6 + 8 * v231 + 16) + (__int16)v216) = *((_BYTE *)&v393 + v231 + 1);
                v231 = *((unsigned __int16 *)&v397[9] + v232++ + 6);
              }
              while (v231 != 218);
            }
            v233 = *(_QWORD **)(*(_QWORD *)a6 + 3336);
            if (v233 && *v233)
            {
              v234 = 0;
              v235 = v233 + 1;
              do
                *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a6 + 3504) + 8 * v234) + (__int16)v216) = v398[v234];
              while (v235[v234++]);
            }
            v237 = *(_QWORD *)(a6 + 264);
            if (v237)
            {
              v238 = v214 + 1;
              if (v238 < v368)
              {
                v239 = v216;
                v240 = strchr((char *)(v229 + 2400), v114[v238]);
                LODWORD(v216) = v239;
                if (v240)
                  *(_BYTE *)(v237 + v230) = (_BYTE)v240 - (v229 + 96) + 1;
              }
              v241 = *(_QWORD *)(a6 + 272);
              if (v241)
              {
                v242 = v230 - 1;
                if (*(_BYTE *)(*(_QWORD *)(a6 + 32) + v230 - 1) == 35)
                {
                  v243 = (const char *)(v229 + 2400);
                  v244 = v216;
                  v245 = strlen(v243);
                  LODWORD(v216) = v244;
                  v246 = v245 + 1;
                }
                else if (*(_BYTE *)(*(_QWORD *)(a6 + 112) + v242))
                {
                  v246 = *(_BYTE *)(*(_QWORD *)(a6 + 264) + v242);
                }
                else
                {
                  v246 = *(_BYTE *)(v241 + v242);
                }
                *(_BYTE *)(v241 + v230) = v246;
              }
            }
            if (BYTE6(v394) <= 1u)
              BYTE6(v394) = 2;
            BYTE6(v397[0]) = 0;
            v255 = *(_QWORD *)(a6 + 456);
            v16 = (uint64_t)v361;
            if (v255 && *(unsigned __int8 *)(*(_QWORD *)(a6 + 32) + v230) == v355[(__int16)v362])
            {
              *(_BYTE *)(v255 + v230) = v353[(__int16)v362];
              v362 = (v362 + 1);
            }
            v256 = *(_QWORD *)a6;
            if ((_DWORD)v375)
            {
              v257 = *(unsigned __int16 *)(v256 + 3578);
              if (*(_WORD *)(v256 + 3578))
              {
                v258 = (void *)(*(_QWORD *)(a6 + 3608)
                              + 4 * (int)v230 * (unint64_t)*(unsigned __int16 *)(v256 + 3578));
                v259 = v216;
                memset_pattern16(v258, &unk_1DEC64670, 4 * v257);
                LODWORD(v216) = v259;
              }
            }
            else if (HIDWORD(v375))
            {
              if (!LOBYTE(v377[1]))
              {
                if (HIDWORD(v377[1]))
                  goto LABEL_417;
                v270 = *(_QWORD *)(a6 + 32);
                v271 = *(unsigned __int8 *)(v270 + v230);
                v272 = v374;
                v273 = *v374;
                if (v271 != 35 && v273 == 35)
                {
                  v365 = v216;
                  do
                  {
                    v374 = v272 + 1;
                    skipUnvalidPhonemes(v256, (unsigned __int8 **)&v374);
                    v272 = v374;
                    v377[3] += 4 * *(unsigned __int16 *)(v256 + 3578);
                    v273 = *v374;
                  }
                  while (v273 == 35);
                  v271 = *(unsigned __int8 *)(v270 + v230);
                  LODWORD(v216) = v365;
                }
                if (v271 == v273)
                {
                  if (!HIDWORD(v377[1]))
                  {
                    if (LODWORD(v377[2]))
                    {
                      LODWORD(v377[2]) = 0;
                      v274 = *(unsigned __int16 *)(v256 + 3578);
                    }
                    else
                    {
                      v274 = *(unsigned __int16 *)(v256 + 3578);
                      *(_DWORD *)(*(_QWORD *)(a6 + 3608) + 4 * *(unsigned __int16 *)(v256 + 3578) * (uint64_t)(int)v230) = *(_DWORD *)v377[3];
                    }
                    if (v274 >= 2)
                    {
                      v288 = v274;
                      v289 = v274 - 1;
                      v290 = (_DWORD *)(*(_QWORD *)(a6 + 3608) + 4 * (int)v230 * (uint64_t)v288 + 4);
                      v291 = v377[3] + 4;
                      do
                      {
                        v292 = *(_DWORD *)v291;
                        v291 += 4;
                        *v290++ = v292;
                        --v289;
                      }
                      while (v289);
                    }
                    if (*v272)
                    {
                      v374 = v272 + 1;
                      v293 = v216;
                      skipUnvalidPhonemes(v256, (unsigned __int8 **)&v374);
                      LODWORD(v216) = v293;
                      v377[3] += 4 * *(unsigned __int16 *)(v256 + 3578);
                    }
                    goto LABEL_413;
                  }
                }
                else
                {
                  HIDWORD(v377[1]) = 1;
                  v281 = v216;
                  v282 = strlen(v272);
                  LODWORD(v216) = v281;
                  if (v282 > 1)
LABEL_417:
                    DWORD1(v378) = 0;
                }
                if ((__int16)v216 >= 1 && *(_BYTE *)(*(_QWORD *)(a6 + 32) + v230) != 35 && !*(_DWORD *)(v256 + 2692))
                  *(_DWORD *)(*(_QWORD *)(a6 + 3608)
                            + ((uint64_t)(((unint64_t)(v230 * *(unsigned __int16 *)(v256 + 3578)) << 32)
                                       - 0x100000000) >> 30)) = -1;
                goto LABEL_413;
              }
              --LOBYTE(v377[1]);
            }
LABEL_413:
            v216 = (v216 + 1);
            v205 = v371;
LABEL_414:
            LOWORD(v380) = ++v215;
            v214 = (unsigned __int16)v215;
            if (v368 <= (unsigned __int16)v215)
              goto LABEL_530;
          }
        }
        v216 = v364;
LABEL_530:
        v364 = v216;
        usextract_handleWordEnd((uint64_t)&v373, (uint64_t)&v393, a1, a2, (_QWORD *)a6, (uint64_t)v114, (__int16)v216, v213);
LABEL_531:
        v24 = (uint64_t)v355;
        v25 = (uint64_t)v353;
        v63 = v369;
        goto LABEL_532;
      }
      v24 = (uint64_t)v355;
      v25 = (uint64_t)v353;
LABEL_532:
      v64 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(v372 + 120))(v370, v63, (unsigned __int16)v386, &v386);
      v104 = v364;
      if ((v64 & 0x80000000) != 0)
        goto LABEL_687;
      continue;
    }
    break;
  }
  v161 = 0;
  while (1)
  {
    v162 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, char **, int *))(v372 + 176))(v122, v63, v163, 0, &__s1, &v392);
    if ((v162 & 0x80000000) != 0)
      break;
    if (__s1)
    {
      v164 = *__s1;
      if (v164 == 35 || *(unsigned __int8 *)(v16 + v164 + 2144) != 255)
      {
        v162 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(v372 + 168))(v122, v63, (unsigned __int16)v389, 1, 1, (char *)&v392 + 2, &v392);
        if ((v162 & 0x80000000) != 0)
          break;
        v355[v161] = *__s1;
        v353[v161++] = BYTE2(v392);
      }
    }
    (*(void (**)(uint64_t, uint64_t, _QWORD, int *))(v372 + 112))(v122, v63, (unsigned __int16)v389, &v389);
    v163 = v389;
    if (!(_WORD)v389 || v351 <= v161)
      goto LABEL_222;
  }
LABEL_547:
  v26 = v162;
  v24 = (uint64_t)v355;
  *v355 = 0;
LABEL_548:
  v25 = (uint64_t)v353;
LABEL_688:
  if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(a1 + 32)))
    log_OutTraceTuningData(*(uint64_t ***)(a1 + 32), 301, (uint64_t)"%s%s %s%.*s", v341, v342, v343, v344, v345, "END");
  if (*((_QWORD *)&v376 + 1))
    heap_Free(*(_QWORD **)(a1 + 8), *((uint64_t *)&v376 + 1));
  if (v377[0])
    heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v377[0]);
  if (v24)
    heap_Free(*(_QWORD **)(a1 + 8), v24);
  if (v25)
    heap_Free(*(_QWORD **)(a1 + 8), v25);
  if (v398)
    heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v398);
  return v26;
}

uint64_t usextract_GetSentType(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, unsigned __int8 a5, int a6, _WORD *a7)
{
  __int16 v10;
  const char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 v20;
  const char **v21;
  const char *v22;
  unsigned __int8 v23;
  size_t v24;

  *a7 = 0;
  if (*a4 != 92)
    return a5;
  v10 = (__int16)a4;
  v14 = a4 + 1;
  v15 = strchr(a4 + 1, 92);
  if (!v15)
    return a5;
  *a7 = (_WORD)v15 - v10 + 1;
  if ((unsigned __int16)((_WORD)v15 - v10 + 1) < 3u || *v14 == 47)
    return a5;
  v20 = (_WORD)v15 - v10 - 1;
  if ((*(_DWORD *)(a3 + 3092) & 0x80000000) == 0)
  {
    v21 = *(const char ***)(a3 + 2464);
    v22 = *v21;
    if (*v21)
    {
      v23 = 0;
      v24 = v20;
      while (strncmp(v22, v14, v24) || v22[v24])
      {
        v22 = v21[++v23];
        if (!v22)
          goto LABEL_11;
      }
      return v23;
    }
    else
    {
LABEL_11:
      if (a6)
        log_OutText(*(_QWORD *)(a1 + 32), a2, 3, 0, (uint64_t)"Internal tag doesn't match the voice's tag alphabet, tag = %s", v17, v18, v19, (uint64_t)v14);
    }
    return a5;
  }
  if ((unsigned __int16)((_WORD)v15 - v10 - 1) != 2)
  {
LABEL_18:
    if (a6)
      log_OutPublic(*(_QWORD *)(a1 + 32), a2, 19018, "%s%.*s", v16, v17, v18, v19, "tag");
    return 2;
  }
  if (!strncmp(v14, "TM", 2uLL))
    return 0;
  if (!strncmp(v14, "TQ", 2uLL))
    return 1;
  a5 = 2;
  if (strncmp(v14, "TS", 2uLL))
  {
    if (!strncmp(v14, "TW", 2uLL))
      return 3;
    goto LABEL_18;
  }
  return a5;
}

uint64_t usextract_finishPrompt(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v12 = result;
  if (*(_QWORD *)(result + 32) && *(_QWORD *)(result + 40))
  {
    result = log_HasTraceTuningDataSubscriber(*(_QWORD *)(a2 + 32));
    if ((_DWORD)result)
    {
      log_OutTraceTuningData(*(uint64_t ***)(a2 + 32), 302, (uint64_t)"%s%s %s%s %s%s", v13, v14, a6, a7, a8, "BEG");
      result = log_OutTraceTuningData(*(uint64_t ***)(a2 + 32), 302, (uint64_t)"%s%s %s%s", v15, v16, v17, v18, v19, "END");
    }
    if (!*(_DWORD *)(v12 + 76))
    {
      log_OutText(*(_QWORD *)(a2 + 32), a3, 3, 0, (uint64_t)"    Warning: no match, conflicting phonetics", a6, a7, a8, v32);
      log_OutText(*(_QWORD *)(a2 + 32), a3, 3, 0, (uint64_t)"    Carrier:  %s", v20, v21, v22, *(_QWORD *)(v12 + 40));
      result = log_OutText(*(_QWORD *)(a2 + 32), a3, 3, 0, (uint64_t)"    Phonemes: %s", v23, v24, v25, *(_QWORD *)(v12 + 32));
    }
  }
  if (!*(_DWORD *)(v12 + 76))
  {
    v26 = *(__int16 *)(v12 + 80);
    if (v26 == -1)
    {
      result = log_OutText(*(_QWORD *)(a2 + 32), a3, 3, 0, (uint64_t)"    Warning: uninitialized prompt", a6, a7, a8, v32);
    }
    else if ((int)v26 < a5)
    {
      v27 = *(unsigned __int16 *)(*a4 + 3578);
      v28 = (unint64_t)(v26 * v27) << 32;
      do
      {
        if ((_DWORD)v27)
        {
          v29 = a4[451];
          v30 = v28;
          v31 = v27;
          do
          {
            result = v30 >> 30;
            *(_DWORD *)(v29 + (v30 >> 30)) = -1;
            v30 += 0x100000000;
            --v31;
          }
          while (v31);
        }
        ++v26;
        v28 += v27 << 32;
      }
      while (v26 != a5);
    }
  }
  *(_DWORD *)(v12 + 76) = 1;
  *(_DWORD *)(v12 + 52) = 0;
  *(_DWORD *)(v12 + 20) = 0;
  return result;
}

uint64_t usextract_readWordPrm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v10;
  char *v12;
  int v13;

  v13 = 0;
  v12 = 0;
  *a5 = 0;
  v10 = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1 + 184))(a2, a3, a4, 13, (char *)&v13 + 2) & 0x80000000) == 0&& HIWORD(v13) == 1)
  {
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, int *))(a1 + 176))(a2, a3, a4, 13, &v12, &v13);
    if ((v10 & 0x80000000) == 0)
      *a5 = atoi(v12);
  }
  return v10;
}

uint64_t usextract_startNewPrompt(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, int a4)
{
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 **v10;
  uint64_t result;
  int v12;

  v8 = *a2;
  *(_WORD *)(a1 + 80) = a4;
  **(_BYTE **)(a1 + 40) = 0;
  **(_BYTE **)(a1 + 32) = 0;
  v10 = (unsigned __int8 **)(a1 + 8);
  v9 = *(unsigned __int8 **)(a1 + 8);
  *(_WORD *)(a1 + 48) = 0;
  result = usextract_matchPhon(*a2, a3, 0, v9, 0);
  if ((_DWORD)result
    || (*(_WORD *)(a1 + 48) = 1,
        result = usextract_matchPhon(*a2, a3, 1, *(unsigned __int8 **)(a1 + 8), 0),
        (_DWORD)result)
    || (*(_WORD *)(a1 + 48) = 256,
        result = usextract_matchPhon(*a2, a3, 0, *(unsigned __int8 **)(a1 + 8), 1),
        (_DWORD)result)
    || (*(_WORD *)(a1 + 48) = 257,
        result = usextract_matchPhon(*a2, a3, 1, *(unsigned __int8 **)(a1 + 8), 1),
        (_DWORD)result))
  {
    v12 = *(unsigned __int8 *)(a1 + 49);
    if (*(_BYTE *)(a1 + 49))
    {
      do
      {
        if (**v10)
        {
          *(_QWORD *)(a1 + 8) = *v10 + 1;
          result = skipUnvalidPhonemes(v8, v10);
          *(_QWORD *)(a1 + 64) += 4 * *(unsigned __int16 *)(v8 + 3578);
          v12 = *(unsigned __int8 *)(a1 + 49);
        }
        *(_BYTE *)(a1 + 49) = --v12;
      }
      while ((_BYTE)v12);
    }
  }
  else
  {
    *(_WORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 52) = 1;
    *(_DWORD *)(a1 + 76) = 0;
  }
  if (a4 >= 1 && *(_BYTE *)(a2[4] + (unsigned __int16)a4 - 1) != 35 && !*(_DWORD *)(v8 + 2692))
    *(_DWORD *)(a1 + 56) = 1;
  return result;
}

char *usextract_handleWordStart(uint64_t a1, _QWORD *a2, char *__s, int a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char *result;
  char v23;

  v8 = (a4 - 1);
  if (a4 >= 1)
  {
    v9 = a2[72];
    if (v9)
    {
      if (*(unsigned __int8 *)(v9 + v8) <= 1u)
        *(_BYTE *)(v9 + v8) = 2;
    }
  }
  v10 = *(__int16 *)(a1 + 672);
  LODWORD(v11) = *(unsigned __int16 *)(a1 + 672);
  if (v10 < a4 && (v10 & 0x80000000) == 0 && a2[74])
  {
    v12 = *(unsigned __int16 *)(a1 + 672);
    do
    {
      v13 = a2[74];
      if (*(unsigned __int8 *)(v13 + v12) <= 1u)
        *(_BYTE *)(v13 + v12) = 2;
      ++v12;
    }
    while (a4 != v12);
    LODWORD(v11) = *(unsigned __int16 *)(a1 + 672);
  }
  v16 = (v11 & 0x8000u) == 0 && a2[68] != 0 && (__int16)v11 < a4;
  if ((_DWORD)v11 == *(unsigned __int16 *)(a1 + 674))
  {
    if (v16)
    {
      v11 = v11;
      do
      {
        v17 = a2[68];
        if (*(unsigned __int8 *)(v17 + v11) >= 0xAu)
          *(_BYTE *)(v17 + v11) = 9;
        ++v11;
      }
      while (a4 != v11);
      LODWORD(v11) = *(unsigned __int16 *)(a1 + 672);
    }
    if ((__int16)v11 < a4 && ((__int16)v11 & 0x80000000) == 0 && a2[180])
    {
      v11 = v11;
      do
      {
        v18 = a2[180];
        if (*(unsigned __int8 *)(v18 + v11) >= 0xAu)
          *(_BYTE *)(v18 + v11) = 9;
        ++v11;
      }
      while (a4 != v11);
    }
  }
  else
  {
    if (v16)
    {
      v11 = v11;
      do
      {
        v19 = a2[68];
        if (*(unsigned __int8 *)(v19 + v11) >= 0xBu)
          *(_BYTE *)(v19 + v11) = 10;
        ++v11;
      }
      while (a4 != v11);
      LODWORD(v11) = *(unsigned __int16 *)(a1 + 672);
    }
    if ((__int16)v11 < a4 && ((__int16)v11 & 0x80000000) == 0 && a2[180])
    {
      v11 = v11;
      do
      {
        v20 = a2[180];
        if (*(unsigned __int8 *)(v20 + v11) >= 0xBu)
          *(_BYTE *)(v20 + v11) = 10;
        ++v11;
      }
      while (a4 != v11);
    }
  }
  *(_WORD *)(a1 + 672) = a4;
  *(_WORD *)(a1 + 674) = a4;
  *(_DWORD *)(a1 + 684) = -1;
  *(_WORD *)(a1 + 688) = -1;
  *(_BYTE *)(a1 + 10) = 0;
  *(_BYTE *)(a1 + 22) = 0;
  *(_BYTE *)(a1 + 35) = 1;
  *(_BYTE *)(a1 + 38) = 1;
  if (strchr(__s, 45))
    v21 = 1;
  else
    v21 = 3;
  *(_BYTE *)(a1 + 11) = v21;
  *(_BYTE *)(a1 + 23) = 0;
  *(_BYTE *)(a1 + 19) = 0;
  *(_BYTE *)(a1 + 20) = strchr(__s, 34) != 0;
  result = strchr(__s, 34);
  if (result)
  {
    if (*(unsigned __int8 *)(a1 + 177) <= 1u)
      v23 = 1;
    else
      v23 = 2;
  }
  else
  {
    v23 = 0;
  }
  *(_BYTE *)(a1 + 180) = v23;
  if (*(unsigned __int8 *)(a1 + 70) <= 1u)
    *(_BYTE *)(a1 + 70) = 2;
  if (*(unsigned __int8 *)(a1 + 72) <= 1u)
    *(_BYTE *)(a1 + 72) = 2;
  if (*(unsigned __int8 *)(a1 + 78) <= 1u)
    *(_BYTE *)(a1 + 78) = 2;
  if (*(unsigned __int8 *)(a1 + 74) <= 1u)
    *(_BYTE *)(a1 + 74) = 2;
  if (*(unsigned __int8 *)(a1 + 67) >= 0xCu)
    *(_BYTE *)(a1 + 67) = 11;
  if (*(unsigned __int8 *)(a1 + 179) >= 0xCu)
    *(_BYTE *)(a1 + 179) = 11;
  if (a4 >= 2)
    *(_BYTE *)(a2[14] + v8) = 2;
  *(_WORD *)(a1 + 217) = 0;
  return result;
}

uint64_t usextract_handleBoundaryShape(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  const char *v6;
  const char **v7;
  const char *v8;
  uint64_t v9;
  const char **v10;

  result = a2[417];
  if (result
    && (result = usextract_getIndex((const char **)result, "BNDSHAPE", (unint64_t)""), (result & 0x80000000) == 0)
    && (v5 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 656) + result),
        v6 = *(const char **)(*(_QWORD *)(a2[418] + 8 * result) + 8 * v5),
        *(_BYTE *)(a1 + 197) = v5,
        v7 = (const char **)a2[309],
        (v8 = *v7) != 0))
  {
    v9 = 0;
    v10 = v7 + 1;
    while (1)
    {
      result = strcmp(v6, v8);
      if (!(_DWORD)result)
        break;
      v8 = v10[v9++];
      if (!v8)
        goto LABEL_7;
    }
    *(_DWORD *)(a1 + 708) = 1;
  }
  else
  {
LABEL_7:
    LOBYTE(v9) = 0;
    *(_DWORD *)(a1 + 708) = 0;
  }
  *(_BYTE *)(a1 + 174) = v9;
  return result;
}

uint64_t usextract_handleWordEnd(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v11;
  int *v12;
  _DWORD *v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;

  v8 = a7;
  if (*(_DWORD *)(result + 72) == 1)
  {
    if (*(_DWORD *)(result + 20))
    {
      v11 = *(unsigned __int16 *)(*a5 + 3578);
      if (*(_WORD *)(*a5 + 3578))
      {
        v12 = *(int **)(result + 64);
        v13 = (_DWORD *)(a5[451] + 4 * *(unsigned __int16 *)(*a5 + 3578) * (uint64_t)(int)a7);
        do
        {
          v14 = *v12++;
          *v13++ = v14;
          --v11;
        }
        while (v11);
      }
    }
  }
  *(_WORD *)(a2 + 67) = 2060;
  *(_BYTE *)(a2 + 74) = 2;
  *(_BYTE *)(a2 + 78) = 2;
  *(_BYTE *)(a2 + 69) = 9;
  *(_BYTE *)(a2 + 186) = 9;
  *(_WORD *)(a2 + 178) = 3085;
  if (*(unsigned __int16 *)(a2 + 674) == (unsigned __int16)a7)
  {
    v15 = 19017;
  }
  else
  {
    if (*(unsigned __int16 *)(a2 + 672) != (unsigned __int16)a7)
      goto LABEL_11;
    v15 = 19013;
  }
  result = log_OutPublic(*(_QWORD *)(a3 + 32), a4, v15, "%s%s", (uint64_t)a5, a6, a7, a8, "word");
LABEL_11:
  v16 = *(unsigned __int8 *)(a2 + 15);
  if (v16 != 255)
    *(_BYTE *)(a2 + 15) = v16 + 1;
  *(_BYTE *)(a2 + 14) = 2;
  if (a5[36])
  {
    v17 = *(__int16 *)(a2 + 680);
    if (v17 >= *(__int16 *)(a2 + 674) && v17 < v8)
    {
      v18 = *(__int16 *)(a2 + 680);
      do
      {
        v19 = a5[36];
        if (*(_BYTE *)(v19 + v18) == 1)
          *(_BYTE *)(v19 + v18) = 3;
        ++v18;
      }
      while (v8 != v18);
    }
  }
  v20 = a5[23];
  v21 = v8 - 1;
  if (*(unsigned __int8 *)(v20 + v21) >= 2u)
    *(_BYTE *)(v20 + v21) = 4;
  v22 = a5[39];
  if (v22)
  {
    v23 = *(unsigned __int8 *)(a2 + 38);
    if (v23 >= 2)
      result = (uint64_t)memset((void *)(v22 + *(__int16 *)(a2 + 674)), v23, (v8 - *(__int16 *)(a2 + 674)) & ~((v8 - *(__int16 *)(a2 + 674)) >> 31));
  }
  if ((*(unsigned __int8 *)(a2 + 12) | 2) == 3)
    *(_BYTE *)(a2 + 12) = 2;
  return result;
}

uint64_t usextract_handlePhraseRecord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, signed int a7)
{
  uint64_t result;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  int v19;
  unsigned __int8 v20;
  unsigned int v21;
  int v22;
  unsigned __int8 v23;
  int v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  _DWORD *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v37;
  char v38;
  signed int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  signed int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  int v50;

  v50 = 0;
  v49 = 0;
  if (a6[78])
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(a2 + 176))(a3, a4, a5, 4, &v49, (char *)&v50 + 2);
    if ((result & 0x80000000) != 0)
      return result;
    v15 = *v49 - 80;
    if (v15 > 9)
      v16 = 3;
    else
      v16 = byte_1DEC64750[v15];
    *(_BYTE *)(a1 + 77) = v16;
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, char *))(a2 + 168))(a3, a4, a5, 7, 1, &v50, (char *)&v50 + 2);
  if ((result & 0x80000000) == 0)
  {
    if (*(_DWORD *)(a1 + 708) && (unsigned __int16)v50 == 2)
    {
      v17 = 7;
      *(_BYTE *)(a1 + 78) = 7;
      *(_DWORD *)(a1 + 70) = 117901063;
      *(_WORD *)(a1 + 74) = 1799;
      LODWORD(v18) = *(unsigned __int16 *)(a1 + 672);
      v19 = *(unsigned __int16 *)(a1 + 664);
      if ((_DWORD)v18 == v19)
        v20 = 6;
      else
        v20 = 7;
      v21 = 8;
      *(_BYTE *)(a1 + 67) = 8;
      v22 = *(unsigned __int16 *)(a1 + 666);
      if ((_DWORD)v18 == v22)
        v23 = 3;
      else
        v23 = 4;
      *(_BYTE *)(a1 + 179) = 5;
      v24 = *(unsigned __int16 *)(a1 + 674);
      if (v24 == v19)
        v25 = 6;
      else
        v25 = 7;
      if (v24 == v22)
        v26 = 3;
      else
        v26 = 4;
      *(_BYTE *)(a1 + 69) = 8;
      *(_BYTE *)(a1 + 186) = 5;
      *(_WORD *)(a1 + 666) = a7;
      *(_WORD *)(a1 + 664) = a7;
      *(_DWORD *)(a1 + 700) = 0;
      v27 = 2;
      v28 = 7;
    }
    else if ((unsigned __int16)v50 == 2)
    {
      v17 = 3;
      *(_BYTE *)(a1 + 78) = 3;
      *(_DWORD *)(a1 + 70) = 50529027;
      *(_WORD *)(a1 + 74) = 771;
      LODWORD(v18) = *(unsigned __int16 *)(a1 + 672);
      v29 = *(unsigned __int16 *)(a1 + 664);
      if ((_DWORD)v18 == v29)
        v20 = 6;
      else
        v20 = 7;
      v21 = 8;
      *(_BYTE *)(a1 + 67) = 8;
      *(_BYTE *)(a1 + 179) = 8;
      if (*(unsigned __int16 *)(a1 + 674) == v29)
        v25 = 6;
      else
        v25 = 7;
      *(_BYTE *)(a1 + 69) = 8;
      *(_BYTE *)(a1 + 186) = 8;
      *(_WORD *)(a1 + 664) = a7;
      v28 = 13;
      v23 = v20;
      v26 = v25;
      v27 = 13;
    }
    else
    {
      v30 = (_DWORD *)(a1 + 70);
      if ((unsigned __int16)v50 == 1)
      {
        v17 = 4;
        *(_BYTE *)(a1 + 78) = 4;
        *v30 = 67372036;
        *(_WORD *)(a1 + 74) = 1028;
        LODWORD(v18) = *(unsigned __int16 *)(a1 + 672);
        v31 = *(unsigned __int16 *)(a1 + 668);
        if ((_DWORD)v18 == v31)
          v20 = 3;
        else
          v20 = 4;
        *(_BYTE *)(a1 + 67) = 5;
        v32 = *(unsigned __int16 *)(a1 + 666);
        if ((_DWORD)v18 == v32)
          v23 = 3;
        else
          v23 = 4;
        *(_BYTE *)(a1 + 179) = 5;
        v33 = *(unsigned __int16 *)(a1 + 674);
        if (v33 == v31)
          v25 = 3;
        else
          v25 = 4;
        if (v33 == v32)
          v26 = 3;
        else
          v26 = 4;
        *(_BYTE *)(a1 + 69) = 5;
        *(_BYTE *)(a1 + 186) = 5;
        *(_WORD *)(a1 + 668) = a7;
        *(_WORD *)(a1 + 666) = a7;
        *(_WORD *)(a1 + 664) = a7;
        *(_DWORD *)(a1 + 700) = 0;
        *(_DWORD *)(a1 + 692) = 0;
        v28 = 7;
        v21 = 2;
        v27 = 2;
      }
      else
      {
        v17 = 5;
        *(_BYTE *)(a1 + 78) = 5;
        *v30 = 84215045;
        *(_WORD *)(a1 + 74) = 1285;
        LODWORD(v18) = *(unsigned __int16 *)(a1 + 672);
        v34 = *(unsigned __int16 *)(a1 + 670);
        v20 = (_DWORD)v18 != v34;
        *(_BYTE *)(a1 + 67) = 2;
        *(_BYTE *)(a1 + 179) = 2;
        v25 = *(unsigned __int16 *)(a1 + 674) != v34;
        *(_BYTE *)(a1 + 69) = 2;
        *(_BYTE *)(a1 + 186) = 2;
        *(int16x4_t *)(a1 + 664) = vdup_n_s16(a7);
        v28 = 6;
        *(_OWORD *)(a1 + 692) = 0u;
        v21 = 1;
        v23 = (_DWORD)v18 != v34;
        v26 = v25;
        v27 = 1;
      }
    }
    if (a7 != -32768)
    {
      v35 = a6[72];
      if (v35)
      {
        *(_BYTE *)(v35 + a7 - 1) = v17;
        LOWORD(v18) = *(_WORD *)(a1 + 672);
        v17 = *(_BYTE *)(a1 + 73);
      }
    }
    *(_BYTE *)(a1 + 71) = 0;
    if (a7 > (__int16)v18 && a6[74])
    {
      v18 = (__int16)v18;
      do
        *(_BYTE *)(a6[74] + v18++) = v17;
      while ((unsigned __int16)v18 != (unsigned __int16)a7);
    }
    *(_BYTE *)(a1 + 73) = 1;
    if (*(__int16 *)(a1 + 674) < a7 && a6[76] != 0)
    {
      v37 = *(__int16 *)(a1 + 674);
      v38 = *(_BYTE *)(a1 + 75);
      do
        *(_BYTE *)(a6[76] + v37++) = v38;
      while ((unsigned __int16)v37 != (unsigned __int16)a7);
    }
    *(_BYTE *)(a1 + 75) = 2;
    v39 = *(__int16 *)(a1 + 672);
    if (v39 < a7 && (v39 & 0x80000000) == 0 && a6[68])
    {
      v40 = *(unsigned __int16 *)(a1 + 672);
      do
      {
        v41 = a6[68];
        if (*(unsigned __int8 *)(v41 + v40) > v20)
          *(_BYTE *)(v41 + v40) = v20;
        ++v40;
      }
      while (a7 != v40);
      LOWORD(v39) = *(_WORD *)(a1 + 672);
    }
    if (a7 > (__int16)v39 && (v39 & 0x8000) == 0 && a6[180])
    {
      v42 = (unsigned __int16)v39;
      do
      {
        v43 = a6[180];
        if (*(unsigned __int8 *)(v43 + v42) > v23)
          *(_BYTE *)(v43 + v42) = v23;
        ++v42;
      }
      while (a7 != v42);
    }
    v44 = *(__int16 *)(a1 + 674);
    if (v44 < a7 && (v44 & 0x80000000) == 0 && a6[70])
    {
      v45 = *(unsigned __int16 *)(a1 + 674);
      do
      {
        v46 = a6[70];
        if (*(unsigned __int8 *)(v46 + v45) > v25)
          *(_BYTE *)(v46 + v45) = v25;
        ++v45;
      }
      while (a7 != v45);
      LOWORD(v44) = *(_WORD *)(a1 + 674);
    }
    if (a7 > (__int16)v44 && (v44 & 0x8000) == 0 && a6[187])
    {
      v47 = (unsigned __int16)v44;
      do
      {
        v48 = a6[187];
        if (*(unsigned __int8 *)(v48 + v47) > v26)
          *(_BYTE *)(v48 + v47) = v26;
        ++v47;
      }
      while (a7 != v47);
    }
    usextract_updateLastStrAcc((uint64_t)a6, a7, *(__int16 *)(a1 + 676), v21);
    return usextract_updateLastStrAccShp((uint64_t)a6, a7, *(__int16 *)(a1 + 678), v28, v27);
  }
  return result;
}

uint64_t usextract_updateLastStrAcc(uint64_t result, int a2, int a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v8;
  unsigned int v9;

  LODWORD(v4) = (__int16)(a2 - 1);
  if ((int)v4 >= a3 && a3 >= 1 && a2 >= 1 && *(_QWORD *)(result + 552) != 0)
  {
    do
    {
      v8 = *(_QWORD *)(result + 552);
      v4 = (__int16)v4;
      v9 = *(unsigned __int8 *)(v8 + (__int16)v4);
      if (v9 <= 5 && v9 > a4)
        *(_BYTE *)(v8 + v4) = a4;
      LODWORD(v4) = (__int16)(v4 - 1);
    }
    while ((int)v4 >= a3);
  }
  return result;
}

uint64_t usextract_updateLastStrAccShp(uint64_t result, int a2, int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  char v12;
  BOOL v13;

  LODWORD(v5) = (__int16)(a2 - 1);
  if ((int)v5 >= a3 && a3 >= 1 && a2 >= 1 && *(_QWORD *)(result + 1432) != 0)
  {
    do
    {
      v9 = *(_QWORD *)(result + 1432);
      v5 = (__int16)v5;
      v10 = *(unsigned __int8 *)(v9 + (__int16)v5);
      v11 = v10 <= 5 && v10 > a5;
      v12 = a5;
      if (v11 || (v10 <= 0xA ? (v13 = v10 > a4) : (v13 = 0), v12 = a4, v13))
        *(_BYTE *)(v9 + v5) = v12;
      LODWORD(v5) = (__int16)(v5 - 1);
    }
    while ((int)v5 >= a3);
  }
  return result;
}

uint64_t usextract_setUnknownOnPauses(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (*(__int16 *)(result + 10) >= 1)
  {
    v1 = 0;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)(result + 32) + v1) == 35)
      {
        v2 = *(_QWORD *)(result + 536);
        if (v2)
          *(_BYTE *)(v2 + v1) = 4;
        v3 = *(_QWORD *)(result + 1424);
        if (v3)
          *(_BYTE *)(v3 + v1) = 100;
        v4 = *(_QWORD *)(result + 544);
        if (v4)
          *(_BYTE *)(v4 + v1) = 13;
        v5 = *(_QWORD *)(result + 1440);
        if (v5)
          *(_BYTE *)(v5 + v1) = 100;
        v6 = *(_QWORD *)(result + 552);
        if (v6)
          *(_BYTE *)(v6 + v1) = 9;
        v7 = *(_QWORD *)(result + 1432);
        if (v7)
          *(_BYTE *)(v7 + v1) = 100;
        v8 = *(_QWORD *)(result + 560);
        if (v8)
          *(_BYTE *)(v8 + v1) = 10;
        v9 = *(_QWORD *)(result + 1496);
        if (v9)
          *(_BYTE *)(v9 + v1) = 100;
        v10 = *(_QWORD *)(result + 568);
        if (v10)
          *(_BYTE *)(v10 + v1) = 6;
        v11 = *(_QWORD *)(result + 576);
        if (v11)
          *(_BYTE *)(v11 + v1) = 6;
        v12 = *(_QWORD *)(result + 584);
        if (v12)
          *(_BYTE *)(v12 + v1) = 6;
        v13 = *(_QWORD *)(result + 632);
        if (v13)
          *(_BYTE *)(v13 + v1) = 6;
        v14 = *(_QWORD *)(result + 592);
        if (v14)
          *(_BYTE *)(v14 + v1) = 6;
        v15 = *(_QWORD *)(result + 600);
        if (v15)
          *(_BYTE *)(v15 + v1) = 6;
        v16 = *(_QWORD *)(result + 608);
        if (v16)
          *(_BYTE *)(v16 + v1) = 6;
        v17 = *(_QWORD *)(result + 624);
        if (v17)
          *(_BYTE *)(v17 + v1) = 3;
      }
      ++v1;
    }
    while (v1 < *(__int16 *)(result + 10));
  }
  return result;
}

size_t usextract_setNextDifferentiator(size_t result, uint64_t a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  if (((*(_WORD *)(a2 + 10) - 2) & 0x8000) == 0)
  {
    v3 = (const char *)(result + 2400);
    v4 = (unsigned __int16)(*(_WORD *)(a2 + 10) - 2);
    do
    {
      v5 = *(_QWORD *)(a2 + 32);
      if (*(_BYTE *)(v5 + v4 + 1) == 35)
      {
        result = strlen(v3);
        v6 = result + 1;
      }
      else if (*(_BYTE *)(v5 + v4) == 35)
      {
        v6 = 0;
      }
      else
      {
        if (!*(_BYTE *)(*(_QWORD *)(a2 + 112) + v4))
        {
          v7 = *(_QWORD *)(a2 + 616);
          v6 = *(_BYTE *)(v7 + v4 + 1);
          goto LABEL_10;
        }
        v6 = *(_BYTE *)(*(_QWORD *)(a2 + 264) + v4 + 1);
      }
      v7 = *(_QWORD *)(a2 + 616);
LABEL_10:
      *(_BYTE *)(v7 + v4) = v6;
    }
    while (v4-- > 0);
  }
  return result;
}

uint64_t usextract_setPrePostSylBnd(uint64_t result)
{
  uint64_t v1;

  if (*(__int16 *)(result + 10) >= 1)
  {
    v1 = 0;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)(result + 32) + v1) == 35)
      {
        *(_BYTE *)(*(_QWORD *)(result + 72) + v1) = 1;
        *(_BYTE *)(*(_QWORD *)(result + 80) + v1) = 1;
        if (v1 + 1 < *(__int16 *)(result + 10))
          *(_BYTE *)(*(_QWORD *)(result + 80) + v1 + 1) = 1;
      }
      if (v1 && v1 + 1 < *(__int16 *)(result + 10) && *(_BYTE *)(*(_QWORD *)(result + 32) + v1 + 1) == 35)
        *(_BYTE *)(*(_QWORD *)(result + 112) + v1) = 3;
      if (*(_BYTE *)(*(_QWORD *)(result + 112) + v1))
      {
        *(_BYTE *)(*(_QWORD *)(result + 72) + v1++) = 1;
        if (v1 < *(__int16 *)(result + 10))
          *(_BYTE *)(*(_QWORD *)(result + 80) + v1) = 1;
      }
      else
      {
        ++v1;
      }
    }
    while (v1 < *(__int16 *)(result + 10));
  }
  return result;
}

uint64_t usextract_setPlosives(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(__int16 *)(a2 + 10);
  if (v2 >= 1)
  {
    v3 = 0;
    do
    {
      v4 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 32) + v3);
      if (v4 != 35)
      {
        *(_BYTE *)(*(_QWORD *)(a2 + 48) + v3) = *(_BYTE *)(result + *(unsigned __int8 *)(result + v4 + 2144) + 1373);
        LOWORD(v2) = *(_WORD *)(a2 + 10);
      }
      ++v3;
    }
    while (v3 < (__int16)v2);
  }
  return result;
}

uint64_t usextract_setWordPhrs(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;

  if (*(__int16 *)(result + 10) >= 1)
  {
    v1 = 0;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)(result + 32) + v1) == 35)
      {
        LOBYTE(v2) = 4;
      }
      else
      {
        v2 = 0x200010304uLL >> (8 * *(_BYTE *)(*(_QWORD *)(result + 104) + v1));
        if (*(unsigned __int8 *)(*(_QWORD *)(result + 104) + v1) > 4u)
          LOBYTE(v2) = 4;
      }
      *(_BYTE *)(*(_QWORD *)(result + 176) + v1++) = v2;
    }
    while (v1 < *(__int16 *)(result + 10));
  }
  return result;
}

uint64_t usextract_setFineSylPosInPhrs(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;

  if (((*(_WORD *)(result + 10) - 1) & 0x8000) == 0)
  {
    v1 = result;
    v2 = 0;
    v3 = (unsigned __int16)(*(_WORD *)(result + 10) - 1);
    do
    {
      if (!v3 || (_DWORD)v3 == *(__int16 *)(v1 + 10) - 1 || *(_BYTE *)(*(_QWORD *)(v1 + 112) + v3) == 3)
      {
        v4 = *(unsigned __int8 *)(*(_QWORD *)(v1 + 128) + v3);
        v2 = *(_BYTE *)(*(_QWORD *)(v1 + 128) + v3);
      }
      else
      {
        v4 = *(unsigned __int8 *)(*(_QWORD *)(v1 + 128) + v3);
      }
      result = usextract_getCurFineSyl(v4, v2);
      *(_BYTE *)(*(_QWORD *)(v1 + 144) + v3) = result;
    }
    while (v3-- > 0);
  }
  return result;
}

uint64_t usextract_finalizeSylType(uint64_t result)
{
  int v1;
  int v2;
  unsigned __int16 v3;
  int v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  int v9;

  if (((*(_WORD *)(result + 10) - 1) & 0x8000) == 0)
  {
    v1 = 0;
    v2 = 0;
    v3 = *(_WORD *)(result + 10) - 1;
    while (1)
    {
      v4 = v1;
      if (*(_BYTE *)(*(_QWORD *)(result + 112) + v3) == 3)
      {
        ++v2;
        v1 = 0;
      }
      if (*(_BYTE *)(*(_QWORD *)(result + 88) + v3) != 3)
        goto LABEL_16;
      if (*(_BYTE *)(*(_QWORD *)(result + 112) + v3))
        ++v1;
      else
        v1 = v4;
      if (v1 != 1)
        goto LABEL_16;
      v5 = *(_QWORD *)(result + 160);
      if (v2 == 1)
        break;
      if (*(_BYTE *)(v5 + v3) == 2)
      {
        v6 = 5;
        goto LABEL_14;
      }
LABEL_15:
      v1 = 1;
LABEL_16:
      v7 = *(_QWORD *)(result + 160);
      if (*(_BYTE *)(v7 + v3) == 4
        && *(_BYTE *)(*(_QWORD *)(result + 144) + v3) == 4
        && !*(_BYTE *)(*(_QWORD *)(result + 128) + v3))
      {
        if (v2 == 1)
          v8 = 6;
        else
          v8 = 5;
        *(_BYTE *)(v7 + v3) = v8;
      }
      v9 = (__int16)v3--;
      if (v9 <= 0)
        return result;
    }
    v6 = 6;
LABEL_14:
    *(_BYTE *)(v5 + v3) = v6;
    goto LABEL_15;
  }
  return result;
}

uint64_t usextract_setSylPos(uint64_t result, int a2)
{
  unsigned __int16 v2;
  uint64_t v3;
  int v4;
  int v5;

  if (((*(_WORD *)(result + 10) - 1) & 0x8000) == 0)
  {
    v2 = *(_WORD *)(result + 10) - 1;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)(result + 32) + v2) == 35)
      {
        v3 = *(_QWORD *)(result + 152);
      }
      else
      {
        if (*(_BYTE *)(*(_QWORD *)(result + 144) + v2) != 4)
        {
          if (*(_BYTE *)(*(_QWORD *)(result + 128) + v2))
          {
            v5 = *(unsigned __int8 *)(*(_QWORD *)(result + 96) + v2);
            switch(v5)
            {
              case 3:
                *(_BYTE *)(*(_QWORD *)(result + 152) + v2) = 6;
                break;
              case 2:
                *(_BYTE *)(*(_QWORD *)(result + 152) + v2) = 5;
                break;
              case 1:
                *(_BYTE *)(*(_QWORD *)(result + 152) + v2) = 4;
                break;
            }
          }
          else
          {
            *(_BYTE *)(*(_QWORD *)(result + 152) + v2) = 0;
          }
          goto LABEL_6;
        }
        if (!*(_BYTE *)(*(_QWORD *)(result + 128) + v2))
        {
          *(_BYTE *)(*(_QWORD *)(result + 152) + v2) = 2;
          goto LABEL_6;
        }
        v3 = *(_QWORD *)(result + 152);
        if (a2 > (__int16)v2)
        {
          *(_BYTE *)(v3 + v2) = 1;
          goto LABEL_6;
        }
      }
      *(_BYTE *)(v3 + v2) = 3;
LABEL_6:
      v4 = (__int16)v2--;
    }
    while (v4 > 0);
  }
  return result;
}

uint64_t usextract_finalizeNrSylInPhrs(uint64_t result)
{
  unsigned __int16 v1;
  int v2;
  uint64_t v3;
  int v4;

  if (((*(_WORD *)(result + 10) - 1) & 0x8000) == 0)
  {
    v1 = *(_WORD *)(result + 10) - 1;
    LOBYTE(v2) = 1;
    do
    {
      v3 = *(_QWORD *)(result + 128);
      if (*(_BYTE *)(*(_QWORD *)(result + 112) + v1) == 3)
      {
        v2 = *(unsigned __int8 *)(v3 + v1);
        if (v2 != 255)
        {
          *(_BYTE *)(v3 + v1) = v2 + 1;
          LOBYTE(v2) = *(_BYTE *)(*(_QWORD *)(result + 128) + v1);
        }
      }
      else
      {
        *(_BYTE *)(v3 + v1) = v2;
      }
      v4 = (__int16)v1--;
    }
    while (v4 > 0);
  }
  return result;
}

uint64_t usextract_finalizePhnCntSyl(uint64_t result)
{
  unsigned __int16 v1;
  char v2;
  uint64_t v3;
  int v4;

  if (((*(_WORD *)(result + 10) - 1) & 0x8000) == 0)
  {
    v1 = *(_WORD *)(result + 10) - 1;
    v2 = 1;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)(result + 32) + v1) == 35)
      {
        *(_BYTE *)(*(_QWORD *)(result + 192) + v1) = 1;
      }
      else
      {
        v3 = *(_QWORD *)(result + 192);
        if (*(_BYTE *)(*(_QWORD *)(result + 112) + v1))
          v2 = *(_BYTE *)(v3 + v1);
        else
          *(_BYTE *)(v3 + v1) = v2;
      }
      v4 = (__int16)v1--;
    }
    while (v4 > 0);
  }
  return result;
}

uint64_t usextract_setNrSylInIP4(uint64_t result)
{
  uint64_t v1;
  __int16 v2;
  uint64_t v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(__int16 *)(result + 10) >= 1)
  {
    v1 = 0;
    v2 = -1;
    v3 = 0xFFFFLL;
    v4 = 1;
    v5 = 1;
    do
    {
      v6 = *(unsigned __int8 *)(*(_QWORD *)(result + 576) + v1);
      if (v6 <= 7)
      {
        if (((1 << v6) & 0x36) != 0)
        {
          if (((v4 + 1) & 0x100) != 0)
            v4 = -1;
          else
            ++v4;
          if (((v5 + 1) & 0x100) != 0)
            v5 = -1;
          else
            ++v5;
        }
        else
        {
          v7 = v1;
          if (((1 << v6) & 0xC0) != 0)
          {
            LOWORD(v8) = v3 + 1;
            v9 = v1 + 1;
            if (v1 >= (__int16)v8 && *(_QWORD *)(result + 1416))
            {
              v8 = (__int16)v8;
              do
                *(_BYTE *)(*(_QWORD *)(result + 1416) + v8++) = v4;
              while (v9 != (unsigned __int16)v8);
            }
            LOWORD(v10) = v2 + 1;
            v4 = 1;
            if (v1 >= (__int16)v10 && *(_QWORD *)(result + 1408))
            {
              v10 = (__int16)v10;
              do
                *(_BYTE *)(*(_QWORD *)(result + 1408) + v10++) = v5;
              while (v9 != (unsigned __int16)v10);
              v5 = 1;
              v4 = 1;
            }
            else
            {
              v5 = 1;
            }
            v2 = v1;
            goto LABEL_33;
          }
          if (v6 == 3)
          {
            LOWORD(v11) = v3 + 1;
            if (v1 >= (__int16)(v3 + 1) && *(_QWORD *)(result + 1416))
            {
              v11 = (__int16)v11;
              do
                *(_BYTE *)(*(_QWORD *)(result + 1416) + v11++) = v4;
              while (v1 + 1 != (unsigned __int16)v11);
            }
            if (((v5 + 1) & 0x100) != 0)
              v5 = -1;
            else
              ++v5;
            v4 = 1;
            goto LABEL_33;
          }
        }
      }
      v7 = v3;
LABEL_33:
      ++v1;
      v3 = v7;
    }
    while (v1 < *(__int16 *)(result + 10));
  }
  return result;
}

uint64_t usextract_setSylNrInIP4(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 v2;
  __int16 v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  if (*(__int16 *)(result + 10) >= 1)
  {
    v1 = 0;
    v2 = 0;
    v3 = -1;
    do
    {
      v4 = *(unsigned __int8 *)(*(_QWORD *)(result + 576) + v1);
      if (v4 <= 7)
      {
        if (((1 << v4) & 0xE) != 0)
        {
          if (((v2 + 1) & 0x100) != 0)
            v2 = -1;
          else
            ++v2;
          goto LABEL_21;
        }
        if (((1 << v4) & 0xB0) != 0)
        {
          LOWORD(v5) = v3 + 1;
          if (v1 >= (__int16)(v3 + 1) && *(_QWORD *)(result + 1456))
          {
            v5 = (__int16)v5;
            do
              *(_BYTE *)(*(_QWORD *)(result + 1456) + v5++) = v2;
            while (v1 + 1 != (unsigned __int16)v5);
          }
LABEL_19:
          v2 = 0;
          goto LABEL_20;
        }
        if (v4 == 6)
        {
          v2 = 0;
          LOWORD(v6) = v3 + 1;
          if (v1 >= (__int16)v6 && *(_QWORD *)(result + 1456))
          {
            v6 = (__int16)v6;
            do
              *(_BYTE *)(*(_QWORD *)(result + 1456) + v6++) = 0;
            while (v1 + 1 != (unsigned __int16)v6);
            goto LABEL_19;
          }
LABEL_20:
          v3 = v1;
        }
      }
LABEL_21:
      ++v1;
    }
    while (v1 < *(__int16 *)(result + 10));
  }
  return result;
}

uint64_t usextract_finalizeFineSylPosInIP4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  unsigned int v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;

  if (*(__int16 *)(result + 10) >= 1)
  {
    v1 = result;
    v2 = 0;
    v3 = 0;
    v4 = 0xFFFFLL;
    while (1)
    {
      v5 = *(unsigned __int8 *)(*(_QWORD *)(v1 + 576) + v2);
      if (v5 > 7)
        break;
      if (((1 << v5) & 0xE) != 0)
      {
        v10 = v4 + 1;
        v7 = v2 + 1;
        v11 = *(_QWORD *)(v1 + 1456);
        v12 = v3;
        result = usextract_getCurFineSyl(v3, *(unsigned __int8 *)(v11 + v2));
        if (v2 >= v10 && v11)
        {
          v13 = v10;
          do
            *(_BYTE *)(*(_QWORD *)(v1 + 1456) + v13++) = result;
          while (v7 != (unsigned __int16)v13);
        }
        if (((v12 + 1) & 0x100) != 0)
          v3 = -1;
        else
          v3 = v12 + 1;
        goto LABEL_25;
      }
      if (((1 << v5) & 0xB0) != 0)
      {
        v6 = v4 + 1;
        v7 = v2 + 1;
        v8 = *(_QWORD *)(v1 + 1456);
        result = usextract_getCurFineSyl(v3, *(unsigned __int8 *)(v8 + v2));
        v3 = 0;
        if (v2 < v6 || !v8)
          goto LABEL_25;
        v9 = v6;
        do
          *(_BYTE *)(*(_QWORD *)(v1 + 1456) + v9++) = result;
        while (v7 != (unsigned __int16)v9);
      }
      else
      {
        if (v5 != 6)
          break;
        v3 = 0;
        v14 = v4 + 1;
        v7 = v2 + 1;
        if (v2 < v14 || !*(_QWORD *)(v1 + 1456))
          goto LABEL_25;
        v15 = v14;
        do
          *(_BYTE *)(*(_QWORD *)(v1 + 1456) + v15++) = 7;
        while (v7 != (unsigned __int16)v15);
      }
      v3 = 0;
LABEL_25:
      v4 = v2;
      v2 = v7;
      if (v7 >= *(__int16 *)(v1 + 10))
        return result;
    }
    v7 = v2 + 1;
    v2 = v4;
    goto LABEL_25;
  }
  return result;
}

uint64_t usextract_setSylStressedPrm(uint64_t result)
{
  uint64_t v1;
  __int16 v2;
  unsigned __int16 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 v11;
  int v12;
  unsigned __int16 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (*(__int16 *)(result + 10) >= 1)
  {
    v1 = 0;
    v2 = 0;
    v3 = -1;
    while (1)
    {
      v4 = *(unsigned __int8 *)(*(_QWORD *)(result + 576) + v1);
      if ((v4 - 1) < 5)
        break;
      if (v4 == 6)
      {
        v8 = v1 + 1;
        v17 = (__int16)(v3 + 1);
        if (v1 >= v17 && *(_QWORD *)(result + 1472))
        {
          v18 = v17;
          do
            *(_BYTE *)(*(_QWORD *)(result + 1472) + v18++) = 0;
          while (v8 != (unsigned __int16)v18);
        }
        if (v1 >= v17 && *(_QWORD *)(result + 1464))
        {
          do
            *(_BYTE *)(*(_QWORD *)(result + 1464) + v17++) = 0;
          while (v8 != (unsigned __int16)v17);
        }
        goto LABEL_31;
      }
      if (v4 == 7)
        break;
      v8 = v1 + 1;
LABEL_32:
      v1 = v8;
      v2 = v8;
      if (v8 >= *(__int16 *)(result + 10))
        return result;
    }
    if ((v3 & 0x8000) != 0)
    {
      v5 = *(_QWORD *)(result + 1472);
    }
    else
    {
      v5 = *(_QWORD *)(result + 1472);
      if (*(unsigned __int8 *)(*(_QWORD *)(result + 1432) + v3) <= 0xBu)
      {
        LOWORD(v6) = v3 + 1;
        if (v1 >= (__int16)(v3 + 1) && v5)
        {
          v7 = *(_BYTE *)(*(_QWORD *)(result + 1424) + v3);
          v6 = (__int16)v6;
          do
            *(_BYTE *)(*(_QWORD *)(result + 1472) + v6++) = v7;
          while (v1 + 1 != (unsigned __int16)v6);
        }
        goto LABEL_19;
      }
    }
    LOWORD(v9) = v3 + 1;
    if (v1 >= (__int16)(v3 + 1) && v5)
    {
      v9 = (__int16)v9;
      do
        *(_BYTE *)(*(_QWORD *)(result + 1472) + v9++) = 0;
      while (v1 + 1 != (unsigned __int16)v9);
    }
LABEL_19:
    v8 = v1 + 1;
    if (*(__int16 *)(result + 10) - 1 <= v1)
    {
      v10 = *(_QWORD *)(result + 1464);
    }
    else
    {
      v10 = *(_QWORD *)(result + 1464);
      if (*(unsigned __int8 *)(*(_QWORD *)(result + 1432) + v8) <= 0xBu)
      {
        v11 = v2 + 1;
        v12 = (__int16)(v3 + 1);
        if (v12 < (__int16)v11 && v10)
        {
          v13 = v11;
          v14 = *(_BYTE *)(*(_QWORD *)(result + 1424) + v8);
          v15 = v12;
          do
            *(_BYTE *)(*(_QWORD *)(result + 1464) + v15++) = v14;
          while (v13 != (unsigned __int16)v15);
        }
LABEL_31:
        v3 = v1;
        goto LABEL_32;
      }
    }
    LOWORD(v16) = v3 + 1;
    if (v1 >= (__int16)v16 && v10)
    {
      v16 = (__int16)v16;
      do
        *(_BYTE *)(*(_QWORD *)(result + 1464) + v16++) = 0;
      while (v8 != (unsigned __int16)v16);
    }
    goto LABEL_31;
  }
  return result;
}

uint64_t usextract_setWrdBndTone(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(__int16 *)(result + 10);
  if (v1 >= 1)
  {
    v2 = 0;
    LOWORD(v3) = 0;
    v4 = -1;
    while (1)
    {
      v5 = *(_QWORD *)(result + 576);
      v6 = *(unsigned __int8 *)(v5 + v2);
      if ((v6 - 2) < 4)
        break;
      if (v6 == 6)
      {
        v3 = v2 + 1;
        v17 = (__int16)(v4 + 1);
        if (v2 >= v17 && *(_QWORD *)(result + 1488))
        {
          v18 = (__int16)(v4 + 1);
          do
            *(_BYTE *)(*(_QWORD *)(result + 1488) + v18++) = 0;
          while (v3 != (unsigned __int16)v18);
        }
        if (v2 >= v17 && *(_QWORD *)(result + 1480))
        {
          do
            *(_BYTE *)(*(_QWORD *)(result + 1480) + v17++) = 0;
          while (v3 != (unsigned __int16)v17);
        }
        goto LABEL_32;
      }
      if (v6 == 7)
        break;
      v3 = v2 + 1;
LABEL_33:
      LOWORD(v1) = *(_WORD *)(result + 10);
      v2 = v3;
      if (v3 >= (__int16)v1)
        return result;
    }
    if (v4 < 0)
    {
      v10 = 0;
    }
    else
    {
      v7 = v4;
      v8 = *(unsigned __int8 *)(v5 + v4);
      if (v4)
        v9 = v8 == 6;
      else
        v9 = 0;
      if (v9)
        v7 = (v4 - 1);
      v10 = *(_BYTE *)(*(_QWORD *)(result + 1400) + v7);
    }
    LODWORD(v11) = (__int16)(v4 + 1);
    v12 = (__int16)(v3 + 1);
    if ((int)v11 < v12 && *(_QWORD *)(result + 1488))
    {
      v13 = (int)v11;
      do
        *(_BYTE *)(*(_QWORD *)(result + 1488) + v13++) = v10;
      while ((unsigned __int16)v12 != (unsigned __int16)v13);
      LOWORD(v1) = *(_WORD *)(result + 10);
    }
    v3 = v2 + 1;
    if (v2 >= (__int16)v1 - 1)
    {
      v16 = 0;
    }
    else
    {
      v14 = v2 < (__int16)v1 - 2 && *(_BYTE *)(*(_QWORD *)(result + 576) + v3) == 6;
      v15 = v2 + 2;
      if (!v14)
        v15 = v2 + 1;
      v16 = *(_BYTE *)(*(_QWORD *)(result + 1400) + v15);
    }
    if ((int)v11 < v12 && *(_QWORD *)(result + 1480))
    {
      v11 = (int)v11;
      do
        *(_BYTE *)(*(_QWORD *)(result + 1480) + v11++) = v16;
      while ((unsigned __int16)v12 != (unsigned __int16)v11);
    }
LABEL_32:
    v4 = v2;
    goto LABEL_33;
  }
  return result;
}

uint64_t usextract_setIP4PosInSent(uint64_t result)
{
  uint64_t v1;
  char v2;
  __int16 v3;
  __int16 v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(__int16 *)(result + 10) >= 1)
  {
    v1 = 0;
    v2 = 1;
    v3 = -1;
    v4 = -1;
    v5 = 1;
    do
    {
      switch(*(_BYTE *)(*(_QWORD *)(result + 576) + v1))
      {
        case 3:
          LOWORD(v10) = v4 + 1;
          v7 = v1 + 1;
          if (v1 >= (__int16)v10 && *(_QWORD *)(result + 1512))
          {
            v10 = (__int16)v10;
            do
              *(_BYTE *)(*(_QWORD *)(result + 1512) + v10++) = v2;
            while (v7 != (unsigned __int16)v10);
          }
          v2 = 0;
          v4 = v1;
          break;
        case 4:
        case 7:
          LOWORD(v6) = v4 + 1;
          v7 = v1 + 1;
          if (v1 >= (__int16)(v4 + 1) && *(_QWORD *)(result + 1512))
          {
            v6 = (__int16)v6;
            do
              *(_BYTE *)(*(_QWORD *)(result + 1512) + v6++) = 2;
            while (v7 != (unsigned __int16)v6);
          }
          v8 = v3 + 1;
          v2 = 1;
          if (v1 >= v8 && *(_QWORD *)(result + 1504))
          {
            v9 = v8;
            do
              *(_BYTE *)(*(_QWORD *)(result + 1504) + v9++) = v5;
            while (v7 != (unsigned __int16)v9);
            v5 = 0;
            v2 = 1;
          }
          else
          {
            v5 = 0;
          }
          goto LABEL_38;
        case 5:
          LOWORD(v11) = v4 + 1;
          v7 = v1 + 1;
          if (v1 >= (__int16)v11 && *(_QWORD *)(result + 1512))
          {
            v11 = (__int16)v11;
            do
              *(_BYTE *)(*(_QWORD *)(result + 1512) + v11++) = 2;
            while (v7 != (unsigned __int16)v11);
          }
          LOWORD(v12) = v3 + 1;
          if (v1 >= (__int16)v12 && *(_QWORD *)(result + 1504))
          {
            v12 = (__int16)v12;
            do
              *(_BYTE *)(*(_QWORD *)(result + 1504) + v12++) = 2;
            while (v7 != (unsigned __int16)v12);
          }
          goto LABEL_38;
        case 6:
          LOWORD(v13) = v4 + 1;
          v7 = v1 + 1;
          if (v1 >= (__int16)v13 && *(_QWORD *)(result + 1512))
          {
            v13 = (__int16)v13;
            do
              *(_BYTE *)(*(_QWORD *)(result + 1512) + v13++) = 100;
            while (v7 != (unsigned __int16)v13);
          }
          LOWORD(v14) = v3 + 1;
          if (v1 >= (__int16)v14 && *(_QWORD *)(result + 1504))
          {
            v14 = (__int16)v14;
            do
              *(_BYTE *)(*(_QWORD *)(result + 1504) + v14++) = 100;
            while (v7 != (unsigned __int16)v14);
          }
LABEL_38:
          v4 = v1;
          v3 = v1;
          break;
        default:
          v7 = v1 + 1;
          break;
      }
      v1 = v7;
    }
    while (v7 < *(__int16 *)(result + 10));
  }
  return result;
}

uint64_t usextract_setRhythmRelated(uint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;
  unsigned __int8 v4;
  char v5;
  int8x8_t v6;
  uint64_t v7;
  int32x2_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int32x2_t v14;
  int32x2_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (*(__int16 *)(result + 10) >= 1)
  {
    v1 = 0;
    v2 = 0;
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0xFFFFLL;
    v8 = 0;
    do
    {
      v9 = *(unsigned __int8 *)(*(_QWORD *)(result + 576) + v1);
      if ((v9 - 1) < 5)
        goto LABEL_4;
      if (v9 == 6)
      {
        v11 = v1 + 1;
        v19 = (__int16)(v7 + 1);
        if (v1 >= v19 && *(_QWORD *)(result + 1528))
        {
          v20 = (__int16)(v7 + 1);
          do
            *(_BYTE *)(*(_QWORD *)(result + 1528) + v20++) = 100;
          while (v11 != (unsigned __int16)v20);
        }
        if (v1 >= v19 && *(_QWORD *)(result + 1544))
        {
          v21 = (__int16)(v7 + 1);
          do
            *(_BYTE *)(*(_QWORD *)(result + 1544) + v21++) = 100;
          while (v11 != (unsigned __int16)v21);
        }
        if (v1 >= v19 && *(_QWORD *)(result + 1560))
        {
          v22 = (__int16)(v7 + 1);
          do
            *(_BYTE *)(*(_QWORD *)(result + 1560) + v22++) = 100;
          while (v11 != (unsigned __int16)v22);
        }
        v5 = 0;
        v6 = 0;
        if (v1 >= v19 && *(_QWORD *)(result + 1576))
        {
          do
            *(_BYTE *)(*(_QWORD *)(result + 1576) + v19++) = 100;
          while (v11 != (unsigned __int16)v19);
          v5 = 0;
          v4 = 0;
          v3 = 0;
          v2 = 0;
          v6 = 0;
        }
        else
        {
          v4 = 0;
          v3 = 0;
          v2 = 0;
        }
        v8 = 0;
        goto LABEL_55;
      }
      if (v9 == 7)
      {
LABEL_4:
        v10 = *(unsigned __int8 *)(*(_QWORD *)(result + 1432) + v1);
        if (v10 > 0xB)
        {
          v5 = 0;
          v3 = 1;
        }
        if ((v10 - 6) >= 0xFBu)
          v4 = 0;
        v11 = v1 + 1;
        v12 = (__int16)(v7 + 1);
        if (v1 >= v12 && *(_QWORD *)(result + 1528))
        {
          v13 = v12;
          do
            *(_BYTE *)(*(_QWORD *)(result + 1528) + v13++) = v5;
          while (v11 != (unsigned __int16)v13);
        }
        v14 = (int32x2_t)vcgt_u32((uint32x2_t)0xA0000000BLL, (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(v10 - 1), (int8x8_t)0xFF000000FFLL));
        v15 = (int32x2_t)vbic_s8(v6, (int8x8_t)v14);
        if (v1 >= v12 && *(_QWORD *)(result + 1544))
        {
          v16 = v12;
          do
            *(_BYTE *)(*(_QWORD *)(result + 1544) + v16++) = v15.i8[0];
          while (v11 != (unsigned __int16)v16);
        }
        if (v1 >= v12 && *(_QWORD *)(result + 1560))
        {
          v17 = v12;
          do
            *(_BYTE *)(*(_QWORD *)(result + 1560) + v17++) = v15.i8[4];
          while (v11 != (unsigned __int16)v17);
        }
        if (v1 >= v12 && *(_QWORD *)(result + 1576))
        {
          do
            *(_BYTE *)(*(_QWORD *)(result + 1576) + v12++) = v4;
          while (v11 != (unsigned __int16)v12);
        }
        v8 = vsub_s32((int32x2_t)vbic_s8((int8x8_t)v8, (int8x8_t)v14), v14);
        if (v5 != -1 && v3 != 0)
          ++v5;
        v6 = (int8x8_t)vsub_s32(v15, (int32x2_t)vbic_s8((int8x8_t)vtst_s32(v8, v8), (int8x8_t)vceq_s32((int32x2_t)vand_s8((int8x8_t)v15, (int8x8_t)0xFF000000FFLL), (int32x2_t)0xFF000000FFLL)));
        if ((v10 - 6) > 0xFAu || v2)
        {
          if (((v4 + 1) & 0x100) != 0)
            v4 = -1;
          else
            ++v4;
          v2 = 1;
        }
      }
      else
      {
        v11 = v1 + 1;
        v1 = v7;
      }
LABEL_55:
      v7 = v1;
      v1 = v11;
    }
    while (v11 < *(__int16 *)(result + 10));
  }
  return result;
}

uint64_t usextract_setRhythmRelatedBackward(uint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned __int8 v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(unsigned __int16 *)(result + 10);
  if ((((_WORD)v1 - 1) & 0x8000) == 0)
  {
    v2 = 0;
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = (__int16)(v1 - 1);
    do
    {
      v11 = (unsigned __int16)v10;
      v12 = *(unsigned __int8 *)(*(_QWORD *)(result + 568) + (unsigned __int16)v10);
      v13 = (__int16)v10;
      if ((v12 - 1) >= 5)
      {
        if (v12 == 6)
        {
          if ((__int16)v10 < (__int16)v1 && *(_QWORD *)(result + 1520))
          {
            v24 = (unsigned __int16)v10;
            do
              *(_BYTE *)(*(_QWORD *)(result + 1520) + v24++) = 100;
            while ((unsigned __int16)v1 != (unsigned __int16)v24);
          }
          if ((__int16)v10 < (__int16)v1 && *(_QWORD *)(result + 1536))
          {
            v25 = (unsigned __int16)v10;
            do
              *(_BYTE *)(*(_QWORD *)(result + 1536) + v25++) = 100;
            while ((unsigned __int16)v1 != (unsigned __int16)v25);
          }
          if ((__int16)v10 < (__int16)v1 && *(_QWORD *)(result + 1552))
          {
            v26 = (unsigned __int16)v10;
            do
              *(_BYTE *)(*(_QWORD *)(result + 1552) + v26++) = 100;
            while ((unsigned __int16)v1 != (unsigned __int16)v26);
          }
          v9 = 0;
          if ((__int16)v10 >= (__int16)v1)
          {
            v8 = 0;
            v7 = 0;
            v6 = 0;
            v5 = 0;
            v4 = 0;
            v3 = 0;
            v2 = 0;
          }
          else
          {
            v8 = 0;
            v7 = 0;
            v6 = 0;
            v5 = 0;
            v4 = 0;
            v3 = 0;
            v2 = 0;
            v23 = v10;
            if (!*(_QWORD *)(result + 1568))
              goto LABEL_51;
            do
              *(_BYTE *)(*(_QWORD *)(result + 1568) + v11++) = 100;
            while ((unsigned __int16)v1 != (unsigned __int16)v11);
            v9 = 0;
            v8 = 0;
            v7 = 0;
            v6 = 0;
            v5 = 0;
            v4 = 0;
            v3 = 0;
            v2 = 0;
          }
          goto LABEL_50;
        }
        if (v12 != 7)
        {
          v23 = v1;
          goto LABEL_51;
        }
      }
      v14 = *(unsigned __int8 *)(*(_QWORD *)(result + 1432) + (unsigned __int16)v10);
      if (v14 > 0xB)
      {
        v9 = 0;
        v5 = 1;
      }
      v15 = v14 - 1;
      if (v14 - 1 < 0xB)
        v8 = 0;
      if (v15 < 0xB)
        v4 = 1;
      if (v15 < 0xA)
      {
        v7 = 0;
        v3 = 1;
      }
      v16 = v14 - 6;
      if (v16 >= 0xFBu)
        v6 = 0;
      if ((__int16)v10 < (__int16)v1 && *(_QWORD *)(result + 1520))
      {
        v17 = (unsigned __int16)v10;
        do
          *(_BYTE *)(*(_QWORD *)(result + 1520) + v17++) = v9;
        while ((unsigned __int16)v1 != (unsigned __int16)v17);
      }
      if ((__int16)v10 < (__int16)v1 && *(_QWORD *)(result + 1536))
      {
        v18 = (unsigned __int16)v10;
        do
          *(_BYTE *)(*(_QWORD *)(result + 1536) + v18++) = v8;
        while ((unsigned __int16)v1 != (unsigned __int16)v18);
      }
      if ((__int16)v10 < (__int16)v1 && *(_QWORD *)(result + 1552))
      {
        v19 = (unsigned __int16)v10;
        do
          *(_BYTE *)(*(_QWORD *)(result + 1552) + v19++) = v7;
        while ((unsigned __int16)v1 != (unsigned __int16)v19);
      }
      if ((__int16)v10 < (__int16)v1 && *(_QWORD *)(result + 1568))
      {
        do
          *(_BYTE *)(*(_QWORD *)(result + 1568) + v11++) = v6;
        while ((unsigned __int16)v1 != (unsigned __int16)v11);
      }
      if (v9 != -1 && v5 != 0)
        ++v9;
      if (v8 != -1 && v4 != 0)
        ++v8;
      if (v7 != -1 && v3 != 0)
        ++v7;
      if (v16 > 0xFAu || v2)
      {
        if (((v6 + 1) & 0x100) != 0)
          v6 = -1;
        else
          ++v6;
        v2 = 1;
      }
LABEL_50:
      v23 = v10;
LABEL_51:
      v10 = (v10 - 1);
      v1 = v23;
    }
    while (v13 > 0);
  }
  return result;
}

uint64_t usextract_finalizeFineSylBndShape(uint64_t result)
{
  unsigned __int16 v1;
  unsigned __int16 v2;
  char v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_WORD *)(result + 10);
  v2 = v1 - 1;
  if (((v1 - 1) & 0x8000) == 0)
  {
    v3 = 0;
    v4 = 1;
    v5 = 1;
    do
    {
      v6 = v2;
      v7 = *(unsigned __int8 *)(*(_QWORD *)(result + 568) + v2);
      v8 = (__int16)v2;
      if (v7 <= 7)
      {
        if (((1 << v7) & 0xB8) != 0)
        {
          v9 = *(_QWORD *)(result + 1584);
          if (v5 && !v3)
          {
            v3 = *(_BYTE *)(v9 + v2);
            if (v4)
              v3 += 100;
            v4 = 0;
          }
          v5 = 1;
          if ((__int16)v2 < (__int16)v1 && v9)
          {
            do
              *(_BYTE *)(*(_QWORD *)(result + 1584) + v6++) = v3;
            while (v1 != (unsigned __int16)v6);
            v3 = 0;
            v5 = 1;
          }
          else
          {
            v3 = 0;
          }
        }
        else if (((1 << v7) & 6) != 0)
        {
          v10 = *(_QWORD *)(result + 1584);
          if (v5 && !v3)
          {
            v3 = *(_BYTE *)(v10 + v2);
            if (v4)
              v3 += 100;
            v4 = 0;
          }
          if ((__int16)v2 < (__int16)v1 && v10)
          {
            v11 = v2;
            do
              *(_BYTE *)(*(_QWORD *)(result + 1584) + v11++) = v3;
            while (v1 != (unsigned __int16)v11);
          }
          if (*(unsigned __int8 *)(*(_QWORD *)(result + 1432) + v2) - 1 < 0xA)
          {
            v3 = 0;
            v5 = 0;
          }
        }
        else
        {
          if (v7 != 6)
            goto LABEL_29;
          if ((__int16)v2 < (__int16)v1 && *(_QWORD *)(result + 1584))
          {
            do
              *(_BYTE *)(*(_QWORD *)(result + 1584) + v6++) = 0;
            while (v1 != (unsigned __int16)v6);
          }
        }
        v1 = v2;
      }
LABEL_29:
      --v2;
    }
    while (v8 > 0);
  }
  return result;
}

uint64_t usextract_setSylIndexInWordFromStart(uint64_t result)
{
  int v1;
  __int16 v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  if (*(__int16 *)(result + 10) >= 1)
  {
    **(_BYTE **)(result + 1384) = 0;
    if (*(__int16 *)(result + 10) >= 3)
    {
      v1 = 1;
      v2 = 1;
      do
      {
        v3 = *(_QWORD *)(result + 32);
        if (*(_BYTE *)(v3 + v2) == 35)
        {
          LOBYTE(v4) = 0;
        }
        else
        {
          v5 = v1 - 1;
          v6 = *(unsigned __int8 *)(*(_QWORD *)(result + 112) + v5);
          if (v6 <= 1 && *(_BYTE *)(v3 + v5) != 35)
          {
            v7 = *(_QWORD *)(result + 1384);
            v4 = *(unsigned __int8 *)(v7 + v5);
            if (v6 == 1 && v4 < 7)
              LOBYTE(v4) = v4 + 1;
            goto LABEL_10;
          }
          LOBYTE(v4) = 1;
        }
        v7 = *(_QWORD *)(result + 1384);
LABEL_10:
        *(_BYTE *)(v7 + v2++) = v4;
        v1 = v2;
      }
      while (*(__int16 *)(result + 10) - 1 > v2);
    }
  }
  return result;
}

uint64_t usextract_setSylIndexInWordFromEnd(uint64_t result)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;

  LODWORD(v1) = *(__int16 *)(result + 10);
  if ((int)v1 >= 1)
  {
    *(_BYTE *)(*(_QWORD *)(result + 1392) + *(unsigned __int16 *)(result + 10) - 1) = 0;
    LOWORD(v1) = *(_WORD *)(result + 10);
  }
  LOWORD(v1) = v1 - 2;
  if ((v1 & 0x8000) == 0)
  {
    v1 = (unsigned __int16)v1;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)(result + 32) + v1) == 35)
      {
        v2 = 0;
        v3 = *(_QWORD *)(result + 1392);
      }
      else
      {
        v4 = *(unsigned __int8 *)(*(_QWORD *)(result + 112) + v1);
        if (v4 < 2)
        {
          v3 = *(_QWORD *)(result + 1392);
          v5 = (v1 + 1);
          if (v4 == 1 && (v6 = *(unsigned __int8 *)(v3 + v5), v6 <= 6))
            v2 = v6 + 1;
          else
            v2 = *(_BYTE *)(v3 + v5);
        }
        else
        {
          v3 = *(_QWORD *)(result + 1392);
          v2 = 1;
        }
      }
      *(_BYTE *)(v3 + v1) = v2;
    }
    while (v1-- > 0);
  }
  return result;
}

uint64_t usextract_setSylPosInWordRelEnd(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  char v4;

  if (((*(_WORD *)(result + 10) - 1) & 0x8000) == 0)
  {
    v1 = (unsigned __int16)(*(_WORD *)(result + 10) - 1);
    do
    {
      if (*(_BYTE *)(*(_QWORD *)(result + 32) + v1) == 35
        || (v2 = *(unsigned __int8 *)(*(_QWORD *)(result + 112) + v1), (v2 - 2) < 2))
      {
        v3 = *(_QWORD *)(result + 304);
        v4 = 1;
      }
      else if (v2 == 1)
      {
        v3 = *(_QWORD *)(result + 304);
        v4 = *(_BYTE *)(v3 + (v1 + 1)) + 1;
      }
      else
      {
        if ((int)v1 + 1 >= *(__int16 *)(result + 10))
          continue;
        v3 = *(_QWORD *)(result + 304);
        v4 = *(_BYTE *)(v3 + (v1 + 1));
      }
      *(_BYTE *)(v3 + v1) = v4;
    }
    while (v1-- > 0);
  }
  return result;
}

void *usextract_setSylPosInSenRelStr(uint64_t a1, int a2, int a3)
{
  __int16 v3;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  int v9;
  void *v10;
  int v11;
  size_t v12;
  void *result;
  int v14;

  v3 = a2;
  if (a2 < 0)
    v3 = *(_WORD *)(a1 + 10) - 1;
  v5 = *(__int16 *)(a1 + 10);
  if ((a3 & 0x80000000) == 0)
  {
    if ((int)v5 <= a3)
    {
      v7 = 0;
    }
    else
    {
      v6 = *(_QWORD *)(a1 + 72);
      if (*(_BYTE *)(v6 + (unsigned __int16)a3) == 1)
      {
        v7 = 1;
      }
      else
      {
        v8 = (unsigned __int16)a3 + 1;
        while (*(unsigned __int16 *)(a1 + 10) != (unsigned __int16)v8)
        {
          v9 = *(unsigned __int8 *)(v6 + v8++);
          if (v9 == 1)
          {
            LOWORD(a3) = v8 - 1;
            v7 = v8 - 1 < v5;
            goto LABEL_13;
          }
        }
        v7 = v8 < v5;
        LOWORD(a3) = *(_WORD *)(a1 + 10);
      }
    }
LABEL_13:
    LOWORD(v5) = a3 + v7;
  }
  v10 = *(void **)(a1 + 296);
  v11 = (__int16)v5;
  if ((__int16)v5 >= 1)
    v12 = (__int16)v5;
  else
    v12 = 0;
  result = memset(v10, 1, v12);
  if (v11 < v3)
    result = memset((void *)(*(_QWORD *)(a1 + 296) + v11), 2, (v3 - v11) & ~((v3 - v11) >> 31));
  v14 = *(__int16 *)(a1 + 10);
  if (v14 > v3)
    return memset((void *)(*(_QWORD *)(a1 + 296) + v3), 3, (v14 - v3) & ~((v14 - v3) >> 31));
  return result;
}

uint64_t usextract_setPitchAndDurFromCart(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*(__int16 *)(a2 + 10) >= 1)
  {
    v3 = result;
    v4 = 0;
    v5 = result + 28176;
    v6 = result + 28200;
    v7 = result + 28208;
    do
    {
      v8 = *(unsigned __int8 *)(v3 + *(unsigned __int8 *)(*(_QWORD *)(a2 + 32) + v4) + 2144);
      if ((*(_DWORD *)(v3 + 3068) & 0x80000000) == 0 && *(_BYTE *)(v3 + v8 + 859) == 118)
      {
        v9 = *(_QWORD *)(a2 + 1712);
        if (v9)
          v10 = v9 + v4;
        else
          v10 = 0;
        v11 = *(_QWORD *)(a2 + 1720);
        if (v11)
          v12 = v11 + v4;
        else
          v12 = 0;
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 28168))(v5, v6, 0, a2, (__int16)v4, *(_QWORD *)(a2 + 216) + v4, *(_QWORD *)(a2 + 224) + v4, v10, v12);
      }
      if ((*(_DWORD *)(v3 + 3072) & 0x80000000) == 0)
      {
        v13 = *(_QWORD *)(a2 + 1728);
        if (v13)
          v14 = v13 + v4;
        else
          v14 = 0;
        v15 = *(_QWORD *)(a2 + 1736);
        if (v15)
          v16 = v15 + v4;
        else
          v16 = 0;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 28168))(v7, *(_QWORD *)(v3 + 28232) + 8 * v8, 1, a2, (__int16)v4, *(_QWORD *)(a2 + 232) + v4, *(_QWORD *)(a2 + 240) + v4, v14, v16);
      }
      ++v4;
    }
    while (v4 < *(__int16 *)(a2 + 10));
  }
  return result;
}

uint64_t usextract_setSylTrans(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _WORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  _WORD *v24;

  if (*(__int16 *)(a2 + 10) >= 1)
  {
    v2 = 0;
    v3 = 0;
    v4 = *(_QWORD *)(a2 + 248);
    v5 = *(_QWORD *)(a2 + 80);
    v6 = 1;
    v7 = *(_QWORD *)(result + 3528);
    do
    {
      if (*(_BYTE *)(v5 + v2) == 1)
        v6 = 1;
      v8 = (unsigned __int16 *)(v7 + 2 * *(unsigned __int8 *)(v4 + v2));
      v9 = *v8;
      v10 = v8[1];
      if (v9 < v10)
      {
        v11 = *(_BYTE *)(result
                       + *(unsigned __int8 *)(result + *(unsigned __int8 *)(*(_QWORD *)(a2 + 32) + v2) + 2144)
                       + 1116) == 86
           && v6 == 1;
        if (v11)
        {
          if (v3)
          {
            v12 = v3;
            if ((*(_DWORD *)(result + 3392) & 0x80000000) != 0)
            {
              v17 = *(_QWORD *)(a2 + 160);
              v18 = *(unsigned __int8 *)(v17 + v3);
              v15 = (_WORD *)(*(_QWORD *)(result + 3544) + 16 * v9);
              v19 = v9 + 1;
              while (1)
              {
                if (v18 == (__int16)v15[4])
                {
                  v20 = *(_QWORD *)(a2 + 152);
                  if (*(unsigned __int8 *)(v20 + v12) == v15[5]
                    && *(unsigned __int8 *)(v17 + v2) == v15[6]
                    && *(unsigned __int8 *)(v20 + v2) == v15[7])
                  {
                    break;
                  }
                }
                v15 += 8;
                v11 = v10 == (unsigned __int16)v19++;
                if (v11)
                  goto LABEL_26;
              }
            }
            else
            {
              v13 = *(_QWORD *)(a2 + 264);
              v14 = *(unsigned __int8 *)(v13 + v3);
              v15 = (_WORD *)(*(_QWORD *)(result + 3536) + 12 * v9);
              v16 = v9 + 1;
              while (v14 != (__int16)v15[4] || *(unsigned __int8 *)(v13 + v2) != v15[5])
              {
                v15 += 6;
                v11 = v10 == (unsigned __int16)v16++;
                if (v11)
                  goto LABEL_26;
              }
            }
            v6 = 0;
            v21 = *(_QWORD *)(a2 + 3552);
            v24 = (_WORD *)(v21 + 8 * v2);
            *v24 = *v15;
            v24[1] = v15[1];
            v24[2] = v15[2];
            v23 = v15[3];
            v3 = v2;
            goto LABEL_28;
          }
LABEL_26:
          v6 = 0;
          v3 = v2;
        }
      }
      v21 = *(_QWORD *)(a2 + 3552);
      v22 = v21 + 8 * v2;
      *(_DWORD *)v22 = -13041864;
      v23 = 200;
      *(_WORD *)(v22 + 4) = 200;
LABEL_28:
      *(_WORD *)(v21 + 8 * v2++ + 6) = v23;
    }
    while (v2 < *(__int16 *)(a2 + 10));
  }
  return result;
}

uint64_t usextract_setSylChunk(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  _BYTE *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  _BYTE *v10;
  char v11;
  __int16 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  uint64_t v19;

  v1 = *(__int16 *)(result + 10);
  if (v1 >= 1)
  {
    v2 = 0;
    do
    {
      v3 = v2 + 1;
      if (v2 + 1 == (__int16)v1)
      {
        v4 = *(_BYTE *)(v2 + *(_QWORD *)(result + 32) - 1);
        v5 = (_BYTE *)(*(_QWORD *)(result + 3560) + 9 * v2);
        v5[5] = v4;
        v5[6] = 35;
        *v5 = 35;
      }
      else
      {
        if (*(_BYTE *)(*(_QWORD *)(result + 80) + v2) == 1)
        {
          v6 = *(_QWORD *)(result + 32);
          if (v2)
            v7 = *(_BYTE *)(v2 + v6 - 1);
          else
            v7 = 35;
          v10 = (_BYTE *)(*(_QWORD *)(result + 3560) + 9 * v2);
          v10[5] = v7;
          v11 = *(_BYTE *)(v6 + v2);
          *v10 = v11;
          *(_BYTE *)(*(_QWORD *)(result + 3560) + 9 * v2 + 7) = v11;
          v12 = *(_WORD *)(result + 10);
          if (v2)
          {
            v13 = v2 + 1;
            if ((int)v2 + 1 >= *(__int16 *)(result + 10) || *(_BYTE *)(*(_QWORD *)(result + 112) + (__int16)v2))
            {
              LOWORD(v14) = v2;
            }
            else
            {
              v18 = 1;
              LOWORD(v14) = v2;
              do
              {
                if (v18 > 4)
                {
                  if (v18 == 5)
                  {
                    v19 = *(_QWORD *)(result + 3560) + 9 * v2;
                    *(_BYTE *)(v19 + 8) = 0;
                    *(_QWORD *)v19 = 0;
                  }
                }
                else
                {
                  *(_BYTE *)(*(_QWORD *)(result + 3560) + 9 * v2 + v18) = *(_BYTE *)(*(_QWORD *)(result + 32) + v13);
                }
                LOWORD(v14) = v14 + 1;
                v13 = (__int16)v14 + 1;
                v12 = *(_WORD *)(result + 10);
                if (v13 >= v12)
                  break;
                ++v18;
              }
              while (!*(_BYTE *)(*(_QWORD *)(result + 112) + (__int16)v14));
            }
          }
          else
          {
            LOWORD(v14) = 0;
          }
          v14 = (__int16)v14;
          v15 = (__int16)v14 + 1;
          v16 = *(_QWORD *)(result + 32);
          if ((int)v15 >= v12)
            v17 = 35;
          else
            v17 = *(_BYTE *)(v16 + v15);
          v8 = *(_QWORD *)(result + 3560) + 9 * v2;
          *(_BYTE *)(v8 + 6) = v17;
          v9 = *(_BYTE *)(v16 + v14);
        }
        else
        {
          v8 = *(_QWORD *)(result + 3560) + 9 * v2;
          *(_QWORD *)v8 = *(_QWORD *)(v8 - 9);
          v9 = *(_BYTE *)(v8 - 1);
        }
        *(_BYTE *)(v8 + 8) = v9;
      }
      LOWORD(v1) = *(_WORD *)(result + 10);
      v2 = v3;
    }
    while (v3 < (__int16)v1);
  }
  return result;
}

uint64_t usextract_applyGenericContextRules(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  __int16 v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;

  v2 = *(_QWORD *)(a1 + 3520);
  if (v2)
  {
    v3 = *(__int16 *)(a2 + 10);
    if (v3 < 2)
    {
      return 0;
    }
    else
    {
      v4 = 0;
      v5 = 0;
      do
      {
        v6 = *(uint64_t **)(a1 + 3520);
        if (v6)
        {
          do
          {
            v7 = *v6;
            if (*v6)
            {
              while (1)
              {
                if (((v5 + *(char *)(v7 + 2)) & 0x8000) != 0
                  || *(__int16 *)(a2 + 10) <= (__int16)(v5 + *(char *)(v7 + 2)))
                {
                  if (*(_BYTE *)(v7 + 1) != 2)
                    break;
                  v9 = 35;
                }
                else
                {
                  v8 = (_QWORD *)(*(_BYTE *)v7
                                ? *(_QWORD *)(a2 + 3504) + 8 * *(unsigned __int8 *)(v7 + 1)
                                : a2 + 8 * *(unsigned __int8 *)(v7 + 1) + 16);
                  v9 = *(unsigned __int8 *)(*v8 + (unsigned __int16)(v5 + *(char *)(v7 + 2)));
                }
                if (((*(unsigned __int8 *)(v7 + ((unint64_t)v9 >> 3) + 3) >> (v9 & 7)) & 1) == 0)
                  break;
                v7 = *(_QWORD *)(v7 + 40);
                if (!v7)
                  goto LABEL_16;
              }
            }
            else
            {
LABEL_16:
              v10 = v6[1];
              if (v10)
              {
                while (2)
                {
                  switch(*(_DWORD *)v10)
                  {
                    case 1:
                      v11 = *(unsigned __int8 *)(v10 + 4) + v4 * *(unsigned __int16 *)(*(_QWORD *)a2 + 2966);
                      v12 = (unsigned int *)(*(_QWORD *)(a2 + 3568) + 4 * v11);
                      v13 = (unsigned int *)(*(_QWORD *)(a2 + 3576) + 4 * v11);
                      if (v12)
                        goto LABEL_28;
                      goto LABEL_49;
                    case 2:
                      v13 = 0;
                      v14 = *(_QWORD *)(a2 + 3584);
                      goto LABEL_22;
                    case 3:
                      v13 = 0;
                      v14 = *(_QWORD *)(a2 + 3592);
LABEL_22:
                      v15 = *(unsigned __int16 *)(*(_QWORD *)a2 + 3360);
                      goto LABEL_27;
                    case 4:
                      *(_BYTE *)(*(_QWORD *)(a2 + 3600)
                               + *(unsigned __int8 *)(v10 + 4)
                               + *(unsigned __int16 *)(*(_QWORD *)a2 + 2966) * (uint64_t)v4) = *(_DWORD *)(v10 + 8);
                      goto LABEL_49;
                    case 5:
                      v13 = 0;
                      v14 = *(_QWORD *)(a2 + 3568);
                      goto LABEL_26;
                    case 6:
                      v13 = 0;
                      v14 = *(_QWORD *)(a2 + 3576);
LABEL_26:
                      v15 = *(unsigned __int16 *)(*(_QWORD *)a2 + 2966);
LABEL_27:
                      v12 = (unsigned int *)(v14 + 4 * (*(unsigned __int8 *)(v10 + 4) + v4 * v15));
                      if (!v12)
                        goto LABEL_49;
LABEL_28:
                      v16 = *(_DWORD *)(v10 + 8);
                      if (v16 == 10)
                      {
                        *v12 *= 5;
                        if (v13)
                          *v13 *= 5;
                        v16 = *(_DWORD *)(v10 + 8);
                      }
                      if (v16)
                      {
                        v17 = *v12;
                        if (*v12 >= 0x80000000 / v16)
                        {
                          if (v17 % 0xA && (!(v16 % 0xA) || v17 <= v16))
                          {
                            *v12 = v17 * (v16 / 0xA);
                            if (!v13)
                              goto LABEL_49;
                            v20 = *(_DWORD *)(v10 + 8) / 0xAu * *v13;
                          }
                          else
                          {
                            *v12 = v17 / 0xA * v16;
                            if (!v13)
                              goto LABEL_49;
                            v20 = *v13 / 0xA * *(_DWORD *)(v10 + 8);
                          }
                          *v13 = v20;
                        }
                        else
                        {
                          *v12 = v17 * v16 / 0xA;
                          if (v13)
                            *v13 = *(_DWORD *)(v10 + 8) * *v13 / 0xA;
                        }
                      }
                      else
                      {
                        *v12 = 0;
                        if (v13)
                          *v13 = 0;
                      }
LABEL_49:
                      v10 = *(_QWORD *)(v10 + 16);
                      if (!v10)
                        break;
                      continue;
                    case 7:
                      v18 = *(_DWORD *)(v10 + 8);
                      v19 = *(_QWORD *)(a2 + 1696);
                      goto LABEL_40;
                    case 8:
                      v18 = *(_DWORD *)(v10 + 8);
                      v19 = *(_QWORD *)(a2 + 1704);
LABEL_40:
                      *(_BYTE *)(v19 + v5) = v18;
                      goto LABEL_49;
                    default:
                      return 2229280769;
                  }
                  break;
                }
              }
            }
            v6 = (uint64_t *)v6[2];
          }
          while (v6);
          LOWORD(v3) = *(_WORD *)(a2 + 10);
        }
        v2 = 0;
        v4 = ++v5;
      }
      while ((__int16)v3 - 1 > v5);
    }
  }
  return v2;
}

void *usextract_removePromptColumns(uint64_t a1)
{
  void *result;
  int v3;
  void *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  unsigned __int16 v9;
  int v10;
  __int16 v11;
  __int16 *v12;
  uint64_t v13;
  __int16 v14;
  size_t v15;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;

  result = strstr((char *)(*(_QWORD *)a1 + 152), "bet4");
  v3 = *(__int16 *)(a1 + 10);
  if (v3 >= 1)
  {
    v4 = result;
    v5 = 0;
    do
    {
      v6 = (__int16)v3 - 1;
      if (v6 > (__int16)v5)
      {
        v7 = (__int16)v5;
        v8 = (__int16)v5;
        v9 = v5;
        do
        {
          v10 = *(_DWORD *)(*(_QWORD *)(a1 + 3608) + 4 * v8 * *(unsigned __int16 *)(*(_QWORD *)a1 + 3578));
          if (v10 != -2)
            break;
          v8 = (__int16)++v9;
        }
        while (v6 > (__int16)v9);
        if (v9 != (unsigned __int16)v5)
        {
          if (v5 >= v8)
          {
            v11 = 0;
          }
          else
          {
            v11 = 0;
            v12 = (__int16 *)(*(_QWORD *)(a1 + 1800) + 2 * v5);
            v13 = v8 - (uint64_t)v5;
            do
            {
              v14 = *v12++;
              v11 += v14;
              --v13;
            }
            while (v13);
          }
          v15 = ((__int16)v3 - v8) & ~(((__int16)v3 - v8) >> 31);
          v17 = v10 != -2 || v4 != 0;
          if ((__int16)v5 < 1 || !v17)
            goto LABEL_28;
          v18 = *(_QWORD *)(a1 + 32);
          if (*(_BYTE *)(v18 + (v5 - 1)) != 35)
          {
            *(_BYTE *)(v18 + (unsigned __int16)v5) = 35;
            *(_WORD *)(*(_QWORD *)(a1 + 1800) + 2 * (unsigned __int16)v5) = 0;
            *(_WORD *)(*(_QWORD *)(a1 + 1784) + 2 * (unsigned __int16)v5) = 1;
            if (*(_WORD *)(*(_QWORD *)a1 + 3578))
              result = memset((void *)(*(_QWORD *)(a1 + 3608)+ 4 * v5 * *(unsigned __int16 *)(*(_QWORD *)a1 + 3578)), 255, 4 * *(unsigned __int16 *)(*(_QWORD *)a1 + 3578));
            LOWORD(v5) = v5 + 1;
            v7 = (__int16)v5;
          }
          if (v4 && (__int16)v5 >= 1 && (v19 = *(_QWORD *)(a1 + 32), *(_BYTE *)(v19 + (__int16)v9) != 35))
          {
            if ((unsigned __int16)v5 == v9)
            {
              result = hlpMoveColumns((unsigned __int16 **)a1, (__int16)v9, (__int16)(v9 + 1), v15);
              v19 = *(_QWORD *)(a1 + 32);
              ++v9;
            }
            *(_BYTE *)(v19 + (unsigned __int16)v5) = 35;
            *(_WORD *)(*(_QWORD *)(a1 + 1800) + 2 * (unsigned __int16)v5) = 0;
            *(_WORD *)(*(_QWORD *)(a1 + 1784) + 2 * (unsigned __int16)v5) = 1;
            if (*(_WORD *)(*(_QWORD *)a1 + 3578))
              result = memset((void *)(*(_QWORD *)(a1 + 3608)+ 4 * v7 * *(unsigned __int16 *)(*(_QWORD *)a1 + 3578)), 255, 4 * *(unsigned __int16 *)(*(_QWORD *)a1 + 3578));
            LOWORD(v5) = v5 + 1;
          }
          else
          {
LABEL_28:
            v7 = v8;
          }
          *(_WORD *)(*(_QWORD *)(a1 + 1800) + 2 * v7) += v11;
          if ((__int16)v5 < (__int16)v9)
            result = hlpMoveColumns((unsigned __int16 **)a1, (__int16)v9, (__int16)v5, v15);
        }
      }
      v5 = (__int16)(v5 + 1);
      v3 = *(__int16 *)(a1 + 10);
    }
    while (v5 < v3);
  }
  return result;
}

uint64_t usextract_logAllFeatures(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  unsigned __int16 *v16;
  uint64_t *v17;
  size_t v18;
  uint64_t v19;
  unsigned int v20;
  char v21[16];
  char __s[64];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v21[0] = 0;
  __s[0] = 0;
  result = (uint64_t)LH_itoa(0x4Eu, v21, 0xAu);
  v7 = 0;
  v8 = 0;
  do
  {
    v9 = 0;
    v10 = *((__int16 *)a3 + 5);
    if (v10 >= 1)
      v11 = *((__int16 *)a3 + 5);
    else
      v11 = 0;
    v12 = 99;
    if (v7 - 2 >= 4 && (_BYTE)v7)
    {
      v13 = *a3;
      v14 = *(unsigned __int8 *)(*a3 + v7 + 2748);
      if (v7 == 1)
      {
        v8 = "application/x-realspeak-marker-counts;version=4.0";
LABEL_22:
        switch(v14)
        {
          case 0:
            goto LABEL_23;
          case 1:
            goto LABEL_25;
          case 2:
            if (!v9)
              v9 = a3[v7 + 220];
            v19 = *(_QWORD *)(a1 + 32);
            v20 = 2 * v11;
            goto LABEL_32;
          case 4:
            v19 = *(_QWORD *)(a1 + 32);
            v20 = 4 * v11;
LABEL_32:
            result = log_OutBinary(v19, a2, v12, 0, (uint64_t)v21, (uint64_t)v8, v9, v20, 0);
            break;
          default:
            goto LABEL_33;
        }
        goto LABEL_33;
      }
      v9 = 0;
      if (*(_BYTE *)(*a3 + v7 + 2748))
      {
        switch((__int16)v7)
        {
          case '.':
            v15 = a3 + 445;
            goto LABEL_13;
          case '/':
          case '0':
          case '1':
          case '2':
          case '7':
            break;
          case '3':
            v16 = (unsigned __int16 *)(v13 + 2966);
            v14 = 4;
            v17 = a3 + 446;
            goto LABEL_20;
          case '4':
            v16 = (unsigned __int16 *)(v13 + 2966);
            v14 = 4;
            v17 = a3 + 447;
            goto LABEL_20;
          case '5':
            v16 = (unsigned __int16 *)(v13 + 3360);
            v14 = 4;
            v17 = a3 + 448;
            goto LABEL_20;
          case '6':
            v16 = (unsigned __int16 *)(v13 + 3360);
            v14 = 4;
            v17 = a3 + 449;
            goto LABEL_20;
          case '8':
            v16 = (unsigned __int16 *)(v13 + 2966);
            v14 = 1;
            v17 = a3 + 450;
LABEL_20:
            v9 = *v17;
            v11 = *v16 * v10;
            break;
          default:
            v15 = a3 + 444;
            if ((unsigned __int16)v7 == 24)
LABEL_13:
              v9 = *v15;
            break;
        }
        v8 = __s;
        __strcpy_chk();
        v18 = strlen(__s);
        result = (uint64_t)LH_itoa(v7, &__s[v18], 0xAu);
        v12 = 100;
        goto LABEL_22;
      }
    }
LABEL_23:
    if (v7 == 1 && a3[3])
    {
LABEL_25:
      if (!v9)
        v9 = a3[v7 + 2];
      result = log_OutBinary(*(_QWORD *)(a1 + 32), a2, v12, 0, (uint64_t)v21, (uint64_t)v8, v9, v11, 0);
    }
LABEL_33:
    ++v7;
  }
  while (v7 != 218);
  return result;
}

uint64_t usextract_allocateLayers(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t GenericFeatureLayers;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  void *v39;
  unsigned int v41;

  v8 = 0;
  v9 = 0;
  do
  {
    if (*(_BYTE *)(*a3 + 2748 + v8) == 1)
      ++v9;
    ++v8;
  }
  while (v8 != 218);
  v10 = heap_Calloc(*(_QWORD **)(a1 + 8), v9 * a4, 1);
  if (!v10)
    goto LABEL_45;
  v15 = v10;
  for (i = 0; i != 218; ++i)
  {
    v17 = *a3;
    v18 = *(unsigned __int8 *)(*a3 + i + 2748);
    if (*(_BYTE *)(*a3 + i + 2748))
    {
      if (v18 == 2)
      {
        v19 = heap_Calloc(*(_QWORD **)(a1 + 8), a4, 2);
        a3[i + 220] = v19;
        if (!v19)
          goto LABEL_45;
      }
      else if (v18 == 1)
      {
        a3[i + 2] = v15;
        v15 += a4;
      }
      else
      {
        switch((int)i)
        {
          case '.':
            v20 = heap_Calloc(*(_QWORD **)(a1 + 8), a4, 9);
            a3[445] = v20;
            if (!v20)
              goto LABEL_45;
            continue;
          case '/':
          case '0':
          case '1':
          case '2':
          case '7':
            goto LABEL_20;
          case '3':
            v22 = *(unsigned __int16 *)(v17 + 2966);
            if (v22)
            {
              v23 = heap_Calloc(*(_QWORD **)(a1 + 8), v22 * a4, 4);
              a3[446] = v23;
              if (!v23)
                goto LABEL_45;
            }
            continue;
          case '4':
            v24 = *(unsigned __int16 *)(v17 + 2966);
            if (v24)
            {
              v25 = heap_Calloc(*(_QWORD **)(a1 + 8), v24 * a4, 4);
              a3[447] = v25;
              if (!v25)
                goto LABEL_45;
            }
            continue;
          case '5':
            v26 = *(unsigned __int16 *)(v17 + 3360);
            if (v26)
            {
              v27 = heap_Calloc(*(_QWORD **)(a1 + 8), v26 * a4, 4);
              a3[448] = v27;
              if (!v27)
                goto LABEL_45;
            }
            continue;
          case '6':
            v28 = *(unsigned __int16 *)(v17 + 3360);
            if (v28)
            {
              v29 = heap_Calloc(*(_QWORD **)(a1 + 8), v28 * a4, 4);
              a3[449] = v29;
              if (!v29)
                goto LABEL_45;
            }
            continue;
          case '8':
            v30 = *(unsigned __int16 *)(v17 + 2966);
            if (v30)
            {
              v31 = heap_Calloc(*(_QWORD **)(a1 + 8), v30 * a4, 1);
              a3[450] = v31;
              if (!v31)
                goto LABEL_45;
            }
            continue;
          default:
            if ((_DWORD)i == 24)
            {
              v21 = heap_Calloc(*(_QWORD **)(a1 + 8), a4, 8);
              a3[444] = v21;
              if (!v21)
                goto LABEL_45;
            }
            else
            {
LABEL_20:
              if (a2)
                log_OutPublic(*(_QWORD *)(a1 + 32), a2, 55007, "%s%u", v11, v12, v13, v14, "feature");
            }
            break;
        }
      }
    }
  }
  GenericFeatureLayers = usextract_allocateGenericFeatureLayers(a1, a2, a3, a4);
  if ((GenericFeatureLayers & 0x80000000) != 0)
    return GenericFeatureLayers;
  v37 = *(unsigned __int16 *)(*a3 + 3578);
  if (v37 >= 4)
  {
    log_OutPublic(*(_QWORD *)(a1 + 32), a2, 55000, "Invalid number of states per phoneme", v33, v34, v35, v36, "%s%u");
    return 2229280783;
  }
  v39 = (void *)heap_Calloc(*(_QWORD **)(a1 + 8), v37 * a4, 4);
  a3[451] = v39;
  if (v39)
  {
    if (*(unsigned __int16 *)(*a3 + 3578) * a4)
      memset(v39, 255, 4 * *(unsigned __int16 *)(*a3 + 3578) * a4);
    return 0;
  }
  else
  {
LABEL_45:
    v38 = 2229280778;
    if (a2)
      log_OutPublic(*(_QWORD *)(a1 + 32), a2, 55000, 0, v11, v12, v13, v14, v41);
  }
  return v38;
}

uint64_t usextract_allocateGenericFeatureLayers(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int a4)
{
  _QWORD *v5;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v21;

  v5 = *(_QWORD **)(*a3 + 3336);
  if (!v5 || !*v5)
  {
    v19 = 0;
    a3[438] = 0;
    return v19;
  }
  v9 = 0;
  v10 = v5 + 1;
  while (v10[v9++])
    ;
  v12 = heap_Calloc(*(_QWORD **)(a1 + 8), v9, 8);
  a3[438] = v12;
  if (v12)
  {
    if (!(_DWORD)v9)
      return 0;
    v17 = 0;
    v18 = 8 * v9;
    while (1)
    {
      *(_QWORD *)(a3[438] + v17) = heap_Calloc(*(_QWORD **)(a1 + 8), a4, 1);
      if (!*(_QWORD *)(a3[438] + v17))
        break;
      v17 += 8;
      if (v18 == v17)
        return 0;
    }
  }
  v19 = 2229280778;
  if (a2)
    log_OutPublic(*(_QWORD *)(a1 + 32), a2, 55000, 0, v13, v14, v15, v16, v21);
  return v19;
}

uint64_t usextract_freeLayers(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;

  v9 = a2;
  v11 = 0;
  v12 = 1;
  do
  {
    v13 = *(unsigned __int8 *)(*a3 + v11 + 2748);
    if (*(_BYTE *)(*a3 + v11 + 2748))
    {
      if (v13 == 2)
      {
        a2 = a3[v11 + 220];
        if (a2)
LABEL_10:
          heap_Free(*(_QWORD **)(a1 + 8), a2);
      }
      else if (v13 == 1)
      {
        if (v12)
        {
          a2 = a3[v11 + 2];
          if (a2)
            heap_Free(*(_QWORD **)(a1 + 8), a2);
          v12 = 0;
        }
      }
      else
      {
        switch((int)v11)
        {
          case '.':
            a2 = a3[445];
            if (a2)
              goto LABEL_10;
            break;
          case '/':
          case '0':
          case '1':
          case '2':
          case '7':
            goto LABEL_19;
          case '3':
            a2 = a3[446];
            if (a2)
              goto LABEL_10;
            break;
          case '4':
            a2 = a3[447];
            if (a2)
              goto LABEL_10;
            break;
          case '5':
            a2 = a3[448];
            if (a2)
              goto LABEL_10;
            break;
          case '6':
            a2 = a3[449];
            if (a2)
              goto LABEL_10;
            break;
          case '8':
            a2 = a3[450];
            if (a2)
              goto LABEL_10;
            break;
          default:
            if ((_DWORD)v11 == 24)
            {
              a2 = a3[444];
              if (a2)
                goto LABEL_10;
            }
            else
            {
LABEL_19:
              if (v9)
                log_OutPublic(*(_QWORD *)(a1 + 32), v9, 55010, "%s%u", a5, a6, a7, a8, "feature");
            }
            break;
        }
      }
    }
    ++v11;
  }
  while (v11 != 218);
  usextract_freeGenericFeatureLayers((_QWORD *)a1, a2, a3);
  v14 = a3[451];
  if (v14)
    heap_Free(*(_QWORD **)(a1 + 8), v14);
  *a3 = 0;
  return 0;
}

_QWORD *usextract_freeGenericFeatureLayers(_QWORD *result, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v3 = *(_QWORD **)(*a3 + 3336);
  if (v3)
  {
    v5 = a3[438];
    if (v5)
    {
      v6 = result;
      if (!*v3)
        goto LABEL_9;
      v7 = 0;
      v8 = v3 + 1;
      do
      {
        v9 = *(_QWORD *)(a3[438] + 8 * v7);
        if (v9)
          result = heap_Free((_QWORD *)v6[1], v9);
      }
      while (v8[v7++]);
      v5 = a3[438];
      if (v5)
LABEL_9:
        result = heap_Free((_QWORD *)v6[1], v5);
      a3[438] = 0;
    }
  }
  return result;
}

uint64_t usextract_getIndex(const char **a1, char *__s1, unint64_t a3)
{
  const char *v3;
  uint64_t v5;
  size_t v6;
  const char **v7;

  if (a3 <= (unint64_t)__s1)
    return 0xFFFFFFFFLL;
  v3 = *a1;
  if (!*a1)
    return 0xFFFFFFFFLL;
  v5 = 0;
  v6 = (a3 - (_DWORD)__s1);
  v7 = a1 + 1;
  while (strncmp(__s1, v3, v6) || strlen(v3) != v6)
  {
    v3 = v7[v5++];
    if (!v3)
      return 0xFFFFFFFFLL;
  }
  return v5;
}

BOOL usextract_matchPhon(uint64_t a1, unsigned __int8 *a2, int a3, unsigned __int8 *a4, int a5)
{
  _BOOL8 result;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  BOOL v12;
  BOOL v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;

  result = 0;
  v14 = a4;
  v15 = a2;
  if (a2 && a4)
  {
    skipUnvalidPhonemes(a1, &v15);
    if (a3)
    {
      do
      {
        if (!*v15)
          break;
        --a3;
        ++v15;
        skipUnvalidPhonemes(a1, &v15);
      }
      while ((_BYTE)a3);
    }
    v9 = v15;
    v10 = *v15;
    if (*v15)
    {
      skipUnvalidPhonemes(a1, &v14);
      if (a5)
      {
        do
        {
          if (!*v14)
            break;
          --a5;
          ++v14;
          skipUnvalidPhonemes(a1, &v14);
        }
        while ((_BYTE)a5);
      }
      if (*v14)
      {
        v11 = v14;
        v12 = v10 != *v14;
        if (v10 == *v14)
        {
          while (1)
          {
            v15 = v9 + 1;
            skipUnvalidPhonemes(a1, &v15);
            v14 = v11 + 1;
            skipUnvalidPhonemes(a1, &v14);
            v9 = v15;
            if (!*v15)
              break;
            v11 = v14;
            if (*v14)
              v13 = *v15 == *v14;
            else
              v13 = 0;
            if (!v13)
              goto LABEL_17;
          }
LABEL_18:
          if (usextract_nrOfValidPhonemes(a1, v9) <= 1)
            return usextract_nrOfValidPhonemes(a1, v14) < 2;
          return 0;
        }
LABEL_17:
        if (!v12)
          goto LABEL_18;
      }
    }
    return 0;
  }
  return result;
}

uint64_t usextract_getCurFineSyl(uint64_t result, int a2)
{
  unsigned int v2;

  if ((_DWORD)result == a2)
    return 4;
  if (a2 - 1 == (_DWORD)result)
    return 6;
  if (result >= 2)
  {
    if ((19662 * a2) >> 16 <= result)
      v2 = 5;
    else
      v2 = 3;
    if ((int)(a2 - ((19662 * a2) >> 16)) >= (int)result)
      return v2;
    else
      return 2;
  }
  return result;
}

void *hlpMoveColumns(unsigned __int16 **a1, int a2, int a3, size_t __len)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  size_t v17;
  void *result;
  unsigned __int16 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v8 = 0;
  v9 = a3;
  v10 = a2;
  v11 = 2 * __len;
  do
  {
    v12 = a1[v8 + 4];
    if (v12)
      memmove((char *)v12 + v9, (char *)v12 + v10, __len);
    v13 = a1[v8 + 222];
    if (v13)
      memmove(&v13[v9], &v13[v10], v11);
    ++v8;
  }
  while (v8 != 216);
  v14 = a1[444];
  if (v14)
    memmove(&v14[4 * v9], &v14[4 * v10], 8 * __len);
  v15 = a1[445];
  if (v15)
    memmove((char *)v15 + 9 * v9, (char *)v15 + 9 * v10, 9 * __len);
  v16 = *a1;
  v17 = 4 * __len;
  if ((*a1)[1483])
  {
    memmove(&a1[446][2 * (*a1)[1483] * a3], &a1[446][2 * (*a1)[1483] * a2], v17 * (*a1)[1483]);
    memmove(&a1[447][2 * (*a1)[1483] * a3], &a1[447][2 * (*a1)[1483] * a2], v17 * (*a1)[1483]);
    v16 = *a1;
  }
  if (v16[1680])
  {
    memmove(&a1[448][2 * v16[1680] * a3], &a1[448][2 * v16[1680] * a2], v17 * v16[1680]);
    memmove(&a1[449][2 * (*a1)[1680] * a3], &a1[449][2 * (*a1)[1680] * a2], v17 * (*a1)[1680]);
    v16 = *a1;
  }
  if (v16[1483])
  {
    memmove((char *)a1[450] + v16[1483] * (uint64_t)(int)v9, (char *)a1[450] + v16[1483] * (uint64_t)(int)v10, v16[1483] * __len);
    v16 = *a1;
  }
  result = memmove(&a1[451][2 * a3 * v16[1789]], &a1[451][2 * a2 * v16[1789]], 4 * __len * v16[1789]);
  if (a1[438])
  {
    v19 = *a1;
    if (**((_QWORD **)*a1 + 417))
    {
      v20 = 0;
      do
      {
        v21 = *(_QWORD *)&a1[438][v20];
        if (v21)
        {
          result = memmove((void *)(v21 + v9), (const void *)(v21 + v10), __len);
          v19 = *a1;
        }
        v22 = *(_QWORD *)(*((_QWORD *)v19 + 417) + v20 * 2 + 8);
        v20 += 4;
      }
      while (v22);
    }
  }
  *((_WORD *)a1 + 5) += a3 - a2;
  return result;
}

uint64_t usextract_setMNXfeatures(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  _BYTE *v14;
  char v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  char v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  char v46;
  int v47;
  char v48;
  char v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  unsigned int v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t i;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char __s[16];
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  v6 = *(__int16 *)(a3 + 10);
  if (v6 >= 1)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(a3 + 1024);
      if (v8)
      {
        if ((uint64_t)(v7 + 2) >= (__int16)v6)
          v9 = 45;
        else
          v9 = *(_BYTE *)(*(_QWORD *)(a3 + 32) + v7 + 2);
        *(_BYTE *)(v8 + v7) = v9;
      }
      v10 = *(_QWORD *)(a3 + 1008);
      if (v10 && *(_QWORD *)(a3 + 1016))
      {
        if ((uint64_t)(v7 + 1) >= *(__int16 *)(a3 + 10))
        {
          *(_BYTE *)(v10 + v7) = 45;
          v11 = 6;
        }
        else
        {
          *(_BYTE *)(v10 + v7) = *(_BYTE *)(*(_QWORD *)(a3 + 32) + v7 + 1);
          v11 = *(_BYTE *)(*(_QWORD *)(a3 + 576) + v7 + 1);
        }
        *(_BYTE *)(*(_QWORD *)(a3 + 1016) + v7) = v11;
      }
      v12 = *(_QWORD *)(a3 + 984);
      if (v12)
      {
        if (v7 >= 2)
          v13 = *(_BYTE *)(*(_QWORD *)(a3 + 32) + (v7 - 2));
        else
          v13 = 45;
        *(_BYTE *)(v12 + v7) = v13;
      }
      v14 = *(_BYTE **)(a3 + 1000);
      if (v14 && *(_QWORD *)(a3 + 992))
      {
        if (v7)
        {
          v14[v7] = *(_BYTE *)(*(_QWORD *)(a3 + 32) + (v7 - 1));
          v15 = *(_BYTE *)(*(_QWORD *)(a3 + 568) + (v7 - 1));
        }
        else
        {
          *v14 = 45;
          v15 = 6;
        }
        *(_BYTE *)(*(_QWORD *)(a3 + 992) + v7) = v15;
      }
      ++v7;
      LOWORD(v6) = *(_WORD *)(a3 + 10);
    }
    while ((uint64_t)v7 < (__int16)v6);
  }
  if (*(_QWORD *)(a3 + 1056) && *(_QWORD *)(a3 + 1064) && *(_QWORD *)(a3 + 1072) && (__int16)v6 >= 1)
  {
    v16 = 0;
    v17 = 0uLL;
    do
    {
      v18 = *(_QWORD *)(a3 + 32);
      if (*(_BYTE *)(v18 + v16) == 35)
      {
        *(_BYTE *)(*(_QWORD *)(a3 + 1056) + v16) = 35;
        *(_BYTE *)(*(_QWORD *)(a3 + 1064) + v16) = 35;
        *(_BYTE *)(*(_QWORD *)(a3 + 1072) + v16) = 35;
      }
      else if (*(_BYTE *)(*(_QWORD *)(a3 + 80) + v16) == 1)
      {
        v19 = 0;
        v92 = v17;
        v93 = v17;
        v90 = v17;
        v91 = v17;
        v88 = v17;
        v89 = v17;
        *(_OWORD *)__s = v17;
        v87 = v17;
        *(_BYTE *)(*(_QWORD *)(a3 + 1056) + v16) = *(_BYTE *)(v18 + v16);
        v20 = *(_QWORD *)(a3 + 72);
        v21 = *(_QWORD *)(a3 + 32);
        LOWORD(v22) = v16;
        while (1)
        {
          v22 = (__int16)v22;
          v23 = *(_BYTE *)(v21 + (__int16)v22);
          if (*(_BYTE *)(v20 + (__int16)v22) == 1)
            break;
          __s[v19] = v23;
          LOWORD(v22) = v22 + 1;
          if (++v19 == 128)
            goto LABEL_49;
        }
        __s[v19] = v23;
        *(_BYTE *)(*(_QWORD *)(a3 + 1072) + v16) = *(_BYTE *)(v21 + v22);
        *(_BYTE *)(*(_QWORD *)(a3 + 1064) + v16) = 48;
        v27 = strlen((const char *)(*(_QWORD *)a3 + 28272));
        if (v27)
        {
          v28 = (unsigned __int8 *)(*(_QWORD *)a3 + 28272);
          while (1)
          {
            v30 = *v28++;
            v29 = v30;
            if (strchr(__s, v30))
              break;
            if (!--v27)
              goto LABEL_45;
          }
          *(_BYTE *)(*(_QWORD *)(a3 + 1064) + v16) = v29;
        }
LABEL_45:
        if (*(_BYTE *)(*(_QWORD *)(a3 + 1064) + v16) == 48)
        {
          log_OutText(*(_QWORD *)(a1 + 32), a2, 3, 0, (uint64_t)"Warning: the syllable: %s doesn't have NUCLEUS, the first phonme %c is set to be the default", v24, v25, v26, (uint64_t)__s);
          *(_BYTE *)(*(_QWORD *)(a3 + 1064) + v16) = __s[0];
        }
        v17 = 0uLL;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)(a3 + 1056) + v16) = *(_BYTE *)(*(_QWORD *)(a3 + 1056) + v16 - 1);
        *(_BYTE *)(*(_QWORD *)(a3 + 1064) + v16) = *(_BYTE *)(*(_QWORD *)(a3 + 1064) + v16 - 1);
        *(_BYTE *)(*(_QWORD *)(a3 + 1072) + v16) = *(_BYTE *)(*(_QWORD *)(a3 + 1072) + v16 - 1);
      }
      ++v16;
    }
    while (v16 < *(__int16 *)(a3 + 10));
  }
LABEL_49:
  if (*(_QWORD *)(a3 + 1032)
    && *(_QWORD *)(a3 + 1048)
    && *(_QWORD *)(a3 + 1040)
    && *(_QWORD *)(a3 + 1272)
    && *(_QWORD *)(a3 + 1264)
    && *(_QWORD *)(a3 + 80)
    && *(__int16 *)(a3 + 10) >= 1)
  {
    v31 = 0;
    while (v31)
    {
      v32 = (v31 - 1);
      if (*(_BYTE *)(*(_QWORD *)(a3 + 80) + v31) == 1)
      {
        *(_BYTE *)(*(_QWORD *)(a3 + 1032) + v31) = *(_BYTE *)(*(_QWORD *)(a3 + 1056) + v32);
        *(_BYTE *)(*(_QWORD *)(a3 + 1048) + v31) = *(_BYTE *)(*(_QWORD *)(a3 + 1072) + v32);
        *(_BYTE *)(*(_QWORD *)(a3 + 1040) + v31) = *(_BYTE *)(*(_QWORD *)(a3 + 1064) + v32);
        v33 = *(_QWORD *)(a3 + 88);
        v34 = *(_QWORD *)(a3 + 1272);
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)(a3 + 1032) + v31) = *(_BYTE *)(*(_QWORD *)(a3 + 1032) + v32);
        *(_BYTE *)(*(_QWORD *)(a3 + 1048) + v31) = *(_BYTE *)(*(_QWORD *)(a3 + 1048) + v32);
        *(_BYTE *)(*(_QWORD *)(a3 + 1040) + v31) = *(_BYTE *)(*(_QWORD *)(a3 + 1040) + v32);
        v34 = *(_QWORD *)(a3 + 1272);
        v33 = v34;
      }
      *(_BYTE *)(v34 + v31) = *(_BYTE *)(v33 + v32);
      if (v31 <= 1)
        goto LABEL_63;
      if (*(_BYTE *)(*(_QWORD *)(a3 + 80) + v31) != 1)
      {
        v36 = *(_QWORD *)(a3 + 1264);
        v35 = *(_BYTE *)(v36 + v31 - 1);
        goto LABEL_65;
      }
      v35 = *(_BYTE *)(*(_QWORD *)(a3 + 1272) + v31 - 1);
LABEL_64:
      v36 = *(_QWORD *)(a3 + 1264);
LABEL_65:
      *(_BYTE *)(v36 + v31++) = v35;
      if ((uint64_t)v31 >= *(__int16 *)(a3 + 10))
        goto LABEL_70;
    }
    **(_BYTE **)(a3 + 1032) = 45;
    **(_BYTE **)(a3 + 1048) = 45;
    **(_BYTE **)(a3 + 1040) = 45;
    **(_BYTE **)(a3 + 1272) = 0;
LABEL_63:
    v35 = 0;
    goto LABEL_64;
  }
LABEL_70:
  if (*(_QWORD *)(a3 + 1080)
    && *(_QWORD *)(a3 + 1096)
    && *(_QWORD *)(a3 + 1088)
    && *(_QWORD *)(a3 + 1280)
    && *(_QWORD *)(a3 + 1288)
    && *(_QWORD *)(a3 + 80)
    && ((*(_WORD *)(a3 + 10) - 1) & 0x8000) == 0)
  {
    v37 = (unsigned __int16)(*(_WORD *)(a3 + 10) - 1);
    while ((int)v37 + 1 < *(__int16 *)(a3 + 10))
    {
      v38 = (v37 + 1);
      if (*(_BYTE *)(*(_QWORD *)(a3 + 72) + v37) == 1)
      {
        *(_BYTE *)(*(_QWORD *)(a3 + 1080) + v37) = *(_BYTE *)(*(_QWORD *)(a3 + 1056) + v38);
        *(_BYTE *)(*(_QWORD *)(a3 + 1096) + v37) = *(_BYTE *)(*(_QWORD *)(a3 + 1072) + v38);
        *(_BYTE *)(*(_QWORD *)(a3 + 1088) + v37) = *(_BYTE *)(*(_QWORD *)(a3 + 1064) + v38);
        v39 = *(_BYTE *)(*(_QWORD *)(a3 + 88) + v38);
LABEL_82:
        v40 = *(_QWORD *)(a3 + 1280);
        goto LABEL_84;
      }
      *(_BYTE *)(*(_QWORD *)(a3 + 1080) + v37) = *(_BYTE *)(*(_QWORD *)(a3 + 1080) + v38);
      *(_BYTE *)(*(_QWORD *)(a3 + 1096) + v37) = *(_BYTE *)(*(_QWORD *)(a3 + 1096) + v38);
      *(_BYTE *)(*(_QWORD *)(a3 + 1088) + v37) = *(_BYTE *)(*(_QWORD *)(a3 + 1088) + v38);
      v40 = *(_QWORD *)(a3 + 1280);
      v39 = *(_BYTE *)(v40 + v38);
LABEL_84:
      *(_BYTE *)(v40 + v37) = v39;
      if ((int)v37 + 2 >= *(__int16 *)(a3 + 10))
      {
        v42 = 0;
      }
      else
      {
        v41 = (v37 + 1);
        if (*(_BYTE *)(*(_QWORD *)(a3 + 72) + v37) != 1)
        {
          v43 = *(_QWORD *)(a3 + 1288);
          v42 = *(_BYTE *)(v43 + v41);
          goto LABEL_90;
        }
        v42 = *(_BYTE *)(*(_QWORD *)(a3 + 1280) + v41);
      }
      v43 = *(_QWORD *)(a3 + 1288);
LABEL_90:
      *(_BYTE *)(v43 + v37) = v42;
      v44 = v37-- <= 0;
      if (v44)
        goto LABEL_92;
    }
    v39 = 0;
    *(_BYTE *)(*(_QWORD *)(a3 + 1080) + v37) = 45;
    *(_BYTE *)(*(_QWORD *)(a3 + 1096) + v37) = 45;
    *(_BYTE *)(*(_QWORD *)(a3 + 1088) + v37) = 45;
    goto LABEL_82;
  }
LABEL_92:
  if (*(_QWORD *)(a3 + 1112)
    && *(_QWORD *)(a3 + 1128)
    && *(_QWORD *)(a3 + 1160)
    && *(_QWORD *)(a3 + 1176)
    && *(_QWORD *)(a3 + 1200)
    && *(_QWORD *)(a3 + 1224)
    && *(__int16 *)(a3 + 10) >= 1)
  {
    v45 = 0;
    v46 = 1;
    v47 = 1;
    v48 = 1;
    v49 = 1;
    v50 = 1;
    v51 = 1;
    do
    {
      v52 = *(unsigned __int8 *)(*(_QWORD *)(a3 + 576) + v45);
      *(_BYTE *)(*(_QWORD *)(a3 + 1104) + v45) = v51;
      *(_BYTE *)(*(_QWORD *)(a3 + 1112) + v45) = v51;
      *(_BYTE *)(*(_QWORD *)(a3 + 1128) + v45) = v50;
      *(_BYTE *)(*(_QWORD *)(a3 + 1144) + v45) = v49;
      *(_BYTE *)(*(_QWORD *)(a3 + 1160) + v45) = v49;
      *(_BYTE *)(*(_QWORD *)(a3 + 1168) + v45) = v48;
      *(_BYTE *)(*(_QWORD *)(a3 + 1176) + v45) = v48;
      *(_BYTE *)(*(_QWORD *)(a3 + 1192) + v45) = v47;
      *(_BYTE *)(*(_QWORD *)(a3 + 1200) + v45) = v47;
      *(_BYTE *)(*(_QWORD *)(a3 + 1216) + v45) = v46;
      *(_BYTE *)(*(_QWORD *)(a3 + 1224) + v45) = v46;
      if (v52 && v52 != 6)
      {
        ++v49;
        if (v52 == 1)
        {
          ++v51;
          ++v50;
        }
        else if (v52 == 5)
        {
          v51 = 1;
          v50 = 1;
          v49 = 1;
          v48 = 1;
          v47 = 1;
          v46 = 1;
        }
        else
        {
          ++v46;
          if (v52 == 3)
          {
            ++v50;
            ++v47;
            v51 = 1;
            v48 = 1;
          }
          else if (v52 == 2)
          {
            ++v51;
            ++v50;
            ++v48;
            ++v47;
          }
          else
          {
            v51 = 1;
            v50 = 1;
            v48 = 1;
            v47 = 1;
          }
        }
      }
      ++v45;
    }
    while (v45 < *(__int16 *)(a3 + 10));
  }
  if (*(_QWORD *)(a3 + 1104)
    && *(_QWORD *)(a3 + 1144)
    && *(_QWORD *)(a3 + 1168)
    && *(_QWORD *)(a3 + 1192)
    && *(_QWORD *)(a3 + 1216)
    && *(_QWORD *)(a3 + 1120)
    && *(_QWORD *)(a3 + 1136)
    && *(_QWORD *)(a3 + 1152)
    && *(_QWORD *)(a3 + 1184)
    && *(_QWORD *)(a3 + 1208)
    && *(_QWORD *)(a3 + 1232)
    && ((*(_WORD *)(a3 + 10) - 1) & 0x8000) == 0)
  {
    v53 = (unsigned __int16)(*(_WORD *)(a3 + 10) - 1);
    v54 = 1;
    v55 = 1;
    v56 = 1;
    v57 = 1;
    v58 = 1;
    do
    {
      v59 = *(unsigned __int8 *)(*(_QWORD *)(a3 + 576) + v53);
      if (v59 > 6 || ((1 << v59) & 0x47) == 0)
      {
        v58 = *(_BYTE *)(*(_QWORD *)(a3 + 1104) + v53);
        v56 = *(_BYTE *)(*(_QWORD *)(a3 + 1168) + v53);
        if (v59 != 3)
        {
          v61 = *(_QWORD *)(a3 + 1192);
          if (v61)
            v55 = *(_BYTE *)(v61 + v53);
          if (v59 != 4)
          {
            v62 = *(_QWORD *)(a3 + 1144);
            if (v62)
              v57 = *(_BYTE *)(v62 + v53);
            v63 = *(_QWORD *)(a3 + 1216);
            if (v63)
              v54 = *(_BYTE *)(v63 + v53);
          }
        }
      }
      *(_BYTE *)(*(_QWORD *)(a3 + 1104) + v53) = v58;
      *(_BYTE *)(*(_QWORD *)(a3 + 1144) + v53) = v57;
      *(_BYTE *)(*(_QWORD *)(a3 + 1168) + v53) = v56;
      *(_BYTE *)(*(_QWORD *)(a3 + 1192) + v53) = v55;
      *(_BYTE *)(*(_QWORD *)(a3 + 1216) + v53) = v54;
      *(_BYTE *)(*(_QWORD *)(a3 + 1120) + v53) = *(_BYTE *)(*(_QWORD *)(a3 + 1104) + v53)
                                               - *(_BYTE *)(*(_QWORD *)(a3 + 1112) + v53)
                                               + 1;
      *(_BYTE *)(*(_QWORD *)(a3 + 1136) + v53) = *(_BYTE *)(*(_QWORD *)(a3 + 128) + v53)
                                               - *(_BYTE *)(*(_QWORD *)(a3 + 1128) + v53)
                                               + 1;
      *(_BYTE *)(*(_QWORD *)(a3 + 1152) + v53) = *(_BYTE *)(*(_QWORD *)(a3 + 1144) + v53)
                                               - *(_BYTE *)(*(_QWORD *)(a3 + 1160) + v53)
                                               + 1;
      *(_BYTE *)(*(_QWORD *)(a3 + 1184) + v53) = *(_BYTE *)(*(_QWORD *)(a3 + 1168) + v53)
                                               - *(_BYTE *)(*(_QWORD *)(a3 + 1176) + v53)
                                               + 1;
      *(_BYTE *)(*(_QWORD *)(a3 + 1208) + v53) = *(_BYTE *)(*(_QWORD *)(a3 + 1192) + v53)
                                               - *(_BYTE *)(*(_QWORD *)(a3 + 1200) + v53)
                                               + 1;
      *(_BYTE *)(*(_QWORD *)(a3 + 1232) + v53) = *(_BYTE *)(*(_QWORD *)(a3 + 1216) + v53)
                                               - *(_BYTE *)(*(_QWORD *)(a3 + 1224) + v53)
                                               + 1;
      v44 = v53-- <= 0;
    }
    while (!v44);
  }
  if (!*(_QWORD *)(a3 + 264)
    || !*(_QWORD *)(a3 + 1256)
    || !*(_QWORD *)(a3 + 1248)
    || ((*(_WORD *)(a3 + 10) - 1) & 0x8000) != 0)
  {
    goto LABEL_169;
  }
  v64 = (const char *)(*(_QWORD *)a3 + 2400);
  v65 = (unsigned __int16)(*(_WORD *)(a3 + 10) - 1);
  do
  {
    v66 = *(_QWORD *)(a3 + 32);
    if (*(_BYTE *)(v66 + v65) == 35)
    {
      v67 = 0;
LABEL_152:
      v69 = *(_QWORD *)(a3 + 1256);
      goto LABEL_153;
    }
    v68 = (v65 + 1);
    if (*(_BYTE *)(v66 + v68) == 35)
    {
      v67 = strlen(v64) + 1;
      goto LABEL_152;
    }
    if (*(_BYTE *)(*(_QWORD *)(a3 + 112) + v65))
    {
      v67 = *(_BYTE *)(*(_QWORD *)(a3 + 616) + v68);
      goto LABEL_152;
    }
    v69 = *(_QWORD *)(a3 + 1256);
    v67 = *(_BYTE *)(v69 + v68);
LABEL_153:
    *(_BYTE *)(v69 + v65) = v67;
    v44 = v65-- <= 0;
  }
  while (!v44);
  if (*(__int16 *)(a3 + 10) >= 1)
  {
    for (i = 0; i < *(__int16 *)(a3 + 10); ++i)
    {
      v71 = *(_QWORD *)(a3 + 32);
      if (*(_BYTE *)(v71 + i) == 35)
      {
        v72 = 0;
      }
      else if (*(_BYTE *)(v71 + i - 1) == 35)
      {
        v72 = strlen(v64) + 1;
      }
      else
      {
        if (!*(_BYTE *)(*(_QWORD *)(a3 + 112) + i - 1))
        {
          v73 = *(_QWORD *)(a3 + 1248);
          v72 = *(_BYTE *)(v73 + i - 1);
          goto LABEL_166;
        }
        v72 = *(_BYTE *)(*(_QWORD *)(a3 + 272) + i - 1);
      }
      v73 = *(_QWORD *)(a3 + 1248);
LABEL_166:
      *(_BYTE *)(v73 + i) = v72;
    }
  }
LABEL_169:
  if (*(_QWORD *)(a3 + 1304))
  {
    LODWORD(v74) = *(__int16 *)(a3 + 10);
    if ((int)v74 >= 1)
    {
      v75 = 0;
      while (*(_BYTE *)(*(_QWORD *)(a3 + 32) + v75) != 35)
      {
        if (*(unsigned __int8 *)(*(_QWORD *)(a3 + 568) + v75) <= 1u)
        {
          v74 = *(_QWORD *)(a3 + 1304);
          v76 = *(_BYTE *)(v74 + v75 - 1);
          goto LABEL_176;
        }
LABEL_177:
        if (++v75 >= (__int16)v74)
          goto LABEL_178;
      }
      v74 = *(_QWORD *)(a3 + 1304);
      v76 = 119;
LABEL_176:
      *(_BYTE *)(v74 + v75) = v76;
      LOWORD(v74) = *(_WORD *)(a3 + 10);
      goto LABEL_177;
    }
LABEL_178:
    v77 = *(_BYTE **)(a3 + 1296);
    if (v77)
    {
      *v77 = 84;
      LODWORD(v74) = *(__int16 *)(a3 + 10);
      if ((int)v74 >= 2)
      {
        v78 = 1;
        do
        {
          if (*(unsigned __int8 *)(*(_QWORD *)(a3 + 568) + v78) > 1u)
          {
            v80 = *(_QWORD *)(a3 + 1304);
            v79 = *(_QWORD *)(a3 + 1296);
          }
          else
          {
            v79 = *(_QWORD *)(a3 + 1296);
            v80 = v79;
          }
          *(_BYTE *)(v79 + v78) = *(_BYTE *)(v80 + v78 - 1);
          ++v78;
        }
        while (v78 < *(__int16 *)(a3 + 10));
        LOWORD(v74) = *(_WORD *)(a3 + 10);
      }
    }
    v81 = *(_QWORD *)(a3 + 1312);
    if (v81)
    {
      *(_BYTE *)(v81 + (__int16)v74 - 1) = 84;
      if (((*(_WORD *)(a3 + 10) - 2) & 0x8000) == 0)
      {
        v82 = (unsigned __int16)(*(_WORD *)(a3 + 10) - 2);
        do
        {
          if (*(unsigned __int8 *)(*(_QWORD *)(a3 + 576) + v82) > 1u)
          {
            v84 = *(_QWORD *)(a3 + 1304);
            v83 = *(_QWORD *)(a3 + 1312);
          }
          else
          {
            v83 = *(_QWORD *)(a3 + 1312);
            v84 = v83;
          }
          *(_BYTE *)(v83 + v82) = *(_BYTE *)(v84 + (v82 + 1));
          v44 = v82-- <= 0;
        }
        while (!v44);
      }
    }
  }
  return 0;
}

uint64_t initLDO(uint64_t a1, _QWORD *a2)
{
  int v2;

  v2 = PNEW_LDO_ConFromText(a1, a1, &byte_1DEBD87CE, "SENTENCE", "SENTENCE", a2);
  return LH_ERROR_to_VERROR(v2);
}

uint64_t deinitLDO(uint64_t a1, uint64_t a2)
{
  if (a2)
    return OOC_PlacementDeleteObject(a1, a2);
  return a1;
}

uint64_t importFromLingDB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  int v17;
  int v18;

  v17 = 0;
  v18 = 0;
  v15 = 0;
  v16 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(a2 + 104))(a3, a4, 1, 0, (char *)&v18 + 2);
  if ((result & 0x80000000) == 0)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, char **, int *))(a2 + 176))(a3, a4, HIWORD(v18), 0, &v16, &v18);
    if ((result & 0x80000000) == 0)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(a2 + 168))(a3, a4, HIWORD(v18), 3, 1, &v17, &v18);
      if ((result & 0x80000000) == 0)
      {
        v11 = *a5;
        v12 = *(_QWORD *)(*a5 + 16);
        v13 = LDOTreeNode_SetText(v12, v16);
        result = LH_ERROR_to_VERROR(v13);
        if ((result & 0x80000000) == 0)
        {
          LDOObject_SetU32Attribute(v12, "EOS", v17 != 0);
          result = LH_ERROR_to_VERROR(v14);
          if ((result & 0x80000000) == 0)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, int *))(a2 + 176))(a3, a4, HIWORD(v18), 1, &v15, &v18);
            if ((result & 0x80000000) == 0)
            {
              result = loc_importTokenRecFromLingDB(a1, a2, a3, a4, v11, HIWORD(v18), 0);
              if ((result & 0x80000000) == 0)
              {
                result = loc_importTokenRecFromLingDB(a1, a2, a3, a4, v11, HIWORD(v18), 1);
                if ((result & 0x80000000) == 0)
                  return loc_importMrkFromLingDB(v11, v15, (unsigned __int16)v18, v12, 0);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t loc_importTokenRecFromLingDB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t result;
  unsigned __int16 v14;
  char v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int appended;
  int v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  unsigned __int16 v45;
  char *v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  char *__s1;

  v45 = 0;
  v44 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *))(a2 + 104))(a3, a4, 3, a6, &v45);
  if ((result & 0x80000000) == 0)
  {
    v43 = a1;
    v14 = v45;
    if (v45)
    {
      while (1)
      {
        LOWORD(v46) = 0;
        LOWORD(v48) = 0;
        LOWORD(v47) = 0;
        __s1 = 0;
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, char **))(a2 + 168))(a3, a4, v14, 0, 1, &v44, &v46);
        if ((result & 0x80000000) != 0)
          return result;
        v15 = 0;
        v16 = "TOKEN_ALPHA";
        switch(v44)
        {
          case 0:
            break;
          case 1:
            v15 = 0;
            v16 = "TOKEN_DIGIT";
            break;
          case 2:
            v15 = 0;
            v16 = "TOKEN_PUNCT";
            break;
          case 3:
            v15 = 0;
            v16 = "TOKEN_WSPACE";
            break;
          default:
            v16 = 0;
            v15 = 1;
            break;
        }
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned int *, char **))(a2 + 168))(a3, a4, v14, 1, 1, &v48, &v46);
        if ((result & 0x80000000) != 0)
          return result;
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned int *, char **))(a2 + 168))(a3, a4, v14, 2, 1, &v47, &v46);
        if ((result & 0x80000000) != 0)
          return result;
        if (v44 != 6)
          goto LABEL_15;
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, char **))(a2 + 176))(a3, a4, v14, 4, &__s1, &v46);
        if ((result & 0x80000000) != 0)
          return result;
        if ((_WORD)v46 && !strcmp(__s1, "_PR_"))
        {
          v15 = 0;
          v17 = (unsigned __int16)v48;
          v18 = (unsigned __int16)v47;
          v16 = "TOKEN_INT_TN";
        }
        else
        {
LABEL_15:
          v17 = (unsigned __int16)v48;
          v18 = (unsigned __int16)v47;
          v19 = v15 ^ 1;
          if (!a7)
            v19 = 1;
          if ((v19 & 1) == 0)
          {
            v20 = v45;
            v21 = v44;
            v46 = 0;
            v47 = (unsigned __int16)v47;
            v48 = (unsigned __int16)v48;
            v22 = LDO_AddLabelOnSubstring(a5, "TOKEN", "TOKEN", &v48, &v47, &v46);
            result = LH_ERROR_to_VERROR(v22);
            if ((result & 0x80000000) != 0)
              return result;
            LDOObject_SetU32Attribute((uint64_t)v46, "_TTYPE", v21);
            result = LH_ERROR_to_VERROR(v23);
            if ((result & 0x80000000) != 0)
              return result;
            switch(v21)
            {
              case 4:
                v34 = v46;
                v35 = a2;
                v36 = a3;
                v37 = a4;
                v38 = v20;
                goto LABEL_45;
              case 5:
                v39 = (uint64_t)v46;
                __s1 = 0;
                v49 = 0;
                result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(a2 + 176))(a3, a4, v20, 4, &__s1, (char *)&v49 + 2);
                if ((result & 0x80000000) == 0)
                {
                  v40 = LDOObject_SetStringAttribute(v39, "TNTAG", __s1);
                  result = LH_ERROR_to_VERROR(v40);
                  if ((result & 0x80000000) == 0)
                  {
                    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *))(a2 + 184))(a3, a4, v20, 3, &v49);
                    if ((result & 0x80000000) == 0)
                    {
                      if (!(_WORD)v49
                        || (result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(a2 + 176))(a3, a4, v20, 3, &__s1, (char *)&v49 + 2), (result & 0x80000000) == 0)&& (v41 = LDOObject_SetStringAttribute(v39, "NORM", __s1), result = LH_ERROR_to_VERROR(v41), (result & 0x80000000) == 0))
                      {
                        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *))(a2 + 184))(a3, a4, v20, 6, &v49);
                        if ((result & 0x80000000) == 0)
                        {
                          if ((_WORD)v49)
                          {
                            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(a2 + 176))(a3, a4, v20, 6, &__s1, (char *)&v49 + 2);
                            if ((result & 0x80000000) == 0)
                            {
                              v42 = LDOObject_SetStringAttribute(v39, "LANGMAP", __s1);
                              result = LH_ERROR_to_VERROR(v42);
                            }
                          }
                        }
                      }
                    }
                  }
                }
                goto LABEL_46;
              case 6:
                v24 = v46;
                v25 = v43;
                v26 = a2;
                v27 = a3;
                v28 = a4;
                v29 = v20;
LABEL_32:
                result = loc_importTokenIntTnFieldsFromLingDB(v25, v26, v27, v28, (uint64_t)v24, v29);
                goto LABEL_46;
            }
            goto LABEL_47;
          }
        }
        if ((v15 & 1) == 0 && !a7)
        {
          v30 = v45;
          v31 = v44;
          __s1 = 0;
          appended = LDO_AppendNewNode(a5, *(_QWORD *)(a5 + 16), "TOKEN", v16, v17, v18, &__s1);
          result = LH_ERROR_to_VERROR(appended);
          if ((result & 0x80000000) != 0)
            return result;
          LDOObject_SetU32Attribute((uint64_t)__s1, "_TTYPE", v31);
          result = LH_ERROR_to_VERROR(v33);
          if ((result & 0x80000000) != 0)
            return result;
          if (v31 == 4)
          {
            v34 = __s1;
            v35 = a2;
            v36 = a3;
            v37 = a4;
            v38 = v30;
LABEL_45:
            result = loc_importTokenDctFieldsFromLingDB(v35, v36, v37, (uint64_t)v34, v38);
LABEL_46:
            if ((result & 0x80000000) != 0)
              return result;
            goto LABEL_47;
          }
          if (v31 == 6)
          {
            v24 = __s1;
            v25 = v43;
            v26 = a2;
            v27 = a3;
            v28 = a4;
            v29 = v30;
            goto LABEL_32;
          }
        }
LABEL_47:
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *, uint64_t, uint64_t))(a2 + 120))(a3, a4, v45, &v45, v17, v18);
        if ((result & 0x80000000) == 0)
        {
          v14 = v45;
          if (v45)
            continue;
        }
        return result;
      }
    }
  }
  return result;
}

uint64_t loc_importMrkFromLingDB(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  char *v11;
  int v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  char v32;
  int v33;
  uint64_t v34;
  int v37;
  char *v39;
  uint64_t v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  int v46;
  int v47;
  char *v48;

  v45 = 0;
  v46 = 0;
  v42 = 0;
  if (a3)
  {
    v6 = a1;
    v7 = 0;
    v8 = a3;
    v37 = 1;
    while (1)
    {
      v41 = 0;
      v9 = *(_DWORD *)a2;
      if (*(int *)a2 <= 50)
        break;
      if (v9 <= 60)
      {
        switch(v9)
        {
          case '3':
            v10 = 0;
            v11 = "MARKER_NLU";
            goto LABEL_36;
          case '9':
            v10 = 0;
            v11 = "MARKER_NEW";
            goto LABEL_36;
          case '<':
            v10 = 0;
            v11 = "MARKER_SET_STYLE";
            goto LABEL_36;
        }
LABEL_35:
        v10 = 0;
        v11 = "MARKER";
        goto LABEL_36;
      }
      if (v9 == 61)
      {
        v10 = 0;
        v11 = "MARKER_AGREEMENT";
        goto LABEL_36;
      }
      if (v9 == 99)
      {
        v10 = 0;
        v11 = "MARKER_SET_PINYIN";
        goto LABEL_36;
      }
      if (v9 != 0x4000)
        goto LABEL_35;
      v12 = v37;
      if (v37 == 1)
        v7 = *(unsigned int *)(a2 + 12);
      else
        v7 = v7;
      if (v37 == 1)
        v12 = 0;
      v37 = v12;
      v10 = 1;
      v11 = "MARKER_SYNC";
LABEL_36:
      v13 = *(_DWORD *)(a2 + 12);
      v14 = v13 >= v7;
      v15 = v13 - v7;
      if (!v14)
        return 2147499534;
      v44 = v15;
      v43 = *(_DWORD *)(a2 + 16) + v15;
      v16 = loc_compute_overflow(v6, &v44, &v43, &v46, &v45);
      if ((v16 & 0x80000000) != 0)
        return v16;
      v17 = LDO_CountLeafNodesOnRange(v6, &v44, &v43, &v42, 0);
      v34 = LH_ERROR_to_VERROR(v17);
      if ((v34 & 0x80000000) != 0)
        return v34;
      if (*(_DWORD *)a2 == 40)
        goto LABEL_41;
      if (!v42 && v43 != v44)
      {
        if (a5 != 1)
          goto LABEL_46;
LABEL_41:
        v18 = LDO_AddSpecialLabel(v6, "MARKER", v11, &v44, &v43, &v41);
        goto LABEL_45;
      }
      v18 = LDO_AddLabelOnSubstring(v6, "MARKER", v11, &v44, &v43, &v41);
LABEL_45:
      v34 = LH_ERROR_to_VERROR(v18);
      if ((v34 & 0x80000000) != 0)
        return v34;
LABEL_46:
      if (v41)
      {
        LDOObject_SetU32Attribute(a4, "SENT_REC_OFFSET", v7);
        v16 = LH_ERROR_to_VERROR(v19);
        if ((v16 & 0x80000000) != 0)
          return v16;
        v20 = v7;
        v21 = v41;
        v22 = v45;
        v24 = *(_DWORD *)a2;
        v23 = *(_DWORD *)(a2 + 4);
        v25 = *(_DWORD *)(a2 + 8);
        v39 = *(char **)(a2 + 24);
        if (v46)
        {
          LDOObject_SetU32Attribute(v41, "FROMOVERFLOW", v46);
          v16 = LH_ERROR_to_VERROR(v26);
          if ((v16 & 0x80000000) != 0)
            return v16;
        }
        if (v22)
        {
          LDOObject_SetU32Attribute(v21, "TOOVERFLOW", v22);
          v16 = LH_ERROR_to_VERROR(v27);
          if ((v16 & 0x80000000) != 0)
            return v16;
        }
        LDOObject_SetU32Attribute(v21, "_MTYPE", v24);
        v16 = LH_ERROR_to_VERROR(v28);
        if ((v16 & 0x80000000) != 0)
          return v16;
        v29 = LDOLabel_SetReferenceFrom(v21, v23);
        v16 = LH_ERROR_to_VERROR(v29);
        if ((v16 & 0x80000000) != 0)
          return v16;
        v30 = LDOLabel_SetReferenceTo(v21, v25 + v23);
        v31 = LH_ERROR_to_VERROR(v30);
        v34 = v31;
        if ((int)v31 < 0)
          v32 = 1;
        else
          v32 = v10;
        if ((v32 & 1) != 0)
        {
          v7 = v20;
          v6 = a1;
          if ((v31 & 0x80000000) != 0)
            return v34;
          goto LABEL_66;
        }
        v48 = 0;
        v47 = 0;
        marker_tag2string(v24, &v48, &v47);
        if ((v47 - 3) > 1)
        {
          if ((v47 - 1) <= 1)
          {
            LDOObject_SetU32Attribute(v21, "U32ARGS", (int)v39);
            goto LABEL_64;
          }
        }
        else
        {
          v33 = LDOObject_SetStringAttribute(v21, "STRARGS", v39);
LABEL_64:
          v34 = LH_ERROR_to_VERROR(v33);
          if ((v34 & 0x80000000) != 0)
            return v34;
        }
        v7 = v20;
        v6 = a1;
      }
LABEL_66:
      a2 += 32;
      if (!--v8)
        return v34;
    }
    if (v9 > 35)
    {
      switch(v9)
      {
        case '$':
          v10 = 0;
          v11 = "MARKER_SET_LANG";
          goto LABEL_36;
        case '%':
          v10 = 0;
          v11 = "MARKER_SET_HEXA";
          goto LABEL_36;
        case '(':
          v10 = 0;
          v11 = "MARKER_INSERT_PROMPT";
          goto LABEL_36;
      }
    }
    else
    {
      switch(v9)
      {
        case 1:
          v10 = 1;
          v11 = "MARKER_WORD";
          goto LABEL_36;
        case 7:
          v10 = 0;
          v11 = "MARKER_SET_TYPE_OF_INPUT";
          goto LABEL_36;
        case 26:
          v10 = 0;
          v11 = "MARKER_INSERT_AUDIO";
          goto LABEL_36;
      }
    }
    goto LABEL_35;
  }
  return 0;
}

uint64_t importFromLingDBWordRecord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  char *v19;
  int v20;
  __int16 v21;
  int v22;

  v22 = 0;
  v21 = 0;
  v20 = 0;
  v18 = 0;
  v19 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(a2 + 104))(a3, a4, 1, 0, (char *)&v22 + 2);
  if ((result & 0x80000000) == 0)
  {
    v13 = *a5;
    v14 = *(_QWORD *)(*a5 + 16);
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, char **, int *))(a2 + 176))(a3, a4, HIWORD(v22), 0, &v19, &v22);
    if ((result & 0x80000000) == 0)
    {
      v15 = LDOTreeNode_SetText(v14, v19);
      result = LH_ERROR_to_VERROR(v15);
      if ((result & 0x80000000) == 0)
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, int *))(a2 + 168))(a3, a4, HIWORD(v22), 3, 1, &v20, &v22);
        if ((result & 0x80000000) == 0)
        {
          LDOObject_SetU32Attribute(v14, "EOS", v20 != 0);
          result = LH_ERROR_to_VERROR(v16);
          if ((result & 0x80000000) == 0)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, __int16 *))(a2 + 184))(a3, a4, HIWORD(v22), 2, &v21);
            if ((result & 0x80000000) == 0)
            {
              if (!v21
                || (result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(a2 + 176))(a3, a4, HIWORD(v22), 2, &v19, &v22), (result & 0x80000000) == 0)&& (v17 = LDOObject_SetStringAttribute(v14, "SYNTAX", v19), result = LH_ERROR_to_VERROR(v17), (result & 0x80000000) == 0))
              {
                result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, int *))(a2 + 176))(a3, a4, HIWORD(v22), 1, &v18, &v22);
                if ((result & 0x80000000) == 0)
                {
                  result = loc_importWordRecFromLingDB(a1, a2, a3, a4, v13, HIWORD(v22), 0, a6);
                  if ((result & 0x80000000) == 0)
                  {
                    result = loc_importWordRecFromLingDB(a1, a2, a3, a4, v13, HIWORD(v22), 1, a6);
                    if ((result & 0x80000000) == 0)
                      return loc_importMrkFromLingDB(v13, v18, (unsigned __int16)v22, v14, 1);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t loc_importWordRecFromLingDB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  uint64_t result;
  unsigned __int16 v13;
  unsigned __int16 v14;
  int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  int appended;
  int v24;
  int v28;
  unsigned __int16 v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  char *__s1;

  v29 = 0;
  v28 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *))(a2 + 104))(a3, a4, 2, a6, &v29);
  if ((result & 0x80000000) == 0)
  {
    v13 = v29;
    if (v29)
    {
      v14 = 0;
      v15 = 0;
      while (1)
      {
        LOWORD(v32) = 0;
        LOWORD(v31) = 0;
        WORD2(v30) = 0;
        __s1 = 0;
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, int *))(a2 + 168))(a3, a4, v13, 0, 1, &v28, &v32);
        if ((result & 0x80000000) != 0)
          return result;
        v16 = 0;
        while (v28 != wordRecMap[v16])
        {
          v16 += 24;
          if (v16 == 432)
          {
            v17 = 0;
            goto LABEL_10;
          }
        }
        v18 = &wordRecMap[v16];
        v17 = (char *)*((_QWORD *)v18 + 1);
        v15 = *((_DWORD *)v18 + 4);
LABEL_10:
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unsigned int *, int *))(a2 + 168))(a3, a4, v13, 1, 1, &v31, &v32);
        if ((result & 0x80000000) != 0)
          return result;
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char *, int *))(a2 + 168))(a3, a4, v13, 2, 1, (char *)&v30 + 4, &v32);
        if ((result & 0x80000000) != 0)
          return result;
        if (v28 == 6)
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char **, int *))(a2 + 176))(a3, a4, v13, 4, &__s1, &v32);
          if ((result & 0x80000000) != 0)
            return result;
          if ((_WORD)v32 && !strcmp(__s1, "_PR_"))
            v15 = 0;
        }
        v19 = (unsigned __int16)v31;
        v20 = WORD2(v30);
        ++v14;
        if (a7 && v15)
        {
          v21 = v29;
          v22 = v28;
          v30 = 0;
          __s1 = 0;
          v31 = v20;
          v32 = v19;
          result = loc_compute_overflow(a5, (unsigned int *)&v32, &v31, (_DWORD *)&v30 + 1, &v30);
          if ((result & 0x80000000) != 0)
            return result;
          appended = LDO_AddSpecialLabel(a5, "WORD", v17, (unsigned int *)&v32, &v31, &__s1);
        }
        else
        {
          if (a7 | v15)
            goto LABEL_27;
          v21 = v29;
          v22 = v28;
          __s1 = 0;
          v30 = 0;
          v31 = v20;
          v32 = v19;
          result = loc_compute_overflow(a5, (unsigned int *)&v32, &v31, (_DWORD *)&v30 + 1, &v30);
          if ((result & 0x80000000) != 0)
            return result;
          appended = LDO_AppendNewNode(a5, *(_QWORD *)(a5 + 16), "WORD", v17, v32, v31, &__s1);
        }
        result = LH_ERROR_to_VERROR(appended);
        if ((result & 0x80000000) != 0)
          return result;
        LDOObject_SetU32Attribute((uint64_t)__s1, "_WTYPE", v22);
        result = LH_ERROR_to_VERROR(v24);
        if ((result & 0x80000000) != 0)
          return result;
        result = loc_importWordRecordFieldsFromLingDB(a1, a2, a3, a4, (uint64_t)__s1, v21, v14, a8, SHIDWORD(v30), v30);
        if ((result & 0x80000000) != 0)
          return result;
LABEL_27:
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a2 + 120))(a3, a4, v29, &v29);
        if ((result & 0x80000000) == 0)
        {
          v13 = v29;
          if (v29)
            continue;
        }
        return result;
      }
    }
  }
  return result;
}

uint64_t exportToLingDB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  int U32Attribute;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  uint64_t **v40;
  uint64_t *v41;
  int v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t **v46;
  unint64_t v47;
  uint64_t **v48;
  BOOL v49;
  uint64_t **v50;
  uint64_t *v51;
  uint64_t *v52;
  int v53;
  uint64_t v54;
  unsigned int AbsoluteFrom;
  unint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  unsigned __int16 v68;
  unsigned __int16 v69;
  int v70;
  uint64_t v71;

  v69 = 0;
  v68 = 0;
  v67 = 0;
  v66 = 1;
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 64))(a3, a4);
  if ((v16 & 0x80000000) != 0)
    return v16;
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(a3, a4);
  if ((v16 & 0x80000000) != 0)
    return v16;
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a2 + 104))(a3, a4, 1, 0, &v69);
  if ((v16 & 0x80000000) != 0)
    return v16;
  v16 = loc_exportSentenceFields(a2, a3, a4, a5, a6, &v69, (_DWORD *)&v67 + 1);
  if ((v16 & 0x80000000) != 0)
    return v16;
  v16 = loc_exportMrkLabelsToLingDB(a1, a2, a3, a4, a6, v69, SHIDWORD(v67));
  if ((v16 & 0x80000000) != 0)
    return v16;
  v63 = a7;
  v71 = 0;
  v70 = 0;
  v17 = *(_QWORD *)(a6 + 32);
  v18 = *(uint64_t ***)(v17 + 24);
  v57 = a8;
  v61 = a1;
  v58 = a5;
  if ((unint64_t)v18 >= *(_QWORD *)(v17 + 32))
  {
    v20 = 0;
    v19 = 0;
    v22 = 0;
LABEL_49:
    v34 = HIDWORD(v71);
    if (HIDWORD(v71))
LABEL_50:
      v22 = LH_ERROR_to_VERROR(v34);
    if ((v22 & 0x80000000) == 0)
    {
      v44 = *(_QWORD *)(a6 + 16);
      v45 = v20;
      v46 = *(uint64_t ***)(v44 + 80);
      v47 = *(_QWORD *)(v44 + 88);
      v65 = v45;
      v48 = (uint64_t **)v19;
      v49 = (unint64_t)v46 >= v47 || v19 >= v45;
      if (v49)
      {
LABEL_57:
        if ((unint64_t)v46 >= v47)
        {
LABEL_60:
          if ((unint64_t)v48 < v65)
          {
            v50 = v48 + 1;
            do
            {
              v22 = loc_exportNonMarkerLabelWithTType(v61, a2, a3, a4, v69, *(v50 - 1), v57, &v66, &v68);
              if ((v22 & 0x80000000) != 0)
                break;
              v49 = (unint64_t)v50++ >= v65;
            }
            while (!v49);
          }
        }
        else
        {
          while (1)
          {
            v22 = loc_exportNode(v61, a2, a3, a4, v69, *v46, v63, &v66, &v68);
            if ((v22 & 0x80000000) != 0)
              break;
            if ((unint64_t)++v46 >= v47)
              goto LABEL_60;
          }
        }
      }
      else
      {
        while (1)
        {
          v51 = *v46;
          v52 = *v48;
          v53 = LDOTreeNode_ComputeAbsoluteFrom((uint64_t)*v46, &v67);
          v54 = LH_ERROR_to_VERROR(v53);
          if ((v54 & 0x80000000) != 0)
            break;
          AbsoluteFrom = LDOLabel_GetAbsoluteFrom((uint64_t)v52);
          if (v67 <= AbsoluteFrom)
          {
            v22 = loc_exportNode(v61, a2, a3, a4, v69, v51, v63, &v66, &v68);
            if ((v22 & 0x80000000) != 0)
              goto LABEL_76;
            ++v46;
          }
          else
          {
            v22 = loc_exportNonMarkerLabelWithTType(v61, a2, a3, a4, v69, v52, v57, &v66, &v68);
            if ((v22 & 0x80000000) != 0)
              goto LABEL_76;
            ++v48;
          }
          if ((unint64_t)v46 >= v47 || (unint64_t)v48 >= v65)
            goto LABEL_57;
        }
        v22 = v54;
      }
    }
  }
  else
  {
    v59 = a6;
    v60 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    do
    {
      v23 = *v18;
      if (*((_DWORD *)*v18 + 26) == 1)
      {
        U32Attribute = LDOObject_GetU32Attribute(*v18, "_TTYPE", &v71, &v70);
        v22 = LH_ERROR_to_VERROR(U32Attribute);
        if ((v22 & 0x80000000) != 0)
          goto LABEL_76;
        if ((_DWORD)v71 == 1)
        {
          LDOObject_SetU32Attribute((uint64_t)v23, "__ldoutilID", *((_DWORD *)v23 + 4));
          v22 = LH_ERROR_to_VERROR(v25);
          if ((v22 & 0x80000000) != 0)
            goto LABEL_76;
          v62 = v21;
          *((_DWORD *)v23 + 4) = v21;
          v64 = v20;
          if (v20 != v19)
          {
            v26 = 0;
            v56 = v20 - v19;
            v27 = (uint64_t)(v20 - v19) >> 3;
            while (1)
            {
              v28 = v27 >> 1;
              v29 = LDOLabel_CompareToWithID((uint64_t)v23, *(_QWORD *)(v19 + 8 * v26 + 8 * (v27 >> 1)));
              if (v29 < 1)
              {
                v27 >>= 1;
                if ((v29 & 0x80000000) == 0)
                {
                  v20 = v64;
                  a6 = v59;
                  goto LABEL_36;
                }
              }
              else
              {
                v26 += v28 + 1;
                v27 -= v28 + 1;
              }
              if (!v27)
              {
                v30 = v56;
                goto LABEL_20;
              }
            }
          }
          v30 = 0;
          v26 = 0;
LABEL_20:
          v31 = v30 >> 3;
          if ((v30 >> 3) == -1 || v60 != (_DWORD)v31)
          {
            v35 = (v30 >> 3);
            v36 = v64;
          }
          else
          {
            v32 = 2 * v60;
            if (2 * v60 >= v60 + 1000000)
              v32 = v60 + 1000000;
            if (v32 <= v60 + 1)
              v33 = v60 + 1;
            else
              v33 = v32;
            if (v33 <= 8)
              v33 = 8;
            v60 = v33;
            v19 = OOCAllocator_Realloc(v58, v19, 8 * v33, (_DWORD *)&v71 + 1);
            v34 = HIDWORD(v71);
            if (HIDWORD(v71))
            {
              a6 = v59;
              v20 = v64;
              goto LABEL_50;
            }
            v35 = (v30 >> 3);
            v36 = v19 + 8 * v31;
          }
          v37 = v35 > v26;
          v38 = v35 - v26;
          a6 = v59;
          if (v37)
            memmove((void *)(v19 + 8 * v26 + 8), (const void *)(v19 + 8 * v26), 8 * v38);
          v20 = v36 + 8;
          *(_QWORD *)(v19 + 8 * v26) = v23;
LABEL_36:
          v21 = v62 + 1;
        }
      }
      ++v18;
    }
    while ((unint64_t)v18 < *(_QWORD *)(*(_QWORD *)(a6 + 32) + 32));
    if (v19 >= v20)
      goto LABEL_49;
    v40 = (uint64_t **)v19;
    while (1)
    {
      v41 = *v40;
      v42 = LDOObject_GetU32Attribute(*v40, "__ldoutilID", &v71, &v70);
      v22 = LH_ERROR_to_VERROR(v42);
      if ((v22 & 0x80000000) != 0)
        break;
      if ((_DWORD)v71 == 1)
      {
        *((_DWORD *)v41 + 4) = v70;
        v43 = LDOObject_RemoveAttribute((uint64_t)v41, "__ldoutilID");
        v22 = LH_ERROR_to_VERROR(v43);
        if ((v22 & 0x80000000) != 0)
          break;
      }
      if ((unint64_t)++v40 >= v20)
        goto LABEL_49;
    }
  }
LABEL_76:
  if (v19)
    OOCAllocator_Free(v58, v19);
  return v22;
}

uint64_t loc_exportSentenceFields(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int16 *a6, _DWORD *a7)
{
  int v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, __int16 *);
  uint64_t v17;
  unsigned __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  int U32Attribute;
  uint64_t v23;
  int v24;
  int StringAttribute;
  __int16 v26;
  char *__s;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  __int16 v33;

  v33 = 0;
  v31 = 0;
  v32 = 0;
  v30 = 0;
  v29 = 0;
  __s = 0;
  v14 = LDO_ComputeText(a5, &v30);
  v15 = LH_ERROR_to_VERROR(v14);
  if ((v15 & 0x80000000) != 0)
    return v15;
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, __int16 *))(a1 + 160);
  v17 = *a6;
  v18 = LHString_Length(v30) + 1;
  v19 = fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(v30);
  v20 = v16(a2, a3, v17, 0, v18, v19, &v33);
  if ((v20 & 0x80000000) != 0)
    goto LABEL_11;
  v21 = *(uint64_t **)(a5 + 16);
  U32Attribute = LDOObject_GetU32Attribute(v21, "SENT_REC_OFFSET", &v32, a7);
  v20 = LH_ERROR_to_VERROR(U32Attribute);
  if ((v20 & 0x80000000) != 0)
    goto LABEL_11;
  v23 = 2147491860;
  if (v32 != 1)
    goto LABEL_12;
  v24 = LDOObject_GetU32Attribute(v21, "EOS", &v32, &v29);
  v20 = LH_ERROR_to_VERROR(v24);
  if ((v20 & 0x80000000) != 0)
    goto LABEL_11;
  if (v32 != 1)
    goto LABEL_12;
  v31 = v29;
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int *, __int16 *))(a1 + 160))(a2, a3, *a6, 3, 1, &v31, &v33);
  if ((v20 & 0x80000000) != 0)
    goto LABEL_11;
  StringAttribute = LDOObject_GetStringAttribute(v21, "SYNTAX", &v32, (uint64_t *)&__s);
  v23 = LH_ERROR_to_VERROR(StringAttribute);
  if ((v23 & 0x80000000) == 0 && v32)
  {
    v26 = strlen(__s);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, char *, __int16 *))(a1 + 160))(a2, a3, *a6, 2, (unsigned __int16)(v26 + 1), __s, &v33);
LABEL_11:
    v23 = v20;
  }
LABEL_12:
  if (v30)
    OOC_PlacementDeleteObject(a4, v30);
  return v23;
}

uint64_t loc_exportMrkLabelsToLingDB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v12;
  uint64_t **v13;
  unsigned int v15;
  int U32Attribute;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t **v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;
  int AbsoluteFrom;
  _DWORD *v34;
  int v35;
  uint64_t v36;
  int v37;
  int StringAttribute;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  __int16 v53;

  v53 = 0;
  v52 = 0;
  v50 = 0;
  v51 = 0;
  v48 = 0;
  v49 = 0;
  v12 = *(_QWORD *)(a5 + 32);
  v13 = *(uint64_t ***)(v12 + 24);
  if ((unint64_t)v13 >= *(_QWORD *)(v12 + 32))
  {
    LOWORD(v15) = 0;
LABEL_43:
    v19 = 0;
LABEL_44:
    v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, __int16 *))(a2 + 160))(a3, a4, a6, 1, (unsigned __int16)v15, v19, &v53);
    if (v19)
      goto LABEL_45;
    return v41;
  }
  v15 = 0;
  do
  {
    if (*((_DWORD *)*v13 + 26) == 1)
    {
      U32Attribute = LDOObject_GetU32Attribute(*v13, "_MTYPE", &v52, (_DWORD *)&v50 + 1);
      v17 = LH_ERROR_to_VERROR(U32Attribute);
      if ((v17 & 0x80000000) != 0)
        return v17;
      if (v52)
        ++v15;
      v12 = *(_QWORD *)(a5 + 32);
    }
    ++v13;
  }
  while ((unint64_t)v13 < *(_QWORD *)(v12 + 32));
  if (!v15)
    goto LABEL_43;
  v18 = heap_Calloc(*(_QWORD **)(a1 + 8), v15, 32);
  if (!v18)
    return 2147491850;
  v19 = v18;
  v43 = a1;
  v20 = *(_QWORD *)(a5 + 32);
  v21 = *(uint64_t ***)(v20 + 24);
  if ((unint64_t)v21 >= *(_QWORD *)(v20 + 32))
  {
LABEL_41:
    marker_sort(v19, v15);
    a1 = v43;
    goto LABEL_44;
  }
  v22 = 0;
  v47 = a2;
  while (1)
  {
    v23 = a3;
    v24 = a4;
    v25 = a6;
    v26 = (uint64_t)*v21;
    if (*((_DWORD *)*v21 + 26) != 1)
    {
LABEL_35:
      a6 = v25;
      a4 = v24;
      a3 = v23;
      a2 = v47;
      goto LABEL_40;
    }
    v27 = LDOObject_GetU32Attribute(*v21, "_MTYPE", &v52, (_DWORD *)&v50 + 1);
    v28 = LH_ERROR_to_VERROR(v27);
    if ((v28 & 0x80000000) != 0)
      break;
    if (!v52)
      goto LABEL_35;
    v44 = (unsigned __int16)v22;
    v45 = v22;
    v29 = (_DWORD *)(v19 + 32 * (unsigned __int16)v22);
    *v29 = HIDWORD(v50);
    v30 = *(_DWORD *)(v26 + 96);
    v29[1] = v30;
    v29[2] = *(_DWORD *)(v26 + 100) - v30;
    AbsoluteFrom = LDOLabel_GetAbsoluteFrom(v26);
    v29[3] = AbsoluteFrom + a7;
    if ((*v29 - 36) <= 0x22 && ((1 << (*v29 - 36)) & 0x402008001) != 0 || *v29 == 1)
      v40 = 0;
    else
      v40 = LDOLabel_GetAbsoluteTo(v26) - AbsoluteFrom;
    v29[4] = v40;
    v34 = v29 + 4;
    v35 = LDOObject_GetU32Attribute((uint64_t *)v26, "FROMOVERFLOW", &v52, (_DWORD *)&v49 + 1);
    v36 = LH_ERROR_to_VERROR(v35);
    if ((v36 & 0x80000000) != 0)
      goto LABEL_49;
    if (v52)
      *v34 += HIDWORD(v49);
    v37 = LDOObject_GetU32Attribute((uint64_t *)v26, "TOOVERFLOW", &v52, &v49);
    v36 = LH_ERROR_to_VERROR(v37);
    if ((v36 & 0x80000000) != 0)
      goto LABEL_49;
    if (v52)
      *v34 += v49;
    StringAttribute = LDOObject_GetStringAttribute((uint64_t *)v26, "STRARGS", (_DWORD *)&v51 + 1, &v48);
    v36 = LH_ERROR_to_VERROR(StringAttribute);
    if ((v36 & 0x80000000) != 0
      || (v39 = LDOObject_GetU32Attribute((uint64_t *)v26, "U32ARGS", &v51, &v50),
          v36 = LH_ERROR_to_VERROR(v39),
          (v36 & 0x80000000) != 0))
    {
LABEL_49:
      v41 = v36;
      a1 = v43;
      goto LABEL_45;
    }
    if (HIDWORD(v51))
    {
      *(_QWORD *)(v19 + 32 * v44 + 24) = v48;
    }
    else if ((_DWORD)v51)
    {
      *(_DWORD *)(v19 + 32 * v44 + 24) = v50;
    }
    else
    {
      *(_QWORD *)(v19 + 32 * v44 + 24) = 0;
    }
    a6 = v25;
    a4 = v24;
    a3 = v23;
    a2 = v47;
    v22 = v45 + 1;
LABEL_40:
    if ((unint64_t)++v21 >= *(_QWORD *)(*(_QWORD *)(a5 + 32) + 32))
      goto LABEL_41;
  }
  v41 = v28;
  a1 = v43;
LABEL_45:
  heap_Free(*(_QWORD **)(a1 + 8), v19);
  return v41;
}

uint64_t loc_exportNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7, _DWORD *a8, unsigned __int16 *a9)
{
  int v16;
  uint64_t result;
  int U32Attribute;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  __int16 v27;
  __int16 v28;
  int v29;

  v21 = 0;
  v22 = 0;
  if (a7 == 1
    || (v16 = LDOObject_GetU32Attribute(a6, "_TTYPE", &v22, &v21),
        result = LH_ERROR_to_VERROR(v16),
        (result & 0x80000000) == 0)
    && v22
    && v21 >= 4)
  {
    if (*a8 == 1)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *))(a2 + 72))(a3, a4, 3, a5, a9);
      if ((result & 0x80000000) != 0)
        return result;
      *a8 = 0;
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a2 + 80))(a3, a4, *a9, a9);
      if ((result & 0x80000000) != 0)
        return result;
    }
    v28 = 0;
    v25 = 0;
    v24 = 0;
    v23 = 0;
    U32Attribute = LDOObject_GetU32Attribute(a6, "_TTYPE", &v23, &v25);
    result = LH_ERROR_to_VERROR(U32Attribute);
    if ((result & 0x80000000) == 0)
    {
      if (v23)
      {
        v29 = v25;
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, __int16 *))(a2 + 160))(a3, a4, *a9, 0, 1, &v29, &v28);
        if ((result & 0x80000000) == 0)
        {
          v19 = LDOTreeNode_ComputeAbsoluteFrom((uint64_t)a6, (_DWORD *)&v24 + 1);
          result = LH_ERROR_to_VERROR(v19);
          if ((result & 0x80000000) == 0)
          {
            v27 = WORD2(v24);
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, __int16 *))(a2 + 160))(a3, a4, *a9, 1, 1, &v27, &v28);
            if ((result & 0x80000000) == 0)
            {
              v20 = LDOTreeNode_ComputeAbsoluteTo((size_t)a6, &v24);
              result = LH_ERROR_to_VERROR(v20);
              if ((result & 0x80000000) == 0)
              {
                v26 = v24;
                result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, __int16 *))(a2 + 160))(a3, a4, *a9, 2, 1, &v26, &v28);
                if ((result & 0x80000000) == 0 && v29 == 6)
                  return loc_exportTokenIntTnSpecificFieldToLingDB(a1, a2, a3, a4, a6, *a9);
              }
            }
          }
        }
      }
      else
      {
        return 2147491860;
      }
    }
  }
  return result;
}

uint64_t loc_exportNonMarkerLabelWithTType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7, _DWORD *a8, unsigned __int16 *a9)
{
  int v16;
  uint64_t result;
  int v18;
  uint64_t v19;
  int U32Attribute;
  int v21;
  int StringAttribute;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, __int16 *);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char *__s;
  int v36;
  int v37;
  __int16 AbsoluteTo;
  __int16 AbsoluteFrom;
  __int16 v40;
  int v41;

  if (a7 != 1
    || (LODWORD(__s) = 0,
        v41 = 0,
        v37 = 0,
        v16 = LDOObject_GetU32Attribute(a6, "_TTYPE", &__s, &v41),
        result = LH_ERROR_to_VERROR(v16),
        (result & 0x80000000) == 0)
    && (v41 != 6
     || (v18 = LDOObject_GetU32Attribute(a6, "CREATED_BEFORE_TOKENTN", &__s, &v37),
         result = LH_ERROR_to_VERROR(v18),
         (result & 0x80000000) == 0)
     && (_DWORD)__s
     && v37 == 1))
  {
    if (*a8 == 1)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *))(a2 + 72))(a3, a4, 3, a5, a9);
      if ((result & 0x80000000) != 0)
        return result;
      *a8 = 0;
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a2 + 80))(a3, a4, *a9, a9);
      if ((result & 0x80000000) != 0)
        return result;
    }
    v19 = *a9;
    v40 = 0;
    v36 = 0;
    v37 = 0;
    __s = 0;
    U32Attribute = LDOObject_GetU32Attribute(a6, "_TTYPE", &v36, &v37);
    result = LH_ERROR_to_VERROR(U32Attribute);
    if ((result & 0x80000000) == 0)
    {
      AbsoluteFrom = LDOLabel_GetAbsoluteFrom((uint64_t)a6);
      AbsoluteTo = LDOLabel_GetAbsoluteTo((uint64_t)a6);
      v41 = v37;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, int *, __int16 *))(a2 + 160))(a3, a4, v19, 0, 1, &v41, &v40);
      if ((result & 0x80000000) == 0)
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, __int16 *))(a2 + 160))(a3, a4, v19, 1, 1, &AbsoluteFrom, &v40);
        if ((result & 0x80000000) == 0)
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, __int16 *))(a2 + 160))(a3, a4, v19, 2, 1, &AbsoluteTo, &v40);
          if ((result & 0x80000000) == 0)
          {
            v21 = v41;
            if (v41 == 6)
            {
              result = loc_exportTokenIntTnSpecificFieldToLingDB(a1, a2, a3, a4, a6, v19);
              if ((result & 0x80000000) != 0)
                return result;
              v21 = v41;
            }
            if ((v21 & 0xFFFFFFFD) == 5)
            {
              StringAttribute = LDOObject_GetStringAttribute(a6, "TNTAG", &v36, (uint64_t *)&__s);
              result = LH_ERROR_to_VERROR(StringAttribute);
              if ((result & 0x80000000) != 0)
                return result;
              if (v36)
              {
                v23 = strlen(__s);
                result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, __int16 *))(a2 + 160))(a3, a4, v19, 4, (unsigned __int16)(v23 + 1), __s, &v40);
                if ((result & 0x80000000) == 0)
                {
                  v24 = LDOObject_GetStringAttribute(a6, "NORM", &v36, (uint64_t *)&__s);
                  result = LH_ERROR_to_VERROR(v24);
                  if ((result & 0x80000000) == 0)
                  {
                    if (!v36
                      || (v25 = strlen(__s),
                          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, __int16 *))(a2 + 160))(a3, a4, v19, 3, (unsigned __int16)(v25 + 1), __s, &v40), (result & 0x80000000) == 0))
                    {
                      v26 = LDOObject_GetStringAttribute(a6, "LANGMAP", &v36, (uint64_t *)&__s);
                      result = LH_ERROR_to_VERROR(v26);
                      if ((result & 0x80000000) == 0)
                      {
                        if (v36)
                        {
                          v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, __int16 *))(a2 + 160);
                          v28 = __s;
                          v29 = (unsigned __int16)(strlen(__s) + 1);
                          v30 = a3;
                          v31 = a4;
                          v32 = v19;
                          v33 = 6;
                          return v27(v30, v31, v32, v33, v29, v28, &v40);
                        }
                      }
                    }
                  }
                }
              }
              else
              {
                return 2147491860;
              }
            }
            else if (v21 == 4)
            {
              v34 = LDOObject_GetStringAttribute(a6, "NORM", &v36, (uint64_t *)&__s);
              result = LH_ERROR_to_VERROR(v34);
              if ((result & 0x80000000) == 0)
              {
                if (v36)
                {
                  v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, __int16 *))(a2 + 160);
                  v28 = __s;
                  v29 = (unsigned __int16)(strlen(__s) + 1);
                  v30 = a3;
                  v31 = a4;
                  v32 = v19;
                  v33 = 3;
                  return v27(v30, v31, v32, v33, v29, v28, &v40);
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t exportToLingDBWordRecord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t **v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  int U32Attribute;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t **v35;
  unint64_t v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t **v43;
  uint64_t *v44;
  uint64_t *v45;
  int v46;
  int v47;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  unint64_t v54;
  uint64_t **v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  unsigned __int16 v62;
  unsigned __int16 v63;
  int v64;
  uint64_t v65;

  v63 = 0;
  v62 = 0;
  v61 = 0;
  v59 = 1;
  v60 = 0;
  v58 = 0;
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 64))(a3, a4);
  if ((v14 & 0x80000000) == 0)
  {
    v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(a3, a4);
    if ((v14 & 0x80000000) == 0)
    {
      v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a2 + 104))(a3, a4, 1, 0, &v63);
      if ((v14 & 0x80000000) == 0)
      {
        v14 = loc_exportSentenceFields(a2, a3, a4, a5, a6, &v63, (_DWORD *)&v61 + 1);
        if ((v14 & 0x80000000) == 0)
        {
          v14 = loc_exportMrkLabelsToLingDB(a1, a2, a3, a4, a6, v63, SHIDWORD(v61));
          if ((v14 & 0x80000000) == 0)
          {
            v56 = a1;
            v65 = 0;
            v64 = 0;
            v15 = *(_QWORD *)(a6 + 32);
            v16 = *(uint64_t ***)(v15 + 24);
            if ((unint64_t)v16 >= *(_QWORD *)(v15 + 32))
            {
              v17 = 0;
              v19 = 0;
              v54 = 0;
              v39 = *(_QWORD *)(a6 + 16);
              v37 = 0;
              v35 = *(uint64_t ***)(v39 + 80);
              v36 = *(_QWORD *)(v39 + 88);
              goto LABEL_39;
            }
            v51 = a5;
            v53 = 0;
            v17 = 0;
            v57 = 0;
            v18 = 0;
            v19 = 0;
            v52 = a7;
            while (1)
            {
              v20 = *v16;
              if (*((_DWORD *)*v16 + 26) == 1)
              {
                v21 = v18;
                U32Attribute = LDOObject_GetU32Attribute(*v16, "_WTYPE", &v65, &v64);
                v19 = LH_ERROR_to_VERROR(U32Attribute);
                if ((v19 & 0x80000000) != 0)
                {
                  a5 = v51;
                  goto LABEL_49;
                }
                if ((_DWORD)v65 == 1)
                {
                  v23 = v17;
                  v24 = v57 - v17;
                  v25 = (v57 - v17) >> 3;
                  if (v53 != (_DWORD)v25 || (_DWORD)v25 == -1)
                  {
                    v30 = (v24 >> 3);
                    a7 = v52;
                    v17 = v23;
                  }
                  else
                  {
                    v26 = 2 * v53;
                    if (2 * v53 >= v53 + 1000000)
                      v26 = v53 + 1000000;
                    if (v26 <= v53 + 1)
                      v27 = v53 + 1;
                    else
                      v27 = v26;
                    if (v27 <= 8)
                      v27 = 8;
                    v53 = v27;
                    v28 = OOCAllocator_Realloc(v51, v23, 8 * v27, (_DWORD *)&v65 + 1);
                    v29 = HIDWORD(v65);
                    if (HIDWORD(v65))
                    {
                      a7 = v52;
                      v17 = v28;
LABEL_30:
                      v19 = LH_ERROR_to_VERROR(v29);
LABEL_31:
                      a5 = v51;
                      if ((v19 & 0x80000000) == 0)
                      {
                        v34 = *(_QWORD *)(a6 + 16);
                        v35 = *(uint64_t ***)(v34 + 80);
                        v36 = *(_QWORD *)(v34 + 88);
                        v37 = v57;
                        v38 = (unint64_t)v35 >= v36 || v17 >= v57;
                        if (v38)
                        {
                          v54 = v17;
                          goto LABEL_39;
                        }
                        v43 = (uint64_t **)v17;
                        v49 = v36;
                        v50 = v17;
                        while (1)
                        {
                          v44 = *v35;
                          v55 = v43;
                          v45 = *v43;
                          v46 = LDOObject_GetU32Attribute(*v35, "INDEX", &v58, &v61);
                          v14 = LH_ERROR_to_VERROR(v46);
                          if ((v14 & 0x80000000) != 0)
                            return v14;
                          v47 = LDOObject_GetU32Attribute(v45, "INDEX", &v58, &v60);
                          v14 = LH_ERROR_to_VERROR(v47);
                          if ((v14 & 0x80000000) != 0)
                            return v14;
                          if (v61 <= v60)
                          {
                            v19 = loc_exportNode_WordRecord(v56, a2, a3, a4, v63, v44, &v59, &v62, a7);
                            v37 = v57;
                            v17 = v50;
                            if ((v19 & 0x80000000) != 0)
                              break;
                            ++v35;
                            v36 = v49;
                            v43 = v55;
                          }
                          else
                          {
                            v19 = loc_exportNonMarkerLabelWithWType(v56, a2, a3, a4, v63, v45, &v59, &v62, a7);
                            v36 = v49;
                            v17 = v50;
                            if ((v19 & 0x80000000) != 0)
                              break;
                            v43 = v55 + 1;
                            v37 = v57;
                          }
                          if ((unint64_t)v35 >= v36 || (unint64_t)v43 >= v37)
                          {
                            v54 = (unint64_t)v43;
                            v17 = v50;
LABEL_39:
                            while ((unint64_t)v35 < v36)
                            {
                              v19 = loc_exportNode_WordRecord(v56, a2, a3, a4, v63, *v35, &v59, &v62, a7);
                              if ((v19 & 0x80000000) != 0)
                                goto LABEL_49;
                              ++v35;
                            }
                            if (v54 < v37)
                            {
                              v40 = v37;
                              v41 = v17;
                              v42 = v54 + 8;
                              do
                              {
                                v19 = loc_exportNonMarkerLabelWithWType(v56, a2, a3, a4, v63, *(uint64_t **)(v42 - 8), &v59, &v62, a7);
                                if ((v19 & 0x80000000) != 0)
                                  break;
                                v38 = v42 >= v40;
                                v42 += 8;
                              }
                              while (!v38);
                              v17 = v41;
                            }
                            break;
                          }
                        }
                      }
LABEL_49:
                      if (v17)
                        OOCAllocator_Free(a5, v17);
                      return v19;
                    }
                    v30 = (v24 >> 3);
                    v57 = v28 + 8 * v25;
                    a7 = v52;
                    v17 = v28;
                  }
                  v31 = v21;
                  v32 = v30 > v21;
                  v33 = v30 - v21;
                  if (v32)
                  {
                    memmove((void *)(v17 + 8 * v21 + 8), (const void *)(v17 + 8 * v21), 8 * v33);
                    v31 = v21;
                  }
                  v57 += 8;
                  *(_QWORD *)(v17 + 8 * v31) = v20;
                  v18 = v31 + 1;
                }
                else
                {
                  v18 = v21;
                }
              }
              if ((unint64_t)++v16 >= *(_QWORD *)(*(_QWORD *)(a6 + 32) + 32))
              {
                v29 = HIDWORD(v65);
                if (HIDWORD(v65))
                  goto LABEL_30;
                goto LABEL_31;
              }
            }
          }
        }
      }
    }
  }
  return v14;
}

uint64_t loc_exportNode_WordRecord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, _DWORD *a7, unsigned __int16 *a8, int a9)
{
  uint64_t result;
  int U32Attribute;
  int v18;
  __int16 v19;
  int v20;
  int v21;
  __int16 v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  __int16 v28;
  __int16 v29;
  __int16 v30;
  int v31;

  if (*a7 == 1)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *))(a2 + 72))(a3, a4, 2, a5, a8);
    if ((result & 0x80000000) != 0)
      return result;
    *a7 = 0;
  }
  else
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a2 + 80))(a3, a4, *a8, a8);
    if ((result & 0x80000000) != 0)
      return result;
  }
  v31 = 0;
  v30 = 0;
  v27 = 0;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  U32Attribute = LDOObject_GetU32Attribute(a6, "_WTYPE", &v24, &v26);
  result = LH_ERROR_to_VERROR(U32Attribute);
  if ((result & 0x80000000) == 0)
  {
    if (v24)
    {
      v31 = v26;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, __int16 *))(a2 + 160))(a3, a4, *a8, 0, 1, &v31, &v30);
      if ((result & 0x80000000) == 0)
      {
        v18 = LDOTreeNode_ComputeAbsoluteFrom((uint64_t)a6, (_DWORD *)&v25 + 1);
        result = LH_ERROR_to_VERROR(v18);
        if ((result & 0x80000000) == 0)
        {
          v19 = WORD2(v25);
          v29 = WORD2(v25);
          v20 = LDOObject_GetU32Attribute(a6, "FROMOVERFLOW", &v24, &v27);
          result = LH_ERROR_to_VERROR(v20);
          if ((result & 0x80000000) == 0)
          {
            if (v24)
              v29 = v27 + v19;
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, __int16 *))(a2 + 160))(a3, a4, *a8, 1, 1, &v29, &v30);
            if ((result & 0x80000000) == 0)
            {
              v21 = LDOTreeNode_ComputeAbsoluteTo((size_t)a6, &v25);
              result = LH_ERROR_to_VERROR(v21);
              if ((result & 0x80000000) == 0)
              {
                v22 = v25;
                v28 = v25;
                v23 = LDOObject_GetU32Attribute(a6, "TOOVERFLOW", &v24, (_DWORD *)&v26 + 1);
                result = LH_ERROR_to_VERROR(v23);
                if ((result & 0x80000000) == 0)
                {
                  if (v24)
                    v28 = WORD2(v26) + v22;
                  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __int16 *, __int16 *))(a2 + 160))(a3, a4, *a8, 2, 1, &v28, &v30);
                  if ((result & 0x80000000) == 0)
                    return loc_exportWordRecordCommonFieldsToLingDB(a1, a2, a3, a4, a6, *a8, a9);
                }
              }
            }
          }
        }
      }
    }
    else
    {
      return 2147491860;
    }
  }
  return result;
}

uint64_t loc_exportNonMarkerLabelWithWType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, _DWORD *a7, unsigned __int16 *a8, int a9)
{
  uint64_t result;
  uint64_t v17;
  int U32Attribute;
  __int16 AbsoluteFrom;
  int v20;
  __int16 AbsoluteTo;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  __int16 v27;
  __int16 v28;
  int v29;

  if (*a7 == 1)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *))(a2 + 72))(a3, a4, 2, a5, a8);
    if ((result & 0x80000000) != 0)
      return result;
    *a7 = 0;
  }
  else
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(a2 + 80))(a3, a4, *a8, a8);
    if ((result & 0x80000000) != 0)
      return result;
  }
  v17 = *a8;
  v28 = 0;
  v25 = 0;
  v24 = 0;
  v23 = 0;
  U32Attribute = LDOObject_GetU32Attribute(a6, "_WTYPE", &v23, &v24);
  result = LH_ERROR_to_VERROR(U32Attribute);
  if ((result & 0x80000000) == 0)
  {
    AbsoluteFrom = LDOLabel_GetAbsoluteFrom((uint64_t)a6);
    v27 = AbsoluteFrom;
    v20 = LDOObject_GetU32Attribute(a6, "FROMOVERFLOW", &v23, &v25);
    result = LH_ERROR_to_VERROR(v20);
    if ((result & 0x80000000) == 0)
    {
      if (v23)
        v27 = v25 + AbsoluteFrom;
      AbsoluteTo = LDOLabel_GetAbsoluteTo((uint64_t)a6);
      v26 = AbsoluteTo;
      v22 = LDOObject_GetU32Attribute(a6, "TOOVERFLOW", &v23, (_DWORD *)&v24 + 1);
      result = LH_ERROR_to_VERROR(v22);
      if ((result & 0x80000000) == 0)
      {
        if (v23)
          v26 = WORD2(v24) + AbsoluteTo;
        v29 = v24;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, int *, __int16 *))(a2 + 160))(a3, a4, v17, 0, 1, &v29, &v28);
        if ((result & 0x80000000) == 0)
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, __int16 *))(a2 + 160))(a3, a4, v17, 1, 1, &v27, &v28);
          if ((result & 0x80000000) == 0)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, __int16 *))(a2 + 160))(a3, a4, v17, 2, 1, &v26, &v28);
            if ((result & 0x80000000) == 0)
              return loc_exportWordRecordCommonFieldsToLingDB(a1, a2, a3, a4, a6, v17, a9);
          }
        }
      }
    }
  }
  return result;
}

uint64_t replaceBasicTokensWithTokenIntTnInLingDB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v13;
  int U32Attribute;
  unsigned __int16 AbsoluteFrom;
  unsigned __int16 AbsoluteTo;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v53;
  int v54;
  unsigned int v55;
  uint64_t v58;
  int v59;
  unsigned __int16 v60;
  unsigned int v61;
  int v62;
  int v63;
  int v64;
  __int16 v65;
  __int16 v66;
  __int16 v67;

  v6 = 0;
  v59 = 0;
  v58 = 0;
  v7 = *(_QWORD *)(a5 + 32);
  v8 = *(uint64_t ***)(v7 + 24);
  if ((unint64_t)v8 >= *(_QWORD *)(v7 + 32))
    return v6;
  v6 = 0;
  while (1)
  {
    v13 = *v8;
    if (*((_DWORD *)*v8 + 26) != 1)
      goto LABEL_50;
    U32Attribute = LDOObject_GetU32Attribute(*v8, "_TTYPE", (_DWORD *)&v58 + 1, &v59);
    v6 = LH_ERROR_to_VERROR(U32Attribute);
    if ((v6 & 0x80000000) != 0)
      return v6;
    if (!HIDWORD(v58) || v59 != 6)
      goto LABEL_50;
    AbsoluteFrom = LDOLabel_GetAbsoluteFrom((uint64_t)v13);
    AbsoluteTo = LDOLabel_GetAbsoluteTo((uint64_t)v13);
    v17 = LDOObject_GetU32Attribute(v13, "CREATED_BEFORE_TOKENTN", (_DWORD *)&v58 + 1, &v58);
    v6 = LH_ERROR_to_VERROR(v17);
    if ((v6 & 0x80000000) != 0)
      return v6;
    if (HIDWORD(v58) && (_DWORD)v58 == 1)
      goto LABEL_50;
    v62 = 0;
    v63 = 0;
    v61 = 0;
    v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(a2 + 104))(a3, a4, 1, 0, (char *)&v63 + 2);
    if ((v18 & 0x80000000) != 0)
      break;
    v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(a2 + 104))(a3, a4, 3, HIWORD(v63), &v63);
    if ((v25 & 0x80000000) == 0 && (_WORD)v63)
    {
      v26 = 0;
      v55 = AbsoluteFrom;
      v27 = AbsoluteTo;
      v28 = 1;
LABEL_14:
      v54 = v26;
      while (1)
      {
        v29 = (unsigned __int16)v63;
        LOWORD(v64) = 0;
        v67 = 0;
        v30 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(a2 + 184))(a3, a4, (unsigned __int16)v63, 1, &v64);
        v35 = 24031;
        if (v30 < 0 || (unsigned __int16)v64 != 1)
          goto LABEL_56;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, __int16 *))(a2 + 168))(a3, a4, v29, 1, 1, (char *)&v62 + 2, &v67);
        if (v67 != 1)
          goto LABEL_55;
        v36 = (unsigned __int16)v63;
        LOWORD(v64) = 0;
        v67 = 0;
        v37 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(a2 + 184))(a3, a4, (unsigned __int16)v63, 2, &v64);
        v35 = 24031;
        if (v37 < 0 || (unsigned __int16)v64 != 1)
          goto LABEL_56;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, __int16 *))(a2 + 168))(a3, a4, v36, 2, 1, &v62, &v67);
        if (v67 != 1)
        {
LABEL_55:
          v35 = 24030;
LABEL_56:
          v6 = 2147491840;
          v25 = a6;
          v49 = a1;
          v50 = *(_QWORD *)(a1 + 32);
          v51 = a6;
LABEL_57:
          log_OutPublic(v50, v51, v35, 0, v31, v32, v33, v34, v53);
          goto LABEL_62;
        }
        v38 = (unsigned __int16)v63;
        LOWORD(v64) = 0;
        v67 = 0;
        if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, int *))(a2 + 184))(a3, a4, (unsigned __int16)v63, 0, &v64) & 0x80000000) == 0&& (unsigned __int16)v64 == 1)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, unsigned int *, __int16 *))(a2 + 168))(a3, a4, v38, 0, 1, &v61, &v67);
          if (v67 != 1)
          {
            v6 = 2147491840;
            v25 = a6;
            v49 = a1;
            v50 = *(_QWORD *)(a1 + 32);
            v51 = a6;
            v35 = 24030;
            goto LABEL_57;
          }
        }
        if (HIWORD(v62) >= v27 && v61 != 5)
        {
          v6 = 0;
LABEL_54:
          log_OutText(*(_QWORD *)(a1 + 32), a6, 4, 0, (uint64_t)"ldoutil : loc_replaceBasicTokensWithTokenIntTnInLingDB End (%x) ", v32, v33, v34, v6);
          goto LABEL_50;
        }
        if (HIWORD(v62) < v55 || (unsigned __int16)v62 > v27 || v61 > 3)
        {
          v6 = 0;
          v26 = (unsigned __int16)v63;
LABEL_46:
          if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD, int *))(a2 + 120))(a3, a4, (unsigned __int16)v26, &v63)|| !(_WORD)v63)
          {
            goto LABEL_54;
          }
          goto LABEL_14;
        }
        if (v28 != 1)
          break;
        if (HIWORD(v62) != v55)
        {
          v6 = 0;
          v28 = 1;
          goto LABEL_39;
        }
        v60 = v63;
        v39 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 80))(a3, a4);
        if (v39 < 0)
        {
          LODWORD(v25) = v39;
          return v25 | 0x80002000;
        }
        v40 = v60;
        v67 = v55;
        v66 = v27;
        v65 = 0;
        v64 = 6;
        v41 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int *, __int16 *))(a2 + 160))(a3, a4, v60, 0, 1, &v64, &v65);
        if ((v41 & 0x80000000) != 0
          || (v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, __int16 *))(a2 + 160))(a3, a4, v40, 1, 1, &v67, &v65), (v41 & 0x80000000) != 0)|| (v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, __int16 *))(a2 + 160))(a3, a4, v40, 2, 1, &v66, &v65), (v41 & 0x80000000) != 0))
        {
          v6 = v41;
LABEL_60:
          v25 = a6;
          goto LABEL_61;
        }
        v42 = a1;
        v6 = loc_exportTokenIntTnSpecificFieldToLingDB(a1, a2, a3, a4, v13, v40);
        if ((v6 & 0x80000000) != 0)
          goto LABEL_60;
        v28 = 0;
LABEL_40:
        v47 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a2 + 192))(a3, a4, (unsigned __int16)v63);
        v48 = *(_QWORD *)(v42 + 32);
        if (v47)
        {
          log_OutPublic(v48, a6, 24033, "%s%d", v43, v44, v45, v46, "tokenRecId");
          goto LABEL_54;
        }
        log_OutText(v48, a6, 5, 0, (uint64_t)"deleting key %d", v44, v45, v46, (unsigned __int16)v63);
        if ((_WORD)v54)
        {
          v26 = v54;
          LOWORD(v63) = v54;
          goto LABEL_46;
        }
        v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *))(a2 + 104))(a3, a4, 3, HIWORD(v63), &v63);
        if ((v18 & 0x80000000) != 0)
          goto LABEL_58;
      }
      v6 = 0;
      v28 = 0;
LABEL_39:
      v42 = a1;
      goto LABEL_40;
    }
    log_OutText(*(_QWORD *)(a1 + 32), a6, 4, 0, (uint64_t)"ldoutil : loc_replaceBasicTokensWithTokenIntTnInLingDB End (%x) ", v22, v23, v24, v25);
    v6 = v25;
    if ((v25 & 0x80000000) != 0)
      return v25 | 0x80002000;
LABEL_50:
    if ((unint64_t)++v8 >= *(_QWORD *)(*(_QWORD *)(a5 + 32) + 32))
      return v6;
  }
LABEL_58:
  v6 = v18;
  v25 = a6;
LABEL_61:
  v49 = a1;
LABEL_62:
  log_OutText(*(_QWORD *)(v49 + 32), v25, 4, 0, (uint64_t)"ldoutil : loc_replaceBasicTokensWithTokenIntTnInLingDB End (%x) ", v19, v20, v21, v6);
  LODWORD(v25) = v6;
  return v25 | 0x80002000;
}

uint64_t LingDBIsValid(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t result;
  int v9;
  int v10;

  v10 = 0;
  *a4 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(a1 + 104))(a2, a3, 1, 0, (char *)&v10 + 2);
  if ((result & 0x80000000) == 0)
  {
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(a1 + 184))(a2, a3, HIWORD(v10), 3, &v10);
    result = 0;
    if ((v9 & 0x80000000) == 0)
    {
      if ((_WORD)v10)
      {
        result = 0;
        *a4 = 1;
      }
    }
  }
  return result;
}

uint64_t LingDBHasSentence(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  unsigned __int16 v10;
  int v11;

  v11 = 0;
  v10 = 0;
  v9 = 0;
  *a4 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(a1 + 104))(a2, a3, 1, 0, (char *)&v11 + 2);
  if ((result & 0x80000000) == 0)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, int *))(a1 + 184))(a2, a3, HIWORD(v11), 0, &v11);
    if ((result & 0x80000000) == 0)
    {
      if ((_WORD)v11)
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t *, unsigned __int16 *))(a1 + 176))(a2, a3, HIWORD(v11), 0, &v9, &v10);
        if ((result & 0x80000000) == 0 && v10 >= 2u)
          *a4 = 1;
      }
    }
  }
  return result;
}

uint64_t loc_importTokenIntTnFieldsFromLingDB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  char *v29;

  v29 = 0;
  v28 = 0;
  v27 = 0;
  LDOObject_SetU32Attribute(a5, "CREATED_BEFORE_TOKENTN", 1);
  v13 = LH_ERROR_to_VERROR(v12);
  if ((v13 & 0x80000000) != 0)
    return v13;
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(a2 + 176))(a3, a4, a6, 3, &v29, (char *)&v28 + 2);
  if ((v13 & 0x80000000) != 0)
    return v13;
  v14 = LDOObject_SetStringAttribute(a5, "NORM", v29);
  v13 = LH_ERROR_to_VERROR(v14);
  if ((v13 & 0x80000000) != 0)
    return v13;
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(a2 + 176))(a3, a4, a6, 4, &v29, (char *)&v28 + 2);
  if ((v13 & 0x80000000) != 0)
    return v13;
  v15 = LDOObject_SetStringAttribute(a5, "TNTAG", v29);
  v13 = LH_ERROR_to_VERROR(v15);
  if ((v13 & 0x80000000) != 0)
    return v13;
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *))(a2 + 184))(a3, a4, a6, 5, &v28);
  if ((v13 & 0x80000000) != 0)
    return v13;
  if (!(_WORD)v28)
  {
    v18 = 0;
    goto LABEL_21;
  }
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, char *))(a2 + 176))(a3, a4, a6, 5, &v27, (char *)&v28 + 2);
  if ((v13 & 0x80000000) != 0)
    return v13;
  LDOObject_SetU32Attribute(a5, "_MRKRD", HIWORD(v28));
  v13 = LH_ERROR_to_VERROR(v16);
  if ((v13 & 0x80000000) != 0)
    return v13;
  if (HIWORD(v28))
  {
    v17 = heap_Calloc(*(_QWORD **)(a1 + 8), HIWORD(v28), 4);
    if (!v17)
      return 2147491850;
    v18 = (const void *)v17;
    v19 = HIWORD(v28);
    if (HIWORD(v28))
    {
      v20 = 0;
      v21 = v27;
      do
      {
        *(_DWORD *)(v17 + 4 * v20) = *(unsigned __int16 *)(v21 + 2 * v20);
        ++v20;
      }
      while (v19 != v20);
    }
  }
  else
  {
    v18 = 0;
    LODWORD(v19) = 0;
  }
  v24 = LDOObject_SetListU32Attribute(a5, "_MRK", v18, v19);
  v25 = LH_ERROR_to_VERROR(v24);
  if ((v25 & 0x80000000) != 0)
    goto LABEL_25;
LABEL_21:
  v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *))(a2 + 184))(a3, a4, a6, 6, &v28);
  if ((v22 & 0x80000000) == 0 && (_WORD)v28)
  {
    v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(a2 + 176))(a3, a4, a6, 6, &v29, (char *)&v28 + 2);
    if ((v25 & 0x80000000) == 0)
    {
      v26 = LDOObject_SetStringAttribute(a5, "LANGMAP", v29);
      v25 = LH_ERROR_to_VERROR(v26);
    }
LABEL_25:
    v22 = v25;
  }
  if (v18)
    heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v18);
  return v22;
}

uint64_t loc_importTokenDctFieldsFromLingDB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  uint64_t result;
  int v12;
  __int16 v13;
  char *v14;

  v14 = 0;
  v13 = 0;
  LDOObject_SetU32Attribute(a4, "CREATED_BEFORE_TOKENTN", 1);
  result = LH_ERROR_to_VERROR(v10);
  if ((result & 0x80000000) == 0)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, __int16 *))(a1 + 176))(a2, a3, a5, 3, &v14, &v13);
    if ((result & 0x80000000) == 0)
    {
      v12 = LDOObject_SetStringAttribute(a4, "NORM", v14);
      return LH_ERROR_to_VERROR(v12);
    }
  }
  return result;
}

uint64_t loc_compute_overflow(uint64_t a1, unsigned int *a2, unsigned int *a3, _DWORD *a4, _DWORD *a5)
{
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v16;

  v16 = 0;
  v9 = LDO_ComputeText(a1, &v16);
  v10 = LH_ERROR_to_VERROR(v9);
  if ((v10 & 0x80000000) == 0)
  {
    v11 = LHString_Length(v16);
    *a4 = 0;
    *a5 = 0;
    v12 = *a3;
    if (*a3 > v11)
    {
      *a5 = *a3 - v11;
      *a3 = v11;
      v12 = v11;
    }
    v13 = *a2;
    if (*a2 > v11)
    {
      *a4 = *a2 - v11;
      *a2 = v11;
      v12 = *a3;
      v13 = v11;
    }
    if (v13 > v12)
      *a2 = v12;
  }
  if (v16)
  {
    v14 = LDOString_BorrowAllocator(v16);
    OOC_PlacementDeleteObject(v14, v16);
  }
  return v10;
}

uint64_t loc_importWordRecordFieldsFromLingDB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9, int a10)
{
  uint64_t v12;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char *v26;
  char **v27;
  uint64_t v28;
  char *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  char *v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  int v37;
  char *v38;
  uint64_t v39;
  int v40;
  uint64_t v42;
  int v43;
  uint64_t v44;
  const void *v45;
  char *__s;
  unsigned __int16 v47;
  int v48;
  unsigned int v49;

  v12 = a5;
  v48 = 0;
  v47 = 0;
  v45 = 0;
  __s = 0;
  LDOObject_SetU32Attribute(a5, "INDEX", a7);
  v18 = LH_ERROR_to_VERROR(v17);
  if ((v18 & 0x80000000) == 0)
  {
    if (!a9
      || (LDOObject_SetU32Attribute(v12, "FROMOVERFLOW", a9), v18 = LH_ERROR_to_VERROR(v19), (v18 & 0x80000000) == 0))
    {
      if (!a10
        || (LDOObject_SetU32Attribute(v12, "TOOVERFLOW", a10), v18 = LH_ERROR_to_VERROR(v20), (v18 & 0x80000000) == 0))
      {
        v43 = a8;
        v44 = a1;
        v21 = 0;
        v22 = "PRIORITY";
        do
        {
          v23 = LOBYTE((&u16Attributes)[v21 + 1]);
          v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *))(a2 + 184))(a3, a4, a6, v23, &v48);
          if ((v18 & 0x80000000) != 0)
            return v18;
          if ((_WORD)v48)
          {
            v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *, char *))(a2 + 168))(a3, a4, a6, v23, 1, &v47, (char *)&v48 + 2);
            if ((v18 & 0x80000000) != 0)
              return v18;
            LDOObject_SetU32Attribute(v12, v22, v47);
            v18 = LH_ERROR_to_VERROR(v24);
            if ((v18 & 0x80000000) != 0)
              return v18;
          }
          v22 = (&u16Attributes)[v21 + 2];
          v21 += 2;
        }
        while (v21 != 8);
        v25 = 0;
        v26 = "PHON";
        v27 = &off_1EA93E500;
        v42 = v12;
        while (1)
        {
          v28 = *((unsigned __int8 *)v27 - 8);
          v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *))(a2 + 184))(a3, a4, a6, v28, &v48);
          if ((v18 & 0x80000000) != 0)
            return v18;
          if ((_WORD)v48)
          {
            v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(a2 + 176))(a3, a4, a6, v28, &__s, (char *)&v48 + 2);
            if ((v18 & 0x80000000) != 0)
              return v18;
            if (v43)
            {
              if ((unsigned __int16)v25 <= 0xCu && ((1 << v25) & 0x1101) != 0)
              {
LABEL_19:
                v29 = __s;
                v49 = 0;
                v30 = strlen(__s);
                v31 = Utf8_DepesLengthInBytesUtf8((unsigned __int8 *)__s, v30);
                v32 = heap_Calloc(*(_QWORD **)(v44 + 8), v31 + 1, 1);
                if (!v32)
                  return 2147491850;
                v33 = (char *)v32;
                v34 = strlen(v29);
                v35 = utf8_DepesToUtf8((uint64_t)v29, v34, 0, (uint64_t)v33, v31, &v49, 0);
                if ((v35 & 0x80000000) != 0
                  || (v33[v49] = 0,
                      v35 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a2 + 320))(a3, a4, 0),
                      (v35 & 0x80000000) != 0)
                  || (v36 = LDOObject_SetStringAttribute(v42, v26, v33),
                      v35 = LH_ERROR_to_VERROR(v36),
                      (v35 & 0x80000000) != 0))
                {
                  v39 = v35;
                  heap_Free(*(_QWORD **)(v44 + 8), (uint64_t)v33);
                  return v39;
                }
                heap_Free(*(_QWORD **)(v44 + 8), (uint64_t)v33);
                v12 = v42;
                goto LABEL_26;
              }
            }
            else if (v25 == 12)
            {
              goto LABEL_19;
            }
            v37 = LDOObject_SetStringAttribute(v12, v26, __s);
            v18 = LH_ERROR_to_VERROR(v37);
            if ((v18 & 0x80000000) != 0)
              return v18;
          }
LABEL_26:
          v38 = *v27;
          v27 += 2;
          v26 = v38;
          if (++v25 == 14)
          {
            v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *))(a2 + 184))(a3, a4, a6, 16, &v48);
            if ((v39 & 0x80000000) != 0 || !(_WORD)v48)
              return v39;
            v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, const void **, char *))(a2 + 176))(a3, a4, a6, 16, &v45, (char *)&v48 + 2);
            if ((v18 & 0x80000000) == 0)
            {
              v40 = LDOObject_SetListU32Attribute(v12, "SGT", v45, HIWORD(v48));
              return LH_ERROR_to_VERROR(v40);
            }
            return v18;
          }
        }
      }
    }
  }
  return v18;
}

uint64_t loc_exportTokenIntTnSpecificFieldToLingDB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  int StringAttribute;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int U32Attribute;
  int v21;
  uint64_t v22;
  int ListU32Attribute;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v28;
  uint64_t v29;
  __int16 v30;
  int v31;
  uint64_t v32;
  __int16 v33;
  int v34;
  int v35;
  __int16 v36;
  char *__s;
  int v38;

  v38 = 1;
  __s = 0;
  v36 = 0;
  v34 = 0;
  v35 = 0;
  v33 = 0;
  StringAttribute = LDOObject_GetStringAttribute(a5, "NORM", &v38, (uint64_t *)&__s);
  v13 = LH_ERROR_to_VERROR(StringAttribute);
  if ((v13 & 0x80000000) != 0)
    return v13;
  v14 = 2147491860;
  if (!v38)
    return 2147491860;
  v15 = strlen(__s);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, __int16 *))(a2 + 160))(a3, a4, a6, 3, (unsigned __int16)(v15 + 1), __s, &v36);
  if ((v13 & 0x80000000) != 0)
    return v13;
  v16 = LDOObject_GetStringAttribute(a5, "TNTAG", &v38, (uint64_t *)&__s);
  v13 = LH_ERROR_to_VERROR(v16);
  if ((v13 & 0x80000000) != 0)
    return v13;
  if (!v38)
    return 2147491860;
  v17 = strlen(__s);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, __int16 *))(a2 + 160))(a3, a4, a6, 4, (unsigned __int16)(v17 + 1), __s, &v36);
  if ((v13 & 0x80000000) != 0)
    return v13;
  v18 = LDOObject_GetStringAttribute(a5, "LANGMAP", &v38, (uint64_t *)&__s);
  v13 = LH_ERROR_to_VERROR(v18);
  if ((v13 & 0x80000000) != 0)
    return v13;
  if (v38)
  {
    v19 = strlen(__s);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, char *, __int16 *))(a2 + 160))(a3, a4, a6, 6, (unsigned __int16)(v19 + 1), __s, &v36);
    if ((v13 & 0x80000000) != 0)
      return v13;
  }
  U32Attribute = LDOObject_GetU32Attribute(a5, "ORIGREFDUR", &v38, &v34);
  v13 = LH_ERROR_to_VERROR(U32Attribute);
  if ((v13 & 0x80000000) != 0)
    return v13;
  if (v38)
  {
    v33 = v34;
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, __int16 *))(a2 + 160))(a3, a4, a6, 8, 1, &v33, &v36);
    if ((v13 & 0x80000000) != 0)
      return v13;
  }
  v21 = LDOObject_GetU32Attribute(a5, "_MRKRD", &v38, &v35);
  v22 = LH_ERROR_to_VERROR(v21);
  if ((v22 & 0x80000000) == 0 && v38)
  {
    v32 = 0;
    v31 = 0;
    ListU32Attribute = LDOObject_GetListU32Attribute(a5, "_MRK", &v38, &v32, &v31);
    v24 = LH_ERROR_to_VERROR(ListU32Attribute);
    if ((v24 & 0x80000000) != 0)
      return v24;
    if (!v38)
      return v14;
    v30 = v31;
    v25 = (unsigned __int16)v31;
    if ((_WORD)v31)
    {
      v26 = heap_Calloc(*(_QWORD **)(a1 + 8), (unsigned __int16)v31, 2);
      if (!v26)
        return 2147491850;
    }
    else
    {
      v26 = 0;
    }
    if (v25)
    {
      v28 = 0;
      v29 = v32;
      do
      {
        *(_WORD *)(v26 + 2 * v28) = *(_DWORD *)(v29 + 4 * v28);
        ++v28;
      }
      while (v28 < v25);
    }
    v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, __int16 *))(a2 + 160))(a3, a4, a6, 5, (unsigned __int16)v35, v26, &v30);
    if (v26)
      heap_Free(*(_QWORD **)(a1 + 8), v26);
    if (v32)
      heap_Free(*(_QWORD **)(a1 + 8), v32);
  }
  return v22;
}

uint64_t loc_exportWordRecordCommonFieldsToLingDB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, int a7)
{
  uint64_t v12;
  char *v13;
  int U32Attribute;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int StringAttribute;
  char **v19;
  __int16 v20;
  char *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  __int16 v26;
  uint64_t v27;
  int ListU32Attribute;
  uint64_t v29;
  uint64_t v33;
  uint64_t v34;
  int v35;
  __int16 v36;
  char *__s;
  unsigned int v38;

  v33 = 0;
  v12 = 0;
  __s = 0;
  v36 = 0;
  v35 = 0;
  v34 = 0;
  v13 = "PRIORITY";
  while (1)
  {
    U32Attribute = LDOObject_GetU32Attribute(a5, v13, &v33, &v35);
    v15 = LH_ERROR_to_VERROR(U32Attribute);
    if ((v15 & 0x80000000) != 0)
      break;
    if ((_DWORD)v33)
    {
      v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, int *, __int16 *))(a2 + 160))(a3, a4, a6, LOBYTE((&u16Attributes)[v12 + 1]), 1, &v35, &v36);
      if ((v15 & 0x80000000) != 0)
        break;
    }
    v13 = (&u16Attributes)[v12 + 2];
    v12 += 2;
    if (v12 == 8)
    {
      v16 = 0;
      v17 = "PHON";
      while (1)
      {
        StringAttribute = LDOObject_GetStringAttribute(a5, v17, &v33, (uint64_t *)&__s);
        v15 = LH_ERROR_to_VERROR(StringAttribute);
        if ((v15 & 0x80000000) != 0)
          break;
        if ((_DWORD)v33)
        {
          v19 = &(&stringAttributes)[v16];
          if (a7 && (!strcmp(v17, "PHON") || !strcmp(v17, "MULTIPHON")) || !strcmp(v17, "SPTCHK"))
          {
            v21 = __s;
            v22 = strlen(__s);
            v23 = (v22 + 1);
            v38 = v22 + 1;
            v24 = heap_Calloc(*(_QWORD **)(a1 + 8), v23, 1);
            if (!v24)
              return 2147491850;
            v25 = (const char *)v24;
            v15 = utf8_Utf8ToDepes((uint64_t)v21, v23, 0, v24, v23, &v38, 0);
            if ((v15 & 0x80000000) != 0)
              return v15;
            v25[v38 - 1] = 0;
            v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 320))(a3, a4, 1);
            if ((v15 & 0x80000000) != 0)
              return v15;
            v26 = strlen(v25);
            v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, const char *, __int16 *))(a2 + 160))(a3, a4, a6, *((unsigned __int8 *)v19 + 8), (unsigned __int16)(v26 + 1), v25, &v36);
            heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v25);
            if ((v27 & 0x80000000) != 0)
              return v27;
          }
          else
          {
            v20 = strlen(__s);
            v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, char *, __int16 *))(a2 + 160))(a3, a4, a6, *((unsigned __int8 *)v19 + 8), (unsigned __int16)(v20 + 1), __s, &v36);
            if ((v15 & 0x80000000) != 0)
              return v15;
          }
        }
        v17 = (&stringAttributes)[v16 + 2];
        v16 += 2;
        if (v16 == 28)
        {
          ListU32Attribute = LDOObject_GetListU32Attribute(a5, "SGT", &v33, &v34, (_DWORD *)&v33 + 1);
          v27 = LH_ERROR_to_VERROR(ListU32Attribute);
          v29 = v34;
          if ((v27 & 0x80000000) == 0
            && (_DWORD)v33
            && (v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, __int16 *))(a2 + 160))(a3, a4, a6, 16, WORD2(v33), v34, &v36), v29 = v34, (v27 & 0x80000000) == 0)&& v34|| v29)
          {
            heap_Free(*(_QWORD **)(a1 + 8), v29);
          }
          return v27;
        }
      }
      return v15;
    }
  }
  return v15;
}

uint64_t luavmldoutil_destroy_lua_vm(uint64_t result, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  if (v3)
  {
    result = OOC_PlacementDeleteObject(result, v3);
    *a2 = 0;
  }
  return result;
}

uint64_t luavmldoutil_initialize_lua_vm(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, char *a7)
{
  return hlp_luavmldoutil_initialize_lua_vm(a1, a2, a3, a4, a5, a6, a7, 0, 1);
}

uint64_t hlp_luavmldoutil_initialize_lua_vm(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, char *a7, unsigned int a8, int a9)
{
  unsigned int IsLuaCodeAvailable;
  int v18;
  uint64_t result;
  uint64_t v20;
  int v21;

  v21 = 0;
  if (*a6)
  {
    OOC_PlacementDeleteObject(a3, *a6);
    *a6 = 0;
  }
  if (a9 == 1)
  {
    IsLuaCodeAvailable = LuaVMLDO_IsLuaCodeAvailable(a1, a2, a7, &v21);
    if (IsLuaCodeAvailable)
      goto LABEL_7;
    if (!v21)
    {
      v18 = 0;
      goto LABEL_10;
    }
  }
  v21 = 0;
  IsLuaCodeAvailable = PNEW_LuaVMLDO_Con(a3, a3, (uint64_t)a1, a2, a5, (uint64_t **)a6);
  if (IsLuaCodeAvailable)
    goto LABEL_7;
  v20 = *a6;
  if (a9 != 1)
  {
    IsLuaCodeAvailable = LuaVMLDO_LoadScriptFromBuffer(v20, (uint64_t)a7, a8);
    if (!IsLuaCodeAvailable)
      goto LABEL_20;
LABEL_7:
    if (IsLuaCodeAvailable == 1)
      v18 = -2147475446;
    else
      v18 = -2147475456;
    goto LABEL_10;
  }
  IsLuaCodeAvailable = LuaVMLDO_LoadScriptFromRIFF(v20, a7);
  if (IsLuaCodeAvailable)
    goto LABEL_7;
LABEL_20:
  result = LuaVMLDO_IsLuaFunctionAvailable(*a6, a4, &v21);
  if ((_DWORD)result == 1)
  {
    v18 = -2147475446;
  }
  else
  {
    if ((_DWORD)result)
      v18 = -2147475456;
    else
      v18 = 0;
    if (!(_DWORD)result && v21)
      return result;
  }
LABEL_10:
  if (*a6)
  {
    OOC_PlacementDeleteObject(a3, *a6);
    *a6 = 0;
  }
  if (v18 < 0)
    return v18;
  else
    return 2147491860;
}

uint64_t luavmldoutil_initialize_lua_vm_from_buffer(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, char *a7, unsigned int a8)
{
  return hlp_luavmldoutil_initialize_lua_vm(a1, a2, a3, a4, a5, a6, a7, a8, 0);
}

uint64_t LDO_ConFromText(_QWORD *a1, uint64_t a2, char *a3, char *a4, char *a5)
{
  uint64_t result;

  result = Object_Con(a1);
  if (!(_DWORD)result)
  {
    *a1 = &__LDO;
    a1[1] = a2;
    result = PNEW_LDOString_ConFromCPtr(a2, a2, a3, a1 + 3);
    if (!(_DWORD)result)
    {
      result = PNEW_LDOTreeNode_ConRoot(a1[1], a1[1], a3, a4, a5, a1 + 2);
      if (!(_DWORD)result)
        return PNEW_LDOLabelSet_Con(a1[1], a1[1], a1 + 4);
    }
  }
  return result;
}

uint64_t LDO_Des(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[3];
  if (!v2 || (result = OOC_PlacementDeleteObject(a1[1], v2), !(_DWORD)result))
  {
    v4 = a1[2];
    if (!v4 || (result = OOC_PlacementDeleteObject(a1[1], v4), !(_DWORD)result))
    {
      v5 = a1[4];
      if (!v5)
        return Object_Des();
      result = OOC_PlacementDeleteObject(a1[1], v5);
      if (!(_DWORD)result)
        return Object_Des();
    }
  }
  return result;
}

uint64_t LDO_AddLabel(uint64_t a1, char *a2, char *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v15 = 0;
  if (((*(_QWORD *)(a4 + 16) - *(_QWORD *)(a4 + 8)) & 0x7FFFFFFF8) == 0)
    return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"pvecNodes has no elements");
  if (LDOTreeNode_HaveSameParent(a4) == 1)
  {
    PNEW_LDOLabel_Con(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 8), a2, a3, a4, &v15);
    v11 = v15;
    if ((_DWORD)v10)
    {
      v12 = v10;
    }
    else
    {
      v14 = LDOLabelSet_AddLabel(*(_QWORD *)(a1 + 32), v15);
      v12 = v14;
      v11 = v15;
      if (a5 && !(_DWORD)v14)
      {
        *a5 = v15;
        return v12;
      }
    }
    if ((_DWORD)v12)
    {
      if (v11)
        OOC_PlacementDeleteObject(*(_QWORD *)(a1 + 8), v11);
    }
    return v12;
  }
  return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"pvecNodes has elements with different parent nodes");
}

uint64_t LDO_AddLabelOnSubstring(uint64_t a1, char *a2, char *a3, unsigned int *a4, unsigned int *a5, _QWORD *a6)
{
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v15 = 0;
  v16 = 0;
  v17 = 0;
  v14 = 0;
  v12 = LDO_ValidateIndices(a1, a4, a5, (unsigned int *)&v14 + 1, (unsigned int *)&v14, 0);
  if (!(_DWORD)v12)
  {
    if (HIDWORD(v14) == (_DWORD)v14)
    {
      return LDO_AddSpecialLabel(a1, a2, a3, (unsigned int *)&v14 + 1, (unsigned int *)&v14, a6);
    }
    else
    {
      v12 = LDO_ComputeLeafNodesByRange(a1, a4, a5, (unsigned int *)&v15);
      if (!(_DWORD)v12)
      {
        v12 = LDO_AddLabel(a1, a2, a3, (uint64_t)&v15, a6);
        LODWORD(v15) = 0;
        if (v16)
          OOCAllocator_Free(*(_QWORD *)(a1 + 8), v16);
      }
    }
  }
  return v12;
}

uint64_t LDO_ValidateIndices(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t result;
  unsigned int v18;

  v18 = 0;
  LDOTreeNode_ComputeAbsoluteTo(*(_QWORD *)(a1 + 16), &v18);
  if (a2)
  {
    v11 = *a2;
    if (a3)
      v12 = a3;
    else
      v12 = &v18;
    v13 = *v12;
    if (v11 > v13)
    {
      v14 = "u32From is greater than u32To";
      return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)v14);
    }
    v16 = v18;
    if (v11 > v18)
    {
      v14 = "u32From is greater than u32Length";
      return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)v14);
    }
  }
  else
  {
    v11 = 0;
    if (a3)
      v15 = a3;
    else
      v15 = &v18;
    v13 = *v15;
    v16 = v18;
  }
  if (v13 > v16)
  {
    v14 = "u32To is greater than u32Length";
    return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)v14);
  }
  if (a4)
    *a4 = v11;
  if (a5)
    *a5 = v13;
  result = 0;
  if (a6)
    *a6 = v16;
  return result;
}

uint64_t LDO_AddSpecialLabel(uint64_t a1, char *a2, char *a3, unsigned int *a4, unsigned int *a5, _QWORD *a6)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v16 = 0;
  v17 = 0;
  v10 = LDO_ValidateIndices(a1, a4, a5, (unsigned int *)&v16 + 1, (unsigned int *)&v16, 0);
  if (!(_DWORD)v10)
  {
    PNEW_LDOLabel_ConSpecial(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 8), a2, a3, SHIDWORD(v16), v16, &v17);
    v13 = v17;
    if ((_DWORD)v12)
    {
      v10 = v12;
    }
    else
    {
      v15 = LDOLabelSet_AddLabel(*(_QWORD *)(a1 + 32), v17);
      v10 = v15;
      v13 = v17;
      if (a6 && !(_DWORD)v15)
      {
        *a6 = v17;
        return v10;
      }
    }
    if ((_DWORD)v10)
      v14 = v13 == 0;
    else
      v14 = 1;
    if (!v14)
      OOC_PlacementDeleteObject(*(_QWORD *)(a1 + 8), v13);
  }
  return v10;
}

uint64_t LDO_ComputeLeafNodesByRange(uint64_t a1, _DWORD *a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int *v8;
  unsigned int v9;
  char *v10;
  uint64_t *i;
  size_t v13;
  uint64_t v14;
  size_t *v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;

  v27 = 0;
  v25 = 0;
  v26 = 0;
  v23 = 0;
  v24 = 0;
  LDOTreeNode_ComputeAbsoluteTo(*(_QWORD *)(a1 + 16), &v26);
  if (a2)
    LODWORD(a2) = *a2;
  if (a3)
    v8 = a3;
  else
    v8 = (unsigned int *)&v26;
  v9 = *v8;
  *a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  *((_QWORD *)a4 + 2) = 0;
  v28 = LDOTreeNode_ComputeSubtreeNodes(*(_QWORD *)(a1 + 16), (uint64_t)&v23);
  if (!v28)
  {
    if (a2 > v9)
    {
      v10 = "u32From is greater than u32To";
LABEL_13:
      v28 = kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)v10);
      goto LABEL_14;
    }
    if (a2 > v26)
    {
      v10 = "u32From is greater than u32Length";
      goto LABEL_13;
    }
    if (v9 > v26)
    {
      v10 = "u32To is greater than u32Length";
      goto LABEL_13;
    }
    for (i = v24; (unint64_t)i < v25; ++i)
    {
      v13 = *i;
      if (LDOTreeNode_IsLeaf(*i))
      {
        LDOTreeNode_ComputeAbsoluteFrom(v13, &v27);
        if (a2 <= v27)
        {
          LDOTreeNode_ComputeAbsoluteTo(v13, (_DWORD *)&v26 + 1);
          if (v9 >= HIDWORD(v26))
          {
            v14 = *((_QWORD *)a4 + 1);
            v15 = (size_t *)*((_QWORD *)a4 + 2);
            v16 = (unint64_t)v15 - v14;
            v17 = (((unint64_t)v15 - v14) >> 3) + 1;
            v18 = *a4;
            if (v17 > *a4)
            {
              v19 = 2 * v18;
              v20 = v18 + 1000000;
              if (v19 >= v20)
                v19 = v20;
              if (v19 <= v17)
                v19 = v17;
              if (v19 <= 8)
                v21 = 8;
              else
                v21 = v19;
              v22 = OOCAllocator_Realloc(*(_QWORD *)(a1 + 8), v14, 8 * v21, &v28);
              *((_QWORD *)a4 + 1) = v22;
              if (v28)
                break;
              *a4 = v21;
              v15 = (size_t *)(v22 + (v16 & 0x7FFFFFFF8));
              *((_QWORD *)a4 + 2) = v15;
            }
            *v15 = v13;
            *((_QWORD *)a4 + 2) += 8;
          }
        }
      }
    }
  }
LABEL_14:
  LODWORD(v23) = 0;
  if (v24)
    OOCAllocator_Free(*(_QWORD *)(a1 + 8), (uint64_t)v24);
  return v28;
}

uint64_t LDO_AppendNewNode(uint64_t a1, size_t a2, char *a3, char *a4, int a5, unsigned int a6, _QWORD *a7)
{
  uint64_t result;
  uint64_t v9;

  v9 = 0;
  result = PNEW_LDOTreeNode_Con(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6, &v9);
  if (a7)
  {
    if (!(_DWORD)result)
      *a7 = v9;
  }
  return result;
}

uint64_t LDO_ComputeLeafNodeContainingRange(uint64_t a1, _DWORD *a2, _DWORD *a3, size_t *a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;

  v4 = 0;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  v18 = 0;
  *a4 = 0;
  if (*a2 == *a3)
    return v4;
  v4 = LDO_ComputeLeafNodesByRange(a1, 0, 0, (unsigned int *)&v16);
  v9 = (uint64_t)v17;
  if ((_DWORD)v4)
  {
LABEL_13:
    if (!v9)
      return v4;
    goto LABEL_14;
  }
  v10 = v18;
  if ((unint64_t)v17 >= v18)
  {
LABEL_10:
    v4 = 0;
    if (!v9)
      return v4;
    goto LABEL_14;
  }
  v11 = v17;
  while (1)
  {
    v12 = *v11;
    v13 = LDOTreeNode_ComputeAbsoluteFrom(*v11, (_DWORD *)&v15 + 1);
    if ((_DWORD)v13 || (v13 = LDOTreeNode_ComputeAbsoluteTo(v12, &v15), (_DWORD)v13))
    {
      v4 = v13;
      goto LABEL_13;
    }
    if (HIDWORD(v15) <= *a2 && v15 >= *a3)
      break;
    if ((unint64_t)++v11 >= v10)
      goto LABEL_10;
  }
  v4 = 0;
  *a4 = v12;
  if (v9)
LABEL_14:
    OOCAllocator_Free(*(_QWORD *)(a1 + 8), v9);
  return v4;
}

uint64_t LDO_FreeLDOTreeNodeVector(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a2 = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    OOCAllocator_Free(*(_QWORD *)(a1 + 8), v3);
    *(_QWORD *)(a2 + 8) = 0;
  }
  *(_QWORD *)(a2 + 16) = 0;
  return 0;
}

uint64_t LDO_ComputeNodesCoveredByLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  const void *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  unsigned int v13;

  v13 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v5 = (_QWORD *)(a3 + 8);
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v7 = a2 + 72;
  v6 = *(const void **)(a2 + 72);
  v8 = *(_QWORD *)(v7 + 8) - (_QWORD)v6;
  if (!(v8 >> 3))
  {
    v10 = 0;
    goto LABEL_8;
  }
  if ((v8 >> 3) <= 8)
    v9 = 8;
  else
    v9 = v8 >> 3;
  v10 = (void *)OOCAllocator_Realloc(*(_QWORD *)(a1 + 8), 0, 8 * v9, &v13);
  *v5 = v10;
  v11 = v13;
  if (!v13)
  {
    *(_DWORD *)a3 = v9;
    *(_QWORD *)(a3 + 16) = v10;
    v6 = *(const void **)(a2 + 72);
    v8 = *(_QWORD *)(a2 + 80) - (_QWORD)v6;
LABEL_8:
    memcpy(v10, v6, v8 & 0x7FFFFFFF8);
    *(_QWORD *)(a3 + 16) += (*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) & 0x7FFFFFFF8;
    return v13;
  }
  return v11;
}

uint64_t LDO_ComputeOverlappingLabels(uint64_t a1, unsigned int *a2, unsigned int *a3, int a4, unsigned int *a5)
{
  uint64_t result;
  uint64_t v9;

  v9 = 0;
  result = LDO_ValidateIndices(a1, a2, a3, (unsigned int *)&v9 + 1, (unsigned int *)&v9, 0);
  if (!(_DWORD)result)
    return LDOLabelSet_ComputeOverlappingLabels(*(uint64_t **)(a1 + 32), HIDWORD(v9), v9, a4, a5);
  return result;
}

uint64_t LDO_ComputeText(uint64_t a1, _QWORD *a2)
{
  return LDOTreeNode_ComputeText(*(_QWORD *)(a1 + 16), a2);
}

uint64_t LDO_CountLeafNodesOnRange(uint64_t a1, _DWORD *a2, unsigned int *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  v8 = LDO_ComputeLeafNodesByRange(a1, a2, a3, (unsigned int *)&v12);
  if ((_DWORD)v8)
  {
    v9 = v13;
    goto LABEL_3;
  }
  v9 = v13;
  v10 = (unint64_t)(v14 - (_QWORD)v13) >> 3;
  *a4 = v10;
  if (!a5 || !(_DWORD)v10)
  {
LABEL_3:
    if (!v9)
      return v8;
    goto LABEL_8;
  }
  LDOTreeNode_ComputeAbsoluteFrom(*v9, a5);
LABEL_8:
  OOCAllocator_Free(*(_QWORD *)(a1 + 8), (uint64_t)v9);
  return v8;
}

uint64_t LDO_FreeLDOLabelVector(uint64_t a1, uint64_t a2)
{
  return LDO_FreeLDOTreeNodeVector(*(_QWORD *)(a1 + 32), a2);
}

__n128 LDO_GetLabels@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 *v2;
  __n128 result;

  v2 = *(__n128 **)(a1 + 32);
  result = v2[1];
  *a2 = result;
  a2[1].n128_u64[0] = v2[2].n128_u64[0];
  return result;
}

uint64_t LDO_GetNumberLabels(uint64_t a1)
{
  return LDOLabelSet_GetNumberLabels(*(_QWORD *)(a1 + 32));
}

uint64_t LDO_SetText(uint64_t a1, size_t a2, char *__s)
{
  uint64_t result;
  uint64_t v7;

  v7 = 0;
  result = LDOTreeNode_ComputeUpdateInfo(a2, __s, (_DWORD *)&v7 + 1, &v7);
  if (!(_DWORD)result)
  {
    result = LDOTreeNode_SetText(a2, __s);
    if (!(_DWORD)result)
      return LDOLabelSet_UpdateSpan(*(_QWORD *)(a1 + 32), HIDWORD(v7), v7);
  }
  return result;
}

uint64_t LDO_MergeLabels(uint64_t a1, uint64_t a2, char *a3, char *a4, _QWORD *a5)
{
  return LDOLabelSet_MergeLabels(*(_QWORD *)(a1 + 32), a2, a3, a4, a5);
}

uint64_t LDO_RemoveLabel(uint64_t a1, uint64_t a2)
{
  return LDOLabelSet_RemoveLabel(*(_QWORD *)(a1 + 32), a2);
}

uint64_t LDO_ReplaceNodes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t updated;
  int v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  uint64_t *v15;
  int v16;
  _DWORD *v17;
  int v18;
  int v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = 0;
  v27 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  if (((*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) & 0x7FFFFFFF8) == 0)
  {
    v21 = "pvecOldNodes is empty";
    goto LABEL_25;
  }
  if (LDOTreeNode_HaveSameParent(a2) != 1)
  {
    v21 = "pvecOldNodes has elements with different parent nodes";
LABEL_25:
    v20 = kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)v21);
LABEL_26:
    updated = v20;
    goto LABEL_27;
  }
  v6 = **(_QWORD **)(a2 + 8);
  v7 = *(_QWORD *)(v6 + 64);
  if (!v7)
    v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_DWORD *)(v6 + 104);
  updated = LDOTreeNode_ComputeFromToIndices(a2, 1, (unsigned int *)&v27 + 1, (unsigned int *)&v27);
  if (!(_DWORD)updated)
  {
    updated = LDOTreeNode_ComputeVectorTextLength(a2, (_DWORD *)&v26 + 1);
    if (!(_DWORD)updated)
    {
      updated = LDOTreeNode_ComputeVectorTextLength(a3, &v26);
      if (!(_DWORD)updated)
      {
        v10 = v26;
        v11 = HIDWORD(v26);
        v13 = v27;
        v12 = HIDWORD(v27);
        updated = LDOLabelSet_ComputeContainedLabels(*(uint64_t **)(a1 + 32), HIDWORD(v27), v27, 0, (unsigned int *)&v23);
        if (!(_DWORD)updated)
        {
          updated = __LDO_UpdateOrthography(a2, a3, v7, v8);
          if (!(_DWORD)updated)
          {
            updated = LDOLabelSet_UpdateRegularLabels(*(_QWORD *)(a1 + 32), a2, a3);
            if (!(_DWORD)updated)
            {
              updated = LDOLabelSet_UpdateSpan(*(_QWORD *)(a1 + 32), HIDWORD(v27), v10 - v11);
              if (!(_DWORD)updated)
              {
                v15 = (uint64_t *)v24;
                v14 = v25;
                if (v24 < v25)
                {
                  v16 = v13 + v10 - v11;
                  do
                  {
                    v17 = (_DWORD *)*v15;
                    if (*(_DWORD *)(*v15 + 112) == 1)
                    {
                      v18 = v17[22];
                      v19 = v17[23];
                      v17[22] = v12;
                      if (v18 == v19)
                        v17[23] = v12;
                      else
                        v17[23] = v16;
                    }
                    else
                    {
                      v20 = LDOLabel_RemoveNodes(*v15, a2);
                      if ((_DWORD)v20)
                        goto LABEL_26;
                      v20 = LDOLabel_AddNodes((uint64_t)v17, a3);
                      if ((_DWORD)v20)
                        goto LABEL_26;
                      v14 = v25;
                    }
                    v17[26] = 1;
                    ++v15;
                  }
                  while ((unint64_t)v15 < v14);
                }
                __LDO_DestroyLDOTreeNodeVector(a2);
                updated = 0;
              }
            }
          }
        }
      }
    }
  }
LABEL_27:
  LODWORD(v23) = 0;
  if (v24)
    OOCAllocator_Free(*(_QWORD *)(a1 + 8), v24);
  return updated;
}

uint64_t __LDO_UpdateOrthography(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t *v7;
  _DWORD *v9;
  uint64_t v10;
  size_t *i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v22 = 0;
  v7 = *(uint64_t **)(a1 + 8);
  if ((unint64_t)v7 >= *(_QWORD *)(a1 + 16))
  {
LABEL_5:
    for (i = *(size_t **)(a2 + 8); ; ++i)
    {
      if ((unint64_t)i >= *(_QWORD *)(a2 + 16))
        return 0;
      v12 = *i;
      v13 = LDOTreeNode_ComputeText(*i, &v22);
      v14 = v22;
      if ((_DWORD)v13)
        break;
      v15 = LHString_Length(v22);
      v16 = *(_QWORD *)(v12 + 96);
      if (v16)
      {
        v17 = LHString_Erase(v16);
        if ((_DWORD)v17)
        {
          v13 = v17;
          v14 = v22;
          break;
        }
      }
      *(_DWORD *)(v12 + 104) = a4;
      *(_DWORD *)(v12 + 108) = a4;
      v13 = LDOTreeNode_AddChild(a3, v12);
      v14 = v22;
      if ((_DWORD)v13)
        break;
      v18 = (char *)fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(v22);
      v13 = LDOTreeNode_SetText(v12, v18);
      v14 = v22;
      if ((_DWORD)v13)
        break;
      if (v22)
      {
        v19 = LDOString_BorrowAllocator(v22);
        OOC_PlacementDeleteObject(v19, v22);
        v22 = 0;
      }
      a4 += v15;
    }
    if (v14)
    {
      v20 = LDOString_BorrowAllocator(v14);
      OOC_PlacementDeleteObject(v20, v22);
    }
  }
  else
  {
    while (1)
    {
      v9 = (_DWORD *)*v7;
      v10 = LDOTreeNode_SetText(*v7, &byte_1DEBD87CE);
      if ((_DWORD)v10)
        return v10;
      v10 = LDOTreeNode_RemoveChild(a3, v9);
      if ((_DWORD)v10)
        return v10;
      if ((unint64_t)++v7 >= *(_QWORD *)(a1 + 16))
        goto LABEL_5;
    }
  }
  return v13;
}

uint64_t __LDO_DestroyLDOTreeNodeVector(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(uint64_t **)(result + 8);
  if ((unint64_t)v1 < *(_QWORD *)(result + 16))
  {
    v2 = result;
    do
    {
      v3 = *v1++;
      v4 = fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(v3);
      result = OOC_PlacementDeleteObject(v4, v3);
    }
    while ((unint64_t)v1 < *(_QWORD *)(v2 + 16));
  }
  return result;
}

uint64_t LDO_ToString(uint64_t a1, uint64_t *a2)
{
  uint64_t appended;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char *v17;

  v17 = 0;
  appended = PNEW_LDOString_Con(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 8), a2);
  if ((_DWORD)appended)
    return appended;
  v5 = *a2;
  appended = LHString_Append(v5, "LDO\n");
  if (!(_DWORD)appended)
  {
    appended = LDOString_AppendPrefixStringSuffix(v5, "  Initial text: ", *(char **)(a1 + 24), "\n");
    if (!(_DWORD)appended)
    {
      v6 = LDOTreeNode_ComputeText(*(_QWORD *)(a1 + 16), &v17);
      v7 = v17;
      if ((_DWORD)v6)
        goto LABEL_6;
      v6 = LDOString_AppendPrefixStringSuffix(v5, "  Current text: ", v17, "\n");
      v7 = v17;
      if ((_DWORD)v6)
        goto LABEL_6;
      if (v17)
      {
        v12 = LDOString_BorrowAllocator((uint64_t)v17);
        OOC_PlacementDeleteObject(v12, (uint64_t)v17);
        v17 = 0;
      }
      v13 = *(_QWORD *)(a1 + 16);
      if (v13)
      {
        appended = (*(uint64_t (**)(uint64_t, char **, char *))(*(_QWORD *)v13 + 24))(v13, &v17, v7);
        v7 = v17;
        if ((_DWORD)appended)
          goto LABEL_7;
      }
      else
      {
        v7 = 0;
      }
      v6 = LDOString_AppendPrefixStringSuffix(v5, "LDO Tree:\n", v7, "\n");
      v7 = v17;
      if ((_DWORD)v6)
      {
LABEL_6:
        appended = v6;
        goto LABEL_7;
      }
      if (v17)
      {
        v14 = LDOString_BorrowAllocator((uint64_t)v17);
        OOC_PlacementDeleteObject(v14, (uint64_t)v17);
        v17 = 0;
      }
      v15 = *(uint64_t **)(a1 + 32);
      if (!v15)
      {
        v7 = 0;
LABEL_28:
        appended = LDOString_AppendPrefixStringSuffix(v5, "LDO Labels:\n", v7, "\n");
        v7 = v17;
        if (!(_DWORD)appended && v17)
        {
          v16 = LDOString_BorrowAllocator((uint64_t)v17);
          OOC_PlacementDeleteObject(v16, (uint64_t)v17);
          return 0;
        }
        goto LABEL_7;
      }
      appended = LDOLabelSet_ToString(v15, (uint64_t *)&v17);
      v7 = v17;
      if (!(_DWORD)appended)
        goto LABEL_28;
LABEL_7:
      if (v7)
      {
        v8 = LDOString_BorrowAllocator((uint64_t)v7);
        OOC_PlacementDeleteObject(v8, (uint64_t)v17);
        v17 = 0;
      }
    }
  }
  if ((_DWORD)appended)
    v9 = v5 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    v10 = LDOString_BorrowAllocator(v5);
    OOC_PlacementDeleteObject(v10, v5);
  }
  return appended;
}

uint64_t PNEW_LDO_ConFromText(uint64_t a1, uint64_t a2, char *a3, char *a4, char *a5, _QWORD *a6)
{
  _QWORD *v12;
  uint64_t result;
  unsigned int v14;

  v14 = 0;
  v12 = (_QWORD *)OOCAllocator_Malloc(a1, 40, &v14);
  result = v14;
  if (!v14)
  {
    result = LDO_ConFromText(v12, a2, a3, a4, a5);
    v14 = result;
    if ((_DWORD)result)
    {
      OOCAllocator_Free(a1, (uint64_t)v12);
      *a6 = 0;
      return v14;
    }
    else
    {
      *a6 = v12;
    }
  }
  return result;
}

double LDOLabel_Con(uint64_t a1, uint64_t a2, char *a3, char *a4, uint64_t a5)
{
  double result;

  if (!LDOObject_Con(a1, a2))
  {
    *(_QWORD *)a1 = &__LDOLabel;
    *(_DWORD *)(a1 + 112) = 0;
    if (!LDOObject_SetCategory(a1, a3) && !LDOObject_SetType(a1, a4))
    {
      *(_DWORD *)(a1 + 64) = 0;
      *(_QWORD *)(a1 + 72) = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (!LDOLabel_AddNodes(a1, a5)
        && !LDOTreeNode_ComputeFromToIndices(a5, 1, (unsigned int *)(a1 + 96), (unsigned int *)(a1 + 100)))
      {
        *(_QWORD *)&result = 1;
        *(_QWORD *)(a1 + 104) = 1;
      }
    }
  }
  return result;
}

uint64_t LDOLabel_AddNodes(uint64_t a1, uint64_t a2)
{
  size_t *v2;
  uint64_t result;

  v2 = *(size_t **)(a2 + 8);
  if ((unint64_t)v2 >= *(_QWORD *)(a2 + 16))
    return 0;
  while (1)
  {
    result = LDOLabel_AddNode(a1, *v2);
    if ((_DWORD)result)
      break;
    if ((unint64_t)++v2 >= *(_QWORD *)(a2 + 16))
      return 0;
  }
  return result;
}

double LDOLabel_ConSpecial(uint64_t a1, uint64_t a2, char *a3, char *a4, int a5, int a6)
{
  double result;

  if (!LDOObject_Con(a1, a2))
  {
    *(_QWORD *)a1 = &__LDOLabel;
    *(_DWORD *)(a1 + 112) = 1;
    if (!LDOObject_SetCategory(a1, a3) && !LDOObject_SetType(a1, a4))
    {
      *(_DWORD *)(a1 + 64) = 0;
      *(_QWORD *)(a1 + 72) = 0;
      *(_QWORD *)(a1 + 80) = 0;
      *(_DWORD *)(a1 + 88) = a5;
      *(_DWORD *)(a1 + 92) = a6;
      *(_DWORD *)(a1 + 96) = a5;
      *(_DWORD *)(a1 + 100) = a6;
      *(_QWORD *)&result = 1;
      *(_QWORD *)(a1 + 104) = 1;
    }
  }
  return result;
}

uint64_t LDOLabel_Des(uint64_t a1)
{
  uint64_t v2;

  *(_DWORD *)(a1 + 64) = 0;
  if (*(_QWORD *)(a1 + 72))
  {
    v2 = fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(a1);
    OOCAllocator_Free(v2, *(_QWORD *)(a1 + 72));
    *(_QWORD *)(a1 + 72) = 0;
  }
  *(_QWORD *)(a1 + 80) = 0;
  return LDOObject_Des(a1);
}

uint64_t LDOLabel_AddNode(uint64_t a1, size_t a2)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  unsigned int v23;

  v23 = 0;
  if (*(_DWORD *)(a1 + 112) == 1)
    return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"The current Label is 'special' (not represen"
                                                                            "ted as a nodes vector), you can not add a node to it.");
  v5 = *(_QWORD *)(a1 + 80);
  v6 = 0;
  v7 = v5 - *(_QWORD *)(a1 + 72);
  if (v7)
  {
    v8 = v7 >> 3;
    while (1)
    {
      v9 = v8 >> 1;
      v10 = LDOTreeNode_CompareToWithID(a2, *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v6 + 8 * (v8 >> 1)));
      if (v10 < 1)
      {
        v8 >>= 1;
        if ((v10 & 0x80000000) == 0)
        {
          v19 = 0;
          goto LABEL_30;
        }
      }
      else
      {
        v6 += v9 + 1;
        v8 -= v9 + 1;
      }
      if (!v8)
      {
        v5 = *(_QWORD *)(a1 + 72);
        v11 = *(_QWORD *)(a1 + 80);
        goto LABEL_11;
      }
    }
  }
  v11 = v5;
LABEL_11:
  v12 = v11 - v5;
  v13 = (unint64_t)(v11 - v5) >> 3;
  if (*(_DWORD *)(a1 + 64) != (_DWORD)v13 || (_DWORD)v13 == -1)
    goto LABEL_25;
  v15 = 2 * v13;
  if (2 * (int)v13 >= (v13 + 1000000))
    v15 = v13 + 1000000;
  if (v15 <= (int)v13 + 1)
    v16 = v13 + 1;
  else
    v16 = v15;
  if (v16 <= 8)
    v17 = 8;
  else
    v17 = v16;
  v18 = fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(a1);
  v5 = OOCAllocator_Realloc(v18, *(_QWORD *)(a1 + 72), 8 * v17, &v23);
  *(_QWORD *)(a1 + 72) = v5;
  v19 = v23;
  if (!v23)
  {
    *(_DWORD *)(a1 + 64) = v17;
    v11 = v5 + (v12 & 0x7FFFFFFF8);
LABEL_25:
    *(_QWORD *)(a1 + 80) = v11 + 8;
    v20 = (v12 >> 3);
    v21 = v20 > v6;
    v22 = v20 - v6;
    if (v21)
    {
      memmove((void *)(v5 + 8 * v6 + 8), (const void *)(v5 + 8 * v6), 8 * v22);
      v5 = *(_QWORD *)(a1 + 72);
      v19 = v23;
    }
    else
    {
      v19 = 0;
    }
    *(_QWORD *)(v5 + 8 * v6) = a2;
LABEL_30:
    *(_DWORD *)(a1 + 104) = 1;
  }
  return v19;
}

uint64_t LDOLabel_CompareTo(uint64_t a1, uint64_t a2)
{
  unsigned int AbsoluteFrom;
  unsigned int AbsoluteTo;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;

  AbsoluteFrom = LDOLabel_GetAbsoluteFrom(a1);
  AbsoluteTo = LDOLabel_GetAbsoluteTo(a1);
  v6 = LDOLabel_GetAbsoluteFrom(a2);
  v7 = LDOLabel_GetAbsoluteTo(a2);
  if (AbsoluteTo >= v7)
    v8 = AbsoluteTo > v7;
  else
    v8 = -1;
  if (AbsoluteFrom <= v6)
    v9 = v8;
  else
    v9 = 1;
  if (AbsoluteFrom >= v6)
    return v9;
  else
    return 0xFFFFFFFFLL;
}

uint64_t LDOLabel_GetAbsoluteFrom(uint64_t a1)
{
  uint64_t *v2;
  unsigned int v3;

  v3 = 0;
  if (*(_DWORD *)(a1 + 112) == 1)
    return *(unsigned int *)(a1 + 88);
  v2 = *(uint64_t **)(a1 + 72);
  if (((*(_QWORD *)(a1 + 80) - (_QWORD)v2) & 0x7FFFFFFF8) == 0)
    return 0xFFFFFFFFLL;
  LDOTreeNode_ComputeAbsoluteFrom(*v2, &v3);
  return v3;
}

uint64_t LDOLabel_GetAbsoluteTo(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;

  v3 = 0;
  if (*(_DWORD *)(a1 + 112) == 1)
    return *(unsigned int *)(a1 + 92);
  v2 = *(_QWORD *)(a1 + 80);
  if (((v2 - *(_QWORD *)(a1 + 72)) & 0x7FFFFFFF8) == 0)
    return 0xFFFFFFFFLL;
  LDOTreeNode_ComputeAbsoluteTo(*(_QWORD *)(v2 - 8), &v3);
  return v3;
}

uint64_t LDOLabel_CompareToWithID(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  _BOOL4 v8;

  result = LDOLabel_CompareTo(a1, a2);
  if (!(_DWORD)result)
  {
    v5 = *(_DWORD *)(a1 + 16);
    v6 = *(_DWORD *)(a2 + 16);
    v7 = v5 >= v6;
    v8 = v5 > v6;
    if (v7)
      return v8;
    else
      return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t LDOLabel_ComputeText(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t *i;
  uint64_t appended;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v11 = 0;
  v4 = fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(a1);
  v5 = PNEW_LDOString_Con(v4, v4, a2);
  if (!(_DWORD)v5)
  {
    for (i = *(size_t **)(a1 + 72); ; ++i)
    {
      if ((unint64_t)i >= *(_QWORD *)(a1 + 80))
        return 0;
      appended = LDOTreeNode_ComputeText(*i, &v11);
      v8 = v11;
      if ((_DWORD)appended)
        break;
      appended = LDOString_AppendString(*a2, v11);
      v8 = v11;
      if ((_DWORD)appended)
        break;
      v9 = OOC_PlacementDeleteObject(v4, v11);
      if ((_DWORD)v9)
      {
        v5 = v9;
        v8 = v11;
        if (!v11)
          return v5;
LABEL_10:
        OOC_PlacementDeleteObject(v4, v8);
        return v5;
      }
      v11 = 0;
    }
    v5 = appended;
    if (!v8)
      return v5;
    goto LABEL_10;
  }
  return v5;
}

uint64_t LDOLabel_ContainsAllNodes(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unint64_t v3;
  uint64_t *v4;
  uint64_t result;

  *a3 = 0;
  v4 = *(uint64_t **)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  if (((v3 - (_QWORD)v4) & 0x7FFFFFFF8) == 0)
    return 0;
  if ((unint64_t)v4 >= v3)
  {
LABEL_6:
    result = 0;
    *a3 = 1;
  }
  else
  {
    while (1)
    {
      result = LDOLabel_ContainsNode(a1, *v4, a3);
      if ((_DWORD)result)
        break;
      if (!*a3)
        return 0;
      if ((unint64_t)++v4 >= *(_QWORD *)(a2 + 16))
        goto LABEL_6;
    }
  }
  return result;
}

uint64_t LDOLabel_ContainsNode(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t *v6;

  if (*(_DWORD *)(a1 + 112) == 1)
    return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"The current Label is 'special' (not represen"
                                                                            "ted as a nodes vector), you can not check th"
                                                                            "at it contains a node.");
  *a3 = 0;
  v6 = *(uint64_t **)(a1 + 72);
  if ((unint64_t)v6 < *(_QWORD *)(a1 + 80))
  {
    while (!LDOObject_IsEqual(a2, *v6))
    {
      if ((unint64_t)++v6 >= *(_QWORD *)(a1 + 80))
        return 0;
    }
    *a3 = 1;
  }
  return 0;
}

uint64_t LDOLabel_ContainsAtLeastOneNode(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t *v5;

  result = 0;
  *a3 = 0;
  v5 = *(uint64_t **)(a2 + 8);
  if ((unint64_t)v5 < *(_QWORD *)(a2 + 16))
  {
    while (1)
    {
      result = LDOLabel_ContainsNode(a1, *v5, a3);
      if ((_DWORD)result)
        break;
      if (*a3 != 1 && (unint64_t)++v5 < *(_QWORD *)(a2 + 16))
        continue;
      return 0;
    }
  }
  return result;
}

uint64_t LDOLabel_Invalidate(uint64_t a1)
{
  *(_DWORD *)(a1 + 104) = 0;
  return 0;
}

uint64_t LDOLabel_RemoveNode(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t *v5;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;

  v17 = 0;
  if (*(_DWORD *)(a1 + 112) == 1)
    return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"The current Label is 'special' (not represen"
                                                                            "ted as a nodes vector), you can not remove a node from it.");
  v5 = *(uint64_t **)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  if ((unint64_t)v5 >= v4)
  {
LABEL_8:
    if (((v4 - (_QWORD)v5) & 0x7FFFFFFF8) == 0)
    {
      result = 0;
      *(_DWORD *)(a1 + 104) = 0;
      return result;
    }
    return 0;
  }
  v7 = 1;
  while (!LDOObject_IsEqual(a2, *v5))
  {
    ++v5;
    v4 = *(_QWORD *)(a1 + 80);
    ++v7;
    if ((unint64_t)v5 >= v4)
    {
      v5 = *(uint64_t **)(a1 + 72);
      goto LABEL_8;
    }
  }
  v8 = *(_QWORD *)(a1 + 72);
  v9 = (unint64_t)(*(_QWORD *)(a1 + 80) - v8) >> 3;
  memmove((void *)(v8 + 8 * (v7 - 1)), (const void *)(v8 + 8 * (v7 - 1) + 8), 8 * (v9 - v7));
  v10 = *(_QWORD *)(a1 + 80) - 8;
  *(_QWORD *)(a1 + 80) = v10;
  v11 = v9 - 1;
  if (*(_DWORD *)(a1 + 64) < (3 * (v9 - 1)))
    return 0;
  v12 = *(_QWORD *)(a1 + 72);
  v13 = 2 * v11;
  if (v13 <= 8)
    v14 = 8;
  else
    v14 = v13;
  v15 = fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(a1);
  v16 = OOCAllocator_Realloc(v15, *(_QWORD *)(a1 + 72), 8 * v14, &v17);
  *(_QWORD *)(a1 + 72) = v16;
  result = v17;
  if (!v17)
  {
    *(_DWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 80) = v16 + ((v10 - v12) & 0x7FFFFFFF8);
  }
  return result;
}

uint64_t LDOLabel_RemoveNodes(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t result;

  v2 = *(uint64_t **)(a2 + 8);
  if ((unint64_t)v2 >= *(_QWORD *)(a2 + 16))
    return 0;
  while (1)
  {
    result = LDOLabel_RemoveNode(a1, *v2);
    if ((_DWORD)result)
      break;
    if ((unint64_t)++v2 >= *(_QWORD *)(a2 + 16))
      return 0;
  }
  return result;
}

uint64_t LDOLabel_SetReferenceFrom(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 96) = a2;
  *(_DWORD *)(a1 + 108) = 1;
  return 0;
}

uint64_t LDOLabel_SetReferenceTo(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 100) = a2;
  *(_DWORD *)(a1 + 108) = 1;
  return 0;
}

uint64_t LDOLabel_ToString(unsigned int *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t appended;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  unsigned int AbsoluteFrom;
  unsigned int AbsoluteTo;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v15 = 0;
  v4 = fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties((uint64_t)a1);
  appended = PNEW_LDOString_Con(v4, v4, a2);
  if ((_DWORD)appended)
    return appended;
  v6 = *a2;
  appended = LHString_Append(v6, "  LDOLabel\n");
  if (!(_DWORD)appended)
  {
    appended = LDOObject_ToString((uint64_t)a1, &v15);
    if (!(_DWORD)appended)
    {
      appended = LDOString_AppendString(v6, v15);
      if (!(_DWORD)appended)
      {
        if (v15)
        {
          v7 = LDOString_BorrowAllocator(v15);
          OOC_PlacementDeleteObject(v7, v15);
          v15 = 0;
        }
        v8 = a1[26] == 1 ? "  Is valid: LH_TRUE\n" : "  Is valid: LH_FALSE\n";
        appended = LHString_Append(v6, v8);
        if (!(_DWORD)appended)
        {
          AbsoluteFrom = LDOLabel_GetAbsoluteFrom((uint64_t)a1);
          appended = LDOString_AppendPrefixU32Suffix(v6, "  Absolute from: ", AbsoluteFrom, "\n");
          if (!(_DWORD)appended)
          {
            AbsoluteTo = LDOLabel_GetAbsoluteTo((uint64_t)a1);
            appended = LDOString_AppendPrefixU32Suffix(v6, "  Absolute to: ", AbsoluteTo, "\n");
            if (!(_DWORD)appended)
            {
              if (a1[27] == 1)
              {
                appended = LHString_Append(v6, "  Has reference indices: LH_TRUE\n");
                if ((_DWORD)appended)
                  goto LABEL_19;
                appended = LDOString_AppendPrefixU32Suffix(v6, "  Reference from: ", a1[24], "\n");
                if ((_DWORD)appended)
                  goto LABEL_19;
                v11 = LDOString_AppendPrefixU32Suffix(v6, "  Reference to: ", a1[25], "\n");
              }
              else
              {
                v11 = LHString_Append(v6, "  Has reference indices: LH_FALSE\n");
              }
              appended = v11;
            }
          }
        }
      }
    }
  }
LABEL_19:
  if (v15)
  {
    v12 = LDOString_BorrowAllocator(v15);
    OOC_PlacementDeleteObject(v12, v15);
    v15 = 0;
  }
  if (v6 && (_DWORD)appended)
  {
    v13 = LDOString_BorrowAllocator(v6);
    OOC_PlacementDeleteObject(v13, v6);
  }
  return appended;
}

uint64_t LDOLabel_UpdateSpanLength(_DWORD *a1, unsigned int a2, int a3)
{
  int AbsoluteFrom;
  unsigned int v7;
  unsigned int v8;

  if (a1[28] == 1)
  {
    AbsoluteFrom = LDOLabel_GetAbsoluteFrom((uint64_t)a1);
    v7 = LDOLabel_GetAbsoluteTo((uint64_t)a1) + a3;
    if (LDOLabel_GetAbsoluteFrom((uint64_t)a1) > a2)
    {
      if (((AbsoluteFrom + a3) & 0x80000000) == 0)
      {
        a1[22] = AbsoluteFrom + a3;
LABEL_8:
        a1[23] = v7;
        return 0;
      }
LABEL_9:
      a1[26] = 0;
      return 0;
    }
    v8 = a1[22];
    if (v8 <= a2)
    {
      if ((v7 & 0x80000000) == 0 && v7 >= v8)
        goto LABEL_8;
      goto LABEL_9;
    }
  }
  return 0;
}

void PNEW_LDOLabel_Con(uint64_t a1, uint64_t a2, char *a3, char *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v12;
  int v13;
  int v14;

  v14 = 0;
  v12 = OOCAllocator_Malloc(a1, 120, &v14);
  if (!v14)
  {
    LDOLabel_Con(v12, a2, a3, a4, a5);
    v14 = v13;
    if (v13)
    {
      OOCAllocator_Free(a1, v12);
      *a6 = 0;
    }
    else
    {
      *a6 = v12;
    }
  }
}

void PNEW_LDOLabel_ConSpecial(uint64_t a1, uint64_t a2, char *a3, char *a4, int a5, int a6, uint64_t *a7)
{
  uint64_t v14;
  int v15;
  int v16;

  v16 = 0;
  v14 = OOCAllocator_Malloc(a1, 120, &v16);
  if (!v16)
  {
    LDOLabel_ConSpecial(v14, a2, a3, a4, a5, a6);
    v16 = v15;
    if (v15)
    {
      OOCAllocator_Free(a1, v14);
      *a7 = 0;
    }
    else
    {
      *a7 = v14;
    }
  }
}

uint64_t LDOTreeNode_Con(uint64_t a1, uint64_t a2, size_t a3, char *a4, char *a5, int a6, unsigned int a7)
{
  uint64_t result;
  int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;

  v14 = a7;
  v15 = a6;
  v13 = 0;
  result = LDOObject_Con(a1, a2);
  if (!(_DWORD)result)
  {
    *(_QWORD *)a1 = &__LDOTreeNode;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    result = __LDOTreeNode_ValidateIndices(a3, &v15, &v14, (_DWORD *)&v13 + 1, (unsigned int *)&v13);
    if (!(_DWORD)result)
    {
      v12 = v13;
      *(_DWORD *)(a1 + 104) = HIDWORD(v13);
      *(_DWORD *)(a1 + 108) = v12;
      *(_DWORD *)(a1 + 72) = 0;
      *(_QWORD *)(a1 + 80) = 0;
      *(_QWORD *)(a1 + 88) = 0;
      result = LDOObject_SetCategory(a1, a4);
      if (!(_DWORD)result)
      {
        result = LDOObject_SetType(a1, a5);
        if (!(_DWORD)result)
          return LDOTreeNode_SetParent(a1, a3);
      }
    }
  }
  return result;
}

uint64_t __LDOTreeNode_ValidateIndices(size_t a1, _DWORD *a2, unsigned int *a3, _DWORD *a4, unsigned int *a5)
{
  unsigned int *v10;
  unsigned int v11;
  char *v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  char *v18;
  uint64_t v19;
  unsigned int v20;

  v20 = 0;
  v19 = 0;
  __LDOTreeNode_ComputeTextLength(a1, &v20);
  if (a2)
  {
    LODWORD(a2) = *a2;
    if (a3)
      v10 = a3;
    else
      v10 = &v20;
    v11 = *v10;
    if (a2 > *v10)
    {
      v12 = "u32From is greater than u32To";
LABEL_15:
      v15 = kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)v12);
      goto LABEL_16;
    }
    v14 = v20;
    if (a2 > v20)
    {
      v12 = "u32From is greater than u32ParentLength";
      goto LABEL_15;
    }
  }
  else
  {
    if (a3)
      v13 = a3;
    else
      v13 = &v20;
    v11 = *v13;
    v14 = v20;
  }
  if (v11 > v14)
  {
    v12 = "u32To is greater than u32ParentLength";
    goto LABEL_15;
  }
  v15 = LDOTreeNode_ComputeText(a1, &v19);
  if (!(_DWORD)v15)
  {
    v18 = (char *)fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(v19);
    if (!LDOString_IsValidUTF8(v18, 0))
    {
      v12 = "Not a valid UTF-8 string";
      goto LABEL_15;
    }
    if (a4)
      *a4 = (_DWORD)a2;
    v15 = 0;
    if (a5)
      *a5 = v11;
  }
LABEL_16:
  if (v19)
  {
    v16 = LDOString_BorrowAllocator(v19);
    OOC_PlacementDeleteObject(v16, v19);
  }
  return v15;
}

uint64_t LDOTreeNode_SetParent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 64);
  if (!v4 || (result = LDOTreeNode_RemoveChild(v4, (_DWORD *)a1), !(_DWORD)result))
  {
    if (a2)
    {
      return LDOTreeNode_AddChild(a2, a1);
    }
    else
    {
      result = 0;
      *(_QWORD *)(a1 + 64) = 0;
    }
  }
  return result;
}

uint64_t LDOTreeNode_ConRoot(uint64_t a1, uint64_t a2, char *a3, char *a4, char *a5)
{
  uint64_t result;

  result = LDOObject_Con(a1, a2);
  if (!(_DWORD)result)
  {
    *(_QWORD *)a1 = &__LDOTreeNode;
    *(_QWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    result = LDOObject_SetCategory(a1, a4);
    if (!(_DWORD)result)
    {
      result = LDOObject_SetType(a1, a5);
      if (!(_DWORD)result)
        return LDOTreeNode_SetText(a1, a3);
    }
  }
  return result;
}

uint64_t LDOTreeNode_SetText(uint64_t a1, char *a2)
{
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  int v9;
  int v10;
  size_t v11;
  size_t v12;
  size_t v13;
  unsigned int v14;
  int v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  _OWORD v22[2];
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;

  v26 = 0;
  v25 = 0;
  if (*(_QWORD *)(a1 + 80) != *(_QWORD *)(a1 + 88))
    return kaldi::StandardInputImpl::MyType(0);
  v4 = a1;
  v5 = fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(a1);
  v6 = v5;
  if (*(_QWORD *)(v4 + 64))
  {
    memset(v22, 0, sizeof(v22));
    __LDOTreeNode_ComputeTextLength(v4, &v26);
    v7 = LDOString_ComputeCPtrLength(a2, 0, &v25);
    if (!(_DWORD)v7)
    {
      v24 = 0;
      v8 = *(_QWORD *)(v4 + 64);
      if (v8)
      {
        v9 = 0;
        v10 = v25 - v26;
        v11 = *(_QWORD *)(v4 + 64);
        v12 = v4;
        do
        {
          v9 += *(_DWORD *)(v12 + 104);
          v12 = v11;
          v11 = *(_QWORD *)(v11 + 64);
        }
        while (v11);
        v23 = v9 + v26;
        v24 = v9;
        v13 = v4;
        do
        {
          v4 = v8;
          v14 = *(_DWORD *)(v13 + 104);
          v15 = *(_DWORD *)(v13 + 108);
          v16 = *(uint64_t **)(v4 + 80);
          v17 = *(_QWORD *)(v4 + 88);
          while ((unint64_t)v16 < v17)
          {
            v18 = *v16;
            v19 = *(_DWORD *)(*v16 + 104);
            if (v19 >= v14)
            {
              v20 = *(_DWORD *)(v18 + 108) + v10;
              *(_DWORD *)(v18 + 104) = v19 + v10;
              *(_DWORD *)(v18 + 108) = v20;
            }
            ++v16;
          }
          *(_DWORD *)(v13 + 104) = v14;
          *(_DWORD *)(v13 + 108) = v15 + v10;
          v8 = *(_QWORD *)(v4 + 64);
          v13 = v4;
        }
        while (v8);
      }
      else
      {
        v23 = v26;
      }
      v7 = LDOString_ConFromCPtr(v22, v6, a2);
      if (!(_DWORD)v7)
      {
        v7 = LDOString_ReplaceSubstring(*(_QWORD *)(v4 + 96), &v24, &v23, (uint64_t)v22);
        if (!(_DWORD)v7)
        {
          *(_DWORD *)(v4 + 104) = 0;
          *(_DWORD *)(v4 + 108) = LHString_Length(*(_QWORD *)(v4 + 96));
        }
        (*(void (**)(_OWORD *))(*(_QWORD *)&v22[0] + 16))(v22);
      }
    }
  }
  else
  {
    if (*(_QWORD *)(v4 + 96))
    {
      if (!LDOString_IsValidUTF8(a2, 0))
        return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Not a valid UTF-8 string");
      v21 = LHString_SetContentFromCPtr(*(_QWORD *)(v4 + 96), a2);
    }
    else
    {
      v21 = PNEW_LDOString_ConFromCPtr(v5, v5, a2, (_QWORD *)(v4 + 96));
    }
    v7 = v21;
    if (!(_DWORD)v21)
    {
      *(_DWORD *)(v4 + 104) = 0;
      return LDOString_ComputeCPtrLength(a2, 0, (_DWORD *)(v4 + 108));
    }
  }
  return v7;
}

uint64_t LDOTreeNode_Des(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 96);
  if (!v2
    || (v3 = LDOString_BorrowAllocator(v2), result = OOC_PlacementDeleteObject(v3, *(_QWORD *)(a1 + 96)),
                                            !(_DWORD)result))
  {
    v5 = *(uint64_t **)(a1 + 80);
    if (!v5)
      return LDOObject_Des(a1);
    if ((unint64_t)v5 >= *(_QWORD *)(a1 + 88))
    {
      *(_DWORD *)(a1 + 72) = 0;
    }
    else
    {
      do
      {
        v6 = fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(a1);
        v7 = *v5++;
        OOC_PlacementDeleteObject(v6, v7);
      }
      while ((unint64_t)v5 < *(_QWORD *)(a1 + 88));
      v8 = *(_QWORD *)(a1 + 80);
      *(_DWORD *)(a1 + 72) = 0;
      if (!v8)
        goto LABEL_10;
    }
    v9 = fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(a1);
    OOCAllocator_Free(v9, *(_QWORD *)(a1 + 80));
    *(_QWORD *)(a1 + 80) = 0;
LABEL_10:
    *(_QWORD *)(a1 + 88) = 0;
    return LDOObject_Des(a1);
  }
  return result;
}

uint64_t LDOTreeNode_AddChild(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  unsigned int v21;

  v21 = 0;
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = 0;
  v7 = v5 - v4;
  if (v5 != v4)
  {
    v8 = (uint64_t)v7 >> 3;
    do
    {
      v9 = v8 >> 1;
      v10 = __LDOTreeNode_CompareToWithIDRelativeToParent((_DWORD *)a2, *(_DWORD **)(v4 + 8 * v6 + 8 * (v8 >> 1)));
      if (v10 < 1)
      {
        v8 >>= 1;
        if ((v10 & 0x80000000) == 0)
        {
          result = 0;
          goto LABEL_26;
        }
      }
      else
      {
        v6 += v9 + 1;
        v8 -= v9 + 1;
      }
    }
    while (v8);
  }
  v11 = v7 >> 3;
  if (*(_DWORD *)(a1 + 72) == (v7 >> 3) && (_DWORD)v11 != -1)
  {
    v13 = 2 * v11;
    if (2 * (int)v11 >= (v11 + 1000000))
      v13 = v11 + 1000000;
    if (v13 <= (int)v11 + 1)
      v14 = v11 + 1;
    else
      v14 = v13;
    if (v14 <= 8)
      v15 = 8;
    else
      v15 = v14;
    v16 = fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(a1);
    v4 = OOCAllocator_Realloc(v16, *(_QWORD *)(a1 + 80), 8 * v15, &v21);
    *(_QWORD *)(a1 + 80) = v4;
    result = v21;
    if (v21)
      return result;
    *(_DWORD *)(a1 + 72) = v15;
    v5 = v4 + (v7 & 0x7FFFFFFF8);
  }
  *(_QWORD *)(a1 + 88) = v5 + 8;
  v18 = (v7 >> 3);
  v19 = v18 > v6;
  v20 = v18 - v6;
  if (v19)
  {
    memmove((void *)(v4 + 8 * v6 + 8), (const void *)(v4 + 8 * v6), 8 * v20);
    v4 = *(_QWORD *)(a1 + 80);
    result = v21;
  }
  else
  {
    result = 0;
  }
  *(_QWORD *)(v4 + 8 * v6) = a2;
LABEL_26:
  *(_QWORD *)(a2 + 64) = a1;
  return result;
}

uint64_t __LDOTreeNode_CompareToWithIDRelativeToParent(_DWORD *a1, _DWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  _BOOL4 v10;

  v2 = a1[26];
  v3 = a2[26];
  if (v2 < v3)
    return 0xFFFFFFFFLL;
  if (v2 > v3)
    return 1;
  v4 = a1[27];
  v5 = a2[27];
  if (v4 < v5)
    return 0xFFFFFFFFLL;
  if (v4 > v5)
    return 1;
  v7 = a1[4];
  v8 = a2[4];
  v9 = v7 >= v8;
  v10 = v7 > v8;
  if (v9)
    return v10;
  else
    return 0xFFFFFFFFLL;
}

uint64_t LDOTreeNode_CompareTo(size_t a1, size_t a2)
{
  size_t v3;
  unsigned int v4;
  size_t v5;
  size_t v6;
  unsigned int v7;
  size_t v8;
  uint64_t v10;

  v10 = 0;
  v3 = *(_QWORD *)(a1 + 64);
  if (v3)
  {
    v4 = 0;
    v5 = a1;
    do
    {
      v4 += *(_DWORD *)(v5 + 104);
      v5 = v3;
      v3 = *(_QWORD *)(v3 + 64);
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  v6 = *(_QWORD *)(a2 + 64);
  if (v6)
  {
    v7 = 0;
    v8 = a2;
    do
    {
      v7 += *(_DWORD *)(v8 + 104);
      v8 = v6;
      v6 = *(_QWORD *)(v6 + 64);
    }
    while (v6);
  }
  else
  {
    v7 = 0;
  }
  if (v4 < v7)
    return 0xFFFFFFFFLL;
  if (v4 > v7)
    return 1;
  LDOTreeNode_ComputeAbsoluteTo(a1, (_DWORD *)&v10 + 1);
  LDOTreeNode_ComputeAbsoluteTo(a2, &v10);
  if (HIDWORD(v10) >= v10)
    return HIDWORD(v10) > v10;
  else
    return 0xFFFFFFFFLL;
}

uint64_t LDOTreeNode_ComputeAbsoluteFrom(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  int v3;

  *a2 = 0;
  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
  {
    v3 = 0;
    do
    {
      v3 += *(_DWORD *)(a1 + 104);
      *a2 = v3;
      a1 = v2;
      v2 = *(_QWORD *)(v2 + 64);
    }
    while (v2);
  }
  return 0;
}

uint64_t LDOTreeNode_ComputeAbsoluteTo(size_t a1, _DWORD *a2)
{
  size_t v3;
  size_t v4;
  int v5;
  int v7;

  v3 = a1;
  v7 = 0;
  __LDOTreeNode_ComputeTextLength(a1, &v7);
  v4 = *(_QWORD *)(v3 + 64);
  if (v4)
  {
    v5 = 0;
    do
    {
      v5 += *(_DWORD *)(v3 + 104);
      v3 = v4;
      v4 = *(_QWORD *)(v4 + 64);
    }
    while (v4);
  }
  else
  {
    v5 = 0;
  }
  *a2 = v7 + v5;
  return 0;
}

uint64_t LDOTreeNode_CompareToWithID(size_t a1, size_t a2)
{
  uint64_t result;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  _BOOL4 v8;

  result = LDOTreeNode_CompareTo(a1, a2);
  if (!(_DWORD)result)
  {
    v5 = *(_DWORD *)(a1 + 16);
    v6 = *(_DWORD *)(a2 + 16);
    v7 = v5 >= v6;
    v8 = v5 > v6;
    if (v7)
      return v8;
    else
      return 0xFFFFFFFFLL;
  }
  return result;
}

BOOL LDOTreeNode_IsRoot(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64) == 0;
}

size_t __LDOTreeNode_ComputeTextLength(size_t result, _DWORD *a2)
{
  unsigned int v3;
  unsigned int v4;

  *a2 = 0;
  if (result)
  {
    if (*(_QWORD *)(result + 64))
    {
      v3 = *(_DWORD *)(result + 104);
      v4 = *(_DWORD *)(result + 108);
      result = v4 - v3;
      if (v4 < v3)
        return result;
    }
    else
    {
      result = *(_QWORD *)(result + 96);
      if (!result)
        return result;
      result = LHString_Length(result);
    }
    *a2 = result;
  }
  return result;
}

uint64_t LDOTreeNode_ComputeFromToIndices(uint64_t a1, int a2, unsigned int *a3, unsigned int *a4)
{
  size_t *v4;
  size_t v9;
  size_t v10;
  unsigned int v11;
  size_t v12;
  unsigned int v14;
  size_t *v15;
  unint64_t v16;
  size_t v17;
  size_t v18;
  unsigned int v19;
  size_t v20;
  unsigned int v21;
  uint64_t v22;

  v22 = 0;
  v4 = *(size_t **)(a1 + 8);
  if (((*(_QWORD *)(a1 + 16) - (_QWORD)v4) & 0x7FFFFFFF8) == 0)
    return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"pvecNodes has no elements");
  if (a2 == 1)
  {
    v9 = *v4;
    v10 = *(_QWORD *)(*v4 + 64);
    if (v10)
    {
      v11 = 0;
      v12 = v9;
      do
      {
        v11 += *(_DWORD *)(v12 + 104);
        v12 = v10;
        v10 = *(_QWORD *)(v10 + 64);
      }
      while (v10);
    }
    else
    {
      v11 = 0;
    }
    LDOTreeNode_ComputeAbsoluteTo(v9, (_DWORD *)&v22 + 1);
    v15 = *(size_t **)(a1 + 8);
    v14 = HIDWORD(v22);
  }
  else
  {
    if (LDOTreeNode_HaveSameParent(a1) != 1)
      return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"pvecNodes has elements with different parent nodes");
    v14 = 0;
    v11 = 0;
    v15 = *(size_t **)(a1 + 8);
    LODWORD(v22) = *(_DWORD *)(*v15 + 108);
  }
  v16 = *(_QWORD *)(a1 + 16);
  while ((unint64_t)v15 < v16)
  {
    v17 = *v15;
    if (a2 == 1)
    {
      v18 = *(_QWORD *)(v17 + 64);
      if (v18)
      {
        v19 = 0;
        v20 = *v15;
        do
        {
          v19 += *(_DWORD *)(v20 + 104);
          v20 = v18;
          v18 = *(_QWORD *)(v18 + 64);
        }
        while (v18);
      }
      else
      {
        v19 = 0;
      }
      LDOTreeNode_ComputeAbsoluteTo(v17, &v22);
      v21 = v22;
      v16 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v19 = *(_DWORD *)(v17 + 104);
      v21 = *(_DWORD *)(v17 + 108);
      LODWORD(v22) = v21;
    }
    if (v19 < v11)
      v11 = v19;
    if (v21 > v14)
      v14 = v21;
    ++v15;
  }
  if (a3)
    *a3 = v11;
  if (a4)
    *a4 = v14;
  return 0;
}

uint64_t LDOTreeNode_HaveSameParent(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 16);
  if (((v1 - v2) & 0x7FFFFFFF8) == 0)
    return 1;
  v3 = *(_QWORD *)(*(_QWORD *)v2 + 64);
  if (!v3)
  {
    while (v2 < v1)
    {
      if (*(_QWORD *)(*(_QWORD *)v2 + 64))
        return 0;
      v2 += 8;
    }
    return 1;
  }
  if (v2 >= v1)
    return 1;
  while (1)
  {
    v5 = *(_QWORD *)(*(_QWORD *)v2 + 64);
    if (!v5 || !LDOObject_IsEqual(v3, v5))
      break;
    v2 += 8;
    if (v2 >= *(_QWORD *)(a1 + 16))
      return 1;
  }
  return 0;
}

uint64_t LDOTreeNode_ComputeIndexInParent(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    return __LDOTreeNode_ComputeChildIndex(v4, (_DWORD *)a1, a2);
  else
    return kaldi::StandardInputImpl::MyType(0);
}

uint64_t __LDOTreeNode_ComputeChildIndex(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;

  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88) - v3;
  if (!v4)
    return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"pChild is not a child of the self node");
  v7 = 0;
  v8 = v4 >> 3;
  while (1)
  {
    v9 = v8 >> 1;
    v10 = __LDOTreeNode_CompareToWithIDRelativeToParent(a2, *(_DWORD **)(v3 + 8 * v7 + 8 * (v8 >> 1)));
    if (v10 < 1)
      break;
    v7 += v9 + 1;
    v9 = v8 - (v9 + 1);
LABEL_6:
    v8 = v9;
    if (!v9)
      return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"pChild is not a child of the self node");
  }
  if (v10 < 0)
    goto LABEL_6;
  *a3 = v9 + v7;
  return 0;
}

uint64_t LDOTreeNode_ComputeRoot(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  do
  {
    v2 = result;
    result = *(_QWORD *)(result + 64);
  }
  while (result);
  *a2 = v2;
  return result;
}

uint64_t LDOTreeNode_ComputeSubtreeNodes(uint64_t a1, uint64_t a2)
{
  size_t v3;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  char *v11;
  size_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  size_t *v35;
  uint64_t v36;
  size_t *v37;
  size_t v38;
  int64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  size_t v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  size_t v65;
  size_t *v66;
  char *v67;
  unsigned int v68;

  v3 = a1;
  v68 = 0;
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v4 = (uint64_t *)(a2 + 8);
  *(_QWORD *)(a2 + 16) = 0;
  v5 = fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(a1);
  v6 = (char *)OOCAllocator_Realloc(v5, 0, 64, &v68);
  v7 = v68 == 0;
  if (!v68)
  {
    v11 = v6;
    *(_QWORD *)v6 = v3;
    v12 = (size_t *)(v6 + 8);
    v13 = *(_QWORD *)(a2 + 16);
    v14 = v13 - *(_QWORD *)(a2 + 8);
    v66 = v12;
    v15 = 0;
    if (!v14)
    {
      v22 = *(_QWORD *)(a2 + 16);
      goto LABEL_16;
    }
    v16 = v14 >> 3;
    while (1)
    {
      v17 = v16 >> 1;
      v18 = *(_QWORD *)(*v4 + 8 * v15 + 8 * (v16 >> 1));
      v19 = LDOTreeNode_CompareTo(v3, v18);
      if (v19)
        goto LABEL_10;
      v20 = *(_DWORD *)(v3 + 16);
      v21 = *(_DWORD *)(v18 + 16);
      if (v20 >= v21)
        break;
LABEL_13:
      v16 = v17;
      if (!v17)
      {
        v13 = *(_QWORD *)(a2 + 8);
        v22 = *(_QWORD *)(a2 + 16);
LABEL_16:
        v23 = v22 - v13;
        v24 = (unint64_t)(v22 - v13) >> 3;
        if (*(_DWORD *)a2 == (_DWORD)v24 && (_DWORD)v24 != -1)
        {
          v26 = 2 * v24;
          if (2 * (int)v24 >= (v24 + 1000000))
            v26 = v24 + 1000000;
          if (v26 <= (int)v24 + 1)
            v27 = v24 + 1;
          else
            v27 = v26;
          if (v27 <= 8)
            v28 = 8;
          else
            v28 = v27;
          v29 = fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(v3);
          v13 = OOCAllocator_Realloc(v29, *v4, 8 * v28, &v68);
          *v4 = v13;
          if (v68)
          {
            v6 = v11;
            goto LABEL_2;
          }
          *(_DWORD *)a2 = v28;
          v22 = v13 + (v23 & 0x7FFFFFFF8);
        }
        *(_QWORD *)(a2 + 16) = v22 + 8;
        v30 = (v23 >> 3);
        v31 = v30 > v15;
        v32 = v30 - v15;
        if (v31)
        {
          memmove((void *)(v13 + 8 * v15 + 8), (const void *)(v13 + 8 * v15), 8 * v32);
          v13 = *v4;
        }
        *(_QWORD *)(v13 + 8 * v15) = v3;
LABEL_35:
        v33 = 0;
        v34 = 8 * v7;
        v65 = v3;
        v6 = v11;
        v35 = v66;
        while (1)
        {
          v36 = *(_QWORD *)&v6[8 * v33];
          v37 = *(size_t **)(v36 + 80);
          v63 = v33;
          if ((unint64_t)v37 < *(_QWORD *)(v36 + 88))
            break;
LABEL_79:
          v33 = v63 + 1;
          if (v63 + 1 >= (unint64_t)((unint64_t)((char *)v35 - v6) >> 3))
            goto LABEL_2;
        }
        v64 = *(_QWORD *)&v6[8 * v33];
        while (1)
        {
          v38 = *v37;
          v39 = (char *)v35 - v6;
          v40 = ((unint64_t)((char *)v35 - v6) >> 3) + 1;
          if (v40 <= v34)
          {
            v67 = v6;
          }
          else
          {
            v41 = 2 * v34;
            if (2 * v34 >= v34 + 1000000)
              v41 = v34 + 1000000;
            if (v41 > v40)
              v40 = v41;
            if (v40 <= 8)
              v34 = 8;
            else
              v34 = v40;
            v42 = (uint64_t)v6;
            v43 = fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(v3);
            v6 = (char *)OOCAllocator_Realloc(v43, v42, 8 * v34, &v68);
            if (v68)
              goto LABEL_2;
            v67 = v6;
            v35 = (size_t *)&v6[v39 & 0x7FFFFFFF8];
          }
          *v35++ = v38;
          v44 = *(_QWORD *)(a2 + 16);
          v45 = 0;
          v46 = v44 - *(_QWORD *)(a2 + 8);
          if (v46)
            break;
          v53 = *(_QWORD *)(a2 + 16);
LABEL_60:
          v54 = v53 - v44;
          v55 = (unint64_t)(v53 - v44) >> 3;
          if (*(_DWORD *)a2 == (_DWORD)v55 && (_DWORD)v55 != -1)
          {
            v57 = 2 * v55;
            if (2 * (int)v55 >= (v55 + 1000000))
              v57 = v55 + 1000000;
            if (v57 <= (int)v55 + 1)
              v58 = v55 + 1;
            else
              v58 = v57;
            if (v58 <= 8)
              v59 = 8;
            else
              v59 = v58;
            v60 = fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(v3);
            v44 = OOCAllocator_Realloc(v60, *v4, 8 * v59, &v68);
            *v4 = v44;
            if (v68)
            {
              v6 = v67;
              goto LABEL_2;
            }
            *(_DWORD *)a2 = v59;
            v53 = v44 + (v54 & 0x7FFFFFFF8);
          }
          *(_QWORD *)(a2 + 16) = v53 + 8;
          v61 = (v54 >> 3);
          v31 = v61 > v45;
          v62 = v61 - v45;
          if (v31)
          {
            memmove((void *)(v44 + 8 * v45 + 8), (const void *)(v44 + 8 * v45), 8 * v62);
            v44 = *v4;
          }
          *(_QWORD *)(v44 + 8 * v45) = v38;
LABEL_78:
          ++v37;
          v3 = v65;
          v6 = v67;
          if ((unint64_t)v37 >= *(_QWORD *)(v64 + 88))
            goto LABEL_79;
        }
        v47 = v46 >> 3;
        while (2)
        {
          v48 = v47 >> 1;
          v49 = *(_QWORD *)(*v4 + 8 * v45 + 8 * (v47 >> 1));
          v50 = LDOTreeNode_CompareTo(v38, v49);
          if (v50)
          {
LABEL_54:
            if (v50 < 1)
            {
              if ((v50 & 0x80000000) == 0)
                goto LABEL_78;
            }
            else
            {
              v45 += v48 + 1;
              v48 = v47 - (v48 + 1);
            }
          }
          else
          {
            v51 = *(_DWORD *)(v38 + 16);
            v52 = *(_DWORD *)(v49 + 16);
            if (v51 >= v52)
            {
              v50 = v51 > v52;
              goto LABEL_54;
            }
          }
          v47 = v48;
          if (!v48)
          {
            v44 = *(_QWORD *)(a2 + 8);
            v53 = *(_QWORD *)(a2 + 16);
            v3 = v65;
            goto LABEL_60;
          }
          continue;
        }
      }
    }
    v19 = v20 > v21;
LABEL_10:
    if (v19 < 1)
    {
      if ((v19 & 0x80000000) == 0)
        goto LABEL_35;
    }
    else
    {
      v15 += v17 + 1;
      v17 = v16 - (v17 + 1);
    }
    goto LABEL_13;
  }
LABEL_2:
  if (v6)
  {
    v8 = (uint64_t)v6;
    v9 = fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(v3);
    OOCAllocator_Free(v9, v8);
  }
  return v68;
}

uint64_t LDOTreeNode_ComputeText(size_t a1, _QWORD *a2)
{
  size_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  int v9;
  size_t v10;
  unsigned int v12;
  int v13;

  v12 = 0;
  v4 = a1;
  do
  {
    v5 = v4;
    v4 = *(_QWORD *)(v4 + 64);
  }
  while (v4);
  v6 = fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(a1);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 96))
    return PNEW_LDOString_Con(v6, v6, a2);
  v13 = 0;
  v8 = *(_QWORD *)(a1 + 64);
  if (v8)
  {
    v9 = 0;
    v10 = a1;
    do
    {
      v9 += *(_DWORD *)(v10 + 104);
      v10 = v8;
      v8 = *(_QWORD *)(v8 + 64);
    }
    while (v8);
    v13 = v9;
  }
  LDOTreeNode_ComputeAbsoluteTo(a1, &v12);
  return PNEW_LDOString_ConFromStringSubstring(v7, v7, *(_QWORD *)(v5 + 96), &v13, &v12, a2);
}

uint64_t LDOTreeNode_ComputeUpdateInfo(size_t a1, char *__s, _DWORD *a3, _DWORD *a4)
{
  uint64_t result;
  size_t v9;
  int v10;
  uint64_t v11;

  v11 = 0;
  if (!LDOString_IsValidUTF8(__s, 0))
    return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"not a valid UTF-8 string");
  result = LDOString_ComputeCPtrLength(__s, 0, &v11);
  if (!(_DWORD)result)
  {
    __LDOTreeNode_ComputeTextLength(a1, (_DWORD *)&v11 + 1);
    *a3 = 0;
    v9 = *(_QWORD *)(a1 + 64);
    if (v9)
    {
      v10 = 0;
      do
      {
        v10 += *(_DWORD *)(a1 + 104);
        *a3 = v10;
        a1 = v9;
        v9 = *(_QWORD *)(v9 + 64);
      }
      while (v9);
    }
    result = 0;
    *a4 = v11 - HIDWORD(v11);
  }
  return result;
}

uint64_t LDOTreeNode_ComputeVectorTextLength(uint64_t a1, _DWORD *a2)
{
  int v3;
  size_t *v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v3 = 0;
  v11 = 0;
  *a2 = 0;
  v4 = *(size_t **)(a1 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a1 + 16))
  {
LABEL_7:
    v6 = 0;
    *a2 = v3;
  }
  else
  {
    v3 = 0;
    while (1)
    {
      v6 = LDOTreeNode_ComputeText(*v4, &v11);
      if ((_DWORD)v6)
        break;
      v7 = LHString_Length(v11);
      if (v11)
      {
        v8 = LDOString_BorrowAllocator(v11);
        OOC_PlacementDeleteObject(v8, v11);
        v11 = 0;
      }
      v3 += v7;
      if ((unint64_t)++v4 >= *(_QWORD *)(a1 + 16))
        goto LABEL_7;
    }
    if (v11)
    {
      v10 = LDOString_BorrowAllocator(v11);
      OOC_PlacementDeleteObject(v10, v11);
    }
  }
  return v6;
}

uint64_t LDOTreeNode_RemoveChild(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  unsigned int v4;

  v4 = 0;
  result = __LDOTreeNode_ComputeChildIndex(a1, a2, &v4);
  if (!(_DWORD)result)
    return LDOTreeNode_RemoveChildAtIndex(a1, v4);
  return result;
}

uint64_t LDOTreeNode_GetNextSibling(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;

  v6 = 0;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 64);
  if (result)
  {
    result = __LDOTreeNode_ComputeChildIndex(result, (_DWORD *)a1, &v6);
    if (!(_DWORD)result)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 80);
      result = 0;
      if (v6 + 1 < ((unint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 88) - v5) >> 3))
        *a2 = *(_QWORD *)(v5 + 8 * (v6 + 1));
    }
  }
  return result;
}

uint64_t LDOTreeNode_GetNumberChildren(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3;
}

uint64_t LDOTreeNode_GetPreviousSibling(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  BOOL v5;
  int v6;

  v6 = 0;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 64);
  if (result)
  {
    result = __LDOTreeNode_ComputeChildIndex(result, (_DWORD *)a1, &v6);
    if ((_DWORD)result)
      v5 = 1;
    else
      v5 = v6 == 0;
    if (!v5)
    {
      result = 0;
      *a2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 80) + 8 * (v6 - 1));
    }
  }
  return result;
}

BOOL LDOTreeNode_IsLeaf(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80) == *(_QWORD *)(a1 + 88);
}

uint64_t LDOTreeNode_RemoveChildAtIndex(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v13 = 0;
  v3 = *(_QWORD *)(a1 + 80);
  v4 = (unint64_t)(*(_QWORD *)(a1 + 88) - v3) >> 3;
  memmove((void *)(v3 + 8 * a2), (const void *)(v3 + 8 * a2 + 8), 8 * (v4 + ~a2));
  result = 0;
  v6 = *(_QWORD *)(a1 + 88) - 8;
  *(_QWORD *)(a1 + 88) = v6;
  v7 = v4 - 1;
  if (*(_DWORD *)(a1 + 72) >= (3 * (v4 - 1)))
  {
    v8 = *(_QWORD *)(a1 + 80);
    v9 = 2 * v7;
    if (v9 <= 8)
      v10 = 8;
    else
      v10 = v9;
    v11 = fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(a1);
    v12 = OOCAllocator_Realloc(v11, *(_QWORD *)(a1 + 80), 8 * v10, &v13);
    *(_QWORD *)(a1 + 80) = v12;
    result = v13;
    if (!v13)
    {
      *(_DWORD *)(a1 + 72) = v10;
      *(_QWORD *)(a1 + 88) = v12 + ((v6 - v8) & 0x7FFFFFFF8);
    }
  }
  return result;
}

uint64_t LDOTreeNode_ToString(size_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t appended;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v16;

  v16 = 0;
  v4 = fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(a1);
  appended = PNEW_LDOString_Con(v4, v4, a2);
  if (!(_DWORD)appended)
  {
    v6 = *a2;
    appended = LHString_Append(v6, "  LDOTreeNode\n");
    if (!(_DWORD)appended)
    {
      appended = LDOObject_ToString(a1, (uint64_t *)&v16);
      if (!(_DWORD)appended)
      {
        appended = LDOString_AppendString(v6, (uint64_t)v16);
        if (!(_DWORD)appended)
        {
          if (v16)
          {
            v7 = LDOString_BorrowAllocator((uint64_t)v16);
            OOC_PlacementDeleteObject(v7, (uint64_t)v16);
            v16 = 0;
          }
          appended = LDOString_AppendPrefixU32Suffix(v6, "  Parent from: ", *(_DWORD *)(a1 + 104), "\n");
          if (!(_DWORD)appended)
          {
            appended = LDOString_AppendPrefixU32Suffix(v6, "  Parent to: ", *(_DWORD *)(a1 + 108), "\n");
            if (!(_DWORD)appended)
            {
              appended = LDOString_AppendPrefixStringSuffix(v6, "  pText: ", *(char **)(a1 + 96), "\n");
              if (!(_DWORD)appended)
              {
                appended = LDOTreeNode_ComputeText(a1, &v16);
                if (!(_DWORD)appended)
                {
                  appended = LDOString_AppendPrefixStringSuffix(v6, "  text: ", v16, "\n");
                  if (!(_DWORD)appended)
                  {
                    if (v16)
                    {
                      v8 = LDOString_BorrowAllocator((uint64_t)v16);
                      OOC_PlacementDeleteObject(v8, (uint64_t)v16);
                      v16 = 0;
                    }
                    appended = LDOString_AppendPrefixU32Suffix(v6, "  children: ", (*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3, "\n\n");
                    if (!(_DWORD)appended)
                    {
                      v9 = *(_QWORD **)(a1 + 80);
                      if ((unint64_t)v9 >= *(_QWORD *)(a1 + 88))
                      {
                        appended = 0;
                      }
                      else
                      {
                        v10 = 0;
                        while (1)
                        {
                          v11 = LDOString_AppendPrefixU32Suffix(v6, "  child #", v10, "\n");
                          if ((_DWORD)v11)
                            break;
                          v11 = (*(uint64_t (**)(_QWORD, char **))(*(_QWORD *)*v9 + 24))(*v9, &v16);
                          if ((_DWORD)v11)
                            break;
                          v11 = LDOString_AppendString(v6, (uint64_t)v16);
                          if ((_DWORD)v11)
                            break;
                          if (v16)
                          {
                            v12 = LDOString_BorrowAllocator((uint64_t)v16);
                            OOC_PlacementDeleteObject(v12, (uint64_t)v16);
                            v16 = 0;
                          }
                          appended = 0;
                          ++v10;
                          if ((unint64_t)++v9 >= *(_QWORD *)(a1 + 88))
                            goto LABEL_26;
                        }
                        appended = v11;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_26:
    if (v16)
    {
      v13 = LDOString_BorrowAllocator((uint64_t)v16);
      OOC_PlacementDeleteObject(v13, (uint64_t)v16);
      v16 = 0;
    }
    if (v6 && (_DWORD)appended)
    {
      v14 = LDOString_BorrowAllocator(v6);
      OOC_PlacementDeleteObject(v14, v6);
    }
  }
  return appended;
}

uint64_t PNEW_LDOTreeNode_Con(uint64_t a1, uint64_t a2, size_t a3, char *a4, char *a5, int a6, unsigned int a7, uint64_t *a8)
{
  uint64_t v16;
  uint64_t result;
  unsigned int v18;

  v18 = 0;
  v16 = OOCAllocator_Malloc(a1, 112, &v18);
  result = v18;
  if (!v18)
  {
    result = LDOTreeNode_Con(v16, a2, a3, a4, a5, a6, a7);
    v18 = result;
    if ((_DWORD)result)
    {
      OOCAllocator_Free(a1, v16);
      *a8 = 0;
      return v18;
    }
    else
    {
      *a8 = v16;
    }
  }
  return result;
}

uint64_t PNEW_LDOTreeNode_ConRoot(uint64_t a1, uint64_t a2, char *a3, char *a4, char *a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t result;
  unsigned int v14;

  v14 = 0;
  v12 = OOCAllocator_Malloc(a1, 112, &v14);
  result = v14;
  if (!v14)
  {
    result = LDOTreeNode_ConRoot(v12, a2, a3, a4, a5);
    v14 = result;
    if ((_DWORD)result)
    {
      OOCAllocator_Free(a1, v12);
      *a6 = 0;
      return v14;
    }
    else
    {
      *a6 = v12;
    }
  }
  return result;
}

uint64_t LDOString_ConFromCPtr(_QWORD *a1, uint64_t a2, char *__s)
{
  uint64_t result;

  result = LDOString_ValidateIndicesCPtr(__s, 0, 0, 1, 0, 0, 0);
  if (!(_DWORD)result)
  {
    result = LHString_ConFromCPtr(a1, a2, __s);
    if (!(_DWORD)result)
      *a1 = &__LDOString;
  }
  return result;
}

uint64_t LDOString_ValidateIndicesCPtr(char *__s, _DWORD *a2, unsigned int *a3, int a4, _DWORD *a5, unsigned int *a6, unsigned int *a7)
{
  unsigned int v14;
  unsigned int v15;
  char *v16;
  uint64_t result;

  if (__s)
  {
    v14 = strlen(__s);
    if (a2)
LABEL_3:
      LODWORD(a2) = *a2;
  }
  else
  {
    result = kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"szText is NULL and bAllowNULL is LH_FALSE");
    if ((_DWORD)result)
      return result;
    v14 = 0;
    if (a2)
      goto LABEL_3;
  }
  v15 = v14;
  if (a3)
    v15 = *a3;
  if (a2 > v15)
  {
    v16 = "u32From is greater than u32To";
    return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)v16);
  }
  if (a2 > v14)
  {
    v16 = "u32From is greater than u32Length";
    return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)v16);
  }
  if (v15 > v14)
  {
    v16 = "u32To is greater than u32Length";
    return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)v16);
  }
  if (a4 == 1 && !LDOString_IsValidUTF8(&__s[a2], &__s[v15]))
  {
    v16 = "not a valid UTF-8 string";
    return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)v16);
  }
  if (a5)
    *a5 = (_DWORD)a2;
  if (a6)
    *a6 = v15;
  result = 0;
  if (a7)
    *a7 = v14;
  return result;
}

uint64_t LDOString_ConFromCPtrSubstring(_QWORD *a1, uint64_t a2, char *__s, _DWORD *a4, unsigned int *a5)
{
  uint64_t result;
  uint64_t v9;

  v9 = 0;
  result = LDOString_ValidateIndicesCPtr(__s, a4, a5, 1, (_DWORD *)&v9 + 1, (unsigned int *)&v9, 0);
  if (!(_DWORD)result)
  {
    result = LHString_ConFromCPtrInterval((uint64_t)a1, a2, &__s[HIDWORD(v9)], &__s[v9]);
    if (!(_DWORD)result)
      *a1 = &__LDOString;
  }
  return result;
}

uint64_t LDOString_ConFromString(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  uint64_t result;

  v5 = (char *)fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(a3);
  result = LDOString_ConFromCPtr(a1, a2, v5);
  if (!(_DWORD)result)
    *a1 = &__LDOString;
  return result;
}

uint64_t LDOString_ConFromStringSubstring(_QWORD *a1, uint64_t a2, uint64_t a3, _DWORD *a4, unsigned int *a5)
{
  char *v9;
  uint64_t result;

  v9 = (char *)fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(a3);
  result = LDOString_ConFromCPtrSubstring(a1, a2, v9, a4, a5);
  if (!(_DWORD)result)
    *a1 = &__LDOString;
  return result;
}

uint64_t LDOString_AppendPrefixBoolSuffix(uint64_t a1, char *a2, int a3, char *a4)
{
  char *v4;

  if (a3 == 1)
    v4 = "true";
  else
    v4 = "false";
  return __LDOString_AppendPrefixCPtrSuffix(a1, a2, v4, a4);
}

uint64_t __LDOString_AppendPrefixCPtrSuffix(uint64_t a1, char *__s, char *a3, char *a4)
{
  uint64_t result;
  uint64_t v9;
  const char *v10;
  char *v11;

  if (__s)
  {
    if (!LDOString_IsValidUTF8(__s, 0))
    {
      v11 = "Prefix is not a valid UTF-8 string";
      return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)v11);
    }
    result = LHString_Append(a1, __s);
    if ((_DWORD)result)
      return result;
  }
  if (a3)
  {
    if (LDOString_IsValidUTF8(a3, 0))
    {
      v9 = a1;
      v10 = a3;
      goto LABEL_9;
    }
    v11 = "String is not a valid UTF-8 string";
    return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)v11);
  }
  v10 = "NULL";
  v9 = a1;
LABEL_9:
  result = LHString_Append(v9, v10);
  if (!(_DWORD)result)
  {
    if (!a4)
      return 0;
    if (LDOString_IsValidUTF8(a4, 0))
      return LHString_Append(a1, a4);
    v11 = "Suffix is not a valid UTF-8 string";
    return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)v11);
  }
  return result;
}

uint64_t LDOString_AppendPrefixS32Suffix(uint64_t a1, char *a2, unsigned int a3, char *a4)
{
  char v8[8];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v8 = 0;
  v9 = 0;
  LH_itoa(a3, v8, 0xAu);
  return __LDOString_AppendPrefixCPtrSuffix(a1, a2, v8, a4);
}

uint64_t LDOString_AppendPrefixStringSuffix(uint64_t a1, char *__s, char *a3, char *a4)
{
  if (a3)
    a3 = (char *)fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties((uint64_t)a3);
  return __LDOString_AppendPrefixCPtrSuffix(a1, __s, a3, a4);
}

uint64_t LDOString_AppendPrefixU32Suffix(uint64_t a1, char *a2, unsigned int a3, char *a4)
{
  char v8[8];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v8 = 0;
  v9 = 0;
  LH_utoa(a3, v8, 0xAu);
  return __LDOString_AppendPrefixCPtrSuffix(a1, a2, v8, a4);
}

uint64_t LDOString_AppendString(uint64_t a1, uint64_t a2)
{
  const char *v3;

  v3 = (const char *)fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(a2);
  return LHString_Append(a1, v3);
}

uint64_t LDOString_BorrowAllocator(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t LDOString_CompareTo(uint64_t a1, uint64_t a2)
{
  const char *v3;
  const char *v4;

  v3 = (const char *)fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(a1);
  v4 = (const char *)fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(a2);
  return strcmp(v3, v4);
}

uint64_t LDOString_ComputeCPtrLength(const char *a1, int a2, _DWORD *a3)
{
  if (a1)
  {
    *a3 = strlen(a1);
    return 0;
  }
  if (a2 == 1)
  {
    *a3 = 0;
    return 0;
  }
  return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"szText is NULL and bAllowNULL is LH_FALSE");
}

BOOL LDOString_IsValidUTF8(char *__s, char *a2)
{
  uint64_t v3;
  char *v5;

  if (!a2)
  {
    if (__s)
    {
      v3 = strlen(__s);
    }
    else
    {
      if (kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"szText is NULL and bAllowNULL is LH_FALSE"))
        return 0;
      v3 = 0;
    }
    a2 = &__s[v3];
  }
  if (a2 == __s)
    return 1;
  v5 = __s;
  return utf8full_check(&v5, (unint64_t)a2) == 0;
}

uint64_t LDOString_ReplaceSubstring(uint64_t a1, _DWORD *a2, unsigned int *a3, uint64_t a4)
{
  char *v8;
  uint64_t v9;
  char *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  _OWORD v15[2];
  _OWORD v16[2];
  uint64_t v17;

  v17 = 0;
  memset(v16, 0, sizeof(v16));
  memset(v15, 0, sizeof(v15));
  v8 = (char *)fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(a1);
  v9 = LDOString_ValidateIndicesCPtr(v8, a2, a3, 1, (_DWORD *)&v17 + 1, (unsigned int *)&v17, 0);
  if (!(_DWORD)v9)
  {
    v9 = LDOString_ConFromString(v16, *(_QWORD *)(a1 + 24), a1);
    if (!(_DWORD)v9)
    {
      v9 = LDOString_ConFromStringSubstring(v15, *(_QWORD *)(a1 + 24), a1, &v17, 0);
      if ((_DWORD)v9)
      {
LABEL_11:
        (*(void (**)(_OWORD *))(*(_QWORD *)&v16[0] + 16))(v16);
        return v9;
      }
      v10 = (char *)fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties((uint64_t)v16);
      if (LDOString_IsValidUTF8(v10, &v10[HIDWORD(v17)]))
      {
        v9 = LHString_SetContentFromNCPtr(a1, v10, HIDWORD(v17));
        if ((_DWORD)v9)
          goto LABEL_10;
        v11 = (const char *)fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(a4);
        v9 = LHString_Append(a1, v11);
        if ((_DWORD)v9)
          goto LABEL_10;
        v12 = (const char *)fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties((uint64_t)v15);
        v13 = LHString_Append(a1, v12);
      }
      else
      {
        v13 = kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Not a valid UTF-8 string");
      }
      v9 = v13;
LABEL_10:
      (*(void (**)(_OWORD *))(*(_QWORD *)&v15[0] + 16))(v15);
      goto LABEL_11;
    }
  }
  return v9;
}

uint64_t PNEW_LDOString_Con(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t result;
  unsigned int v8;

  v8 = 0;
  v6 = (_QWORD *)OOCAllocator_Malloc(a1, 32, &v8);
  result = v8;
  if (!v8)
  {
    result = LHString_Con(v6, a2);
    if ((_DWORD)result)
    {
      v8 = result;
      OOCAllocator_Free(a1, (uint64_t)v6);
      *a3 = 0;
      return v8;
    }
    else
    {
      *v6 = &__LDOString;
      *a3 = v6;
    }
  }
  return result;
}

uint64_t PNEW_LDOString_ConFromCPtr(uint64_t a1, uint64_t a2, char *a3, _QWORD *a4)
{
  _QWORD *v8;
  uint64_t result;
  unsigned int v10;

  v10 = 0;
  v8 = (_QWORD *)OOCAllocator_Malloc(a1, 32, &v10);
  result = v10;
  if (!v10)
  {
    result = LDOString_ConFromCPtr(v8, a2, a3);
    v10 = result;
    if ((_DWORD)result)
    {
      OOCAllocator_Free(a1, (uint64_t)v8);
      *a4 = 0;
      return v10;
    }
    else
    {
      *a4 = v8;
    }
  }
  return result;
}

uint64_t PNEW_LDOString_ConFromStringSubstring(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, unsigned int *a5, _QWORD *a6)
{
  _QWORD *v12;
  uint64_t result;
  unsigned int v14;

  v14 = 0;
  v12 = (_QWORD *)OOCAllocator_Malloc(a1, 32, &v14);
  result = v14;
  if (!v14)
  {
    result = LDOString_ConFromStringSubstring(v12, a2, a3, a4, a5);
    v14 = result;
    if ((_DWORD)result)
    {
      OOCAllocator_Free(a1, (uint64_t)v12);
      *a6 = 0;
      return v14;
    }
    else
    {
      *a6 = v12;
    }
  }
  return result;
}

uint64_t LDOLabelSet_Des(uint64_t a1)
{
  uint64_t *v2;
  uint64_t result;

  v2 = *(uint64_t **)(a1 + 24);
  if (!v2)
  {
    *(_DWORD *)(a1 + 16) = 0;
LABEL_10:
    *(_QWORD *)(a1 + 32) = 0;
    return Object_Des();
  }
  if ((unint64_t)v2 >= *(_QWORD *)(a1 + 32))
  {
    *(_DWORD *)(a1 + 16) = 0;
LABEL_9:
    OOCAllocator_Free(*(_QWORD *)(a1 + 8), (uint64_t)v2);
    *(_QWORD *)(a1 + 24) = 0;
    goto LABEL_10;
  }
  while (1)
  {
    result = OOC_PlacementDeleteObject(*(_QWORD *)(a1 + 8), *v2);
    if ((_DWORD)result)
      return result;
    if ((unint64_t)++v2 >= *(_QWORD *)(a1 + 32))
    {
      v2 = *(uint64_t **)(a1 + 24);
      *(_DWORD *)(a1 + 16) = 0;
      if (v2)
        goto LABEL_9;
      goto LABEL_10;
    }
  }
}

uint64_t LDOLabelSet_AddLabel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15;

  v15 = 0;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD **)(a1 + 32);
  v6 = (unint64_t)v5 - v4;
  v7 = (((unint64_t)v5 - v4) >> 3) + 1;
  v8 = *(_DWORD *)(a1 + 16);
  if (v7 <= v8)
    goto LABEL_11;
  v9 = 2 * v8;
  v10 = v8 + 1000000;
  if (v9 >= v10)
    v9 = v10;
  if (v9 <= v7)
    v9 = v7;
  if (v9 <= 8)
    v11 = 8;
  else
    v11 = v9;
  v12 = OOCAllocator_Realloc(*(_QWORD *)(a1 + 8), v4, 8 * v11, &v15);
  *(_QWORD *)(a1 + 24) = v12;
  v13 = v15;
  if (!v15)
  {
    *(_DWORD *)(a1 + 16) = v11;
    v5 = (_QWORD *)(v12 + (v6 & 0x7FFFFFFF8));
    *(_QWORD *)(a1 + 32) = v5;
LABEL_11:
    *v5 = a2;
    *(_QWORD *)(a1 + 32) += 8;
    return v15;
  }
  return v13;
}

uint64_t LDOLabelSet_ComputeContainedLabels(uint64_t *a1, unsigned int a2, unsigned int a3, int a4, unsigned int *a5)
{
  uint64_t result;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v13;
  unsigned int AbsoluteFrom;
  unsigned int AbsoluteTo;
  _BOOL4 v17;
  _BOOL4 v19;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;

  result = 0;
  v31 = 0;
  *a5 = 0;
  *((_QWORD *)a5 + 1) = 0;
  v7 = (uint64_t *)(a5 + 2);
  *((_QWORD *)a5 + 2) = 0;
  v8 = (uint64_t *)a1[3];
  if ((unint64_t)v8 < a1[4])
  {
    do
    {
      v13 = *v8;
      AbsoluteFrom = LDOLabel_GetAbsoluteFrom(*v8);
      AbsoluteTo = LDOLabel_GetAbsoluteTo(v13);
      v17 = AbsoluteFrom >= a2 && AbsoluteTo <= a3;
      v19 = AbsoluteFrom == a2 && AbsoluteTo == a3;
      if (a4 == 1)
        v17 = v19;
      if ((AbsoluteFrom != a3 || *(_DWORD *)(v13 + 112) != 1) && v17)
      {
        v22 = *((_QWORD *)a5 + 1);
        v23 = (uint64_t *)*((_QWORD *)a5 + 2);
        v24 = (unint64_t)v23 - v22;
        v25 = (((unint64_t)v23 - v22) >> 3) + 1;
        v26 = *a5;
        if (v25 > *a5)
        {
          v27 = 2 * v26;
          v28 = v26 + 1000000;
          if (v27 >= v28)
            v27 = v28;
          if (v27 <= v25)
            v27 = v25;
          if (v27 <= 8)
            v29 = 8;
          else
            v29 = v27;
          v30 = OOCAllocator_Realloc(a1[1], v22, 8 * v29, &v31);
          *v7 = v30;
          result = v31;
          if (v31)
            return result;
          *a5 = v29;
          v23 = (uint64_t *)(v30 + (v24 & 0x7FFFFFFF8));
          *((_QWORD *)a5 + 2) = v23;
        }
        *v23 = v13;
        *((_QWORD *)a5 + 2) += 8;
      }
      ++v8;
    }
    while ((unint64_t)v8 < a1[4]);
    return v31;
  }
  return result;
}

uint64_t LDOLabelSet_ComputeOverlappingLabels(uint64_t *a1, unsigned int a2, unsigned int a3, int a4, unsigned int *a5)
{
  uint64_t result;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v13;
  unsigned int AbsoluteFrom;
  unsigned int AbsoluteTo;
  BOOL v17;
  _BOOL4 v19;
  char v22;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;

  result = 0;
  v33 = 0;
  *a5 = 0;
  *((_QWORD *)a5 + 1) = 0;
  v7 = (uint64_t *)(a5 + 2);
  *((_QWORD *)a5 + 2) = 0;
  v8 = (uint64_t *)a1[3];
  if ((unint64_t)v8 < a1[4])
  {
    while (1)
    {
      v13 = *v8;
      AbsoluteFrom = LDOLabel_GetAbsoluteFrom(*v8);
      AbsoluteTo = LDOLabel_GetAbsoluteTo(v13);
      v17 = AbsoluteFrom > a2 || AbsoluteTo < a3;
      if (a4 == 1)
      {
        if (!v17)
          goto LABEL_30;
      }
      else
      {
        v19 = AbsoluteFrom >= a3 || AbsoluteTo < a3;
        if (AbsoluteTo > a2 && AbsoluteFrom <= a2 || !v19)
          goto LABEL_30;
        v22 = !v17;
        if (AbsoluteFrom >= a2 && AbsoluteTo <= a3)
          v22 = 1;
        if ((v22 & 1) != 0)
        {
LABEL_30:
          v24 = *((_QWORD *)a5 + 1);
          v25 = (uint64_t *)*((_QWORD *)a5 + 2);
          v26 = (unint64_t)v25 - v24;
          v27 = (((unint64_t)v25 - v24) >> 3) + 1;
          v28 = *a5;
          if (v27 > *a5)
          {
            v29 = 2 * v28;
            v30 = v28 + 1000000;
            if (v29 >= v30)
              v29 = v30;
            if (v29 <= v27)
              v29 = v27;
            if (v29 <= 8)
              v31 = 8;
            else
              v31 = v29;
            v32 = OOCAllocator_Realloc(a1[1], v24, 8 * v31, &v33);
            *v7 = v32;
            result = v33;
            if (v33)
              return result;
            *a5 = v31;
            v25 = (uint64_t *)(v32 + (v26 & 0x7FFFFFFF8));
            *((_QWORD *)a5 + 2) = v25;
          }
          *v25 = v13;
          *((_QWORD *)a5 + 2) += 8;
        }
      }
      if ((unint64_t)++v8 >= a1[4])
        return v33;
    }
  }
  return result;
}

uint64_t LDOLabelSet_GetNumberLabels(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3;
}

uint64_t LDOLabelSet_MergeLabels(uint64_t a1, uint64_t a2, char *a3, char *a4, _QWORD *a5)
{
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *i;
  uint64_t v13;
  uint64_t v15;
  uint64_t **j;
  uint64_t *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = 0;
  v6 = *(uint64_t **)(a2 + 8);
  if (((*(_QWORD *)(a2 + 16) - (_QWORD)v6) & 0x7FFFFFFF8) != 0)
  {
    v9 = *v6;
    v18 = *(_OWORD *)(v9 + 64);
    v19 = *(_QWORD *)(v9 + 80);
    PNEW_LDOLabel_Con(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 8), a3, a4, (uint64_t)&v18, &v20);
    v11 = v10;
    if (!(_DWORD)v10)
    {
      for (i = *(_QWORD **)(a2 + 8); (unint64_t)i < *(_QWORD *)(a2 + 16); ++i)
      {
        v13 = LDOLabel_AddNodes(v20, *i + 64);
        if ((_DWORD)v13)
          return v13;
      }
      v15 = LDOLabelSet_AddLabel(a1, v20);
      if ((_DWORD)v15)
      {
        v11 = v15;
        if (v20)
          OOC_PlacementDeleteObject(*(_QWORD *)(a1 + 8), v20);
      }
      else
      {
        for (j = *(uint64_t ***)(a2 + 8); (unint64_t)j < *(_QWORD *)(a2 + 16); ++j)
        {
          v17 = *j;
          v13 = LDOObject_CopyAttributes(v20, *j);
          if ((_DWORD)v13)
            return v13;
          v13 = LDOLabelSet_RemoveLabel(a1, (uint64_t)v17);
          if ((_DWORD)v13)
            return v13;
        }
        v11 = 0;
        if (a5)
          *a5 = v20;
      }
    }
  }
  else
  {
    v11 = 0;
    *a5 = 0;
  }
  return v11;
}

uint64_t LDOLabelSet_RemoveLabel(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15;

  v15 = 0;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  if (v4 >= v5)
    return OOC_PlacementDeleteObject(*(_QWORD *)(a1 + 8), a2);
  v6 = 0;
  v7 = *(_QWORD *)(a1 + 24);
  while (*(_DWORD *)(a2 + 16) != *(_DWORD *)(*(_QWORD *)v7 + 16))
  {
    v7 += 8;
    ++v6;
    if (v7 >= v5)
      return OOC_PlacementDeleteObject(*(_QWORD *)(a1 + 8), a2);
  }
  v8 = ((v5 - v4) >> 3) - 1;
  memmove((void *)(v4 + 8 * v6), (const void *)(v4 + 8 * v6 + 8), 8 * (v8 - v6));
  v9 = *(_QWORD *)(a1 + 32) - 8;
  *(_QWORD *)(a1 + 32) = v9;
  if (*(_DWORD *)(a1 + 16) < (3 * v8))
    return OOC_PlacementDeleteObject(*(_QWORD *)(a1 + 8), a2);
  v10 = *(_QWORD *)(a1 + 24);
  if ((2 * v8) <= 8)
    v11 = 8;
  else
    v11 = 2 * v8;
  v12 = OOCAllocator_Realloc(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 24), 8 * v11, &v15);
  *(_QWORD *)(a1 + 24) = v12;
  v13 = v15;
  if (!v15)
  {
    *(_DWORD *)(a1 + 16) = v11;
    *(_QWORD *)(a1 + 32) = v12 + ((v9 - v10) & 0x7FFFFFFF8);
    return OOC_PlacementDeleteObject(*(_QWORD *)(a1 + 8), a2);
  }
  return v13;
}

uint64_t LDOLabelSet_ToString(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t appended;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v15;

  v15 = 0;
  v4 = PNEW_LDOString_Con(a1[1], a1[1], a2);
  if (!(_DWORD)v4)
  {
    v5 = (_QWORD *)a1[3];
    if ((unint64_t)v5 >= a1[4])
    {
      return 0;
    }
    else
    {
      v6 = 0;
      v7 = *a2;
      while (1)
      {
        appended = LDOString_AppendPrefixU32Suffix(v7, "  label #", v6, "\n");
        if ((_DWORD)appended)
          break;
        v9 = (*(uint64_t (**)(_QWORD, char **))(*(_QWORD *)*v5 + 24))(*v5, &v15);
        v10 = v15;
        if ((_DWORD)v9 || (v9 = LDOString_AppendPrefixStringSuffix(v7, 0, v15, "\n"), v10 = v15, (_DWORD)v9))
        {
          v4 = v9;
          if (!v10)
            goto LABEL_13;
          goto LABEL_12;
        }
        if (v15)
        {
          v11 = LDOString_BorrowAllocator((uint64_t)v15);
          OOC_PlacementDeleteObject(v11, (uint64_t)v15);
          v15 = 0;
        }
        ++v6;
        if ((unint64_t)++v5 >= a1[4])
          return 0;
      }
      v4 = appended;
      v10 = v15;
      if (v15)
      {
LABEL_12:
        v12 = LDOString_BorrowAllocator((uint64_t)v10);
        OOC_PlacementDeleteObject(v12, (uint64_t)v15);
        v15 = 0;
      }
LABEL_13:
      if (v7)
      {
        v13 = LDOString_BorrowAllocator(v7);
        OOC_PlacementDeleteObject(v13, v7);
      }
    }
  }
  return v4;
}

uint64_t LDOLabelSet_UpdateRegularLabels(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t v8;
  int v9;
  int v10;

  result = 0;
  v9 = 0;
  v5 = *(uint64_t **)(a1 + 24);
  if ((unint64_t)v5 < *(_QWORD *)(a1 + 32))
  {
    do
    {
      v8 = *v5;
      if (*(_DWORD *)(*v5 + 112) != 1)
      {
        v10 = 0;
        result = LDOLabel_ContainsAllNodes(v8, a2, &v10);
        if ((_DWORD)result)
          return result;
        if (v10 == 1)
        {
          result = LDOLabel_RemoveNodes(v8, a2);
          if ((_DWORD)result)
            return result;
          result = LDOLabel_AddNodes(v8, a3);
          if ((_DWORD)result)
            return result;
        }
        else
        {
          result = LDOLabel_ContainsAtLeastOneNode(v8, a2, &v9);
          if ((_DWORD)result)
            return result;
          if (v9 == 1)
          {
            result = LDOLabel_RemoveNodes(v8, a2);
            if ((_DWORD)result)
              return result;
            result = LDOLabel_Invalidate(v8);
            if ((_DWORD)result)
              return result;
          }
        }
      }
      ++v5;
    }
    while ((unint64_t)v5 < *(_QWORD *)(a1 + 32));
    return 0;
  }
  return result;
}

uint64_t LDOLabelSet_UpdateSpan(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t result;

  v3 = *(uint64_t **)(a1 + 24);
  if ((unint64_t)v3 >= *(_QWORD *)(a1 + 32))
    return 0;
  while (1)
  {
    v7 = *v3;
    if (*(_DWORD *)(*v3 + 104) == 1 && *(_DWORD *)(v7 + 112) == 1 && LDOLabel_GetAbsoluteTo(v7) > a2)
    {
      result = LDOLabel_UpdateSpanLength((_DWORD *)*v3, a2, a3);
      if ((_DWORD)result)
        break;
    }
    if ((unint64_t)++v3 >= *(_QWORD *)(a1 + 32))
      return 0;
  }
  return result;
}

uint64_t PNEW_LDOLabelSet_Con(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;
  unsigned int v8;

  v8 = 0;
  v6 = OOCAllocator_Malloc(a1, 40, &v8);
  result = v8;
  if (!v8)
  {
    result = Object_Con((_QWORD *)v6);
    if ((_DWORD)result)
    {
      v8 = result;
      OOCAllocator_Free(a1, v6);
      *a3 = 0;
      return v8;
    }
    else
    {
      *(_QWORD *)v6 = &__LDOLabelSet;
      *(_QWORD *)(v6 + 8) = a2;
      *(_DWORD *)(v6 + 16) = 0;
      *(_QWORD *)(v6 + 24) = 0;
      *(_QWORD *)(v6 + 32) = 0;
      *a3 = v6;
    }
  }
  return result;
}

uint64_t LDOObject_Con(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = Object_Con((_QWORD *)a1);
  if (!(_DWORD)result)
  {
    *(_QWORD *)a1 = &__LDOObject;
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 16) = a1;
    *(_DWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  return result;
}

uint64_t LDOObject_Des(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    result = OOC_PlacementDeleteObject(*(_QWORD *)(a1 + 8), v2);
    if ((_DWORD)result)
      return result;
    *(_QWORD *)(a1 + 48) = 0;
  }
  v4 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    result = OOC_PlacementDeleteObject(*(_QWORD *)(a1 + 8), v4);
    if ((_DWORD)result)
      return result;
    *(_QWORD *)(a1 + 56) = 0;
  }
  v5 = *(_QWORD *)(a1 + 32);
  if (!v5)
  {
    *(_DWORD *)(a1 + 24) = 0;
LABEL_18:
    *(_QWORD *)(a1 + 40) = 0;
    return Object_Des();
  }
  if (v5 >= *(_QWORD *)(a1 + 40))
  {
    *(_DWORD *)(a1 + 24) = 0;
LABEL_17:
    OOCAllocator_Free(*(_QWORD *)(a1 + 8), v5);
    *(_QWORD *)(a1 + 32) = 0;
    goto LABEL_18;
  }
  while (1)
  {
    v6 = *(_OWORD *)(v5 + 8);
    v7 = *(_QWORD *)(v5 + 24);
    result = __LDOObject_DeallocateValue(a1, (int *)&v6);
    if ((_DWORD)result)
      return result;
    result = OOC_PlacementDeleteObject(*(_QWORD *)(a1 + 8), *(_QWORD *)v5);
    if ((_DWORD)result)
      return result;
    v5 += 32;
    if (v5 >= *(_QWORD *)(a1 + 40))
    {
      v5 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)(a1 + 24) = 0;
      if (v5)
        goto LABEL_17;
      goto LABEL_18;
    }
  }
}

uint64_t __LDOObject_DeallocateValue(uint64_t a1, int *a2)
{
  int v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = *a2;
  if (*a2 == 2)
  {
    v5 = *((_QWORD *)a2 + 2);
    if (!v5)
      return 0;
    result = OOC_PlacementDeleteObject(*(_QWORD *)(a1 + 8), v5);
    if ((_DWORD)result)
      return result;
    *((_QWORD *)a2 + 2) = 0;
    v4 = *a2;
  }
  if (v4 != 3)
    return 0;
  v7 = *((_QWORD *)a2 + 2);
  if (!v7)
    return 0;
  *(_DWORD *)v7 = 0;
  if (*(_QWORD *)(v7 + 8))
  {
    OOCAllocator_Free(*(_QWORD *)(a1 + 8), *(_QWORD *)(v7 + 8));
    v7 = *((_QWORD *)a2 + 2);
    *(_QWORD *)(v7 + 8) = 0;
  }
  *(_QWORD *)(v7 + 16) = 0;
  OOCAllocator_Free(*(_QWORD *)(a1 + 8), v7);
  result = 0;
  *((_QWORD *)a2 + 2) = 0;
  return result;
}

uint64_t LDOObject_CopyAttributes(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  int v5;
  char *v6;
  uint64_t U32Attribute;
  BOOL v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  char *v12;
  BOOL v13;
  BOOL v14;
  unsigned int v16;
  char *v17;
  int v18;

  v2 = a2[4];
  if (v2 >= a2[5])
    return 0;
  while (1)
  {
    v5 = *(_DWORD *)(v2 + 8);
    v6 = (char *)fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(*(_QWORD *)v2);
    switch(v5)
    {
      case 0:
        LODWORD(v17) = 0;
        v18 = 0;
        U32Attribute = LDOObject_GetU32Attribute(a2, v6, &v17, &v18);
        if ((_DWORD)U32Attribute)
          v8 = 0;
        else
          v8 = (_DWORD)v17 == 1;
        if (!v8)
          goto LABEL_36;
        LDOObject_SetU32Attribute(a1, v6, v18);
        break;
      case 1:
        LODWORD(v17) = 0;
        v18 = 0;
        U32Attribute = LDOObject_GetS32Attribute(a2, v6, &v17, &v18);
        if ((_DWORD)U32Attribute)
          v10 = 0;
        else
          v10 = (_DWORD)v17 == 1;
        if (!v10)
          goto LABEL_36;
        LDOObject_SetS32Attribute(a1, v6, v18);
        break;
      case 2:
        v18 = 0;
        v17 = 0;
        U32Attribute = LDOObject_GetStringAttribute(a2, v6, &v18, (uint64_t *)&v17);
        if ((_DWORD)U32Attribute)
          v11 = 0;
        else
          v11 = v18 == 1;
        if (!v11)
          goto LABEL_36;
        v9 = LDOObject_SetStringAttribute(a1, v6, v17);
        break;
      case 3:
        v18 = 0;
        v17 = 0;
        v16 = 0;
        U32Attribute = LDOObject_GetListU32Attribute(a2, v6, &v18, (uint64_t *)&v17, &v16);
        v12 = v17;
        if ((_DWORD)U32Attribute)
          v13 = 0;
        else
          v13 = v18 == 1;
        if (v13)
          U32Attribute = LDOObject_SetListU32Attribute(a1, v6, v17, v16);
        if (v12)
          OOCAllocator_Free(*(_QWORD *)(a1 + 8), (uint64_t)v12);
        goto LABEL_36;
      case 4:
        LODWORD(v17) = 0;
        v18 = 0;
        U32Attribute = LDOObject_GetBoolAttribute(a2, v6, &v17, &v18);
        if ((_DWORD)U32Attribute)
          v14 = 0;
        else
          v14 = (_DWORD)v17 == 1;
        if (!v14)
          goto LABEL_36;
        LDOObject_SetBoolAttribute(a1, v6, v18);
        break;
      default:
        goto LABEL_37;
    }
    U32Attribute = v9;
LABEL_36:
    if ((_DWORD)U32Attribute)
      return U32Attribute;
LABEL_37:
    v2 += 32;
    if (v2 >= a2[5])
      return 0;
  }
}

uint64_t LDOObject_GetBoolAttribute(uint64_t *a1, char *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t result;
  BOOL v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v9 = xmmword_1DEC64788;
  v10 = 0;
  v8 = 0;
  result = __LDOObject_GetAttributeMapItem(a1, a2, &v8, (uint64_t)&v9);
  if (!(_DWORD)result)
  {
    *a3 = 0;
    if (v8)
      v7 = (_DWORD)v9 == 4;
    else
      v7 = 0;
    if (v7)
    {
      *a3 = 1;
      *a4 = DWORD1(v9) == 1;
    }
  }
  return result;
}

uint64_t __LDOObject_GetAttributeMapItem(uint64_t *a1, char *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v15 = 0;
  v16 = 0uLL;
  v17 = 0;
  result = PNEW_LDOString_ConFromCPtr(a1[1], a1[1], a2, &v15);
  if (!(_DWORD)result)
  {
    v8 = a1[5] - a1[4];
    if (v8)
    {
      v9 = 0;
      v10 = v8 >> 5;
      while (1)
      {
        v11 = v10 >> 1;
        v12 = LDOString_CompareTo(v15, *(_QWORD *)(a1[4] + 32 * v9 + 32 * (v10 >> 1)));
        if (v12 < 1)
        {
          if ((v12 & 0x80000000) == 0)
          {
            v14 = a1[4] + 32 * (v11 + v9);
            v13 = *(_QWORD *)v14;
            v16 = *(_OWORD *)(v14 + 8);
            v17 = *(_QWORD *)(v14 + 24);
            LODWORD(v11) = 1;
            goto LABEL_11;
          }
        }
        else
        {
          v9 += v11 + 1;
          v11 = v10 - (v11 + 1);
        }
        v10 = v11;
        if (!v11)
          goto LABEL_10;
      }
    }
    LODWORD(v11) = 0;
LABEL_10:
    v13 = 0;
LABEL_11:
    result = OOC_PlacementDeleteObject(a1[1], v15);
    if (!(_DWORD)result)
    {
      result = 0;
      if ((_DWORD)v11)
      {
        *a3 = v13;
        *(_OWORD *)a4 = v16;
        *(_QWORD *)(a4 + 16) = v17;
      }
      else
      {
        *a3 = 0;
      }
    }
  }
  return result;
}

uint64_t LDOObject_GetCategory(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  *a2 = 0;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
    *a2 = fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(v2);
  return 0;
}

uint64_t LDOObject_GetListU32Attribute(uint64_t *a1, char *a2, _DWORD *a3, uint64_t *a4, _DWORD *a5)
{
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int *v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  unsigned int v20;

  v17 = 0;
  v18 = xmmword_1DEC647A0;
  v19 = 0;
  result = __LDOObject_GetAttributeMapItem(a1, a2, &v17, (uint64_t)&v18);
  v20 = result;
  if (!(_DWORD)result)
  {
    *a3 = 0;
    if (v17)
    {
      if ((_DWORD)v18 == 3)
      {
        *a3 = 1;
        v10 = v19;
        v11 = *(_QWORD *)(v19 + 16) - *(_QWORD *)(v19 + 8);
        *a5 = v11 >> 2;
        if ((v11 >> 2))
        {
          v12 = OOCAllocator_Calloc(a1[1], (v11 >> 2), 4, &v20);
          *a4 = v12;
          result = v20;
          if (!v20)
          {
            v13 = *(int **)(v10 + 8);
            v14 = *(_QWORD *)(v10 + 16);
            if ((unint64_t)v13 >= v14)
            {
              return 0;
            }
            else
            {
              v15 = 0;
              do
              {
                v16 = *v13++;
                *(_DWORD *)(v12 + 4 * v15++) = v16;
              }
              while ((unint64_t)v13 < v14);
              return v20;
            }
          }
        }
        else
        {
          result = 0;
          *a4 = 0;
        }
      }
    }
  }
  return result;
}

uint64_t LDOObject_GetS32Attribute(uint64_t *a1, char *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t result;
  BOOL v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v9 = xmmword_1DEC647B8;
  v10 = 0;
  v8 = 0;
  result = __LDOObject_GetAttributeMapItem(a1, a2, &v8, (uint64_t)&v9);
  if (!(_DWORD)result)
  {
    *a3 = 0;
    if (v8)
      v7 = (_DWORD)v9 == 1;
    else
      v7 = 0;
    if (v7)
    {
      *a3 = 1;
      *a4 = DWORD2(v9);
    }
  }
  return result;
}

uint64_t LDOObject_GetStringAttribute(uint64_t *a1, char *a2, _DWORD *a3, uint64_t *a4)
{
  uint64_t AttributeMapItem;
  BOOL v7;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v10 = xmmword_1DEC647D0;
  v11 = 0;
  v9 = 0;
  AttributeMapItem = __LDOObject_GetAttributeMapItem(a1, a2, &v9, (uint64_t)&v10);
  if (!(_DWORD)AttributeMapItem)
  {
    *a3 = 0;
    if (v9)
      v7 = (_DWORD)v10 == 2;
    else
      v7 = 0;
    if (v7)
    {
      *a3 = 1;
      *a4 = fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(v11);
    }
  }
  return AttributeMapItem;
}

uint64_t LDOObject_GetType(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  *a2 = 0;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
    *a2 = fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(v2);
  return 0;
}

uint64_t LDOObject_GetU32Attribute(uint64_t *a1, char *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t result;
  BOOL v7;
  uint64_t v8;
  _QWORD v9[3];

  memset(v9, 0, sizeof(v9));
  v8 = 0;
  result = __LDOObject_GetAttributeMapItem(a1, a2, &v8, (uint64_t)v9);
  if (!(_DWORD)result)
  {
    *a3 = 0;
    if (v8)
      v7 = LODWORD(v9[0]) == 0;
    else
      v7 = 0;
    if (v7)
    {
      *a3 = 1;
      *a4 = HIDWORD(v9[0]);
    }
  }
  return result;
}

BOOL LDOObject_IsEqual(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
}

uint64_t LDOObject_RemoveAttribute(uint64_t a1, char *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;

  v21 = 0;
  v19 = xmmword_1DEC64770;
  v20 = 0;
  result = __LDOObject_GetAttributeMapItem((uint64_t *)a1, a2, &v21, (uint64_t)&v19);
  v22 = result;
  v4 = v21;
  if ((_DWORD)result || !v21)
    goto LABEL_11;
  v22 = __LDOObject_DeallocateValue(a1, (int *)&v19);
  if (v22 || (v5 = *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) == 0)
  {
LABEL_12:
    OOC_PlacementDeleteObject(*(_QWORD *)(a1 + 8), v4);
    return v22;
  }
  v6 = 0;
  v7 = v5 >> 5;
  while (1)
  {
    v8 = v7 >> 1;
    v9 = LDOString_CompareTo(v4, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32 * v6 + 32 * (v7 >> 1)));
    if (v9 < 1)
      break;
    v6 += v8 + 1;
    v8 = v7 - (v8 + 1);
LABEL_9:
    v7 = v8;
    if (!v8)
      goto LABEL_10;
  }
  if (v9 < 0)
    goto LABEL_9;
  v10 = v8 + v6;
  v11 = *(_QWORD *)(a1 + 32);
  v12 = (unint64_t)(*(_QWORD *)(a1 + 40) - v11) >> 5;
  memmove((void *)(v11 + 32 * v10), (const void *)(v11 + 32 * v10 + 32), 32 * (~v10 + v12));
  v13 = *(_QWORD *)(a1 + 40) - 32;
  *(_QWORD *)(a1 + 40) = v13;
  v14 = v12 - 1;
  if (*(_DWORD *)(a1 + 24) < (3 * (v12 - 1)))
  {
LABEL_10:
    result = 0;
    goto LABEL_11;
  }
  v15 = *(_QWORD *)(a1 + 32);
  v16 = 2 * v14;
  if (v16 <= 8)
    v17 = 8;
  else
    v17 = v16;
  v18 = OOCAllocator_Realloc(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 32), 32 * v17, &v22);
  *(_QWORD *)(a1 + 32) = v18;
  result = v22;
  if (!v22)
  {
    *(_DWORD *)(a1 + 24) = v17;
    *(_QWORD *)(a1 + 40) = v18 + ((v13 - v15) & 0x1FFFFFFFE0);
  }
LABEL_11:
  if (v4)
    goto LABEL_12;
  return result;
}

uint64_t LDOObject_RemoveAttributes(uint64_t *a1)
{
  uint64_t *v1;
  unsigned int v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  unsigned int v17;

  v17 = 0;
  v1 = (uint64_t *)a1[4];
  if ((unint64_t)v1 >= a1[5])
    return 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = *v1;
    v7 = (unint64_t)v5 - v4;
    v8 = (((unint64_t)v5 - v4) >> 3) + 1;
    if (v8 <= v3)
    {
      v12 = v5;
    }
    else
    {
      v9 = 2 * v3;
      if (2 * v3 >= v3 + 1000000)
        v9 = v3 + 1000000;
      if (v9 <= v8)
        v9 = v8;
      if (v9 <= 8)
        v3 = 8;
      else
        v3 = v9;
      v10 = OOCAllocator_Realloc(a1[1], v4, 8 * v3, &v17);
      v4 = v10;
      v11 = v17;
      if (v17)
        goto LABEL_21;
      v12 = (_QWORD *)(v10 + (v7 & 0x7FFFFFFF8));
      v5 = v12;
    }
    *v5++ = v6;
    v1 += 4;
  }
  while ((unint64_t)v1 < a1[5]);
  v11 = v17;
  if (v17)
    goto LABEL_21;
  if (v4 >= (unint64_t)v5)
  {
LABEL_20:
    v11 = 0;
LABEL_21:
    if (!v4)
      return v11;
    goto LABEL_22;
  }
  v13 = v4 - 8;
  while (1)
  {
    v14 = (char *)fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(*(_QWORD *)(v13 + 8));
    v15 = LDOObject_RemoveAttribute((uint64_t)a1, v14);
    if ((_DWORD)v15)
      break;
    v13 += 8;
    if (v13 >= (unint64_t)v12)
      goto LABEL_20;
  }
  v11 = v15;
  if (v4)
LABEL_22:
    OOCAllocator_Free(a1[1], v4);
  return v11;
}

double LDOObject_SetBoolAttribute(uint64_t a1, char *a2, int a3)
{
  int v5;
  double result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  int v30;

  v28 = xmmword_1DEC64788;
  v29 = 0;
  v27 = 0;
  v5 = __LDOObject_EnsureKeyWithEmptyValue((uint64_t *)a1, a2, &v27, (int *)&v28);
  v30 = v5;
  if (!v5)
  {
    DWORD1(v28) = a3 == 1;
    v7 = *(_QWORD *)(a1 + 40);
    v8 = 0;
    v9 = v7 - *(_QWORD *)(a1 + 32);
    if (v9)
    {
      v10 = v9 >> 5;
      while (1)
      {
        v11 = v10 >> 1;
        v12 = LDOString_CompareTo(v27, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32 * v8 + 32 * (v10 >> 1)));
        if (v12 < 1)
        {
          if ((v12 & 0x80000000) == 0)
          {
            v24 = *(_QWORD *)(a1 + 32) + 32 * (v11 + v8);
            result = *(double *)&v28;
            *(_OWORD *)(v24 + 8) = v28;
            *(_QWORD *)(v24 + 24) = v29;
            return result;
          }
        }
        else
        {
          v8 += v11 + 1;
          v11 = v10 - (v11 + 1);
        }
        v10 = v11;
        if (!v11)
        {
          v7 = *(_QWORD *)(a1 + 32);
          v13 = *(_QWORD *)(a1 + 40);
          goto LABEL_10;
        }
      }
    }
    v13 = *(_QWORD *)(a1 + 40);
LABEL_10:
    v14 = v27;
    v25 = v28;
    v26 = v29;
    v15 = v13 - v7;
    v16 = (unint64_t)(v13 - v7) >> 5;
    if (*(_DWORD *)(a1 + 24) == (_DWORD)v16 && (_DWORD)v16 != -1)
    {
      v17 = 2 * v16;
      if (2 * (int)v16 >= (v16 + 1000000))
        v17 = v16 + 1000000;
      if (v17 <= (int)v16 + 1)
        v18 = v16 + 1;
      else
        v18 = v17;
      if (v18 <= 8)
        v19 = 8;
      else
        v19 = v18;
      v7 = OOCAllocator_Realloc(*(_QWORD *)(a1 + 8), v7, 32 * v19, &v30);
      *(_QWORD *)(a1 + 32) = v7;
      v5 = v30;
      if (v30)
        goto LABEL_26;
      *(_DWORD *)(a1 + 24) = v19;
      v13 = v7 + (v15 & 0x1FFFFFFFE0);
    }
    *(_QWORD *)(a1 + 40) = v13 + 32;
    v20 = (v15 >> 5);
    v21 = v20 > v8;
    v22 = v20 - v8;
    if (v21)
    {
      memmove((void *)(v7 + 32 * v8 + 32), (const void *)(v7 + 32 * v8), 32 * v22);
      v7 = *(_QWORD *)(a1 + 32);
      v5 = v30;
    }
    else
    {
      v5 = 0;
    }
    v23 = v7 + 32 * v8;
    *(_QWORD *)v23 = v14;
    result = *(double *)&v25;
    *(_QWORD *)(v23 + 24) = v26;
    *(_OWORD *)(v23 + 8) = v25;
  }
LABEL_26:
  if (v5)
  {
    if (v27)
      OOC_PlacementDeleteObject(*(_QWORD *)(a1 + 8), v27);
  }
  return result;
}

uint64_t __LDOObject_EnsureKeyWithEmptyValue(uint64_t *a1, char *a2, _QWORD *a3, int *a4)
{
  uint64_t result;

  result = __LDOObject_GetAttributeMapItem(a1, a2, a3, (uint64_t)a4);
  if (!(_DWORD)result)
  {
    if (*a3)
      return __LDOObject_DeallocateValue((uint64_t)a1, a4);
    else
      return PNEW_LDOString_ConFromCPtr(a1[1], a1[1], a2, a3);
  }
  return result;
}

uint64_t LDOObject_SetCategory(uint64_t a1, char *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
  {
    result = OOC_PlacementDeleteObject(*(_QWORD *)(a1 + 8), v4);
    if ((_DWORD)result)
      return result;
    *v5 = 0;
  }
  if (a2)
    return PNEW_LDOString_ConFromCPtr(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 8), a2, v5);
  else
    return 0;
}

uint64_t LDOObject_SetListU32Attribute(uint64_t a1, char *a2, const void *a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  unsigned int v37;

  v35 = xmmword_1DEC647A0;
  v36 = 0;
  v34 = 0;
  v7 = 0;
  v37 = __LDOObject_EnsureKeyWithEmptyValue((uint64_t *)a1, a2, &v34, (int *)&v35);
  if (v37 || (v8 = OOCAllocator_Calloc(*(_QWORD *)(a1 + 8), 1, 24, &v37), v7 = v8, v37))
  {
LABEL_3:
    if (v34)
      OOC_PlacementDeleteObject(*(_QWORD *)(a1 + 8), v34);
    if (v7)
      OOCAllocator_Free(*(_QWORD *)(a1 + 8), v7);
    return v37;
  }
  *(_DWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  if (a4)
  {
    if (a4 <= 8)
      v10 = 8;
    else
      v10 = a4;
    v11 = (void *)OOCAllocator_Realloc(*(_QWORD *)(a1 + 8), 0, 4 * v10, &v37);
    *(_QWORD *)(v7 + 8) = v11;
    if (v37)
      goto LABEL_3;
    *(_DWORD *)v7 = v10;
    *(_QWORD *)(v7 + 16) = v11;
    memcpy(v11, a3, 4 * a4);
    *(_QWORD *)(v7 + 16) += 4 * a4;
  }
  v36 = v7;
  v12 = *(_QWORD *)(a1 + 40);
  v13 = 0;
  v14 = v12 - *(_QWORD *)(a1 + 32);
  if (v14)
  {
    v15 = v14 >> 5;
    while (1)
    {
      v16 = v15 >> 1;
      v17 = LDOString_CompareTo(v34, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32 * v13 + 32 * (v15 >> 1)));
      if (v17 < 1)
      {
        if ((v17 & 0x80000000) == 0)
        {
          v31 = *(_QWORD *)(a1 + 32) + 32 * (v16 + v13);
          *(_OWORD *)(v31 + 8) = v35;
          *(_QWORD *)(v31 + 24) = v36;
          goto LABEL_41;
        }
      }
      else
      {
        v13 += v16 + 1;
        v16 = v15 - (v16 + 1);
      }
      v15 = v16;
      if (!v16)
      {
        v12 = *(_QWORD *)(a1 + 32);
        v18 = *(_QWORD *)(a1 + 40);
        goto LABEL_22;
      }
    }
  }
  v18 = *(_QWORD *)(a1 + 40);
LABEL_22:
  v19 = v34;
  v32 = v35;
  v33 = v36;
  v20 = v18 - v12;
  v21 = (unint64_t)(v18 - v12) >> 5;
  if (*(_DWORD *)(a1 + 24) == (_DWORD)v21 && (_DWORD)v21 != -1)
  {
    v23 = 2 * v21;
    if (2 * (int)v21 >= (v21 + 1000000))
      v23 = v21 + 1000000;
    if (v23 <= (int)v21 + 1)
      v24 = v21 + 1;
    else
      v24 = v23;
    if (v24 <= 8)
      v25 = 8;
    else
      v25 = v24;
    v26 = OOCAllocator_Realloc(*(_QWORD *)(a1 + 8), v12, 32 * v25, &v37);
    *(_QWORD *)(a1 + 32) = v26;
    if (v37)
      goto LABEL_3;
    v12 = v26;
    *(_DWORD *)(a1 + 24) = v25;
    v18 = v26 + (v20 & 0x1FFFFFFFE0);
  }
  *(_QWORD *)(a1 + 40) = v18 + 32;
  v27 = (v20 >> 5);
  v28 = v27 > v13;
  v29 = v27 - v13;
  if (v28)
  {
    memmove((void *)(v12 + 32 * v13 + 32), (const void *)(v12 + 32 * v13), 32 * v29);
    v12 = *(_QWORD *)(a1 + 32);
  }
  v30 = v12 + 32 * v13;
  *(_QWORD *)v30 = v19;
  *(_QWORD *)(v30 + 24) = v33;
  *(_OWORD *)(v30 + 8) = v32;
LABEL_41:
  if (v37)
    goto LABEL_3;
  return v37;
}

double LDOObject_SetS32Attribute(uint64_t a1, char *a2, int a3)
{
  int v5;
  double result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  int v30;

  v28 = xmmword_1DEC647B8;
  v29 = 0;
  v27 = 0;
  v5 = __LDOObject_EnsureKeyWithEmptyValue((uint64_t *)a1, a2, &v27, (int *)&v28);
  v30 = v5;
  if (!v5)
  {
    DWORD2(v28) = a3;
    v7 = *(_QWORD *)(a1 + 40);
    v8 = 0;
    v9 = v7 - *(_QWORD *)(a1 + 32);
    if (v9)
    {
      v10 = v9 >> 5;
      while (1)
      {
        v11 = v10 >> 1;
        v12 = LDOString_CompareTo(v27, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32 * v8 + 32 * (v10 >> 1)));
        if (v12 < 1)
        {
          if ((v12 & 0x80000000) == 0)
          {
            v24 = *(_QWORD *)(a1 + 32) + 32 * (v11 + v8);
            result = *(double *)&v28;
            *(_OWORD *)(v24 + 8) = v28;
            *(_QWORD *)(v24 + 24) = v29;
            return result;
          }
        }
        else
        {
          v8 += v11 + 1;
          v11 = v10 - (v11 + 1);
        }
        v10 = v11;
        if (!v11)
        {
          v7 = *(_QWORD *)(a1 + 32);
          v13 = *(_QWORD *)(a1 + 40);
          goto LABEL_10;
        }
      }
    }
    v13 = *(_QWORD *)(a1 + 40);
LABEL_10:
    v14 = v27;
    v25 = v28;
    v26 = v29;
    v15 = v13 - v7;
    v16 = (unint64_t)(v13 - v7) >> 5;
    if (*(_DWORD *)(a1 + 24) == (_DWORD)v16 && (_DWORD)v16 != -1)
    {
      v17 = 2 * v16;
      if (2 * (int)v16 >= (v16 + 1000000))
        v17 = v16 + 1000000;
      if (v17 <= (int)v16 + 1)
        v18 = v16 + 1;
      else
        v18 = v17;
      if (v18 <= 8)
        v19 = 8;
      else
        v19 = v18;
      v7 = OOCAllocator_Realloc(*(_QWORD *)(a1 + 8), v7, 32 * v19, &v30);
      *(_QWORD *)(a1 + 32) = v7;
      v5 = v30;
      if (v30)
        goto LABEL_26;
      *(_DWORD *)(a1 + 24) = v19;
      v13 = v7 + (v15 & 0x1FFFFFFFE0);
    }
    *(_QWORD *)(a1 + 40) = v13 + 32;
    v20 = (v15 >> 5);
    v21 = v20 > v8;
    v22 = v20 - v8;
    if (v21)
    {
      memmove((void *)(v7 + 32 * v8 + 32), (const void *)(v7 + 32 * v8), 32 * v22);
      v7 = *(_QWORD *)(a1 + 32);
      v5 = v30;
    }
    else
    {
      v5 = 0;
    }
    v23 = v7 + 32 * v8;
    *(_QWORD *)v23 = v14;
    result = *(double *)&v25;
    *(_QWORD *)(v23 + 24) = v26;
    *(_OWORD *)(v23 + 8) = v25;
  }
LABEL_26:
  if (v5)
  {
    if (v27)
      OOC_PlacementDeleteObject(*(_QWORD *)(a1 + 8), v27);
  }
  return result;
}

uint64_t LDOObject_SetStringAttribute(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  BOOL v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;

  v33 = 0;
  v31 = xmmword_1DEC647D0;
  v32 = 0;
  v30 = 0;
  v34 = PNEW_LDOString_ConFromCPtr(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 8), a3, &v33);
  if (!v34)
  {
    v34 = __LDOObject_EnsureKeyWithEmptyValue((uint64_t *)a1, a2, &v30, (int *)&v31);
    if (!v34)
    {
      v32 = v33;
      v6 = *(_QWORD *)(a1 + 40);
      v7 = 0;
      v8 = v6 - *(_QWORD *)(a1 + 32);
      if (v8)
      {
        v9 = v8 >> 5;
        while (1)
        {
          v10 = v9 >> 1;
          v11 = LDOString_CompareTo(v30, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32 * v7 + 32 * (v9 >> 1)));
          if (v11 < 1)
          {
            if ((v11 & 0x80000000) == 0)
            {
              v27 = *(_QWORD *)(a1 + 32) + 32 * (v10 + v7);
              *(_OWORD *)(v27 + 8) = v31;
              *(_QWORD *)(v27 + 24) = v32;
              return v34;
            }
          }
          else
          {
            v7 += v10 + 1;
            v10 = v9 - (v10 + 1);
          }
          v9 = v10;
          if (!v10)
          {
            v6 = *(_QWORD *)(a1 + 32);
            v12 = *(_QWORD *)(a1 + 40);
            goto LABEL_16;
          }
        }
      }
      v12 = *(_QWORD *)(a1 + 40);
LABEL_16:
      v13 = v30;
      v28 = v31;
      v29 = v32;
      v14 = v12 - v6;
      v15 = (unint64_t)(v12 - v6) >> 5;
      if (*(_DWORD *)(a1 + 24) == (_DWORD)v15 && (_DWORD)v15 != -1)
      {
        v17 = 2 * v15;
        if (2 * (int)v15 >= (v15 + 1000000))
          v17 = v15 + 1000000;
        if (v17 <= (int)v15 + 1)
          v18 = v15 + 1;
        else
          v18 = v17;
        if (v18 <= 8)
          v19 = 8;
        else
          v19 = v18;
        v20 = OOCAllocator_Realloc(*(_QWORD *)(a1 + 8), v6, 32 * v19, &v34);
        *(_QWORD *)(a1 + 32) = v20;
        if (v34)
          goto LABEL_3;
        v6 = v20;
        *(_DWORD *)(a1 + 24) = v19;
        v12 = v20 + (v14 & 0x1FFFFFFFE0);
      }
      *(_QWORD *)(a1 + 40) = v12 + 32;
      v21 = (v14 >> 5);
      v22 = (char *)(v6 + 32 * v7);
      v23 = v21 > v7;
      v24 = v21 - v7;
      if (!v23)
      {
        *(_QWORD *)v22 = v13;
        *((_QWORD *)v22 + 3) = v29;
        *(_OWORD *)(v22 + 8) = v28;
        return v34;
      }
      memmove(v22 + 32, v22, 32 * v24);
      v25 = v34;
      v26 = *(_QWORD *)(a1 + 32) + 32 * v7;
      *(_QWORD *)v26 = v13;
      *(_QWORD *)(v26 + 24) = v29;
      *(_OWORD *)(v26 + 8) = v28;
      if (!v25)
        return v34;
    }
  }
LABEL_3:
  if (v30)
    OOC_PlacementDeleteObject(*(_QWORD *)(a1 + 8), v30);
  if (v33)
    OOC_PlacementDeleteObject(*(_QWORD *)(a1 + 8), v33);
  return v34;
}

uint64_t LDOObject_SetType(uint64_t a1, char *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    result = OOC_PlacementDeleteObject(*(_QWORD *)(a1 + 8), v4);
    if ((_DWORD)result)
      return result;
    *v5 = 0;
  }
  if (a2)
    return PNEW_LDOString_ConFromCPtr(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 8), a2, v5);
  else
    return 0;
}

double LDOObject_SetU32Attribute(uint64_t a1, char *a2, int a3)
{
  int v5;
  double result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  int v31;

  v29 = 0uLL;
  v30 = 0;
  v28 = 0;
  v5 = __LDOObject_EnsureKeyWithEmptyValue((uint64_t *)a1, a2, &v28, (int *)&v29);
  v31 = v5;
  if (!v5)
  {
    DWORD1(v29) = a3;
    v7 = *(_QWORD *)(a1 + 40);
    v8 = 0;
    v9 = v7 - *(_QWORD *)(a1 + 32);
    if (v9)
    {
      v10 = v9 >> 5;
      while (1)
      {
        v11 = v10 >> 1;
        v12 = LDOString_CompareTo(v28, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32 * v8 + 32 * (v10 >> 1)));
        if (v12 < 1)
        {
          if ((v12 & 0x80000000) == 0)
          {
            v25 = *(_QWORD *)(a1 + 32) + 32 * (v11 + v8);
            result = *(double *)&v29;
            *(_OWORD *)(v25 + 8) = v29;
            *(_QWORD *)(v25 + 24) = v30;
            return result;
          }
        }
        else
        {
          v8 += v11 + 1;
          v11 = v10 - (v11 + 1);
        }
        v10 = v11;
        if (!v11)
        {
          v7 = *(_QWORD *)(a1 + 32);
          v13 = *(_QWORD *)(a1 + 40);
          goto LABEL_10;
        }
      }
    }
    v13 = *(_QWORD *)(a1 + 40);
LABEL_10:
    v14 = v28;
    v26 = v29;
    v27 = v30;
    v15 = v13 - v7;
    v16 = (unint64_t)(v13 - v7) >> 5;
    if (*(_DWORD *)(a1 + 24) == (_DWORD)v16 && (_DWORD)v16 != -1)
    {
      v18 = 2 * v16;
      if (2 * (int)v16 >= (v16 + 1000000))
        v18 = v16 + 1000000;
      if (v18 <= (int)v16 + 1)
        v19 = v16 + 1;
      else
        v19 = v18;
      if (v19 <= 8)
        v20 = 8;
      else
        v20 = v19;
      v7 = OOCAllocator_Realloc(*(_QWORD *)(a1 + 8), v7, 32 * v20, &v31);
      *(_QWORD *)(a1 + 32) = v7;
      v5 = v31;
      if (v31)
        goto LABEL_28;
      *(_DWORD *)(a1 + 24) = v20;
      v13 = v7 + (v15 & 0x1FFFFFFFE0);
    }
    *(_QWORD *)(a1 + 40) = v13 + 32;
    v21 = (v15 >> 5);
    v22 = v21 > v8;
    v23 = v21 - v8;
    if (v22)
    {
      memmove((void *)(v7 + 32 * v8 + 32), (const void *)(v7 + 32 * v8), 32 * v23);
      v7 = *(_QWORD *)(a1 + 32);
      v5 = v31;
    }
    else
    {
      v5 = 0;
    }
    v24 = v7 + 32 * v8;
    *(_QWORD *)v24 = v14;
    result = *(double *)&v26;
    *(_QWORD *)(v24 + 24) = v27;
    *(_OWORD *)(v24 + 8) = v26;
  }
LABEL_28:
  if (v5)
  {
    if (v28)
      OOC_PlacementDeleteObject(*(_QWORD *)(a1 + 8), v28);
  }
  return result;
}

uint64_t LDOObject_ToString(uint64_t a1, uint64_t *a2)
{
  uint64_t appended;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  unsigned int *v17;

  appended = PNEW_LDOString_Con(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 8), a2);
  if (!(_DWORD)appended)
  {
    v5 = *a2;
    appended = LDOString_AppendPrefixU32Suffix(v5, "  ID: ", *(_DWORD *)(a1 + 16), "\n");
    if (!(_DWORD)appended)
    {
      appended = LDOString_AppendPrefixStringSuffix(v5, "  Category: ", *(char **)(a1 + 48), "\n");
      if (!(_DWORD)appended)
      {
        appended = LDOString_AppendPrefixStringSuffix(v5, "  Type: ", *(char **)(a1 + 56), "\n");
        if (!(_DWORD)appended)
        {
          appended = LHString_Append(v5, "  Attributes:\n");
          if (!(_DWORD)appended)
          {
            v8 = *(_QWORD *)(a1 + 32);
            if (!v8 || v8 >= *(_QWORD *)(a1 + 40))
              return 0;
            while (1)
            {
              v9 = *(_DWORD *)(v8 + 8);
              v10 = *(_DWORD *)(v8 + 12);
              v11 = *(_DWORD *)(v8 + 16);
              v12 = *(_QWORD *)(v8 + 24);
              v13 = LDOString_AppendPrefixStringSuffix(v5, "    ", *(char **)v8, " = ");
              if ((_DWORD)v13)
                break;
              switch(v9)
              {
                case 0:
                  v14 = LDOString_AppendPrefixU32Suffix(v5, 0, v10, "\n");
                  goto LABEL_25;
                case 1:
                  v14 = LDOString_AppendPrefixS32Suffix(v5, 0, v11, "\n");
                  goto LABEL_25;
                case 2:
                  v14 = LDOString_AppendPrefixStringSuffix(v5, 0, (char *)v12, "\n");
                  goto LABEL_25;
                case 3:
                  v13 = LHString_Append(v5, "[");
                  if ((_DWORD)v13)
                    goto LABEL_29;
                  v17 = *(unsigned int **)(v12 + 8);
                  break;
                case 4:
                  v14 = LDOString_AppendPrefixBoolSuffix(v5, 0, v10 == 1, "\n");
                  goto LABEL_25;
                default:
                  v15 = v5;
                  v16 = "UNKNOWN TYPE OF ATTRIBUTE\n";
                  goto LABEL_23;
              }
              while ((unint64_t)v17 < *(_QWORD *)(v12 + 16))
              {
                v13 = LDOString_AppendPrefixU32Suffix(v5, 0, *v17, ", ");
                if ((_DWORD)v13)
                  goto LABEL_29;
                ++v17;
              }
              v15 = v5;
              v16 = "]\n";
LABEL_23:
              v14 = LHString_Append(v15, v16);
LABEL_25:
              appended = v14;
              if ((_DWORD)v14)
                goto LABEL_6;
              v8 += 32;
              if (v8 >= *(_QWORD *)(a1 + 40))
                return appended;
            }
LABEL_29:
            appended = v13;
          }
        }
      }
    }
LABEL_6:
    if (v5)
    {
      v6 = LDOString_BorrowAllocator(v5);
      OOC_PlacementDeleteObject(v6, v5);
    }
  }
  return appended;
}

uint64_t PNEW_LDOObject_Con(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;
  unsigned int v8;

  v8 = 0;
  v6 = OOCAllocator_Malloc(a1, 64, &v8);
  result = v8;
  if (!v8)
  {
    result = Object_Con((_QWORD *)v6);
    if ((_DWORD)result)
    {
      v8 = result;
      OOCAllocator_Free(a1, v6);
      *a3 = 0;
      return v8;
    }
    else
    {
      *(_QWORD *)v6 = &__LDOObject;
      *(_QWORD *)(v6 + 8) = a2;
      *(_QWORD *)(v6 + 48) = 0;
      *(_QWORD *)(v6 + 56) = 0;
      *(_DWORD *)(v6 + 16) = v6;
      *(_DWORD *)(v6 + 24) = 0;
      *(_QWORD *)(v6 + 32) = 0;
      *(_QWORD *)(v6 + 40) = 0;
      *a3 = v6;
    }
  }
  return result;
}

void *GetLDOObjectClass()
{
  return &__LDOObject;
}

uint64_t lua_checkstack(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v8;

  v8 = a2;
  v2 = a1[4];
  v3 = a1[2];
  v4 = a2;
  if (a2 >= (a1[6] - v3) >> 4)
  {
    if ((int)(((unint64_t)(v3 - a1[7]) >> 4) + 5) > 1000000 - a2
      || luaD_rawrunprotected((uint64_t)a1, (void (*)(uint64_t, uint64_t))growstack, (uint64_t)&v8))
    {
      return 0;
    }
    v3 = a1[2];
    v4 = v8;
  }
  v5 = v3 + 16 * v4;
  if (*(_QWORD *)(v2 + 8) < v5)
    *(_QWORD *)(v2 + 8) = v5;
  return 1;
}

uint64_t growstack(uint64_t a1, int *a2)
{
  return luaD_growstack(a1, *a2);
}

__n128 lua_xmove(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  __n128 *v4;
  __n128 result;

  if (a1 != a2)
  {
    *(_QWORD *)(a1 + 16) -= 16 * a3;
    if (a3 >= 1)
    {
      v3 = 0;
      v4 = *(__n128 **)(a2 + 16);
      do
      {
        result = *(__n128 *)(*(_QWORD *)(a1 + 16) + v3);
        *v4 = result;
        v4 = (__n128 *)(*(_QWORD *)(a2 + 16) + 16);
        *(_QWORD *)(a2 + 16) = v4;
        v3 += 16;
      }
      while (16 * a3 != v3);
    }
  }
  return result;
}

void *lua_version(uint64_t a1)
{
  if (a1)
    return *(void **)(*(_QWORD *)(a1 + 24) + 232);
  else
    return &lua_version_version;
}

uint64_t lua_absindex(uint64_t a1, uint64_t a2)
{
  if ((a2 - 1) >= 0xFFF0B9D8)
    return ((*(_QWORD *)(a1 + 16) - **(_QWORD **)(a1 + 32)) >> 4) + a2;
  return a2;
}

unint64_t lua_gettop(uint64_t a1)
{
  return (unint64_t)(*(_QWORD *)(a1 + 16) - **(_QWORD **)(a1 + 32) - 16) >> 4;
}

uint64_t lua_settop(uint64_t result, unsigned int a2)
{
  unint64_t v2;
  unint64_t i;

  if ((a2 & 0x80000000) != 0)
  {
    v2 = *(_QWORD *)(result + 16) + 16 * (int)(a2 + 1);
  }
  else
  {
    v2 = **(_QWORD **)(result + 32) + 16 * a2 + 16;
    for (i = *(_QWORD *)(result + 16); i < v2; i += 16)
      *(_DWORD *)(i + 8) = 0;
  }
  *(_QWORD *)(result + 16) = v2;
  return result;
}

uint64_t *lua_rotate(_QWORD *a1, int a2, int a3)
{
  unint64_t v4;
  uint64_t *result;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a1[2] - 16;
  result = index2addr(a1, a2);
  v6 = v4 - 16 * a3;
  if (a3 < 0)
    v6 = (unint64_t)&result[-2 * a3 - 2];
  if ((unint64_t)result < v6)
  {
    v7 = result;
    v8 = v6;
    do
    {
      v9 = *v7;
      v10 = v7[1];
      *(_OWORD *)v7 = *(_OWORD *)v8;
      v7 += 2;
      *(_QWORD *)v8 = v9;
      *(_QWORD *)(v8 + 8) = v10;
      v8 -= 16;
    }
    while ((unint64_t)v7 < v8);
  }
  v11 = (uint64_t *)(v6 + 16);
  if ((unint64_t)v11 < v4)
  {
    v12 = v4;
    do
    {
      v13 = *v11;
      v14 = v11[1];
      *(_OWORD *)v11 = *(_OWORD *)v12;
      v11 += 2;
      *(_QWORD *)v12 = v13;
      *(_QWORD *)(v12 + 8) = v14;
      v12 -= 16;
    }
    while ((unint64_t)v11 < v12);
  }
  while ((unint64_t)result < v4)
  {
    v15 = *result;
    v16 = result[1];
    *(_OWORD *)result = *(_OWORD *)v4;
    result += 2;
    *(_QWORD *)v4 = v15;
    *(_QWORD *)(v4 + 8) = v16;
    v4 -= 16;
  }
  return result;
}

uint64_t *index2addr(_QWORD *a1, int a2)
{
  uint64_t **v2;
  uint64_t *result;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v2 = (uint64_t **)a1[4];
  if (a2 < 1)
  {
    if (a2 >= -1000999)
    {
      return (uint64_t *)(a1[2] + 16 * a2);
    }
    else if (-1001000 == a2)
    {
      return (uint64_t *)(a1[3] + 64);
    }
    else
    {
      v4 = *v2;
      result = &luaO_nilobject_;
      if (*((_DWORD *)v4 + 2) != 22)
      {
        v5 = *v4;
        v6 = *(unsigned __int8 *)(v5 + 10);
        v7 = v5 + 16 * (-1001001 - a2) + 32;
        if (-1001000 - a2 <= v6)
          return (uint64_t *)v7;
      }
    }
  }
  else if ((unint64_t)&(*v2)[2 * a2] >= a1[2])
  {
    return &luaO_nilobject_;
  }
  else
  {
    return &(*v2)[2 * a2];
  }
  return result;
}

uint64_t *lua_copy(uint64_t a1, int a2, int a3)
{
  uint64_t *v5;
  uint64_t *result;
  uint64_t v7;

  v5 = index2addr((_QWORD *)a1, a2);
  result = index2addr((_QWORD *)a1, a3);
  *(_OWORD *)result = *(_OWORD *)v5;
  if (a3 <= -1001001 && (v5[1] & 0x40) != 0)
  {
    v7 = ***(_QWORD ***)(a1 + 32);
    if ((*(_BYTE *)(v7 + 9) & 4) != 0 && (*(_BYTE *)(*v5 + 9) & 3) != 0)
      return (uint64_t *)luaC_barrier_(a1, v7, *v5);
  }
  return result;
}

__n128 lua_pushvalue(_QWORD *a1, int a2)
{
  __n128 *v3;
  __n128 *v4;
  __n128 result;

  v3 = (__n128 *)a1[2];
  v4 = (__n128 *)index2addr(a1, a2);
  result = *v4;
  *v3 = *v4;
  a1[2] += 16;
  return result;
}

uint64_t lua_type(_QWORD *a1, int a2)
{
  uint64_t *v2;

  v2 = index2addr(a1, a2);
  if (v2 == &luaO_nilobject_)
    return 0xFFFFFFFFLL;
  else
    return v2[1] & 0xF;
}

char *lua_typename(uint64_t a1, int a2)
{
  return luaT_typenames_[a2 + 1];
}

BOOL lua_iscfunction(_QWORD *a1, int a2)
{
  int v2;

  v2 = *((_DWORD *)index2addr(a1, a2) + 2);
  return v2 == 22 || v2 == 102;
}

BOOL lua_isinteger(_QWORD *a1, int a2)
{
  return *((_DWORD *)index2addr(a1, a2) + 2) == 19;
}

uint64_t lua_isnumber(_QWORD *a1, int a2)
{
  uint64_t *v2;
  uint64_t v4;

  v2 = index2addr(a1, a2);
  if (*((_DWORD *)v2 + 2) == 3)
    return 1;
  v4 = 0;
  return luaV_tonumber_(v2, (double *)&v4);
}

BOOL lua_isstring(_QWORD *a1, int a2)
{
  return ((_DWORD)index2addr(a1, a2)[1] & 0xFu) - 3 < 2;
}

uint64_t lua_rawequal(_QWORD *a1, int a2, int a3)
{
  uint64_t *v5;
  uint64_t *v6;

  v5 = index2addr(a1, a2);
  v6 = index2addr(a1, a3);
  if (v5 == &luaO_nilobject_ || v6 == &luaO_nilobject_)
    return 0;
  else
    return luaV_equalobj(0, v5, v6);
}

uint64_t lua_compare(_QWORD *a1, int a2, int a3, int a4)
{
  uint64_t *v7;
  uint64_t *v8;

  v7 = index2addr(a1, a2);
  v8 = index2addr(a1, a3);
  if (v7 == &luaO_nilobject_ || v8 == &luaO_nilobject_)
    return 0;
  if (a4 == 2)
    return luaV_lessequal((uint64_t)a1, (uint64_t)v7, (uint64_t)v8);
  if (a4 != 1)
  {
    if (!a4)
      return luaV_equalobj((uint64_t)a1, v7, v8);
    return 0;
  }
  return luaV_lessthan((uint64_t)a1, (uint64_t)v7, (uint64_t)v8);
}

uint64_t lua_stringtonumber(uint64_t a1, char *__s1)
{
  uint64_t result;

  result = luaO_str2num(__s1, *(_QWORD *)(a1 + 16));
  if (result)
    *(_QWORD *)(a1 + 16) += 16;
  return result;
}

double lua_tonumberx(_QWORD *a1, int a2, int *a3)
{
  uint64_t *v4;
  int v5;
  double v7;

  v7 = 0.0;
  v4 = index2addr(a1, a2);
  if (*((_DWORD *)v4 + 2) == 3)
  {
    v7 = *(double *)v4;
    v5 = 1;
    if (!a3)
      return v7;
    goto LABEL_6;
  }
  v5 = luaV_tonumber_(v4, &v7);
  if (!v5)
  {
    v7 = 0.0;
    if (!a3)
      return v7;
    goto LABEL_6;
  }
  if (a3)
LABEL_6:
    *a3 = v5;
  return v7;
}

uint64_t lua_tointegerx(_QWORD *a1, int a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;

  v7 = 0;
  v4 = index2addr(a1, a2);
  if (*((_DWORD *)v4 + 2) == 19)
  {
    v7 = *v4;
    v5 = 1;
    if (!a3)
      return v7;
    goto LABEL_6;
  }
  v5 = luaV_tointeger(v4, &v7);
  if (!v5)
  {
    v7 = 0;
    if (!a3)
      return v7;
    goto LABEL_6;
  }
  if (a3)
LABEL_6:
    *a3 = v5;
  return v7;
}

uint64_t lua_toBOOLean(_QWORD *a1, int a2)
{
  uint64_t *v2;
  uint64_t result;

  v2 = index2addr(a1, a2);
  result = *((unsigned int *)v2 + 2);
  if ((_DWORD)result)
    return (_DWORD)result != 1 || *(_DWORD *)v2 != 0;
  return result;
}

uint64_t lua_tolstring(_QWORD *a1, int a2, _QWORD *a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = index2addr(a1, a2);
  if ((v6[1] & 0xF) == 3)
  {
    if (*(uint64_t *)(a1[3] + 24) >= 1)
      luaC_step((uint64_t)a1);
    v7 = index2addr(a1, a2);
    luaO_tostring((uint64_t)a1, (uint64_t)v7, v9, v10, v11, v12, v13, v14);
  }
  else
  {
    v7 = v6;
    if ((v6[1] & 0xF) != 4)
    {
      result = 0;
      if (a3)
        *a3 = 0;
      return result;
    }
  }
  if (a3)
  {
    v15 = *v7;
    if (*(_BYTE *)(*v7 + 8) == 4)
      v16 = *(unsigned __int8 *)(v15 + 11);
    else
      v16 = *(_QWORD *)(v15 + 16);
    *a3 = v16;
  }
  return *v7 + 24;
}

uint64_t lua_rawlen(_QWORD *a1, int a2)
{
  uint64_t *v2;
  uint64_t result;
  unsigned int v4;

  v2 = index2addr(a1, a2);
  result = 0;
  v4 = v2[1] & 0x3F;
  if (v4 > 6)
  {
    if (v4 == 7)
    {
      return *(_QWORD *)(*v2 + 24);
    }
    else if (v4 == 20)
    {
      return *(_QWORD *)(*v2 + 16);
    }
  }
  else if (v4 == 4)
  {
    return *(unsigned __int8 *)(*v2 + 11);
  }
  else if (v4 == 5)
  {
    return (int)luaH_getn(*v2);
  }
  return result;
}

uint64_t lua_touserdata(_QWORD *a1, int a2)
{
  uint64_t *v2;

  v2 = index2addr(a1, a2);
  if ((v2[1] & 0xF) == 2)
    return *v2;
  if ((v2[1] & 0xF) == 7)
    return *v2 + 40;
  return 0;
}

uint64_t lua_tothread(_QWORD *a1, int a2)
{
  uint64_t *v2;

  v2 = index2addr(a1, a2);
  if (*((_DWORD *)v2 + 2) == 72)
    return *v2;
  else
    return 0;
}

uint64_t lua_topointer(_QWORD *a1, int a2)
{
  uint64_t *v2;
  uint64_t result;
  int v4;

  v2 = index2addr(a1, a2);
  result = 0;
  v4 = v2[1] & 0x3F;
  switch(v4)
  {
    case 2:
    case 5:
    case 6:
    case 8:
      goto LABEL_2;
    case 3:
    case 4:
      return result;
    case 7:
      result = *v2 + 40;
      break;
    default:
      if (v4 == 22 || v4 == 38)
LABEL_2:
        result = *v2;
      break;
  }
  return result;
}

uint64_t lua_pushnil(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 16);
  *(_DWORD *)(v1 + 8) = 0;
  *(_QWORD *)(result + 16) = v1 + 16;
  return result;
}

uint64_t lua_pushnumber(uint64_t result, double a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 16);
  *(double *)v2 = a2;
  *(_DWORD *)(v2 + 8) = 3;
  *(_QWORD *)(result + 16) += 16;
  return result;
}

uint64_t lua_pushinteger(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)v2 = a2;
  *(_DWORD *)(v2 + 8) = 19;
  *(_QWORD *)(result + 16) += 16;
  return result;
}

uint64_t lua_pushlstring(_QWORD *a1, char *a2, size_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (*(uint64_t *)(a1[3] + 24) >= 1)
    luaC_step((uint64_t)a1);
  v6 = luaS_newlstr(a1, a2, a3);
  v7 = a1[2];
  *(_QWORD *)v7 = v6;
  *(_DWORD *)(v7 + 8) = *(unsigned __int8 *)(v6 + 8) | 0x40;
  a1[2] += 16;
  return v6 + 24;
}

uint64_t lua_pushstring(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  if (a2)
  {
    if (*(uint64_t *)(a1[3] + 24) >= 1)
      luaC_step((uint64_t)a1);
    v4 = luaS_new(a1, a2);
    v5 = a1[2];
    *(_QWORD *)v5 = v4;
    *(_DWORD *)(v5 + 8) = *(unsigned __int8 *)(v4 + 8) | 0x40;
    result = v4 + 24;
    v7 = a1[2];
  }
  else
  {
    result = 0;
    v7 = a1[2];
    *(_DWORD *)(v7 + 8) = 0;
  }
  a1[2] = v7 + 16;
  return result;
}

uint64_t lua_pushvfstring(uint64_t a1, char *a2, uint64_t *a3)
{
  if (*(uint64_t *)(*(_QWORD *)(a1 + 24) + 24) >= 1)
    luaC_step(a1);
  return luaO_pushvfstring(a1, a2, a3);
}

uint64_t lua_pushfstring(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(uint64_t *)(*(_QWORD *)(a1 + 24) + 24) >= 1)
    luaC_step(a1);
  return luaO_pushvfstring(a1, a2, &a9);
}

uint64_t lua_pushcclosure(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;

  v4 = result;
  if (a3)
  {
    if (*(uint64_t *)(*(_QWORD *)(result + 24) + 24) >= 1)
      luaC_step(result);
    result = luaF_newCclosure(v4, a3);
    *(_QWORD *)(result + 24) = a2;
    *(_QWORD *)(v4 + 16) -= 16 * a3;
    v6 = a3 - 1;
    v7 = 16 * a3;
    do
    {
      *(_OWORD *)(result + v7 + 16) = *(_OWORD *)(*(_QWORD *)(v4 + 16) + v7 - 16);
      v8 = v6--;
      v7 -= 16;
    }
    while (v8);
    v9 = *(_QWORD *)(v4 + 16);
    *(_QWORD *)v9 = result;
    v10 = 102;
  }
  else
  {
    v9 = *(_QWORD *)(result + 16);
    *(_QWORD *)v9 = a2;
    v10 = 22;
  }
  *(_DWORD *)(v9 + 8) = v10;
  *(_QWORD *)(v4 + 16) += 16;
  return result;
}

uint64_t lua_pushBOOLean(uint64_t result, int a2)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(result + 16);
  *v2 = a2 != 0;
  v2[2] = 1;
  *(_QWORD *)(result + 16) += 16;
  return result;
}

uint64_t lua_pushlightuserdata(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)v2 = a2;
  *(_DWORD *)(v2 + 8) = 2;
  *(_QWORD *)(result + 16) += 16;
  return result;
}

BOOL lua_pushthread(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v1 = a1;
  *(_DWORD *)(v1 + 8) = 72;
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) += 16;
  return *(_QWORD *)(v2 + 224) == a1;
}

uint64_t lua_getglobal(_QWORD *a1, char *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v4 = luaH_getint(*(_QWORD *)(a1[3] + 64), 2);
  v5 = a1[2];
  v6 = luaS_new(a1, a2);
  *(_QWORD *)v5 = v6;
  *(_DWORD *)(v5 + 8) = *(unsigned __int8 *)(v6 + 8) | 0x40;
  v7 = (uint64_t *)a1[2];
  a1[2] = v7 + 2;
  luaV_gettable((uint64_t)a1, (uint64_t)v4, v7, v7);
  return *(_DWORD *)(a1[2] - 8) & 0xF;
}

uint64_t lua_gettable(_QWORD *a1, int a2)
{
  uint64_t *v3;

  v3 = index2addr(a1, a2);
  luaV_gettable((uint64_t)a1, (uint64_t)v3, (uint64_t *)(a1[2] - 16), (_OWORD *)(a1[2] - 16));
  return *(_DWORD *)(a1[2] - 8) & 0xF;
}

uint64_t lua_getfield(_QWORD *a1, int a2, char *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  v5 = index2addr(a1, a2);
  v6 = a1[2];
  v7 = luaS_new(a1, a3);
  *(_QWORD *)v6 = v7;
  *(_DWORD *)(v6 + 8) = *(unsigned __int8 *)(v7 + 8) | 0x40;
  v8 = (uint64_t *)a1[2];
  a1[2] = v8 + 2;
  luaV_gettable((uint64_t)a1, (uint64_t)v5, v8, v8);
  return *(_DWORD *)(a1[2] - 8) & 0xF;
}

uint64_t lua_geti(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;

  v5 = index2addr(a1, a2);
  v6 = a1[2];
  *(_QWORD *)v6 = a3;
  *(_DWORD *)(v6 + 8) = 19;
  v7 = (uint64_t *)a1[2];
  a1[2] = v7 + 2;
  luaV_gettable((uint64_t)a1, (uint64_t)v5, v7, v7);
  return *(_DWORD *)(a1[2] - 8) & 0xF;
}

uint64_t lua_rawget(_QWORD *a1, int a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = index2addr(a1, a2);
  v4 = a1[2];
  *(_OWORD *)(v4 - 16) = *(_OWORD *)luaH_get(*v3, (uint64_t *)(v4 - 16));
  return *(_DWORD *)(a1[2] - 8) & 0xF;
}

uint64_t lua_rawgeti(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t *v5;
  _OWORD *v6;
  uint64_t v7;

  v5 = index2addr(a1, a2);
  v6 = (_OWORD *)a1[2];
  *v6 = *(_OWORD *)luaH_getint(*v5, a3);
  v7 = a1[2];
  a1[2] = v7 + 16;
  return *(_DWORD *)(v7 + 8) & 0xF;
}

uint64_t lua_rawgetp(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v9[2];

  v5 = index2addr(a1, a2);
  v9[0] = a3;
  v9[1] = 2;
  v6 = (_OWORD *)a1[2];
  *v6 = *(_OWORD *)luaH_get(*v5, v9);
  v7 = a1[2];
  a1[2] = v7 + 16;
  return *(_DWORD *)(v7 + 8) & 0xF;
}

_OWORD *lua_createtable(uint64_t a1, signed int a2, int a3)
{
  _OWORD *result;
  uint64_t v7;

  if (*(uint64_t *)(*(_QWORD *)(a1 + 24) + 24) >= 1)
    luaC_step(a1);
  result = (_OWORD *)luaH_new(a1);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v7 = result;
  *(_DWORD *)(v7 + 8) = 69;
  *(_QWORD *)(a1 + 16) += 16;
  if (a2 > 0 || a3 >= 1)
    return luaH_resize(a1, (uint64_t)result, a2, a3);
  return result;
}

uint64_t lua_getmetatable(_QWORD *a1, int a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = index2addr(a1, a2);
  if ((v3[1] & 0xF) == 7)
  {
    v4 = (uint64_t *)(*v3 + 16);
  }
  else if ((v3[1] & 0xF) == 5)
  {
    v4 = (uint64_t *)(*v3 + 40);
  }
  else
  {
    v4 = (uint64_t *)(a1[3] + 8 * (v3[1] & 0xF) + 440);
  }
  v5 = *v4;
  if (!v5)
    return 0;
  v6 = a1[2];
  *(_QWORD *)v6 = v5;
  *(_DWORD *)(v6 + 8) = 69;
  a1[2] += 16;
  return 1;
}

uint64_t lua_getuservalue(_QWORD *a1, int a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = index2addr(a1, a2);
  v4 = a1[2];
  v5 = *v3;
  *(_QWORD *)v4 = *(_QWORD *)(*v3 + 32);
  *(_DWORD *)(v4 + 8) = *(unsigned __int8 *)(v5 + 10);
  v6 = a1[2];
  a1[2] = v6 + 16;
  return *(_DWORD *)(v6 + 8) & 0xF;
}

uint64_t *lua_setglobal(_QWORD *a1, char *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *result;

  v4 = luaH_getint(*(_QWORD *)(a1[3] + 64), 2);
  v5 = a1[2];
  v6 = luaS_new(a1, a2);
  *(_QWORD *)v5 = v6;
  *(_DWORD *)(v5 + 8) = *(unsigned __int8 *)(v6 + 8) | 0x40;
  v7 = (uint64_t *)a1[2];
  a1[2] = v7 + 2;
  result = luaV_settable((uint64_t)a1, v4, v7, (_BYTE *)v7 - 16);
  a1[2] -= 32;
  return result;
}

uint64_t *lua_settable(_QWORD *a1, int a2)
{
  uint64_t *v3;
  uint64_t *result;

  v3 = index2addr(a1, a2);
  result = luaV_settable((uint64_t)a1, v3, (uint64_t *)(a1[2] - 32), (_BYTE *)(a1[2] - 16));
  a1[2] -= 32;
  return result;
}

uint64_t *lua_setfield(_QWORD *a1, int a2, char *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *result;

  v5 = index2addr(a1, a2);
  v6 = a1[2];
  v7 = luaS_new(a1, a3);
  *(_QWORD *)v6 = v7;
  *(_DWORD *)(v6 + 8) = *(unsigned __int8 *)(v7 + 8) | 0x40;
  v8 = (uint64_t *)a1[2];
  a1[2] = v8 + 2;
  result = luaV_settable((uint64_t)a1, v5, v8, (_BYTE *)v8 - 16);
  a1[2] -= 32;
  return result;
}

uint64_t *lua_seti(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *result;

  v5 = index2addr(a1, a2);
  v6 = a1[2];
  *(_QWORD *)v6 = a3;
  *(_DWORD *)(v6 + 8) = 19;
  v7 = (uint64_t *)a1[2];
  a1[2] = v7 + 2;
  result = luaV_settable((uint64_t)a1, v5, v7, (_BYTE *)v7 - 16);
  a1[2] -= 32;
  return result;
}

_OWORD *lua_rawset(_QWORD *a1, int a2)
{
  uint64_t *v3;
  uint64_t v4;
  _OWORD *result;
  uint64_t v6;

  v3 = index2addr(a1, a2);
  v4 = *v3;
  result = luaH_set((uint64_t)a1, *v3, (uint64_t *)(a1[2] - 32));
  *result = *(_OWORD *)(a1[2] - 16);
  *(_BYTE *)(v4 + 10) = 0;
  v6 = a1[2];
  if ((*(_BYTE *)(v6 - 8) & 0x40) != 0
    && (*(_BYTE *)(v4 + 9) & 4) != 0
    && (*(_BYTE *)(*(_QWORD *)(v6 - 16) + 9) & 3) != 0)
  {
    result = (_OWORD *)luaC_barrierback_((uint64_t)a1, v4);
    v6 = a1[2];
  }
  a1[2] = v6 - 32;
  return result;
}

void lua_rawseti(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v5 = index2addr(a1, a2);
  v6 = *v5;
  luaH_setint((uint64_t)a1, *v5, a3, (__n128 *)(a1[2] - 16));
  v7 = a1[2];
  if ((*(_BYTE *)(v7 - 8) & 0x40) != 0
    && (*(_BYTE *)(v6 + 9) & 4) != 0
    && (*(_BYTE *)(*(_QWORD *)(v7 - 16) + 9) & 3) != 0)
  {
    luaC_barrierback_((uint64_t)a1, v6);
    v7 = a1[2];
  }
  a1[2] = v7 - 16;
}

_OWORD *lua_rawsetp(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t v5;
  _OWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = 0;
  v5 = *index2addr(a1, a2);
  v8 = a3;
  LODWORD(v9) = 2;
  result = luaH_set((uint64_t)a1, v5, &v8);
  *result = *(_OWORD *)(a1[2] - 16);
  v7 = a1[2];
  if ((*(_BYTE *)(v7 - 8) & 0x40) != 0
    && (*(_BYTE *)(v5 + 9) & 4) != 0
    && (*(_BYTE *)(*(_QWORD *)(v7 - 16) + 9) & 3) != 0)
  {
    result = (_OWORD *)luaC_barrierback_((uint64_t)a1, v5);
    v7 = a1[2];
  }
  a1[2] = v7 - 16;
  return result;
}

uint64_t lua_setmetatable(uint64_t *a1, int a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = index2addr(a1, a2);
  v4 = v3;
  v5 = a1[2];
  if (*(_DWORD *)(v5 - 8))
    v6 = *(_QWORD *)(v5 - 16);
  else
    v6 = 0;
  if ((v3[1] & 0xF) == 7)
  {
    *(_QWORD *)(*v3 + 16) = v6;
    if (!v6)
      goto LABEL_14;
  }
  else
  {
    if ((v3[1] & 0xF) != 5)
    {
      *(_QWORD *)(a1[3] + 8 * (v3[1] & 0xF) + 440) = v6;
      goto LABEL_14;
    }
    *(_QWORD *)(*v3 + 40) = v6;
    if (!v6)
      goto LABEL_14;
  }
  v7 = *v3;
  if ((*(_BYTE *)(*v3 + 9) & 4) != 0 && (*(_BYTE *)(v6 + 9) & 3) != 0)
  {
    luaC_barrier_((uint64_t)a1, v7, v6);
    v7 = *v4;
  }
  luaC_checkfinalizer(a1, v7, v6);
LABEL_14:
  a1[2] -= 16;
  return 1;
}

uint64_t *lua_setuservalue(_QWORD *a1, int a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = index2addr(a1, a2);
  v4 = a1[2];
  v5 = *result;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(v4 - 16);
  *(_BYTE *)(v5 + 10) = *(_DWORD *)(v4 - 8);
  v6 = a1[2];
  if ((*(_BYTE *)(v6 - 8) & 0x40) != 0 && (*(_BYTE *)(*result + 9) & 4) != 0)
  {
    v7 = *(_QWORD *)(v6 - 16);
    if ((*(_BYTE *)(v7 + 9) & 3) != 0)
    {
      result = (uint64_t *)luaC_barrier_((uint64_t)a1, *result, v7);
      v6 = a1[2];
    }
  }
  a1[2] = v6 - 16;
  return result;
}

uint64_t lua_callk(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  char *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;

  v7 = (char *)(*(_QWORD *)(a1 + 16) + 16 * ~a2);
  if (a5 && !*(_WORD *)(a1 + 196))
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) = a5;
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48) = a4;
    v8 = 1;
  }
  else
  {
    v8 = 0;
  }
  result = luaD_call(a1, v7, a3, v8);
  if (a3 == -1)
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)(v10 + 8) < v11)
      *(_QWORD *)(v10 + 8) = v11;
  }
  return result;
}

uint64_t lua_pcallk(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  char *v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;

  if (a4)
    v11 = (char *)index2addr((_QWORD *)a1, a4) - *(_QWORD *)(a1 + 56);
  else
    v11 = 0;
  v12 = (char *)(*(_QWORD *)(a1 + 16) + 16 * ~a2);
  v17 = v12;
  v18 = 0;
  if (a6 && !*(_WORD *)(a1 + 196))
  {
    v14 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(v14 + 32) = a6;
    *(_QWORD *)(v14 + 48) = a5;
    *(_QWORD *)(v14 + 56) = &v12[-*(_QWORD *)(a1 + 56)];
    *(_QWORD *)(v14 + 40) = *(_QWORD *)(a1 + 176);
    *(_QWORD *)(a1 + 176) = v11;
    *(_BYTE *)(v14 + 66) |= 0x10u;
    luaD_call(a1, v12, a3, 1);
    result = 0;
    *(_BYTE *)(v14 + 66) &= ~0x10u;
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(v14 + 40);
  }
  else
  {
    LODWORD(v18) = a3;
    result = luaD_pcall(a1, (void (*)(uint64_t, uint64_t))f_call, (uint64_t)&v17, (uint64_t)&v12[-*(_QWORD *)(a1 + 56)], (uint64_t)v11);
  }
  if (a3 == -1)
  {
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)(v15 + 8) < v16)
      *(_QWORD *)(v15 + 8) = v16;
  }
  return result;
}

uint64_t f_call(uint64_t a1, uint64_t a2)
{
  return luaD_call(a1, *(char **)a2, *(_DWORD *)(a2 + 8), 0);
}

uint64_t lua_load(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5)
{
  const char *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;

  v16 = 0;
  memset(v15, 0, sizeof(v15));
  if (a4)
    v7 = a4;
  else
    v7 = "?";
  luaZ_init(a1, v15, a2, a3);
  v8 = luaD_protectedparser(a1, (uint64_t)v15, (uint64_t)v7, a5);
  if (!(_DWORD)v8)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 16) - 16);
    if (*(_BYTE *)(v10 + 10))
    {
      *(_OWORD *)**(_QWORD **)(v10 + 32) = *(_OWORD *)luaH_getint(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 64), 2);
      v11 = *(uint64_t **)(v10 + 32);
      v14 = *v11;
      v12 = v11 + 2;
      v13 = (_QWORD *)v14;
      if ((*(_BYTE *)(v14 + 8) & 0x40) != 0 && v13 == v12)
        luaC_upvalbarrier_(a1, *(uint64_t ***)(v10 + 32));
    }
  }
  return v8;
}

uint64_t lua_dump(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, int a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v4 - 8) == 70)
    return luaU_dump(a1, *(_QWORD *)(*(_QWORD *)(v4 - 16) + 24), a2, a3, a4);
  else
    return 1;
}

uint64_t lua_status(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 10);
}

uint64_t lua_gc(uint64_t a1, int a2, int a3)
{
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;
  int v8;

  result = 0xFFFFFFFFLL;
  v5 = *(_QWORD *)(a1 + 24);
  switch(a2)
  {
    case 0:
      result = 0;
      *(_BYTE *)(v5 + 87) = 0;
      return result;
    case 1:
      luaE_setdebt(*(_QWORD *)(a1 + 24), 0);
      result = 0;
      *(_BYTE *)(v5 + 87) = 1;
      return result;
    case 2:
      luaC_fullgc(a1, 0);
      return 0;
    case 3:
      return (*(_QWORD *)(v5 + 24) + *(_QWORD *)(v5 + 16)) >> 10;
    case 4:
      return (*(_DWORD *)(v5 + 24) + *(_DWORD *)(v5 + 16)) & 0x3FF;
    case 5:
      v6 = *(_BYTE *)(v5 + 87);
      *(_BYTE *)(v5 + 87) = 1;
      if (a3)
      {
        v7 = *(_QWORD *)(v5 + 24) + ((uint64_t)a3 << 10);
        luaE_setdebt(v5, v7);
        if (*(uint64_t *)(*(_QWORD *)(a1 + 24) + 24) >= 1)
          luaC_step(a1);
        *(_BYTE *)(v5 + 87) = v6;
        if (v7 < 1)
          return 0;
      }
      else
      {
        luaE_setdebt(v5, -2400);
        luaC_step(a1);
        *(_BYTE *)(v5 + 87) = v6;
      }
      return *(unsigned __int8 *)(v5 + 85) == 7;
    case 6:
      result = *(unsigned int *)(v5 + 204);
      *(_DWORD *)(v5 + 204) = a3;
      return result;
    case 7:
      result = *(unsigned int *)(v5 + 208);
      if (a3 <= 40)
        v8 = 40;
      else
        v8 = a3;
      *(_DWORD *)(v5 + 208) = v8;
      return result;
    case 9:
      return *(unsigned __int8 *)(v5 + 87);
    default:
      return result;
  }
}

uint64_t lua_error(_QWORD *a1)
{
  luaG_errormsg(a1);
  return 0;
}

uint64_t lua_next(_QWORD *a1, int a2)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;

  v3 = index2addr(a1, a2);
  result = luaH_next(a1, *v3, (uint64_t *)(a1[2] - 16));
  v5 = -16;
  if ((_DWORD)result)
    v5 = 16;
  a1[2] += v5;
  return result;
}

uint64_t lua_concat(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;

  v9 = result;
  if (a2 < 2)
  {
    if (!a2)
    {
      v10 = *(_QWORD *)(result + 16);
      result = luaS_newlstr((_QWORD *)result, &byte_1DEBD87CE, 0);
      *(_QWORD *)v10 = result;
      *(_DWORD *)(v10 + 8) = *(unsigned __int8 *)(result + 8) | 0x40;
      *(_QWORD *)(v9 + 16) += 16;
    }
  }
  else
  {
    if (*(uint64_t *)(*(_QWORD *)(result + 24) + 24) >= 1)
      luaC_step(result);
    return luaV_concat(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  return result;
}

uint64_t lua_len(_QWORD *a1, int a2)
{
  uint64_t *v3;
  uint64_t result;

  v3 = index2addr(a1, a2);
  result = luaV_objlen((uint64_t)a1, a1[2], v3);
  a1[2] += 16;
  return result;
}

uint64_t lua_getallocf(uint64_t a1, _QWORD *a2)
{
  if (a2)
    *a2 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  return **(_QWORD **)(a1 + 24);
}

uint64_t lua_newuserdata(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if (*(uint64_t *)(a1[3] + 24) >= 1)
    luaC_step((uint64_t)a1);
  v4 = luaS_newudata(a1, a2);
  v5 = a1[2];
  *(_QWORD *)v5 = v4;
  *(_DWORD *)(v5 + 8) = 71;
  a1[2] += 16;
  return v4 + 40;
}

__n128 lua_getupvalue(_QWORD *a1, int a2, int a3)
{
  uint64_t *v5;
  __n128 result;
  __n128 *v7;

  v7 = 0;
  v5 = index2addr(a1, a2);
  if (aux_upvalue(v5, a3, &v7, 0, 0))
  {
    result = *v7;
    *(__n128 *)a1[2] = *v7;
    a1[2] += 16;
  }
  return result;
}

char *aux_upvalue(_DWORD *a1, int a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  if ((a1[2] & 0x3F) != 6)
  {
    if ((a1[2] & 0x3F) == 0x26 && a2 >= 1)
    {
      v5 = *(_QWORD *)a1;
      if (*(unsigned __int8 *)(*(_QWORD *)a1 + 10) >= a2)
      {
        *a3 = v5 + 16 * (a2 - 1) + 32;
        if (a4)
          *a4 = v5;
        return &byte_1DEBD87CE;
      }
    }
    return 0;
  }
  v7 = (a2 - 1);
  if (a2 < 1)
    return 0;
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (*(_DWORD *)(v8 + 16) < a2)
    return 0;
  v9 = *(_QWORD *)a1 + 8 * v7;
  v11 = *(_QWORD **)(v9 + 32);
  v10 = (_QWORD *)(v9 + 32);
  *a3 = *v11;
  if (a5)
    *a5 = *v10;
  v12 = *(_QWORD *)(*(_QWORD *)(v8 + 88) + 16 * v7);
  if (v12)
    return (char *)(v12 + 24);
  else
    return "(*no name)";
}

char *lua_setupvalue(_QWORD *a1, int a2, int a3)
{
  uint64_t *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v11;
  uint64_t v12;
  _OWORD *v13;

  v12 = 0;
  v13 = 0;
  v11 = 0;
  v5 = index2addr(a1, a2);
  v6 = aux_upvalue(v5, a3, &v13, &v12, &v11);
  if (v6)
  {
    v7 = a1[2];
    a1[2] = v7 - 16;
    v8 = v12;
    *v13 = *(_OWORD *)(v7 - 16);
    if (v8)
    {
      v9 = a1[2];
      if ((*(_BYTE *)(v9 + 8) & 0x40) != 0
        && (*(_BYTE *)(v8 + 9) & 4) != 0
        && (*(_BYTE *)(*(_QWORD *)v9 + 9) & 3) != 0)
      {
        luaC_barrier_((uint64_t)a1, v8, *(_QWORD *)v9);
      }
    }
    else if (v11 && ((*v11)[1] & 0x40) != 0 && *v11 == (uint64_t *)(v11 + 2))
    {
      luaC_upvalbarrier_((uint64_t)a1, v11);
    }
  }
  return v6;
}

uint64_t lua_upvalueid(_QWORD *a1, int a2, int a3)
{
  uint64_t *v4;

  v4 = index2addr(a1, a2);
  if ((v4[1] & 0x3F) == 0x26)
    return *v4 + 16 * a3 + 16;
  if ((v4[1] & 0x3F) == 6)
    return *(_QWORD *)(*v4 + 8 * a3 + 24);
  return 0;
}

uint64_t lua_upvaluejoin(_QWORD *a1, int a2, int a3, int a4, int a5)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t ***v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t **v14;
  uint64_t *v15;

  v8 = *index2addr(a1, a2) + 8 * a3;
  v9 = index2addr(a1, a4);
  v11 = *(_QWORD **)(v8 + 24);
  v10 = (uint64_t ***)(v8 + 24);
  v12 = *v9 + 8 * a5;
  result = luaC_upvdeccount((uint64_t)a1, v11);
  v14 = *(uint64_t ***)(v12 + 24);
  *v10 = v14;
  v15 = *v14;
  v14[1] = (uint64_t *)((char *)v14[1] + 1);
  if (v15 != (uint64_t *)(v14 + 2))
  {
    *((_DWORD *)v14 + 6) = 1;
    v14 = *v10;
    v15 = **v10;
  }
  if ((v15[1] & 0x40) != 0 && v15 == (uint64_t *)(v14 + 2))
    return luaC_upvalbarrier_((uint64_t)a1, v14);
  return result;
}

uint64_t luaL_traceback(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  _QWORD *v49;
  char *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _OWORD v69[5];
  _OWORD v70[8];
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v68 = 0u;
  memset(v69, 0, sizeof(v69));
  v66 = 0u;
  v67 = 0u;
  v8 = lua_gettop((uint64_t)a1);
  v9 = 1;
  v10 = 1;
  memset(v70, 0, sizeof(v70));
  do
  {
    v11 = v10;
    v12 = v9;
    v13 = lua_getstack(a2, v10, (uint64_t)v70);
    v10 = 2 * v11;
    v9 = v11;
  }
  while (v13);
  while (v12 < v11)
  {
    v20 = v12 + v11;
    if (v12 + v11 < 0 != __OFADD__(v12, v11))
      ++v20;
    v21 = v20 >> 1;
    if (lua_getstack(a2, v20 >> 1, (uint64_t)v70))
      v12 = v21 + 1;
    else
      v11 = v21;
  }
  if (v11 <= 23)
    v22 = 0;
  else
    v22 = 12;
  if (a3)
    lua_pushfstring((uint64_t)a1, "%s\n", v14, v15, v16, v17, v18, v19, a3);
  lua_pushstring(a1, "stack traceback:");
  if (lua_getstack(a2, a4, (uint64_t)&v66))
  {
    while (++a4 == v22)
    {
      lua_pushstring(a1, "\n\t...");
      a4 = v11 - 11;
LABEL_32:
      if (!lua_getstack(a2, a4, (uint64_t)&v66))
        goto LABEL_35;
    }
    lua_getinfo(a2, "Slnt", (uint64_t)&v66);
    lua_pushfstring((uint64_t)a1, "\n\t%s:", v23, v24, v25, v26, v27, v28, (uint64_t)v69 + 8);
    if (SDWORD2(v68) >= 1)
      lua_pushfstring((uint64_t)a1, "%d:", v29, v30, v31, v32, v33, v34, DWORD2(v68));
    lua_pushstring(a1, " in ");
    if (pushglobalfuncname(a1, (uint64_t)&v66))
    {
      v41 = lua_tolstring(a1, -1, 0);
      lua_pushfstring((uint64_t)a1, "function '%s'", v42, v43, v44, v45, v46, v47, v41);
      lua_rotate(a1, -2, -1);
      lua_settop((uint64_t)a1, 0xFFFFFFFE);
    }
    else if (*(_BYTE *)v67)
    {
      lua_pushfstring((uint64_t)a1, "%s '%s'", v35, v36, v37, v38, v39, v40, v67);
    }
    else
    {
      v48 = **((_BYTE **)&v67 + 1);
      if (v48 == 67)
      {
        v49 = a1;
        v50 = "?";
      }
      else
      {
        if (v48 != 109)
        {
          lua_pushfstring((uint64_t)a1, "function <%s:%d>", v35, v36, v37, v38, v39, v40, (uint64_t)v69 + 8);
          goto LABEL_29;
        }
        v49 = a1;
        v50 = "main chunk";
      }
      lua_pushstring(v49, v50);
    }
LABEL_29:
    if (BYTE7(v69[0]))
      lua_pushstring(a1, "\n\t(...tail calls...)");
    v51 = lua_gettop((uint64_t)a1);
    lua_concat((uint64_t)a1, v51 - v8, v52, v53, v54, v55, v56, v57);
    goto LABEL_32;
  }
LABEL_35:
  v58 = lua_gettop((uint64_t)a1);
  return lua_concat((uint64_t)a1, v58 - v8, v59, v60, v61, v62, v63, v64);
}

uint64_t luaL_argerror(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  __int128 v18;
  char *__s1[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  *(_OWORD *)__s1 = 0u;
  if (!lua_getstack((uint64_t)a1, 0, (uint64_t)&v18))
    return luaL_error(a1, "bad argument #%d (%s)", v4, v5, v6, v7, v8, v9, a2);
  lua_getinfo((uint64_t)a1, "n", (uint64_t)&v18);
  if (!strcmp(__s1[0], "method"))
  {
    a2 = (a2 - 1);
    if (!(_DWORD)a2)
      return luaL_error(a1, "calling '%s' on bad self (%s)", v10, v11, v12, v13, v14, v15, *((uint64_t *)&v18 + 1));
  }
  if (!*((_QWORD *)&v18 + 1))
  {
    if (pushglobalfuncname(a1, (uint64_t)&v18))
      v16 = (const char *)lua_tolstring(a1, -1, 0);
    else
      v16 = "?";
    *((_QWORD *)&v18 + 1) = v16;
  }
  return luaL_error(a1, "bad argument #%d to '%s' (%s)", v10, v11, v12, v13, v14, v15, a2);
}

uint64_t luaL_error(_QWORD *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  luaL_where(a1, 1);
  lua_pushvfstring((uint64_t)a1, a2, &a9);
  lua_concat((uint64_t)a1, 2, v11, v12, v13, v14, v15, v16);
  return lua_error(a1);
}

uint64_t pushglobalfuncname(_QWORD *a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v4 = lua_gettop((uint64_t)a1);
  lua_getinfo((uint64_t)a1, "f", a2);
  lua_getfield(a1, -1001000, "_LOADED");
  v5 = v4 + 1;
  if (findfield(a1, v4 + 1, 2))
  {
    v6 = lua_tolstring(a1, -1, 0);
    if (!strncmp((const char *)v6, "_G.", 3uLL))
    {
      lua_pushstring(a1, (char *)(v6 + 3));
      lua_rotate(a1, -2, -1);
      lua_settop((uint64_t)a1, 0xFFFFFFFE);
    }
    lua_copy((uint64_t)a1, -1, v5);
    v7 = 1;
    v4 = -3;
  }
  else
  {
    v7 = 0;
  }
  lua_settop((uint64_t)a1, v4);
  return v7;
}

uint64_t luaL_where(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v10[2];
  __int128 v11;
  _OWORD v12[5];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v11 = 0u;
  memset(v12, 0, sizeof(v12));
  memset(v10, 0, sizeof(v10));
  if (lua_getstack((uint64_t)a1, a2, (uint64_t)v10)
    && (lua_getinfo((uint64_t)a1, "Sl", (uint64_t)v10), SDWORD2(v11) >= 1))
  {
    return lua_pushfstring((uint64_t)a1, "%s:%d: ", v3, v4, v5, v6, v7, v8, (uint64_t)v12 + 8);
  }
  else
  {
    return lua_pushstring(a1, &byte_1DEBD87CE);
  }
}

uint64_t luaL_newmetatable(_QWORD *a1, char *a2)
{
  if (lua_getfield(a1, -1001000, a2))
    return 0;
  lua_settop((uint64_t)a1, 0xFFFFFFFE);
  lua_createtable((uint64_t)a1, 0, 0);
  lua_pushstring(a1, a2);
  lua_setfield(a1, -2, "__name");
  lua_pushvalue(a1, -1);
  lua_setfield(a1, -1001000, a2);
  return 1;
}

uint64_t luaL_testudata(_QWORD *a1, int a2, char *a3)
{
  uint64_t v6;
  unsigned int v7;

  v6 = lua_touserdata(a1, a2);
  if (v6)
  {
    lua_getfield(a1, -1001000, a3);
    if (lua_getmetatable(a1, a2))
    {
      v7 = -3;
      while (!lua_rawequal(a1, -1, v7 + 1))
      {
        --v7;
        if (!lua_getmetatable(a1, -1))
        {
          v6 = 0;
          break;
        }
      }
    }
    else
    {
      v6 = 0;
      v7 = -3;
    }
    lua_settop((uint64_t)a1, v7);
  }
  return v6;
}

uint64_t luaL_checkudata(_QWORD *a1, uint64_t a2, char *a3)
{
  uint64_t v6;

  v6 = luaL_testudata(a1, a2, a3);
  if (!v6)
    typeerror(a1, a2, (uint64_t)a3);
  return v6;
}

uint64_t typeerror(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if (luaL_getmetafield(a1, a2, "__name") == 4)
  {
    lua_tolstring(a1, -1, 0);
  }
  else if (lua_type(a1, a2) != 2)
  {
    v12 = lua_type(a1, a2);
    lua_typename((uint64_t)a1, v12);
  }
  lua_pushfstring((uint64_t)a1, "%s expected, got %s", v6, v7, v8, v9, v10, v11, a3);
  return luaL_argerror(a1, a2);
}

uint64_t luaL_checkoption(_QWORD *a1, uint64_t a2, const char *a3, const char **a4)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char **v16;

  if (!a3 || (v7 = a3, (int)lua_type(a1, a2) >= 1))
    v7 = (const char *)luaL_checklstring(a1, a2, 0);
  v14 = *a4;
  if (*a4)
  {
    v15 = 0;
    v16 = a4 + 1;
    while (strcmp(v14, v7))
    {
      v14 = v16[v15++];
      if (!v14)
        goto LABEL_8;
    }
    return v15;
  }
  else
  {
LABEL_8:
    lua_pushfstring((uint64_t)a1, "invalid option '%s'", v8, v9, v10, v11, v12, v13, (uint64_t)v7);
    return luaL_argerror(a1, a2);
  }
}

uint64_t luaL_optlstring(_QWORD *a1, uint64_t a2, const char *a3, size_t *a4)
{
  size_t v9;

  if ((int)lua_type(a1, a2) > 0)
    return luaL_checklstring(a1, a2, a4);
  if (a4)
  {
    if (a3)
      v9 = strlen(a3);
    else
      v9 = 0;
    *a4 = v9;
  }
  return (uint64_t)a3;
}

uint64_t luaL_checklstring(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  char *v6;

  v5 = lua_tolstring(a1, a2, a3);
  if (!v5)
  {
    v6 = lua_typename((uint64_t)a1, 4);
    typeerror(a1, a2, (uint64_t)v6);
  }
  return v5;
}

uint64_t luaL_checkstack(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = lua_checkstack(a1, a2 + 20);
  if (!(_DWORD)result)
  {
    if (a3)
      return luaL_error(a1, "stack overflow (%s)", v12, v13, v14, v15, v16, v17, a3);
    else
      return luaL_error(a1, "stack overflow", v12, v13, v14, v15, v16, v17, a9);
  }
  return result;
}

uint64_t luaL_checktype(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t result;
  char *v7;

  result = lua_type(a1, a2);
  if ((_DWORD)result != a3)
  {
    v7 = lua_typename((uint64_t)a1, a3);
    return typeerror(a1, a2, (uint64_t)v7);
  }
  return result;
}

uint64_t luaL_checkany(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  result = lua_type(a1, a2);
  if ((_DWORD)result == -1)
    return luaL_argerror(a1, a2);
  return result;
}

double luaL_checknumber(_QWORD *a1, uint64_t a2)
{
  double v4;
  char *v5;
  int v7;

  v7 = 0;
  v4 = lua_tonumberx(a1, a2, &v7);
  if (!v7)
  {
    v5 = lua_typename((uint64_t)a1, 3);
    typeerror(a1, a2, (uint64_t)v5);
  }
  return v4;
}

uint64_t luaL_checkinteger(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  int v7;

  v7 = 0;
  v4 = lua_tointegerx(a1, a2, &v7);
  if (!v7)
  {
    if (lua_isnumber(a1, a2))
    {
      luaL_argerror(a1, a2);
    }
    else
    {
      v5 = lua_typename((uint64_t)a1, 3);
      typeerror(a1, a2, (uint64_t)v5);
    }
  }
  return v4;
}

uint64_t luaL_optinteger(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  if ((int)lua_type(a1, a2) < 1)
    return a3;
  else
    return luaL_checkinteger(a1, a2);
}

char *luaL_prepbuffsize(const void **a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  char *v16;
  uint64_t v18;

  v10 = (char *)a1[1];
  v9 = (unint64_t)a1[2];
  if ((unint64_t)&v10[-v9] >= a2)
  {
    v16 = (char *)*a1;
  }
  else
  {
    v11 = (char *)a1[3];
    v12 = 2 * (_QWORD)v10;
    if (v12 - v9 >= a2)
      v13 = v12;
    else
      v13 = v9 + a2;
    v15 = v13 >= v9;
    v14 = v13 - v9;
    v15 = v15 && v14 >= a2;
    if (!v15)
      luaL_error(a1[3], "buffer too large", a3, a4, a5, a6, a7, a8, v18);
    v16 = (char *)lua_newuserdata(v11, v13);
    memcpy(v16, *a1, (size_t)a1[2]);
    if (*a1 != a1 + 4)
    {
      lua_rotate(v11, -2, -1);
      lua_settop((uint64_t)v11, 0xFFFFFFFE);
    }
    *a1 = v16;
    a1[1] = (const void *)v13;
    v9 = (unint64_t)a1[2];
  }
  return &v16[v9];
}

void *luaL_addlstring(uint64_t a1, const void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v11;
  void *result;

  v11 = luaL_prepbuffsize((const void **)a1, a3, a3, a4, a5, a6, a7, a8);
  result = memcpy(v11, a2, a3);
  *(_QWORD *)(a1 + 16) += a3;
  return result;
}

void *luaL_addstring(uint64_t a1, char *__s)
{
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *result;

  v4 = strlen(__s);
  v11 = luaL_prepbuffsize((const void **)a1, v4, v5, v6, v7, v8, v9, v10);
  result = memcpy(v11, __s, v4);
  *(_QWORD *)(a1 + 16) += v4;
  return result;
}

uint64_t luaL_pushresult(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;

  v2 = *(_QWORD **)(a1 + 24);
  result = lua_pushlstring(v2, *(char **)a1, *(_QWORD *)(a1 + 16));
  if (*(_QWORD *)a1 != a1 + 32)
  {
    lua_rotate(v2, -2, -1);
    return lua_settop((uint64_t)v2, 0xFFFFFFFE);
  }
  return result;
}

uint64_t luaL_pushresultsize(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) += a2;
  return luaL_pushresult(a1);
}

uint64_t luaL_addvalue(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  size_t v10;
  char *v11;
  int v12;
  size_t v14;

  v2 = *(_QWORD **)(a1 + 24);
  v14 = 0;
  v9 = (const void *)lua_tolstring(v2, -1, &v14);
  if (*(_QWORD *)a1 != a1 + 32)
    lua_rotate(v2, -2, 1);
  v10 = v14;
  v11 = luaL_prepbuffsize((const void **)a1, v14, v3, v4, v5, v6, v7, v8);
  memcpy(v11, v9, v10);
  *(_QWORD *)(a1 + 16) += v10;
  if (*(_QWORD *)a1 == a1 + 32)
    v12 = -1;
  else
    v12 = -2;
  lua_rotate(v2, v12, -1);
  return lua_settop((uint64_t)v2, 0xFFFFFFFE);
}

double luaL_buffinit(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)(a2 + 24) = a1;
  *(_QWORD *)a2 = a2 + 32;
  *(_QWORD *)&result = 0x2000;
  *(_OWORD *)(a2 + 8) = xmmword_1DEC64810;
  return result;
}

char *luaL_buffinitsize(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_QWORD *)(a2 + 24) = a1;
  *(_QWORD *)a2 = a2 + 32;
  *(_OWORD *)(a2 + 8) = xmmword_1DEC64810;
  return luaL_prepbuffsize((const void **)a2, a3, a3, a4, a5, a6, a7, a8);
}

uint64_t luaL_loadbufferx(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5)
{
  _QWORD v6[2];

  v6[0] = a2;
  v6[1] = a3;
  return lua_load(a1, (uint64_t)getS, (uint64_t)v6, a4, a5);
}

uint64_t getS(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;

  v3 = a2[1];
  if (!v3)
    return 0;
  *a3 = v3;
  a2[1] = 0;
  return *a2;
}

uint64_t luaL_getmetafield(_QWORD *a1, int a2, char *a3)
{
  uint64_t v5;
  unsigned int v6;

  if (!lua_getmetatable(a1, a2))
    return 0;
  lua_pushstring(a1, a3);
  v5 = lua_rawget(a1, -2);
  if ((_DWORD)v5)
  {
    v6 = -2;
    lua_rotate(a1, -2, -1);
  }
  else
  {
    v6 = -3;
  }
  lua_settop((uint64_t)a1, v6);
  return v5;
}

uint64_t luaL_callmeta(_QWORD *a1, uint64_t a2, char *a3)
{
  int v5;
  uint64_t v6;

  v5 = lua_absindex((uint64_t)a1, a2);
  if (!luaL_getmetafield(a1, v5, a3))
    return 0;
  lua_pushvalue(a1, v5);
  v6 = 1;
  lua_callk((uint64_t)a1, 1, 1, 0, 0);
  return v6;
}

uint64_t luaL_len(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;

  v12 = 0;
  lua_len(a1, a2);
  v9 = lua_tointegerx(a1, -1, &v12);
  if (!v12)
    luaL_error(a1, "object length is not an integer", v3, v4, v5, v6, v7, v8, v11);
  lua_settop((uint64_t)a1, 0xFFFFFFFE);
  return v9;
}

uint64_t luaL_tolstring(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  char *v7;
  int v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = a2;
  if (!luaL_callmeta(a1, a2, "__tostring"))
  {
    switch(lua_type(a1, v4))
    {
      case 0u:
        v7 = "nil";
        goto LABEL_8;
      case 1u:
        if (lua_toBOOLean(a1, v4))
          v7 = "true";
        else
          v7 = "false";
LABEL_8:
        lua_pushstring(a1, v7);
        break;
      case 3u:
        if (lua_isinteger(a1, v4))
        {
          v28 = lua_tointegerx(a1, v4, 0);
          lua_pushfstring((uint64_t)a1, "%I", v16, v17, v18, v19, v20, v21, v28);
        }
        else
        {
          v29 = lua_tonumberx(a1, v4, 0);
          lua_pushfstring((uint64_t)a1, "%f", v22, v23, v24, v25, v26, v27, v29);
        }
        break;
      case 4u:
        lua_pushvalue(a1, v4);
        break;
      default:
        v8 = lua_type(a1, v4);
        v9 = lua_typename((uint64_t)a1, v8);
        lua_topointer(a1, v4);
        lua_pushfstring((uint64_t)a1, "%s: %p", v10, v11, v12, v13, v14, v15, (uint64_t)v9);
        break;
    }
  }
  return lua_tolstring(a1, -1, a3);
}

uint64_t luaL_setfuncs(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  uint64_t v14;

  luaL_checkstack(a1, a3, (uint64_t)"too many upvalues", a4, a5, a6, a7, a8, v14);
  if (*(_QWORD *)a2)
  {
    do
    {
      if (a3 >= 1)
      {
        v11 = a3;
        do
        {
          lua_pushvalue(a1, -a3);
          --v11;
        }
        while (v11);
      }
      lua_pushcclosure((uint64_t)a1, *(_QWORD *)(a2 + 8), a3);
      lua_setfield(a1, -2 - a3, *(char **)a2);
      v12 = *(_QWORD *)(a2 + 16);
      a2 += 16;
    }
    while (v12);
  }
  return lua_settop((uint64_t)a1, ~a3);
}

uint64_t luaL_getsubtable(_QWORD *a1, uint64_t a2, char *a3)
{
  int v7;

  if (lua_getfield(a1, a2, a3) == 5)
    return 1;
  lua_settop((uint64_t)a1, 0xFFFFFFFE);
  v7 = lua_absindex((uint64_t)a1, a2);
  lua_createtable((uint64_t)a1, 0, 0);
  lua_pushvalue(a1, -1);
  lua_setfield(a1, v7, a3);
  return 0;
}

uint64_t *luaL_requiref(_QWORD *a1, char *a2, uint64_t a3, int a4)
{
  uint64_t *result;

  luaL_getsubtable(a1, 4293966296, "_LOADED");
  lua_getfield(a1, -1, a2);
  if (!lua_toBOOLean(a1, -1))
  {
    lua_settop((uint64_t)a1, 0xFFFFFFFE);
    lua_pushcclosure((uint64_t)a1, a3, 0);
    lua_pushstring(a1, a2);
    lua_callk((uint64_t)a1, 1, 1, 0, 0);
    lua_pushvalue(a1, -1);
    lua_setfield(a1, -3, a2);
  }
  lua_rotate(a1, -2, -1);
  result = (uint64_t *)lua_settop((uint64_t)a1, 0xFFFFFFFE);
  if (a4)
  {
    lua_pushvalue(a1, -1);
    return lua_setglobal(a1, a2);
  }
  return result;
}

double *luaL_checkversion_(_QWORD *a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  double *result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v19 = (double *)lua_version((uint64_t)a1);
  if (a2 != 136)
    luaL_error(a1, "core and library have incompatible numeric types", v13, v14, v15, v16, v17, v18, v27);
  result = (double *)lua_version(0);
  if (v19 != result)
    return (double *)luaL_error(a1, "multiple Lua VMs detected", v21, v22, v23, v24, v25, v26, a10);
  if (*v19 != a3)
    return (double *)luaL_error(a1, "version mismatch: app. needs %f, Lua core provides %f", v21, v22, v23, v24, v25, v26, *(uint64_t *)&a3);
  return result;
}

uint64_t findfield(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!a3)
    return 0;
  if (lua_type(a1, -1) != 5)
    return 0;
  lua_pushnil((uint64_t)a1);
  if (!lua_next(a1, -2))
    return 0;
  v6 = (a3 - 1);
  while (1)
  {
    if (lua_type(a1, -2) == 4)
    {
      if (lua_rawequal(a1, a2, -1))
      {
        lua_settop((uint64_t)a1, 0xFFFFFFFE);
        return 1;
      }
      if (findfield(a1, a2, v6))
        break;
    }
    lua_settop((uint64_t)a1, 0xFFFFFFFE);
    if (!lua_next(a1, -2))
      return 0;
  }
  lua_rotate(a1, -2, -1);
  lua_settop((uint64_t)a1, 0xFFFFFFFE);
  lua_pushstring(a1, ".");
  v7 = 1;
  lua_rotate(a1, -2, 1);
  lua_concat((uint64_t)a1, 3, v9, v10, v11, v12, v13, v14);
  return v7;
}

uint64_t luaopen_base(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int i;
  char *v8;

  lua_rawgeti(a1, -1001000, 2);
  luaL_setfuncs(a1, (uint64_t)&base_funcs, 0, v2, v3, v4, v5, v6);
  lua_pushvalue(a1, -1);
  lua_setfield(a1, -2, "_G");
  lua_pushstring(a1, "Lua 5.3");
  lua_setfield(a1, -2, "_VERSION");
  for (i = 0; i != 9; ++i)
  {
    v8 = lua_typename((uint64_t)a1, i);
    lua_pushstring(a1, v8);
  }
  lua_pushcclosure((uint64_t)a1, (uint64_t)luaB_type, 9);
  lua_setfield(a1, -2, "type");
  return 1;
}

uint64_t luaB_type(_QWORD *a1)
{
  int v2;

  luaL_checkany(a1, 1);
  v2 = lua_type(a1, 1);
  lua_pushvalue(a1, -1001001 - v2);
  return 1;
}

unint64_t luaB_assert(_QWORD *a1)
{
  if (lua_toBOOLean(a1, 1))
    return lua_gettop((uint64_t)a1);
  luaL_checkany(a1, 1);
  lua_rotate(a1, 1, -1);
  lua_settop((uint64_t)a1, 0xFFFFFFFE);
  lua_pushstring(a1, "assertion failed!");
  lua_settop((uint64_t)a1, 1u);
  return luaB_error(a1);
}

uint64_t luaB_collectgarbage(_QWORD *a1)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v7;

  v2 = luaB_collectgarbage_optsnum[(int)luaL_checkoption(a1, 1, "collect", (const char **)luaB_collectgarbage_opts)];
  v3 = luaL_optinteger(a1, 2, 0);
  v4 = lua_gc((uint64_t)a1, v2, v3);
  v5 = v4;
  if (v2 == 9 || v2 == 5)
  {
    lua_pushBOOLean((uint64_t)a1, v4);
  }
  else if (v2 == 3)
  {
    v7 = lua_gc((uint64_t)a1, 4, 0);
    lua_pushnumber((uint64_t)a1, (double)v7 * 0.0009765625 + (double)v5);
  }
  else
  {
    lua_pushinteger((uint64_t)a1, v4);
  }
  return 1;
}

uint64_t luaB_error(_QWORD *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = luaL_optinteger(a1, 2, 1);
  lua_settop((uint64_t)a1, 1u);
  if (lua_isstring(a1, 1) && v2 >= 1)
  {
    luaL_where(a1, v2);
    lua_pushvalue(a1, 1);
    lua_concat((uint64_t)a1, 2, v3, v4, v5, v6, v7, v8);
  }
  return lua_error(a1);
}

uint64_t luaB_getmetatable(_QWORD *a1)
{
  luaL_checkany(a1, 1);
  if (lua_getmetatable(a1, 1))
    luaL_getmetafield(a1, 1, "__metatable");
  else
    lua_pushnil((uint64_t)a1);
  return 1;
}

uint64_t luaB_ipairs(_QWORD *a1)
{
  uint64_t (*v2)(_QWORD *);

  if (luaL_getmetafield(a1, 1, "__index"))
    v2 = ipairsaux;
  else
    v2 = ipairsaux_raw;
  luaL_checkany(a1, 1);
  lua_pushcclosure((uint64_t)a1, (uint64_t)v2, 0);
  lua_pushvalue(a1, 1);
  lua_pushinteger((uint64_t)a1, 0);
  return 3;
}

uint64_t luaB_load(_QWORD *a1)
{
  const char *v2;
  uint64_t v3;
  int v4;
  const char *v5;
  uint64_t v6;
  const char *v8;
  uint64_t v9;

  v9 = 0;
  v2 = (const char *)lua_tolstring(a1, 1, &v9);
  v3 = luaL_optlstring(a1, 3, "bt", 0);
  v4 = lua_type(a1, 4);
  if (v2)
  {
    v5 = (const char *)luaL_optlstring(a1, 2, v2, 0);
    if (luaL_loadbufferx((uint64_t)a1, (uint64_t)v2, v9, v5, v3))
    {
LABEL_3:
      lua_pushnil((uint64_t)a1);
      lua_rotate(a1, -2, 1);
      return 2;
    }
  }
  else
  {
    v8 = (const char *)luaL_optlstring(a1, 2, "=(load)", 0);
    luaL_checktype(a1, 1, 6);
    lua_settop((uint64_t)a1, 5u);
    if (lua_load((uint64_t)a1, (uint64_t)generic_reader, 0, v8, v3))
      goto LABEL_3;
  }
  if (v4 == -1)
    return 1;
  lua_pushvalue(a1, 4);
  v6 = 1;
  if (!lua_setupvalue(a1, -2, 1))
    lua_settop((uint64_t)a1, 0xFFFFFFFE);
  return v6;
}

uint64_t luaB_next(_QWORD *a1)
{
  uint64_t v2;

  luaL_checktype(a1, 1, 5);
  v2 = 2;
  lua_settop((uint64_t)a1, 2u);
  if (!lua_next(a1, 1))
  {
    lua_pushnil((uint64_t)a1);
    return 1;
  }
  return v2;
}

uint64_t luaB_pairs(_QWORD *a1)
{
  if (luaL_getmetafield(a1, 1, "__pairs"))
  {
    lua_pushvalue(a1, 1);
    lua_callk((uint64_t)a1, 1, 3, 0, 0);
  }
  else
  {
    luaL_checktype(a1, 1, 5);
    lua_pushcclosure((uint64_t)a1, (uint64_t)luaB_next, 0);
    lua_pushvalue(a1, 1);
    lua_pushnil((uint64_t)a1);
  }
  return 3;
}

uint64_t luaB_pcall(_QWORD *a1)
{
  int v2;
  unsigned int v3;

  luaL_checkany(a1, 1);
  lua_pushBOOLean((uint64_t)a1, 1);
  lua_rotate(a1, 1, 1);
  v2 = lua_gettop((uint64_t)a1);
  v3 = lua_pcallk((uint64_t)a1, v2 - 2, -1, 0, 0, (uint64_t)finishpcall);
  return finishpcall(a1, v3, 0);
}

uint64_t luaB_rawequal(_QWORD *a1)
{
  int v2;

  luaL_checkany(a1, 1);
  luaL_checkany(a1, 2);
  v2 = lua_rawequal(a1, 1, 2);
  lua_pushBOOLean((uint64_t)a1, v2);
  return 1;
}

uint64_t luaB_rawlen(_QWORD *a1)
{
  uint64_t v2;

  if ((lua_type(a1, 1) & 0xFFFFFFFE) != 4)
    luaL_argerror(a1, 1);
  v2 = lua_rawlen(a1, 1);
  lua_pushinteger((uint64_t)a1, v2);
  return 1;
}

uint64_t luaB_rawget(_QWORD *a1)
{
  luaL_checktype(a1, 1, 5);
  luaL_checkany(a1, 2);
  lua_settop((uint64_t)a1, 2u);
  lua_rawget(a1, 1);
  return 1;
}

uint64_t luaB_rawset(_QWORD *a1)
{
  luaL_checktype(a1, 1, 5);
  luaL_checkany(a1, 2);
  luaL_checkany(a1, 3);
  lua_settop((uint64_t)a1, 3u);
  lua_rawset(a1, 1);
  return 1;
}

uint64_t luaB_select(_QWORD *a1)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = lua_gettop((uint64_t)a1);
  if (lua_type(a1, 1) == 4 && *(_BYTE *)lua_tolstring(a1, 1, 0) == 35)
  {
    lua_pushinteger((uint64_t)a1, v2 - 1);
    return 1;
  }
  else
  {
    v4 = luaL_checkinteger(a1, 1);
    v5 = v2;
    if (v4 < v2)
      v5 = v4;
    if (v4 >= 0)
      v6 = v5;
    else
      v6 = v4 + v2;
    if (v6 <= 0)
      luaL_argerror(a1, 1);
    return (v2 - v6);
  }
}

uint64_t luaB_setmetatable(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v10 = lua_type(a1, 2);
  luaL_checktype(a1, 1, 5);
  if (v10 && v10 != 5)
    luaL_argerror(a1, 2);
  if (luaL_getmetafield(a1, 1, "__metatable"))
    return luaL_error(a1, "cannot change a protected metatable", v11, v12, v13, v14, v15, v16, a9);
  lua_settop((uint64_t)a1, 2u);
  lua_setmetatable(a1, 1);
  return 1;
}

uint64_t luaB_tonumber(_QWORD *a1)
{
  uint64_t v2;
  const char *v3;
  size_t v4;
  int v5;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __darwin_ct_rune_t v11;
  int v12;
  uint64_t v13;
  int v14;
  const char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;

  if ((int)lua_type(a1, 2) > 0)
  {
    v20 = 0;
    v2 = luaL_checkinteger(a1, 2);
    luaL_checktype(a1, 1, 4);
    v3 = (const char *)luaL_checklstring(a1, 1, &v20);
    if ((unint64_t)(v2 - 2) >= 0x23)
      luaL_argerror(a1, 2);
    v4 = strspn(v3, " \f\n\r\t\v");
    v5 = v3[v4];
    if (v5 == 45 || v5 == 43)
      v7 = &v3[v4 + 1];
    else
      v7 = &v3[v4];
    v8 = *(unsigned __int8 *)v7;
    v9 = MEMORY[0x1E0C80978];
    if (*v7 < 0)
    {
      if (!__maskrune(v8, 0x500uLL))
        goto LABEL_28;
    }
    else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v8 + 60) & 0x500) == 0)
    {
      goto LABEL_28;
    }
    v10 = 0;
    while (1)
    {
      v11 = *(unsigned __int8 *)v7;
      v12 = (v11 - 48) > 9 ? __toupper(v11) - 55 : (char)v11 - 48;
      if (v12 >= (int)v2)
        break;
      v13 = *(unsigned __int8 *)++v7;
      if (*v7 < 0)
        v14 = __maskrune(v13, 0x500uLL);
      else
        v14 = *(_DWORD *)(v9 + 4 * v13 + 60) & 0x500;
      v10 = v10 * (int)v2 + v12;
      if (!v14)
      {
        v15 = &v7[strspn(v7, " \f\n\r\t\v")];
        if (v5 == 45)
          v16 = -v10;
        else
          v16 = v10;
        goto LABEL_29;
      }
    }
LABEL_28:
    v16 = 0;
    v15 = 0;
LABEL_29:
    if (v15 == &v3[v20])
    {
      lua_pushinteger((uint64_t)a1, v16);
      return 1;
    }
    goto LABEL_30;
  }
  luaL_checkany(a1, 1);
  if (lua_type(a1, 1) == 3)
  {
    lua_settop((uint64_t)a1, 1u);
  }
  else
  {
    v20 = 0;
    v17 = (char *)lua_tolstring(a1, 1, &v20);
    if (!v17 || (v18 = lua_stringtonumber((uint64_t)a1, v17), v18 != v20 + 1))
LABEL_30:
      lua_pushnil((uint64_t)a1);
  }
  return 1;
}

uint64_t luaB_tostring(_QWORD *a1)
{
  luaL_checkany(a1, 1);
  luaL_tolstring(a1, 1, 0);
  return 1;
}

uint64_t luaB_xpcall(_QWORD *a1)
{
  int v2;
  unsigned int v3;

  v2 = lua_gettop((uint64_t)a1);
  luaL_checktype(a1, 2, 6);
  lua_pushBOOLean((uint64_t)a1, 1);
  lua_pushvalue(a1, 1);
  lua_rotate(a1, 3, 2);
  v3 = lua_pcallk((uint64_t)a1, v2 - 2, -1, 2, 2, (uint64_t)finishpcall);
  return finishpcall(a1, v3, 2);
}

uint64_t ipairsaux(_QWORD *a1)
{
  uint64_t v2;

  v2 = luaL_checkinteger(a1, 2) + 1;
  lua_pushinteger((uint64_t)a1, v2);
  if (lua_geti(a1, 1, v2))
    return 2;
  else
    return 1;
}

uint64_t ipairsaux_raw(_QWORD *a1)
{
  uint64_t v2;

  v2 = luaL_checkinteger(a1, 2) + 1;
  luaL_checktype(a1, 1, 5);
  lua_pushinteger((uint64_t)a1, v2);
  if (lua_rawgeti(a1, 1, v2))
    return 2;
  else
    return 1;
}

uint64_t generic_reader(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  luaL_checkstack(a1, 2, (uint64_t)"too many nested functions", a4, a5, a6, a7, a8, v17);
  lua_pushvalue(a1, 1);
  lua_callk((uint64_t)a1, 0, 1, 0, 0);
  if (lua_type(a1, -1))
  {
    if (!lua_isstring(a1, -1))
      luaL_error(a1, "reader function must return a string", v10, v11, v12, v13, v14, v15, v18);
    lua_copy((uint64_t)a1, -1, 5);
    lua_settop((uint64_t)a1, 0xFFFFFFFE);
    return lua_tolstring(a1, 5, a3);
  }
  else
  {
    lua_settop((uint64_t)a1, 0xFFFFFFFE);
    *a3 = 0;
    return 0;
  }
}

uint64_t finishpcall(_QWORD *a1, unsigned int a2, int a3)
{
  if (a2 < 2)
    return lua_gettop((uint64_t)a1) - a3;
  lua_pushBOOLean((uint64_t)a1, 0);
  lua_pushvalue(a1, -2);
  return 2;
}

int *luaK_nil(int *result, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  int v12;

  v3 = result[8];
  if ((int)v3 <= result[9])
    return (int *)luaK_code((uint64_t)result, ((a3 << 23) - 0x800000) | (a2 << 6) | 4u);
  v4 = *(_QWORD *)(*(_QWORD *)result + 56);
  v5 = v3 - 1;
  v6 = *(_DWORD *)(v4 + 4 * v5);
  if ((v6 & 0x3F) != 4)
    return (int *)luaK_code((uint64_t)result, ((a3 << 23) - 0x800000) | (a2 << 6) | 4u);
  v7 = a3 + a2;
  v8 = (v6 >> 6);
  v9 = (v6 >> 23) + v8;
  if ((v8 > a2 || v9 + 1 < a2) && (v8 < a2 || v8 > v7))
    return (int *)luaK_code((uint64_t)result, ((a3 << 23) - 0x800000) | (a2 << 6) | 4u);
  if (v8 >= a2)
    v8 = a2;
  if (v9 >= v7)
    v12 = (v6 >> 23) + (v6 >> 6);
  else
    v12 = v7 + 511;
  *(_DWORD *)(v4 + 4 * v5) = v6 & 0x7FC03F | (v8 << 6) | ((v12 - v8) << 23);
  return result;
}

uint64_t luaK_codeABC(uint64_t a1, int a2, int a3, int a4, int a5)
{
  return luaK_code(a1, a2 | (a3 << 6) | (a4 << 23) | (a5 << 14));
}

uint64_t luaK_jump(uint64_t a1)
{
  int v2;
  unsigned int v4;

  v2 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 40) = -1;
  v4 = luaK_code(a1, 2147450910);
  luaK_concat((uint64_t *)a1, (int *)&v4, v2);
  return v4;
}

uint64_t luaK_codeABx(uint64_t a1, int a2, int a3, int a4)
{
  return luaK_code(a1, a2 | (a3 << 6) | (a4 << 14));
}

uint64_t *luaK_concat(uint64_t *result, int *a2, int a3)
{
  int v3;
  int v4;
  int v5;

  if (a3 != -1)
  {
    v3 = *a2;
    if (*a2 == -1)
    {
      *a2 = a3;
    }
    else
    {
      do
      {
        v4 = v3;
        v5 = (*(_DWORD *)(*(_QWORD *)(*result + 56) + 4 * v3) >> 14) - 0x1FFFF;
        v3 += v5 + 1;
      }
      while (v5 != -1 && v3 != -1);
      return fixjump(result, v4, a3);
    }
  }
  return result;
}

uint64_t luaK_ret(uint64_t a1, int a2, int a3)
{
  return luaK_code(a1, ((a3 << 23) + 0x800000) | (a2 << 6) | 0x26u);
}

uint64_t luaK_getlabel(uint64_t a1)
{
  uint64_t v1;

  v1 = *(unsigned int *)(a1 + 32);
  *(_DWORD *)(a1 + 36) = v1;
  return v1;
}

uint64_t *luaK_patchlist(uint64_t a1, int a2, int a3)
{
  if (*(_DWORD *)(a1 + 32) != a3)
    return patchlistaux((uint64_t *)a1, a2, a3, 255, a3);
  *(_DWORD *)(a1 + 36) = a3;
  return luaK_concat((uint64_t *)a1, (int *)(a1 + 40), a2);
}

uint64_t *luaK_patchtohere(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a1 + 32);
  return luaK_concat((uint64_t *)a1, (int *)(a1 + 40), a2);
}

uint64_t *patchlistaux(uint64_t *result, int a2, int a3, int a4, int a5)
{
  int v8;
  uint64_t *v9;
  int v10;
  int v11;
  BOOL v12;

  if (a2 != -1)
  {
    v8 = a2;
    v9 = result;
    do
    {
      v10 = (*(_DWORD *)(*(_QWORD *)(*v9 + 56) + 4 * v8) >> 14) - 0x1FFFF;
      if (patchtestreg((uint64_t)v9, v8, a4))
        v11 = a3;
      else
        v11 = a5;
      result = fixjump(v9, v8, v11);
      v12 = v10 == -1 || v8 + v10 == -2;
      v8 += v10 + 1;
    }
    while (!v12);
  }
  return result;
}

uint64_t luaK_patchclose(uint64_t result, int a2, __int16 a3)
{
  uint64_t v3;
  unsigned int v4;

  if (a2 != -1)
  {
    v3 = *(_QWORD *)(*(_QWORD *)result + 56);
    do
    {
      v4 = *(_DWORD *)(v3 + 4 * a2);
      *(_DWORD *)(v3 + 4 * a2) = v4 & 0xFFFFC03F | ((a3 << 6) + 64) & 0x3FC0;
      a2 += (v4 >> 14) - 0x1FFFF + 1;
    }
    while (v4 >> 14 != 131070 && a2 != -1);
  }
  return result;
}

uint64_t *fixjump(uint64_t *result, int a2, int a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;

  v4 = *(_QWORD *)(*result + 56);
  v5 = ~a2 + a3;
  if (v5 >= 0)
    v6 = ~a2 + a3;
  else
    v6 = -v5;
  if (v6 >= 0x20000)
    result = (uint64_t *)luaX_syntaxerror(result[2], "control structure too long");
  *(_DWORD *)(v4 + 4 * a2) = (*(_DWORD *)(v4 + 4 * a2) & 0x3FFF | (v5 << 14)) + 2147467264;
  return result;
}

uint64_t luaK_code(uint64_t a1, int a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t result;

  v4 = *(_QWORD *)a1;
  patchlistaux((uint64_t *)a1, *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 32), 255, *(_DWORD *)(a1 + 32));
  *(_DWORD *)(a1 + 40) = -1;
  v5 = *(_DWORD *)(a1 + 32);
  if (v5 >= *(_DWORD *)(v4 + 24))
  {
    v6 = luaM_growaux_(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 56), *(_QWORD *)(v4 + 56), (int *)(v4 + 24), 4, 0x7FFFFFFF, "opcodes");
    *(_QWORD *)(v4 + 56) = v6;
    v5 = *(_DWORD *)(a1 + 32);
  }
  else
  {
    v6 = *(_QWORD *)(v4 + 56);
  }
  *(_DWORD *)(v6 + 4 * v5) = a2;
  v7 = *(_DWORD *)(a1 + 32);
  if (v7 >= *(_DWORD *)(v4 + 28))
  {
    v8 = luaM_growaux_(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 56), *(_QWORD *)(v4 + 72), (int *)(v4 + 28), 4, 0x7FFFFFFF, "opcodes");
    *(_QWORD *)(v4 + 72) = v8;
    v7 = *(_DWORD *)(a1 + 32);
  }
  else
  {
    v8 = *(_QWORD *)(v4 + 72);
  }
  *(_DWORD *)(v8 + 4 * v7) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 8);
  result = *(unsigned int *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = result + 1;
  return result;
}

uint64_t luaK_codek(uint64_t a1, int a2, int a3)
{
  int v5;
  uint64_t v7;

  v5 = a2 << 6;
  if (a3 < 0x40000)
    return luaK_code(a1, v5 | (a3 << 14) | 1u);
  v7 = luaK_code(a1, v5 | 2u);
  luaK_code(a1, (a3 << 6) | 0x2E);
  return v7;
}

uint64_t luaK_checkstack(uint64_t result, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t *v4;

  v2 = *(unsigned __int8 *)(result + 60) + a2;
  v3 = *(_QWORD *)result;
  if (v2 > *(unsigned __int8 *)(*(_QWORD *)result + 12))
  {
    if (v2 >= 255)
    {
      v4 = (uint64_t *)result;
      result = luaX_syntaxerror(*(_QWORD *)(result + 16), "function or expression needs too many registers");
      v3 = *v4;
    }
    *(_BYTE *)(v3 + 12) = v2;
  }
  return result;
}

uint64_t luaK_reserveregs(uint64_t a1, int a2)
{
  char v2;
  uint64_t result;

  v2 = a2;
  result = luaK_checkstack(a1, a2);
  *(_BYTE *)(a1 + 60) += v2;
  return result;
}

uint64_t luaK_stringK(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2;
  v4 = 0;
  LODWORD(v4) = *(unsigned __int8 *)(a2 + 8) | 0x40;
  return addk(a1, &v3, (uint64_t)&v3);
}

uint64_t addk(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD **)(v5 + 56);
  v7 = *(_QWORD *)a1;
  v8 = luaH_set((uint64_t)v6, *(_QWORD *)(v5 + 80), a2);
  v9 = v8;
  if (*((_DWORD *)v8 + 2) != 19
    || (v10 = *v8, *(_DWORD *)(a1 + 44) <= (int)*v8)
    || (v11 = *(_QWORD *)(v7 + 48), ((*(_DWORD *)(a3 + 8) ^ *(_DWORD *)(v11 + 16 * (int)v10 + 8)) & 0x3F) != 0)
    || !luaV_equalobj(0, (uint64_t *)(v11 + 16 * (int)v10), (uint64_t *)a3))
  {
    v12 = *(int *)(v7 + 20);
    v10 = *(unsigned int *)(a1 + 44);
    *v9 = (int)v10;
    *((_DWORD *)v9 + 2) = 19;
    v13 = *(_DWORD *)(v7 + 20);
    if ((int)v10 >= v13)
    {
      *(_QWORD *)(v7 + 48) = luaM_growaux_(v6, *(_QWORD *)(v7 + 48), (int *)(v7 + 20), 16, 0x3FFFFFF, "constants");
      v13 = *(_DWORD *)(v7 + 20);
    }
    v14 = *(_QWORD *)(v7 + 48);
    if ((int)v12 < v13)
    {
      v15 = v13;
      v16 = (_DWORD *)(v14 + 16 * v12 + 8);
      v17 = v15 - v12;
      do
      {
        *v16 = 0;
        v16 += 4;
        --v17;
      }
      while (v17);
    }
    *(_OWORD *)(v14 + 16 * (int)v10) = *(_OWORD *)a3;
    ++*(_DWORD *)(a1 + 44);
    if ((*(_BYTE *)(a3 + 8) & 0x40) != 0 && (*(_BYTE *)(v7 + 9) & 4) != 0 && (*(_BYTE *)(*(_QWORD *)a3 + 9) & 3) != 0)
      luaC_barrier_((uint64_t)v6, v7, *(_QWORD *)a3);
  }
  return v10;
}

uint64_t luaK_intK(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];
  uint64_t v4[2];

  v4[0] = a2;
  v4[1] = 2;
  v3[0] = a2;
  v3[1] = 19;
  return addk(a1, v4, (uint64_t)v3);
}

unsigned __int8 *luaK_setreturns(unsigned __int8 *result, _DWORD *a2, int a3)
{
  unsigned __int8 *v3;
  uint64_t v4;

  v3 = result;
  if (*a2 == 14)
  {
    v4 = *(_QWORD *)(*(_QWORD *)result + 56);
    *(_DWORD *)(v4 + 4 * (int)a2[2]) = (*(_DWORD *)(v4 + 4 * (int)a2[2]) & 0x7FFFFF | ((unsigned __int16)a3 << 23))
                                       + 0x800000;
    *(_DWORD *)(v4 + 4 * (int)a2[2]) = *(_DWORD *)(v4 + 4 * (int)a2[2]) & 0xFFFFC03F | (result[60] << 6);
    result = (unsigned __int8 *)luaK_checkstack((uint64_t)result, 1);
    ++v3[60];
  }
  else if (*a2 == 13)
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)result + 56) + 4 * (int)a2[2]) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)result
                                                                                                  + 56)
                                                                                      + 4 * (int)a2[2]) & 0xFF803FFF | (((((a3 << 14) + 0x4000) >> 14) & 0x1FF) << 14);
  }
  return result;
}

uint64_t luaK_setoneret(uint64_t result, _DWORD *a2)
{
  if (*a2 == 14)
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)result + 56) + 4 * (int)a2[2]) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)result
                                                                                                  + 56)
                                                                                      + 4 * (int)a2[2]) & 0x7FFFFF | 0x1000000;
    *a2 = 12;
  }
  else if (*a2 == 13)
  {
    *a2 = 7;
    a2[2] = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)result + 56) + 4 * (int)a2[2]) >> 6);
  }
  return result;
}

uint64_t luaK_dischargevars(uint64_t result, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  int v6;

  switch(*(_DWORD *)a2)
  {
    case 8:
      v3 = 7;
      goto LABEL_15;
    case 9:
      v4 = (*(_DWORD *)(a2 + 8) << 23) | 5;
      goto LABEL_14;
    case 0xA:
      v5 = *(__int16 *)(a2 + 8);
      if ((v5 & 0x100) == 0 && *(unsigned __int8 *)(result + 58) <= v5)
        --*(_BYTE *)(result + 60);
      if (*(_BYTE *)(a2 + 11) == 8)
      {
        if (*(unsigned __int8 *)(result + 58) <= *(unsigned __int8 *)(a2 + 10))
          --*(_BYTE *)(result + 60);
        v6 = 7;
      }
      else
      {
        v6 = 6;
      }
      v4 = v6 | (*(unsigned __int8 *)(a2 + 10) << 23) | (*(__int16 *)(a2 + 8) << 14);
LABEL_14:
      result = luaK_code(result, v4);
      *(_DWORD *)(a2 + 8) = result;
      v3 = 12;
LABEL_15:
      *(_DWORD *)a2 = v3;
      break;
    case 0xD:
    case 0xE:
      result = luaK_setoneret(result, (_DWORD *)a2);
      break;
    default:
      return result;
  }
  return result;
}

double luaK_exp2nextreg(uint64_t a1, _DWORD *a2)
{
  int v4;
  unsigned __int8 v5;

  luaK_dischargevars(a1, (uint64_t)a2);
  if (*a2 == 7)
  {
    v4 = a2[2];
    if ((v4 & 0x100) == 0 && v4 >= *(unsigned __int8 *)(a1 + 58))
      --*(_BYTE *)(a1 + 60);
  }
  luaK_checkstack(a1, 1);
  v5 = *(_BYTE *)(a1 + 60) + 1;
  *(_BYTE *)(a1 + 60) = v5;
  return exp2reg((int *)a1, a2, v5 - 1);
}

double exp2reg(int *a1, _DWORD *a2, int a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  double result;

  discharge2reg(a1, a2, a3);
  if (*a2 == 11)
    luaK_concat((uint64_t *)a1, a2 + 4, a2[2]);
  v6 = a2[4];
  v7 = a2[5];
  if (v6 != v7)
  {
    if (need_value((uint64_t)a1, v6) || need_value((uint64_t)a1, v7))
    {
      if (*a2 == 11)
        v8 = -1;
      else
        v8 = luaK_jump((uint64_t)a1);
      a1[9] = a1[8];
      v9 = luaK_code((uint64_t)a1, (a3 << 6) | 0x4003u);
      a1[9] = a1[8];
      v10 = luaK_code((uint64_t)a1, (a3 << 6) | 0x800003u);
      a1[9] = a1[8];
      luaK_concat((uint64_t *)a1, a1 + 10, v8);
      v7 = a2[5];
    }
    else
    {
      v9 = -1;
      v10 = -1;
    }
    v11 = a1[8];
    a1[9] = v11;
    patchlistaux((uint64_t *)a1, v7, v11, a3, v9);
    patchlistaux((uint64_t *)a1, a2[4], v11, a3, v10);
  }
  result = NAN;
  *((_QWORD *)a2 + 2) = -1;
  a2[2] = a3;
  *a2 = 7;
  return result;
}

uint64_t luaK_exp2anyreg(uint64_t a1, _DWORD *a2)
{
  int *v4;

  luaK_dischargevars(a1, (uint64_t)a2);
  if (*a2 != 7)
  {
LABEL_4:
    luaK_exp2nextreg(a1, a2);
    v4 = a2 + 2;
    return *v4;
  }
  v4 = a2 + 2;
  if (a2[4] != a2[5])
  {
    if (*v4 >= *(unsigned __int8 *)(a1 + 58))
    {
      exp2reg((int *)a1, a2, *v4);
      return *v4;
    }
    goto LABEL_4;
  }
  return *v4;
}

uint64_t luaK_exp2anyregup(uint64_t a1, _DWORD *a2)
{
  if (*a2 != 9 || a2[4] != a2[5])
    return luaK_exp2anyreg(a1, a2);
  return a1;
}

uint64_t luaK_exp2val(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 16) == *(_DWORD *)(a2 + 20))
    return luaK_dischargevars(result, a2);
  else
    return luaK_exp2anyreg(result, (_DWORD *)a2);
}

uint64_t luaK_exp2RK(uint64_t a1, _DWORD *a2)
{
  int v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  luaK_exp2val(a1, (uint64_t)a2);
  v4 = *a2;
  switch(*a2)
  {
    case 1:
    case 2:
    case 3:
      if (*(int *)(a1 + 44) > 255)
        goto LABEL_10;
      if (v4 == 1)
      {
        v10 = 0;
        v11 = 0;
        v12 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80);
        v13 = 69;
        v5 = &v10;
      }
      else
      {
        v12 = v4 == 2;
        v13 = 1;
        v5 = &v12;
      }
      v6 = addk(a1, &v12, (uint64_t)v5);
      a2[2] = v6;
      *a2 = 4;
      goto LABEL_13;
    case 4:
      v6 = a2[2];
      goto LABEL_9;
    case 5:
      v7 = *((_QWORD *)a2 + 1);
      v13 = 3;
      v12 = v7;
      v8 = &v12;
      goto LABEL_8;
    case 6:
      v12 = *((_QWORD *)a2 + 1);
      v13 = 2;
      v10 = v12;
      v11 = 19;
      v8 = &v10;
LABEL_8:
      v6 = addk(a1, &v12, (uint64_t)v8);
      a2[2] = v6;
      *a2 = 4;
LABEL_9:
      if (v6 > 255)
        goto LABEL_10;
LABEL_13:
      result = v6 | 0x100u;
      break;
    default:
LABEL_10:
      result = luaK_exp2anyreg(a1, a2);
      break;
  }
  return result;
}

void luaK_storevar(uint64_t a1, int *a2, _DWORD *a3)
{
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;

  v5 = *a2;
  if (*a2 == 10)
  {
    if (*((_BYTE *)a2 + 11) == 8)
      v7 = 10;
    else
      v7 = 8;
    v8 = v7 | (*((unsigned __int8 *)a2 + 10) << 6) | (*((unsigned __int16 *)a2 + 4) << 23) | (luaK_exp2RK(a1, a3) << 14);
    goto LABEL_14;
  }
  if (v5 == 9)
  {
    v8 = (luaK_exp2anyreg(a1, a3) << 6) | (a2[2] << 23) | 9;
LABEL_14:
    luaK_code(a1, v8);
    goto LABEL_15;
  }
  if (v5 == 8)
  {
    if (*a3 == 7)
    {
      v6 = a3[2];
      if ((v6 & 0x100) == 0 && v6 >= *(unsigned __int8 *)(a1 + 58))
        --*(_BYTE *)(a1 + 60);
    }
    exp2reg((int *)a1, a3, a2[2]);
    return;
  }
LABEL_15:
  if (*a3 == 7)
  {
    v9 = a3[2];
    if ((v9 & 0x100) == 0 && v9 >= *(unsigned __int8 *)(a1 + 58))
      --*(_BYTE *)(a1 + 60);
  }
}

uint64_t luaK_self(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v6;
  BOOL v7;
  int v8;
  int v9;
  uint64_t result;
  int v11;

  luaK_exp2anyreg(a1, a2);
  v6 = a2[2];
  v7 = *a2 == 7 && (a2[2] & 0x100) == 0;
  if (v7 && v6 >= *(unsigned __int8 *)(a1 + 58))
    --*(_BYTE *)(a1 + 60);
  a2[2] = *(unsigned __int8 *)(a1 + 60);
  *a2 = 7;
  luaK_checkstack(a1, 2);
  *(_BYTE *)(a1 + 60) += 2;
  v8 = a2[2];
  v9 = luaK_exp2RK(a1, a3);
  result = luaK_code(a1, (v6 << 23) | (v8 << 6) | (v9 << 14) | 0xCu);
  if (*a3 == 7)
  {
    v11 = a3[2];
    if ((v11 & 0x100) == 0 && v11 >= *(unsigned __int8 *)(a1 + 58))
      --*(_BYTE *)(a1 + 60);
  }
  return result;
}

uint64_t *luaK_goiftrue(uint64_t a1, int *a2)
{
  int v4;
  BOOL v5;
  int v6;
  int v7;
  uint64_t *result;

  luaK_dischargevars(a1, (uint64_t)a2);
  v4 = *a2;
  v5 = (*a2 - 4) < 3 || v4 == 2;
  v6 = -1;
  if (!v5)
  {
    if (v4 == 11)
    {
      invertjump(a1, (uint64_t)a2);
      v6 = a2[2];
    }
    else
    {
      v6 = jumponcond(a1, a2, 0);
    }
  }
  luaK_concat((uint64_t *)a1, a2 + 5, v6);
  v7 = a2[4];
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a1 + 32);
  result = luaK_concat((uint64_t *)a1, (int *)(a1 + 40), v7);
  a2[4] = -1;
  return result;
}

uint64_t invertjump(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(int *)(a2 + 8);
  v3 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)result + 56) + 4 * v2);
  if ((int)v2 >= 1 && (v4 = *(v3 - 1), luaP_opmodes[v4 & 0x3F] < 0))
    --v3;
  else
    v4 = *v3;
  *v3 = v4 & 0xFFFFC03F | (((v4 & 0x3FC0) == 0) << 6);
  return result;
}

uint64_t jumponcond(uint64_t a1, _DWORD *a2, int a3)
{
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;

  if (*a2 == 12 && (v6 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 56) + 4 * (int)a2[2]), (v6 & 0x3F) == 0x1B))
  {
    --*(_DWORD *)(a1 + 32);
    v7 = v6 >> 23;
    if (a3)
      v8 = 34;
    else
      v8 = 16418;
    v9 = v8 | (v7 << 6);
  }
  else
  {
    discharge2anyreg(a1, a2);
    if (*a2 == 7)
    {
      v10 = a2[2];
      if ((v10 & 0x100) == 0 && v10 >= *(unsigned __int8 *)(a1 + 58))
        --*(_BYTE *)(a1 + 60);
    }
    v9 = (a3 << 14) | (a2[2] << 23) | 0x3FE3;
  }
  luaK_code(a1, v9);
  return luaK_jump(a1);
}

uint64_t *luaK_goiffalse(uint64_t a1, int *a2)
{
  int v4;
  BOOL v5;
  int v6;
  int v7;
  uint64_t *result;

  luaK_dischargevars(a1, (uint64_t)a2);
  v4 = *a2;
  v5 = *a2 == 1 || v4 == 3;
  v6 = -1;
  if (!v5)
  {
    if (v4 == 11)
      v6 = a2[2];
    else
      v6 = jumponcond(a1, a2, 1);
  }
  luaK_concat((uint64_t *)a1, a2 + 4, v6);
  v7 = a2[5];
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a1 + 32);
  result = luaK_concat((uint64_t *)a1, (int *)(a1 + 40), v7);
  a2[5] = -1;
  return result;
}

uint64_t luaK_indexed(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  char v5;

  *(_BYTE *)(a2 + 10) = *(_DWORD *)(a2 + 8);
  result = luaK_exp2RK(a1, a3);
  *(_WORD *)(a2 + 8) = result;
  if (*(_DWORD *)a2 == 9)
    v5 = 9;
  else
    v5 = 8;
  *(_BYTE *)(a2 + 11) = v5;
  *(_DWORD *)a2 = 10;
  return result;
}

uint64_t luaK_prefix(uint64_t result, unsigned int a2, int32x2_t *a3, int a4)
{
  uint64_t v5;
  int v6;
  int v7;
  int32x2_t v8;
  _QWORD v9[4];

  v5 = result;
  v9[2] = -1;
  v9[1] = 0;
  v9[0] = 6;
  if (a2 < 2)
    return codeexpval(result, a2 + 25, a3, (uint64_t)v9, a4);
  if (a2 != 2)
  {
    if (a2 != 3)
      return result;
    return codeexpval(result, a2 + 25, a3, (uint64_t)v9, a4);
  }
  luaK_dischargevars(result, (uint64_t)a3);
  switch(a3->i32[0])
  {
    case 1:
    case 3:
      v6 = 2;
      goto LABEL_14;
    case 2:
    case 4:
    case 5:
    case 6:
      v6 = 3;
      goto LABEL_14;
    case 7:
    case 0xC:
      discharge2anyreg(v5, a3);
      if (a3->i32[0] == 7)
      {
        v7 = a3[1].i32[0];
        if ((v7 & 0x100) == 0 && v7 >= *(unsigned __int8 *)(v5 + 58))
          --*(_BYTE *)(v5 + 60);
      }
      a3[1].i32[0] = luaK_code(v5, (a3[1].i32[0] << 23) | 0x1Bu);
      v6 = 12;
LABEL_14:
      a3->i32[0] = v6;
      break;
    case 0xB:
      invertjump(v5, (uint64_t)a3);
      break;
    default:
      break;
  }
  v8 = a3[2];
  a3[2] = vrev64_s32(v8);
  removevalues(v5, v8.i32[0]);
  return removevalues(v5, a3[2].i32[0]);
}

uint64_t codeexpval(uint64_t a1, unsigned int a2, _DWORD *a3, uint64_t a4, int a5)
{
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t result;
  int v19;
  int v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2 <= 0x1A && a3[4] == -1 && a3[5] == -1)
  {
    if (*a3 == 6)
    {
      v11 = 19;
      v10 = 1;
    }
    else
    {
      if (*a3 != 5)
        goto LABEL_10;
      v10 = 0;
      v11 = 3;
    }
    v29 = 0;
    v12 = *((_QWORD *)a3 + 1);
    v28 = v12;
    LODWORD(v29) = v11;
    if (*(_DWORD *)(a4 + 16) == -1 && *(_DWORD *)(a4 + 20) == -1)
    {
      if (*(_DWORD *)a4 == 6)
      {
        v20 = 19;
        v19 = 1;
      }
      else
      {
        if (*(_DWORD *)a4 != 5)
          goto LABEL_10;
        v19 = 0;
        v20 = 3;
      }
      v27 = 0;
      v24 = 0.0;
      v25 = 0;
      v21 = *(double *)(a4 + 8);
      v26 = v21;
      LODWORD(v27) = v20;
      if (((1 << a2) & 0x5F00000) != 0)
      {
        v30 = 0;
        if (v10)
        {
          v30 = v12;
        }
        else
        {
          if (!luaV_tointeger(&v28, &v30))
            goto LABEL_10;
          v20 = v27;
        }
        if (v20 != 19 && !luaV_tointeger(&v26, &v30))
          goto LABEL_10;
      }
      else if (((1 << a2) & 0xD0000) != 0)
      {
        v22 = (double)*(uint64_t *)&v21;
        if (!v19)
          v22 = v21;
        if (v22 == 0.0)
          goto LABEL_10;
      }
      result = luaO_arith(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56), a2 - 13, (double *)&v28, &v26, (uint64_t)&v24);
      if ((_DWORD)v25 == 19)
      {
        *a3 = 6;
        v23 = v24;
      }
      else
      {
        v23 = v24;
        if (v24 == 0.0)
          goto LABEL_10;
        *a3 = 5;
      }
      *((double *)a3 + 1) = v23;
      return result;
    }
  }
LABEL_10:
  if (a2 <= 0x1C && ((1 << a2) & 0x16000000) != 0)
  {
    v13 = luaK_exp2anyreg(a1, a3);
    v14 = 0;
  }
  else
  {
    v14 = luaK_exp2RK(a1, (_DWORD *)a4);
    v13 = luaK_exp2RK(a1, a3);
  }
  if (v13 <= v14)
  {
    if (*(_DWORD *)a4 == 7)
    {
      v17 = *(_DWORD *)(a4 + 8);
      if ((v17 & 0x100) == 0 && v17 >= *(unsigned __int8 *)(a1 + 58))
        --*(_BYTE *)(a1 + 60);
    }
    if (*a3 != 7)
      goto LABEL_30;
    v16 = a3[2];
    if ((v16 & 0x100) != 0)
      goto LABEL_30;
  }
  else
  {
    if (*a3 == 7)
    {
      v15 = a3[2];
      if ((v15 & 0x100) == 0 && v15 >= *(unsigned __int8 *)(a1 + 58))
        --*(_BYTE *)(a1 + 60);
    }
    if (*(_DWORD *)a4 != 7)
      goto LABEL_30;
    v16 = *(_DWORD *)(a4 + 8);
    if ((v16 & 0x100) != 0)
      goto LABEL_30;
  }
  if (v16 >= *(unsigned __int8 *)(a1 + 58))
    --*(_BYTE *)(a1 + 60);
LABEL_30:
  result = luaK_code(a1, (v13 << 23) | (v14 << 14) | a2);
  a3[2] = result;
  *a3 = 12;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 4 * *(int *)(a1 + 32) - 4) = a5;
  return result;
}

void luaK_infix(uint64_t a1, unsigned int a2, int *a3)
{
  if (a2 >= 0xC)
  {
    switch(a2)
    {
      case 0xCu:
        luaK_exp2nextreg(a1, a3);
        return;
      case 0x14u:
        luaK_goiffalse(a1, a3);
        return;
      case 0x13u:
        luaK_goiftrue(a1, a3);
        return;
    }
LABEL_10:
    luaK_exp2RK(a1, a3);
    return;
  }
  if (a3[4] != -1 || a3[5] != -1 || (*a3 - 5) >= 2)
    goto LABEL_10;
}

__n128 luaK_posfix(uint64_t a1, int a2, _DWORD *a3, uint64_t a4, int a5)
{
  unsigned __int8 *v8;
  unsigned int v9;
  __n128 result;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int *v17;
  int v18;

  v8 = (unsigned __int8 *)a1;
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      v9 = a2 + 13;
      goto LABEL_3;
    case 12:
      luaK_exp2val(a1, a4);
      if (*(_DWORD *)a4 == 12
        && (v13 = *(_QWORD *)(*(_QWORD *)v8 + 56),
            v14 = *(int *)(a4 + 8),
            v15 = *(_DWORD *)(v13 + 4 * v14),
            (v15 & 0x3F) == 0x1D))
      {
        if (*a3 == 7)
        {
          v16 = a3[2];
          if ((v16 & 0x100) == 0 && v16 >= v8[58])
          {
            --v8[60];
            v14 = *(int *)(a4 + 8);
            v15 = *(_DWORD *)(v13 + 4 * v14);
          }
        }
        *(_DWORD *)(v13 + 4 * v14) = v15 & 0x7FFFFF | ((unsigned __int16)a3[2] << 23);
        *a3 = 12;
        a3[2] = *(_DWORD *)(a4 + 8);
      }
      else
      {
        luaK_exp2nextreg((uint64_t)v8, (_DWORD *)a4);
        a1 = (uint64_t)v8;
        v9 = 29;
LABEL_3:
        codeexpval(a1, v9, a3, a4, a5);
      }
      return result;
    case 13:
    case 14:
    case 15:
      v11 = a2 + 18;
      v12 = 1;
      goto LABEL_6;
    case 16:
    case 17:
    case 18:
      v11 = a2 + 15;
      v12 = 0;
LABEL_6:
      codecomp(a1, v11, v12, a3, (_DWORD *)a4);
      return result;
    case 19:
      luaK_dischargevars(a1, a4);
      v17 = (int *)(a4 + 20);
      v18 = a3[5];
      goto LABEL_16;
    case 20:
      luaK_dischargevars(a1, a4);
      v17 = (int *)(a4 + 16);
      v18 = a3[4];
LABEL_16:
      luaK_concat((uint64_t *)v8, v17, v18);
      result = *(__n128 *)a4;
      *((_QWORD *)a3 + 2) = *(_QWORD *)(a4 + 16);
      *(__n128 *)a3 = result;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t codecomp(uint64_t a1, int a2, int a3, _DWORD *a4, _DWORD *a5)
{
  int v10;
  int v11;
  int v12;
  int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  BOOL v16;
  int v17;
  int v18;
  int v19;
  uint64_t result;

  v10 = luaK_exp2RK(a1, a4);
  v11 = luaK_exp2RK(a1, a5);
  if (*a5 == 7)
  {
    v12 = a5[2];
    if ((v12 & 0x100) == 0 && v12 >= *(unsigned __int8 *)(a1 + 58))
      --*(_BYTE *)(a1 + 60);
  }
  if (*a4 == 7)
  {
    v13 = a4[2];
    if ((v13 & 0x100) == 0 && v13 >= *(unsigned __int8 *)(a1 + 58))
      --*(_BYTE *)(a1 + 60);
  }
  v14 = a3 == 0;
  v15 = a2 != 31;
  v16 = !v15 || !v14;
  if (v15 && v14)
    v17 = v11;
  else
    v17 = v10;
  if (v16)
    v18 = v11;
  else
    v18 = v10;
  v19 = a3 << 6;
  if (!v16)
    v19 = 64;
  luaK_code(a1, v19 | (v17 << 23) | (v18 << 14) | a2);
  result = luaK_jump(a1);
  a4[2] = result;
  *a4 = 11;
  return result;
}

int *luaK_fixline(int *result, int a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)result + 72) + 4 * result[8] - 4) = a2;
  return result;
}

uint64_t luaK_setlist(uint64_t a1, int a2, int a3, int a4)
{
  char v4;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t result;

  v4 = a2;
  v6 = (a3 - 1) / 50 + 1;
  v7 = a4 << 23;
  v8 = a2 << 6;
  if (a4 == -1)
    v7 = 0;
  if (a3 > 25550)
  {
    luaK_code(a1, v8 | v7 | 0x2B);
    v9 = (v6 << 6) | 0x2E;
  }
  else
  {
    v9 = v7 | (v6 << 14) | v8 | 0x2B;
  }
  result = luaK_code(a1, v9);
  *(_BYTE *)(a1 + 60) = v4 + 1;
  return result;
}

uint64_t patchtestreg(uint64_t a1, int a2, int a3)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)a1 + 56) + 4 * a2);
  if (a2 >= 1 && (v4 = *(v3 - 1), luaP_opmodes[v4 & 0x3F] < 0))
    --v3;
  else
    v4 = *v3;
  if ((v4 & 0x3F) != 0x23)
    return 0;
  v5 = v4 >> 23;
  if (a3 == 255 || v5 == a3)
    v6 = v4 & 0x7FC000 | (v5 << 6) | 0x22;
  else
    v6 = v4 & 0xFFFFC03F | (a3 << 6);
  *v3 = v6;
  return 1;
}

uint64_t discharge2reg(int *a1, _DWORD *a2, int a3)
{
  uint64_t result;
  int v7;
  int v8;
  uint64_t *v9;
  int v10;
  int v11;
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15;

  result = luaK_dischargevars((uint64_t)a1, (uint64_t)a2);
  switch(*a2)
  {
    case 1:
      result = (uint64_t)luaK_nil(a1, a3, 1);
      goto LABEL_16;
    case 2:
    case 3:
      if (*a2 == 2)
        v7 = 0x800000;
      else
        v7 = 2;
      v8 = v7 | (a3 << 6) | 3;
      goto LABEL_10;
    case 4:
      v11 = a2[2];
      goto LABEL_14;
    case 5:
      v12 = *((_QWORD *)a2 + 1);
      v15 = 3;
      v14 = v12;
      v9 = &v14;
      goto LABEL_13;
    case 6:
      v14 = *((_QWORD *)a2 + 1);
      v15 = 2;
      v13[0] = v14;
      v13[1] = 19;
      v9 = v13;
LABEL_13:
      v11 = addk((uint64_t)a1, &v14, (uint64_t)v9);
LABEL_14:
      result = luaK_codek((uint64_t)a1, a3, v11);
      goto LABEL_16;
    case 7:
      v10 = a2[2];
      if (v10 != a3)
      {
        v8 = (v10 << 23) | (a3 << 6);
LABEL_10:
        result = luaK_code((uint64_t)a1, v8);
      }
      goto LABEL_16;
    case 0xC:
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 56) + 4 * (int)a2[2]) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 56)
                                                                                    + 4 * (int)a2[2]) & 0xFFFFC03F | (a3 << 6);
LABEL_16:
      a2[2] = a3;
      *a2 = 7;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t need_value(uint64_t a1, int a2)
{
  int *v2;
  int v3;
  int v4;

  if (a2 == -1)
    return 0;
  while (1)
  {
    v2 = (int *)(*(_QWORD *)(*(_QWORD *)a1 + 56) + 4 * a2);
    if (a2 < 1 || (v3 = *(v2 - 1), (luaP_opmodes[v3 & 0x3F] & 0x80000000) == 0))
      v3 = *v2;
    if ((v3 & 0x3F) != 0x23)
      break;
    v4 = (*v2 >> 14) - 0x1FFFF;
    a2 += v4 + 1;
    if (v4 == -1 || a2 == -1)
      return 0;
  }
  return 1;
}

uint64_t discharge2anyreg(uint64_t result, _DWORD *a2)
{
  uint64_t v3;
  unsigned __int8 v4;

  if (*a2 != 7)
  {
    v3 = result;
    luaK_checkstack(result, 1);
    v4 = *(_BYTE *)(v3 + 60) + 1;
    *(_BYTE *)(v3 + 60) = v4;
    return discharge2reg((int *)v3, a2, v4 - 1);
  }
  return result;
}

uint64_t removevalues(uint64_t result, int a2)
{
  int v2;
  uint64_t v3;
  int v4;

  if (a2 != -1)
  {
    v2 = a2;
    v3 = result;
    do
    {
      result = patchtestreg(v3, v2, 255);
      v4 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 56) + 4 * v2) >> 14) - 0x1FFFF;
      v2 += v4 + 1;
    }
    while (v4 != -1 && v2 != -1);
  }
  return result;
}

uint64_t luaopen_coroutine(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  luaL_checkversion_(a1, 136, 503.0, a3, a4, a5, a6, a7, a8, v15);
  lua_createtable((uint64_t)a1, 0, 7);
  luaL_setfuncs(a1, (uint64_t)&co_funcs, 0, v9, v10, v11, v12, v13);
  return 1;
}

uint64_t luaB_cocreate(_QWORD *a1)
{
  uint64_t v2;

  luaL_checktype(a1, 1, 6);
  v2 = lua_newthread((uint64_t)a1);
  lua_pushvalue(a1, 1);
  lua_xmove((uint64_t)a1, v2, 1);
  return 1;
}

uint64_t luaB_coresume(_QWORD *a1)
{
  _QWORD *v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;

  v2 = (_QWORD *)getco(a1);
  v3 = lua_gettop((uint64_t)a1);
  v4 = auxresume(a1, v2, v3 - 1);
  if (v4 < 0)
  {
    lua_pushBOOLean((uint64_t)a1, 0);
    v6 = 2;
    v7 = -2;
  }
  else
  {
    v5 = v4;
    lua_pushBOOLean((uint64_t)a1, 1);
    v6 = (v5 + 1);
    v7 = ~v5;
  }
  lua_rotate(a1, v7, 1);
  return v6;
}

uint64_t luaB_corunning(uint64_t a1)
{
  _BOOL4 v2;

  v2 = lua_pushthread(a1);
  lua_pushBOOLean(a1, v2);
  return 2;
}

uint64_t luaB_costatus(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  char *v5;
  _OWORD v7[8];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = getco(a1);
  if ((_QWORD *)v2 == a1)
  {
    v5 = "running";
  }
  else
  {
    v3 = v2;
    v4 = lua_status(v2);
    if (v4)
    {
      if (v4 == 1)
        v5 = "suspended";
      else
        v5 = "dead";
    }
    else
    {
      memset(v7, 0, sizeof(v7));
      if ((int)lua_getstack(v3, 0, (uint64_t)v7) <= 0)
      {
        if (lua_gettop(v3))
          v5 = "suspended";
        else
          v5 = "dead";
      }
      else
      {
        v5 = "normal";
      }
    }
  }
  lua_pushstring(a1, v5);
  return 1;
}

uint64_t luaB_cowrap(_QWORD *a1)
{
  luaB_cocreate(a1);
  lua_pushcclosure((uint64_t)a1, (uint64_t)luaB_auxwrap, 1);
  return 1;
}

uint64_t luaB_yield(uint64_t a1)
{
  int v2;

  v2 = lua_gettop(a1);
  return lua_yieldk(a1, v2, 0, 0);
}

uint64_t luaB_yieldable(uint64_t a1)
{
  _BOOL4 v2;

  v2 = lua_isyieldable(a1);
  lua_pushBOOLean(a1, v2);
  return 1;
}

uint64_t getco(_QWORD *a1)
{
  uint64_t v2;

  v2 = lua_tothread(a1, 1);
  if (!v2)
    luaL_argerror(a1, 1);
  return v2;
}

uint64_t auxresume(_QWORD *a1, _QWORD *a2, int a3)
{
  unint64_t v6;
  char *v7;

  if (!lua_checkstack(a2, a3))
  {
    v7 = "too many arguments to resume";
LABEL_11:
    lua_pushstring(a1, v7);
    return 0xFFFFFFFFLL;
  }
  if (!lua_status((uint64_t)a2) && !lua_gettop((uint64_t)a2))
  {
    v7 = "cannot resume dead coroutine";
    goto LABEL_11;
  }
  lua_xmove((uint64_t)a1, (uint64_t)a2, a3);
  if (lua_resume((uint64_t)a2, (uint64_t)a1, a3) > 1)
  {
    lua_xmove((uint64_t)a2, (uint64_t)a1, 1);
    return 0xFFFFFFFFLL;
  }
  v6 = lua_gettop((uint64_t)a2);
  if (!lua_checkstack(a1, (int)v6 + 1))
  {
    lua_settop((uint64_t)a2, ~(_DWORD)v6);
    v7 = "too many results to resume";
    goto LABEL_11;
  }
  lua_xmove((uint64_t)a2, (uint64_t)a1, v6);
  return v6;
}

uint64_t luaB_auxwrap(_QWORD *a1)
{
  _QWORD *v2;
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (_QWORD *)lua_tothread(a1, -1001001);
  v3 = lua_gettop((uint64_t)a1);
  result = auxresume(a1, v2, v3);
  if ((result & 0x80000000) != 0)
  {
    if (lua_isstring(a1, -1))
    {
      luaL_where(a1, 1);
      lua_rotate(a1, -2, 1);
      lua_concat((uint64_t)a1, 2, v5, v6, v7, v8, v9, v10);
    }
    return lua_error(a1);
  }
  return result;
}

uint64_t luaopen_debug(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  luaL_checkversion_(a1, 136, 503.0, a3, a4, a5, a6, a7, a8, v15);
  lua_createtable((uint64_t)a1, 0, 15);
  luaL_setfuncs(a1, (uint64_t)&dblib, 0, v9, v10, v11, v12, v13);
  return 1;
}

uint64_t db_getuservalue(_QWORD *a1)
{
  if (lua_type(a1, 1) == 7)
    lua_getuservalue(a1, 1);
  else
    lua_pushnil((uint64_t)a1);
  return 1;
}

uint64_t db_gethook(_QWORD *a1)
{
  _QWORD *v2;
  char v3;
  uint64_t (*v4)(_QWORD *, int *);
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  int v14;

  v2 = (_QWORD *)getthread(a1, &v14);
  v3 = lua_gethookmask((uint64_t)v2);
  v4 = (uint64_t (*)(_QWORD *, int *))lua_gethook((uint64_t)v2);
  if (v4)
  {
    if (v4 == hookf)
    {
      lua_rawgetp(a1, -1001000, (uint64_t)&HOOKKEY);
      checkstack((uint64_t)a1, v2, 1, v6, v7, v8, v9, v10, v13);
      lua_pushthread((uint64_t)v2);
      lua_xmove((uint64_t)v2, (uint64_t)a1, 1);
      lua_rawget(a1, -2);
      lua_rotate(a1, -2, -1);
      lua_settop((uint64_t)a1, 0xFFFFFFFE);
      if ((v3 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      lua_pushstring(a1, "external hook");
      if ((v3 & 1) != 0)
      {
LABEL_9:
        HIBYTE(v13) = 99;
        v5 = 1;
        if ((v3 & 2) == 0)
          goto LABEL_11;
        goto LABEL_10;
      }
    }
  }
  else
  {
    lua_pushnil((uint64_t)a1);
    if ((v3 & 1) != 0)
      goto LABEL_9;
  }
  v5 = 0;
  if ((v3 & 2) != 0)
LABEL_10:
    *((_BYTE *)&v13 + v5++ + 7) = 114;
LABEL_11:
  if ((v3 & 4) != 0)
    *((_BYTE *)&v13 + v5++ + 7) = 108;
  *((_BYTE *)&v13 + v5 + 7) = 0;
  lua_pushstring(a1, (char *)&v13 + 7);
  v11 = lua_gethookcount((uint64_t)v2);
  lua_pushinteger((uint64_t)a1, v11);
  return 3;
}

uint64_t db_getinfo(_QWORD *a1)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[5];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v24 = 0u;
  memset(v25, 0, sizeof(v25));
  v22 = 0u;
  v23 = 0u;
  v21 = 0;
  v2 = (_QWORD *)getthread(a1, &v21);
  v3 = v21;
  v4 = (v21 + 2);
  v5 = (char *)luaL_optlstring(a1, v4, "flnStu", 0);
  checkstack((uint64_t)a1, v2, 3, v6, v7, v8, v9, v10, v20);
  v11 = (v3 + 1);
  if (lua_type(a1, v11) == 6)
  {
    v5 = (char *)lua_pushfstring((uint64_t)a1, ">%s", v12, v13, v14, v15, v16, v17, (uint64_t)v5);
    lua_pushvalue(a1, v11);
    lua_xmove((uint64_t)a1, (uint64_t)v2, 1);
  }
  else
  {
    v18 = luaL_checkinteger(a1, v11);
    if (!lua_getstack((uint64_t)v2, v18, (uint64_t)&v22))
    {
      lua_pushnil((uint64_t)a1);
      return 1;
    }
  }
  if (!lua_getinfo((uint64_t)v2, v5, (uint64_t)&v22))
    return luaL_argerror(a1, v4);
  lua_createtable((uint64_t)a1, 0, 0);
  if (strchr(v5, 83))
  {
    lua_pushstring(a1, (char *)v24);
    lua_setfield(a1, -2, "source");
    lua_pushstring(a1, (char *)v25 + 8);
    lua_setfield(a1, -2, "short_src");
    lua_pushinteger((uint64_t)a1, SHIDWORD(v24));
    lua_setfield(a1, -2, "linedefined");
    lua_pushinteger((uint64_t)a1, SLODWORD(v25[0]));
    lua_setfield(a1, -2, "lastlinedefined");
    lua_pushstring(a1, *((char **)&v23 + 1));
    lua_setfield(a1, -2, "what");
  }
  if (strchr(v5, 108))
  {
    lua_pushinteger((uint64_t)a1, SDWORD2(v24));
    lua_setfield(a1, -2, "currentline");
  }
  if (strchr(v5, 117))
  {
    lua_pushinteger((uint64_t)a1, BYTE4(v25[0]));
    lua_setfield(a1, -2, "nups");
    lua_pushinteger((uint64_t)a1, BYTE5(v25[0]));
    lua_setfield(a1, -2, "nparams");
    lua_pushBOOLean((uint64_t)a1, SBYTE6(v25[0]));
    lua_setfield(a1, -2, "isvararg");
  }
  if (strchr(v5, 110))
  {
    lua_pushstring(a1, *((char **)&v22 + 1));
    lua_setfield(a1, -2, "name");
    lua_pushstring(a1, (char *)v23);
    lua_setfield(a1, -2, "namewhat");
  }
  if (strchr(v5, 116))
  {
    lua_pushBOOLean((uint64_t)a1, SBYTE7(v25[0]));
    lua_setfield(a1, -2, "istailcall");
  }
  if (strchr(v5, 76))
    treatstackoption(a1, (uint64_t)v2, "activelines");
  if (strchr(v5, 102))
    treatstackoption(a1, (uint64_t)v2, "func");
  return 1;
}

uint64_t db_getlocal(_QWORD *a1)
{
  _QWORD *v2;
  int v3;
  int v4;
  uint64_t v5;
  char *v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int v17;
  _OWORD v18[8];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v17 = 0;
  v2 = (_QWORD *)getthread(a1, &v17);
  v3 = v17;
  v4 = luaL_checkinteger(a1, (v17 + 2));
  v5 = (v3 + 1);
  if (lua_type(a1, v5) == 6)
  {
    lua_pushvalue(a1, v5);
    v6 = (char *)lua_getlocal((uint64_t)a1, 0, v4);
    lua_pushstring(a1, v6);
    return 1;
  }
  memset(v18, 0, sizeof(v18));
  v8 = luaL_checkinteger(a1, v5);
  if (!lua_getstack((uint64_t)v2, v8, (uint64_t)v18))
    return luaL_argerror(a1, v5);
  checkstack((uint64_t)a1, v2, 1, v9, v10, v11, v12, v13, v16);
  v14 = lua_getlocal((uint64_t)v2, (uint64_t)v18, v4);
  if (!v14)
  {
    lua_pushnil((uint64_t)a1);
    return 1;
  }
  v15 = (char *)v14;
  lua_xmove((uint64_t)v2, (uint64_t)a1, 1);
  lua_pushstring(a1, v15);
  lua_rotate(a1, -2, 1);
  return 2;
}

uint64_t db_getregistry(_QWORD *a1)
{
  lua_pushvalue(a1, -1001000);
  return 1;
}

uint64_t db_getmetatable(_QWORD *a1)
{
  luaL_checkany(a1, 1);
  if (!lua_getmetatable(a1, 1))
    lua_pushnil((uint64_t)a1);
  return 1;
}

uint64_t db_getupvalue(_QWORD *a1)
{
  return auxupvalue(a1, 1);
}

uint64_t db_upvaluejoin(_QWORD *a1)
{
  int v2;
  int v3;

  v2 = checkupval(a1, 1, 2);
  v3 = checkupval(a1, 3, 4);
  if (lua_iscfunction(a1, 1))
    luaL_argerror(a1, 1);
  if (lua_iscfunction(a1, 3))
    luaL_argerror(a1, 3);
  lua_upvaluejoin(a1, 1, v2, 3, v3);
  return 0;
}

uint64_t db_upvalueid(_QWORD *a1)
{
  int v2;
  uint64_t v3;

  v2 = checkupval(a1, 1, 2);
  v3 = lua_upvalueid(a1, 1, v2);
  lua_pushlightuserdata((uint64_t)a1, v3);
  return 1;
}

uint64_t db_setuservalue(_QWORD *a1)
{
  luaL_checktype(a1, 1, 7);
  luaL_checkany(a1, 2);
  lua_settop((uint64_t)a1, 2u);
  lua_setuservalue(a1, 1);
  return 1;
}

uint64_t db_sethook(uint64_t *a1)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  char *v5;
  int v6;
  int v7;
  char *v8;
  int v9;
  int v10;
  uint64_t (*v11)(_QWORD *, int *);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  int v19;

  v19 = 0;
  v2 = (_QWORD *)getthread(a1, &v19);
  v3 = v19;
  v4 = (v19 + 1);
  if ((int)lua_type(a1, v19 + 1) <= 0)
  {
    lua_settop((uint64_t)a1, v4);
    v6 = 0;
    v11 = 0;
    v10 = 0;
  }
  else
  {
    v5 = (char *)luaL_checklstring(a1, (v3 + 2), 0);
    luaL_checktype(a1, v4, 6);
    v6 = luaL_optinteger(a1, (v3 + 3), 0);
    v7 = strchr(v5, 99) != 0;
    if (strchr(v5, 114))
      v7 |= 2u;
    v8 = strchr(v5, 108);
    v9 = v7 | 4;
    if (!v8)
      v9 = v7;
    if (v6 <= 0)
      v10 = v9;
    else
      v10 = v9 | 8;
    v11 = hookf;
  }
  if (!lua_rawgetp(a1, -1001000, (uint64_t)&HOOKKEY))
  {
    lua_createtable((uint64_t)a1, 0, 2);
    lua_pushvalue(a1, -1);
    lua_rawsetp(a1, -1001000, (uint64_t)&HOOKKEY);
    lua_pushstring(a1, "k");
    lua_setfield(a1, -2, "__mode");
    lua_pushvalue(a1, -1);
    lua_setmetatable(a1, -2);
  }
  checkstack((uint64_t)a1, v2, 1, v12, v13, v14, v15, v16, v18);
  lua_pushthread((uint64_t)v2);
  lua_xmove((uint64_t)v2, (uint64_t)a1, 1);
  lua_pushvalue(a1, v4);
  lua_rawset(a1, -3);
  lua_sethook((uint64_t)v2, (uint64_t)v11, v10, v6);
  return 0;
}

uint64_t db_setlocal(_QWORD *a1)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  int v15;
  _OWORD v16[8];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  v2 = (_QWORD *)getthread(a1, &v15);
  memset(v16, 0, sizeof(v16));
  v3 = v15;
  v4 = (v15 + 1);
  v5 = luaL_checkinteger(a1, v4);
  v6 = luaL_checkinteger(a1, (v3 + 2));
  if (!lua_getstack((uint64_t)v2, v5, (uint64_t)v16))
    return luaL_argerror(a1, v4);
  luaL_checkany(a1, (v3 + 3));
  lua_settop((uint64_t)a1, v3 + 3);
  checkstack((uint64_t)a1, v2, 1, v7, v8, v9, v10, v11, v14);
  lua_xmove((uint64_t)a1, (uint64_t)v2, 1);
  v12 = (char *)lua_setlocal((uint64_t)v2, (uint64_t)v16, v6);
  if (!v12)
    lua_settop((uint64_t)v2, 0xFFFFFFFE);
  lua_pushstring(a1, v12);
  return 1;
}

uint64_t db_setmetatable(uint64_t *a1)
{
  int v2;

  v2 = lua_type(a1, 2);
  if (v2 && v2 != 5)
    luaL_argerror(a1, 2);
  lua_settop((uint64_t)a1, 2u);
  lua_setmetatable(a1, 1);
  return 1;
}

uint64_t db_setupvalue(_QWORD *a1)
{
  luaL_checkany(a1, 3);
  return auxupvalue(a1, 0);
}

uint64_t db_traceback(_QWORD *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v8;

  v8 = 0;
  v2 = getthread(a1, &v8);
  v3 = v8;
  v4 = v8 + 1;
  v5 = lua_tolstring(a1, v8 + 1, 0);
  if (v5 || (int)lua_type(a1, v4) < 1)
  {
    v6 = luaL_optinteger(a1, (v3 + 2), v2 == (_QWORD)a1);
    luaL_traceback(a1, v2, v5, v6);
  }
  else
  {
    lua_pushvalue(a1, v4);
  }
  return 1;
}

uint64_t getthread(_QWORD *a1, _DWORD *a2)
{
  if (lua_type(a1, 1) == 8)
  {
    *a2 = 1;
    return lua_tothread(a1, 1);
  }
  else
  {
    *a2 = 0;
    return (uint64_t)a1;
  }
}

uint64_t hookf(_QWORD *a1, int *a2)
{
  uint64_t result;
  uint64_t v5;

  lua_rawgetp(a1, -1001000, (uint64_t)&HOOKKEY);
  lua_pushthread((uint64_t)a1);
  result = lua_rawget(a1, -2);
  if ((_DWORD)result == 6)
  {
    lua_pushstring(a1, hookf_hooknames[*a2]);
    v5 = a2[10];
    if ((v5 & 0x80000000) != 0)
      lua_pushnil((uint64_t)a1);
    else
      lua_pushinteger((uint64_t)a1, v5);
    return lua_callk((uint64_t)a1, 2, 0, 0, 0);
  }
  return result;
}

uint64_t checkstack(uint64_t result, _QWORD *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if ((_QWORD *)result != a2)
  {
    v9 = (_QWORD *)result;
    result = lua_checkstack(a2, a3);
    if (!(_DWORD)result)
      return luaL_error(v9, "stack overflow", v10, v11, v12, v13, v14, v15, a9);
  }
  return result;
}

uint64_t *treatstackoption(_QWORD *a1, uint64_t a2, char *a3)
{
  if (a1 == (_QWORD *)a2)
    lua_rotate(a1, -2, 1);
  else
    lua_xmove(a2, (uint64_t)a1, 1);
  return lua_setfield(a1, -2, a3);
}

uint64_t auxupvalue(_QWORD *a1, int a2)
{
  int v4;
  char *v5;
  uint64_t v6;

  v4 = luaL_checkinteger(a1, 2);
  luaL_checktype(a1, 1, 6);
  if (a2)
    lua_getupvalue(a1, 1, v4);
  else
    v5 = lua_setupvalue(a1, 1, v4);
  if (!v5)
    return 0;
  lua_pushstring(a1, v5);
  v6 = (a2 + 1);
  lua_rotate(a1, ~a2, 1);
  return v6;
}

uint64_t checkupval(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = luaL_checkinteger(a1, a3);
  luaL_checktype(a1, a2, 6);
  lua_getupvalue(a1, a2, v6);
  if (!v7)
    luaL_argerror(a1, a3);
  return v6;
}

uint64_t lua_sethook(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  char v7;

  v4 = *(_QWORD *)(result + 32);
  if ((*(_BYTE *)(v4 + 66) & 2) != 0)
    *(_QWORD *)(result + 40) = *(_QWORD *)(v4 + 40);
  if (a2)
    v5 = a3 == 0;
  else
    v5 = 1;
  if (v5)
    v6 = 0;
  else
    v6 = a2;
  *(_QWORD *)(result + 168) = v6;
  *(_DWORD *)(result + 188) = a4;
  *(_DWORD *)(result + 192) = a4;
  if (v5)
    v7 = 0;
  else
    v7 = a3;
  *(_BYTE *)(result + 200) = v7;
  return result;
}

uint64_t lua_gethook(uint64_t a1)
{
  return *(_QWORD *)(a1 + 168);
}

uint64_t lua_gethookmask(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 200);
}

uint64_t lua_gethookcount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 188);
}

uint64_t lua_getstack(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v5;
  uint64_t result;

  if (a2 < 0)
    return 0;
  v3 = a1 + 96;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = v4 != a1 + 96;
  if (a2 && v4 != a1 + 96)
  {
    do
    {
      v4 = *(_QWORD *)(v4 + 16);
      v5 = v4 != v3;
      --a2;
    }
    while (a2 && v4 != v3);
  }
  result = 0;
  if (!a2 && v5)
  {
    *(_QWORD *)(a3 + 120) = v4;
    return 1;
  }
  return result;
}

uint64_t lua_getlocal(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;

  if (*(_BYTE *)(a1 + 10) == 1)
  {
    v4 = *(uint64_t **)(a1 + 32);
    v5 = *v4;
    v6 = *(_QWORD *)(a1 + 56);
    *v4 = v6 + v4[7];
    v4[7] = v5 - v6;
  }
  if (a2)
  {
    v12 = 0;
    result = (uint64_t)findlocal(a1, *(_QWORD **)(a2 + 120), a3, (uint64_t *)&v12);
    if (result)
    {
      *(_OWORD *)*(_QWORD *)(a1 + 16) = *v12;
      *(_QWORD *)(a1 + 16) += 16;
    }
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (*(_DWORD *)(v8 - 8) == 70)
      result = luaF_getlocalname(*(_QWORD *)(*(_QWORD *)(v8 - 16) + 24), a3, 0);
    else
      result = 0;
  }
  if (*(_BYTE *)(a1 + 10) == 1)
  {
    v9 = *(uint64_t **)(a1 + 32);
    v10 = *v9;
    v11 = *(_QWORD *)(a1 + 56);
    *v9 = v11 + v9[7];
    v9[7] = v10 - v11;
  }
  return result;
}

const char *findlocal(uint64_t a1, _QWORD *a2, int a3, uint64_t *a4)
{
  uint64_t v8;
  _QWORD *v9;
  const char *result;
  uint64_t v11;
  uint64_t v12;

  if ((*((_BYTE *)a2 + 66) & 2) != 0)
  {
    if (a3 < 0)
    {
      v12 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)*a2 + 24) + 10);
      if ((int)(((a2[4] - *a2) >> 4) - v12) <= -a3)
        return 0;
      v11 = *a2 + 16 * v12 + 16 * -a3;
      result = "(*vararg)";
      goto LABEL_13;
    }
    v8 = a2[4];
    result = (const char *)luaF_getlocalname(*(_QWORD *)(*(_QWORD *)*a2 + 24), a3, ((a2[5] - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)*a2 + 24) + 56)) >> 2) - 1);
    if (result)
    {
LABEL_12:
      v11 = v8 + 16 * (a3 - 1);
LABEL_13:
      *a4 = v11;
      return result;
    }
  }
  else
  {
    v8 = *a2 + 16;
  }
  if (*(_QWORD **)(a1 + 32) == a2)
    v9 = (_QWORD *)(a1 + 16);
  else
    v9 = (_QWORD *)a2[3];
  result = 0;
  if (a3 >= 1 && (*v9 - v8) >> 4 >= a3)
  {
    result = "(*temporary)";
    goto LABEL_12;
  }
  return result;
}

const char *lua_setlocal(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  const char *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;

  v11 = 0;
  if (*(_BYTE *)(a1 + 10) == 1)
  {
    v4 = *(uint64_t **)(a1 + 32);
    v5 = *v4;
    v6 = *(_QWORD *)(a1 + 56);
    *v4 = v6 + v4[7];
    v4[7] = v5 - v6;
  }
  result = findlocal(a1, *(_QWORD **)(a2 + 120), a3, (uint64_t *)&v11);
  if (result)
  {
    *v11 = *(_OWORD *)(*(_QWORD *)(a1 + 16) - 16);
    *(_QWORD *)(a1 + 16) -= 16;
  }
  if (*(_BYTE *)(a1 + 10) == 1)
  {
    v8 = *(uint64_t **)(a1 + 32);
    v9 = *v8;
    v10 = *(_QWORD *)(a1 + 56);
    *v8 = v10 + v8[7];
    v8[7] = v9 - v10;
  }
  return result;
}

uint64_t lua_getinfo(uint64_t a1, char *a2, uint64_t a3)
{
  char *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char v19;
  char *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  const char *v31;
  const char *v32;
  const char *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char **v44;
  __n128 v45;

  v4 = a2;
  if (*(_BYTE *)(a1 + 10) == 1)
  {
    v6 = *(uint64_t **)(a1 + 32);
    v7 = *v6;
    v8 = *(_QWORD *)(a1 + 56);
    *v6 = v8 + v6[7];
    v6[7] = v7 - v8;
  }
  if (*a2 == 62)
  {
    v9 = 0;
    v10 = *(_QWORD *)(a1 + 16) - 16;
    v4 = a2 + 1;
    *(_QWORD *)(a1 + 16) = v10;
  }
  else
  {
    v9 = *(_QWORD *)(a3 + 120);
    v10 = *(_QWORD *)v9;
  }
  if ((*(_DWORD *)(v10 + 8) & 0x1F) == 6)
    v11 = *(_QWORD *)v10;
  else
    v11 = 0;
  v12 = *v4;
  if (*v4)
  {
    v44 = (const char **)(a3 + 8);
    v13 = (unsigned __int8 *)(v4 + 1);
    v14 = 1;
    do
    {
      if (v12 <= 107)
      {
        if (v12 != 76)
        {
          if (v12 == 83)
          {
            if (v11 && *(_BYTE *)(v11 + 8) != 38)
            {
              v22 = *(_QWORD *)(v11 + 24);
              v23 = *(_QWORD *)(v22 + 104);
              if (v23)
                v20 = (char *)(v23 + 24);
              else
                v20 = "=?";
              *(_QWORD *)(a3 + 32) = v20;
              v24 = *(_QWORD *)(v22 + 40);
              *(_QWORD *)(a3 + 44) = v24;
              v21 = "Lua";
              if (!(_DWORD)v24)
                v21 = "main";
            }
            else
            {
              v20 = "=[C]";
              *(_QWORD *)(a3 + 32) = "=[C]";
              *(_QWORD *)(a3 + 44) = -1;
              v21 = "C";
            }
            *(_QWORD *)(a3 + 24) = v21;
            luaO_chunkid((char *)(a3 + 56), v20, 0x3CuLL);
          }
          else if (v12 != 102)
          {
LABEL_20:
            v14 = 0;
          }
        }
      }
      else
      {
        switch(v12)
        {
          case 'l':
            if (v9
              && (*(_BYTE *)(v9 + 66) & 2) != 0
              && (v15 = *(_QWORD *)(**(_QWORD **)v9 + 24), (v16 = *(_QWORD *)(v15 + 72)) != 0))
            {
              v17 = *(_DWORD *)(v16
                              + 4 * ((((*(_QWORD *)(v9 + 40) - *(_QWORD *)(v15 + 56)) << 30) - 0x100000000) >> 32));
            }
            else
            {
              v17 = -1;
            }
            *(_DWORD *)(a3 + 40) = v17;
            break;
          case 'n':
            if (v9
              && (*(_BYTE *)(v9 + 66) & 0x20) == 0
              && (v18 = *(_QWORD *)(v9 + 16), (*(_BYTE *)(v18 + 66) & 2) != 0))
            {
              if ((*(_BYTE *)(v18 + 66) & 4) != 0)
              {
                v32 = "?";
                v31 = "hook";
              }
              else
              {
                v26 = 0;
                v27 = *(_QWORD **)(**(_QWORD **)v18 + 24);
                v28 = v27[7];
                v29 = ((unint64_t)(*(_QWORD *)(v18 + 40) - v28) >> 2) - 1;
                v30 = *(_DWORD *)(v28 + 4 * v29);
                v31 = "for iterator";
                v32 = "for iterator";
                switch(v30 & 0x3F)
                {
                  case 8u:
                  case 0xAu:
                    v26 = 1;
                    goto LABEL_50;
                  case 0xDu:
                  case 0xEu:
                  case 0xFu:
                  case 0x10u:
                  case 0x12u:
                  case 0x13u:
                  case 0x14u:
                  case 0x15u:
                  case 0x16u:
                  case 0x17u:
                  case 0x18u:
                    v26 = (*(_DWORD *)(v28 + 4 * v29) & 0x3Fu) - 7;
                    goto LABEL_50;
                  case 0x19u:
                    v26 = 18;
                    goto LABEL_50;
                  case 0x1Au:
                    v26 = 19;
                    goto LABEL_50;
                  case 0x1Cu:
                    v26 = 4;
                    goto LABEL_50;
                  case 0x1Du:
                    v26 = 22;
                    goto LABEL_50;
                  case 0x1Fu:
                    v26 = 5;
                    goto LABEL_50;
                  case 0x20u:
                    v26 = 20;
                    goto LABEL_50;
                  case 0x21u:
                    v26 = 21;
                    goto LABEL_50;
                  case 0x24u:
                  case 0x25u:
                    v33 = getobjname(v27, v29, (v30 >> 6), v44);
                    *(_QWORD *)(a3 + 16) = v33;
                    if (!v33)
                      goto LABEL_24;
                    goto LABEL_45;
                  case 0x29u:
                    break;
                  default:
LABEL_50:
                    v32 = (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v26 + 248) + 24);
                    v31 = "metamethod";
                    break;
                }
              }
              *(_QWORD *)(a3 + 8) = v32;
              *(_QWORD *)(a3 + 16) = v31;
            }
            else
            {
LABEL_24:
              *(_QWORD *)(a3 + 8) = 0;
              *(_QWORD *)(a3 + 16) = &byte_1DEBD87CE;
            }
            break;
          case 't':
            if (v9)
              v19 = *(_BYTE *)(v9 + 66) & 0x20;
            else
              v19 = 0;
            *(_BYTE *)(a3 + 55) = v19;
            break;
          case 'u':
            if (v11)
            {
              *(_BYTE *)(a3 + 52) = *(_BYTE *)(v11 + 10);
              if (*(_BYTE *)(v11 + 8) != 38)
              {
                *(_BYTE *)(a3 + 54) = *(_BYTE *)(*(_QWORD *)(v11 + 24) + 11);
                *(_BYTE *)(a3 + 53) = *(_BYTE *)(*(_QWORD *)(v11 + 24) + 10);
                break;
              }
            }
            else
            {
              *(_BYTE *)(a3 + 52) = 0;
            }
            *(_WORD *)(a3 + 53) = 256;
            break;
          default:
            goto LABEL_20;
        }
      }
LABEL_45:
      v25 = *v13++;
      v12 = v25;
    }
    while (v25);
  }
  else
  {
    v14 = 1;
  }
  if (strchr(v4, 102))
  {
    *(_OWORD *)*(_QWORD *)(a1 + 16) = *(_OWORD *)v10;
    *(_QWORD *)(a1 + 16) += 16;
  }
  if (*(_BYTE *)(a1 + 10) == 1)
  {
    v34 = *(uint64_t **)(a1 + 32);
    v35 = *v34;
    v36 = *(_QWORD *)(a1 + 56);
    *v34 = v36 + v34[7];
    v34[7] = v35 - v36;
  }
  if (strchr(v4, 76))
  {
    if (v11 && *(_BYTE *)(v11 + 8) != 38)
    {
      v45 = 0uLL;
      v38 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 72);
      v39 = luaH_new(a1);
      v40 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)v40 = v39;
      *(_DWORD *)(v40 + 8) = 69;
      *(_QWORD *)(a1 + 16) += 16;
      v45.n128_u32[0] = 1;
      v45.n128_u32[2] = 1;
      if (*(int *)(*(_QWORD *)(v11 + 24) + 28) >= 1)
      {
        v41 = v39;
        v42 = 0;
        do
          luaH_setint(a1, v41, *(int *)(v38 + 4 * v42++), &v45);
        while (v42 < *(int *)(*(_QWORD *)(v11 + 24) + 28));
      }
    }
    else
    {
      v37 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)(v37 + 8) = 0;
      *(_QWORD *)(a1 + 16) = v37 + 16;
    }
  }
  return v14;
}

uint64_t luaG_typeerror(uint64_t a1, uint64_t a2, const char *a3)
{
  const char *v5;
  char *v6;

  v5 = luaT_typenames_[(*(_DWORD *)(a2 + 8) & 0xF) + 1];
  v6 = varinfo(a1, a2);
  return luaG_runerror(a1, "attempt to %s a %s value%s", a3, v5, v6);
}

uint64_t luaG_runerror(_QWORD *a1, char *a2, ...)
{
  uint64_t v3;
  const char *v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  va_list va;

  va_start(va, a2);
  v3 = a1[4];
  v4 = (const char *)luaO_pushvfstring((uint64_t)a1, a2, (uint64_t *)va);
  if ((*(_BYTE *)(v3 + 66) & 2) != 0)
  {
    v5 = *(_QWORD **)(**(_QWORD **)v3 + 24);
    v6 = v5[9];
    if (v6)
      v7 = *(_DWORD *)(v6 + 4 * ((((*(_QWORD *)(v3 + 40) - v5[7]) << 30) - 0x100000000) >> 32));
    else
      v7 = -1;
    luaG_addinfo((uint64_t)a1, v4, v5[13], v7);
  }
  return luaG_errormsg(a1);
}

char *varinfo(uint64_t a1, uint64_t a2)
{
  uint64_t **v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  uint64_t *v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  uint64_t v12;
  const char *v13;

  v13 = 0;
  v2 = *(uint64_t ***)(a1 + 32);
  if ((*((_BYTE *)v2 + 66) & 2) == 0)
    return &byte_1DEBD87CE;
  v4 = **v2;
  if (*(_BYTE *)(v4 + 10))
  {
    v5 = 0;
    v6 = (_QWORD **)(v4 + 32);
    while (**v6 != a2)
    {
      v5 += 16;
      ++v6;
      if (16 * *(unsigned __int8 *)(v4 + 10) == v5)
        goto LABEL_6;
    }
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 88) + v5);
    if (v12)
      v10 = (const char *)(v12 + 24);
    else
      v10 = "?";
    v9 = "upvalue";
    return (char *)luaO_pushfstring(a1, " (%s '%s')", v9, v10);
  }
LABEL_6:
  v7 = v2[4];
  v8 = a2 - (_QWORD)v7;
  if (a2 - (uint64_t)v7 < -15)
    return &byte_1DEBD87CE;
  if (v8 >> 4 >= ((char *)v2[1] - (char *)v7) >> 4)
    return &byte_1DEBD87CE;
  v9 = getobjname(*(_QWORD **)(v4 + 24), (((unint64_t)v2[5] - *(_QWORD *)(*(_QWORD *)(v4 + 24) + 56)) >> 2) - 1, (unint64_t)v8 >> 4, &v13);
  if (!v9)
    return &byte_1DEBD87CE;
  v10 = v13;
  return (char *)luaO_pushfstring(a1, " (%s '%s')", v9, v10);
}

uint64_t luaG_concaterror(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(_DWORD *)(a2 + 8) & 0xFu) - 3 < 2)
    a2 = a3;
  return luaG_typeerror(a1, a2, "concatenate");
}

uint64_t luaG_opinterror(uint64_t a1, _DWORD *a2, uint64_t a3, const char *a4)
{
  uint64_t v9;

  v9 = 0;
  if (a2[2] == 3)
  {
    v9 = *(_QWORD *)a2;
  }
  else if (!luaV_tonumber_(a2, (double *)&v9))
  {
    a3 = (uint64_t)a2;
  }
  return luaG_typeerror(a1, a3, a4);
}

uint64_t luaG_tointerror(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  char *v6;
  uint64_t v8;

  v8 = 0;
  if (a2[2] == 19)
  {
    v8 = *(_QWORD *)a2;
  }
  else if (!luaV_tointeger(a2, &v8))
  {
    a3 = (uint64_t)a2;
  }
  v6 = varinfo(a1, a3);
  return luaG_runerror(a1, "number%s has no integer representation", v6);
}

uint64_t luaG_ordererror(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (luaT_typenames_[(*(_DWORD *)(a2 + 8) & 0xF) + 1] == luaT_typenames_[(*(_DWORD *)(a3 + 8) & 0xF) + 1])
    return luaG_runerror(a1, "attempt to compare two %s values");
  else
    return luaG_runerror(a1, "attempt to compare %s with %s");
}

uint64_t luaG_addinfo(uint64_t a1, const char *a2, uint64_t a3, int a4)
{
  char v8[60];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a3)
    luaO_chunkid(v8, (char *)(a3 + 24), 0x3CuLL);
  else
    *(_WORD *)v8 = 63;
  return luaO_pushfstring(a1, "%s:%d: %s", v8, a4, a2);
}

uint64_t luaG_errormsg(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[22];
  if (v2)
  {
    v3 = a1[7];
    *(_OWORD *)a1[2] = *(_OWORD *)(a1[2] - 16);
    *(_OWORD *)(a1[2] - 16) = *(_OWORD *)(v3 + v2);
    v4 = a1[2];
    a1[2] = v4 + 16;
    luaD_call((uint64_t)a1, (char *)(v4 - 16), 1, 0);
  }
  return luaD_throw((uint64_t)a1, 2);
}

uint64_t luaG_traceexec(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  _BYTE *v4;
  char v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  int v13;

  v1 = result;
  v2 = *(_QWORD *)(result + 32);
  v3 = *(_BYTE *)(result + 200);
  if ((v3 & 8) != 0 && !*(_DWORD *)(result + 192))
  {
    *(_DWORD *)(result + 192) = *(_DWORD *)(result + 188);
    v4 = (_BYTE *)(v2 + 66);
    v5 = *(_BYTE *)(v2 + 66);
    if ((v5 & 0x40) == 0)
    {
      result = luaD_hook(result, 3, -1);
      v6 = 1;
      if ((v3 & 4) == 0)
        goto LABEL_19;
      goto LABEL_5;
    }
LABEL_11:
    *v4 = v5 & 0xBF;
    return result;
  }
  v4 = (_BYTE *)(v2 + 66);
  v5 = *(_BYTE *)(v2 + 66);
  if ((v5 & 0x40) != 0)
    goto LABEL_11;
  v6 = 0;
  if ((*(_BYTE *)(result + 200) & 4) == 0)
    goto LABEL_19;
LABEL_5:
  v7 = *(_QWORD *)(**(_QWORD **)v2 + 24);
  v8 = *(_QWORD *)(v2 + 40);
  v9 = *(_QWORD *)(v7 + 56);
  v10 = *(_QWORD *)(v7 + 72);
  if (v10)
  {
    v11 = *(_DWORD *)(v10 + 4 * (int)(((v8 - v9) >> 2) - 1));
    if (((v8 - v9) >> 2) == 1)
      goto LABEL_18;
  }
  else
  {
    v11 = -1;
    if (((v8 - v9) >> 2) == 1)
    {
LABEL_18:
      result = luaD_hook(v1, 2, v11);
      goto LABEL_19;
    }
  }
  v12 = *(_QWORD *)(v1 + 40);
  if (v8 <= v12)
    goto LABEL_18;
  v13 = v10 ? *(_DWORD *)(v10 + 4 * ((uint64_t)(((v12 - v9) << 30) - 0x100000000) >> 32)) : -1;
  if (v11 != v13)
    goto LABEL_18;
LABEL_19:
  *(_QWORD *)(v1 + 40) = *(_QWORD *)(v2 + 40);
  if (*(_BYTE *)(v1 + 10) == 1)
  {
    if (v6)
      *(_DWORD *)(v1 + 192) = 1;
    *(_QWORD *)(v2 + 40) -= 4;
    *(_BYTE *)(v2 + 66) |= 0x40u;
    *(_QWORD *)v2 = *(_QWORD *)(v1 + 16) - 16;
    return luaD_throw(v1, 1);
  }
  return result;
}

const char *getobjname(_QWORD *a1, int a2, signed int a3, const char **a4)
{
  uint64_t v6;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  signed int v16;
  unsigned int v17;
  uint64_t v18;
  BOOL v19;
  unsigned int v21;
  signed int v22;
  int v24;
  unsigned int v25;
  unint64_t v27;
  int v28;
  unsigned int v29;
  unint64_t v30;
  const char *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;

  LODWORD(v6) = a2;
  v8 = "local";
  while (1)
  {
    v9 = luaF_getlocalname((uint64_t)a1, a3 + 1, v6);
    *a4 = (const char *)v9;
    if (v9)
      return v8;
    v10 = v6;
    if ((int)v6 < 1)
      return 0;
    v11 = 0;
    v12 = 0;
    v13 = a1[7];
    v6 = 0xFFFFFFFFLL;
    do
    {
      v14 = *(unsigned int *)(v13 + 4 * v11);
      v15 = v14 & 0x3F;
      v16 = (v14 >> 6);
      if ((*(_DWORD *)(v13 + 4 * v11) & 0x3Fu) > 0x23)
      {
        if ((v15 - 36) < 2)
          goto LABEL_9;
        if ((_DWORD)v15 == 41)
        {
          v16 += 2;
LABEL_9:
          if (v11 < v12)
            v17 = -1;
          else
            v17 = v11;
          if (v16 <= a3)
            v6 = v17;
          else
            v6 = v6;
          goto LABEL_44;
        }
LABEL_35:
        v24 = luaP_opmodes[v15] & 0x40;
        if (v11 < v12)
          v25 = -1;
        else
          v25 = v11;
        if (v16 != a3 || v24 == 0)
          v6 = v6;
        else
          v6 = v25;
        goto LABEL_44;
      }
      if ((_DWORD)v15 == 4)
      {
        if (v11 < v12)
          v21 = -1;
        else
          v21 = v11;
        v19 = v16 <= a3;
        v22 = v16 + (v14 >> 23);
        if (!v19 || v22 < a3)
          v6 = v6;
        else
          v6 = v21;
      }
      else
      {
        if ((_DWORD)v15 != 30)
          goto LABEL_35;
        v18 = v11 + (v14 >> 14) - 131070;
        v19 = (int)v18 > v12 && v11 < (int)v18;
        if (v19 && (int)v18 <= (int)v10)
          v12 = v11 + (*(_DWORD *)(v13 + 4 * v11) >> 14) - 131070;
      }
LABEL_44:
      ++v11;
    }
    while (v10 != v11);
    if ((_DWORD)v6 == -1)
      return 0;
    v27 = *(unsigned int *)(v13 + 4 * (int)v6);
    v28 = *(_DWORD *)(v13 + 4 * (int)v6) & 0x3F;
    if ((v27 & 0x3F) != 0)
    {
      v8 = 0;
      switch(v28)
      {
        case 1:
          v32 = v27 >> 14;
          goto LABEL_55;
        case 2:
          v32 = *(_DWORD *)(v13 + 4 * (int)v6 + 4) >> 6;
LABEL_55:
          v33 = a1[6];
          if ((*(_DWORD *)(v33 + 16 * v32 + 8) & 0xF) != 4)
            return 0;
          *a4 = (const char *)(*(_QWORD *)(v33 + 16 * v32) + 24);
          return "constant";
        case 5:
          v34 = *(_QWORD *)(a1[11] + ((v27 >> 19) & 0x1FF0));
          if (v34)
            v35 = (const char *)(v34 + 24);
          else
            v35 = "?";
          *a4 = v35;
          return "upvalue";
        case 6:
        case 7:
          v29 = (v27 >> 14) & 0x1FF;
          v30 = v27 >> 23;
          if (v28 == 7)
          {
            v31 = (const char *)luaF_getlocalname((uint64_t)a1, (int)v30 + 1, v6);
            kname((uint64_t)a1, v6, v29, a4);
            if (!v31)
              return "field";
          }
          else
          {
            v36 = *(_QWORD *)(a1[11] + 16 * v30);
            if (v36)
              v31 = (const char *)(v36 + 24);
            else
              v31 = "?";
            kname((uint64_t)a1, v6, (v27 >> 14) & 0x1FF, a4);
          }
          if (!strcmp(v31, "_ENV"))
            v8 = "global";
          else
            v8 = "field";
          break;
        case 12:
          kname((uint64_t)a1, v6, (v27 >> 14) & 0x1FF, a4);
          return "method";
        default:
          return v8;
      }
      return v8;
    }
    a3 = v27 >> 23;
    if (v27 >> 23 >= (v27 >> 6))
      return 0;
  }
}

uint64_t kname(uint64_t result, uint64_t a2, int a3, const char **a4)
{
  uint64_t v5;
  uint64_t v6;
  const char *v7;

  if ((a3 & 0x100) != 0)
  {
    v5 = *(_QWORD *)(result + 48);
    v6 = a3 & 0xFFFFFEFF;
    if ((*(_DWORD *)(v5 + 16 * v6 + 8) & 0xF) == 4)
    {
      v7 = (const char *)(*(_QWORD *)(v5 + 16 * v6) + 24);
LABEL_8:
      *a4 = v7;
      return result;
    }
LABEL_7:
    v7 = "?";
    goto LABEL_8;
  }
  result = getobjname();
  if (!result || *(_BYTE *)result != 99)
    goto LABEL_7;
  return result;
}

uint64_t luaD_throw(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;

  while (1)
  {
    v2 = *(_QWORD *)(result + 88);
    if (v2)
    {
      *(_DWORD *)(v2 + 200) = a2;
      longjmp((int *)(v2 + 8), 1);
    }
    v3 = *(_QWORD *)(result + 24);
    *(_BYTE *)(result + 10) = a2;
    v4 = *(_QWORD *)(v3 + 224);
    if (!*(_QWORD *)(v4 + 88))
      break;
    v5 = *(_OWORD **)(v4 + 16);
    *(_QWORD *)(v4 + 16) = v5 + 1;
    *v5 = *(_OWORD *)(*(_QWORD *)(result + 16) - 16);
    result = *(_QWORD *)(v3 + 224);
  }
  return result;
}

uint64_t luaD_rawrunprotected(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  __int16 v6;
  uint64_t v8;
  _OWORD v9[12];
  uint64_t v10;

  v6 = *(_WORD *)(a1 + 198);
  memset(v9, 0, sizeof(v9));
  v10 = 0;
  v8 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = &v8;
  if (!setjmp((int *)v9))
    a2(a1, a3);
  *(_QWORD *)(a1 + 88) = v8;
  *(_WORD *)(a1 + 198) = v6;
  return v10;
}

uint64_t luaD_reallocstack(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _DWORD *v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t j;
  uint64_t v12;
  uint64_t v13;

  v4 = *(int *)(a1 + 184);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = a2;
  result = luaM_realloc_(a1, v5, 16 * v4, 16 * a2);
  *(_QWORD *)(a1 + 56) = result;
  if ((int)v4 < a2)
  {
    v8 = (_DWORD *)(result + 16 * v4 + 8);
    v9 = v6 - v4;
    do
    {
      *v8 = 0;
      v8 += 4;
      --v9;
    }
    while (v9);
  }
  *(_DWORD *)(a1 + 184) = a2;
  *(_QWORD *)(a1 + 48) = result + 16 * v6 - 80;
  *(_QWORD *)(a1 + 16) = result + *(_QWORD *)(a1 + 16) - v5;
  for (i = *(_QWORD **)(a1 + 64); i; i = (_QWORD *)i[2])
    *i = result + *i - v5;
  for (j = *(_QWORD *)(a1 + 32); j; j = *(_QWORD *)(j + 16))
  {
    v12 = *(_QWORD *)(a1 + 56);
    v13 = v12 + *(_QWORD *)(j + 8) - v5;
    *(_QWORD *)j = v12 + *(_QWORD *)j - v5;
    *(_QWORD *)(j + 8) = v13;
    if ((*(_BYTE *)(j + 66) & 2) != 0)
      *(_QWORD *)(j + 32) = v12 + *(_QWORD *)(j + 32) - v5;
  }
  return result;
}

uint64_t luaD_growstack(uint64_t a1, int a2)
{
  int v3;
  int v5;
  int v6;

  v3 = *(_DWORD *)(a1 + 184);
  if (v3 > 1000000)
    return luaD_throw(a1, 6);
  v5 = 2 * v3;
  if (v5 >= 1000000)
    v5 = 1000000;
  if (v5 <= (int)(a2 + ((*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 56)) >> 4) + 5))
    v6 = a2 + ((*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 56)) >> 4) + 5;
  else
    v6 = v5;
  if (v6 <= 1000000)
    return luaD_reallocstack(a1, v6);
  luaD_reallocstack(a1, 1000200);
  return luaG_runerror(a1, "stack overflow");
}

uint64_t luaD_shrinkstack(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 32);
  while (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    v3 = *(_QWORD *)(v3 + 16);
    if (v2 < v4)
      v2 = v4;
  }
  v5 = (v2 - *(_QWORD *)(a1 + 56)) >> 4;
  v6 = v5 + 8;
  if ((int)v5 >= -1)
    v6 = v5 + 1;
  if ((int)v5 + 1 + (v6 >> 3) >= 999990)
    v7 = 999990;
  else
    v7 = v5 + 1 + (v6 >> 3);
  if (*(int *)(a1 + 184) <= 1000000)
    result = luaE_shrinkCI(a1);
  else
    result = luaE_freeCI(a1);
  if ((int)v5 <= 999999 && v7 + 10 < *(_DWORD *)(a1 + 184))
    return luaD_reallocstack(a1, v7 + 10);
  return result;
}

uint64_t luaD_hook(uint64_t result, int a2, int a3)
{
  uint64_t (*v3)(uint64_t, _OWORD *);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[2];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = *(uint64_t (**)(uint64_t, _OWORD *))(result + 168);
  if (v3)
  {
    v4 = result;
    if (*(_BYTE *)(result + 201))
    {
      v5 = *(_QWORD *)(result + 32);
      v6 = *(_QWORD *)(result + 16);
      v8 = *(_QWORD *)(result + 48);
      v7 = *(_QWORD *)(result + 56);
      v9 = *(_QWORD *)(v5 + 8) - v7;
      v10 = v6 - v7;
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      v13 = 0u;
      memset(v12, 0, sizeof(v12));
      LODWORD(v12[0]) = a2;
      DWORD2(v13) = a3;
      v18 = 0;
      v19 = v5;
      if (v8 - v6 <= 335)
      {
        luaD_growstack(result, 20);
        v6 = *(_QWORD *)(v4 + 16);
      }
      *(_QWORD *)(v5 + 8) = v6 + 320;
      *(_BYTE *)(v4 + 201) = 0;
      *(_BYTE *)(v5 + 66) |= 4u;
      result = v3(v4, v12);
      *(_BYTE *)(v4 + 201) = 1;
      v11 = *(_QWORD *)(v4 + 56);
      *(_QWORD *)(v5 + 8) = v11 + v9;
      *(_QWORD *)(v4 + 16) = v11 + v10;
      *(_BYTE *)(v5 + 66) &= ~4u;
    }
  }
  return result;
}

uint64_t luaD_precall(uint64_t a1, char *a2, __int16 a3)
{
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  uint64_t v20;
  char *v21;
  _OWORD *v22;
  char *v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t result;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int v32;

  while (1)
  {
    v6 = *(_QWORD *)(a1 + 56);
    v7 = &a2[-v6];
    v8 = *((_DWORD *)a2 + 2) & 0x3F;
    if (v8 == 6)
      break;
    if (v8 == 22)
      goto LABEL_28;
    if (v8 == 38)
    {
      a2 = (char *)(*(_QWORD *)a2 + 24);
LABEL_28:
      v24 = *(uint64_t (**)(uint64_t))a2;
      if (*(uint64_t *)(*(_QWORD *)(a1 + 24) + 24) >= 1)
        luaC_step(a1);
      if ((uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 16)) <= 335)
        luaD_growstack(a1, 20);
      v25 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
      if (!v25)
        v25 = luaE_extendCI(a1);
      *(_QWORD *)(a1 + 32) = v25;
      *(_WORD *)(v25 + 64) = a3;
      v26 = *(_QWORD *)(a1 + 16) + 320;
      *(_QWORD *)v25 = &v7[*(_QWORD *)(a1 + 56)];
      *(_QWORD *)(v25 + 8) = v26;
      *(_BYTE *)(v25 + 66) = 0;
      if ((*(_BYTE *)(a1 + 200) & 1) != 0)
        luaD_hook(a1, 0, -1);
      v27 = v24(a1);
      luaD_poscall(a1, (char *)(*(_QWORD *)(a1 + 16) - 16 * v27), v27);
      return 1;
    }
    if ((uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 16)) <= 31)
    {
      luaD_growstack(a1, 1);
      v6 = *(_QWORD *)(a1 + 56);
    }
    a2 = &v7[v6];
    v9 = luaT_gettmbyobj(a1, &v7[v6], 0x17u);
    if ((v9[1] & 0xF) != 6)
      luaG_typeerror(a1, (uint64_t)a2, "call");
    v10 = *(char **)(a1 + 16);
    if (v10 > a2)
    {
      do
      {
        *(_OWORD *)v10 = *((_OWORD *)v10 - 1);
        v10 -= 16;
      }
      while (v10 > a2);
      v10 = *(char **)(a1 + 16);
    }
    *(_QWORD *)(a1 + 16) = v10 + 16;
    *(_OWORD *)a2 = *(_OWORD *)v9;
  }
  v11 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = (unint64_t)(v12 - (_QWORD)a2) >> 4;
  if (*(uint64_t *)(*(_QWORD *)(a1 + 24) + 24) >= 1)
  {
    luaC_step(a1);
    v12 = *(_QWORD *)(a1 + 16);
  }
  v14 = v13 - 1;
  v15 = *(unsigned __int8 *)(v11 + 12);
  if (v15 >= (*(_QWORD *)(a1 + 48) - v12) >> 4)
    luaD_growstack(a1, v15);
  v16 = *(unsigned __int8 *)(v11 + 10);
  if ((int)v13 <= (int)v16)
  {
    v17 = *(_QWORD *)(a1 + 16);
    v18 = v16 - v13 + 1;
    do
    {
      *(_DWORD *)(v17 + 8) = 0;
      v17 += 16;
      --v18;
    }
    while (v18);
    *(_QWORD *)(a1 + 16) = v17;
    v14 = v16;
  }
  if (*(_BYTE *)(v11 + 11))
  {
    v19 = *(char **)(a1 + 16);
    v20 = *(unsigned __int8 *)(v11 + 12);
    if (v20 >= (uint64_t)(*(_QWORD *)(a1 + 48) - (_QWORD)v19) >> 4)
    {
      luaD_growstack(a1, v20);
      v19 = *(char **)(a1 + 16);
    }
    if ((_DWORD)v16)
    {
      v21 = &v19[-16 * v14 + 8];
      do
      {
        v22 = *(_OWORD **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v22 + 1;
        *v22 = *(_OWORD *)(v21 - 8);
        *(_DWORD *)v21 = 0;
        v21 += 16;
        --v16;
      }
      while (v16);
    }
    v23 = &v7[*(_QWORD *)(a1 + 56)];
  }
  else
  {
    v23 = &v7[*(_QWORD *)(a1 + 56)];
    v19 = v23 + 16;
  }
  v29 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  if (!v29)
    v29 = luaE_extendCI(a1);
  *(_QWORD *)(a1 + 32) = v29;
  *(_WORD *)(v29 + 64) = a3;
  *(_QWORD *)(v29 + 32) = v19;
  v30 = &v19[16 * *(unsigned __int8 *)(v11 + 12)];
  *(_QWORD *)v29 = v23;
  *(_QWORD *)(v29 + 8) = v30;
  *(_QWORD *)(v29 + 40) = *(_QWORD *)(v11 + 56);
  *(_BYTE *)(v29 + 66) = 2;
  *(_QWORD *)(a1 + 16) = v30;
  if ((*(_BYTE *)(a1 + 200) & 1) == 0)
    return 0;
  *(_QWORD *)(v29 + 40) += 4;
  v31 = *(_QWORD *)(v29 + 16);
  if ((*(_BYTE *)(v31 + 66) & 2) != 0 && (*(_DWORD *)(*(_QWORD *)(v31 + 40) - 4) & 0x3F) == 0x25)
  {
    *(_BYTE *)(v29 + 66) = 34;
    v32 = 4;
  }
  else
  {
    v32 = 0;
  }
  luaD_hook(a1, v32, -1);
  result = 0;
  *(_QWORD *)(v29 + 40) -= 4;
  return result;
}

uint64_t luaD_poscall(uint64_t a1, char *a2, int a3)
{
  uint64_t *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;

  v5 = *(uint64_t **)(a1 + 32);
  if ((*(_BYTE *)(a1 + 200) & 6) != 0)
  {
    if ((*(_BYTE *)(a1 + 200) & 2) != 0)
    {
      v6 = &a2[-*(_QWORD *)(a1 + 56)];
      luaD_hook(a1, 1, -1);
      a2 = &v6[*(_QWORD *)(a1 + 56)];
    }
    v7 = v5[2];
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(v7 + 40);
  }
  else
  {
    v7 = v5[2];
  }
  v8 = *v5;
  v9 = *((__int16 *)v5 + 32);
  *(_QWORD *)(a1 + 32) = v7;
  v10 = v9;
  if (v9)
    v11 = a3 < 1;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      *(_OWORD *)v8 = *(_OWORD *)a2;
      v8 += 16;
      if (!--v10)
        break;
      a2 += 16;
      v11 = a3-- > 1;
    }
    while (v11);
  }
  if (v10 < 1)
  {
    v13 = v8;
  }
  else
  {
    v12 = v10 + 1;
    do
    {
      v13 = v8 + 16;
      *(_DWORD *)(v8 + 8) = 0;
      --v12;
      v8 += 16;
    }
    while (v12 > 1);
  }
  *(_QWORD *)(a1 + 16) = v13;
  return (v9 + 1);
}

uint64_t luaD_call(uint64_t a1, char *a2, __int16 a3, int a4)
{
  unsigned __int16 v8;
  uint64_t result;

  v8 = *(_WORD *)(a1 + 198) + 1;
  *(_WORD *)(a1 + 198) = v8;
  if (v8 >= 0xC8u)
  {
    if (v8 == 200)
    {
      luaG_runerror(a1, "C stack overflow");
    }
    else if (v8 >= 0xE1u)
    {
      luaD_throw(a1, 6);
    }
  }
  if (!a4)
    ++*(_WORD *)(a1 + 196);
  result = luaD_precall(a1, a2, a3);
  if (!(_DWORD)result)
  {
    result = luaV_execute(a1);
    if (a4)
      goto LABEL_10;
LABEL_12:
    --*(_WORD *)(a1 + 196);
    goto LABEL_10;
  }
  if (!a4)
    goto LABEL_12;
LABEL_10:
  --*(_WORD *)(a1 + 198);
  return result;
}

uint64_t lua_resume(uint64_t a1, uint64_t a2, int a3)
{
  __int16 v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v11;
  int v12;

  v12 = a3;
  if (a2)
    v4 = *(_WORD *)(a2 + 198) + 1;
  else
    v4 = 1;
  v5 = *(_WORD *)(a1 + 196);
  *(_WORD *)(a1 + 198) = v4;
  *(_WORD *)(a1 + 196) = 0;
  v6 = luaD_rawrunprotected(a1, (void (*)(uint64_t, uint64_t))resume, (uint64_t)&v12);
  v11 = v6;
  if ((_DWORD)v6 == -1)
  {
    v7 = 2;
  }
  else
  {
    v7 = v6;
    if ((int)v6 >= 2)
    {
LABEL_6:
      v8 = *(_QWORD *)(a1 + 32);
      if (v8)
      {
        do
        {
          if ((*(_BYTE *)(v8 + 66) & 0x10) != 0)
          {
            v9 = *(_QWORD *)(a1 + 56) + *(_QWORD *)(v8 + 56);
            luaF_close(a1, v9);
            seterrorobj(a1, v7, v9);
            *(_QWORD *)(a1 + 32) = v8;
            *(_BYTE *)(a1 + 201) = *(_BYTE *)(v8 + 66) & 1;
            *(_WORD *)(a1 + 196) = 0;
            luaD_shrinkstack(a1);
            *(_QWORD *)(a1 + 176) = *(_QWORD *)(v8 + 40);
            v7 = luaD_rawrunprotected(a1, (void (*)(uint64_t, uint64_t))unroll, (uint64_t)&v11);
            v11 = v7;
            if ((int)v7 > 1)
              goto LABEL_6;
            goto LABEL_15;
          }
          v8 = *(_QWORD *)(v8 + 16);
        }
        while (v8);
        if ((int)v7 < 2)
          goto LABEL_15;
      }
      *(_BYTE *)(a1 + 10) = v7;
      seterrorobj(a1, v7, *(_QWORD *)(a1 + 16));
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) = *(_QWORD *)(a1 + 16);
      v7 = v11;
    }
  }
LABEL_15:
  *(_WORD *)(a1 + 196) = v5;
  --*(_WORD *)(a1 + 198);
  return v7;
}

_QWORD *resume(uint64_t a1, int *a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t (*v7)(uint64_t, uint64_t, _QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a2;
  v4 = (char *)(*(_QWORD *)(a1 + 16) - 16 * v3);
  v5 = *(_QWORD *)(a1 + 32);
  if (*(unsigned __int16 *)(a1 + 198) >= 0xC8u)
    resume_error((_QWORD *)a1, "C stack overflow", *(_QWORD *)(a1 + 16) - 16 * v3);
  if (*(_BYTE *)(a1 + 10) == 1)
  {
    *(_BYTE *)(a1 + 10) = 0;
    *(_QWORD *)v5 = *(_QWORD *)(a1 + 56) + *(_QWORD *)(v5 + 56);
    if ((*(_BYTE *)(v5 + 66) & 2) != 0)
    {
      luaV_execute(a1);
    }
    else
    {
      v7 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v5 + 32);
      if (v7)
      {
        LODWORD(v3) = v7(a1, 1, *(_QWORD *)(v5 + 48));
        v4 = (char *)(*(_QWORD *)(a1 + 16) - 16 * (int)v3);
      }
      luaD_poscall(a1, v4, v3);
    }
    return unroll((_QWORD *)a1, 0, v8, v9, v10, v11, v12, v13);
  }
  else if (*(_BYTE *)(a1 + 10))
  {
    return (_QWORD *)resume_error((_QWORD *)a1, "cannot resume dead coroutine", (uint64_t)v4);
  }
  else
  {
    if (v5 != a1 + 96)
      resume_error((_QWORD *)a1, "cannot resume non-suspended coroutine", (uint64_t)v4);
    result = (_QWORD *)luaD_precall(a1, v4 - 16, -1);
    if (!(_DWORD)result)
      return (_QWORD *)luaV_execute(a1);
  }
  return result;
}

_QWORD *unroll(_QWORD *result, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;

  v8 = result;
  if (a2)
    result = (_QWORD *)finishCcall(result, *a2);
  while (1)
  {
    v9 = v8[4];
    if ((_QWORD *)v9 == v8 + 12)
      break;
    if ((*(_BYTE *)(v9 + 66) & 2) != 0)
    {
      luaV_finishOp((uint64_t)v8, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      result = (_QWORD *)luaV_execute((uint64_t)v8);
    }
    else
    {
      result = (_QWORD *)finishCcall(v8, 1);
    }
  }
  return result;
}

uint64_t seterrorobj(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;

  v4 = result;
  if (a2 == 6)
  {
    result = luaS_newlstr((_QWORD *)result, "error in error handling", 0x17uLL);
    *(_QWORD *)a3 = result;
    v6 = *(unsigned __int8 *)(result + 8);
  }
  else
  {
    if (a2 != 4)
    {
      *(_OWORD *)a3 = *(_OWORD *)(*(_QWORD *)(result + 16) - 16);
      goto LABEL_7;
    }
    v5 = *(_QWORD *)(*(_QWORD *)(result + 24) + 240);
    *(_QWORD *)a3 = v5;
    v6 = *(unsigned __int8 *)(v5 + 8);
  }
  *(_DWORD *)(a3 + 8) = v6 | 0x40;
LABEL_7:
  *(_QWORD *)(v4 + 16) = a3 + 16;
  return result;
}

BOOL lua_isyieldable(uint64_t a1)
{
  return *(_WORD *)(a1 + 196) == 0;
}

uint64_t lua_yieldk(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = *(_QWORD *)(a1 + 32);
  if (*(_WORD *)(a1 + 196))
  {
    if (*(_QWORD *)(*(_QWORD *)(a1 + 24) + 224) == a1)
      luaG_runerror((_QWORD *)a1, "attempt to yield from outside a coroutine");
    else
      luaG_runerror((_QWORD *)a1, "attempt to yield across a C-call boundary");
  }
  *(_BYTE *)(a1 + 10) = 1;
  *(_QWORD *)(v8 + 56) = *(_QWORD *)v8 - *(_QWORD *)(a1 + 56);
  if ((*(_BYTE *)(v8 + 66) & 2) == 0)
  {
    *(_QWORD *)(v8 + 32) = a4;
    if (a4)
      *(_QWORD *)(v8 + 48) = a3;
    *(_QWORD *)v8 = *(_QWORD *)(a1 + 16) - 16 * a2 - 16;
    luaD_throw(a1, 1);
  }
  return 0;
}

uint64_t luaD_pcall(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  char v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_BYTE *)(a1 + 201);
  v9 = *(_WORD *)(a1 + 196);
  v10 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = a5;
  v11 = luaD_rawrunprotected(a1, a2, a3);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(a1 + 56) + a4;
    luaF_close(a1, v12);
    seterrorobj(a1, v11, v12);
    *(_QWORD *)(a1 + 32) = v7;
    *(_BYTE *)(a1 + 201) = v8;
    *(_WORD *)(a1 + 196) = v9;
    luaD_shrinkstack(a1);
  }
  *(_QWORD *)(a1 + 176) = v10;
  return v11;
}

uint64_t luaD_protectedparser(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  ++*(_WORD *)(a1 + 196);
  v13 = a4;
  v14 = a3;
  *(_QWORD *)&v11 = 0;
  *(_QWORD *)&v12 = 0;
  v7 = a2;
  v8 = 0;
  *((_QWORD *)&v9 + 1) = 0;
  *(_QWORD *)&v10 = 0;
  v5 = luaD_pcall(a1, (void (*)(uint64_t, uint64_t))f_parser, (uint64_t)&v7, *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 176));
  v8 = luaM_realloc_(a1, v8, *((uint64_t *)&v9 + 1), 0);
  *((_QWORD *)&v9 + 1) = 0;
  luaM_realloc_(a1, v10, 2 * SHIDWORD(v10), 0);
  luaM_realloc_(a1, v11, 24 * SHIDWORD(v11), 0);
  luaM_realloc_(a1, v12, 24 * SHIDWORD(v12), 0);
  --*(_WORD *)(a1 + 196);
  return v5;
}

uint64_t f_parser(char *a1, uint64_t **a2)
{
  uint64_t *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  char *v8;
  uint64_t v9;

  v4 = *a2;
  v5 = **a2;
  **a2 = v5 - 1;
  if (v5)
  {
    v6 = (unsigned __int8 *)v4[1];
    v4[1] = (uint64_t)(v6 + 1);
    v7 = *v6;
  }
  else
  {
    v7 = luaZ_fill((uint64_t)v4);
  }
  v8 = (char *)a2[10];
  if (v7 == 27)
  {
    checkmode(a1, v8, "binary");
    v9 = luaU_undump((uint64_t)a1, (uint64_t)*a2, (uint64_t)(a2 + 1), (const char *)a2[11]);
  }
  else
  {
    checkmode(a1, v8, "text");
    v9 = luaY_parser(a1, (uint64_t)*a2, (uint64_t)(a2 + 1), (_DWORD *)a2 + 8, (char *)a2[11], v7);
  }
  return luaF_initupvals((uint64_t)a1, v9);
}

uint64_t resume_error(_QWORD *a1, char *a2, uint64_t a3)
{
  uint64_t v5;

  a1[2] = a3;
  v5 = luaS_new(a1, a2);
  *(_QWORD *)a3 = v5;
  *(_DWORD *)(a3 + 8) = *(unsigned __int8 *)(v5 + 8) | 0x40;
  a1[2] += 16;
  return luaD_throw((uint64_t)a1, -1);
}

uint64_t finishCcall(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  int v5;

  v3 = a1[4];
  if ((*(_BYTE *)(v3 + 66) & 0x10) != 0)
  {
    *(_BYTE *)(v3 + 66) &= ~0x10u;
    a1[22] = *(_QWORD *)(v3 + 40);
  }
  if (*(__int16 *)(v3 + 64) == -1)
  {
    v4 = a1[2];
    if (*(_QWORD *)(v3 + 8) < v4)
      *(_QWORD *)(v3 + 8) = v4;
  }
  v5 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(v3 + 32))(a1, a2, *(_QWORD *)(v3 + 48));
  return luaD_poscall((uint64_t)a1, (char *)(a1[2] - 16 * v5), v5);
}

char *checkmode(char *result, char *__s, const char *a3)
{
  uint64_t v5;

  if (__s)
  {
    v5 = (uint64_t)result;
    result = strchr(__s, *a3);
    if (!result)
    {
      luaO_pushfstring(v5, "attempt to load a %s chunk (mode is '%s')", a3, __s);
      return (char *)luaD_throw(v5, 3);
    }
  }
  return result;
}

uint64_t luaU_dump(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, int a5)
{
  _QWORD v10[3];
  int v11;
  unsigned int v12;
  uint64_t v13;

  v10[0] = a1;
  v10[1] = a3;
  v10[2] = a4;
  v11 = a5;
  v12 = a3();
  LOBYTE(v13) = 83;
  if (!v12)
  {
    v12 = ((uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t))a3)(a1, &v13, 1, a4);
    LOBYTE(v13) = 0;
    if (!v12)
    {
      v12 = ((uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t))a3)(a1, &v13, 1, a4);
      if (!v12)
      {
        v12 = ((uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))a3)(a1, "\x19\x93\r\n\x1A\n", 6, a4);
        LOBYTE(v13) = 4;
        if (!v12)
        {
          v12 = ((uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t))a3)(a1, &v13, 1, a4);
          LOBYTE(v13) = 8;
          if (!v12)
          {
            v12 = ((uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t))a3)(a1, &v13, 1, a4);
            LOBYTE(v13) = 4;
            if (!v12)
            {
              v12 = ((uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t))a3)(a1, &v13, 1, a4);
              LOBYTE(v13) = 8;
              if (!v12)
              {
                v12 = ((uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t))a3)(a1, &v13, 1, a4);
                LOBYTE(v13) = 8;
                if (!v12)
                {
                  v12 = ((uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t))a3)(a1, &v13, 1, a4);
                  v13 = 22136;
                  if (!v12)
                  {
                    v12 = ((uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t))a3)(a1, &v13, 8, a4);
                    v13 = 0x4077280000000000;
                    if (!v12)
                    {
                      v12 = ((uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t))a3)(a1, &v13, 8, a4);
                      LOBYTE(v13) = *(_DWORD *)(a2 + 16);
                      if (!v12)
                        v12 = ((uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t))a3)(a1, &v13, 1, a4);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  DumpFunction(a2, 0, v10);
  return v12;
}

uint64_t DumpFunction(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t result;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (*((_DWORD *)a3 + 6) || (v6 = *(_QWORD *)(a1 + 104), v6 == a2))
  {
    LOBYTE(v29) = 0;
    v5 = *((_DWORD *)a3 + 7);
    if (!v5)
    {
      v5 = ((uint64_t (*)(_QWORD, uint64_t *, uint64_t, _QWORD))a3[1])(*a3, &v29, 1, a3[2]);
      *((_DWORD *)a3 + 7) = v5;
    }
  }
  else
  {
    DumpString(v6, a3);
    v5 = *((_DWORD *)a3 + 7);
  }
  LODWORD(v29) = *(_DWORD *)(a1 + 40);
  if (v5)
    goto LABEL_13;
  v5 = ((uint64_t (*)(_QWORD, uint64_t *, uint64_t, _QWORD))a3[1])(*a3, &v29, 4, a3[2]);
  *((_DWORD *)a3 + 7) = v5;
  LODWORD(v29) = *(_DWORD *)(a1 + 44);
  if (v5)
    goto LABEL_13;
  v5 = ((uint64_t (*)(_QWORD, uint64_t *, uint64_t, _QWORD))a3[1])(*a3, &v29, 4, a3[2]);
  *((_DWORD *)a3 + 7) = v5;
  LOBYTE(v29) = *(_BYTE *)(a1 + 10);
  if (v5)
    goto LABEL_13;
  v5 = ((uint64_t (*)(_QWORD, uint64_t *, uint64_t, _QWORD))a3[1])(*a3, &v29, 1, a3[2]);
  *((_DWORD *)a3 + 7) = v5;
  LOBYTE(v29) = *(_BYTE *)(a1 + 11);
  if (v5)
    goto LABEL_13;
  v5 = ((uint64_t (*)(_QWORD, uint64_t *, uint64_t, _QWORD))a3[1])(*a3, &v29, 1, a3[2]);
  *((_DWORD *)a3 + 7) = v5;
  LOBYTE(v29) = *(_BYTE *)(a1 + 12);
  if (v5
    || (v5 = ((uint64_t (*)(_QWORD, uint64_t *, uint64_t, _QWORD))a3[1])(*a3, &v29, 1, a3[2]),
        *((_DWORD *)a3 + 7) = v5,
        LODWORD(v29) = *(_DWORD *)(a1 + 24),
        v5)
    || (v5 = ((uint64_t (*)(_QWORD, uint64_t *, uint64_t, _QWORD))a3[1])(*a3, &v29, 4, a3[2]),
        (*((_DWORD *)a3 + 7) = v5) != 0))
  {
LABEL_13:
    v7 = *(_DWORD *)(a1 + 20);
  }
  else
  {
    v5 = ((uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))a3[1])(*a3, *(_QWORD *)(a1 + 56), 4 * *(int *)(a1 + 24), a3[2]);
    *((_DWORD *)a3 + 7) = v5;
    v7 = *(_DWORD *)(a1 + 20);
    LODWORD(v29) = v7;
    if (!v5)
    {
      v5 = ((uint64_t (*)(_QWORD, uint64_t *, uint64_t, _QWORD))a3[1])(*a3, &v29, 4, a3[2]);
      *((_DWORD *)a3 + 7) = v5;
    }
  }
  if (v7 >= 1)
  {
    v8 = 0;
    v9 = 16 * v7;
    while (1)
    {
      v10 = *(_QWORD *)(a1 + 48);
      v11 = *(_DWORD *)(v10 + v8 + 8);
      LOBYTE(v29) = v11 & 0x3F;
      v12 = *((_DWORD *)a3 + 7);
      if (!v12)
      {
        v12 = ((uint64_t (*)(_QWORD, uint64_t *, uint64_t, _QWORD))a3[1])(*a3, &v29, 1, a3[2]);
        *((_DWORD *)a3 + 7) = v12;
        v11 = *(_DWORD *)(v10 + v8 + 8);
      }
      v13 = v11 & 0x3F;
      if (v13 <= 3)
      {
        if (v13 != 1)
        {
          if (v13 != 3)
            goto LABEL_32;
          v29 = *(_QWORD *)(v10 + v8);
          if (v12)
            goto LABEL_32;
LABEL_28:
          v14 = ((uint64_t (*)(_QWORD, uint64_t *, uint64_t, _QWORD))a3[1])(*a3, &v29, 8, a3[2]);
LABEL_31:
          *((_DWORD *)a3 + 7) = v14;
          goto LABEL_32;
        }
        LOBYTE(v29) = *(_DWORD *)(v10 + v8);
        if (!v12)
        {
          v14 = ((uint64_t (*)(_QWORD, uint64_t *, uint64_t, _QWORD))a3[1])(*a3, &v29, 1, a3[2]);
          goto LABEL_31;
        }
      }
      else
      {
        switch(v13)
        {
          case 4:
            goto LABEL_22;
          case 19:
            v29 = *(_QWORD *)(v10 + v8);
            if (!v12)
              goto LABEL_28;
            break;
          case 20:
LABEL_22:
            DumpString(*(_QWORD *)(v10 + v8), a3);
            break;
        }
      }
LABEL_32:
      v8 += 16;
      if (v9 == v8)
      {
        v5 = *((_DWORD *)a3 + 7);
        break;
      }
    }
  }
  v15 = *(unsigned int *)(a1 + 16);
  LODWORD(v29) = *(_DWORD *)(a1 + 16);
  if (!v5)
  {
    v5 = ((uint64_t (*)(_QWORD, uint64_t *, uint64_t, _QWORD))a3[1])(*a3, &v29, 4, a3[2]);
    *((_DWORD *)a3 + 7) = v5;
  }
  if ((int)v15 >= 1)
  {
    v16 = 0;
    v17 = 16 * v15;
    do
    {
      LOBYTE(v29) = *(_BYTE *)(*(_QWORD *)(a1 + 88) + v16 + 8);
      if (!v5)
      {
        v5 = ((uint64_t (*)(_QWORD, uint64_t *, uint64_t, _QWORD))a3[1])(*a3, &v29, 1, a3[2]);
        *((_DWORD *)a3 + 7) = v5;
        LOBYTE(v29) = *(_BYTE *)(*(_QWORD *)(a1 + 88) + v16 + 9);
        if (!v5)
        {
          v5 = ((uint64_t (*)(_QWORD, uint64_t *, uint64_t, _QWORD))a3[1])(*a3, &v29, 1, a3[2]);
          *((_DWORD *)a3 + 7) = v5;
        }
      }
      v16 += 16;
    }
    while (v17 != v16);
  }
  v18 = *(unsigned int *)(a1 + 32);
  LODWORD(v29) = *(_DWORD *)(a1 + 32);
  if (!v5)
    *((_DWORD *)a3 + 7) = ((uint64_t (*)(_QWORD, uint64_t *, uint64_t, _QWORD))a3[1])(*a3, &v29, 4, a3[2]);
  if ((int)v18 >= 1)
  {
    v19 = 0;
    v20 = 8 * v18;
    do
    {
      DumpFunction(*(_QWORD *)(*(_QWORD *)(a1 + 64) + v19), *(_QWORD *)(a1 + 104), a3);
      v19 += 8;
    }
    while (v20 != v19);
  }
  if (*((_DWORD *)a3 + 6))
    v21 = 0;
  else
    v21 = *(_DWORD *)(a1 + 28);
  LODWORD(v29) = v21;
  result = *((unsigned int *)a3 + 7);
  if (!(_DWORD)result)
  {
    result = ((uint64_t (*)(_QWORD, uint64_t *, uint64_t, _QWORD))a3[1])(*a3, &v29, 4, a3[2]);
    *((_DWORD *)a3 + 7) = result;
    if (!(_DWORD)result)
    {
      result = ((uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))a3[1])(*a3, *(_QWORD *)(a1 + 72), 4 * v21, a3[2]);
      *((_DWORD *)a3 + 7) = result;
    }
  }
  if (*((_DWORD *)a3 + 6))
    v23 = 0;
  else
    v23 = *(_DWORD *)(a1 + 36);
  LODWORD(v29) = v23;
  if (!(_DWORD)result)
  {
    result = ((uint64_t (*)(_QWORD, uint64_t *, uint64_t, _QWORD))a3[1])(*a3, &v29, 4, a3[2]);
    *((_DWORD *)a3 + 7) = result;
  }
  if (v23 >= 1)
  {
    v24 = 0;
    v25 = 16 * v23;
    do
    {
      DumpString(*(_QWORD *)(*(_QWORD *)(a1 + 80) + v24), a3);
      LODWORD(v29) = *(_DWORD *)(*(_QWORD *)(a1 + 80) + v24 + 8);
      result = *((unsigned int *)a3 + 7);
      if (!(_DWORD)result)
      {
        result = ((uint64_t (*)(_QWORD, uint64_t *, uint64_t, _QWORD))a3[1])(*a3, &v29, 4, a3[2]);
        *((_DWORD *)a3 + 7) = result;
        LODWORD(v29) = *(_DWORD *)(*(_QWORD *)(a1 + 80) + v24 + 12);
        if (!(_DWORD)result)
        {
          result = ((uint64_t (*)(_QWORD, uint64_t *, uint64_t, _QWORD))a3[1])(*a3, &v29, 4, a3[2]);
          *((_DWORD *)a3 + 7) = result;
        }
      }
      v24 += 16;
    }
    while (v25 != v24);
  }
  if (*((_DWORD *)a3 + 6))
    v26 = 0;
  else
    v26 = *(_DWORD *)(a1 + 16);
  LODWORD(v29) = v26;
  if (!(_DWORD)result)
  {
    result = ((uint64_t (*)(_QWORD, uint64_t *, uint64_t, _QWORD))a3[1])(*a3, &v29, 4, a3[2]);
    *((_DWORD *)a3 + 7) = result;
  }
  if (v26 >= 1)
  {
    v27 = 0;
    v28 = 16 * v26;
    do
    {
      result = DumpString(*(_QWORD *)(*(_QWORD *)(a1 + 88) + v27), a3);
      v27 += 16;
    }
    while (v28 != v27);
  }
  return result;
}

uint64_t DumpString(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;
  char v8;
  char v9;

  if (!result)
  {
    v7 = 0;
    if (*((_DWORD *)a2 + 7))
      return result;
    result = ((uint64_t (*)(_QWORD, char *, uint64_t, _QWORD))a2[1])(*a2, &v7, 1, a2[2]);
LABEL_16:
    *((_DWORD *)a2 + 7) = result;
    return result;
  }
  v3 = result;
  if (*(_BYTE *)(result + 8) == 4)
    v4 = *(unsigned __int8 *)(result + 11);
  else
    v4 = *(_QWORD *)(result + 16);
  v5 = v4 + 1;
  v6 = v5;
  if (v5 <= 0xFE)
  {
    v8 = v5;
    result = *((unsigned int *)a2 + 7);
    if ((_DWORD)result)
      return result;
    result = ((uint64_t (*)(_QWORD, char *, uint64_t, _QWORD))a2[1])(*a2, &v8, 1, a2[2]);
    goto LABEL_14;
  }
  v9 = -1;
  if (!*((_DWORD *)a2 + 7))
  {
    result = ((uint64_t (*)(_QWORD, char *, uint64_t, _QWORD))a2[1])(*a2, &v9, 1, a2[2]);
    *((_DWORD *)a2 + 7) = result;
    if (!(_DWORD)result)
    {
      result = ((uint64_t (*)(_QWORD, unint64_t *, uint64_t, _QWORD))a2[1])(*a2, &v6, 8, a2[2]);
LABEL_14:
      *((_DWORD *)a2 + 7) = result;
      if ((_DWORD)result)
        return result;
      result = ((uint64_t (*)(_QWORD, uint64_t, unint64_t, _QWORD))a2[1])(*a2, v3 + 24, v6 - 1, a2[2]);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t luaF_newCclosure(uint64_t a1, int a2)
{
  char v2;
  uint64_t result;

  v2 = a2;
  result = luaC_newobj(a1, 38, 16 * a2 + 32);
  *(_BYTE *)(result + 10) = v2;
  return result;
}

uint64_t luaF_newLclosure(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = luaC_newobj(a1, 6, (int)(8 * a2 + 32));
  v4 = v3;
  *(_QWORD *)(v3 + 24) = 0;
  *(_BYTE *)(v3 + 10) = a2;
  if (a2)
    bzero((void *)(v3 - 8 * (a2 - 1) + 8 * (int)(a2 - 1) + 32), 8 * a2);
  return v4;
}

uint64_t luaF_initupvals(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (*(_BYTE *)(a2 + 10))
  {
    v3 = result;
    v4 = 0;
    v5 = a2 + 32;
    do
    {
      result = luaM_realloc_(v3, 0, 0, 32);
      *(_QWORD *)result = result + 16;
      *(_QWORD *)(result + 8) = 1;
      *(_DWORD *)(result + 24) = 0;
      *(_QWORD *)(v5 + 8 * v4++) = result;
    }
    while (v4 < *(unsigned __int8 *)(a2 + 10));
  }
  return result;
}

uint64_t luaF_findupval(_QWORD *a1, unint64_t a2)
{
  unint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;

  v5 = a1 + 8;
  v4 = (unint64_t *)a1[8];
  if (v4 && (v6 = *v4, *v4 >= a2))
  {
    while (1)
    {
      result = (uint64_t)v4;
      if (v6 == a2)
        break;
      v4 = (unint64_t *)v4[2];
      if (v4)
      {
        v6 = *v4;
        if (*v4 >= a2)
          continue;
      }
      v5 = (uint64_t *)(result + 16);
      goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    result = luaM_realloc_((uint64_t)a1, 0, 0, 32);
    *(_QWORD *)(result + 16) = *v5;
    *(_DWORD *)(result + 24) = 1;
    *v5 = result;
    *(_QWORD *)result = a2;
    *(_QWORD *)(result + 8) = 0;
    if ((_QWORD *)a1[10] == a1)
    {
      v8 = a1[3];
      a1[10] = *(_QWORD *)(v8 + 168);
      *(_QWORD *)(v8 + 168) = a1;
    }
  }
  return result;
}

uint64_t luaF_close(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _OWORD *v6;

  v3 = *(_QWORD *)(result + 64);
  if (v3)
  {
    v4 = result;
    do
    {
      v5 = *(uint64_t **)v3;
      if (*(_QWORD *)v3 < a2)
        break;
      v6 = (_OWORD *)(v3 + 16);
      *(_QWORD *)(v4 + 64) = *(_QWORD *)(v3 + 16);
      if (*(_QWORD *)(v3 + 8))
      {
        *v6 = *(_OWORD *)v5;
        *(_QWORD *)v3 = v6;
        if ((*(_BYTE *)(v3 + 24) & 0x40) != 0)
          result = luaC_upvalbarrier_(v4, (uint64_t **)v3);
      }
      else
      {
        result = luaM_realloc_(v4, v3, 32, 0);
      }
      v3 = *(_QWORD *)(v4 + 64);
    }
    while (v3);
  }
  return result;
}

double luaF_newproto(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = luaC_newobj(a1, 9, 120);
  *(_WORD *)(v1 + 10) = 0;
  *(_BYTE *)(v1 + 12) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  return result;
}

uint64_t luaF_freeproto(uint64_t a1, uint64_t a2)
{
  luaM_realloc_(a1, *(_QWORD *)(a2 + 56), 4 * *(int *)(a2 + 24), 0);
  luaM_realloc_(a1, *(_QWORD *)(a2 + 64), 8 * *(int *)(a2 + 32), 0);
  luaM_realloc_(a1, *(_QWORD *)(a2 + 48), 16 * *(int *)(a2 + 20), 0);
  luaM_realloc_(a1, *(_QWORD *)(a2 + 72), 4 * *(int *)(a2 + 28), 0);
  luaM_realloc_(a1, *(_QWORD *)(a2 + 80), 16 * *(int *)(a2 + 36), 0);
  luaM_realloc_(a1, *(_QWORD *)(a2 + 88), 16 * *(int *)(a2 + 16), 0);
  return luaM_realloc_(a1, a2, 120, 0);
}

uint64_t luaF_getlocalname(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  _DWORD *i;

  v3 = *(unsigned int *)(a1 + 36);
  if ((int)v3 >= 1)
  {
    for (i = (_DWORD *)(*(_QWORD *)(a1 + 80) + 12); *(i - 1) <= a3; i += 4)
    {
      if (*i > a3 && !--a2)
        return *(_QWORD *)(i - 3) + 24;
      if (!--v3)
        return 0;
    }
  }
  return 0;
}

uint64_t luaC_barrier_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (*(unsigned __int8 *)(result + 85) <= 1u)
    return reallymarkobject(result, a3);
  *(_BYTE *)(a2 + 9) = *(_BYTE *)(a2 + 9) & 0xF8 | *(_BYTE *)(result + 84) & 3;
  return result;
}

uint64_t reallymarkobject(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a2;
  v3 = result;
  v4 = *(_BYTE *)(a2 + 9);
  while (1)
  {
    v5 = v4 & 0xFC;
    *(_BYTE *)(v2 + 9) = v5;
    v6 = *(unsigned __int8 *)(v2 + 8);
    if (v6 != 7)
      break;
    v7 = *(_QWORD *)(v2 + 16);
    if (v7 && (*(_BYTE *)(v7 + 9) & 3) != 0)
    {
      result = reallymarkobject(v3);
      v5 = *(_BYTE *)(v2 + 9);
    }
    *(_BYTE *)(v2 + 9) = v5 | 4;
    *(_QWORD *)(v3 + 32) += *(_QWORD *)(v2 + 24) + 40;
    if ((*(_BYTE *)(v2 + 10) & 0x40) != 0)
    {
      v2 = *(_QWORD *)(v2 + 32);
      v4 = *(_BYTE *)(v2 + 9);
      if ((v4 & 3) != 0)
        continue;
    }
    return result;
  }
  switch(*(_BYTE *)(v2 + 8))
  {
    case 4:
      *(_BYTE *)(v2 + 9) = v5 | 4;
      v8 = *(unsigned __int8 *)(v2 + 11);
      goto LABEL_19;
    case 5:
      *(_QWORD *)(v2 + 48) = *(_QWORD *)(v3 + 112);
      goto LABEL_17;
    case 6:
      goto LABEL_13;
    case 7:
      return result;
    case 8:
      *(_QWORD *)(v2 + 72) = *(_QWORD *)(v3 + 112);
      goto LABEL_17;
    case 9:
      *(_QWORD *)(v2 + 112) = *(_QWORD *)(v3 + 112);
      goto LABEL_17;
    default:
      if (v6 == 20)
      {
        *(_BYTE *)(v2 + 9) = v5 | 4;
        v8 = *(_QWORD *)(v2 + 16);
LABEL_19:
        *(_QWORD *)(v3 + 32) += v8 + 25;
      }
      else if (v6 == 38)
      {
LABEL_13:
        *(_QWORD *)(v2 + 16) = *(_QWORD *)(v3 + 112);
LABEL_17:
        *(_QWORD *)(v3 + 112) = v2;
      }
      break;
  }
  return result;
}

uint64_t luaC_barrierback_(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 24);
  *(_BYTE *)(a2 + 9) &= ~4u;
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(v2 + 120);
  *(_QWORD *)(v2 + 120) = a2;
  return result;
}

uint64_t luaC_upvalbarrier_(uint64_t a1, uint64_t **a2)
{
  uint64_t result;
  uint64_t v3;

  result = *(_QWORD *)(a1 + 24);
  if (*(unsigned __int8 *)(result + 85) <= 1u)
  {
    v3 = **a2;
    if ((*(_BYTE *)(v3 + 9) & 3) != 0)
      return reallymarkobject(result, v3);
  }
  return result;
}

uint64_t luaC_fix(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 24);
  *(_BYTE *)(a2 + 9) &= 0xFCu;
  *(_QWORD *)(v2 + 88) = *(_QWORD *)a2;
  *(_QWORD *)a2 = *(_QWORD *)(v2 + 160);
  *(_QWORD *)(v2 + 160) = a2;
  return result;
}

uint64_t luaC_newobj(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 24);
  result = luaM_realloc_(a1, 0, a2 & 0xF, a3);
  *(_BYTE *)(result + 9) = *(_BYTE *)(v4 + 84) & 3;
  *(_BYTE *)(result + 8) = a2;
  *(_QWORD *)result = *(_QWORD *)(v4 + 88);
  *(_QWORD *)(v4 + 88) = result;
  return result;
}

uint64_t luaC_upvdeccount(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[1] - 1;
  a2[1] = v2;
  if (!v2 && (_QWORD *)*a2 == a2 + 2)
    return luaM_realloc_(result, (uint64_t)a2, 32, 0);
  return result;
}

uint64_t *luaC_checkfinalizer(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  if (a3)
  {
    if ((*(_BYTE *)(a2 + 9) & 8) == 0 && (*(_BYTE *)(a3 + 10) & 4) == 0)
    {
      v4 = (uint64_t)result;
      v5 = result[3];
      result = luaT_gettm(a3, 2, *(_QWORD *)(v5 + 264));
      if (result)
      {
        if (*(unsigned __int8 *)(v5 + 85) - 2 <= 3)
        {
          *(_BYTE *)(a2 + 9) = *(_BYTE *)(a2 + 9) & 0xF8 | *(_BYTE *)(v5 + 84) & 3;
          if (*(_QWORD *)(v5 + 96) == a2)
          {
            do
              result = sweeplist(v4, (uint64_t *)a2, 1);
            while (result == (uint64_t *)a2);
            *(_QWORD *)(v5 + 96) = result;
          }
        }
        v6 = (_QWORD *)(v5 + 88);
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6 != (_QWORD *)a2);
        *v7 = *(_QWORD *)a2;
        *(_QWORD *)a2 = *(_QWORD *)(v5 + 104);
        *(_QWORD *)(v5 + 104) = a2;
        *(_BYTE *)(a2 + 9) |= 8u;
      }
    }
  }
  return result;
}

uint64_t *luaC_freeallobjects(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = (_QWORD *)(v2 + 152);
  do
  {
    v4 = v3;
    v3 = (_QWORD *)*v3;
  }
  while (v3);
  v6 = (_QWORD *)(v2 + 104);
  v5 = *(_QWORD **)(v2 + 104);
  v7 = *(_QWORD *)(a1 + 24);
  if (v5)
  {
    do
    {
      *v6 = *v5;
      *v5 = *v4;
      *v4 = v5;
      v4 = v5;
      v5 = (_QWORD *)*v6;
    }
    while (*v6);
    v7 = *(_QWORD *)(a1 + 24);
  }
  while (*(_QWORD *)(v7 + 152))
    GCTM(a1, 0);
  *(_BYTE *)(v2 + 84) = 3;
  *(_BYTE *)(v2 + 86) = 0;
  sweeplist(a1, (uint64_t *)(v2 + 104), -1);
  sweeplist(a1, (uint64_t *)(v2 + 88), -1);
  return sweeplist(a1, (uint64_t *)(v2 + 160), -1);
}

uint64_t *sweeplist(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v5;
  int v7;
  int v8;
  char v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  unint64_t i;
  _QWORD *v16;
  uint64_t v17;

  v3 = *a2;
  if (!*a2)
    return 0;
  v5 = a2;
  v7 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 84);
  v8 = v7 ^ 3;
  v9 = v7 & 3;
  while (a3)
  {
    v10 = *(unsigned __int8 *)(v3 + 9);
    if (((v10 ^ 3) & v8) != 0)
    {
      *(_BYTE *)(v3 + 9) = v10 & 0xF8 | v9;
      v5 = (uint64_t *)v3;
    }
    else
    {
      v11 = *(_QWORD *)v3;
      *v5 = *(_QWORD *)v3;
      switch(*(_BYTE *)(v3 + 8))
      {
        case 4:
          luaS_remove(a1, v3);
          v12 = *(unsigned __int8 *)(v3 + 11);
          goto LABEL_22;
        case 5:
          luaH_free(a1, v3);
          break;
        case 6:
          v14 = *(_BYTE *)(v3 + 10);
          if (v14)
          {
            for (i = 0; i < v14; ++i)
            {
              v16 = *(_QWORD **)(v3 + 32 + 8 * i);
              if (v16)
              {
                luaC_upvdeccount(a1, v16);
                v14 = *(_BYTE *)(v3 + 10);
              }
            }
          }
          v13 = 8 * v14;
          goto LABEL_17;
        case 7:
          v17 = *(_QWORD *)(v3 + 24) + 40;
          goto LABEL_23;
        case 8:
          luaE_freethread(a1, v3);
          break;
        case 9:
          luaF_freeproto(a1, v3);
          break;
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
          goto LABEL_25;
        case 0x14:
          v12 = *(_QWORD *)(v3 + 16);
LABEL_22:
          v17 = v12 + 25;
          goto LABEL_23;
        default:
          if (*(_BYTE *)(v3 + 8) != 38)
            goto LABEL_25;
          v13 = 16 * *(unsigned __int8 *)(v3 + 10);
LABEL_17:
          v17 = v13 + 32;
LABEL_23:
          luaM_realloc_(a1, v3, v17, 0);
          break;
      }
    }
    v11 = *v5;
LABEL_25:
    --a3;
    v3 = v11;
    if (!v11)
      return 0;
  }
  return v5;
}

uint64_t luaC_runtilstate(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 24);
  if (((a2 >> *(_BYTE *)(v2 + 85)) & 1) == 0)
  {
    v4 = result;
    do
      result = singlestep(v4);
    while (((a2 >> *(_BYTE *)(v2 + 85)) & 1) == 0);
  }
  return result;
}

uint64_t singlestep(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t i;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;

  v1 = *(_QWORD *)(a1 + 24);
  switch(*(_BYTE *)(v1 + 85))
  {
    case 0:
      *(_QWORD *)(v1 + 32) = 0;
      propagatemark(v1);
      if (!*(_QWORD *)(v1 + 112))
        *(_BYTE *)(v1 + 85) = 1;
      return *(_QWORD *)(v1 + 32);
    case 1:
      v3 = *(_QWORD *)(a1 + 24);
      if (*(_QWORD *)(v1 + 112))
      {
        do
          propagatemark(v1);
        while (*(_QWORD *)(v1 + 112));
        v3 = *(_QWORD *)(a1 + 24);
      }
      v4 = *(_QWORD *)(v3 + 120);
      *(_BYTE *)(v3 + 85) = 8;
      *(_QWORD *)(v3 + 32) = 0;
      if ((*(_BYTE *)(a1 + 9) & 3) != 0)
        reallymarkobject(v3, a1);
      if ((*(_BYTE *)(v3 + 72) & 0x40) != 0)
      {
        v5 = *(_QWORD *)(v3 + 64);
        if ((*(_BYTE *)(v5 + 9) & 3) != 0)
          reallymarkobject(v3, v5);
      }
      markmt(v3);
      v7 = (uint64_t *)(v3 + 168);
      v6 = *(_QWORD *)(v3 + 168);
      if (v6)
      {
        do
        {
          if ((*(_BYTE *)(v6 + 9) & 7) != 0 || !*(_QWORD *)(v6 + 64))
          {
            *v7 = *(_QWORD *)(v6 + 80);
            *(_QWORD *)(v6 + 80) = v6;
            for (i = *(_QWORD *)(v6 + 64); i; i = *(_QWORD *)(i + 16))
            {
              if (*(_DWORD *)(i + 24))
              {
                v9 = *(uint64_t **)i;
                if ((*(_BYTE *)(*(_QWORD *)i + 8) & 0x40) != 0 && (*(_BYTE *)(*v9 + 9) & 3) != 0)
                  reallymarkobject(v3, *v9);
                *(_DWORD *)(i + 24) = 0;
              }
            }
          }
          else
          {
            v7 = (uint64_t *)(v6 + 80);
          }
          v6 = *v7;
        }
        while (*v7);
      }
      while (*(_QWORD *)(v3 + 112))
        propagatemark(v3);
      v10 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 112) = v4;
      while (*(_QWORD *)(v3 + 112))
        propagatemark(v3);
      *(_QWORD *)(v3 + 32) = 0;
      convergeephemerons(v3);
      clearvalues(v3, *(_QWORD *)(v3 + 128), 0);
      clearvalues(v3, *(_QWORD *)(v3 + 144), 0);
      v11 = *(_QWORD *)(v3 + 128);
      v12 = *(_QWORD *)(v3 + 144);
      v13 = (_QWORD *)(v3 + 152);
      v14 = *(_QWORD *)(v3 + 32);
      do
      {
        v15 = v13;
        v13 = (_QWORD *)*v13;
      }
      while (v13);
      v16 = (uint64_t *)(v3 + 104);
      v17 = *(_QWORD *)(v3 + 104);
      if (v17)
      {
        do
        {
          if ((*(_BYTE *)(v17 + 9) & 3) != 0)
          {
            *v16 = *(_QWORD *)v17;
            *(_QWORD *)v17 = *v15;
            *v15 = v17;
            v15 = (_QWORD *)v17;
          }
          else
          {
            v16 = (uint64_t *)v17;
          }
          v17 = *v16;
        }
        while (*v16);
      }
      *(_DWORD *)(v3 + 200) = 1;
      markbeingfnz(v3);
      while (*(_QWORD *)(v3 + 112))
        propagatemark(v3);
      *(_QWORD *)(v3 + 32) = 0;
      convergeephemerons(v3);
      clearkeys(v3, *(_QWORD *)(v3 + 136));
      clearkeys(v3, *(_QWORD *)(v3 + 144));
      clearvalues(v3, *(_QWORD *)(v3 + 128), v11);
      clearvalues(v3, *(_QWORD *)(v3 + 144), v12);
      luaS_clearcache(v3);
      *(_BYTE *)(v3 + 84) ^= 3u;
      v28 = *(_QWORD *)(v3 + 32);
      v29 = *(_QWORD *)(a1 + 24);
      *(_BYTE *)(v29 + 85) = 2;
      v24 = v14 + v10 + v28;
      do
      {
        v30 = sweeplist(a1, (uint64_t *)(v29 + 88), 1);
        v24 += 7;
      }
      while (v30 == (uint64_t *)(v29 + 88));
      *(_QWORD *)(v29 + 96) = v30;
      *(_QWORD *)(v1 + 40) = *(_QWORD *)(v1 + 24) + *(_QWORD *)(v1 + 16);
      return v24;
    case 2:
      v18 = v1 + 104;
      v19 = *(_QWORD *)(a1 + 24);
      v20 = 3;
      return sweepstep(a1, v19, v20, v18);
    case 3:
      v18 = v1 + 152;
      v19 = *(_QWORD *)(a1 + 24);
      v20 = 4;
      return sweepstep(a1, v19, v20, v18);
    case 4:
      v19 = *(_QWORD *)(a1 + 24);
      v20 = 5;
      v18 = 0;
      return sweepstep(a1, v19, v20, v18);
    case 5:
      *(_BYTE *)(*(_QWORD *)(v1 + 224) + 9) = *(_BYTE *)(*(_QWORD *)(v1 + 224) + 9) & 0xF8 | *(_BYTE *)(v1 + 84) & 3;
      if (*(_BYTE *)(v1 + 86) != 1)
      {
        v22 = *(_QWORD *)(v1 + 24);
        *(_QWORD *)(v1 + 176) = luaM_realloc_(a1, *(_QWORD *)(v1 + 176), *(_QWORD *)(v1 + 192), 0);
        *(_QWORD *)(v1 + 192) = 0;
        v23 = *(_DWORD *)(v1 + 60);
        if (*(_DWORD *)(v1 + 56) < v23 / 4)
          luaS_resize(a1, v23 / 2);
        *(_QWORD *)(v1 + 40) += *(_QWORD *)(v1 + 24) - v22;
      }
      v24 = 0;
      v25 = 6;
      goto LABEL_63;
    case 6:
      if (*(_QWORD *)(v1 + 152) && *(_BYTE *)(v1 + 86) != 1)
        return 7 * (int)runafewfinalizers(a1);
      v24 = 0;
      v25 = 7;
LABEL_63:
      *(_BYTE *)(v1 + 85) = v25;
      return v24;
    case 7:
      *(_QWORD *)(v1 + 32) = 8 * *(int *)(v1 + 60);
      *(_OWORD *)(v1 + 112) = 0u;
      *(_OWORD *)(v1 + 128) = 0u;
      *(_QWORD *)(v1 + 144) = 0;
      v26 = *(_QWORD *)(v1 + 224);
      if ((*(_BYTE *)(v26 + 9) & 3) != 0)
        reallymarkobject(v1, v26);
      if ((*(_BYTE *)(v1 + 72) & 0x40) != 0)
      {
        v27 = *(_QWORD *)(v1 + 64);
        if ((*(_BYTE *)(v27 + 9) & 3) != 0)
          reallymarkobject(v1, v27);
      }
      markmt(v1);
      markbeingfnz(v1);
      *(_BYTE *)(v1 + 85) = 0;
      return *(_QWORD *)(v1 + 32);
    default:
      return 0;
  }
}

uint64_t luaC_step(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v1 + 87))
  {
    v3 = *(_QWORD *)(v1 + 24) / 200 + 1;
    v4 = *(int *)(v1 + 208);
    v5 = 0x7FFFFFFFFFFFFFFFLL / v4;
    v6 = v3 * v4;
    if (v3 >= v5)
      v7 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v7 = v6;
    while (1)
    {
      v7 -= singlestep(a1);
      v8 = *(unsigned __int8 *)(v1 + 85);
      if (v7 < -2399)
        break;
      if (v8 == 7)
        goto LABEL_10;
    }
    if (v8 != 7)
    {
      luaE_setdebt(v1, 200 * (v7 / *(int *)(v1 + 208)));
      return runafewfinalizers(a1);
    }
LABEL_10:
    v11 = *(_QWORD *)(v1 + 40) / 0x64uLL;
    v12 = *(int *)(v1 + 204);
    v13 = 0x7FFFFFFFFFFFFFFFLL / v11;
    v14 = v11 * v12;
    if (v13 <= v12)
      v14 = 0x7FFFFFFFFFFFFFFFLL;
    v10 = *(_QWORD *)(v1 + 24) + *(_QWORD *)(v1 + 16) - v14;
    v9 = v1;
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 24);
    v10 = -24000;
  }
  return luaE_setdebt(v9, v10);
}

uint64_t runafewfinalizers(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(v1 + 152);
  if (v2)
  {
    v4 = 0;
    while (1)
    {
      v5 = *(_DWORD *)(v1 + 200);
      if (v4 >= v5)
        break;
      GCTM(a1, 1);
      v4 = (v4 + 1);
      v2 = *(_QWORD *)(v1 + 152);
      if (!v2)
        goto LABEL_8;
    }
    LODWORD(v2) = 2 * v5;
  }
  else
  {
    v4 = 0;
  }
LABEL_8:
  *(_DWORD *)(v1 + 200) = v2;
  return v4;
}

uint64_t luaC_fullgc(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 24);
  if (a2)
    *(_BYTE *)(v3 + 86) = 1;
  if (*(unsigned __int8 *)(v3 + 85) <= 1u)
  {
    *(_BYTE *)(v3 + 85) = 2;
    do
      v4 = sweeplist(a1, (uint64_t *)(v3 + 88), 1);
    while (v4 == (uint64_t *)(v3 + 88));
    *(_QWORD *)(v3 + 96) = v4;
  }
  luaC_runtilstate(a1, 0x80u);
  luaC_runtilstate(a1, 0xFFFFFF7F);
  luaC_runtilstate(a1, 0x40u);
  luaC_runtilstate(a1, 0x80u);
  *(_BYTE *)(v3 + 86) = 0;
  v5 = *(_QWORD *)(v3 + 40) / 0x64uLL;
  v6 = *(int *)(v3 + 204);
  v7 = 0x7FFFFFFFFFFFFFFFLL / v5;
  v8 = v5 * v6;
  if (v7 <= v6)
    v8 = 0x7FFFFFFFFFFFFFFFLL;
  return luaE_setdebt(v3, *(_QWORD *)(v3 + 24) + *(_QWORD *)(v3 + 16) - v8);
}

uint64_t GCTM(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t result;
  char v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  const char *v13;
  __int128 v14;

  v4 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)&v14 + 1) = 0;
  v5 = *(_QWORD *)(v4 + 152);
  *(_QWORD *)(v4 + 152) = *(_QWORD *)v5;
  *(_QWORD *)v5 = *(_QWORD *)(v4 + 88);
  *(_QWORD *)(v4 + 88) = v5;
  v6 = *(_BYTE *)(v5 + 9);
  *(_BYTE *)(v5 + 9) = v6 & 0xF7;
  if (*(unsigned __int8 *)(v4 + 85) - 2 <= 3)
    *(_BYTE *)(v5 + 9) = v6 & 0xF0 | *(_BYTE *)(v4 + 84) & 3;
  *(_QWORD *)&v14 = v5;
  DWORD2(v14) = *(unsigned __int8 *)(v5 + 8) | 0x40;
  result = (uint64_t)luaT_gettmbyobj(a1, &v14, 2u);
  if (result)
  {
    if ((*(_DWORD *)(result + 8) & 0xF) == 6)
    {
      v8 = *(_BYTE *)(a1 + 201);
      v9 = *(_BYTE *)(v4 + 87);
      *(_BYTE *)(a1 + 201) = 0;
      *(_BYTE *)(v4 + 87) = 0;
      *(_OWORD *)*(_QWORD *)(a1 + 16) = *(_OWORD *)result;
      *(_OWORD *)(*(_QWORD *)(a1 + 16) + 16) = v14;
      v10 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v10 + 32;
      result = luaD_pcall(a1, (void (*)(uint64_t, uint64_t))dothecall, 0, v10 - *(_QWORD *)(a1 + 56), 0);
      *(_BYTE *)(a1 + 201) = v8;
      *(_BYTE *)(v4 + 87) = v9;
      if (a2)
      {
        v11 = result;
        if ((_DWORD)result)
        {
          if ((_DWORD)result == 2)
          {
            v12 = *(_QWORD *)(a1 + 16);
            if ((*(_DWORD *)(v12 - 8) & 0xF) == 4)
              v13 = (const char *)(*(_QWORD *)(v12 - 16) + 24);
            else
              v13 = "no message";
            luaO_pushfstring(a1, "error in __gc metamethod (%s)", v13);
            v11 = 5;
          }
          return luaD_throw(a1, v11);
        }
      }
    }
  }
  return result;
}

uint64_t dothecall(uint64_t a1)
{
  return luaD_call(a1, (char *)(*(_QWORD *)(a1 + 16) - 32), 0, 0);
}

uint64_t propagatemark(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  _DWORD *v5;
  unsigned int v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t j;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t k;
  uint64_t v30;
  int v31;
  uint64_t m;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t n;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t i;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL4 v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t *v57;

  v1 = result;
  v2 = *(_QWORD *)(result + 112);
  v3 = *(_BYTE *)(v2 + 9);
  *(_BYTE *)(v2 + 9) = v3 | 4;
  switch(*(_BYTE *)(v2 + 8))
  {
    case 5:
      v4 = *(_QWORD *)(v2 + 40);
      *(_QWORD *)(result + 112) = *(_QWORD *)(v2 + 48);
      if (!v4)
        goto LABEL_83;
      if ((*(_BYTE *)(v4 + 10) & 8) != 0)
      {
        v5 = 0;
      }
      else
      {
        result = (uint64_t)luaT_gettm(v4, 3, *(_QWORD *)(result + 272));
        v5 = (_DWORD *)result;
        v4 = *(_QWORD *)(v2 + 40);
        if (!v4)
          goto LABEL_77;
      }
      if ((*(_BYTE *)(v4 + 9) & 3) != 0)
        result = reallymarkobject(v1, v4);
LABEL_77:
      if (!v5
        || (v5[2] & 0xF) != 4
        || (v39 = (char *)(*(_QWORD *)v5 + 24),
            v40 = strchr(v39, 107),
            result = (uint64_t)strchr(v39, 118),
            !((unint64_t)v40 | result)))
      {
LABEL_83:
        v41 = *(_QWORD *)(v2 + 24);
        v42 = v41 + 32 * (1 << *(_BYTE *)(v2 + 11));
        v43 = *(unsigned int *)(v2 + 12);
        if ((_DWORD)v43)
        {
          v44 = 0;
          for (i = 0; i < v43; ++i)
          {
            v46 = *(_QWORD *)(v2 + 16);
            if ((*(_BYTE *)(v46 + v44 + 8) & 0x40) != 0)
            {
              v47 = *(_QWORD *)(v46 + v44);
              if ((*(_BYTE *)(v47 + 9) & 3) != 0)
              {
                result = reallymarkobject(v1, v47);
                v43 = *(unsigned int *)(v2 + 12);
              }
            }
            v44 += 16;
          }
          v41 = *(_QWORD *)(v2 + 24);
        }
        for (; v41 < v42; v41 += 32)
        {
          v48 = *(_DWORD *)(v41 + 8);
          v49 = *(_DWORD *)(v41 + 24);
          if (v48)
          {
            if ((v49 & 0x40) != 0)
            {
              v50 = *(_QWORD *)(v41 + 16);
              if ((*(_BYTE *)(v50 + 9) & 3) != 0)
              {
                result = reallymarkobject(v1, v50);
                v48 = *(_DWORD *)(v41 + 8);
              }
            }
            if ((v48 & 0x40) != 0 && (*(_BYTE *)(*(_QWORD *)v41 + 9) & 3) != 0)
              result = reallymarkobject(v1, *(_QWORD *)v41);
          }
          else if ((v49 & 0x40) != 0 && (*(_BYTE *)(*(_QWORD *)(v41 + 16) + 9) & 3) != 0)
          {
            *(_DWORD *)(v41 + 24) = 10;
          }
        }
        goto LABEL_102;
      }
      *(_BYTE *)(v2 + 9) &= ~4u;
      if (v40)
      {
        if (result)
        {
          *(_QWORD *)(v2 + 48) = *(_QWORD *)(v1 + 144);
          *(_QWORD *)(v1 + 144) = v2;
        }
        else
        {
          result = traverseephemeron(v1, v2);
        }
        goto LABEL_102;
      }
      v51 = *(unsigned __int8 *)(v2 + 11);
      v52 = *(_DWORD *)(v2 + 12) != 0;
      if (v51 != 31)
      {
        v53 = *(_QWORD *)(v2 + 24);
        v54 = v53 + 32 * (1 << v51);
        do
        {
          v55 = *(_DWORD *)(v53 + 24);
          if (*(_DWORD *)(v53 + 8))
          {
            if ((v55 & 0x40) != 0)
            {
              v56 = *(_QWORD *)(v53 + 16);
              if ((*(_BYTE *)(v56 + 9) & 3) != 0)
                result = reallymarkobject(v1, v56);
            }
            if (v52)
            {
              v52 = 1;
            }
            else
            {
              result = iscleared(v1, v53);
              v52 = result != 0;
            }
          }
          else if ((v55 & 0x40) != 0 && (*(_BYTE *)(*(_QWORD *)(v53 + 16) + 9) & 3) != 0)
          {
            *(_DWORD *)(v53 + 24) = 10;
          }
          v53 += 32;
        }
        while (v53 < v54);
      }
      if (*(_BYTE *)(v1 + 85))
      {
        if (!v52)
        {
LABEL_102:
          v16 = 32 * (1 << *(_BYTE *)(v2 + 11)) + 16 * *(unsigned int *)(v2 + 12) + 56;
          goto LABEL_109;
        }
        v57 = (uint64_t *)(v1 + 128);
      }
      else
      {
        v57 = (uint64_t *)(v1 + 120);
      }
      *(_QWORD *)(v2 + 48) = *v57;
      *v57 = v2;
      goto LABEL_102;
    case 6:
      v11 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)(result + 112) = *(_QWORD *)(v2 + 16);
      if (v11 && (*(_BYTE *)(v11 + 9) & 3) != 0)
        result = reallymarkobject(result, v11);
      if (*(_BYTE *)(v2 + 10))
      {
        v12 = 0;
        do
        {
          v13 = *(uint64_t **)(v2 + 32 + 8 * v12);
          if (v13)
          {
            v14 = *v13;
            if ((uint64_t *)*v13 == v13 + 2 || *(_BYTE *)(v1 + 85) == 8)
            {
              if ((*(_BYTE *)(v14 + 8) & 0x40) != 0 && (*(_BYTE *)(*(_QWORD *)v14 + 9) & 3) != 0)
                result = reallymarkobject(v1, *(_QWORD *)v14);
            }
            else
            {
              *((_DWORD *)v13 + 6) = 1;
            }
          }
          ++v12;
          v15 = *(unsigned __int8 *)(v2 + 10);
        }
        while (v12 < v15);
        v10 = 8 * v15;
LABEL_28:
        v16 = v10 + 32;
      }
      else
      {
        v16 = 32;
      }
LABEL_109:
      *(_QWORD *)(v1 + 32) += v16;
      return result;
    case 7:
      return result;
    case 8:
      v17 = *(_QWORD *)(v2 + 72);
      *(_QWORD *)(v2 + 72) = *(_QWORD *)(result + 120);
      *(_QWORD *)(result + 112) = v17;
      *(_QWORD *)(result + 120) = v2;
      *(_BYTE *)(v2 + 9) = v3 & 0xFB;
      v18 = *(_QWORD *)(v2 + 56);
      if (v18)
      {
        v19 = *(_QWORD *)(v2 + 16);
        while (v18 < v19)
        {
          if ((*(_BYTE *)(v18 + 8) & 0x40) != 0 && (*(_BYTE *)(*(_QWORD *)v18 + 9) & 3) != 0)
          {
            result = reallymarkobject(v1, *(_QWORD *)v18);
            v19 = *(_QWORD *)(v2 + 16);
          }
          v18 += 16;
        }
        if (*(_BYTE *)(v1 + 85) == 8)
        {
          v38 = *(_QWORD *)(v2 + 56) + 16 * *(int *)(v2 + 184);
          while (v18 < v38)
          {
            *(_DWORD *)(v18 + 8) = 0;
            v18 += 16;
          }
          if (*(_QWORD *)(v2 + 80) == v2 && *(_QWORD *)(v2 + 64))
          {
            *(_QWORD *)(v2 + 80) = *(_QWORD *)(v1 + 168);
            *(_QWORD *)(v1 + 168) = v2;
          }
        }
        else if (*(_BYTE *)(v1 + 86) != 1)
        {
          result = luaD_shrinkstack(v2);
        }
        v16 = 16 * *(int *)(v2 + 184) + 208;
      }
      else
      {
        v16 = 1;
      }
      goto LABEL_109;
    case 9:
      *(_QWORD *)(result + 112) = *(_QWORD *)(v2 + 112);
      v20 = *(_QWORD *)(v2 + 96);
      if (v20 && (*(_BYTE *)(v20 + 9) & 3) != 0)
        *(_QWORD *)(v2 + 96) = 0;
      v21 = *(_QWORD *)(v2 + 104);
      if (v21 && (*(_BYTE *)(v21 + 9) & 3) != 0)
        result = reallymarkobject(result, v21);
      v22 = *(_DWORD *)(v2 + 20);
      if (v22 >= 1)
      {
        v23 = 0;
        for (j = 0; j < v22; ++j)
        {
          v25 = *(_QWORD *)(v2 + 48);
          if ((*(_BYTE *)(v25 + v23 + 8) & 0x40) != 0)
          {
            v26 = *(_QWORD *)(v25 + v23);
            if ((*(_BYTE *)(v26 + 9) & 3) != 0)
            {
              result = reallymarkobject(v1, v26);
              v22 = *(_DWORD *)(v2 + 20);
            }
          }
          v23 += 16;
        }
      }
      v27 = *(_DWORD *)(v2 + 16);
      if (v27 >= 1)
      {
        v28 = 0;
        for (k = 0; k < v27; ++k)
        {
          v30 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + v28);
          if (v30 && (*(_BYTE *)(v30 + 9) & 3) != 0)
          {
            result = reallymarkobject(v1, v30);
            v27 = *(_DWORD *)(v2 + 16);
          }
          v28 += 16;
        }
      }
      v31 = *(_DWORD *)(v2 + 32);
      if (v31 >= 1)
      {
        for (m = 0; m < v31; ++m)
        {
          v33 = *(_QWORD *)(*(_QWORD *)(v2 + 64) + 8 * m);
          if (v33 && (*(_BYTE *)(v33 + 9) & 3) != 0)
          {
            result = reallymarkobject(v1, v33);
            v31 = *(_DWORD *)(v2 + 32);
          }
        }
      }
      v34 = *(_DWORD *)(v2 + 36);
      if (v34 >= 1)
      {
        v35 = 0;
        for (n = 0; n < v34; ++n)
        {
          v37 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + v35);
          if (v37 && (*(_BYTE *)(v37 + 9) & 3) != 0)
          {
            result = reallymarkobject(v1, v37);
            v34 = *(_DWORD *)(v2 + 36);
          }
          v35 += 16;
        }
        v31 = *(_DWORD *)(v2 + 32);
      }
      v16 = 8 * v31
          + 4 * (*(_DWORD *)(v2 + 28) + *(_DWORD *)(v2 + 24))
          + 16 * (*(_DWORD *)(v2 + 20) + v34 + *(_DWORD *)(v2 + 16))
          + 120;
      goto LABEL_109;
    default:
      if (*(_BYTE *)(v2 + 8) != 38)
        return result;
      *(_QWORD *)(result + 112) = *(_QWORD *)(v2 + 16);
      v6 = *(unsigned __int8 *)(v2 + 10);
      if (*(_BYTE *)(v2 + 10))
      {
        v7 = 0;
        v8 = (_BYTE *)(v2 + 40);
        do
        {
          if ((*v8 & 0x40) != 0)
          {
            v9 = *((_QWORD *)v8 - 1);
            if ((*(_BYTE *)(v9 + 9) & 3) != 0)
            {
              result = reallymarkobject(v1, v9);
              v6 = *(unsigned __int8 *)(v2 + 10);
            }
          }
          ++v7;
          v8 += 16;
        }
        while (v7 < v6);
      }
      v10 = 16 * v6;
      goto LABEL_28;
  }
}

uint64_t sweepstep(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t result;

  v7 = *(uint64_t **)(a2 + 96);
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 24);
    v9 = sweeplist(a1, v7, 85);
    *(_QWORD *)(a2 + 96) = v9;
    *(_QWORD *)(a2 + 40) += *(_QWORD *)(a2 + 24) - v8;
    if (v9)
      return 595;
  }
  result = 0;
  *(_BYTE *)(a2 + 85) = a3;
  *(_QWORD *)(a2 + 96) = a4;
  return result;
}

uint64_t markmt(uint64_t result)
{
  uint64_t v1;
  uint64_t i;
  uint64_t v3;

  v1 = result;
  for (i = 440; i != 512; i += 8)
  {
    v3 = *(_QWORD *)(v1 + i);
    if (v3)
    {
      if ((*(_BYTE *)(v3 + 9) & 3) != 0)
        result = reallymarkobject(v1, v3);
    }
  }
  return result;
}

uint64_t markbeingfnz(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 152);
  if (v1)
  {
    v2 = result;
    do
    {
      if ((*(_BYTE *)(v1 + 9) & 3) != 0)
        result = reallymarkobject(v2, v1);
      v1 = *(_QWORD *)v1;
    }
    while (v1);
  }
  return result;
}

uint64_t traverseephemeron(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  _QWORD *v16;

  v4 = *(_DWORD **)(a2 + 24);
  v5 = &v4[8 * (1 << *(_BYTE *)(a2 + 11))];
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = *(_QWORD *)(a2 + 16);
      if ((*(_BYTE *)(v10 + v7 + 8) & 0x40) != 0)
      {
        v11 = *(_QWORD *)(v10 + v7);
        if ((*(_BYTE *)(v11 + 9) & 3) != 0)
        {
          reallymarkobject(a1, v11);
          v6 = *(unsigned int *)(a2 + 12);
          v9 = 1;
        }
      }
      ++v8;
      v7 += 16;
    }
    while (v8 < v6);
    v4 = *(_DWORD **)(a2 + 24);
  }
  else
  {
    v9 = 0;
  }
  if (v4 < v5)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      if (v4[2])
      {
        v14 = iscleared(a1, (uint64_t)(v4 + 4));
        v15 = v4[2];
        if (v14)
        {
          if ((v15 & 0x40) != 0 && (*(_BYTE *)(*(_QWORD *)v4 + 9) & 3) != 0)
            v12 = 1;
          v13 = 1;
        }
        else if ((v15 & 0x40) != 0 && (*(_BYTE *)(*(_QWORD *)v4 + 9) & 3) != 0)
        {
          reallymarkobject(a1, *(_QWORD *)v4);
          v9 = 1;
        }
      }
      else if ((v4[6] & 0x40) != 0 && (*(_BYTE *)(*((_QWORD *)v4 + 2) + 9) & 3) != 0)
      {
        v4[6] = 10;
      }
      v4 += 8;
    }
    while (v4 < v5);
    if (*(_BYTE *)(a1 + 85))
    {
      if (v12)
      {
        v16 = (_QWORD *)(a1 + 136);
      }
      else
      {
        if (!v13)
          return v9;
        v16 = (_QWORD *)(a1 + 144);
      }
      goto LABEL_29;
    }
LABEL_28:
    v16 = (_QWORD *)(a1 + 120);
LABEL_29:
    *(_QWORD *)(a2 + 48) = *v16;
    *v16 = a2;
    return v9;
  }
  if (!*(_BYTE *)(a1 + 85))
    goto LABEL_28;
  return v9;
}

uint64_t iscleared(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;

  v2 = *(_DWORD *)(a2 + 8);
  if ((v2 & 0x40) == 0)
    return 0;
  v3 = *(_QWORD *)a2;
  if ((v2 & 0xF) == 4)
  {
    if ((*(_BYTE *)(v3 + 9) & 3) != 0)
      reallymarkobject(a1, v3);
    return 0;
  }
  return *(_BYTE *)(v3 + 9) & 3;
}

uint64_t convergeephemerons(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  v1 = result;
  do
  {
    v2 = *(_QWORD *)(v1 + 136);
    *(_QWORD *)(v1 + 136) = 0;
    if (!v2)
      break;
    v3 = 0;
    do
    {
      while (1)
      {
        v4 = v2;
        v2 = *(_QWORD *)(v2 + 48);
        result = traverseephemeron(v1, v4);
        if ((_DWORD)result)
          break;
        if (!v2)
          goto LABEL_10;
      }
      while (*(_QWORD *)(v1 + 112))
        result = propagatemark(v1);
      v3 = 1;
    }
    while (v2);
LABEL_10:
    ;
  }
  while (v3);
  return result;
}

uint64_t clearvalues(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    do
    {
      v6 = *(_QWORD *)(v4 + 24);
      v7 = *(_BYTE *)(v4 + 11);
      if (*(_DWORD *)(v4 + 12))
      {
        v8 = 0;
        v9 = 0;
        do
        {
          v10 = *(_QWORD *)(v4 + 16) + v8;
          result = iscleared(v5, v10);
          if ((_DWORD)result)
            *(_DWORD *)(v10 + 8) = 0;
          ++v9;
          v8 += 16;
        }
        while (v9 < *(unsigned int *)(v4 + 12));
        v11 = *(_QWORD *)(v4 + 24);
      }
      else
      {
        v11 = *(_QWORD *)(v4 + 24);
      }
      v12 = v6 + 32 * (1 << v7);
      while (v11 < v12)
      {
        if (*(_DWORD *)(v11 + 8))
        {
          result = iscleared(v5, v11);
          if ((_DWORD)result)
          {
            *(_DWORD *)(v11 + 8) = 0;
            if ((*(_BYTE *)(v11 + 24) & 0x40) != 0 && (*(_BYTE *)(*(_QWORD *)(v11 + 16) + 9) & 3) != 0)
              *(_DWORD *)(v11 + 24) = 10;
          }
        }
        v11 += 32;
      }
      v4 = *(_QWORD *)(v4 + 48);
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t clearkeys(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  _DWORD *v8;

  if (a2)
  {
    v2 = a2;
    v3 = result;
    do
    {
      v4 = *(unsigned __int8 *)(v2 + 11);
      if (v4 != 31)
      {
        v5 = *(_QWORD *)(v2 + 24);
        v6 = v5 + 32 * (1 << v4);
        v7 = (_DWORD *)(v5 + 16);
        do
        {
          if (*(v7 - 2))
          {
            result = iscleared(v3, (uint64_t)v7);
            if ((_DWORD)result)
            {
              *(v7 - 2) = 0;
              if ((v7[2] & 0x40) != 0 && (*(_BYTE *)(*(_QWORD *)v7 + 9) & 3) != 0)
                v7[2] = 10;
            }
          }
          v8 = v7 + 4;
          v7 += 8;
        }
        while ((unint64_t)v8 < v6);
      }
      v2 = *(_QWORD *)(v2 + 48);
    }
    while (v2);
  }
  return result;
}

uint64_t luaL_openlibs(uint64_t a1)
{
  char **v2;
  uint64_t v3;
  char *v4;

  v2 = &loadedlibs;
  do
  {
    v3 = luaD_rawrunprotected(a1, (void (*)(uint64_t, uint64_t))requiref, (uint64_t)v2);
    if ((_DWORD)v3)
      break;
    lua_settop(a1, 0xFFFFFFFE);
    v4 = v2[3];
    v2 += 2;
  }
  while (v4);
  return v3;
}

uint64_t *requiref(_QWORD *a1, uint64_t a2)
{
  return luaL_requiref(a1, *(char **)a2, *(_QWORD *)(a2 + 8), 1);
}

uint64_t luaX_init(_QWORD *a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t result;

  v2 = luaS_newlstr(a1, "_ENV", 4uLL);
  luaC_fix((uint64_t)a1, v2);
  for (i = 0; i != 22; *(_BYTE *)(v4 + 10) = i)
  {
    v4 = luaS_new(a1, luaX_tokens[i]);
    result = luaC_fix((uint64_t)a1, v4);
    ++i;
  }
  return result;
}

char *luaX_token2str(uint64_t a1, int a2)
{
  if (a2 <= 256)
    return (char *)luaO_pushfstring(*(_QWORD *)(a1 + 56), "'%c'");
  if (a2 > 0x120)
    return luaX_tokens[a2 - 257];
  return (char *)luaO_pushfstring(*(_QWORD *)(a1 + 56), "'%s'");
}

uint64_t luaX_syntaxerror(uint64_t a1, const char *a2)
{
  return lexerror(a1, a2, *(_DWORD *)(a1 + 16));
}

uint64_t lexerror(uint64_t a1, const char *a2, int a3)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const char *v8;

  v5 = luaG_addinfo(*(_QWORD *)(a1 + 56), a2, *(_QWORD *)(a1 + 96), *(_DWORD *)(a1 + 4));
  if (a3)
  {
    v6 = (const char *)v5;
    v7 = *(_QWORD *)(a1 + 56);
    if ((a3 - 290) > 3)
    {
      v8 = luaX_token2str(a1, a3);
    }
    else
    {
      save(a1, 0);
      v8 = (const char *)luaO_pushfstring(*(_QWORD *)(a1 + 56), "'%s'", **(const char ***)(a1 + 72));
    }
    luaO_pushfstring(v7, "%s near %s", v6, v8);
  }
  return luaD_throw(*(_QWORD *)(a1 + 56), 3);
}

uint64_t luaX_newstring(uint64_t a1, char *a2, size_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v4 = *(_QWORD **)(a1 + 56);
  v5 = luaS_newlstr(v4, a2, a3);
  v6 = v4[2];
  v4[2] = v6 + 16;
  *(_QWORD *)v6 = v5;
  *(_DWORD *)(v6 + 8) = *(unsigned __int8 *)(v5 + 8) | 0x40;
  v7 = luaH_set((uint64_t)v4, *(_QWORD *)(a1 + 80), (uint64_t *)(v4[2] - 16));
  if (*((_DWORD *)v7 + 2))
  {
    v5 = v7[2];
  }
  else
  {
    *(_DWORD *)v7 = 1;
    *((_DWORD *)v7 + 2) = 1;
    if (*(uint64_t *)(v4[3] + 24) >= 1)
      luaC_step((uint64_t)v4);
  }
  v4[2] -= 16;
  return v5;
}

uint64_t luaX_setinput(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t result;
  uint64_t *v7;

  *(_DWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 112) = 46;
  *(_DWORD *)a2 = a5;
  *(_DWORD *)(a2 + 32) = 289;
  *(_QWORD *)(a2 + 56) = a1;
  *(_QWORD *)(a2 + 64) = a3;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 4) = 0x100000001;
  *(_QWORD *)(a2 + 96) = a4;
  *(_QWORD *)(a2 + 104) = luaS_newlstr(a1, "_ENV", 4uLL);
  result = luaM_realloc_(*(_QWORD *)(a2 + 56), **(_QWORD **)(a2 + 72), *(_QWORD *)(*(_QWORD *)(a2 + 72) + 16), 32);
  v7 = *(uint64_t **)(a2 + 72);
  *v7 = result;
  v7[2] = 32;
  return result;
}

__n128 luaX_next(__n128 *a1)
{
  __n128 *v1;
  unsigned __int32 v2;
  __n128 result;
  unsigned __int32 v5;

  v1 = a1 + 2;
  v2 = a1[2].n128_u32[0];
  a1->n128_u32[2] = a1->n128_u32[1];
  if (v2 == 289)
  {
    llex((int *)a1, &a1[1].n128_i64[1]);
    a1[1].n128_u32[0] = v5;
  }
  else
  {
    result = *v1;
    a1[1] = a1[2];
    v1->n128_u32[0] = 289;
  }
  return result;
}

void llex(int *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  unsigned __int8 *v8;
  int v9;
  _QWORD *v10;
  unsigned __int8 *v12;
  int v13;
  _QWORD *v14;
  unsigned __int8 *v16;
  int v17;
  int v18;
  _QWORD *v19;
  unsigned __int8 *v21;
  _QWORD *v23;
  unsigned __int8 *v25;
  int v26;
  _QWORD *v27;
  unsigned __int8 *v29;
  int v30;
  _QWORD *v31;
  unsigned __int8 *v33;
  int v34;
  _QWORD *v35;
  unsigned __int8 *v37;
  _QWORD *v38;
  unsigned __int8 *v40;
  int v41;
  _QWORD *v42;
  unsigned __int8 *v44;
  int v45;
  _QWORD *v46;
  unsigned __int8 *v48;
  int v49;
  _QWORD *v50;
  unsigned __int8 *v52;
  int v53;
  unsigned __int8 *v55;
  _QWORD *v56;
  unsigned __int8 *v58;
  int v59;
  int v60;
  _QWORD *v61;
  unsigned __int8 *v63;
  int v64;
  _QWORD *v65;
  unsigned __int8 *v67;
  int v68;
  uint64_t v69;
  int v70;
  _QWORD *v71;
  unsigned __int8 *v73;
  int v74;
  uint64_t v76;
  uint64_t v77;
  int v78;
  _QWORD *v79;
  unsigned __int8 *v81;
  int v82;
  _QWORD *v83;
  unsigned __int8 *v85;
  int v86;
  char v87;
  _QWORD *v88;
  unsigned __int8 *v90;
  int v91;
  _QWORD *v92;
  unsigned __int8 *v94;
  int v95;
  unint64_t v96;
  uint64_t i;
  _QWORD *v98;
  unsigned __int8 *v100;
  int v101;
  _QWORD *v102;
  unsigned __int8 *v104;
  int v105;
  int v106;
  unint64_t v107;
  char *v108;
  char v109;
  char v110[8];
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(*((_QWORD *)a1 + 9) + 8) = 0;
  v4 = 1;
  while (2)
  {
    v5 = *a1;
    switch(*a1)
    {
      case -1:
        return;
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 33:
      case 35:
      case 36:
      case 37:
      case 38:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 59:
        goto LABEL_34;
      case 9:
      case 11:
      case 12:
      case 32:
        v6 = (_QWORD *)*((_QWORD *)a1 + 8);
        if ((*v6)--)
        {
          v8 = (unsigned __int8 *)v6[1];
          v6[1] = v8 + 1;
          v9 = *v8;
        }
        else
        {
          v9 = luaZ_fill((uint64_t)v6);
        }
        *a1 = v9;
        continue;
      case 10:
      case 13:
        inclinenumber(a1);
        continue;
      case 34:
      case 39:
        save((uint64_t)a1, *a1);
        v27 = (_QWORD *)*((_QWORD *)a1 + 8);
        if ((*v27)--)
        {
          v29 = (unsigned __int8 *)v27[1];
          v27[1] = v29 + 1;
          v30 = *v29;
        }
        else
        {
          v30 = luaZ_fill((uint64_t)v27);
        }
        *a1 = v30;
        if (v30 == v5)
          goto LABEL_59;
        break;
      case 45:
        v10 = (_QWORD *)*((_QWORD *)a1 + 8);
        if ((*v10)--)
        {
          v12 = (unsigned __int8 *)v10[1];
          v10[1] = v12 + 1;
          v13 = *v12;
        }
        else
        {
          v13 = luaZ_fill((uint64_t)v10);
        }
        *a1 = v13;
        if (v13 != 45)
          return;
        v14 = (_QWORD *)*((_QWORD *)a1 + 8);
        if ((*v14)--)
        {
          v16 = (unsigned __int8 *)v14[1];
          v14[1] = v16 + 1;
          v17 = *v16;
        }
        else
        {
          v17 = luaZ_fill((uint64_t)v14);
        }
        *a1 = v17;
        if (v17 != 91)
          goto LABEL_23;
        v18 = skip_sep((uint64_t)a1);
        *(_QWORD *)(*((_QWORD *)a1 + 9) + 8) = 0;
        if (v18 < 0)
        {
          v17 = *a1;
LABEL_23:
          while ((v17 + 1) > 0xE || ((1 << (v17 + 1)) & 0x4801) == 0)
          {
            v19 = (_QWORD *)*((_QWORD *)a1 + 8);
            if ((*v19)--)
            {
              v21 = (unsigned __int8 *)v19[1];
              v19[1] = v21 + 1;
              v17 = *v21;
            }
            else
            {
              v17 = luaZ_fill((uint64_t)v19);
            }
            *a1 = v17;
          }
        }
        else
        {
          read_long_string((uint64_t)a1, 0, v18);
          *(_QWORD *)(*((_QWORD *)a1 + 9) + 8) = 0;
        }
        continue;
      case 46:
        save((uint64_t)a1, 46);
        v38 = (_QWORD *)*((_QWORD *)a1 + 8);
        if ((*v38)--)
        {
          v40 = (unsigned __int8 *)v38[1];
          v38[1] = v40 + 1;
          v41 = *v40;
        }
        else
        {
          v41 = luaZ_fill((uint64_t)v38);
        }
        *a1 = v41;
        if (check_next1((uint64_t)a1, 46))
        {
          check_next1((uint64_t)a1, 46);
        }
        else if ((luai_ctype_[*a1 + 1] & 2) != 0)
        {
LABEL_159:
          read_numeral(a1, a2);
        }
        return;
      case 47:
        v42 = (_QWORD *)*((_QWORD *)a1 + 8);
        if ((*v42)--)
        {
          v44 = (unsigned __int8 *)v42[1];
          v42[1] = v44 + 1;
          v45 = *v44;
        }
        else
        {
          v45 = luaZ_fill((uint64_t)v42);
        }
        *a1 = v45;
        check_next1((uint64_t)a1, 47);
        return;
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
        goto LABEL_159;
      case 58:
        v46 = (_QWORD *)*((_QWORD *)a1 + 8);
        if ((*v46)--)
        {
          v48 = (unsigned __int8 *)v46[1];
          v46[1] = v48 + 1;
          v49 = *v48;
        }
        else
        {
          v49 = luaZ_fill((uint64_t)v46);
        }
        *a1 = v49;
        check_next1((uint64_t)a1, 58);
        return;
      case 60:
        v50 = (_QWORD *)*((_QWORD *)a1 + 8);
        if ((*v50)--)
        {
          v52 = (unsigned __int8 *)v50[1];
          v50[1] = v52 + 1;
          v53 = *v52;
        }
        else
        {
          v53 = luaZ_fill((uint64_t)v50);
        }
        *a1 = v53;
        if (!check_next1((uint64_t)a1, 61))
          check_next1((uint64_t)a1, 60);
        return;
      case 61:
        v23 = (_QWORD *)*((_QWORD *)a1 + 8);
        if (!(*v23)--)
          goto LABEL_162;
        v55 = (unsigned __int8 *)v23[1];
        v23[1] = v55 + 1;
        v26 = *v55;
        goto LABEL_163;
      case 62:
        v56 = (_QWORD *)*((_QWORD *)a1 + 8);
        if ((*v56)--)
        {
          v58 = (unsigned __int8 *)v56[1];
          v56[1] = v58 + 1;
          v59 = *v58;
        }
        else
        {
          v59 = luaZ_fill((uint64_t)v56);
        }
        *a1 = v59;
        if (!check_next1((uint64_t)a1, 61))
          check_next1((uint64_t)a1, 62);
        return;
      default:
        if (v5 == 91)
        {
          v60 = skip_sep((uint64_t)a1);
          if (v60 < 0)
          {
            if (v60 != -1)
              lexerror((uint64_t)a1, "invalid long string delimiter", 293);
          }
          else
          {
            read_long_string((uint64_t)a1, a2, v60);
          }
        }
        else if (v5 == 126)
        {
          v23 = (_QWORD *)*((_QWORD *)a1 + 8);
          if ((*v23)--)
          {
            v25 = (unsigned __int8 *)v23[1];
            v23[1] = v25 + 1;
            v26 = *v25;
          }
          else
          {
LABEL_162:
            v26 = luaZ_fill((uint64_t)v23);
          }
LABEL_163:
          *a1 = v26;
          check_next1((uint64_t)a1, 61);
        }
        else
        {
LABEL_34:
          if ((luai_ctype_[v5 + 1] & 1) != 0)
          {
            do
            {
              save((uint64_t)a1, v5);
              v35 = (_QWORD *)*((_QWORD *)a1 + 8);
              if ((*v35)--)
              {
                v37 = (unsigned __int8 *)v35[1];
                v35[1] = v37 + 1;
                v5 = *v37;
              }
              else
              {
                v5 = luaZ_fill((uint64_t)v35);
              }
              *a1 = v5;
            }
            while ((luai_ctype_[v5 + 1] & 3) != 0);
            *a2 = luaX_newstring((uint64_t)a1, **((char ***)a1 + 9), *(_QWORD *)(*((_QWORD *)a1 + 9) + 8));
          }
          else
          {
            v31 = (_QWORD *)*((_QWORD *)a1 + 8);
            if ((*v31)--)
            {
              v33 = (unsigned __int8 *)v31[1];
              v31[1] = v33 + 1;
              v34 = *v33;
            }
            else
            {
              v34 = luaZ_fill((uint64_t)v31);
            }
            *a1 = v34;
          }
        }
        return;
    }
    break;
  }
  do
  {
    if (v30 <= 12)
    {
      if (v30 != -1)
      {
        if (v30 == 10)
          goto LABEL_69;
LABEL_72:
        save((uint64_t)a1, v30);
        v71 = (_QWORD *)*((_QWORD *)a1 + 8);
        if ((*v71)--)
        {
          v73 = (unsigned __int8 *)v71[1];
          v71[1] = v73 + 1;
          v74 = *v73;
        }
        else
        {
          v74 = luaZ_fill((uint64_t)v71);
        }
        *a1 = v74;
        goto LABEL_126;
      }
      v69 = (uint64_t)a1;
      v70 = 289;
LABEL_71:
      lexerror(v69, "unfinished string", v70);
      goto LABEL_126;
    }
    if (v30 == 13)
    {
LABEL_69:
      v69 = (uint64_t)a1;
      v70 = 293;
      goto LABEL_71;
    }
    if (v30 != 92)
      goto LABEL_72;
    save((uint64_t)a1, 92);
    v65 = (_QWORD *)*((_QWORD *)a1 + 8);
    if ((*v65)--)
    {
      v67 = (unsigned __int8 *)v65[1];
      v65[1] = v67 + 1;
      v68 = *v67;
    }
    else
    {
      v68 = luaZ_fill((uint64_t)v65);
    }
    *a1 = v68;
    if (v68 <= 97)
    {
      if (v68 <= 33)
      {
        if (v68 == -1)
          goto LABEL_126;
        if (v68 == 10 || v68 == 13)
        {
          inclinenumber(a1);
          LOBYTE(v68) = 10;
          goto LABEL_125;
        }
      }
      else
      {
        if (v68 <= 91)
        {
          if (v68 != 34 && v68 != 39)
            goto LABEL_98;
LABEL_121:
          v92 = (_QWORD *)*((_QWORD *)a1 + 8);
          if ((*v92)--)
          {
            v94 = (unsigned __int8 *)v92[1];
            v92[1] = v94 + 1;
            v95 = *v94;
          }
          else
          {
            v95 = luaZ_fill((uint64_t)v92);
          }
          *a1 = v95;
LABEL_125:
          --*(_QWORD *)(*((_QWORD *)a1 + 9) + 8);
          save((uint64_t)a1, v68);
          goto LABEL_126;
        }
        if (v68 == 92)
          goto LABEL_121;
        if (v68 == 97)
        {
          LOBYTE(v68) = 7;
          goto LABEL_121;
        }
      }
LABEL_98:
      v76 = v4;
      esccheck(a1, luai_ctype_[v68 + 1] & 2, "invalid escape sequence");
      v68 = 0;
      v77 = 0;
      v78 = *a1;
      do
      {
        if ((luai_ctype_[v78 + 1] & 2) == 0)
          break;
        save((uint64_t)a1, v78);
        v79 = (_QWORD *)*((_QWORD *)a1 + 8);
        if ((*v79)--)
        {
          v81 = (unsigned __int8 *)v79[1];
          v79[1] = v81 + 1;
          v82 = *v81;
        }
        else
        {
          v82 = luaZ_fill((uint64_t)v79);
        }
        v68 = v78 + 10 * v68 - 48;
        *a1 = v82;
        ++v77;
        v78 = v82;
      }
      while (v77 != 3);
      esccheck(a1, v68 < 256, "decimal escape too large");
      *(_QWORD *)(*((_QWORD *)a1 + 9) + 8) -= v77;
      v4 = v76;
      goto LABEL_125;
    }
    switch(v68)
    {
      case 'n':
        LOBYTE(v68) = 10;
        goto LABEL_121;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'w':
      case 'y':
        goto LABEL_98;
      case 'r':
        LOBYTE(v68) = 13;
        goto LABEL_121;
      case 't':
        LOBYTE(v68) = 9;
        goto LABEL_121;
      case 'u':
        save((uint64_t)a1, 117);
        v83 = (_QWORD *)*((_QWORD *)a1 + 8);
        if ((*v83)--)
        {
          v85 = (unsigned __int8 *)v83[1];
          v83[1] = v85 + 1;
          v86 = *v85;
        }
        else
        {
          v86 = luaZ_fill((uint64_t)v83);
        }
        *a1 = v86;
        esccheck(a1, v86 == 123, "missing '{'");
        v96 = (int)gethexa((uint64_t)a1);
        for (i = -4; ; --i)
        {
          save((uint64_t)a1, *a1);
          v98 = (_QWORD *)*((_QWORD *)a1 + 8);
          if ((*v98)--)
          {
            v100 = (unsigned __int8 *)v98[1];
            v98[1] = v100 + 1;
            v101 = *v100;
          }
          else
          {
            v101 = luaZ_fill((uint64_t)v98);
          }
          *a1 = v101;
          if ((luai_ctype_[v101 + 1] & 0x10) == 0)
            break;
          v96 = 16 * v96 + (int)luaO_hexavalue(v101);
          esccheck(a1, v96 < 0x110000, "UTF-8 value too large");
        }
        esccheck(a1, v101 == 125, "missing '}'");
        v102 = (_QWORD *)*((_QWORD *)a1 + 8);
        if ((*v102)--)
        {
          v104 = (unsigned __int8 *)v102[1];
          v102[1] = v104 + 1;
          v105 = *v104;
        }
        else
        {
          v105 = luaZ_fill((uint64_t)v102);
        }
        *a1 = v105;
        *(_QWORD *)(*((_QWORD *)a1 + 9) + 8) += i;
        v106 = luaO_utf8esc((uint64_t)v110, v96);
        if (v106 >= 1)
        {
          v107 = v106 + 1;
          v108 = (char *)&v111 - v106;
          do
          {
            v109 = *v108++;
            save((uint64_t)a1, v109);
            --v107;
          }
          while (v107 > 1);
        }
        v4 = (uint64_t)&jpt_1DE5ACEA4;
        goto LABEL_126;
      case 'v':
        LOBYTE(v68) = 11;
        goto LABEL_121;
      case 'x':
        v87 = gethexa((uint64_t)a1);
        LOBYTE(v68) = gethexa((uint64_t)a1) + 16 * v87;
        *(_QWORD *)(*((_QWORD *)a1 + 9) + 8) -= 2;
        goto LABEL_121;
      case 'z':
        --*(_QWORD *)(*((_QWORD *)a1 + 9) + 8);
        break;
      default:
        if (v68 == 102)
        {
          LOBYTE(v68) = 12;
        }
        else
        {
          if (v68 != 98)
            goto LABEL_98;
          LOBYTE(v68) = 8;
        }
        goto LABEL_121;
    }
LABEL_112:
    v88 = (_QWORD *)*((_QWORD *)a1 + 8);
    if ((*v88)--)
    {
      v90 = (unsigned __int8 *)v88[1];
      v88[1] = v90 + 1;
      v91 = *v90;
    }
    else
    {
      v91 = luaZ_fill((uint64_t)v88);
    }
    *a1 = v91;
    while ((luai_ctype_[v91 + 1] & 8) != 0)
    {
      if (v91 != 13 && v91 != 10)
        goto LABEL_112;
      inclinenumber(a1);
      v91 = *a1;
    }
LABEL_126:
    v30 = *a1;
  }
  while (*a1 != v5);
LABEL_59:
  save((uint64_t)a1, v5);
  v61 = (_QWORD *)*((_QWORD *)a1 + 8);
  if ((*v61)--)
  {
    v63 = (unsigned __int8 *)v61[1];
    v61[1] = v63 + 1;
    v64 = *v63;
  }
  else
  {
    v64 = luaZ_fill((uint64_t)v61);
  }
  *a1 = v64;
  *a2 = luaX_newstring((uint64_t)a1, (char *)(**((_QWORD **)a1 + 9) + 1), *(_QWORD *)(*((_QWORD *)a1 + 9) + 8) - 2);
}

void luaX_lookahead(uint64_t a1)
{
  int v2;

  llex((int *)a1, (uint64_t *)(a1 + 40));
  *(_DWORD *)(a1 + 32) = v2;
}

uint64_t save(uint64_t a1, char a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t result;

  v3 = *(uint64_t **)(a1 + 72);
  v5 = v3[1];
  v4 = v3[2];
  v6 = v5 + 1;
  if (v5 + 1 <= v4)
  {
    result = *v3;
  }
  else
  {
    if (v4 >= 0x3FFFFFFFFFFFFFFFLL)
    {
      luaG_addinfo(*(_QWORD *)(a1 + 56), "lexical element too long", *(_QWORD *)(a1 + 96), *(_DWORD *)(a1 + 4));
      luaD_throw(*(_QWORD *)(a1 + 56), 3);
      v4 = v3[2];
    }
    v8 = 2 * v4;
    result = luaM_realloc_(*(_QWORD *)(a1 + 56), *v3, v4, 2 * v4);
    *v3 = result;
    v3[2] = v8;
    v5 = v3[1];
    v6 = v5 + 1;
  }
  v3[1] = v6;
  *(_BYTE *)(result + v5) = a2;
  return result;
}

uint64_t inclinenumber(int *a1)
{
  int v2;
  _QWORD *v3;
  unsigned __int8 *v5;
  uint64_t result;
  _QWORD *v9;
  unsigned __int8 *v11;
  int v12;

  v2 = *a1;
  v3 = (_QWORD *)*((_QWORD *)a1 + 8);
  if ((*v3)--)
  {
    v5 = (unsigned __int8 *)v3[1];
    v3[1] = v5 + 1;
    result = *v5;
  }
  else
  {
    result = luaZ_fill((uint64_t)v3);
  }
  *a1 = result;
  if (((_DWORD)result == 13 || (_DWORD)result == 10) && (_DWORD)result != v2)
  {
    v9 = (_QWORD *)*((_QWORD *)a1 + 8);
    if ((*v9)--)
    {
      v11 = (unsigned __int8 *)v9[1];
      v9[1] = v11 + 1;
      result = *v11;
    }
    else
    {
      result = luaZ_fill((uint64_t)v9);
    }
    *a1 = result;
  }
  v12 = a1[1] + 1;
  a1[1] = v12;
  if (v12 == 0x7FFFFFFF)
  {
    luaG_addinfo(*((_QWORD *)a1 + 7), "chunk has too many lines", *((_QWORD *)a1 + 12), 0x7FFFFFFF);
    return luaD_throw(*((_QWORD *)a1 + 7), 3);
  }
  return result;
}

uint64_t skip_sep(uint64_t a1)
{
  int v2;
  _QWORD *v3;
  unsigned __int8 *v5;
  int v6;
  unsigned int v7;
  _QWORD *v8;
  unsigned __int8 *v10;

  v2 = *(_DWORD *)a1;
  save(a1, *(_DWORD *)a1);
  v3 = *(_QWORD **)(a1 + 64);
  if ((*v3)--)
  {
    v5 = (unsigned __int8 *)v3[1];
    v3[1] = v5 + 1;
    v6 = *v5;
  }
  else
  {
    v6 = luaZ_fill((uint64_t)v3);
  }
  *(_DWORD *)a1 = v6;
  if (v6 == 61)
  {
    v7 = 0;
    do
    {
      save(a1, 61);
      v8 = *(_QWORD **)(a1 + 64);
      if ((*v8)--)
      {
        v10 = (unsigned __int8 *)v8[1];
        v8[1] = v10 + 1;
        v6 = *v10;
      }
      else
      {
        v6 = luaZ_fill((uint64_t)v8);
      }
      *(_DWORD *)a1 = v6;
      ++v7;
    }
    while (v6 == 61);
  }
  else
  {
    v7 = 0;
  }
  if (v6 == v2)
    return v7;
  else
    return ~v7;
}

uint64_t read_long_string(uint64_t a1, uint64_t *a2, int a3)
{
  int v6;
  _QWORD *v7;
  unsigned __int8 *v9;
  int v10;
  const char *v12;
  int v13;
  const char *v14;
  _QWORD *v15;
  unsigned __int8 *v17;
  int v18;
  _QWORD *v19;
  unsigned __int8 *v21;
  uint64_t result;

  v6 = *(_DWORD *)(a1 + 4);
  save(a1, *(_DWORD *)a1);
  v7 = *(_QWORD **)(a1 + 64);
  if ((*v7)--)
  {
    v9 = (unsigned __int8 *)v7[1];
    v7[1] = v9 + 1;
    v10 = *v9;
  }
  else
  {
    v10 = luaZ_fill((uint64_t)v7);
  }
  *(_DWORD *)a1 = v10;
  if (v10 == 13 || v10 == 10)
    inclinenumber((int *)a1);
  if (a2)
    v12 = "string";
  else
    v12 = "comment";
  do
  {
    while (1)
    {
      v13 = *(_DWORD *)a1;
      if (*(int *)a1 > 12)
        break;
      if (v13 == -1)
      {
        v14 = (const char *)luaO_pushfstring(*(_QWORD *)(a1 + 56), "unfinished long %s (starting at line %d)", v12, v6);
        lexerror(a1, v14, 289);
      }
      else if (v13 == 10)
      {
LABEL_21:
        save(a1, 10);
        inclinenumber((int *)a1);
        if (!a2)
          *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) = 0;
      }
      else
      {
LABEL_24:
        if (a2)
          save(a1, v13);
        v15 = *(_QWORD **)(a1 + 64);
        if ((*v15)--)
        {
          v17 = (unsigned __int8 *)v15[1];
          v15[1] = v17 + 1;
          v18 = *v17;
        }
        else
        {
          v18 = luaZ_fill((uint64_t)v15);
        }
        *(_DWORD *)a1 = v18;
      }
    }
    if (v13 == 13)
      goto LABEL_21;
    if (v13 != 93)
      goto LABEL_24;
  }
  while (skip_sep(a1) != a3);
  save(a1, *(_DWORD *)a1);
  v19 = *(_QWORD **)(a1 + 64);
  if ((*v19)--)
  {
    v21 = (unsigned __int8 *)v19[1];
    v19[1] = v21 + 1;
    result = *v21;
  }
  else
  {
    result = luaZ_fill((uint64_t)v19);
  }
  *(_DWORD *)a1 = result;
  if (a2)
  {
    result = luaX_newstring(a1, (char *)(**(_QWORD **)(a1 + 72) + a3 + 2), *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) - 2 * (a3 + 2));
    *a2 = result;
  }
  return result;
}

uint64_t check_next1(uint64_t a1, int a2)
{
  _QWORD *v3;
  unsigned __int8 *v5;
  int v6;

  if (*(_DWORD *)a1 != a2)
    return 0;
  v3 = *(_QWORD **)(a1 + 64);
  if ((*v3)--)
  {
    v5 = (unsigned __int8 *)v3[1];
    v3[1] = v5 + 1;
    v6 = *v5;
  }
  else
  {
    v6 = luaZ_fill((uint64_t)v3);
  }
  *(_DWORD *)a1 = v6;
  return 1;
}

double read_numeral(int *a1, _QWORD *a2)
{
  int v4;
  _QWORD *v5;
  unsigned __int8 *v7;
  int v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned __int8 *v14;
  int v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  double result;
  _QWORD v29[2];

  v29[0] = 0;
  v29[1] = 0;
  v4 = *a1;
  save((uint64_t)a1, *a1);
  v5 = (_QWORD *)*((_QWORD *)a1 + 8);
  if ((*v5)--)
  {
    v7 = (unsigned __int8 *)v5[1];
    v5[1] = v7 + 1;
    v8 = *v7;
  }
  else
  {
    v8 = luaZ_fill((uint64_t)v5);
  }
  *a1 = v8;
  v9 = "Ee";
  if (v4 == 48 && check_next2((uint64_t)a1, "xX"))
    v9 = "Pp";
  while (1)
  {
    if (check_next2((uint64_t)a1, v9))
      check_next2((uint64_t)a1, "-+");
    v10 = *a1;
    if ((luai_ctype_[v10 + 1] & 0x10) == 0)
      break;
    v11 = (uint64_t)a1;
LABEL_13:
    save(v11, v10);
    v12 = (_QWORD *)*((_QWORD *)a1 + 8);
    if ((*v12)--)
    {
      v14 = (unsigned __int8 *)v12[1];
      v12[1] = v14 + 1;
      v15 = *v14;
    }
    else
    {
      v15 = luaZ_fill((uint64_t)v12);
    }
    *a1 = v15;
  }
  v11 = (uint64_t)a1;
  if ((_DWORD)v10 == 46)
    goto LABEL_13;
  save((uint64_t)a1, 0);
  v16 = *((unsigned __int8 *)a1 + 112);
  if (v16 != 46)
  {
    v17 = (_QWORD *)*((_QWORD *)a1 + 9);
    v18 = v17[1];
    if (v18)
    {
      v19 = *v17 - 1;
      do
      {
        if (*(_BYTE *)(v19 + v18) == 46)
          *(_BYTE *)(v19 + v18) = v16;
        --v18;
      }
      while (v18);
    }
  }
  if (!luaO_str2num(**((char ***)a1 + 9), (uint64_t)v29))
  {
    v20 = *((unsigned __int8 *)a1 + 112);
    *((_BYTE *)a1 + 112) = 46;
    v21 = *((_QWORD *)a1 + 9);
    if (v20 != 46)
    {
      v22 = *(_QWORD *)(v21 + 8);
      if (v22)
      {
        v23 = *(_QWORD *)v21 - 1;
        do
        {
          if (*(unsigned __int8 *)(v23 + v22) == v20)
            *(_BYTE *)(v23 + v22) = 46;
          --v22;
        }
        while (v22);
        v21 = *((_QWORD *)a1 + 9);
      }
    }
    if (!luaO_str2num(*(char **)v21, (uint64_t)v29))
    {
      v24 = *((unsigned __int8 *)a1 + 112);
      if (v24 != 46)
      {
        v25 = (_QWORD *)*((_QWORD *)a1 + 9);
        v26 = v25[1];
        if (v26)
        {
          v27 = *v25 - 1;
          do
          {
            if (*(unsigned __int8 *)(v27 + v26) == v24)
              *(_BYTE *)(v27 + v26) = 46;
            --v26;
          }
          while (v26);
        }
      }
      lexerror((uint64_t)a1, "malformed number", 290);
    }
  }
  result = *(double *)v29;
  *a2 = v29[0];
  return result;
}

_DWORD *esccheck(_DWORD *result, int a2, const char *a3)
{
  uint64_t v4;
  _QWORD *v5;
  unsigned __int8 *v7;
  int v8;

  if (!a2)
  {
    v4 = (uint64_t)result;
    if (*result != -1)
    {
      save((uint64_t)result, *result);
      v5 = *(_QWORD **)(v4 + 64);
      if ((*v5)--)
      {
        v7 = (unsigned __int8 *)v5[1];
        v5[1] = v7 + 1;
        v8 = *v7;
      }
      else
      {
        v8 = luaZ_fill((uint64_t)v5);
      }
      *(_DWORD *)v4 = v8;
    }
    return (_DWORD *)lexerror(v4, a3, 293);
  }
  return result;
}

uint64_t gethexa(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 *v4;
  int v5;

  save(a1, *(_DWORD *)a1);
  v2 = *(_QWORD **)(a1 + 64);
  if ((*v2)--)
  {
    v4 = (unsigned __int8 *)v2[1];
    v2[1] = v4 + 1;
    v5 = *v4;
  }
  else
  {
    v5 = luaZ_fill((uint64_t)v2);
  }
  *(_DWORD *)a1 = v5;
  esccheck((_DWORD *)a1, luai_ctype_[v5 + 1] & 0x10, "hexadecimal digit expected");
  return luaO_hexavalue(*(_DWORD *)a1);
}

uint64_t check_next2(uint64_t a1, char *a2)
{
  int v4;
  _QWORD *v5;
  unsigned __int8 *v7;
  int v8;

  v4 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 != *a2 && v4 != a2[1])
    return 0;
  save(a1, v4);
  v5 = *(_QWORD **)(a1 + 64);
  if ((*v5)--)
  {
    v7 = (unsigned __int8 *)v5[1];
    v5[1] = v7 + 1;
    v8 = *v7;
  }
  else
  {
    v8 = luaZ_fill((uint64_t)v5);
  }
  *(_DWORD *)a1 = v8;
  return 1;
}

uint64_t luaM_growaux_(_QWORD *a1, uint64_t a2, int *a3, uint64_t a4, int a5, const char *a6)
{
  int v10;
  int v11;
  int v12;
  uint64_t result;

  v10 = *a3;
  if (a5 >= 0)
    v11 = a5;
  else
    v11 = a5 + 1;
  if (v10 >= v11 >> 1)
  {
    v12 = a5;
    if (v10 >= a5)
    {
      luaG_runerror(a1, "too many %s (limit is %d)", a6, a5);
      v10 = *a3;
    }
  }
  else if (2 * v10 <= 4)
  {
    v12 = 4;
  }
  else
  {
    v12 = 2 * v10;
  }
  result = luaM_realloc_((uint64_t)a1, a2, v10 * a4, v12 * a4);
  *a3 = v12;
  return result;
}

uint64_t luaM_realloc_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = *(_QWORD *)(a1 + 24);
  v9 = (*(uint64_t (**)(_QWORD))v8)(*(_QWORD *)(v8 + 8));
  v10 = v9;
  if (a4 && !v9)
    luaD_throw(a1, 4);
  if (a2)
    v11 = a3;
  else
    v11 = 0;
  *(_QWORD *)(v8 + 24) += a4 - v11;
  return v10;
}

uint64_t luaM_toobig(_QWORD *a1)
{
  return luaG_runerror(a1, "memory allocation error: block too big");
}

uint64_t luaO_int2fb(uint64_t result)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  BOOL v4;

  if (result >= 8)
  {
    if (result < 0x80)
    {
      v1 = 0;
    }
    else
    {
      v1 = 0;
      do
      {
        v2 = result + 15;
        LODWORD(result) = (result + 15) >> 4;
        v1 += 4;
      }
      while (v2 > 0x7FF);
    }
    if (result < 0x10)
    {
      v3 = result;
    }
    else
    {
      do
      {
        v3 = (result + 1) >> 1;
        ++v1;
        v4 = result > 0x1E;
        LODWORD(result) = v3;
      }
      while (v4);
    }
    return (8 * v1 + 8) | (v3 - 8);
  }
  return result;
}

uint64_t luaO_fb2int(uint64_t result)
{
  if (result >> 3)
    return (result & 7 | 8) << ((result >> 3) - 1);
  else
    return result;
}

uint64_t luaO_ceillog2(int a1)
{
  unsigned int v1;
  int v2;
  unsigned int v3;
  unsigned int v4;

  v1 = a1 - 1;
  if ((a1 - 1) < 0x100)
  {
    v2 = 0;
  }
  else
  {
    v2 = 0;
    v3 = a1 - 1;
    do
    {
      v2 += 8;
      v1 = v3 >> 8;
      v4 = HIWORD(v3);
      v3 >>= 8;
    }
    while (v4);
  }
  return v2 + luaO_ceillog2_log_2[v1];
}

uint64_t luaO_arith(uint64_t result, int a2, double *a3, double *a4, uint64_t a5)
{
  _QWORD *v9;
  int v10;
  double v11;
  int v12;
  uint64_t v13;
  double *v14;
  double *v15;
  double v16;
  uint64_t v17;
  double v18;

  v9 = (_QWORD *)result;
  if ((a2 - 7) >= 5)
  {
    if (a2 == 5)
    {
      v17 = 0;
      v18 = 0.0;
      if (*((_DWORD *)a3 + 2) == 3)
      {
        v18 = *a3;
      }
      else
      {
        result = luaV_tonumber_(a3, &v18);
        if (!(_DWORD)result)
          return luaT_trybinTM(v9, a3, a4, (_OWORD *)a5, a2 + 6);
      }
      if (*((_DWORD *)a4 + 2) == 3)
      {
        v14 = a4;
      }
      else
      {
        v14 = (double *)&v17;
        result = luaV_tonumber_(a4, (double *)&v17);
        if (!(_DWORD)result)
          return luaT_trybinTM(v9, a3, a4, (_OWORD *)a5, a2 + 6);
      }
      *(double *)a5 = v18 / *v14;
      v12 = 3;
      goto LABEL_16;
    }
    if (a2 != 13)
    {
      v17 = 0;
      v18 = 0.0;
      v10 = *((_DWORD *)a3 + 2);
      if (v10 == 3)
      {
        v18 = *a3;
      }
      else
      {
        if (v10 == 19 && *((_DWORD *)a4 + 2) == 19)
        {
          result = intarith(result, a2, *(_QWORD *)a3, *(_QWORD *)a4);
          v11 = *(double *)&result;
          v12 = 19;
          goto LABEL_40;
        }
        result = luaV_tonumber_(a3, &v18);
        if (!(_DWORD)result)
          return luaT_trybinTM(v9, a3, a4, (_OWORD *)a5, a2 + 6);
      }
      if (*((_DWORD *)a4 + 2) == 3)
      {
        v15 = a4;
      }
      else
      {
        v15 = (double *)&v17;
        result = luaV_tonumber_(a4, (double *)&v17);
        if (!(_DWORD)result)
          return luaT_trybinTM(v9, a3, a4, (_OWORD *)a5, a2 + 6);
      }
      v12 = 3;
      v11 = 0.0;
      v16 = *v15;
      switch(a2)
      {
        case 0:
          v11 = v18 + v16;
          break;
        case 1:
          v11 = v18 - v16;
          break;
        case 2:
          v11 = v18 * v16;
          break;
        case 3:
        case 4:
          break;
        case 5:
          v11 = v18 / v16;
          break;
        default:
          if (a2 == 12)
            v11 = -v18;
          v12 = 3;
          break;
      }
LABEL_40:
      *(double *)a5 = v11;
      goto LABEL_16;
    }
  }
  v17 = 0;
  v18 = 0.0;
  if (*((_DWORD *)a3 + 2) == 19)
  {
    v18 = *a3;
  }
  else if (!luaV_tointeger(a3, &v18))
  {
    return luaT_trybinTM(v9, a3, a4, (_OWORD *)a5, a2 + 6);
  }
  if (*((_DWORD *)a4 + 2) == 19)
  {
    v13 = *(_QWORD *)a4;
    v17 = *(_QWORD *)a4;
LABEL_15:
    result = intarith((uint64_t)v9, a2, *(unint64_t *)&v18, v13);
    *(_QWORD *)a5 = result;
    v12 = 19;
LABEL_16:
    *(_DWORD *)(a5 + 8) = v12;
    return result;
  }
  if (luaV_tointeger(a4, &v17))
  {
    v13 = v17;
    goto LABEL_15;
  }
  return luaT_trybinTM(v9, a3, a4, (_OWORD *)a5, a2 + 6);
}

unint64_t intarith(uint64_t a1, int a2, unint64_t a3, uint64_t a4)
{
  unint64_t result;

  result = 0;
  switch(a2)
  {
    case 0:
      result = a4 + a3;
      break;
    case 1:
      result = a3 - a4;
      break;
    case 2:
      result = a4 * a3;
      break;
    case 3:
      result = luaV_mod(a1, a3, a4);
      break;
    case 6:
      result = luaV_div(a1, a3, a4);
      break;
    case 7:
      result = a4 & a3;
      break;
    case 8:
      result = a4 | a3;
      break;
    case 9:
      result = a4 ^ a3;
      break;
    case 10:
      result = luaV_shiftl(a3, a4);
      break;
    case 11:
      result = luaV_shiftl(a3, -a4);
      break;
    case 12:
      result = -(uint64_t)a3;
      break;
    case 13:
      result = ~a3;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t luaO_hexavalue(int a1)
{
  if ((luai_ctype_[a1 + 1] & 2) != 0)
    return (a1 - 48);
  else
    return (a1 | 0x20u) - 87;
}

uint64_t luaO_str2num(char *__s1, uint64_t a2)
{
  char *v4;
  int v5;
  int v6;
  int v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  char v14;
  int v15;
  char *v16;
  int v17;
  int v18;
  char v19;
  uint64_t v20;
  double v21;
  int v22;
  uint64_t v24;
  char *v25;
  int v26;
  char *v27;

  v4 = __s1;
  do
  {
    v6 = *v4++;
    v5 = v6;
  }
  while ((luai_ctype_[v6 + 1] & 8) != 0);
  if (v5 == 43)
  {
    v7 = 0;
  }
  else
  {
    if (v5 != 45)
    {
      v7 = 0;
      --v4;
      goto LABEL_9;
    }
    v7 = 1;
  }
  v5 = *v4;
LABEL_9:
  if (v5 == 48 && (v4[1] | 0x20) == 0x78)
  {
    v9 = v4[2];
    v4 += 2;
    v8 = v9;
    if ((luai_ctype_[v9 + 1] & 0x10) != 0)
    {
      v10 = 0;
      do
      {
        v11 = 16 * v10;
        if ((luai_ctype_[v8 + 1] & 2) != 0)
          v12 = v8 - 48;
        else
          v12 = (v8 | 0x20) - 87;
        v10 = v11 + v12;
        v13 = *++v4;
        v8 = v13;
      }
      while ((luai_ctype_[v13 + 1] & 0x10) != 0);
      goto LABEL_22;
    }
  }
  else if ((luai_ctype_[v5 + 1] & 2) != 0)
  {
    v10 = 0;
    do
    {
      v10 = 10 * v10 + (char)v5 - 48;
      v15 = *++v4;
      LOBYTE(v5) = v15;
    }
    while ((luai_ctype_[v15 + 1] & 2) != 0);
LABEL_22:
    v14 = 1;
    goto LABEL_23;
  }
  v10 = 0;
  v14 = 0;
LABEL_23:
  v16 = v4 - 1;
  do
  {
    v18 = *++v16;
    v17 = v18;
  }
  while ((luai_ctype_[v18 + 1] & 8) != 0);
  v19 = v14 ^ 1;
  if (v17)
    v19 = 1;
  if ((v19 & 1) == 0)
  {
    if (v7)
      v20 = -v10;
    else
      v20 = v10;
    v21 = *(double *)&v20;
    v22 = 19;
    goto LABEL_32;
  }
  if (!strpbrk(__s1, "nN"))
  {
    v27 = 0;
    v21 = strtod(__s1, &v27);
    v16 = v27;
    if (v27 != __s1)
    {
      v24 = *v27;
      if ((luai_ctype_[v24 + 1] & 8) != 0)
      {
        v25 = v27 + 1;
        do
        {
          v27 = v25;
          v26 = *v25++;
          LODWORD(v24) = v26;
        }
        while ((luai_ctype_[v26 + 1] & 8) != 0);
        v16 = v25 - 1;
      }
      if (!(_DWORD)v24)
      {
        v22 = 3;
LABEL_32:
        *(double *)a2 = v21;
        *(_DWORD *)(a2 + 8) = v22;
        return v16 - __s1 + 1;
      }
    }
  }
  return 0;
}

uint64_t luaO_utf8esc(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (a2 >= 0x80)
  {
    v4 = 0;
    LODWORD(v5) = 63;
    v6 = 0x700000000;
    do
    {
      *(_BYTE *)(a1 + 7 + v4) = a2 & 0x3F | 0x80;
      a2 >>= 6;
      v5 = v5 >> 1;
      v6 -= 0x100000000;
      --v4;
    }
    while (a2 > v5);
    v2 = (1 - v4);
    LOBYTE(a2) = a2 | (2 * ~(_BYTE)v5);
    v3 = v6 >> 32;
  }
  else
  {
    v2 = 1;
    v3 = 7;
  }
  *(_BYTE *)(a1 + v3) = a2;
  return v2;
}

uint64_t luaO_tostring(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  size_t v10;
  uint64_t result;
  char __s[50];
  uint64_t v13;

  v9 = a1;
  v13 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 8) == 19)
  {
    v10 = (int)luaI_snprintf(a1, (uint64_t)__s, 50, "%d", a5, a6, a7, a8, *(_QWORD *)a2);
  }
  else
  {
    v10 = (int)luaI_snprintf(a1, (uint64_t)__s, 50, "%.14g", a5, a6, a7, a8, *(_QWORD *)a2);
    if (!__s[strcspn(__s, "-0123456789")])
    {
      *(_WORD *)&__s[v10] = 12334;
      v10 += 2;
    }
  }
  result = luaS_newlstr(v9, __s, v10);
  *(_QWORD *)a2 = result;
  *(_DWORD *)(a2 + 8) = *(unsigned __int8 *)(result + 8) | 0x40;
  return result;
}

uint64_t luaO_pushvfstring(uint64_t a1, char *__s, uint64_t *a3)
{
  char *v3;
  char *v5;
  char *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  const char **v23;
  const char *v24;
  const char *v25;
  size_t v26;
  uint64_t v27;
  int v28;
  char *v29;
  uint64_t *v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE __s1[8];
  _QWORD v46[5];

  v3 = __s;
  v46[4] = *MEMORY[0x1E0C80C00];
  v5 = strchr(__s, 37);
  if (v5)
  {
    v6 = v5;
    v7 = 0;
    while (1)
    {
      v8 = *(_QWORD *)(a1 + 16);
      if (*(_QWORD *)(a1 + 48) - v8 <= 47)
      {
        luaD_growstack(a1, 2);
        v8 = *(_QWORD *)(a1 + 16);
      }
      *(_QWORD *)(a1 + 16) = v8 + 16;
      v9 = luaS_newlstr(a1, v3, v6 - v3);
      *(_QWORD *)v8 = v9;
      *(_DWORD *)(v8 + 8) = *(unsigned __int8 *)(v9 + 8) | 0x40;
      v16 = v6[1];
      if (v16 > 99)
        break;
      if (v16 <= 84)
      {
        if (v16 == 37)
        {
          v27 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v27 + 16;
          v28 = a1;
          v29 = "%";
LABEL_33:
          v26 = 1;
          goto LABEL_34;
        }
        if (v16 != 73)
          goto LABEL_31;
        v17 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v17 + 16;
        v18 = a3++;
        v19 = *v18;
LABEL_26:
        *(_QWORD *)v17 = v19;
        *(_DWORD *)(v17 + 8) = 19;
        goto LABEL_27;
      }
      if (v16 == 85)
      {
        v31 = (unint64_t *)a3++;
        v26 = (int)luaO_utf8esc((uint64_t)__s1, *v31);
        v29 = (char *)v46 - v26;
        v27 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v27 + 16;
        goto LABEL_30;
      }
      if (v16 != 99)
        goto LABEL_31;
      v22 = a3++;
      __s1[0] = *(_DWORD *)v22;
      if ((luai_ctype_[__s1[0] + 1] & 4) != 0)
      {
        v27 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v27 + 16;
        v29 = __s1;
        v28 = a1;
        goto LABEL_33;
      }
      luaO_pushfstring(a1, "<\\%d>", __s1[0]);
LABEL_35:
      v7 += 2;
      v3 = v6 + 2;
      v6 = strchr(v6 + 2, 37);
      if (!v6)
        goto LABEL_38;
    }
    if (v16 > 111)
    {
      if (v16 == 112)
      {
        v32 = a3++;
        v26 = (int)luaI_snprintf(a1, (uint64_t)__s1, 40, "%p", v12, v13, v14, v15, *v32);
        v27 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v27 + 16;
        v29 = __s1;
LABEL_30:
        v28 = a1;
LABEL_34:
        v33 = luaS_newlstr(v28, v29, v26);
        *(_QWORD *)v27 = v33;
        *(_DWORD *)(v27 + 8) = *(unsigned __int8 *)(v33 + 8) | 0x40;
        goto LABEL_35;
      }
      if (v16 == 115)
      {
        v23 = (const char **)a3++;
        v24 = *v23;
        if (v24)
          v25 = v24;
        else
          v25 = "(null)";
        v26 = strlen(v25);
        v27 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v27 + 16;
        v28 = a1;
        v29 = (char *)v25;
        goto LABEL_34;
      }
LABEL_31:
      luaG_runerror(a1, "invalid option '%%%c' to 'lua_pushfstring'", v6[1]);
      goto LABEL_35;
    }
    if (v16 == 100)
    {
      v17 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v17 + 16;
      v30 = a3++;
      v19 = *(int *)v30;
      goto LABEL_26;
    }
    if (v16 != 102)
      goto LABEL_31;
    v20 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v20 + 16;
    v21 = a3++;
    *(_QWORD *)v20 = *v21;
    *(_DWORD *)(v20 + 8) = 3;
LABEL_27:
    luaO_tostring(a1, *(_QWORD *)(a1 + 16) - 16, v10, v11, v12, v13, v14, v15);
    goto LABEL_35;
  }
  v7 = 0;
LABEL_38:
  v34 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(a1 + 48) - v34 <= 31)
  {
    luaD_growstack(a1, 1);
    v34 = *(_QWORD *)(a1 + 16);
  }
  v35 = strlen(v3);
  *(_QWORD *)(a1 + 16) = v34 + 16;
  v36 = luaS_newlstr(a1, v3, v35);
  *(_QWORD *)v34 = v36;
  *(_DWORD *)(v34 + 8) = *(unsigned __int8 *)(v36 + 8) | 0x40;
  if (v7)
    luaV_concat(a1, v7 | 1, v37, v38, v39, v40, v41, v42);
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) - 16) + 24;
}

uint64_t luaO_pushfstring(uint64_t a1, char *a2, ...)
{
  va_list va;

  va_start(va, a2);
  return luaO_pushvfstring(a1, a2, (uint64_t *)va);
}

void *luaO_chunkid(char *a1, char *__s, unint64_t a3)
{
  size_t v6;
  size_t v7;
  int v8;
  char *v9;
  void *result;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  size_t v17;
  char *v18;

  v6 = strlen(__s);
  v7 = v6;
  v8 = *__s;
  if (v8 == 64)
  {
    if (v6 > a3)
    {
      a1[2] = 46;
      *(_WORD *)a1 = 11822;
      v11 = a1 + 3;
      v12 = a3 - 3;
      v9 = &__s[v7 - a3 + 4];
      return memcpy(v11, v9, v12);
    }
    v9 = __s + 1;
LABEL_11:
    v11 = a1;
    v12 = v7;
    return memcpy(v11, v9, v12);
  }
  if (v8 == 61)
  {
    v9 = __s + 1;
    if (v6 > a3)
    {
      result = memcpy(a1, v9, a3 - 1);
      a1[a3 - 1] = 0;
      return result;
    }
    goto LABEL_11;
  }
  v13 = strchr(__s, 10);
  a1[8] = 34;
  *(_QWORD *)a1 = *(_QWORD *)"[string \"";
  v14 = a1 + 9;
  if (v7 >= a3 - 15 || v13)
  {
    v16 = v13 - __s;
    if (!v13)
      v16 = v7;
    if (v16 >= a3 - 15)
      v17 = a3 - 15;
    else
      v17 = v16;
    result = memcpy(v14, __s, v17);
    v18 = &v14[v17];
    *(_WORD *)v18 = 11822;
    v18[2] = 46;
    v15 = &v14[v17 + 3];
  }
  else
  {
    result = memcpy(v14, __s, v7);
    v15 = &v14[v7];
  }
  strcpy(v15, "\"]");
  return result;
}

uint64_t luaY_parser(_QWORD *a1, uint64_t a2, uint64_t a3, _DWORD *a4, char *a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __n128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _QWORD v35[3];
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;

  v34 = 0;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v23 = 0u;
  v12 = luaF_newLclosure((uint64_t)a1, 1u);
  v13 = a1[2];
  *(_QWORD *)v13 = v12;
  *(_DWORD *)(v13 + 8) = 70;
  v14 = a1[2] + 16;
  a1[2] = v14;
  if (a1[6] - v14 <= 15)
    luaD_growstack((uint64_t)a1, 0);
  *(_QWORD *)&v32 = luaH_new((uint64_t)a1);
  v15 = a1[2];
  *(_QWORD *)v15 = v32;
  *(_DWORD *)(v15 + 8) = 69;
  v16 = a1[2] + 16;
  a1[2] = v16;
  if (a1[6] - v16 <= 15)
    luaD_growstack((uint64_t)a1, 0);
  luaF_newproto((uint64_t)a1);
  v18 = v17;
  *(_QWORD *)(v12 + 24) = v17;
  *(_QWORD *)&v23 = v17;
  v19 = luaS_new(a1, a5);
  *(_QWORD *)(v18 + 104) = v19;
  *((_QWORD *)&v31 + 1) = a3;
  *((_QWORD *)&v32 + 1) = a4;
  a4[10] = 0;
  a4[6] = 0;
  a4[2] = 0;
  luaX_setinput(a1, (uint64_t)&v27, a2, v19, a6);
  v39 = 0;
  v35[0] = 0;
  v35[1] = 0;
  v20 = *((_QWORD *)&v32 + 1);
  *((_QWORD *)&v23 + 1) = v30;
  *(_QWORD *)&v24 = &v27;
  *(_QWORD *)&v30 = &v23;
  v25 = xmmword_1DEC64BE0;
  LODWORD(v26) = 0;
  DWORD2(v26) = 0;
  BYTE12(v26) = 0;
  DWORD1(v26) = *(_DWORD *)(*((_QWORD *)&v32 + 1) + 8);
  *(_QWORD *)(v18 + 104) = v33;
  v21 = *(_DWORD *)(v20 + 40);
  *(_WORD *)(v18 + 11) = 513;
  LODWORD(v20) = *(_DWORD *)(v20 + 24);
  v37 = v21;
  v38 = v20;
  v36 = 0;
  *((_QWORD *)&v24 + 1) = &v36;
  v35[2] = -1;
  LODWORD(v35[0]) = 8;
  newupvalue((uint64_t)&v23, *((uint64_t *)&v33 + 1), v35);
  luaX_next(&v27);
  statlist(&v27);
  if ((_DWORD)v28 != 289)
    error_expected((uint64_t)&v27, 289);
  close_func((uint64_t)&v27);
  a1[2] -= 16;
  return v12;
}

uint64_t newupvalue(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v6 = *(_QWORD *)a1;
  v7 = (int *)(*(_QWORD *)a1 + 16);
  v8 = *v7;
  checklimit((_QWORD *)a1, *(unsigned __int8 *)(a1 + 59) + 1, 255, "upvalues");
  v9 = *v7;
  if (*v7 <= *(unsigned __int8 *)(a1 + 59))
  {
    *(_QWORD *)(v6 + 88) = luaM_growaux_(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 56), *(_QWORD *)(v6 + 88), v7, 16, 255, "upvalues");
    v9 = *(_DWORD *)(v6 + 16);
  }
  v10 = *(_QWORD *)(v6 + 88);
  if ((int)v8 < v9)
  {
    v11 = v9;
    v12 = (_QWORD *)(v10 + 16 * v8);
    v13 = v11 - v8;
    do
    {
      *v12 = 0;
      v12 += 2;
      --v13;
    }
    while (v13);
  }
  result = *(unsigned __int8 *)(a1 + 59);
  v15 = v10 + 16 * result;
  *(_BYTE *)(v15 + 8) = *a3 == 8;
  *(_BYTE *)(v15 + 9) = a3[2];
  *(_QWORD *)v15 = a2;
  if ((*(_BYTE *)(v6 + 9) & 4) != 0 && (*(_BYTE *)(a2 + 9) & 3) != 0)
  {
    luaC_barrier_(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56), v6, a2);
    result = *(unsigned __int8 *)(a1 + 59);
  }
  *(_BYTE *)(a1 + 59) = result + 1;
  return result;
}

void statlist(__n128 *a1)
{
  unsigned int v2;

  while (1)
  {
    v2 = a1[1].n128_u32[0] - 260;
    if (v2 <= 0x1D)
    {
      if (((1 << v2) & 0x20020007) != 0)
        return;
      if (a1[1].n128_u32[0] == 274)
        break;
    }
    statement(a1);
  }
  statement(a1);
}

uint64_t close_func(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 48);
  v2 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)v3;
  luaK_ret(v3, 0, 0);
  leaveblock(v3);
  *(_QWORD *)(v4 + 56) = luaM_realloc_(v2, *(_QWORD *)(v4 + 56), 4 * *(int *)(v4 + 24), 4 * *(int *)(v3 + 32));
  v5 = *(int *)(v3 + 32);
  *(_DWORD *)(v4 + 24) = v5;
  *(_QWORD *)(v4 + 72) = luaM_realloc_(v2, *(_QWORD *)(v4 + 72), 4 * *(int *)(v4 + 28), 4 * v5);
  *(_DWORD *)(v4 + 28) = *(_DWORD *)(v3 + 32);
  *(_QWORD *)(v4 + 48) = luaM_realloc_(v2, *(_QWORD *)(v4 + 48), 16 * *(int *)(v4 + 20), 16 * *(int *)(v3 + 44));
  v6 = *(int *)(v3 + 48);
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(v3 + 44);
  *(_QWORD *)(v4 + 64) = luaM_realloc_(v2, *(_QWORD *)(v4 + 64), 8 * *(int *)(v4 + 32), 8 * v6);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(v3 + 48);
  *(_QWORD *)(v4 + 80) = luaM_realloc_(v2, *(_QWORD *)(v4 + 80), 16 * *(int *)(v4 + 36), 16 * *(__int16 *)(v3 + 56));
  *(_DWORD *)(v4 + 36) = *(__int16 *)(v3 + 56);
  result = luaM_realloc_(v2, *(_QWORD *)(v4 + 88), 16 * *(int *)(v4 + 16), 16 * *(unsigned __int8 *)(v3 + 59));
  *(_QWORD *)(v4 + 88) = result;
  *(_DWORD *)(v4 + 16) = *(unsigned __int8 *)(v3 + 59);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(v3 + 8);
  if (*(uint64_t *)(*(_QWORD *)(v2 + 24) + 24) >= 1)
    return luaC_step(v2);
  return result;
}

_QWORD *checklimit(_QWORD *result, int a2, int a3, const char *a4)
{
  _QWORD *v6;
  uint64_t v7;
  const char *v8;
  const char *v9;

  if (a2 > a3)
  {
    v6 = result;
    v7 = *(_QWORD *)(result[2] + 56);
    if (*(_DWORD *)(*result + 40))
      v8 = (const char *)luaO_pushfstring(v7, "function at line %d", *(_DWORD *)(*result + 40));
    else
      v8 = "main function";
    v9 = (const char *)luaO_pushfstring(v7, "too many %s (limit is %d) in %s", a4, a3, v8);
    return (_QWORD *)luaX_syntaxerror(v6[2], v9);
  }
  return result;
}

void statement(__n128 *a1)
{
  int v2;
  unint64_t v3;
  unsigned __int16 v4;
  unsigned __int32 v5;
  int v6;
  unint64_t v7;
  unsigned __int32 v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int32 v11;
  int v12;
  uint64_t v13;
  int32x2_t v14;
  unint64_t v15;
  unsigned __int32 v16;
  unsigned __int32 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  double v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned __int32 v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  double v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int32 v59;
  unsigned int v60;
  unint64_t v61;
  unint64_t v62;
  unsigned __int32 v63;
  unsigned int v64;
  unint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  __int128 v70;
  __int128 v71;
  __int128 *v72;
  unint64_t v73;
  uint64_t v74;

  v2 = a1->n128_i32[1];
  v3 = a1[3].n128_u64[1];
  v4 = *(_WORD *)(v3 + 198) + 1;
  *(_WORD *)(v3 + 198) = v4;
  checklimit((_QWORD *)a1[3].n128_u64[0], v4, 200, "C levels");
  v5 = a1[1].n128_u32[0];
  switch(v5)
  {
    case 0x102u:
    case 0x10Au:
      v6 = luaK_jump(a1[3].n128_i64[0]);
      gotostat((uint64_t)a1, v6);
      goto LABEL_91;
    case 0x103u:
      luaX_next(a1);
      block((uint64_t)a1);
      check_match(a1, 262, 259, v2);
      goto LABEL_91;
    case 0x104u:
    case 0x105u:
    case 0x106u:
    case 0x107u:
    case 0x10Cu:
    case 0x10Eu:
    case 0x10Fu:
    case 0x110u:
    case 0x113u:
    case 0x114u:
    case 0x115u:
      goto LABEL_5;
    case 0x108u:
      v13 = a1[3].n128_i64[0];
      v74 = 0x10000;
      LOBYTE(v74) = *(_BYTE *)(v13 + 58);
      v14 = *(int32x2_t *)(v13 + 24);
      v73 = __PAIR64__(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 16) + 88) + 24), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 16) + 88) + 40));
      v72 = (__int128 *)v14;
      *(_QWORD *)(v13 + 24) = &v72;
      luaX_next(a1);
      v15 = str_checkname(a1);
      v16 = a1[1].n128_u32[0];
      if (v16 == 44 || v16 == 268)
      {
        v54 = a1[3].n128_i64[0];
        v70 = 0uLL;
        *(_QWORD *)&v71 = 0;
        v55 = *(unsigned __int8 *)(v54 + 60);
        v56 = luaX_newstring((uint64_t)a1, "(for generator)", 0xFuLL);
        new_localvar(a1, v56);
        v57 = luaX_newstring((uint64_t)a1, "(for state)", 0xBuLL);
        new_localvar(a1, v57);
        v58 = luaX_newstring((uint64_t)a1, "(for control)", 0xDuLL);
        new_localvar(a1, v58);
        new_localvar(a1, v15);
        v59 = a1[1].n128_u32[0];
        v60 = 1;
        while (v59 == 44)
        {
          luaX_next(a1);
          v61 = str_checkname(a1);
          new_localvar(a1, v61);
          v59 = a1[1].n128_u32[0];
          ++v60;
        }
        checknext(a1, 268);
        v66 = a1->n128_i32[1];
        v67 = explist(a1, &v70);
        adjust_assign((uint64_t)a1, 3, v67, &v70);
        luaK_checkstack(v54, 3);
        forbody(a1, v55, v66, v60, 0);
      }
      else if (v16 == 61)
      {
        fornum(a1, v15, v2);
      }
      else
      {
        luaX_syntaxerror((uint64_t)a1, "'=' or 'in' expected");
      }
      check_match(a1, 262, 264, v2);
      goto LABEL_85;
    case 0x109u:
      v70 = 0uLL;
      *(_QWORD *)&v71 = 0;
      v72 = 0;
      v73 = 0;
      v74 = 0;
      luaX_next(a1);
      singlevar(a1, (uint64_t)&v70);
      while (1)
      {
        v17 = a1[1].n128_u32[0];
        if (v17 != 46)
          break;
        fieldsel(a1, &v70);
      }
      if (v17 == 58)
      {
        fieldsel(a1, &v70);
        v40 = 1;
      }
      else
      {
        v40 = 0;
      }
      body(a1, (uint64_t)&v72, v40, v2);
      luaK_storevar(a1[3].n128_i64[0], (int *)&v70, &v72);
      luaK_fixline((int *)a1[3].n128_u64[0], v2);
      goto LABEL_91;
    case 0x10Bu:
      v18 = a1[3].n128_i64[0];
      v69 = -1;
      do
      {
        v70 = 0uLL;
        *(_QWORD *)&v71 = 0;
        v19 = a1[3].n128_i64[0];
        v72 = 0;
        v73 = 0;
        v74 = 0;
        luaX_next(a1);
        subexpr(a1, (int32x2_t *)&v72, 0);
        checknext(a1, 275);
        if ((a1[1].n128_u32[0] | 8) == 0x10A)
        {
          luaK_goiffalse(a1[3].n128_i64[0], (int *)&v72);
          LOBYTE(v71) = *(_BYTE *)(v19 + 58);
          *(_WORD *)((char *)&v71 + 1) = 0;
          v20 = *(_QWORD *)(v19 + 24);
          *((_QWORD *)&v70 + 1) = __PAIR64__(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 16) + 88) + 24), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 16) + 88) + 40));
          *(_QWORD *)&v70 = v20;
          *(_QWORD *)(v19 + 24) = &v70;
          gotostat((uint64_t)a1, v74);
          while (1)
          {
            v21 = a1[1].n128_i32[0];
            if (v21 > 287)
            {
              if (v21 != 288)
              {
                if (v21 != 289)
                {
LABEL_33:
                  v24 = luaK_jump(v19);
                  goto LABEL_34;
                }
LABEL_30:
                leaveblock(v19);
                goto LABEL_37;
              }
            }
            else if (v21 != 59)
            {
              if ((v21 - 260) >= 3)
                goto LABEL_33;
              goto LABEL_30;
            }
            statement(a1);
          }
        }
        luaK_goiftrue(a1[3].n128_i64[0], (int *)&v72);
        LOBYTE(v71) = *(_BYTE *)(v19 + 58);
        *(_WORD *)((char *)&v71 + 1) = 0;
        v23 = *(_QWORD *)(v19 + 24);
        *((_QWORD *)&v70 + 1) = __PAIR64__(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 16) + 88) + 24), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 16) + 88) + 40));
        *(_QWORD *)&v70 = v23;
        *(_QWORD *)(v19 + 24) = &v70;
        v24 = HIDWORD(v74);
LABEL_34:
        statlist(a1, v22);
        leaveblock(v19);
        if ((a1[1].n128_u32[0] & 0xFFFFFFFE) == 0x104)
        {
          v25 = luaK_jump(v19);
          luaK_concat((uint64_t *)v19, &v69, v25);
        }
        luaK_patchtohere(v19, v24);
LABEL_37:
        v26 = a1[1].n128_u32[0];
      }
      while (v26 == 261);
      if (v26 == 260)
      {
        luaX_next(a1);
        block((uint64_t)a1);
      }
      check_match(a1, 262, 267, v2);
      v27 = v69;
      v28 = v18;
LABEL_47:
      luaK_patchtohere(v28, v27);
      goto LABEL_91;
    case 0x10Du:
      luaX_next(a1);
      if (a1[1].n128_u32[0] == 265)
      {
        luaX_next(a1);
        v70 = 0uLL;
        *(_QWORD *)&v71 = 0;
        v29 = a1[3].n128_u64[0];
        v30 = str_checkname(a1);
        new_localvar(a1, v30);
        adjustlocalvars((uint64_t)a1, 1u);
        body(a1, (uint64_t)&v70, 0, a1->n128_i32[1]);
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v29 + 80)
                  + 16
                  * *(__int16 *)(**(_QWORD **)(*(_QWORD *)(v29 + 16) + 88)
                               + 2 * (*(_DWORD *)(v29 + 52) + DWORD2(v70)))
                  + 8) = *(_DWORD *)(v29 + 32);
      }
      else
      {
        v70 = 0uLL;
        *(_QWORD *)&v71 = 0;
        v62 = str_checkname(a1);
        new_localvar(a1, v62);
        v63 = a1[1].n128_u32[0];
        v64 = 1;
        while (v63 == 44)
        {
          luaX_next(a1);
          v65 = str_checkname(a1);
          new_localvar(a1, v65);
          ++v64;
          v63 = a1[1].n128_u32[0];
        }
        if (v63 == 61)
        {
          luaX_next(a1);
          v68 = explist(a1, &v70);
        }
        else
        {
          v68 = 0;
          LODWORD(v70) = 0;
        }
        adjust_assign((uint64_t)a1, v64, v68, &v70);
        adjustlocalvars((uint64_t)a1, v64);
      }
      goto LABEL_91;
    case 0x111u:
      v13 = a1[3].n128_i64[0];
      v31 = luaK_getlabel(v13);
      *(_QWORD *)&v71 = 0x10000;
      v74 = 0;
      LOBYTE(v71) = *(_BYTE *)(v13 + 58);
      v32 = *(_QWORD *)(v13 + 24);
      *((_QWORD *)&v70 + 1) = __PAIR64__(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 16) + 88) + 24), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 16) + 88) + 40));
      *(_QWORD *)&v70 = v32;
      LOBYTE(v74) = v71;
      v73 = *((_QWORD *)&v70 + 1);
      v72 = &v70;
      *(_QWORD *)(v13 + 24) = &v72;
      *(_QWORD *)&v33 = luaX_next(a1).n128_u64[0];
      statlist(a1, v33);
      check_match(a1, 277, 273, v2);
      v34 = cond(a1);
      if (BYTE1(v74))
        luaK_patchclose(v13, v34, v74);
      leaveblock(v13);
      luaK_patchlist(v13, v34, v31);
LABEL_85:
      leaveblock(v13);
      goto LABEL_91;
    case 0x112u:
      luaX_next(a1);
      v9 = 0;
      v10 = (unsigned __int8 *)a1[3].n128_u64[0];
      v70 = 0uLL;
      *(_QWORD *)&v71 = 0;
      v11 = a1[1].n128_u32[0];
      if (v11 - 260 <= 0x1D && ((1 << (v11 - 4)) & 0x20020007) != 0)
      {
        v12 = 0;
      }
      else
      {
        v12 = 0;
        if (v11 != 59)
        {
          v12 = explist(a1, &v70);
          if ((v70 - 13) > 1)
          {
            if (v12 == 1)
            {
              v9 = luaK_exp2anyreg((uint64_t)v10, &v70);
            }
            else
            {
              luaK_exp2nextreg((uint64_t)v10, &v70);
              v9 = v10[58];
            }
          }
          else
          {
            luaK_setreturns(v10, &v70, -1);
            if ((_DWORD)v70 == 13 && v12 == 1)
              *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v10 + 56) + 4 * SDWORD2(v70)) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v10 + 56)
                                                                                               + 4 * SDWORD2(v70)) & 0xFFFFFFC0 | 0x25;
            v9 = v10[58];
            v12 = -1;
          }
        }
      }
      luaK_ret((uint64_t)v10, v9, v12);
      if (a1[1].n128_u32[0] == 59)
        goto LABEL_12;
      goto LABEL_91;
    case 0x116u:
      v35 = a1[3].n128_i64[0];
      *(_QWORD *)&v71 = 0x10000;
      luaX_next(a1);
      v36 = luaK_getlabel(v35);
      v37 = cond(a1);
      LOBYTE(v71) = *(_BYTE *)(v35 + 58);
      v38 = *(_QWORD *)(v35 + 24);
      *((_QWORD *)&v70 + 1) = __PAIR64__(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 16) + 88) + 24), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 16) + 88) + 40));
      *(_QWORD *)&v70 = v38;
      *(_QWORD *)(v35 + 24) = &v70;
      checknext(a1, 259);
      block((uint64_t)a1);
      v39 = luaK_jump(v35);
      luaK_patchlist(v35, v39, v36);
      check_match(a1, 262, 278, v2);
      leaveblock(v35);
      v28 = v35;
      v27 = v37;
      goto LABEL_47;
    default:
      if (v5 == 288)
      {
        luaX_next(a1);
        v41 = str_checkname(a1);
        v42 = a1[3].n128_u64[0];
        v43 = a1[5].n128_u64[1];
        v44 = (uint64_t *)(v43 + 32);
        v45 = *(int *)(*(_QWORD *)(v42 + 24) + 8);
        v46 = *(_DWORD *)(v43 + 40);
        if ((int)v45 < v46)
        {
          v47 = 24 * v45;
          do
          {
            if (*(_QWORD *)(*v44 + v47) == v41)
            {
              v48 = (const char *)luaO_pushfstring(*(_QWORD *)(*(_QWORD *)(v42 + 16) + 56), "label '%s' already defined on line %d", (const char *)(v41 + 24), *(_DWORD *)(*v44 + v47 + 12));
              v49 = *(_QWORD *)(v42 + 16);
              *(_DWORD *)(v49 + 16) = 0;
              luaX_syntaxerror(v49, v48);
              v46 = *(_DWORD *)(v43 + 40);
            }
            ++v45;
            v47 += 24;
          }
          while (v45 < v46);
        }
        checknext(a1, 288);
        v50 = newlabelentry((uint64_t)a1, v43 + 32, v41, v2, *(_DWORD *)(v42 + 32));
        while (1)
        {
          v51 = a1[1].n128_i32[0];
          if (v51 > 287)
          {
            if (v51 != 288)
            {
              if (v51 != 289)
              {
LABEL_87:
                v52 = *v44;
                v53 = v50;
                goto LABEL_88;
              }
LABEL_62:
              v52 = *v44;
              v53 = v50;
              *(_BYTE *)(*v44 + 24 * v50 + 16) = *(_BYTE *)(*(_QWORD *)(v42 + 24) + 16);
LABEL_88:
              findgotos((uint64_t *)a1, (_QWORD *)(v52 + 24 * v53));
              goto LABEL_91;
            }
          }
          else if (v51 != 59)
          {
            if ((v51 - 260) >= 3)
              goto LABEL_87;
            goto LABEL_62;
          }
          statement(a1);
        }
      }
      if (v5 == 59)
      {
LABEL_12:
        luaX_next(a1);
      }
      else
      {
LABEL_5:
        v7 = a1[3].n128_u64[0];
        v70 = 0u;
        v71 = 0u;
        suffixedexp(a1, (_DWORD *)&v70 + 2);
        v8 = a1[1].n128_u32[0];
        if (v8 == 61 || v8 == 44)
        {
          *(_QWORD *)&v70 = 0;
          assignment(a1, (uint64_t *)&v70, 1);
        }
        else
        {
          if (DWORD2(v70) != 13)
            luaX_syntaxerror((uint64_t)a1, "syntax error");
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 56) + 4 * (int)v71) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 56)
                                                                                      + 4 * (int)v71) & 0xFF803FFF | 0x4000;
        }
      }
LABEL_91:
      *(_BYTE *)(a1[3].n128_u64[0] + 60) = *(_BYTE *)(a1[3].n128_u64[0] + 58);
      --*(_WORD *)(a1[3].n128_u64[1] + 198);
      return;
  }
}

uint64_t block(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 48);
  v9 = 0;
  LOBYTE(v9) = *(_BYTE *)(v1 + 58);
  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 88);
  v4 = *(_DWORD *)(v3 + 40);
  LODWORD(v3) = *(_DWORD *)(v3 + 24);
  v7 = v4;
  v8 = v3;
  v6 = v2;
  *(_QWORD *)(v1 + 24) = &v6;
  statlist();
  return leaveblock(v1);
}

void check_match(__n128 *a1, int a2, int a3, int a4)
{
  uint64_t v7;
  char *v8;
  char *v9;
  const char *v10;

  if (a1[1].n128_u32[0] == a2)
  {
    luaX_next(a1);
  }
  else if (a1->n128_u32[1] == a4)
  {
    error_expected((uint64_t)a1, a2);
  }
  else
  {
    v7 = a1[3].n128_i64[1];
    v8 = luaX_token2str((uint64_t)a1, a2);
    v9 = luaX_token2str((uint64_t)a1, a3);
    v10 = (const char *)luaO_pushfstring(v7, "%s expected (to close %s at line %d)", v8, v9, a4);
    luaX_syntaxerror((uint64_t)a1, v10);
  }
}

unint64_t str_checkname(__n128 *a1)
{
  unint64_t v2;

  if (a1[1].n128_u32[0] != 292)
    error_expected((uint64_t)a1, 292);
  v2 = a1[1].n128_u64[1];
  luaX_next(a1);
  return v2;
}

uint64_t gotostat(uint64_t a1, int a2)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;

  v4 = *(_DWORD *)(a1 + 4);
  v5 = *(_DWORD *)(a1 + 16);
  luaX_next((__n128 *)a1);
  if (v5 == 266)
    v6 = str_checkname((__n128 *)a1);
  else
    v6 = luaS_new(*(_QWORD **)(a1 + 56), "break");
  v7 = newlabelentry(a1, *(_QWORD *)(a1 + 88) + 16, v6, v4, a2);
  return findlabel(a1, v7);
}

double checknext(__n128 *a1, int a2)
{
  double result;

  if (a1[1].n128_u32[0] != a2)
    error_expected((uint64_t)a1, a2);
  *(_QWORD *)&result = luaX_next(a1).n128_u64[0];
  return result;
}

uint64_t leaveblock(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  const char *v29;

  v1 = result;
  v2 = *(_QWORD *)(result + 16);
  v3 = *(uint64_t **)(result + 24);
  if (*v3 && *((_BYTE *)v3 + 17))
  {
    v4 = luaK_jump(result);
    luaK_patchclose(v1, v4, *((unsigned __int8 *)v3 + 16));
    result = (uint64_t)luaK_patchtohere(v1, v4);
  }
  if (*((_BYTE *)v3 + 18))
  {
    v5 = luaS_new(*(_QWORD **)(v2 + 56), "break");
    v6 = newlabelentry(v2, *(_QWORD *)(v2 + 88) + 32, v5, 0, *(_DWORD *)(*(_QWORD *)(v2 + 48) + 32));
    result = (uint64_t)findgotos((uint64_t *)v2, (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 88) + 32) + 24 * v6));
  }
  v7 = *v3;
  *(_QWORD *)(v1 + 24) = *v3;
  v8 = *((unsigned __int8 *)v3 + 16);
  v9 = *(unsigned __int8 *)(v1 + 58);
  v10 = *(uint64_t **)(*(_QWORD *)(v1 + 16) + 88);
  *((_DWORD *)v10 + 2) += v8 - v9;
  if (v8 < v9)
  {
    v11 = *(_DWORD *)(v1 + 32);
    v12 = *v10;
    v13 = *(_QWORD *)(*(_QWORD *)v1 + 80);
    v14 = v9 - 1;
    v15 = *(_DWORD *)(v1 + 52) + v14;
    do
      *(_DWORD *)(v13 + 16 * *(__int16 *)(v12 + 2 * v15--) + 12) = v11;
    while (v8 < v14--);
    *(_BYTE *)(v1 + 58) = v8;
    LOBYTE(v9) = v8;
  }
  *(_BYTE *)(v1 + 60) = v9;
  v17 = *(_QWORD *)(v2 + 88);
  v18 = *((_DWORD *)v3 + 3);
  *(_DWORD *)(v17 + 40) = *((_DWORD *)v3 + 2);
  if (v7)
  {
    while (v18 < *((_DWORD *)v10 + 6))
    {
      v19 = v10[2];
      v20 = v18;
      v21 = v19 + 24 * v18;
      v23 = *(unsigned __int8 *)(v21 + 16);
      v22 = (_BYTE *)(v21 + 16);
      v24 = *((unsigned __int8 *)v3 + 16);
      if (v23 > v24)
      {
        if (*((_BYTE *)v3 + 17))
        {
          luaK_patchclose(v1, *(_DWORD *)(v19 + 24 * v18 + 8), v24);
          LOBYTE(v24) = *((_BYTE *)v3 + 16);
        }
        *v22 = v24;
      }
      result = findlabel(*(_QWORD *)(v1 + 16), v20);
      if ((_DWORD)result)
        v18 = v20;
      else
        v18 = v20 + 1;
    }
  }
  else if (v18 < *(_DWORD *)(v17 + 24))
  {
    v25 = v18;
    v26 = *(_QWORD *)(v17 + 16);
    v27 = *(_QWORD *)(v26 + 24 * v25);
    v28 = "no visible label '%s' for <goto> at line %d";
    if (*(_BYTE *)(v27 + 8) == 4 && *(_BYTE *)(v27 + 10))
      v28 = "<%s> at line %d not inside a loop";
    v29 = (const char *)luaO_pushfstring(*(_QWORD *)(v2 + 56), v28, v27 + 24, *(unsigned int *)(v26 + 24 * v25 + 12));
    *(_DWORD *)(v2 + 16) = 0;
    return luaX_syntaxerror(v2, v29);
  }
  return result;
}

uint64_t subexpr(__n128 *a1, int32x2_t *a2, int a3)
{
  unint64_t v6;
  unsigned __int16 v7;
  int v8;
  __int32 v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD v22[3];

  v6 = a1[3].n128_u64[1];
  v7 = *(_WORD *)(v6 + 198) + 1;
  *(_WORD *)(v6 + 198) = v7;
  checklimit((_QWORD *)a1[3].n128_u64[0], v7, 200, "C levels");
  v8 = a1[1].n128_i32[0];
  if (v8 <= 275)
  {
    if (v8 > 125)
    {
      v11 = 2;
      switch(v8)
      {
        case 263:
          a2[2] = (int32x2_t)-1;
          v12 = 3;
          goto LABEL_31;
        case 264:
        case 266:
        case 267:
        case 268:
        case 269:
          goto LABEL_28;
        case 265:
          luaX_next(a1);
          body(a1, (uint64_t)a2, 0, a1->n128_i32[1]);
          goto LABEL_33;
        case 270:
          a2[2] = (int32x2_t)-1;
          v12 = 1;
          goto LABEL_31;
        case 271:
          goto LABEL_27;
        default:
          if (v8 != 126)
            goto LABEL_28;
          v11 = 1;
          goto LABEL_27;
      }
    }
    switch(v8)
    {
      case '#':
        v11 = 3;
        break;
      case '-':
        v11 = 0;
        break;
      case '{':
        constructor(a1, (uint64_t)a2);
        goto LABEL_33;
      default:
        goto LABEL_28;
    }
LABEL_27:
    v14 = a1->n128_i32[1];
    luaX_next(a1);
    subexpr(a1, a2, 12);
    luaK_prefix(a1[3].n128_i64[0], v11, a2, v14);
    goto LABEL_33;
  }
  if (v8 <= 289)
  {
    if (v8 == 276)
    {
      a2[2] = (int32x2_t)-1;
      v12 = 2;
LABEL_31:
      a2->i32[0] = v12;
      a2[1].i32[0] = 0;
      goto LABEL_32;
    }
    if (v8 == 281)
    {
      v13 = a1[3].n128_i64[0];
      if (!*(_BYTE *)(*(_QWORD *)v13 + 11))
        luaX_syntaxerror((uint64_t)a1, "cannot use '...' outside a vararg function");
      v9 = luaK_codeABC(v13, 45, 0, 1, 0);
      a2[2] = (int32x2_t)-1;
      v10 = 14;
      goto LABEL_19;
    }
LABEL_28:
    suffixedexp(a1, a2);
    goto LABEL_33;
  }
  if (v8 == 290)
  {
    a2[2] = (int32x2_t)-1;
    a2->i32[0] = 5;
    a2[1].i32[0] = 0;
    a2[1] = *(int32x2_t *)&a1[1].n128_i8[8];
    goto LABEL_32;
  }
  if (v8 == 291)
  {
    a2[2] = (int32x2_t)-1;
    a2->i32[0] = 6;
    a2[1].i32[0] = 0;
    a2[1] = *(int32x2_t *)&a1[1].n128_i8[8];
    goto LABEL_32;
  }
  if (v8 != 293)
    goto LABEL_28;
  v9 = luaK_stringK(a1[3].n128_i64[0], a1[1].n128_i64[1]);
  a2[2] = (int32x2_t)-1;
  v10 = 4;
LABEL_19:
  a2->i32[0] = v10;
  a2[1].i32[0] = v9;
LABEL_32:
  luaX_next(a1);
LABEL_33:
  v15 = a1[1].n128_i32[0];
  v16 = 21;
  if (v15 > 125)
  {
    switch(v15)
    {
      case 272:
        v18 = 20;
        break;
      case 273:
      case 274:
      case 275:
      case 276:
      case 277:
      case 278:
      case 281:
        goto LABEL_68;
      case 279:
        v18 = 6;
        break;
      case 280:
        v18 = 12;
        break;
      case 282:
        v18 = 13;
        break;
      case 283:
        v18 = 18;
        break;
      case 284:
        v18 = 15;
        break;
      case 285:
        v18 = 16;
        break;
      case 286:
        v18 = 10;
        break;
      case 287:
        v18 = 11;
        break;
      default:
        if (v15 == 126)
        {
          v18 = 9;
        }
        else
        {
          if (v15 != 257)
            goto LABEL_68;
          v18 = 19;
        }
        break;
    }
  }
  else
  {
    if (v15 <= 59)
    {
      v17 = v15 - 37;
      v18 = 0;
      switch(v17)
      {
        case 0:
          v18 = 3;
          goto LABEL_64;
        case 1:
          v18 = 7;
          goto LABEL_64;
        case 5:
          v18 = 2;
          goto LABEL_64;
        case 6:
          goto LABEL_64;
        case 8:
          v18 = 1;
          goto LABEL_64;
        case 10:
          v18 = 5;
          goto LABEL_64;
        default:
          goto LABEL_68;
      }
      goto LABEL_68;
    }
    if (v15 > 93)
    {
      if (v15 == 94)
      {
        v18 = 4;
      }
      else
      {
        if (v15 != 124)
          goto LABEL_68;
        v18 = 8;
      }
    }
    else if (v15 == 60)
    {
      v18 = 14;
    }
    else
    {
      if (v15 != 62)
        goto LABEL_68;
      v18 = 17;
    }
  }
LABEL_64:
  v16 = v18;
  while (*((unsigned __int8 *)&priority + 2 * v16) > a3)
  {
    memset(v22, 0, sizeof(v22));
    v19 = a1->n128_i32[1];
    luaX_next(a1);
    luaK_infix(a1[3].n128_i64[0], v16, (int *)a2);
    v20 = subexpr(a1, v22, *((unsigned __int8 *)&priority + 2 * v16 + 1));
    luaK_posfix(a1[3].n128_i64[0], v16, a2, (uint64_t)v22, v19);
    v16 = v20;
    if ((_DWORD)v20 == 21)
    {
      v16 = 21;
      break;
    }
  }
LABEL_68:
  --*(_WORD *)(a1[3].n128_u64[1] + 198);
  return v16;
}

uint64_t constructor(__n128 *a1, uint64_t a2)
{
  unsigned __int8 *v4;
  int v5;
  int v6;
  unsigned __int32 v7;
  int v8;
  unsigned __int32 v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t result;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v4 = (unsigned __int8 *)a1[3].n128_u64[0];
  v5 = a1->n128_i32[1];
  v6 = luaK_codeABC((uint64_t)v4, 11, 0, 0, 0);
  v15 = 0u;
  v18 = 0u;
  v17 = a2;
  *(_QWORD *)(a2 + 16) = -1;
  *(_DWORD *)a2 = 12;
  *(_DWORD *)(a2 + 8) = v6;
  v16 = -1;
  DWORD2(v15) = 0;
  luaK_exp2nextreg(a1[3].n128_i64[0], (_DWORD *)a2);
  checknext(a1, 123);
  while (1)
  {
    v7 = a1[1].n128_u32[0];
    if (v7 == 125)
      break;
    if ((_DWORD)v15)
    {
      luaK_exp2nextreg((uint64_t)v4, &v15);
      LODWORD(v15) = 0;
      if (DWORD2(v18) == 50)
      {
        luaK_setlist((uint64_t)v4, *(_DWORD *)(v17 + 8), SDWORD1(v18), 50);
        DWORD2(v18) = 0;
      }
      v7 = a1[1].n128_u32[0];
    }
    if (v7 == 91 || v7 == 292 && (luaX_lookahead((uint64_t)a1), v8 == 61))
      recfield(a1, (uint64_t)&v15);
    else
      listfield((uint64_t)a1, (uint64_t)&v15);
    v9 = a1[1].n128_u32[0];
    if (v9 != 59 && v9 != 44)
      break;
    luaX_next(a1);
  }
  check_match(a1, 125, 123, v5);
  v10 = DWORD2(v18);
  if (DWORD2(v18))
  {
    if ((v15 - 13) >= 2)
    {
      if ((_DWORD)v15)
      {
        luaK_exp2nextreg((uint64_t)v4, &v15);
        v10 = DWORD2(v18);
      }
      luaK_setlist((uint64_t)v4, *(_DWORD *)(v17 + 8), SDWORD1(v18), v10);
    }
    else
    {
      luaK_setreturns(v4, &v15, -1);
      luaK_setlist((uint64_t)v4, *(_DWORD *)(v17 + 8), SDWORD1(v18), -1);
      --DWORD1(v18);
    }
  }
  v11 = *(_QWORD *)(*(_QWORD *)v4 + 56);
  v12 = *(_DWORD *)(v11 + 4 * v6);
  v13 = v12 & 0x7FFFFF | ((unsigned __int16)luaO_int2fb(DWORD1(v18)) << 23);
  *(_DWORD *)(v11 + 4 * v6) = v13;
  result = luaO_int2fb(v18);
  *(_DWORD *)(v11 + 4 * v6) = v13 & 0xFF803FFF | ((result & 0x1FF) << 14);
  return result;
}

uint64_t body(__n128 *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned __int32 v24;
  int v25;
  double v26;
  uint64_t v27;
  int v28;
  unint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  _QWORD v35[7];
  uint64_t v36;

  v36 = 0;
  memset(&v35[3], 0, 32);
  v34 = 0;
  v9 = (_DWORD *)a1[3].n128_u64[0];
  v8 = a1[3].n128_i64[1];
  v10 = *(_QWORD *)v9;
  v11 = *(int *)(*(_QWORD *)v9 + 32);
  if (v9[12] >= (int)v11)
  {
    *(_QWORD *)(v10 + 64) = luaM_growaux_((_QWORD *)a1[3].n128_u64[1], *(_QWORD *)(v10 + 64), (int *)(*(_QWORD *)v9 + 32), 8, 0x3FFFF, "functions");
    v12 = *(int *)(v10 + 32);
    if ((int)v11 < (int)v12)
    {
      do
        *(_QWORD *)(*(_QWORD *)(v10 + 64) + 8 * v11++) = 0;
      while (v12 != v11);
    }
  }
  luaF_newproto(v8);
  v14 = v13;
  v15 = *(_QWORD *)(v10 + 64);
  v16 = (int)v9[12];
  v9[12] = v16 + 1;
  *(_QWORD *)(v15 + 8 * v16) = v13;
  if ((*(_BYTE *)(v10 + 9) & 4) != 0 && (*(_BYTE *)(v13 + 9) & 3) != 0)
    luaC_barrier_(v8, v10, v13);
  *(_DWORD *)(v14 + 40) = a4;
  v17 = a1[3].n128_u64[0];
  v35[0] = v14;
  v35[1] = v17;
  v35[2] = a1;
  a1[3].n128_u64[0] = (unint64_t)v35;
  *(_OWORD *)&v35[4] = xmmword_1DEC64BE0;
  LODWORD(v35[6]) = 0;
  LODWORD(v36) = 0;
  BYTE4(v36) = 0;
  v18 = (_DWORD *)a1[5].n128_u64[1];
  v19 = a1[6].n128_u64[0];
  HIDWORD(v35[6]) = v18[2];
  *(_QWORD *)(v14 + 104) = v19;
  *(_BYTE *)(v14 + 12) = 2;
  BYTE2(v34) = 0;
  LOWORD(v34) = 0;
  LODWORD(v19) = v18[10];
  LODWORD(v18) = v18[6];
  v32 = v19;
  v33 = (int)v18;
  v31 = 0;
  v35[3] = &v31;
  checknext(a1, 40);
  if (a3)
  {
    v20 = luaX_newstring((uint64_t)a1, "self", 4uLL);
    new_localvar(a1, v20);
    adjustlocalvars((uint64_t)a1, 1u);
  }
  v21 = 0;
  v22 = (unsigned __int8 *)a1[3].n128_u64[0];
  v23 = *(_QWORD *)v22;
  *(_BYTE *)(*(_QWORD *)v22 + 11) = 0;
  v24 = a1[1].n128_u32[0];
  if (v24 != 41)
  {
    v21 = 0;
    while (1)
    {
      if (v24 == 292)
      {
        v30 = str_checkname(a1);
        new_localvar(a1, v30);
        ++v21;
      }
      else
      {
        if (v24 == 281)
        {
          luaX_next(a1);
          *(_BYTE *)(v23 + 11) = 1;
          break;
        }
        luaX_syntaxerror((uint64_t)a1, "<name> or '...' expected");
      }
      if (*(_BYTE *)(v23 + 11) || a1[1].n128_u32[0] != 44)
        break;
      luaX_next(a1);
      v24 = a1[1].n128_u32[0];
    }
  }
  adjustlocalvars((uint64_t)a1, v21);
  v25 = v22[58];
  *(_BYTE *)(v23 + 10) = v25;
  luaK_reserveregs((uint64_t)v22, v25);
  v26 = checknext(a1, 41);
  statlist(a1, v26);
  *(_DWORD *)(v35[0] + 44) = a1->n128_u32[1];
  check_match(a1, 262, 265, a4);
  v27 = *(_QWORD *)(a1[3].n128_u64[0] + 8);
  v28 = luaK_codeABx(v27, 44, 0, *(_DWORD *)(v27 + 48) - 1);
  *(_QWORD *)(a2 + 16) = -1;
  *(_DWORD *)a2 = 12;
  *(_DWORD *)(a2 + 8) = v28;
  luaK_exp2nextreg(v27, (_DWORD *)a2);
  return close_func((uint64_t)a1);
}

uint64_t suffixedexp(__n128 *a1, _DWORD *a2)
{
  uint64_t v4;
  int v5;
  unsigned __int32 v6;
  uint64_t result;
  int v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a1[3].n128_i64[0];
  v5 = a1->n128_i32[1];
  v6 = a1[1].n128_u32[0];
  if (v6 == 292)
  {
    result = singlevar(a1, (uint64_t)a2);
  }
  else if (v6 == 40)
  {
    luaX_next(a1);
    subexpr(a1, a2, 0);
    check_match(a1, 41, 40, v5);
    result = luaK_dischargevars(a1[3].n128_i64[0], (uint64_t)a2);
  }
  else
  {
    result = luaX_syntaxerror((uint64_t)a1, "unexpected symbol");
  }
  while (1)
  {
    while (1)
    {
      v8 = a1[1].n128_i32[0];
      if (v8 > 90)
        break;
      switch(v8)
      {
        case '(':
          goto LABEL_14;
        case '.':
          result = fieldsel(a1, a2);
          break;
        case ':':
          v11 = 0;
          v12 = 0;
          v13 = 0;
          luaX_next(a1);
          v9 = str_checkname(a1);
          v10 = luaK_stringK(a1[3].n128_i64[0], v9);
          v13 = -1;
          LODWORD(v11) = 4;
          LODWORD(v12) = v10;
          luaK_self(v4, a2, &v11);
LABEL_15:
          result = (uint64_t)funcargs(a1, (uint64_t)a2, v5);
          break;
        default:
          return result;
      }
    }
    if (v8 != 91)
      break;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    luaK_exp2anyregup(v4, a2);
    yindex(a1, (uint64_t)&v11);
    result = luaK_indexed(v4, (uint64_t)a2, &v11);
  }
  if (v8 == 123 || v8 == 293)
  {
LABEL_14:
    luaK_exp2nextreg(v4, a2);
    goto LABEL_15;
  }
  return result;
}

int32x2_t listfield(uint64_t a1, uint64_t a2)
{
  int32x2_t result;

  subexpr(a1, a2, 0);
  checklimit(*(_QWORD **)(a1 + 48), *(_DWORD *)(a2 + 36), 0x7FFFFFFF, "items in a constructor");
  result = vadd_s32(*(int32x2_t *)(a2 + 36), (int32x2_t)0x100000001);
  *(int32x2_t *)(a2 + 36) = result;
  return result;
}

uint64_t recfield(__n128 *a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  unint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t result;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a1[3].n128_i64[0];
  v5 = *(_BYTE *)(v4 + 60);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  memset(v12, 0, sizeof(v12));
  if (a1[1].n128_u32[0] == 292)
  {
    checklimit((_QWORD *)v4, *(_DWORD *)(a2 + 32), 0x7FFFFFFF, "items in a constructor");
    v6 = str_checkname(a1);
    v7 = luaK_stringK(a1[3].n128_i64[0], v6);
    v15 = -1;
    LODWORD(v13) = 4;
    LODWORD(v14) = v7;
  }
  else
  {
    yindex(a1, (uint64_t)&v13);
  }
  ++*(_DWORD *)(a2 + 32);
  checknext(a1, 61);
  v8 = luaK_exp2RK(v4, &v13);
  subexpr(a1, v12, 0);
  v9 = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 8);
  v10 = luaK_exp2RK(v4, v12);
  result = luaK_codeABC(v4, 10, v9, v8, v10);
  *(_BYTE *)(v4 + 60) = v5;
  return result;
}

double yindex(__n128 *a1, uint64_t a2)
{
  luaX_next(a1);
  subexpr(a1, a2, 0);
  luaK_exp2val(a1[3].n128_i64[0], a2);
  return checknext(a1, 93);
}

uint64_t adjustlocalvars(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v2 = *(_QWORD *)(result + 48);
  v3 = *(_BYTE *)(v2 + 58) + a2;
  *(_BYTE *)(v2 + 58) = v3;
  if (a2)
  {
    v4 = *(_DWORD *)(v2 + 32);
    v5 = **(_QWORD **)(*(_QWORD *)(v2 + 16) + 88);
    v6 = *(_DWORD *)(v2 + 52);
    v7 = *(_QWORD *)(*(_QWORD *)v2 + 80);
    v8 = v6 + v3 - a2;
    v9 = a2 - 1;
    do
      *(_DWORD *)(v7 + 16 * *(__int16 *)(v5 + 2 * (int)v8++) + 8) = v4;
    while ((_DWORD)v9--);
  }
  return result;
}

uint64_t new_localvar(_QWORD *a1, uint64_t a2)
{
  __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  uint64_t result;
  int v14;
  uint64_t v15;

  v4 = (__int16 *)a1[6];
  v5 = a1[11];
  v6 = *(_QWORD *)v4;
  v7 = *(int *)(*(_QWORD *)v4 + 36);
  if ((int)v7 <= v4[28])
  {
    v8 = luaM_growaux_((_QWORD *)a1[7], *(_QWORD *)(v6 + 80), (int *)(*(_QWORD *)v4 + 36), 16, 0x7FFF, "local variables");
    *(_QWORD *)(v6 + 80) = v8;
    v9 = *(int *)(v6 + 36);
    if ((int)v7 < (int)v9)
    {
      v10 = 16 * v7;
      v11 = v9 - v7;
      do
      {
        *(_QWORD *)(v8 + v10) = 0;
        v10 += 16;
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    v8 = *(_QWORD *)(v6 + 80);
  }
  v12 = v4[28];
  *(_QWORD *)(v8 + 16 * v12) = a2;
  if ((*(_BYTE *)(v6 + 9) & 4) != 0 && (*(_BYTE *)(a2 + 9) & 3) != 0)
  {
    luaC_barrier_(a1[7], v6, a2);
    v12 = v4[28];
  }
  v4[28] = v12 + 1;
  result = (uint64_t)checklimit(v4, *(_DWORD *)(v5 + 8) - *((_DWORD *)v4 + 13) + 1, 200, "local variables");
  v14 = *(_DWORD *)(v5 + 8);
  v15 = *(_QWORD *)v5;
  if (v14 + 2 > *(_DWORD *)(v5 + 12))
  {
    result = luaM_growaux_((_QWORD *)a1[7], v15, (int *)(v5 + 12), 2, 0x7FFFFFFF, "local variables");
    v15 = result;
    *(_QWORD *)v5 = result;
    v14 = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(v5 + 8) = v14 + 1;
  *(_WORD *)(v15 + 2 * v14) = v12;
  return result;
}

uint64_t fieldsel(__n128 *a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a1[3].n128_i64[0];
  v8 = 0;
  v9 = 0;
  luaK_exp2anyregup(v4, a2);
  luaX_next(a1);
  v5 = str_checkname(a1);
  v6 = luaK_stringK(a1[3].n128_i64[0], v5);
  v10 = -1;
  LODWORD(v8) = 4;
  LODWORD(v9) = v6;
  return luaK_indexed(v4, (uint64_t)a2, &v8);
}

int *funcargs(__n128 *a1, uint64_t a2, int a3)
{
  unsigned __int8 *v6;
  unsigned __int32 v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = (unsigned __int8 *)a1[3].n128_u64[0];
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v7 = a1[1].n128_u32[0];
  switch(v7)
  {
    case 0x125u:
      v8 = luaK_stringK((uint64_t)v6, a1[1].n128_i64[1]);
      v15 = -1;
      LODWORD(v13) = 4;
      LODWORD(v14) = v8;
      luaX_next(a1);
      v9 = *(_DWORD *)(a2 + 8);
LABEL_14:
      luaK_exp2nextreg((uint64_t)v6, &v13);
      goto LABEL_15;
    case 0x7Bu:
      constructor(a1, (uint64_t)&v13);
      break;
    case 0x28u:
      luaX_next(a1);
      if (a1[1].n128_u32[0] == 41)
      {
        LODWORD(v13) = 0;
      }
      else
      {
        explist(a1, &v13);
        luaK_setreturns(v6, &v13, -1);
      }
      check_match(a1, 41, 40, a3);
      break;
    default:
      luaX_syntaxerror((uint64_t)a1, "function arguments expected");
      v9 = *(_DWORD *)(a2 + 8);
      goto LABEL_15;
  }
  v9 = *(_DWORD *)(a2 + 8);
  if ((v13 - 13) >= 2)
  {
    if ((_DWORD)v13)
      goto LABEL_14;
LABEL_15:
    v10 = v6[60] - v9;
    goto LABEL_16;
  }
  v10 = 0;
LABEL_16:
  v11 = luaK_codeABC((uint64_t)v6, 36, v9, v10, 2);
  *(_QWORD *)(a2 + 16) = -1;
  *(_DWORD *)a2 = 13;
  *(_DWORD *)(a2 + 8) = v11;
  result = luaK_fixline((int *)v6, a3);
  v6[60] = v9 + 1;
  return result;
}

uint64_t singlevar(__n128 *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = str_checkname(a1);
  v5 = a1[3].n128_i64[0];
  result = singlevaraux(v5, v4, a2, 1);
  if (!(_DWORD)result)
  {
    v8 = 0;
    v9 = 0;
    singlevaraux(v5, a1[6].n128_i64[1], a2, 1);
    v7 = luaK_stringK(a1[3].n128_i64[0], v4);
    v10 = -1;
    LODWORD(v8) = 4;
    LODWORD(v9) = v7;
    return luaK_indexed(v5, a2, &v8);
  }
  return result;
}

uint64_t singlevaraux(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  if (!a1)
    return 0;
  v7 = *(unsigned __int8 *)(a1 + 58);
  do
  {
    v8 = __OFSUB__(v7--, 1);
    if (v7 < 0 != v8)
    {
      v12 = *(unsigned __int8 *)(a1 + 59);
      if (!*(_BYTE *)(a1 + 59))
        goto LABEL_16;
      v13 = 0;
      v14 = *(_QWORD **)(*(_QWORD *)a1 + 88);
      while (*v14 != a2)
      {
        ++v13;
        v14 += 2;
        if (v12 == v13)
          goto LABEL_16;
      }
      if ((v13 & 0x80000000) != 0)
      {
LABEL_16:
        if (!singlevaraux(*(_QWORD *)(a1 + 8), a2, a3, 0))
          return 0;
        LODWORD(v13) = newupvalue(a1, a2, (_DWORD *)a3);
      }
      *(_QWORD *)(a3 + 16) = -1;
      v9 = 9;
      *(_DWORD *)a3 = 9;
      *(_DWORD *)(a3 + 8) = v13;
      return v9;
    }
  }
  while (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 80)
                    + 16
                    * *(__int16 *)(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 88) + 2 * (v7 + *(_DWORD *)(a1 + 52)))) != a2);
  *(_QWORD *)(a3 + 16) = -1;
  v9 = 8;
  *(_DWORD *)a3 = 8;
  *(_DWORD *)(a3 + 8) = v7;
  if (!a4)
  {
    v10 = v7 + 1;
    v11 = a1 + 24;
    do
      v11 = *(_QWORD *)v11;
    while (v10 <= *(unsigned __int8 *)(v11 + 16));
    *(_BYTE *)(v11 + 17) = 1;
    return 8;
  }
  return v9;
}

uint64_t explist(__n128 *a1, _DWORD *a2)
{
  unsigned __int32 v4;
  uint64_t v5;

  subexpr(a1, a2, 0);
  v4 = a1[1].n128_u32[0];
  v5 = 1;
  while (v4 == 44)
  {
    luaX_next(a1);
    luaK_exp2nextreg(a1[3].n128_i64[0], a2);
    subexpr(a1, a2, 0);
    v5 = (v5 + 1);
    v4 = a1[1].n128_u32[0];
  }
  return v5;
}

uint64_t newlabelentry(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v10 = *(int *)(a2 + 8);
  v11 = (int *)(a2 + 12);
  v12 = *(_DWORD *)(a2 + 12);
  v13 = *(_QWORD *)a2;
  if ((int)v10 >= v12)
  {
    v13 = luaM_growaux_(*(_QWORD **)(a1 + 56), v13, v11, 24, 0x7FFF, "labels/gotos");
    *(_QWORD *)a2 = v13;
  }
  v14 = v13 + 24 * (int)v10;
  *(_QWORD *)v14 = a3;
  *(_BYTE *)(v14 + 16) = *(_BYTE *)(*(_QWORD *)(a1 + 48) + 58);
  *(_DWORD *)(v14 + 8) = a5;
  *(_DWORD *)(v14 + 12) = a4;
  *(_DWORD *)(a2 + 8) = v10 + 1;
  return v10;
}

uint64_t *findgotos(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v6;

  v2 = result[11];
  v3 = *(_DWORD *)(*(_QWORD *)(result[6] + 24) + 12);
  v4 = *(_DWORD *)(v2 + 24);
  if (v3 < v4)
  {
    v6 = (uint64_t)result;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(v2 + 16) + 24 * v3) == *a2)
      {
        result = closegoto(v6, v3, (uint64_t)a2);
        v4 = *(_DWORD *)(v2 + 24);
      }
      else
      {
        ++v3;
      }
    }
    while (v3 < v4);
  }
  return result;
}

uint64_t *closegoto(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  const char *v11;
  uint64_t *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(v6 + 16);
  v8 = a2;
  v9 = *(unsigned __int8 *)(v7 + 24 * a2 + 16);
  if (v9 < *(unsigned __int8 *)(a3 + 16))
  {
    v11 = (const char *)luaO_pushfstring(*(_QWORD *)(a1 + 56), "<goto %s> at line %d jumps into the scope of local '%s'", (const char *)(*(_QWORD *)(v7 + 24 * a2) + 24), *(_DWORD *)(v7 + 24 * a2 + 12), (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 80)+ 16* *(__int16 *)(**(_QWORD **)(*(_QWORD *)(v5 + 16) + 88)+ 2 * (int)(*(_DWORD *)(v5 + 52) + v9)))+ 24));
    *(_DWORD *)(a1 + 16) = 0;
    luaX_syntaxerror(a1, v11);
  }
  result = luaK_patchlist(v5, *(_DWORD *)(v7 + 24 * (int)v8 + 8), *(_DWORD *)(a3 + 8));
  LODWORD(v13) = *(_DWORD *)(v6 + 24) - 1;
  if ((int)v13 > a2)
  {
    v14 = 24 * v8;
    do
    {
      v15 = *(_QWORD *)(v6 + 16) + v14;
      ++v8;
      *(_OWORD *)v15 = *(_OWORD *)(v15 + 24);
      *(_QWORD *)(v15 + 16) = *(_QWORD *)(v15 + 40);
      v13 = *(int *)(v6 + 24) - 1;
      v14 += 24;
    }
    while (v8 < v13);
  }
  *(_DWORD *)(v6 + 24) = v13;
  return result;
}

uint64_t findlabel(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(int *)(*(_QWORD *)(v3 + 24) + 8);
  v6 = *(int *)(v4 + 40);
  if ((int)v5 >= (int)v6)
    return 0;
  v8 = *(_QWORD *)(v4 + 16);
  v9 = *(_QWORD *)(v4 + 32) + 24 * (int)v5;
  v10 = v6 - v5;
  while (*(_QWORD *)v9 != *(_QWORD *)(v8 + 24 * a2))
  {
    v9 += 24;
    if (!--v10)
      return 0;
  }
  v12 = *(unsigned __int8 *)(v9 + 16);
  if (*(unsigned __int8 *)(v8 + 24 * a2 + 16) > v12)
    luaK_patchclose(v3, *(_DWORD *)(v8 + 24 * a2 + 8), v12);
  closegoto(a1, a2, v9);
  return 1;
}

uint64_t cond(__n128 *a1)
{
  int32x2_t v3[2];
  uint64_t v4;

  v3[0] = 0;
  v3[1] = 0;
  v4 = 0;
  subexpr(a1, v3, 0);
  if (v3[0].i32[0] == 1)
    v3[0].i32[0] = 3;
  luaK_goiftrue(a1[3].n128_i64[0], (int *)v3);
  return HIDWORD(v4);
}

uint64_t error_expected(uint64_t a1, int a2)
{
  uint64_t v3;
  char *v4;
  const char *v5;

  v3 = *(_QWORD *)(a1 + 56);
  v4 = luaX_token2str(a1, a2);
  v5 = (const char *)luaO_pushfstring(v3, "%s expected", v4);
  return luaX_syntaxerror(a1, v5);
}

int *fornum(__n128 *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int32x2_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a1[3].n128_i64[0];
  v7 = *(unsigned __int8 *)(v6 + 60);
  v8 = luaX_newstring((uint64_t)a1, "(for index)", 0xBuLL);
  new_localvar(a1, v8);
  v9 = luaX_newstring((uint64_t)a1, "(for limit)", 0xBuLL);
  new_localvar(a1, v9);
  v10 = luaX_newstring((uint64_t)a1, "(for step)", 0xAuLL);
  new_localvar(a1, v10);
  new_localvar(a1, a2);
  checknext(a1, 61);
  v14 = 0;
  v15 = 0;
  v16 = 0;
  subexpr(a1, &v14, 0);
  luaK_exp2nextreg(a1[3].n128_i64[0], &v14);
  checknext(a1, 44);
  v14 = 0;
  v15 = 0;
  v16 = 0;
  subexpr(a1, &v14, 0);
  luaK_exp2nextreg(a1[3].n128_i64[0], &v14);
  if (a1[1].n128_u32[0] == 44)
  {
    luaX_next(a1);
    v14 = 0;
    v15 = 0;
    v16 = 0;
    subexpr(a1, &v14, 0);
    luaK_exp2nextreg(a1[3].n128_i64[0], &v14);
  }
  else
  {
    v11 = *(unsigned __int8 *)(v6 + 60);
    v12 = luaK_intK(v6, 1);
    luaK_codek(v6, v11, v12);
    luaK_reserveregs(v6, 1);
  }
  return forbody(a1, v7, a3, 1u, 1);
}

int *forbody(__n128 *a1, int a2, int a3, unsigned int a4, int a5)
{
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;

  v10 = a1[3].n128_i64[0];
  adjustlocalvars((uint64_t)a1, 3u);
  checknext(a1, 259);
  if (a5)
    v11 = luaK_codeABx(v10, 40, a2, 131070);
  else
    v11 = luaK_jump(v10);
  v12 = v11;
  v24 = 0;
  LOBYTE(v24) = *(_BYTE *)(v10 + 58);
  v13 = *(_QWORD *)(v10 + 24);
  v14 = *(_QWORD *)(*(_QWORD *)(v10 + 16) + 88);
  v15 = *(_DWORD *)(v14 + 40);
  LODWORD(v14) = *(_DWORD *)(v14 + 24);
  v22 = v15;
  v23 = v14;
  v21 = v13;
  *(_QWORD *)(v10 + 24) = &v21;
  adjustlocalvars((uint64_t)a1, a4);
  luaK_reserveregs(v10, a4);
  block((uint64_t)a1);
  leaveblock(v10);
  luaK_patchtohere(v10, v12);
  v16 = v10;
  if (a5)
  {
    v17 = 39;
    v18 = a2;
  }
  else
  {
    luaK_codeABC(v10, 41, a2, 0, a4);
    luaK_fixline((int *)v10, a3);
    v18 = a2 + 2;
    v16 = v10;
    v17 = 42;
  }
  v19 = luaK_codeABx(v16, v17, v18, 131070);
  luaK_patchlist(v10, v19, v12 + 1);
  return luaK_fixline((int *)v10, a3);
}

void adjust_assign(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = a2 - a3;
  if ((*a4 - 13) >= 2)
  {
    if (*a4)
      luaK_exp2nextreg(*(_QWORD *)(a1 + 48), a4);
    if (v5 >= 1)
    {
      v6 = *(unsigned __int8 *)(v4 + 60);
      luaK_reserveregs(v4, v5);
      luaK_nil((int *)v4, v6, v5);
    }
  }
  else
  {
    if (v5 < 0)
      v5 = -1;
    luaK_setreturns(*(unsigned __int8 **)(a1 + 48), a4, v5 + 1);
    if (v5 >= 1)
      luaK_reserveregs(v4, v5);
  }
}

void assignment(__n128 *a1, uint64_t *a2, int a3)
{
  uint64_t *v4;
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = a2;
  v6 = (int *)(a2 + 1);
  if ((*((_DWORD *)a2 + 2) - 8) >= 3)
    luaX_syntaxerror((uint64_t)a1, "syntax error");
  v20 = 0;
  v21 = 0;
  v22 = 0;
  if (a1[1].n128_u32[0] == 44)
  {
    luaX_next(a1);
    v18 = 0;
    v19 = 0;
    v16 = v4;
    v17 = 0;
    suffixedexp(a1, &v17);
    v7 = v17;
    if ((_DWORD)v17 != 10)
    {
      v8 = 0;
      v9 = a1[3].n128_i64[0];
      v10 = *(unsigned __int8 *)(v9 + 60);
      do
      {
        while (*((_DWORD *)v4 + 2) == 10)
        {
          if (v7 == *((unsigned __int8 *)v4 + 19) && (_DWORD)v18 == *((unsigned __int8 *)v4 + 18))
          {
            *((_BYTE *)v4 + 19) = 8;
            *((_BYTE *)v4 + 18) = v10;
            v8 = 1;
          }
          if (v7 != 8 || (_DWORD)v18 != *((__int16 *)v4 + 8))
            break;
          *((_WORD *)v4 + 8) = v10;
          v4 = (uint64_t *)*v4;
          v8 = 1;
          if (!v4)
            goto LABEL_16;
        }
        v4 = (uint64_t *)*v4;
      }
      while (v4);
      if (!v8)
        goto LABEL_20;
LABEL_16:
      if (v7 == 8)
        v11 = 0;
      else
        v11 = 5;
      luaK_codeABC(v9, v11, v10, v18, 0);
      luaK_reserveregs(v9, 1);
    }
LABEL_20:
    checklimit((_QWORD *)a1[3].n128_u64[0], *(unsigned __int16 *)(a1[3].n128_u64[1] + 198) + a3, 200, "C levels");
    assignment(a1, &v16, (a3 + 1));
    goto LABEL_25;
  }
  checknext(a1, 61);
  v12 = explist(a1, &v20);
  if (a3 != v12)
  {
    v14 = v12;
    adjust_assign((uint64_t)a1, a3, v12, &v20);
    if (a3 < v14)
      *(_BYTE *)(a1[3].n128_u64[0] + 60) += a3 - v14;
LABEL_25:
    v13 = a1[3].n128_i64[0];
    v15 = *(unsigned __int8 *)(v13 + 60) - 1;
    v22 = -1;
    LODWORD(v20) = 7;
    LODWORD(v21) = v15;
    goto LABEL_26;
  }
  luaK_setoneret(a1[3].n128_i64[0], &v20);
  v13 = a1[3].n128_i64[0];
LABEL_26:
  luaK_storevar(v13, v6, &v20);
}

uint64_t luaE_setdebt(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) += *(_QWORD *)(result + 24) - a2;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t luaE_extendCI(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = luaM_realloc_(a1, 0, 0, 72);
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v3 + 24) = result;
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t luaE_freeCI(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(result + 32);
  v2 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v2)
  {
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v2 + 24);
      result = luaM_realloc_(v3, v2, 72, 0);
      v2 = v4;
    }
    while (v4);
  }
  return result;
}

uint64_t luaE_shrinkCI(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(result + 32);
  v3 = (_QWORD *)(v1 + 24);
  v2 = *(_QWORD *)(v1 + 24);
  if (v2)
  {
    v4 = result;
    do
    {
      v5 = *(_QWORD *)(v2 + 24);
      if (!v5)
        break;
      result = luaM_realloc_(v4, v2, 72, 0);
      *v3 = v5;
      v3 = (_QWORD *)(v5 + 24);
      v2 = *(_QWORD *)(v5 + 24);
      *(_QWORD *)(v5 + 16) = v1;
      v1 = v5;
    }
    while (v2);
  }
  return result;
}

uint64_t lua_newthread(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  if (*(uint64_t *)(v2 + 24) >= 1)
    luaC_step(a1);
  v3 = luaM_realloc_(a1, 0, 8, 216);
  *(_BYTE *)(v3 + 17) = *(_BYTE *)(v2 + 84) & 3;
  *(_BYTE *)(v3 + 16) = 8;
  *(_QWORD *)(v3 + 8) = *(_QWORD *)(v2 + 88);
  v4 = v3 + 8;
  *(_QWORD *)(v2 + 88) = v3 + 8;
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v5 = v3 + 8;
  *(_DWORD *)(v5 + 8) = 72;
  *(_QWORD *)(a1 + 16) += 16;
  *(_QWORD *)(v3 + 32) = v2;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 88) = v3 + 8;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 176) = 0;
  *(_QWORD *)(v3 + 184) = 0;
  *(_WORD *)(v3 + 208) = 256;
  *(_QWORD *)(v3 + 192) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 0;
  *(_DWORD *)(v3 + 204) = 1;
  *(_BYTE *)(v3 + 18) = 0;
  *(_BYTE *)(v3 + 208) = *(_BYTE *)(a1 + 200);
  LODWORD(v5) = *(_DWORD *)(a1 + 188);
  *(_QWORD *)(v3 + 176) = *(_QWORD *)(a1 + 168);
  *(_DWORD *)(v3 + 196) = v5;
  *(_DWORD *)(v3 + 200) = v5;
  *(_QWORD *)v3 = *(_QWORD *)(*(_QWORD *)(v2 + 224) - 8);
  stack_init(v3 + 8, a1);
  return v4;
}

uint64_t stack_init(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t i;
  uint64_t v5;

  result = luaM_realloc_(a2, 0, 0, 640);
  *(_QWORD *)(a1 + 56) = result;
  *(_DWORD *)(a1 + 184) = 40;
  for (i = 8; i != 648; i += 16)
    *(_DWORD *)(result + i) = 0;
  *(_QWORD *)(a1 + 96) = result;
  v5 = a1 + 96;
  *(_QWORD *)(v5 - 48) = result + 560;
  *(_BYTE *)(v5 + 66) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 - 80) = result + 16;
  *(_DWORD *)(result + 8) = 0;
  *(_QWORD *)(v5 + 8) = result + 336;
  *(_QWORD *)(v5 - 64) = v5;
  return result;
}

uint64_t luaE_freethread(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2 - 8;
  luaF_close(a2, *(_QWORD *)(a2 + 56));
  freestack(a2);
  return luaM_realloc_(a1, v4, 216, 0);
}

uint64_t freestack(uint64_t result)
{
  uint64_t v1;

  if (*(_QWORD *)(result + 56))
  {
    v1 = result;
    *(_QWORD *)(result + 32) = result + 96;
    luaE_freeCI(result);
    return luaM_realloc_(v1, *(_QWORD *)(v1 + 56), 16 * *(int *)(v1 + 184), 0);
  }
  return result;
}

uint64_t lua_newstate(uint64_t (*a1)(uint64_t, _QWORD, uint64_t, uint64_t), uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v7;
  _QWORD v8[5];

  v8[4] = *MEMORY[0x1E0C80C00];
  v4 = a1(a2, 0, 8, 1744);
  v5 = v4;
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = v4 + 8;
    *(_BYTE *)(v4 + 16) = 8;
    *(_BYTE *)(v4 + 300) = 1;
    *(_WORD *)(v4 + 17) = 1;
    *(_QWORD *)(v4 + 216) = a1;
    *(_QWORD *)(v4 + 32) = v4 + 216;
    *(_QWORD *)(v4 + 40) = 0;
    *(_QWORD *)(v4 + 88) = v4 + 8;
    *(_QWORD *)(v4 + 96) = 0;
    *(_OWORD *)(v4 + 176) = 0u;
    *(_WORD *)(v4 + 208) = 256;
    *(_QWORD *)(v4 + 192) = 0;
    *(_QWORD *)(v4 + 200) = 0x100000000;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_QWORD *)(v4 + 224) = a2;
    *(_QWORD *)(v4 + 440) = v4 + 8;
    v7 = 1;
    v8[0] = v4 + 8;
    v8[1] = &v7;
    v8[2] = &luaO_nilobject_;
    v8[3] = lua_newstate;
    *(_DWORD *)(v4 + 296) = luaS_hash((uint64_t)v8, 0x20uLL, 1);
    *(_BYTE *)(v5 + 295) = 0;
    *(_DWORD *)(v5 + 280) = 0;
    *(_QWORD *)(v5 + 400) = 0;
    *(_QWORD *)(v5 + 424) = 0;
    *(_QWORD *)(v5 + 440) = 0;
    *(_QWORD *)(v5 + 248) = 0;
    *(_OWORD *)(v5 + 256) = 0u;
    *(_WORD *)(v5 + 293) = 7;
    *(_OWORD *)(v5 + 296) = 0u;
    *(_OWORD *)(v5 + 312) = 0u;
    *(_OWORD *)(v5 + 328) = 0u;
    *(_OWORD *)(v5 + 344) = 0u;
    *(_OWORD *)(v5 + 360) = 0u;
    *(_OWORD *)(v5 + 376) = 0u;
    *(_OWORD *)(v5 + 224) = xmmword_1DEC64C70;
    *(_QWORD *)(v5 + 408) = 0xC800000000;
    *(_DWORD *)(v5 + 416) = 200;
    *(_QWORD *)(v5 + 712) = 0;
    *(_OWORD *)(v5 + 696) = 0u;
    *(_OWORD *)(v5 + 680) = 0u;
    *(_OWORD *)(v5 + 664) = 0u;
    *(_OWORD *)(v5 + 648) = 0u;
    if (luaD_rawrunprotected(v5, (void (*)(uint64_t, uint64_t))f_luaopen, 0))
    {
      close_state(v5);
      return 0;
    }
  }
  return v5;
}

void *f_luaopen(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *result;
  __n128 v5;

  v2 = a1[3];
  stack_init((uint64_t)a1, (uint64_t)a1);
  v5.n128_u64[1] = 72;
  v3 = luaH_new((uint64_t)a1);
  *(_QWORD *)(v2 + 64) = v3;
  *(_DWORD *)(v2 + 72) = 69;
  luaH_resize((uint64_t)a1, v3, 2u, 0);
  v5.n128_u64[0] = (unint64_t)a1;
  luaH_setint((uint64_t)a1, v3, 1, &v5);
  v5.n128_u64[0] = luaH_new((uint64_t)a1);
  v5.n128_u32[2] = 69;
  luaH_setint((uint64_t)a1, v3, 2, &v5);
  luaS_init(a1);
  luaT_init(a1);
  luaX_init(a1);
  *(_BYTE *)(v2 + 87) = 1;
  result = lua_version(0);
  *(_QWORD *)(v2 + 232) = result;
  return result;
}

uint64_t close_state(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  luaF_close(a1, *(_QWORD *)(a1 + 56));
  luaC_freeallobjects(a1);
  luaM_realloc_(a1, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 48), 8 * *(int *)(*(_QWORD *)(a1 + 24) + 60), 0);
  *(_QWORD *)(v2 + 176) = luaM_realloc_(a1, *(_QWORD *)(v2 + 176), *(_QWORD *)(v2 + 192), 0);
  *(_QWORD *)(v2 + 192) = 0;
  freestack(a1);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))v2)(*(_QWORD *)(v2 + 8), a1 - 8, 1744, 0);
}

uint64_t lua_close(uint64_t a1)
{
  return close_state(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 224));
}

BOOL luaS_eqlngstr(uint64_t a1, uint64_t a2)
{
  size_t v2;

  if (a1 == a2)
    return 1;
  v2 = *(_QWORD *)(a1 + 16);
  return v2 == *(_QWORD *)(a2 + 16) && memcmp((const void *)(a1 + 24), (const void *)(a2 + 24), v2) == 0;
}

uint64_t luaS_hash(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  result = a2 ^ a3;
  v5 = a2 >> 5;
  if (a2 >> 5 < a2)
  {
    v6 = ~(a2 >> 5);
    v7 = a1 - 1;
    do
    {
      result = (32 * (_DWORD)result + (result >> 2) + *(unsigned __int8 *)(v7 + a2)) ^ result;
      a2 += v6;
    }
    while (a2 > v5);
  }
  return result;
}

uint64_t luaS_resize(uint64_t result, int a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v3 = result;
  v4 = *(_QWORD *)(result + 24);
  v5 = *(_DWORD *)(v4 + 60);
  v6 = v5;
  if (v5 < a2)
  {
    result = luaM_realloc_(result, *(_QWORD *)(v4 + 48), 8 * v5, 8 * a2);
    *(_QWORD *)(v4 + 48) = result;
    v6 = *(_DWORD *)(v4 + 60);
    if (v6 < a2)
    {
      v7 = v6;
      do
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v7++) = 0;
      while (a2 != v7);
    }
  }
  if (v6 >= 1)
  {
    for (i = 0; i < v6; ++i)
    {
      v9 = *(_QWORD *)(v4 + 48);
      v10 = *(_QWORD *)(v9 + 8 * i);
      *(_QWORD *)(v9 + 8 * i) = 0;
      if (v10)
      {
        do
        {
          v11 = *(_DWORD *)(v10 + 12) & (a2 - 1);
          v12 = *(_QWORD *)(v10 + 16);
          *(_QWORD *)(v10 + 16) = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v11);
          *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v11) = v10;
          v10 = v12;
        }
        while (v12);
        v6 = *(_DWORD *)(v4 + 60);
      }
    }
  }
  if (v6 > a2)
  {
    result = luaM_realloc_(v3, *(_QWORD *)(v4 + 48), 8 * v6, 8 * a2);
    *(_QWORD *)(v4 + 48) = result;
  }
  *(_DWORD *)(v4 + 60) = a2;
  return result;
}

uint64_t luaS_clearcache(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = 0;
  v2 = result + 512;
  do
  {
    if ((*(_BYTE *)(*(_QWORD *)(v2 + v1) + 9) & 3) != 0)
      *(_QWORD *)(v2 + v1) = *(_QWORD *)(result + 240);
    v1 += 8;
  }
  while (v1 != 1016);
  return result;
}

uint64_t luaS_init(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[3];
  luaS_resize((uint64_t)a1, 128);
  v3 = luaS_newlstr(a1, "not enough memory", 0x11uLL);
  *(_QWORD *)(v2 + 240) = v3;
  result = luaC_fix((uint64_t)a1, v3);
  v5 = 0;
  v6 = *(_QWORD *)(v2 + 240);
  do
  {
    *(_QWORD *)(v2 + 512 + v5) = v6;
    v5 += 8;
  }
  while (v5 != 1016);
  return result;
}

uint64_t luaS_newlstr(_QWORD *a1, char *__s1, size_t __n)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v14;

  if (__n > 0x28)
  {
    if (__n - 0x7FFFFFFFFFFFFFE7 < 0x8000000000000018)
      luaM_toobig(a1);
    v12 = *(_DWORD *)(a1[3] + 80);
    v11 = luaC_newobj((uint64_t)a1, 20, __n + 25);
    *(_DWORD *)(v11 + 12) = v12;
    *(_BYTE *)(v11 + 10) = 0;
    memcpy((void *)(v11 + 24), __s1, __n);
    *(_BYTE *)(v11 + 24 + __n) = 0;
    *(_QWORD *)(v11 + 16) = __n;
  }
  else
  {
    v6 = a1[3];
    v7 = *(_DWORD *)(v6 + 80) ^ __n;
    if (__n >> 5 < __n)
    {
      v8 = __n;
      do
      {
        v7 ^= 32 * v7 + (v7 >> 2) + __s1[v8 - 1];
        v8 += ~(__n >> 5);
      }
      while (v8 > __n >> 5);
    }
    v9 = *(_DWORD *)(v6 + 60);
    v10 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 8 * (int)((v9 - 1) & v7));
    v11 = *v10;
    if (*v10)
    {
      while (*(unsigned __int8 *)(v11 + 11) != __n || memcmp(__s1, (const void *)(v11 + 24), __n))
      {
        v11 = *(_QWORD *)(v11 + 16);
        if (!v11)
          goto LABEL_9;
      }
      v14 = *(unsigned __int8 *)(v11 + 9) ^ 3;
      if (((*(unsigned __int8 *)(v6 + 84) ^ 3) & v14) == 0)
        *(_BYTE *)(v11 + 9) = v14;
    }
    else
    {
LABEL_9:
      if (v9 <= 0x3FFFFFFF && *(_DWORD *)(v6 + 56) >= v9)
      {
        luaS_resize((uint64_t)a1, 2 * v9);
        v10 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 8 * (int)((*(_DWORD *)(v6 + 60) - 1) & v7));
      }
      v11 = luaC_newobj((uint64_t)a1, 4, __n + 25);
      *(_DWORD *)(v11 + 12) = v7;
      *(_BYTE *)(v11 + 10) = 0;
      memcpy((void *)(v11 + 24), __s1, __n);
      *(_BYTE *)(v11 + 24 + __n) = 0;
      *(_BYTE *)(v11 + 11) = __n;
      *(_QWORD *)(v11 + 16) = *v10;
      *v10 = v11;
      ++*(_DWORD *)(v6 + 56);
    }
  }
  return v11;
}

uint64_t luaS_remove(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(_QWORD *)(result + 24);
  v3 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * ((*(_DWORD *)(v2 + 60) - 1) & *(_DWORD *)(a2 + 12)));
  do
  {
    v4 = v3;
    v5 = *v3;
    v3 = (_QWORD *)(*v3 + 16);
  }
  while (v5 != a2);
  *v4 = *(_QWORD *)(a2 + 16);
  --*(_DWORD *)(v2 + 56);
  return result;
}

uint64_t luaS_new(_QWORD *a1, char *__s1)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v4 = a1[3] + 8 * (__s1 % 0x7F);
  v5 = *(_QWORD *)(v4 + 512);
  if (strcmp(__s1, (const char *)(v5 + 24)))
  {
    v6 = strlen(__s1);
    v5 = luaS_newlstr(a1, __s1, v6);
    *(_QWORD *)(v4 + 512) = v5;
  }
  return v5;
}

uint64_t luaS_newudata(_QWORD *a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 0x7FFFFFFFFFFFFFD8)
    luaM_toobig(a1);
  result = luaC_newobj((uint64_t)a1, 7, a2 + 40);
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(result + 32) = 0;
  *(_BYTE *)(result + 10) = 0;
  return result;
}

uint64_t luaopen_string(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  luaL_checkversion_(a1, 136, 503.0, a3, a4, a5, a6, a7, a8, v15);
  lua_createtable((uint64_t)a1, 0, 17);
  luaL_setfuncs(a1, (uint64_t)&strlib, 0, v9, v10, v11, v12, v13);
  lua_createtable((uint64_t)a1, 0, 1);
  lua_pushstring(a1, &byte_1DEBD87CE);
  lua_pushvalue(a1, -2);
  lua_setmetatable(a1, -2);
  lua_settop((uint64_t)a1, 0xFFFFFFFE);
  lua_pushvalue(a1, -2);
  lua_setfield(a1, -2, "__index");
  lua_settop((uint64_t)a1, 0xFFFFFFFE);
  return 1;
}

uint64_t str_byte(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t v23;
  unint64_t v24;

  v24 = 0;
  v2 = luaL_checklstring(a1, 1, &v24);
  v3 = luaL_optinteger(a1, 2, 1);
  if (v24 >= -v3)
    v4 = v3 + v24 + 1;
  else
    v4 = 0;
  if (v3 < 0)
    v5 = v4;
  else
    v5 = v3;
  v6 = luaL_optinteger(a1, 3, v5);
  if (v24 >= -v6)
    v13 = v6 + v24 + 1;
  else
    v13 = 0;
  if (v6 >= 0)
    v13 = v6;
  if (v5 <= 1)
    v14 = 1;
  else
    v14 = v5;
  if (v13 >= (uint64_t)v24)
    v15 = v24;
  else
    v15 = v13;
  v16 = v15 - v14;
  if (v15 < v14)
    return 0;
  if (v16 >= 0x7FFFFFFF)
    return luaL_error(a1, "string slice too long", v7, v8, v9, v10, v11, v12, v23);
  v17 = (v16 + 1);
  luaL_checkstack(a1, v16 + 1, (uint64_t)"string slice too long", v8, v9, v10, v11, v12, v23);
  if ((v16 & 0x80000000) == 0)
  {
    v18 = v14 + v2;
    v19 = (v15 - v14 + 1);
    v20 = (unsigned __int8 *)(v18 - 1);
    do
    {
      v21 = *v20++;
      lua_pushinteger((uint64_t)a1, v21);
      --v19;
    }
    while (v19);
  }
  return v17;
}

uint64_t str_char()
{
  _QWORD *v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  _OWORD v14[514];
  uint64_t v15;

  v0 = (_QWORD *)MEMORY[0x1E0C80A78]();
  v15 = *MEMORY[0x1E0C80C00];
  v1 = lua_gettop((uint64_t)v0);
  memset(v14, 0, 512);
  v7 = luaL_buffinitsize((uint64_t)v0, (uint64_t)v14, v1, v2, v3, v4, v5, v6);
  if (v1 >= 1)
  {
    v8 = v7;
    v9 = 0;
    do
    {
      v10 = v9 + 1;
      v11 = luaL_checkinteger(v0, v9 + 1);
      v12 = v11;
      if (v11 >= 0x100)
        luaL_argerror(v0, v9 + 1);
      v8[v9++] = v12;
    }
    while ((v1 + 1) - 1 != v10);
  }
  luaL_pushresultsize((uint64_t)v14, v1);
  return 1;
}

uint64_t str_dump()
{
  _QWORD *v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD v9[514];
  uint64_t v10;

  v0 = (_QWORD *)MEMORY[0x1E0C80A78]();
  v10 = *MEMORY[0x1E0C80C00];
  memset(v9, 0, 512);
  v1 = lua_toBOOLean(v0, 2);
  luaL_checktype(v0, 1, 6);
  lua_settop((uint64_t)v0, 1u);
  luaL_buffinit((uint64_t)v0, (uint64_t)v9);
  if (lua_dump((uint64_t)v0, (uint64_t (*)(void))writer, (uint64_t)v9, v1))
    return luaL_error(v0, "unable to dump given function", v2, v3, v4, v5, v6, v7, *(uint64_t *)&v9[0]);
  luaL_pushresult((uint64_t)v9);
  return 1;
}

uint64_t str_find(_QWORD *a1)
{
  return str_find_aux(a1, 1);
}

uint64_t str_format()
{
  _QWORD *v0;
  int v1;
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  char *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char v25;
  _BYTE *v26;
  int v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  int v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char *v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char __s[32];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  char v110[16];
  uint64_t v111;

  v0 = (_QWORD *)MEMORY[0x1E0C80A78]();
  v111 = *MEMORY[0x1E0C80C00];
  v1 = lua_gettop((uint64_t)v0);
  v75 = 0;
  v2 = (unsigned __int8 *)luaL_checklstring(v0, 1, &v75);
  v3 = v75;
  v108 = 0u;
  v109 = 0u;
  v106 = 0u;
  v107 = 0u;
  v104 = 0u;
  v105 = 0u;
  v102 = 0u;
  v103 = 0u;
  v100 = 0u;
  v101 = 0u;
  v98 = 0u;
  v99 = 0u;
  v96 = 0u;
  v97 = 0u;
  v94 = 0u;
  v95 = 0u;
  v92 = 0u;
  v93 = 0u;
  v90 = 0u;
  v91 = 0u;
  v88 = 0u;
  v89 = 0u;
  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  v85 = 0u;
  v82 = 0u;
  v83 = 0u;
  v80 = 0u;
  v81 = 0u;
  v78 = 0u;
  v79 = 0u;
  luaL_buffinit((uint64_t)v0, (uint64_t)&v78);
  if (v3 < 1)
    goto LABEL_83;
  v10 = &v2[v3];
  v11 = 1;
  while (1)
  {
    v12 = *v2;
    if (v12 != 37)
    {
      v16 = v79;
      if ((unint64_t)v79 >= *((_QWORD *)&v78 + 1))
      {
        luaL_prepbuffsize((const void **)&v78, 1uLL, v4, v5, v6, v7, v8, v9);
        LOBYTE(v12) = *v2;
        v16 = v79;
      }
      ++v2;
      *(_QWORD *)&v79 = v16 + 1;
      *(_BYTE *)(v78 + v16) = v12;
      goto LABEL_19;
    }
    v13 = (char *)(v2 + 1);
    if (v2[1] == 37)
    {
      v14 = v79;
      if ((unint64_t)v79 >= *((_QWORD *)&v78 + 1))
      {
        luaL_prepbuffsize((const void **)&v78, 1uLL, v4, v5, v6, v7, v8, v9);
        v15 = *v13;
        v14 = v79;
      }
      else
      {
        v15 = 37;
      }
      v2 += 2;
      *(_QWORD *)&v79 = v14 + 1;
      *(_BYTE *)(v78 + v14) = v15;
LABEL_19:
      v24 = v11;
      goto LABEL_48;
    }
    v23 = luaL_prepbuffsize((const void **)&v78, 0x1ACuLL, v4, v5, v6, v7, v8, v9);
    v24 = (v11 + 1);
    if ((int)v11 >= v1)
      luaL_argerror(v0, (v11 + 1));
    v25 = *v13;
    if (*v13)
    {
      v26 = v2 + 1;
      do
      {
        if (!memchr("-+ #0", v25, 6uLL))
          break;
        v27 = *++v26;
        v25 = v27;
      }
      while (v27);
    }
    else
    {
      v26 = v2 + 1;
    }
    if ((unint64_t)(v26 - v13) >= 6)
    {
      luaL_error(v0, "invalid format (repeated flags)", v17, v18, v19, v20, v21, v22, v72);
      v25 = *v26;
    }
    if (v25 - 48 >= 0xA)
      v28 = v26;
    else
      v28 = v26 + 1;
    if (*v28 - 48 < 0xA)
      v29 = v28 + 1;
    else
      v29 = v28;
    v30 = *v29;
    if (v30 == 46)
    {
      v31 = v29 + 1;
      v32 = 1;
      if (v29[1] - 48 < 0xA)
      {
        v32 = 2;
        v31 = v29 + 2;
      }
      if (v29[v32] - 48 >= 0xA)
        v29 = v31;
      else
        v29 = v31 + 1;
      v30 = *v29;
    }
    if ((v30 - 48) <= 9)
      luaL_error(v0, "invalid format (width or precision too long)", v17, v18, v19, v20, v21, v22, v72);
    __s[0] = 37;
    __memcpy_chk();
    __s[v29 - (unsigned __int8 *)v13 + 2] = 0;
    v40 = (char)*v29;
    v2 = v29 + 1;
    v39 = v40;
    if (v40 <= 98)
      break;
    switch((int)v39)
    {
      case 'c':
        v74 = luaL_checkinteger(v0, v24);
        v46 = luaI_snprintf((uint64_t)v0, (uint64_t)v23, 428, (unsigned __int8 *)__s, v52, v53, v54, v55, v74);
        goto LABEL_46;
      case 'd':
      case 'i':
      case 'o':
      case 'u':
      case 'x':
        goto LABEL_40;
      case 'e':
      case 'f':
      case 'g':
        goto LABEL_45;
      case 'q':
        v76 = 0;
        v56 = (char *)luaL_checklstring(v0, v24, &v76);
        v57 = v79;
        if ((unint64_t)v79 >= *((_QWORD *)&v78 + 1))
        {
          luaL_prepbuffsize((const void **)&v78, 1uLL, v4, v5, v6, v7, v8, v9);
          v57 = v79;
        }
        *(_QWORD *)&v79 = v57 + 1;
        *(_BYTE *)(v78 + v57) = 34;
        if (!v76--)
          goto LABEL_76;
        break;
      case 's':
        *(_QWORD *)v110 = 0;
        v66 = luaL_tolstring(v0, v24, v110);
        if (strchr(__s, 46) || *(_QWORD *)v110 < 0x64uLL)
        {
          v51 = luaI_snprintf((uint64_t)v0, (uint64_t)v23, 428, (unsigned __int8 *)__s, v67, v68, v69, v70, v66);
          lua_settop((uint64_t)v0, 0xFFFFFFFE);
        }
        else
        {
          luaL_addvalue((uint64_t)&v78);
          v51 = 0;
        }
        goto LABEL_47;
      default:
        return luaL_error(v0, "invalid option '%%%c' to 'format'", v33, v34, v35, v36, v37, v38, v39);
    }
    do
    {
      v59 = *v56;
      if (*v56 > 0x21u)
      {
        if ((_DWORD)v59 == 92 || (_DWORD)v59 == 34)
          goto LABEL_60;
      }
      else
      {
        if (!*v56)
          goto LABEL_71;
        if ((_DWORD)v59 == 10)
        {
LABEL_60:
          v60 = v79;
          if ((unint64_t)v79 >= *((_QWORD *)&v78 + 1))
          {
            luaL_prepbuffsize((const void **)&v78, 1uLL, v4, v5, v6, v7, v8, v9);
            v60 = v79;
          }
          *(_QWORD *)&v79 = v60 + 1;
          *(_BYTE *)(v78 + v60) = 92;
          goto LABEL_63;
        }
      }
      if ((v59 & 0x80) != 0)
      {
        if (__maskrune(v59, 0x200uLL))
        {
LABEL_70:
          v59 = *v56;
LABEL_71:
          if (v56[1] - 48 >= 0xA)
            v63 = "\\%d";
          else
            v63 = "\\%03d";
          luaI_snprintf((uint64_t)v0, (uint64_t)v110, 10, (unsigned __int8 *)v63, v6, v7, v8, v9, v59);
          luaL_addstring((uint64_t)&v78, v110);
          goto LABEL_75;
        }
      }
      else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v59 + 60) & 0x200) != 0)
      {
        goto LABEL_70;
      }
LABEL_63:
      v61 = v79;
      if ((unint64_t)v79 >= *((_QWORD *)&v78 + 1))
      {
        luaL_prepbuffsize((const void **)&v78, 1uLL, v4, v5, v6, v7, v8, v9);
        v61 = v79;
      }
      v62 = *v56;
      *(_QWORD *)&v79 = v61 + 1;
      *(_BYTE *)(v78 + v61) = v62;
LABEL_75:
      ++v56;
    }
    while (v76--);
LABEL_76:
    v65 = v79;
    if ((unint64_t)v79 >= *((_QWORD *)&v78 + 1))
    {
      luaL_prepbuffsize((const void **)&v78, 1uLL, v4, v5, v6, v7, v8, v9);
      v65 = v79;
    }
    v51 = 0;
    *(_QWORD *)&v79 = v65 + 1;
    *(_BYTE *)(v78 + v65) = 34;
LABEL_47:
    *(_QWORD *)&v79 = v79 + v51;
LABEL_48:
    v11 = v24;
    if (v2 >= v10)
    {
LABEL_83:
      luaL_pushresult((uint64_t)&v78);
      return 1;
    }
  }
  if ((_DWORD)v39 == 69 || (_DWORD)v39 == 71)
  {
LABEL_45:
    __s[strlen(__s)] = 0;
    v73 = luaL_checknumber(v0, v24);
    v46 = luaI_snprintf((uint64_t)v0, (uint64_t)v23, 428, (unsigned __int8 *)__s, v47, v48, v49, v50, v73);
    goto LABEL_46;
  }
  if ((_DWORD)v39 == 88)
  {
LABEL_40:
    v41 = luaL_checkinteger(v0, v24);
    __s[strlen(__s)] = 0;
    v46 = luaI_snprintf((uint64_t)v0, (uint64_t)v23, 428, (unsigned __int8 *)__s, v42, v43, v44, v45, v41);
LABEL_46:
    v51 = v46;
    goto LABEL_47;
  }
  return luaL_error(v0, "invalid option '%%%c' to 'format'", v33, v34, v35, v36, v37, v38, v39);
}

uint64_t gmatch(_QWORD *a1)
{
  luaL_checklstring(a1, 1, 0);
  luaL_checklstring(a1, 2, 0);
  lua_settop((uint64_t)a1, 2u);
  lua_pushinteger((uint64_t)a1, 0);
  lua_pushcclosure((uint64_t)a1, (uint64_t)gmatch_aux, 3);
  return 1;
}

uint64_t str_gsub()
{
  _QWORD *v0;
  char *v1;
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t matched;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t i;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  char *v45;
  unsigned __int8 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;

  v0 = (_QWORD *)MEMORY[0x1E0C80A78]();
  v112 = *MEMORY[0x1E0C80C00];
  v78 = 0;
  v77 = 0;
  v1 = (char *)luaL_checklstring(v0, 1, &v78);
  v2 = (unsigned __int8 *)luaL_checklstring(v0, 2, &v77);
  v3 = lua_type(v0, 3);
  v4 = luaL_optinteger(v0, 4, v78 + 1);
  v5 = *v2;
  v111 = 0u;
  v110 = 0u;
  v109 = 0u;
  v108 = 0u;
  v107 = 0u;
  v106 = 0u;
  v104 = 0u;
  v105 = 0u;
  v102 = 0u;
  v103 = 0u;
  v100 = 0u;
  v101 = 0u;
  v98 = 0u;
  v99 = 0u;
  v96 = 0u;
  v97 = 0u;
  v94 = 0u;
  v95 = 0u;
  v92 = 0u;
  v93 = 0u;
  v90 = 0u;
  v91 = 0u;
  v88 = 0u;
  v89 = 0u;
  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  v85 = 0u;
  v82 = 0u;
  v83 = 0u;
  v80 = 0u;
  v81 = 0u;
  if ((v3 - 3) >= 4)
    luaL_argerror(v0, 3);
  luaL_buffinit((uint64_t)v0, (uint64_t)&v80);
  v11 = v77;
  if (v5 == 94)
  {
    ++v2;
    v11 = --v77;
  }
  v12 = 0;
  v75 = 0u;
  v76 = 0u;
  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v48 = 0u;
  v44[0] = 200;
  v44[1] = v1;
  v45 = &v1[v78];
  v46 = &v2[v11];
  v47 = (unint64_t)v0;
  v42 = (uint64_t)v0;
  v43 = v4;
  while (v12 < v4)
  {
    DWORD2(v47) = 0;
    matched = match_0((uint64_t)v44, (uint64_t)v1, (uint64_t)v2, v6, v7, v8, v9, v10);
    if (matched)
    {
      v15 = (char *)matched;
      v16 = (_QWORD *)v47;
      if (v3 == 5)
      {
        push_onecapture((uint64_t)v44, 0, (uint64_t)v1, matched, v7, v8, v9, v10);
        lua_gettable(v16, 3);
LABEL_12:
        if (lua_toBOOLean(v16, -1))
        {
          if (!lua_isstring(v16, -1))
          {
            v23 = lua_type(v16, -1);
            v24 = lua_typename((uint64_t)v16, v23);
            luaL_error(v16, "invalid replacement value (a %s)", v25, v26, v27, v28, v29, v30, (uint64_t)v24);
          }
        }
        else
        {
          lua_settop((uint64_t)v16, 0xFFFFFFFE);
          lua_pushlstring(v16, v1, v15 - v1);
        }
        luaL_addvalue((uint64_t)&v80);
      }
      else
      {
        if (v3 == 6)
        {
          lua_pushvalue((_QWORD *)v47, 3);
          v22 = push_captures((uint64_t)v44, (uint64_t)v1, (uint64_t)v15, v17, v18, v19, v20, v21);
          lua_callk((uint64_t)v16, v22, 1, 0, 0);
          goto LABEL_12;
        }
        v79 = 0;
        v31 = lua_tolstring((_QWORD *)v47, 3, &v79);
        if (v79)
        {
          v32 = v31;
          for (i = 0; i < v79; ++i)
          {
            v34 = *(unsigned __int8 *)(v32 + i);
            if (v34 == 37)
            {
              ++i;
              v35 = *(unsigned __int8 *)(v32 + i);
              if ((v35 - 48) >= 0xA)
              {
                if ((char)v35 != 37)
                  luaL_error(v16, "invalid use of '%c' in replacement string", v14, v6, v7, v8, v9, v10, 37);
                v37 = v81;
                if ((unint64_t)v81 >= *((_QWORD *)&v80 + 1))
                {
                  luaL_prepbuffsize((const void **)&v80, 1uLL, v14, v6, v7, v8, v9, v10);
                  v37 = v81;
                }
                v38 = *(_BYTE *)(v32 + i);
                *(_QWORD *)&v81 = v37 + 1;
                *(_BYTE *)(v80 + v37) = v38;
              }
              else if ((char)v35 == 48)
              {
                luaL_addlstring((uint64_t)&v80, v1, v15 - v1, v6, v7, v8, v9, v10);
              }
              else
              {
                push_onecapture((uint64_t)v44, (char)v35 - 49, (uint64_t)v1, (uint64_t)v15, v7, v8, v9, v10);
                luaL_tolstring(v16, 0xFFFFFFFFLL, 0);
                lua_rotate(v16, -2, -1);
                lua_settop((uint64_t)v16, 0xFFFFFFFE);
                luaL_addvalue((uint64_t)&v80);
              }
            }
            else
            {
              v36 = v81;
              if ((unint64_t)v81 >= *((_QWORD *)&v80 + 1))
              {
                luaL_prepbuffsize((const void **)&v80, 1uLL, v14, v6, v7, v8, v9, v10);
                LOBYTE(v34) = *(_BYTE *)(v32 + i);
                v36 = v81;
              }
              *(_QWORD *)&v81 = v36 + 1;
              *(_BYTE *)(v80 + v36) = v34;
            }
          }
        }
        v4 = v43;
      }
      ++v12;
      if (v15 > v1)
        goto LABEL_39;
    }
    if (v1 >= v45)
      break;
    v39 = v81;
    if ((unint64_t)v81 >= *((_QWORD *)&v80 + 1))
    {
      luaL_prepbuffsize((const void **)&v80, 1uLL, v14, v6, v7, v8, v9, v10);
      v39 = v81;
    }
    v40 = *v1;
    *(_QWORD *)&v81 = v39 + 1;
    *(_BYTE *)(v80 + v39) = v40;
    v15 = v1 + 1;
LABEL_39:
    v1 = v15;
    if (v5 == 94)
      goto LABEL_42;
  }
  v15 = v1;
LABEL_42:
  luaL_addlstring((uint64_t)&v80, v15, v45 - v15, v6, v7, v8, v9, v10);
  luaL_pushresult((uint64_t)&v80);
  lua_pushinteger(v42, v12);
  return 2;
}

uint64_t str_len(_QWORD *a1)
{
  uint64_t v3;

  v3 = 0;
  luaL_checklstring(a1, 1, &v3);
  lua_pushinteger((uint64_t)a1, v3);
  return 1;
}

uint64_t str_lower()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  unint64_t i;
  uint64_t v10;
  unint64_t v12;
  _OWORD v13[514];
  uint64_t v14;

  v0 = (_QWORD *)MEMORY[0x1E0C80A78]();
  v14 = *MEMORY[0x1E0C80C00];
  v12 = 0;
  memset(v13, 0, 512);
  v1 = luaL_checklstring(v0, 1, &v12);
  v7 = luaL_buffinitsize((uint64_t)v0, (uint64_t)v13, v12, v2, v3, v4, v5, v6);
  if (v12)
  {
    v8 = v7;
    for (i = 0; i < v12; ++i)
    {
      v8[i] = __tolower(*(unsigned __int8 *)(v1 + i));
      v10 = v12;
    }
  }
  else
  {
    v10 = 0;
  }
  luaL_pushresultsize((uint64_t)v13, v10);
  return 1;
}

uint64_t str_match(_QWORD *a1)
{
  return str_find_aux(a1, 0);
}

uint64_t str_rep()
{
  _QWORD *v0;
  const void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v11;
  size_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  size_t __n;
  _OWORD v17[514];
  uint64_t v18;

  v0 = (_QWORD *)MEMORY[0x1E0C80A78]();
  v18 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  __n = 0;
  v1 = (const void *)luaL_checklstring(v0, 1, &__n);
  v2 = luaL_checkinteger(v0, 2);
  v3 = luaL_optlstring(v0, 3, &byte_1DEBD87CE, &v15);
  if (v2 <= 0)
  {
    lua_pushstring(v0, &byte_1DEBD87CE);
  }
  else
  {
    if (__CFADD__(v15, __n) || v15 + __n > 0x7FFFFFFFuLL / v2)
      return luaL_error(v0, "resulting string too large", v4, v5, v6, v7, v8, v9, v15);
    v11 = (const void *)v3;
    v12 = __n * v2 + v15 * (v2 - 1);
    memset(v17, 0, 512);
    v13 = luaL_buffinitsize((uint64_t)v0, (uint64_t)v17, v12, v5, v6, v7, v8, v9);
    if ((unint64_t)v2 >= 2)
    {
      v14 = v2 + 1;
      do
      {
        memcpy(v13, v1, __n);
        v13 += __n;
        if (v15)
        {
          memcpy(v13, v11, v15);
          v13 += v15;
        }
        --v14;
      }
      while (v14 > 2);
    }
    memcpy(v13, v1, __n);
    luaL_pushresultsize((uint64_t)v17, v12);
  }
  return 1;
}

uint64_t str_reverse()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  _OWORD v13[514];
  uint64_t v14;

  v0 = (_QWORD *)MEMORY[0x1E0C80A78]();
  v14 = *MEMORY[0x1E0C80C00];
  v12 = 0;
  memset(v13, 0, 512);
  v1 = luaL_checklstring(v0, 1, &v12);
  v7 = luaL_buffinitsize((uint64_t)v0, (uint64_t)v13, v12, v2, v3, v4, v5, v6);
  v8 = v12;
  if (v12)
  {
    v9 = 0;
    v10 = v1 - 1;
    do
    {
      v7[v9++] = *(_BYTE *)(v10 + v8);
      v8 = v12;
      --v10;
    }
    while (v9 < v12);
  }
  luaL_pushresultsize((uint64_t)v13, v8);
  return 1;
}

uint64_t str_sub(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v14;

  v14 = 0;
  v2 = luaL_checklstring(a1, 1, &v14);
  v3 = luaL_checkinteger(a1, 2);
  if (v14 >= -v3)
    v4 = v3 + v14 + 1;
  else
    v4 = 0;
  if (v3 < 0)
    v5 = v4;
  else
    v5 = v3;
  v6 = luaL_optinteger(a1, 3, -1);
  v7 = v14;
  if (v14 >= -v6)
    v8 = v6 + v14 + 1;
  else
    v8 = 0;
  if (v6 < 0)
    v9 = v8;
  else
    v9 = v6;
  if (v5 <= 1)
    v10 = 1;
  else
    v10 = v5;
  if (v9 < (uint64_t)v14)
    v7 = v9;
  v11 = v7 < v10;
  v12 = v7 - v10;
  if (v11)
    lua_pushstring(a1, &byte_1DEBD87CE);
  else
    lua_pushlstring(a1, (char *)(v2 + v10 - 1), v12 + 1);
  return 1;
}

uint64_t str_upper()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  unint64_t i;
  uint64_t v10;
  unint64_t v12;
  _OWORD v13[514];
  uint64_t v14;

  v0 = (_QWORD *)MEMORY[0x1E0C80A78]();
  v14 = *MEMORY[0x1E0C80C00];
  v12 = 0;
  memset(v13, 0, 512);
  v1 = luaL_checklstring(v0, 1, &v12);
  v7 = luaL_buffinitsize((uint64_t)v0, (uint64_t)v13, v12, v2, v3, v4, v5, v6);
  if (v12)
  {
    v8 = v7;
    for (i = 0; i < v12; ++i)
    {
      v8[i] = __toupper(*(unsigned __int8 *)(v1 + i));
      v10 = v12;
    }
  }
  else
  {
    v10 = 0;
  }
  luaL_pushresultsize((uint64_t)v13, v10);
  return 1;
}

uint64_t str_pack()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  double v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  size_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char v61;
  char *v62;
  char *v63;
  char v64;
  uint64_t v66;
  _BYTE *v67;
  _QWORD *v68;
  uint64_t v69;
  _OWORD v70[2];
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;

  v0 = (_QWORD *)MEMORY[0x1E0C80A78]();
  v104 = *MEMORY[0x1E0C80C00];
  v102 = 0u;
  v103 = 0u;
  v100 = 0u;
  v101 = 0u;
  v98 = 0u;
  v99 = 0u;
  v96 = 0u;
  v97 = 0u;
  v94 = 0u;
  v95 = 0u;
  v92 = 0u;
  v93 = 0u;
  v90 = 0u;
  v91 = 0u;
  v88 = 0u;
  v89 = 0u;
  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  v85 = 0u;
  v82 = 0u;
  v83 = 0u;
  v80 = 0u;
  v81 = 0u;
  v78 = 0u;
  v79 = 0u;
  v76 = 0u;
  v77 = 0u;
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  v67 = (_BYTE *)luaL_checklstring(v0, 1, 0);
  v68 = v0;
  v69 = 0x100000001;
  lua_pushnil((uint64_t)v0);
  luaL_buffinit((uint64_t)v0, (uint64_t)&v72);
  if (*v67)
  {
    v4 = 0;
    v5 = 1;
    do
    {
      v66 = 0;
      v9 = getdetails(&v68, v4, &v67, (int *)&v66 + 1, (int *)&v66, v1, v2, v3);
      v10 = v66;
      v11 = HIDWORD(v66);
      if ((int)v66 >= 1)
      {
        v12 = v66 + 1;
        do
        {
          v13 = v73;
          if ((unint64_t)v73 >= *((_QWORD *)&v72 + 1))
          {
            luaL_prepbuffsize((const void **)&v72, 1uLL, v6, v7, v8, v1, v2, v3);
            v13 = v73;
          }
          *(_QWORD *)&v73 = v13 + 1;
          *(_BYTE *)(v72 + v13) = 0;
          --v12;
        }
        while (v12 > 1);
      }
      v4 += (int)v11 + v10;
      v14 = (v5 + 1);
      v15 = (int)v11;
      switch(v9)
      {
        case 0:
          v16 = luaL_checkinteger(v0, (v5 + 1));
          v20 = v16;
          if ((int)v11 <= 7)
          {
            v21 = 1 << (8 * v11 - 1);
            if (v16 < -v21 || v16 >= v21)
              luaL_argerror(v0, (v5 + 1));
          }
          v23 = v69;
          v24 = v20 >> 63;
          v25 = v20;
          v26 = v11;
          goto LABEL_20;
        case 1:
          v27 = luaL_checkinteger(v0, (v5 + 1));
          v28 = v27;
          if ((int)v11 <= 7 && v27 >> (8 * v11))
            luaL_argerror(v0, (v5 + 1));
          v23 = v69;
          v25 = v28;
          v26 = v11;
          v24 = 0;
LABEL_20:
          packint((uint64_t)&v72, v25, v23, v26, v24, v17, v18, v19);
          break;
        case 2:
          v71 = 0;
          memset(v70, 0, sizeof(v70));
          v29 = luaL_prepbuffsize((const void **)&v72, (int)v11, v6, v7, v8, v1, v2, v3);
          v30 = luaL_checknumber(v0, (v5 + 1));
          if ((_DWORD)v11 == 4)
          {
            v31 = v30;
            *(float *)v70 = v31;
          }
          else
          {
            *(double *)v70 = v30;
          }
          if ((_DWORD)v69 == 1)
          {
            if ((_DWORD)v11)
            {
              v60 = (char *)v70;
              do
              {
                v61 = *v60++;
                *v29++ = v61;
                LODWORD(v11) = v11 - 1;
              }
              while ((_DWORD)v11);
            }
          }
          else if ((_DWORD)v11)
          {
            v62 = &v29[(int)v11 - 1];
            v63 = (char *)v70;
            do
            {
              v64 = *v63++;
              *v62-- = v64;
              LODWORD(v11) = v11 - 1;
            }
            while ((_DWORD)v11);
          }
          *(_QWORD *)&v73 = v73 + v15;
          break;
        case 3:
          *(_QWORD *)&v70[0] = 0;
          v37 = (const void *)luaL_checklstring(v0, (v5 + 1), v70);
          if (*(_QWORD *)&v70[0] != (int)v11)
            luaL_argerror(v0, (v5 + 1));
          luaL_addlstring((uint64_t)&v72, v37, (int)v11, v32, v33, v34, v35, v36);
          break;
        case 4:
          *(_QWORD *)&v70[0] = 0;
          v41 = (const void *)luaL_checklstring(v0, (v5 + 1), v70);
          v42 = *(_QWORD *)&v70[0];
          if ((int)v11 <= 7 && *(_QWORD *)&v70[0] >> (8 * v11))
          {
            luaL_argerror(v0, (v5 + 1));
            v42 = *(_QWORD *)&v70[0];
          }
          packint((uint64_t)&v72, v42, v69, v11, 0, v38, v39, v40);
          luaL_addlstring((uint64_t)&v72, v41, *(unint64_t *)&v70[0], v43, v44, v45, v46, v47);
          v4 += *(_QWORD *)&v70[0];
          break;
        case 5:
          *(_QWORD *)&v70[0] = 0;
          v48 = (const char *)luaL_checklstring(v0, (v5 + 1), v70);
          v49 = strlen(v48);
          if (v49 != *(_QWORD *)&v70[0])
          {
            luaL_argerror(v0, (v5 + 1));
            v49 = *(_QWORD *)&v70[0];
          }
          luaL_addlstring((uint64_t)&v72, v48, v49, v50, v51, v52, v53, v54);
          v58 = v73;
          if ((unint64_t)v73 >= *((_QWORD *)&v72 + 1))
          {
            luaL_prepbuffsize((const void **)&v72, 1uLL, v55, v56, v57, v1, v2, v3);
            v58 = v73;
          }
          *(_QWORD *)&v73 = v58 + 1;
          *(_BYTE *)(v72 + v58) = 0;
          v4 += *(_QWORD *)&v70[0] + 1;
          break;
        case 6:
          v59 = v73;
          if ((unint64_t)v73 >= *((_QWORD *)&v72 + 1))
          {
            luaL_prepbuffsize((const void **)&v72, 1uLL, v6, v7, v8, v1, v2, v3);
            v59 = v73;
          }
          *(_QWORD *)&v73 = v59 + 1;
          *(_BYTE *)(v72 + v59) = 0;
          goto LABEL_38;
        case 7:
        case 8:
LABEL_38:
          v14 = v5;
          break;
        default:
          break;
      }
      v5 = v14;
    }
    while (*v67);
  }
  luaL_pushresult((uint64_t)&v72);
  return 1;
}

uint64_t str_packsize(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v9;
  _BYTE *v10;
  _QWORD *v11[2];

  v10 = (_BYTE *)luaL_checklstring(a1, 1, 0);
  v11[0] = a1;
  v11[1] = (_QWORD *)0x100000001;
  if (*v10)
  {
    v5 = 0;
    do
    {
      v9 = 0;
      v6 = getdetails(v11, v5, &v10, (int *)&v9 + 1, (int *)&v9, v2, v3, v4);
      v7 = SHIDWORD(v9) + (uint64_t)(int)v9;
      if (v5 > 0x7FFFFFFF - v7)
        luaL_argerror(a1, 1);
      if ((v6 & 0xE) == 4)
        luaL_argerror(a1, 1);
      v5 += v7;
    }
    while (*v10);
  }
  else
  {
    v5 = 0;
  }
  lua_pushinteger((uint64_t)a1, v5);
  return 1;
}

uint64_t str_unpack(_QWORD *a1)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _BYTE *v23;
  int v24;
  char v25;
  char *v26;
  _QWORD *v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char *v32;
  int v33;
  char v34;
  double v35;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  _QWORD *v41;
  uint64_t v42;
  _OWORD v43[2];
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)luaL_checklstring(a1, 1, 0);
  v39 = 0;
  v40 = v2;
  v3 = luaL_checklstring(a1, 2, &v39);
  v4 = luaL_optinteger(a1, 3, 1);
  if (v39 >= -v4)
    v8 = v4 + v39 + 1;
  else
    v8 = 0;
  if (v4 < 0)
    v9 = v8;
  else
    v9 = v4;
  v10 = v9 - 1;
  if (v9 - 1 > v39)
    luaL_argerror(a1, 3);
  v41 = a1;
  v42 = 0x100000001;
  if (*v2)
  {
    v11 = 0;
    while (2)
    {
      v38 = 0;
      v17 = getdetails(&v41, v10, &v40, (int *)&v38 + 1, (int *)&v38, v5, v6, v7);
      v18 = HIDWORD(v38);
      v19 = SHIDWORD(v38);
      v20 = v10 + (int)v38;
      if (__CFADD__(v10, (int)v38 + (uint64_t)SHIDWORD(v38)) || v20 + SHIDWORD(v38) > v39)
        luaL_argerror(a1, 2);
      luaL_checkstack(a1, 2, (uint64_t)"too many results", v12, v13, v14, v15, v16, v37);
      switch(v17)
      {
        case 0:
        case 1:
          v21 = unpackint(a1, v3 + v20, v42, v18, v17 == 0, v5, v6, v7);
          lua_pushinteger((uint64_t)a1, v21);
          goto LABEL_34;
        case 2:
          v44 = 0;
          memset(v43, 0, sizeof(v43));
          v22 = (char *)(v3 + v20);
          if ((_DWORD)v42 == 1)
          {
            if (!(_DWORD)v18)
              goto LABEL_32;
            v23 = v43;
            v24 = v18;
            do
            {
              v25 = *v22++;
              *v23++ = v25;
              --v24;
            }
            while (v24);
          }
          else
          {
            if (!(_DWORD)v18)
              goto LABEL_32;
            v32 = (char *)v43 + v19 - 1;
            v33 = v18;
            do
            {
              v34 = *v22++;
              *v32-- = v34;
              --v33;
            }
            while (v33);
          }
          if ((_DWORD)v18 == 4)
          {
            v35 = *(float *)v43;
            goto LABEL_33;
          }
LABEL_32:
          v35 = *(double *)v43;
LABEL_33:
          lua_pushnumber((uint64_t)a1, v35);
LABEL_34:
          ++v11;
LABEL_35:
          v10 = v20 + v19;
          if (*v40)
            continue;
          v9 = v10 + 1;
          break;
        case 3:
          v26 = (char *)(v3 + v20);
          v27 = a1;
          v28 = v19;
          goto LABEL_25;
        case 4:
          v29 = v3 + v20;
          v30 = unpackint(a1, v3 + v20, v42, v18, 0, v5, v6, v7);
          v20 += v30;
          if (v20 + v19 > v39)
            luaL_argerror(a1, 2);
          v26 = (char *)(v29 + v19);
          v27 = a1;
          v28 = v30;
LABEL_25:
          lua_pushlstring(v27, v26, v28);
          goto LABEL_34;
        case 5:
          v31 = strlen((const char *)(v3 + v20));
          lua_pushlstring(a1, (char *)(v3 + v20), v31);
          v20 += v31 + 1;
          goto LABEL_34;
        case 6:
        case 7:
        case 8:
          goto LABEL_35;
        default:
          goto LABEL_34;
      }
      break;
    }
  }
  else
  {
    v11 = 0;
  }
  lua_pushinteger((uint64_t)a1, v9);
  return (v11 + 1);
}

uint64_t writer(uint64_t a1, const void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  luaL_addlstring(a4, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t str_find_aux(_QWORD *a1, int a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  size_t v18;
  size_t v19;
  const void *v20;
  int v21;
  int v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t matched;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  unint64_t v71;
  unint64_t v72;

  v71 = 0;
  v72 = 0;
  v4 = luaL_checklstring(a1, 1, &v72);
  v5 = (unsigned __int8 *)luaL_checklstring(a1, 2, &v71);
  v6 = luaL_optinteger(a1, 3, 1);
  v12 = v6;
  if (v6 < 0)
  {
    if (v72 < -v6)
      goto LABEL_19;
    v12 = v72 + v6 + 1;
  }
  if (v12 < 1)
  {
LABEL_19:
    v12 = 1;
    if (a2)
      goto LABEL_7;
    goto LABEL_20;
  }
  if (v12 > (uint64_t)(v72 + 1))
    goto LABEL_27;
  if (a2)
  {
LABEL_7:
    v13 = lua_toBOOLean(a1, 4);
    v14 = v71;
    if (!v13)
    {
      v15 = 0;
      while (!strpbrk((char *)&v5[v15], "^$*+?.([%-"))
      {
        v15 += strlen((const char *)&v5[v15]) + 1;
        if (v15 > v14)
          goto LABEL_11;
      }
      goto LABEL_21;
    }
LABEL_11:
    v16 = (char *)(v4 + v12 - 1);
    if (!v14)
    {
LABEL_32:
      v38 = &v16[-v4];
      lua_pushinteger((uint64_t)a1, (uint64_t)(v38 + 1));
      lua_pushinteger((uint64_t)a1, (uint64_t)&v38[v71]);
      return 2;
    }
    v17 = v72 - v12 + 1;
    if (v14 <= v17)
    {
      v18 = v14 - 1;
      v19 = v17 - (v14 - 1);
      if (v17 != v14 - 1)
      {
        v22 = (char)*v5;
        v20 = v5 + 1;
        v21 = v22;
        do
        {
          v23 = (char *)memchr(v16, v21, v19);
          if (!v23)
            break;
          v24 = v23;
          v25 = v23 + 1;
          if (!memcmp(v23 + 1, v20, v18))
          {
            v16 = v24;
            goto LABEL_32;
          }
          v26 = &v16[v19];
          v16 = v25;
          v19 = v26 - v25;
        }
        while (v26 != v25);
      }
    }
LABEL_27:
    lua_pushnil((uint64_t)a1);
    return 1;
  }
LABEL_20:
  v14 = v71;
LABEL_21:
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v27 = *v5;
  if (v27 == 94)
  {
    ++v5;
    v71 = --v14;
  }
  LODWORD(v39) = 200;
  *((_QWORD *)&v39 + 1) = v4;
  *(_QWORD *)&v40 = v4 + v72;
  *((_QWORD *)&v40 + 1) = &v5[v14];
  *(_QWORD *)&v41 = a1;
  v28 = v4 - 1;
  while (1)
  {
    v29 = v28 + v12;
    DWORD2(v41) = 0;
    matched = match_0((uint64_t)&v39, v28 + v12, (uint64_t)v5, v7, v8, v9, v10, v11);
    if (matched)
      break;
    if (v27 != 94)
    {
      ++v12;
      if (v29 < (unint64_t)v40)
        continue;
    }
    goto LABEL_27;
  }
  v32 = matched;
  if (!a2)
    return push_captures((uint64_t)&v39, v4 + v12 - 1, matched, v7, v8, v9, v10, v11);
  lua_pushinteger((uint64_t)a1, v12);
  lua_pushinteger((uint64_t)a1, v32 - v4);
  return push_captures((uint64_t)&v39, 0, 0, v33, v34, v35, v36, v37) + 2;
}

uint64_t match_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  char *v12;
  char *v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t result;
  BOOL v18;
  unint64_t v19;
  char *v21;
  int v22;
  char *v23;
  signed int v24;
  _BOOL4 v25;
  int v26;
  size_t v27;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;

  v8 = (char *)a3;
  if (!(*(_DWORD *)a1)--)
    luaL_error(*(_QWORD **)(a1 + 32), "pattern too complex", a3, a4, a5, a6, a7, a8, v47);
LABEL_3:
  v12 = v8;
  while (2)
  {
    v13 = *(char **)(a1 + 24);
    if (v12 == v13)
    {
      result = a2;
      goto LABEL_79;
    }
    switch(*v12)
    {
      case '$':
        if (v12 + 1 != v13)
          goto LABEL_11;
        if (a2 == *(_QWORD *)(a1 + 16))
          result = a2;
        else
          result = 0;
        goto LABEL_79;
      case '%':
        v14 = v12[1];
        if (v14 == 102)
        {
          v22 = v12[2];
          v21 = v12 + 2;
          if (v22 != 91)
            luaL_error(*(_QWORD **)(a1 + 32), "missing '[' after '%%f' in pattern", a3, a4, a5, a6, a7, a8, v47);
          v23 = classend(a1, v21, a3, a4, a5, a6, a7, a8);
          if (a2 == *(_QWORD *)(a1 + 8))
            v24 = 0;
          else
            v24 = *(unsigned __int8 *)(a2 - 1);
          if (!matchbracketclass(v24, (unsigned __int8 *)v21, (unint64_t)(v23 - 1)))
          {
            v25 = matchbracketclass(*(unsigned __int8 *)a2, (unsigned __int8 *)v21, (unint64_t)(v23 - 1));
            v12 = v23;
            if (v25)
              continue;
          }
          goto LABEL_64;
        }
        if ((v14 - 48) < 0xA)
        {
          v26 = v12[1] - 49;
          if (v12[1] < 0x31u
            || v26 >= *(_DWORD *)(a1 + 40)
            || *(_QWORD *)(a1 + 16 * v26 + 56) == -1)
          {
            v26 = luaL_error(*(_QWORD **)(a1 + 32), "invalid capture index %%%d", a3, a4, a5, a6, a7, a8, v12[1] - 48);
          }
          v27 = *(_QWORD *)(a1 + 16 * v26 + 56);
          if (*(_QWORD *)(a1 + 16) - a2 >= v27
            && !memcmp(*(const void **)(a1 + 16 * v26 + 48), (const void *)a2, v27)
            && a2 != 0)
          {
            a2 += v27;
            v8 = v12 + 2;
            goto LABEL_3;
          }
          goto LABEL_64;
        }
        if (v14 != 98)
          goto LABEL_11;
        if (v13 - 1 <= v12 + 2)
          luaL_error(*(_QWORD **)(a1 + 32), "malformed pattern (missing arguments to '%%b')", a3, a4, a5, a6, a7, a8, v47);
        v29 = *(unsigned __int8 *)a2;
        if (v29 != v12[2])
          goto LABEL_64;
        v30 = *(_QWORD *)(a1 + 16);
        if (a2 + 1 >= v30)
          goto LABEL_64;
        v31 = ~a2;
        a2 += 2;
        v32 = v31 + v30;
        v33 = 1;
        do
        {
          v34 = *(unsigned __int8 *)(a2 - 1);
          if (v34 == v12[3])
          {
            if (!--v33)
            {
              v8 = v12 + 4;
              goto LABEL_3;
            }
          }
          else if (v34 == v29)
          {
            ++v33;
          }
          result = 0;
          ++a2;
          --v32;
        }
        while (v32);
        goto LABEL_79;
      case '(':
        v36 = (uint64_t)(v12 + 1);
        if (v12[1] == 41)
        {
          v36 = (uint64_t)(v12 + 2);
          v37 = a1;
          v38 = a2;
          v39 = 4294967294;
        }
        else
        {
          v37 = a1;
          v38 = a2;
          v39 = 0xFFFFFFFFLL;
        }
        result = start_capture(v37, v38, v36, v39, a5, a6, a7, a8);
        goto LABEL_79;
      case ')':
        v40 = v12 + 1;
        v41 = *(unsigned int *)(a1 + 40);
        v42 = 16 * v41 + 40;
        while (1)
        {
          v43 = __OFSUB__((_DWORD)v41, 1);
          LODWORD(v41) = v41 - 1;
          if ((int)v41 < 0 != v43)
            break;
          v44 = *(_QWORD *)(a1 + v42);
          v42 -= 16;
          if (v44 == -1)
            goto LABEL_75;
        }
        LODWORD(v41) = luaL_error(*(_QWORD **)(a1 + 32), "invalid pattern capture", a3, a4, a5, a6, a7, a8, v47);
LABEL_75:
        v45 = a1 + 16 * (int)v41;
        *(_QWORD *)(v45 + 56) = a2 - *(_QWORD *)(v45 + 48);
        v46 = (_QWORD *)(v45 + 56);
        result = match_0(a1, a2, v40);
        if (!result)
          *v46 = -1;
        goto LABEL_79;
      default:
LABEL_11:
        v8 = classend(a1, v12, a3, a4, a5, a6, a7, a8);
        v15 = singlematch(a1, (unsigned __int8 *)a2, (unsigned __int8 *)v12, (uint64_t)v8);
        v16 = *v8;
        if (!v15)
        {
          v18 = v16 > 0x3F;
          v19 = (1 << v16) & 0x8000240000000000;
          if (!v18 && v19 != 0)
          {
            v12 = v8 + 1;
            continue;
          }
LABEL_64:
          result = 0;
          goto LABEL_79;
        }
        switch(v16)
        {
          case '?':
            v12 = v8 + 1;
            result = match_0(a1, a2 + 1, v8 + 1);
            if (!result)
              continue;
            goto LABEL_79;
          case '*':
            goto LABEL_56;
          case '+':
            ++a2;
LABEL_56:
            v35 = -1;
            do
              ++v35;
            while (singlematch(a1, (unsigned __int8 *)(v35 + a2), (unsigned __int8 *)v12, (uint64_t)v8));
            while ((v35 & 0x8000000000000000) == 0)
            {
              result = match_0(a1, a2 + v35--, v8 + 1);
              if (result)
                goto LABEL_79;
            }
            goto LABEL_64;
        }
        if (v16 != 45)
        {
          ++a2;
          goto LABEL_3;
        }
        while (1)
        {
          result = match_0(a1, a2, v8 + 1);
          if (result)
            break;
          if (!singlematch(a1, (unsigned __int8 *)a2, (unsigned __int8 *)v12, (uint64_t)v8))
            goto LABEL_64;
          ++a2;
        }
LABEL_79:
        ++*(_DWORD *)a1;
        return result;
    }
  }
}

uint64_t push_captures(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v20;

  v11 = *(_DWORD *)(a1 + 40);
  if (v11)
    v12 = 1;
  else
    v12 = a2 == 0;
  if (v12)
    v13 = v11;
  else
    v13 = 1;
  luaL_checkstack(*(_QWORD **)(a1 + 32), v13, (uint64_t)"too many captures", a4, a5, a6, a7, a8, v20);
  if ((int)v13 >= 1)
  {
    v18 = 0;
    do
      push_onecapture(a1, v18++, a2, a3, v14, v15, v16, v17);
    while ((_DWORD)v13 != v18);
  }
  return v13;
}

uint64_t start_capture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v8 = a4;
  v12 = *(int *)(a1 + 40);
  if ((int)v12 >= 32)
    luaL_error(*(_QWORD **)(a1 + 32), "too many captures", a3, a4, a5, a6, a7, a8, v15);
  v13 = a1 + 16 * v12;
  *(_QWORD *)(v13 + 48) = a2;
  *(_QWORD *)(v13 + 56) = v8;
  *(_DWORD *)(a1 + 40) = v12 + 1;
  result = match_0(a1, a2, a3);
  if (!result)
    --*(_DWORD *)(a1 + 40);
  return result;
}

char *classend(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *result;
  int v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;

  result = a2 + 1;
  v11 = *a2;
  if (v11 == 91)
  {
    if (a2[1] == 94)
      v12 = a2 + 2;
    else
      v12 = a2 + 1;
    do
    {
      if (v12 == *(_BYTE **)(a1 + 24))
        luaL_error(*(_QWORD **)(a1 + 32), "malformed pattern (missing ']')", a3, a4, a5, a6, a7, a8, v14);
      v13 = v12 + 1;
      if (*v12 == 37 && (unint64_t)v13 < *(_QWORD *)(a1 + 24))
        v13 = v12 + 2;
      v12 = v13;
    }
    while (*v13 != 93);
    return v13 + 1;
  }
  else if (v11 == 37)
  {
    if (result == *(char **)(a1 + 24))
      luaL_error(*(_QWORD **)(a1 + 32), "malformed pattern (ends with '%%')", a3, a4, a5, a6, a7, a8, v14);
    return a2 + 2;
  }
  return result;
}

BOOL matchbracketclass(signed int a1, unsigned __int8 *a2, unint64_t a3)
{
  unsigned __int8 *v3;
  int v4;
  _BOOL8 v5;
  _BOOL8 v6;
  unsigned __int8 *i;
  unsigned int v10;
  unsigned __int8 *v11;
  signed int v12;
  int matched;

  v3 = a2 + 1;
  v4 = a2[1];
  v5 = v4 == 94;
  v6 = v4 != 94;
  if (v4 != 94)
    v3 = a2;
  for (i = v3 + 1; (unint64_t)(v3 + 1) < a3; i = v3 + 1)
  {
    v11 = v3 + 2;
    v10 = v3[2];
    v12 = v3[1];
    if (v12 == 37)
    {
      matched = match_class(a1, v10);
      v3 = v11;
      if (matched)
        return v6;
    }
    else
    {
      v3 += 3;
      if (v10 != 45 || (unint64_t)v3 >= a3)
      {
        v3 = i;
        if (v12 == a1)
          return v6;
      }
      else if (v12 <= a1 && *v3 >= a1)
      {
        return v6;
      }
    }
  }
  return v5;
}

uint64_t singlematch(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  unsigned int v4;
  int v5;

  if (*(_QWORD *)(a1 + 16) <= (unint64_t)a2)
    return 0;
  v4 = *a2;
  v5 = (char)*a3;
  switch(v5)
  {
    case '[':
      return matchbracketclass(v4, a3, a4 - 1);
    case '.':
      return 1;
    case '%':
      return match_class(v4, a3[1]);
  }
  return *a3 == v4;
}

uint64_t match_class(unsigned int a1, unsigned int a2)
{
  int v4;
  int v5;
  __darwin_ct_rune_t v7;
  unint64_t v8;
  int v9;

  switch(__tolower(a2))
  {
    case 'a':
      if (a1 <= 0x7F)
      {
        v4 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * a1 + 60) & 0x100;
        goto LABEL_32;
      }
      v7 = a1;
      v8 = 256;
      goto LABEL_31;
    case 'c':
      if (a1 <= 0x7F)
      {
        v4 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * a1 + 60) & 0x200;
        goto LABEL_32;
      }
      v7 = a1;
      v8 = 512;
      goto LABEL_31;
    case 'd':
      v5 = a1 - 48 < 0xA;
      goto LABEL_33;
    case 'g':
      if (a1 <= 0x7F)
      {
        v4 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * a1 + 60) & 0x800;
        goto LABEL_32;
      }
      v7 = a1;
      v8 = 2048;
      goto LABEL_31;
    case 'l':
      if (a1 <= 0x7F)
      {
        v4 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * a1 + 60) & 0x1000;
        goto LABEL_32;
      }
      v7 = a1;
      v8 = 4096;
      goto LABEL_31;
    case 'p':
      if (a1 <= 0x7F)
      {
        v4 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * a1 + 60) & 0x2000;
        goto LABEL_32;
      }
      v7 = a1;
      v8 = 0x2000;
      goto LABEL_31;
    case 's':
      if (a1 <= 0x7F)
      {
        v4 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * a1 + 60) & 0x4000;
        goto LABEL_32;
      }
      v7 = a1;
      v8 = 0x4000;
      goto LABEL_31;
    case 'u':
      if (a1 <= 0x7F)
      {
        v4 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * a1 + 60) & 0x8000;
        goto LABEL_32;
      }
      v7 = a1;
      v8 = 0x8000;
      goto LABEL_31;
    case 'w':
      if (a1 > 0x7F)
      {
        v7 = a1;
        v8 = 1280;
LABEL_31:
        v4 = __maskrune(v7, v8);
      }
      else
      {
        v4 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * a1 + 60) & 0x500;
      }
LABEL_32:
      v5 = v4 != 0;
LABEL_33:
      if (a2 > 0x7F)
        v9 = __maskrune(a2, 0x1000uLL);
      else
        v9 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * a2 + 60) & 0x1000;
      return v5 ^ (v9 == 0);
    case 'x':
      if (a1 <= 0xFF)
        v5 = HIWORD(*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * a1 + 60)) & 1;
      else
        v5 = 0;
      goto LABEL_33;
    case 'z':
      v5 = a1 == 0;
      goto LABEL_33;
    default:
      return a2 == a1;
  }
}

uint64_t push_onecapture(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  char **v10;
  size_t v11;
  _QWORD *v12;
  char *v13;
  size_t v14;
  uint64_t v16;

  if (*(_DWORD *)(a1 + 40) <= a2)
  {
    v12 = *(_QWORD **)(a1 + 32);
    if (a2)
      return luaL_error(v12, "invalid capture index %%%d", a3, a4, a5, a6, a7, a8, (a2 + 1));
    v13 = (char *)a3;
    v14 = a4 - a3;
  }
  else
  {
    v9 = a1 + 16 * a2;
    v10 = (char **)(v9 + 48);
    v11 = *(_QWORD *)(v9 + 56);
    if (v11 == -2)
      return lua_pushinteger(*(_QWORD *)(a1 + 32), (uint64_t)&(*v10)[-*(_QWORD *)(a1 + 8) + 1]);
    if (v11 == -1)
      luaL_error(*(_QWORD **)(a1 + 32), "unfinished capture", a3, a4, a5, a6, a7, a8, v16);
    v12 = *(_QWORD **)(a1 + 32);
    v13 = *v10;
    v14 = v11;
  }
  return lua_pushlstring(v12, v13, v14);
}

uint64_t gmatch_aux(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t matched;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;

  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0;
  v22 = 0;
  v2 = lua_tolstring(a1, -1001001, &v22);
  v3 = lua_tolstring(a1, -1001002, &v21);
  LODWORD(v23) = 200;
  v4 = v22;
  *((_QWORD *)&v23 + 1) = v2;
  *(_QWORD *)&v24 = v2 + v22;
  *((_QWORD *)&v24 + 1) = v3 + v21;
  *(_QWORD *)&v25 = a1;
  v5 = lua_tointegerx(a1, -1001003, 0);
  if (v5 > v4)
    return 0;
  v11 = v2 + v5;
  while (1)
  {
    DWORD2(v25) = 0;
    matched = match_0((uint64_t)&v23, v11, v3, v6, v7, v8, v9, v10);
    if (matched)
      break;
    if (++v11 > (unint64_t)v24)
      return 0;
  }
  v14 = matched;
  if (v11 == matched)
    v15 = matched - v2 + 1;
  else
    v15 = matched - v2;
  lua_pushinteger((uint64_t)a1, v15);
  lua_copy((uint64_t)a1, -1, -1001003);
  lua_settop((uint64_t)a1, 0xFFFFFFFE);
  return push_captures((uint64_t)&v23, v11, v14, v16, v17, v18, v19, v20);
}

uint64_t getdetails(_QWORD **a1, int a2, _QWORD *a3, int *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v24;

  v18 = getoption(a1, a3, a4, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
  v19 = *a4;
  v24 = v19;
  if ((_DWORD)v18 == 7)
  {
    if (!*(_BYTE *)*a3 || (v20 = getoption(a1, a3, &v24, v13, v14, v15, v16, v17), v19 = v24, v20 == 3) || !v24)
      luaL_argerror(*a1, 1);
  }
  v21 = 0;
  if ((_DWORD)v18 != 3 && v19 >= 2)
  {
    if (v19 >= *((_DWORD *)a1 + 3))
      v22 = *((_DWORD *)a1 + 3);
    else
      v22 = v19;
    if ((v22 & (v22 - 1)) != 0)
      luaL_argerror(*a1, 1);
    v21 = (v22 - ((v22 - 1) & a2)) & (v22 - 1);
  }
  *a5 = v21;
  return v18;
}

char *packint(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  uint64_t v13;
  char *result;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v13 = (int)a4;
  result = luaL_prepbuffsize((const void **)a1, (int)a4, a3, a4, a5, a6, a7, a8);
  v15 = v9 - 1;
  if (v10)
    v15 = 0;
  result[v15] = a2;
  v16 = v9 - 2;
  if (v9 >= 2)
  {
    v17 = 1;
    do
    {
      a2 >>= 8;
      if (v10)
        v18 = v17;
      else
        v18 = v16;
      result[v18] = a2;
      ++v17;
      --v16;
    }
    while (v16 != -1);
    v19 = v9 - 9;
    if (v9 >= 9)
    {
      if (v8)
      {
        v20 = 8;
        do
        {
          if (v10)
            v21 = v20;
          else
            v21 = v19;
          result[v21] = -1;
          ++v20;
          --v19;
        }
        while (v19 != -1);
      }
    }
  }
  *(_QWORD *)(a1 + 16) += v13;
  return result;
}

uint64_t getoption(_QWORD **a1, _QWORD *a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  int v14;
  int v15;
  int v16;
  int v17;
  char *v18;
  unsigned int v19;
  uint64_t v21;

  v10 = (char *)*a2;
  v11 = (char *)(*a2 + 1);
  *a2 = v11;
  v12 = *v10;
  *a3 = 0;
  if ((int)v12 > 83)
  {
    result = 5;
    switch((int)v12)
    {
      case 'b':
        result = 0;
        v14 = 1;
        goto LABEL_27;
      case 'c':
        if ((*v11 - 58) >= 0xFFFFFFF6)
        {
          v17 = 0;
          v18 = v10 + 2;
          do
          {
            *a2 = v18;
            v17 = *(v18 - 1) + 10 * v17 - 48;
            v19 = *v18++ - 48;
          }
          while (v19 <= 9 && v17 < 214748364);
          *a3 = v17;
          if (v17 != -1)
            return 3;
        }
        else
        {
          *a3 = -1;
        }
        luaL_error(*a1, "missing size for format option 'c'", (uint64_t)a3, a4, a5, a6, a7, a8, v21);
        return 3;
      case 'd':
      case 'n':
        v16 = 8;
        goto LABEL_24;
      case 'e':
      case 'g':
      case 'k':
      case 'm':
      case 'o':
      case 'p':
      case 'q':
      case 'r':
      case 't':
      case 'u':
      case 'v':
      case 'w':
      case 'y':
        goto LABEL_20;
      case 'f':
        v16 = 4;
LABEL_24:
        *a3 = v16;
        return 2;
      case 'h':
        result = 0;
        v14 = 2;
        goto LABEL_27;
      case 'i':
        v14 = getnumlimit(a1, a2, 4, a4, a5, a6, a7, a8);
        result = 0;
        goto LABEL_27;
      case 'j':
      case 'l':
        result = 0;
        v14 = 8;
LABEL_27:
        *a3 = v14;
        return result;
      case 's':
        *a3 = getnumlimit(a1, a2, 8, a4, a5, a6, a7, a8);
        return 4;
      case 'x':
        *a3 = 1;
        return 6;
      case 'z':
        return result;
      default:
        if ((_DWORD)v12 == 84)
        {
LABEL_12:
          v15 = 8;
LABEL_17:
          *a3 = v15;
          return 1;
        }
        if ((_DWORD)v12 == 88)
          return 7;
LABEL_20:
        luaL_error(*a1, "invalid format option '%c'", (uint64_t)a3, a4, a5, a6, a7, a8, v12);
        return 8;
    }
  }
  switch((int)v12)
  {
    case '<':
    case '=':
      *((_DWORD *)a1 + 2) = 1;
      return 8;
    case '>':
      *((_DWORD *)a1 + 2) = 0;
      return 8;
    case '?':
    case '@':
    case 'A':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'K':
      goto LABEL_20;
    case 'B':
      result = 1;
      *a3 = 1;
      return result;
    case 'H':
      v15 = 2;
      goto LABEL_17;
    case 'I':
      *a3 = getnumlimit(a1, a2, 4, a4, a5, a6, a7, a8);
      return 1;
    case 'J':
    case 'L':
      goto LABEL_12;
    default:
      if ((_DWORD)v12 == 32)
        return 8;
      if ((_DWORD)v12 != 33)
        goto LABEL_20;
      *((_DWORD *)a1 + 3) = getnumlimit(a1, a2, 8, a4, a5, a6, a7, a8);
      break;
  }
  return 8;
}

uint64_t getnumlimit(_QWORD **a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char *v9;
  unsigned int v10;

  v8 = a3;
  if ((*(char *)*a2 - 58) >= 0xFFFFFFF6)
  {
    LODWORD(v8) = 0;
    v9 = (char *)(*a2 + 1);
    do
    {
      *a2 = v9;
      v8 = (*(v9 - 1) + 10 * v8 - 48);
      v10 = *v9++ - 48;
    }
    while (v10 <= 9 && (int)v8 < 214748364);
  }
  if ((v8 - 17) <= 0xFFFFFFEF)
    luaL_error(*a1, "integral size (%d) out of limits [1,%d]", a3, a4, a5, a6, a7, a8, v8);
  return v8;
}

uint64_t unpackint(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v18;
  int v19;
  int v20;

  if ((int)a4 >= 8)
    v9 = 8;
  else
    v9 = a4;
  if ((int)a4 < 1)
  {
    v13 = 0;
  }
  else
  {
    v10 = a3;
    v13 = 0;
    v14 = v9 + 1;
    v15 = a4 - v9;
    do
    {
      v16 = v14 - 2;
      if (!(_DWORD)a3)
        v16 = v15;
      v13 = *(unsigned __int8 *)(a2 + v16) | (unint64_t)(v13 << 8);
      --v14;
      ++v15;
    }
    while (v14 > 1);
    if ((int)a4 > 7)
    {
      if ((_DWORD)a4 != 8)
      {
        if (v13 > -1 || (_DWORD)a5 == 0)
          v18 = 0;
        else
          v18 = 255;
        v19 = ~v9 + a4;
        do
        {
          if (v10)
            v20 = v9;
          else
            v20 = v19;
          if (v18 != *(unsigned __int8 *)(a2 + v20))
            luaL_error(a1, "%d-byte integer does not fit into Lua Integer", a3, a4, a5, a6, a7, a8, a4);
          ++v9;
          --v19;
        }
        while (v19 != -1);
      }
      return v13;
    }
  }
  if ((_DWORD)a5)
    return (v13 ^ (1 << (8 * a4 - 1))) - (1 << (8 * a4 - 1));
  return v13;
}

uint64_t luaH_next(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v10;
  _QWORD *i;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  __int128 v21;

  v6 = *((_DWORD *)a3 + 2);
  if (v6 == 19)
  {
    v7 = *a3;
    if ((unint64_t)(*a3 - 2147483649) >= 0xFFFFFFFF80000000 && (_DWORD)v7 != 0)
    {
      v8 = *(_DWORD *)(a2 + 12);
      if (v8 >= v7)
        goto LABEL_18;
    }
  }
  else if (!v6)
  {
    LODWORD(v7) = 0;
    v8 = *(_DWORD *)(a2 + 12);
    goto LABEL_18;
  }
  v10 = mainposition(a2, a3);
  for (i = (_QWORD *)(v10 + 16); !luaV_equalobj(0, (uint64_t *)(v10 + 16), a3); i = (_QWORD *)(v10 + 16))
  {
    if (*(_DWORD *)(v10 + 24) == 10 && (a3[1] & 0x40) != 0 && *i == *a3)
      break;
    v12 = *(int *)(v10 + 28);
    if ((_DWORD)v12)
      v10 += 32 * v12;
    else
      luaG_runerror(a1, "invalid key to 'next'");
  }
  v8 = *(_DWORD *)(a2 + 12);
  LODWORD(v7) = v8 + ((unint64_t)(v10 - *(_QWORD *)(a2 + 24)) >> 5) + 1;
LABEL_18:
  v13 = v8 - v7;
  if (v8 <= v7)
  {
LABEL_23:
    v17 = v7 - v8;
    v18 = 1 << *(_BYTE *)(a2 + 11);
    if ((int)v17 >= v18)
      return 0;
    while (1)
    {
      v19 = *(_QWORD *)(a2 + 24) + 32 * v17;
      if (*(_DWORD *)(v19 + 8))
        break;
      if (v18 == ++v17)
        return 0;
    }
    *(_OWORD *)a3 = *(_OWORD *)(v19 + 16);
    v21 = *(_OWORD *)(*(_QWORD *)(a2 + 24) + 32 * v17);
  }
  else
  {
    v14 = v7;
    v15 = 16 * v7;
    v16 = v14 + 1;
    while (!*(_DWORD *)(*(_QWORD *)(a2 + 16) + 8 + v15))
    {
      v15 += 16;
      ++v16;
      if (!--v13)
      {
        LODWORD(v7) = v8;
        goto LABEL_23;
      }
    }
    *a3 = v16;
    *((_DWORD *)a3 + 2) = 19;
    v21 = *(_OWORD *)(*(_QWORD *)(a2 + 16) + v15);
  }
  *((_OWORD *)a3 + 1) = v21;
  return 1;
}

_OWORD *luaH_resize(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v8;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _OWORD *result;
  uint64_t v17;
  __n128 *v18;
  int v19;
  int v20;
  uint64_t *v21;

  v8 = *(unsigned int *)(a2 + 12);
  v9 = *(unsigned __int8 *)(a2 + 11);
  v10 = *(char **)(a2 + 24);
  v11 = a3;
  if (v8 < a3)
  {
    v12 = luaM_realloc_(a1, *(_QWORD *)(a2 + 16), 16 * v8, 16 * a3);
    *(_QWORD *)(a2 + 16) = v12;
    v13 = *(unsigned int *)(a2 + 12);
    if (v13 < a3)
    {
      v14 = v11 - v13;
      v15 = (_DWORD *)(v12 + 16 * v13 + 8);
      do
      {
        *v15 = 0;
        v15 += 4;
        --v14;
      }
      while (v14);
    }
    *(_DWORD *)(a2 + 12) = a3;
  }
  result = setnodevector(a1, a2, a4);
  if (v8 > a3)
  {
    *(_DWORD *)(a2 + 12) = a3;
    v17 = v11;
    do
    {
      v18 = (__n128 *)(*(_QWORD *)(a2 + 16) + 16 * v17++);
      if (v18->n128_u32[2])
        luaH_setint(a1, a2, v17, v18);
    }
    while (v17 != v8);
    result = (_OWORD *)luaM_realloc_(a1, *(_QWORD *)(a2 + 16), 16 * v8, 16 * v11);
    *(_QWORD *)(a2 + 16) = result;
  }
  v19 = 1 << v9;
  if (v9 != 31)
  {
    v20 = v19 + 1;
    v21 = (uint64_t *)&v10[32 * (v19 - 1) + 16];
    do
    {
      if (*((_DWORD *)v21 - 2))
      {
        result = luaH_set(a1, a2, v21);
        *result = *((_OWORD *)v21 - 1);
      }
      --v20;
      v21 -= 4;
    }
    while (v20 > 1);
  }
  if (v10 != (char *)&dummynode_)
    return (_OWORD *)luaM_realloc_(a1, (uint64_t)v10, 32 * v19, 0);
  return result;
}

char *setnodevector(uint64_t a1, uint64_t a2, int a3)
{
  int v5;
  uint64_t v6;
  char *result;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  if (a3)
  {
    v5 = luaO_ceillog2(a3);
    if (v5 >= 31)
      luaG_runerror(a1, "table overflow");
    v6 = (1 << v5);
    result = (char *)luaM_realloc_(a1, 0, 0, 32 * v6);
    *(_QWORD *)(a2 + 24) = result;
    if (v5 != 31)
    {
      v8 = 0;
      if ((int)v6 <= 1)
        v9 = 1;
      else
        v9 = v6;
      v10 = 32 * v9;
      do
      {
        v11 = *(_QWORD *)(a2 + 24) + v8;
        *(_QWORD *)(v11 + 24) = 0;
        *(_DWORD *)(v11 + 8) = 0;
        v8 += 32;
      }
      while (v10 != v8);
      result = *(char **)(a2 + 24);
    }
  }
  else
  {
    LOBYTE(v5) = 0;
    v6 = 0;
    result = (char *)&dummynode_;
    *(_QWORD *)(a2 + 24) = &dummynode_;
  }
  *(_BYTE *)(a2 + 11) = v5;
  *(_QWORD *)(a2 + 32) = &result[32 * v6];
  return result;
}

__n128 luaH_setint(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  uint64_t *v8;
  __n128 result;
  uint64_t v10[2];

  v8 = luaH_getint(a2, a3);
  if (v8 == &luaO_nilobject_)
  {
    v10[0] = a3;
    v10[1] = 19;
    v8 = luaH_newkey(a1, a2, v10);
  }
  result = *a4;
  *(__n128 *)v8 = *a4;
  return result;
}

uint64_t *luaH_set(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *result;

  result = luaH_get(a2, a3);
  if (result == &luaO_nilobject_)
    return (uint64_t *)luaH_newkey(a1, a2, a3);
  return result;
}

_OWORD *luaH_resizearray(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v3;

  if (*(_UNKNOWN **)(a2 + 24) == &dummynode_)
    v3 = 0;
  else
    v3 = 1 << *(_BYTE *)(a2 + 11);
  return luaH_resize(a1, a2, a3, v3);
}

uint64_t luaH_new(uint64_t a1)
{
  uint64_t result;

  result = luaC_newobj(a1, 5, 56);
  *(_WORD *)(result + 10) = 255;
  *(_DWORD *)(result + 12) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = &dummynode_;
  *(_QWORD *)(result + 32) = &dummynode_;
  *(_QWORD *)(result + 40) = 0;
  return result;
}

uint64_t luaH_free(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)(a2 + 24);
  if (v4 != &dummynode_)
    luaM_realloc_(a1, (uint64_t)v4, 32 * (1 << *(_BYTE *)(a2 + 11)), 0);
  luaM_realloc_(a1, *(_QWORD *)(a2 + 16), 16 * *(unsigned int *)(a2 + 12), 0);
  return luaM_realloc_(a1, a2, 56, 0);
}

uint64_t *luaH_newkey(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int *v35;
  int v36;
  int v37;
  BOOL v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  _OWORD v45[8];
  uint64_t v46;

  v3 = a3;
  v46 = *MEMORY[0x1E0C80C00];
  v43 = 0;
  v44 = 0;
  v6 = *((_DWORD *)a3 + 2);
  if (v6 == 3)
  {
    *(_QWORD *)&v45[0] = 0;
    if (luaV_tointeger(a3, v45))
    {
      v43 = *(_QWORD *)&v45[0];
      LODWORD(v44) = 19;
      v3 = &v43;
    }
  }
  else if (!v6)
  {
    luaG_runerror(a1, "table index is nil", v43, v44);
  }
  v7 = mainposition(a2, v3);
  v8 = v7;
  if ((_UNKNOWN *)v7 == &dummynode_ || *(_DWORD *)(v7 + 8))
  {
    v9 = 0;
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 32);
    while (1)
    {
      v12 = v11 + v9;
      if (v11 + v9 <= v10)
        break;
      *(_QWORD *)(a2 + 32) = v12 - 32;
      v9 -= 32;
      if (!*(_DWORD *)(v12 - 8))
      {
        v13 = mainposition(a2, (_DWORD *)(v7 + 16));
        v14 = (_OWORD *)(v11 + v9);
        if (v13 == v8)
        {
          v41 = *(int *)(v8 + 28);
          if ((_DWORD)v41)
            *(_DWORD *)(v11 + v9 + 28) = (unint64_t)(v8 - v11 + 32 * v41 - v9) >> 5;
          *(_DWORD *)(v8 + 28) = (unint64_t)(v11 + v9 - v8) >> 5;
          v8 = v11 + v9;
        }
        else
        {
          do
          {
            v15 = v13;
            v13 += 32 * *(int *)(v13 + 28);
          }
          while (v13 != v8);
          *(_DWORD *)(v15 + 28) = (unint64_t)(v11 - v15 + v9) >> 5;
          v16 = *(_OWORD *)(v8 + 16);
          *v14 = *(_OWORD *)v8;
          v14[1] = v16;
          if (*(_DWORD *)(v8 + 28))
          {
            *(_DWORD *)(v11 + v9 + 28) += (unint64_t)(v8 - v11 - v9) >> 5;
            *(_DWORD *)(v8 + 28) = 0;
          }
          *(_DWORD *)(v8 + 8) = 0;
        }
        goto LABEL_51;
      }
    }
    v17 = 0;
    v18 = 0;
    memset(v45, 0, sizeof(v45));
    v19 = 1;
    v20 = 1;
    v21 = *(_DWORD *)(a2 + 12);
    do
    {
      v22 = v20;
      if (v20 > v21)
      {
        v22 = v21;
        if (v19 > v21)
          break;
      }
      if (v19 <= v22)
      {
        v23 = 0;
        v24 = v19 + 1 <= v22 + 1 ? v22 + 1 : v19 + 1;
        do
        {
          if (*(_DWORD *)(*(_QWORD *)(a2 + 16) + 16 * (v19 - 1) + 8))
            ++v23;
          ++v19;
        }
        while (v24 != v19);
        v19 = v24;
      }
      else
      {
        v23 = 0;
      }
      *((_DWORD *)v45 + v17) += v23;
      v18 += v23;
      ++v17;
      v20 *= 2;
    }
    while (v17 != 32);
    v25 = 0;
    v26 = 0;
    v27 = 32 * ~(-1 << *(_BYTE *)(a2 + 11));
    do
    {
      v28 = *(_QWORD *)(a2 + 24) + v27;
      if (*(_DWORD *)(v28 + 8))
      {
        v25 += countint((uint64_t *)(v28 + 16), (uint64_t)v45);
        ++v26;
      }
      v27 -= 32;
    }
    while (v27 != -32);
    v29 = v25 + v18 + countint(v3, (uint64_t)v45);
    if (v29)
    {
      v30 = 0;
      LODWORD(v31) = 0;
      v32 = 0;
      v33 = 0;
      v34 = 1;
      v35 = (int *)v45;
      do
      {
        v37 = *v35++;
        v36 = v37;
        v33 += v37;
        v38 = v33 > v30;
        if (v33 <= v30)
          v39 = v32;
        else
          v39 = v33;
        if (v38)
          v40 = v34;
        else
          v40 = v31;
        if (v36)
        {
          v32 = v39;
          v31 = v40;
        }
        else
        {
          v31 = v31;
        }
        v30 = v34 & 0x7FFFFFFF;
        v34 *= 2;
      }
      while (v29 > v30);
    }
    else
    {
      v32 = 0;
      v31 = 0;
    }
    luaH_resize(a1, a2, v31, v18 + v26 - v32 + 1);
    return luaH_set(a1, a2, v3);
  }
  else
  {
LABEL_51:
    *(_QWORD *)(v8 + 16) = *v3;
    *(_DWORD *)(v8 + 24) = *((_DWORD *)v3 + 2);
    if ((v3[1] & 0x40) != 0 && (*(_BYTE *)(a2 + 9) & 4) != 0 && (*(_BYTE *)(*v3 + 9) & 3) != 0)
      luaC_barrierback_(a1, a2);
  }
  return (uint64_t *)v8;
}

uint64_t mainposition(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;

  v4 = a2[2] & 0x3F;
  if (v4 > 0x12)
  {
    if (v4 == 22)
      goto LABEL_9;
    if (v4 == 20)
    {
      v7 = *(_QWORD *)a2;
      if (!*(_BYTE *)(*(_QWORD *)a2 + 10))
      {
        *(_DWORD *)(v7 + 12) = luaS_hash(v7 + 24, *(_QWORD *)(v7 + 16), *(_DWORD *)(v7 + 12));
        *(_BYTE *)(v7 + 10) = 1;
        v7 = *(_QWORD *)a2;
      }
      v5 = *(_DWORD *)(v7 + 12);
      goto LABEL_13;
    }
    if (v4 != 19)
      goto LABEL_9;
LABEL_8:
    v5 = *a2;
    goto LABEL_13;
  }
  if (v4 == 1)
    goto LABEL_8;
  if (v4 == 4)
  {
    v5 = *(_DWORD *)(*(_QWORD *)a2 + 12);
LABEL_13:
    v6 = v5 & ~(-1 << *(_BYTE *)(a1 + 11));
    return *(_QWORD *)(a1 + 24) + 32 * v6;
  }
LABEL_9:
  v6 = *a2 % (~(-1 << *(_BYTE *)(a1 + 11)) | 1u);
  return *(_QWORD *)(a1 + 24) + 32 * v6;
}

uint64_t *luaH_getint(uint64_t a1, uint64_t a2)
{
  uint64_t *result;
  uint64_t v3;

  if (a2 - 1 < (unint64_t)*(unsigned int *)(a1 + 12))
    return (uint64_t *)(*(_QWORD *)(a1 + 16) + 16 * (a2 - 1));
  result = (uint64_t *)(*(_QWORD *)(a1 + 24) + 32 * (a2 & ~(-1 << *(_BYTE *)(a1 + 11))));
  while (*((_DWORD *)result + 6) != 19 || result[2] != a2)
  {
    v3 = *((int *)result + 7);
    result += 4 * v3;
    if (!(_DWORD)v3)
      return &luaO_nilobject_;
  }
  return result;
}

uint64_t *luaH_getstr(uint64_t a1, uint64_t a2)
{
  uint64_t *result;
  uint64_t v3;

  result = (uint64_t *)(*(_QWORD *)(a1 + 24) + 32 * (*(_DWORD *)(a2 + 12) & ~(-1 << *(_BYTE *)(a1 + 11))));
  while (*((_DWORD *)result + 6) != 68 || result[2] != a2)
  {
    v3 = *((int *)result + 7);
    result += 4 * v3;
    if (!(_DWORD)v3)
      return &luaO_nilobject_;
  }
  return result;
}

uint64_t *luaH_get(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v4 = a2[1] & 0x3F;
  if (v4 <= 3)
  {
    if (!v4)
      return &luaO_nilobject_;
    if (v4 == 3)
    {
      v9 = 0;
      if (luaV_tointeger(a2, &v9))
        return luaH_getint(a1, v9);
    }
LABEL_13:
    v5 = mainposition(a1, a2);
    while (!luaV_equalobj(0, (uint64_t *)(v5 + 16), a2))
    {
      v7 = *(int *)(v5 + 28);
      v5 += 32 * v7;
      if (!(_DWORD)v7)
        return &luaO_nilobject_;
    }
    return (uint64_t *)v5;
  }
  if (v4 != 19)
  {
    if (v4 == 4)
    {
      v5 = *(_QWORD *)(a1 + 24) + 32 * (*(_DWORD *)(*a2 + 12) & ~(-1 << *(_BYTE *)(a1 + 11)));
      while (*(_DWORD *)(v5 + 24) != 68 || *(_QWORD *)(v5 + 16) != *a2)
      {
        v6 = *(int *)(v5 + 28);
        v5 += 32 * v6;
        if (!(_DWORD)v6)
          return &luaO_nilobject_;
      }
      return (uint64_t *)v5;
    }
    goto LABEL_13;
  }
  return luaH_getint(a1, *a2);
}

uint64_t luaH_getn(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t *v10;

  v2 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v2 && (v3 = *(_QWORD *)(a1 + 16), !*(_DWORD *)(v3 + 16 * (v2 - 1) + 8)))
  {
    if (v2 < 2)
    {
      return 0;
    }
    else
    {
      LODWORD(v7) = 0;
      do
      {
        v8 = (v7 + v2) >> 1;
        if (*(_DWORD *)(v3 + 16 * (v8 - 1) + 8))
        {
          v7 = v8;
        }
        else
        {
          LODWORD(v2) = (v7 + v2) >> 1;
          v7 = v7;
        }
      }
      while ((v2 - v7) > 1);
    }
  }
  else if (*(_UNKNOWN **)(a1 + 24) == &dummynode_)
  {
    return *(unsigned int *)(a1 + 12);
  }
  else
  {
    v4 = (v2 + 1);
    if (*((_DWORD *)luaH_getint(a1, v4) + 2))
    {
      while (!(v4 >> 30))
      {
        v5 = 2 * v4;
        v6 = luaH_getint(a1, (2 * v4));
        v7 = v4;
        v4 = (2 * v4);
        if (!*((_DWORD *)v6 + 2))
          goto LABEL_17;
      }
      LODWORD(v7) = -1;
      do
      {
        v10 = luaH_getint(a1, (v7 + 2));
        v7 = (v7 + 1);
      }
      while (*((_DWORD *)v10 + 2));
    }
    else
    {
      v5 = v2 + 1;
      v7 = v2;
LABEL_17:
      if (v5 - v7 >= 2)
      {
        do
        {
          v9 = (v5 + v7) >> 1;
          if (*((_DWORD *)luaH_getint(a1, v9) + 2))
          {
            v7 = v9;
          }
          else
          {
            v5 = (v5 + v7) >> 1;
            v7 = v7;
          }
        }
        while (v5 - v7 > 1);
      }
    }
  }
  return v7;
}

uint64_t countint(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v5;

  if (*((_DWORD *)a1 + 2) != 19)
    return 0;
  v2 = *a1;
  if ((unint64_t)(v2 - 2147483649) < 0xFFFFFFFF80000000 || (_DWORD)v2 == 0)
    return 0;
  v5 = luaO_ceillog2(v2);
  ++*(_DWORD *)(a2 + 4 * v5);
  return 1;
}

uint64_t luaopen_table(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  luaL_checkversion_(a1, 136, 503.0, a3, a4, a5, a6, a7, a8, v15);
  lua_createtable((uint64_t)a1, 0, 7);
  luaL_setfuncs(a1, (uint64_t)&tab_funcs, 0, v9, v10, v11, v12, v13);
  return 1;
}

uint64_t tconcat()
{
  _QWORD *v0;
  const void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v11;
  void (*v12[2])(_QWORD *, uint64_t, uint64_t);
  _OWORD v13[514];
  uint64_t v14;

  v0 = (_QWORD *)MEMORY[0x1E0C80A78]();
  v14 = *MEMORY[0x1E0C80C00];
  v12[0] = 0;
  v12[1] = 0;
  memset(v13, 0, 512);
  v11 = 0;
  v1 = (const void *)luaL_optlstring(v0, 2, &byte_1DEBD87CE, &v11);
  checktab(v0, v12);
  v2 = luaL_optinteger(v0, 3, 1);
  if ((int)lua_type(v0, 4) <= 0)
    v3 = luaL_len(v0, 1);
  else
    v3 = luaL_checkinteger(v0, 4);
  v4 = v3;
  luaL_buffinit((uint64_t)v0, (uint64_t)v13);
  if (v2 < v4)
  {
    do
    {
      addfield(v0, (uint64_t)v13, v12, v2);
      luaL_addlstring((uint64_t)v13, v1, v11, v5, v6, v7, v8, v9);
      ++v2;
    }
    while (v4 != v2);
    goto LABEL_8;
  }
  if (v2 == v4)
LABEL_8:
    addfield(v0, (uint64_t)v13, v12, v4);
  luaL_pushresult((uint64_t)v13);
  return 1;
}

uint64_t tinsert(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD *, uint64_t, uint64_t);
  void (*v21)(_QWORD *, uint64_t, uint64_t);
  void (*v24)(_QWORD *, uint64_t, uint64_t);
  void (*v25)(_QWORD *, uint64_t, uint64_t);

  v24 = 0;
  v25 = 0;
  checktab(a1, &v24);
  v10 = luaL_len(a1, 1);
  v11 = lua_gettop((uint64_t)a1);
  if (v11 == 2)
  {
    v19 = v10 + 1;
LABEL_12:
    v25(a1, 1, v19);
    return 0;
  }
  if (v11 == 3)
  {
    v18 = luaL_checkinteger(a1, 2);
    v19 = v18;
    if (v18 < 1 || v18 > v10 + 1)
      luaL_argerror(a1, 2);
    if (v10 >= v19)
    {
      v20 = v24;
      v21 = v25;
      do
      {
        v20(a1, 1, v10);
        v21(a1, 1, v10 + 1);
      }
      while (v10-- > v19);
    }
    goto LABEL_12;
  }
  return luaL_error(a1, "wrong number of arguments to 'insert'", v12, v13, v14, v15, v16, v17, a9);
}

uint64_t pack(_QWORD *a1)
{
  signed int v2;
  unint64_t v3;

  v2 = lua_gettop((uint64_t)a1);
  lua_createtable((uint64_t)a1, v2, 1);
  lua_rotate(a1, 1, 1);
  if (v2 >= 1)
  {
    v3 = v2;
    do
      lua_rawseti(a1, 1, v3);
    while (v3-- > 1);
  }
  lua_pushinteger((uint64_t)a1, v2);
  lua_setfield(a1, 1, "n");
  return 1;
}

uint64_t unpack(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD *, uint64_t, uint64_t);
  uint64_t v22;
  _QWORD v24[2];

  v24[0] = 0;
  v24[1] = 0;
  checktab(a1, v24);
  v10 = luaL_optinteger(a1, 2, 1);
  if ((int)lua_type(a1, 3) <= 0)
    v11 = luaL_len(a1, 1);
  else
    v11 = luaL_checkinteger(a1, 3);
  v18 = v11;
  v19 = v11 - v10;
  if (v11 < v10)
    return 0;
  if (v19 <= 0x7FFFFFFE)
  {
    v20 = (v19 + 1);
    if (lua_checkstack(a1, (int)v19 + 1))
    {
      v21 = (void (*)(_QWORD *, uint64_t, uint64_t))v24[0];
      v22 = v18 + 1;
      do
        v21(a1, 1, v10++);
      while (v22 != v10);
      return v20;
    }
  }
  return luaL_error(a1, "too many results to unpack", v12, v13, v14, v15, v16, v17, a9);
}

uint64_t tremove(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(_QWORD *, uint64_t, uint64_t);
  void (*v6)(_QWORD *, uint64_t, uint64_t);
  void (*v8)(_QWORD *, uint64_t, uint64_t);
  void (*v9)(_QWORD *, uint64_t, uint64_t);

  v8 = 0;
  v9 = 0;
  checktab(a1, &v8);
  v2 = luaL_len(a1, 1);
  v3 = luaL_optinteger(a1, 2, v2);
  v4 = v3;
  if (v3 != v2 && (v3 < 1 || v3 > v2 + 1))
    luaL_argerror(a1, 1);
  v5 = v8;
  v8(a1, 1, v4);
  v6 = v9;
  if (v4 < v2)
  {
    do
    {
      v5(a1, 1, v4 + 1);
      v6(a1, 1, v4++);
    }
    while (v2 != v4);
    v4 = v2;
  }
  lua_pushnil((uint64_t)a1);
  v6(a1, 1, v4);
  return 1;
}

uint64_t tmove(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(_QWORD *, int, uint64_t);
  void (*v8)(_QWORD *, int, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = luaL_checkinteger(a1, 2);
  v3 = luaL_checkinteger(a1, 3);
  v4 = luaL_checkinteger(a1, 4);
  if ((int)lua_type(a1, 5) < 1)
    v5 = 1;
  else
    v5 = 5;
  v6 = v3 - v2;
  if (v3 >= v2)
  {
    if (luaL_getmetafield(a1, 1, "__index"))
    {
      v7 = (void (*)(_QWORD *, int, uint64_t))lua_geti;
    }
    else
    {
      luaL_checktype(a1, 1, 5);
      v7 = (void (*)(_QWORD *, int, uint64_t))lua_rawgeti;
    }
    if (luaL_getmetafield(a1, v5, "__newindex"))
    {
      v8 = (void (*)(_QWORD *, int, uint64_t))lua_seti;
    }
    else
    {
      luaL_checktype(a1, v5, 5);
      v8 = lua_rawseti;
    }
    if (v2 <= 0 && v3 >= v2 + 0x7FFFFFFFFFFFFFFFLL)
      luaL_argerror(a1, 3);
    if (v4 > (v6 ^ 0x7FFFFFFFFFFFFFFFLL))
      luaL_argerror(a1, 4);
    v9 = v4 - v2;
    if (v4 <= v2)
    {
      if ((v6 & 0x8000000000000000) == 0)
      {
        v11 = v3 + 1;
        do
        {
          v7(a1, 1, v2);
          v8(a1, v5, v4);
          ++v2;
          ++v4;
        }
        while (v11 != v2);
      }
    }
    else if ((v6 & 0x8000000000000000) == 0)
    {
      v10 = v2 - 1;
      do
      {
        v7(a1, 1, v3);
        v8(a1, v5, v9 + v3--);
      }
      while (v10 != v3);
    }
  }
  lua_pushvalue(a1, v5);
  return 1;
}

uint64_t sort(_QWORD *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v9[2])(_QWORD *, uint64_t, uint64_t);

  v9[0] = 0;
  v9[1] = 0;
  checktab(a1, v9);
  v2 = luaL_len(a1, 1);
  luaL_checkstack(a1, 50, (uint64_t)&byte_1DEBD87CE, v3, v4, v5, v6, v7, (uint64_t)v9[0]);
  if ((int)lua_type(a1, 2) >= 1)
    luaL_checktype(a1, 2, 6);
  lua_settop((uint64_t)a1, 2u);
  auxsort((uint64_t)a1, v9, 1, v2);
  return 0;
}

uint64_t checktab(_QWORD *a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = 0;
  a2[1] = 0;
  result = lua_getmetatable(a1, 1);
  if ((_DWORD)result)
  {
    lua_pushstring(a1, "__index");
    if (lua_rawget(a1, -2))
      *a2 = lua_geti;
    lua_pushstring(a1, "__newindex");
    if (lua_rawget(a1, -3))
      a2[1] = lua_seti;
    result = lua_settop((uint64_t)a1, 0xFFFFFFFC);
  }
  if (!*a2 || !a2[1])
  {
    result = luaL_checktype(a1, 1, 5);
    if (!*a2)
      *a2 = lua_rawgeti;
    if (!a2[1])
      a2[1] = lua_rawseti;
  }
  return result;
}

uint64_t addfield(_QWORD *a1, uint64_t a2, void (**a3)(_QWORD *, uint64_t, uint64_t), uint64_t a4)
{
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  (*a3)(a1, 1, a4);
  if (!lua_isstring(a1, -1))
  {
    v6 = lua_type(a1, -1);
    v7 = lua_typename((uint64_t)a1, v6);
    luaL_error(a1, "invalid value (%s) at index %d in table for 'concat'", v8, v9, v10, v11, v12, v13, (uint64_t)v7);
  }
  return luaL_addvalue(a2);
}

uint64_t auxsort(uint64_t result, void (**a2)(_QWORD *, uint64_t, uint64_t), int a3, int a4)
{
  int v4;
  int v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __n128 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;

  if (a3 < a4)
  {
    v4 = a4;
    v5 = a3;
    v7 = (_QWORD *)result;
    do
    {
      v8 = v5;
      (*a2)(v7, 1, v5);
      v9 = v4;
      (*a2)(v7, 1, v4);
      if (sort_comp(v7, -1, -2))
      {
        a2[1](v7, 1, v5);
        result = ((uint64_t (*)(_QWORD *, uint64_t, _QWORD))a2[1])(v7, 1, v4);
      }
      else
      {
        result = lua_settop((uint64_t)v7, 0xFFFFFFFD);
      }
      if (v4 - v5 == 1)
        break;
      v10 = v4 + v5;
      if (v4 + v5 < 0 != __OFADD__(v4, v5))
        ++v10;
      v11 = (uint64_t)v10 >> 1;
      (*a2)(v7, 1, v11);
      (*a2)(v7, 1, v5);
      if (sort_comp(v7, -2, -1))
      {
        a2[1](v7, 1, v11);
        result = ((uint64_t (*)(_QWORD *, uint64_t, _QWORD))a2[1])(v7, 1, v5);
      }
      else
      {
        lua_settop((uint64_t)v7, 0xFFFFFFFE);
        (*a2)(v7, 1, v9);
        if (sort_comp(v7, -1, -2))
        {
          a2[1](v7, 1, v11);
          result = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t))a2[1])(v7, 1, v9);
        }
        else
        {
          result = lua_settop((uint64_t)v7, 0xFFFFFFFD);
        }
      }
      if ((_DWORD)v9 - v5 == 2)
        break;
      (*a2)(v7, 1, v11);
      v12 = lua_pushvalue(v7, -1);
      v13 = v9 - 1;
      v14 = (int)v9 - 1;
      ((void (*)(_QWORD *, uint64_t, uint64_t, __n128))*a2)(v7, 1, v14, v12);
      v35 = v14;
      v36 = v5;
      do
      {
        a2[1](v7, 1, v11);
        a2[1](v7, 1, v14);
        v11 = v5 + 1;
        (*a2)(v7, 1, v11);
        if (sort_comp(v7, -1, -2))
        {
          v11 = v5 + 1;
          do
          {
            if (v11 >= v9)
              luaL_error(v7, "invalid order function for sorting", v15, v16, v17, v18, v19, v20, v34);
            lua_settop((uint64_t)v7, 0xFFFFFFFE);
            (*a2)(v7, 1, ++v11);
            ++v5;
          }
          while (sort_comp(v7, -1, -2));
          v37 = v5++;
        }
        else
        {
          v37 = v5++;
        }
        v21 = v13 - 1;
        v14 = v13 - 1;
        (*a2)(v7, 1, v14);
        if (sort_comp(v7, -3, -1))
        {
          do
          {
            if (v14 <= v8)
              luaL_error(v7, "invalid order function for sorting", v22, v23, v24, v25, v26, v27, v34);
            lua_settop((uint64_t)v7, 0xFFFFFFFE);
            (*a2)(v7, 1, --v14);
            --v13;
          }
          while (sort_comp(v7, -3, -1));
          v21 = v13 - 1;
        }
        v28 = v13 <= v5;
        v13 = v21;
      }
      while (!v28);
      lua_settop((uint64_t)v7, 0xFFFFFFFC);
      (*a2)(v7, 1, v35);
      (*a2)(v7, 1, v11);
      a2[1](v7, 1, v35);
      a2[1](v7, 1, v11);
      v29 = v5 - v36;
      v30 = v9 - v5;
      v31 = (int)(v5 - v36) >= (int)v9 - v5 ? v36 : v37 + 2;
      v4 = v29 >= v30 ? v37 : v9;
      v32 = v29 >= v30 ? v9 : v37;
      v33 = v29 >= v30 ? v37 + 2 : v36;
      result = auxsort(v7, a2, v33, v32);
      v5 = v31;
    }
    while (v31 < v4);
  }
  return result;
}

uint64_t sort_comp(_QWORD *a1, int a2, int a3)
{
  uint64_t v6;

  if (!lua_type(a1, 2))
    return lua_compare(a1, a2, a3, 1);
  lua_pushvalue(a1, 2);
  lua_pushvalue(a1, a2 - 1);
  lua_pushvalue(a1, a3 - 2);
  lua_callk((uint64_t)a1, 2, 1, 0, 0);
  v6 = lua_toBOOLean(a1, -1);
  lua_settop((uint64_t)a1, 0xFFFFFFFE);
  return v6;
}

uint64_t luaT_init(_QWORD *a1)
{
  uint64_t i;
  uint64_t result;

  for (i = 0; i != 24; ++i)
  {
    *(_QWORD *)(a1[3] + i * 8 + 248) = luaS_new(a1, luaT_init_luaT_eventname[i]);
    result = luaC_fix((uint64_t)a1, *(_QWORD *)(a1[3] + i * 8 + 248));
  }
  return result;
}

uint64_t *luaT_gettm(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t *result;

  result = luaH_getstr(a1, a3);
  if (!*((_DWORD *)result + 2))
  {
    result = 0;
    *(_BYTE *)(a1 + 10) |= 1 << a2;
  }
  return result;
}

uint64_t *luaT_gettmbyobj(uint64_t a1, _DWORD *a2, unsigned int a3)
{
  uint64_t *v3;
  uint64_t v4;

  if ((a2[2] & 0xF) == 7)
  {
    v3 = (uint64_t *)(*(_QWORD *)a2 + 16);
  }
  else if ((a2[2] & 0xF) == 5)
  {
    v3 = (uint64_t *)(*(_QWORD *)a2 + 40);
  }
  else
  {
    v3 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 8 * (a2[2] & 0xF) + 440);
  }
  v4 = *v3;
  if (v4)
    return luaH_getstr(v4, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * a3 + 248));
  else
    return &luaO_nilobject_;
}

__n128 luaT_callTM(_QWORD *a1, _OWORD *a2, _OWORD *a3, _OWORD *a4, _OWORD *a5, int a6)
{
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  _OWORD *v12;
  _OWORD *v13;
  __n128 result;
  uint64_t v15;
  __n128 *v16;

  v9 = a1[7];
  v10 = (_OWORD *)a1[2];
  a1[2] = v10 + 1;
  *v10 = *a2;
  v11 = (_OWORD *)a1[2];
  a1[2] = v11 + 1;
  *v11 = *a3;
  v12 = (_OWORD *)a1[2];
  a1[2] = v12 + 1;
  *v12 = *a4;
  if (!a6)
  {
    v13 = (_OWORD *)a1[2];
    a1[2] = v13 + 1;
    *v13 = *a5;
  }
  luaD_call((uint64_t)a1, (char *)(a1[2] - 16 * (4 - a6)), a6, *(_BYTE *)(a1[4] + 66) & 2);
  if (a6)
  {
    v15 = a1[7];
    v16 = (__n128 *)(a1[2] - 16);
    a1[2] = v16;
    result = *v16;
    *(__n128 *)((char *)a5 + v15 - v9) = *v16;
  }
  return result;
}

uint64_t luaT_callbinTM(_QWORD *a1, _DWORD *a2, _DWORD *a3, _OWORD *a4, unsigned int a5)
{
  uint64_t *v10;
  uint64_t v11;

  v10 = luaT_gettmbyobj((uint64_t)a1, a2, a5);
  if (!*((_DWORD *)v10 + 2))
  {
    v10 = luaT_gettmbyobj((uint64_t)a1, a3, a5);
    if (!*((_DWORD *)v10 + 2))
      return 0;
  }
  v11 = 1;
  luaT_callTM(a1, v10, a2, a3, a4, 1);
  return v11;
}

uint64_t luaT_trybinTM(_QWORD *a1, _DWORD *a2, _DWORD *a3, _OWORD *a4, unsigned int a5)
{
  uint64_t result;
  uint64_t v10;

  result = luaT_callbinTM(a1, a2, a3, a4, a5);
  if (!(_DWORD)result)
  {
    if (a5 - 13 >= 5 && a5 != 19)
    {
      if (a5 != 22)
        return luaG_opinterror((uint64_t)a1, a2, (uint64_t)a3, "perform arithmetic on");
      luaG_concaterror((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
    }
    v10 = 0;
    if (a2[2] == 3)
    {
      v10 = *(_QWORD *)a2;
    }
    else if (!luaV_tonumber_(a2, (double *)&v10))
    {
      goto LABEL_13;
    }
    if (a3[2] == 3)
    {
      v10 = *(_QWORD *)a3;
LABEL_12:
      luaG_tointerror((uint64_t)a1, a2, (uint64_t)a3);
      return luaG_opinterror((uint64_t)a1, a2, (uint64_t)a3, "perform arithmetic on");
    }
    if (luaV_tonumber_(a3, (double *)&v10))
      goto LABEL_12;
LABEL_13:
    luaG_opinterror((uint64_t)a1, a2, (uint64_t)a3, "perform bitwise operation on");
    return luaG_opinterror((uint64_t)a1, a2, (uint64_t)a3, "perform arithmetic on");
  }
  return result;
}

uint64_t luaT_callorderTM(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _DWORD *v5;
  uint64_t result;

  if (!luaT_callbinTM(a1, a2, a3, *(_QWORD *)(a1 + 16), a4))
    return 0xFFFFFFFFLL;
  v5 = *(_DWORD **)(a1 + 16);
  result = v5[2];
  if ((_DWORD)result)
    return (_DWORD)result != 1 || *v5 != 0;
  return result;
}

uint64_t luaU_undump(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  int v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  const char *v13;
  double v14;

  v13 = 0;
  v5 = *(unsigned __int8 *)a4;
  if (v5 == 27)
  {
    v6 = "binary string";
  }
  else
  {
    v6 = a4;
    if (v5 == 64 || v5 == 61)
      v6 = a4 + 1;
  }
  v12[0] = a1;
  v12[1] = a2;
  v12[2] = a3;
  v13 = v6;
  checkliteral((uint64_t)v12, "Lua", "not a");
  LOBYTE(v14) = 0;
  LoadBlock((uint64_t)v12, (char *)&v14, 1uLL);
  if (LOBYTE(v14) != 83)
  {
    luaO_pushfstring(a1, "%s: %s precompiled chunk", v6, "version mismatch in");
    luaD_throw(a1, 3);
  }
  LOBYTE(v14) = 0;
  LoadBlock((uint64_t)v12, (char *)&v14, 1uLL);
  if (LOBYTE(v14))
  {
    luaO_pushfstring(a1, "%s: %s precompiled chunk", v6, "format mismatch in");
    luaD_throw(a1, 3);
  }
  checkliteral((uint64_t)v12, "\x19\x93\r\n\x1A\n", "corrupted");
  fchecksize((uint64_t)v12, 4, "int");
  fchecksize((uint64_t)v12, 8, "size_t");
  fchecksize((uint64_t)v12, 4, "Instruction");
  fchecksize((uint64_t)v12, 8, "lua_Integer");
  fchecksize((uint64_t)v12, 8, "lua_Number");
  v14 = 0.0;
  LoadBlock((uint64_t)v12, (char *)&v14, 8uLL);
  if (*(_QWORD *)&v14 != 22136)
  {
    luaO_pushfstring(a1, "%s: %s precompiled chunk", v6, "endianness mismatch in");
    luaD_throw(a1, 3);
  }
  v14 = 0.0;
  LoadBlock((uint64_t)v12, (char *)&v14, 8uLL);
  if (v14 != 370.5)
  {
    luaO_pushfstring(a1, "%s: %s precompiled chunk", v6, "float format mismatch in");
    luaD_throw(a1, 3);
  }
  LOBYTE(v14) = 0;
  LoadBlock((uint64_t)v12, (char *)&v14, 1uLL);
  v7 = luaF_newLclosure(a1, LOBYTE(v14));
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v8 = v7;
  *(_DWORD *)(v8 + 8) = 70;
  v9 = *(_QWORD *)(a1 + 16) + 16;
  *(_QWORD *)(a1 + 16) = v9;
  if (*(_QWORD *)(a1 + 48) - v9 <= 15)
    luaD_growstack(a1, 0);
  luaF_newproto(a1);
  *(_QWORD *)(v7 + 24) = v10;
  LoadFunction(v12, v10, 0);
  return v7;
}

size_t LoadFunction(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t String;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  char *v35;
  int v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  size_t result;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  String = LoadString((uint64_t)a1);
  if (String)
    v7 = String;
  else
    v7 = a3;
  *(_QWORD *)(a2 + 104) = v7;
  LODWORD(v45) = 0;
  LoadBlock((uint64_t)a1, (char *)&v45, 4uLL);
  *(_DWORD *)(a2 + 40) = v45;
  LODWORD(v45) = 0;
  LoadBlock((uint64_t)a1, (char *)&v45, 4uLL);
  *(_DWORD *)(a2 + 44) = v45;
  LOBYTE(v45) = 0;
  LoadBlock((uint64_t)a1, (char *)&v45, 1uLL);
  *(_BYTE *)(a2 + 10) = v45;
  LOBYTE(v45) = 0;
  LoadBlock((uint64_t)a1, (char *)&v45, 1uLL);
  *(_BYTE *)(a2 + 11) = v45;
  LOBYTE(v45) = 0;
  LoadBlock((uint64_t)a1, (char *)&v45, 1uLL);
  *(_BYTE *)(a2 + 12) = v45;
  LODWORD(v45) = 0;
  LoadBlock((uint64_t)a1, (char *)&v45, 4uLL);
  v8 = v45;
  v9 = 4 * (int)v45;
  v10 = (char *)luaM_realloc_(*a1, 0, 0, v9);
  *(_QWORD *)(a2 + 56) = v10;
  *(_DWORD *)(a2 + 24) = v8;
  LoadBlock((uint64_t)a1, v10, v9);
  LODWORD(v45) = 0;
  LoadBlock((uint64_t)a1, (char *)&v45, 4uLL);
  v11 = v45;
  v12 = luaM_realloc_(*a1, 0, 0, 16 * (int)v45);
  *(_QWORD *)(a2 + 48) = v12;
  *(_DWORD *)(a2 + 20) = v11;
  if (v11 >= 1)
  {
    v13 = v11;
    v14 = (_DWORD *)(v12 + 8);
    v15 = v11;
    do
    {
      *v14 = 0;
      v14 += 4;
      --v15;
    }
    while (v15);
    v16 = 0;
    v17 = 16 * v13;
    while (2)
    {
      v18 = *(_QWORD *)(a2 + 48);
      LOBYTE(v45) = 0;
      LoadBlock((uint64_t)a1, (char *)&v45, 1uLL);
      v19 = v45;
      switch((char)v45)
      {
        case 0:
          goto LABEL_15;
        case 1:
          LOBYTE(v45) = 0;
          LoadBlock((uint64_t)a1, (char *)&v45, 1uLL);
          *(_DWORD *)(v18 + v16) = v45;
          v19 = 1;
          goto LABEL_15;
        case 2:
          goto LABEL_16;
        case 3:
          v45 = 0;
          LoadBlock((uint64_t)a1, (char *)&v45, 8uLL);
          *(_QWORD *)(v18 + v16) = v45;
          v19 = 3;
          goto LABEL_15;
        case 4:
          goto LABEL_12;
        default:
          if (v45 == 19)
          {
            v45 = 0;
            LoadBlock((uint64_t)a1, (char *)&v45, 8uLL);
            *(_QWORD *)(v18 + v16) = v45;
            v19 = 19;
          }
          else
          {
            if (v45 != 20)
              goto LABEL_16;
LABEL_12:
            v20 = LoadString((uint64_t)a1);
            *(_QWORD *)(v18 + v16) = v20;
            v19 = *(unsigned __int8 *)(v20 + 8) | 0x40;
          }
LABEL_15:
          *(_DWORD *)(v18 + v16 + 8) = v19;
LABEL_16:
          v16 += 16;
          if (v17 == v16)
            break;
          continue;
      }
      break;
    }
  }
  LODWORD(v45) = 0;
  LoadBlock((uint64_t)a1, (char *)&v45, 4uLL);
  v21 = v45;
  v22 = (_QWORD *)luaM_realloc_(*a1, 0, 0, 16 * (int)v45);
  *(_QWORD *)(a2 + 88) = v22;
  *(_DWORD *)(a2 + 16) = v21;
  if (v21 >= 1)
  {
    v23 = v21;
    v24 = v21;
    do
    {
      *v22 = 0;
      v22 += 2;
      --v24;
    }
    while (v24);
    v25 = 0;
    v26 = 16 * v23;
    do
    {
      LOBYTE(v45) = 0;
      LoadBlock((uint64_t)a1, (char *)&v45, 1uLL);
      *(_BYTE *)(*(_QWORD *)(a2 + 88) + v25 + 8) = v45;
      LOBYTE(v45) = 0;
      LoadBlock((uint64_t)a1, (char *)&v45, 1uLL);
      *(_BYTE *)(*(_QWORD *)(a2 + 88) + v25 + 9) = v45;
      v25 += 16;
    }
    while (v26 != v25);
  }
  LODWORD(v45) = 0;
  LoadBlock((uint64_t)a1, (char *)&v45, 4uLL);
  v27 = v45;
  *(_QWORD *)(a2 + 64) = luaM_realloc_(*a1, 0, 0, 8 * (int)v45);
  *(_DWORD *)(a2 + 32) = v27;
  if (v27 >= 1)
  {
    v28 = 0;
    v29 = 8 * v27;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a2 + 64) + v28) = 0;
      v28 += 8;
    }
    while (v29 != v28);
    v30 = 0;
    do
    {
      v31 = luaF_newproto(*a1);
      *(_QWORD *)(*(_QWORD *)(a2 + 64) + v30) = v32;
      LoadFunction(a1, *(_QWORD *)(*(_QWORD *)(a2 + 64) + v30), *(_QWORD *)(a2 + 104), v31);
      v30 += 8;
    }
    while (v29 != v30);
  }
  LODWORD(v45) = 0;
  LoadBlock((uint64_t)a1, (char *)&v45, 4uLL);
  v33 = v45;
  v34 = 4 * (int)v45;
  v35 = (char *)luaM_realloc_(*a1, 0, 0, v34);
  *(_QWORD *)(a2 + 72) = v35;
  *(_DWORD *)(a2 + 28) = v33;
  LoadBlock((uint64_t)a1, v35, v34);
  LODWORD(v45) = 0;
  LoadBlock((uint64_t)a1, (char *)&v45, 4uLL);
  v36 = v45;
  v37 = (_QWORD *)luaM_realloc_(*a1, 0, 0, 16 * (int)v45);
  *(_QWORD *)(a2 + 80) = v37;
  *(_DWORD *)(a2 + 36) = v36;
  if (v36 >= 1)
  {
    v38 = v36;
    v39 = v36;
    do
    {
      *v37 = 0;
      v37 += 2;
      --v39;
    }
    while (v39);
    v40 = 0;
    v41 = 16 * v38;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a2 + 80) + v40) = LoadString((uint64_t)a1);
      LODWORD(v45) = 0;
      LoadBlock((uint64_t)a1, (char *)&v45, 4uLL);
      *(_DWORD *)(*(_QWORD *)(a2 + 80) + v40 + 8) = v45;
      LODWORD(v45) = 0;
      LoadBlock((uint64_t)a1, (char *)&v45, 4uLL);
      *(_DWORD *)(*(_QWORD *)(a2 + 80) + v40 + 12) = v45;
      v40 += 16;
    }
    while (v41 != v40);
  }
  LODWORD(v45) = 0;
  result = LoadBlock((uint64_t)a1, (char *)&v45, 4uLL);
  if ((int)v45 >= 1)
  {
    v43 = 0;
    v44 = 16 * v45;
    do
    {
      result = LoadString((uint64_t)a1);
      *(_QWORD *)(*(_QWORD *)(a2 + 88) + v43) = result;
      v43 += 16;
    }
    while (v44 != v43);
  }
  return result;
}

uint64_t checkliteral(uint64_t a1, char *__s, const char *a3)
{
  size_t v6;
  uint64_t result;
  char __s2[12];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = strlen(__s);
  LoadBlock(a1, __s2, v6);
  result = memcmp(__s, __s2, v6);
  if ((_DWORD)result)
  {
    luaO_pushfstring(*(_QWORD *)a1, "%s: %s precompiled chunk", *(const char **)(a1 + 24), a3);
    return luaD_throw(*(_QWORD *)a1, 3);
  }
  return result;
}

size_t fchecksize(uint64_t a1, uint64_t a2, const char *a3)
{
  size_t result;
  const char *v7;
  unsigned __int8 v8;

  v8 = 0;
  result = LoadBlock(a1, (char *)&v8, 1uLL);
  if (v8 != a2)
  {
    v7 = (const char *)luaO_pushfstring(*(_QWORD *)a1, "%s size mismatch in", a3);
    luaO_pushfstring(*(_QWORD *)a1, "%s: %s precompiled chunk", *(const char **)(a1 + 24), v7);
    return luaD_throw(*(_QWORD *)a1, 3);
  }
  return result;
}

size_t LoadBlock(uint64_t a1, char *a2, size_t a3)
{
  size_t result;

  result = luaZ_read(*(unint64_t **)(a1 + 8), a2, a3);
  if (result)
  {
    luaO_pushfstring(*(_QWORD *)a1, "%s: %s precompiled chunk", *(const char **)(a1 + 24), "truncated");
    return luaD_throw(*(_QWORD *)a1, 3);
  }
  return result;
}

uint64_t LoadString(uint64_t a1)
{
  size_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  size_t __n;
  unsigned __int8 v8;

  v8 = 0;
  LoadBlock(a1, (char *)&v8, 1uLL);
  v2 = v8;
  __n = v8;
  if (v8 == 255)
  {
    LoadBlock(a1, (char *)&__n, 8uLL);
    v2 = __n;
    if (__n)
      goto LABEL_3;
  }
  else if (v8)
  {
LABEL_3:
    v3 = *(_QWORD *)a1;
    v4 = *(uint64_t **)(a1 + 16);
    __n = v2 - 1;
    v5 = (char *)luaZ_openspace(v3, v4, v2 - 1);
    LoadBlock(a1, v5, __n);
    return luaS_newlstr(*(_QWORD **)a1, v5, __n);
  }
  return 0;
}

uint64_t luaopen_utf8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  luaL_checkversion_(a1, 136, 503.0, a3, a4, a5, a6, a7, a8, v15);
  lua_createtable((uint64_t)a1, 0, 6);
  luaL_setfuncs(a1, (uint64_t)&funcs, 0, v9, v10, v11, v12, v13);
  lua_pushlstring(a1, "[", 0xEuLL);
  lua_setfield(a1, -2, "charpattern");
  return 1;
}

uint64_t byteoffset(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v18;
  int v19;
  uint64_t v21;
  int64_t v22;

  v22 = 0;
  v2 = luaL_checklstring(a1, 1, &v22);
  v3 = luaL_checkinteger(a1, 2);
  if (v3 < 0)
    v4 = v22 + 1;
  else
    v4 = 1;
  v5 = luaL_optinteger(a1, 3, v4);
  v12 = v5;
  if (v5 < 0)
  {
    v12 = 0;
    if (v22 < (unint64_t)-v5)
    {
LABEL_9:
      luaL_argerror(a1, 3);
      goto LABEL_10;
    }
    v12 = v5 + v22 + 1;
  }
  v13 = v12 - 1;
  if (v12 < 1)
    goto LABEL_9;
  --v12;
  if (v13 > v22)
    goto LABEL_9;
LABEL_10:
  if (!v3)
  {
    if (v12 >= 1)
    {
      while ((*(_BYTE *)(v2 + v12) & 0xC0) == 0x80)
      {
        if (v12-- <= 1)
        {
          v12 = 0;
          goto LABEL_36;
        }
      }
    }
    goto LABEL_36;
  }
  if ((*(_BYTE *)(v2 + v12) & 0xC0) == 0x80)
    luaL_error(a1, "initial position is a continuation byte", v6, v7, v8, v9, v10, v11, v21);
  if ((v3 & 0x8000000000000000) == 0)
  {
    v14 = v3 - 1;
    if ((unint64_t)v3 < 2 || v12 >= v22)
    {
      v16 = v3 - 1;
    }
    else
    {
      do
      {
        do
          v15 = *(_BYTE *)(v2 + 1 + v12++);
        while ((v15 & 0xC0) == 0x80);
        v16 = v14 - 1;
        if (v14 < 2)
          break;
        --v14;
      }
      while (v12 < v22);
    }
    goto LABEL_33;
  }
  if (v12 >= 1)
  {
    while (2)
    {
      v18 = v12;
      do
      {
        v12 = v18 - 1;
        if (v18 <= 1)
        {
          v12 = 0;
          if (v3 != -1)
            goto LABEL_34;
          goto LABEL_36;
        }
        v19 = *(_BYTE *)(v2 - 1 + v18--) & 0xC0;
      }
      while (v19 == 128);
      v16 = v3 + 1;
      if (v3 <= -2)
      {
        ++v3;
        if (v12 + 1 > 1)
          continue;
      }
      break;
    }
LABEL_33:
    if (v16)
      goto LABEL_34;
LABEL_36:
    lua_pushinteger((uint64_t)a1, v12 + 1);
    return 1;
  }
LABEL_34:
  lua_pushnil((uint64_t)a1);
  return 1;
}

uint64_t codepoint(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  unsigned __int8 *v21;
  uint64_t v23;
  unint64_t v24;

  v24 = 0;
  v2 = luaL_checklstring(a1, 1, &v24);
  v3 = luaL_optinteger(a1, 2, 1);
  if (v24 >= -v3)
    v4 = v3 + v24 + 1;
  else
    v4 = 0;
  if (v3 < 0)
    v5 = v4;
  else
    v5 = v3;
  v6 = luaL_optinteger(a1, 3, v5);
  v13 = v24;
  if (v24 >= -v6)
    v14 = v6 + v24 + 1;
  else
    v14 = 0;
  if (v6 < 0)
    v15 = v14;
  else
    v15 = v6;
  if (v5 <= 0)
  {
    luaL_argerror(a1, 2);
    v13 = v24;
  }
  if (v15 > v13)
    luaL_argerror(a1, 3);
  v16 = v15 - v5;
  if (v15 < v5)
    return 0;
  if (v16 < 0x7FFFFFFF)
  {
    luaL_checkstack(a1, v16 + 1, (uint64_t)"string slice too long", v8, v9, v10, v11, v12, v23);
    LODWORD(v17) = 0;
    v19 = v2 + v15;
    v20 = (char *)(v5 + v2 - 1);
    while (1)
    {
      HIDWORD(v23) = 0;
      v21 = utf8_decode(v20, (unsigned int *)&v23 + 1);
      if (!v21)
        break;
      v20 = (char *)v21;
      lua_pushinteger((uint64_t)a1, SHIDWORD(v23));
      v17 = (v17 + 1);
      if ((unint64_t)v20 >= v19)
        return v17;
    }
    v18 = "invalid UTF-8 code";
  }
  else
  {
    v18 = "string slice too long";
  }
  return luaL_error(a1, v18, v7, v8, v9, v10, v11, v12, v23);
}

uint64_t utfchar()
{
  _QWORD *v0;
  int v1;
  int v2;
  uint64_t v3;
  _OWORD v5[514];
  uint64_t v6;

  v0 = (_QWORD *)MEMORY[0x1E0C80A78]();
  v6 = *MEMORY[0x1E0C80C00];
  v1 = lua_gettop((uint64_t)v0);
  if (v1 == 1)
  {
    pushutfchar(v0, 1);
  }
  else
  {
    v2 = v1;
    memset(v5, 0, 512);
    luaL_buffinit((uint64_t)v0, (uint64_t)v5);
    if (v2 >= 1)
    {
      LODWORD(v3) = 0;
      do
      {
        v3 = (v3 + 1);
        pushutfchar(v0, v3);
        luaL_addvalue((uint64_t)v5);
      }
      while (v2 != (_DWORD)v3);
    }
    luaL_pushresult((uint64_t)v5);
  }
  return 1;
}

uint64_t utflen(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v15;

  v15 = 0;
  v2 = luaL_checklstring(a1, 1, &v15);
  v3 = luaL_optinteger(a1, 2, 1);
  if (v15 >= -v3)
    v4 = v3 + v15 + 1;
  else
    v4 = 0;
  if (v3 < 0)
    v5 = v4;
  else
    v5 = v3;
  v6 = luaL_optinteger(a1, 3, -1);
  v7 = v15;
  if (v15 >= -v6)
    v8 = v6 + v15 + 1;
  else
    v8 = 0;
  if (v6 < 0)
    v9 = v8;
  else
    v9 = v6;
  v10 = (unsigned __int8 *)(v5 - 1);
  if (v5 < 1 || (--v5, (uint64_t)v10 > (uint64_t)v15))
  {
    luaL_argerror(a1, 2);
    v7 = v15;
    v10 = (unsigned __int8 *)v5;
  }
  if (v9 > v7)
    luaL_argerror(a1, 3);
  if ((uint64_t)v10 >= v9)
  {
    v11 = 0;
LABEL_24:
    v13 = 1;
  }
  else
  {
    v11 = 0;
    while (1)
    {
      v12 = utf8_decode((char *)&v10[v2], 0);
      if (!v12)
        break;
      v10 = &v12[-v2];
      ++v11;
      if ((uint64_t)&v12[-v2] >= v9)
        goto LABEL_24;
    }
    lua_pushnil((uint64_t)a1);
    v11 = (uint64_t)(v10 + 1);
    v13 = 2;
  }
  lua_pushinteger((uint64_t)a1, v11);
  return v13;
}

uint64_t iter_codes(_QWORD *a1)
{
  luaL_checklstring(a1, 1, 0);
  lua_pushcclosure((uint64_t)a1, (uint64_t)iter_aux, 0);
  lua_pushvalue(a1, 1);
  lua_pushinteger((uint64_t)a1, 0);
  return 3;
}

unsigned __int8 *utf8_decode(char *a1, unsigned int *a2)
{
  unsigned int v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  int v6;
  unsigned __int8 v7;

  v2 = *a1;
  if ((*a1 & 0x80000000) == 0)
  {
    if (!a2)
      return (unsigned __int8 *)(a1 + 1);
LABEL_3:
    *a2 = v2;
    return (unsigned __int8 *)(a1 + 1);
  }
  v4 = 0;
  v5 = 0;
  v6 = 0;
  while ((v2 & 0x40) != 0)
  {
    v7 = a1[++v5];
    LOBYTE(v2) = 2 * v2;
    v4 += 5;
    v6 = v7 & 0x3F | (v6 << 6);
    if ((v7 & 0xC0) != 0x80)
      return 0;
  }
  v3 = 0;
  if (v5 <= 3)
  {
    v2 = ((v2 & 0x7F) << v4) | v6;
    if (HIWORD(v2) <= 0x10u)
    {
      if (v2 <= utf8_decode_limits[v5])
        return 0;
      a1 += v5;
      if (!a2)
        return (unsigned __int8 *)(a1 + 1);
      goto LABEL_3;
    }
  }
  return (unsigned __int8 *)v3;
}

uint64_t pushutfchar(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v10 = luaL_checkinteger(a1, a2);
  if (v10 >= 0x110000)
    luaL_argerror(a1, a2);
  return lua_pushfstring((uint64_t)a1, "%U", v4, v5, v6, v7, v8, v9, v10);
}

uint64_t iter_aux(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v15 = 0;
  v2 = luaL_checklstring(a1, 1, &v15);
  v3 = lua_tointegerx(a1, 2, 0);
  v4 = v3 - 1;
  if (v3 < 1)
  {
    v4 = 0;
  }
  else if (v3 <= v15)
  {
    do
      v5 = *(_BYTE *)(v2 + v3++) & 0xC0;
    while (v5 == 128);
    v4 = v3 - 1;
  }
  if (v4 >= v15)
    return 0;
  HIDWORD(v14) = 0;
  v6 = utf8_decode((char *)(v2 + v4), (unsigned int *)&v14 + 1);
  if (!v6 || (*v6 & 0xC0) == 0x80)
    return luaL_error(a1, "invalid UTF-8 code", v7, v8, v9, v10, v11, v12, v14);
  lua_pushinteger((uint64_t)a1, v4 + 1);
  lua_pushinteger((uint64_t)a1, SHIDWORD(v14));
  return 2;
}

uint64_t luaV_tonumber_(_DWORD *a1, double *a2)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v9;
  uint64_t v10;

  if (a1[2] == 19)
  {
    v4 = (double)*(uint64_t *)a1;
LABEL_10:
    *a2 = v4;
    return 1;
  }
  if ((a1[2] & 0xF) == 4)
  {
    v9 = 0.0;
    v10 = 0;
    v5 = luaO_str2num((char *)(*(_QWORD *)a1 + 24), (uint64_t)&v9);
    v6 = *(_QWORD *)a1;
    v7 = *(_BYTE *)(*(_QWORD *)a1 + 8) == 4 ? *(unsigned __int8 *)(v6 + 11) : *(_QWORD *)(v6 + 16);
    if (v5 == v7 + 1)
    {
      v4 = (double)*(uint64_t *)&v9;
      if ((_DWORD)v10 != 19)
        v4 = v9;
      goto LABEL_10;
    }
  }
  return 0;
}

uint64_t luaV_tointeger(_DWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  while (a1[2] != 19)
  {
    if ((a1[2] & 0xF) == 4)
    {
      v4 = luaO_str2num((char *)(*(_QWORD *)a1 + 24), (uint64_t)v8);
      v5 = *(_QWORD *)a1;
      v6 = *(_BYTE *)(*(_QWORD *)a1 + 8) == 4 ? *(unsigned __int8 *)(v5 + 11) : *(_QWORD *)(v5 + 16);
      a1 = v8;
      if (v4 == v6 + 1)
        continue;
    }
    return 0;
  }
  *a2 = *(_QWORD *)a1;
  return 1;
}

uint64_t *luaV_gettable(uint64_t a1, uint64_t a2, uint64_t *a3, _OWORD *a4)
{
  uint64_t *v6;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t *result;
  uint64_t *v12;
  uint64_t *v13;

  v6 = (uint64_t *)a2;
  v8 = *(_DWORD *)(a2 + 8);
  v9 = 2000;
  while (1)
  {
    if (v8 == 69)
    {
      v10 = *v6;
      result = luaH_get(*v6, a3);
      v12 = result;
      if (*((_DWORD *)result + 2)
        || (result = *(uint64_t **)(v10 + 40)) == 0
        || (*((_BYTE *)result + 10) & 1) != 0
        || (result = luaT_gettm((uint64_t)result, 0, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 248)), (v13 = result) == 0))
      {
        *a4 = *(_OWORD *)v12;
        return result;
      }
    }
    else
    {
      v13 = luaT_gettmbyobj(a1, v6, 0);
      if (!*((_DWORD *)v13 + 2))
        luaG_typeerror(a1, (uint64_t)v6, "index");
    }
    v8 = *((_DWORD *)v13 + 2);
    if ((v8 & 0xF) == 6)
      break;
    v6 = v13;
    if (!--v9)
      return (uint64_t *)luaG_runerror(a1, "gettable chain too long; possible loop");
  }
  return (uint64_t *)luaT_callTM(a1, v13, v6, a3, a4, 1);
}

uint64_t *luaV_settable(uint64_t a1, uint64_t *a2, uint64_t *a3, _BYTE *a4)
{
  uint64_t *v6;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t *result;
  uint64_t *v12;
  uint64_t *v13;

  v6 = a2;
  v8 = *((_DWORD *)a2 + 2);
  v9 = 2000;
  while (1)
  {
    if (v8 != 69)
    {
      v13 = luaT_gettmbyobj(a1, v6, 1u);
      if (!*((_DWORD *)v13 + 2))
        luaG_typeerror(a1, (uint64_t)v6, "index");
      goto LABEL_10;
    }
    v10 = *v6;
    result = luaH_get(*v6, a3);
    v12 = result;
    if (*((_DWORD *)result + 2))
      goto LABEL_15;
    result = *(uint64_t **)(v10 + 40);
    if (!result)
      break;
    if ((*((_BYTE *)result + 10) & 2) != 0)
      break;
    result = luaT_gettm((uint64_t)result, 1, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 256));
    v13 = result;
    if (!result)
      break;
LABEL_10:
    v8 = *((_DWORD *)v13 + 2);
    if ((v8 & 0xF) == 6)
      return (uint64_t *)luaT_callTM(a1, v13, v6, a3, a4, 0);
    v6 = v13;
    if (!--v9)
      return (uint64_t *)luaG_runerror(a1, "settable chain too long; possible loop");
  }
  if (v12 == &luaO_nilobject_)
  {
    result = luaH_newkey(a1, v10, a3);
    v12 = result;
  }
LABEL_15:
  *(_OWORD *)v12 = *(_OWORD *)a4;
  *(_BYTE *)(v10 + 10) = 0;
  if ((a4[8] & 0x40) != 0 && (*(_BYTE *)(v10 + 9) & 4) != 0 && (*(_BYTE *)(*(_QWORD *)a4 + 9) & 3) != 0)
    return (uint64_t *)luaC_barrierback_(a1, v10);
  return result;
}

uint64_t luaV_lessthan(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v12;
  double v13;
  uint64_t v14;
  _BOOL4 v15;

  v6 = *(_DWORD *)(a2 + 8);
  if ((v6 & 0xF) == 4)
  {
    if ((*(_DWORD *)(a3 + 8) & 0xF) == 4)
      return l_strcmp(*(_QWORD *)a2, *(_QWORD *)a3) >> 31;
    goto LABEL_10;
  }
  if ((v6 & 0xF) != 3 || (v7 = *(_DWORD *)(a3 + 8), (v7 & 0xF) != 3))
  {
LABEL_10:
    v10 = luaT_callorderTM(a1, a2, a3, 20);
    if ((v10 & 0x80000000) != 0)
      luaG_ordererror(a1, a2, a3);
    return v10;
  }
  if (v6 == 19)
  {
    v8 = *(_QWORD *)a2;
    if (v7 == 19)
    {
      v9 = *(_QWORD *)a3;
    }
    else
    {
      v13 = *(double *)a3;
      if ((unint64_t)(v8 + 0x20000000000000) < 0x40000000000001)
        return v13 > (double)v8;
      if (v13 >= 9.22337204e18)
        return 1;
      if (v13 <= -9.22337204e18)
        return 0;
      v9 = (uint64_t)v13;
    }
    return v8 < v9;
  }
  else
  {
    v12 = *(double *)a2;
    if (v7 == 3)
    {
      return v12 < *(double *)a3;
    }
    else
    {
      v14 = *(_QWORD *)a3;
      if ((unint64_t)(*(_QWORD *)a3 + 0x20000000000000) >= 0x40000000000001)
      {
        if (v12 >= 9.22337204e18)
          v15 = 1;
        else
          v15 = v12 >= -9.22337204e18 && v14 <= (uint64_t)v12;
      }
      else
      {
        v15 = v12 >= (double)v14;
      }
      return !v15;
    }
  }
}

uint64_t l_strcmp(uint64_t a1, uint64_t a2)
{
  const char *v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  size_t v6;
  uint64_t result;

  v2 = (const char *)(a1 + 24);
  if (*(_BYTE *)(a1 + 8) == 4)
    v3 = *(unsigned __int8 *)(a1 + 11);
  else
    v3 = *(_QWORD *)(a1 + 16);
  v4 = (const char *)(a2 + 24);
  if (*(_BYTE *)(a2 + 8) == 4)
    v5 = *(unsigned __int8 *)(a2 + 11);
  else
    v5 = *(_QWORD *)(a2 + 16);
  while (1)
  {
    result = strcmp(v2, v4);
    if ((_DWORD)result)
      break;
    v6 = strlen(v2);
    if (v6 == v5)
      return v5 != v3;
    if (v6 == v3)
      return 0xFFFFFFFFLL;
    v2 += v6 + 1;
    v3 -= v6 + 1;
    v4 += v6 + 1;
    v5 -= v6 + 1;
  }
  return result;
}

uint64_t luaV_lessequal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  int v11;
  double v12;
  double v13;
  uint64_t v14;
  _BOOL4 v15;

  v6 = *(_DWORD *)(a2 + 8);
  if ((v6 & 0xF) == 4)
  {
    if ((*(_DWORD *)(a3 + 8) & 0xF) == 4)
      return (int)l_strcmp(*(_QWORD *)a2, *(_QWORD *)a3) < 1;
    goto LABEL_10;
  }
  if ((v6 & 0xF) != 3 || (v7 = *(_DWORD *)(a3 + 8), (v7 & 0xF) != 3))
  {
LABEL_10:
    result = luaT_callorderTM(a1, a2, a3, 21);
    if ((result & 0x80000000) != 0)
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 66) |= 0x80u;
      v11 = luaT_callorderTM(a1, a3, a2, 20);
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 66) ^= 0x80u;
      if (v11 < 0)
        luaG_ordererror(a1, a2, a3);
      return v11 == 0;
    }
    return result;
  }
  if (v6 == 19)
  {
    v8 = *(_QWORD *)a2;
    if (v7 == 19)
    {
      v9 = *(_QWORD *)a3;
      return v8 <= v9;
    }
    v13 = *(double *)a3;
    if ((unint64_t)(v8 + 0x20000000000000) >= 0x40000000000001)
    {
      if (v13 >= 9.22337204e18)
      {
        return 1;
      }
      else
      {
        if (v13 >= -9.22337204e18)
        {
          v9 = (uint64_t)v13;
          return v8 <= v9;
        }
        return 0;
      }
    }
    else
    {
      return v13 >= (double)v8;
    }
  }
  else
  {
    v12 = *(double *)a2;
    if (v7 == 3)
    {
      return v12 <= *(double *)a3;
    }
    else
    {
      v14 = *(_QWORD *)a3;
      if ((unint64_t)(*(_QWORD *)a3 + 0x20000000000000) >= 0x40000000000001)
      {
        if (v12 >= 9.22337204e18)
          v15 = 1;
        else
          v15 = v12 > -9.22337204e18 && v14 < (uint64_t)v12;
      }
      else
      {
        v15 = v12 > (double)v14;
      }
      return !v15;
    }
  }
}

uint64_t luaV_equalobj(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  int v5;
  int v6;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v5 = *((_DWORD *)a2 + 2);
  v6 = *((_DWORD *)a3 + 2);
  if ((v5 & 0x3F) == (v6 & 0x3F))
  {
    result = 1;
    switch(v5 & 0x3F)
    {
      case 0:
        return result;
      case 1:
        return *(_DWORD *)a2 == *(_DWORD *)a3;
      case 3:
        return *(double *)a2 == *(double *)a3;
      case 5:
        v11 = *a3;
        if (*a2 == *a3)
          return result;
        if (!a1)
          return 0;
        v12 = *(_QWORD *)(*a2 + 40);
        if (!v12 || (*(_BYTE *)(v12 + 10) & 0x20) != 0)
          goto LABEL_28;
        v13 = luaT_gettm(v12, 5, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 288));
        if (v13)
          goto LABEL_39;
        v11 = *v3;
LABEL_28:
        result = *(_QWORD *)(v11 + 40);
        if (!result)
          return result;
        goto LABEL_37;
      case 7:
        v14 = *a3;
        if (*a2 == *a3)
          return result;
        if (!a1)
          return 0;
        v15 = *(_QWORD *)(*a2 + 16);
        if (!v15 || (*(_BYTE *)(v15 + 10) & 0x20) != 0)
          goto LABEL_36;
        v13 = luaT_gettm(v15, 5, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 288));
        if (v13)
          goto LABEL_39;
        v14 = *v3;
LABEL_36:
        result = *(_QWORD *)(v14 + 16);
        if (!result)
          return result;
LABEL_37:
        if ((*(_BYTE *)(result + 10) & 0x20) != 0)
          return 0;
        result = (uint64_t)luaT_gettm(result, 5, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 288));
        v13 = (uint64_t *)result;
        if (result)
        {
LABEL_39:
          luaT_callTM(a1, v13, a2, v3, *(_QWORD *)(a1 + 16), 1);
          v16 = *(_DWORD **)(a1 + 16);
          result = v16[2];
          if ((_DWORD)result)
            result = (_DWORD)result != 1 || *v16 != 0;
        }
        break;
      case 0x14:
        return luaS_eqlngstr(*a2, *a3);
      default:
        return *a2 == *a3;
    }
  }
  else
  {
    if ((v5 & 0xF) != 3 || (v6 & 0xF) != 3)
      return 0;
    v17 = 0;
    v18 = 0;
    if (v5 == 19)
    {
      v18 = *a2;
    }
    else
    {
      result = luaV_tointeger(a2, &v18);
      if (!(_DWORD)result)
        return result;
      v6 = *((_DWORD *)v3 + 2);
    }
    if (v6 == 19)
      return v18 == *v3;
    result = luaV_tointeger(v3, &v17);
    v3 = &v17;
    if ((_DWORD)result)
      return v18 == *v3;
  }
  return result;
}

uint64_t luaV_concat(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26;

  v8 = (_QWORD *)result;
  v9 = *(_QWORD *)(result + 16);
  do
  {
    v10 = a2;
    v11 = (_DWORD *)(v9 - 32);
    if ((*(_DWORD *)(v9 - 24) & 0xFu) - 3 > 1)
    {
LABEL_10:
      result = luaT_trybinTM(v8, (_DWORD *)(v9 - 32), (_DWORD *)(v9 - 16), (_OWORD *)(v9 - 32), 0x16u);
LABEL_11:
      LODWORD(v15) = 2;
      goto LABEL_36;
    }
    v12 = v9 - 16;
    v13 = *(_DWORD *)(v9 - 8);
    if ((v13 & 0xF) != 4)
    {
      if ((v13 & 0xF) != 3)
        goto LABEL_10;
      result = luaO_tostring((uint64_t)v8, v9 - 16, a3, a4, a5, a6, a7, a8);
      v13 = *(_DWORD *)(v9 - 8);
    }
    if (v13 == 68)
    {
      v14 = *(_DWORD *)(v9 - 24);
      if (!*(_BYTE *)(*(_QWORD *)(v9 - 16) + 11))
      {
        if ((*(_DWORD *)(v9 - 24) & 0xF) == 3)
          result = luaO_tostring((uint64_t)v8, v9 - 32, a3, a4, a5, a6, a7, a8);
        goto LABEL_11;
      }
    }
    else
    {
      v14 = *(_DWORD *)(v9 - 24);
    }
    if (v14 == 68 && !*(_BYTE *)(*(_QWORD *)v11 + 11))
    {
      *(_OWORD *)v11 = *(_OWORD *)v12;
      goto LABEL_11;
    }
    v16 = *(_QWORD *)v12;
    if (*(_BYTE *)(*(_QWORD *)v12 + 8) == 4)
      v17 = *(unsigned __int8 *)(v16 + 11);
    else
      v17 = *(_QWORD *)(v16 + 16);
    v15 = 1;
    if ((int)v10 >= 2)
    {
      do
      {
        if ((v11[2] & 0xF) != 4)
        {
          if ((v11[2] & 0xF) != 3)
            goto LABEL_30;
          luaO_tostring((uint64_t)v8, (uint64_t)v11, a3, a4, a5, a6, a7, a8);
        }
        v18 = *(_QWORD *)v11;
        if (*(_BYTE *)(*(_QWORD *)v11 + 8) == 4)
          v19 = *(unsigned __int8 *)(v18 + 11);
        else
          v19 = *(_QWORD *)(v18 + 16);
        if (v19 >= (v17 ^ 0x7FFFFFFFFFFFFFFFLL))
          luaG_runerror(v8, "string length overflow");
        v11 -= 4;
        v17 += v19;
        ++v15;
      }
      while (v10 != v15);
      LODWORD(v15) = v10;
    }
LABEL_30:
    v20 = (char *)luaZ_openspace((uint64_t)v8, (uint64_t *)(v8[3] + 176), v17);
    v21 = 0;
    v22 = (int)v15 + 1;
    v23 = v9 - 16 * (int)v15;
    do
    {
      v24 = *(_QWORD *)v23;
      if (*(_BYTE *)(*(_QWORD *)v23 + 8) == 4)
        v25 = *(unsigned __int8 *)(v24 + 11);
      else
        v25 = *(_QWORD *)(v24 + 16);
      memcpy(&v20[v21], (const void *)(v24 + 24), v25);
      v21 += v25;
      --v22;
      v23 += 16;
    }
    while (v22 > 1);
    v26 = v9 - 16 * v15;
    result = luaS_newlstr((int)v8, v20, v21);
    *(_QWORD *)v26 = result;
    *(_DWORD *)(v26 + 8) = *(unsigned __int8 *)(result + 8) | 0x40;
LABEL_36:
    a2 = v10 - (v15 - 1);
    v9 = v8[2] - 16 * ((int)v15 - 1);
    v8[2] = v9;
  }
  while (a2 > 1);
  return result;
}

uint64_t luaV_objlen(uint64_t result, uint64_t a2, _DWORD *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v5 = a3[2] & 0x3F;
  if (v5 == 4)
  {
    v10 = *(unsigned __int8 *)(*(_QWORD *)a3 + 11);
    goto LABEL_10;
  }
  if (v5 == 20)
  {
    v10 = *(_QWORD *)(*(_QWORD *)a3 + 16);
    goto LABEL_10;
  }
  v6 = result;
  if (v5 == 5)
  {
    v7 = *(_QWORD *)a3;
    v8 = *(_QWORD *)(*(_QWORD *)a3 + 40);
    if (!v8
      || (*(_BYTE *)(v8 + 10) & 0x10) != 0
      || (v9 = luaT_gettm(v8, 4, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 280))) == 0)
    {
      result = luaH_getn(v7);
      v10 = (int)result;
LABEL_10:
      *(_QWORD *)a2 = v10;
      *(_DWORD *)(a2 + 8) = 19;
      return result;
    }
  }
  else
  {
    v9 = luaT_gettmbyobj(result, a3, 4u);
    if (!*((_DWORD *)v9 + 2))
      luaG_typeerror(v6, (uint64_t)a3, "get length of");
  }
  return luaT_callTM(v6, v9, a3, a3, a2, 1);
}

uint64_t luaV_div(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if ((unint64_t)(a3 + 1) > 1)
  {
    result = a2 / a3;
    if ((a3 ^ a2) < 0)
      result -= a2 != result * a3;
  }
  else
  {
    if (!a3)
      luaG_runerror(a1, "attempt to divide by zero");
    return -a2;
  }
  return result;
}

uint64_t luaV_mod(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  if ((unint64_t)(a3 + 1) > 1)
  {
    if (a2 % a3)
      return a2 % a3 + (a3 & ((a3 ^ a2) >> 63));
  }
  else if (!a3)
  {
    luaG_runerror(a1, "attempt to perform 'n%%0'", v3, v4);
    return 0;
  }
  return 0;
}

unint64_t luaV_shiftl(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = a1 << a2;
  if ((unint64_t)a2 > 0x3F)
    v2 = 0;
  v3 = a1 >> -(char)a2;
  if ((unint64_t)a2 < 0xFFFFFFFFFFFFFFC1)
    v3 = 0;
  if (a2 < 0)
    return v3;
  else
    return v2;
}

uint64_t luaV_finishOp(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  int v19;

  v8 = *(_QWORD *)(result + 32);
  v9 = *(unsigned int *)(*(_QWORD *)(v8 + 40) - 4);
  v10 = result;
  v11 = *(_QWORD *)(v8 + 32);
  switch(v9 & 0x3F)
  {
    case 6uLL:
    case 7uLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x10uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1CuLL:
      v12 = (_OWORD *)(*(_QWORD *)(result + 16) - 16);
      *(_QWORD *)(result + 16) = v12;
      *(_OWORD *)(v11 + 16 * (v9 >> 6)) = *v12;
      return result;
    case 0x1DuLL:
      v17 = *(_QWORD *)(result + 16);
      v18 = (v17 - 32 - v11 - ((v9 >> 19) & 0x1FF0)) >> 4;
      *(_OWORD *)(v17 - 48) = *(_OWORD *)(v17 - 16);
      if ((int)v18 >= 2)
      {
        *(_QWORD *)(result + 16) = v17 - 32;
        result = luaV_concat(result, v18, a3, a4, a5, a6, a7, a8);
      }
      *(_OWORD *)(*(_QWORD *)(v8 + 32) + 16 * (v9 >> 6)) = *(_OWORD *)(*(_QWORD *)(v10 + 16) - 16);
      goto LABEL_11;
    case 0x1FuLL:
    case 0x20uLL:
    case 0x21uLL:
      v13 = *(_QWORD *)(result + 16);
      v14 = (_DWORD *)(v13 - 16);
      v15 = *(_DWORD *)(v13 - 8);
      if (v15)
        v16 = v15 == 1 && *v14 == 0;
      else
        v16 = 1;
      *(_QWORD *)(result + 16) = v14;
      v19 = *(char *)(v8 + 66);
      if (v19 < 0)
        *(_BYTE *)(v8 + 66) = v19 ^ 0x80;
      else
        v16 ^= 1u;
      if (v16 != (v9 >> 6))
        *(_QWORD *)(v8 + 40) += 4;
      return result;
    case 0x24uLL:
      if ((v9 & 0x7FC000) != 0)
        goto LABEL_11;
      return result;
    case 0x29uLL:
LABEL_11:
      *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 8);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t luaV_execute(uint64_t a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  unint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t **v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  unsigned int v25;
  int v26;
  uint64_t *v27;
  double *v28;
  double *v29;
  int v30;
  unint64_t v31;
  double *v32;
  double *v33;
  int v34;
  double *v35;
  double *v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  double *v41;
  double *v42;
  unint64_t v43;
  unint64_t v44;
  double *v45;
  unint64_t *v46;
  double *v47;
  unint64_t *v48;
  double *v49;
  unint64_t *v50;
  double *v51;
  uint64_t *v52;
  double *v53;
  uint64_t *v54;
  unint64_t v55;
  int v56;
  double *v57;
  int v58;
  _BOOL4 v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  unint64_t v73;
  unsigned int *v74;
  int v75;
  _DWORD *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double *v81;
  unint64_t v82;
  int *v83;
  int v84;
  double v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  __int128 v89;
  __int128 v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t *v94;
  uint64_t v95;
  int v96;
  unsigned int v97;
  uint64_t v98;
  __n128 *v99;
  int v100;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD **v106;
  unsigned __int8 *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  int v112;
  signed int v113;
  signed int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  unsigned __int8 *v119;
  uint64_t v120;
  uint64_t v121;
  double *v122;
  unint64_t *v123;
  unint64_t *v124;
  unint64_t *v125;
  uint64_t *v126;
  uint64_t *v127;
  double v128;
  double v129;
  double v130;
  uint64_t v131;
  _DWORD *v132;
  uint64_t v133;
  double v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  int v143;
  uint64_t v144;
  unsigned int *v145;
  unint64_t v146;
  uint64_t v147;
  double *v148;
  double *v149;
  double *v150;
  double *v151;
  double *v152;
  int v153;
  uint64_t v154;
  uint64_t result;
  __int128 **v156;
  __int128 *v157;
  uint64_t *v158;
  __int128 *v159;
  uint64_t v160;
  unint64_t v161;
  __int128 *v162;
  uint64_t *v163;
  __int128 v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  double v168;
  uint64_t v169;
  unint64_t v170;
  double v171;

  v2 = *(uint64_t ***)(a1 + 32);
LABEL_2:
  v3 = **v2;
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 48);
  v5 = (unint64_t)v2[4];
  v166 = v3;
  v167 = v3 + 32;
  while (2)
  {
    v6 = (unsigned int *)v2[5];
    v2[5] = (uint64_t *)(v6 + 1);
    v7 = *v6;
    v8 = *(_BYTE *)(a1 + 200);
    if ((v8 & 0xC) != 0)
    {
      v9 = *(_DWORD *)(a1 + 192) - 1;
      *(_DWORD *)(a1 + 192) = v9;
      if ((v8 & 4) != 0 || !v9)
      {
        luaG_traceexec(a1);
        v5 = (unint64_t)v2[4];
      }
    }
    v10 = (v7 >> 6);
    v11 = v5 + 16 * v10;
    switch(v7 & 0x3F)
    {
      case 0uLL:
        *(_OWORD *)v11 = *(_OWORD *)(v5 + ((v7 >> 19) & 0x1FF0));
        continue;
      case 1uLL:
        v12 = (v7 >> 10) & 0x3FFFF0;
        goto LABEL_11;
      case 2uLL:
        v13 = (unsigned int *)v2[5];
        v2[5] = (uint64_t *)(v13 + 1);
        v12 = ((unint64_t)*v13 >> 2) & 0x3FFFFFF0;
LABEL_11:
        *(_OWORD *)v11 = *(_OWORD *)(v4 + v12);
        continue;
      case 3uLL:
        *(_DWORD *)v11 = v7 >> 23;
        *(_DWORD *)(v5 + 16 * v10 + 8) = 1;
        if ((v7 & 0x7FC000) == 0)
          continue;
        goto LABEL_333;
      case 4uLL:
        v14 = (v7 >> 23) + 1;
        v15 = (16 * v10) | 8;
        do
        {
          *(_DWORD *)(v5 + v15) = 0;
          v15 += 16;
          --v14;
        }
        while (v14);
        continue;
      case 5uLL:
        *(_OWORD *)v11 = *(_OWORD *)**(_QWORD **)(v166 + ((v7 >> 20) & 0xFF8) + 32);
        continue;
      case 6uLL:
        v16 = **(_OWORD ***)(v166 + ((v7 >> 20) & 0xFF8) + 32);
        goto LABEL_44;
      case 7uLL:
        v16 = (_OWORD *)(v5 + ((v7 >> 19) & 0x1FF0));
        goto LABEL_44;
      case 8uLL:
        v17 = **(uint64_t ***)(v166 + 8 * v10 + 32);
        if ((v7 & 0x80000000) == 0)
          v18 = (uint64_t *)(v5 + 16 * (v7 >> 23));
        else
          v18 = (uint64_t *)(v4 + 16 * (v7 >> 23));
        if ((v7 & 0x400000) != 0)
          v19 = (_BYTE *)(v4 + 16 * (v7 >> 14));
        else
          v19 = (_BYTE *)(v5 + 16 * ((v7 >> 14) & 0x1FF));
        v20 = a1;
        goto LABEL_37;
      case 9uLL:
        v21 = *(uint64_t ***)(v166 + ((v7 >> 20) & 0xFF8) + 32);
        *(_OWORD *)*v21 = *(_OWORD *)v11;
        if (((*v21)[1] & 0x40) != 0 && *v21 == (uint64_t *)(v21 + 2))
          luaC_upvalbarrier_(a1, v21);
        continue;
      case 0xAuLL:
        if ((v7 & 0x80000000) == 0)
          v18 = (uint64_t *)(v5 + 16 * (v7 >> 23));
        else
          v18 = (uint64_t *)(v4 + 16 * (v7 >> 23));
        if ((v7 & 0x400000) != 0)
          v19 = (_BYTE *)(v4 + 16 * (v7 >> 14));
        else
          v19 = (_BYTE *)(v5 + 16 * ((v7 >> 14) & 0x1FF));
        v20 = a1;
        v17 = (uint64_t *)(v5 + 16 * (v7 >> 6));
LABEL_37:
        luaV_settable(v20, v17, v18, v19);
        goto LABEL_251;
      case 0xBuLL:
        v22 = luaH_new(a1);
        *(_QWORD *)v11 = v22;
        *(_DWORD *)(v5 + 16 * v10 + 8) = 69;
        v23 = v7 >> 23;
        if ((_DWORD)v23)
          v24 = 0;
        else
          v24 = ((v7 >> 14) & 0x1FF) == 0;
        if (!v24)
        {
          v25 = luaO_fb2int(v23);
          v26 = luaO_fb2int((v7 >> 14) & 0x1FF);
          luaH_resize(a1, v22, v25, v26);
        }
        goto LABEL_260;
      case 0xCuLL:
        v16 = (_OWORD *)(v5 + ((v7 >> 19) & 0x1FF0));
        *(_OWORD *)(v11 + 16) = *v16;
LABEL_44:
        if ((v7 & 0x400000) != 0)
          v27 = (uint64_t *)(v4 + 16 * (v7 >> 14));
        else
          v27 = (uint64_t *)(v5 + 16 * ((v7 >> 14) & 0x1FF));
        luaV_gettable(a1, (uint64_t)v16, v27, (_OWORD *)(v5 + 16 * (v7 >> 6)));
        goto LABEL_251;
      case 0xDuLL:
        if ((v7 & 0x80000000) == 0)
          v28 = (double *)(v5 + 16 * (v7 >> 23));
        else
          v28 = (double *)(v4 + 16 * (v7 >> 23));
        if ((v7 & 0x400000) != 0)
          v29 = (double *)(v4 + 16 * (v7 >> 14));
        else
          v29 = (double *)(v5 + 16 * ((v7 >> 14) & 0x1FF));
        v170 = 0;
        v171 = 0.0;
        v30 = *((_DWORD *)v28 + 2);
        if (v30 == 3)
        {
          v171 = *v28;
        }
        else
        {
          if (v30 == 19 && *((_DWORD *)v29 + 2) == 19)
          {
            v31 = *(_QWORD *)v29 + *(_QWORD *)v28;
            goto LABEL_323;
          }
          if (!luaV_tonumber_(v28, &v171))
            goto LABEL_367;
        }
        if (*((_DWORD *)v29 + 2) == 3)
        {
          v148 = v29;
LABEL_360:
          v134 = v171 + *v148;
          goto LABEL_365;
        }
        v148 = (double *)&v170;
        if (luaV_tonumber_(v29, (double *)&v170))
          goto LABEL_360;
LABEL_367:
        v147 = a1;
        goto LABEL_376;
      case 0xEuLL:
        if ((v7 & 0x80000000) == 0)
          v32 = (double *)(v5 + 16 * (v7 >> 23));
        else
          v32 = (double *)(v4 + 16 * (v7 >> 23));
        if ((v7 & 0x400000) != 0)
          v33 = (double *)(v4 + 16 * (v7 >> 14));
        else
          v33 = (double *)(v5 + 16 * ((v7 >> 14) & 0x1FF));
        v170 = 0;
        v171 = 0.0;
        v34 = *((_DWORD *)v32 + 2);
        if (v34 == 3)
        {
          v171 = *v32;
        }
        else
        {
          if (v34 == 19 && *((_DWORD *)v33 + 2) == 19)
          {
            v31 = *(_QWORD *)v32 - *(_QWORD *)v33;
            goto LABEL_323;
          }
          if (!luaV_tonumber_(v32, &v171))
            goto LABEL_368;
        }
        if (*((_DWORD *)v33 + 2) == 3)
        {
          v149 = v33;
LABEL_362:
          v134 = v171 - *v149;
          goto LABEL_365;
        }
        v149 = (double *)&v170;
        if (luaV_tonumber_(v33, (double *)&v170))
          goto LABEL_362;
LABEL_368:
        v147 = a1;
        goto LABEL_376;
      case 0xFuLL:
        if ((v7 & 0x80000000) == 0)
          v35 = (double *)(v5 + 16 * (v7 >> 23));
        else
          v35 = (double *)(v4 + 16 * (v7 >> 23));
        if ((v7 & 0x400000) != 0)
          v36 = (double *)(v4 + 16 * (v7 >> 14));
        else
          v36 = (double *)(v5 + 16 * ((v7 >> 14) & 0x1FF));
        v170 = 0;
        v171 = 0.0;
        v37 = *((_DWORD *)v35 + 2);
        if (v37 == 3)
        {
          v171 = *v35;
        }
        else
        {
          if (v37 == 19 && *((_DWORD *)v36 + 2) == 19)
          {
            v31 = *(_QWORD *)v36 * *(_QWORD *)v35;
            goto LABEL_323;
          }
          if (!luaV_tonumber_(v35, &v171))
            goto LABEL_369;
        }
        if (*((_DWORD *)v36 + 2) == 3)
        {
          v150 = v36;
LABEL_364:
          v134 = v171 * *v150;
          goto LABEL_365;
        }
        v150 = (double *)&v170;
        if (luaV_tonumber_(v36, (double *)&v170))
          goto LABEL_364;
LABEL_369:
        v147 = a1;
LABEL_376:
        luaT_trybinTM(v147);
LABEL_377:
        v5 = (unint64_t)v2[4];
        continue;
      case 0x10uLL:
        if ((v7 & 0x80000000) == 0)
          v38 = v5 + 16 * (v7 >> 23);
        else
          v38 = v4 + 16 * (v7 >> 23);
        if ((v7 & 0x400000) != 0)
          v39 = v4 + 16 * (v7 >> 14);
        else
          v39 = v5 + 16 * ((v7 >> 14) & 0x1FF);
        if (*(_DWORD *)(v38 + 8) == 19 && *(_DWORD *)(v39 + 8) == 19)
        {
          v40 = luaV_mod(a1, *(_QWORD *)v38, *(_QWORD *)v39);
          goto LABEL_104;
        }
        v115 = a1;
        goto LABEL_250;
      case 0x12uLL:
        if ((v7 & 0x80000000) == 0)
          v41 = (double *)(v5 + 16 * (v7 >> 23));
        else
          v41 = (double *)(v4 + 16 * (v7 >> 23));
        if ((v7 & 0x400000) != 0)
          v42 = (double *)(v4 + 16 * (v7 >> 14));
        else
          v42 = (double *)(v5 + 16 * ((v7 >> 14) & 0x1FF));
        v170 = 0;
        v171 = 0.0;
        if (*((_DWORD *)v41 + 2) == 3)
        {
          v171 = *v41;
        }
        else if (!luaV_tonumber_(v41, &v171))
        {
          goto LABEL_338;
        }
        if (*((_DWORD *)v42 + 2) == 3)
        {
          v122 = v42;
LABEL_300:
          v134 = v171 / *v122;
          goto LABEL_365;
        }
        v122 = (double *)&v170;
        if (luaV_tonumber_(v42, (double *)&v170))
          goto LABEL_300;
LABEL_338:
        v147 = a1;
        goto LABEL_376;
      case 0x13uLL:
        if ((v7 & 0x80000000) == 0)
          v43 = v5 + 16 * (v7 >> 23);
        else
          v43 = v4 + 16 * (v7 >> 23);
        if ((v7 & 0x400000) != 0)
          v44 = v4 + 16 * (v7 >> 14);
        else
          v44 = v5 + 16 * ((v7 >> 14) & 0x1FF);
        if (*(_DWORD *)(v43 + 8) == 19 && *(_DWORD *)(v44 + 8) == 19)
        {
          v40 = luaV_div(a1, *(_QWORD *)v43, *(_QWORD *)v44);
LABEL_104:
          *(_QWORD *)v11 = v40;
          goto LABEL_148;
        }
        v115 = a1;
LABEL_250:
        luaT_trybinTM(v115);
        goto LABEL_251;
      case 0x14uLL:
        if ((v7 & 0x80000000) == 0)
          v45 = (double *)(v5 + 16 * (v7 >> 23));
        else
          v45 = (double *)(v4 + 16 * (v7 >> 23));
        if ((v7 & 0x400000) != 0)
          v46 = (unint64_t *)(v4 + 16 * (v7 >> 14));
        else
          v46 = (unint64_t *)(v5 + 16 * ((v7 >> 14) & 0x1FF));
        v170 = 0;
        v171 = 0.0;
        if (*((_DWORD *)v45 + 2) == 19)
        {
          v171 = *v45;
        }
        else if (!luaV_tointeger(v45, &v171))
        {
          goto LABEL_339;
        }
        if (*((_DWORD *)v46 + 2) == 19)
        {
          v123 = v46;
LABEL_302:
          v31 = *v123 & *(_QWORD *)&v171;
          goto LABEL_323;
        }
        v123 = &v170;
        if (luaV_tointeger(v46, &v170))
          goto LABEL_302;
LABEL_339:
        v147 = a1;
        goto LABEL_376;
      case 0x15uLL:
        if ((v7 & 0x80000000) == 0)
          v47 = (double *)(v5 + 16 * (v7 >> 23));
        else
          v47 = (double *)(v4 + 16 * (v7 >> 23));
        if ((v7 & 0x400000) != 0)
          v48 = (unint64_t *)(v4 + 16 * (v7 >> 14));
        else
          v48 = (unint64_t *)(v5 + 16 * ((v7 >> 14) & 0x1FF));
        v170 = 0;
        v171 = 0.0;
        if (*((_DWORD *)v47 + 2) == 19)
        {
          v171 = *v47;
        }
        else if (!luaV_tointeger(v47, &v171))
        {
          goto LABEL_340;
        }
        if (*((_DWORD *)v48 + 2) == 19)
        {
          v124 = v48;
LABEL_304:
          v31 = *v124 | *(_QWORD *)&v171;
          goto LABEL_323;
        }
        v124 = &v170;
        if (luaV_tointeger(v48, &v170))
          goto LABEL_304;
LABEL_340:
        v147 = a1;
        goto LABEL_376;
      case 0x16uLL:
        if ((v7 & 0x80000000) == 0)
          v49 = (double *)(v5 + 16 * (v7 >> 23));
        else
          v49 = (double *)(v4 + 16 * (v7 >> 23));
        if ((v7 & 0x400000) != 0)
          v50 = (unint64_t *)(v4 + 16 * (v7 >> 14));
        else
          v50 = (unint64_t *)(v5 + 16 * ((v7 >> 14) & 0x1FF));
        v170 = 0;
        v171 = 0.0;
        if (*((_DWORD *)v49 + 2) == 19)
        {
          v171 = *v49;
        }
        else if (!luaV_tointeger(v49, &v171))
        {
          goto LABEL_341;
        }
        if (*((_DWORD *)v50 + 2) == 19)
        {
          v125 = v50;
LABEL_306:
          v31 = *v125 ^ *(_QWORD *)&v171;
          goto LABEL_323;
        }
        v125 = &v170;
        if (luaV_tointeger(v50, &v170))
          goto LABEL_306;
LABEL_341:
        v147 = a1;
        goto LABEL_376;
      case 0x17uLL:
        if ((v7 & 0x80000000) == 0)
          v51 = (double *)(v5 + 16 * (v7 >> 23));
        else
          v51 = (double *)(v4 + 16 * (v7 >> 23));
        if ((v7 & 0x400000) != 0)
          v52 = (uint64_t *)(v4 + 16 * (v7 >> 14));
        else
          v52 = (uint64_t *)(v5 + 16 * ((v7 >> 14) & 0x1FF));
        v170 = 0;
        v171 = 0.0;
        if (*((_DWORD *)v51 + 2) == 19)
        {
          v171 = *v51;
        }
        else if (!luaV_tointeger(v51, &v171))
        {
          goto LABEL_342;
        }
        if (*((_DWORD *)v52 + 2) == 19)
        {
          v126 = v52;
        }
        else
        {
          v126 = (uint64_t *)&v170;
          if (!luaV_tointeger(v52, &v170))
          {
LABEL_342:
            v147 = a1;
            goto LABEL_376;
          }
        }
        v135 = *v126;
        v136 = *(_QWORD *)&v171 << *v126;
        if ((unint64_t)*v126 > 0x3F)
          v136 = 0;
        v137 = *(_QWORD *)&v171 >> -(char)v135;
        if ((unint64_t)v135 < 0xFFFFFFFFFFFFFFC1)
          v137 = 0;
        if (v135 < 0)
          v31 = v137;
        else
          v31 = v136;
        goto LABEL_323;
      case 0x18uLL:
        if ((v7 & 0x80000000) == 0)
          v53 = (double *)(v5 + 16 * (v7 >> 23));
        else
          v53 = (double *)(v4 + 16 * (v7 >> 23));
        if ((v7 & 0x400000) != 0)
          v54 = (uint64_t *)(v4 + 16 * (v7 >> 14));
        else
          v54 = (uint64_t *)(v5 + 16 * ((v7 >> 14) & 0x1FF));
        v170 = 0;
        v171 = 0.0;
        if (*((_DWORD *)v53 + 2) == 19)
        {
          v171 = *v53;
        }
        else if (!luaV_tointeger(v53, &v171))
        {
          goto LABEL_343;
        }
        if (*((_DWORD *)v54 + 2) == 19)
        {
          v127 = v54;
        }
        else
        {
          v127 = (uint64_t *)&v170;
          if (!luaV_tointeger(v54, &v170))
          {
LABEL_343:
            v147 = a1;
            goto LABEL_376;
          }
        }
        v138 = *v127;
        v139 = -*v127;
        v140 = *(_QWORD *)&v171 << v139;
        if (v139 > 0x3F)
          v140 = 0;
        v141 = *(_QWORD *)&v171 >> v138;
        if (v139 < 0xFFFFFFFFFFFFFFC1)
          v141 = 0;
        if (v138 >= 1)
          v31 = v141;
        else
          v31 = v140;
LABEL_323:
        *(_QWORD *)v11 = v31;
        v142 = v5 + 16 * v10;
        v143 = 19;
LABEL_366:
        *(_DWORD *)(v142 + 8) = v143;
        continue;
      case 0x19uLL:
        v55 = v5 + ((v7 >> 19) & 0x1FF0);
        v171 = 0.0;
        v56 = *(_DWORD *)(v55 + 8);
        if (v56 == 3)
        {
          v151 = (double *)(v5 + ((v7 >> 19) & 0x1FF0));
LABEL_355:
          v134 = -*v151;
LABEL_365:
          *(double *)v11 = v134;
          v142 = v5 + 16 * v10;
          v143 = 3;
          goto LABEL_366;
        }
        if (v56 != 19)
        {
          v151 = &v171;
          if (!luaV_tonumber_((_DWORD *)(v5 + ((v7 >> 19) & 0x1FF0)), &v171))
          {
            v147 = a1;
            goto LABEL_376;
          }
          goto LABEL_355;
        }
        *(_QWORD *)v11 = -*(_QWORD *)v55;
LABEL_148:
        *(_DWORD *)(v5 + 16 * v10 + 8) = 19;
        continue;
      case 0x1AuLL:
        v171 = 0.0;
        if (*(_DWORD *)(v5 + ((v7 >> 19) & 0x1FF0) + 8) == 19)
        {
          v57 = (double *)(v5 + ((v7 >> 19) & 0x1FF0));
LABEL_287:
          v31 = ~*(_QWORD *)v57;
          goto LABEL_323;
        }
        v57 = &v171;
        if (luaV_tointeger((_DWORD *)(v5 + ((v7 >> 19) & 0x1FF0)), &v171))
          goto LABEL_287;
        v147 = a1;
        goto LABEL_376;
      case 0x1BuLL:
        v58 = *(_DWORD *)(v5 + 16 * (v7 >> 23) + 8);
        if (v58)
          v59 = v58 == 1 && *(_DWORD *)(v5 + 16 * (v7 >> 23)) == 0;
        else
          v59 = 1;
        *(_DWORD *)v11 = v59;
        *(_DWORD *)(v5 + 16 * v10 + 8) = 1;
        continue;
      case 0x1CuLL:
        luaV_objlen(a1, v5 + 16 * (v7 >> 6), (_DWORD *)(v5 + ((v7 >> 19) & 0x1FF0)));
        goto LABEL_251;
      case 0x1DuLL:
        *(_QWORD *)(a1 + 16) = v5 + 16 * ((v7 >> 14) & 0x1FF) + 16;
        luaV_concat(a1);
        v60 = v2[4];
        v61 = &v60[2 * v10];
        v62 = &v60[2 * (v7 >> 23)];
        *(_OWORD *)v61 = *(_OWORD *)v62;
        if (*(uint64_t *)(*(_QWORD *)(a1 + 24) + 24) <= 0)
        {
          v64 = v2[1];
        }
        else
        {
          v63 = v61 + 2;
          if (v10 >= (v7 >> 23))
            v62 = v63;
          *(_QWORD *)(a1 + 16) = v62;
          luaC_step(a1);
          v64 = v2[1];
          *(_QWORD *)(a1 + 16) = v64;
        }
        v5 = (unint64_t)v2[4];
        *(_QWORD *)(a1 + 16) = v64;
        continue;
      case 0x1EuLL:
        if ((_DWORD)v10)
          luaF_close(a1, (unint64_t)&v2[4][2 * v10 - 2]);
        goto LABEL_400;
      case 0x1FuLL:
        if ((v7 & 0x80000000) == 0)
          v65 = (uint64_t *)(v5 + 16 * (v7 >> 23));
        else
          v65 = (uint64_t *)(v4 + 16 * (v7 >> 23));
        if ((v7 & 0x400000) != 0)
          v66 = (uint64_t *)(v4 + 16 * (v7 >> 14));
        else
          v66 = (uint64_t *)(v5 + 16 * ((v7 >> 14) & 0x1FF));
        v67 = luaV_equalobj(a1, v65, v66);
        goto LABEL_182;
      case 0x20uLL:
        if ((v7 & 0x80000000) == 0)
          v68 = v5 + 16 * (v7 >> 23);
        else
          v68 = v4 + 16 * (v7 >> 23);
        if ((v7 & 0x400000) != 0)
          v69 = v4 + 16 * (v7 >> 14);
        else
          v69 = v5 + 16 * ((v7 >> 14) & 0x1FF);
        v67 = luaV_lessthan(a1, v68, v69);
        goto LABEL_182;
      case 0x21uLL:
        if ((v7 & 0x80000000) == 0)
          v70 = v5 + 16 * (v7 >> 23);
        else
          v70 = v4 + 16 * (v7 >> 23);
        if ((v7 & 0x400000) != 0)
          v71 = v4 + 16 * (v7 >> 14);
        else
          v71 = v5 + 16 * ((v7 >> 14) & 0x1FF);
        v67 = luaV_lessequal(a1, v70, v71);
LABEL_182:
        v72 = (unsigned int *)v2[5];
        if (v67 == (_DWORD)v10)
        {
          v73 = *v72;
          if ((v73 >> 6))
          {
            luaF_close(a1, (unint64_t)&v2[4][2 * (v73 >> 6) - 2]);
            v72 = (unsigned int *)v2[5];
          }
          v74 = &v72[(v73 >> 14) - 131070];
        }
        else
        {
          v74 = v72 + 1;
        }
        v2[5] = (uint64_t *)v74;
        goto LABEL_251;
      case 0x22uLL:
        v75 = *(_DWORD *)(v5 + 16 * v10 + 8);
        if ((v7 & 0x7FC000) != 0)
        {
          if (v75 && (v75 != 1 || *(_DWORD *)v11))
            goto LABEL_335;
          goto LABEL_333;
        }
        if (v75 && (v75 != 1 || *(_DWORD *)v11))
          goto LABEL_333;
        goto LABEL_335;
      case 0x23uLL:
        v76 = (_DWORD *)(v5 + ((v7 >> 19) & 0x1FF0));
        v77 = v76[2];
        if ((v7 & 0x7FC000) != 0)
        {
          if (!v77 || v77 == 1 && !*v76)
            goto LABEL_333;
        }
        else if (v77 && (v77 != 1 || *v76))
        {
LABEL_333:
          v144 = (uint64_t)v2[5] + 4;
          goto LABEL_401;
        }
        *(_OWORD *)v11 = *(_OWORD *)v76;
LABEL_335:
        v145 = (unsigned int *)v2[5];
        v146 = *v145;
        if ((v146 >> 6))
        {
          luaF_close(a1, (unint64_t)&v2[4][2 * (v146 >> 6) - 2]);
          v145 = (unsigned int *)v2[5];
        }
        v144 = (uint64_t)&v145[(v146 >> 14) - 131070];
        goto LABEL_401;
      case 0x24uLL:
        if (v7 >= 0x800000)
          *(_QWORD *)(a1 + 16) = v11 + ((v7 >> 19) & 0x1FF0);
        if (!luaD_precall(a1, (char *)v11, ((v7 >> 14) & 0x1FF) - 1))
        {
          v2 = *(uint64_t ***)(a1 + 32);
          *((_BYTE *)v2 + 66) |= 8u;
          goto LABEL_2;
        }
        if (((v7 >> 14) & 0x1FF) != 0)
          *(_QWORD *)(a1 + 16) = v2[1];
LABEL_251:
        v5 = (unint64_t)v2[4];
        continue;
      case 0x25uLL:
        if (v7 >= 0x800000)
          *(_QWORD *)(a1 + 16) = v11 + ((v7 >> 19) & 0x1FF0);
        if (luaD_precall(a1, (char *)(v5 + 16 * (v7 >> 6)), -1))
          goto LABEL_251;
        v156 = *(__int128 ***)(a1 + 32);
        v2 = (uint64_t **)v156[2];
        v157 = *v156;
        v158 = *v2;
        v159 = v156[4];
        v160 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)*v156 + 24) + 10);
        if (*(int *)(*(_QWORD *)(v166 + 24) + 32) >= 1)
          luaF_close(a1, (unint64_t)v2[4]);
        v161 = (unint64_t)&v159[v160];
        if ((unint64_t)v157 < v161)
        {
          v162 = v157;
          v163 = v158;
          do
          {
            v164 = *v162++;
            *(_OWORD *)v163 = v164;
            v163 += 2;
          }
          while ((unint64_t)v162 < v161);
        }
        v2[4] = (uint64_t *)((char *)v158 + (char *)v156[4] - (char *)v157);
        v165 = (char *)v158 + *(_QWORD *)(a1 + 16) - (_QWORD)v157;
        *(_QWORD *)(a1 + 16) = v165;
        v2[1] = (uint64_t *)v165;
        v2[5] = (uint64_t *)v156[5];
        *((_BYTE *)v2 + 66) |= 0x20u;
        *(_QWORD *)(a1 + 32) = v2;
        goto LABEL_2;
      case 0x26uLL:
        if (*(int *)(*(_QWORD *)(v166 + 24) + 32) >= 1)
          luaF_close(a1, v5);
        if (v7 >= 0x800000)
          LODWORD(v154) = (v7 >> 23) - 1;
        else
          v154 = (uint64_t)(*(_QWORD *)(a1 + 16) - v11) >> 4;
        result = luaD_poscall(a1, (char *)(v5 + 16 * (v7 >> 6)), v154);
        if ((*((_BYTE *)v2 + 66) & 8) != 0)
        {
          v2 = *(uint64_t ***)(a1 + 32);
          if ((_DWORD)result)
            *(_QWORD *)(a1 + 16) = v2[1];
          goto LABEL_2;
        }
        return result;
      case 0x27uLL:
        if (*(_DWORD *)(v5 + 16 * v10 + 8) == 19)
        {
          v78 = *(_QWORD *)(v11 + 32);
          v79 = *(_QWORD *)v11 + v78;
          v80 = *(_QWORD *)(v11 + 16);
          if (v78 < 1)
          {
            if (v80 > v79)
              continue;
          }
          else if (v79 > v80)
          {
            continue;
          }
          v2[5] = (uint64_t *)((char *)v2[5] + 4 * (int)((v7 >> 14) - 0x1FFFF));
          *(_QWORD *)v11 = v79;
          *(_QWORD *)(v11 + 48) = v79;
          *(_DWORD *)(v11 + 56) = 19;
        }
        else
        {
          v128 = *(double *)(v11 + 32);
          v129 = v128 + *(double *)v11;
          v130 = *(double *)(v11 + 16);
          if (v128 <= 0.0)
          {
            if (v130 > v129)
              continue;
          }
          else if (v129 > v130)
          {
            continue;
          }
          v2[5] = (uint64_t *)((char *)v2[5] + 4 * (int)((v7 >> 14) - 0x1FFFF));
          *(double *)v11 = v129;
          *(double *)(v11 + 48) = v129;
          *(_DWORD *)(v11 + 56) = 3;
        }
        continue;
      case 0x28uLL:
        v81 = (double *)(v11 + 32);
        v170 = 0;
        v82 = v5 + 16 * v10;
        v84 = *(_DWORD *)(v82 + 8);
        v83 = (int *)(v82 + 8);
        if (v84 != 19 || *(_DWORD *)(v11 + 40) != 19)
          goto LABEL_386;
        v85 = *v81;
        if (luaV_tointeger((_DWORD *)(v11 + 16), &v170))
        {
          v86 = v170;
          goto LABEL_215;
        }
        v171 = 0.0;
        if (*(_DWORD *)(v11 + 24) == 3)
        {
          v152 = (double *)(v11 + 16);
LABEL_381:
          if (*v152 <= 0.0)
          {
            v86 = 0x8000000000000000;
            v170 = 0x8000000000000000;
            if ((*(_QWORD *)&v85 & 0x8000000000000000) == 0)
              goto LABEL_385;
          }
          else
          {
            v86 = 0x7FFFFFFFFFFFFFFFLL;
            v170 = 0x7FFFFFFFFFFFFFFFLL;
            if ((*(_QWORD *)&v85 & 0x8000000000000000) != 0)
            {
LABEL_385:
              v87 = 0;
              goto LABEL_216;
            }
          }
LABEL_215:
          v87 = *(_QWORD *)v11;
LABEL_216:
          *(_QWORD *)(v11 + 16) = v86;
          v88 = 19;
          *(_DWORD *)(v11 + 24) = 19;
          *(_QWORD *)v11 = v87 - *(_QWORD *)(v11 + 32);
          goto LABEL_399;
        }
        v153 = luaV_tonumber_((_DWORD *)(v11 + 16), &v171);
        v152 = &v171;
        if (v153)
          goto LABEL_381;
LABEL_386:
        v171 = 0.0;
        v168 = 0.0;
        v169 = 0;
        if (*(_DWORD *)(v11 + 24) == 3)
        {
          v169 = *(_QWORD *)(v11 + 16);
        }
        else if (!luaV_tonumber_((_DWORD *)(v11 + 16), (double *)&v169))
        {
          luaG_runerror(a1, "'for' limit must be a number");
        }
        *(_QWORD *)(v11 + 16) = v169;
        *(_DWORD *)(v11 + 24) = 3;
        if (*(_DWORD *)(v11 + 40) == 3)
        {
          v168 = *v81;
        }
        else if (!luaV_tonumber_((_DWORD *)(v11 + 32), &v168))
        {
          luaG_runerror(a1, "'for' step must be a number");
        }
        *(double *)(v11 + 32) = v168;
        *(_DWORD *)(v11 + 40) = 3;
        if (*v83 == 3)
        {
          v171 = *(double *)v11;
        }
        else if (!luaV_tonumber_((_DWORD *)(v5 + 16 * (v7 >> 6)), &v171))
        {
          luaG_runerror(a1, "'for' initial value must be a number");
        }
        *(double *)v11 = v171 - v168;
        v88 = 3;
LABEL_399:
        *v83 = v88;
LABEL_400:
        v144 = (uint64_t)v2[5] + 4 * (int)((v7 >> 14) - 0x1FFFF);
LABEL_401:
        v2[5] = (uint64_t *)v144;
        continue;
      case 0x29uLL:
        v89 = *(_OWORD *)(v11 + 32);
        v90 = *(_OWORD *)v11;
        *(_OWORD *)(v11 + 64) = *(_OWORD *)(v11 + 16);
        *(_OWORD *)(v11 + 80) = v89;
        *(_OWORD *)(v11 + 48) = v90;
        *(_QWORD *)(a1 + 16) = v11 + 96;
        luaD_call(a1, v11 + 48, (v7 >> 14) & 0x1FF, 1);
        v5 = (unint64_t)v2[4];
        *(_QWORD *)(a1 + 16) = v2[1];
        v91 = (unsigned int *)v2[5];
        v2[5] = (uint64_t *)(v91 + 1);
        v7 = *v91;
        v11 = v5 + 16 * (v7 >> 6);
        goto LABEL_218;
      case 0x2AuLL:
LABEL_218:
        if (!*(_DWORD *)(v11 + 24))
          continue;
        *(_OWORD *)v11 = *(_OWORD *)(v11 + 16);
        goto LABEL_400;
      case 0x2BuLL:
        v92 = v7 >> 23;
        if (!(v7 >> 23))
          v92 = ((*(_QWORD *)(a1 + 16) - v11) >> 4) - 1;
        v93 = (v7 >> 14) & 0x1FF;
        if (!v93)
        {
          v94 = v2[5];
          v2[5] = (uint64_t *)((char *)v94 + 4);
          v93 = *(_DWORD *)v94 >> 6;
        }
        v95 = *(_QWORD *)v11;
        v96 = 50 * v93;
        v97 = v92 + 50 * v93 - 50;
        if (v97 > *(_DWORD *)(v95 + 12))
          luaH_resizearray(a1, v95, v97);
        if ((int)v92 >= 1)
        {
          v98 = v92;
          v99 = (__n128 *)(v5 + 16 * v10 + 16 * v92);
          v100 = v96 - 50;
          do
          {
            luaH_setint(a1, v95, (v100 + v98), v99);
            if ((v99->n128_u8[8] & 0x40) != 0
              && (*(_BYTE *)(v95 + 9) & 4) != 0
              && (*(_BYTE *)(v99->n128_u64[0] + 9) & 3) != 0)
            {
              luaC_barrierback_(a1, v95);
            }
            --v99;
          }
          while (v98-- > 1);
        }
        *(_QWORD *)(a1 + 16) = v2[1];
        continue;
      case 0x2CuLL:
        v102 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v166 + 24) + 64) + ((v7 >> 11) & 0x1FFFF8));
        v103 = *(unsigned int *)(v102 + 16);
        v105 = *(_QWORD *)(v102 + 88);
        v104 = *(_QWORD *)(v102 + 96);
        if (!v104)
          goto LABEL_252;
        if ((int)v103 < 1)
          goto LABEL_243;
        v106 = (_QWORD **)(v104 + 32);
        v107 = (unsigned __int8 *)(v105 + 9);
        v108 = *(unsigned int *)(v102 + 16);
        while (1)
        {
          v109 = *v107;
          v110 = *(v107 - 1) ? v5 + 16 * v109 : **(_QWORD **)(v167 + 8 * v109);
          if (**v106 != v110)
            break;
          v107 += 16;
          ++v106;
          if (!--v108)
          {
LABEL_243:
            *(_QWORD *)v11 = v104;
            *(_DWORD *)(v5 + 16 * v10 + 8) = 70;
            goto LABEL_260;
          }
        }
LABEL_252:
        v116 = luaF_newLclosure(a1, *(_DWORD *)(v102 + 16));
        v117 = v116;
        *(_QWORD *)(v116 + 24) = v102;
        *(_QWORD *)v11 = v116;
        *(_DWORD *)(v5 + 16 * v10 + 8) = 70;
        if ((int)v103 >= 1)
        {
          v118 = (uint64_t *)(v116 + 32);
          v119 = (unsigned __int8 *)(v105 + 9);
          do
          {
            v120 = *v119;
            if (*(v119 - 1))
              v121 = luaF_findupval((_QWORD *)a1, v5 + 16 * v120);
            else
              v121 = *(_QWORD *)(v167 + 8 * v120);
            v119 += 16;
            *v118++ = v121;
            ++*(_QWORD *)(v121 + 8);
            --v103;
          }
          while (v103);
        }
        if ((*(_BYTE *)(v102 + 9) & 4) == 0)
          *(_QWORD *)(v102 + 96) = v117;
LABEL_260:
        if (*(uint64_t *)(*(_QWORD *)(a1 + 24) + 24) >= 1)
        {
          *(_QWORD *)(a1 + 16) = v11 + 16;
          luaC_step(a1);
          *(_QWORD *)(a1 + 16) = v2[1];
        }
        goto LABEL_377;
      case 0x2DuLL:
        v111 = (v5 - (unint64_t)*v2) >> 4;
        v112 = ~*(unsigned __int8 *)(*(_QWORD *)(v166 + 24) + 10);
        v113 = v111 + v112;
        if (v7 >> 23)
        {
          v114 = (v7 >> 23) - 1;
        }
        else
        {
          if (v113 >= (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 16)) >> 4)
            luaD_growstack(a1, v111 + v112);
          v5 = (unint64_t)v2[4];
          v11 = v5 + 16 * v10;
          *(_QWORD *)(a1 + 16) = v11 + 16 * v113;
          v114 = v113;
        }
        if (v114 >= 1)
        {
          v131 = 0;
          v132 = (_DWORD *)(v11 + 8);
          v133 = -16 * v113;
          do
          {
            if (v131 >= v113)
              *v132 = 0;
            else
              *(_OWORD *)(v132 - 2) = *(_OWORD *)(v5 + v133);
            ++v131;
            v132 += 4;
            v133 += 16;
          }
          while (v114 != v131);
        }
        continue;
      default:
        continue;
    }
  }
}

uint64_t luaZ_fill(uint64_t a1)
{
  unsigned __int8 *v2;
  BOOL v3;
  uint64_t v5;

  v5 = 0;
  v2 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t *))(a1 + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 24), &v5);
  if (v2)
    v3 = v5 == 0;
  else
    v3 = 1;
  if (v3)
    return 0xFFFFFFFFLL;
  *(_QWORD *)a1 = v5 - 1;
  *(_QWORD *)(a1 + 8) = v2 + 1;
  return *v2;
}

uint64_t luaZ_init(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  a2[3] = a4;
  a2[4] = result;
  a2[1] = 0;
  a2[2] = a3;
  *a2 = 0;
  return result;
}

size_t luaZ_read(unint64_t *a1, char *__dst, size_t a3)
{
  size_t v3;
  unint64_t v6;
  const void *v7;
  size_t v8;
  size_t v9;

  v3 = a3;
  if (a3)
  {
    v6 = *a1;
    do
    {
      if (v6)
      {
        v7 = (const void *)a1[1];
      }
      else
      {
        if (luaZ_fill((uint64_t)a1) == -1)
          return v3;
        v6 = *a1 + 1;
        v7 = (const void *)(a1[1] - 1);
        *a1 = v6;
        a1[1] = (unint64_t)v7;
      }
      if (v3 >= v6)
        v8 = v6;
      else
        v8 = v3;
      memcpy(__dst, v7, v8);
      v6 = *a1 - v8;
      v9 = a1[1] + v8;
      *a1 = v6;
      a1[1] = v9;
      __dst += v8;
      v3 -= v8;
    }
    while (v3);
  }
  return v3;
}

uint64_t luaZ_openspace(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = a2[2];
  v6 = *a2;
  if (v5 < a3)
  {
    if (a3 <= 0x20)
      v7 = 32;
    else
      v7 = a3;
    v6 = luaM_realloc_(a1, v6, v5, v7);
    *a2 = v6;
    a2[2] = v7;
  }
  return v6;
}

uint64_t luaI_snprintf(uint64_t a1, uint64_t a2, int a3, unsigned __int8 *__src, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v10;
  uint64_t result;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  int v22;
  char v23;
  unsigned __int8 v24;
  int v25;
  char v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  int v30;
  char *v31;
  int *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int *v38;
  int v39;
  int v40;
  uint64_t v41;
  char *v42;
  char v43;
  double *v44;
  double v45;
  int v46;
  BOOL v47;
  uint64_t v48;
  char v49;
  BOOL v50;
  const char *v51;
  double v52;
  BOOL v53;
  uint64_t v54;
  char v55;
  BOOL v57;
  int v58;
  int v59;
  unsigned int v60;
  double v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  _BYTE *v72;
  int v73;
  _BYTE *v74;
  char **v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t i;
  int v80;
  double v81;
  double v82;
  double v83;
  unsigned int v84;
  int v85;
  int v86;
  int v87;
  double v88;
  unsigned int v89;
  unsigned int v90;
  int v91;
  double v92;
  unsigned int v93;
  int v94;
  double v95;
  int v96;
  double v97;
  uint64_t v98;
  char v99;
  int v100;
  int v101;
  double v102;
  _BOOL4 v104;
  int v105;
  int v106;
  int v107;
  char v108;
  int v109;
  uint64_t v110;
  char *v111;
  BOOL v112;
  char *v113;
  int v114;
  int v115;
  int v116;
  char v117;
  int v118;
  int *v119;
  int *v120;
  int v121;
  int v122;
  int v123;
  char v124;
  int v125;
  uint64_t v126;
  int v127;
  char *v128;
  unint64_t v129;
  uint64_t v130;
  unsigned int v131;
  unint64_t v132;
  BOOL v133;
  _BYTE *v134;
  char v135;
  int v136;
  int v137;
  unsigned int v138;
  int v139;
  char v140;
  int v141;
  char v142;
  int v143;
  _BYTE *v144;
  unsigned __int8 *v145;
  char v146;
  char v147;
  int v148;
  char v149;
  unsigned int v150;
  _BYTE *v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  int v157;
  char v158;
  int v159;
  int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  size_t v164;
  char v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  char v169;
  int v170;
  uint64_t v171;
  BOOL v172;
  uint64_t v173;
  char v174;
  int v175;
  int v176;
  char v177;
  char v178;
  unsigned int v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  int v184;
  int v185;
  int *v186;
  _BYTE v187[70];
  uint64_t v188;

  v188 = *MEMORY[0x1E0C80C00];
  if (a3 < 1)
    return 0;
  v10 = a3;
  result = 0;
  v184 = 0;
  v13 = 0;
  v186 = (int *)&a9;
LABEL_3:
  if (*__src == 37)
  {
    v185 = v10;
    v19 = __src;
  }
  else
  {
    if (!*__src)
      goto LABEL_315;
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = __src[++v15];
      v14 += 0x100000000;
    }
    while (v16 != 37 && v16 != 0);
    v18 = v15 + result;
    v19 = &__src[v15];
    if ((int)v18 >= v10)
    {
      v184 = 2;
      v185 = 0;
      result = result;
    }
    else
    {
      v185 = v10;
      memcpy((void *)(a2 + (int)result), __src, v14 >> 32);
      v16 = *v19;
      result = v18;
    }
    v13 = (char *)__src;
    if (!v16)
      goto LABEL_315;
  }
  LOBYTE(v20) = v19[1];
  if ((_BYTE)v20)
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = v19 + 2;
    while (1)
    {
      v20 = (char)v20;
      if ((char)v20 > 42)
      {
        switch((char)v20)
        {
          case '0':
            v25 = 1;
            break;
          case '-':
            v26 = 1;
            break;
          case '+':
            v21 = 1;
            break;
          default:
LABEL_46:
            if ((char)v20 != 42)
            {
              --v27;
              if (((char)v20 - 48) > 9)
              {
                v29 = 0;
              }
              else
              {
                v29 = 0;
                do
                {
                  v29 = v20 + 10 * v29 - 48;
                  v80 = (char)*++v27;
                  v20 = v80;
                }
                while ((v80 - 48) < 0xA);
              }
              goto LABEL_33;
            }
            v38 = v186;
            v186 += 2;
            v39 = *v38;
            if (v39 == 0x80000000)
              v40 = 0;
            else
              v40 = -v39;
            if (v39 >= 0)
            {
              v30 = v39;
            }
            else
            {
              v26 = 1;
              v30 = v40;
            }
            v20 = (char)*v27;
LABEL_34:
            if (v20 == 46)
            {
              v31 = (char *)(v27 + 1);
              v20 = (char)v27[1];
              if (v20 == 42)
              {
                v32 = v186;
                v186 += 2;
                v33 = *v32;
                v34 = (char)v27[2];
                v27 += 2;
                v20 = v34;
                if (v33 == 0x80000000)
                  v35 = -1;
                else
                  v35 = -v33;
                if (v33 < 0)
                  v33 = v35;
              }
              else
              {
                if ((v20 - 48) > 9)
                {
                  v36 = 0;
                }
                else
                {
                  v36 = 0;
                  do
                  {
                    v36 = v20 + 10 * v36 - 48;
                    v37 = *++v31;
                    v20 = v37;
                  }
                  while ((v37 - 48) < 0xA);
                }
                v33 = v36 & 0x7FFFFFFF;
                v27 = (unsigned __int8 *)v31;
              }
            }
            else
            {
              v33 = -1;
            }
            v41 = 0;
            v42 = &byte_1DEC64E31;
            while (v20 != *(v42 - 5))
            {
              ++v41;
              v42 += 6;
              if (v41 == 17)
                goto LABEL_315;
            }
            v43 = *(v42 - 2);
            switch(v43)
            {
              case 1:
              case 14:
                v177 = v26;
                v179 = result;
                v181 = a2;
                v62 = 0x1C1FAuLL >> v41;
                v63 = (uint64_t *)v186;
                v186 += 2;
                v64 = *v63;
                v65 = 32 * (v22 != 0);
                if (v21)
                  v66 = 43;
                else
                  v66 = v65;
                if (v64 >= 0)
                {
                  v67 = v64;
                }
                else
                {
                  v66 = 45;
                  v67 = -v64;
                }
                if ((v62 & 1) != 0)
                  v68 = 0;
                else
                  v68 = v66;
                if ((v62 & 1) != 0)
                  v69 = v64;
                else
                  v69 = v67;
                v175 = v30;
                v70 = v30 - (v68 != 0);
                if (v33 > v70)
                  v70 = v33;
                if (v25)
                  v71 = v70;
                else
                  v71 = v33;
                if (v71 < 60)
                {
                  v72 = 0;
                  v73 = 70;
                  v74 = v187;
LABEL_205:
                  v126 = 0;
                  v127 = (_DWORD)v74 + v73 - 1;
                  v128 = &aDigits[*(v42 - 1)];
                  v129 = *(v42 - 4);
                  if (v71 <= 60)
                    v130 = 60;
                  else
                    v130 = v71;
                  v131 = v71 - 1;
                  v132 = v69;
                  do
                  {
                    v74[v130 + 8 + v126--] = v128[v132 % v129];
                    --v131;
                    v133 = v132 >= v129;
                    v132 /= v129;
                  }
                  while (v133);
                  v134 = &v74[v130];
                  if ((int)v126 + v71 < 1)
                  {
                    v13 = &v134[v126 + 9];
                  }
                  else
                  {
                    v13 = &v134[v126 - v131 + 8];
                    memset(v13, 48, (v126 + v71));
                  }
                  v26 = v177;
                  result = v179;
                  v78 = (uint64_t)v72;
                  if (v68)
                    *--v13 = v68;
                  a2 = v181;
                  v30 = v175;
                  if (v69 && v23)
                  {
                    v10 = v185;
                    if (((0xFE5FuLL >> v41) & 1) == 0)
                    {
                      v144 = (char *)&aPrefix + *v42;
                      v147 = *v144;
                      v145 = v144 + 1;
                      v146 = v147;
                      do
                      {
                        *--v13 = v146;
                        v148 = *v145++;
                        v146 = v148;
                      }
                      while (v148);
                    }
                  }
                  else
                  {
                    v10 = v185;
                  }
                  LODWORD(i) = v127 - (_DWORD)v13;
                  goto LABEL_283;
                }
                v73 = v71 + 10;
                v74 = (_BYTE *)luaM_realloc_(a1, 0, 0, (v71 + 10));
                if (v74)
                {
                  v72 = v74;
                  goto LABEL_205;
                }
                a2 = v181;
                result = v179;
                goto LABEL_315;
              case 2:
              case 3:
              case 4:
                v44 = (double *)v186;
                v186 += 2;
                v45 = *v44;
                if (v33 >= 0)
                  v46 = v33;
                else
                  v46 = 6;
                v47 = v22 == 0;
                v48 = !v47;
                v49 = 32 * v48;
                v50 = v21 == 0;
                v51 = "+Inf";
                if (v50)
                  v51 = "Inf";
                if (!v50)
                {
                  v47 = 0;
                  v48 = 1;
                  v49 = 43;
                }
                v52 = -v45;
                if (v45 < 0.0)
                  v13 = "-Inf";
                else
                  v13 = (char *)v51;
                if (v45 < 0.0)
                {
                  v53 = 0;
                }
                else
                {
                  v52 = v45;
                  v53 = v47;
                }
                if (v45 < 0.0)
                  v54 = 1;
                else
                  v54 = v48;
                if (v45 < 0.0)
                  v55 = 45;
                else
                  v55 = v49;
                v57 = (_DWORD)v41 != 2 && (_DWORD)v41 != 12 || v46 <= 0;
                v58 = !v57;
                v59 = v46 - v58;
                if (((v46 - v58) & 0xFFF) != 0)
                {
                  v60 = (v59 & 0xFFF) + 1;
                  v61 = 0.5;
                  do
                  {
                    v61 = v61 * 0.1;
                    --v60;
                  }
                  while (v60 > 1);
                }
                else
                {
                  v61 = 0.5;
                }
                v81 = -0.0;
                if ((_DWORD)v41 == 9)
                  v81 = v61;
                v82 = v52 + v81;
                if (v52 + v81 <= 0.0)
                {
                  v96 = 0;
                }
                else
                {
                  v83 = 1.0;
                  v84 = -100;
                  v85 = -64;
                  v86 = -8;
                  v87 = -1;
                  do
                  {
                    v88 = v83;
                    v89 = v85;
                    v90 = v86;
                    v91 = v87;
                    v83 = v83 * 1.0e100;
                    if (v82 < v83)
                      break;
                    v84 += 100;
                    v85 += 100;
                    v86 += 100;
                    v87 += 100;
                  }
                  while (v84 < 0x15F);
                  do
                  {
                    v92 = v88;
                    v93 = v90;
                    v94 = v91;
                    v88 = v88 * 1.0e64;
                    if (v82 < v88)
                      break;
                    v89 += 64;
                    v90 += 64;
                    v91 += 64;
                  }
                  while (v89 < 0x15F);
                  do
                  {
                    v95 = v92;
                    v96 = v94;
                    v92 = v92 * 100000000.0;
                    if (v82 < v92)
                      break;
                    v93 += 8;
                    v94 += 8;
                  }
                  while (v93 < 0x15F);
                  do
                  {
                    v97 = v95;
                    ++v96;
                    v95 = v95 * 10.0;
                  }
                  while (v82 >= v95 && v96 < 0x15F);
                  v82 = v82 / v97;
                  while (v82 < 0.00000001)
                  {
                    v82 = v82 * 100000000.0;
                    v96 -= 8;
                  }
                  while (v82 < 1.0)
                  {
                    v82 = v82 * 10.0;
                    --v96;
                  }
                  if (v96 >= 351)
                  {
                    v98 = result;
                    v99 = v26;
                    v100 = v30;
                    v101 = strlen(v13);
                    v30 = v100;
                    v26 = v99;
                    v78 = 0;
LABEL_238:
                    LODWORD(i) = v101 & 0x3FFFFFFF;
                    result = v98;
LABEL_239:
                    v10 = v185;
                    goto LABEL_283;
                  }
                }
                v182 = a2;
                if ((_DWORD)v41 == 9)
                {
                  v43 = 2;
LABEL_178:
                  v172 = v24;
                  goto LABEL_179;
                }
                v102 = v61 + v82;
                if (v102 < 10.0)
                  v82 = v102;
                else
                  v82 = v102 * 0.1;
                if (v102 >= 10.0)
                  ++v96;
                if ((_DWORD)v41 != 12 && (_DWORD)v41 != 2)
                  goto LABEL_178;
                v172 = v23 == 0;
                v104 = v96 < -4 || v96 > v59;
                if (v104)
                  v43 = 3;
                else
                  v43 = 2;
                if (v104)
                  v105 = 0;
                else
                  v105 = v96;
                v59 -= v105;
LABEL_179:
                if (v43 == 3)
                  v106 = 0;
                else
                  v106 = v96;
                v107 = v59 + v30 + (v106 & ~(v106 >> 31));
                v178 = v26;
                v180 = result;
                v176 = v30;
                v171 = v54;
                v174 = v43;
                if (v107 < 56)
                {
                  v173 = 0;
                  v13 = v187;
                }
                else
                {
                  v108 = v55;
                  v109 = v59;
                  v110 = luaM_realloc_(a1, 0, 0, (v107 + 15));
                  v55 = v108;
                  v59 = v109;
                  v111 = (char *)v110;
                  result = v180;
                  v13 = v111;
                  v173 = (uint64_t)v111;
                  if (!v111)
                  {
                    a2 = v182;
                    goto LABEL_315;
                  }
                }
                v112 = v59 > 0;
                v113 = v13;
                if (!v53)
                {
                  *v13 = v55;
                  v113 = v13 + 1;
                }
                v114 = 10 * v24 + 16;
                if (v106 < 0)
                {
                  *v113++ = 48;
                  v118 = v96;
                }
                else
                {
                  v115 = v106 + 1;
                  do
                  {
                    if (v114 < 1)
                    {
                      v117 = 48;
                    }
                    else
                    {
                      v116 = (int)v82;
                      v82 = (v82 - (double)(int)v82) * 10.0;
                      v117 = v116 + 48;
                      --v114;
                    }
                    *v113++ = v117;
                    --v115;
                  }
                  while (v115 > 0);
                  v118 = -1;
                }
                v135 = v23 | v24 | v112;
                if (v135)
                  *v113++ = 46;
                if (v118 > -2)
                {
                  v136 = v59;
                }
                else
                {
                  v169 = v23 | v24 | v112;
                  v170 = v59;
                  memset(v113, 48, (-2 - v118) + 1);
                  v135 = v169;
                  v59 = v170;
                  result = v180;
                  v113 += (-2 - v118) + 1;
                  v136 = v170 + v118 + 1;
                }
                v10 = v185;
                v26 = v178;
                v30 = v176;
                if (v136 < 1)
                {
                  a2 = v182;
                }
                else
                {
                  if (v118 >= -1)
                    v137 = -1;
                  else
                    v137 = v118;
                  v138 = v59 + v137 + 2;
                  a2 = v182;
                  do
                  {
                    if (v114 < 1)
                    {
                      v140 = 48;
                    }
                    else
                    {
                      v139 = (int)v82;
                      v82 = (v82 - (double)(int)v82) * 10.0;
                      v140 = v139 + 48;
                      --v114;
                    }
                    *v113++ = v140;
                    --v138;
                  }
                  while (v138 > 1);
                }
                if (v172 && v135)
                {
                  --v113;
                  while (1)
                  {
                    v141 = *v113;
                    if (v141 != 48)
                      break;
                    *v113-- = 0;
                  }
                  if (v141 == 46)
                  {
                    if (v24)
                    {
                      v113[1] = 48;
                      v113 += 2;
                    }
                    else
                    {
                      *v113 = 0;
                    }
                  }
                  else
                  {
                    ++v113;
                  }
                }
                v78 = v173;
                if (v174 == 3)
                {
                  *v113 = aDigits[*(v42 - 1)];
                  if (v96 >= 0)
                    v149 = 43;
                  else
                    v149 = 45;
                  if (v96 >= 0)
                    v150 = v96;
                  else
                    v150 = -v96;
                  v113[1] = v149;
                  if (v150 < 0x64)
                  {
                    v151 = v113 + 2;
                  }
                  else
                  {
                    v151 = v113 + 3;
                    v113[2] = v150 / 0x64 + 48;
                    v150 %= 0x64u;
                  }
                  *v151 = (v150 / 0xAu) | 0x30;
                  v113 = v151 + 2;
                  v151[1] = (v150 % 0xAu) | 0x30;
                }
                *v113 = 0;
                LODWORD(i) = (_DWORD)v113 - (_DWORD)v13;
                if (v25)
                {
                  if (!v178)
                  {
                    v152 = v176 - i;
                    if (v176 > (int)i)
                    {
                      if ((i & 0x80000000) == 0)
                      {
                        v153 = v176;
                        v154 = v152;
                        v155 = &v13[-v152];
                        do
                        {
                          v13[v153] = v155[v153];
                          v57 = v153-- <= v154;
                        }
                        while (!v57);
                      }
                      if (v176 != (_DWORD)i)
                      {
                        v156 = result;
                        memset(&v13[v171], 48, (~(_DWORD)v113 + v176 + (_DWORD)v13) + 1);
                        v30 = v176;
                        v26 = v178;
                        result = v156;
                      }
                      LODWORD(i) = v30;
                    }
                  }
                }
LABEL_283:
                v160 = v30 - i;
                if (v30 - (int)i < 1 || v26)
                {
                  v162 = a2;
                  v163 = (i + result);
                  if ((int)v163 >= v10)
                  {
                    v10 = 0;
                    v184 = 2;
                  }
                  else
                  {
                    v164 = (int)i;
                    v165 = v26;
                    memcpy((void *)(v162 + (int)result), v13, v164);
                    v26 = v165;
                    result = v163;
                  }
                  a2 = v162;
                  if (v160 >= 1)
                  {
                    if (v26)
                    {
                      if ((int)result + v160 < v10
                        || !v184 && (v160 = v10 + ~(_DWORD)result, v184 = 2, v10 = 0, v160 >= 1))
                      {
                        v167 = result;
                        memset((void *)(v162 + (int)result), 32, (v160 - 1) + 1);
                        result = (v167 + v160);
                      }
                    }
                  }
                }
                else
                {
                  if (v160 + (int)result < v10 || !v184 && (v160 = v10 + ~(_DWORD)result, v184 = 2, v10 = 0, v160 >= 1))
                  {
                    v161 = result;
                    memset((void *)(a2 + (int)result), 32, (v160 - 1) + 1);
                    result = (v161 + v160);
                  }
                  v166 = (result + i);
                  if ((int)v166 >= v10)
                  {
                    v10 = 0;
                    v184 = 2;
                  }
                  else
                  {
                    memcpy((void *)(a2 + (int)result), v13, (int)i);
                    result = v166;
                  }
                }
                if (v78)
                {
                  v168 = result;
                  luaM_realloc_(a1, v78, 1, 0);
                  result = v168;
                }
                __src = v27 + 1;
                break;
              case 5:
                v78 = 0;
                v30 = 0;
                LODWORD(i) = 0;
                v119 = v186;
                v186 += 2;
                **(_DWORD **)v119 = result;
                goto LABEL_239;
              case 6:
              case 7:
                v75 = (char **)v186;
                v186 += 2;
                v76 = *v75;
                if ((_DWORD)v41 == 3)
                  v77 = (uint64_t)v76;
                else
                  v77 = 0;
                if (v76)
                  v78 = v77;
                else
                  v78 = 0;
                if (v76)
                  v13 = v76;
                else
                  v13 = &byte_1DEBD87CE;
                if (v33 < 0)
                {
                  v98 = result;
                  v142 = v26;
                  v143 = v30;
                  v101 = strlen(v13);
                  v30 = v143;
                  v26 = v142;
                  goto LABEL_238;
                }
                v10 = v185;
                if (v33)
                {
                  for (i = 0; i != v33; ++i)
                  {
                    if (!v13[i])
                      goto LABEL_283;
                  }
                  LODWORD(i) = v33;
                }
                else
                {
                  LODWORD(i) = 0;
                }
                goto LABEL_283;
              case 8:
                v78 = 0;
                v187[0] = 37;
                v13 = v187;
                LODWORD(i) = 1;
                goto LABEL_239;
              case 9:
                v120 = v186;
                v186 += 2;
                v121 = *v120;
                v122 = v33 - 1;
                if (v33 <= 1)
                {
                  v10 = v185;
                  goto LABEL_282;
                }
                v30 -= v122;
                v10 = v185;
                if (v30 < 2 || v26)
                  goto LABEL_279;
                v123 = v30 - 1;
                if (v30 - 1 + (int)result < v185)
                {
                  v124 = v26;
LABEL_202:
                  v125 = result;
                  memset((void *)(a2 + (int)result), 32, (v123 - 1) + 1);
                  v30 = 0;
                  result = (v125 + v123);
                  v26 = v124;
                  goto LABEL_279;
                }
                if (!v184)
                {
                  v123 = v185 + ~(_DWORD)result;
                  if (v123 < 1)
                  {
                    v30 = 0;
                    v10 = 0;
                    v184 = 2;
                    if (v122 + (int)result < 0)
                      goto LABEL_280;
                    goto LABEL_282;
                  }
                  v124 = v26;
                  v10 = 0;
                  v184 = 2;
                  goto LABEL_202;
                }
                v30 = 0;
LABEL_279:
                if ((int)result + v122 < v10 || !v184 && (v122 = v10 + ~(_DWORD)result, v184 = 2, v10 = 0, v122 >= 1))
                {
LABEL_280:
                  v157 = result;
                  v158 = v26;
                  v159 = v30;
                  memset((void *)(a2 + (int)result), v121, (v122 - 1) + 1);
                  v30 = v159;
                  v26 = v158;
                  result = (v157 + v122);
                }
LABEL_282:
                v78 = 0;
                v187[0] = v121;
                v13 = v187;
                LODWORD(i) = 1;
                goto LABEL_283;
              default:
                goto LABEL_315;
            }
            goto LABEL_3;
        }
      }
      else
      {
        switch((char)v20)
        {
          case ' ':
            v22 = 1;
            break;
          case '!':
            v24 = 1;
            break;
          case '#':
            v23 = 1;
            break;
          default:
            goto LABEL_46;
        }
      }
      v28 = *v27++;
      v20 = v28;
      if (!v28)
      {
        v29 = 0;
        --v27;
LABEL_33:
        v30 = v29 & 0x7FFFFFFF;
        goto LABEL_34;
      }
    }
  }
  if ((int)result + 1 < v185)
  {
    *(_BYTE *)(a2 + (int)result) = 37;
    result = (result + 1);
  }
LABEL_315:
  if (a2)
    *(_BYTE *)(a2 + (int)result) = 0;
  return result;
}

uint64_t getMetatableLua(_QWORD *a1, char *a2)
{
  return lua_getfield(a1, -1001000, a2);
}

uint64_t LuaStateFactoryMemLog_Con(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  result = Object_Con(a1);
  if (!(_DWORD)result)
  {
    *a1 = &__LuaStateFactoryMemLog;
    a1[1] = &unk_1EA937AC8;
    a1[2] = a2;
  }
  return result;
}

uint64_t LuaStateFactoryMemLog_CreateLuaState(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = lua_newstate(__LuaStateFactory_CustomAlloc, *(_QWORD *)(a1 + 16));
  *a2 = v3;
  if (v3)
    return 0;
  else
    return kaldi::nnet1::UpdatableComponent::IsUpdatable(0);
}

uint64_t __LuaStateFactory_CustomAlloc(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  int v5;

  if (result)
  {
    if (a4)
    {
      if (a2)
      {
        v4 = 0;
        result = OOCAllocator_Realloc(result, a2, a4, &v4);
        if (!v4)
          return result;
      }
      else
      {
        v5 = 0;
        result = OOCAllocator_Malloc(result, a4, &v5);
        if (!v5)
          return result;
      }
    }
    else
    {
      OOCAllocator_Free(result, a2);
    }
    return 0;
  }
  return result;
}

uint64_t LuaStateFactoryMemLog_CreateLuaStateWithMemoryLogging(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;

  v4 = lua_newstate((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))__LuaStateFactory_CustomAllocMemLog, a3);
  *a2 = v4;
  if (v4)
    return 0;
  else
    return kaldi::nnet1::UpdatableComponent::IsUpdatable(0);
}

uint64_t __LuaStateFactory_CustomAllocMemLog(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  int v6;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v10 = 0;
  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    v6 = a4;
    if (a4)
    {
      if (a2)
      {
        result = OOCAllocator_Realloc(result, a2, a4, &v10);
        if (!v10)
        {
          v6 -= a3;
          goto LABEL_10;
        }
      }
      else
      {
        result = OOCAllocator_Malloc(result, a4, &v10);
        if (!v10)
        {
LABEL_10:
          v8 = *(_DWORD *)(a1 + 4);
          v9 = *(_DWORD *)a1 + v6;
          *(_DWORD *)a1 = v9;
          if (v8 < v9)
            *(_DWORD *)(a1 + 4) = v9;
          return result;
        }
      }
    }
    else
    {
      *(_DWORD *)a1 -= a3;
      OOCAllocator_Free(result, a2);
    }
    return 0;
  }
  return result;
}

uint64_t getOOCObject_LuaLDO(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v4;

  v4 = (_QWORD *)luaL_checkudata(a1, a2, "vocalizer.LDO");
  if (!v4)
    return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"lua_stack_arg");
  *a3 = *v4;
  return 0;
}

uint64_t getRoot_LuaLDO(uint64_t *a1)
{
  uint64_t v3;
  uint64_t v4;

  v4 = 0;
  if (getOOCObject_LuaLDO(a1, 1, &v4))
    return LuaVMUtil_error(a1, "Error in ldo:getRoot");
  v3 = *(_QWORD *)(v4 + 16);
  if (!v3 || pushLuaObject_LuaLDOTreeNode(a1, v3))
    return LuaVMUtil_error(a1, "Error in ldo:getRoot");
  else
    return 1;
}

uint64_t getInitialText_LuaLDO(_QWORD *a1)
{
  char *v3;
  uint64_t v4;

  v4 = 0;
  if (getOOCObject_LuaLDO(a1, 1, &v4))
    return LuaVMUtil_error(a1, "Error in ldo:getInitialText");
  v3 = (char *)fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(*(_QWORD *)(v4 + 24));
  lua_pushstring(a1, v3);
  return 1;
}

uint64_t computeText_LuaLDO(_QWORD *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v6 = 0;
  v7 = 0;
  if (getOOCObject_LuaLDO(a1, 1, &v7))
    return LuaVMUtil_error(a1, "Error in ldo:computeText");
  v2 = LDO_ComputeText(v7, &v6);
  v3 = v6;
  if (v2)
  {
    if (!v6)
      return LuaVMUtil_error(a1, "Error in ldo:computeText");
LABEL_4:
    v4 = LDOString_BorrowAllocator(v3);
    OOC_PlacementDeleteObject(v4, v6);
    v6 = 0;
    return LuaVMUtil_error(a1, "Error in ldo:computeText");
  }
  if (LuaVMUtil_pushLuaStringAndDestroy(a1, v6))
  {
    v3 = v6;
    if (!v6)
      return LuaVMUtil_error(a1, "Error in ldo:computeText");
    goto LABEL_4;
  }
  return 1;
}

uint64_t getLabelSet_LuaLDO(uint64_t *a1)
{
  uint64_t v3;

  v3 = 0;
  if (getOOCObject_LuaLDO(a1, 1, &v3)
    || pushLuaObject_LuaLDOLabelSet(a1, *(_QWORD *)(v3 + 32)))
  {
    return LuaVMUtil_error(a1, "Error in ldo:getLabelSet");
  }
  else
  {
    return 1;
  }
}

uint64_t getLabels_LuaLDO(uint64_t *a1)
{
  uint64_t *v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  __n128 v7;
  unint64_t v8;
  uint64_t v9;

  v9 = 0;
  if (getOOCObject_LuaLDO(a1, 1, &v9))
    return LuaVMUtil_error(a1, "Error in ldo:getLabels");
  LDO_GetLabels(v9, &v7);
  v3 = (uint64_t *)v7.n128_u64[1];
  v4 = v8;
  lua_createtable((uint64_t)a1, 0, 0);
  if ((unint64_t)v3 < v4)
  {
    v5 = 0;
    while (!pushLuaObject_LuaLDOLabel(a1, *v3))
    {
      v6 = LuaVMUtil_u32_index_to_luainteger(v5);
      lua_rawseti(a1, -2, v6);
      ++v5;
      if ((unint64_t)++v3 >= v4)
        return 1;
    }
    return LuaVMUtil_error(a1, "Error in ldo:getLabels");
  }
  return 1;
}

uint64_t setText_LuaLDO(_QWORD *a1)
{
  uint64_t v2;
  _BOOL4 v4;
  char *__s;
  size_t v6;
  uint64_t v7;

  v6 = 0;
  v7 = 0;
  __s = 0;
  if (getOOCObject_LuaLDO(a1, 1, &v7)
    || getOOCObject_LuaLDOTreeNode(a1, 2, &v6)
    || LuaVMUtil_luastring_to_string(a1, 3, (uint64_t *)&__s)
    || !__s
    || LDO_SetText(v7, v6, __s))
  {
    return LuaVMUtil_error(a1, "Error in ldo:setText");
  }
  v2 = 1;
  v4 = LuaVMUtil_lhBOOL_to_luaBOOLean(1);
  lua_pushBOOLean((uint64_t)a1, v4);
  return v2;
}

uint64_t addLabel_LuaLDO(uint64_t *a1)
{
  unsigned int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int OOCObject_LuaLDO;

  v19 = 0;
  v20 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  OOCObject_LuaLDO = getOOCObject_LuaLDO(a1, 1, &v20);
  if (OOCObject_LuaLDO)
    goto LABEL_2;
  if (lua_type(a1, 2))
  {
    OOCObject_LuaLDO = LuaVMUtil_luastring_to_string(a1, 2, (uint64_t *)&v14);
    if (OOCObject_LuaLDO)
      goto LABEL_2;
  }
  if (lua_type(a1, 3))
  {
    OOCObject_LuaLDO = LuaVMUtil_luastring_to_string(a1, 3, (uint64_t *)&v13);
    if (OOCObject_LuaLDO)
      goto LABEL_2;
  }
  LODWORD(v16) = 0;
  v17 = 0;
  v18 = 0;
  lua_pushnil((uint64_t)a1);
  if (lua_next(a1, 4))
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = v20;
    do
    {
      v7 = lua_gettop((uint64_t)a1);
      OOCObject_LuaLDO = getOOCObject_LuaLDOTreeNode(a1, v7, &v15);
      if (OOCObject_LuaLDO)
        goto LABEL_2;
      v8 = (unint64_t)v5 - v4;
      v9 = (((unint64_t)v5 - v4) >> 3) + 1;
      if (v9 > v3)
      {
        v10 = 2 * v3;
        if (2 * v3 >= v3 + 1000000)
          v10 = v3 + 1000000;
        if (v10 > v9)
          v9 = v10;
        if (v9 <= 8)
          v3 = 8;
        else
          v3 = v9;
        v11 = OOCAllocator_Realloc(*(_QWORD *)(v6 + 8), v4, 8 * v3, &OOCObject_LuaLDO);
        v17 = v11;
        if (OOCObject_LuaLDO)
          goto LABEL_2;
        v4 = v11;
        LODWORD(v16) = v3;
        v5 = (_QWORD *)(v11 + (v8 & 0x7FFFFFFF8));
        v18 = v5;
      }
      *v5 = v15;
      v5 = ++v18;
      lua_settop((uint64_t)a1, 0xFFFFFFFE);
    }
    while (lua_next(a1, 4));
  }
  v12 = v20;
  OOCObject_LuaLDO = LDO_AddLabel(v20, v14, v13, (uint64_t)&v16, &v19);
  if (OOCObject_LuaLDO || (OOCObject_LuaLDO = pushLuaObject_LuaLDOLabel(a1, v19)) != 0)
  {
LABEL_2:
    LODWORD(v16) = 0;
    if (v17)
    {
      OOCAllocator_Free(*(_QWORD *)(v20 + 8), v17);
      v17 = 0;
    }
    v18 = 0;
    return LuaVMUtil_error(a1, "Error in ldo:addLabel");
  }
  LODWORD(v16) = 0;
  if (v17)
    OOCAllocator_Free(*(_QWORD *)(v12 + 8), v17);
  return 1;
}

uint64_t removeLabel_LuaLDO(_QWORD *a1)
{
  uint64_t v2;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 0;
  v6 = 0;
  if (getOOCObject_LuaLDO(a1, 1, &v6)
    || getOOCObject_LuaLDOLabel(a1, 2, &v5)
    || LDO_RemoveLabel(v6, v5))
  {
    return LuaVMUtil_error(a1, "Error in ldo:removeLabel");
  }
  v2 = 1;
  v4 = LuaVMUtil_lhBOOL_to_luaBOOLean(1);
  lua_pushBOOLean((uint64_t)a1, v4);
  return v2;
}

uint64_t computeOverlappingLabels_LuaLDO(uint64_t *a1)
{
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;

  v13 = 0;
  v14 = 0;
  v11 = 0;
  v12 = 0;
  v10 = 0;
  v9 = 0;
  if (getOOCObject_LuaLDO(a1, 1, &v14))
    return LuaVMUtil_error(a1, "Error in ldo:computeOverlappingLabels");
  if (lua_type(a1, 2))
  {
    v3 = (unsigned int *)&v10 + 1;
    if (LuaVMUtil_luainteger_to_u32_index(a1, 2, (_DWORD *)&v10 + 1))
      return LuaVMUtil_error(a1, "Error in ldo:computeOverlappingLabels");
  }
  else
  {
    v3 = 0;
  }
  if (lua_type(a1, 3))
  {
    v4 = (unsigned int *)&v10;
    if (!LuaVMUtil_luainteger_to_u32_index(a1, 3, &v10))
      goto LABEL_11;
    return LuaVMUtil_error(a1, "Error in ldo:computeOverlappingLabels");
  }
  v4 = 0;
LABEL_11:
  if (LuaVMUtil_luaBOOLean_to_lhBOOL(a1, 4, &v9))
    return LuaVMUtil_error(a1, "Error in ldo:computeOverlappingLabels");
  v5 = v14;
  if (LDO_ComputeOverlappingLabels(v14, v3, v4, v9, (unsigned int *)&v11))
    return LuaVMUtil_error(a1, "Error in ldo:computeOverlappingLabels");
  lua_createtable((uint64_t)a1, 0, 0);
  v6 = v12;
  if ((unint64_t)v12 < v13)
  {
    v7 = 0;
    while (!pushLuaObject_LuaLDOLabel(a1, *v6))
    {
      v8 = LuaVMUtil_u32_index_to_luainteger(v7);
      lua_rawseti(a1, -2, v8);
      ++v7;
      if ((unint64_t)++v6 >= v13)
        goto LABEL_17;
    }
    goto LABEL_18;
  }
LABEL_17:
  if (LDO_FreeLDOLabelVector(v5, (uint64_t)&v11))
  {
LABEL_18:
    LDO_FreeLDOLabelVector(v5, (uint64_t)&v11);
    return LuaVMUtil_error(a1, "Error in ldo:computeOverlappingLabels");
  }
  return 1;
}

uint64_t appendNewNode_LuaLDO(uint64_t *a1)
{
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;

  v8 = 0;
  v6 = 0;
  v7 = 0;
  v4 = 0;
  v5 = 0;
  v3 = 0;
  if (getOOCObject_LuaLDO(a1, 1, &v8)
    || getOOCObject_LuaLDOTreeNode(a1, 2, &v7)
    || lua_type(a1, 3) && LuaVMUtil_luastring_to_string(a1, 3, (uint64_t *)&v5)
    || lua_type(a1, 4) && LuaVMUtil_luastring_to_string(a1, 4, (uint64_t *)&v4)
    || LuaVMUtil_luainteger_to_u32_index(a1, 5, (_DWORD *)&v3 + 1)
    || LuaVMUtil_luainteger_to_u32_index(a1, 6, &v3)
    || LDO_AppendNewNode(v8, v7, v5, v4, SHIDWORD(v3), v3, &v6)
    || pushLuaObject_LuaLDOTreeNode(a1, v6))
  {
    return LuaVMUtil_error(a1, "Error in ldo:appendNewNode");
  }
  else
  {
    return 1;
  }
}

uint64_t addLabelOnSubstring_LuaLDO(uint64_t *a1)
{
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v6 = 0;
  v7 = 0;
  v5 = 0;
  if (getOOCObject_LuaLDO(a1, 1, &v9)
    || lua_type(a1, 2) && LuaVMUtil_luastring_to_string(a1, 2, (uint64_t *)&v7)
    || lua_type(a1, 3) && LuaVMUtil_luastring_to_string(a1, 3, (uint64_t *)&v6))
  {
    return LuaVMUtil_error(a1, "Error in ldo:addLabelOnSubstring");
  }
  if (lua_type(a1, 4))
  {
    v3 = (unsigned int *)&v5 + 1;
    if (LuaVMUtil_luainteger_to_u32_index(a1, 4, (_DWORD *)&v5 + 1))
      return LuaVMUtil_error(a1, "Error in ldo:addLabelOnSubstring");
  }
  else
  {
    v3 = 0;
  }
  if (lua_type(a1, 5))
  {
    v4 = (unsigned int *)&v5;
    if (!LuaVMUtil_luainteger_to_u32_index(a1, 5, &v5))
      goto LABEL_15;
    return LuaVMUtil_error(a1, "Error in ldo:addLabelOnSubstring");
  }
  v4 = 0;
LABEL_15:
  if (LDO_AddLabelOnSubstring(v9, v7, v6, v3, v4, &v8) || pushLuaObject_LuaLDOLabel(a1, v8))
    return LuaVMUtil_error(a1, "Error in ldo:addLabelOnSubstring");
  return 1;
}

uint64_t getNumberLabels_LuaLDO(_QWORD *a1)
{
  unsigned int NumberLabels;
  uint64_t v4;

  v4 = 0;
  if (getOOCObject_LuaLDO(a1, 1, &v4))
    return LuaVMUtil_error(a1, "Error in ldo:getNumberLabels");
  NumberLabels = LDO_GetNumberLabels(v4);
  lua_pushinteger((uint64_t)a1, NumberLabels);
  return 1;
}

uint64_t mergeLabels_LuaLDO(uint64_t *a1)
{
  unsigned int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int OOCObject_LuaLDO;

  v19 = 0;
  v20 = 0;
  v17 = 0;
  v18 = 0;
  v15 = 0;
  v16 = 0;
  v13 = 0;
  v14 = 0;
  OOCObject_LuaLDO = getOOCObject_LuaLDO(a1, 1, &v20);
  if (OOCObject_LuaLDO)
    goto LABEL_2;
  if (lua_type(a1, 2))
  {
    OOCObject_LuaLDO = LuaVMUtil_luastring_to_string(a1, 2, (uint64_t *)&v14);
    if (OOCObject_LuaLDO)
      goto LABEL_2;
  }
  if (lua_type(a1, 3))
  {
    OOCObject_LuaLDO = LuaVMUtil_luastring_to_string(a1, 3, (uint64_t *)&v13);
    if (OOCObject_LuaLDO)
      goto LABEL_2;
  }
  LODWORD(v15) = 0;
  v16 = 0;
  v17 = 0;
  lua_pushnil((uint64_t)a1);
  if (lua_next(a1, 4))
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = v20;
    do
    {
      v7 = lua_gettop((uint64_t)a1);
      OOCObject_LuaLDO = getOOCObject_LuaLDOLabel(a1, v7, &v19);
      if (OOCObject_LuaLDO)
        goto LABEL_2;
      v8 = (unint64_t)v5 - v4;
      v9 = (((unint64_t)v5 - v4) >> 3) + 1;
      if (v9 > v3)
      {
        v10 = 2 * v3;
        if (2 * v3 >= v3 + 1000000)
          v10 = v3 + 1000000;
        if (v10 > v9)
          v9 = v10;
        if (v9 <= 8)
          v3 = 8;
        else
          v3 = v9;
        v11 = OOCAllocator_Realloc(*(_QWORD *)(v6 + 8), v4, 8 * v3, &OOCObject_LuaLDO);
        v16 = v11;
        if (OOCObject_LuaLDO)
          goto LABEL_2;
        v4 = v11;
        LODWORD(v15) = v3;
        v5 = (_QWORD *)(v11 + (v8 & 0x7FFFFFFF8));
        v17 = v5;
      }
      *v5 = v19;
      v5 = ++v17;
      lua_settop((uint64_t)a1, 0xFFFFFFFE);
    }
    while (lua_next(a1, 4));
  }
  v12 = v20;
  OOCObject_LuaLDO = LDO_MergeLabels(v20, (uint64_t)&v15, v14, v13, &v18);
  if (OOCObject_LuaLDO || (OOCObject_LuaLDO = pushLuaObject_LuaLDOLabel(a1, v18)) != 0)
  {
LABEL_2:
    LODWORD(v15) = 0;
    if (v16)
    {
      OOCAllocator_Free(*(_QWORD *)(v20 + 8), v16);
      v16 = 0;
    }
    v17 = 0;
    return LuaVMUtil_error(a1, "Error in ldo:mergeLabels");
  }
  LODWORD(v15) = 0;
  if (v16)
    OOCAllocator_Free(*(_QWORD *)(v12 + 8), v16);
  return 1;
}

uint64_t replaceNodes_LuaLDO(uint64_t *a1)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  char *v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  char *v31;
  int v32;
  uint64_t v33;
  char *v34;
  int v35;
  char *v36;
  uint64_t **v37;
  uint64_t *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  int OOCObject_LuaLDO;
  uint64_t v55;

  v52 = 0;
  v53 = 0;
  v45 = 0;
  v46 = 0;
  v43 = 0;
  v44 = 0;
  v41 = 0;
  v42 = 0;
  v50 = 0;
  v51 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  OOCObject_LuaLDO = getOOCObject_LuaLDO(a1, 1, &v53);
  if (OOCObject_LuaLDO)
    goto LABEL_2;
  lua_pushnil((uint64_t)a1);
  v4 = lua_next(a1, 2);
  v5 = v53;
  if (v4)
  {
    do
    {
      v6 = lua_gettop((uint64_t)a1);
      OOCObject_LuaLDO = getOOCObject_LuaLDOTreeNode(a1, v6, &v46);
      if (OOCObject_LuaLDO)
        goto LABEL_2;
      v7 = v52;
      v8 = (unint64_t)v52 - v51;
      v9 = (((unint64_t)v52 - v51) >> 3) + 1;
      if (v9 > v50)
      {
        v10 = 2 * v50;
        if (2 * (int)v50 >= (v50 + 1000000))
          v10 = v50 + 1000000;
        if (v10 <= v9)
          v10 = (((unint64_t)v52 - v51) >> 3) + 1;
        if (v10 <= 8)
          v11 = 8;
        else
          v11 = v10;
        v12 = OOCAllocator_Realloc(*(_QWORD *)(v5 + 8), v51, 8 * v11, &OOCObject_LuaLDO);
        v2 = v12;
        v51 = v12;
        if (OOCObject_LuaLDO)
        {
LABEL_3:
          LODWORD(v50) = 0;
          if (v2)
          {
            OOCAllocator_Free(*(_QWORD *)(v53 + 8), v2);
            v51 = 0;
          }
          v52 = 0;
          LODWORD(v47) = 0;
          if (v48)
          {
            OOCAllocator_Free(*(_QWORD *)(v53 + 8), v48);
            v48 = 0;
          }
          v49 = 0;
          return LuaVMUtil_error(a1, "Error in ldo:replaceNodes");
        }
        LODWORD(v50) = v11;
        v7 = (_QWORD *)(v12 + (v8 & 0x7FFFFFFF8));
        v52 = v7;
      }
      *v7 = v46;
      ++v52;
      lua_settop((uint64_t)a1, 0xFFFFFFFE);
    }
    while (lua_next(a1, 2));
  }
  lua_pushnil((uint64_t)a1);
  if (!lua_next(a1, 3))
    goto LABEL_89;
  do
  {
    v45 = 0;
    v13 = lua_gettop((uint64_t)a1);
    if (lua_type(a1, v13) != 5)
    {
      v15 = v45;
      goto LABEL_28;
    }
    v14 = PNEW_LDOTreeNode_ConRoot(*(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 8), &byte_1DEBD87CE, 0, 0, &v45);
    if (v14)
      goto LABEL_24;
    lua_pushnil((uint64_t)a1);
    v22 = 0;
    if (!lua_next(a1, v13))
    {
LABEL_85:
      v15 = v45;
      if (v45 && v22 != 1)
      {
        v14 = 0;
        goto LABEL_25;
      }
LABEL_28:
      OOCObject_LuaLDO = 0;
      if (v15)
      {
        v16 = (_QWORD *)v49;
        v17 = v49 - v48;
        v18 = ((v49 - v48) >> 3) + 1;
        if (v18 > v47)
        {
          v19 = 2 * v47;
          if (2 * (int)v47 >= (v47 + 1000000))
            v19 = v47 + 1000000;
          if (v19 <= v18)
            v19 = ((v49 - v48) >> 3) + 1;
          if (v19 <= 8)
            v20 = 8;
          else
            v20 = v19;
          v21 = OOCAllocator_Realloc(*(_QWORD *)(v5 + 8), v48, 8 * v20, &OOCObject_LuaLDO);
          v48 = v21;
          if (OOCObject_LuaLDO)
            goto LABEL_2;
          LODWORD(v47) = v20;
          v16 = (_QWORD *)(v21 + (v17 & 0x7FFFFFFF8));
          v49 = (unint64_t)v16;
        }
        *v16 = v45;
        v49 += 8;
      }
      goto LABEL_40;
    }
    while (1)
    {
      if (!lua_isstring(a1, -2))
        goto LABEL_84;
      v23 = lua_tolstring(a1, -2, 0);
      if (!v23)
        goto LABEL_84;
      v24 = (const char *)v23;
      if (lua_isinteger(a1, -1))
      {
        v55 = 0;
        if (!strcmp(v24, "par_from"))
        {
          v14 = LuaVMUtil_luainteger_to_u32_index(a1, -1, (_DWORD *)&v55 + 1);
          if (v14)
            goto LABEL_83;
          LDOObject_SetU32Attribute(v45, "repl_from", SHIDWORD(v55));
          v14 = v28;
          if (v28)
            goto LABEL_83;
        }
        if (strcmp(v24, "par_to"))
        {
          v14 = 0;
          goto LABEL_83;
        }
        v14 = LuaVMUtil_luainteger_to_u32_index(a1, -1, &v55);
        if (v14)
        {
LABEL_83:
          if (v14)
            goto LABEL_24;
          goto LABEL_84;
        }
        LDOObject_SetU32Attribute(v45, "repl_to", v55);
LABEL_82:
        v14 = v27;
        goto LABEL_83;
      }
      if (!lua_isstring(a1, -1))
      {
        if (lua_type(a1, -1) == 5 && !strcmp(v24, "attr"))
        {
          v29 = lua_gettop((uint64_t)a1);
          lua_pushnil((uint64_t)a1);
          while (2)
          {
            if (!lua_next(a1, v29))
              goto LABEL_84;
            if (!lua_isstring(a1, -2))
              goto LABEL_84;
            v30 = lua_tolstring(a1, -2, 0);
            if (!v30)
              goto LABEL_84;
            v31 = (char *)v30;
            if (lua_isinteger(a1, -1))
            {
              v32 = lua_tointegerx(a1, -1, 0);
              v33 = v45;
              v34 = v31;
              if ((v32 & 0x80000000) == 0)
                goto LABEL_71;
              LDOObject_SetS32Attribute(v45, v31, v32);
              if (v35)
                goto LABEL_88;
            }
            else if (lua_type(a1, -1) == 1)
            {
              v32 = lua_toBOOLean(a1, -1) == 1;
              v33 = v45;
              v34 = v31;
LABEL_71:
              LDOObject_SetU32Attribute(v33, v34, v32);
              if (v35)
                goto LABEL_88;
            }
            else if (lua_isstring(a1, -1))
            {
              v36 = (char *)lua_tolstring(a1, -1, 0);
              if (!v36)
                goto LABEL_84;
              v35 = LDOObject_SetStringAttribute(v45, v31, v36);
              if (v35)
                goto LABEL_88;
            }
            lua_settop((uint64_t)a1, 0xFFFFFFFE);
            continue;
          }
        }
        goto LABEL_84;
      }
      v25 = lua_tolstring(a1, -1, 0);
      if (!v25)
        goto LABEL_84;
      v26 = (char *)v25;
      if (!strcmp(v24, "text"))
        break;
      if (!strcmp(v24, "nc"))
      {
        v27 = LDOObject_SetCategory(v45, v26);
        goto LABEL_82;
      }
      if (!strcmp(v24, "nt"))
      {
        v27 = LDOObject_SetType(v45, v26);
        goto LABEL_82;
      }
LABEL_84:
      lua_settop((uint64_t)a1, 0xFFFFFFFE);
      if (!lua_next(a1, v13))
        goto LABEL_85;
    }
    v35 = LDOTreeNode_SetText(v45, v26);
    if (!v35)
    {
      v22 = 1;
      goto LABEL_84;
    }
LABEL_88:
    v14 = v35;
LABEL_24:
    v15 = v45;
    if (!v45)
    {
      OOCObject_LuaLDO = v14;
      goto LABEL_2;
    }
LABEL_25:
    OOC_PlacementDeleteObject(*(_QWORD *)(v5 + 8), v15);
    v45 = 0;
    OOCObject_LuaLDO = v14;
    if (v14)
    {
LABEL_2:
      v2 = v51;
      goto LABEL_3;
    }
LABEL_40:
    lua_settop((uint64_t)a1, 0xFFFFFFFE);
  }
  while (lua_next(a1, 3));
LABEL_89:
  OOCObject_LuaLDO = LDO_ReplaceNodes(v5, (uint64_t)&v50, (uint64_t)&v47);
  if (OOCObject_LuaLDO)
    goto LABEL_2;
  v37 = (uint64_t **)v48;
  if (v48 < v49)
  {
    do
    {
      OOCObject_LuaLDO = LDOObject_GetStringAttribute(*v37, "label_category", (_DWORD *)&v44 + 1, &v42);
      if (OOCObject_LuaLDO)
        goto LABEL_2;
      if (!HIDWORD(v44))
        v42 = 0;
      OOCObject_LuaLDO = LDOObject_GetStringAttribute(*v37, "label_type", &v44, &v41);
      if (OOCObject_LuaLDO)
        goto LABEL_2;
      if (!(_DWORD)v44)
        v41 = 0;
      if ((_DWORD)v44 == 1 || HIDWORD(v44) == 1)
      {
        OOCObject_LuaLDO = LDOTreeNode_ComputeAbsoluteFrom((uint64_t)*v37, (_DWORD *)&v43 + 1);
        if (OOCObject_LuaLDO)
          goto LABEL_2;
        OOCObject_LuaLDO = LDOTreeNode_ComputeAbsoluteTo((size_t)*v37, &v43);
        if (OOCObject_LuaLDO)
          goto LABEL_2;
        OOCObject_LuaLDO = LDOLabelSet_AddLabel(*(_QWORD *)(v5 + 32), 0);
        if (OOCObject_LuaLDO)
          goto LABEL_2;
      }
      ++v37;
    }
    while ((unint64_t)v37 < v49);
  }
  lua_createtable((uint64_t)a1, 0, 0);
  v38 = (uint64_t *)v48;
  if (v48 < v49)
  {
    v39 = 0;
    do
    {
      OOCObject_LuaLDO = pushLuaObject_LuaLDOTreeNode(a1, *v38);
      if (OOCObject_LuaLDO)
        goto LABEL_2;
      v40 = LuaVMUtil_u32_index_to_luainteger(v39);
      lua_rawseti(a1, -2, v40);
      ++v39;
      ++v38;
    }
    while ((unint64_t)v38 < v49);
  }
  LODWORD(v50) = 0;
  if (v51)
  {
    OOCAllocator_Free(*(_QWORD *)(v5 + 8), v51);
    v51 = 0;
  }
  v52 = 0;
  LODWORD(v47) = 0;
  if (v48)
    OOCAllocator_Free(*(_QWORD *)(v5 + 8), v48);
  return 1;
}

uint64_t toString_LuaLDO(_QWORD *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v6 = 0;
  v7 = 0;
  if (getOOCObject_LuaLDO(a1, 1, &v7))
    return LuaVMUtil_error(a1, "Error in ldo:tostring");
  v2 = LDO_ToString(v7, &v6);
  v3 = v6;
  if (v2)
  {
    if (!v6)
      return LuaVMUtil_error(a1, "Error in ldo:tostring");
LABEL_4:
    v4 = LDOString_BorrowAllocator(v3);
    OOC_PlacementDeleteObject(v4, v6);
    v6 = 0;
    return LuaVMUtil_error(a1, "Error in ldo:tostring");
  }
  if (LuaVMUtil_pushLuaStringAndDestroy(a1, v6))
  {
    v3 = v6;
    if (!v6)
      return LuaVMUtil_error(a1, "Error in ldo:tostring");
    goto LABEL_4;
  }
  return 1;
}

uint64_t computeLabelText_LuaLDO(_QWORD *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = 0;
  v7 = 0;
  if (!getOOCObject_LuaLDO(a1, 1, &v8) && !getOOCObject_LuaLDOLabel(a1, 2, &v7))
  {
    v2 = LDOLabel_ComputeText(v7, &v6);
    v3 = v6;
    if (!v2)
    {
      if (!LuaVMUtil_pushLuaStringAndDestroy(a1, v6))
        return 1;
      v3 = v6;
    }
    if (v3)
    {
      v4 = LDOString_BorrowAllocator(v3);
      OOC_PlacementDeleteObject(v4, v6);
      v6 = 0;
    }
  }
  return LuaVMUtil_error(a1, "Error in ldo:get_label_text");
}

uint64_t computeNodesCoveredByLabel_LuaLDO(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  if (!getOOCObject_LuaLDO(a1, 1, &v11) && !getOOCObject_LuaLDOLabel(a1, 2, &v10))
  {
    v2 = v11;
    if (!LDO_ComputeNodesCoveredByLabel(v11, v10, (uint64_t)&v7))
    {
      lua_createtable((uint64_t)a1, 0, 0);
      v3 = v8;
      if ((unint64_t)v8 >= v9)
      {
LABEL_8:
        if (!LDO_FreeLDOTreeNodeVector(v2, (uint64_t)&v7))
          return 1;
      }
      else
      {
        v4 = 0;
        while (!pushLuaObject_LuaLDOTreeNode(a1, *v3))
        {
          v5 = LuaVMUtil_u32_index_to_luainteger(v4);
          lua_rawseti(a1, -2, v5);
          ++v4;
          if ((unint64_t)++v3 >= v9)
            goto LABEL_8;
        }
      }
      LDO_FreeLDOTreeNodeVector(v2, (uint64_t)&v7);
    }
  }
  return LuaVMUtil_error(a1, "Error in ldo:get_nodes_covered_by_label");
}

uint64_t luaopen_LDO(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  newMetatableLua(a1, "vocalizer.LDO");
  lua_pushvalue(a1, -1);
  lua_setfield(a1, -2, "__index");
  luaL_setfuncs(a1, (uint64_t)&lib_m, 0, v2, v3, v4, v5, v6);
  lua_createtable((uint64_t)a1, 0, 0);
  lua_setglobal(a1, "LDO");
  return 0;
}

uint64_t getOOCObject_LuaLDOLabel(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v4;

  v4 = (_QWORD *)luaL_checkudata(a1, a2, "vocalizer.LDOLabel");
  if (!v4)
    return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"lua_stack_arg");
  *a3 = *v4;
  return 0;
}

uint64_t pushLuaObject_LuaLDOLabel(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)lua_newuserdata(a1, 8uLL);
  if (!v4)
    return kaldi::nnet1::UpdatableComponent::IsUpdatable(0);
  *v4 = a2;
  getMetatableLua(a1, "vocalizer.LDOLabel");
  lua_setmetatable(a1, -2);
  return 0;
}

uint64_t getAbsoluteFrom_LuaLDOLabel(_QWORD *a1)
{
  int AbsoluteFrom;
  uint64_t v4;
  uint64_t v5;

  v5 = 0;
  if (getOOCObject_LuaLDOLabel(a1, 1, &v5))
    return LuaVMUtil_error(a1, "Error in ldolabel:getAbsoluteFrom");
  AbsoluteFrom = LDOLabel_GetAbsoluteFrom(v5);
  v4 = LuaVMUtil_u32_index_to_luainteger(AbsoluteFrom);
  lua_pushinteger((uint64_t)a1, v4);
  return 1;
}

uint64_t getAbsoluteTo_LuaLDOLabel(_QWORD *a1)
{
  int AbsoluteTo;
  uint64_t v4;
  uint64_t v5;

  v5 = 0;
  if (getOOCObject_LuaLDOLabel(a1, 1, &v5))
    return LuaVMUtil_error(a1, "Error in ldolabel:getAbsoluteTo");
  AbsoluteTo = LDOLabel_GetAbsoluteTo(v5);
  v4 = LuaVMUtil_u32_index_to_luainteger(AbsoluteTo);
  lua_pushinteger((uint64_t)a1, v4);
  return 1;
}

uint64_t isValid_LuaLDOLabel(_QWORD *a1)
{
  _BOOL4 v3;
  uint64_t v4;

  v4 = 0;
  if (getOOCObject_LuaLDOLabel(a1, 1, &v4))
    return LuaVMUtil_error(a1, "Error in ldolabel:isValid");
  v3 = LuaVMUtil_lhBOOL_to_luaBOOLean(*(_DWORD *)(v4 + 104));
  lua_pushBOOLean((uint64_t)a1, v3);
  return 1;
}

uint64_t invalidate_LuaLDOLabel(_QWORD *a1)
{
  _BOOL4 v3;
  uint64_t v4;

  v4 = 0;
  if (getOOCObject_LuaLDOLabel(a1, 1, &v4) || LDOLabel_Invalidate(v4))
    return LuaVMUtil_error(a1, "Error in ldolabel:invalidate");
  v3 = LuaVMUtil_lhBOOL_to_luaBOOLean(1);
  lua_pushBOOLean((uint64_t)a1, v3);
  return 1;
}

uint64_t getReferenceFrom_LuaLDOLabel(_QWORD *a1)
{
  uint64_t v3;
  uint64_t v4;

  v4 = 0;
  if (getOOCObject_LuaLDOLabel(a1, 1, &v4))
    return LuaVMUtil_error(a1, "Error in ldolabel:getReferenceFrom");
  v3 = LuaVMUtil_u32_index_to_luainteger(*(_DWORD *)(v4 + 96));
  lua_pushinteger((uint64_t)a1, v3);
  return 1;
}

uint64_t getReferenceTo_LuaLDOLabel(_QWORD *a1)
{
  uint64_t v3;
  uint64_t v4;

  v4 = 0;
  if (getOOCObject_LuaLDOLabel(a1, 1, &v4))
    return LuaVMUtil_error(a1, "Error in ldolabel:getReferenceTo");
  v3 = LuaVMUtil_u32_index_to_luainteger(*(_DWORD *)(v4 + 100));
  lua_pushinteger((uint64_t)a1, v3);
  return 1;
}

uint64_t setReferenceFrom_LuaLDOLabel(_QWORD *a1)
{
  uint64_t v2;
  _BOOL4 v4;
  int v5;
  uint64_t v6;

  v6 = 0;
  v5 = 0;
  if (getOOCObject_LuaLDOLabel(a1, 1, &v6)
    || LuaVMUtil_luainteger_to_u32_index(a1, 2, &v5)
    || LDOLabel_SetReferenceFrom(v6, v5))
  {
    return LuaVMUtil_error(a1, "Error in ldolabel:setReferenceFrom");
  }
  v2 = 1;
  v4 = LuaVMUtil_lhBOOL_to_luaBOOLean(1);
  lua_pushBOOLean((uint64_t)a1, v4);
  return v2;
}

uint64_t setReferenceTo_LuaLDOLabel(_QWORD *a1)
{
  uint64_t v2;
  _BOOL4 v4;
  int v5;
  uint64_t v6;

  v6 = 0;
  v5 = 0;
  if (getOOCObject_LuaLDOLabel(a1, 1, &v6)
    || LuaVMUtil_luainteger_to_u32_index(a1, 2, &v5)
    || LDOLabel_SetReferenceTo(v6, v5))
  {
    return LuaVMUtil_error(a1, "Error in ldolabel:setReferenceTo");
  }
  v2 = 1;
  v4 = LuaVMUtil_lhBOOL_to_luaBOOLean(1);
  lua_pushBOOLean((uint64_t)a1, v4);
  return v2;
}

uint64_t hasReferenceIndices_LuaLDOLabel(_QWORD *a1)
{
  _BOOL4 v3;
  uint64_t v4;

  v4 = 0;
  if (getOOCObject_LuaLDOLabel(a1, 1, &v4))
    return LuaVMUtil_error(a1, "Error in ldolabel:hasReferenceIndices");
  v3 = LuaVMUtil_lhBOOL_to_luaBOOLean(*(_DWORD *)(v4 + 108));
  lua_pushBOOLean((uint64_t)a1, v3);
  return 1;
}

uint64_t compareTo_LuaLDOLabel(_QWORD *a1)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  v4 = 0;
  v5 = 0;
  if (getOOCObject_LuaLDOLabel(a1, 1, &v5) || getOOCObject_LuaLDOLabel(a1, 2, &v4))
    return LuaVMUtil_error(a1, "Error in ldolabel:compareTo");
  v3 = LDOLabel_CompareTo(v5, v4);
  lua_pushinteger((uint64_t)a1, v3);
  return 1;
}

uint64_t compareToWithID_LuaLDOLabel(_QWORD *a1)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  v4 = 0;
  v5 = 0;
  if (getOOCObject_LuaLDOLabel(a1, 1, &v5) || getOOCObject_LuaLDOLabel(a1, 2, &v4))
    return LuaVMUtil_error(a1, "Error in ldolabel:compareToWithID");
  v3 = LDOLabel_CompareToWithID(v5, v4);
  lua_pushinteger((uint64_t)a1, v3);
  return 1;
}

uint64_t toString_LuaLDOLabel(_QWORD *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v6 = 0;
  v7 = 0;
  if (getOOCObject_LuaLDOLabel(a1, 1, &v7))
    return LuaVMUtil_error(a1, "Error in ldolabel:tostring");
  v2 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 24))(v7, &v6);
  v3 = v6;
  if (v2)
  {
    if (!v6)
      return LuaVMUtil_error(a1, "Error in ldolabel:tostring");
LABEL_4:
    v4 = LDOString_BorrowAllocator(v3);
    OOC_PlacementDeleteObject(v4, v6);
    v6 = 0;
    return LuaVMUtil_error(a1, "Error in ldolabel:tostring");
  }
  if (LuaVMUtil_pushLuaStringAndDestroy(a1, v6))
  {
    v3 = v6;
    if (!v6)
      return LuaVMUtil_error(a1, "Error in ldolabel:tostring");
    goto LABEL_4;
  }
  return 1;
}

uint64_t containsNode_LuaLDOLabel(_QWORD *a1)
{
  _BOOL4 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 0;
  v6 = 0;
  v4 = 0;
  if (getOOCObject_LuaLDOLabel(a1, 1, &v6)
    || getOOCObject_LuaLDOTreeNode(a1, 2, &v5)
    || LDOLabel_ContainsNode(v6, v5, &v4))
  {
    return LuaVMUtil_error(a1, "Error in ldolabel:contains_node");
  }
  v3 = LuaVMUtil_lhBOOL_to_luaBOOLean(v4);
  lua_pushBOOLean((uint64_t)a1, v3);
  return 1;
}

uint64_t addNode_LuaLDOLabel(_QWORD *a1)
{
  uint64_t result;
  size_t v3;
  uint64_t v4;

  v3 = 0;
  v4 = 0;
  if (getOOCObject_LuaLDOLabel(a1, 1, &v4))
    return LuaVMUtil_error(a1, "Error in ldolabel:add_node");
  if (getOOCObject_LuaLDOTreeNode(a1, 2, &v3))
    return LuaVMUtil_error(a1, "Error in ldolabel:add_node");
  result = LDOLabel_AddNode(v4, v3);
  if ((_DWORD)result)
    return LuaVMUtil_error(a1, "Error in ldolabel:add_node");
  return result;
}

uint64_t addNodes_LuaLDOLabel(_QWORD *a1)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int OOCObject_LuaLDOLabel;

  v19 = 0;
  v20 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  OOCObject_LuaLDOLabel = getOOCObject_LuaLDOLabel(a1, 1, &v20);
  if (OOCObject_LuaLDOLabel)
    goto LABEL_2;
  LODWORD(v16) = 0;
  v17 = 0;
  v18 = 0;
  lua_pushnil((uint64_t)a1);
  if (lua_next(a1, 2))
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = v20;
    do
    {
      v8 = lua_gettop((uint64_t)a1);
      OOCObject_LuaLDOLabel = getOOCObject_LuaLDOTreeNode(a1, v8, &v19);
      if (OOCObject_LuaLDOLabel)
        goto LABEL_2;
      v9 = (unint64_t)v6 - v5;
      v10 = (((unint64_t)v6 - v5) >> 3) + 1;
      if (v10 > v4)
      {
        v11 = 2 * v4;
        if (2 * v4 >= v4 + 1000000)
          v11 = v4 + 1000000;
        if (v11 > v10)
          v10 = v11;
        if (v10 <= 8)
          v4 = 8;
        else
          v4 = v10;
        v12 = fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(v7);
        v13 = OOCAllocator_Realloc(v12, v5, 8 * v4, &OOCObject_LuaLDOLabel);
        v17 = v13;
        if (OOCObject_LuaLDOLabel)
          goto LABEL_2;
        v5 = v13;
        LODWORD(v16) = v4;
        v6 = (_QWORD *)(v13 + (v9 & 0x7FFFFFFF8));
        v18 = v6;
      }
      *v6 = v19;
      v6 = ++v18;
      lua_settop((uint64_t)a1, 0xFFFFFFFE);
    }
    while (lua_next(a1, 2));
  }
  v14 = v20;
  OOCObject_LuaLDOLabel = LDOLabel_AddNodes(v20, (uint64_t)&v16);
  if (OOCObject_LuaLDOLabel)
  {
LABEL_2:
    LODWORD(v16) = 0;
    if (v17)
    {
      v2 = fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(v20);
      OOCAllocator_Free(v2, v17);
      v17 = 0;
    }
    v18 = 0;
    return LuaVMUtil_error(a1, "Error in ldolabel:add_nodes");
  }
  LODWORD(v16) = 0;
  if (v17)
  {
    v15 = fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(v14);
    OOCAllocator_Free(v15, v17);
  }
  return 0;
}

uint64_t removeNode_LuaLDOLabel(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  v3 = 0;
  v4 = 0;
  if (getOOCObject_LuaLDOLabel(a1, 1, &v4))
    return LuaVMUtil_error(a1, "Error in ldolabel:remove_node");
  if (getOOCObject_LuaLDOTreeNode(a1, 2, &v3))
    return LuaVMUtil_error(a1, "Error in ldolabel:remove_node");
  result = LDOLabel_RemoveNode(v4, v3);
  if ((_DWORD)result)
    return LuaVMUtil_error(a1, "Error in ldolabel:remove_node");
  return result;
}

uint64_t computeText_LuaLDOLabel(_QWORD *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v6 = 0;
  v7 = 0;
  if (getOOCObject_LuaLDOLabel(a1, 1, &v7))
    return LuaVMUtil_error(a1, "Error in ldo:get_label_text");
  v2 = LDOLabel_ComputeText(v7, &v6);
  v3 = v6;
  if (v2)
  {
    if (!v6)
      return LuaVMUtil_error(a1, "Error in ldo:get_label_text");
LABEL_4:
    v4 = LDOString_BorrowAllocator(v3);
    OOC_PlacementDeleteObject(v4, v6);
    v6 = 0;
    return LuaVMUtil_error(a1, "Error in ldo:get_label_text");
  }
  if (LuaVMUtil_pushLuaStringAndDestroy(a1, v6))
  {
    v3 = v6;
    if (!v6)
      return LuaVMUtil_error(a1, "Error in ldo:get_label_text");
    goto LABEL_4;
  }
  return 1;
}

uint64_t luaopen_LDOLabel(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  newMetatableLua(a1, "vocalizer.LDOLabel");
  lua_pushvalue(a1, -1);
  lua_setfield(a1, -2, "__index");
  getMetatableLua(a1, "vocalizer.LDOObject");
  lua_pushvalue(a1, -1);
  lua_setfield(a1, -2, "__index");
  lua_setmetatable(a1, -2);
  luaL_setfuncs(a1, (uint64_t)&lib_m_0, 0, v2, v3, v4, v5, v6);
  lua_createtable((uint64_t)a1, 0, 0);
  lua_setglobal(a1, "LDOLabel");
  return 0;
}

uint64_t getOOCObject_LuaLDOLabelSet(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v4;

  v4 = (_QWORD *)luaL_checkudata(a1, a2, "vocalizer.LDOLabelSet");
  if (!v4)
    return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"lua_stack_arg");
  *a3 = *v4;
  return 0;
}

uint64_t pushLuaObject_LuaLDOLabelSet(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)lua_newuserdata(a1, 8uLL);
  if (!v4)
    return kaldi::nnet1::UpdatableComponent::IsUpdatable(0);
  *v4 = a2;
  getMetatableLua(a1, "vocalizer.LDOLabelSet");
  lua_setmetatable(a1, -2);
  return 0;
}

uint64_t getLabels_LuaLDOLabelSet(uint64_t *a1)
{
  uint64_t *v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = 0;
  if (getOOCObject_LuaLDOLabelSet(a1, 1, &v7))
    return LuaVMUtil_error(a1, "Error in ldolabelset:getLabels");
  v3 = *(uint64_t **)(v7 + 24);
  v4 = *(_QWORD *)(v7 + 32);
  lua_createtable((uint64_t)a1, 0, 0);
  if ((unint64_t)v3 < v4)
  {
    v5 = 0;
    while (!pushLuaObject_LuaLDOLabel(a1, *v3))
    {
      v6 = LuaVMUtil_u32_index_to_luainteger(v5);
      lua_rawseti(a1, -2, v6);
      ++v5;
      if ((unint64_t)++v3 >= v4)
        return 1;
    }
    return LuaVMUtil_error(a1, "Error in ldolabelset:getLabels");
  }
  return 1;
}

uint64_t addLabel_LuaLDOLabelSet(_QWORD *a1)
{
  uint64_t v2;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 0;
  v6 = 0;
  if (getOOCObject_LuaLDOLabelSet(a1, 1, &v6)
    || getOOCObject_LuaLDOLabel(a1, 2, &v5)
    || LDOLabelSet_AddLabel(v6, v5))
  {
    return LuaVMUtil_error(a1, "Error in ldolabelset:addLabel");
  }
  v2 = 1;
  v4 = LuaVMUtil_lhBOOL_to_luaBOOLean(1);
  lua_pushBOOLean((uint64_t)a1, v4);
  return v2;
}

uint64_t removeLabel_LuaLDOLabelSet(_QWORD *a1)
{
  uint64_t v2;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 0;
  v6 = 0;
  if (getOOCObject_LuaLDOLabelSet(a1, 1, &v6)
    || getOOCObject_LuaLDOLabel(a1, 2, &v5)
    || LDOLabelSet_RemoveLabel(v6, v5))
  {
    return LuaVMUtil_error(a1, "Error in ldolabelset:removeLabel");
  }
  v2 = 1;
  v4 = LuaVMUtil_lhBOOL_to_luaBOOLean(1);
  lua_pushBOOLean((uint64_t)a1, v4);
  return v2;
}

uint64_t getNumberLabels_LuaLDOLabelSet(_QWORD *a1)
{
  unsigned int NumberLabels;
  uint64_t v4;

  v4 = 0;
  if (getOOCObject_LuaLDOLabelSet(a1, 1, &v4))
    return LuaVMUtil_error(a1, "Error in ldolabelset:getNumberLabels");
  NumberLabels = LDOLabelSet_GetNumberLabels(v4);
  lua_pushinteger((uint64_t)a1, NumberLabels);
  return 1;
}

uint64_t computeOverlappingLabels_LuaLDOLabelSet(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  int v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t *v12;

  v11 = 0;
  v12 = 0;
  v9 = 0;
  v10 = 0;
  v8 = 0;
  v7 = 0;
  if (!getOOCObject_LuaLDOLabelSet(a1, 1, &v12)
    && !LuaVMUtil_luainteger_to_u32_index(a1, 2, (_DWORD *)&v8 + 1)
    && !LuaVMUtil_luainteger_to_u32_index(a1, 3, &v8)
    && !LuaVMUtil_luaBOOLean_to_lhBOOL(a1, 4, &v7))
  {
    v2 = v12;
    if (!LDOLabelSet_ComputeOverlappingLabels(v12, HIDWORD(v8), v8, v7, (unsigned int *)&v9))
    {
      lua_createtable((uint64_t)a1, 0, 0);
      v3 = v10;
      if ((unint64_t)v10 >= v11)
      {
LABEL_10:
        if (!LDO_FreeLDOTreeNodeVector((uint64_t)v2, (uint64_t)&v9))
          return 1;
      }
      else
      {
        v4 = 0;
        while (!pushLuaObject_LuaLDOLabel(a1, *v3))
        {
          v5 = LuaVMUtil_u32_index_to_luainteger(v4);
          lua_rawseti(a1, -2, v5);
          ++v4;
          if ((unint64_t)++v3 >= v11)
            goto LABEL_10;
        }
      }
    }
  }
  LDO_FreeLDOTreeNodeVector((uint64_t)v12, (uint64_t)&v9);
  return LuaVMUtil_error(a1, "Error in ldolabelset:computeOverlappingLabels");
}

uint64_t toString_LuaLDOLabelSet(_QWORD *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;

  v6 = 0;
  v7 = 0;
  if (getOOCObject_LuaLDOLabelSet(a1, 1, &v7))
    return LuaVMUtil_error(a1, "Error in ldolabelset:tostring");
  v2 = LDOLabelSet_ToString(v7, &v6);
  v3 = v6;
  if (v2)
  {
    if (!v6)
      return LuaVMUtil_error(a1, "Error in ldolabelset:tostring");
LABEL_4:
    v4 = LDOString_BorrowAllocator(v3);
    OOC_PlacementDeleteObject(v4, v6);
    v6 = 0;
    return LuaVMUtil_error(a1, "Error in ldolabelset:tostring");
  }
  if (LuaVMUtil_pushLuaStringAndDestroy(a1, v6))
  {
    v3 = v6;
    if (!v6)
      return LuaVMUtil_error(a1, "Error in ldolabelset:tostring");
    goto LABEL_4;
  }
  return 1;
}

uint64_t luaopen_LDOLabelSet(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  newMetatableLua(a1, "vocalizer.LDOLabelSet");
  lua_pushvalue(a1, -1);
  lua_setfield(a1, -2, "__index");
  luaL_setfuncs(a1, (uint64_t)&lib_m_1, 0, v2, v3, v4, v5, v6);
  lua_createtable((uint64_t)a1, 0, 0);
  lua_setglobal(a1, "LDOLabelSet");
  return 0;
}

uint64_t getOOCObject_LuaLDOObject(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v4;

  v4 = (_QWORD *)luaL_checkudata(a1, a2, "vocalizer.LDOObject");
  if (!v4)
    return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"lua_stack_arg");
  *a3 = *v4;
  return 0;
}

uint64_t getID_LuaLDOObject(_QWORD *a1)
{
  uint64_t v3;

  v3 = 0;
  if (getOOCObject_LuaLDOObject(a1, 1, &v3))
    return LuaVMUtil_error(a1, "Error in ldoobject:getID");
  lua_pushinteger((uint64_t)a1, *(unsigned int *)(v3 + 16));
  return 1;
}

uint64_t getCategory_LuaLDOObject(_QWORD *a1)
{
  char *v3;
  uint64_t v4;

  v3 = 0;
  v4 = 0;
  if (getOOCObject_LuaLDOObject(a1, 1, &v4) || LDOObject_GetCategory(v4, (uint64_t *)&v3))
    return LuaVMUtil_error(a1, "Error in ldoobject:getCategory");
  lua_pushstring(a1, v3);
  return 1;
}

uint64_t getType_LuaLDOObject(_QWORD *a1)
{
  char *v3;
  uint64_t v4;

  v3 = 0;
  v4 = 0;
  if (getOOCObject_LuaLDOObject(a1, 1, &v4) || LDOObject_GetType(v4, (uint64_t *)&v3))
    return LuaVMUtil_error(a1, "Error in ldoobject:getType");
  lua_pushstring(a1, v3);
  return 1;
}

uint64_t setCategory_LuaLDOObject(_QWORD *a1)
{
  uint64_t v2;
  _BOOL4 v4;
  char *v5;
  uint64_t v6;

  v5 = 0;
  v6 = 0;
  if (getOOCObject_LuaLDOObject(a1, 1, &v6)
    || LuaVMUtil_luastring_to_string(a1, 2, (uint64_t *)&v5)
    || LDOObject_SetCategory(v6, v5))
  {
    return LuaVMUtil_error(a1, "Error in ldoobject:setCategory");
  }
  v2 = 1;
  v4 = LuaVMUtil_lhBOOL_to_luaBOOLean(1);
  lua_pushBOOLean((uint64_t)a1, v4);
  return v2;
}

uint64_t setType_LuaLDOObject(_QWORD *a1)
{
  uint64_t v2;
  _BOOL4 v4;
  char *v5;
  uint64_t v6;

  v5 = 0;
  v6 = 0;
  if (getOOCObject_LuaLDOObject(a1, 1, &v6)
    || LuaVMUtil_luastring_to_string(a1, 2, (uint64_t *)&v5)
    || LDOObject_SetType(v6, v5))
  {
    return LuaVMUtil_error(a1, "Error in ldoobject:setType");
  }
  v2 = 1;
  v4 = LuaVMUtil_lhBOOL_to_luaBOOLean(1);
  lua_pushBOOLean((uint64_t)a1, v4);
  return v2;
}

uint64_t isEqual_LuaLDOObject(_QWORD *a1)
{
  _BOOL4 IsEqual;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 0;
  v6 = 0;
  if (getOOCObject_LuaLDOObject(a1, 1, &v6) || getOOCObject_LuaLDOObject(a1, 2, &v5))
    return LuaVMUtil_error(a1, "Error in ldoobject:isEqual");
  IsEqual = LDOObject_IsEqual(v6, v5);
  v4 = LuaVMUtil_lhBOOL_to_luaBOOLean(IsEqual);
  lua_pushBOOLean((uint64_t)a1, v4);
  return 1;
}

uint64_t getAttribute_LuaLDOObject(_QWORD *a1)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;

  v13 = 0;
  v11 = 0;
  v12 = 0;
  v9 = 0;
  v10 = 0;
  v8 = 0;
  v7 = 0;
  if (!getOOCObject_LuaLDOObject(a1, 1, &v13)
    && !LuaVMUtil_luastring_to_string(a1, 2, (uint64_t *)&v12))
  {
    if (v12)
    {
      v3 = v13;
      if (!LDOObject_GetS32Attribute(v13, v12, (_DWORD *)&v11 + 1, (_DWORD *)&v10 + 1))
      {
        if (HIDWORD(v11) == 1)
        {
          v4 = SHIDWORD(v10);
LABEL_9:
          lua_pushinteger((uint64_t)a1, v4);
          return 1;
        }
        if (!LDOObject_GetU32Attribute(v3, v12, (_DWORD *)&v11 + 1, &v11))
        {
          if (HIDWORD(v11) == 1)
          {
            v4 = v11;
            goto LABEL_9;
          }
          if (!LDOObject_GetBoolAttribute(v3, v12, (_DWORD *)&v11 + 1, &v10))
          {
            if (HIDWORD(v11) == 1)
            {
              lua_pushBOOLean((uint64_t)a1, v10);
              return 1;
            }
            if (!LDOObject_GetStringAttribute(v3, v12, (_DWORD *)&v11 + 1, (uint64_t *)&v9))
            {
              if (HIDWORD(v11) == 1)
              {
                lua_pushstring(a1, v9);
                return 1;
              }
              if (!LDOObject_GetListU32Attribute(v3, v12, (_DWORD *)&v11 + 1, &v8, &v7))
              {
                if (HIDWORD(v11) == 1)
                {
                  lua_createtable((uint64_t)a1, 0, 0);
                  if (v7)
                  {
                    for (i = 0; i < v7; ++i)
                    {
                      lua_pushinteger((uint64_t)a1, *(unsigned int *)(v8 + 4 * i));
                      v6 = LuaVMUtil_u32_index_to_luainteger(i);
                      lua_rawseti(a1, -2, v6);
                    }
                    OOCAllocator_Free(v3[1], v8);
                  }
                }
                else
                {
                  lua_pushnil((uint64_t)a1);
                }
                return 1;
              }
            }
          }
        }
      }
    }
  }
  return LuaVMUtil_error(a1, "Error in ldoobject:getAttribute");
}

uint64_t setAttribute_LuaLDOObject(_QWORD *a1)
{
  uint64_t v2;
  int v4;
  int v5;
  int v6;
  _BOOL4 v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  v8 = 0;
  v9 = 0;
  if (!getOOCObject_LuaLDOObject(a1, 1, &v11)
    && !LuaVMUtil_luastring_to_string(a1, 2, (uint64_t *)&v10)
    && v10)
  {
    if (lua_isinteger(a1, 3))
    {
      if (!LuaVMUtil_luainteger_to_s32(a1, 3, (_DWORD *)&v9 + 1))
      {
        if (v9 < 0)
        {
          LDOObject_SetS32Attribute(v11, v10, SHIDWORD(v9));
          if (!v6)
            goto LABEL_24;
        }
        else
        {
          LDOObject_SetU32Attribute(v11, v10, SHIDWORD(v9));
          if (!v4)
          {
LABEL_24:
            v2 = 1;
            v7 = LuaVMUtil_lhBOOL_to_luaBOOLean(1);
            lua_pushBOOLean((uint64_t)a1, v7);
            return v2;
          }
        }
      }
    }
    else if (lua_type(a1, 3) == 1)
    {
      if (!LuaVMUtil_luaBOOLean_to_lhBOOL(a1, 3, &v9))
      {
        LDOObject_SetBoolAttribute(v11, v10, v9);
        if (!v5)
          goto LABEL_24;
      }
    }
    else if (lua_isstring(a1, 3))
    {
      if (!LuaVMUtil_luastring_to_string(a1, 3, (uint64_t *)&v8)
        && v8
        && !LDOObject_SetStringAttribute(v11, v10, v8))
      {
        goto LABEL_24;
      }
    }
    else if (lua_type(a1, 3) != 5 || !hlp_set_listu32_attribute(a1, v11, v10))
    {
      goto LABEL_24;
    }
  }
  return LuaVMUtil_error(a1, "Error in ldoobject:setAttribute");
}

uint64_t hlp_set_listu32_attribute(_QWORD *a1, uint64_t a2, char *a3)
{
  uint64_t v5;
  unsigned int v7;
  const void *v8;

  v8 = 0;
  v7 = 0;
  v5 = LuaVMUtil_luatable_to_u32array(a1, 3, *(_QWORD *)(a2 + 8), (uint64_t *)&v8, &v7);
  if (!(_DWORD)v5)
    v5 = LDOObject_SetListU32Attribute(a2, a3, v8, v7);
  if (v8)
    OOCAllocator_Free(*(_QWORD *)(a2 + 8), (uint64_t)v8);
  return v5;
}

uint64_t getAttributes_LuaLDOObject(_QWORD *a1)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unsigned int *v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;

  v18 = 0;
  if (getOOCObject_LuaLDOObject(a1, 1, &v18))
    return LuaVMUtil_error(a1, "Error in ldoobject:getAttributes");
  v3 = *(_QWORD *)(v18 + 32);
  v4 = *(_QWORD *)(v18 + 40);
  lua_createtable((uint64_t)a1, 0, 0);
  for (; v3 < v4; v3 += 32)
  {
    v6 = *(_DWORD *)(v3 + 8);
    v5 = *(unsigned int *)(v3 + 12);
    v7 = *(int *)(v3 + 16);
    v8 = *(_QWORD *)(v3 + 24);
    v9 = (char *)fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(*(_QWORD *)v3);
    lua_pushstring(a1, v9);
    switch(v6)
    {
      case 0:
        v10 = (uint64_t)a1;
        v11 = v5;
        goto LABEL_7;
      case 1:
        v10 = (uint64_t)a1;
        v11 = v7;
LABEL_7:
        lua_pushinteger(v10, v11);
        break;
      case 2:
        v12 = (char *)fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(v8);
        lua_pushstring(a1, v12);
        break;
      case 3:
        lua_createtable((uint64_t)a1, 0, 0);
        v13 = *(unsigned int **)(v8 + 8);
        if ((unint64_t)v13 < *(_QWORD *)(v8 + 16))
        {
          v14 = 0;
          do
          {
            v15 = *v13++;
            lua_pushinteger((uint64_t)a1, v15);
            v16 = LuaVMUtil_u32_index_to_luainteger(v14);
            lua_rawseti(a1, -2, v16);
            ++v14;
          }
          while ((unint64_t)v13 < *(_QWORD *)(v8 + 16));
        }
        break;
      case 4:
        v17 = LuaVMUtil_lhBOOL_to_luaBOOLean(v5);
        lua_pushBOOLean((uint64_t)a1, v17);
        break;
      default:
        return LuaVMUtil_error(a1, "Error in ldoobject:getAttributes");
    }
    lua_settable(a1, -3);
  }
  return 1;
}

uint64_t removeAttribute_LuaLDOObject(_QWORD *a1)
{
  uint64_t v2;
  _BOOL4 v4;
  char *v5;
  uint64_t v6;

  v5 = 0;
  v6 = 0;
  if (getOOCObject_LuaLDOObject(a1, 1, &v6)
    || LuaVMUtil_luastring_to_string(a1, 2, (uint64_t *)&v5)
    || !v5
    || LDOObject_RemoveAttribute(v6, v5))
  {
    return LuaVMUtil_error(a1, "Error in ldoobject:removeAttribute");
  }
  v2 = 1;
  v4 = LuaVMUtil_lhBOOL_to_luaBOOLean(1);
  lua_pushBOOLean((uint64_t)a1, v4);
  return v2;
}

uint64_t removeAttributes_LuaLDOObject(_QWORD *a1)
{
  _BOOL4 v3;
  uint64_t *v4;

  v4 = 0;
  if (getOOCObject_LuaLDOObject(a1, 1, &v4) || LDOObject_RemoveAttributes(v4))
    return LuaVMUtil_error(a1, "Error in ldoobject:removeAttributes");
  v3 = LuaVMUtil_lhBOOL_to_luaBOOLean(1);
  lua_pushBOOLean((uint64_t)a1, v3);
  return 1;
}

uint64_t toString_LuaLDOObject(_QWORD *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v6 = 0;
  v7 = 0;
  if (getOOCObject_LuaLDOObject(a1, 1, &v7))
    return LuaVMUtil_error(a1, "Error in ldoobject:tostring");
  v2 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 24))(v7, &v6);
  v3 = v6;
  if (v2)
  {
    if (!v6)
      return LuaVMUtil_error(a1, "Error in ldoobject:tostring");
LABEL_4:
    v4 = LDOString_BorrowAllocator(v3);
    OOC_PlacementDeleteObject(v4, v6);
    v6 = 0;
    return LuaVMUtil_error(a1, "Error in ldoobject:tostring");
  }
  if (LuaVMUtil_pushLuaStringAndDestroy(a1, v6))
  {
    v3 = v6;
    if (!v6)
      return LuaVMUtil_error(a1, "Error in ldoobject:tostring");
    goto LABEL_4;
  }
  return 1;
}

uint64_t luaopen_LDOObject(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  newMetatableLua(a1, "vocalizer.LDOObject");
  lua_pushvalue(a1, -1);
  lua_setfield(a1, -2, "__index");
  luaL_setfuncs(a1, (uint64_t)&lib_m_2, 0, v2, v3, v4, v5, v6);
  lua_createtable((uint64_t)a1, 0, 0);
  lua_setglobal(a1, "LDOObject");
  return 0;
}

uint64_t getOOCObject_LuaLDOTreeNode(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v4;

  v4 = (_QWORD *)luaL_checkudata(a1, a2, "vocalizer.LDOTreeNode");
  if (!v4)
    return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"lua_stack_arg");
  *a3 = *v4;
  return 0;
}

uint64_t pushLuaObject_LuaLDOTreeNode(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)lua_newuserdata(a1, 8uLL);
  if (!v4)
    return kaldi::nnet1::UpdatableComponent::IsUpdatable(0);
  *v4 = a2;
  getMetatableLua(a1, "vocalizer.LDOTreeNode");
  lua_setmetatable(a1, -2);
  return 0;
}

uint64_t isRoot_LuaLDOTreeNode(_QWORD *a1)
{
  _BOOL4 IsRoot;
  _BOOL4 v4;
  uint64_t v5;

  v5 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v5))
    return LuaVMUtil_error(a1, "Error in ldotreenode:isRoot");
  IsRoot = LDOTreeNode_IsRoot(v5);
  v4 = LuaVMUtil_lhBOOL_to_luaBOOLean(IsRoot);
  lua_pushBOOLean((uint64_t)a1, v4);
  return 1;
}

uint64_t isLeaf_LuaLDOTreeNode(_QWORD *a1)
{
  _BOOL4 IsLeaf;
  _BOOL4 v4;
  uint64_t v5;

  v5 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v5))
    return LuaVMUtil_error(a1, "Error in ldotreenode:isLeaf");
  IsLeaf = LDOTreeNode_IsLeaf(v5);
  v4 = LuaVMUtil_lhBOOL_to_luaBOOLean(IsLeaf);
  lua_pushBOOLean((uint64_t)a1, v4);
  return 1;
}

uint64_t computeText_LuaLDOTreeNode(_QWORD *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  size_t v7;

  v6 = 0;
  v7 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v7))
    return LuaVMUtil_error(a1, "Error in ldotreenode:computeText");
  v2 = LDOTreeNode_ComputeText(v7, &v6);
  v3 = v6;
  if (v2)
  {
    if (!v6)
      return LuaVMUtil_error(a1, "Error in ldotreenode:computeText");
LABEL_4:
    v4 = LDOString_BorrowAllocator(v3);
    OOC_PlacementDeleteObject(v4, v6);
    v6 = 0;
    return LuaVMUtil_error(a1, "Error in ldotreenode:computeText");
  }
  if (LuaVMUtil_pushLuaStringAndDestroy(a1, v6))
  {
    v3 = v6;
    if (!v6)
      return LuaVMUtil_error(a1, "Error in ldotreenode:computeText");
    goto LABEL_4;
  }
  return 1;
}

uint64_t setText_LuaLDOTreeNode(_QWORD *a1)
{
  uint64_t v2;
  _BOOL4 v4;
  char *v5;
  uint64_t v6;

  v5 = 0;
  v6 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v6)
    || LuaVMUtil_luastring_to_string(a1, 2, (uint64_t *)&v5)
    || !v5
    || LDOTreeNode_SetText(v6, v5))
  {
    return LuaVMUtil_error(a1, "Error in ldotreenode:setText");
  }
  v2 = 1;
  v4 = LuaVMUtil_lhBOOL_to_luaBOOLean(1);
  lua_pushBOOLean((uint64_t)a1, v4);
  return v2;
}

uint64_t getParent_LuaLDOTreeNode(uint64_t *a1)
{
  uint64_t v3;
  uint64_t v4;

  v4 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v4))
    return LuaVMUtil_error(a1, "Error in ldotreenode:getParent");
  v3 = *(_QWORD *)(v4 + 64);
  if (!v3 || pushLuaObject_LuaLDOTreeNode(a1, v3))
    return LuaVMUtil_error(a1, "Error in ldotreenode:getParent");
  else
    return 1;
}

uint64_t getChildren_LuaLDOTreeNode(uint64_t *a1)
{
  uint64_t *v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v7))
    return LuaVMUtil_error(a1, "Error in ldotreenode:getChildren");
  v3 = *(uint64_t **)(v7 + 80);
  v4 = *(_QWORD *)(v7 + 88);
  lua_createtable((uint64_t)a1, 0, 0);
  if ((unint64_t)v3 < v4)
  {
    v5 = 0;
    while (!pushLuaObject_LuaLDOTreeNode(a1, *v3))
    {
      v6 = LuaVMUtil_u32_index_to_luainteger(v5);
      lua_rawseti(a1, -2, v6);
      ++v5;
      if ((unint64_t)++v3 >= v4)
        return 1;
    }
    return LuaVMUtil_error(a1, "Error in ldotreenode:getChildren");
  }
  return 1;
}

uint64_t getNumberChildren_LuaLDOTreeNode(_QWORD *a1)
{
  uint64_t NumberChildren;
  uint64_t v4;
  uint64_t v5;

  v5 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v5))
    return LuaVMUtil_error(a1, "Error in ldotreenode:getNumberChildren");
  NumberChildren = LDOTreeNode_GetNumberChildren(v5);
  v4 = LuaVMUtil_u32_to_luainteger(NumberChildren);
  lua_pushinteger((uint64_t)a1, v4);
  return 1;
}

uint64_t getParentFrom_LuaLDOTreeNode(_QWORD *a1)
{
  uint64_t v3;
  uint64_t v4;

  v4 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v4))
    return LuaVMUtil_error(a1, "Error in ldotreenode:getParentFrom");
  v3 = LuaVMUtil_u32_index_to_luainteger(*(_DWORD *)(v4 + 104));
  lua_pushinteger((uint64_t)a1, v3);
  return 1;
}

uint64_t getParentTo_LuaLDOTreeNode(_QWORD *a1)
{
  uint64_t v3;
  uint64_t v4;

  v4 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v4))
    return LuaVMUtil_error(a1, "Error in ldotreenode:getParentTo");
  v3 = LuaVMUtil_u32_index_to_luainteger(*(_DWORD *)(v4 + 108));
  lua_pushinteger((uint64_t)a1, v3);
  return 1;
}

uint64_t setParent_LuaLDOTreeNode(_QWORD *a1)
{
  _BOOL4 v3;
  uint64_t v4;
  uint64_t v5;

  v4 = 0;
  v5 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v5)
    || getOOCObject_LuaLDOTreeNode(a1, 2, &v4)
    || LDOTreeNode_SetParent(v5, v4))
  {
    return LuaVMUtil_error(a1, "Error in ldotreenode:setParent");
  }
  v3 = LuaVMUtil_lhBOOL_to_luaBOOLean(1);
  lua_pushBOOLean((uint64_t)a1, v3);
  return 1;
}

uint64_t getPreviousSibling_LuaLDOTreeNode(uint64_t *a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = 0;
  v4 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v4) || LDOTreeNode_GetPreviousSibling(v4, &v3))
    return LuaVMUtil_error(a1, "Error in ldotreenode:get_previous_sibling");
  if (v3)
  {
    if (pushLuaObject_LuaLDOTreeNode(a1, v3))
      return LuaVMUtil_error(a1, "Error in ldotreenode:get_previous_sibling");
  }
  else
  {
    lua_pushnil((uint64_t)a1);
  }
  return 1;
}

uint64_t getNextSibling_LuaLDOTreeNode(uint64_t *a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = 0;
  v4 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v4) || LDOTreeNode_GetNextSibling(v4, &v3))
    return LuaVMUtil_error(a1, "Error in ldotreenode:get_next_sibling");
  if (v3)
  {
    if (pushLuaObject_LuaLDOTreeNode(a1, v3))
      return LuaVMUtil_error(a1, "Error in ldotreenode:get_next_sibling");
  }
  else
  {
    lua_pushnil((uint64_t)a1);
  }
  return 1;
}

uint64_t computeRoot_LuaLDOTreeNode(uint64_t *a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = 0;
  v4 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v4)
    || LDOTreeNode_ComputeRoot(v4, &v3)
    || pushLuaObject_LuaLDOTreeNode(a1, v3))
  {
    return LuaVMUtil_error(a1, "Error in ldotreenode:computeRoot");
  }
  else
  {
    return 1;
  }
}

uint64_t computeAbsoluteFrom_LuaLDOTreeNode(_QWORD *a1)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v5 = 0;
  v4 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v5) || LDOTreeNode_ComputeAbsoluteFrom(v5, &v4))
    return LuaVMUtil_error(a1, "Error in ldotreenode:computeAbsoluteFrom");
  v3 = LuaVMUtil_u32_index_to_luainteger(v4);
  lua_pushinteger((uint64_t)a1, v3);
  return 1;
}

uint64_t computeAbsoluteTo_LuaLDOTreeNode(_QWORD *a1)
{
  uint64_t v3;
  int v4;
  size_t v5;

  v5 = 0;
  v4 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v5) || LDOTreeNode_ComputeAbsoluteTo(v5, &v4))
    return LuaVMUtil_error(a1, "Error in ldotreenode:computeAbsoluteTo");
  v3 = LuaVMUtil_u32_index_to_luainteger(v4);
  lua_pushinteger((uint64_t)a1, v3);
  return 1;
}

uint64_t computeUpdateInfo_LuaLDOTreeNode(_QWORD *a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *__s;
  int v7[2];

  __s = 0;
  *(_QWORD *)v7 = 0;
  v5 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, v7)
    || LuaVMUtil_luastring_to_string(a1, 2, (uint64_t *)&__s)
    || !__s
    || LDOTreeNode_ComputeUpdateInfo(*(size_t *)v7, __s, (_DWORD *)&v5 + 1, &v5))
  {
    return LuaVMUtil_error(a1, "Error in ldotreenode:computeUpdateInfo");
  }
  v3 = LuaVMUtil_u32_index_to_luainteger(SHIDWORD(v5));
  lua_pushinteger((uint64_t)a1, v3);
  v4 = LuaVMUtil_s32_to_luainteger(v5);
  lua_pushinteger((uint64_t)a1, v4);
  return 2;
}

uint64_t removeChildAtIndex_LuaLDOTreeNode(_QWORD *a1)
{
  uint64_t v2;
  _BOOL4 v4;
  unsigned int v5;
  uint64_t v6;

  v6 = 0;
  v5 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v6)
    || LuaVMUtil_luainteger_to_u32_index(a1, 2, &v5)
    || LDOTreeNode_RemoveChildAtIndex(v6, v5))
  {
    return LuaVMUtil_error(a1, "Error in ldotreenode:removeChildAtIndex");
  }
  v2 = 1;
  v4 = LuaVMUtil_lhBOOL_to_luaBOOLean(1);
  lua_pushBOOLean((uint64_t)a1, v4);
  return v2;
}

uint64_t removeChild_LuaLDOTreeNode(_QWORD *a1)
{
  _BOOL4 v3;
  _DWORD *v4;
  uint64_t v5;

  v4 = 0;
  v5 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v5)
    || getOOCObject_LuaLDOTreeNode(a1, 2, &v4)
    || LDOTreeNode_RemoveChild(v5, v4))
  {
    return LuaVMUtil_error(a1, "Error in ldotreenode:removeChild");
  }
  v3 = LuaVMUtil_lhBOOL_to_luaBOOLean(1);
  lua_pushBOOLean((uint64_t)a1, v3);
  return 1;
}

uint64_t compareTo_LuaLDOTreeNode(_QWORD *a1)
{
  int v3;
  size_t v4;
  size_t v5;

  v4 = 0;
  v5 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v5)
    || getOOCObject_LuaLDOTreeNode(a1, 2, &v4))
  {
    return LuaVMUtil_error(a1, "Error in ldotreenode:compareTo");
  }
  v3 = LDOTreeNode_CompareTo(v5, v4);
  lua_pushinteger((uint64_t)a1, v3);
  return 1;
}

uint64_t compareToWithID_LuaLDOTreeNode(_QWORD *a1)
{
  int v3;
  size_t v4;
  size_t v5;

  v4 = 0;
  v5 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v5)
    || getOOCObject_LuaLDOTreeNode(a1, 2, &v4))
  {
    return LuaVMUtil_error(a1, "Error in ldotreenode:compareToWithID");
  }
  v3 = LDOTreeNode_CompareToWithID(v5, v4);
  lua_pushinteger((uint64_t)a1, v3);
  return 1;
}

uint64_t computeIndexInParent_LuaLDOTreeNode(_QWORD *a1)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v5 = 0;
  v4 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v5)
    || LDOTreeNode_ComputeIndexInParent(v5, &v4))
  {
    return LuaVMUtil_error(a1, "Error in ldotreenode:computeIndexInParent");
  }
  v3 = LuaVMUtil_u32_index_to_luainteger(v4);
  lua_pushinteger((uint64_t)a1, v3);
  return 1;
}

uint64_t toString_LuaLDOTreeNode(_QWORD *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v6 = 0;
  v7 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v7))
    return LuaVMUtil_error(a1, "Error in ldotreenode:tostring");
  v2 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 24))(v7, &v6);
  v3 = v6;
  if (v2)
  {
    if (!v6)
      return LuaVMUtil_error(a1, "Error in ldotreenode:tostring");
LABEL_4:
    v4 = LDOString_BorrowAllocator(v3);
    OOC_PlacementDeleteObject(v4, v6);
    v6 = 0;
    return LuaVMUtil_error(a1, "Error in ldotreenode:tostring");
  }
  if (LuaVMUtil_pushLuaStringAndDestroy(a1, v6))
  {
    v3 = v6;
    if (!v6)
      return LuaVMUtil_error(a1, "Error in ldotreenode:tostring");
    goto LABEL_4;
  }
  return 1;
}

uint64_t luaopen_LDOTreeNode(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  newMetatableLua(a1, "vocalizer.LDOTreeNode");
  lua_pushvalue(a1, -1);
  lua_setfield(a1, -2, "__index");
  getMetatableLua(a1, "vocalizer.LDOObject");
  lua_pushvalue(a1, -1);
  lua_setfield(a1, -2, "__index");
  lua_setmetatable(a1, -2);
  luaL_setfuncs(a1, (uint64_t)&lib_m_3, 0, v2, v3, v4, v5, v6);
  lua_createtable((uint64_t)a1, 0, 0);
  lua_setglobal(a1, "LDOTreeNode");
  return 0;
}

uint64_t init_LuaLog(_QWORD *a1)
{
  if (lua_type(a1, 1) == 2 && lua_type(a1, 2) == 2 && lua_type(a1, 3) == 2)
  {
    if (lua_type(a1, 4) == 2 && lua_type(a1, 5) == 2)
    {
      lua_setfield(a1, -1001000, "LUA_LOG_PEAK_ALLOCATED_BYTES");
      lua_setfield(a1, -1001000, "LUA_LOG_ALLOCATED_BYTES");
    }
    lua_setfield(a1, -1001000, "LUA_LOG_PFLOGCALLBACK");
    lua_setfield(a1, -1001000, "LUA_LOG_HHEAP");
    lua_setfield(a1, -1001000, "LUA_LOG_HLOG");
  }
  return 0;
}

uint64_t log_LuaLog(_QWORD *a1)
{
  const char *v2;
  uint64_t v3;
  _QWORD *v4;
  void (*v5)(uint64_t, const char *);
  unsigned int v6;
  int v7;
  unsigned __int16 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;

  if (!lua_isstring(a1, 1))
    return 0;
  v2 = (const char *)lua_tolstring(a1, 1, 0);
  if (lua_getfield(a1, -1001000, "LUA_LOG_HLOG") != 2)
    return 0;
  v3 = lua_touserdata(a1, -1);
  if (lua_getfield(a1, -1001000, "LUA_LOG_HHEAP") != 2)
    return 0;
  v4 = (_QWORD *)lua_touserdata(a1, -1);
  if (lua_getfield(a1, -1001000, "LUA_LOG_PFLOGCALLBACK") != 2)
    return 0;
  v5 = (void (*)(uint64_t, const char *))lua_touserdata(a1, -1);
  v6 = (unsigned __int16)strlen(v2);
  if (v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    do
    {
      if (v2[(unsigned __int16)v9] == 37)
      {
        if (v2[v7 + 1] == 37)
          ++v9;
        else
          ++v8;
      }
      v7 = (unsigned __int16)++v9;
    }
    while (v6 > (unsigned __int16)v9);
  }
  else
  {
    v8 = 0;
  }
  v10 = heap_Calloc(v4, 1, v6 + v8 + 1);
  if (v10)
  {
    v11 = v10;
    if (v6)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      do
      {
        v15 = v2[(unsigned __int16)v14];
        if (v15 == 37)
        {
          if (v2[v12 + 1] == 37)
            ++v14;
          else
            v5(v3, "Escaping non-escaped percent symbol");
          LOBYTE(v15) = 37;
          *(_BYTE *)(v11 + (unsigned __int16)v13++) = 37;
        }
        *(_BYTE *)(v11 + (unsigned __int16)v13) = v15;
        ++v14;
        ++v13;
        v12 = (unsigned __int16)v14;
      }
      while (v6 > (unsigned __int16)v14);
    }
    v5(v3, (const char *)v11);
    heap_Free(v4, v11);
    return 0;
  }
  return LuaVMUtil_error(a1, "Error in Log.log");
}

uint64_t logvm_LuaLog(_QWORD *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, _OWORD *);
  unsigned int *v4;
  unsigned int *v5;
  _QWORD v7[2];
  _OWORD v8[16];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  memset((char *)&v8[14] + 9, 0, 23);
  memset((char *)&v8[1] + 9, 0, 208);
  v7[0] = 0;
  v7[1] = 0;
  if (lua_getfield(a1, -1001000, "LUA_LOG_HLOG") == 2)
  {
    v2 = lua_touserdata(a1, -1);
    if (lua_getfield(a1, -1001000, "LUA_LOG_PFLOGCALLBACK") == 2)
    {
      v3 = (void (*)(uint64_t, _OWORD *))lua_touserdata(a1, -1);
      if (lua_getfield(a1, -1001000, "LUA_LOG_ALLOCATED_BYTES"))
      {
        v4 = (unsigned int *)lua_touserdata(a1, -1);
        if (lua_getfield(a1, -1001000, "LUA_LOG_PEAK_ALLOCATED_BYTES"))
        {
          v5 = (unsigned int *)lua_touserdata(a1, -1);
          strcpy((char *)v8, "LUA VM bytes: allocated=");
          LH_itoa(*v4, (char *)v7, 0xAu);
          __strcat_chk();
          __strcat_chk();
          LH_itoa(*v5, (char *)v7, 0xAu);
          __strcat_chk();
          v3(v2, v8);
        }
      }
    }
  }
  return 0;
}

uint64_t luaopen_Log(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  lua_createtable((uint64_t)a1, 0, 2);
  luaL_setfuncs(a1, (uint64_t)&lib_m_4, 0, v2, v3, v4, v5, v6);
  lua_setglobal(a1, "Log");
  return 0;
}

uint64_t hlpGetDctHandleAndInterface(_QWORD *a1, _QWORD *a2, _OWORD *a3)
{
  uint64_t v6;

  if (lua_getfield(a1, -1001000, "LUA_DICTIONARYLOOKUP_PSPIOBJSTDCTLKP") != 2)
    return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Invalid LUA_DICTIONARYLOOKUP_PSPIOBJSTDCTLKP");
  v6 = lua_touserdata(a1, -1);
  *a2 = *(_QWORD *)(v6 + 8);
  *a3 = *(_OWORD *)(v6 + 16);
  return 0;
}

uint64_t hlpGetPartNumber(uint64_t a1, uint64_t a2, uint64_t a3, char *__s1, char *a5)
{
  uint64_t v10;
  const char *v11;
  uint64_t result;
  char v13;
  char *v14;

  v10 = 0;
  v14 = 0;
  v11 = "tn";
  while (strcmp(__s1, v11))
  {
    v11 = FE_DCT_TO_PARAM_NAME_MAP[v10 + 2];
    v10 += 2;
    if (v10 == 4)
    {
      result = 0;
      v13 = 1;
LABEL_6:
      *a5 = v13;
      return result;
    }
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t, char *, const char *, char **))(a1 + 256))(a2, a3, FE_DCT_TO_PARAM_NAME_MAP[v10 + 1], "1", &v14) & 0x80000000) == 0)
  {
    v13 = atoi(v14);
    result = 0;
    goto LABEL_6;
  }
  return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"pfGetCfgParamVal returned an error");
}

uint64_t hlpSplitAndPush(_QWORD *a1, const char *a2, const char *a3)
{
  unsigned int v6;
  unsigned int v7;
  char *v8;
  char *v9;
  int v10;
  char *v11;
  uint64_t v12;
  _OWORD v14[16];
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  lua_createtable((uint64_t)a1, 0, 0);
  if (a2)
  {
    v6 = strlen(a2);
    if (v6 >= 0x100)
      v7 = 256;
    else
      v7 = v6;
    __strncpy_chk();
    *((_BYTE *)v14 + v7) = *a3;
    v8 = strstr((char *)v14, a3);
    if (v8)
    {
      v9 = v8;
      v10 = 0;
      v11 = (char *)v14;
      do
      {
        *v9 = 0;
        lua_pushstring(a1, v11);
        v12 = LuaVMUtil_u32_index_to_luainteger(v10);
        lua_rawseti(a1, -2, v12);
        ++v10;
        v11 = v9 + 1;
        v9 = strstr(v9 + 1, a3);
      }
      while (v9);
    }
  }
  return 0;
}

uint64_t hlpSplitAndPushTN(_QWORD *a1, char *__s1, char *__s2)
{
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t result;
  int v21;
  int v22;

  v6 = strstr(__s1, __s2);
  v7 = v6;
  if (v6)
  {
    *v6 = 0;
  }
  else
  {
    result = kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Unable to parse szNormOrth");
    if ((_DWORD)result)
      return result;
  }
  v8 = v7 + 1;
  v9 = strstr(v8, __s2);
  v10 = v9;
  if (v9)
  {
    *v9 = 0;
  }
  else
  {
    result = kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Unable to parse szTnLabel");
    if ((_DWORD)result)
      return result;
  }
  v11 = v10 + 1;
  v12 = strstr(v11, __s2);
  v13 = v12;
  if (v12)
  {
    *v12 = 0;
  }
  else
  {
    result = kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Unable to parse szDomainLabel");
    if ((_DWORD)result)
      return result;
  }
  v14 = v13 + 1;
  v15 = strstr(v14, __s2);
  v16 = v15;
  if (v15)
  {
    *v15 = 0;
  }
  else
  {
    result = kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Unable to parse szStdOrth");
    if ((_DWORD)result)
      return result;
  }
  v17 = v16 + 1;
  v18 = strstr(v17, __s2);
  v19 = v18;
  if (v18)
  {
    *v18 = 0;
  }
  else
  {
    result = kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Unable to parse szSens");
    if ((_DWORD)result)
      return result;
  }
  lua_createtable((uint64_t)a1, 0, 0);
  lua_pushstring(a1, __s1);
  lua_setfield(a1, -2, "norm_orth");
  lua_pushstring(a1, v8);
  lua_setfield(a1, -2, "tn_label");
  lua_pushstring(a1, v11);
  lua_setfield(a1, -2, "domain_label");
  lua_pushstring(a1, v14);
  lua_setfield(a1, -2, "std_orth");
  v21 = atoi(v17);
  lua_pushinteger((uint64_t)a1, v21);
  lua_setfield(a1, -2, "sens");
  v22 = atoi(v19 + 1);
  lua_pushinteger((uint64_t)a1, v22);
  lua_setfield(a1, -2, "prio");
  return 0;
}

uint64_t hlpSplitAndPushG2P(_QWORD *a1, char *__s1, char *__s2)
{
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t result;
  int v30;
  char *v31;
  char *v32;
  int v33;

  v6 = strstr(__s1, __s2);
  v7 = v6;
  if (v6)
  {
    *v6 = 0;
  }
  else
  {
    result = kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Unable to parse szPhon");
    if ((_DWORD)result)
      return result;
  }
  v8 = v7 + 1;
  v9 = strstr(v8, __s2);
  v10 = v9;
  if (v9)
  {
    *v9 = 0;
  }
  else
  {
    result = kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Unable to parse szTnLabel");
    if ((_DWORD)result)
      return result;
  }
  v11 = v10 + 1;
  v12 = strstr(v11, __s2);
  v13 = v12;
  if (v12)
  {
    *v12 = 0;
  }
  else
  {
    result = kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Unable to parse szDomainLabel");
    if ((_DWORD)result)
      return result;
  }
  v14 = v13 + 1;
  v15 = strstr(v14, __s2);
  v16 = v15;
  if (v15)
  {
    *v15 = 0;
  }
  else
  {
    result = kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Unable to parse szPos");
    if ((_DWORD)result)
      return result;
  }
  v17 = v16 + 1;
  v18 = strstr(v17, __s2);
  v19 = v18;
  if (v18)
  {
    *v18 = 0;
  }
  else
  {
    result = kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Unable to parse szCgn");
    if ((_DWORD)result)
      return result;
  }
  v20 = v19 + 1;
  v21 = strstr(v20, __s2);
  v22 = v21;
  if (v21)
  {
    *v21 = 0;
  }
  else
  {
    result = kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Unable to parse szPrio");
    if ((_DWORD)result)
      return result;
  }
  v23 = v22 + 1;
  v24 = strstr(v23, __s2);
  v25 = v24;
  if (v24)
  {
    *v24 = 0;
  }
  else
  {
    result = kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Unable to parse szMde");
    if ((_DWORD)result)
      return result;
  }
  v26 = v25 + 1;
  v27 = strstr(v26, __s2);
  v28 = v27;
  if (v27)
  {
    *v27 = 0;
LABEL_32:
    v31 = v28 + 1;
    goto LABEL_33;
  }
  v30 = kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Unable to parse szLng");
  v31 = v26;
  if (!v30)
    goto LABEL_32;
LABEL_33:
  v32 = v31;
  lua_createtable((uint64_t)a1, 0, 0);
  lua_pushstring(a1, __s1);
  lua_setfield(a1, -2, "phon");
  lua_pushstring(a1, v8);
  lua_setfield(a1, -2, "tn_label");
  lua_pushstring(a1, v11);
  lua_setfield(a1, -2, "domain_label");
  lua_pushstring(a1, v14);
  lua_setfield(a1, -2, "pos");
  lua_pushstring(a1, v17);
  lua_setfield(a1, -2, "cgn");
  v33 = atoi(v20);
  lua_pushinteger((uint64_t)a1, v33);
  lua_setfield(a1, -2, "prio");
  lua_pushstring(a1, v23);
  lua_setfield(a1, -2, "mde");
  lua_pushstring(a1, v26);
  lua_setfield(a1, -2, "lng");
  lua_pushstring(a1, v32);
  lua_setfield(a1, -2, "extra");
  return 0;
}

uint64_t hlpLookupTNG2P(_QWORD *a1, char *a2, uint64_t (*a3)(_QWORD *, _QWORD, _BYTE *))
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unint64_t i;
  uint64_t v12;
  _BYTE v13[3];
  char v14;
  unsigned __int16 v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  *(_QWORD *)&v19 = safeh_GetNullHandle();
  *((_QWORD *)&v19 + 1) = v6;
  v18 = 0;
  v16 = 0;
  v15 = 0;
  v14 = 0;
  result = lua_isstring(a1, 1);
  if ((_DWORD)result)
  {
    v17 = 0;
    v8 = lua_tolstring(a1, 1, 0);
    result = hlpGetDctHandleAndInterface(a1, &v18, &v19);
    if (!(_DWORD)result)
    {
      v9 = v18;
      v10 = v19;
      result = hlpGetPartNumber(v18, v19, *((uint64_t *)&v19 + 1), a2, (char *)&v16);
      if (!(_DWORD)result)
      {
        if (((*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t, uint64_t *, unsigned __int16 *, char *, _QWORD, _QWORD))(v9 + 240))(v10, *((_QWORD *)&v10 + 1), a2, v8, &v17, &v15, &v14, v16, 0) & 0x80000000) != 0)
        {
          return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"pfPartLookupAddonDct returned an error");
        }
        else
        {
          v13[0] = v14;
          v13[1] = 0;
          lua_createtable((uint64_t)a1, 0, 0);
          if (v15)
          {
            for (i = 0; i < v15; ++i)
            {
              result = a3(a1, *(_QWORD *)(v17 + 8 * i), v13);
              if ((_DWORD)result)
                break;
              v12 = LuaVMUtil_u32_index_to_luainteger(i);
              lua_rawseti(a1, -2, v12);
              result = 0;
            }
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t init_LuaDictionaryLookup(_QWORD *a1)
{
  if (lua_type(a1, 1) == 2)
    lua_setfield(a1, -1001000, "LUA_DICTIONARYLOOKUP_PSPIOBJSTDCTLKP");
  return 0;
}

uint64_t getFEConfigurationParameterValue_LuaDictionaryLookup(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  char *v6;
  uint64_t v7;
  __int128 v8;
  char __dst[16];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v25 = 0;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  *(_OWORD *)__dst = 0u;
  v10 = 0u;
  *(_QWORD *)&v8 = safeh_GetNullHandle();
  *((_QWORD *)&v8 + 1) = v2;
  v6 = 0;
  v7 = 0;
  if (lua_isstring(a1, 1))
  {
    v3 = lua_tolstring(a1, 1, 0);
    if (lua_isstring(a1, 2))
    {
      v4 = (const char *)lua_tolstring(a1, 2, 0);
      strncpy(__dst, v4, 0x100uLL);
    }
    else
    {
      __dst[0] = 0;
    }
    if (!hlpGetDctHandleAndInterface(a1, &v7, &v8))
    {
      if (((*(uint64_t (**)(_QWORD, _QWORD, uint64_t, char *, char **))(v7 + 256))(v8, *((_QWORD *)&v8 + 1), v3, __dst, &v6) & 0x80000000) == 0)
      {
        lua_pushstring(a1, v6);
        return 1;
      }
      kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"pfGetCfgParamVal returned an error");
    }
  }
  return LuaVMUtil_error(a1, "Error in DictionaryLookup:get_fe_parameter_value");
}

uint64_t singleLookup_LuaDictionaryLookup(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  int v8;
  char *v9;
  unsigned __int8 __c;
  unsigned __int16 __c_1;
  unsigned __int8 v12;
  char **v13;
  uint64_t v14;
  __int128 v15;

  *(_QWORD *)&v15 = safeh_GetNullHandle();
  *((_QWORD *)&v15 + 1) = v2;
  v13 = 0;
  v14 = 0;
  v12 = 0;
  __c_1 = -1;
  __c = 0;
  if (!lua_isstring(a1, 1))
    return LuaVMUtil_error(a1, "Error in DictionaryLookup:single_lookup");
  if (!lua_isstring(a1, 2))
    return LuaVMUtil_error(a1, "Error in DictionaryLookup:single_lookup");
  v3 = (char *)lua_tolstring(a1, 1, 0);
  v4 = lua_tolstring(a1, 2, 0);
  if (hlpGetDctHandleAndInterface(a1, &v14, &v15))
    return LuaVMUtil_error(a1, "Error in DictionaryLookup:single_lookup");
  v5 = v14;
  v6 = v15;
  if (hlpGetPartNumber(v14, v15, *((uint64_t *)&v15 + 1), v3, (char *)&v12))
    return LuaVMUtil_error(a1, "Error in DictionaryLookup:single_lookup");
  if (((*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t, char ***, unsigned __int16 *, unsigned __int8 *, _QWORD, _QWORD))(v5 + 240))(v6, *((_QWORD *)&v6 + 1), v3, v4, &v13, &__c_1, &__c, v12, 0) & 0x80000000) == 0)
  {
    v8 = __c_1;
    if (__c_1 && v13)
    {
      v9 = strchr(*v13, __c);
      if (!v9)
        goto LABEL_13;
      *v9 = 0;
      v8 = __c_1;
    }
    if (!v8)
    {
      lua_pushnil((uint64_t)a1);
      return 1;
    }
LABEL_13:
    lua_pushstring(a1, *v13);
    return 1;
  }
  kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"pfPartLookupAddonDct returned an error");
  return LuaVMUtil_error(a1, "Error in DictionaryLookup:single_lookup");
}

uint64_t multipleLookup_LuaDictionaryLookup(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  unint64_t i;
  char *v9;
  uint64_t v10;
  int v11;
  char v12[3];
  char v13;
  unsigned __int16 v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  *(_QWORD *)&v18 = safeh_GetNullHandle();
  *((_QWORD *)&v18 + 1) = v2;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  v14 = 0;
  v13 = 0;
  v11 = 0;
  if (!lua_isstring(a1, 1))
    return LuaVMUtil_error(a1, "Error in DictionaryLookup:multiple_lookup");
  if (!lua_isstring(a1, 2))
    return LuaVMUtil_error(a1, "Error in DictionaryLookup:multiple_lookup");
  v3 = (char *)lua_tolstring(a1, 1, 0);
  v4 = lua_tolstring(a1, 2, 0);
  if (LuaVMUtil_luaBOOLean_to_lhBOOL(a1, 3, &v11))
    return LuaVMUtil_error(a1, "Error in DictionaryLookup:multiple_lookup");
  if (hlpGetDctHandleAndInterface(a1, &v17, &v18))
    return LuaVMUtil_error(a1, "Error in DictionaryLookup:multiple_lookup");
  v5 = v17;
  v6 = v18;
  if (hlpGetPartNumber(v17, v18, *((uint64_t *)&v18 + 1), v3, (char *)&v15))
    return LuaVMUtil_error(a1, "Error in DictionaryLookup:multiple_lookup");
  if (((*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t, uint64_t *, unsigned __int16 *, char *, _QWORD, _QWORD))(v5 + 240))(v6, *((_QWORD *)&v6 + 1), v3, v4, &v16, &v14, &v13, v15, 0) & 0x80000000) != 0)
  {
    kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"pfPartLookupAddonDct returned an error");
    return LuaVMUtil_error(a1, "Error in DictionaryLookup:multiple_lookup");
  }
  v12[0] = v13;
  v12[1] = 0;
  lua_createtable((uint64_t)a1, 0, 0);
  if (!v14)
    goto LABEL_18;
  for (i = 0; i < v14; ++i)
  {
    v9 = *(char **)(v16 + 8 * i);
    if (v11 == 1)
      hlpSplitAndPush(a1, v9, v12);
    else
      lua_pushstring(a1, v9);
    v10 = LuaVMUtil_u32_index_to_luainteger(i);
    lua_rawseti(a1, -2, v10);
  }
  if (v14)
    lua_pushstring(a1, v12);
  else
LABEL_18:
    lua_pushnil((uint64_t)a1);
  return 2;
}

uint64_t tnLookup_LuaDictionaryLookup(_QWORD *a1)
{
  if (hlpLookupTNG2P(a1, "tn", (uint64_t (*)(_QWORD *, _QWORD, _BYTE *))hlpSplitAndPushTN))
    return LuaVMUtil_error(a1, "Error in DictionaryLookup:tn_lookup");
  else
    return 1;
}

uint64_t g2pLookup_LuaDictionaryLookup(_QWORD *a1)
{
  if (hlpLookupTNG2P(a1, "g2p", (uint64_t (*)(_QWORD *, _QWORD, _BYTE *))hlpSplitAndPushG2P))
    return LuaVMUtil_error(a1, "Error in DictionaryLookup:g2p_lookup");
  else
    return 1;
}

uint64_t luaopen_DictionaryLookup(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  lua_createtable((uint64_t)a1, 0, 5);
  luaL_setfuncs(a1, (uint64_t)&lib_m_5, 0, v2, v3, v4, v5, v6);
  lua_setglobal(a1, "DictionaryLookup");
  return 0;
}

uint64_t init_LuaParameters(_QWORD *a1)
{
  if (lua_type(a1, 1) == 2)
    lua_setfield(a1, -1001000, "LUA_PARAMETERS_PPARAMC");
  return 0;
}

uint64_t get_LuaParameters(_QWORD *a1)
{
  uint64_t v2;

  if (!lua_isstring(a1, 1))
    return LuaVMUtil_error(a1, "Error in Parameters.get");
  v2 = lua_tolstring(a1, 1, 0);
  return hlpGetString_LuaParameters(a1, v2);
}

uint64_t hlpGetString_LuaParameters(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v7;

  v7 = 0;
  if (lua_getfield(a1, -1001000, "LUA_PARAMETERS_PPARAMC") != 2)
    return LuaVMUtil_error(a1, "Error in Parameters.hlpGetString");
  v4 = lua_touserdata(a1, -1);
  if (!v4)
    return LuaVMUtil_error(a1, "Error in Parameters.hlpGetString");
  v5 = v4;
  if ((paramc_ParamGetStr(v4, a2, &v7) & 0x1FFF) == 0x14)
  {
    v7 = 0;
  }
  else if (v7)
  {
    lua_pushstring(a1, v7);
    goto LABEL_8;
  }
  lua_pushnil((uint64_t)a1);
LABEL_8:
  if ((paramc_ParamRelease(v5) & 0x80000000) == 0)
    return 1;
  return LuaVMUtil_error(a1, "Error in Parameters.hlpGetString");
}

uint64_t getFEVoice_LuaParameters(_QWORD *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"fevoice");
}

uint64_t getLanguage_LuaParameters(_QWORD *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"language");
}

uint64_t getLanguageCode_LuaParameters(_QWORD *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"langcode");
}

uint64_t getLanguageGroup_LuaParameters(_QWORD *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"langgroup");
}

uint64_t getLanguageID_LuaParameters(_QWORD *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"langid");
}

uint64_t getLanguageIETF_LuaParameters(_QWORD *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"langietf");
}

uint64_t getLanguageVersion_LuaParameters(_QWORD *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"langversion");
}

uint64_t getVoice_LuaParameters(_QWORD *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"voice");
}

uint64_t getVoiceAge_LuaParameters(_QWORD *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"age");
}

uint64_t getVoiceGender_LuaParameters(_QWORD *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"gender");
}

uint64_t getVoiceID_LuaParameters(_QWORD *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"voiceid");
}

uint64_t getVoiceModel_LuaParameters(_QWORD *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"voicemodel");
}

uint64_t getVoiceOperatingPoint_LuaParameters(_QWORD *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"voiceoperatingpoint");
}

uint64_t getVoicePitchBaseline_LuaParameters(_QWORD *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"pitch_baseline");
}

uint64_t getVoiceRateBaseline_LuaParameters(_QWORD *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"rate_baseline");
}

uint64_t getVoiceTimbreBaseline_LuaParameters(_QWORD *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"timbre_baseline");
}

uint64_t getVoiceVersion_LuaParameters(_QWORD *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"voiceversion");
}

uint64_t getVoiceVolumeBaseline_LuaParameters(_QWORD *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"volume_baseline");
}

uint64_t getVopVersion_LuaParameters(_QWORD *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"vopversion");
}

uint64_t getMLSet_LuaParameters(_QWORD *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"mlset");
}

uint64_t getNoCLMSet_LuaParameters(_QWORD *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"noclmset");
}

uint64_t getCLM_LuaParameters(_QWORD *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"clm");
}

uint64_t getVoiceML_LuaParameters(_QWORD *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"voiceml");
}

uint64_t getExtCLCCFG_LuaParameters(_QWORD *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"extclccfg");
}

uint64_t getExtraEscLang_LuaParameters(_QWORD *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"extraesclang");
}

uint64_t getExtraEscTN_LuaParameters(_QWORD *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"extraesctn");
}

uint64_t luaopen_Parameters(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  lua_createtable((uint64_t)a1, 0, 27);
  luaL_setfuncs(a1, (uint64_t)&lib_m_6, 0, v2, v3, v4, v5, v6);
  lua_setglobal(a1, "Parameters");
  return 0;
}

uint64_t hlpReadCLMInputTables(_QWORD *a1, int a2, uint64_t a3, unsigned int *a4, uint64_t *a5)
{
  int v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  v18 = 0;
  lua_len(a1, a2);
  v10 = lua_gettop((uint64_t)a1);
  result = LuaVMUtil_luainteger_to_u32(a1, v10, &v18);
  if (!(_DWORD)result)
  {
    lua_settop((uint64_t)a1, 0xFFFFFFFE);
    v12 = v18;
    if (!v18)
      return 0;
    if (*a4)
    {
      if (*a4 != v18)
        return 0;
    }
    else
    {
      *a4 = v18;
    }
    v13 = heap_Alloc(*(_QWORD *)(a3 + 8), 8 * v12);
    if (v13)
    {
      v14 = v13;
      lua_pushnil((uint64_t)a1);
      v18 = 0;
      while (lua_next(a1, a2))
      {
        v15 = lua_gettop((uint64_t)a1);
        result = lua_isstring(a1, v15);
        if (!(_DWORD)result)
          return result;
        v16 = lua_tolstring(a1, v15, 0);
        v17 = v18;
        *(_QWORD *)(v14 + 8 * v18) = v16;
        v18 = v17 + 1;
        lua_settop((uint64_t)a1, 0xFFFFFFFE);
      }
      lua_settop((uint64_t)a1, 0xFFFFFFFE);
      result = 0;
      *a5 = v14;
    }
    else
    {
      return kaldi::nnet1::UpdatableComponent::IsUpdatable(0);
    }
  }
  return result;
}

uint64_t hlpGetCLMOutputTables(uint64_t a1, unsigned int a2, kaldi::nnet1::UpdatableComponent **a3, kaldi::nnet1::UpdatableComponent **a4)
{
  uint64_t v7;
  kaldi::nnet1::UpdatableComponent *v8;

  v7 = 4 * a2;
  v8 = (kaldi::nnet1::UpdatableComponent *)heap_Alloc(*(_QWORD *)(a1 + 8), v7);
  *a3 = v8;
  if (v8 && (v8 = (kaldi::nnet1::UpdatableComponent *)heap_Alloc(*(_QWORD *)(a1 + 8), v7), (*a4 = v8) != 0))
    return 0;
  else
    return kaldi::nnet1::UpdatableComponent::IsUpdatable(v8);
}

void hlpWriteCLMOutputTables(_QWORD *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  lua_createtable((uint64_t)a1, 0, 0);
  if (a2)
  {
    v8 = 0;
    do
    {
      v9 = LuaVMUtil_u32_index_to_luainteger(*(_DWORD *)(a3 + 4 * v8));
      lua_pushinteger((uint64_t)a1, v9);
      v10 = LuaVMUtil_u32_index_to_luainteger(v8);
      lua_rawseti(a1, -2, v10);
      ++v8;
    }
    while (a2 != v8);
    lua_createtable((uint64_t)a1, 0, 0);
    v11 = 0;
    do
    {
      lua_pushnumber((uint64_t)a1, *(float *)(a4 + 4 * v11));
      v12 = LuaVMUtil_u32_index_to_luainteger(v11);
      lua_rawseti(a1, -2, v12);
      ++v11;
    }
    while (a2 != v11);
  }
  else
  {
    lua_createtable((uint64_t)a1, 0, 0);
  }
}

uint64_t luaopen_NN(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  lua_createtable((uint64_t)a1, 0, 12);
  luaL_setfuncs(a1, (uint64_t)&lib_m_7, 0, v2, v3, v4, v5, v6);
  lua_setglobal(a1, "NN");
  return 0;
}

uint64_t ToBeSpelled_QueryModelExists_LuaNN(_QWORD *a1)
{
  uint64_t Objc;
  uint64_t v3;
  int v4;
  _BOOL4 v5;
  uint64_t v7;
  __int128 v8;

  v7 = 0;
  Objc = LuaVMUtil_GetObjc(a1);
  if (Objc)
  {
    v3 = Objc;
    v8 = 0uLL;
    if (!auxGetObjectHandleAndInterface(Objc, &v7, &v8))
    {
      v4 = (*(uint64_t (**)(_QWORD, _QWORD))(v7 + 56))(v8, *((_QWORD *)&v8 + 1));
      v5 = LuaVMUtil_lhBOOL_to_luaBOOLean(v4);
      lua_pushBOOLean((uint64_t)a1, v5);
      objc_ReleaseObject(v3, (uint64_t)"FE_NN");
      return 1;
    }
  }
  else
  {
    kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Invalid OBJC");
  }
  return LuaVMUtil_error(a1, "Error in NN.ToBeSpelled_QueryModelExists_LuaNN");
}

uint64_t ToBeSpelled_Predict_LuaNN(_QWORD *a1)
{
  uint64_t Objc;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _BOOL4 v6;
  int v8;
  uint64_t v9;
  __int128 v10;

  v9 = 0;
  v8 = 0;
  Objc = LuaVMUtil_GetObjc(a1);
  if (Objc)
  {
    v3 = Objc;
    if (lua_isstring(a1, 1))
    {
      v10 = 0uLL;
      v4 = lua_tolstring(a1, 1, 0);
      if (!auxGetObjectHandleAndInterface(v3, &v9, &v10))
      {
        v5 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, int *))(v9 + 64))(v10, *((_QWORD *)&v10 + 1), v4, &v8);
        objc_ReleaseObject(v3, (uint64_t)"FE_NN");
        if ((v5 & 0x80000000) == 0)
        {
          v6 = LuaVMUtil_lhBOOL_to_luaBOOLean(v8);
          lua_pushBOOLean((uint64_t)a1, v6);
          return 1;
        }
      }
    }
  }
  else
  {
    kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Invalid OBJC");
  }
  return LuaVMUtil_error(a1, "Error in NN:ToBeSpelled_Predict_LuaNN");
}

uint64_t G2POneWord_QueryModelExists_LuaNN(_QWORD *a1)
{
  uint64_t Objc;
  uint64_t v3;
  int v4;
  _BOOL4 v5;
  uint64_t v7;
  __int128 v8;

  v7 = 0;
  Objc = LuaVMUtil_GetObjc(a1);
  if (Objc)
  {
    v3 = Objc;
    v8 = 0uLL;
    if (!auxGetObjectHandleAndInterface(Objc, &v7, &v8))
    {
      v4 = (*(uint64_t (**)(_QWORD, _QWORD))(v7 + 72))(v8, *((_QWORD *)&v8 + 1));
      v5 = LuaVMUtil_lhBOOL_to_luaBOOLean(v4);
      lua_pushBOOLean((uint64_t)a1, v5);
      objc_ReleaseObject(v3, (uint64_t)"FE_NN");
      return 1;
    }
  }
  else
  {
    kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Invalid OBJC");
  }
  return LuaVMUtil_error(a1, "Error in NN.G2POneWord_QueryModelExists_LuaNN");
}

uint64_t G2POneWord_Predict_LuaNN(_QWORD *a1)
{
  uint64_t Objc;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char *v7;
  uint64_t v8;
  __int128 v9;

  v7 = 0;
  v8 = 0;
  Objc = LuaVMUtil_GetObjc(a1);
  if (Objc)
  {
    v3 = Objc;
    if (lua_isstring(a1, 1))
    {
      v9 = 0uLL;
      v4 = lua_tolstring(a1, 1, 0);
      if (!auxGetObjectHandleAndInterface(v3, &v8, &v9))
      {
        v5 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, char **))(v8 + 80))(v9, *((_QWORD *)&v9 + 1), v4, &v7);
        objc_ReleaseObject(v3, (uint64_t)"FE_NN");
        if ((v5 & 0x80000000) == 0)
        {
          lua_pushstring(a1, v7);
          return 1;
        }
      }
    }
  }
  else
  {
    kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Invalid OBJC");
  }
  return LuaVMUtil_error(a1, "Error in NN:ToBeSpelled_Predict_LuaNN");
}

uint64_t CGN_QueryModelExists_LuaNN(_QWORD *a1)
{
  uint64_t Objc;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _BOOL4 v6;
  uint64_t v8;
  __int128 v9;

  v8 = 0;
  Objc = LuaVMUtil_GetObjc(a1);
  if (Objc)
  {
    v3 = Objc;
    if (lua_isstring(a1, 1))
    {
      v9 = 0uLL;
      v4 = lua_tolstring(a1, 1, 0);
      if (!auxGetObjectHandleAndInterface(v3, &v8, &v9))
      {
        v5 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(v8 + 88))(v9, *((_QWORD *)&v9 + 1), v4);
        v6 = LuaVMUtil_lhBOOL_to_luaBOOLean(v5);
        lua_pushBOOLean((uint64_t)a1, v6);
        objc_ReleaseObject(v3, (uint64_t)"FE_NN");
        return 1;
      }
    }
  }
  else
  {
    kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Invalid OBJC");
  }
  return LuaVMUtil_error(a1, "Error in NN.CGN_QueryModelExists_LuaNN");
}

uint64_t CGN_Predict_LuaNN(_QWORD *a1)
{
  uint64_t Objc;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  v11 = 0;
  v12 = 0;
  v10 = 0;
  Objc = LuaVMUtil_GetObjc(a1);
  if (!Objc)
  {
    kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Invalid OBJC");
    return LuaVMUtil_error(a1, "Error in NN:CGN_Predict_LuaNN");
  }
  v3 = Objc;
  if (!lua_isstring(a1, 1))
    return LuaVMUtil_error(a1, "Error in NN:CGN_Predict_LuaNN");
  v4 = lua_tolstring(a1, 1, 0);
  if (!lua_isstring(a1, 2))
    return LuaVMUtil_error(a1, "Error in NN:CGN_Predict_LuaNN");
  v5 = lua_tolstring(a1, 2, 0);
  if (LuaVMUtil_luainteger_to_u32_index(a1, 3, (_DWORD *)&v10 + 1))
    return LuaVMUtil_error(a1, "Error in NN:CGN_Predict_LuaNN");
  v13 = 0uLL;
  if (auxGetObjectHandleAndInterface(v3, &v12, &v13))
    return LuaVMUtil_error(a1, "Error in NN:CGN_Predict_LuaNN");
  v6 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t *, uint64_t *))(v12 + 96))(v13, *((_QWORD *)&v13 + 1), v4, v5, WORD2(v10), &v11, &v10);
  objc_ReleaseObject(v3, (uint64_t)"FE_NN");
  if (v6 < 0)
    return LuaVMUtil_error(a1, "Error in NN:CGN_Predict_LuaNN");
  lua_createtable((uint64_t)a1, 0, 0);
  if (!(_DWORD)v10)
    return 1;
  v7 = 0;
  do
  {
    lua_pushnumber((uint64_t)a1, *(float *)(v11 + 4 * v7));
    v8 = LuaVMUtil_u32_index_to_luainteger(v7);
    lua_rawseti(a1, -2, v8);
    ++v7;
    result = 1;
  }
  while (v7 < v10);
  return result;
}

uint64_t TN_QueryModelExists_LuaNN(_QWORD *a1)
{
  uint64_t Objc;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _BOOL4 v6;
  uint64_t v8;
  __int128 v9;

  v8 = 0;
  Objc = LuaVMUtil_GetObjc(a1);
  if (Objc)
  {
    v3 = Objc;
    if (lua_isstring(a1, 1))
    {
      v9 = 0uLL;
      v4 = lua_tolstring(a1, 1, 0);
      if (!auxGetObjectHandleAndInterface(v3, &v8, &v9))
      {
        v5 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(v8 + 104))(v9, *((_QWORD *)&v9 + 1), v4);
        v6 = LuaVMUtil_lhBOOL_to_luaBOOLean(v5);
        lua_pushBOOLean((uint64_t)a1, v6);
        objc_ReleaseObject(v3, (uint64_t)"FE_NN");
        return 1;
      }
    }
  }
  else
  {
    kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Invalid OBJC");
  }
  return LuaVMUtil_error(a1, "Error in NN.TN_QueryModelExists_LuaNN");
}

uint64_t TN_Predict_LuaNN(_QWORD *a1)
{
  uint64_t Objc;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  v12 = 0;
  v13 = 0;
  v10 = 0;
  v11 = 0;
  Objc = LuaVMUtil_GetObjc(a1);
  if (!Objc)
  {
    kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Invalid OBJC");
    return LuaVMUtil_error(a1, "Error in NN:TN_Predict_LuaNN");
  }
  v3 = Objc;
  if (!lua_isstring(a1, 1))
    return LuaVMUtil_error(a1, "Error in NN:TN_Predict_LuaNN");
  v4 = lua_tolstring(a1, 1, 0);
  if (LuaVMUtil_luainteger_to_u32_index(a1, 2, (_DWORD *)&v11 + 1))
    return LuaVMUtil_error(a1, "Error in NN:TN_Predict_LuaNN");
  if (!lua_isstring(a1, 3))
    return LuaVMUtil_error(a1, "Error in NN:TN_Predict_LuaNN");
  v5 = lua_tolstring(a1, 3, 0);
  if (LuaVMUtil_luainteger_to_u32_index(a1, 4, &v11))
    return LuaVMUtil_error(a1, "Error in NN:TN_Predict_LuaNN");
  if (LuaVMUtil_luainteger_to_u32_index(a1, 5, (_DWORD *)&v10 + 1))
    return LuaVMUtil_error(a1, "Error in NN:TN_Predict_LuaNN");
  v14 = 0uLL;
  if (auxGetObjectHandleAndInterface(v3, &v13, &v14))
    return LuaVMUtil_error(a1, "Error in NN:TN_Predict_LuaNN");
  v6 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t *, uint64_t *))(v13 + 112))(v14, *((_QWORD *)&v14 + 1), v4, WORD2(v11), v5, (unsigned __int16)v11, WORD2(v10), &v12, &v10);
  objc_ReleaseObject(v3, (uint64_t)"FE_NN");
  if (v6 < 0)
    return LuaVMUtil_error(a1, "Error in NN:TN_Predict_LuaNN");
  lua_createtable((uint64_t)a1, 0, 0);
  if (!(_DWORD)v10)
    return 1;
  v7 = 0;
  do
  {
    lua_pushnumber((uint64_t)a1, *(float *)(v12 + 4 * v7));
    v8 = LuaVMUtil_u32_index_to_luainteger(v7);
    lua_rawseti(a1, -2, v8);
    ++v7;
    result = 1;
  }
  while (v7 < v10);
  return result;
}

uint64_t CLM_QueryModelExists_LuaNN(_QWORD *a1)
{
  uint64_t Objc;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _BOOL4 v6;
  uint64_t v8;
  __int128 v9;

  v8 = 0;
  Objc = LuaVMUtil_GetObjc(a1);
  if (Objc)
  {
    v3 = Objc;
    if (lua_isstring(a1, 1))
    {
      v9 = 0uLL;
      v4 = lua_tolstring(a1, 1, 0);
      if (!auxGetObjectHandleAndInterface(v3, &v8, &v9))
      {
        v5 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(v8 + 120))(v9, *((_QWORD *)&v9 + 1), v4);
        v6 = LuaVMUtil_lhBOOL_to_luaBOOLean(v5);
        lua_pushBOOLean((uint64_t)a1, v6);
        objc_ReleaseObject(v3, (uint64_t)"FE_NN");
        return 1;
      }
    }
  }
  else
  {
    kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Invalid OBJC");
  }
  return LuaVMUtil_error(a1, "Error in NN.CLM_QueryModelExists_LuaNN");
}

uint64_t CLM_Predict_LuaNN(_QWORD *a1)
{
  uint64_t Objc;
  uint64_t v3;
  uint64_t Rsrc;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  kaldi::nnet1::UpdatableComponent *v15;
  kaldi::nnet1::UpdatableComponent *v16;
  int v17;
  unsigned int v18;
  kaldi::nnet1::UpdatableComponent *v19;
  kaldi::nnet1::UpdatableComponent *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;

  v23 = 0;
  v24 = 0;
  v21 = 0;
  v22 = 0;
  v19 = 0;
  v20 = 0;
  v18 = 0;
  Objc = LuaVMUtil_GetObjc(a1);
  if (!Objc)
  {
    v11 = "Invalid OBJC";
LABEL_9:
    kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)v11);
    return LuaVMUtil_error(a1, "Error in NN:CLM_Predict_LuaNN");
  }
  v3 = Objc;
  Rsrc = LuaVMUtil_GetRsrc(a1);
  if (!Rsrc)
  {
    v11 = "Invalid Rsrc";
    goto LABEL_9;
  }
  v5 = Rsrc;
  if (!lua_isstring(a1, 1))
  {
    v10 = 0;
    v9 = 0;
    goto LABEL_17;
  }
  v6 = lua_tolstring(a1, 1, 0);
  v7 = hlpReadCLMInputTables(a1, 2, v5, &v18, &v23);
  v8 = v23;
  if (v7)
  {
    v9 = 0;
    v10 = 0;
    if (!v23)
      goto LABEL_17;
    goto LABEL_14;
  }
  if (!v23)
  {
    lua_createtable((uint64_t)a1, 0, 0);
    lua_createtable((uint64_t)a1, 0, 0);
    v9 = 2;
    v10 = 1;
    goto LABEL_17;
  }
  if (hlpReadCLMInputTables(a1, 3, v5, &v18, &v22))
    goto LABEL_13;
  v13 = v22;
  if (!v22)
    goto LABEL_33;
  if (hlpReadCLMInputTables(a1, 4, v5, &v18, &v21))
  {
LABEL_13:
    v9 = 0;
    v10 = 0;
    goto LABEL_14;
  }
  v14 = v21;
  if (!v21)
  {
LABEL_33:
    lua_createtable((uint64_t)a1, 0, 0);
    lua_createtable((uint64_t)a1, 0, 0);
    goto LABEL_34;
  }
  if (hlpGetCLMOutputTables(v5, v18, &v19, &v20))
    goto LABEL_13;
  v25 = 0uLL;
  if (auxGetObjectHandleAndInterface(v3, &v24, &v25))
    goto LABEL_13;
  v15 = v19;
  v16 = v20;
  v17 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, kaldi::nnet1::UpdatableComponent *, kaldi::nnet1::UpdatableComponent *))(v24 + 128))(v25, *((_QWORD *)&v25 + 1), v6, v8, v13, v14, &v18, v19, v20);
  objc_ReleaseObject(v3, (uint64_t)"FE_NN");
  if (v17 < 0)
    goto LABEL_13;
  hlpWriteCLMOutputTables(a1, v18, (uint64_t)v15, (uint64_t)v16);
LABEL_34:
  v10 = 1;
  v9 = 2;
LABEL_14:
  heap_Free(*(_QWORD **)(v5 + 8), v8);
  if (v22)
    heap_Free(*(_QWORD **)(v5 + 8), v22);
LABEL_17:
  if (v21)
    heap_Free(*(_QWORD **)(v5 + 8), v21);
  if (v19)
    heap_Free(*(_QWORD **)(v5 + 8), (uint64_t)v19);
  if (v20)
    heap_Free(*(_QWORD **)(v5 + 8), (uint64_t)v20);
  if ((v10 & 1) == 0)
    return LuaVMUtil_error(a1, "Error in NN:CLM_Predict_LuaNN");
  return v9;
}

uint64_t auxGetObjectHandleAndInterface(uint64_t a1, _QWORD *a2, _OWORD *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v7 = 0;
  if ((objc_GetObject(a1, (uint64_t)"FE_NN", &v7) & 0x80000000) != 0)
    return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Invalid SSFT_OBJC_FE_NN");
  v5 = v7;
  if (!v7)
    return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Invalid SSFT_OBJC_FE_NN");
  result = 0;
  *a2 = *(_QWORD *)(v7 + 8);
  *a3 = *(_OWORD *)(v5 + 16);
  return result;
}

uint64_t luaopen_CLM(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  lua_createtable((uint64_t)a1, 0, 5);
  luaL_setfuncs(a1, (uint64_t)&lib_m_8, 0, v2, v3, v4, v5, v6);
  lua_setglobal(a1, "CLM");
  return 0;
}

uint64_t CLM_TokenizeLHP_LuaCLM(_QWORD *a1)
{
  uint64_t Objc;
  uint64_t v3;
  uint64_t Rsrc;
  uint64_t v5;
  const char *v6;
  size_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  __int128 v15;

  v14 = 0;
  v13 = 0;
  Objc = LuaVMUtil_GetObjc(a1);
  if (!Objc)
  {
    kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Invalid OBJC");
    return LuaVMUtil_error(a1, "Error in CLM.TokenizeLHP");
  }
  v3 = Objc;
  Rsrc = LuaVMUtil_GetRsrc(a1);
  if (!Rsrc)
  {
    kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Invalid Rsrc");
LABEL_9:
    objc_ReleaseObject(v3, (uint64_t)"CLMOBJECT");
    return LuaVMUtil_error(a1, "Error in CLM.TokenizeLHP");
  }
  v5 = Rsrc;
  if (!lua_isstring(a1, 1))
    goto LABEL_9;
  v6 = (const char *)lua_tolstring(a1, 1, 0);
  v7 = (2 * strlen(v6)) | 1;
  v8 = heap_Alloc(*(_QWORD *)(v5 + 8), v7);
  if (!v8)
    goto LABEL_9;
  v9 = (char *)v8;
  v15 = 0uLL;
  if (auxGetObjectHandleAndInterface_0(v3, &v14, &v15)
    || ((*(uint64_t (**)(_QWORD, _QWORD, const char *, char *, size_t, int *))(v14 + 80))(v15, *((_QWORD *)&v15 + 1), v6, v9, v7, &v13) & 0x80000000) != 0)
  {
    v10 = 0;
    v11 = 0;
  }
  else
  {
    lua_pushstring(a1, v9);
    lua_pushBOOLean((uint64_t)a1, v13 == 1);
    v11 = 2;
    v10 = 1;
  }
  heap_Free(*(_QWORD **)(v5 + 8), (uint64_t)v9);
  objc_ReleaseObject(v3, (uint64_t)"CLMOBJECT");
  if ((v10 & 1) == 0)
    return LuaVMUtil_error(a1, "Error in CLM.TokenizeLHP");
  return v11;
}

uint64_t CLM_ConvertLHP_LuaCLM(_QWORD *a1)
{
  uint64_t Objc;
  uint64_t v3;
  uint64_t Rsrc;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  __int128 v13;

  v12 = 0;
  Objc = LuaVMUtil_GetObjc(a1);
  if (!Objc)
  {
    kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Invalid OBJC");
    return LuaVMUtil_error(a1, "Error in CLM.ConvertLHP");
  }
  v3 = Objc;
  Rsrc = LuaVMUtil_GetRsrc(a1);
  if (!Rsrc)
  {
    kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Invalid Rsrc");
    goto LABEL_10;
  }
  v5 = Rsrc;
  if (!lua_isstring(a1, 1))
    goto LABEL_10;
  v6 = lua_tolstring(a1, 1, 0);
  if (!lua_isstring(a1, 2))
    goto LABEL_10;
  v7 = (const char *)lua_tolstring(a1, 2, 0);
  v8 = 4 * strlen(v7) + 4;
  v9 = heap_Calloc(*(_QWORD **)(v5 + 8), 1, v8);
  if (!v9)
    goto LABEL_10;
  v10 = (char *)v9;
  v13 = 0uLL;
  if (auxGetObjectHandleAndInterface_0(v3, &v12, &v13))
  {
    heap_Free(*(_QWORD **)(v5 + 8), (uint64_t)v10);
LABEL_10:
    objc_ReleaseObject(v3, (uint64_t)"CLMOBJECT");
    return LuaVMUtil_error(a1, "Error in CLM.ConvertLHP");
  }
  (*(void (**)(_QWORD, _QWORD, uint64_t, const char *, char *, _QWORD, _QWORD, uint64_t))(v12 + 64))(v13, *((_QWORD *)&v13 + 1), v6, v7, v10, 0, 0, v8);
  lua_pushstring(a1, v10);
  heap_Free(*(_QWORD **)(v5 + 8), (uint64_t)v10);
  objc_ReleaseObject(v3, (uint64_t)"CLMOBJECT");
  return 1;
}

uint64_t CLM_ConvertAndAlignLHP_LuaCLM(_QWORD *a1)
{
  uint64_t Objc;
  uint64_t v3;
  uint64_t Rsrc;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  uint64_t v16;
  char v17;
  uint64_t v18;
  __int128 v19;

  v18 = 0;
  Objc = LuaVMUtil_GetObjc(a1);
  if (!Objc)
  {
    kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Invalid OBJC");
    return LuaVMUtil_error(a1, "Error in CLM.ConvertLHP");
  }
  v3 = Objc;
  Rsrc = LuaVMUtil_GetRsrc(a1);
  if (!Rsrc)
  {
    kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Invalid Rsrc");
LABEL_12:
    objc_ReleaseObject(v3, (uint64_t)"CLMOBJECT");
    return LuaVMUtil_error(a1, "Error in CLM.ConvertLHP");
  }
  v5 = Rsrc;
  if (!lua_isstring(a1, 1))
    goto LABEL_12;
  v6 = lua_tolstring(a1, 1, 0);
  if (!lua_isstring(a1, 2))
    goto LABEL_12;
  v7 = (const char *)lua_tolstring(a1, 2, 0);
  v8 = 16 * strlen(v7) + 16;
  v9 = (char *)heap_Calloc(*(_QWORD **)(v5 + 8), 1, v8);
  v10 = (char *)heap_Calloc(*(_QWORD **)(v5 + 8), 1, v8);
  v11 = heap_Calloc(*(_QWORD **)(v5 + 8), 1, v8);
  v12 = (char *)v11;
  if (v9 && v10 && v11)
  {
    v19 = 0uLL;
    if (auxGetObjectHandleAndInterface_0(v3, &v18, &v19))
    {
      v13 = 0;
      v14 = 0;
    }
    else
    {
      if (((*(uint64_t (**)(_QWORD, _QWORD, uint64_t, const char *, char *, char *, char *, uint64_t))(v18 + 64))(v19, *((_QWORD *)&v19 + 1), v6, v7, v9, v10, v12, v8) & 0x80000000) != 0)
      {
        *v10 = 0;
        *v12 = 0;
      }
      lua_pushstring(a1, v9);
      if (*v10 && *v12)
      {
        lua_pushstring(a1, v10);
        lua_pushstring(a1, v12);
      }
      else
      {
        lua_pushnil((uint64_t)a1);
        lua_pushnil((uint64_t)a1);
      }
      v14 = 1;
      v13 = 3;
    }
    goto LABEL_23;
  }
  v13 = 0;
  v14 = 0;
  v16 = 0;
  v17 = 0;
  if (v9)
  {
LABEL_23:
    heap_Free(*(_QWORD **)(v5 + 8), (uint64_t)v9);
    v16 = v13;
    v17 = v14;
  }
  if (v10)
    heap_Free(*(_QWORD **)(v5 + 8), (uint64_t)v10);
  if (v12)
    heap_Free(*(_QWORD **)(v5 + 8), (uint64_t)v12);
  objc_ReleaseObject(v3, (uint64_t)"CLMOBJECT");
  if ((v17 & 1) == 0)
    return LuaVMUtil_error(a1, "Error in CLM.ConvertLHP");
  return v16;
}

uint64_t CLM_RemoveInvalidLHP_LuaCLM(_QWORD *a1)
{
  uint64_t Objc;
  uint64_t v3;
  uint64_t Rsrc;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  size_t v8;
  char *v9;
  char *v10;
  char v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  __int128 v16;

  v15 = 0;
  v14 = 0;
  Objc = LuaVMUtil_GetObjc(a1);
  if (!Objc)
  {
    kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Invalid OBJC");
    return LuaVMUtil_error(a1, "Error in CLM.RemoveInvalidLHP");
  }
  v3 = Objc;
  Rsrc = LuaVMUtil_GetRsrc(a1);
  if (!Rsrc)
  {
    kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Invalid Rsrc");
LABEL_10:
    objc_ReleaseObject(v3, (uint64_t)"CLMOBJECT");
    return LuaVMUtil_error(a1, "Error in CLM.RemoveInvalidLHP");
  }
  v5 = Rsrc;
  if (!lua_isstring(a1, 1))
    goto LABEL_10;
  v6 = lua_tolstring(a1, 1, 0);
  if (!lua_isstring(a1, 2))
    goto LABEL_10;
  v7 = (const char *)lua_tolstring(a1, 2, 0);
  v8 = strlen(v7);
  v9 = (char *)heap_Calloc(*(_QWORD **)(v5 + 8), 1, v8 + 1);
  if (!v9)
    goto LABEL_10;
  v10 = v9;
  v16 = 0uLL;
  strcpy(v9, v7);
  if (auxGetObjectHandleAndInterface_0(v3, &v15, &v16)
    || (v14 = 0,
        ((*(uint64_t (**)(_QWORD, _QWORD, uint64_t, char *, int *))(v15 + 72))(v16, *((_QWORD *)&v16 + 1), v6, v10, &v14) & 0x80000000) != 0))
  {
    v11 = 0;
    v12 = 0;
  }
  else
  {
    lua_pushstring(a1, v10);
    lua_pushBOOLean((uint64_t)a1, v14 == 1);
    v12 = 2;
    v11 = 1;
  }
  heap_Free(*(_QWORD **)(v5 + 8), (uint64_t)v10);
  objc_ReleaseObject(v3, (uint64_t)"CLMOBJECT");
  if ((v11 & 1) == 0)
    return LuaVMUtil_error(a1, "Error in CLM.RemoveInvalidLHP");
  return v12;
}

uint64_t CLM_ValidateTranscription_LuaCLM(_QWORD *a1)
{
  uint64_t Objc;
  uint64_t v3;
  uint64_t Rsrc;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  size_t v9;
  char *v10;
  char *v11;
  char v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  __int128 v17;

  v16 = 0;
  v15 = 1;
  Objc = LuaVMUtil_GetObjc(a1);
  if (!Objc)
  {
    kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Invalid OBJC");
    return LuaVMUtil_error(a1, "Error in CLM.ValidateTranscription");
  }
  v3 = Objc;
  Rsrc = LuaVMUtil_GetRsrc(a1);
  if (!Rsrc)
  {
    kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Invalid Rsrc");
LABEL_11:
    objc_ReleaseObject(v3, (uint64_t)"CLMOBJECT");
    return LuaVMUtil_error(a1, "Error in CLM.ValidateTranscription");
  }
  v5 = Rsrc;
  if (!lua_isstring(a1, 1))
    goto LABEL_11;
  v6 = lua_tolstring(a1, 1, 0);
  if (!lua_isstring(a1, 2))
    goto LABEL_11;
  v7 = lua_tolstring(a1, 2, 0);
  if (!lua_isstring(a1, 3))
    goto LABEL_11;
  v8 = (const char *)lua_tolstring(a1, 3, 0);
  v9 = strlen(v8);
  v10 = (char *)heap_Calloc(*(_QWORD **)(v5 + 8), 1, v9 + 1);
  if (!v10)
    goto LABEL_11;
  v11 = v10;
  v17 = 0uLL;
  strcpy(v10, v8);
  if (auxGetObjectHandleAndInterface_0(v3, &v16, &v17)
    || (v15 = 1,
        ((*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, char *, int *))(v16 + 88))(v17, *((_QWORD *)&v17 + 1), v6, v7, v11, &v15) & 0x80000000) != 0))
  {
    v12 = 0;
    v13 = 0;
  }
  else
  {
    lua_pushstring(a1, v11);
    lua_pushBOOLean((uint64_t)a1, v15 == 1);
    v13 = 2;
    v12 = 1;
  }
  heap_Free(*(_QWORD **)(v5 + 8), (uint64_t)v11);
  objc_ReleaseObject(v3, (uint64_t)"CLMOBJECT");
  if ((v12 & 1) == 0)
    return LuaVMUtil_error(a1, "Error in CLM.ValidateTranscription");
  return v13;
}

uint64_t auxGetObjectHandleAndInterface_0(uint64_t a1, _QWORD *a2, _OWORD *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v7 = 0;
  if ((objc_GetObject(a1, (uint64_t)"CLMOBJECT", &v7) & 0x80000000) != 0)
    return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Invalid SSFT_OBJC_CLM");
  v5 = v7;
  if (!v7)
    return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Invalid SSFT_OBJC_CLM");
  result = 0;
  *a2 = *(_QWORD *)(v7 + 8);
  *a3 = *(_OWORD *)(v5 + 16);
  return result;
}

uint64_t abs_LuaMath(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = luaL_checkinteger(a1, 1);
  if (v2 >= 0)
    v3 = v2;
  else
    v3 = -v2;
  lua_pushinteger((uint64_t)a1, v3);
  return 1;
}

uint64_t intdiv_LuaMath(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = luaL_checkinteger(a1, 1);
  v3 = luaL_checkinteger(a1, 2);
  if ((unint64_t)(v3 + 1) > 1)
  {
    v5 = v3;
    v6 = v2 / v3;
    lua_pushinteger((uint64_t)a1, v2 / v3);
    v4 = v2 - v6 * v5;
  }
  else
  {
    lua_pushinteger((uint64_t)a1, v2);
    v4 = 0;
  }
  lua_pushinteger((uint64_t)a1, v4);
  return 2;
}

uint64_t max_LuaMath(_QWORD *a1)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;

  v2 = lua_gettop((uint64_t)a1);
  if (v2 <= 0)
  {
    v4 = 1;
    luaL_argerror(a1, 1);
  }
  else
  {
    v3 = v2;
    if (v2 == 1)
    {
      v4 = 1;
    }
    else
    {
      v5 = 1;
      v4 = 1;
      do
      {
        v6 = v5 + 1;
        if (lua_compare(a1, v4, v5 + 1, 1))
          v4 = v5 + 1;
        ++v5;
      }
      while (v3 != v6);
    }
  }
  lua_pushvalue(a1, v4);
  return 1;
}

uint64_t min_LuaMath(_QWORD *a1)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;

  v2 = lua_gettop((uint64_t)a1);
  if (v2 <= 0)
  {
    v4 = 1;
    luaL_argerror(a1, 1);
  }
  else
  {
    v3 = v2;
    if (v2 == 1)
    {
      v4 = 1;
    }
    else
    {
      v5 = 1;
      v4 = 1;
      do
      {
        v6 = v5 + 1;
        if (lua_compare(a1, v5 + 1, v4, 1))
          v4 = v5 + 1;
        ++v5;
      }
      while (v3 != v6);
    }
  }
  lua_pushvalue(a1, v4);
  return 1;
}

uint64_t toint_LuaMath(_QWORD *a1)
{
  uint64_t v2;
  int v4;

  v4 = 0;
  v2 = lua_tointegerx(a1, 1, &v4);
  if (v4)
  {
    lua_pushinteger((uint64_t)a1, v2);
  }
  else
  {
    luaL_checkany(a1, 1);
    lua_pushnil((uint64_t)a1);
  }
  return 1;
}

uint64_t ult_LuaMath(_QWORD *a1)
{
  unint64_t v2;
  _BOOL4 v3;

  v2 = luaL_checkinteger(a1, 1);
  v3 = v2 < luaL_checkinteger(a1, 2);
  lua_pushBOOLean((uint64_t)a1, v3);
  return 1;
}

uint64_t luaopen_math(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  lua_createtable((uint64_t)a1, 0, 8);
  luaL_setfuncs(a1, (uint64_t)&lib_m_9, 0, v2, v3, v4, v5, v6);
  lua_pushinteger((uint64_t)a1, 0x7FFFFFFFLL);
  lua_setfield(a1, -2, "maxinteger");
  lua_pushinteger((uint64_t)a1, -2147483647);
  lua_setfield(a1, -2, "mininteger");
  lua_setglobal(a1, "math");
  return 0;
}

uint64_t getLuaAPIVersion_LuaUtilities(uint64_t a1)
{
  lua_pushinteger(a1, 1);
  lua_pushinteger(a1, 0);
  lua_pushinteger(a1, 0);
  return 3;
}

uint64_t nodesToRange_LuaUtilities(_QWORD *a1)
{
  unsigned int v2;
  unsigned int v3;
  char i;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  size_t v10;

  v9 = 0;
  v10 = 0;
  if (lua_gettop((uint64_t)a1))
  {
    lua_pushnil((uint64_t)a1);
    if (lua_next(a1, 1))
    {
      v2 = 0;
      v3 = 0;
      for (i = 1; ; i = 0)
      {
        v5 = lua_gettop((uint64_t)a1);
        if (getOOCObject_LuaLDOTreeNode(a1, v5, &v10)
          || LDOTreeNode_ComputeAbsoluteFrom(v10, (_DWORD *)&v9 + 1)
          || LDOTreeNode_ComputeAbsoluteTo(v10, &v9))
        {
          break;
        }
        if ((i & 1) != 0)
        {
          v2 = v9;
          v3 = HIDWORD(v9);
        }
        else
        {
          if (HIDWORD(v9) < v3)
            v3 = HIDWORD(v9);
          if (v9 > v2)
            v2 = v9;
        }
        lua_settop((uint64_t)a1, 0xFFFFFFFE);
        if (!lua_next(a1, 1))
        {
          v6 = LuaVMUtil_u32_index_to_luainteger(v3);
          lua_pushinteger((uint64_t)a1, v6);
          v7 = LuaVMUtil_u32_index_to_luainteger(v2);
          lua_pushinteger((uint64_t)a1, v7);
          return 2;
        }
      }
    }
  }
  return LuaVMUtil_error(a1, "Error in Utilities:nodes_to_range");
}

uint64_t concatenateStrings_LuaUtilities(_QWORD *a1)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;

  v9 = 0;
  v10 = 0;
  v8 = 0;
  v2 = lua_gettop((uint64_t)a1);
  if (v2)
  {
    v3 = v2;
    lua_getallocf((uint64_t)a1, &v8);
    v4 = *(_QWORD *)(v8 + 8);
    if (v4 && !PNEW_LDOString_Con(v4, *(_QWORD *)(v8 + 8), &v9))
    {
      v7 = 1;
      while (!LuaVMUtil_luastring_to_string(a1, v7, (uint64_t *)&v10)
           && v10
           && !LHString_Append(v9, v10))
      {
        if (++v7 > v3)
        {
          if (LuaVMUtil_pushLuaStringAndDestroy(a1, v9))
            break;
          return 1;
        }
      }
    }
    if (v9)
    {
      v5 = LDOString_BorrowAllocator(v9);
      OOC_PlacementDeleteObject(v5, v9);
      v9 = 0;
    }
  }
  return LuaVMUtil_error(a1, "Error in Utilities:concatenate_strings");
}

uint64_t joinStrings_LuaUtilities(_QWORD *a1)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;

  v10 = 0;
  v11 = 0;
  v8 = 0;
  v9 = 0;
  v2 = lua_gettop((uint64_t)a1);
  if (v2 >= 2)
  {
    v3 = v2;
    if (!LuaVMUtil_luastring_to_string(a1, 1, (uint64_t *)&v8))
    {
      if (v8)
      {
        lua_getallocf((uint64_t)a1, &v9);
        v4 = *(_QWORD *)(v9 + 8);
        if (v4)
        {
          if (!PNEW_LDOString_Con(v4, *(_QWORD *)(v9 + 8), &v10))
          {
            if (v3 < 3)
            {
LABEL_17:
              if (!LuaVMUtil_luastring_to_string(a1, v3, (uint64_t *)&v11)
                && v11
                && !LHString_Append(v10, v11)
                && !LuaVMUtil_pushLuaStringAndDestroy(a1, v10))
              {
                return 1;
              }
            }
            else
            {
              v7 = 2;
              while (!LuaVMUtil_luastring_to_string(a1, v7, (uint64_t *)&v11)
                   && v11
                   && !LHString_Append(v10, v11)
                   && !LHString_Append(v10, v8))
              {
                if (v3 == ++v7)
                  goto LABEL_17;
              }
            }
          }
        }
      }
    }
  }
  if (v10)
  {
    v5 = LDOString_BorrowAllocator(v10);
    OOC_PlacementDeleteObject(v5, v10);
    v10 = 0;
  }
  return LuaVMUtil_error(a1, "Error in Utilities:join_strings");
}

uint64_t padString_LuaUtilities(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  char *v10;

  v10 = 0;
  v8 = 0;
  v9 = 0;
  v6 = 0;
  v7 = 0;
  if (lua_gettop((uint64_t)a1) >= 3)
  {
    if (!LuaVMUtil_luastring_to_string(a1, 1, (uint64_t *)&v10))
    {
      if (v10)
      {
        if (!LuaVMUtil_luainteger_to_u32(a1, 2, (_DWORD *)&v8 + 1)
          && !LuaVMUtil_luastring_to_string(a1, 3, (uint64_t *)&v9))
        {
          if (v9)
          {
            if (!LDOString_ComputeCPtrLength(v9, 0, &v8))
            {
              lua_getallocf((uint64_t)a1, &v6);
              v4 = *(_QWORD *)(v6 + 8);
              if (v4)
              {
                if (!PNEW_LDOString_ConFromCPtr(v4, *(_QWORD *)(v6 + 8), v10, &v7))
                {
                  if ((_DWORD)v8)
                  {
                    while (1)
                    {
                      v5 = LHString_Length(v7);
                      if (v5 >= HIDWORD(v8))
                        break;
                      if (LHString_Append(v7, v9))
                        goto LABEL_5;
                    }
                  }
                  if (!LuaVMUtil_pushLuaStringAndDestroy(a1, v7))
                    return 1;
                }
              }
            }
          }
        }
      }
    }
LABEL_5:
    if (v7)
    {
      v2 = LDOString_BorrowAllocator(v7);
      OOC_PlacementDeleteObject(v2, v7);
      v7 = 0;
    }
  }
  return LuaVMUtil_error(a1, "Error in Utilities:pad_string");
}

uint64_t splitString_LuaUtilities(_QWORD *a1)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  int v14[2];
  int v15;
  char *__s2;
  char *v17;

  v17 = 0;
  __s2 = 0;
  v15 = 0;
  v13 = 0;
  *(_QWORD *)v14 = 0;
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  if (lua_gettop((uint64_t)a1) >= 2
    && !LuaVMUtil_luastring_to_string(a1, 1, (uint64_t *)&v17))
  {
    if (v17)
    {
      if (!LuaVMUtil_luastring_to_string(a1, 2, (uint64_t *)&__s2))
      {
        if (__s2)
        {
          if (!LDOString_ComputeCPtrLength(__s2, 0, &v15))
          {
            if (v15)
            {
              lua_getallocf((uint64_t)a1, &v13);
              v2 = *(_QWORD *)(v13 + 8);
              if (v2)
              {
                if (!PNEW_LDOString_ConFromCPtr(*(_QWORD *)(v13 + 8), *(_QWORD *)(v13 + 8), v17, v14)
                  && !PtrList_Con((uint64_t)v11, v2, 4u, 4))
                {
                  if (!LHString_Split(*(uint64_t *)v14, __s2, (uint64_t)v11))
                  {
                    lua_createtable((uint64_t)a1, 0, 0);
                    if (kaldi::MatrixBase<float>::Stride((uint64_t)v11))
                    {
                      v3 = 0;
                      v4 = 0;
                      do
                      {
                        v5 = PtrList_ItemN((uint64_t)v11, v4);
                        if (v5)
                        {
                          v6 = v5;
                          v7 = (char *)fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(v5);
                          lua_pushstring(a1, v7);
                          v8 = LuaVMUtil_u32_index_to_luainteger(v3);
                          lua_rawseti(a1, -2, v8);
                          if (OOC_PlacementDeleteObject(v2, v6))
                            goto LABEL_20;
                          ++v3;
                        }
                        ++v4;
                      }
                      while (v4 < kaldi::MatrixBase<float>::Stride((uint64_t)v11));
                    }
                    PtrList_RemoveAll((uint64_t)v11);
                    if (!PtrList_Des((uint64_t)v11)
                      && !OOC_PlacementDeleteObject(v2, *(uint64_t *)v14))
                    {
                      return 1;
                    }
                  }
LABEL_20:
                  PtrList_RemoveAll((uint64_t)v11);
                  PtrList_Des((uint64_t)v11);
                }
              }
            }
          }
        }
      }
    }
  }
  if (*(_QWORD *)v14)
  {
    v9 = LDOString_BorrowAllocator(*(uint64_t *)v14);
    OOC_PlacementDeleteObject(v9, *(uint64_t *)v14);
    *(_QWORD *)v14 = 0;
  }
  return LuaVMUtil_error(a1, "Error in Utilities:split_string");
}

uint64_t isValidUTF8String_LuaUtilities(_QWORD *a1)
{
  _BOOL4 IsValidUTF8;
  _BOOL4 v3;
  char *__s;

  __s = 0;
  if (!lua_gettop((uint64_t)a1)
    || LuaVMUtil_luastring_to_string(a1, 1, (uint64_t *)&__s)
    || !__s)
  {
    return LuaVMUtil_error(a1, "Error in Utilities:join_strings");
  }
  IsValidUTF8 = LDOString_IsValidUTF8(__s, 0);
  v3 = LuaVMUtil_lhBOOL_to_luaBOOLean(IsValidUTF8);
  lua_pushBOOLean((uint64_t)a1, v3);
  return 1;
}

uint64_t stringToBytes_LuaUtilities(_QWORD *a1)
{
  _BYTE *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  _BYTE *v7;

  v7 = 0;
  if (!lua_gettop((uint64_t)a1))
    return LuaVMUtil_error(a1, "Error in Utilities:string_to_bytes");
  if (LuaVMUtil_luastring_to_string(a1, 1, (uint64_t *)&v7))
    return LuaVMUtil_error(a1, "Error in Utilities:string_to_bytes");
  v2 = v7;
  if (!v7)
    return LuaVMUtil_error(a1, "Error in Utilities:string_to_bytes");
  lua_createtable((uint64_t)a1, 0, 0);
  v3 = *v2;
  if (*v2)
  {
    v4 = 0;
    do
    {
      lua_pushinteger((uint64_t)a1, v3);
      v5 = LuaVMUtil_u32_index_to_luainteger(v4);
      lua_rawseti(a1, -2, v5);
      v3 = v2[++v4];
    }
    while (v2[v4]);
  }
  return 1;
}

uint64_t stringToUTF8Characters_LuaUtilities(_QWORD *a1)
{
  char *v2;
  int v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  __int16 v14;
  char *__s;

  __s = 0;
  if (!lua_gettop((uint64_t)a1)
    || LuaVMUtil_luastring_to_string(a1, 1, (uint64_t *)&__s)
    || !__s
    || !LDOString_IsValidUTF8(__s, 0))
  {
    return LuaVMUtil_error(a1, "Error in Utilities:string_to_utf8_characters");
  }
  v2 = __s;
  lua_createtable((uint64_t)a1, 0, 0);
  if (!*v2)
    return 1;
  v3 = 0;
  LODWORD(v4) = 0;
  v5 = v2;
  v6 = 1;
  do
  {
    v7 = 1;
    while (!LDOString_IsValidUTF8(v5, &v5[v7]))
    {
      if (++v7 == 5)
        return LuaVMUtil_error(a1, "Error in Utilities:string_to_utf8_characters");
    }
    v14 = 0;
    v13 = 0;
    __strncpy_chk();
    lua_createtable((uint64_t)a1, 0, 0);
    lua_pushstring(a1, (char *)&v13);
    v8 = LuaVMUtil_u32_index_to_luainteger(0);
    lua_rawseti(a1, -2, v8);
    v9 = LuaVMUtil_u32_index_to_luainteger(v4);
    lua_pushinteger((uint64_t)a1, v9);
    v10 = LuaVMUtil_u32_index_to_luainteger(1);
    lua_rawseti(a1, -2, v10);
    v11 = LuaVMUtil_u32_index_to_luainteger(v3);
    lua_rawseti(a1, -2, v11);
    ++v3;
    v4 = (v4 + v7);
    v5 = &v2[v4];
  }
  while (v2[v4]);
  return v6;
}

uint64_t luaopen_Utilities(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  lua_createtable((uint64_t)a1, 0, 10);
  luaL_setfuncs(a1, (uint64_t)&lib_m_10, 0, v2, v3, v4, v5, v6);
  lua_setglobal(a1, "Utilities");
  return 0;
}

uint64_t LuaVMLDO_Con(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t NullHandle;
  int v16;
  char *v17;
  _QWORD v18[3];
  unsigned int LuaStateWithMemoryLogging;

  memset(v18, 0, sizeof(v18));
  result = Object_Con(a1);
  LuaStateWithMemoryLogging = result;
  if (!(_DWORD)result)
  {
    *a1 = (uint64_t)&__LuaVMLDO;
    a1[1] = a2;
    a1[3] = a3;
    a1[4] = a4;
    a1[5] = 0;
    a1[6] = 0;
    a1[7] = a5;
    a1[2] = 0;
    v11 = a1 + 2;
    v12 = (_QWORD *)OOCAllocator_Calloc(a2, 1, 16, &LuaStateWithMemoryLogging);
    a1[8] = (uint64_t)v12;
    result = LuaStateWithMemoryLogging;
    if (!LuaStateWithMemoryLogging)
    {
      v13 = a1[1];
      *v12 = 0;
      v12[1] = v13;
      LuaStateWithMemoryLogging = LuaStateFactoryMemLog_Con(v18, v13);
      if (LuaStateWithMemoryLogging)
        goto LABEL_4;
      NullHandle = safeh_GetNullHandle();
      if (safeh_HandlesEqual(a1[3], a1[4], NullHandle, v16))
        goto LABEL_9;
      if ((InitRsrcFunction((_WORD *)a1[3], a1[4], a1 + 5) & 0x80000000) != 0)
      {
        v17 = "InitRsrcFunction returned an error";
      }
      else
      {
        if ((objc_GetObject(*(_QWORD *)(a1[5] + 48), (uint64_t)"FE_DCTLKP", a1 + 6) & 0x80000000) == 0)
        {
LABEL_9:
          LuaStateWithMemoryLogging = LuaStateFactoryMemLog_CreateLuaStateWithMemoryLogging((uint64_t)v18, a1 + 2, a1[8]);
          if (!LuaStateWithMemoryLogging)
          {
            LuaStateWithMemoryLogging = __LuaVMLDO_ProtectedRegisterRSRC((uint64_t)a1);
            if (!LuaStateWithMemoryLogging)
              LuaStateWithMemoryLogging = __LuaVMLDO_OpenLibs(a1);
          }
          (*(void (**)(_QWORD *))(v18[0] + 16))(v18);
          if (!LuaStateWithMemoryLogging)
            return 0;
          if (!*v11)
            goto LABEL_4;
          lua_close(*v11);
          *v11 = 0;
          result = LuaStateWithMemoryLogging;
LABEL_21:
          if (!(_DWORD)result)
            return result;
LABEL_4:
          __LuaVMLDO_ReleaseObjects((uint64_t)a1);
          result = LuaStateWithMemoryLogging;
          if (!LuaStateWithMemoryLogging)
            return result;
          goto LABEL_5;
        }
        v17 = "objc_GetObject returned an error";
      }
      result = kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)v17);
      LuaStateWithMemoryLogging = result;
      goto LABEL_21;
    }
  }
LABEL_5:
  v14 = a1[8];
  if (v14)
  {
    OOCAllocator_Free(a1[1], v14);
    return LuaStateWithMemoryLogging;
  }
  return result;
}

kaldi::nnet1::UpdatableComponent *__LuaVMLDO_ProtectedRegisterRSRC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  kaldi::nnet1::UpdatableComponent *result;

  lua_pushcclosure(*(_QWORD *)(a1 + 16), (uint64_t)LuaVMUtil_RegisterRSRC, 0);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 16);
  if (v2)
    lua_pushlightuserdata(v3, v2);
  else
    lua_pushnil(v3);
  result = (kaldi::nnet1::UpdatableComponent *)lua_pcallk(*(_QWORD *)(a1 + 16), 1, 0, 0, 0, 0);
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 4)
      return (kaldi::nnet1::UpdatableComponent *)kaldi::nnet1::UpdatableComponent::IsUpdatable(result);
    else
      return (kaldi::nnet1::UpdatableComponent *)kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Error in __LuaVMLDO_ProtectedRegisterRSRC");
  }
  return result;
}

kaldi::nnet1::UpdatableComponent *__LuaVMLDO_OpenLibs(uint64_t *a1)
{
  kaldi::nnet1::UpdatableComponent *v2;
  kaldi::nnet1::UpdatableComponent *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  kaldi::nnet1::UpdatableComponent *v7;
  uint64_t v8;
  uint64_t v9;
  kaldi::nnet1::UpdatableComponent *v10;
  uint64_t v11;
  uint64_t v12;
  kaldi::nnet1::UpdatableComponent *v13;

  v2 = (kaldi::nnet1::UpdatableComponent *)luaL_openlibs(a1[2]);
  if ((_DWORD)v2)
    return (kaldi::nnet1::UpdatableComponent *)kaldi::nnet1::UpdatableComponent::IsUpdatable(v2);
  result = __LuaVMLDO_OpenLib((uint64_t)a1, (uint64_t)luaopen_Log);
  if (!(_DWORD)result)
  {
    lua_pushcclosure(a1[2], (uint64_t)init_LuaLog, 0);
    v4 = a1[5];
    if (v4 && a1[7])
    {
      lua_pushlightuserdata(a1[2], *(_QWORD *)(v4 + 32));
      lua_pushlightuserdata(a1[2], *(_QWORD *)(a1[5] + 8));
      lua_pushlightuserdata(a1[2], a1[7]);
    }
    else
    {
      lua_pushnil(a1[2]);
      lua_pushnil(a1[2]);
      lua_pushnil(a1[2]);
    }
    v5 = a1[8];
    v6 = a1[2];
    if (v5)
    {
      lua_pushlightuserdata(v6, v5);
      lua_pushlightuserdata(a1[2], a1[8] + 4);
    }
    else
    {
      lua_pushnil(v6);
      lua_pushnil(a1[2]);
    }
    v7 = (kaldi::nnet1::UpdatableComponent *)lua_pcallk(a1[2], 5, 0, 0, 0, 0);
    if ((_DWORD)v7)
    {
      if ((_DWORD)v7 == 4)
      {
        result = (kaldi::nnet1::UpdatableComponent *)kaldi::nnet1::UpdatableComponent::IsUpdatable(v7);
        if ((_DWORD)result)
          return result;
      }
      else
      {
        result = (kaldi::nnet1::UpdatableComponent *)kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Error in __LuaVMLDO_OpenLogLib");
        if ((_DWORD)result)
          return result;
      }
    }
    result = __LuaVMLDO_OpenLib((uint64_t)a1, (uint64_t)luaopen_DictionaryLookup);
    if (!(_DWORD)result)
    {
      lua_pushcclosure(a1[2], (uint64_t)init_LuaDictionaryLookup, 0);
      v8 = a1[6];
      v9 = a1[2];
      if (v8)
        lua_pushlightuserdata(v9, v8);
      else
        lua_pushnil(v9);
      v10 = (kaldi::nnet1::UpdatableComponent *)lua_pcallk(a1[2], 1, 0, 0, 0, 0);
      if (!(_DWORD)v10
        || ((_DWORD)v10 != 4
          ? (result = (kaldi::nnet1::UpdatableComponent *)kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Error in __LuaVMLDO_OpenDictionaryLookupLib"))
          : (result = (kaldi::nnet1::UpdatableComponent *)kaldi::nnet1::UpdatableComponent::IsUpdatable(v10)),
            !(_DWORD)result))
      {
        result = __LuaVMLDO_OpenLib((uint64_t)a1, (uint64_t)luaopen_Parameters);
        if (!(_DWORD)result)
        {
          lua_pushcclosure(a1[2], (uint64_t)init_LuaParameters, 0);
          v11 = a1[5];
          v12 = a1[2];
          if (v11)
            lua_pushlightuserdata(v12, *(_QWORD *)(v11 + 40));
          else
            lua_pushnil(v12);
          v13 = (kaldi::nnet1::UpdatableComponent *)lua_pcallk(a1[2], 1, 0, 0, 0, 0);
          if (!(_DWORD)v13
            || ((_DWORD)v13 != 4
              ? (result = (kaldi::nnet1::UpdatableComponent *)kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Error in __LuaVMLDO_OpenParametersLib"))
              : (result = (kaldi::nnet1::UpdatableComponent *)kaldi::nnet1::UpdatableComponent::IsUpdatable(v13)),
                !(_DWORD)result))
          {
            result = __LuaVMLDO_OpenLib((uint64_t)a1, (uint64_t)luaopen_NN);
            if (!(_DWORD)result)
            {
              result = __LuaVMLDO_OpenLib((uint64_t)a1, (uint64_t)luaopen_CLM);
              if (!(_DWORD)result)
              {
                result = __LuaVMLDO_OpenLib((uint64_t)a1, (uint64_t)luaopen_math);
                if (!(_DWORD)result)
                {
                  result = __LuaVMLDO_OpenLib((uint64_t)a1, (uint64_t)luaopen_Utilities);
                  if (!(_DWORD)result)
                  {
                    result = __LuaVMLDO_OpenLib((uint64_t)a1, (uint64_t)luaopen_LDO);
                    if (!(_DWORD)result)
                    {
                      result = __LuaVMLDO_OpenLib((uint64_t)a1, (uint64_t)luaopen_LDOObject);
                      if (!(_DWORD)result)
                      {
                        result = __LuaVMLDO_OpenLib((uint64_t)a1, (uint64_t)luaopen_LDOTreeNode);
                        if (!(_DWORD)result)
                        {
                          result = __LuaVMLDO_OpenLib((uint64_t)a1, (uint64_t)luaopen_LDOLabel);
                          if (!(_DWORD)result)
                          {
                            result = __LuaVMLDO_OpenLib((uint64_t)a1, (uint64_t)luaopen_LDOLabelSet);
                            if (!(_DWORD)result)
                              return __LuaVMLDO_OpenLib((uint64_t)a1, (uint64_t)luaopen_luautf8);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t __LuaVMLDO_ReleaseObjects(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 40);
  if (v1)
  {
    v2 = result;
    result = *(_QWORD *)(v1 + 48);
    if (result)
    {
      if (*(_QWORD *)(v2 + 48))
        return objc_ReleaseObject(result, (uint64_t)"FE_DCTLKP");
    }
  }
  return result;
}

uint64_t LuaVMLDO_Des(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[2];
  if (v2)
  {
    lua_close(v2);
    a1[2] = 0;
  }
  v3 = a1[8];
  if (v3)
    OOCAllocator_Free(a1[1], v3);
  __LuaVMLDO_ReleaseObjects((uint64_t)a1);
  return Object_Des();
}

uint64_t LuaVMLDO_IsLuaCodeAvailable(_WORD *a1, uint64_t a2, char *a3, _DWORD *a4)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int Chunk;
  char *v19;
  uint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  _OWORD v24[8];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v23 = 0;
  v22 = 0;
  v21 = 0;
  memset(v24, 0, sizeof(v24));
  *a4 = 0;
  if (!a3)
  {
    v16 = __LuaVMLDO_ComposeBrokerString(a1, a2, (char *)v24);
    if ((_DWORD)v16)
      goto LABEL_18;
    goto LABEL_5;
  }
  __strcpy_chk();
  if (LH_stricmp(a3, "clm"))
  {
LABEL_5:
    v8 = "LUAC";
    goto LABEL_6;
  }
  v8 = "CLMP";
LABEL_6:
  v17 = ssftriff_reader_ObjOpen(a1, a2, 2, (const char *)v24, v8, 1031, (uint64_t *)&v23);
  if ((v17 & 0x80000000) == 0)
  {
    Chunk = ssftriff_reader_FindChunk((uint64_t)v23, "LUAA", 0, &v22, &v21);
    if (Chunk < 0)
    {
      if ((Chunk & 0x1FFF) == 0x14)
      {
        v16 = 0;
        goto LABEL_18;
      }
      v19 = "ssftriff_reader_FindChunk returned an error";
    }
    else
    {
      if ((ssftriff_reader_CloseChunk((uint64_t)v23) & 0x80000000) == 0)
      {
        v16 = 0;
        *a4 = 1;
        goto LABEL_18;
      }
      v19 = "ssftriff_reader_CloseChunk returned an error";
    }
LABEL_17:
    v16 = kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)v19);
    goto LABEL_18;
  }
  v16 = 0;
  if ((v17 & 0x1FFF) != 3 && (v17 & 0x1FFF) != 0xD)
  {
    v19 = "ssftriff_reader_ObjOpen returned an error";
    goto LABEL_17;
  }
LABEL_18:
  if (v23 && (ssftriff_reader_ObjClose(v23, v9, v10, v11, v12, v13, v14, v15) & 0x80000000) != 0)
  {
    *a4 = 0;
    return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"ssftriff_reader_ObjClose returned an error");
  }
  return v16;
}

uint64_t __LuaVMLDO_ComposeBrokerString(_WORD *a1, int a2, char *a3)
{
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char __src[16];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17[29];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[19];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v7 = 0;
  v8 = 0;
  v6 = 0;
  memset(v23, 0, sizeof(v23));
  v22 = 0u;
  v21 = 0u;
  v20 = 0u;
  v19 = 0u;
  v18 = 0u;
  *(_OWORD *)&v17[13] = 0u;
  v16 = 0u;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  *(_OWORD *)__src = 0u;
  if ((InitRsrcFunction(a1, a2, &v8) & 0x80000000) != 0)
  {
    v5 = "InitRsrcFunction returned an error";
  }
  else if ((paramc_ParamGetStr(*(_QWORD *)(v8 + 40), (uint64_t)"langcode", &v7) & 0x80000000) != 0
         || (paramc_ParamGetStr(*(_QWORD *)(v8 + 40), (uint64_t)"fecfg", &v6) & 0x80000000) != 0)
  {
    v5 = "paramc_ParamGetStr returned an error";
  }
  else
  {
    strcpy(v17, "amalgamated/");
    __strcat_chk();
    __strcat_chk();
    __strcat_chk();
    if ((brokeraux_ComposeBrokerString(v8, v17, 1, 1, v7, 0, 0, __src, 0x80uLL) & 0x80000000) == 0)
    {
      strcpy(a3, __src);
      return 0;
    }
    v5 = "brokeraux_ComposeBrokerString returned an error";
  }
  return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)v5);
}

uint64_t LuaVMLDO_IsLuaFunctionAvailable(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  kaldi::nnet1::UpdatableComponent *v6;

  *a3 = 0;
  lua_pushcclosure(*(_QWORD *)(a1 + 16), (uint64_t)__LuaVMLDO_ProtectedGetGlobal, 0);
  lua_pushlightuserdata(*(_QWORD *)(a1 + 16), a2);
  v6 = (kaldi::nnet1::UpdatableComponent *)lua_pcallk(*(_QWORD *)(a1 + 16), 1, 1, 0, 0, 0);
  if ((_DWORD)v6)
  {
    if ((_DWORD)v6 == 4)
      return kaldi::nnet1::UpdatableComponent::IsUpdatable(v6);
    else
      return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Error in LuaVMLDO_IsLuaFunctionAvailable");
  }
  else
  {
    if (lua_type(*(_QWORD **)(a1 + 16), -1) == 6)
      *a3 = 1;
    lua_settop(*(_QWORD *)(a1 + 16), 0xFFFFFFFE);
    return 0;
  }
}

uint64_t __LuaVMLDO_ProtectedGetGlobal(_QWORD *a1)
{
  char *v2;

  v2 = (char *)lua_touserdata(a1, 1);
  lua_getglobal(a1, v2);
  return 1;
}

kaldi::nnet1::UpdatableComponent *LuaVMLDO_LoadScriptFromBuffer(uint64_t a1, uint64_t a2, unsigned int a3)
{
  kaldi::nnet1::UpdatableComponent *result;

  result = (kaldi::nnet1::UpdatableComponent *)luaL_loadbufferx(*(_QWORD *)(a1 + 16), a2, a3, "@ldoscriptchunk", 0);
  if ((_DWORD)result
    || (result = (kaldi::nnet1::UpdatableComponent *)lua_pcallk(*(_QWORD *)(a1 + 16), 0, 0, 0, 0, 0), (_DWORD)result))
  {
    if ((_DWORD)result == 4)
      return (kaldi::nnet1::UpdatableComponent *)kaldi::nnet1::UpdatableComponent::IsUpdatable(result);
    else
      return (kaldi::nnet1::UpdatableComponent *)kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Error in LuaVMLDO_LoadScriptFromBuffer");
  }
  return result;
}

uint64_t LuaVMLDO_LoadScriptFromRIFF(uint64_t a1, char *a2)
{
  char v4;
  char *v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  unsigned int v17;
  __int16 v18;
  int v19;
  unsigned int ScriptFromBuffer;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  unsigned int v27;
  _OWORD v28[8];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v27 = 0;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  memset(v28, 0, sizeof(v28));
  if (!*(_QWORD *)(a1 + 40))
  {
    v6 = "No valid resources are available";
    goto LABEL_28;
  }
  if (a2)
  {
    __strcpy_chk();
    if (!LH_stricmp(a2, "clm"))
    {
      v4 = 0;
      v5 = "CLMP";
      goto LABEL_8;
    }
  }
  else
  {
    result = __LuaVMLDO_ComposeBrokerString(*(_WORD **)(a1 + 24), *(_QWORD *)(a1 + 32), (char *)v28);
    v27 = result;
    if ((_DWORD)result)
      goto LABEL_29;
  }
  v5 = "LUAC";
  v4 = 1;
LABEL_8:
  v15 = ssftriff_reader_ObjOpen(*(_WORD **)(a1 + 24), *(_QWORD *)(a1 + 32), 2, (const char *)v28, v5, 1031, (uint64_t *)&v26);
  if (v15 < 0)
  {
    v18 = v15;
    result = 0;
    v19 = v18 & 0x1FFF;
    if (v19 == 3 || v19 == 13)
      goto LABEL_29;
    v6 = "ssftriff_reader_OpenChunk returned an error";
LABEL_28:
    result = kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)v6);
    v27 = result;
    goto LABEL_29;
  }
  if ((ssftriff_reader_FindChunk((uint64_t)v26, "LUAA", 0, (unsigned int *)&v24, &v25) & 0x80000000) != 0)
  {
    v6 = "ssftriff_reader_FindChunk returned an error";
    goto LABEL_28;
  }
  v16 = (_BYTE *)OOCAllocator_Calloc(*(_QWORD *)(a1 + 8), v24, 1, &v27);
  if (v27)
    goto LABEL_23;
  if ((v4 & 1) != 0)
  {
    v17 = 0;
  }
  else
  {
    v23 = v24;
    if ((ssftriff_reader_ReadStringZ((uint64_t)v26, v25, v24, 0, v16, (unsigned int *)&v23) & 0x80000000) != 0)
    {
LABEL_21:
      ScriptFromBuffer = kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"ssftriff_reader_ReadStringZ returned an error");
      goto LABEL_22;
    }
    v17 = v23;
  }
  if ((ssftriff_reader_ReadStringZ((uint64_t)v26, v25, v24, v17, v16, (unsigned int *)&v24) & 0x80000000) != 0)
    goto LABEL_21;
  ScriptFromBuffer = LuaVMLDO_LoadScriptFromBuffer(a1, (uint64_t)v16, v24 - 1);
LABEL_22:
  v27 = ScriptFromBuffer;
LABEL_23:
  if (v16)
    OOCAllocator_Free(*(_QWORD *)(a1 + 8), (uint64_t)v16);
  v21 = ssftriff_reader_CloseChunk((uint64_t)v26);
  result = v27;
  if (v21 < 0 && !v27)
  {
    v6 = "ssftriff_reader_CloseChunk returned an error";
    goto LABEL_28;
  }
LABEL_29:
  if (v26)
  {
    v22 = ssftriff_reader_ObjClose(v26, v8, v9, v10, v11, v12, v13, v14);
    result = v27;
    if (v22 < 0 && !v27)
      return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"ssftriff_reader_ObjClose returned an error");
  }
  return result;
}

uint64_t LuaVMLDO_ReleasePointerToString(uint64_t a1)
{
  lua_settop(*(_QWORD *)(a1 + 16), 0xFFFFFFFE);
  return 0;
}

kaldi::nnet1::UpdatableComponent *LuaVMLDO_RunFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::nnet1::UpdatableComponent *result;

  lua_pushcclosure(*(_QWORD *)(a1 + 16), (uint64_t)__LuaVMLDO_ProtectedGetGlobal, 0);
  lua_pushlightuserdata(*(_QWORD *)(a1 + 16), a2);
  result = (kaldi::nnet1::UpdatableComponent *)lua_pcallk(*(_QWORD *)(a1 + 16), 1, 1, 0, 0, 0);
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 4)
      return (kaldi::nnet1::UpdatableComponent *)kaldi::nnet1::UpdatableComponent::IsUpdatable(result);
    return (kaldi::nnet1::UpdatableComponent *)kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Error in LuaVMLDO_IsLuaFunctionAvailable");
  }
  else if (lua_type(*(_QWORD **)(a1 + 16), -1) == 6)
  {
    lua_pushcclosure(*(_QWORD *)(a1 + 16), (uint64_t)__LuaVMLDO_CreateLuaLDO, 0);
    lua_pushlightuserdata(*(_QWORD *)(a1 + 16), a3);
    result = (kaldi::nnet1::UpdatableComponent *)lua_pcallk(*(_QWORD *)(a1 + 16), 1, 1, 0, 0, 0);
    if ((_DWORD)result
      || (result = (kaldi::nnet1::UpdatableComponent *)lua_pcallk(*(_QWORD *)(a1 + 16), 1, 0, 0, 0, 0),
          (_DWORD)result))
    {
      if ((_DWORD)result == 4)
        return (kaldi::nnet1::UpdatableComponent *)kaldi::nnet1::UpdatableComponent::IsUpdatable(result);
      return (kaldi::nnet1::UpdatableComponent *)kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Error in LuaVMLDO_RunFunction");
    }
  }
  else
  {
    return (kaldi::nnet1::UpdatableComponent *)kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"szFunctionName");
  }
  return result;
}

uint64_t __LuaVMLDO_CreateLuaLDO(uint64_t *a1)
{
  uint64_t v2;

  v2 = lua_touserdata(a1, 1);
  *(_QWORD *)lua_newuserdata(a1, 8uLL) = v2;
  getMetatableLua(a1, "vocalizer.LDO");
  lua_setmetatable(a1, -2);
  return 1;
}

kaldi::nnet1::UpdatableComponent *LuaVMLDO_RunFunctionReturningPointerToString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  kaldi::nnet1::UpdatableComponent *v8;
  kaldi::nnet1::UpdatableComponent *result;
  uint64_t v10;

  lua_pushcclosure(*(_QWORD *)(a1 + 16), (uint64_t)__LuaVMLDO_ProtectedGetGlobal, 0);
  lua_pushlightuserdata(*(_QWORD *)(a1 + 16), a2);
  v8 = (kaldi::nnet1::UpdatableComponent *)lua_pcallk(*(_QWORD *)(a1 + 16), 1, 1, 0, 0, 0);
  if (!(_DWORD)v8)
  {
    if (lua_type(*(_QWORD **)(a1 + 16), -1) == 6)
    {
      result = __LuaVMLDO_PushStringProtected(*(_QWORD *)(a1 + 16), a3);
      if ((_DWORD)result)
        return result;
      v8 = (kaldi::nnet1::UpdatableComponent *)lua_pcallk(*(_QWORD *)(a1 + 16), 1, 1, 0, 0, 0);
      if ((_DWORD)v8)
      {
        if ((_DWORD)v8 == 4)
          return (kaldi::nnet1::UpdatableComponent *)kaldi::nnet1::UpdatableComponent::IsUpdatable(v8);
        return (kaldi::nnet1::UpdatableComponent *)kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Error in LuaVMLDO_RunFunctionReturningStringPointer");
      }
      if (lua_isstring(*(_QWORD **)(a1 + 16), -1))
      {
        v10 = lua_tolstring(*(_QWORD **)(a1 + 16), -1, 0);
        result = 0;
        *a4 = v10;
        return result;
      }
    }
    return (kaldi::nnet1::UpdatableComponent *)kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"szFunctionName");
  }
  if ((_DWORD)v8 == 4)
    return (kaldi::nnet1::UpdatableComponent *)kaldi::nnet1::UpdatableComponent::IsUpdatable(v8);
  return (kaldi::nnet1::UpdatableComponent *)kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Error in LuaVMLDO_IsLuaFunctionAvailable");
}

kaldi::nnet1::UpdatableComponent *__LuaVMLDO_PushStringProtected(uint64_t a1, uint64_t a2)
{
  kaldi::nnet1::UpdatableComponent *result;

  lua_pushcclosure(a1, (uint64_t)__LuaVMLDO_PushStringProtected_AuxCFunction, 0);
  lua_pushlightuserdata(a1, a2);
  result = (kaldi::nnet1::UpdatableComponent *)lua_pcallk(a1, 1, 1, 0, 0, 0);
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 4)
      return (kaldi::nnet1::UpdatableComponent *)kaldi::nnet1::UpdatableComponent::IsUpdatable(result);
    else
      return (kaldi::nnet1::UpdatableComponent *)kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Error in __LuaVMLDO_PushStringProtected");
  }
  return result;
}

kaldi::nnet1::UpdatableComponent *LuaVMLDO_RunFunctionReturningString(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, char *a5)
{
  kaldi::nnet1::UpdatableComponent *v8;
  char *__s;

  __s = 0;
  v8 = LuaVMLDO_RunFunctionReturningPointerToString(a1, a2, a3, (uint64_t *)&__s);
  if (!(_DWORD)v8)
  {
    if (strlen(__s) + 1 <= a4)
      strcpy(a5, __s);
    else
      kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Buffer too small");
    lua_settop(*(_QWORD *)(a1 + 16), 0xFFFFFFFE);
  }
  return v8;
}

void LuaVMLDO_RunFunctionReturningTable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::nnet1::UpdatableComponent *v6;
  char *v7;
  char *v8;
  _BOOL4 v9;
  int v10;

  lua_pushcclosure(*(_QWORD *)(a1 + 16), (uint64_t)__LuaVMLDO_ProtectedGetGlobal, 0);
  lua_pushlightuserdata(*(_QWORD *)(a1 + 16), a2);
  v6 = (kaldi::nnet1::UpdatableComponent *)lua_pcallk(*(_QWORD *)(a1 + 16), 1, 1, 0, 0, 0);
  if ((_DWORD)v6)
  {
    if ((_DWORD)v6 == 4)
    {
LABEL_3:
      kaldi::nnet1::UpdatableComponent::IsUpdatable(v6);
      return;
    }
    v7 = "Error in LuaVMLDO_IsLuaFunctionAvailable";
  }
  else if (lua_type(*(_QWORD **)(a1 + 16), -1) == 6)
  {
    v6 = (kaldi::nnet1::UpdatableComponent *)lua_pcallk(*(_QWORD *)(a1 + 16), 0, 1, 0, 0, 0);
    if ((_DWORD)v6)
    {
      if ((_DWORD)v6 == 4)
        goto LABEL_3;
      v7 = "Error in LuaVMLDO_RunFunctionReturningTable";
    }
    else if (lua_type(*(_QWORD **)(a1 + 16), -1) == 5)
    {
      lua_pushnil(*(_QWORD *)(a1 + 16));
      while (1)
      {
        if (!lua_next(*(_QWORD **)(a1 + 16), -2))
        {
          lua_settop(*(_QWORD *)(a1 + 16), 0xFFFFFFFE);
          return;
        }
        if (!lua_isstring(*(_QWORD **)(a1 + 16), -2))
        {
          v7 = "key";
          goto LABEL_10;
        }
        v8 = (char *)lua_tolstring(*(_QWORD **)(a1 + 16), -2, 0);
        if (lua_type(*(_QWORD **)(a1 + 16), -1) != 1)
          break;
        v9 = lua_toBOOLean(*(_QWORD **)(a1 + 16), -1) == 1;
        LDOObject_SetBoolAttribute(a3, v8, v9);
        if (v10)
          return;
        lua_settop(*(_QWORD *)(a1 + 16), 0xFFFFFFFE);
      }
      v7 = "value";
    }
    else
    {
      v7 = "tResult";
    }
  }
  else
  {
    v7 = "szFunctionName";
  }
LABEL_10:
  kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)v7);
}

kaldi::nnet1::UpdatableComponent *LuaVMLDO_RunFunctionWithLDOAndTableArguments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::UpdatableComponent *result;

  lua_pushcclosure(*(_QWORD *)(a1 + 16), (uint64_t)__LuaVMLDO_ProtectedGetGlobal, 0);
  lua_pushlightuserdata(*(_QWORD *)(a1 + 16), a2);
  result = (kaldi::nnet1::UpdatableComponent *)lua_pcallk(*(_QWORD *)(a1 + 16), 1, 1, 0, 0, 0);
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 4)
      return (kaldi::nnet1::UpdatableComponent *)kaldi::nnet1::UpdatableComponent::IsUpdatable(result);
    return (kaldi::nnet1::UpdatableComponent *)kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Error in LuaVMLDO_IsLuaFunctionAvailable");
  }
  else if (lua_type(*(_QWORD **)(a1 + 16), -1) == 6)
  {
    lua_pushcclosure(*(_QWORD *)(a1 + 16), (uint64_t)__LuaVMLDO_CreateLuaLDO, 0);
    lua_pushlightuserdata(*(_QWORD *)(a1 + 16), a3);
    result = (kaldi::nnet1::UpdatableComponent *)lua_pcallk(*(_QWORD *)(a1 + 16), 1, 1, 0, 0, 0);
    if ((_DWORD)result
      || (lua_pushcclosure(*(_QWORD *)(a1 + 16), (uint64_t)__LuaVMLDO_PushTableFromLDOObject, 0),
          lua_pushlightuserdata(*(_QWORD *)(a1 + 16), a4),
          result = (kaldi::nnet1::UpdatableComponent *)lua_pcallk(*(_QWORD *)(a1 + 16), 1, 1, 0, 0, 0),
          (_DWORD)result)
      || (result = (kaldi::nnet1::UpdatableComponent *)lua_pcallk(*(_QWORD *)(a1 + 16), 2, 0, 0, 0, 0),
          (_DWORD)result))
    {
      if ((_DWORD)result == 4)
        return (kaldi::nnet1::UpdatableComponent *)kaldi::nnet1::UpdatableComponent::IsUpdatable(result);
      return (kaldi::nnet1::UpdatableComponent *)kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Error in LuaVMLDO_RunFunctionWithLDOAndTableArguments");
    }
  }
  else
  {
    return (kaldi::nnet1::UpdatableComponent *)kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"szFunctionName");
  }
  return result;
}

uint64_t __LuaVMLDO_PushTableFromLDOObject(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  char *v6;

  v2 = lua_touserdata(a1, 1);
  lua_createtable((uint64_t)a1, 0, 0);
  v4 = *(_QWORD *)(v2 + 32);
  v3 = *(_QWORD *)(v2 + 40);
  while (v4 < v3)
  {
    if (*(_DWORD *)(v4 + 8) == 4)
    {
      v5 = *(_DWORD *)(v4 + 12);
      v6 = (char *)fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(*(_QWORD *)v4);
      lua_pushstring(a1, v6);
      lua_pushBOOLean((uint64_t)a1, v5 == 1);
      lua_settable(a1, -3);
    }
    v4 += 32;
  }
  return 1;
}

uint64_t LuaVMLDO_RunFunctionWithStringArgumentReturningTableWithStrings(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::UpdatableComponent *v8;
  uint64_t result;
  char *v10;
  char *v11;
  char *v12;

  lua_pushcclosure(*(_QWORD *)(a1 + 16), (uint64_t)__LuaVMLDO_ProtectedGetGlobal, 0);
  lua_pushlightuserdata(*(_QWORD *)(a1 + 16), a2);
  v8 = (kaldi::nnet1::UpdatableComponent *)lua_pcallk(*(_QWORD *)(a1 + 16), 1, 1, 0, 0, 0);
  if ((_DWORD)v8)
    goto LABEL_2;
  if (lua_type(*(_QWORD **)(a1 + 16), -1) != 6)
  {
    v10 = "szFunctionName";
    return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)v10);
  }
  result = (uint64_t)__LuaVMLDO_PushStringProtected(*(_QWORD *)(a1 + 16), a3);
  if (!(_DWORD)result)
  {
    v8 = (kaldi::nnet1::UpdatableComponent *)lua_pcallk(*(_QWORD *)(a1 + 16), 1, 1, 0, 0, 0);
    if ((_DWORD)v8)
    {
LABEL_2:
      if ((_DWORD)v8 == 4)
        return kaldi::nnet1::UpdatableComponent::IsUpdatable(v8);
      v10 = "Error in LuaVMLDO_RunFunctionWithStringArgumentReturningTableWithStrings";
      return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)v10);
    }
    if (lua_type(*(_QWORD **)(a1 + 16), -1) == 5)
    {
      lua_pushnil(*(_QWORD *)(a1 + 16));
      while (1)
      {
        if (!lua_next(*(_QWORD **)(a1 + 16), -2))
        {
          lua_settop(*(_QWORD *)(a1 + 16), 0xFFFFFFFE);
          return 0;
        }
        if (!lua_isstring(*(_QWORD **)(a1 + 16), -2))
        {
          v10 = "key";
          return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)v10);
        }
        v11 = (char *)lua_tolstring(*(_QWORD **)(a1 + 16), -2, 0);
        if (!lua_isstring(*(_QWORD **)(a1 + 16), -1))
          break;
        v12 = (char *)lua_tolstring(*(_QWORD **)(a1 + 16), -1, 0);
        result = LDOObject_SetStringAttribute(a4, v11, v12);
        if ((_DWORD)result)
          return result;
        lua_settop(*(_QWORD *)(a1 + 16), 0xFFFFFFFE);
      }
      v10 = "value";
    }
    else
    {
      v10 = "tResult";
    }
    return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)v10);
  }
  return result;
}

uint64_t PNEW_LuaVMLDO_Con(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t **a6)
{
  uint64_t *v12;
  uint64_t result;
  unsigned int v14;

  v14 = 0;
  v12 = (uint64_t *)OOCAllocator_Malloc(a1, 72, &v14);
  result = v14;
  if (!v14)
  {
    result = LuaVMLDO_Con(v12, a2, a3, a4, a5);
    v14 = result;
    if ((_DWORD)result)
    {
      OOCAllocator_Free(a1, (uint64_t)v12);
      *a6 = 0;
      return v14;
    }
    else
    {
      *a6 = v12;
    }
  }
  return result;
}

kaldi::nnet1::UpdatableComponent *__LuaVMLDO_OpenLib(uint64_t a1, uint64_t a2)
{
  kaldi::nnet1::UpdatableComponent *result;

  lua_pushcclosure(*(_QWORD *)(a1 + 16), a2, 0);
  result = (kaldi::nnet1::UpdatableComponent *)lua_pcallk(*(_QWORD *)(a1 + 16), 0, 0, 0, 0, 0);
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 4)
      return (kaldi::nnet1::UpdatableComponent *)kaldi::nnet1::UpdatableComponent::IsUpdatable(result);
    else
      return (kaldi::nnet1::UpdatableComponent *)kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"Error in __LuaVMLDO_OpenLib");
  }
  return result;
}

uint64_t __LuaVMLDO_PushStringProtected_AuxCFunction(_QWORD *a1)
{
  char *v2;

  v2 = (char *)lua_touserdata(a1, 1);
  lua_pushstring(a1, v2);
  return 1;
}

uint64_t LuaVMUtil_pushLuaStringAndDestroy(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  if (a2)
  {
    v4 = (char *)fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(a2);
    lua_pushstring(a1, v4);
    v5 = LDOString_BorrowAllocator(a2);
    OOC_PlacementDeleteObject(v5, a2);
  }
  return 0;
}

uint64_t LuaVMUtil_u32_index_to_luainteger(int a1)
{
  return (a1 + 1);
}

uint64_t LuaVMUtil_u32_to_luainteger(uint64_t result)
{
  return result;
}

uint64_t LuaVMUtil_s32_to_luainteger(uint64_t result)
{
  return (int)result;
}

uint64_t LuaVMUtil_luainteger_to_u32_index(_QWORD *a1, int a2, _DWORD *a3)
{
  int v6;

  if (!lua_isinteger(a1, a2))
    return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"index");
  v6 = lua_tointegerx(a1, a2, 0);
  if (v6 <= 0)
    return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"index");
  if (a3)
    *a3 = v6 - 1;
  return 0;
}

uint64_t LuaVMUtil_luainteger_to_u32(_QWORD *a1, int a2, _DWORD *a3)
{
  int v6;

  if (!lua_isinteger(a1, a2))
    return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"index");
  v6 = lua_tointegerx(a1, a2, 0);
  if (v6 < 0)
    return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"index");
  if (a3)
    *a3 = v6;
  return 0;
}

uint64_t LuaVMUtil_luainteger_to_s32(_QWORD *a1, int a2, _DWORD *a3)
{
  if (!lua_isinteger(a1, a2))
    return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"index");
  if (a3)
    *a3 = lua_tointegerx(a1, a2, 0);
  return 0;
}

uint64_t LuaVMUtil_luaBOOLean_to_lhBOOL(_QWORD *a1, int a2, _DWORD *a3)
{
  if (lua_type(a1, a2) != 1)
    return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"index");
  if (a3)
    *a3 = lua_toBOOLean(a1, a2) == 1;
  return 0;
}

BOOL LuaVMUtil_lhBOOL_to_luaBOOLean(int a1)
{
  return a1 == 1;
}

uint64_t LuaVMUtil_luastring_to_string(_QWORD *a1, int a2, uint64_t *a3)
{
  if (!lua_isstring(a1, a2))
    return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"index");
  if (a3)
    *a3 = lua_tolstring(a1, a2, 0);
  return 0;
}

uint64_t LuaVMUtil_luatable_to_u32array(_QWORD *a1, int a2, uint64_t a3, uint64_t *a4, unsigned int *a5)
{
  int v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;

  v16 = 0;
  *a5 = 0;
  *a4 = 0;
  lua_len(a1, a2);
  v10 = lua_gettop((uint64_t)a1);
  result = LuaVMUtil_luainteger_to_u32(a1, v10, a5);
  v17 = result;
  if (!(_DWORD)result)
  {
    lua_settop((uint64_t)a1, 0xFFFFFFFE);
    v13 = *a5;
    if (!(_DWORD)v13)
      return 0;
    v12 = OOCAllocator_Calloc(a3, v13, 4, &v17);
    *a4 = v12;
    result = v17;
    if (v17)
      goto LABEL_3;
    lua_pushnil((uint64_t)a1);
    if (lua_next(a1, a2))
    {
      v14 = 0;
      while (1)
      {
        v15 = lua_gettop((uint64_t)a1);
        result = LuaVMUtil_luainteger_to_u32(a1, v15, &v16);
        v17 = result;
        if ((_DWORD)result)
          break;
        *(_DWORD *)(*a4 + 4 * v14++) = v16;
        lua_settop((uint64_t)a1, 0xFFFFFFFE);
        if (!lua_next(a1, a2))
          goto LABEL_11;
      }
    }
    else
    {
LABEL_11:
      lua_settop((uint64_t)a1, 0xFFFFFFFE);
      result = v17;
      if (!v17)
        return result;
    }
  }
  v12 = *a4;
LABEL_3:
  if (v12)
  {
    OOCAllocator_Free(a3, v12);
    *a4 = 0;
    return v17;
  }
  return result;
}

uint64_t LuaVMUtil_error(_QWORD *a1, char *a2)
{
  if (!a2)
    a2 = "Unknown Lua error";
  lua_pushstring(a1, a2);
  log_LuaLog(a1);
  return lua_error(a1);
}

uint64_t LuaVMUtil_RegisterRSRC(_QWORD *a1)
{
  if (lua_type(a1, 1) == 2)
    lua_setfield(a1, -1001000, "LUA_RSRC_ST");
  return 0;
}

uint64_t LuaVMUtil_GetObjc(_QWORD *a1)
{
  uint64_t result;

  if (lua_getfield(a1, -1001000, "LUA_RSRC_ST") != 2)
    return 0;
  result = lua_touserdata(a1, -1);
  if (result)
    return *(_QWORD *)(result + 48);
  return result;
}

uint64_t LuaVMUtil_GetRsrc(_QWORD *a1)
{
  uint64_t result;

  if (lua_getfield(a1, -1001000, "LUA_RSRC_ST") != 2)
    return 0;
  result = lua_touserdata(a1, -1);
  if (!result)
    return 0;
  return result;
}

uint64_t luaopen_luautf8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _BYTE __dst[400];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  memcpy(__dst, &off_1EA93EA70, sizeof(__dst));
  luaL_checkversion_(a1, 136, 503.0, v2, v3, v4, v5, v6, v7, v14);
  lua_createtable((uint64_t)a1, 0, 24);
  luaL_setfuncs(a1, (uint64_t)__dst, 0, v8, v9, v10, v11, v12);
  lua_pushlstring(a1, "[", 0xEuLL);
  lua_setfield(a1, -2, "charpattern");
  lua_setglobal(a1, "luautf8");
  return 1;
}

uint64_t Lutf8_offset(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int64_t v22;

  v22 = 0;
  v2 = luaL_checklstring(a1, 1, &v22);
  v3 = luaL_checkinteger(a1, 2);
  if (v3 < 0)
    v4 = v22 + 1;
  else
    v4 = 1;
  v5 = luaL_optinteger(a1, 3, v4);
  v12 = v5;
  if (v5 < 0)
  {
    v12 = 0;
    if (v22 < (unint64_t)-v5)
    {
LABEL_9:
      luaL_argerror(a1, 3);
      goto LABEL_10;
    }
    v12 = v5 + v22 + 1;
  }
  v13 = v12 - 1;
  if (v12 < 1)
    goto LABEL_9;
  --v12;
  if (v13 > v22)
    goto LABEL_9;
LABEL_10:
  if (!v3)
  {
    if (v12 >= 1)
    {
      while ((*(_BYTE *)(v2 + v12) & 0xC0) == 0x80)
      {
        if (v12-- <= 1)
        {
          v12 = 0;
          goto LABEL_36;
        }
      }
    }
    goto LABEL_36;
  }
  if ((*(_BYTE *)(v2 + v12) & 0xC0) == 0x80)
    return luaL_error(a1, "initial position is a continuation byte", v6, v7, v8, v9, v10, v11, v21);
  if ((v3 & 0x8000000000000000) == 0)
  {
    v16 = v3 - 1;
    if ((unint64_t)v3 < 2 || v12 >= v22)
    {
      v18 = v3 - 1;
    }
    else
    {
      do
      {
        do
          v17 = *(_BYTE *)(v2 + 1 + v12++);
        while ((v17 & 0xC0) == 0x80);
        v18 = v16 - 1;
        if (v16 < 2)
          break;
        --v16;
      }
      while (v12 < v22);
    }
    goto LABEL_33;
  }
  if (v12 >= 1)
  {
    while (2)
    {
      v19 = v12;
      do
      {
        v12 = v19 - 1;
        if (v19 <= 1)
        {
          v12 = 0;
          if (v3 != -1)
            goto LABEL_34;
          goto LABEL_36;
        }
        v20 = *(_BYTE *)(v2 - 1 + v19--) & 0xC0;
      }
      while (v20 == 128);
      v18 = v3 + 1;
      if (v3 <= -2)
      {
        ++v3;
        if (v12 + 1 > 1)
          continue;
      }
      break;
    }
LABEL_33:
    if (v18)
      goto LABEL_34;
LABEL_36:
    lua_pushinteger((uint64_t)a1, v12 + 1);
    return 1;
  }
LABEL_34:
  lua_pushnil((uint64_t)a1);
  return 1;
}

uint64_t Lutf8_codes(_QWORD *a1)
{
  int v2;
  uint64_t (*v3)(_QWORD *);

  v2 = lua_toBOOLean(a1, 2);
  luaL_checklstring(a1, 1, 0);
  if (v2)
    v3 = iter_auxlax;
  else
    v3 = iter_auxstrict;
  lua_pushcclosure((uint64_t)a1, (uint64_t)v3, 0);
  lua_pushvalue(a1, 1);
  lua_pushinteger((uint64_t)a1, 0);
  return 3;
}

uint64_t Lutf8_codepoint(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unsigned __int8 *v21;
  uint64_t v24;
  unint64_t v25;

  v25 = 0;
  v2 = luaL_checklstring(a1, 1, &v25);
  v3 = v25;
  v4 = luaL_optinteger(a1, 2, 1);
  if (v3 >= -v4)
    v5 = v3 + v4 + 1;
  else
    v5 = 0;
  if (v4 < 0)
    v6 = v5;
  else
    v6 = v4;
  v7 = luaL_optinteger(a1, 3, v6);
  if (v3 >= -v7)
    v8 = v3 + v7 + 1;
  else
    v8 = 0;
  if (v7 < 0)
    v9 = v8;
  else
    v9 = v7;
  v16 = lua_toBOOLean(a1, 4);
  if (v6 <= 0)
    luaL_argerror(a1, 2);
  if (v9 > (uint64_t)v3)
    luaL_argerror(a1, 3);
  v17 = v9 - v6;
  if (v9 < v6)
    return 0;
  if (v17 < 0x7FFFFFFF)
  {
    luaL_checkstack(a1, v17 + 1, (uint64_t)"string slice too long", v11, v12, v13, v14, v15, v24);
    LODWORD(v18) = 0;
    v20 = v2 + v9;
    v21 = (unsigned __int8 *)(v6 + v2 - 1);
    while (1)
    {
      HIDWORD(v24) = 0;
      v21 = utf8_safe_decode(a1, (char *)v21, (unsigned int *)&v24 + 1);
      if (!v16 && (HIWORD(v24) > 0x10u || (HIDWORD(v24) & 0xFFFFF800) == 55296))
        break;
      lua_pushinteger((uint64_t)a1, HIDWORD(v24));
      v18 = (v18 + 1);
      if ((unint64_t)v21 >= v20)
        return v18;
    }
    v19 = "invalid UTF-8 code";
  }
  else
  {
    v19 = "string slice too long";
  }
  return luaL_error(a1, v19, v10, v11, v12, v13, v14, v15, v24);
}

uint64_t Lutf8_len(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unsigned __int8 *v19;
  BOOL v20;
  unsigned int v22;
  unint64_t v23;

  v23 = 0;
  v2 = luaL_checklstring(a1, 1, &v23);
  v3 = luaL_optinteger(a1, 2, 1);
  if (v23 >= -v3)
    v4 = v3 + v23 + 1;
  else
    v4 = 0;
  if (v3 < 0)
    v5 = v4;
  else
    v5 = v3;
  v6 = luaL_optinteger(a1, 3, -1);
  if (v23 >= -v6)
    v7 = v6 + v23 + 1;
  else
    v7 = 0;
  if (v6 < 0)
    v8 = v7;
  else
    v8 = v6;
  v9 = lua_toBOOLean(a1, 4);
  v10 = v5 - 1;
  if (v5 < 1 || (v11 = v23, --v5, v10 > (uint64_t)v23))
  {
    luaL_argerror(a1, 2);
    v11 = v23;
    v10 = v5;
  }
  v12 = v8 - 1;
  if (v8 > v11)
    luaL_argerror(a1, 3);
  v13 = (char *)(v2 + v10);
  v14 = v2 + v12 + 1;
  if ((unint64_t)v13 < v14)
  {
    v15 = 0;
    while (1)
    {
      if (v9)
      {
        v16 = v13 + 1;
        do
        {
          v17 = v16;
          v18 = (unint64_t)(v16 - 1);
          if ((unint64_t)(v16 - 1) >= v14)
            break;
          ++v16;
        }
        while ((*v17 & 0xC0) == 0x80);
        if (v18 >= v14)
          v13 = (char *)v14;
        else
          v13 = v17;
      }
      else
      {
        v22 = 0;
        v19 = utf8_decode_0(v13, &v22, 1);
        if (!v19 || (HIWORD(v22) <= 0x10u ? (v20 = (v22 & 0xFFFFF800) == 55296) : (v20 = 1), v20))
        {
          lua_pushnil((uint64_t)a1);
          lua_pushinteger((uint64_t)a1, (uint64_t)&v13[-v2 + 1]);
          return 2;
        }
        v13 = (char *)v19;
      }
      ++v15;
      if ((unint64_t)v13 >= v14)
        goto LABEL_36;
    }
  }
  v15 = 0;
LABEL_36:
  lua_pushinteger((uint64_t)a1, v15);
  return 1;
}

uint64_t Lutf8_sub(_QWORD *a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v6 = 0;
  v2 = luaL_checklstring(a1, 1, &v6);
  v3 = v2 + v6;
  v6 = luaL_checkinteger(a1, 2);
  v5 = luaL_optinteger(a1, 3, -1);
  if (utf8_range(v2, v3, &v6, &v5))
    lua_pushlstring(a1, (char *)(v2 + v6), v5 - v6);
  else
    lua_pushstring(a1, &byte_1DEBD87CE);
  return 1;
}

uint64_t Lutf8_reverse()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  char *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  void *v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  _OWORD v32[514];
  uint64_t v33;

  v0 = (_QWORD *)MEMORY[0x1E0C80A78]();
  v33 = *MEMORY[0x1E0C80C00];
  memset(v32, 0, 512);
  v31 = 0;
  v1 = luaL_checklstring(v0, 1, &v31);
  v2 = v31;
  v3 = (char *)(v1 + v31);
  v4 = lua_toBOOLean(v0, 2);
  luaL_buffinit((uint64_t)v0, (uint64_t)v32);
  if (v4)
  {
    if (v2 >= 1)
    {
      do
      {
        v10 = v3 - 1;
        do
        {
          v11 = v10;
          v12 = (unint64_t)(v10 + 1);
          if ((unint64_t)(v10 + 1) <= v1)
            break;
          --v10;
        }
        while ((*v11 & 0xC0) == 0x80);
        if (v12 <= v1)
          v13 = (void *)v1;
        else
          v13 = v11;
        luaL_addlstring((uint64_t)v32, v13, v3 - (_BYTE *)v13, v5, v6, v7, v8, v9);
        v3 = (char *)v13;
      }
      while (v1 < (unint64_t)v13);
    }
    goto LABEL_26;
  }
  if (v2 < 1)
  {
LABEL_26:
    luaL_pushresult((uint64_t)v32);
    return 1;
  }
  v14 = v3;
  while (1)
  {
    LODWORD(v31) = 0;
    v15 = v3 - 1;
    do
    {
      v16 = v15;
      v17 = (unint64_t)(v15 + 1);
      if ((unint64_t)(v15 + 1) <= v1)
        break;
      --v15;
    }
    while ((*v16 & 0xC0) == 0x80);
    v3 = v17 <= v1 ? (char *)v1 : v16;
    utf8_safe_decode(v0, v3, (unsigned int *)&v31);
    if (WORD1(v31) > 0x10u || (v31 & 0xFFFFF800) == 55296)
      return luaL_error(v0, "invalid UTF-8 code", v31, v18, v19, v20, v21, v22, v30);
    if (!find_in_range((uint64_t)&compose_table, 0x13FuLL, v31))
    {
      luaL_addlstring((uint64_t)v32, v3, v14 - v3, v24, v25, v26, v27, v28);
      v14 = v3;
    }
    if (v1 >= (unint64_t)v3)
      goto LABEL_26;
  }
}

uint64_t Lutf8_lower()
{
  _QWORD *v0;
  int v1;
  uint64_t v2;
  unsigned int v3;
  char *v4;
  uint64_t v5;
  char *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _OWORD v16[514];
  uint64_t v17;

  v0 = (_QWORD *)MEMORY[0x1E0C80A78]();
  v17 = *MEMORY[0x1E0C80C00];
  v1 = lua_type(v0, 1);
  if (v1 == 4)
  {
    memset(v16, 0, 512);
    v15 = 0;
    v4 = (char *)lua_tolstring(v0, 1, &v15);
    v5 = v15;
    luaL_buffinit((uint64_t)v0, (uint64_t)v16);
    if (v5 >= 1)
    {
      v6 = &v4[v5];
      do
      {
        LODWORD(v15) = 0;
        v4 = (char *)utf8_safe_decode(v0, v4, (unsigned int *)&v15);
        v7 = convert_char((uint64_t)&tolower_table, 0xB2uLL, v15);
        add_utf8char((uint64_t)v16, v7, v8, v9, v10, v11, v12, v13);
      }
      while (v4 < v6);
    }
    luaL_pushresult((uint64_t)v16);
    return 1;
  }
  if (v1 == 3)
  {
    v2 = lua_tointegerx(v0, 1, 0);
    v3 = convert_char((uint64_t)&tolower_table, 0xB2uLL, v2);
    lua_pushinteger((uint64_t)v0, v3);
    return 1;
  }
  return typeerror_0(v0);
}

uint64_t Lutf8_upper()
{
  _QWORD *v0;
  int v1;
  uint64_t v2;
  unsigned int v3;
  char *v4;
  uint64_t v5;
  char *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _OWORD v16[514];
  uint64_t v17;

  v0 = (_QWORD *)MEMORY[0x1E0C80A78]();
  v17 = *MEMORY[0x1E0C80C00];
  v1 = lua_type(v0, 1);
  if (v1 == 4)
  {
    memset(v16, 0, 512);
    v15 = 0;
    v4 = (char *)lua_tolstring(v0, 1, &v15);
    v5 = v15;
    luaL_buffinit((uint64_t)v0, (uint64_t)v16);
    if (v5 >= 1)
    {
      v6 = &v4[v5];
      do
      {
        LODWORD(v15) = 0;
        v4 = (char *)utf8_safe_decode(v0, v4, (unsigned int *)&v15);
        v7 = convert_char((uint64_t)&toupper_table, 0xC1uLL, v15);
        add_utf8char((uint64_t)v16, v7, v8, v9, v10, v11, v12, v13);
      }
      while (v4 < v6);
    }
    luaL_pushresult((uint64_t)v16);
    return 1;
  }
  if (v1 == 3)
  {
    v2 = lua_tointegerx(v0, 1, 0);
    v3 = convert_char((uint64_t)&toupper_table, 0xC1uLL, v2);
    lua_pushinteger((uint64_t)v0, v3);
    return 1;
  }
  return typeerror_0(v0);
}

uint64_t Lutf8_title()
{
  _QWORD *v0;
  int v1;
  uint64_t v2;
  unsigned int v3;
  char *v4;
  uint64_t v5;
  char *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _OWORD v16[514];
  uint64_t v17;

  v0 = (_QWORD *)MEMORY[0x1E0C80A78]();
  v17 = *MEMORY[0x1E0C80C00];
  v1 = lua_type(v0, 1);
  if (v1 == 4)
  {
    memset(v16, 0, 512);
    v15 = 0;
    v4 = (char *)lua_tolstring(v0, 1, &v15);
    v5 = v15;
    luaL_buffinit((uint64_t)v0, (uint64_t)v16);
    if (v5 >= 1)
    {
      v6 = &v4[v5];
      do
      {
        LODWORD(v15) = 0;
        v4 = (char *)utf8_safe_decode(v0, v4, (unsigned int *)&v15);
        v7 = convert_char((uint64_t)&totitle_table, 0xC3uLL, v15);
        add_utf8char((uint64_t)v16, v7, v8, v9, v10, v11, v12, v13);
      }
      while (v4 < v6);
    }
    luaL_pushresult((uint64_t)v16);
    return 1;
  }
  if (v1 == 3)
  {
    v2 = lua_tointegerx(v0, 1, 0);
    v3 = convert_char((uint64_t)&totitle_table, 0xC3uLL, v2);
    lua_pushinteger((uint64_t)v0, v3);
    return 1;
  }
  return typeerror_0(v0);
}

uint64_t Lutf8_fold()
{
  _QWORD *v0;
  int v1;
  uint64_t v2;
  unsigned int v3;
  char *v4;
  uint64_t v5;
  char *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _OWORD v16[514];
  uint64_t v17;

  v0 = (_QWORD *)MEMORY[0x1E0C80A78]();
  v17 = *MEMORY[0x1E0C80C00];
  v1 = lua_type(v0, 1);
  if (v1 == 4)
  {
    memset(v16, 0, 512);
    v15 = 0;
    v4 = (char *)lua_tolstring(v0, 1, &v15);
    v5 = v15;
    luaL_buffinit((uint64_t)v0, (uint64_t)v16);
    if (v5 >= 1)
    {
      v6 = &v4[v5];
      do
      {
        LODWORD(v15) = 0;
        v4 = (char *)utf8_safe_decode(v0, v4, (unsigned int *)&v15);
        v7 = convert_char((uint64_t)&tofold_table, 0xC6uLL, v15);
        add_utf8char((uint64_t)v16, v7, v8, v9, v10, v11, v12, v13);
      }
      while (v4 < v6);
    }
    luaL_pushresult((uint64_t)v16);
    return 1;
  }
  if (v1 == 3)
  {
    v2 = lua_tointegerx(v0, 1, 0);
    v3 = convert_char((uint64_t)&tofold_table, 0xC6uLL, v2);
    lua_pushinteger((uint64_t)v0, v3);
    return 1;
  }
  return typeerror_0(v0);
}

uint64_t Lutf8_byte(_QWORD *a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  v10 = 0;
  v2 = luaL_checklstring(a1, 1, &v10);
  v3 = v2 + v10;
  v10 = luaL_optinteger(a1, 2, 1);
  v9 = luaL_optinteger(a1, 3, v10);
  if (!utf8_range(v2, v3, &v10, &v9) || v10 >= v9)
    return 0;
  LODWORD(v4) = 0;
  v5 = v2 + v9;
  v6 = (unsigned __int8 *)(v2 + v10);
  do
  {
    v8 = 0;
    v6 = utf8_safe_decode(a1, (char *)v6, &v8);
    lua_pushinteger((uint64_t)a1, v8);
    v4 = (v4 + 1);
  }
  while ((unint64_t)v6 < v5);
  return v4;
}

uint64_t Lutf8_char()
{
  _QWORD *v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _OWORD v12[514];
  uint64_t v13;

  v0 = (_QWORD *)MEMORY[0x1E0C80A78]();
  v13 = *MEMORY[0x1E0C80C00];
  v1 = lua_gettop((uint64_t)v0);
  memset(v12, 0, 512);
  luaL_buffinit((uint64_t)v0, (uint64_t)v12);
  if (v1 >= 1)
  {
    LODWORD(v2) = 0;
    do
    {
      v2 = (v2 + 1);
      v3 = luaL_checkinteger(v0, v2);
      v10 = v3;
      if (v3 >= 1114112)
        luaL_argerror(v0, v2);
      add_utf8char((uint64_t)v12, v10, v4, v5, v6, v7, v8, v9);
    }
    while (v1 != (_DWORD)v2);
  }
  luaL_pushresult((uint64_t)v12);
  return 1;
}

uint64_t Lutf8_escape()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v19;
  _OWORD v20[514];
  uint64_t v21;

  v0 = (_QWORD *)MEMORY[0x1E0C80A78]();
  v21 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v20[0] = 0;
  v1 = (char *)luaL_checklstring(v0, 1, v20);
  v2 = *(_QWORD *)&v20[0];
  memset(v20, 0, 512);
  luaL_buffinit((uint64_t)v0, (uint64_t)v20);
  if (v2 < 1)
    goto LABEL_40;
  v3 = (unint64_t)&v1[v2];
  do
  {
    v19 = 0;
    v4 = utf8_safe_decode(v0, v1, &v19);
    v1 = (char *)v4;
    v11 = v19;
    if (v19 != 37)
      goto LABEL_26;
    v12 = 0;
    v13 = (char)*v4;
    v14 = *v4;
    if (v13 > 84)
    {
      if (v13 <= 116)
      {
        if (v13 != 85)
        {
          if (v13 != 88)
            goto LABEL_38;
LABEL_35:
          v12 = 1;
        }
LABEL_36:
        if ((unint64_t)(v4 + 1) >= v3)
        {
LABEL_38:
          v1 = (char *)utf8_safe_decode(v0, (char *)v4, &v19);
          v11 = v19;
          goto LABEL_26;
        }
        v14 = v4[1];
        v1 = (char *)(v4 + 1);
        goto LABEL_6;
      }
      if (v13 == 117)
        goto LABEL_36;
      if (v13 != 123)
      {
        if (v13 != 120)
          goto LABEL_38;
        goto LABEL_35;
      }
    }
    else if ((v13 - 48) >= 0xA)
    {
      goto LABEL_38;
    }
LABEL_6:
    if (v14 == 123)
      ++v1;
    if ((unint64_t)v1 >= v3)
    {
      v11 = 0;
      goto LABEL_25;
    }
    v11 = 0;
    if (v12)
      v15 = 16;
    else
      v15 = 10;
    while (1)
    {
      v16 = *v1;
      v17 = v16 - 48;
      if ((v16 - 48) > 9)
        break;
LABEL_22:
      v11 = v17 + v11 * v15;
      if ((unint64_t)++v1 >= v3)
        goto LABEL_25;
    }
    if (v12 && (v16 - 65) <= 5)
    {
      v17 = v16 - 55;
      goto LABEL_22;
    }
    if (v12 && (v16 - 97) <= 5)
    {
      v17 = v16 - 87;
      goto LABEL_22;
    }
    if (v14 != 123)
      goto LABEL_25;
    if (v16 != 125)
    {
      luaL_error(v0, "invalid escape '%c'", v5, v6, v7, v8, v9, v10, *v1);
      v17 = v16;
      goto LABEL_22;
    }
    ++v1;
LABEL_25:
    v19 = v11;
LABEL_26:
    add_utf8char((uint64_t)v20, v11, v5, v6, v7, v8, v9, v10);
  }
  while ((unint64_t)v1 < v3);
LABEL_40:
  luaL_pushresult((uint64_t)v20);
  return 1;
}

uint64_t Lutf8_insert()
{
  _QWORD *v0;
  const void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _BYTE *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v25;
  _OWORD v26[514];
  uint64_t v27;

  v0 = (_QWORD *)MEMORY[0x1E0C80A78]();
  v27 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v26[0] = 0;
  v1 = (const void *)luaL_checklstring(v0, 1, v26);
  v2 = *(_QWORD *)&v26[0];
  v3 = (unint64_t)v1 + *(_QWORD *)&v26[0];
  v25 = 0;
  memset(v26, 0, 512);
  v4 = 2;
  if (lua_type(v0, 2) != 3)
  {
    v7 = (_BYTE *)v3;
    goto LABEL_10;
  }
  v5 = lua_tointegerx(v0, 2, 0);
  if (v5)
  {
    if (v5 < 0)
      v6 = v2 + 1;
    else
      v6 = 1;
    v7 = utf8_offset((unint64_t)v1, v3, v6, v5 + (~v5 >> 31));
    if (v7)
      goto LABEL_8;
  }
  else
  {
    v7 = (_BYTE *)v3;
    if (v3)
      goto LABEL_8;
  }
  luaL_argerror(v0, 2);
LABEL_8:
  v4 = 3;
LABEL_10:
  v8 = (const void *)luaL_checklstring(v0, v4, &v25);
  luaL_buffinit((uint64_t)v0, (uint64_t)v26);
  luaL_addlstring((uint64_t)v26, v1, v7 - (_BYTE *)v1, v9, v10, v11, v12, v13);
  luaL_addlstring((uint64_t)v26, v8, v25, v14, v15, v16, v17, v18);
  luaL_addlstring((uint64_t)v26, v7, v3 - (_QWORD)v7, v19, v20, v21, v22, v23);
  luaL_pushresult((uint64_t)v26);
  return 1;
}

uint64_t Lutf8_remove()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  _OWORD v17[514];
  uint64_t v18;

  v0 = (_QWORD *)MEMORY[0x1E0C80A78]();
  v18 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v17[0] = 0;
  v1 = (char *)luaL_checklstring(v0, 1, v17);
  v2 = *(_QWORD *)&v17[0];
  v3 = (unint64_t)&v1[*(_QWORD *)&v17[0]];
  v16 = luaL_optinteger(v0, 2, -1);
  v15 = luaL_optinteger(v0, 3, -1);
  if (utf8_range((unint64_t)v1, v3, (uint64_t *)&v16, &v15))
  {
    memset(v17, 0, 512);
    luaL_buffinit((uint64_t)v0, (uint64_t)v17);
    luaL_addlstring((uint64_t)v17, v1, v16, v4, v5, v6, v7, v8);
    luaL_addlstring((uint64_t)v17, &v1[v15], v2 - v15, v9, v10, v11, v12, v13);
    luaL_pushresult((uint64_t)v17);
  }
  else
  {
    lua_settop((uint64_t)v0, 1u);
  }
  return 1;
}

uint64_t Lutf8_charpos(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;

  v15 = 0;
  v2 = luaL_checklstring(a1, 1, &v15);
  v3 = v15;
  v4 = v2 + v15;
  if ((int)lua_type(a1, 3) <= 0)
  {
    v13 = luaL_optinteger(a1, 2, 0);
    if (v13 < 0)
      v12 = v3 + 1;
    else
      v12 = 1;
    v8 = v13 - (v13 > 0);
    v9 = (uint64_t)a1;
    v10 = v2;
    v11 = v4;
  }
  else
  {
    v5 = luaL_optinteger(a1, 2, 1);
    if (v3 >= -v5)
      v6 = v3 + v5 + 1;
    else
      v6 = 0;
    if (v5 >= 0)
      v6 = v5;
    if (v6 <= 1)
      v7 = 1;
    else
      v7 = v6;
    v8 = luaL_checkinteger(a1, 3);
    v9 = (uint64_t)a1;
    v10 = v2;
    v11 = v4;
    v12 = v7;
  }
  return push_offset(v9, v10, v11, v12, v8);
}

uint64_t Lutf8_next(_QWORD *a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v8;
  unint64_t v10;

  v10 = 0;
  v2 = luaL_checklstring(a1, 1, &v10);
  v3 = v10;
  v4 = luaL_optinteger(a1, 2, 1);
  if (v3 >= -v4)
    v5 = v3 + v4 + 1;
  else
    v5 = 0;
  if (v4 < 0)
    v6 = v5;
  else
    v6 = v4;
  v7 = (int)lua_type(a1, 2) > 0;
  v8 = luaL_optinteger(a1, 3, v7);
  return push_offset((uint64_t)a1, v2, v2 + v3, v6, v8);
}

uint64_t Lutf8_width(_QWORD *a1)
{
  int v2;
  _BOOL4 v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  unint64_t v11;
  int v12;
  int v13;
  unsigned int v15;
  uint64_t v16;

  v2 = lua_type(a1, 1);
  v3 = lua_toBOOLean(a1, 2) == 0;
  v4 = luaL_optinteger(a1, 3, 0);
  if (v2 == 4)
  {
    v16 = 0;
    v8 = lua_tolstring(a1, 1, &v16);
    if (v16 < 1)
    {
      v7 = 0;
    }
    else
    {
      v9 = (unsigned __int8 *)v8;
      v10 = 0;
      v11 = v8 + v16;
      do
      {
        v15 = 0;
        v9 = utf8_safe_decode(a1, (char *)v9, &v15);
        v12 = utf8_width(v15, v3);
        if (v12)
          v13 = v12;
        else
          v13 = v4;
        v10 += v13;
      }
      while ((unint64_t)v9 < v11);
      v7 = v10;
    }
  }
  else
  {
    if (v2 != 3)
      return typeerror_0(a1);
    v5 = lua_tointegerx(a1, 1, 0);
    v6 = utf8_width(v5, v3);
    if (v6)
      v7 = v6;
    else
      v7 = v4;
  }
  lua_pushinteger((uint64_t)a1, v7);
  return 1;
}

uint64_t Lutf8_widthindex(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  _BOOL4 v6;
  int v7;
  char *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  BOOL v12;
  unsigned int v14;
  uint64_t v15;

  v15 = 0;
  v2 = 1;
  v3 = (char *)luaL_checklstring(a1, 1, &v15);
  v4 = v15;
  v5 = luaL_checkinteger(a1, 2);
  v6 = lua_toBOOLean(a1, 3) == 0;
  v7 = luaL_optinteger(a1, 4, 0);
  if (v4 < 1)
  {
LABEL_8:
    lua_pushinteger((uint64_t)a1, v2);
    return 1;
  }
  else
  {
    v8 = &v3[v4];
    v9 = v7;
    v2 = 1;
    while (1)
    {
      v14 = 0;
      v3 = (char *)utf8_safe_decode(a1, v3, &v14);
      v10 = utf8_width(v14, v6);
      v11 = v10 ? v10 : v9;
      v12 = __OFSUB__(v5, (_DWORD)v11);
      v5 -= v11;
      if ((v5 < 0) ^ v12 | (v5 == 0))
        break;
      ++v2;
      if (v3 >= v8)
        goto LABEL_8;
    }
    lua_pushinteger((uint64_t)a1, v2);
    lua_pushinteger((uint64_t)a1, v11 + v5);
    lua_pushinteger((uint64_t)a1, v11);
    return 3;
  }
}

uint64_t Lutf8_ncasecmp(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v6;
  char *v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  uint64_t v15;

  v15 = 0;
  v2 = (char *)luaL_checklstring(a1, 1, &v15);
  v3 = v15;
  v15 = 0;
  v4 = luaL_checklstring(a1, 2, &v15);
  if (v3 <= 0 && v15 < 1)
  {
LABEL_11:
    v11 = (uint64_t)a1;
    v12 = 0;
  }
  else
  {
    v6 = (unsigned __int8 *)v4;
    v7 = &v2[v3];
    v8 = (unsigned __int8 *)(v4 + v15);
    while (1)
    {
      v14 = 0;
      LODWORD(v15) = 0;
      if (v2 == v7)
      {
        v9 = 0;
        v10 = 1;
        v14 = 1;
        goto LABEL_14;
      }
      if (v6 == v8)
        break;
      v2 = (char *)utf8_safe_decode(a1, v2, (unsigned int *)&v15);
      v6 = utf8_safe_decode(a1, (char *)v6, &v14);
      v9 = convert_char((uint64_t)&tofold_table, 0xC6uLL, v15);
      LODWORD(v15) = v9;
      v10 = convert_char((uint64_t)&tofold_table, 0xC6uLL, v14);
      v14 = v10;
      if (v9 != v10)
        goto LABEL_14;
      if (v2 >= v7 && v6 >= v8)
        goto LABEL_11;
    }
    v10 = 0;
    v9 = 1;
    LODWORD(v15) = 1;
LABEL_14:
    if (v9 > v10)
      v12 = 1;
    else
      v12 = -1;
    v11 = (uint64_t)a1;
  }
  lua_pushinteger(v11, v12);
  return 1;
}

uint64_t Lutf8_find(_QWORD *a1)
{
  return find_aux(a1, 1);
}

uint64_t Lutf8_gmatch(_QWORD *a1)
{
  luaL_checklstring(a1, 1, 0);
  luaL_checklstring(a1, 2, 0);
  lua_settop((uint64_t)a1, 2u);
  lua_pushinteger((uint64_t)a1, 0);
  lua_pushcclosure((uint64_t)a1, (uint64_t)gmatch_aux_0, 3);
  return 1;
}

uint64_t Lutf8_gsub()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *matched;
  unsigned __int8 *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  _QWORD *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  int v50;
  _QWORD *v51;
  char *v52;
  uint64_t v53;
  int v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  _OWORD v88[514];
  uint64_t v89;

  v0 = (_QWORD *)MEMORY[0x1E0C80A78]();
  v89 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v88[0] = 0;
  v1 = (char *)luaL_checklstring(v0, 1, v88);
  v2 = *(_QWORD *)&v88[0];
  v52 = &v1[*(_QWORD *)&v88[0]];
  *(_QWORD *)&v88[0] = 0;
  v3 = (unsigned __int8 *)luaL_checklstring(v0, 2, v88);
  v4 = &v3[*(_QWORD *)&v88[0]];
  v5 = lua_type(v0, 3);
  v53 = luaL_optinteger(v0, 4, v2 + 1);
  v54 = *v3;
  v6 = 0uLL;
  memset(v88, 0, 512);
  if ((v5 - 3) >= 4)
  {
    luaL_argerror(v0, 3);
    v6 = 0uLL;
  }
  v85 = v6;
  v86 = v6;
  v83 = v6;
  v84 = v6;
  v81 = v6;
  v82 = v6;
  v79 = v6;
  v80 = v6;
  v77 = v6;
  v78 = v6;
  v75 = v6;
  v76 = v6;
  v73 = v6;
  v74 = v6;
  v71 = v6;
  v72 = v6;
  v69 = v6;
  v70 = v6;
  v67 = v6;
  v68 = v6;
  v65 = v6;
  v66 = v6;
  v63 = v6;
  v64 = v6;
  v61 = v6;
  v62 = v6;
  v59 = v6;
  v60 = v6;
  v57 = v6;
  v58 = v6;
  v55 = v6;
  v56 = v6;
  luaL_buffinit((uint64_t)v0, (uint64_t)v88);
  v12 = 0;
  LODWORD(v55) = 200;
  if (v54 == 94)
    ++v3;
  *((_QWORD *)&v55 + 1) = v1;
  *(_QWORD *)&v56 = v52;
  *((_QWORD *)&v56 + 1) = v4;
  *(_QWORD *)&v57 = v0;
  v51 = v0;
  v50 = v5;
  while (v12 < v53)
  {
    DWORD2(v57) = 0;
    matched = match_1((uint64_t)&v55, v1, (uint64_t)v3, v7, v8, v9, v10, v11);
    if (!matched)
      goto LABEL_31;
    v14 = (unsigned __int8 *)matched;
    v15 = (_QWORD *)v57;
    if (v5 == 5)
    {
      push_onecapture_0((uint64_t)&v55, 0, (uint64_t)v1, (uint64_t)matched, v8, v9, v10, v11, v49);
      lua_gettable(v15, 3);
    }
    else
    {
      if (v5 != 6)
      {
        v87 = 0;
        v30 = lua_tolstring((_QWORD *)v57, 3, &v87);
        if (v87 < 1)
          goto LABEL_30;
        v31 = (unsigned __int8 *)v30;
        v32 = v30 + v87;
        while (2)
        {
          LODWORD(v87) = 0;
          v31 = utf8_safe_decode((_QWORD *)v57, (char *)v31, (unsigned int *)&v87);
          v39 = v87;
          if ((_DWORD)v87 == 37)
          {
            v40 = (_QWORD *)v57;
            v31 = utf8_safe_decode((_QWORD *)v57, (char *)v31, (unsigned int *)&v87);
            v41 = v87;
            if (find_in_range((uint64_t)&digit_table, 0x40uLL, v87))
            {
              if (v41 == 48)
              {
                luaL_addlstring((uint64_t)v88, v1, v14 - (unsigned __int8 *)v1, v34, v35, v36, v37, v38);
              }
              else
              {
                push_onecapture_0((uint64_t)&v55, v41 - 49, (uint64_t)v1, (uint64_t)v14, v35, v36, v37, v38, v49);
                luaL_addvalue((uint64_t)v88);
              }
LABEL_26:
              if ((unint64_t)v31 >= v32)
                goto LABEL_30;
              continue;
            }
            if (v41 == 37)
            {
              v39 = 37;
            }
            else
            {
              luaL_error(v40, "invalid use of '%c' in replacement string", v33, v34, v35, v36, v37, v38, 37);
              v39 = v87;
            }
          }
          break;
        }
        add_utf8char((uint64_t)v88, v39, v33, v34, v35, v36, v37, v38);
        goto LABEL_26;
      }
      lua_pushvalue((_QWORD *)v57, 3);
      v21 = push_captures_0((uint64_t)&v55, (uint64_t)v1, (uint64_t)v14, v16, v17, v18, v19, v20);
      lua_callk((uint64_t)v15, v21, 1, 0, 0);
    }
    if (lua_toBOOLean(v15, -1))
    {
      if (!lua_isstring(v15, -1))
      {
        v22 = lua_type(v15, -1);
        v23 = lua_typename((uint64_t)v15, v22);
        luaL_error(v15, "invalid replacement value (a %s)", v24, v25, v26, v27, v28, v29, (uint64_t)v23);
      }
    }
    else
    {
      lua_settop((uint64_t)v15, 0xFFFFFFFE);
      lua_pushlstring(v15, v1, v14 - (unsigned __int8 *)v1);
    }
    luaL_addvalue((uint64_t)v88);
LABEL_30:
    ++v12;
    v0 = v51;
    v5 = v50;
    if (v14 <= (unsigned __int8 *)v1)
    {
LABEL_31:
      if (v1 >= v52)
        break;
      LODWORD(v87) = 0;
      v14 = utf8_safe_decode(v0, v1, (unsigned int *)&v87);
      add_utf8char((uint64_t)v88, v87, v42, v43, v44, v45, v46, v47);
    }
    v1 = (char *)v14;
    if (v54 == 94)
      goto LABEL_36;
  }
  v14 = (unsigned __int8 *)v1;
LABEL_36:
  luaL_addlstring((uint64_t)v88, v14, v52 - (char *)v14, v7, v8, v9, v10, v11);
  luaL_pushresult((uint64_t)v88);
  lua_pushinteger((uint64_t)v0, v12);
  return 2;
}

uint64_t Lutf8_match(_QWORD *a1)
{
  return find_aux(a1, 0);
}

uint64_t iter_auxlax(_QWORD *a1)
{
  return iter_aux_0(a1, 0);
}

uint64_t iter_auxstrict(_QWORD *a1)
{
  return iter_aux_0(a1, 1);
}

uint64_t iter_aux_0(_QWORD *a1, int a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  char *v7;
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v19 = 0;
  v4 = luaL_checklstring(a1, 1, &v19);
  v5 = v4 + v19;
  v6 = lua_tointegerx(a1, 2, 0);
  if (v6 < 1)
  {
    v10 = (char *)v4;
  }
  else
  {
    v7 = (char *)(v4 + v6);
    do
    {
      v8 = v7;
      v9 = (unint64_t)(v7 - 1);
      if ((unint64_t)(v7 - 1) >= v5)
        break;
      ++v7;
    }
    while ((*v8 & 0xC0) == 0x80);
    if (v9 >= v5)
      v10 = (char *)v5;
    else
      v10 = v8;
  }
  if ((unint64_t)v10 >= v5)
    return 0;
  HIDWORD(v18) = 0;
  utf8_safe_decode(a1, v10, (unsigned int *)&v18 + 1);
  if (a2 && (HIWORD(HIDWORD(v18)) > 0x10u || (HIDWORD(v18) & 0xFFFFF800) == 0xD800))
    return luaL_error(a1, "invalid UTF-8 code", v11, v12, v13, v14, v15, v16, v18);
  lua_pushinteger((uint64_t)a1, (uint64_t)&v10[-v4 + 1]);
  lua_pushinteger((uint64_t)a1, HIDWORD(v18));
  return 2;
}

unsigned __int8 *utf8_safe_decode(_QWORD *a1, char *a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v12;

  v10 = utf8_decode_0(a2, a3, 0);
  if (!v10)
    luaL_error(a1, "invalid UTF-8 code", v4, v5, v6, v7, v8, v9, v12);
  return v10;
}

unsigned __int8 *utf8_decode_0(char *a1, unsigned int *a2, int a3)
{
  unsigned int v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;

  v3 = *a1;
  if ((*a1 & 0x80000000) == 0)
  {
    if (!a3)
      goto LABEL_22;
LABEL_3:
    if (HIWORD(v3) <= 0x10u && (v3 & 0xFFFFF800) != 55296)
    {
LABEL_22:
      if (a2)
        *a2 = v3;
      return (unsigned __int8 *)(a1 + 1);
    }
    return 0;
  }
  if ((v3 & 0x40) != 0)
  {
    v7 = 0;
    v6 = 0;
    while (1)
    {
      v8 = v3;
      v9 = a1[v7 + 1];
      if ((v9 & 0xC0) != 0x80)
        return 0;
      v6 = v9 & 0x3F | (v6 << 6);
      v3 = 2 * v8;
      ++v7;
      if ((v8 & 0x20) == 0)
        goto LABEL_14;
    }
  }
  v6 = 0;
  LODWORD(v7) = 0;
LABEL_14:
  v5 = 0;
  if (v7 <= 5)
  {
    v3 = ((v3 & 0x7F) << (5 * v7)) | v6;
    if ((v3 & 0x80000000) == 0)
    {
      v5 = 0;
      v10 = v7;
      v11 = utf8_decode_limits_0[v7];
      v12 = v3 >= v11;
      v13 = v3 >= v11 ? v10 : 0;
      if (v12)
      {
        a1 += v13;
        if (!a3)
          goto LABEL_22;
        goto LABEL_3;
      }
    }
  }
  return (unsigned __int8 *)v5;
}

BOOL utf8_range(unint64_t a1, unint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  unint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  unint64_t v18;
  _BYTE *v19;

  v8 = *a3;
  v9 = a2 - a1;
  v10 = (*a3 & 0x80000000) == 0;
  if ((*a3 & 0x80000000) != 0)
    v11 = v9 + 1;
  else
    v11 = 1;
  v12 = utf8_offset(a1, a2, v11, (int)v8 - v10);
  if ((*a4 & 0x80000000) != 0)
    v13 = v9 + 1;
  else
    v13 = 1;
  v14 = utf8_offset(a1, a2, v13, (int)(*a4 - ((*a4 & 0x80000000) == 0)));
  if (v8 <= 0)
    v15 = (_BYTE *)a1;
  else
    v15 = (_BYTE *)a2;
  if (v12)
    v15 = v12;
  *a3 = (uint64_t)&v15[-a1];
  if (v14)
  {
    v16 = v14 + 1;
    do
    {
      v17 = v16;
      v18 = (unint64_t)(v16 - 1);
      if ((unint64_t)(v16 - 1) >= a2)
        break;
      ++v16;
    }
    while ((*v17 & 0xC0) == 0x80);
    if (v18 >= a2)
      v17 = (_BYTE *)a2;
  }
  else if (*a4 <= 0)
  {
    v17 = (_BYTE *)a1;
  }
  else
  {
    v17 = (_BYTE *)a2;
  }
  v19 = &v17[-a1];
  *a4 = (uint64_t)v19;
  return *a3 < (uint64_t)v19;
}

_BYTE *utf8_offset(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v4;
  uint64_t v6;
  _BYTE *v7;
  unint64_t v8;
  _BYTE *v10;
  unint64_t v11;

  v4 = (_BYTE *)(a1 + a3 - 1);
  if (a4 < 0)
  {
    if ((unint64_t)v4 <= a1)
      return 0;
    do
    {
      v10 = v4 - 1;
      do
      {
        v4 = v10;
        v11 = (unint64_t)(v10 + 1);
        if ((unint64_t)(v10 + 1) <= a1)
          break;
        --v10;
      }
      while ((*v4 & 0xC0) == 0x80);
      if (v11 <= a1)
        v4 = (_BYTE *)a1;
      v6 = a4 + 1;
    }
    while ((unint64_t)v4 > a1 && a4++ < -1);
  }
  else if ((unint64_t)v4 >= a2 || a4 == 0)
  {
    v6 = a4;
  }
  else
  {
    do
    {
      v7 = v4 + 1;
      do
      {
        v4 = v7;
        v8 = (unint64_t)(v7 - 1);
        if ((unint64_t)(v7 - 1) >= a2)
          break;
        ++v7;
      }
      while ((*v4 & 0xC0) == 0x80);
      if (v8 >= a2)
        v4 = (_BYTE *)a2;
      v6 = a4 - 1;
    }
    while ((unint64_t)v4 < a2 && a4-- > 1);
  }
  if (v6)
    return 0;
  else
    return v4;
}

BOOL find_in_range(uint64_t a1, unint64_t a2, unsigned int a3)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;

  if (!a2)
    return 0;
  v3 = 0;
  while (1)
  {
    v4 = (a2 + v3) >> 1;
    if (*(_DWORD *)(a1 + 12 * v4 + 4) >= a3)
      break;
    v3 = v4 + 1;
LABEL_6:
    if (v3 >= a2)
      return 0;
  }
  v5 = *(_DWORD *)(a1 + 12 * v4);
  a2 = (a2 + v3) >> 1;
  v6 = a3 >= v5;
  v7 = a3 - v5;
  if (!v6)
    goto LABEL_6;
  return v7 % *(_DWORD *)(a1 + 12 * v4 + 8) == 0;
}

void *add_utf8char(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  _BYTE v15[7];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x80)
  {
    v9 = 0;
    v10 = 63;
    v11 = 0x700000000;
    do
    {
      *(&v16 + v9) = a2 & 0x3F | 0x80;
      a2 >>= 6;
      v12 = v10 >> 1;
      v11 -= 0x100000000;
      --v9;
      v13 = a2 > v10 >> 1;
      v10 >>= 1;
    }
    while (v13);
    v15[v11 >> 32] = a2 | (2 * ~(_BYTE)v12);
    v8 = (1 - v9);
  }
  else
  {
    v16 = a2;
    v8 = 1;
  }
  return luaL_addlstring(a1, &v15[-v8 + 8], v8, a4, a5, a6, a7, a8);
}

uint64_t typeerror_0(_QWORD *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = lua_type(a1, 1);
  lua_typename((uint64_t)a1, v2);
  return luaL_error(a1, "%s expected, got %s", v3, v4, v5, v6, v7, v8, (uint64_t)"number/string");
}

uint64_t convert_char(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    return a3;
  v3 = 0;
  while (1)
  {
    v4 = (a2 + v3) >> 1;
    if (*(_DWORD *)(a1 + 16 * v4 + 4) >= a3)
      break;
    v3 = v4 + 1;
LABEL_6:
    if (v3 >= a2)
      return a3;
  }
  v5 = *(_DWORD *)(a1 + 16 * v4);
  a2 = (a2 + v3) >> 1;
  v6 = a3 >= v5;
  v7 = a3 - v5;
  if (!v6)
    goto LABEL_6;
  v8 = a1 + 16 * v4;
  if (!(v7 % *(_DWORD *)(v8 + 8)))
    return (*(_DWORD *)(v8 + 12) + a3);
  return a3;
}

uint64_t push_offset(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t result;
  unsigned int v13;

  v13 = 0;
  if (a5)
  {
    v8 = utf8_offset(a2, a3, a4, a5);
  }
  else
  {
    v8 = (char *)(a2 + a4 - 1);
    if ((*v8 & 0xC0) == 0x80)
    {
      v9 = a4 + a2 - 2;
      do
      {
        v10 = (char *)v9;
        v11 = v9 + 1;
        if (v9 + 1 <= a2)
          break;
        --v9;
      }
      while ((*v10 & 0xC0) == 0x80);
      if (v11 <= a2)
        v8 = (char *)a2;
      else
        v8 = v10;
    }
  }
  result = 0;
  if (v8)
  {
    if (v8 != (char *)a3)
    {
      utf8_decode_0(v8, &v13, 0);
      lua_pushinteger(a1, (uint64_t)&v8[-a2 + 1]);
      lua_pushinteger(a1, v13);
      return 2;
    }
  }
  return result;
}

uint64_t utf8_width(unsigned int a1, int a2)
{
  if (find_in_range((uint64_t)&doublewidth_table, 0x6EuLL, a1))
    return 2;
  if (find_in_range((uint64_t)&ambiwidth_table, 0x8DuLL, a1))
  {
    if (a2)
      return 1;
    else
      return 2;
  }
  else
  {
    return !find_in_range((uint64_t)&compose_table, 0x13FuLL, a1)
        && !find_in_range((uint64_t)&unprintable_table, 0xFuLL, a1);
  }
}

uint64_t find_aux(_QWORD *a1, int a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  size_t v21;
  const void *v22;
  int v23;
  int v24;
  char *v25;
  _BYTE *v26;
  _BYTE *v27;
  _BYTE *v28;
  int v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  unint64_t v33;
  char *matched;
  _BYTE *v35;
  _BYTE *v36;
  unint64_t v37;
  unint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  _BYTE *v51;
  unint64_t v52;
  uint64_t v53;
  int index;
  int v55;
  _BYTE *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;

  *(_QWORD *)&v57 = 0;
  v4 = luaL_checklstring(a1, 1, &v57);
  v5 = v57;
  v6 = v4 + v57;
  *(_QWORD *)&v57 = 0;
  v7 = (char *)luaL_checklstring(a1, 2, &v57);
  v8 = v57;
  v9 = luaL_optinteger(a1, 3, 1);
  if (v9 <= 1)
    v10 = 1;
  else
    v10 = v9;
  if ((v10 & 0x80000000) != 0)
    v11 = v5 + 1;
  else
    v11 = 1;
  v17 = utf8_offset(v4, v6, v11, (int)(v10 - ((int)v10 >= 0)));
  if (!v17)
  {
    v17 = (_BYTE *)v4;
    if (v10 >= 1)
      goto LABEL_51;
  }
  v56 = (_BYTE *)v4;
  v18 = &v7[v8];
  v55 = a2;
  if (a2)
  {
    if (!lua_toBOOLean(a1, 4) && v8 >= 1)
    {
      v19 = v7;
      while (!strpbrk(v19, "^$*+?.([%-"))
      {
        v19 += strlen(v19) + 1;
        if (v19 >= v18)
          goto LABEL_14;
      }
      goto LABEL_22;
    }
LABEL_14:
    if (v8)
    {
      v20 = v6 - (_QWORD)v17;
      if (v8 <= v6 - (unint64_t)v17)
      {
        v21 = v20 - (v8 - 1);
        if (v20 != v8 - 1)
        {
          v24 = *v7;
          v22 = v7 + 1;
          v23 = v24;
          do
          {
            v25 = (char *)memchr(v17, v23, v21);
            if (!v25)
              break;
            v26 = v25;
            v27 = v25 + 1;
            if (!memcmp(v25 + 1, v22, v8 - 1))
            {
              v17 = v26;
              goto LABEL_67;
            }
            v28 = &v17[v21];
            v17 = v27;
            v21 = v28 - v27;
          }
          while (v28 != v27);
        }
      }
    }
    else if (v17)
    {
LABEL_67:
      v49 = &v17[v8];
      if ((v17[v8] & 0xC0) == 0x80)
      {
        v50 = (uint64_t)&v17[v8 + 1];
        do
        {
          v51 = (_BYTE *)v50;
          v52 = v50 - 1;
          if (v50 - 1 >= v6)
            break;
          ++v50;
        }
        while ((*v51 & 0xC0) == 0x80);
        if (v52 >= v6)
          v49 = (_BYTE *)v6;
        else
          v49 = v51;
      }
      v53 = (int)(get_index(v17, v56, v6) + 1);
      lua_pushinteger((uint64_t)a1, v53);
      index = get_index(v49, v17, v6);
      lua_pushinteger((uint64_t)a1, v53 + index - 1);
      return 2;
    }
LABEL_51:
    lua_pushnil((uint64_t)a1);
    return 1;
  }
LABEL_22:
  v87 = 0u;
  v88 = 0u;
  v85 = 0u;
  v86 = 0u;
  v83 = 0u;
  v84 = 0u;
  v81 = 0u;
  v82 = 0u;
  v79 = 0u;
  v80 = 0u;
  v77 = 0u;
  v78 = 0u;
  v75 = 0u;
  v76 = 0u;
  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v29 = *v7;
  if (v29 == 94)
    ++v7;
  if (v10 < 0)
  {
    if (v5 < 1)
    {
      v30 = 0;
    }
    else
    {
      v30 = 0;
      v31 = v56;
      do
      {
        v32 = v31 + 1;
        do
        {
          v31 = v32;
          v33 = (unint64_t)(v32 - 1);
          if ((unint64_t)(v32 - 1) >= v6)
            break;
          ++v32;
        }
        while ((*v31 & 0xC0) == 0x80);
        if (v33 >= v6)
          v31 = (_BYTE *)v6;
        ++v30;
      }
      while ((unint64_t)v31 < v6);
    }
    v10 += v30 + 1;
  }
  LODWORD(v57) = 200;
  *((_QWORD *)&v57 + 1) = v56;
  *(_QWORD *)&v58 = v6;
  *((_QWORD *)&v58 + 1) = v18;
  *(_QWORD *)&v59 = a1;
  while (1)
  {
    DWORD2(v59) = 0;
    matched = match_1((uint64_t)&v57, v17, (uint64_t)v7, v12, v13, v14, v15, v16);
    if (matched)
      break;
    if (v17 != (_BYTE *)v6)
    {
      ++v10;
      v35 = v17 + 1;
      do
      {
        v36 = v35;
        v37 = (unint64_t)(v35 - 1);
        if ((unint64_t)(v35 - 1) >= v6)
          break;
        ++v35;
      }
      while ((*v36 & 0xC0) == 0x80);
      v17 = v37 >= v6 ? (_BYTE *)v6 : v36;
      if (v29 != 94 && (unint64_t)v17 <= v6)
        continue;
    }
    goto LABEL_51;
  }
  v39 = (unint64_t)matched;
  if (!v55)
    return push_captures_0((uint64_t)&v57, (uint64_t)v17, (uint64_t)matched, v12, v13, v14, v15, v16);
  lua_pushinteger((uint64_t)a1, v10);
  if ((unint64_t)v17 >= v39)
  {
    v40 = 0;
  }
  else
  {
    v40 = 0;
    do
    {
      v41 = v17 + 1;
      do
      {
        v42 = v41;
        v43 = (unint64_t)(v41 - 1);
        if ((unint64_t)(v41 - 1) >= v39)
          break;
        ++v41;
      }
      while ((*v42 & 0xC0) == 0x80);
      if (v43 >= v39)
        v17 = (_BYTE *)v39;
      else
        v17 = v42;
      ++v40;
    }
    while ((unint64_t)v17 < v39);
  }
  lua_pushinteger((uint64_t)a1, v10 + v40 - 1);
  return push_captures_0((uint64_t)&v57, 0, 0, v44, v45, v46, v47, v48) + 2;
}

uint64_t get_index(_BYTE *a1, _BYTE *a2, unint64_t a3)
{
  int v3;
  _BYTE *v4;
  _BYTE *v5;
  unint64_t v6;

  v3 = 0;
  if ((unint64_t)a2 < a3 && a2 < a1)
  {
    v3 = 0;
    do
    {
      v4 = a2 + 1;
      do
      {
        v5 = v4;
        v6 = (unint64_t)(v4 - 1);
        if ((unint64_t)(v4 - 1) >= a3)
          break;
        ++v4;
      }
      while ((*v5 & 0xC0) == 0x80);
      if (v6 >= a3)
        a2 = (_BYTE *)a3;
      else
        a2 = v5;
      ++v3;
    }
    while ((unint64_t)a2 < a3 && a2 < a1);
  }
  return v3 - (a2 != a1);
}

char *match_1(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  int v24;
  unint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unint64_t v28;
  uint64_t matched;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  size_t v38;
  unsigned int v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  int v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  unint64_t v55;
  char *v56;
  char *v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  char *v68;
  unint64_t v69;
  char *v70;
  char *v71;
  unint64_t v72;
  unsigned __int8 *v73;
  char *v74;
  char *v75;
  unint64_t v76;
  unint64_t v78;
  char *v79;
  char *v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;

  v8 = (char *)a3;
  if (!(*(_DWORD *)a1)--)
    luaL_error(*(_QWORD **)(a1 + 32), "pattern too complex", a3, a4, a5, a6, a7, a8, v84);
  if (*(char **)(a1 + 24) == v8)
    goto LABEL_108;
  do
  {
    v85 = 0;
    utf8_safe_decode(*(_QWORD **)(a1 + 32), v8, &v85);
    switch(v85)
    {
      case '$':
        if (v8 + 1 != *(char **)(a1 + 24))
          goto LABEL_6;
        if (a2 == *(char **)(a1 + 16))
          matched = (uint64_t)a2;
        else
          matched = 0;
        goto LABEL_107;
      case '%':
        v30 = (char *)utf8_safe_decode(*(_QWORD **)(a1 + 32), v8 + 1, &v85);
        v18 = (unsigned __int8 *)v30;
        if (v85 - 48 < 0xA)
        {
          v37 = v85 - 49;
          if (v85 < 0x31 || (signed int)v37 >= *(_DWORD *)(a1 + 40) || *(_QWORD *)(a1 + 16 * v37 + 56) == -1)
            v37 = luaL_error(*(_QWORD **)(a1 + 32), "invalid capture index %%%d", v31, v32, v33, v34, v35, v36, v85 - 48);
          v38 = *(_QWORD *)(a1 + 16 * (int)v37 + 56);
          if (*(_QWORD *)(a1 + 16) - (_QWORD)a2 >= v38
            && !memcmp(*(const void **)(a1 + 16 * (int)v37 + 48), a2, v38)
            && a2 != 0)
          {
            a2 += v38;
            goto LABEL_43;
          }
          goto LABEL_106;
        }
        if (v85 == 102)
        {
          v87 = 0;
          if (*v30 != 91)
            luaL_error(*(_QWORD **)(a1 + 32), "missing '[' after '%%f' in pattern", v31, v32, v33, v34, v35, v36, v84);
          v54 = classend_0(a1, (char *)v18);
          v55 = *(_QWORD *)(a1 + 8);
          if (a2 != (char *)v55)
          {
            v56 = a2 - 1;
            do
            {
              v57 = v56;
              v58 = (unint64_t)(v56 + 1);
              if ((unint64_t)(v56 + 1) <= v55)
                break;
              --v56;
            }
            while ((*v57 & 0xC0) == 0x80);
            if (v58 <= v55)
              v59 = *(char **)(a1 + 8);
            else
              v59 = v57;
            utf8_decode_0(v59, (unsigned int *)&v87 + 1, 0);
          }
          if (a2 != *(char **)(a1 + 16))
            utf8_decode_0(a2, (unsigned int *)&v87, 0);
          if (!matchbracketclass_0(a1, HIDWORD(v87), (uint64_t)v18, (unint64_t)(v54 - 1))
            && matchbracketclass_0(a1, v87, (uint64_t)v18, (unint64_t)(v54 - 1)))
          {
            v18 = v54;
            goto LABEL_43;
          }
          goto LABEL_106;
        }
        if (v85 != 98)
        {
LABEL_6:
          v18 = classend_0(a1, v8);
          if (singlematch_0(a1, a2, v8, (uint64_t)v18))
          {
            v19 = *(_QWORD *)(a1 + 16);
            v20 = a2 + 1;
            do
            {
              v21 = v20;
              v22 = (unint64_t)(v20 - 1);
              if ((unint64_t)(v20 - 1) >= v19)
                break;
              ++v20;
            }
            while ((*v21 & 0xC0) == 0x80);
            if (v22 >= v19)
              v23 = *(char **)(a1 + 16);
            else
              v23 = v21;
            v24 = (char)*v18;
            if (v24 > 62)
            {
              if (v24 == 63)
              {
                v25 = *(_QWORD *)(a1 + 24);
                v26 = v18 + 1;
                do
                {
                  v27 = v26;
                  v28 = (unint64_t)(v26 - 1);
                  if ((unint64_t)(v26 - 1) >= v25)
                    break;
                  ++v26;
                }
                while ((*v27 & 0xC0) == 0x80);
                if (v28 >= v25)
                  v18 = *(unsigned __int8 **)(a1 + 24);
                else
                  v18 = v27;
                matched = match_1(a1, v23, v18);
                if (!matched)
                  goto LABEL_43;
                goto LABEL_107;
              }
              goto LABEL_42;
            }
            if (v24 != 42)
            {
              if (v24 != 43)
              {
                if (v24 == 45)
                {
                  while (1)
                  {
                    matched = match_1(a1, a2, v18 + 1);
                    if (matched)
                      goto LABEL_107;
                    if (!singlematch_0(a1, a2, v8, (uint64_t)v18))
                      goto LABEL_106;
                    v78 = *(_QWORD *)(a1 + 16);
                    v79 = a2 + 1;
                    do
                    {
                      v80 = v79;
                      v81 = (unint64_t)(v79 - 1);
                      if ((unint64_t)(v79 - 1) >= v78)
                        break;
                      ++v79;
                    }
                    while ((*v80 & 0xC0) == 0x80);
                    if (v81 >= v78)
                      a2 = *(char **)(a1 + 16);
                    else
                      a2 = v80;
                  }
                }
LABEL_42:
                a2 = v23;
                goto LABEL_43;
              }
              a2 = v23;
            }
            v68 = a2;
            if (!singlematch_0(a1, a2, v8, (uint64_t)v18))
              goto LABEL_96;
            v68 = a2;
            do
            {
              v69 = *(_QWORD *)(a1 + 16);
              v70 = v68 + 1;
              do
              {
                v71 = v70;
                v72 = (unint64_t)(v70 - 1);
                if ((unint64_t)(v70 - 1) >= v69)
                  break;
                ++v70;
              }
              while ((*v71 & 0xC0) == 0x80);
              if (v72 >= v69)
                v68 = *(char **)(a1 + 16);
              else
                v68 = v71;
            }
            while (singlematch_0(a1, v68, v8, (uint64_t)v18));
            if (v68 >= a2)
            {
LABEL_96:
              v73 = v18 + 1;
              while (1)
              {
                matched = match_1(a1, v68, v73);
                if (matched)
                  break;
                if (v68 != a2)
                {
                  v74 = v68 - 1;
                  do
                  {
                    v75 = v74;
                    v76 = (unint64_t)(v74 + 1);
                    if (v74 + 1 <= a2)
                      break;
                    --v74;
                  }
                  while ((*v75 & 0xC0) == 0x80);
                  v68 = v76 <= (unint64_t)a2 ? a2 : v75;
                  if (v68 >= a2)
                    continue;
                }
                goto LABEL_106;
              }
LABEL_107:
              a2 = (char *)matched;
              goto LABEL_108;
            }
          }
          else
          {
            v40 = *v18;
            v41 = v40 > 0x3F;
            v42 = (1 << v40) & 0x8000240000000000;
            if (!v41 && v42 != 0)
            {
              ++v18;
              goto LABEL_43;
            }
          }
LABEL_106:
          matched = 0;
          goto LABEL_107;
        }
        v87 = 0;
        v86 = 0;
        v50 = utf8_safe_decode(*(_QWORD **)(a1 + 32), v30, (unsigned int *)&v87);
        if ((unint64_t)v50 >= *(_QWORD *)(a1 + 24))
          luaL_error(*(_QWORD **)(a1 + 32), "malformed pattern (missing arguments to '%%b')", v44, v45, v46, v47, v48, v49, v84);
        v18 = utf8_safe_decode(*(_QWORD **)(a1 + 32), (char *)v50, &v86);
        v51 = utf8_safe_decode(*(_QWORD **)(a1 + 32), a2, (unsigned int *)&v87 + 1);
        if (HIDWORD(v87) != (_DWORD)v87)
          goto LABEL_106;
        a2 = (char *)v51;
        if ((unint64_t)v51 >= *(_QWORD *)(a1 + 16))
          goto LABEL_106;
        v52 = 1;
        break;
      case '(':
        v60 = (uint64_t)(v8 + 1);
        if (v8[1] == 41)
        {
          v60 = (uint64_t)(v8 + 2);
          v61 = a1;
          v62 = (uint64_t)a2;
          v63 = 4294967294;
        }
        else
        {
          v61 = a1;
          v62 = (uint64_t)a2;
          v63 = 0xFFFFFFFFLL;
        }
        matched = start_capture_0(v61, v62, v60, v63, v14, v15, v16, v17);
        goto LABEL_107;
      case ')':
        v64 = *(unsigned int *)(a1 + 40);
        v65 = 16 * v64 + 40;
        while (1)
        {
          v66 = __OFSUB__((_DWORD)v64, 1);
          LODWORD(v64) = v64 - 1;
          if ((int)v64 < 0 != v66)
            break;
          v67 = *(_QWORD *)(a1 + v65);
          v65 -= 16;
          if (v67 == -1)
            goto LABEL_120;
        }
        LODWORD(v64) = luaL_error(*(_QWORD **)(a1 + 32), "invalid pattern capture", v12, v13, v14, v15, v16, v17, v84);
LABEL_120:
        v82 = a1 + 16 * (int)v64;
        *(_QWORD *)(v82 + 56) = &a2[-*(_QWORD *)(v82 + 48)];
        v83 = (_QWORD *)(v82 + 56);
        matched = match_1(a1, a2, v8 + 1);
        if (!matched)
          *v83 = -1;
        goto LABEL_107;
      default:
        goto LABEL_6;
    }
    while (1)
    {
      v53 = utf8_safe_decode(*(_QWORD **)(a1 + 32), a2, (unsigned int *)&v87 + 1);
      a2 = (char *)v53;
      if (HIDWORD(v87) != v86)
      {
        if (HIDWORD(v87) == (_DWORD)v87)
          ++v52;
        goto LABEL_57;
      }
      if (!--v52)
        break;
LABEL_57:
      if ((unint64_t)v53 >= *(_QWORD *)(a1 + 16))
        goto LABEL_106;
    }
    if (!v53)
      goto LABEL_106;
LABEL_43:
    v8 = (char *)v18;
  }
  while (v18 != *(unsigned __int8 **)(a1 + 24));
LABEL_108:
  ++*(_DWORD *)a1;
  return a2;
}

uint64_t push_captures_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  uint64_t v21;

  v11 = *(_DWORD *)(a1 + 40);
  if (v11)
    v12 = 1;
  else
    v12 = a2 == 0;
  if (v12)
    v13 = v11;
  else
    v13 = 1;
  luaL_checkstack(*(_QWORD **)(a1 + 32), v13, (uint64_t)"too many captures", a4, a5, a6, a7, a8, v20);
  if ((int)v13 >= 1)
  {
    v18 = 0;
    do
      push_onecapture_0(a1, v18++, a2, a3, v14, v15, v16, v17, v21);
    while ((_DWORD)v13 != v18);
  }
  return v13;
}

uint64_t start_capture_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v8 = a4;
  v12 = *(int *)(a1 + 40);
  if ((int)v12 >= 32)
    luaL_error(*(_QWORD **)(a1 + 32), "too many captures", a3, a4, a5, a6, a7, a8, v15);
  v13 = a1 + 16 * v12;
  *(_QWORD *)(v13 + 48) = a2;
  *(_QWORD *)(v13 + 56) = v8;
  *(_DWORD *)(a1 + 40) = v12 + 1;
  result = match_1(a1, a2, a3);
  if (!result)
    --*(_DWORD *)(a1 + 40);
  return result;
}

unsigned __int8 *classend_0(uint64_t a1, char *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v18;
  unsigned int v19;

  v19 = 0;
  v3 = utf8_safe_decode(*(_QWORD **)(a1 + 32), a2, &v19);
  v10 = v3;
  if (v19 == 91)
  {
    if (*v3 == 94)
      v15 = v3 + 1;
    else
      v15 = v3;
    do
    {
      if (v15 == *(unsigned __int8 **)(a1 + 24))
        luaL_error(*(_QWORD **)(a1 + 32), "malformed pattern (missing ']')", v4, v5, v6, v7, v8, v9, v18);
      v16 = v15 + 1;
      if (*v15 == 37 && (unint64_t)v16 < *(_QWORD *)(a1 + 24))
        v16 = v15 + 2;
      v15 = v16;
    }
    while (*v16 != 93);
    return v16 + 1;
  }
  else if (v19 == 37)
  {
    v11 = *(_QWORD *)(a1 + 24);
    if (v3 == (unsigned __int8 *)v11)
    {
      luaL_error(*(_QWORD **)(a1 + 32), "malformed pattern (ends with '%%')", v4, v5, v6, v7, v8, v9, v18);
      v11 = *(_QWORD *)(a1 + 24);
    }
    v12 = v10 + 1;
    do
    {
      v13 = v12;
      v14 = (unint64_t)(v12 - 1);
      if ((unint64_t)(v12 - 1) >= v11)
        break;
      ++v12;
    }
    while ((*v13 & 0xC0) == 0x80);
    if (v14 >= v11)
      return (unsigned __int8 *)v11;
    else
      return v13;
  }
  return v10;
}

BOOL matchbracketclass_0(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4)
{
  unsigned __int8 *v4;
  int v5;
  _BOOL8 v6;
  _BOOL8 v7;
  unsigned __int8 *v8;
  unsigned __int8 *v12;
  unsigned int v15;
  unsigned int v16;

  v5 = *(unsigned __int8 *)(a3 + 1);
  v4 = (unsigned __int8 *)(a3 + 1);
  v6 = v5 == 94;
  v7 = v5 != 94;
  if (v5 == 94)
    v8 = v4 + 1;
  else
    v8 = v4;
  while ((unint64_t)v8 < a4)
  {
    v16 = 0;
    v8 = utf8_safe_decode(*(_QWORD **)(a1 + 32), (char *)v8, &v16);
    if (v16 == 37)
    {
      v8 = utf8_safe_decode(*(_QWORD **)(a1 + 32), (char *)v8, &v16);
      if (match_class_0(a2, v16))
        return v7;
    }
    else
    {
      v15 = 0;
      v12 = utf8_safe_decode(*(_QWORD **)(a1 + 32), (char *)v8, &v15);
      if (v15 != 45 || (unint64_t)v12 >= a4)
      {
        if (v16 == a2)
          return v7;
      }
      else
      {
        v8 = utf8_safe_decode(*(_QWORD **)(a1 + 32), (char *)v12, &v15);
        if (v16 <= a2 && v15 >= a2)
          return v7;
      }
    }
  }
  return v6;
}

uint64_t singlematch_0(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  unsigned __int8 *v7;
  uint64_t v9;

  if (*(_QWORD *)(a1 + 16) <= (unint64_t)a2)
    return 0;
  v9 = 0;
  utf8_safe_decode(*(_QWORD **)(a1 + 32), a2, (unsigned int *)&v9 + 1);
  v7 = utf8_safe_decode(*(_QWORD **)(a1 + 32), a3, (unsigned int *)&v9);
  if ((_DWORD)v9 == 91)
    return matchbracketclass_0(a1, HIDWORD(v9), (uint64_t)(v7 - 1), a4 - 1);
  if ((_DWORD)v9 == 46)
    return 1;
  if ((_DWORD)v9 != 37)
    return (_DWORD)v9 == HIDWORD(v9);
  utf8_safe_decode(*(_QWORD **)(a1 + 32), (char *)v7, (unsigned int *)&v9);
  return match_class_0(HIDWORD(v9), v9);
}

BOOL match_class_0(unsigned int a1, uint64_t a2)
{
  unsigned int v2;
  void *v4;
  unint64_t v5;
  _BOOL4 v7;
  void *v8;
  unint64_t v9;

  v2 = a2;
  switch(convert_char((uint64_t)&tolower_table, 0xB2uLL, a2))
  {
    case 'a':
      v4 = &alpha_table;
      v5 = 701;
      goto LABEL_16;
    case 'c':
      v4 = &cntrl_table;
      v5 = 26;
      goto LABEL_16;
    case 'd':
      v4 = &digit_table;
      v5 = 64;
      goto LABEL_16;
    case 'g':
      if (find_in_range((uint64_t)&space_table, 7uLL, a1))
      {
        v7 = 0;
      }
      else if (find_in_range((uint64_t)&graph_table, 0x349uLL, a1))
      {
LABEL_23:
        v7 = 1;
      }
      else
      {
        v8 = &compose_table;
        v9 = 319;
LABEL_25:
        v7 = find_in_range((uint64_t)v8, v9, a1);
      }
LABEL_17:
      if (find_in_range((uint64_t)&lower_table, 0xB1uLL, v2))
        return v7;
      else
        return !v7;
    case 'l':
      v4 = &lower_table;
      v5 = 177;
      goto LABEL_16;
    case 'p':
      v4 = &punct_table;
      v5 = 213;
      goto LABEL_16;
    case 's':
      v4 = &space_table;
      v5 = 7;
      goto LABEL_16;
    case 't':
      v4 = &compose_table;
      v5 = 319;
      goto LABEL_16;
    case 'u':
      v4 = &upper_table;
      v5 = 155;
      goto LABEL_16;
    case 'w':
      if (find_in_range((uint64_t)&alpha_table, 0x2BDuLL, a1))
        goto LABEL_23;
      v8 = &alnum_extend_table;
      v9 = 135;
      goto LABEL_25;
    case 'x':
      v4 = &xdigit_table;
      v5 = 6;
LABEL_16:
      v7 = find_in_range((uint64_t)v4, v5, a1);
      goto LABEL_17;
    case 'z':
      v7 = a1 == 0;
      goto LABEL_17;
    default:
      return v2 == a1;
  }
}

uint64_t push_onecapture_0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  char **v11;
  size_t v12;
  _QWORD *v13;
  char *v14;
  size_t v15;
  uint64_t v17;
  uint64_t v18;

  if (*(_DWORD *)(a1 + 40) <= a2)
  {
    v13 = *(_QWORD **)(a1 + 32);
    if (a2)
      return luaL_error(v13, "invalid capture index", a3, a4, a5, a6, a7, a8, a9);
    v14 = (char *)a3;
    v15 = a4 - a3;
  }
  else
  {
    v10 = a1 + 16 * a2;
    v11 = (char **)(v10 + 48);
    v12 = *(_QWORD *)(v10 + 56);
    if (v12 == -2)
    {
      v17 = (int)(get_index(*v11, *(_BYTE **)(a1 + 8), *(_QWORD *)(a1 + 16)) + 1);
      return lua_pushinteger(*(_QWORD *)(a1 + 32), v17);
    }
    if (v12 == -1)
      luaL_error(*(_QWORD **)(a1 + 32), "unfinished capture", a3, a4, a5, a6, a7, a8, v18);
    v13 = *(_QWORD **)(a1 + 32);
    v14 = *v11;
    v15 = v12;
  }
  return lua_pushlstring(v13, v14, v15);
}

uint64_t gmatch_aux_0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *matched;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v25[0] = 200;
  v58 = 0;
  v2 = luaL_checklstring(a1, 4293966295, &v58);
  v3 = v58;
  v4 = v2 + v58;
  v58 = 0;
  v5 = luaL_checklstring(a1, 4293966294, &v58);
  v25[1] = v2;
  v26 = v4;
  v27 = v5 + v58;
  *(_QWORD *)&v28 = a1;
  v6 = lua_tointegerx(a1, -1001003, 0);
  if (v6 > v3)
    return 0;
  v12 = (char *)(v2 + v6);
  while (1)
  {
    DWORD2(v28) = 0;
    matched = match_1((uint64_t)v25, v12, v5, v7, v8, v9, v10, v11);
    if (matched)
      break;
    if (v12 != (char *)v26)
    {
      v14 = v12 + 1;
      do
      {
        v15 = v14;
        v16 = (unint64_t)(v14 - 1);
        if ((unint64_t)(v14 - 1) >= v26)
          break;
        ++v14;
      }
      while ((*v15 & 0xC0) == 0x80);
      v12 = v16 >= v26 ? (char *)v26 : v15;
      if ((unint64_t)v12 <= v26)
        continue;
    }
    return 0;
  }
  v18 = (uint64_t)matched;
  if (matched == v12)
    v19 = (uint64_t)&matched[-v2 + 1];
  else
    v19 = (uint64_t)&matched[-v2];
  lua_pushinteger((uint64_t)a1, v19);
  lua_copy((uint64_t)a1, -1, -1001003);
  lua_settop((uint64_t)a1, 0xFFFFFFFE);
  return push_captures_0((uint64_t)v25, (uint64_t)v12, v18, v20, v21, v22, v23, v24);
}

uint64_t Dictionary_Con(uint64_t a1, uint64_t a2, char **a3, _OWORD *a4, uint64_t a5, _DWORD *a6, int a7)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v13 = 0;
  *(_DWORD *)(a1 + 184) = 0;
  if (a5)
  {
    result = PNEW_BinBlockStreamReader_Con(a2, a2, a4, a5, a6, &v13);
    if ((_DWORD)result)
      return result;
    v12 = v13 + 32;
  }
  else
  {
    v12 = 0;
  }
  result = Dictionary_ConFromStreamReader(a1, a2, a3, v12, a7);
  if (!(_DWORD)result)
  {
    if (v13)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
  }
  return result;
}

uint64_t Dictionary_ConFromStreamReader(uint64_t a1, uint64_t a2, char **a3, uint64_t a4, int a5)
{
  uint64_t v9;
  unsigned int v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;

  v16 = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = a2;
  *(_DWORD *)(a1 + 152) = a5;
  *(_DWORD *)(a1 + 184) = 0;
  if (!a4)
    return Dictionary_ConFromBuffer(a1, a2, a3, a4, a5);
  v9 = a4;
  v15 = 0;
  v14 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a4 + 56))(a4 - *(_QWORD *)(*(_QWORD *)a4 + 224)) != 341630714)
    return kaldi::PipeInputImpl::MyType((kaldi::PipeInputImpl *)"Wrong Buffer Type");
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 64))(v9 - *(_QWORD *)(*(_QWORD *)v9 + 224));
  if (!BinBlockStreamReader_IsVersionAccepted(v10, 0x10000))
    return err_GenerateErrorVersion();
  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *, unsigned int *))(*(_QWORD *)v9 + 8))(v9 - *(_QWORD *)(*(_QWORD *)v9 + 224), 414429700, 0, &v15, &v14);
  v16 = result;
  if ((_DWORD)result)
    return result;
  if (!BinBlockStreamReader_IsVersionAccepted(v14, 0x10000))
    return err_GenerateErrorVersion();
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15 - *(_QWORD *)(*(_QWORD *)v15 + 48));
  v13 = OOCAllocator_Realloc(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 136), v12, &v16);
  *(_QWORD *)(a1 + 136) = v13;
  result = v16;
  if (!v16)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 32))(v15 - *(_QWORD *)(*(_QWORD *)v15 + 48), v13);
    v16 = result;
    if (!(_DWORD)result)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 24))(v9 - *(_QWORD *)(*(_QWORD *)v9 + 224), v15);
      v16 = result;
      if (!(_DWORD)result)
      {
        a4 = *(_QWORD *)(a1 + 136);
        return Dictionary_ConFromBuffer(a1, a2, a3, a4, a5);
      }
    }
  }
  return result;
}

uint64_t Dictionary_ConFromBuffer(uint64_t a1, uint64_t a2, char **a3, uint64_t a4, int a5)
{
  uint64_t result;
  char **v11;
  BOOL v12;
  _BOOL4 v13;
  char **v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unsigned int v22;

  result = VoConObject_Con2((_QWORD *)a1, a2);
  v22 = result;
  if (!(_DWORD)result)
  {
    *(_QWORD *)a1 = &__Dictionary;
    *(_QWORD *)(a1 + 56) = &unk_1EA937690;
    *(_QWORD *)(a1 + 64) = &unk_1EA9376A8;
    *(_QWORD *)(a1 + 72) = &unk_1EA9376E0;
    *(_QWORD *)(a1 + 80) = &unk_1EA937708;
    *(_QWORD *)(a1 + 88) = &unk_1EA937720;
    *(_QWORD *)(a1 + 96) = &unk_1EA937738;
    *(_QWORD *)(a1 + 104) = &unk_1EA937748;
    *(_QWORD *)(a1 + 112) = &unk_1EA937760;
    *(_QWORD *)(a1 + 24) = &unk_1EA937648;
    *(_QWORD *)(a1 + 120) = a2;
    *(_QWORD *)(a1 + 136) = a4;
    *(_DWORD *)(a1 + 152) = a5;
    *(_DWORD *)(a1 + 184) = 0;
    v11 = (char **)OOCAllocator_Calloc(a2, 1, 40, &v22);
    *(_QWORD *)(a1 + 144) = v11;
    result = v22;
    if (!v22)
    {
      v12 = a3 && a4 == 0;
      v13 = v12;
      if (!v12)
        goto LABEL_17;
      result = cloneString(*(_QWORD *)(a1 + 120), v11, *a3);
      v22 = result;
      if (!(_DWORD)result)
      {
        v14 = *(char ***)(a1 + 144);
        v15 = strchr(*v14, 124);
        if (v15)
        {
          *v15 = 0;
          v14 = *(char ***)(a1 + 144);
        }
        result = cloneString(*(_QWORD *)(a1 + 120), v14 + 2, a3[2]);
        v22 = result;
        if (!(_DWORD)result)
        {
          result = cloneString(*(_QWORD *)(a1 + 120), (char **)(*(_QWORD *)(a1 + 144) + 24), a3[3]);
          v22 = result;
          if (!(_DWORD)result)
          {
LABEL_17:
            result = edct_DctOpen(*(_QWORD *)(a1 + 120), *(int **)(a1 + 136), a5, (uint64_t *)(a1 + 128));
            v22 = result;
            if (!(_DWORD)result)
            {
              if (!v13)
              {
LABEL_25:
                result = __Dictionary_CheckAndFillTranscriptionSpec(a1);
                v22 = result;
                if (!(_DWORD)result)
                  return PNEW_TranscriptionTokenizer_Con(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 120), (_QWORD *)(a1 + 160));
                return result;
              }
              v21 = 0;
              v19 = 0u;
              v20 = 0u;
              v18 = 0u;
              v16 = *(_QWORD *)(a1 + 144);
              *(_QWORD *)&v20 = *(_QWORD *)(v16 + 24);
              v17 = -1;
              LODWORD(v18) = -1;
              *((_QWORD *)&v18 + 1) = 0;
              v19 = 0uLL;
              result = __ConvertDictionaryLanguageModelToEDCTModelInfo(a1, *(const char **)(v16 + 16), (void **)&v19 + 1);
              v22 = result;
              if (!(_DWORD)result)
              {
                if (**(_QWORD **)(a1 + 144))
                  *((_QWORD *)&v18 + 1) = **(_QWORD **)(a1 + 144);
                result = edct_DctInitSubDctFromTransSpec(*(_QWORD *)(a1 + 128), &v17);
                v22 = result;
                if (!(_DWORD)result)
                {
                  if (*((_QWORD *)&v19 + 1))
                    OOCAllocator_Free(*(_QWORD *)(a1 + 120), *((uint64_t *)&v19 + 1));
                  goto LABEL_25;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t cloneString(uint64_t a1, char **a2, char *__s)
{
  size_t v6;
  char *v7;
  uint64_t result;
  unsigned int v9;

  v9 = 0;
  if (__s)
  {
    v6 = strlen(__s) + 1;
    v7 = (char *)OOCAllocator_Malloc(a1, v6, &v9);
    *a2 = v7;
    result = v9;
    if (!v9)
    {
      strncpy(v7, __s, v6);
      return v9;
    }
  }
  else
  {
    result = 0;
    *a2 = 0;
  }
  return result;
}

uint64_t __ConvertDictionaryLanguageModelToEDCTModelInfo(uint64_t a1, const char *a2, void **a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unsigned int v9;

  v9 = 0;
  if (a2)
  {
    v5 = OOCAllocator_Malloc(*(_QWORD *)(a1 + 120), 129, &v9);
    *a3 = (void *)v5;
    v6 = v9;
    if (!v9)
    {
      *(_BYTE *)(v5 + 128) = 0;
      *(_OWORD *)(v5 + 96) = 0u;
      *(_OWORD *)(v5 + 112) = 0u;
      *(_OWORD *)(v5 + 64) = 0u;
      *(_OWORD *)(v5 + 80) = 0u;
      *(_OWORD *)(v5 + 32) = 0u;
      *(_OWORD *)(v5 + 48) = 0u;
      *(_OWORD *)v5 = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      v7 = strlen(a2);
      memcpy(*a3, a2, v7);
      return v9;
    }
  }
  else
  {
    v6 = 0;
    *a3 = 0;
  }
  return v6;
}

uint64_t __Dictionary_CheckAndFillTranscriptionSpec(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  int v12;

  v12 = 0;
  v11 = 0;
  result = edct_DctGetAllEntryDataSpec(*(_QWORD *)(a1 + 128), &v11, (unsigned int *)&v12);
  if (!(_DWORD)result)
  {
    if (v12)
    {
      v3 = 0;
      v4 = 0;
      while (1)
      {
        result = checkAndFillField(*(_QWORD *)(a1 + 120), 1, *(char **)(v11 + v3 + 8), *(char ***)(a1 + 144));
        if ((_DWORD)result)
          break;
        result = checkAndFillField(*(_QWORD *)(a1 + 120), 1, *(char **)(v11 + v3 + 16), (char **)(*(_QWORD *)(a1 + 144) + 8));
        if ((_DWORD)result)
          break;
        v5 = *(_QWORD *)(a1 + 120);
        v6 = v11;
        v7 = *(char **)(v11 + v3 + 24);
        v8 = *(_QWORD *)(a1 + 144);
        if (v7 && !*(_QWORD *)(v8 + 16))
        {
          result = cloneString(v5, (char **)(v8 + 16), v7);
          if ((_DWORD)result)
            return result;
          v5 = *(_QWORD *)(a1 + 120);
          v6 = v11;
          v8 = *(_QWORD *)(a1 + 144);
        }
        v9 = *(char **)(v6 + v3 + 32);
        if (v9)
        {
          if (!*(_QWORD *)(v8 + 24))
          {
            result = cloneString(v5, (char **)(v8 + 24), v9);
            if ((_DWORD)result)
              break;
          }
        }
        ++v4;
        v10 = v12;
        v3 += 40;
        if (v4 >= v12)
          return edct_DctFreeAllEntryDataSpec(*(_QWORD *)(a1 + 128), v11, v10);
      }
    }
    else
    {
      v10 = 0;
      return edct_DctFreeAllEntryDataSpec(*(_QWORD *)(a1 + 128), v11, v10);
    }
  }
  return result;
}

uint64_t Dictionary_Des(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;

  result = OOC_PlacementDeleteObject(a1[15], a1[20]);
  if (!(_DWORD)result)
  {
    result = edct_DctClose(a1[16]);
    if (!(_DWORD)result)
    {
      v3 = a1[17];
      if (v3)
        OOCAllocator_Free(a1[15], v3);
      v4 = (uint64_t *)a1[18];
      if (*v4)
      {
        OOCAllocator_Free(a1[15], *v4);
        v4 = (uint64_t *)a1[18];
      }
      if (v4[1])
      {
        OOCAllocator_Free(a1[15], v4[1]);
        v4 = (uint64_t *)a1[18];
      }
      if (v4[2])
      {
        OOCAllocator_Free(a1[15], v4[2]);
        v4 = (uint64_t *)a1[18];
      }
      if (v4[3])
      {
        OOCAllocator_Free(a1[15], v4[3]);
        v4 = (uint64_t *)a1[18];
      }
      OOCAllocator_Free(a1[15], (uint64_t)v4);
      return VoConObject_Des((uint64_t)a1);
    }
  }
  return result;
}

uint64_t Dictionary_AddWord(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  char *v8;
  const char **v9;
  size_t v10;
  uint64_t result;
  const char *v12;
  const char *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  if (!**(_QWORD **)(a1 + 144))
  {
    result = __Dictionary_CheckAndFillTranscriptionSpec(a1);
    if ((_DWORD)result)
      return result;
  }
  v8 = *(char **)a4;
  if (!*(_QWORD *)a4)
    return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"pEntrySpec->szLangInfo");
  v9 = *(const char ***)(a1 + 144);
  v10 = strlen(*v9);
  if (strncmp(v8, *v9, v10))
    return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"pEntrySpec->szLangInfo");
  v12 = *(const char **)(a4 + 8);
  if (v12)
  {
    v13 = v9[1];
    if (v13)
    {
      if (strcmp(v12, v13))
        return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"pEntrySpec->szLangOfOriginInfo");
    }
  }
  v14 = *(const char **)(a4 + 16);
  if (v14)
  {
    v15 = v9[2];
    if (v15)
    {
      if (strcmp(v14, v15))
        return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"pEntrySpec->szLangModelInfo");
    }
  }
  v16 = *(const char **)(a4 + 24);
  if (v16)
  {
    v17 = v9[3];
    if (v17)
    {
      if (strcmp(v16, v17))
        return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"pEntrySpec->szEngineVersion");
    }
  }
  v18 = strchr(v8, 124);
  v19 = v18;
  if (v18)
    *v18 = 0;
  v28 = 0uLL;
  *(_QWORD *)&v29 = 0;
  v20 = *(_DWORD *)a3 - 1;
  if (v20 < 8 && ((0x8Bu >> v20) & 1) != 0)
  {
    *(_QWORD *)&v27 = __PAIR64__(dword_1DEC64F08[v20], dword_1DEC64EE8[v20]);
  }
  else
  {
    result = kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"pTransType");
    if ((_DWORD)result)
      return result;
  }
  v21 = *(_QWORD *)(a4 + 24);
  DWORD2(v27) = -1;
  v23 = *(_QWORD *)(a3 + 8);
  v22 = *(_QWORD *)(a3 + 16);
  *((_QWORD *)&v29 + 1) = v21;
  *(_QWORD *)&v30 = v23;
  DWORD2(v30) = v22;
  if (v23)
  {
    if (*(_DWORD *)a3 == 1 && v22 && (_DWORD)v22)
    {
      v24 = (unsigned __int8 *)(v22 + v23 - 1);
      v25 = v22 - 1;
      do
      {
        if (*v24--)
          break;
        DWORD2(v30) = v25--;
      }
      while (v25 != -1);
    }
    result = __ConvertDictionaryLanguageModelToEDCTModelInfo(a1, *(const char **)(a4 + 16), (void **)&v29);
    if ((_DWORD)result)
      return result;
    if (*(_QWORD *)a4)
      *(_QWORD *)&v28 = *(_QWORD *)a4;
  }
  else
  {
    result = kaldi::PipeInputImpl::MyType((kaldi::PipeInputImpl *)"Unexpected Data!");
    if ((_DWORD)result)
      return result;
  }
  result = edct_DctAddEntry(*(_QWORD *)(a1 + 128), a2, (int *)&v27, 1u);
  if (!v19 || (_DWORD)result)
  {
    if ((_DWORD)result)
      return result;
  }
  else
  {
    *v19 = 124;
  }
  if ((_QWORD)v29)
    OOCAllocator_Free(*(_QWORD *)(a1 + 120), v29);
  return __Dictionary_CheckAndFillTranscriptionSpec(a1);
}

uint64_t Dictionary_Archive(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 344))(a1, a2, 0);
}

uint64_t Dictionary_ArchiveEx(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t result;
  char *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;

  v9 = 0;
  v8 = 0;
  result = edct_DctArchive(a1[16], 0, (int *)&v8, a3);
  v10 = result;
  if (!(_DWORD)result)
  {
    v7 = (char *)OOCAllocator_Realloc(a1[15], a1[17], v8, &v10);
    a1[17] = (uint64_t)v7;
    result = v10;
    if (!v10)
    {
      result = edct_DctArchive(a1[16], v7, (int *)&v8, a3);
      v10 = result;
      if (!(_DWORD)result)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2 - *(_QWORD *)(*(_QWORD *)a2 + 120))
          || (result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t, uint64_t))a2)(a2 - *(_QWORD *)(*(_QWORD *)a2 + 120), 341630714, 0x10000, 10), (v10 = result) == 0))
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 32))(a2 - *(_QWORD *)(*(_QWORD *)a2 + 120), 414429700, 0x10000, &v9);
          v10 = result;
          if (!(_DWORD)result)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v9 + 8))(v9 - *(_QWORD *)(*(_QWORD *)v9 + 56), a1[17], v8);
            v10 = result;
            if (!(_DWORD)result)
              return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2 - *(_QWORD *)(*(_QWORD *)a2 + 120), v9);
          }
        }
      }
    }
  }
  return result;
}

uint64_t Dictionary_BorrowTranscriptionSpec(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(a1 + 144);
  return 0;
}

uint64_t Dictionary_CastToIVoConObject(uint64_t a1)
{
  return a1 + 24;
}

uint64_t Dictionary_FetchInfo(uint64_t a1, char ***a2)
{
  const char *v4;
  char v5;
  uint64_t v6;
  uint64_t result;
  char **v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unsigned int v12;

  v12 = 0;
  v10 = 0u;
  v11 = 0u;
  v4 = **(const char ***)(a1 + 144);
  if (v4)
    goto LABEL_2;
  result = __Dictionary_CheckAndFillTranscriptionSpec(a1);
  v12 = result;
  if ((_DWORD)result)
    return result;
  v4 = **(const char ***)(a1 + 144);
  if (v4)
  {
LABEL_2:
    v5 = 0;
    v6 = strlen(v4) + 25;
  }
  else
  {
    v5 = 1;
    v6 = 24;
  }
  *a2 = (char **)OOCAllocator_Malloc(*(_QWORD *)(a1 + 120), v6, &v12);
  result = v12;
  if (!v12)
  {
    result = edct_DctGetInfo(*(_QWORD *)(a1 + 128), (uint64_t)&v10);
    v12 = result;
    if (!(_DWORD)result)
    {
      **a2 = 0;
      v8 = *a2;
      *(_QWORD *)&v9 = DWORD1(v11);
      *((_QWORD *)&v9 + 1) = DWORD2(v11);
      *(_OWORD *)(*a2 + 1) = v9;
      if ((v5 & 1) == 0)
      {
        *v8 = (char *)(v8 + 3);
        strcpy(**a2, v4);
      }
      return edct_DctFreeInfo(*(_QWORD *)(a1 + 128), (uint64_t *)&v10);
    }
  }
  return result;
}

void Dictionary_FetchKeys(uint64_t a1, char ***a2, _QWORD *a3)
{
  _DWORD *v5;
  int v7;
  uint64_t v8;
  size_t v9;
  int v10;
  char **v11;
  uint64_t v12;
  char *v13;
  int v14;
  char *__s;
  uint64_t *v16;
  int HasEnded;

  v5 = *(_DWORD **)(a1 + 128);
  if (v5[11] == 1)
    goto LABEL_2;
  __s = 0;
  v16 = 0;
  *a3 = 0;
  edct_DctItOpen(*(_QWORD *)(a1 + 120), v5, (uint64_t *)&v16);
  if (!v7)
  {
    v14 = 0;
    if (!edct_DctItHasEnded((uint64_t)v16, &v14))
    {
      v8 = 0;
      while (v14 != 1)
      {
        if (!edct_DctItCurrent((uint64_t)v16, &__s, 0, 0, 0))
        {
          v9 = strlen(__s);
          if (!edct_DctItIncrement((uint64_t)v16))
          {
            v8 += v9 + 9;
            v14 = 0;
            HasEnded = edct_DctItHasEnded((uint64_t)v16, &v14);
            if (!HasEnded)
              continue;
          }
        }
        return;
      }
      if (!edct_DctItClose(v16))
      {
        if (!v8)
        {
LABEL_2:
          *a3 = 0;
          *a2 = 0;
          return;
        }
        edct_DctItOpen(*(_QWORD *)(a1 + 120), *(_DWORD **)(a1 + 128), (uint64_t *)&v16);
        HasEnded = v10;
        if (!v10)
        {
          v11 = (char **)OOCAllocator_Malloc(*(_QWORD *)(a1 + 120), v8, &HasEnded);
          *a2 = v11;
          if (!HasEnded)
          {
            v14 = 0;
            HasEnded = edct_DctItHasEnded((uint64_t)v16, &v14);
            if (!HasEnded)
            {
              v12 = 0;
              v13 = (char *)v11 + v8;
              while (v14 != 1)
              {
                HasEnded = edct_DctItCurrent((uint64_t)v16, &__s, 0, 0, 0);
                if (!HasEnded)
                {
                  if (v11)
                  {
                    v13 += ~strlen(__s);
                    *v11++ = v13;
                    strcpy(v13, __s);
                    ++v12;
                  }
                  HasEnded = edct_DctItIncrement((uint64_t)v16);
                  if (!HasEnded)
                  {
                    v14 = 0;
                    HasEnded = edct_DctItHasEnded((uint64_t)v16, &v14);
                    if (!HasEnded)
                      continue;
                  }
                }
                return;
              }
              if (!edct_DctItClose(v16))
                *a3 = v12;
            }
          }
        }
      }
    }
  }
}

uint64_t Dictionary_FetchTranscriptionSpec(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(a1 + 144);
  return 0;
}

uint64_t Dictionary_FetchTranscriptions(uint64_t a1, char *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v8;
  uint64_t result;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int v15;
  int v16;
  unsigned int v19;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  size_t *v30;
  int v31;
  int v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  _BYTE *v36;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  void *v41;
  const void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  int v49;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58[2];
  unsigned int v59;
  unsigned int v60;

  v57 = 0;
  v54 = 0;
  v8 = *(uint64_t **)(a1 + 144);
  if (!*v8)
  {
    result = __Dictionary_CheckAndFillTranscriptionSpec(a1);
    if ((_DWORD)result)
      return result;
    v8 = *(uint64_t **)(a1 + 144);
  }
  v56 = 0;
  v58[0] = 0;
  v55 = -1;
  v58[1] = (void *)v8[3];
  result = __ConvertDictionaryLanguageModelToEDCTModelInfo(a1, (const char *)v8[2], v58);
  if (!(_DWORD)result)
  {
    if (*v8)
      v56 = *v8;
    v10 = (uint64_t *)(a1 + 168);
    result = edct_DctGetEntryData(*(_QWORD *)(a1 + 128), a2, (uint64_t)&v55, (uint64_t *)(a1 + 168), &v54);
    v59 = result;
    if (!(_DWORD)result)
    {
      if (v54)
      {
        v11 = OOCAllocator_Malloc(*(_QWORD *)(a1 + 120), 24 * v54, &v59);
        result = v59;
        if (v59)
          return result;
        if (v54)
        {
          v12 = 0;
          v52 = v11;
          v53 = a3;
          v51 = a4;
          while (1)
          {
            v13 = *v10;
            v14 = (int *)(*v10 + (v12 << 6));
            v15 = *v14;
            v16 = v14[1];
            if (v16 & 0xFFFFFFFD | *v14)
            {
              if (v15 == 1 && v16 == 1)
              {
                v21 = 0;
                v22 = 2;
              }
              else if (v15 == 3 && v16 == 1)
              {
                v21 = 0;
                v22 = 8;
              }
              else
              {
                v19 = v16 & 0xFFFFFFFE;
                if (v15 != 2 || v19 != 2)
                {
                  v21 = kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"ContentType");
                  goto LABEL_29;
                }
                v21 = 0;
                v22 = 4;
              }
            }
            else
            {
              v21 = 0;
              v22 = 1;
            }
            *(_DWORD *)(v11 + 24 * v12) = v22;
LABEL_29:
            v60 = v21;
            v23 = v13 + (v12 << 6);
            v26 = *(unsigned __int8 **)(v23 + 48);
            v25 = v23 + 48;
            v24 = v26;
            v27 = v11 + 24 * v12;
            *(_QWORD *)(v27 + 8) = v26;
            v28 = (uint64_t *)(v27 + 8);
            v29 = *(unsigned int *)(v25 + 8);
            v28[1] = v29;
            v30 = (size_t *)(v28 + 1);
            if (*v14 != 2)
            {
              if (!*v14)
              {
                v31 = *v24;
                while (v31 == 32)
                {
                  v32 = *++v24;
                  v31 = v32;
                  --v29;
                }
                v33 = *(_DWORD *)(a1 + 184);
                v34 = v31 != 35 || v33 == 0;
                v35 = !v34;
                if (v34)
                  v36 = v24;
                else
                  v36 = v24 + 1;
                v37 = v29 - v35;
                v38 = v29 - v35 - 3;
                if ((unint64_t)(v29 - v35) < 3)
                {
                  if (v37 == 2)
                    goto LABEL_55;
                  goto LABEL_56;
                }
                if (!v36[v37 - 2])
                {
                  if (v33 && v36[v38] == 35)
                  {
                    v36[v38] = 0;
                    --v37;
                  }
                  *v30 = v37 - 1;
                  v39 = OOCAllocator_Malloc(*(_QWORD *)(a1 + 120), v37 - 1, &v60);
                  result = v60;
                  if (v60)
                    return result;
                  v40 = *v30;
                  v41 = (void *)v39;
                  v42 = v36;
                  goto LABEL_66;
                }
LABEL_55:
                if (v36[v37 - 1])
                {
LABEL_56:
                  if (v33 && v36[v37 - 1] == 35)
                    v36[--v37] = 0;
                  v44 = (void *)OOCAllocator_Malloc(*(_QWORD *)(a1 + 120), v37 + 1, &v60);
                  result = v60;
                  if (v60)
                    return result;
                  memcpy(v44, v36, v37);
                  *((_BYTE *)v44 + v37) = 0;
                  *v28 = (uint64_t)v44;
                  *v30 = v37 + 1;
                }
                else
                {
                  if (v33 && v36[v37 - 2] == 35)
                  {
                    v36[v37 - 2] = 0;
                    --v37;
                  }
                  *v30 = v37;
                  v39 = OOCAllocator_Malloc(*(_QWORD *)(a1 + 120), v37, &v60);
                  result = v60;
                  if (v60)
                    return result;
                  v41 = (void *)v39;
                  v42 = v36;
                  v40 = v37;
LABEL_66:
                  memcpy(v41, v42, v40);
                  *v28 = v39;
                }
                a4 = v51;
              }
LABEL_68:
              result = v60;
              goto LABEL_69;
            }
            if (v14[1] != 3)
            {
              v43 = (void *)OOCAllocator_Malloc(*(_QWORD *)(a1 + 120), v29, &v60);
              *v28 = (uint64_t)v43;
              result = v60;
              if (v60)
                return result;
              memcpy(v43, *(const void **)v25, *v30);
              goto LABEL_68;
            }
            result = kaldi::PipeInputImpl::MyType((kaldi::PipeInputImpl *)"Invalid dictionary buffer!");
LABEL_69:
            v59 = result;
            v11 = v52;
            a3 = v53;
            if ((_DWORD)result)
              return result;
            if (++v12 >= (unint64_t)v54)
            {
              *(_DWORD *)(a1 + 176) = v54;
              *(_DWORD *)(a1 + 180) = v12;
              goto LABEL_77;
            }
          }
        }
        *(_QWORD *)(a1 + 176) = 0;
        OOCAllocator_Free(*(_QWORD *)(a1 + 120), v11);
      }
      v11 = 0;
      v12 = 0;
LABEL_77:
      if (v58[0])
        OOCAllocator_Free(*(_QWORD *)(a1 + 120), (uint64_t)v58[0]);
      result = v59;
      if (!v59)
      {
        result = TranscriptionTokenizer_FetchTranscriptions(*(_QWORD *)(a1 + 160), v11, v12, a3, a4);
        if (!(_DWORD)result)
        {
          if (!v11)
            return lhi_LogPhoneticTranscriptions(*(_QWORD *)(a1 + 40), (const char *)0x3E62B2CD, a2, *a3, *a4);
          v45 = v11;
          v46 = *(unsigned int *)(a1 + 180);
          if ((_DWORD)v46)
          {
            v47 = 0;
            v48 = (uint64_t *)(v11 + 8);
            do
            {
              v49 = *((_DWORD *)v48 - 2);
              if (v49 == 4 || v49 == 1)
              {
                OOCAllocator_Free(*(_QWORD *)(a1 + 120), *v48);
                v46 = *(unsigned int *)(a1 + 180);
              }
              ++v47;
              v48 += 3;
            }
            while (v47 < v46);
          }
          OOCAllocator_Free(*(_QWORD *)(a1 + 120), v45);
          result = edct_DctFreeEntryData(*(_QWORD *)(a1 + 128), *(_DWORD **)(a1 + 168), *(_DWORD *)(a1 + 176));
          if (!(_DWORD)result)
          {
            *(_QWORD *)(a1 + 168) = 0;
            *(_DWORD *)(a1 + 176) = 0;
            return lhi_LogPhoneticTranscriptions(*(_QWORD *)(a1 + 40), (const char *)0x3E62B2CD, a2, *a3, *a4);
          }
        }
      }
    }
  }
  return result;
}

uint64_t Dictionary_IsReadyForMerge()
{
  return 1;
}

uint64_t Dictionary_IsReadyToArchive()
{
  return 1;
}

void Dictionary_Merge(uint64_t a1, _OWORD *a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  const char *v6;
  unsigned int v7;
  uint64_t v8;
  int *v9;
  const char *v10;
  _BOOL4 v11;
  unint64_t v12;
  const char **v13;
  const char *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int v21;
  int *v22;
  char *v23;
  _DWORD *v24;
  int AllEntryDataSpec;

  AllEntryDataSpec = 0;
  v24 = 0;
  v22 = 0;
  v23 = 0;
  v19 = 0;
  v20 = 0;
  v18 = 0;
  v6 = **(const char ***)(a1 + 144);
  if (a5)
    *a5 = 0;
  v21 = 0;
  if (!PNEW_BinBlockStreamReader_Con(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 120), a2, a3, a4, (uint64_t *)&v18))
  {
    v17 = 0;
    v16 = 0;
    if ((*(unsigned int (**)(uint64_t))(v18[4] + 56))((uint64_t)v18 - *(_QWORD *)(v18[4] + 224) + 32) != 341630714)
    {
      kaldi::PipeInputImpl::MyType((kaldi::PipeInputImpl *)"Wrong Buffer Type");
      return;
    }
    v7 = (*(uint64_t (**)(uint64_t))(v18[4] + 64))((uint64_t)v18 - *(_QWORD *)(v18[4] + 224) + 32);
    if (!BinBlockStreamReader_IsVersionAccepted(v7, 0x10000))
      goto LABEL_17;
    AllEntryDataSpec = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *, unsigned int *))(v18[4] + 8))((uint64_t)v18 - *(_QWORD *)(v18[4] + 224) + 32, 414429700, 0, &v17, &v16);
    if (AllEntryDataSpec)
      return;
    if (!BinBlockStreamReader_IsVersionAccepted(v16, 0x10000))
    {
LABEL_17:
      err_GenerateErrorVersion();
      return;
    }
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17 - *(_QWORD *)(*(_QWORD *)v17 + 48));
    v9 = (int *)OOCAllocator_Malloc(*(_QWORD *)(a1 + 120), v8, &AllEntryDataSpec);
    if (!AllEntryDataSpec)
    {
      AllEntryDataSpec = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v17 + 32))(v17 - *(_QWORD *)(*(_QWORD *)v17 + 48), v9);
      if (!AllEntryDataSpec)
      {
        AllEntryDataSpec = (*(uint64_t (**)(uint64_t, uint64_t))(v18[4] + 24))((uint64_t)v18 - *(_QWORD *)(v18[4] + 224) + 32, v17);
        if (!AllEntryDataSpec)
        {
          AllEntryDataSpec = edct_DctOpen(*(_QWORD *)(a1 + 120), v9, 1, (uint64_t *)&v24);
          if (!AllEntryDataSpec)
          {
            AllEntryDataSpec = edct_DctGetAllEntryDataSpec((uint64_t)v24, &v20, &v21);
            if (!AllEntryDataSpec)
            {
              if (v21)
              {
                v10 = *(const char **)(v20 + 8);
                if (v10)
                {
                  v11 = 1;
LABEL_24:
                  if (v6)
                  {
                    if (!strcmp(v6, v10))
                      goto LABEL_26;
LABEL_34:
                    kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"pIStreamInterface");
                    return;
                  }
                  if (v11)
                    goto LABEL_34;
LABEL_26:
                  edct_DctItOpen(*(_QWORD *)(a1 + 120), v24, (uint64_t *)&v19);
                  while (1)
                  {
                    AllEntryDataSpec = v15;
                    if (v15)
                      break;
                    LODWORD(v17) = 0;
                    AllEntryDataSpec = edct_DctItHasEnded((uint64_t)v19, &v17);
                    if (AllEntryDataSpec)
                      break;
                    if ((_DWORD)v17 == 1)
                    {
                      AllEntryDataSpec = edct_DctItClose(v19);
                      if (!AllEntryDataSpec)
                      {
                        AllEntryDataSpec = edct_DctFreeAllEntryDataSpec((uint64_t)v24, v20, v21);
                        if (!AllEntryDataSpec)
                        {
                          AllEntryDataSpec = edct_DctClose((uint64_t)v24);
                          if (!AllEntryDataSpec)
                          {
                            AllEntryDataSpec = __Dictionary_CheckAndFillTranscriptionSpec(a1);
                            if (!AllEntryDataSpec)
                            {
                              AllEntryDataSpec = (*(uint64_t (**)(_QWORD *))(*v18 + 32))(v18);
                              if (!AllEntryDataSpec)
                                OOCAllocator_Free(*(_QWORD *)(a1 + 120), (uint64_t)v9);
                            }
                          }
                        }
                      }
                      return;
                    }
                    AllEntryDataSpec = edct_DctItCurrent((uint64_t)v19, &v23, &v22, &v21, 0);
                    if (AllEntryDataSpec)
                      return;
                    AllEntryDataSpec = edct_DctAddEntry(*(_QWORD *)(a1 + 128), v23, v22, v21);
                    if (AllEntryDataSpec)
                      return;
                    v15 = edct_DctItIncrement((uint64_t)v19);
                  }
                  return;
                }
                v12 = 0;
                v13 = (const char **)(v20 + 48);
                while (v21 - 1 != v12)
                {
                  v14 = *v13;
                  v13 += 5;
                  v10 = v14;
                  ++v12;
                  if (v14)
                  {
                    v11 = v12 < v21;
                    goto LABEL_24;
                  }
                }
              }
              if (v6)
                goto LABEL_34;
              goto LABEL_26;
            }
          }
        }
      }
    }
  }
}

uint64_t Dictionary_QueryInterface(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  int v4;

  switch(a2)
  {
    case 334061197:
      v3 = a1 + 96;
      goto LABEL_20;
    case 414531721:
      v3 = a1 + 64;
      goto LABEL_20;
    case 414531107:
      v3 = a1 + 72;
LABEL_20:
      *a3 = v3;
      return 0;
  }
  v4 = *(_DWORD *)(a1 + 152);
  if (a2 == 334065222 && !v4)
  {
    v3 = a1 + 80;
    goto LABEL_20;
  }
  if (a2 == 653755852 && !v4)
  {
    v3 = a1 + 56;
    goto LABEL_20;
  }
  if (a2 == 522614898 && !v4)
  {
    v3 = a1 + 88;
    goto LABEL_20;
  }
  if (a2 == 3420193956)
  {
    v3 = a1 + 112;
    goto LABEL_20;
  }
  if (a2 == 1210932136)
  {
    v3 = a1 + 104;
    goto LABEL_20;
  }
  return VoConObject_QueryInterface(a1, a2, a3);
}

uint64_t Dictionary_RemoveWord(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = edct_DctRemoveEntry(*(_QWORD *)(a1 + 128), a2);
  if (!(_DWORD)result)
    return __Dictionary_CheckAndFillTranscriptionSpec(a1);
  return result;
}

uint64_t Dictionary_ReturnInfo(uint64_t a1, uint64_t a2)
{
  if (a2)
    OOCAllocator_Free(*(_QWORD *)(a1 + 120), a2);
  return 0;
}

uint64_t Dictionary_ReturnKeys(uint64_t a1, uint64_t a2)
{
  if (a2)
    OOCAllocator_Free(*(_QWORD *)(a1 + 120), a2);
  return 0;
}

uint64_t Dictionary_ReturnTranscriptionSpec()
{
  return 0;
}

uint64_t Dictionary_ReturnTranscriptions(uint64_t a1, uint64_t a2)
{
  return TranscriptionTokenizer_ReturnTranscriptions(*(_QWORD *)(a1 + 160), a2);
}

uint64_t Dictionary_SetSilenceRemoveMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 184) = a2;
  return result;
}

uint64_t PNEW_Dictionary_Con(uint64_t a1, uint64_t a2, char **a3, _OWORD *a4, uint64_t a5, _DWORD *a6, int a7, uint64_t *a8)
{
  uint64_t v16;
  uint64_t result;
  unsigned int v18;

  v18 = 0;
  v16 = OOCAllocator_Malloc(a1, 192, &v18);
  result = v18;
  if (!v18)
  {
    result = Dictionary_Con(v16, a2, a3, a4, a5, a6, a7);
    v18 = result;
    if ((_DWORD)result)
    {
      OOCAllocator_Free(a1, v16);
      *a8 = 0;
      return v18;
    }
    else
    {
      *(_QWORD *)(v16 + 16) = a1;
      *a8 = v16;
    }
  }
  return result;
}

uint64_t checkAndFillField(uint64_t a1, int a2, char *__s, char **a4)
{
  if (!__s)
    return 0;
  if (a2 && !lhi_IsValidLanguageString((uint64_t)__s))
    return kaldi::PipeInputImpl::MyType((kaldi::PipeInputImpl *)"dictionary contains invalid language code");
  if (*a4)
    return 0;
  return cloneString(a1, a4, __s);
}

uint64_t TranscriptionTokenizer_Con(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  result = Object_Con(a1);
  if (!(_DWORD)result)
  {
    *a1 = &__TranscriptionTokenizer;
    a1[1] = a2;
    return PNEW_StringTokenizer_Con(a2, a2, a1 + 2);
  }
  return result;
}

uint64_t TranscriptionTokenizer_Des(uint64_t a1)
{
  uint64_t result;

  result = OOC_PlacementDeleteObject(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  if (!(_DWORD)result)
    return Object_Des();
  return result;
}

uint64_t TranscriptionTokenizer_FetchTranscriptions(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v7;
  _QWORD *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;

  v30 = 0;
  if (a3)
  {
    v7 = a3;
    v10 = (_QWORD *)OOCAllocator_Malloc(*(_QWORD *)(a1 + 8), 24 * a3 + 8, &v30);
    result = v30;
    if (v30)
      return result;
    v25 = a5;
    v24 = a4;
    v12 = 0;
    v13 = 0;
    v26 = (uint64_t)v10;
    *v10 = v7;
    v14 = v10 + 1;
    v15 = v7;
    do
    {
      v16 = (_DWORD *)(a2 + 24 * v13);
      if (*v16 == 1)
      {
        v28 = 0;
        v29 = 0;
        result = StringTokenizer_ExpandPhoneticMultiples(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 8), *(char **)(a2 + 24 * v13 + 8), &v29, &v28);
        v30 = result;
        if ((_DWORD)result)
          return result;
        v17 = v28;
        if (!v28)
        {
          result = __TranscriptionTokenizer_GetTranscriptionData(a1, a2 + 24 * v13, (uint64_t)&v14[3 * v12]);
          v30 = result;
          if ((_DWORD)result)
            return result;
          ++v12;
          v17 = v28;
        }
        if (v17 >= 2)
        {
          v15 = v15 + v17 - 1;
          v18 = (_QWORD *)OOCAllocator_Realloc(*(_QWORD *)(a1 + 8), v26, 24 * v15 + 8, &v30);
          result = v30;
          if (v30)
            return result;
          v26 = (uint64_t)v18;
          *v18 = v15;
          v14 = v18 + 1;
          v17 = v28;
        }
        v19 = v29;
        if (v17)
        {
          v27 = v15;
          v20 = v7;
          v21 = a2;
          v22 = 0;
          v23 = &v14[3 * v12 + 2];
          do
          {
            *((_DWORD *)v23 - 4) = *v16;
            *(v23 - 1) = *(_QWORD *)(v19 + 8 * v22);
            v19 = v29;
            *v23 = strlen(*(const char **)(v29 + 8 * v22)) + 1;
            v23 += 3;
            ++v22;
          }
          while (v22 < v28);
          v12 += v22;
          a2 = v21;
          v7 = v20;
          v15 = v27;
        }
        OOCAllocator_Free(*(_QWORD *)(a1 + 8), v19);
      }
      else
      {
        result = __TranscriptionTokenizer_GetTranscriptionData(a1, a2 + 24 * v13, (uint64_t)&v14[3 * v12]);
        v30 = result;
        if ((_DWORD)result)
          return result;
        ++v12;
      }
      ++v13;
    }
    while (v13 != v7);
    result = v30;
    a4 = v24;
    a5 = v25;
  }
  else
  {
    result = 0;
    v14 = 0;
    v15 = 0;
  }
  *a4 = v14;
  *a5 = v15;
  return result;
}

uint64_t __TranscriptionTokenizer_GetTranscriptionData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  size_t v6;
  void *v7;
  uint64_t v8;
  unsigned int v10;

  v10 = 0;
  if (*(_DWORD *)a2 == 1)
    v6 = strlen(*(const char **)(a2 + 8)) + 1;
  else
    v6 = *(_QWORD *)(a2 + 16);
  v7 = (void *)OOCAllocator_Malloc(*(_QWORD *)(a1 + 8), v6, &v10);
  *(_QWORD *)(a3 + 8) = v7;
  v8 = v10;
  if (!v10)
  {
    *(_DWORD *)a3 = *(_DWORD *)a2;
    memcpy(v7, *(const void **)(a2 + 8), v6);
    *(_QWORD *)(a3 + 16) = v6;
    return v10;
  }
  return v8;
}

uint64_t TranscriptionTokenizer_ReturnTranscriptions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  if (a2)
  {
    v3 = a2 - 8;
    v4 = *(_QWORD *)(a2 - 8);
    if (v4)
    {
      v5 = (uint64_t *)(a2 + 8);
      do
      {
        v6 = *v5;
        v5 += 3;
        OOCAllocator_Free(*(_QWORD *)(a1 + 8), v6);
        --v4;
      }
      while (v4);
    }
    OOCAllocator_Free(*(_QWORD *)(a1 + 8), v3);
  }
  return 0;
}

uint64_t PNEW_TranscriptionTokenizer_Con(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t result;
  unsigned int v8;

  v8 = 0;
  v6 = (_QWORD *)OOCAllocator_Malloc(a1, 24, &v8);
  result = v8;
  if (!v8)
  {
    result = TranscriptionTokenizer_Con(v6, a2);
    v8 = result;
    if ((_DWORD)result)
    {
      OOCAllocator_Free(a1, (uint64_t)v6);
      *a3 = 0;
      return v8;
    }
    else
    {
      *a3 = v6;
    }
  }
  return result;
}

uint64_t DestroySubDct(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = DICT_Destruct(a2 + 7);
  if (!(_DWORD)v4)
  {
    v5 = a2[3];
    if (v5)
      OOCAllocator_Free(a1, v5);
    v6 = a2[4];
    if (v6)
      OOCAllocator_Free(a1, v6);
    v7 = a2[5];
    if (v7)
      OOCAllocator_Free(a1, v7);
    v8 = a2[6];
    if (v8)
      OOCAllocator_Free(a1, v8);
  }
  return v4;
}

uint64_t edct_Close_RWDCT(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;

  v2 = a1[6];
  v3 = (_QWORD *)a1[7];
  if (*a1)
    OOCAllocator_Free(a1[6], *a1);
  v4 = a1[1];
  if (v4)
    OOCAllocator_Free(v2, v4);
  if (v3)
  {
    while (1)
    {
      v5 = (_QWORD *)v3[17];
      result = DestroySubDct(v2, v3);
      if ((_DWORD)result)
        break;
      OOCAllocator_Free(v2, (uint64_t)v3);
      v3 = v5;
      if (!v5)
        goto LABEL_8;
    }
  }
  else
  {
LABEL_8:
    OOCAllocator_Free(v2, (uint64_t)a1);
    return 0;
  }
  return result;
}

uint64_t edct_Close_RODCT(uint64_t a1)
{
  edct_Free_ROSUBDCT_List(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  OOCAllocator_Free(*(_QWORD *)(a1 + 48), a1);
  return 0;
}

uint64_t edct_Free_ROSUBDCT_List(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = result;
    if (*(_QWORD *)(a2 + 80))
      edct_Free_ROSUBDCT_List(result);
    return OOCAllocator_Free(v3, a2);
  }
  return result;
}

uint64_t edct_GetEntryDataSpec_In_RWDCT(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int *a4)
{
  _QWORD *v4;
  uint64_t v9;
  unsigned int v10;
  const char *v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  const char *v21;
  const char *v22;
  const char *v23;
  __int128 *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  unsigned int v31;

  v31 = 0;
  v4 = *(_QWORD **)(a2 + 56);
  if (!v4)
    return 0;
  LODWORD(v9) = 0;
  v10 = 0;
  do
  {
    v11 = (const char *)v4[3];
    if (v11)
      LODWORD(v9) = v9 + strlen(v11) + 41;
    else
      LODWORD(v9) = v9 + 40;
    v12 = (const char *)v4[4];
    if (v12)
      LODWORD(v9) = v9 + strlen(v12) + 1;
    v13 = (const char *)v4[6];
    if (v13)
      LODWORD(v9) = v9 + strlen(v13) + 1;
    if (v4[5])
      v9 = (v9 + 128);
    else
      v9 = v9;
    ++v10;
    v4 = (_QWORD *)v4[17];
  }
  while (v4);
  if (!(_DWORD)v9)
    return 0;
  v14 = OOCAllocator_Malloc(a1, v9, &v31);
  result = v31;
  if (!v31)
  {
    v16 = *(_QWORD *)(a2 + 56);
    if (v16)
    {
      v17 = v14 + 40 * v10;
      v18 = v14 + 16;
      do
      {
        v19 = *(_DWORD *)(v16 + 8);
        v20 = *(_DWORD *)(v16 + 16);
        *(_OWORD *)(v18 - 8) = 0u;
        *(_DWORD *)(v18 - 16) = v19;
        *(_DWORD *)(v18 - 12) = v20;
        *(_OWORD *)(v18 + 8) = 0u;
        v21 = *(const char **)(v16 + 24);
        if (v21)
        {
          *(_QWORD *)(v18 - 8) = v17;
          strcpy((char *)v17, v21);
          v17 += strlen(*(const char **)(v16 + 24)) + 1;
        }
        v22 = *(const char **)(v16 + 32);
        if (v22)
        {
          *(_QWORD *)v18 = v17;
          strcpy((char *)v17, v22);
          v17 += strlen(*(const char **)(v16 + 32)) + 1;
        }
        v23 = *(const char **)(v16 + 48);
        if (v23)
        {
          *(_QWORD *)(v18 + 16) = v17;
          strcpy((char *)v17, v23);
          v17 += strlen(*(const char **)(v16 + 48)) + 1;
        }
        v24 = *(__int128 **)(v16 + 40);
        if (v24)
        {
          *(_QWORD *)(v18 + 8) = v17;
          v25 = *v24;
          v26 = v24[1];
          v27 = v24[3];
          *(_OWORD *)(v17 + 32) = v24[2];
          *(_OWORD *)(v17 + 48) = v27;
          *(_OWORD *)v17 = v25;
          *(_OWORD *)(v17 + 16) = v26;
          v28 = v24[4];
          v29 = v24[5];
          v30 = v24[7];
          *(_OWORD *)(v17 + 96) = v24[6];
          *(_OWORD *)(v17 + 112) = v30;
          *(_OWORD *)(v17 + 64) = v28;
          *(_OWORD *)(v17 + 80) = v29;
          v17 += 128;
        }
        v16 = *(_QWORD *)(v16 + 136);
        v18 += 40;
      }
      while (v16);
      result = v31;
    }
    else
    {
      result = 0;
    }
    *a3 = v14;
    *a4 = v10;
  }
  return result;
}

uint64_t edct_GetEntryDataSpec_In_RODCT(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v8;
  unsigned int v9;
  const char *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  const char *v20;
  const char *v21;
  const char *v22;
  __int128 *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  unsigned int v30;

  v30 = 0;
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD **)(a1 + 56);
  if (!v4)
    return 0;
  LODWORD(v8) = 0;
  v9 = 0;
  do
  {
    v10 = (const char *)v4[2];
    if (v10)
      LODWORD(v8) = v8 + strlen(v10) + 41;
    else
      LODWORD(v8) = v8 + 40;
    v11 = (const char *)v4[3];
    if (v11)
      LODWORD(v8) = v8 + strlen(v11) + 1;
    v12 = (const char *)v4[5];
    if (v12)
      LODWORD(v8) = v8 + strlen(v12) + 1;
    if (v4[4])
      v8 = (v8 + 128);
    else
      v8 = v8;
    ++v9;
    v4 = (_QWORD *)v4[10];
  }
  while (v4);
  if (!(_DWORD)v8)
    return 0;
  v13 = OOCAllocator_Malloc(v3, v8, &v30);
  result = v30;
  if (!v30)
  {
    v15 = *(uint64_t **)(a1 + 56);
    if (v15)
    {
      v16 = v13 + 40 * v9;
      v17 = v13 + 16;
      do
      {
        v18 = *v15;
        if (!*v15)
          v18 = v15[1];
        *(_DWORD *)(v17 - 16) = *(_DWORD *)(v18 + 8);
        v19 = *(_DWORD *)(v18 + 16);
        *(_OWORD *)(v17 - 8) = 0u;
        *(_DWORD *)(v17 - 12) = v19;
        *(_OWORD *)(v17 + 8) = 0u;
        v20 = (const char *)v15[2];
        if (v20)
        {
          *(_QWORD *)(v17 - 8) = v16;
          strcpy((char *)v16, v20);
          v16 += strlen((const char *)v15[2]) + 1;
        }
        v21 = (const char *)v15[3];
        if (v21)
        {
          *(_QWORD *)v17 = v16;
          strcpy((char *)v16, v21);
          v16 += strlen((const char *)v15[3]) + 1;
        }
        v22 = (const char *)v15[5];
        if (v22)
        {
          *(_QWORD *)(v17 + 16) = v16;
          strcpy((char *)v16, v22);
          v16 += strlen((const char *)v15[5]) + 1;
        }
        v23 = (__int128 *)v15[4];
        if (v23)
        {
          *(_QWORD *)(v17 + 8) = v16;
          v24 = *v23;
          v25 = v23[1];
          v26 = v23[3];
          *(_OWORD *)(v16 + 32) = v23[2];
          *(_OWORD *)(v16 + 48) = v26;
          *(_OWORD *)v16 = v24;
          *(_OWORD *)(v16 + 16) = v25;
          v27 = v23[4];
          v28 = v23[5];
          v29 = v23[7];
          *(_OWORD *)(v16 + 96) = v23[6];
          *(_OWORD *)(v16 + 112) = v29;
          *(_OWORD *)(v16 + 64) = v27;
          *(_OWORD *)(v16 + 80) = v28;
          v16 += 128;
        }
        v15 = (uint64_t *)v15[10];
        v17 += 40;
      }
      while (v15);
      result = v30;
    }
    else
    {
      result = 0;
    }
    *a2 = v13;
    *a3 = v9;
  }
  return result;
}

uint64_t edct_RemoveEntry_RWDCT(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v5;
  int v6;
  int v7;
  uint64_t result;
  int v9;
  int v10;
  int v11;

  v2 = *(_QWORD *)(a1 + 56);
  v11 = -1;
  if (!v2)
    return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"szEntry");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  while (1)
  {
    v10 = 0;
    result = DICT_Remove(v2 + 56, a2, &v10, &v11);
    if ((_DWORD)result)
      break;
    if (!v11)
    {
      v9 = *(_DWORD *)(v2 + 4) - v10;
      --*(_DWORD *)v2;
      *(_DWORD *)(v2 + 4) = v9;
      v6 += v10;
      ++v5;
      v7 = 1;
    }
    v2 = *(_QWORD *)(v2 + 136);
    if (!v2)
    {
      *(_DWORD *)(a1 + 24) -= v6;
      if (v5)
        --*(_DWORD *)(a1 + 20);
      if (v7)
        return 0;
      return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"szEntry");
    }
  }
  return result;
}

uint64_t edct_FreeEntryDataSpec_In_RWDCT(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OOCAllocator_Free(a1, a3);
  return 0;
}

uint64_t edct_EntryFree_In_RWDCT(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  if (a4)
  {
    v6 = a3 + ((unint64_t)a4 << 6);
    v7 = (_QWORD *)a3;
    do
    {
      v8 = v7[2];
      if (v8 || (v8 = v7[3]) != 0 || (v8 = v7[4]) != 0 || (v8 = v7[5]) != 0)
        OOCAllocator_Free(a1, v8);
      OOCAllocator_Free(a1, v7[6]);
      v7 += 8;
    }
    while ((unint64_t)v7 < v6);
  }
  OOCAllocator_Free(a1, a3);
  return 0;
}

uint64_t edct_EntryFree_In_RODCT(uint64_t a1, _DWORD *a2, unsigned int a3)
{
  _DWORD *v5;
  _DWORD *v6;

  if (a3)
  {
    v5 = &a2[16 * (unint64_t)a3];
    v6 = a2;
    do
    {
      if ((*a2 | 2) == 3)
        OOCAllocator_Free(a1, *((_QWORD *)v6 + 6));
      v6 += 16;
    }
    while (v6 < v5);
  }
  return OOCAllocator_Free(a1, (uint64_t)a2);
}

uint64_t edct_CheckEntryDataHealth(uint64_t a1)
{
  if (*(_DWORD *)a1 || *(_DWORD *)(a1 + 56) && **(_BYTE **)(a1 + 48))
    return 0;
  else
    return kaldi::PipeInputImpl::MyType((kaldi::PipeInputImpl *)"Unexpected Data!");
}

uint64_t edct_AddEntry_RWDCT(uint64_t a1, char *a2, int *a3, _DWORD *a4)
{
  uint64_t result;
  _DWORD *SubDct;
  int v10;
  _DWORD *v11;

  v10 = -1;
  *a4 = 2;
  if (!*a2)
    return kaldi::PipeInputImpl::MyType((kaldi::PipeInputImpl *)"empty string");
  result = edct_QuickEntryFind_RWDCT(a1, (uint64_t)a2, &v10);
  if (!(_DWORD)result)
  {
    if (v10 == 1)
    {
      ++*(_DWORD *)(a1 + 20);
      *a4 = 0;
    }
    SubDct = (_DWORD *)GetSubDct(a1, a3);
    v11 = SubDct;
    if (SubDct
      || (result = CreateSubDct(a1, (uint64_t *)&v11), !(_DWORD)result)
      && (SubDct = v11, result = InitSubDct((uint64_t)v11, *(_QWORD *)(a1 + 48), (uint64_t *)a3), !(_DWORD)result))
    {
      result = AddEntrySubDct(SubDct, a2, (uint64_t)a3);
      if (!(_DWORD)result)
        ++*(_DWORD *)(a1 + 24);
    }
  }
  return result;
}

uint64_t edct_QuickEntryFind_RWDCT(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t result;
  _QWORD v7[3];

  v4 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    while (1)
    {
      memset(v7, 0, sizeof(v7));
      *(_DWORD *)(v4 + 120) = -1;
      result = DICT_Find(v4 + 56, a2, (uint64_t)v7, a3);
      if ((_DWORD)result)
        break;
      if (!*a3)
        return 0;
      v4 = *(_QWORD *)(v4 + 136);
      if (!v4)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    result = 0;
    *a3 = 1;
  }
  return result;
}

uint64_t GetSubDct(uint64_t a1, int *a2)
{
  uint64_t v2;
  int v4;
  int v5;
  int v7;
  int v8;
  int v10;
  int v11;
  const char *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  const char *v18;
  const void *v19;
  const void *v20;

  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    return v2;
  v4 = *a2;
  while (1)
  {
    v5 = *(_DWORD *)(v2 + 8);
    if (v5 != -1 && v5 != v4)
      goto LABEL_38;
    v7 = *(_DWORD *)(v2 + 16);
    v8 = a2[2];
    if (v7 != -1 && v7 != v8)
      goto LABEL_38;
    v10 = *(_DWORD *)(v2 + 12);
    v11 = a2[1];
    if (v10 != -1 && v10 != v11)
      goto LABEL_38;
    v13 = *(const char **)(v2 + 24);
    v14 = (const char *)*((_QWORD *)a2 + 2);
    if (v13 && v14)
    {
      if (strcmp(v13, v14))
        goto LABEL_38;
    }
    else if (v13 != v14)
    {
      goto LABEL_38;
    }
    v15 = *(const char **)(v2 + 32);
    v16 = (const char *)*((_QWORD *)a2 + 3);
    if (v15 && v16)
    {
      if (strcmp(v15, v16))
        goto LABEL_38;
    }
    else if (v15 != v16)
    {
      goto LABEL_38;
    }
    v17 = *(const char **)(v2 + 48);
    v18 = (const char *)*((_QWORD *)a2 + 5);
    if (v17 && v18)
    {
      if (strcmp(v17, v18))
        goto LABEL_38;
    }
    else if (v17 != v18)
    {
      goto LABEL_38;
    }
    v19 = *(const void **)(v2 + 40);
    v20 = (const void *)*((_QWORD *)a2 + 4);
    if (!v19 || !v20)
      break;
    if (!memcmp(v19, v20, 0x80uLL))
      goto LABEL_40;
LABEL_38:
    v2 = *(_QWORD *)(v2 + 136);
    if (!v2)
      return v2;
  }
  if (v19 != v20)
    goto LABEL_38;
LABEL_40:
  if ((v7 & v5 & v10) == 0xFFFFFFFF)
  {
    *(_DWORD *)(v2 + 8) = v4;
    *(_DWORD *)(v2 + 12) = v11;
    *(_DWORD *)(v2 + 16) = v8;
  }
  return v2;
}

uint64_t CreateSubDct(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unsigned int v8;

  v8 = 0;
  v3 = (uint64_t *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = OOCAllocator_Calloc(*(_QWORD *)(a1 + 48), 1, 144, &v8);
  result = v8;
  if (!v8)
  {
    if (v4)
    {
      do
      {
        v7 = v4;
        v4 = *(_QWORD *)(v4 + 136);
      }
      while (v4);
      v3 = (uint64_t *)(v7 + 136);
    }
    *v3 = v5;
    *(_QWORD *)(v5 + 136) = 0;
    *a2 = v5;
  }
  return result;
}

uint64_t InitSubDct(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  char **v7;
  const char *v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  const char *v12;
  size_t v13;
  char *v14;
  _OWORD *v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  const char *v23;
  size_t v24;
  char *v25;
  unsigned int v27;

  v27 = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a3 + 2);
  v6 = *a3;
  *(_OWORD *)(a1 + 24) = 0u;
  v7 = (char **)(a1 + 24);
  *(_QWORD *)(a1 + 8) = v6;
  *(_OWORD *)(a1 + 40) = 0u;
  v8 = (const char *)a3[2];
  if (v8)
  {
    v9 = strlen(v8);
    v10 = (char *)OOCAllocator_Malloc(a2, v9 + 1, &v27);
    *v7 = v10;
    v11 = v27;
    if (v27)
      return v11;
    strcpy(v10, (const char *)a3[2]);
  }
  v12 = (const char *)a3[3];
  if (v12)
  {
    v13 = strlen(v12);
    v14 = (char *)OOCAllocator_Malloc(a2, v13 + 1, &v27);
    *(_QWORD *)(a1 + 32) = v14;
    v11 = v27;
    if (v27)
      return v11;
    strcpy(v14, (const char *)a3[3]);
  }
  if (a3[4])
  {
    v15 = (_OWORD *)OOCAllocator_Malloc(a2, 129, &v27);
    *(_QWORD *)(a1 + 40) = v15;
    v11 = v27;
    if (v27)
      return v11;
    v16 = (__int128 *)a3[4];
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[3];
    v15[2] = v16[2];
    v15[3] = v19;
    *v15 = v17;
    v15[1] = v18;
    v20 = v16[4];
    v21 = v16[5];
    v22 = v16[7];
    v15[6] = v16[6];
    v15[7] = v22;
    v15[4] = v20;
    v15[5] = v21;
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 128) = 0;
  }
  v23 = (const char *)a3[5];
  if (!v23)
    return DICT_Init(a1 + 56, a2, 10000, 50000);
  v24 = strlen(v23);
  v25 = (char *)OOCAllocator_Malloc(a2, v24 + 1, &v27);
  *(_QWORD *)(a1 + 48) = v25;
  v11 = v27;
  if (!v27)
  {
    strcpy(v25, (const char *)a3[5]);
    return DICT_Init(a1 + 56, a2, 10000, 50000);
  }
  return v11;
}

uint64_t AddEntrySubDct(_DWORD *a1, char *a2, uint64_t a3)
{
  uint64_t result;
  int v5;

  v5 = -1;
  result = DICT_Add((uint64_t)(a1 + 14), a2, *(void **)(a3 + 48), *(_DWORD *)(a3 + 56), &v5);
  if (!(_DWORD)result)
  {
    if (v5)
      ++*a1;
    ++a1[1];
  }
  return result;
}

uint64_t edct_Open_RODCT(uint64_t a1, int *a2, uint64_t *a3)
{
  int v3;
  const char *v4;
  int v5;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  int v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  const char **v21;
  const char *v22;
  const char *v23;
  int v24;
  BOOL v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  int v29;
  size_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  char *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  int v39;
  BOOL v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  const char *v45;
  _QWORD *v46;
  unsigned int v47;

  v47 = 0;
  v4 = (const char *)(a2 + 6);
  v3 = *a2;
  *a3 = 0;
  v5 = v3 & 0xFFFFFF;
  if ((v3 & 0xFFFFFFu) - 8 < 0xFFFFFFFE || a2[2])
    return kaldi::OffsetFileInputImpl::MyType((kaldi::OffsetFileInputImpl *)"pDctBuf");
  v10 = OOCAllocator_Calloc(a1, 1, 64, &v47);
  result = v47;
  if (!v47)
  {
    *(_DWORD *)(v10 + 32) = 1;
    *(_QWORD *)(v10 + 48) = a1;
    *(_QWORD *)(v10 + 20) = *(_QWORD *)(a2 + 3);
    v11 = strlen(v4);
    v12 = (v11 + 1);
    if (v11)
      v13 = v4;
    else
      v13 = 0;
    *(_QWORD *)v10 = v13;
    v14 = &v4[v12];
    v15 = strlen(&v4[v12]);
    if (v15)
      v16 = v14;
    else
      v16 = 0;
    v43 = v10;
    *(_QWORD *)(v10 + 8) = v16;
    v17 = a2[5];
    if ((_DWORD)v17)
    {
      v18 = OOCAllocator_Calloc(a1, 1, 88, &v47);
      *(_QWORD *)(v10 + 56) = v18;
      result = v47;
      if (v47)
        return result;
      v46 = (_QWORD *)v18;
      v19 = a2[5];
      if ((_DWORD)v19)
      {
        v20 = 0;
        v45 = &v14[v15
                 + 1
                 + ((((_BYTE)v14 + v15 + 1) ^ (2 * ((_BYTE)v14 + v15 + 1))) & 3)];
        v44 = &v45[4 * v17];
        v21 = (const char **)v18;
        while (1)
        {
          v22 = &v44[*(unsigned int *)&v45[4 * v20]];
          if (v5 == 6)
            break;
          v21[1] = v22;
          v23 = v22 + 52;
          if (*v21)
          {
            v22 = *v21;
            goto LABEL_19;
          }
          if (*((_DWORD *)v22 + 5))
          {
            v21[2] = v23;
            v23 += strlen(v22 + 52) + 1;
          }
          else
          {
            v21[2] = 0;
          }
          if (*((_DWORD *)v22 + 6))
          {
            v21[3] = v23;
            v23 += strlen(v23) + 1;
          }
          else
          {
            v21[3] = 0;
          }
          v39 = *((_DWORD *)v22 + 7);
          v40 = v39 == 0;
          if (v39)
            v41 = v23;
          else
            v41 = 0;
          v42 = 129;
          if (v40)
            v42 = 0;
          v28 = &v23[v42];
          v21[4] = v41;
          if (!*((_DWORD *)v22 + 8))
          {
            v31 = (uint64_t)&v28[(v28 ^ (2 * (_BYTE)v28)) & 3];
            v21[5] = 0;
            v21[6] = (const char *)v31;
            goto LABEL_31;
          }
          v22 = 0;
          v29 = 1;
LABEL_29:
          v21[5] = v28;
          v30 = strlen(v28);
          v31 = (uint64_t)&v28[v30
                            + 1
                            + (((v30 + (_BYTE)v28 + 1) ^ (2 * (v30 + (_BYTE)v28 + 1))) & 3)];
          v21[6] = (const char *)v31;
          if (!v29)
            goto LABEL_33;
          v22 = v21[1];
LABEL_31:
          v32 = (unsigned int *)(v31 + 4 * *((unsigned int *)v22 + 9));
          v33 = *v32++;
          v34 = (char *)v32
              + v33
              + ((((_BYTE)v32 + v33) ^ (2 * ((_BYTE)v32 + v33))) & 3);
          v21[7] = (const char *)v32;
          v21[8] = v34;
          v35 = (unsigned int *)(v21[1] + 36);
LABEL_34:
          v21[9] = &v34[4 * *v35 + 4];
          if (++v20 < v19)
          {
            v21 = (const char **)OOCAllocator_Calloc(a1, 1, 88, &v47);
            v46[10] = v21;
            result = v47;
            v46 = v21;
            if (v47)
              return result;
          }
          v19 = a2[5];
          if (v20 >= v19)
            goto LABEL_52;
        }
        *v21 = v22;
        v23 = v22 + 48;
LABEL_19:
        if (*((_DWORD *)v22 + 5))
        {
          v21[2] = v23;
          v23 += strlen(v23) + 1;
        }
        else
        {
          v21[2] = 0;
        }
        v24 = *((_DWORD *)v22 + 6);
        v25 = v24 == 0;
        if (v24)
          v26 = v23;
        else
          v26 = 0;
        v27 = 129;
        if (v25)
          v27 = 0;
        v28 = &v23[v27];
        v21[3] = 0;
        v21[4] = v26;
        if (!*((_DWORD *)v22 + 7))
        {
          v31 = (uint64_t)&v28[(v28 ^ (2 * (_BYTE)v28)) & 3];
          v21[5] = 0;
          v21[6] = (const char *)v31;
LABEL_33:
          v36 = *((_DWORD *)v22 + 8);
          v35 = (unsigned int *)(v22 + 32);
          v37 = (unsigned int *)(v31 + 4 * v36);
          v38 = *v37++;
          v34 = (char *)v37
              + v38
              + ((((_BYTE)v37 + v38) ^ (2 * ((_BYTE)v37 + v38))) & 3);
          v21[7] = (const char *)v37;
          v21[8] = v34;
          goto LABEL_34;
        }
        v29 = 0;
        goto LABEL_29;
      }
    }
LABEL_52:
    result = 0;
    *a3 = v43;
  }
  return result;
}

