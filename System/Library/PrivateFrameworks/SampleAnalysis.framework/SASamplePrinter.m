@implementation SASamplePrinter

- (void)printReport
{
  void *v2;
  const __CFString *v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  void *v7;
  BOOL v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  void *v17;
  int v18;
  NSObject *v19;
  void *v20;
  _BOOL4 v21;
  double v22;
  void *v23;
  _BOOL4 v24;
  id v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t j;
  void *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t k;
  void *v47;
  void *v48;
  uint64_t v49;
  void *v50;
  void *v51;
  int v52;
  _BOOL4 v53;
  uint64_t v54;
  id v55;
  void *v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  unint64_t v68;
  void *v69;
  void *v70;
  int v71;
  NSObject *v72;
  int v73;
  NSObject *v74;
  int v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t m;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  BOOL v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  SAHIDStepSample *v92;
  uint64_t v93;
  void *v94;
  id v95;
  char *v96;
  id v97;
  SAHIDStepSample *v98;
  void *v99;
  void *v100;
  uint64_t v101;
  unint64_t v102;
  void *v103;
  void *v104;
  uint64_t v105;
  void *v106;
  void *v107;
  uint64_t v108;
  void *v109;
  void *v110;
  id *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  char *v117;
  char *v118;
  void *v119;
  void *n;
  void *v121;
  char *v122;
  BOOL v123;
  void *v124;
  int v125;
  void *v126;
  char *v127;
  id v128;
  void *v129;
  uint64_t v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  const char *v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  uint64_t v152;
  void *v153;
  const __CFString *v154;
  void *v155;
  uint64_t v156;
  void *v157;
  const __CFString *v158;
  void *v159;
  id v160;
  void *v161;
  void *v162;
  _QWORD *v163;
  uint64_t v164;
  id v165;
  id v166;
  int v167;
  NSObject *v168;
  id v169;
  uint64_t v170;
  id v171;
  uint64_t v172;
  id v173;
  id v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  BOOL v181;
  id v182;
  void *v183;
  void *v184;
  id v185;
  void *v186;
  void *v187;
  id v188;
  int v189;
  unint64_t v190;
  uint64_t v191;
  int v192;
  int v193;
  void *v194;
  int v195;
  NSObject *v196;
  id v197;
  uint64_t v198;
  char v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  id v207;
  id v208;
  id v209;
  void *v210;
  id v211;
  id v212;
  uint64_t v213;
  void (**v214)(_QWORD, _QWORD);
  id v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t jj;
  int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void *v225;
  uint64_t v226;
  id v227;
  id v228;
  void **v229;
  __int128 *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  _QWORD *v234;
  void *v235;
  void *v236;
  id v237;
  void *v238;
  id v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t ii;
  void *v243;
  BOOL v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  void *v249;
  void *v250;
  void *v251;
  int v252;
  uint64_t v253;
  void *v254;
  uint64_t v255;
  uint64_t v256;
  void *v257;
  void *v258;
  void *v259;
  int v260;
  uint64_t v261;
  void *v262;
  uint64_t v263;
  void *v264;
  void *v265;
  void *v266;
  void *v267;
  uint64_t v268;
  void *v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  uint64_t v278;
  id v279;
  void *v280;
  void *v281;
  id v282;
  void *v283;
  unsigned __int8 v284;
  void *v285;
  void *v286;
  void *v287;
  int v288;
  uint64_t v289;
  uint64_t v290;
  void *v291;
  void *v292;
  uint64_t v293;
  char v294;
  uint64_t v295;
  uint64_t kk;
  void *v297;
  void *v298;
  void *v299;
  BOOL v300;
  void *v301;
  void *v302;
  void *v303;
  void *v304;
  void *v305;
  void *v306;
  void *v307;
  void *v308;
  void *v309;
  void *v310;
  void *v311;
  void *v312;
  uint64_t v313;
  void *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t mm;
  void *v318;
  void *v319;
  void *v320;
  BOOL v321;
  void *v322;
  void *v323;
  void *v324;
  BOOL v325;
  int v326;
  void *v327;
  void *v328;
  uint64_t v329;
  uint64_t nn;
  void *v331;
  uint64_t v332;
  uint64_t v333;
  void *v334;
  void *v335;
  void *v336;
  __CFString *v337;
  void *v338;
  void *v339;
  const __CFString *v340;
  void *v341;
  uint64_t v342;
  uint64_t i1;
  void *v344;
  uint64_t v345;
  uint64_t v346;
  void *v347;
  void *v348;
  void *v349;
  void *v350;
  void *v351;
  __CFString *v352;
  const __CFString *v353;
  _BYTE *v354;
  char v355;
  void *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t i2;
  void *v360;
  void *v361;
  uint64_t v362;
  BOOL v363;
  double v364;
  void *v365;
  void *v366;
  void *v367;
  double v368;
  double v369;
  void *v370;
  double v371;
  double v372;
  void *v373;
  void *v374;
  void *v375;
  char v376;
  void *v377;
  void *v378;
  void *v379;
  char v380;
  const __CFString *v381;
  char v382;
  uint64_t v383;
  void *v384;
  BOOL v385;
  uint64_t v386;
  char v387;
  uint64_t v388;
  uint64_t i3;
  void *v390;
  void *v391;
  void *v392;
  double v393;
  double v394;
  double v395;
  double v396;
  double v397;
  double v398;
  double v399;
  double v400;
  double v401;
  double v402;
  double v403;
  unint64_t v404;
  void *v405;
  size_t v406;
  id v407;
  uint64_t v408;
  uint64_t *v409;
  unint64_t v410;
  uint64_t v411;
  int v412;
  uint64_t v413;
  void *v414;
  uint64_t v415;
  int v416;
  void *v417;
  void *v418;
  void *v419;
  int v420;
  NSObject *v421;
  _BYTE *v422;
  void *v423;
  int v424;
  void *v425;
  void *v426;
  uint64_t v427;
  void *v428;
  void *v429;
  void *v430;
  void *v431;
  int v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  NSObject *v439;
  id v440;
  uint64_t v441;
  char v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  int v449;
  NSObject *v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  int v457;
  NSObject *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  char v465;
  id v466;
  id v467;
  id v468;
  void *v469;
  id v470;
  char v471;
  uint64_t v472;
  void *v473;
  void *v474;
  uint64_t v475;
  char v476;
  uint64_t v477;
  void *v478;
  void *v479;
  void *v480;
  void *v481;
  void *v482;
  void *v483;
  void *v484;
  void *v485;
  void *v486;
  void *v487;
  void *v488;
  void *v489;
  void *v490;
  void *v491;
  void *v492;
  uint64_t v493;
  void *v494;
  void *context;
  id *location;
  id *v497;
  id obj;
  char *obja;
  SEL v500;
  unint64_t v501;
  id v502;
  unint64_t v503;
  id v504;
  id v505;
  char *v506;
  unint64_t v507;
  uint64_t v508;
  unint64_t v509;
  id v510;
  char *v511;
  char *v512;
  id v513;
  char *v514;
  id v515;
  uint64_t v516;
  id v517;
  unint64_t v518;
  id v519;
  id v520;
  id v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  id v525;
  id v526;
  char *v527;
  id v528;
  id v529;
  id v530;
  id v531;
  id v532;
  id v533;
  id v534;
  char *inited;
  id v536;
  id v537;
  char v538;
  id v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  void *v543;
  void *v544;
  uint64_t v545;
  id v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t *v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t (*v559)(uint64_t, uint64_t);
  void (*v560)(uint64_t);
  id v561;
  uint8_t v562[8];
  uint64_t v563;
  uint64_t v564;
  uint64_t (*v565)(uint64_t, uint64_t);
  void (*v566)(uint64_t);
  id v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  __int128 v579;
  uint8_t v580[8];
  uint8_t *v581;
  uint64_t v582;
  uint64_t v583;
  _BYTE buf[24];
  uint64_t v585;
  __int128 v586;
  __int128 v587;
  __int128 v588;
  __int128 v589;
  uint64_t *v590;
  uint8_t *v591;
  char v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  __int128 v596;
  uint8_t v597[32];
  __int128 v598;
  __int128 v599;
  __int128 v600;
  __int128 v601;
  __int128 v602;
  __int128 v603;
  uint8_t v604[4];
  uint64_t v605;
  __int16 v606;
  int v607;
  __int16 v608;
  void *v609;
  __int16 v610;
  uint64_t v611;
  __int16 v612;
  void *v613;
  uint64_t v614;

  v614 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  context = (void *)MEMORY[0x1BCCCC288]();
  if (!*(_QWORD *)(a1 + 8))
  {
    v432 = *__error();
    _sa_logt();
    v230 = (__int128 *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled((os_log_t)v230, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v604 = 0;
      _os_log_error_impl(&dword_1B9BE0000, (os_log_t)v230, OS_LOG_TYPE_ERROR, "nil stream", v604, 2u);
    }

    *__error() = v432;
    _SASetCrashLogMessage(1968, "nil stream", v433, v434, v435, v436, v437, v438, v465);
    _os_crash();
    __break(1u);
LABEL_477:
    v408 = *__error();
    _sa_logt();
    v439 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v439, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v497, "debugDescription");
      v440 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v441 = objc_msgSend(v440, "UTF8String");
      *(_DWORD *)v580 = 136315138;
      *(_QWORD *)((char *)v230 + 196) = v441;
      _os_log_error_impl(&dword_1B9BE0000, v439, OS_LOG_TYPE_ERROR, "%s: No main binary printing multiple tasks", v580, 0xCu);

    }
    *__error() = v408;
    objc_msgSend(v497, "debugDescription");
    v407 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v442 = objc_msgSend(v407, "UTF8String");
    _SASetCrashLogMessage(5852, "%s: No main binary printing multiple tasks", v443, v444, v445, v446, v447, v448, v442);

    _os_crash();
    __break(1u);
    goto LABEL_480;
  }
  if (objc_msgSend(*(id *)(a1 + 160), "isEmpty"))
  {
    v2 = *(void **)(a1 + 8);
    v3 = CFSTR("No samples\n");
LABEL_11:
    objc_msgSend(v2, "appendString:", v3);
    goto LABEL_12;
  }
  if ((-[SASamplePrinter checkForBadOptions](a1) & 1) != 0)
    goto LABEL_12;
  if (-[SASamplePrinter hasTimeIndexes](a1))
  {
    v4 = *(_QWORD *)(a1 + 48);
    if (v4 == 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_10;
    v5 = *(_QWORD *)(a1 + 56);
    if (v5 == 0x7FFFFFFFFFFFFFFFLL || v4 > v5)
      goto LABEL_10;
  }
  else if (!*(_QWORD *)(a1 + 64))
  {
LABEL_10:
    v2 = *(void **)(a1 + 8);
    v3 = CFSTR("No samples for specified time interval\n");
    goto LABEL_11;
  }
  if (!*(_QWORD *)(a1 + 32))
  {
    v449 = *__error();
    _sa_logt();
    v450 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v450, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v604 = 0;
      _os_log_error_impl(&dword_1B9BE0000, v450, OS_LOG_TYPE_ERROR, "nil reportStartTime", v604, 2u);
    }

    *__error() = v449;
    _SASetCrashLogMessage(1990, "nil reportStartTime", v451, v452, v453, v454, v455, v456, v465);
    _os_crash();
    __break(1u);
LABEL_484:
    v457 = *__error();
    _sa_logt();
    v458 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v458, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v604 = 0;
      _os_log_error_impl(&dword_1B9BE0000, v458, OS_LOG_TYPE_ERROR, "nil reportEndTime", v604, 2u);
    }

    *__error() = v457;
    _SASetCrashLogMessage(1991, "nil reportEndTime", v459, v460, v461, v462, v463, v464, v465);
    _os_crash();
    __break(1u);
  }
  if (!*(_QWORD *)(a1 + 40))
    goto LABEL_484;
  objc_msgSend(*(id *)(a1 + 160), "symbolicate");
  v6 = *(void **)(a1 + 160);
  v541 = MEMORY[0x1E0C809B0];
  v542 = 3221225472;
  v543 = __29__SASamplePrinter_preprocess__block_invoke;
  v544 = &unk_1E7147520;
  v540 = a1;
  v545 = a1;
  objc_msgSend(v6, "enumerateTasks:", &v541);
  objc_msgSend(*(id *)(a1 + 160), "exclaves");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7 == 0;

  if (!v8)
  {
    -[SASampleStore lastTaskWithPid:](*(_QWORD **)(a1 + 160), 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (v9)
    {
      -[SASamplePrinter binaryImagesHitByTask:](a1, v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_QWORD *)v562 = MEMORY[0x1E0C809B0];
      v563 = 3221225472;
      v564 = (uint64_t)__29__SASamplePrinter_preprocess__block_invoke_2;
      v565 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E71490B8;
      v566 = (void (*)(uint64_t))a1;
      v11 = v10;
      v567 = v11;
      -[SATask enumerateFrames:]((uint64_t)v9, v562);
      v578 = 0u;
      v579 = 0u;
      v576 = 0u;
      v577 = 0u;
      objc_msgSend(*(id *)(a1 + 160), "exclaves");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v576, &v600, 16);
      if (v13)
      {
        v14 = *(_QWORD *)v577;
        do
        {
          for (i = 0; i != v13; ++i)
          {
            if (*(_QWORD *)v577 != v14)
              objc_enumerationMutation(v12);
            v16 = *(_QWORD *)(*((_QWORD *)&v576 + 1) + 8 * i);
            v556 = MEMORY[0x1E0C809B0];
            v557 = 3221225472;
            v558 = (uint64_t)__29__SASamplePrinter_preprocess__block_invoke_3;
            v559 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E71490B8;
            v560 = (void (*)(uint64_t))a1;
            v561 = v11;
            -[SAExclave enumerateFrames:](v16, &v556);

          }
          v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v576, &v600, 16);
        }
        while (v13);
      }

      -[SASamplePrinter sortedLoadInfosForBinaryImages:](a1, v11);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      -[SASamplePrinter avoidOverlapInBinaryLoadInfos:onlyExclaves:inTask:](a1, v17, 1, v9);

    }
    else
    {
      v18 = *__error();
      _sa_logt();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)v604 = 0;
        _os_log_fault_impl(&dword_1B9BE0000, v19, OS_LOG_TYPE_FAULT, "no kernel task, though there are exclaves", v604, 2u);
      }

      *__error() = v18;
    }

  }
  objc_msgSend(*(id *)(v540 + 160), "cpuSignalHandlerStackLeafKernelFrame");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = v20 == 0;

  if (v21)
    objc_msgSend(*(id *)(v540 + 160), "findCpuSignalHandlerStackLeafKernelFrame");
  objc_msgSend(*(id *)(v540 + 160), "attemptedSamplingInterval");
  if (v22 != 0.0
    && -[SASamplePrinter hasTimeIndexes](v540)
    && (objc_msgSend(*(id *)(v540 + 160), "sampleTimestamps"),
        v23 = (void *)objc_claimAutoreleasedReturnValue(),
        v24 = (unint64_t)objc_msgSend(v23, "count") > 1,
        v23,
        v24))
  {
    v25 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v26 = *(void **)(v540 + 96);
    *(_QWORD *)(v540 + 96) = v25;

    *(_QWORD *)(v540 + 88) = 0;
    v593 = 0u;
    v594 = 0u;
    v595 = 0u;
    v596 = 0u;
    objc_msgSend(*(id *)(v540 + 160), "sampleTimestamps");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v593, v604, 16);
    if (v28)
    {
      v29 = *(_QWORD *)v594;
      v30 = 0.0;
      do
      {
        for (j = 0; j != v28; ++j)
        {
          if (*(_QWORD *)v594 != v29)
            objc_enumerationMutation(v27);
          v32 = *(void **)(*((_QWORD *)&v593 + 1) + 8 * j);
          objc_msgSend(v32, "machAbsTimeSeconds");
          if (v30 > 0.0)
          {
            v34 = v33 - v30;
            v35 = *(double *)(v540 + 88);
            if (v35 > v34 || v35 == 0.0)
              *(double *)(v540 + 88) = v34;
          }
          objc_msgSend(v32, "machAbsTimeSeconds");
          v30 = v36;
        }
        v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v593, v604, 16);
      }
      while (v28);
    }

    v37 = *(double *)(v540 + 88);
    objc_msgSend(*(id *)(v540 + 160), "attemptedSamplingInterval");
    if (v37 < v38)
    {
      objc_msgSend(*(id *)(v540 + 160), "attemptedSamplingInterval");
      *(_QWORD *)(v540 + 88) = v39;
    }
    *(_QWORD *)&v586 = 0;
    *((_QWORD *)&v586 + 1) = &v586;
    *(_QWORD *)&v587 = 0x3032000000;
    *((_QWORD *)&v587 + 1) = __Block_byref_object_copy__4;
    *(_QWORD *)&v588 = __Block_byref_object_dispose__4;
    *((_QWORD *)&v588 + 1) = 0;
    objc_msgSend(*(id *)(v540 + 160), "sampleTimestamps");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)&v572 = MEMORY[0x1E0C809B0];
    *((_QWORD *)&v572 + 1) = 3221225472;
    *(_QWORD *)&v573 = __37__SASamplePrinter_calculateTimeJumps__block_invoke;
    *((_QWORD *)&v573 + 1) = &unk_1E7148E48;
    *((_QWORD *)&v574 + 1) = &v586;
    *(_QWORD *)&v574 = v540;
    objc_msgSend(v40, "enumerateObjectsUsingBlock:", &v572);

    _Block_object_dispose(&v586, 8);
  }
  else
  {
    v41 = *(void **)(v540 + 96);
    *(_QWORD *)(v540 + 96) = 0;

  }
  v42 = *(void **)(v540 + 128);
  location = (id *)(v540 + 128);
  *(_QWORD *)(v540 + 128) = 0;

  v43 = *(void **)(v540 + 136);
  *(_QWORD *)(v540 + 136) = 0;

  if (objc_msgSend(*(id *)(v540 + 160), "targetHIDEventMachAbs"))
  {
    v574 = 0u;
    v575 = 0u;
    v572 = 0u;
    v573 = 0u;
    objc_msgSend(*(id *)(v540 + 160), "hidEvents");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v44 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v572, v604, 16);
    if (v44)
    {
      v45 = *(_QWORD *)v573;
      while (2)
      {
        for (k = 0; k != v44; ++k)
        {
          if (*(_QWORD *)v573 != v45)
            objc_enumerationMutation(obj);
          v47 = *(void **)(*((_QWORD *)&v572 + 1) + 8 * k);
          objc_msgSend(v47, "hidEventTimestamp");
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          v49 = objc_msgSend(v48, "machAbsTime");
          if (v49 == objc_msgSend(*(id *)(v540 + 160), "targetHIDEventMachAbs"))
          {
            if (!*location && (objc_msgSend(*(id *)(v540 + 160), "targetProcessId") & 0x80000000) != 0)
            {

LABEL_67:
              objc_storeStrong((id *)(v540 + 112), v47);
              v54 = *(_QWORD *)(v540 + 160);
              if (v54 && (*(_BYTE *)(v54 + 325) & 1) != 0)
              {
                v55 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                v56 = *(void **)(v540 + 120);
                *(_QWORD *)(v540 + 120) = v55;

                v504 = objc_alloc_init(MEMORY[0x1E0C99E08]);
                objc_msgSend(v47, "hidEventTimestamp");
                v57 = (char *)objc_claimAutoreleasedReturnValue();
                v58 = objc_msgSend(*(id *)(v540 + 160), "indexOfLastSampleOnOrBeforeTimestamp:", v57);
                v598 = 0u;
                v599 = 0u;
                memset(v597, 0, sizeof(v597));
                objc_msgSend(*(id *)(v540 + 112), "steps");
                v510 = (id)objc_claimAutoreleasedReturnValue();
                v516 = objc_msgSend(v510, "countByEnumeratingWithState:objects:count:", v597, &v593, 16);
                if (v516)
                {
                  v501 = 0;
                  v513 = **(id **)&v597[16];
                  do
                  {
                    v59 = 0;
                    inited = v57;
                    do
                    {
                      if (**(id **)&v597[16] != v513)
                      {
                        v60 = v59;
                        objc_enumerationMutation(v510);
                        v59 = v60;
                      }
                      v522 = v59;
                      v61 = *(void **)(*(_QWORD *)&v597[8] + 8 * v59);
                      v62 = *(void **)(v540 + 160);
                      objc_msgSend(v61, "timestamp");
                      v63 = (void *)objc_claimAutoreleasedReturnValue();
                      v525 = (id)objc_msgSend(v62, "indexOfLastSampleOnOrBeforeTimestamp:", v63);

                      if (v525 != (id)0x7FFFFFFFFFFFFFFFLL
                        && (v58 == 0x7FFFFFFFFFFFFFFFLL || v58 < (unint64_t)v525))
                      {
                        v64 = *(void **)(v540 + 160);
                        v65 = objc_msgSend(v61, "pid");
                        v66 = objc_msgSend(v61, "tid");
                        objc_msgSend(v61, "timestamp");
                        v67 = (void *)objc_claimAutoreleasedReturnValue();
                        -[SASampleStore taskWithPid:orTid:atTimestamp:](v64, v65, v66, v67);
                        v519 = (id)objc_claimAutoreleasedReturnValue();

                        if (v519)
                        {
                          if (v58 == 0x7FFFFFFFFFFFFFFFLL)
                            v68 = 0;
                          else
                            v68 = v58 + 1;
                          v507 = v68;
                          if (objc_msgSend(v61, "tid"))
                          {
                            objc_msgSend(v519, "threads");
                            v69 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v61, "tid"));
                            v70 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v69, "objectForKeyedSubscript:", v70);
                            v531 = (id)objc_claimAutoreleasedReturnValue();

                            if (!v531)
                            {
                              v71 = *__error();
                              _sa_logt();
                              v72 = objc_claimAutoreleasedReturnValue();
                              if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
                              {
                                v105 = objc_msgSend(v61, "tid");
                                objc_msgSend(v519, "debugDescription");
                                v106 = (void *)objc_claimAutoreleasedReturnValue();
                                *(_DWORD *)buf = 134218242;
                                *(_QWORD *)&buf[4] = v105;
                                *(_WORD *)&buf[12] = 2112;
                                *(_QWORD *)&buf[14] = v106;
                                _os_log_error_impl(&dword_1B9BE0000, v72, OS_LOG_TYPE_ERROR, "No thread %llu in %@ for hid event", buf, 0x16u);

                              }
                              v531 = 0;
                              *__error() = v71;
                            }
                          }
                          else
                          {
                            objc_msgSend(v519, "mainThread");
                            v531 = (id)objc_claimAutoreleasedReturnValue();
                            if (!v531)
                            {
                              v570 = 0u;
                              v571 = 0u;
                              v568 = 0u;
                              v569 = 0u;
                              objc_msgSend(v519, "threads");
                              v77 = (void *)objc_claimAutoreleasedReturnValue();
                              v78 = objc_msgSend(v77, "countByEnumeratingWithState:objects:count:", &v568, &v586, 16);
                              if (v78)
                              {
                                v531 = 0;
                                v79 = 0;
                                v80 = *(_QWORD *)v569;
                                do
                                {
                                  for (m = 0; m != v78; ++m)
                                  {
                                    if (*(_QWORD *)v569 != v80)
                                      objc_enumerationMutation(v77);
                                    v82 = *(void **)(*((_QWORD *)&v568 + 1) + 8 * m);
                                    objc_msgSend(v82, "firstThreadStateOnOrAfterTime:sampleIndex:", inited, 0x7FFFFFFFFFFFFFFFLL);
                                    v83 = (void *)objc_claimAutoreleasedReturnValue();
                                    objc_msgSend(v61, "timestamp");
                                    v84 = (void *)objc_claimAutoreleasedReturnValue();
                                    objc_msgSend(v82, "lastThreadStateOnOrBeforeTime:sampleIndex:", v84, 0x7FFFFFFFFFFFFFFFLL);
                                    v85 = (void *)objc_claimAutoreleasedReturnValue();

                                    if (v85)
                                      v86 = v83 == 0;
                                    else
                                      v86 = 1;
                                    if (!v86)
                                    {
                                      v87 = objc_msgSend(v85, "cpuTimeNs");
                                      if (v87 > objc_msgSend(v83, "cpuTimeNs"))
                                      {
                                        v88 = objc_msgSend(v85, "cpuTimeNs");
                                        if (v79 < v88 - objc_msgSend(v83, "cpuTimeNs"))
                                        {
                                          v89 = objc_msgSend(v85, "cpuTimeNs");
                                          v90 = objc_msgSend(v83, "cpuTimeNs");
                                          v91 = v82;

                                          v79 = v89 - v90;
                                          v531 = v91;
                                        }
                                      }
                                    }

                                  }
                                  v78 = objc_msgSend(v77, "countByEnumeratingWithState:objects:count:", &v568, &v586, 16);
                                }
                                while (v78);
                              }
                              else
                              {
                                v531 = 0;
                              }

                            }
                          }
                          v92 = [SAHIDStepSample alloc];
                          v93 = objc_msgSend(v61, "tid");
                          objc_msgSend(v61, "timestamp");
                          v94 = (void *)objc_claimAutoreleasedReturnValue();
                          v95 = v519;
                          v96 = inited;
                          v97 = v94;
                          if (v92)
                          {
                            *(_QWORD *)buf = v92;
                            *(_QWORD *)&buf[8] = SAHIDStepSample;
                            v98 = (SAHIDStepSample *)objc_msgSendSuper2((objc_super *)buf, sel_init);
                            v92 = v98;
                            if (v98)
                            {
                              objc_storeStrong((id *)&v98->_task, v519);
                              v92->_threadId = v93;
                              objc_storeStrong((id *)&v92->_startTimestamp, inited);
                              objc_storeStrong((id *)&v92->_endTimestamp, v94);
                              v92->_startSampleIndex = v507;
                              v92->_endSampleIndex = (unint64_t)v525;
                            }
                          }

                          objc_msgSend(*(id *)(v540 + 120), "addObject:", v92);
                          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v61, "tid"));
                          v99 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v504, "objectForKeyedSubscript:", v99);
                          v100 = (void *)objc_claimAutoreleasedReturnValue();
                          v101 = objc_msgSend(v100, "unsignedLongValue");

                          v102 = (unint64_t)v525 + v101 - v507 + 1;
                          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v102);
                          v103 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v61, "tid"));
                          v104 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v504, "setObject:forKeyedSubscript:", v103, v104);

                          if (v102 > v501)
                          {
                            objc_storeStrong(location, v519);
                            objc_storeStrong((id *)(v540 + 136), v531);
                            v501 = v102;
                          }

                        }
                        else
                        {
                          v73 = *__error();
                          _sa_logt();
                          v74 = objc_claimAutoreleasedReturnValue();
                          if (os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
                          {
                            v75 = objc_msgSend(v61, "pid");
                            v76 = objc_msgSend(v61, "tid");
                            *(_DWORD *)buf = 67109376;
                            *(_DWORD *)&buf[4] = v75;
                            *(_WORD *)&buf[8] = 2048;
                            *(_QWORD *)&buf[10] = v76;
                            _os_log_impl(&dword_1B9BE0000, v74, OS_LOG_TYPE_INFO, "No process [%d] with thread %llu for hid event", buf, 0x12u);
                          }

                          *__error() = v73;
                        }

                        v58 = (unint64_t)v525;
                      }
                      objc_msgSend(v61, "timestamp");
                      v57 = (char *)objc_claimAutoreleasedReturnValue();

                      v59 = v522 + 1;
                      inited = v57;
                    }
                    while (v522 + 1 != v516);
                    v516 = objc_msgSend(v510, "countByEnumeratingWithState:objects:count:", v597, &v593, 16);
                  }
                  while (v516);
                }

              }
              goto LABEL_117;
            }
            objc_msgSend(v47, "steps");
            v50 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v50, "lastObject");
            v51 = (void *)objc_claimAutoreleasedReturnValue();
            v52 = objc_msgSend(v51, "pid");
            v53 = v52 == objc_msgSend(*(id *)(v540 + 160), "targetProcessId");

            if (v53)
              goto LABEL_67;
          }
          else
          {

          }
        }
        v44 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v572, v604, 16);
        if (v44)
          continue;
        break;
      }
    }
LABEL_117:

  }
  objc_msgSend(*(id *)(v540 + 160), "timestampOfLastStackshot");
  v107 = (void *)objc_claimAutoreleasedReturnValue();
  if (v107
    || -[SASamplePrinter hasTimeIndexes](v540)
    && (objc_msgSend(*(id *)(v540 + 160), "sampleTimestamps"),
        v110 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v110, "lastObject"),
        v107 = (void *)objc_claimAutoreleasedReturnValue(),
        v110,
        v107))
  {
    +[SADependencyGraphNode dependencyGraphForThreadsInSampleStore:atTimestamp:](SADependencyGraphNode, "dependencyGraphForThreadsInSampleStore:atTimestamp:", *(_QWORD *)(v540 + 160), v107);
    v108 = objc_claimAutoreleasedReturnValue();
    v109 = *(void **)(v540 + 144);
    *(_QWORD *)(v540 + 144) = v108;

  }
  v111 = (id *)v540;
  if (objc_msgSend(*(id *)(v540 + 16), "printJson"))
    objc_msgSend(*(id *)(v540 + 8), "appendString:", CFSTR("{"));
  if (objc_msgSend(*(id *)(v540 + 16), "displayHeader"))
    -[SASamplePrinter printHeader]();
  if (!objc_msgSend(*(id *)(v540 + 16), "displayBody"))
    goto LABEL_337;
  if (!objc_msgSend(*(id *)(v540 + 16), "systemstatsFormat"))
    goto LABEL_180;
  objc_msgSend(*(id *)(v540 + 8), "appendString:", CFSTR("\nBinary Images:\n"));
  v112 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 512);
  *(_QWORD *)&v572 = MEMORY[0x1E0C809B0];
  *((_QWORD *)&v572 + 1) = 3221225472;
  *(_QWORD *)&v573 = __52__SASamplePrinter_printSystemStatsStyleBinaryImages__block_invoke;
  *((_QWORD *)&v573 + 1) = &unk_1E71494E0;
  v517 = v112;
  *(_QWORD *)&v574 = v517;
  v113 = (void *)MEMORY[0x1BCCCC450](&v572);
  v114 = *(void **)(v540 + 160);
  *(_QWORD *)&v576 = MEMORY[0x1E0C809B0];
  *((_QWORD *)&v576 + 1) = 3221225472;
  *(_QWORD *)&v577 = __52__SASamplePrinter_printSystemStatsStyleBinaryImages__block_invoke_2;
  *((_QWORD *)&v577 + 1) = &unk_1E7149530;
  v502 = v113;
  *((_QWORD *)&v578 + 1) = v502;
  *(_QWORD *)&v578 = v540;
  objc_msgSend(v114, "enumerateTasks:", &v576);
  objc_msgSend(v517, "allKeys");
  v115 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v115, "sortedArrayUsingComparator:", &__block_literal_global_1255);
  v116 = (void *)objc_claimAutoreleasedReturnValue();

  v595 = 0u;
  v596 = 0u;
  v593 = 0u;
  v594 = 0u;
  v505 = v116;
  v511 = (char *)objc_msgSend(v505, "countByEnumeratingWithState:objects:count:", &v593, v604, 16);
  if (!v511)
    goto LABEL_179;
  v523 = 0;
  v508 = *(_QWORD *)v594;
  do
  {
    v117 = 0;
    do
    {
      if (*(_QWORD *)v594 != v508)
      {
        v118 = v117;
        objc_enumerationMutation(v505);
        v117 = v118;
      }
      v514 = v117;
      inited = *(char **)(*((_QWORD *)&v593 + 1) + 8 * (_QWORD)v117);
      objc_msgSend(v517, "objectForKeyedSubscript:");
      v119 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v119, "sortUsingComparator:", &__block_literal_global_1257);
      v588 = 0u;
      v589 = 0u;
      v586 = 0u;
      v587 = 0u;
      v532 = v119;
      v526 = (id)objc_msgSend(v532, "countByEnumeratingWithState:objects:count:", &v586, &v600, 16);
      if (v526)
      {
        v520 = *(id *)v587;
        do
        {
          for (n = 0; n != v526; n = (char *)n + 1)
          {
            if (*(id *)v587 != v520)
              objc_enumerationMutation(v532);
            v121 = *(void **)(*((_QWORD *)&v586 + 1) + 8 * (_QWORD)n);
            objc_msgSend(v121, "binary");
            v122 = (char *)objc_claimAutoreleasedReturnValue();
            v123 = v122 == inited;

            if (!v123)
            {
              v167 = *__error();
              _sa_logt();
              v168 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v168, OS_LOG_TYPE_ERROR))
              {
                objc_msgSend(v121, "debugDescription");
                v169 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                v170 = objc_msgSend(v169, "UTF8String");
                objc_msgSend(inited, "debugDescription");
                v171 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                v172 = objc_msgSend(v171, "UTF8String");
                *(_DWORD *)v597 = 136315394;
                *(_QWORD *)&v597[4] = v170;
                *(_WORD *)&v597[12] = 2080;
                *(_QWORD *)&v597[14] = v172;
                _os_log_error_impl(&dword_1B9BE0000, v168, OS_LOG_TYPE_ERROR, "load info %s not using binary %s", v597, 0x16u);

              }
              *__error() = v167;
              objc_msgSend(v121, "debugDescription");
              v173 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
              v111 = (id *)objc_msgSend(v173, "UTF8String");
              objc_msgSend(inited, "debugDescription");
              v174 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
              objc_msgSend(v174, "UTF8String");
              _SASetCrashLogMessage(7912, "load info %s not using binary %s", v175, v176, v177, v178, v179, v180, (char)v111);

              _os_crash();
              __break(1u);
LABEL_193:
              objc_msgSend(v111[20], "targetProcess");
              v165 = (id)objc_claimAutoreleasedReturnValue();
              v111 = (id *)v540;
              goto LABEL_194;
            }
            objc_msgSend(v121, "segment");
            v124 = (void *)objc_claimAutoreleasedReturnValue();
            v125 = objc_msgSend(v121, "isInKernelAddressSpace");
            objc_msgSend(v124, "name");
            v126 = (void *)objc_claimAutoreleasedReturnValue();
            v127 = inited;
            v128 = v126;
            v129 = *(void **)(v540 + 80);
            if (!v129)
            {
              v130 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 512);
              v131 = *(void **)(v540 + 80);
              *(_QWORD *)(v540 + 80) = v130;

              v129 = *(void **)(v540 + 80);
            }
            objc_msgSend(v129, "objectForKeyedSubscript:", v127);
            v132 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v132)
            {
              v132 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 1);
              objc_msgSend(*(id *)(v540 + 80), "setObject:forKeyedSubscript:", v132, v127);
            }
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", (char *)n + v523);
            v133 = (void *)objc_claimAutoreleasedReturnValue();
            if (v128)
            {
              objc_msgSend(v132, "setObject:forKeyedSubscript:", v133, v128);
            }
            else
            {
              objc_msgSend(MEMORY[0x1E0C99E38], "null");
              v134 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v132, "setObject:forKeyedSubscript:", v133, v134);

            }
            objc_msgSend(*(id *)(v540 + 8), "printWithFormat:", CFSTR("%lu"), (char *)n + v523);
            v135 = *(void **)(v540 + 8);
            if (v125)
              v136 = "*";
            else
              v136 = "";
            objc_msgSend(v127, "bundleIdentifier");
            v137 = (void *)objc_claimAutoreleasedReturnValue();
            if (v137)
            {
              objc_msgSend(v127, "bundleIdentifier");
              v138 = (void *)objc_claimAutoreleasedReturnValue();
              SACopySanitizedString(v138, 1, 0);
              v139 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v135, "printWithFormat:", CFSTR("\t%s%@"), v136, v139);

            }
            else
            {
              objc_msgSend(v135, "printWithFormat:", CFSTR("\t%s%@"), v136, &stru_1E714A250);
            }

            objc_msgSend(*(id *)(v540 + 8), "appendString:", CFSTR("\t"));
            objc_msgSend(v127, "bundleVersion");
            v140 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v127, "bundleShortVersion");
            v141 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v127, "binaryVersion");
            v142 = objc_claimAutoreleasedReturnValue();
            v143 = (void *)v142;
            v144 = v540;
            if (v141 || v140 || v142)
            {
              if (v141)
              {
                v145 = *(void **)(v540 + 8);
                SACopySanitizedString(v141, 1, 0);
                v146 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v145, "appendString:", v146);

                v144 = v540;
              }
              if (v140)
              {
                v147 = *(void **)(v144 + 8);
                SACopySanitizedString(v140, 1, 0);
                v148 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v147, "printWithFormat:", CFSTR(" (%@)"), v148);
              }
              else
              {
                if (!v143)
                  goto LABEL_162;
                v149 = *(void **)(v144 + 8);
                SACopySanitizedString(v143, 1, 0);
                v148 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v149, "printWithFormat:", CFSTR(" (%@)"), v148);
              }

              v144 = v540;
            }
LABEL_162:
            v150 = *(void **)(v144 + 8);
            objc_msgSend(v127, "uuid");
            v151 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v151, "UUIDString");
            v152 = objc_claimAutoreleasedReturnValue();
            v153 = (void *)v152;
            v154 = &stru_1E714A250;
            if (v152)
              v154 = (const __CFString *)v152;
            objc_msgSend(v150, "printWithFormat:", CFSTR("\t<%@>"), v154);

            if (v124
              && objc_msgSend(v532, "count") == 1
              && objc_msgSend(v124, "hasOffsetIntoBinary")
              && !objc_msgSend(v124, "offsetIntoBinary"))
            {

              v124 = 0;
            }
            v155 = *(void **)(v540 + 8);
            objc_msgSend(v124, "name");
            v156 = objc_claimAutoreleasedReturnValue();
            v157 = (void *)v156;
            v158 = &stru_1E714A250;
            if (v156)
              v158 = (const __CFString *)v156;
            objc_msgSend(v155, "printWithFormat:", CFSTR("\t%@"), v158);

            objc_msgSend(*(id *)(v540 + 8), "appendString:", CFSTR("\t"));
            objc_msgSend(v127, "path");
            v159 = (void *)objc_claimAutoreleasedReturnValue();
            if (v159)
            {
              if (objc_msgSend(*(id *)(v540 + 160), "sanitizePaths"))
              {
                v160 = v159;

              }
              v161 = *(void **)(v540 + 8);
              SACopySanitizedString(v159, 1, 0);
              v162 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v161, "appendString:", v162);

            }
            objc_msgSend(*(id *)(v540 + 8), "appendString:", CFSTR("\n"));

          }
          v526 = (id)objc_msgSend(v532, "countByEnumeratingWithState:objects:count:", &v586, &v600, 16);
          v523 += (uint64_t)n;
        }
        while (v526);
      }

      v117 = v514 + 1;
    }
    while (v514 + 1 != v511);
    v511 = (char *)objc_msgSend(v505, "countByEnumeratingWithState:objects:count:", &v593, v604, 16);
  }
  while (v511);
LABEL_179:

  v111 = (id *)v540;
LABEL_180:
  if (objc_msgSend(v111[2], "printJson"))
    objc_msgSend(v111[1], "appendString:", CFSTR(",\"tasks\":["));
  v163 = v111[2];
  if (v163)
  {
    v164 = v163[21];
    if (v164 != 1 && (v164 || *((_BYTE *)v163 + 11)))
    {
      if (!*location)
        goto LABEL_193;
      v165 = *location;
LABEL_194:
      v181 = objc_msgSend(v111[2], "taskAggregation") == 3;
      v182 = objc_alloc(MEMORY[0x1E0C99E08]);
      objc_msgSend(v111[20], "tasksByUniquePid");
      v183 = (void *)objc_claimAutoreleasedReturnValue();
      v184 = (void *)objc_msgSend(v182, "initWithCapacity:", objc_msgSend(v183, "count"));

      v185 = v111[20];
      *(_QWORD *)&v568 = MEMORY[0x1E0C809B0];
      *((_QWORD *)&v568 + 1) = 3221225472;
      *(_QWORD *)&v569 = __44__SASamplePrinter_printTasksWithAggregation__block_invoke;
      *((_QWORD *)&v569 + 1) = &unk_1E7149298;
      v468 = v165;
      *(_QWORD *)&v570 = v468;
      *((_QWORD *)&v570 + 1) = v540;
      BYTE8(v571) = v181;
      v467 = v184;
      *(_QWORD *)&v571 = v467;
      objc_msgSend(v185, "enumerateTasks:", &v568);
      objc_msgSend(v111[2], "processSortAttributes");
      v186 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v467, "allValues");
      v187 = (void *)objc_claimAutoreleasedReturnValue();
      v541 = MEMORY[0x1E0C809B0];
      v542 = 3221225472;
      v543 = __44__SASamplePrinter_printTasksWithAggregation__block_invoke_958;
      v544 = &unk_1E71492C0;
      v545 = v540;
      v466 = v186;
      v546 = v466;
      objc_msgSend(v187, "sortedArrayUsingComparator:", &v541);
      v188 = (id)objc_claimAutoreleasedReturnValue();

      if (v468)
      {
        v189 = objc_msgSend(*(id *)(v540 + 16), "printJson");
        if (v189)
          objc_msgSend(*(id *)(v540 + 8), "appendString:", CFSTR("\n\n\n{"));
        v190 = objc_msgSend(*(id *)(v540 + 160), "targetDispatchQueueId");
        v191 = objc_msgSend(*(id *)(v540 + 160), "targetThreadId");
        v192 = objc_msgSend(*(id *)(v540 + 16), "printTargetThreadOnly");
        if (v190)
          v193 = 0;
        else
          v193 = v192;
        if (v193 != 1 || v191)
        {
          if (v190 | v191)
            goto LABEL_219;
          -[SASamplePrinter printTask:specialDispatchQueueId:specialThreadId:omitSpecial:omitOther:]((id *)v540, v468, 0, 0, 0, 0);
LABEL_225:
          v220 = v540;
        }
        else
        {
          objc_msgSend(v468, "mainThread");
          v194 = (void *)objc_claimAutoreleasedReturnValue();
          v191 = objc_msgSend(v194, "threadId");

          if (!v191)
          {
            v195 = *__error();
            _sa_logt();
            v196 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v196, OS_LOG_TYPE_ERROR))
            {
              objc_msgSend(v468, "debugDescription");
              v197 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
              v198 = objc_msgSend(v197, "UTF8String");
              *(_DWORD *)v604 = 136315138;
              v605 = v198;
              _os_log_error_impl(&dword_1B9BE0000, v196, OS_LOG_TYPE_ERROR, "no target dispatch queue nor thread id, target task %s, but no main thread", v604, 0xCu);

            }
            *__error() = v195;
            objc_msgSend(v468, "debugDescription");
            v188 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v199 = objc_msgSend(v188, "UTF8String");
            _SASetCrashLogMessage(5604, "no target dispatch queue nor thread id, target task %s, but no main thread", v200, v201, v202, v203, v204, v205, v199);

            _os_crash();
            __break(1u);
            goto LABEL_206;
          }
LABEL_219:
          -[SASamplePrinter printTask:specialDispatchQueueId:specialThreadId:omitSpecial:omitOther:]((id *)v540, v468, v190, v191, 0, 1);
          v219 = objc_msgSend(*(id *)(v540 + 16), "printTargetThreadOnly");
          v220 = v540;
          if (!v219
            || (v221 = *(_QWORD *)(v540 + 160)) != 0 && (*(_BYTE *)(v221 + 325) & 1) != 0 && *(_QWORD *)(v540 + 112))
          {
            -[SASamplePrinter printTask:specialDispatchQueueId:specialThreadId:omitSpecial:omitOther:]((id *)v540, v468, v190, v191, (char *)1, 0);
            goto LABEL_225;
          }
        }
        v476 = v189 ^ 1;
        if (objc_msgSend(*(id *)(v220 + 16), "printJson"))
          objc_msgSend(*(id *)(v540 + 8), "appendString:", CFSTR("}"));
      }
      else
      {
LABEL_206:
        v476 = 1;
      }
      v598 = 0u;
      v599 = 0u;
      memset(v597, 0, sizeof(v597));
      v470 = v188;
      v477 = objc_msgSend(v470, "countByEnumeratingWithState:objects:count:", v597, &v593, 16);
      if (!v477)
        goto LABEL_334;
      v475 = **(_QWORD **)&v597[16];
      while (2)
      {
        v222 = 0;
        v223 = v540;
LABEL_231:
        if (**(_QWORD **)&v597[16] != v475)
        {
          v224 = v222;
          objc_enumerationMutation(v470);
          v223 = v540;
          v222 = v224;
        }
        v493 = v222;
        v225 = *(void **)(*(_QWORD *)&v597[8] + 8 * v222);
        if (objc_msgSend(*(id *)(v223 + 16), "printJson"))
        {
          v226 = v540;
          if ((v476 & 1) == 0)
          {
            objc_msgSend(*(id *)(v540 + 8), "appendString:", CFSTR(","));
            v226 = v540;
          }
          objc_msgSend(*(id *)(v226 + 8), "appendString:", CFSTR("\n\n\n{"));
          v476 = 0;
        }
        v227 = v225;
        v494 = (void *)MEMORY[0x1BCCCC288]();
        v228 = v227;
        LODWORD(inited) = -[SASamplePrinter hasTimeIndexes](v540);
        *(_QWORD *)v562 = 0;
        v563 = (uint64_t)v562;
        v564 = 0x3032000000;
        v565 = __Block_byref_object_copy__4;
        v566 = __Block_byref_object_dispose__4;
        v567 = 0;
        v556 = 0;
        v557 = (uint64_t)&v556;
        v558 = 0x3032000000;
        v559 = __Block_byref_object_copy__4;
        v560 = __Block_byref_object_dispose__4;
        v561 = 0;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x2020000000;
        v585 = 0x7FFFFFFFFFFFFFFFLL;
        v552 = 0;
        v553 = &v552;
        v554 = 0x2020000000;
        v555 = 0x7FFFFFFFFFFFFFFFLL;
        v521 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 1);
        v229 = (void **)v540;
        v533 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", objc_msgSend(v228, "count"));
        objc_msgSend(v228, "firstObject");
        v497 = (id *)objc_claimAutoreleasedReturnValue();
        v578 = 0u;
        v579 = 0u;
        v576 = 0u;
        v577 = 0u;
        v230 = &v568;
        v515 = v228;
        v231 = objc_msgSend(v515, "countByEnumeratingWithState:objects:count:", &v576, v604, 16);
        if (!v231)
        {
          v512 = 0;
          v509 = 0;
          v506 = 0;
          v503 = 0;
          v500 = 0;
          obja = 0;
          v518 = 0;
          goto LABEL_285;
        }
        v512 = 0;
        v509 = 0;
        v506 = 0;
        v503 = 0;
        v500 = 0;
        obja = 0;
        v527 = 0;
        v524 = 0;
        v518 = 0;
        v232 = *(_QWORD *)v577;
LABEL_239:
        v233 = 0;
LABEL_240:
        if (*(_QWORD *)v577 != v232)
          objc_enumerationMutation(v515);
        v234 = *(_QWORD **)(*((_QWORD *)&v576 + 1) + 8 * v233);
        if (objc_msgSend(v234, "pid"))
        {
          objc_msgSend(v234, "sharedCache");
          v235 = (void *)objc_claimAutoreleasedReturnValue();
          v236 = v235;
          if (v235)
          {
            v237 = v235;
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0C99E38], "null");
            v237 = (id)objc_claimAutoreleasedReturnValue();
          }
          v238 = v237;

          v574 = 0u;
          v575 = 0u;
          v572 = 0u;
          v573 = 0u;
          v230 = &v568;
          v239 = v521;
          v240 = objc_msgSend(v239, "countByEnumeratingWithState:objects:count:", &v572, &v600, 16);
          if (v240)
          {
            v241 = *(_QWORD *)v573;
            while (2)
            {
              for (ii = 0; ii != v240; ++ii)
              {
                if (*(_QWORD *)v573 != v241)
                  objc_enumerationMutation(v239);
                if (*(void **)(*((_QWORD *)&v572 + 1) + 8 * ii) == v238)
                {

                  goto LABEL_256;
                }
              }
              v240 = objc_msgSend(v239, "countByEnumeratingWithState:objects:count:", &v572, &v600, 16);
              if (v240)
                continue;
              break;
            }
          }

          objc_msgSend(v239, "addObject:", v238);
LABEL_256:

          v229 = (void **)v540;
        }
        if ((objc_msgSend(v229[20], "dataSource") != 8 || objc_msgSend(v229[20], "haveKPerfSched"))
          && objc_msgSend(v229[20], "dataStyle") != 1
          && objc_msgSend(v229[20], "dataStyle"))
        {
          *(_QWORD *)v580 = 0;
          v551 = 0;
          v550 = 0;
          v549 = 0;
          v548 = 0;
          v547 = 0;
          -[SATask cpuTimeNs:cpuInstructions:cpuCycles:nonThreadCpuTimeNs:nonThreadCpuInstructions:nonThreadCpuCycles:betweenStartTime:endTime:](v234, v580, &v551, &v550, &v549, &v548, &v547, v229[4], v229[5]);
          obja += *(_QWORD *)v580;
          v500 += v551;
          v503 += v550;
          v506 += v549;
          v509 += v548;
          v512 += v547;
        }
        *(_QWORD *)v580 = 0;
        v581 = v580;
        v582 = 0x2020000000;
        v583 = 0;
        objc_msgSend(v234, "taskStates");
        v243 = (void *)objc_claimAutoreleasedReturnValue();
        v244 = objc_msgSend(v243, "count") == 0;

        if (!v244)
        {
          v229 = (void **)v540;
          v245 = objc_msgSend(v234, "indexOfFirstTaskStateOnOrAfterTime:sampleIndex:", *(_QWORD *)(v540 + 32), *(_QWORD *)(v540 + 48));
          if (v245 != 0x7FFFFFFFFFFFFFFFLL)
          {
            v246 = objc_msgSend(v234, "indexOfLastTaskStateOnOrBeforeTime:sampleIndex:", *(_QWORD *)(v540 + 40), *(_QWORD *)(v540 + 56));
            v247 = v246;
            if (v246 != 0x7FFFFFFFFFFFFFFFLL)
            {
              v248 = v246 - v245;
              if (v246 >= v245)
              {
                objc_msgSend(v234, "taskStates");
                v249 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v249, "objectAtIndexedSubscript:", v245);
                v250 = (void *)objc_claimAutoreleasedReturnValue();

                if (!*(_QWORD *)(v563 + 40)
                  || (objc_msgSend(v250, "startTimestamp"),
                      v251 = (void *)objc_claimAutoreleasedReturnValue(),
                      v252 = objc_msgSend(v251, "lt:", *(_QWORD *)(v563 + 40)),
                      v251,
                      v252))
                {
                  objc_msgSend(v250, "startTimestamp");
                  v253 = objc_claimAutoreleasedReturnValue();
                  v254 = *(void **)(v563 + 40);
                  *(_QWORD *)(v563 + 40) = v253;

                  if ((_DWORD)inited)
                  {
                    v255 = objc_msgSend(v250, "startSampleIndex");
                    *(_QWORD *)(*(_QWORD *)&buf[8] + 24) = v255;
                    if (v255 == 0x7FFFFFFFFFFFFFFFLL)
                    {
                      v256 = objc_msgSend(v250, "endSampleIndex") + 1;
                      *(_QWORD *)(*(_QWORD *)&buf[8] + 24) = v256;
                    }
                  }
                }
                objc_msgSend(v234, "taskStates");
                v257 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v257, "objectAtIndexedSubscript:", v247);
                v258 = (void *)objc_claimAutoreleasedReturnValue();

                if (!*(_QWORD *)(v557 + 40)
                  || (objc_msgSend(v258, "endTimestamp"),
                      v259 = (void *)objc_claimAutoreleasedReturnValue(),
                      v260 = objc_msgSend(v259, "gt:", *(_QWORD *)(v557 + 40)),
                      v259,
                      v260))
                {
                  objc_msgSend(v258, "endTimestamp");
                  v261 = objc_claimAutoreleasedReturnValue();
                  v262 = *(void **)(v557 + 40);
                  *(_QWORD *)(v557 + 40) = v261;

                  if ((_DWORD)inited)
                  {
                    v263 = objc_msgSend(v258, "endSampleIndex");
                    v553[3] = v263;
                  }
                }
                *((_QWORD *)v581 + 3) += v248 + 1;

LABEL_277:
                if ((inited & 1) == 0)
                  v518 += *((_QWORD *)v581 + 3);
                -[SASamplePrinter displayStringForResourceCoalition:](v234);
                v265 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v533, "objectForKeyedSubscript:", v265);
                v266 = (void *)objc_claimAutoreleasedReturnValue();
                v267 = (void *)MEMORY[0x1E0CB37E8];
                v268 = objc_msgSend(v266, "unsignedLongLongValue");
                objc_msgSend(v267, "numberWithUnsignedLongLong:", *((_QWORD *)v581 + 3) + v268);
                v269 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v533, "setObject:forKeyedSubscript:", v269, v265);

                v270 = -[SASamplePrinter numIOsForTask:ioSize:](v540, v234, &v551);
                v527 += v270;
                v524 += v270;
              }
              v229 = (void **)v540;
            }
          }
          _Block_object_dispose(v580, 8);
          if (++v233 == v231)
          {
            v231 = objc_msgSend(v515, "countByEnumeratingWithState:objects:count:", &v576, v604, 16);
            if (!v231)
            {
LABEL_285:

              if ((_DWORD)inited)
              {
                v271 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
                v272 = v540;
                if (v271 != 0x7FFFFFFFFFFFFFFFLL)
                {
                  v273 = v553[3];
                  if (v273 != 0x7FFFFFFFFFFFFFFFLL)
                  {
                    if (v273 >= *(_QWORD *)(v540 + 56))
                      v273 = *(_QWORD *)(v540 + 56);
                    if (v271 <= *(_QWORD *)(v540 + 48))
                      v271 = *(_QWORD *)(v540 + 48);
                    v518 = v273 - v271 + 1;
                  }
                }
              }
              else
              {
                v272 = v540;
              }
              if (!v518 && !objc_msgSend(*(id *)(v272 + 16), "displayTasksWithZeroCount"))
                goto LABEL_304;
              if (objc_msgSend(*(id *)(v272 + 16), "omitTasksBelowSampleCount") < 1)
                v274 = 0;
              else
                v274 = objc_msgSend(*(id *)(v272 + 16), "omitTasksBelowSampleCount");
              if ((int)objc_msgSend(*(id *)(v272 + 16), "omitTasksBelowPercentOfTotalSamples") >= 1)
              {
                v275 = v272;
                v276 = *(_QWORD *)(v272 + 64);
                v277 = objc_msgSend(*(id *)(v275 + 16), "omitTasksBelowPercentOfTotalSamples");
                if (v274 <= v276 * v277 / 0x64uLL)
                  v274 = v276 * v277 / 0x64uLL;
              }
              if (v274 && v518 <= v274)
              {
LABEL_304:
                v518 = -1;
                goto LABEL_321;
              }
              objc_msgSend(v497, "mainBinary");
              v278 = objc_claimAutoreleasedReturnValue();
              if (!v278)
                goto LABEL_477;
              v279 = *location;
              v280 = *location;
              if (!*location)
              {
                objc_msgSend(*(id *)(v540 + 160), "targetProcess");
                v280 = (void *)objc_claimAutoreleasedReturnValue();
              }
              objc_msgSend(v280, "mainBinary");
              v281 = (void *)objc_claimAutoreleasedReturnValue();

              if (!v279)
              if (v281 == (void *)v278)
              {
                v282 = objc_alloc(MEMORY[0x1E0CB3940]);
                -[SASamplePrinter displayNameForTask:includePid:]((void *)v540, v497, 0);
                v283 = (void *)objc_claimAutoreleasedReturnValue();
                v492 = (void *)objc_msgSend(v282, "initWithFormat:", CFSTR("%@ (other tasks)"), v283);

              }
              else
              {
                -[SASamplePrinter displayNameForTask:includePid:]((void *)v540, v497, 0);
                v492 = (void *)objc_claimAutoreleasedReturnValue();
              }
              inited = (char *)v278;
              -[SASamplePrinter architectureStringForTask:](v540, v497);
              v491 = (void *)objc_claimAutoreleasedReturnValue();
              if ((objc_msgSend(*(id *)(v540 + 16), "printJson") & 1) == 0)
                objc_msgSend(*(id *)(v540 + 8), "appendString:", CFSTR("\n\n"));
              -[SASamplePrinter displayStringForOnBehalfOfForTasks:includePid:](v540, v515);
              v487 = (void *)objc_claimAutoreleasedReturnValue();
              v473 = *(void **)(v540 + 8);
              objc_msgSend(v497, "mainBinaryPath");
              v490 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v497, "bundleIdentifier");
              v484 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v497, "bundleVersion");
              v489 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v497, "bundleShortVersion");
              v486 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v497, "bundleBuildVersion");
              v483 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v497, "bundleProjectName");
              v488 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v497, "bundleSourceVersion");
              v485 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v497, "bundleProductBuildVersion");
              v482 = (void *)objc_claimAutoreleasedReturnValue();
              v472 = objc_msgSend(v497, "adamID");
              objc_msgSend(v497, "installerVersionID");
              v481 = (void *)objc_claimAutoreleasedReturnValue();
              v471 = objc_msgSend(v497, "developerType");
              objc_msgSend(v497, "appType");
              v480 = (void *)objc_claimAutoreleasedReturnValue();
              v284 = objc_msgSend(v497, "isBeta");
              objc_msgSend(v497, "cohortID");
              v478 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v497, "vendorID");
              v479 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v497, "distributorID");
              v285 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v497, "codesigningID");
              v286 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v497, "teamID");
              v287 = (void *)objc_claimAutoreleasedReturnValue();
              v288 = objc_msgSend(v497, "pid");
              if (v288)
              {
                v474 = 0;
              }
              else
              {
                objc_msgSend(*(id *)(v540 + 160), "kernelVersion");
                v469 = (void *)objc_claimAutoreleasedReturnValue();
                SACopySanitizedString(v469, 1, 0);
                v474 = (void *)objc_claimAutoreleasedReturnValue();
              }
              -[SASamplePrinter addTaskHeaderToStream:displayName:pid:mainBinary:mainBinaryPath:sharedCaches:uid:bundleIdentifier:bundleVersion:bundleShortVersion:bundleBuildVersion:bundleProjectName:bundleSourceVersion:bundleProductBuildVersion:adamID:installerVersionID:developerType:appType:isBeta:cohortID:vendorID:distributorID:codesigningID:teamID:resourceCoalitionSampleCounts:onBehalfOfProcesses:architectureString:kernelVersion:parentName:responsibleName:taskExecedFromName:taskExecedToName:pidStartTimestamp:startTimestamp:endTimestamp:startSampleIndex:endSampleIndex:numSamples:totalNumSamples:numSamplesSuspended:numSamplesTerminated:startingTaskSize:endingTaskSize:maxTaskSize:startSampleIndexOfMaxTaskSize:endSampleIndexOfMaxTaskSize:numPageins:cpuTimeNs:cpuInstructions:cpuCycles:nonThreadCpuTimeNs:nonThreadCpuInstructions:nonThreadCpuCycles:usesSuddenTermination:allowsIdleExit:isTranslocated:isUnresponsive:timeOfLastResponse:numThreads:numIdleWorkQueueThreads:numOtherHiddenThreads:hieSwallowedException:wqExceededConstrainedThreadLimit:wqExceededTotalThreadLimit:threadsDeadlocked:threadsBlockedByADeadlock:ioSize:numIOs:isReportHeader:](v540, v473, v492, 0xFFFFFFFFLL, inited, v490, v521, 4294966982, 0.0, v484, v489, v486, v483, v488, v485, v482, v472, v481, v471,
                v480,
                v284,
                v478,
                v479,
                v285,
                v286,
                v287,
                v533,
                v487,
                v491,
                v474,
                0,
                0,
                0,
                0,
                0,
                *(void **)(v563 + 40),
                *(void **)(v557 + 40),
                *(_QWORD *)(*(_QWORD *)&buf[8] + 24),
                v553[3],
                v518,
                *(_QWORD *)(v540 + 64),
                0,
                0,
                0,
                0,
                0,
                0x7FFFFFFFFFFFFFFFuLL,
                0x7FFFFFFFFFFFFFFFuLL,
                0,
                (unint64_t)obja,
                (unint64_t)v500,
                v503,
                (unint64_t)v506,
                v509,
                (unint64_t)v512,
                0,
                0,
                objc_msgSend(v497, "isTranslocated"),
                0,
                0,
                0,
                0,
                0);
              if (!v288)
              {

              }
LABEL_321:

              _Block_object_dispose(&v552, 8);
              _Block_object_dispose(buf, 8);
              _Block_object_dispose(&v556, 8);

              _Block_object_dispose(v562, 8);
              if ((v518 & 0x8000000000000000) == 0)
              {
                v289 = *(_QWORD *)(v540 + 16);
                if (v289)
                {
                  v290 = *(_QWORD *)(v289 + 152);
                  if (v290 == 3 || !v290 && *(_BYTE *)(v289 + 11))
                  {
                    if (v518)
                    {
                      -[SASamplePrinter printSingleStackForTasks:limitToDispatchQueueIds:limitToThreadIds:intersection:sampleCount:](v540, v515, 0, 0, 0, v518);
                      v289 = *(_QWORD *)(v540 + 16);
                    }
                    if ((objc_msgSend((id)v289, "systemstatsFormat") & 1) == 0)
                    {
                      objc_msgSend(v515, "firstObject");
                      v291 = (void *)objc_claimAutoreleasedReturnValue();
                      -[SASamplePrinter printBinaryImagesForTask:](v540, v291);

                    }
                  }
                }
              }
              objc_autoreleasePoolPop(v494);

              if (objc_msgSend(*(id *)(v540 + 16), "printJson"))
                objc_msgSend(*(id *)(v540 + 8), "appendString:", CFSTR("}"));
              v222 = v493 + 1;
              v223 = v540;
              if (v493 + 1 == v477)
              {
                v477 = objc_msgSend(v470, "countByEnumeratingWithState:objects:count:", v597, &v593, 16);
                if (!v477)
                {
LABEL_334:

                  goto LABEL_335;
                }
                continue;
              }
              goto LABEL_231;
            }
            goto LABEL_239;
          }
          goto LABEL_240;
        }
        break;
      }
      objc_msgSend(v234, "threads");
      v264 = (void *)objc_claimAutoreleasedReturnValue();
      *(_QWORD *)&v586 = MEMORY[0x1E0C809B0];
      *((_QWORD *)&v586 + 1) = 3221225472;
      *(_QWORD *)&v587 = __51__SASamplePrinter_printTaskHeaderForMultipleTasks___block_invoke;
      *((_QWORD *)&v587 + 1) = &unk_1E71492E8;
      *(_QWORD *)&v588 = v540;
      *((_QWORD *)&v588 + 1) = v562;
      v592 = (char)inited;
      *(_QWORD *)&v589 = buf;
      *((_QWORD *)&v589 + 1) = &v556;
      v590 = &v552;
      v591 = v580;
      objc_msgSend(v264, "enumerateKeysAndObjectsUsingBlock:", &v586);

      goto LABEL_277;
    }
  }
  if (*location)
  {
    v166 = *location;
  }
  else
  {
    objc_msgSend(v111[20], "targetProcess");
    v166 = (id)objc_claimAutoreleasedReturnValue();
    v111 = (id *)v540;
  }
  v206 = (void *)objc_msgSend(MEMORY[0x1E0C9AA60], "mutableCopy");
  v207 = v111[20];
  *(_QWORD *)&v593 = MEMORY[0x1E0C809B0];
  *((_QWORD *)&v593 + 1) = 3221225472;
  *(_QWORD *)&v594 = __41__SASamplePrinter_printTasksIndividually__block_invoke;
  *((_QWORD *)&v594 + 1) = &unk_1E7149180;
  v208 = v166;
  *(_QWORD *)&v595 = v208;
  *((_QWORD *)&v595 + 1) = v111;
  v209 = v206;
  *(_QWORD *)&v596 = v209;
  objc_msgSend(v207, "enumerateTasks:", &v593);
  objc_msgSend(*(id *)(v540 + 16), "processSortAttributes");
  v210 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)&v576 = MEMORY[0x1E0C809B0];
  *((_QWORD *)&v576 + 1) = 3221225472;
  *(_QWORD *)&v577 = __41__SASamplePrinter_printTasksIndividually__block_invoke_2;
  *((_QWORD *)&v577 + 1) = &unk_1E7149248;
  *(_QWORD *)&v578 = v540;
  v211 = v210;
  *((_QWORD *)&v578 + 1) = v211;
  objc_msgSend(v209, "sortUsingComparator:", &v576);
  *(_QWORD *)&v572 = 0;
  *((_QWORD *)&v572 + 1) = &v572;
  *(_QWORD *)&v573 = 0x2020000000;
  BYTE8(v573) = 1;
  *(_QWORD *)&v586 = MEMORY[0x1E0C809B0];
  *((_QWORD *)&v586 + 1) = 3221225472;
  *(_QWORD *)&v587 = __41__SASamplePrinter_printTasksIndividually__block_invoke_952;
  *((_QWORD *)&v587 + 1) = &unk_1E7149270;
  *(_QWORD *)&v588 = v540;
  *(_QWORD *)&v589 = &v572;
  v212 = v208;
  *((_QWORD *)&v588 + 1) = v212;
  v213 = MEMORY[0x1BCCCC450](&v586);
  v214 = (void (**)(_QWORD, _QWORD))v213;
  if (v212)
    (*(void (**)(uint64_t, id))(v213 + 16))(v213, v212);
  v602 = 0u;
  v603 = 0u;
  v600 = 0u;
  v601 = 0u;
  v215 = v209;
  v216 = objc_msgSend(v215, "countByEnumeratingWithState:objects:count:", &v600, v604, 16);
  if (v216)
  {
    v217 = *(_QWORD *)v601;
    do
    {
      for (jj = 0; jj != v216; ++jj)
      {
        if (*(_QWORD *)v601 != v217)
          objc_enumerationMutation(v215);
        v214[2](v214, *(_QWORD *)(*((_QWORD *)&v600 + 1) + 8 * jj));
      }
      v216 = objc_msgSend(v215, "countByEnumeratingWithState:objects:count:", &v600, v604, 16);
    }
    while (v216);
  }

  _Block_object_dispose(&v572, 8);
LABEL_335:
  v111 = (id *)v540;
  if (objc_msgSend(*(id *)(v540 + 16), "printJson"))
    objc_msgSend(*(id *)(v540 + 8), "appendString:", CFSTR("]"));
LABEL_337:
  if (!objc_msgSend(v111[2], "displayFooter"))
    goto LABEL_458;
  if (objc_msgSend(v111[2], "printJson"))
  {
    objc_msgSend(v111[1], "appendString:", CFSTR(",\n\n\"sharedcaches\":["));
    v600 = 0u;
    v601 = 0u;
    v602 = 0u;
    v603 = 0u;
    objc_msgSend(v111[20], "sharedCaches");
    v292 = (void *)objc_claimAutoreleasedReturnValue();
    v293 = objc_msgSend(v292, "countByEnumeratingWithState:objects:count:", &v600, v604, 16);
    if (v293)
    {
      v294 = 1;
      v295 = *(_QWORD *)v601;
      do
      {
        for (kk = 0; kk != v293; ++kk)
        {
          if (*(_QWORD *)v601 != v295)
            objc_enumerationMutation(v292);
          v297 = *(void **)(*((_QWORD *)&v600 + 1) + 8 * kk);
          objc_msgSend(MEMORY[0x1E0C99E38], "null");
          v298 = (void *)objc_claimAutoreleasedReturnValue();
          if (v297 == v298)
          {

          }
          else
          {
            objc_msgSend(v297, "binaryLoadInfos");
            v299 = (void *)objc_claimAutoreleasedReturnValue();
            v300 = objc_msgSend(v299, "count") == 0;

            if (!v300)
            {
              if ((v294 & 1) == 0)
                objc_msgSend(*(id *)(v540 + 8), "appendString:", CFSTR(",\n\n"));
              objc_msgSend(*(id *)(v540 + 8), "appendString:", CFSTR("{"));
              v301 = *(void **)(v540 + 8);
              objc_msgSend(v297, "uuid");
              v302 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v302, "UUIDString");
              v303 = (void *)objc_claimAutoreleasedReturnValue();
              SAJSONWriteDictionaryFirstEntry(v301, (uint64_t)CFSTR("uuid"), v303);

              v304 = *(void **)(v540 + 8);
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v297, "slide"));
              v305 = (void *)objc_claimAutoreleasedReturnValue();
              SAJSONWriteDictionaryEntry(v304, CFSTR("slide"), v305);

              v306 = *(void **)(v540 + 8);
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v297, "slidBaseAddress"));
              v307 = (void *)objc_claimAutoreleasedReturnValue();
              SAJSONWriteDictionaryEntry(v306, CFSTR("slidBaseAddress"), v307);

              v308 = *(void **)(v540 + 8);
              objc_msgSend(v297, "binaryLoadInfos");
              v309 = (void *)objc_claimAutoreleasedReturnValue();
              SAJSONWriteDictionaryEntry(v308, CFSTR("binaryLoadInfos"), v309);

              objc_msgSend(*(id *)(v540 + 8), "appendString:", CFSTR("}"));
              v294 = 0;
            }
          }
        }
        v293 = objc_msgSend(v292, "countByEnumeratingWithState:objects:count:", &v600, v604, 16);
      }
      while (v293);
    }

    objc_msgSend(*(id *)(v540 + 8), "appendString:", CFSTR("]\n\n"));
LABEL_457:
    v111 = (id *)v540;
    goto LABEL_458;
  }
  objc_msgSend(v111[20], "kextStat");
  v310 = (void *)objc_claimAutoreleasedReturnValue();

  if (v310)
  {
    v311 = *(void **)(v540 + 8);
    objc_msgSend(*(id *)(v540 + 160), "kextStat");
    v312 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v311, "printWithFormat:", CFSTR("\n\nKextstat:\n%@"), v312);

  }
  v313 = v540;
  if (objc_msgSend(*(id *)(v540 + 16), "displayAllBinaries"))
  {
    v574 = 0u;
    v575 = 0u;
    v572 = 0u;
    v573 = 0u;
    objc_msgSend(*(id *)(v540 + 160), "sharedCaches");
    v314 = (void *)objc_claimAutoreleasedReturnValue();
    v315 = objc_msgSend(v314, "countByEnumeratingWithState:objects:count:", &v572, &v600, 16);
    if (!v315)
      goto LABEL_367;
    v316 = *(_QWORD *)v573;
    while (1)
    {
      for (mm = 0; mm != v315; ++mm)
      {
        if (*(_QWORD *)v573 != v316)
          objc_enumerationMutation(v314);
        v318 = *(void **)(*((_QWORD *)&v572 + 1) + 8 * mm);
        objc_msgSend(MEMORY[0x1E0C99E38], "null");
        v319 = (void *)objc_claimAutoreleasedReturnValue();
        if (v318 != v319)
        {
          objc_msgSend(v318, "binaryLoadInfos");
          v320 = (void *)objc_claimAutoreleasedReturnValue();
          v321 = objc_msgSend(v320, "count") == 0;

          if (v321)
            continue;
          v322 = *(void **)(v540 + 8);
          _shared_cache_display_string(v318);
          v323 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v322, "printWithFormat:", CFSTR("\n\nShared Cache %@:\n"), v323);

          objc_msgSend(v318, "binaryLoadInfos");
          v318 = (void *)objc_claimAutoreleasedReturnValue();
          -[SASamplePrinter printLoadInfos:]((id *)v540, v318);
        }

      }
      v315 = objc_msgSend(v314, "countByEnumeratingWithState:objects:count:", &v572, &v600, 16);
      if (!v315)
      {
LABEL_367:

        v313 = v540;
        break;
      }
    }
  }
  if (objc_msgSend(*(id *)(v313 + 16), "displayTrialInformation"))
  {
    objc_msgSend(*(id *)(v540 + 160), "activeTrials");
    v324 = (void *)objc_claimAutoreleasedReturnValue();
    v325 = v324 == 0;

    if (!v325)
    {
      v326 = objc_msgSend(*(id *)(v540 + 16), "printJson");
      v327 = *(void **)(v540 + 8);
      if (v326)
      {
        objc_msgSend(*(id *)(v540 + 160), "activeTrials");
        v528 = (id)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v327, CFSTR("activeTrials"), v528);

      }
      else
      {
        objc_msgSend(*(id *)(v540 + 8), "appendString:", CFSTR("\n\n"));
        v598 = 0u;
        v599 = 0u;
        memset(v597, 0, sizeof(v597));
        objc_msgSend(*(id *)(v540 + 160), "activeTrials");
        v328 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v328, "objectForKeyedSubscript:", 0x1E714CB70);
        v529 = (id)objc_claimAutoreleasedReturnValue();

        v329 = objc_msgSend(v529, "countByEnumeratingWithState:objects:count:", v597, &v593, 16);
        if (v329)
        {
          v536 = **(id **)&v597[16];
          do
          {
            for (nn = 0; nn != v329; ++nn)
            {
              if (**(id **)&v597[16] != v536)
                objc_enumerationMutation(v529);
              v331 = *(void **)(*(_QWORD *)&v597[8] + 8 * nn);
              v332 = objc_opt_class();
              v333 = objc_opt_class();
              DictGetDictOfClasses(v331, CFSTR("namespace_ids"), v332, v333);
              v334 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v334, "allKeys");
              v335 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v335, "sortedArrayUsingSelector:", sel_compare_);
              v336 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v336, "componentsJoinedByString:", CFSTR(","));
              v337 = (__CFString *)objc_claimAutoreleasedReturnValue();

              DictGetString(v331, CFSTR("experiment_id"));
              v338 = (void *)objc_claimAutoreleasedReturnValue();
              DictGetString(v331, CFSTR("treatment_id"));
              v339 = (void *)objc_claimAutoreleasedReturnValue();
              v340 = CFSTR("unknown");
              if (v337)
                v340 = v337;
              objc_msgSend(*(id *)(v540 + 8), "printWithFormat:", CFSTR("%-*s%@ (treatment:%@ namespaces:%@)\n"), 18, "Trial Experiment: ", v338, v339, v340);

            }
            v329 = objc_msgSend(v529, "countByEnumeratingWithState:objects:count:", v597, &v593, 16);
          }
          while (v329);
        }

        v570 = 0u;
        v571 = 0u;
        v568 = 0u;
        v569 = 0u;
        objc_msgSend(*(id *)(v540 + 160), "activeTrials");
        v341 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v341, "objectForKeyedSubscript:", 0x1E714CB90);
        v530 = (id)objc_claimAutoreleasedReturnValue();

        v342 = objc_msgSend(v530, "countByEnumeratingWithState:objects:count:", &v568, &v586, 16);
        if (v342)
        {
          v537 = *(id *)v569;
          do
          {
            for (i1 = 0; i1 != v342; ++i1)
            {
              if (*(id *)v569 != v537)
                objc_enumerationMutation(v530);
              v344 = *(void **)(*((_QWORD *)&v568 + 1) + 8 * i1);
              v345 = objc_opt_class();
              v346 = objc_opt_class();
              DictGetDictOfClasses(v344, CFSTR("factor_pack_ids"), v345, v346);
              v347 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v347, "allKeys");
              v348 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v348, "sortedArrayUsingSelector:", sel_compare_);
              v349 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v349, "componentsJoinedByString:", CFSTR(","));
              v350 = (void *)objc_claimAutoreleasedReturnValue();

              DictGetString(v344, CFSTR("rollout_id"));
              v351 = (void *)objc_claimAutoreleasedReturnValue();
              DictGetString(v344, CFSTR("ramp_id"));
              v352 = (__CFString *)objc_claimAutoreleasedReturnValue();
              v353 = CFSTR("none");
              if (v352)
                v353 = v352;
              objc_msgSend(*(id *)(v540 + 8), "printWithFormat:", CFSTR("%-*s%@ (ramp:%@ namespaces:%@)\n"), 18, "Trial Rollout: ", v351, v353, v350);

            }
            v342 = objc_msgSend(v530, "countByEnumeratingWithState:objects:count:", &v568, &v586, 16);
          }
          while (v342);
        }

      }
    }
  }
  v354 = *(_BYTE **)(v540 + 160);
  if (v354)
  {
    if ((v354[325] & 1) != 0)
    {
      v355 = objc_msgSend(*(id *)(v540 + 16), "hidEventDisplayOptions");
      v354 = *(_BYTE **)(v540 + 160);
      if ((v355 & 0x18) != 0)
      {
        v578 = 0u;
        v579 = 0u;
        v576 = 0u;
        v577 = 0u;
        objc_msgSend(v354, "hidEvents");
        v356 = (void *)objc_claimAutoreleasedReturnValue();
        v357 = objc_msgSend(v356, "countByEnumeratingWithState:objects:count:", &v576, v604, 16);
        if (v357)
        {
          v358 = *(_QWORD *)v577;
          v538 = 1;
          do
          {
            for (i2 = 0; i2 != v357; ++i2)
            {
              if (*(_QWORD *)v577 != v358)
                objc_enumerationMutation(v356);
              v360 = *(void **)(*((_QWORD *)&v576 + 1) + 8 * i2);
              if ((objc_msgSend(*(id *)(v540 + 16), "hidEventDisplayOptions") & 0x10) != 0)
                goto LABEL_489;
              if ((objc_msgSend(*(id *)(v540 + 16), "hidEventDisplayOptions") & 4) != 0)
              {
                if (objc_msgSend(*(id *)(v540 + 160), "targetHIDEventMachAbs"))
                {
                  objc_msgSend(v360, "hidEventTimestamp");
                  v361 = (void *)objc_claimAutoreleasedReturnValue();
                  v362 = objc_msgSend(v361, "machAbsTime");
                  v363 = v362 == objc_msgSend(*(id *)(v540 + 160), "targetHIDEventMachAbs");

                  if (v363)
                    continue;
                }
              }
              objc_msgSend(v360, "steps");
              v365 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v365, "lastObject");
              v366 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v366, "timestamp");
              v367 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v367, "machAbsTimeSeconds");
              v369 = v368;
              objc_msgSend(v360, "hidEventTimestamp");
              v370 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v370, "machAbsTimeSeconds");
              v372 = v371;

              v364 = v369 - v372;
              if (v369 - v372 >= 0.2)
              {
LABEL_489:
                objc_msgSend(v360, "steps");
                v373 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v373, "lastObject");
                v374 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v374, "timestamp");
                v375 = (void *)objc_claimAutoreleasedReturnValue();
                v376 = objc_msgSend(v375, "lt:", *(_QWORD *)(v540 + 32));

                if ((v376 & 1) == 0)
                {
                  objc_msgSend(v360, "steps");
                  v377 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v377, "firstObject");
                  v378 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v378, "timestamp");
                  v379 = (void *)objc_claimAutoreleasedReturnValue();
                  v380 = objc_msgSend(v379, "gt:", *(_QWORD *)(v540 + 40));

                  if ((v380 & 1) == 0)
                  {
                    v381 = CFSTR("\n");
                    if ((v538 & 1) != 0)
                    {
                      v382 = objc_msgSend(*(id *)(v540 + 16), "hidEventDisplayOptions", CFSTR("\n"));
                      v381 = CFSTR("\n\nAll HID events:\n");
                      if ((v382 & 0x10) == 0)
                      {
                        if ((objc_msgSend(*(id *)(v540 + 16), "hidEventDisplayOptions", CFSTR("\n\nAll HID events:\n")) & 4) == 0
                          || (v383 = objc_msgSend(*(id *)(v540 + 160), "targetHIDEventMachAbs"),
                              v381 = CFSTR("\n\nOther slow HID events:\n"),
                              !v383))
                        {
                          v381 = CFSTR("\n\nSlow HID events:\n");
                        }
                      }
                    }
                    objc_msgSend(*(id *)(v540 + 8), "appendString:", v381);
                    -[SASamplePrinter printHIDEvent:](v540, v360);
                    v538 = 0;
                  }
                }
              }
            }
            v357 = objc_msgSend(v356, "countByEnumeratingWithState:objects:count:", &v576, v604, 16, v364);
          }
          while (v357);
        }

        v354 = *(_BYTE **)(v540 + 160);
      }
    }
  }
  objc_msgSend(v354, "ioEvents");
  v384 = (void *)objc_claimAutoreleasedReturnValue();
  v385 = objc_msgSend(v384, "count") == 0;

  if (v385)
    goto LABEL_450;
  inited = init_io_histograms();
  v576 = 0u;
  v577 = 0u;
  v578 = 0u;
  v579 = 0u;
  objc_msgSend(*(id *)(v540 + 160), "ioEvents");
  v534 = (id)objc_claimAutoreleasedReturnValue();
  v386 = objc_msgSend(v534, "countByEnumeratingWithState:objects:count:", &v576, v604, 16);
  if (!v386)
  {

    goto LABEL_449;
  }
  v387 = 0;
  v388 = *(_QWORD *)v577;
  while (2)
  {
    for (i3 = 0; i3 != v386; ++i3)
    {
      if (*(_QWORD *)v577 != v388)
        objc_enumerationMutation(v534);
      v390 = *(void **)(*((_QWORD *)&v576 + 1) + 8 * i3);
      objc_msgSend(v390, "endTimestamp");
      v391 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(*(id *)(v540 + 32), "gt:", v391) & 1) == 0)
      {
        if ((objc_msgSend(*(id *)(v540 + 40), "lt:", v391) & 1) != 0)
        {

          goto LABEL_439;
        }
        objc_msgSend(v390, "startTimestamp");
        v392 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v391, "machContTimeSeconds");
        if (v393 == 0.0 || (objc_msgSend(v392, "machContTimeSeconds"), v394 == 0.0))
        {
          objc_msgSend(v391, "machAbsTimeSeconds");
          if (v398 == 0.0 || (objc_msgSend(v392, "machAbsTimeSeconds"), v399 == 0.0))
          {
            objc_msgSend(v391, "wallTime");
            if (v401 == 0.0 || (objc_msgSend(v392, "wallTime"), v402 == 0.0))
            {
              v404 = 0;
              goto LABEL_434;
            }
            objc_msgSend(v391, "wallTime");
            v396 = v403;
            objc_msgSend(v392, "wallTime");
          }
          else
          {
            objc_msgSend(v391, "machAbsTimeSeconds");
            v396 = v400;
            objc_msgSend(v392, "machAbsTimeSeconds");
          }
        }
        else
        {
          objc_msgSend(v391, "machContTimeSeconds");
          v396 = v395;
          objc_msgSend(v392, "machContTimeSeconds");
        }
        v404 = (unint64_t)((v396 - v397) * 1000000.0);
LABEL_434:
        update_histograms_stats((unsigned int *)inited, objc_msgSend(v390, "tier"), objc_msgSend(v390, "size"), v404, objc_msgSend(v390, "isRead"));

        v387 = 1;
      }

    }
    v386 = objc_msgSend(v534, "countByEnumeratingWithState:objects:count:", &v576, v604, 16);
    if (v386)
      continue;
    break;
  }

LABEL_439:
  if ((v387 & 1) != 0)
  {
    v405 = malloc_type_calloc(1uLL, 0x2000uLL, 0x86BD5AF3uLL);
    if (print_io_histograms((unsigned int *)inited, (char *)v405, (const char *)0x2000))
    {
      LODWORD(v406) = 0x2000;
      while (1)
      {
        free(v405);
        v406 = (2 * v406);
        if (v406 > 0x20000)
          break;
        v405 = malloc_type_calloc(1uLL, v406, 0x53E367E0uLL);
        if (!print_io_histograms((unsigned int *)inited, (char *)v405, (const char *)v406))
          goto LABEL_444;
      }
      LODWORD(v407) = *__error();
      _sa_logt();
      v408 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled((os_log_t)v408, OS_LOG_TYPE_FAULT))
      {
LABEL_448:

        *__error() = (int)v407;
        goto LABEL_449;
      }
LABEL_480:
      *(_WORD *)v562 = 0;
      _os_log_fault_impl(&dword_1B9BE0000, (os_log_t)v408, OS_LOG_TYPE_FAULT, "io histograms don't fit in 128KB", v562, 2u);
      goto LABEL_448;
    }
LABEL_444:
    if (v405)
    {
      objc_msgSend(*(id *)(v540 + 8), "printWithFormat:", CFSTR("\n\n%s\n"), v405);
      free(v405);
    }
  }
LABEL_449:
  free(inited);
LABEL_450:
  v111 = (id *)v540;
  if (-[SASamplePrinter hasTimeIndexes](v540))
  {
    v409 = *(uint64_t **)(v540 + 160);
    v410 = *(_QWORD *)(v540 + 48);
    v411 = *(_QWORD *)(v540 + 56);
    if (-[SASamplePrinter hasTimeIndexes](v540))
    {
      v412 = objc_msgSend(*(id *)(v540 + 16), "forceOneBasedTimeIndexes");
      v413 = v410 + 1;
      v111 = (id *)v540;
      if (v412)
        v413 -= *(_QWORD *)(v540 + 48);
    }
    else
    {
      v413 = 0x7FFFFFFFFFFFFFFFLL;
      v111 = (id *)v540;
    }
    if (v409)
    {
      -[SAWSUpdateDataStore printFrameRateReportWithStartSampleIndex:endSampleIndex:startDisplayIndex:sampleDataStore:toStream:](v409[16], v410, v411, v413, v409, v111[1]);
      goto LABEL_457;
    }
  }
LABEL_458:
  objc_msgSend(v111[20], "customOutput");
  v414 = (void *)objc_claimAutoreleasedReturnValue();

  v415 = v540;
  if (v414)
  {
    v416 = objc_msgSend(*(id *)(v540 + 16), "printJson");
    v417 = *(void **)(v540 + 8);
    if (v416)
    {
      objc_msgSend(*(id *)(v540 + 160), "customOutput");
      v418 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v417, CFSTR("customOutput"), v418);
    }
    else
    {
      objc_msgSend(*(id *)(v540 + 8), "printWithFormat:", CFSTR("\n\nCustom Output:\n"));
      v419 = *(void **)(v540 + 8);
      objc_msgSend(*(id *)(v540 + 160), "customOutput");
      v418 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v419, "appendString:", v418);
    }

    v415 = v540;
  }
  if (objc_msgSend(*(id *)(v415 + 16), "printJson"))
    objc_msgSend(*(id *)(v415 + 8), "appendString:", CFSTR("}"));
  if (*(_BYTE *)(v415 + 104) && !*(_BYTE *)(v415 + 105))
  {
    v420 = *__error();
    _sa_logt();
    v421 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v421, OS_LOG_TYPE_FAULT))
    {
      objc_msgSend(*(id *)(v540 + 16), "debugDescription");
      v539 = (id)objc_claimAutoreleasedReturnValue();
      v424 = objc_msgSend(*(id *)(v540 + 160), "targetProcessId");
      objc_msgSend(*(id *)(v540 + 160), "targetProcess");
      v425 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v425, "debugDescription");
      v426 = (void *)objc_claimAutoreleasedReturnValue();
      v427 = objc_msgSend(*(id *)(v540 + 160), "targetThreadId");
      objc_msgSend(*(id *)(v540 + 160), "targetProcess");
      v428 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v428, "threads");
      v429 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(*(id *)(v540 + 160), "targetThreadId"));
      v430 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v429, "objectForKeyedSubscript:", v430);
      v431 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v604 = 138544386;
      v605 = (uint64_t)v539;
      v606 = 1024;
      v607 = v424;
      v608 = 2114;
      v609 = v426;
      v610 = 2048;
      v611 = v427;
      v612 = 2114;
      v613 = v431;
      _os_log_fault_impl(&dword_1B9BE0000, v421, OS_LOG_TYPE_FAULT, "Hit 65324447!\noptions: %{public}@\ntargetTask %d: %{public}@\ntargetThread 0x%llx: %{public}@", v604, 0x30u);

    }
    *__error() = v420;
  }
  v422 = +[SABinaryLocator sharedBinaryLocator](SABinaryLocator, "sharedBinaryLocator");
  v423 = v422;
  if (v422)
  {
    if (v422[25])
      -[SABinaryLocator _saveMappings](v422);
  }
  objc_msgSend(v423, "done");

LABEL_12:
  objc_autoreleasePoolPop(context);
}

- (void)printHeader
{
  uint64_t v0;
  void *v1;
  void *v2;
  BOOL v3;
  double v4;
  double v5;
  double v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  __CFString *v19;
  void *v20;
  double v21;
  long double v22;
  int v23;
  __CFString *v24;
  void *v25;
  double v26;
  long double v27;
  int v28;
  __CFString *v29;
  id *v30;
  uint64_t v31;
  void *v32;
  __CFString *v33;
  uint64_t v34;
  void *v35;
  __CFString *v36;
  __CFString *v37;
  uint64_t v38;
  void *v39;
  __CFString *v40;
  __CFString *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  id *v49;
  char v50;
  char v51;
  char *v52;
  id *v53;
  id *v54;
  char v55;
  void *v56;
  __CFString *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t i;
  void *v63;
  id v64;
  uint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t j;
  id v71;
  void *v72;
  void *v73;
  id v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  id *v82;
  void *v83;
  id v84;
  id v85;
  void *v86;
  double v87;
  uint64_t v88;
  id v89;
  int v90;
  NSObject *v91;
  uint64_t v92;
  void *v93;
  id v94;
  uint64_t v95;
  void *v96;
  id v97;
  void *v98;
  void *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  char v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  uint64_t v116;
  void *v117;
  __CFString *v118;
  uint64_t v119;
  void *v120;
  const __CFString *v121;
  void *v122;
  void *v123;
  void *v124;
  const char *v125;
  int v126;
  void *v127;
  id Property;
  _BOOL4 v129;
  id v130;
  double v131;
  double v132;
  double v133;
  double v134;
  void *v135;
  void *v136;
  void *v137;
  BOOL v138;
  void *v139;
  void *v140;
  double v141;
  double v142;
  double v143;
  double v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  id v148;
  const __CFString *v149;
  __CFString *v150;
  __CFString *v151;
  id v152;
  void *v153;
  id v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  id v160;
  void *v161;
  id v162;
  id v163;
  void *v164;
  void *v165;
  id v166;
  void *v167;
  void *v168;
  double v169;
  double v170;
  id v171;
  void *v172;
  void *v173;
  id v174;
  void *v175;
  void *v176;
  id v177;
  void *v178;
  void *v179;
  id v180;
  void *v181;
  void *v182;
  void *v183;
  double v184;
  double v185;
  double v186;
  double v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  double v192;
  double v193;
  double v194;
  double v195;
  double v196;
  double v197;
  id v198;
  uint64_t v199;
  void *v200;
  id v201;
  uint64_t v202;
  id v203;
  uint64_t v204;
  id v205;
  uint64_t v206;
  id v207;
  uint64_t v208;
  double v209;
  id v210;
  void *v211;
  id v212;
  void *v213;
  void *v214;
  id v215;
  void *v216;
  id v217;
  void *v218;
  void *v219;
  void *v220;
  unint64_t v221;
  double v222;
  double v223;
  void *v224;
  uint64_t v225;
  double v226;
  unint64_t v227;
  double v228;
  double v229;
  id v230;
  uint64_t v231;
  id v232;
  uint64_t v233;
  id v234;
  uint64_t v235;
  double v236;
  id v237;
  void *v238;
  id v239;
  void *v240;
  void *v241;
  id v242;
  void *v243;
  id v244;
  void *v245;
  void *v246;
  void *v247;
  unint64_t v248;
  double v249;
  double v250;
  void *v251;
  void *v252;
  uint64_t v253;
  uint64_t v254;
  double v255;
  unint64_t v256;
  double v257;
  id v258;
  void *v259;
  uint64_t v260;
  id v261;
  void *v262;
  id v263;
  uint64_t v264;
  id v265;
  void *v266;
  id v267;
  uint64_t v268;
  double v269;
  double v270;
  void *v271;
  double v272;
  void *v273;
  double v274;
  _BOOL4 v275;
  void *v276;
  void *v277;
  double v278;
  double v279;
  _BOOL4 v280;
  void *v281;
  double v282;
  _BOOL4 v283;
  double v284;
  double v285;
  double v286;
  double v287;
  double v288;
  double v289;
  double v290;
  double v291;
  double v292;
  double v293;
  double v294;
  double v295;
  double v296;
  double v297;
  void *v298;
  id v299;
  void *v300;
  id v301;
  void *v302;
  id v303;
  void *v304;
  void *v305;
  void *v306;
  double v307;
  id v308;
  void *v309;
  void *v310;
  void *v311;
  id v312;
  void *v313;
  uint64_t v314;
  id v315;
  void *v316;
  void *v317;
  void *v318;
  void *v319;
  void *v320;
  double v321;
  double v322;
  void *v323;
  void *v324;
  double v325;
  double v326;
  void *v327;
  void *v328;
  double v329;
  double v330;
  void *v331;
  void *v332;
  double v333;
  double v334;
  id v335;
  void *v336;
  void *v337;
  void *v338;
  void *v339;
  int v340;
  void *v341;
  BOOL v342;
  void *v343;
  BOOL v344;
  void *v345;
  uint64_t v346;
  char v347;
  uint64_t v348;
  uint64_t k;
  void *v350;
  uint64_t v351;
  void *v352;
  id v353;
  void *v354;
  void *v355;
  void *v356;
  void *v357;
  int v358;
  void *v359;
  void *v360;
  int v361;
  void *v362;
  void *v363;
  int v364;
  int v365;
  NSObject *v366;
  void *v367;
  void *v368;
  double v369;
  double v370;
  double v371;
  void *v372;
  double v373;
  double v374;
  double v375;
  void *v376;
  double v377;
  double v378;
  double v379;
  double v380;
  id v381;
  void *v382;
  void *v383;
  uint64_t v384;
  void *v385;
  id v386;
  void *v387;
  void *v388;
  void *v389;
  void *v390;
  void *v391;
  void *v392;
  void *v393;
  id v394;
  id v395;
  void *v396;
  id v397;
  void *v398;
  void *v399;
  double v400;
  double v401;
  double v402;
  double v403;
  double v404;
  id v405;
  void *v406;
  void *v407;
  id v408;
  void *v409;
  void *v410;
  id v411;
  void *v412;
  void *v413;
  double v414;
  double v415;
  uint64_t v416;
  void *v417;
  double v418;
  double v419;
  uint64_t v420;
  double v421;
  double v422;
  double v423;
  double v424;
  double v425;
  double v426;
  id v427;
  void *v428;
  void *v429;
  id v430;
  void *v431;
  void *v432;
  id v433;
  void *v434;
  void *v435;
  double v436;
  void *v437;
  double v438;
  double v439;
  uint64_t v440;
  void *v441;
  double v442;
  double v443;
  uint64_t v444;
  double v445;
  void *v446;
  double v447;
  double v448;
  uint64_t v449;
  void *v450;
  id v451;
  void *v452;
  void *v453;
  id v454;
  void *v455;
  void *v456;
  id v457;
  void *v458;
  void *v459;
  void *v460;
  BOOL v461;
  void *v462;
  void *v463;
  uint64_t v464;
  void *v465;
  void *v466;
  void *v467;
  void *v468;
  char v469;
  id v470;
  void *v471;
  void *v472;
  id v473;
  void *v474;
  void *v475;
  id v476;
  void *v477;
  void *v478;
  void *v479;
  BOOL v480;
  void *v481;
  void *v482;
  uint64_t v483;
  unint64_t v484;
  id v485;
  void *v486;
  id v487;
  void *v488;
  double v489;
  double v490;
  double v491;
  double v492;
  double v493;
  id v494;
  void *v495;
  void *v496;
  id v497;
  void *v498;
  void *v499;
  void *v500;
  double v501;
  double v502;
  uint64_t v503;
  void *v504;
  double v505;
  double v506;
  uint64_t v507;
  double v508;
  double v509;
  double v510;
  double v511;
  double v512;
  id v513;
  void *v514;
  void *v515;
  id v516;
  void *v517;
  void *v518;
  void *v519;
  double v520;
  double v521;
  uint64_t v522;
  void *v523;
  double v524;
  double v525;
  uint64_t v526;
  double v527;
  double v528;
  double v529;
  double v530;
  double v531;
  void *v532;
  void *v533;
  id v534;
  void *v535;
  void *v536;
  id v537;
  void *v538;
  void *v539;
  id v540;
  void *v541;
  id v542;
  void *v543;
  void *v544;
  void *v545;
  char v546;
  uint64_t v547;
  void *v548;
  __CFString *v549;
  __CFString *v550;
  id v551;
  void *v552;
  double v553;
  double v554;
  void *v555;
  void *v556;
  double v557;
  double v558;
  double v559;
  double v560;
  double v561;
  double v562;
  id v563;
  void *v564;
  double v565;
  double v566;
  double v567;
  double v568;
  id v569;
  void *v570;
  void *v571;
  double v572;
  double v573;
  id v574;
  void *v575;
  void *v576;
  uint64_t v577;
  double v578;
  id v579;
  uint64_t v580;
  id v581;
  double v582;
  id v583;
  void *v584;
  double v585;
  void *v586;
  double v587;
  id v588;
  void *v589;
  void *v590;
  id v591;
  void *v592;
  void *v593;
  double v594;
  int v595;
  id v596;
  void *v597;
  id v598;
  void *v599;
  void *v600;
  uint64_t v601;
  uint64_t v602;
  unsigned int v603;
  uint64_t v604;
  uint64_t v605;
  unint64_t v606;
  id v607;
  id v608;
  void *v609;
  id v610;
  id v611;
  id v612;
  void *v613;
  id v614;
  void *v615;
  id v616;
  void *v617;
  unint64_t v618;
  void *v619;
  uint64_t v620;
  unint64_t v621;
  void *v622;
  BOOL v623;
  uint64_t v624;
  unint64_t v625;
  unint64_t v626;
  uint64_t v627;
  unsigned __int8 v628;
  uint64_t m;
  void *v630;
  void *v631;
  void *v632;
  void *v633;
  void *v634;
  unint64_t v635;
  id v636;
  void *v637;
  id v638;
  void *v639;
  id v640;
  void *v641;
  id v642;
  id v643;
  void *v644;
  void *v645;
  BOOL v646;
  uint64_t v647;
  unint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  void *v652;
  void *v653;
  void *v654;
  void *v655;
  void *v656;
  void *v657;
  void *v658;
  void *v659;
  void *v660;
  void *v661;
  void *v662;
  void *v663;
  void *v664;
  void *v665;
  void *v666;
  double v667;
  double v668;
  double v669;
  void *v670;
  void *v671;
  id v672;
  void *v673;
  void *v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t n;
  void *v678;
  id v679;
  void *v680;
  void *v681;
  id v682;
  void *v683;
  void *v684;
  double v685;
  double v686;
  id v687;
  void *v688;
  double v689;
  double v690;
  void *v691;
  void *v692;
  uint64_t ii;
  void *v694;
  id v695;
  id v696;
  uint64_t v697;
  void *v698;
  double v699;
  double v700;
  void *v701;
  double v702;
  void *v703;
  double v704;
  double v705;
  void *v706;
  void *v707;
  void *v708;
  id v709;
  void *v710;
  id v711;
  uint64_t v712;
  id v713;
  id v714;
  void *v715;
  void *v716;
  void *v717;
  void *v718;
  void *v719;
  void *v720;
  void *v721;
  id v722;
  void *v723;
  void *v724;
  id v725;
  void *v726;
  void *v727;
  BOOL v728;
  id v729;
  void *v730;
  _QWORD *v731;
  void *v732;
  uint64_t v733;
  char v734;
  uint64_t v735;
  char v736;
  char v737;
  void *v738;
  uint64_t v739;
  double v740;
  uint64_t jj;
  void *v742;
  void *v743;
  void *v744;
  void *v745;
  double v746;
  double v747;
  void *v748;
  double v749;
  double v750;
  id v751;
  double v752;
  double v753;
  double v754;
  char v755;
  void *v756;
  double v757;
  double v758;
  uint64_t v759;
  void *v760;
  double v761;
  double v762;
  uint64_t v763;
  id v764;
  double v765;
  double v766;
  double v767;
  double v768;
  id v769;
  void *v770;
  uint64_t v771;
  void *v772;
  double v773;
  double v774;
  double v775;
  double v776;
  id v777;
  void *v778;
  unint64_t v779;
  id v780;
  void *v781;
  id v782;
  uint64_t v783;
  void *v784;
  id v785;
  uint64_t v786;
  void *v787;
  id v788;
  uint64_t v789;
  void *v790;
  void *v791;
  id v792;
  void *v793;
  unint64_t v794;
  _QWORD *v795;
  uint64_t v796;
  uint64_t v797;
  void *v798;
  void *v799;
  void *v800;
  void *v801;
  void *v802;
  void *v803;
  void *v804;
  BOOL v805;
  unint64_t v806;
  void *v807;
  char v808;
  char v809;
  void *v810;
  void *v811;
  int v812;
  void *v813;
  double v814;
  double v815;
  void *v816;
  BOOL v817;
  id v818;
  void *v819;
  double v820;
  void *v821;
  void *v822;
  void *v823;
  void *v824;
  id v825;
  void *v826;
  void *v827;
  unint64_t v828;
  id v829;
  void *v830;
  double v831;
  void *v832;
  void *v833;
  id v834;
  void *v835;
  void *v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  void *v840;
  void *v841;
  uint64_t v842;
  void *v843;
  double v844;
  double v845;
  double v846;
  double v847;
  int v848;
  id v849;
  void *v850;
  id v851;
  id v852;
  uint64_t v853;
  void *v854;
  const __CFString *v855;
  uint64_t v856;
  void *v857;
  const __CFString *v858;
  uint64_t v859;
  id v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  void *v864;
  id v865;
  void *v866;
  int v867;
  void *v868;
  void *v869;
  void *v870;
  void *v871;
  void *v872;
  void *v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t mm;
  uint64_t v877;
  void *v878;
  void *v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  id v886;
  id v887;
  void *v888;
  uint64_t v889;
  id v890;
  void *v891;
  id v892;
  _BOOL4 v893;
  id *v894;
  id v895;
  id v896;
  void *v897;
  id v898;
  uint64_t v899;
  const char *v900;
  void *v901;
  void *v902;
  void *v903;
  id v904;
  void *v905;
  id v906;
  const char *v907;
  id v908;
  id v909;
  void *v910;
  const char *v911;
  void *v912;
  id v913;
  void *v914;
  void *v915;
  void *v916;
  uint64_t v917;
  void *v918;
  id v919;
  id v920;
  void *v921;
  id v922;
  id v923;
  uint64_t v924;
  uint64_t v925;
  void *v926;
  id v927;
  void *v928;
  void *v929;
  void *v930;
  void *v931;
  int v932;
  NSObject *v933;
  void *v934;
  id v935;
  void *v936;
  void *v937;
  void *v938;
  void *v939;
  void *v940;
  int v941;
  NSObject *v942;
  void *v943;
  BOOL v944;
  id v945;
  void *v946;
  void *v947;
  void *v948;
  int v949;
  NSObject *v950;
  id *v951;
  int v952;
  uint64_t v953;
  uint64_t v954;
  id v955;
  void *v956;
  id v957;
  const char *v958;
  void *v959;
  BOOL v960;
  id v961;
  void *v962;
  void *v963;
  BOOL v964;
  void *v965;
  void *v966;
  uint64_t v967;
  id v968;
  id v969;
  void *v970;
  id v971;
  void *v972;
  id v973;
  void *v974;
  unint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  double v980;
  id v981;
  void *v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  id v988;
  char v989;
  void *v990;
  void *v991;
  void *v992;
  char v993;
  void *v994;
  id v995;
  id v996;
  void *v997;
  int v998;
  void *v999;
  int v1000;
  void *v1001;
  void *v1002;
  int v1003;
  NSObject *v1004;
  uint64_t v1005;
  void *v1006;
  void *v1007;
  int v1008;
  NSObject *v1009;
  uint64_t v1010;
  id v1011;
  id v1012;
  void *v1013;
  id v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  id v1019;
  void *v1020;
  void *v1021;
  uint64_t v1022;
  uint64_t v1023;
  void *v1024;
  id v1025;
  id v1026;
  uint64_t v1027;
  void *nn;
  void *v1029;
  id v1030;
  unint64_t v1031;
  void *v1032;
  uint64_t v1033;
  int v1034;
  NSObject *v1035;
  void *v1036;
  void *v1037;
  void *v1038;
  void *v1039;
  const char *v1040;
  id v1041;
  id v1042;
  char v1043;
  unint64_t i1;
  void *v1045;
  char isKindOfClass;
  _DWORD *v1047;
  const char *v1048;
  _DWORD *v1049;
  void *v1050;
  void *v1051;
  void *v1052;
  void *v1053;
  int v1054;
  _DWORD *v1055;
  id v1056;
  char v1057;
  id v1058;
  const char *v1059;
  id v1060;
  id v1061;
  void *v1062;
  void *v1063;
  void *v1064;
  id v1065;
  double v1066;
  double v1067;
  double v1068;
  double v1069;
  double v1070;
  void *v1071;
  void *v1072;
  void *v1073;
  const char *v1074;
  int v1075;
  id v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t i2;
  int v1080;
  void *v1081;
  double v1082;
  double v1083;
  double v1084;
  char *v1085;
  void *v1086;
  double v1087;
  double v1088;
  double v1089;
  double v1090;
  void *v1091;
  void *v1092;
  int v1093;
  void *v1094;
  int v1095;
  id v1096;
  SEL v1097;
  id v1098;
  BOOL v1099;
  const char *v1100;
  id v1101;
  uint64_t v1102;
  id v1103;
  void *v1104;
  void *v1105;
  void *v1106;
  uint64_t v1107;
  void *v1108;
  void *v1109;
  int v1110;
  NSObject *v1111;
  double v1112;
  double v1113;
  double v1114;
  void *v1115;
  char v1116;
  char v1117;
  void *v1118;
  id v1119;
  uint64_t v1120;
  id v1121;
  id v1122;
  uint64_t v1123;
  char v1124;
  void *v1125;
  void *v1126;
  void *v1127;
  void *v1128;
  void *v1129;
  void *v1130;
  void *v1131;
  void *v1132;
  void *v1133;
  void *v1134;
  id v1135;
  double v1136;
  double v1137;
  double v1138;
  id v1139;
  void *v1140;
  uint64_t v1141;
  int v1142;
  NSObject *v1143;
  int v1144;
  id v1145;
  id v1146;
  uint64_t v1147;
  int v1148;
  NSObject *v1149;
  id v1150;
  int v1151;
  void *v1152;
  double v1153;
  double v1154;
  double v1155;
  double v1156;
  void *v1157;
  double v1158;
  double v1159;
  double v1160;
  void *v1161;
  void *v1162;
  void *v1163;
  void *v1164;
  void *v1165;
  unsigned __int8 v1166;
  char v1167;
  uint64_t v1168;
  uint64_t v1169;
  __CFString *v1170;
  id v1171;
  unsigned int v1172;
  int v1173;
  void *v1174;
  void *v1175;
  id v1176;
  int v1177;
  uint64_t v1178;
  void *v1179;
  void *v1180;
  void *v1181;
  id v1182;
  void *v1183;
  id v1184;
  void *v1185;
  void *v1186;
  id v1187;
  void *v1188;
  void *v1189;
  void *v1190;
  void *v1191;
  __CFString *v1192;
  void *v1193;
  void *v1194;
  void *v1195;
  void *v1196;
  void *v1197;
  void *v1198;
  id v1199;
  void *v1200;
  BOOL v1201;
  void *v1202;
  int v1203;
  id v1204;
  id v1205;
  id v1206;
  id v1207;
  id v1208;
  id v1209;
  id v1210;
  char *v1211;
  id *v1212;
  void *v1213;
  uint64_t v1214;
  uint64_t v1215;
  id v1216;
  void *v1217;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  int v1221;
  void *v1222;
  uint64_t v1223;
  void *v1224;
  id v1225;
  id v1226;
  id v1227;
  id v1228;
  id v1229;
  id kk;
  id v1231;
  id *p_isa;
  id self;
  char *selfa;
  id selfb;
  id selfc;
  id selfd;
  id v1238;
  _BOOL4 v1239;
  id v1240;
  id v1241;
  id v1242;
  BOOL v1243;
  id v1244;
  id obj;
  id obja;
  int objb;
  unint64_t objc;
  id objd;
  id obje;
  id objf;
  id objg;
  uint64_t v1253;
  __int128 v1254;
  __int128 v1255;
  __int128 v1256;
  __int128 v1257;
  _QWORD v1258[5];
  id v1259;
  id v1260;
  _QWORD v1261[4];
  id v1262;
  id v1263;
  _BYTE *v1264;
  _QWORD v1265[6];
  char v1266;
  _QWORD v1267[4];
  id v1268;
  id v1269;
  _QWORD v1270[5];
  _QWORD v1271[5];
  id v1272;
  id v1273;
  uint64_t *v1274;
  uint64_t v1275;
  uint64_t *v1276;
  uint64_t v1277;
  char v1278;
  __int128 v1279;
  __int128 v1280;
  __int128 v1281;
  __int128 v1282;
  __int128 v1283;
  __int128 v1284;
  __int128 v1285;
  __int128 v1286;
  __int128 v1287;
  __int128 v1288;
  __int128 v1289;
  __int128 v1290;
  _QWORD v1291[4];
  id v1292;
  _QWORD v1293[5];
  __int128 v1294;
  __int128 v1295;
  __int128 v1296;
  __int128 v1297;
  __int128 v1298;
  __int128 v1299;
  __int128 v1300;
  __int128 v1301;
  __int128 v1302;
  __int128 v1303;
  __int128 v1304;
  __int128 v1305;
  __int128 v1306;
  __int128 v1307;
  __int128 v1308;
  __int128 v1309;
  _QWORD v1310[4];
  id v1311;
  id v1312;
  _BYTE *v1313;
  __int128 *v1314;
  __int128 *p_buf;
  __int128 v1316;
  __int128 v1317;
  __int128 v1318;
  __int128 v1319;
  __int128 v1320;
  __int128 v1321;
  __int128 v1322;
  __int128 v1323;
  __int128 v1324;
  __int128 v1325;
  __int128 v1326;
  __int128 v1327;
  __int128 v1328;
  __int128 v1329;
  __int128 v1330;
  __int128 v1331;
  _QWORD v1332[5];
  id v1333;
  BOOL v1334;
  BOOL v1335;
  _QWORD v1336[5];
  id v1337;
  _QWORD v1338[5];
  id v1339;
  __int128 v1340;
  __int128 v1341;
  __int128 v1342;
  __int128 v1343;
  __int128 v1344;
  __int128 v1345;
  __int128 v1346;
  __int128 v1347;
  _BYTE v1348[128];
  _BYTE v1349[128];
  _BYTE v1350[128];
  _BYTE v1351[128];
  _BYTE v1352[128];
  _BYTE v1353[128];
  _BYTE v1354[128];
  _BYTE v1355[128];
  _BYTE v1356[128];
  _BYTE v1357[128];
  id v1358;
  void *v1359;
  void *v1360;
  _BYTE v1361[128];
  _BYTE v1362[128];
  char v1363[128];
  __int128 buf;
  uint64_t v1365;
  void *v1366;
  uint64_t v1367;
  id v1368;
  _QWORD *v1369;
  _QWORD *v1370;
  BOOL v1371;
  __int128 v1372;
  __int128 v1373;
  __int128 v1374;
  __int128 v1375;
  _BYTE v1376[32];
  _BYTE v1377[30];
  uint64_t v1378;

  v0 = MEMORY[0x1E0C80A78]();
  v1378 = *MEMORY[0x1E0C80C00];
  v1253 = v0;
  v1203 = objc_msgSend(*(id *)(v0 + 16), "printJson");
  if (v1203)
  {
    v1 = *(void **)(v0 + 8);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", 53);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    SAJSONWriteDictionaryFirstEntry(v1, (uint64_t)CFSTR("reportVersion"), v2);

    v0 = v1253;
  }
  -[SASamplePrinter eventStartTimeWithWallTime](v0);
  v1197 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1197 && (objc_msgSend(*(id *)(v1253 + 16), "omitAbsoluteWallTimes") & 1) == 0)
  {
    v20 = *(void **)(v1253 + 8);
    if (v1203)
    {
      SAJSONWriteDictionaryEntry(*(void **)(v1253 + 8), CFSTR("startTime"), v1197);
    }
    else
    {
      objc_msgSend(v1197, "wallTime");
      v22 = v21;
      if (objc_msgSend(*(id *)(v1253 + 16), "displayDetailedWallTime"))
        v23 = 9;
      else
        v23 = 3;
      v24 = (__CFString *)_CopyStringForTime(v23, v22);
      objc_msgSend(v20, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Date/Time: ", v24);

    }
  }
  else
  {
    objc_msgSend(*(id *)(v1253 + 8), "printWithFormat:", CFSTR("%-*sUNKNOWN\n"), 18, "Date/Time: ");
  }
  -[SASamplePrinter eventEndTimeWithWallTime](v1253);
  v1188 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v1197 == 0;
  if (!v1188)
    v3 = 1;
  if (v3
    || (objc_msgSend(v1188, "wallTime"), v5 = v4, objc_msgSend(v1197, "wallTime"), v5 <= v6)
    || (objc_msgSend(*(id *)(v1253 + 16), "omitAbsoluteWallTimes") & 1) != 0)
  {
    if (v1203)
      goto LABEL_12;
LABEL_32:
    v30 = (id *)(v1253 + 160);
    objc_msgSend(*(id *)(v1253 + 160), "osProductName");
    v31 = objc_claimAutoreleasedReturnValue();
    v32 = (void *)v31;
    v33 = CFSTR("???");
    if (v31)
      v33 = (__CFString *)v31;
    v19 = v33;

    objc_msgSend(*v30, "osProductVersion");
    v34 = objc_claimAutoreleasedReturnValue();
    v35 = (void *)v34;
    v36 = CFSTR("???");
    if (v34)
      v36 = (__CFString *)v34;
    v37 = v36;

    objc_msgSend(*v30, "osBuildVersion");
    v38 = objc_claimAutoreleasedReturnValue();
    v39 = (void *)v38;
    v40 = CFSTR("???");
    if (v38)
      v40 = (__CFString *)v38;
    v41 = v40;

    v17 = v1253;
    objc_msgSend(*(id *)(v1253 + 8), "printWithFormat:", CFSTR("%-*s%@ %@"), 18, "OS Version: ", v19, v37);
    objc_msgSend(*(id *)(v1253 + 8), "printWithFormat:", CFSTR(" (Build %@)\n"), v41);

    goto LABEL_39;
  }
  v25 = *(void **)(v1253 + 8);
  if (!v1203)
  {
    objc_msgSend(v1188, "wallTime");
    v27 = v26;
    if (objc_msgSend(*(id *)(v1253 + 16), "displayDetailedWallTime"))
      v28 = 9;
    else
      v28 = 3;
    v29 = (__CFString *)_CopyStringForTime(v28, v27);
    objc_msgSend(v25, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "End time: ", v29);

    goto LABEL_32;
  }
  SAJSONWriteDictionaryEntry(*(void **)(v1253 + 8), CFSTR("endTime"), v1188);
LABEL_12:
  objc_msgSend(*(id *)(v1253 + 160), "osProductName");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    v8 = *(void **)(v1253 + 8);
    objc_msgSend(*(id *)(v1253 + 160), "osProductName");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    SAJSONWriteDictionaryEntry(v8, CFSTR("osProductName"), v9);

  }
  objc_msgSend(*(id *)(v1253 + 160), "osProductVersion");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = *(void **)(v1253 + 8);
    objc_msgSend(*(id *)(v1253 + 160), "osProductVersion");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    SAJSONWriteDictionaryEntry(v11, CFSTR("osProductVersion"), v12);

  }
  objc_msgSend(*(id *)(v1253 + 160), "osProductVersionExtra");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13)
  {
    v14 = *(void **)(v1253 + 8);
    objc_msgSend(*(id *)(v1253 + 160), "osProductVersionExtra");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    SAJSONWriteDictionaryEntry(v14, CFSTR("osProductVersionExtra"), v15);

  }
  objc_msgSend(*(id *)(v1253 + 160), "osBuildVersion");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  v17 = v1253;
  if (v16)
  {
    v18 = *(void **)(v1253 + 8);
    objc_msgSend(*(id *)(v1253 + 160), "osBuildVersion");
    v19 = (__CFString *)objc_claimAutoreleasedReturnValue();
    SAJSONWriteDictionaryEntry(v18, CFSTR("osBuildVersion"), v19);
    v17 = v1253;
LABEL_39:

  }
  v1212 = (id *)(v17 + 160);
  objc_msgSend(*(id *)(v17 + 160), "machineArchitecture");
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  v1183 = v42;
  if (v42 && objc_msgSend(v42, "length"))
  {
    v43 = v1253;
    v44 = *(void **)(v1253 + 8);
    if (v1203)
    {
      SAJSONWriteDictionaryEntry(v44, CFSTR("arch"), v1183);
      goto LABEL_49;
    }
    objc_msgSend(v44, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Architecture: ", v1183);
  }
  else
  {
    v43 = v1253;
    if ((v1203 & 1) != 0)
      goto LABEL_49;
  }
  objc_msgSend(*(id *)(v43 + 8), "printWithFormat:", CFSTR("%-*s%d\n"), 18, "Report Version: ", 53);
  if (objc_msgSend(*(id *)(v43 + 16), "systemstatsFormat"))
    objc_msgSend(*(id *)(v43 + 8), "printWithFormat:", CFSTR("%-*scondensed\n"), 18, "Report Variant: ");
LABEL_49:
  v45 = *(void **)(v43 + 176);
  if (v45)
  {
    v46 = *(void **)(v43 + 8);
    objc_msgSend(v45, "UUIDString");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    v48 = v47;
    if ((v1203 & 1) != 0)
    {
      SAJSONWriteDictionaryEntry(v46, CFSTR("incidentIdentifier"), v47);

      v43 = v1253;
      v49 = (id *)(v17 + 160);
      if (!*(_BYTE *)(v1253 + 152))
        goto LABEL_59;
LABEL_55:
      SAJSONWriteDictionaryEntry(*(void **)(v43 + 8), CFSTR("shareWithAppDevs"), MEMORY[0x1E0C9AAB0]);
      goto LABEL_59;
    }
    objc_msgSend(v46, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Incident Identifier: ", v47);

    v43 = v1253;
    v49 = (id *)(v17 + 160);
    if (!*(_BYTE *)(v1253 + 152))
    {
LABEL_58:
      objc_msgSend(*(id *)(v43 + 8), "appendString:", CFSTR("\n"));
      goto LABEL_59;
    }
LABEL_57:
    objc_msgSend(*(id *)(v43 + 8), "printWithFormat:", CFSTR("%-*sYes\n"), 18, "Share With Devs: ");
    goto LABEL_58;
  }
  if (*(_BYTE *)(v43 + 152))
  {
    v49 = (id *)(v17 + 160);
    if (v1203)
      goto LABEL_55;
    goto LABEL_57;
  }
  v49 = (id *)(v17 + 160);
  if ((v1203 & 1) == 0)
    goto LABEL_58;
LABEL_59:
  if (objc_msgSend(*v49, "dataSource"))
  {
    v50 = objc_msgSend(*v49, "dataSource");
    v51 = v50 & 1;
    v52 = v1363;
    if ((v50 & 1) != 0)
    {
      strcpy(v1363, "Stackshots");
      v52 = &v1363[10];
    }
    if ((objc_msgSend(*v49, "dataSource") & 2) != 0)
    {
      if ((v50 & 1) != 0)
        v52 += snprintf(v52, (char *)&buf - v52, ", ");
      v52 += snprintf(v52, (char *)&buf - v52, "KPerf Lightweight PET");
      v51 = 1;
    }
    if ((objc_msgSend(*v49, "dataSource") & 4) != 0)
    {
      v53 = v1212;
      if ((v51 & 1) != 0)
        v52 += snprintf(v52, (char *)&buf - v52, ", ");
      v52 += snprintf(v52, (char *)&buf - v52, "Microstackshots");
      v51 = 1;
    }
    else
    {
      v53 = v1212;
    }
    if ((objc_msgSend(*v53, "dataSource") & 8) != 0)
    {
      v54 = v1212;
      if ((v51 & 1) != 0)
        v52 += snprintf(v52, (char *)&buf - v52, ", ");
      v52 += snprintf(v52, (char *)&buf - v52, "KPerf non-PET");
      v51 = 1;
    }
    else
    {
      v54 = v1212;
    }
    v55 = objc_msgSend(*v54, "dataSource");
    v43 = v1253;
    if ((v55 & 0x10) != 0)
    {
      if ((v51 & 1) != 0)
        v52 += snprintf(v52, (char *)&buf - v52, ", ");
      snprintf(v52, (char *)&buf - v52, "Custom callstacks");
    }
  }
  else
  {
    strcpy(v1363, "Unknown");
  }
  v58 = *(void **)(v43 + 8);
  v57 = (__CFString *)(v43 + 8);
  v56 = v58;
  p_isa = &v57->isa;
  if (v1203)
  {
    SANSStringForCString(v1363);
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    SAJSONWriteDictionaryEntry(v56, CFSTR("dataSource"), v59);
  }
  else
  {
    objc_msgSend(v56, "printWithFormat:", CFSTR("%-*s%s\n"), 18, "Data Source: ", v1363);
    v1331 = 0u;
    v1330 = 0u;
    v1329 = 0u;
    v1328 = 0u;
    objc_msgSend(*v1212, "kernelCaches");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v60 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v1328, v1362, 16);
    if (v60)
    {
      v61 = *(_QWORD *)v1329;
      v57 = CFSTR("%-*s0x%llx %@\n");
      do
      {
        for (i = 0; i != v60; ++i)
        {
          if (*(_QWORD *)v1329 != v61)
            objc_enumerationMutation(obj);
          v63 = *(void **)(*((_QWORD *)&v1328 + 1) + 8 * i);
          v64 = *p_isa;
          v65 = objc_msgSend(v63, "loadAddress");
          objc_msgSend(v63, "uuid");
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v66, "UUIDString");
          v67 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v64, "printWithFormat:", CFSTR("%-*s0x%llx %@\n"), 18, "Kernel Cache: ", v65, v67);

        }
        v60 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v1328, v1362, 16);
      }
      while (v60);
    }

    v1327 = 0u;
    v1326 = 0u;
    v1325 = 0u;
    v1324 = 0u;
    objc_msgSend(*v1212, "sharedCaches");
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    v68 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v1324, v1361, 16);
    if (v68)
    {
      v69 = *(_QWORD *)v1325;
      v57 = CFSTR("%-*s%@\n");
      do
      {
        for (j = 0; j != v68; ++j)
        {
          if (*(_QWORD *)v1325 != v69)
            objc_enumerationMutation(v59);
          v71 = *p_isa;
          _shared_cache_display_string(*(void **)(*((_QWORD *)&v1324 + 1) + 8 * j));
          v72 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v71, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Shared Cache: ", v72);

        }
        v68 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v1324, v1361, 16);
      }
      while (v68);
    }
  }

  objc_msgSend(*v1212, "reason");
  v73 = (void *)objc_claimAutoreleasedReturnValue();

  if (v73)
  {
    v74 = *p_isa;
    objc_msgSend(*v1212, "reason");
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    v76 = v75;
    if (v1203)
    {
      SAJSONWriteDictionaryEntry(v74, CFSTR("reason"), v75);

      goto LABEL_104;
    }
    SACopySanitizedString(v75, 1, 0xFFuLL);
    v57 = (__CFString *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v74, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Reason: ", v57);

    goto LABEL_103;
  }
  if ((v1203 & 1) == 0)
LABEL_103:
    objc_msgSend(*p_isa, "appendString:", CFSTR("\n"));
LABEL_104:
  if (objc_msgSend(*v1212, "targetHIDEventMachAbs"))
  {
    v77 = *(void **)(v1253 + 112);
    if (v77)
    {
      objc_msgSend(v77, "hidEventTimestamp");
      v1175 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(v1253 + 112), "steps");
      v78 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v78, "lastObject");
      v79 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v79, "timestamp");
      v80 = objc_claimAutoreleasedReturnValue();

    }
    else
    {
      +[SATimestamp timestampWithMachAbsTime:machContTime:wallTime:machTimebase:](SATimestamp, "timestampWithMachAbsTime:machContTime:wallTime:machTimebase:", objc_msgSend(*v1212, "targetHIDEventMachAbs"), 0, objc_msgSend(*v1212, "machTimebase"), 0.0);
      v1175 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(*v1212, "targetHIDEventEndMachAbs"))
      {
        +[SATimestamp timestampWithMachAbsTime:machContTime:wallTime:machTimebase:](SATimestamp, "timestampWithMachAbsTime:machContTime:wallTime:machTimebase:", objc_msgSend(*v1212, "targetHIDEventEndMachAbs"), 0, objc_msgSend(*v1212, "machTimebase"), 0.0);
        v92 = objc_claimAutoreleasedReturnValue();
        v81 = v1253;
        v82 = v1212;
        v80 = v92;
        goto LABEL_109;
      }
      v80 = 0;
    }
  }
  else
  {
    v80 = 0;
    v1175 = 0;
  }
  v81 = v1253;
  v82 = v1212;
LABEL_109:
  v1174 = (void *)v80;
  v83 = *(void **)(v81 + 128);
  if (v83)
    goto LABEL_110;
  v87 = 0.0;
  if ((objc_msgSend(*v82, "targetProcessId") & 0x80000000) != 0)
  {
    v1184 = 0;
    goto LABEL_189;
  }
  v83 = *(void **)(v1253 + 128);
  if (v83)
  {
LABEL_110:
    v84 = v83;
  }
  else
  {
    objc_msgSend(*v1212, "targetProcess");
    v89 = (id)objc_claimAutoreleasedReturnValue();

    v84 = v89;
    if (!v89)
    {
      v90 = *__error();
      _sa_logt();
      v91 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
      {
        v1144 = objc_msgSend(*v1212, "targetProcessId");
        *(_DWORD *)v1376 = 67109120;
        *(_DWORD *)&v1376[4] = v1144;
        _os_log_error_impl(&dword_1B9BE0000, v91, OS_LOG_TYPE_ERROR, "No task for target pid %d", v1376, 8u);
      }

      v1184 = 0;
      *__error() = v90;
      goto LABEL_189;
    }
  }
  self = v84;
  if (v1203)
  {
    v85 = *p_isa;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(v84, "pid"));
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    SAJSONWriteDictionaryEntry(v85, CFSTR("targetTaskPid"), v86);

    v1184 = 0;
    v87 = 0.0;
    goto LABEL_189;
  }
  objc_msgSend(v84, "startTimestamp");
  v1179 = (void *)objc_claimAutoreleasedReturnValue();
  v88 = objc_msgSend(self, "ppid");
  if ((_DWORD)v88 == -1 || (_DWORD)v88 == objc_msgSend(self, "pid"))
  {
    v1226 = 0;
  }
  else
  {
    -[SASampleStore lastTaskWithPid:onOrBeforeTimestamp:](*v1212, v88, v1179);
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    if (v93)
    {
      v94 = v93;

    }
    else
    {
      -[SASampleStore firstTaskWithPid:](*v1212, v88);
      v94 = (id)objc_claimAutoreleasedReturnValue();

      if (!v94)
      {
        -[SASamplePrinter displayNameForPid:threadId:timestamp:]((_QWORD *)v1253, v88, 0, v1179);
        v1226 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_132;
      }
    }
    -[SASamplePrinter displayNameForTask:]((void *)v1253, v94);
    v1226 = (id)objc_claimAutoreleasedReturnValue();

  }
LABEL_132:
  v95 = objc_msgSend(self, "rpid");
  if ((int)v95 < 1 || (_DWORD)v95 == objc_msgSend(self, "pid"))
  {
    v1222 = 0;
    goto LABEL_139;
  }
  -[SASampleStore lastTaskWithPid:onOrBeforeTimestamp:](*v1212, v95, v1179);
  v96 = (void *)objc_claimAutoreleasedReturnValue();
  if (v96)
  {
    v97 = v96;

LABEL_138:
    -[SASamplePrinter displayNameForTask:]((void *)v1253, v97);
    v1222 = (void *)objc_claimAutoreleasedReturnValue();

    goto LABEL_139;
  }
  -[SASampleStore firstTaskWithPid:](*v1212, v95);
  v97 = (id)objc_claimAutoreleasedReturnValue();

  if (v97)
    goto LABEL_138;
  -[SASamplePrinter displayNameForPid:threadId:timestamp:]((_QWORD *)v1253, v95, 0, v1179);
  v1222 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_139:
  if (objc_msgSend(self, "resourceCoalitionID"))
  {
    -[SASamplePrinter displayStringForResourceCoalition:](self);
    v98 = (void *)objc_claimAutoreleasedReturnValue();
    v1359 = v98;
    v1360 = &unk_1E7167870;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v1360, &v1359, 1);
    v1217 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v1217 = 0;
  }
  v1358 = self;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v1358, 1);
  v99 = (void *)objc_claimAutoreleasedReturnValue();
  -[SASamplePrinter displayStringForOnBehalfOfForTasks:includePid:](v1253, v99);
  v1213 = (void *)objc_claimAutoreleasedReturnValue();

  v1323 = 0u;
  v1322 = 0u;
  v1321 = 0u;
  v1320 = 0u;
  objc_msgSend(self, "threads");
  v100 = (void *)objc_claimAutoreleasedReturnValue();
  v101 = objc_msgSend(v100, "countByEnumeratingWithState:objects:count:", &v1320, v1357, 16);
  if (v101)
  {
    v1238 = 0;
    obja = 0;
    v102 = *(_QWORD *)v1321;
    while (1)
    {
      v103 = 0;
      do
      {
        if (*(_QWORD *)v1321 != v102)
          objc_enumerationMutation(v100);
        objc_msgSend(*(id *)(v1253 + 144), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v1320 + 1) + 8 * v103));
        v104 = (void *)objc_claimAutoreleasedReturnValue();
        v105 = v104;
        if (v104)
        {
          objc_msgSend(v104, "threadState");
          v106 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v106, "startTimestamp");
          v107 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v107, "gt:", *(_QWORD *)(v1253 + 40)))
          {

            goto LABEL_150;
          }
          objc_msgSend(v105, "threadState");
          v108 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v108, "endTimestamp");
          v109 = (void *)objc_claimAutoreleasedReturnValue();
          v110 = objc_msgSend(v109, "lt:", *(_QWORD *)(v1253 + 32));

          if ((v110 & 1) == 0)
          {
            if (objc_msgSend(v105, "isPartOfADeadlock"))
            {
              objc_msgSend(v105, "thread");
              v111 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v105, "threadState");
              v112 = (void *)objc_claimAutoreleasedReturnValue();
              -[SASamplePrinter displayNameForTask:thread:threadState:]((void *)v1253, 0, v111, v112);
              v106 = (void *)objc_claimAutoreleasedReturnValue();

              v113 = obja;
              if (obja)
                goto LABEL_156;
              obja = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithObjects:", v106, 0);
              goto LABEL_150;
            }
            if (objc_msgSend(v105, "isBlockedByADeadlock"))
            {
              objc_msgSend(v105, "thread");
              v114 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v105, "threadState");
              v115 = (void *)objc_claimAutoreleasedReturnValue();
              -[SASamplePrinter displayNameForTask:thread:threadState:]((void *)v1253, 0, v114, v115);
              v106 = (void *)objc_claimAutoreleasedReturnValue();

              v113 = v1238;
              if (v1238)
LABEL_156:
                objc_msgSend(v113, "addObject:", v106);
              else
                v1238 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithObjects:", v106, 0);
LABEL_150:

            }
          }
        }

        ++v103;
      }
      while (v101 != v103);
      v116 = objc_msgSend(v100, "countByEnumeratingWithState:objects:count:", &v1320, v1357, 16);
      v101 = v116;
      if (!v116)
        goto LABEL_165;
    }
  }
  v1238 = 0;
  obja = 0;
LABEL_165:

  v1176 = *p_isa;
  objc_msgSend(self, "name");
  v117 = (void *)objc_claimAutoreleasedReturnValue();
  if (v117)
  {
    objc_msgSend(self, "name");
    v1165 = (void *)objc_claimAutoreleasedReturnValue();
    SACopySanitizedString(v1165, 1, 0);
    v118 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v118 = CFSTR("UNKNOWN PROCESS");
  }
  v1172 = objc_msgSend(self, "pid");
  objc_msgSend(self, "mainBinaryPath");
  v119 = objc_claimAutoreleasedReturnValue();
  v120 = (void *)v119;
  v121 = CFSTR("UNKNOWN PATH");
  if (v119)
    v121 = (const __CFString *)v119;
  v1170 = (__CFString *)v121;
  objc_msgSend(self, "bundleIdentifier");
  v1208 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(self, "bundleVersion");
  v1204 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(self, "bundleShortVersion");
  v1200 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(self, "bundleBuildVersion");
  v1198 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(self, "bundleProjectName");
  v1195 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(self, "bundleSourceVersion");
  v1193 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(self, "bundleProductBuildVersion");
  v1191 = (void *)objc_claimAutoreleasedReturnValue();
  v1169 = objc_msgSend(self, "adamID");
  objc_msgSend(self, "installerVersionID");
  v1189 = (void *)objc_claimAutoreleasedReturnValue();
  v1167 = objc_msgSend(self, "developerType");
  objc_msgSend(self, "appType");
  v1186 = (void *)objc_claimAutoreleasedReturnValue();
  v1166 = objc_msgSend(self, "isBeta");
  objc_msgSend(self, "cohortID");
  v1185 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(self, "vendorID");
  v1181 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(self, "distributorID");
  v122 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(self, "codesigningID");
  v123 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(self, "teamID");
  v57 = (__CFString *)objc_claimAutoreleasedReturnValue();
  -[SASamplePrinter architectureStringForTask:](v1253, self);
  v124 = (void *)objc_claimAutoreleasedReturnValue();
  v126 = objc_msgSend(self, "pid");
  if (v126)
  {
    v127 = 0;
  }
  else
  {
    objc_msgSend(*v1212, "kernelVersion");
    v127 = (void *)objc_claimAutoreleasedReturnValue();
  }
  Property = self;
  if (self)
    Property = objc_getProperty(self, v125, 272, 1);
  v129 = v126 == 0;
  v130 = Property;
  -[SASamplePrinter addTaskHeaderToStream:displayName:pid:mainBinary:mainBinaryPath:sharedCaches:uid:bundleIdentifier:bundleVersion:bundleShortVersion:bundleBuildVersion:bundleProjectName:bundleSourceVersion:bundleProductBuildVersion:adamID:installerVersionID:developerType:appType:isBeta:cohortID:vendorID:distributorID:codesigningID:teamID:resourceCoalitionSampleCounts:onBehalfOfProcesses:architectureString:kernelVersion:parentName:responsibleName:taskExecedFromName:taskExecedToName:pidStartTimestamp:startTimestamp:endTimestamp:startSampleIndex:endSampleIndex:numSamples:totalNumSamples:numSamplesSuspended:numSamplesTerminated:startingTaskSize:endingTaskSize:maxTaskSize:startSampleIndexOfMaxTaskSize:endSampleIndexOfMaxTaskSize:numPageins:cpuTimeNs:cpuInstructions:cpuCycles:nonThreadCpuTimeNs:nonThreadCpuInstructions:nonThreadCpuCycles:usesSuddenTermination:allowsIdleExit:isTranslocated:isUnresponsive:timeOfLastResponse:numThreads:numIdleWorkQueueThreads:numOtherHiddenThreads:hieSwallowedException:wqExceededConstrainedThreadLimit:wqExceededTotalThreadLimit:threadsDeadlocked:threadsBlockedByADeadlock:ioSize:numIOs:isReportHeader:](v1253, v1176, v118, v1172, 0, v1170, 0, 4294966982, 0.0, v1208, v1204, v1200, v1198, v1195, v1193, v1191, v1169, v1189, v1167,
    v1186,
    v1166,
    v1185,
    v1181,
    v122,
    v123,
    v57,
    v1217,
    v1213,
    v124,
    v127,
    v1226,
    v1222,
    0,
    0,
    v130,
    0,
    0,
    0x7FFFFFFFFFFFFFFFuLL,
    0x7FFFFFFFFFFFFFFFuLL,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0x7FFFFFFFFFFFFFFFuLL,
    0x7FFFFFFFFFFFFFFFuLL,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    objc_msgSend(self, "isTranslocated"),
    0,
    0,
    0,
    0,
    0);

  if (v129)
  if (v117)
  {

  }
  objc_msgSend(*p_isa, "appendString:", CFSTR("\n"));
  if (v1175 && *v1212 && (*((_BYTE *)*v1212 + 325) & 1) != 0)
  {
    v87 = 0.0;
    if (objc_msgSend(v1175, "lt:", *(_QWORD *)(v1253 + 32))
      && (objc_msgSend(*(id *)(v1253 + 32), "machAbsTimeSeconds"),
          v142 = v141,
          objc_msgSend(v1175, "machAbsTimeSeconds"),
          v144 = v142 - v143,
          -[SASamplePrinter shouldPrintTimeOutsideSamplingRange:](v1253, v144)))
    {
      v145 = objc_alloc(MEMORY[0x1E0CB3940]);
      if (v144 >= 0.1)
        v146 = objc_msgSend(v145, "initWithFormat:", CFSTR("HID event started %.1f seconds before sampling"), *(_QWORD *)&v144);
      else
        v146 = objc_msgSend(v145, "initWithFormat:", CFSTR("HID event started <0.1 seconds before sampling"));
      v200 = (void *)v146;
      v87 = v144 + 0.0;
    }
    else
    {
      v200 = 0;
    }
    v1184 = v200;
    if (v1174)
    {
      if (objc_msgSend(v1174, "gt:", *(_QWORD *)(v1253 + 40)))
      {
        objc_msgSend(v1174, "machAbsTimeSeconds");
        v774 = v773;
        objc_msgSend(*(id *)(v1253 + 40), "machAbsTimeSeconds");
        v776 = v774 - v775;
        if (-[SASamplePrinter shouldPrintTimeOutsideSamplingRange:](v1253, v776))
        {
          v777 = objc_alloc(MEMORY[0x1E0CB3940]);
          if (v776 >= 0.1)
            v778 = (void *)objc_msgSend(v777, "initWithFormat:", CFSTR("HID event ended %.1f seconds after sampling"), *(_QWORD *)&v776);
          else
            v778 = (void *)objc_msgSend(v777, "initWithFormat:", CFSTR("HID event ended <0.1 seconds after sampling"));
          v982 = v778;
          if (v1184)
          {
            v983 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@, %@"), v1184, v778);

            v1184 = (id)v983;
          }
          else
          {
            v1184 = v778;
          }

          v87 = v87 + v776;
        }
      }
    }
  }
  else
  {
    v87 = 0.0;
    if (objc_msgSend(self, "isUnresponsive")
      && (objc_msgSend(self, "timeOfLastResponse"), v132 = v131, v131 > 0.0)
      && (objc_msgSend(*(id *)(v1253 + 32), "wallTime"), v132 < v133)
      && (v134 = v133 - v132, -[SASamplePrinter shouldPrintTimeOutsideSamplingRange:](v1253, v134)))
    {
      v1184 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("process was unresponsive for %.0f seconds before sampling"), *(_QWORD *)&v134);
      v87 = v134 + 0.0;
    }
    else
    {
      v1184 = 0;
    }
  }

LABEL_189:
  objc_msgSend(*v1212, "targetProcess");
  v135 = (void *)objc_claimAutoreleasedReturnValue();
  if (v135)
  {
    v136 = *(void **)(v1253 + 128);
    if (v136)
    {
      objc_msgSend(*v1212, "targetProcess");
      v137 = (void *)objc_claimAutoreleasedReturnValue();
      v138 = v136 == v137;

      if (v138)
        goto LABEL_201;
      v57 = *(__CFString **)(v1253 + 8);
      objc_msgSend(*(id *)(v1253 + 160), "targetProcess");
      v135 = (void *)objc_claimAutoreleasedReturnValue();
      -[SASamplePrinter displayNameForTask:]((void *)v1253, v135);
      v139 = (void *)objc_claimAutoreleasedReturnValue();
      v140 = v139;
      if (v1203)
        SAJSONWriteDictionaryEntry(v57, CFSTR("affectedProcess"), v139);
      else
        -[__CFString printWithFormat:](v57, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Affected Process: ", v139);

    }
  }

LABEL_201:
  objc_msgSend(*v1212, "event");
  v1192 = (__CFString *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*v1212, "eventNote");
  v147 = objc_claimAutoreleasedReturnValue();
  v1190 = (void *)v147;
  if (__PAIR128__((unint64_t)v1192, v147) != 0)
  {
    if (v147)
    {
      v148 = objc_alloc(MEMORY[0x1E0CB3940]);
      v149 = v1192;
      if (!v1192)
        v149 = CFSTR("???");
      v150 = (__CFString *)objc_msgSend(v148, "initWithFormat:", CFSTR("%@ (%@)"), v149, v1190);
    }
    else
    {
      v150 = v1192;
    }
    v151 = v150;
    v152 = *p_isa;
    if (v1203)
      SAJSONWriteDictionaryEntry(v152, CFSTR("event"), v151);
    else
      objc_msgSend(v152, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Event: ", v151);

  }
  objc_msgSend(*v1212, "signature");
  v153 = (void *)objc_claimAutoreleasedReturnValue();

  if (v153)
  {
    v154 = *p_isa;
    objc_msgSend(*v1212, "signature");
    v155 = (void *)objc_claimAutoreleasedReturnValue();
    v156 = v155;
    if (v1203)
    {
      SAJSONWriteDictionaryEntry(v154, CFSTR("signature"), v155);
    }
    else
    {
      SACopySanitizedString(v155, 1, 0xFFuLL);
      v57 = (__CFString *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v154, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Signature: ", v57);

    }
  }
  if (objc_msgSend(*v1212, "targetDispatchQueueId"))
  {
    objc_msgSend(*v1212, "targetProcess");
    v157 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v157, "dispatchQueues");
    v57 = (__CFString *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(*v1212, "targetDispatchQueueId"));
    v158 = (void *)objc_claimAutoreleasedReturnValue();
    -[__CFString objectForKeyedSubscript:](v57, "objectForKeyedSubscript:", v158);
    v159 = (void *)objc_claimAutoreleasedReturnValue();

    if (v159)
    {
      v160 = *p_isa;
      if (!v1203)
      {
        -[SASamplePrinter displayNameForDispatchQueue:](v159);
        v57 = (__CFString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v160, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Dispatch Queue: ", v57);
        goto LABEL_222;
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(*v1212, "targetDispatchQueueId"));
      v57 = (__CFString *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v160, CFSTR("targetDispatchQueueId"), v57);

      objc_msgSend(v159, "dispatchQueueLabel");
      v161 = (void *)objc_claimAutoreleasedReturnValue();

      if (v161)
      {
        v162 = *p_isa;
        objc_msgSend(v159, "dispatchQueueLabel");
        v57 = (__CFString *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v162, CFSTR("targetDispatchQueueLabel"), v57);
LABEL_222:

      }
    }

  }
  if (objc_msgSend(*v1212, "targetThreadId"))
  {
    v163 = *p_isa;
    if (v1203)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(*v1212, "targetThreadId"));
      v164 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v163, CFSTR("targetThreadId"), v164);

    }
    else
    {
      objc_msgSend(v163, "printWithFormat:", CFSTR("%-*s0x%llx\n"), 18, "Thread: ", objc_msgSend(*v1212, "targetThreadId"));
    }
  }
  objc_msgSend(*v1212, "actionTaken");
  v165 = (void *)objc_claimAutoreleasedReturnValue();

  if (v165)
  {
    v166 = *p_isa;
    objc_msgSend(*v1212, "actionTaken");
    v167 = (void *)objc_claimAutoreleasedReturnValue();
    v168 = v167;
    if (v1203)
    {
      SAJSONWriteDictionaryEntry(v166, CFSTR("actionTaken"), v167);
    }
    else
    {
      SACopySanitizedString(v167, 1, 0);
      v57 = (__CFString *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v166, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Action taken: ", v57);

    }
  }
  objc_msgSend(*v1212, "cpuUsed");
  if (v169 > 0.0)
  {
    objc_msgSend(*v1212, "cpuDuration");
    if (v170 > 0.0)
    {
      if (v1203)
      {
        v171 = *p_isa;
        v172 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(*v1212, "cpuUsed");
        objc_msgSend(v172, "numberWithDouble:");
        v173 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v171, CFSTR("cpuUsed"), v173);

        v174 = *p_isa;
        v175 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(*v1212, "cpuDuration");
        objc_msgSend(v175, "numberWithDouble:");
        v176 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v174, CFSTR("cpuDuration"), v176);

        v177 = *p_isa;
        v178 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(*v1212, "cpuLimit");
        objc_msgSend(v178, "numberWithDouble:");
        v179 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v177, CFSTR("cpuLimit"), v179);

        v180 = *p_isa;
        v181 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(*v1212, "cpuLimitDuration");
        objc_msgSend(v181, "numberWithDouble:");
        v182 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v180, CFSTR("cpuLimitDuration"), v182);

      }
      else
      {
        v183 = *(void **)(v1253 + 160);
        *(_BYTE *)(v1253 + 104) = 1;
        objc_msgSend(v183, "cpuUsed");
        v185 = v184;
        objc_msgSend(*(id *)(v1253 + 160), "cpuDuration");
        v187 = v186;
        v188 = *(void **)(v1253 + 8);
        objc_msgSend(*(id *)(v1253 + 160), "cpuUsed");
        v190 = v189;
        objc_msgSend(*(id *)(v1253 + 160), "cpuDuration");
        objc_msgSend(v188, "printWithFormat:", CFSTR("%-*s%.0f seconds cpu time over %.0f seconds (%.0f%% cpu average)"), 18, "CPU: ", v190, v191, v185 * 100.0 / v187);
        objc_msgSend(*(id *)(v1253 + 160), "cpuLimit");
        if (v192 <= 0.0 || (objc_msgSend(*v1212, "cpuLimitDuration"), v193 <= 0.0))
        {
          objc_msgSend(*p_isa, "appendString:", CFSTR("\n"));
        }
        else
        {
          objc_msgSend(*v1212, "cpuLimit");
          v195 = v194;
          objc_msgSend(*v1212, "cpuLimitDuration");
          v197 = v196;
          v198 = *p_isa;
          objc_msgSend(*v1212, "cpuLimitDuration");
          objc_msgSend(v198, "printWithFormat:", CFSTR(", exceeding limit of %.0f%% cpu over %.0f seconds\n"), v195 * 100.0 / v197, v199);
        }
        v201 = *p_isa;
        objc_msgSend(*v1212, "cpuLimit");
        objc_msgSend(v201, "printWithFormat:", CFSTR("%-*s%.0fs\n"), 18, "CPU limit: ", v202);
        v203 = *p_isa;
        objc_msgSend(*v1212, "cpuLimitDuration");
        objc_msgSend(v203, "printWithFormat:", CFSTR("%-*s%.0fs\n"), 18, "Limit duration: ", v204);
        v205 = *p_isa;
        objc_msgSend(*v1212, "cpuUsed");
        objc_msgSend(v205, "printWithFormat:", CFSTR("%-*s%.0fs\n"), 18, "CPU used: ", v206);
        v207 = *p_isa;
        objc_msgSend(*v1212, "cpuDuration");
        objc_msgSend(v207, "printWithFormat:", CFSTR("%-*s%.0fs\n"), 18, "CPU duration: ", v208);
      }
    }
  }
  if (objc_msgSend(*v1212, "numWakeups"))
  {
    objc_msgSend(*v1212, "wakeupsDuration");
    if (v209 > 0.0)
    {
      if (v1203)
      {
        v210 = *p_isa;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(*v1212, "numWakeups"));
        v211 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v210, CFSTR("numWakeups"), v211);

        v212 = *p_isa;
        v213 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(*v1212, "wakeupsDuration");
        objc_msgSend(v213, "numberWithDouble:");
        v214 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v212, CFSTR("wakeupsDuration"), v214);

        v215 = *p_isa;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(*v1212, "numWakeupsLimit"));
        v216 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v215, CFSTR("numWakeupsLimit"), v216);

        v217 = *p_isa;
        v218 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(*v1212, "wakeupsLimitDuration");
        objc_msgSend(v218, "numberWithDouble:");
        v219 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v217, CFSTR("wakeupsLimitDuration"), v219);

      }
      else
      {
        v220 = *(void **)(v1253 + 160);
        *(_BYTE *)(v1253 + 104) = 1;
        v221 = objc_msgSend(v220, "numWakeups");
        objc_msgSend(*(id *)(v1253 + 160), "wakeupsDuration");
        v223 = v222;
        v224 = *(void **)(v1253 + 8);
        v57 = (__CFString *)objc_msgSend(*(id *)(v1253 + 160), "numWakeups");
        objc_msgSend(*(id *)(v1253 + 160), "wakeupsDuration");
        objc_msgSend(v224, "printWithFormat:", CFSTR("%-*s%llu wakeups over the last %.0f seconds (%.0f wakeups per second average)"), 18, "Wakeups: ", v57, v225, (double)v221 / v223);
        if (objc_msgSend(*(id *)(v1253 + 160), "numWakeupsLimit")
          && (objc_msgSend(*v1212, "wakeupsLimitDuration"), v226 > 0.0))
        {
          v227 = objc_msgSend(*v1212, "numWakeupsLimit");
          objc_msgSend(*v1212, "wakeupsLimitDuration");
          v229 = v228;
          v230 = *p_isa;
          objc_msgSend(*v1212, "wakeupsLimitDuration");
          objc_msgSend(v230, "printWithFormat:", CFSTR(", exceeding limit of %.0f wakeups per second over %.0f seconds\n"), (double)v227 / v229, v231);
        }
        else
        {
          objc_msgSend(*p_isa, "appendString:", CFSTR("\n"));
        }
        objc_msgSend(*p_isa, "printWithFormat:", CFSTR("%-*s%llu\n"), 18, "Wakeups limit: ", objc_msgSend(*v1212, "numWakeupsLimit"));
        v232 = *p_isa;
        objc_msgSend(*v1212, "wakeupsLimitDuration");
        objc_msgSend(v232, "printWithFormat:", CFSTR("%-*s%.0fs\n"), 18, "Limit duration: ", v233);
        objc_msgSend(*p_isa, "printWithFormat:", CFSTR("%-*s%llu\n"), 18, "Wakeups caused: ", objc_msgSend(*v1212, "numWakeups"));
        v234 = *p_isa;
        objc_msgSend(*v1212, "wakeupsDuration");
        objc_msgSend(v234, "printWithFormat:", CFSTR("%-*s%.0fs\n"), 18, "Wakeups duration: ", v235);
      }
    }
  }
  if (objc_msgSend(*v1212, "bytesWritten"))
  {
    objc_msgSend(*v1212, "writeDuration");
    if (v236 > 0.0)
    {
      if (v1203)
      {
        v237 = *p_isa;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(*v1212, "bytesWritten"));
        v238 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v237, CFSTR("bytesWritten"), v238);

        v239 = *p_isa;
        v240 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(*v1212, "writeDuration");
        objc_msgSend(v240, "numberWithDouble:");
        v241 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v239, CFSTR("writeDuration"), v241);

        v242 = *p_isa;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(*v1212, "bytesWrittenLimit"));
        v243 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v242, CFSTR("bytesWrittenLimit"), v243);

        v244 = *p_isa;
        v245 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(*v1212, "writeLimitDuration");
        objc_msgSend(v245, "numberWithDouble:");
        v246 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v244, CFSTR("writeLimitDuration"), v246);

      }
      else
      {
        v247 = *(void **)(v1253 + 160);
        *(_BYTE *)(v1253 + 104) = 1;
        v248 = objc_msgSend(v247, "bytesWritten");
        objc_msgSend(*(id *)(v1253 + 160), "writeDuration");
        v250 = v249;
        v251 = *(void **)(v1253 + 8);
        SAFormattedBytesEx(objc_msgSend(*(id *)(v1253 + 160), "bytesWritten"), 0, 0, 1, 0);
        v252 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(v1253 + 160), "writeDuration");
        v254 = v253;
        SAFormattedBytesDouble(0, 0, (double)v248 / v250);
        v57 = (__CFString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v251, "printWithFormat:", CFSTR("%-*s%@ of file backed memory dirtied over %.0f seconds (%@ per second average)"), 18, "Writes: ", v252, v254, v57);

        if (objc_msgSend(*(id *)(v1253 + 160), "bytesWrittenLimit")
          && (objc_msgSend(*v1212, "writeLimitDuration"), v255 > 0.0))
        {
          v256 = objc_msgSend(*v1212, "bytesWrittenLimit");
          objc_msgSend(*v1212, "writeLimitDuration");
          v258 = *p_isa;
          SAFormattedBytesDouble(0, 0, (double)v256 / v257);
          v259 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*v1212, "writeLimitDuration");
          objc_msgSend(v258, "printWithFormat:", CFSTR(", exceeding limit of %@ per second over %.0f seconds\n"), v259, v260);

        }
        else
        {
          objc_msgSend(*p_isa, "appendString:", CFSTR("\n"));
        }
        v261 = *p_isa;
        SAFormattedBytesEx(objc_msgSend(*v1212, "bytesWrittenLimit"), 0, 0, 1, 0);
        v262 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v261, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Writes limit: ", v262);

        v263 = *p_isa;
        objc_msgSend(*v1212, "writeLimitDuration");
        objc_msgSend(v263, "printWithFormat:", CFSTR("%-*s%.0fs\n"), 18, "Limit duration: ", v264);
        v265 = *p_isa;
        SAFormattedBytesEx(objc_msgSend(*v1212, "bytesWritten"), 0, 0, 1, 0);
        v266 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v265, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Writes caused: ", v266);

        v267 = *p_isa;
        objc_msgSend(*v1212, "writeDuration");
        objc_msgSend(v267, "printWithFormat:", CFSTR("%-*s%.0fs\n"), 18, "Writes duration: ", v268);
      }
    }
  }
  objc_msgSend(*v1212, "attemptedSamplingInterval");
  v270 = v269;
  objc_msgSend(*v1212, "eventTimeRange");
  v271 = (void *)objc_claimAutoreleasedReturnValue();

  v272 = 0.0;
  if (v271)
  {
    objc_msgSend(*v1212, "eventTimeRange");
    v273 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v273, "deltaMachAbsTimeSeconds");
    v275 = v274 != 0.0;

    objc_msgSend(*v1212, "eventTimeRange");
    v276 = (void *)objc_claimAutoreleasedReturnValue();
    v277 = v276;
    if (v275)
    {
      objc_msgSend(v276, "deltaMachAbsTimeSeconds");
LABEL_268:
      v272 = v278;

      goto LABEL_269;
    }
    objc_msgSend(v276, "deltaMachContTimeSeconds");
    v280 = v279 != 0.0;

    objc_msgSend(*v1212, "eventTimeRange");
    v281 = (void *)objc_claimAutoreleasedReturnValue();
    v277 = v281;
    if (v280)
    {
      objc_msgSend(v281, "deltaMachContTimeSeconds");
      goto LABEL_268;
    }
    objc_msgSend(v281, "deltaWallTime");
    v283 = v282 != 0.0;

    if (v283)
    {
      objc_msgSend(*v1212, "eventTimeRange");
      v277 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v277, "deltaWallTime");
      goto LABEL_268;
    }
  }
LABEL_269:
  objc_msgSend(*(id *)(v1253 + 40), "machAbsTimeSeconds");
  if (v284 != 0.0)
  {
    objc_msgSend(*(id *)(v1253 + 32), "machAbsTimeSeconds");
    if (v285 != 0.0)
    {
      objc_msgSend(*(id *)(v1253 + 40), "machAbsTimeSeconds");
      v287 = v286;
      objc_msgSend(*(id *)(v1253 + 32), "machAbsTimeSeconds");
LABEL_278:
      v292 = v287 - v288;
      goto LABEL_279;
    }
  }
  objc_msgSend(*(id *)(v1253 + 40), "machContTimeSeconds");
  if (v289 != 0.0)
  {
    objc_msgSend(*(id *)(v1253 + 32), "machContTimeSeconds");
    if (v290 != 0.0)
    {
      objc_msgSend(*(id *)(v1253 + 40), "machContTimeSeconds");
      v287 = v291;
      objc_msgSend(*(id *)(v1253 + 32), "machContTimeSeconds");
      goto LABEL_278;
    }
  }
  objc_msgSend(*(id *)(v1253 + 40), "wallTime");
  v292 = 0.0;
  if (v293 != 0.0)
  {
    objc_msgSend(*(id *)(v1253 + 32), "wallTime");
    if (v294 != 0.0)
    {
      objc_msgSend(*(id *)(v1253 + 40), "wallTime");
      v287 = v295;
      objc_msgSend(*(id *)(v1253 + 32), "wallTime");
      goto LABEL_278;
    }
  }
LABEL_279:
  v296 = v270 + v292;
  if (v272 <= 0.0)
  {
    objc_msgSend(*v1212, "extraDuration");
    v272 = v87 + v296 + v297;
  }
  objc_msgSend(*v1212, "durationNote");
  v298 = (void *)objc_claimAutoreleasedReturnValue();

  if (v298)
  {
    if (v1184)
    {
      v299 = objc_alloc(MEMORY[0x1E0CB3940]);
      objc_msgSend(*v1212, "durationNote");
      v300 = (void *)objc_claimAutoreleasedReturnValue();
      v1187 = (id)objc_msgSend(v299, "initWithFormat:", CFSTR("%@, %@"), v300, v1184);

    }
    else
    {
      objc_msgSend(*v1212, "durationNote");
      v1187 = (id)objc_claimAutoreleasedReturnValue();
    }
    goto LABEL_287;
  }
  if (v1184)
  {
    v1187 = v1184;
    goto LABEL_287;
  }
  objc_msgSend(*v1212, "eventTimeRange");
  v318 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v318)
  {
    v1187 = 0;
    goto LABEL_287;
  }
  objc_msgSend(*(id *)(v1253 + 160), "eventTimeRange");
  v319 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v319, "startTime");
  v320 = (void *)objc_claimAutoreleasedReturnValue();
  v57 = (__CFString *)(v1253 + 32);
  objc_msgSend(v320, "deltaSecondsTo:timeDomainPriorityList:timeDomainUsed:", *(_QWORD *)(v1253 + 32), &unk_1E7167AD0, 0);
  v322 = v321;

  objc_msgSend(*(id *)(v1253 + 160), "eventTimeRange");
  v323 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v323, "startTime");
  v324 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v324, "deltaSecondsTo:timeDomainPriorityList:timeDomainUsed:", *(_QWORD *)(v1253 + 40), &unk_1E7167AE8, 0);
  v326 = v325;

  objc_msgSend(*(id *)(v1253 + 160), "eventTimeRange");
  v327 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v327, "endTime");
  v328 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v328, "deltaSecondsTo:timeDomainPriorityList:timeDomainUsed:", *(_QWORD *)(v1253 + 32), &unk_1E7167B00, 0);
  v330 = v329;

  objc_msgSend(*(id *)(v1253 + 160), "eventTimeRange");
  v331 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v331, "endTime");
  v332 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v332, "deltaSecondsTo:timeDomainPriorityList:timeDomainUsed:", *(_QWORD *)(v1253 + 40), &unk_1E7167B18, 0);
  v334 = v333;

  if (v330 > 0.0)
  {
    v335 = objc_alloc(MEMORY[0x1E0CB3940]);
    seconds_string_for_nanoseconds((unint64_t)(v330 * 1000000000.0));
    v336 = (void *)objc_claimAutoreleasedReturnValue();
    v1187 = (id)objc_msgSend(v335, "initWithFormat:", CFSTR("no overlap, event ends %@ before samples start"), v336);

    goto LABEL_287;
  }
  if (v326 < 0.0)
  {
    v411 = objc_alloc(MEMORY[0x1E0CB3940]);
    seconds_string_for_nanoseconds((unint64_t)(v326 * -1000000000.0));
    v412 = (void *)objc_claimAutoreleasedReturnValue();
    v1187 = (id)objc_msgSend(v411, "initWithFormat:", CFSTR("no overlap, event starts %@ after samples end"), v412);

    goto LABEL_287;
  }
  v768 = v270 + v334;
  if (!-[SASamplePrinter shouldPrintTimeOutsideSamplingRange:](v1253, fabs(v322)))
    v322 = 0.0;
  if (!-[SASamplePrinter shouldPrintTimeOutsideSamplingRange:](v1253, fabs(v768)))
    v768 = 0.0;
  if (v322 <= 0.0)
  {
    if (v322 >= 0.0)
    {
      v1118 = 0;
      goto LABEL_1250;
    }
    v981 = objc_alloc(MEMORY[0x1E0CB3940]);
    seconds_string_for_nanoseconds((unint64_t)(v322 * -1000000000.0));
    v770 = (void *)objc_claimAutoreleasedReturnValue();
    v771 = objc_msgSend(v981, "initWithFormat:", CFSTR("event starts %@ after samples start"), v770);
  }
  else
  {
    v769 = objc_alloc(MEMORY[0x1E0CB3940]);
    seconds_string_for_nanoseconds((unint64_t)(v322 * 1000000000.0));
    v770 = (void *)objc_claimAutoreleasedReturnValue();
    v771 = objc_msgSend(v769, "initWithFormat:", CFSTR("event starts %@ before samples"), v770);
  }
  v1118 = (void *)v771;

LABEL_1250:
  if (v768 > 0.0)
  {
    v1119 = objc_alloc(MEMORY[0x1E0CB3940]);
    seconds_string_for_nanoseconds((unint64_t)(v768 * 1000000000.0));
    v57 = (__CFString *)objc_claimAutoreleasedReturnValue();
    v1120 = objc_msgSend(v1119, "initWithFormat:", CFSTR("event ends %@ before samples end"), v57);
LABEL_1254:
    v1122 = (id)v1120;

    if (v1118)
    {
      v1123 = v1253;
      if (v1122)
      {
        v1187 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@, %@"), v1118, v1122);
        v1123 = v1253;
        goto LABEL_1267;
      }
      goto LABEL_1260;
    }
    v1123 = v1253;
    if (v1122)
    {
      v1122 = v1122;
      v1187 = v1122;
      goto LABEL_1267;
    }
    goto LABEL_1266;
  }
  if (v768 < 0.0)
  {
    v1121 = objc_alloc(MEMORY[0x1E0CB3940]);
    seconds_string_for_nanoseconds((unint64_t)(v768 * -1000000000.0));
    v57 = (__CFString *)objc_claimAutoreleasedReturnValue();
    v1120 = objc_msgSend(v1121, "initWithFormat:", CFSTR("event ends %@ after samples"), v57);
    goto LABEL_1254;
  }
  v1123 = v1253;
  if (v1118)
  {
LABEL_1260:
    v1187 = v1118;
    v1122 = 0;
    goto LABEL_1267;
  }
  v1122 = 0;
LABEL_1266:
  v1187 = 0;
LABEL_1267:
  if (v322 > 0.0 || v768 < 0.0)
  {
    objc_msgSend(*(id *)(v1123 + 160), "eventTimeRange");
    v1125 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1125, "startTime");
    v1126 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v1126, "isComparable:", *(_QWORD *)(v1253 + 32)))
    {
      objc_msgSend(*(id *)(v1253 + 160), "eventTimeRange");
      v1127 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v1127, "startTime");
      v1128 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v1128, "ge:", *(_QWORD *)(v1253 + 32)) & 1) != 0)
      {
        objc_msgSend(*v1212, "eventTimeRange");
        v1129 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v1129, "startTime");
        v57 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        v57 = (__CFString *)*(id *)(v1253 + 32);
      }

    }
    else
    {
      v57 = 0;
    }

    objc_msgSend(*(id *)(v1253 + 160), "eventTimeRange");
    v1130 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1130, "endTime");
    v1131 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v1131, "isComparable:", *(_QWORD *)(v1253 + 40)))
    {
      objc_msgSend(*(id *)(v1253 + 160), "eventTimeRange");
      v1132 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v1132, "endTime");
      v1133 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v1133, "le:", *(_QWORD *)(v1253 + 40)) & 1) != 0)
      {
        objc_msgSend(*v1212, "eventTimeRange");
        v1134 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v1134, "endTime");
        v1135 = (id)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        v1135 = *(id *)(v1253 + 40);
      }

    }
    else
    {
      v1135 = 0;
    }

    if (v57 && v1135)
    {
      -[__CFString deltaSecondsTo:timeDomainPriorityList:timeDomainUsed:](v57, "deltaSecondsTo:timeDomainPriorityList:timeDomainUsed:", v1135, &unk_1E7167B30, 0);
      v1137 = v1136;
      if (v1136 <= 0.0)
      {
        v1142 = *__error();
        _sa_logt();
        v1143 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v1143, OS_LOG_TYPE_FAULT))
        {
          objc_msgSend(*(id *)(v1253 + 160), "eventTimeRange");
          v1161 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v1161, "debugDescription");
          v1162 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(v1253 + 32), "debugDescription");
          v1163 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(v1253 + 40), "debugDescription");
          v1164 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)v1376 = 134219266;
          *(double *)&v1376[4] = v1137;
          *(_WORD *)&v1376[12] = 2048;
          *(double *)&v1376[14] = v330;
          *(_WORD *)&v1376[22] = 2048;
          *(double *)&v1376[24] = v326;
          *(_WORD *)v1377 = 2112;
          *(_QWORD *)&v1377[2] = v1162;
          *(_WORD *)&v1377[10] = 2112;
          *(_QWORD *)&v1377[12] = v1163;
          *(_WORD *)&v1377[20] = 2112;
          *(_QWORD *)&v1377[22] = v1164;
          _os_log_fault_impl(&dword_1B9BE0000, v1143, OS_LOG_TYPE_FAULT, "Overlap:%f eventEndToDataStart:%f eventStartToDataEnd:%f %@ vs %@-%@", v1376, 0x3Eu);

        }
        *__error() = v1142;
      }
      else
      {
        v1138 = v270 + v1136;
        if (-[SASamplePrinter shouldPrintTimeOutsideSamplingRange:](v1253, vabdd_f64(fmin(v296, v272), v270 + v1136)))
        {
          v1139 = objc_alloc(MEMORY[0x1E0CB3940]);
          seconds_string_for_nanoseconds((unint64_t)(v1138 * 1000000000.0));
          v1140 = (void *)objc_claimAutoreleasedReturnValue();
          v1141 = objc_msgSend(v1139, "initWithFormat:", CFSTR("%@ overlap, %@"), v1140, v1187);

          v1187 = (id)v1141;
        }
      }
    }

  }
LABEL_287:
  v301 = *p_isa;
  if (!v1203)
  {
    objc_msgSend(v301, "printWithFormat:", CFSTR("%-*s"), 18, "Duration: ");
    if (v272 >= 0.01)
      v314 = 2;
    else
      v314 = 3;
    saos_printf_seconds(*p_isa, (unint64_t)(v272 * 1000000000.0), v314);
    if (v272 != v296
      && -[SASamplePrinter shouldPrintTimeOutsideSamplingRange:](v1253, vabdd_f64(v272, v296)))
    {
      objc_msgSend(*p_isa, "appendString:", CFSTR("\n"));
      objc_msgSend(*p_isa, "printWithFormat:", CFSTR("%-*s%.02fs"), 18, "Duration Sampled: ", *(_QWORD *)&v296);
    }
    if (v1187)
    {
      v315 = *p_isa;
      SACopySanitizedString(v1187, 1, 0);
      v316 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v315, "printWithFormat:", CFSTR(" (%@)"), v316);

    }
    objc_msgSend(*(id *)(v1253 + 8), "appendString:", CFSTR("\n"));
    objc_msgSend(*(id *)(v1253 + 8), "printWithFormat:", CFSTR("%-*s%lu"), 18, "Steps: ", *(_QWORD *)(v1253 + 64));
    if (!objc_msgSend(*(id *)(v1253 + 16), "displayBody"))
    {
      objb = 0;
      goto LABEL_318;
    }
    objc_msgSend(*v1212, "timeWhenTransitionedToSamplingAllProcesses");
    v317 = (void *)objc_claimAutoreleasedReturnValue();
    if (v317
      && (objc_msgSend(*(id *)(v1253 + 160), "timeWhenTransitionedToSamplingAllProcesses"),
          v57 = (__CFString *)objc_claimAutoreleasedReturnValue(),
          (-[__CFString lt:](v57, "lt:", *(_QWORD *)(v1253 + 40)) & 1) != 0))
    {
      objb = 1;
    }
    else
    {
      objc_msgSend(*v1212, "timeWhenTransitionedToSamplingAllThreads");
      v337 = (void *)objc_claimAutoreleasedReturnValue();
      if (v337)
      {
        objc_msgSend(*(id *)(v1253 + 160), "timeWhenTransitionedToSamplingAllThreads");
        v338 = (void *)objc_claimAutoreleasedReturnValue();
        objb = objc_msgSend(v338, "lt:", *(_QWORD *)(v1253 + 40));

        if (!v317)
          goto LABEL_317;
      }
      else
      {
        objb = 0;
        if (!v317)
        {
LABEL_317:

LABEL_318:
          if (v270 <= 0.0)
          {
            objc_msgSend(*v1212, "stepsNote");
            v339 = (void *)objc_claimAutoreleasedReturnValue();
            v340 = objb;
            if (v339)
              v340 = 1;
            if (v340 == 1)
            {

            }
            else
            {
              objc_msgSend(*v1212, "kperfTriggers");
              v341 = (void *)objc_claimAutoreleasedReturnValue();
              v342 = objc_msgSend(v341, "count") == 0;

              if (v342)
              {
LABEL_365:
                objc_msgSend(*p_isa, "appendString:", CFSTR("\n"));
                goto LABEL_366;
              }
            }
          }
          objc_msgSend(*p_isa, "appendString:", CFSTR(" ("));
          objc_msgSend(*v1212, "kperfTriggers");
          v343 = (void *)objc_claimAutoreleasedReturnValue();
          v344 = objc_msgSend(v343, "count") == 0;

          if (v344)
          {
            if (v270 > 0.0)
            {
              saos_printf_time_scaled(*p_isa, (unint64_t)(v270 * 1000000000.0));
              objc_msgSend(*p_isa, "appendString:", CFSTR(" sampling interval"));
              v1239 = 1;
            }
            else
            {
              v1239 = 0;
            }
          }
          else
          {
            v1319 = 0u;
            v1318 = 0u;
            v1317 = 0u;
            v1316 = 0u;
            objc_msgSend(*v1212, "kperfTriggers");
            v345 = (void *)objc_claimAutoreleasedReturnValue();
            v346 = objc_msgSend(v345, "countByEnumeratingWithState:objects:count:", &v1316, v1356, 16);
            v1239 = v346 != 0;
            if (v346)
            {
              v347 = 0;
              v348 = *(_QWORD *)v1317;
              do
              {
                for (k = 0; k != v346; ++k)
                {
                  if (*(_QWORD *)v1317 != v348)
                    objc_enumerationMutation(v345);
                  v350 = *(void **)(*((_QWORD *)&v1316 + 1) + 8 * k);
                  if ((v347 & 1) != 0)
                    objc_msgSend(*p_isa, "appendString:", CFSTR(", "));
                  v351 = objc_msgSend(v350, "type");
                  if (v351 == 2)
                  {
                    saos_printf_time_scaled(*p_isa, objc_msgSend(v350, "timerPeriodNs"));
                    objc_msgSend(*p_isa, "appendString:", CFSTR(" sampling interval (on-cpu only)"));
                  }
                  else if (v351 == 1)
                  {
                    saos_printf_time_scaled(*p_isa, objc_msgSend(v350, "timerPeriodNs"));
                    objc_msgSend(*p_isa, "appendString:", CFSTR(" sampling interval"));
                  }
                  else
                  {
                    objc_msgSend(*p_isa, "printWithFormat:", CFSTR("unknown trigger %llu"), objc_msgSend(v350, "type"));
                  }
                  v347 = 1;
                }
                v346 = objc_msgSend(v345, "countByEnumeratingWithState:objects:count:", &v1316, v1356, 16);
              }
              while (v346);
            }

          }
          objc_msgSend(*v1212, "stepsNote");
          v352 = (void *)objc_claimAutoreleasedReturnValue();

          if (v352)
          {
            if (v1239)
              objc_msgSend(*p_isa, "appendString:", CFSTR(", "));
            v353 = *p_isa;
            objc_msgSend(*v1212, "stepsNote");
            v354 = (void *)objc_claimAutoreleasedReturnValue();
            SACopySanitizedString(v354, 1, 0);
            v355 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v353, "appendString:", v355);

            if ((objb & 1) == 0)
              goto LABEL_364;
          }
          else
          {
            if ((objb & 1) == 0)
            {
LABEL_364:
              objc_msgSend(*p_isa, "appendString:", CFSTR(")"));
              goto LABEL_365;
            }
            if (!v1239)
            {
LABEL_351:
              objc_msgSend(*v1212, "timeWhenTransitionedToSamplingAllProcesses");
              v356 = (void *)objc_claimAutoreleasedReturnValue();
              if (v356
                && (objc_msgSend(*(id *)(v1253 + 160), "timeWhenTransitionedToSamplingAllProcesses"),
                    v357 = (void *)objc_claimAutoreleasedReturnValue(),
                    v358 = objc_msgSend(v357, "lt:", *(_QWORD *)(v1253 + 40)),
                    v357,
                    v356,
                    v358))
              {
                objc_msgSend(*v1212, "timeWhenTransitionedToSamplingAllThreads");
                v359 = (void *)objc_claimAutoreleasedReturnValue();
                if (v359
                  && (objc_msgSend(*(id *)(v1253 + 160), "timeWhenTransitionedToSamplingAllThreads"),
                      v360 = (void *)objc_claimAutoreleasedReturnValue(),
                      v361 = objc_msgSend(v360, "lt:", *(_QWORD *)(v1253 + 40)),
                      v360,
                      v359,
                      v361))
                {
                  objc_msgSend(*v1212, "timeWhenTransitionedToSamplingAllProcesses");
                  v362 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(*v1212, "timeWhenTransitionedToSamplingAllThreads");
                  v363 = (void *)objc_claimAutoreleasedReturnValue();
                  v364 = objc_msgSend(v362, "ne:", v363);

                  if (v364)
                  {
                    v365 = *__error();
                    _sa_logt();
                    v366 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v366, OS_LOG_TYPE_DEBUG))
                    {
                      v1151 = objc_msgSend(*(id *)(v1253 + 160), "targetProcessId");
                      objc_msgSend(*(id *)(v1253 + 160), "timeWhenTransitionedToSamplingAllThreads");
                      v1152 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v1152, "machAbsTimeSeconds");
                      v1154 = v1153;
                      objc_msgSend(*(id *)(v1253 + 32), "machAbsTimeSeconds");
                      v1156 = v1155;
                      objc_msgSend(*(id *)(v1253 + 160), "timeWhenTransitionedToSamplingAllProcesses");
                      v1157 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v1157, "machAbsTimeSeconds");
                      v1159 = v1158;
                      objc_msgSend(*(id *)(v1253 + 32), "machAbsTimeSeconds");
                      *(_DWORD *)v1376 = 67109632;
                      *(_DWORD *)&v1376[4] = v1151;
                      *(_WORD *)&v1376[8] = 2048;
                      *(double *)&v1376[10] = v1154 - v1156;
                      *(_WORD *)&v1376[18] = 2048;
                      *(double *)&v1376[20] = v1159 - v1160;
                      _os_log_debug_impl(&dword_1B9BE0000, v366, OS_LOG_TYPE_DEBUG, "[%d] Don't know how to report transitioning to non-main thread at a separate time than transitioning to all processes: threads %.3f processes %.3f", v1376, 0x1Cu);

                    }
                    *__error() = v365;
                  }
                  v367 = *(void **)(v1253 + 8);
                  objc_msgSend(*(id *)(v1253 + 160), "timeWhenTransitionedToSamplingAllThreads");
                  v368 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v368, "machAbsTimeSeconds");
                  v370 = v369;
                  objc_msgSend(*(id *)(v1253 + 32), "machAbsTimeSeconds");
                  objc_msgSend(v367, "printWithFormat:", CFSTR("sampled only the main thread of the target process for %.2f seconds"), v370 - v371);
                }
                else
                {
                  v376 = *(void **)(v1253 + 8);
                  objc_msgSend(*(id *)(v1253 + 160), "timeWhenTransitionedToSamplingAllProcesses");
                  v368 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v368, "machAbsTimeSeconds");
                  v378 = v377;
                  objc_msgSend(*(id *)(v1253 + 32), "machAbsTimeSeconds");
                  objc_msgSend(v376, "printWithFormat:", CFSTR("sampled only the target process for %.2f seconds"), v378 - v379);
                }
              }
              else
              {
                v372 = *(void **)(v1253 + 8);
                objc_msgSend(*(id *)(v1253 + 160), "timeWhenTransitionedToSamplingAllThreads");
                v368 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v368, "machAbsTimeSeconds");
                v374 = v373;
                objc_msgSend(*(id *)(v1253 + 32), "machAbsTimeSeconds");
                objc_msgSend(v372, "printWithFormat:", CFSTR("sampled only main threads for %.2f seconds"), v374 - v375);
              }

              goto LABEL_364;
            }
          }
          objc_msgSend(*p_isa, "appendString:", CFSTR(", "));
          goto LABEL_351;
        }
      }
    }

    goto LABEL_317;
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v272);
  v302 = (void *)objc_claimAutoreleasedReturnValue();
  SAJSONWriteDictionaryEntry(v301, CFSTR("duration"), v302);

  if (v272 > v296)
  {
    v303 = *p_isa;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v296);
    v304 = (void *)objc_claimAutoreleasedReturnValue();
    SAJSONWriteDictionaryEntry(v303, CFSTR("sampledDuration"), v304);

  }
  if (v1187)
    SAJSONWriteDictionaryEntry(*p_isa, CFSTR("durationNote"), v1187);
  v305 = *(void **)(v1253 + 8);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", *(_QWORD *)(v1253 + 64));
  v306 = (void *)objc_claimAutoreleasedReturnValue();
  SAJSONWriteDictionaryEntry(v305, CFSTR("numSamples"), v306);

  objc_msgSend(*(id *)(v1253 + 160), "attemptedSamplingInterval");
  if (v307 > 0.0)
  {
    v308 = *p_isa;
    v309 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(*v1212, "attemptedSamplingInterval");
    objc_msgSend(v309, "numberWithDouble:");
    v310 = (void *)objc_claimAutoreleasedReturnValue();
    SAJSONWriteDictionaryEntry(v308, CFSTR("attemptedSamplingInterval"), v310);

  }
  objc_msgSend(*v1212, "kperfTriggers");
  v311 = (void *)objc_claimAutoreleasedReturnValue();

  if (v311)
  {
    v312 = *p_isa;
    objc_msgSend(*v1212, "kperfTriggers");
    v313 = (void *)objc_claimAutoreleasedReturnValue();
    SAJSONWriteDictionaryEntry(v312, CFSTR("kperfTriggers"), v313);

  }
LABEL_366:
  objc_msgSend(*v1212, "reportTimeThreshold");
  if (v380 > 0.0)
  {
    v381 = *p_isa;
    if (v1203)
    {
      v382 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend(*v1212, "reportTimeThreshold");
      objc_msgSend(v382, "numberWithDouble:");
      v383 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v381, CFSTR("reportTimeThreshold"), v383);

      goto LABEL_373;
    }
    objc_msgSend(*v1212, "reportTimeThreshold");
    objc_msgSend(v381, "printWithFormat:", CFSTR("%-*s%.3gs\n"), 18, "Report threshold: ", v384);
    goto LABEL_372;
  }
  if ((v1203 & 1) == 0)
LABEL_372:
    objc_msgSend(*p_isa, "appendString:", CFSTR("\n"));
LABEL_373:
  objc_msgSend(*v1212, "wrWorkflowName");
  v385 = (void *)objc_claimAutoreleasedReturnValue();

  if (v385)
  {
    v386 = *p_isa;
    objc_msgSend(*v1212, "wrWorkflowName");
    v387 = (void *)objc_claimAutoreleasedReturnValue();
    v388 = v387;
    if (v1203)
      SAJSONWriteDictionaryEntry(v386, CFSTR("wrWorkflowName"), v387);
    else
      objc_msgSend(v386, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Workflow Name: ", v387);

    objc_msgSend(*v1212, "wrError");
    v389 = (void *)objc_claimAutoreleasedReturnValue();
    v390 = v389;
    if (v389)
    {
      objc_msgSend(v389, "userInfo");
      v391 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v391, "objectForKeyedSubscript:", *MEMORY[0x1E0CB2938]);
      v392 = (void *)objc_claimAutoreleasedReturnValue();
      v393 = v392;
      if (v392)
      {
        v394 = v392;
      }
      else
      {
        objc_msgSend(v390, "description");
        v394 = (id)objc_claimAutoreleasedReturnValue();

      }
      v395 = *p_isa;
      if (v1203)
        SAJSONWriteDictionaryEntry(v395, CFSTR("wrError"), v394);
      else
        objc_msgSend(v395, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Workflow Error: ", v394);

    }
    objc_msgSend(*v1212, "wrDiagnosticName");
    v396 = (void *)objc_claimAutoreleasedReturnValue();

    if (v396)
    {
      v397 = *p_isa;
      objc_msgSend(*v1212, "wrDiagnosticName");
      v398 = (void *)objc_claimAutoreleasedReturnValue();
      v399 = v398;
      if (v1203)
        SAJSONWriteDictionaryEntry(v397, CFSTR("wrDiagnosticName"), v398);
      else
        objc_msgSend(v397, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Triggering Diagnostic: ", v398);

    }
    objc_msgSend(*v1212, "wrWorkflowDuration");
    if (v400 > 0.0)
    {
      objc_msgSend(*v1212, "wrWorkflowDurationThreshold");
      if (v401 > 0.0)
      {
        objc_msgSend(*v1212, "wrWorkflowDuration");
        v403 = v402;
        objc_msgSend(*v1212, "wrWorkflowDurationThreshold");
        if (v403 >= v404)
        {
          v405 = *p_isa;
          if (v1203)
          {
            v406 = (void *)MEMORY[0x1E0CB37E8];
            objc_msgSend(*v1212, "wrWorkflowDuration");
            objc_msgSend(v406, "numberWithDouble:");
            v407 = (void *)objc_claimAutoreleasedReturnValue();
            SAJSONWriteDictionaryEntry(v405, CFSTR("wrWorkflowDuration"), v407);

            v408 = *p_isa;
            v409 = (void *)MEMORY[0x1E0CB37E8];
            objc_msgSend(*v1212, "wrWorkflowDurationThreshold");
            objc_msgSend(v409, "numberWithDouble:");
            v410 = (void *)objc_claimAutoreleasedReturnValue();
            SAJSONWriteDictionaryEntry(v408, CFSTR("wrWorkflowDurationThreshold"), v410);

          }
          else
          {
            objc_msgSend(v405, "printWithFormat:", CFSTR("%-*sWorkflow event duration "), 18, "Trigger: ");
            v413 = *(void **)(v1253 + 8);
            objc_msgSend(*(id *)(v1253 + 160), "wrWorkflowDuration");
            v415 = v414;
            if (objc_msgSend(*(id *)(v1253 + 16), "displayDetailedWallTime"))
              v416 = 9;
            else
              v416 = 3;
            saos_printf_seconds(v413, (unint64_t)(v415 * 1000000000.0), v416);
            objc_msgSend(*(id *)(v1253 + 8), "appendString:", CFSTR(", above threshold "));
            v417 = *(void **)(v1253 + 8);
            objc_msgSend(*(id *)(v1253 + 160), "wrWorkflowDurationThreshold");
            v419 = v418;
            if (objc_msgSend(*(id *)(v1253 + 16), "displayDetailedWallTime"))
              v420 = 9;
            else
              v420 = 3;
            saos_printf_seconds(v417, (unint64_t)(v419 * 1000000000.0), v420);
            objc_msgSend(*(id *)(v1253 + 8), "appendString:", CFSTR("\n"));
          }
        }
      }
    }
    objc_msgSend(*v1212, "wrWorkflowDurationOmittingNetworkBoundIntervals");
    if (v421 <= 0.0
      || (objc_msgSend(*v1212, "wrWorkflowDurationOmittingNetworkBoundIntervalsThreshold"), v422 <= 0.0)
      || (objc_msgSend(*v1212, "wrWorkflowDurationOmittingNetworkBoundIntervals"),
          v424 = v423,
          objc_msgSend(*v1212, "wrWorkflowDurationOmittingNetworkBoundIntervalsThreshold"),
          v424 < v425))
    {
      objc_msgSend(*v1212, "wrWorkflowTimeoutDuration");
      if (v426 <= 0.0)
        goto LABEL_424;
      if (v1203)
        goto LABEL_409;
      goto LABEL_420;
    }
    v430 = *p_isa;
    if ((v1203 & 1) != 0)
    {
      v431 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend(*v1212, "wrWorkflowDurationOmittingNetworkBoundIntervals");
      objc_msgSend(v431, "numberWithDouble:");
      v432 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v430, CFSTR("wrWorkflowDurationOmittingNetworkBoundIntervals"), v432);

      v433 = *p_isa;
      v434 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend(*v1212, "wrWorkflowDurationOmittingNetworkBoundIntervalsThreshold");
      objc_msgSend(v434, "numberWithDouble:");
      v435 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v433, CFSTR("wrWorkflowDurationOmittingNetworkBoundIntervalsThreshold"), v435);

      objc_msgSend(*v1212, "wrWorkflowTimeoutDuration");
      if (v436 > 0.0)
      {
LABEL_409:
        v427 = *p_isa;
        v428 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(*v1212, "wrWorkflowTimeoutDuration");
        objc_msgSend(v428, "numberWithDouble:");
        v429 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v427, CFSTR("wrWorkflowTimeoutDuration"), v429);

      }
    }
    else
    {
      objc_msgSend(v430, "printWithFormat:", CFSTR("%-*sWorkflow event duration (omitting network bound intervals) "), 18, "Trigger: ");
      v437 = *(void **)(v1253 + 8);
      objc_msgSend(*(id *)(v1253 + 160), "wrWorkflowDurationOmittingNetworkBoundIntervals");
      v439 = v438;
      if (objc_msgSend(*(id *)(v1253 + 16), "displayDetailedWallTime"))
        v440 = 9;
      else
        v440 = 3;
      saos_printf_seconds(v437, (unint64_t)(v439 * 1000000000.0), v440);
      objc_msgSend(*(id *)(v1253 + 8), "appendString:", CFSTR(", above threshold "));
      v441 = *(void **)(v1253 + 8);
      objc_msgSend(*(id *)(v1253 + 160), "wrWorkflowDurationOmittingNetworkBoundIntervalsThreshold");
      v443 = v442;
      if (objc_msgSend(*(id *)(v1253 + 16), "displayDetailedWallTime"))
        v444 = 9;
      else
        v444 = 3;
      saos_printf_seconds(v441, (unint64_t)(v443 * 1000000000.0), v444);
      objc_msgSend(*(id *)(v1253 + 8), "appendString:", CFSTR("\n"));
      objc_msgSend(*(id *)(v1253 + 160), "wrWorkflowTimeoutDuration");
      if (v445 > 0.0)
      {
LABEL_420:
        objc_msgSend(*(id *)(v1253 + 8), "printWithFormat:", CFSTR("%-*sWorkflow event timed out after"), 18, "Trigger: ");
        v446 = *(void **)(v1253 + 8);
        objc_msgSend(*(id *)(v1253 + 160), "wrWorkflowTimeoutDuration");
        v448 = v447;
        if (objc_msgSend(*(id *)(v1253 + 16), "displayDetailedWallTime"))
          v449 = 9;
        else
          v449 = 3;
        saos_printf_seconds(v446, (unint64_t)(v448 * 1000000000.0), v449);
        objc_msgSend(*(id *)(v1253 + 8), "appendString:", CFSTR("\n"));
      }
    }
LABEL_424:
    objc_msgSend(*v1212, "wrSignpostName");
    v450 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v450)
      goto LABEL_435;
    if (v1203)
    {
      v451 = *p_isa;
      objc_msgSend(*v1212, "wrSignpostName");
      v452 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v451, CFSTR("wrSignpostName"), v452);

      objc_msgSend(*v1212, "wrSignpostSubsystem");
      v453 = (void *)objc_claimAutoreleasedReturnValue();

      if (v453)
      {
        v454 = *p_isa;
        objc_msgSend(*v1212, "wrSignpostSubsystem");
        v455 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v454, CFSTR("wrSignpostSubsystem"), v455);

      }
      objc_msgSend(*v1212, "wrSignpostCategory");
      v456 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v456)
      {
LABEL_435:
        objc_msgSend(*v1212, "wrTriggeringSignpostName");
        v465 = (void *)objc_claimAutoreleasedReturnValue();
        if (v465)
        {
          objc_msgSend(*v1212, "wrSignpostName");
          v466 = (void *)objc_claimAutoreleasedReturnValue();
          if (v466)
          {
            objc_msgSend(*v1212, "wrTriggeringSignpostName");
            v467 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(*v1212, "wrSignpostName");
            v468 = (void *)objc_claimAutoreleasedReturnValue();
            v469 = objc_msgSend(v467, "isEqualToString:", v468);

            if ((v469 & 1) != 0)
              goto LABEL_450;
          }
          else
          {

          }
          if (!v1203)
          {
            objc_msgSend(*v1212, "wrTriggeringSignpostName");
            v477 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(*v1212, "wrTriggeringSignpostSubsystem");
            v478 = (void *)objc_claimAutoreleasedReturnValue();
            if (v478)
            {
              objc_msgSend(*v1212, "wrTriggeringSignpostCategory");
              v479 = (void *)objc_claimAutoreleasedReturnValue();
              v480 = v479 == 0;

              if (!v480)
              {
                objc_msgSend(*v1212, "wrTriggeringSignpostSubsystem");
                v481 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(*v1212, "wrTriggeringSignpostCategory");
                v482 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v477, "stringByAppendingFormat:", CFSTR(" [%@:%@]"), v481, v482);
                v483 = objc_claimAutoreleasedReturnValue();

                v477 = (void *)v483;
              }
            }
            objc_msgSend(*p_isa, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Triggering Signpost: ", v477);
            goto LABEL_449;
          }
          v470 = *p_isa;
          objc_msgSend(*v1212, "wrTriggeringSignpostName");
          v471 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v470, CFSTR("wrTriggeringSignpostName"), v471);

          objc_msgSend(*v1212, "wrTriggeringSignpostSubsystem");
          v472 = (void *)objc_claimAutoreleasedReturnValue();

          if (v472)
          {
            v473 = *p_isa;
            objc_msgSend(*v1212, "wrTriggeringSignpostSubsystem");
            v474 = (void *)objc_claimAutoreleasedReturnValue();
            SAJSONWriteDictionaryEntry(v473, CFSTR("wrTriggeringSignpostSubsystem"), v474);

          }
          objc_msgSend(*v1212, "wrTriggeringSignpostCategory");
          v475 = (void *)objc_claimAutoreleasedReturnValue();

          if (v475)
          {
            v476 = *p_isa;
            objc_msgSend(*v1212, "wrTriggeringSignpostCategory");
            v477 = (void *)objc_claimAutoreleasedReturnValue();
            SAJSONWriteDictionaryEntry(v476, CFSTR("wrTriggeringSignpostCategory"), v477);
LABEL_449:

          }
        }
LABEL_450:
        if (objc_msgSend(*v1212, "wrSignpostCount"))
        {
          if (objc_msgSend(*v1212, "wrSignpostCountThreshold"))
          {
            v484 = objc_msgSend(*v1212, "wrSignpostCount");
            if (v484 >= objc_msgSend(*v1212, "wrSignpostCountThreshold"))
            {
              v485 = *p_isa;
              if (v1203)
              {
                objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(*v1212, "wrSignpostCount"));
                v486 = (void *)objc_claimAutoreleasedReturnValue();
                SAJSONWriteDictionaryEntry(v485, CFSTR("wrSignpostCount"), v486);

                v487 = *p_isa;
                objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(*v1212, "wrSignpostCountThreshold"));
                v488 = (void *)objc_claimAutoreleasedReturnValue();
                SAJSONWriteDictionaryEntry(v487, CFSTR("wrSignpostCountThreshold"), v488);

              }
              else
              {
                objc_msgSend(v485, "printWithFormat:", CFSTR("%-*sSignpost count %llu, above threshold %llu\n"), 18, "Trigger: ", objc_msgSend(*v1212, "wrSignpostCount"), objc_msgSend(*v1212, "wrSignpostCountThreshold"));
              }
            }
          }
        }
        objc_msgSend(*v1212, "wrSignpostDurationUnion");
        if (v489 > 0.0)
        {
          objc_msgSend(*v1212, "wrSignpostDurationUnionThreshold");
          if (v490 > 0.0)
          {
            objc_msgSend(*v1212, "wrSignpostDurationUnion");
            v492 = v491;
            objc_msgSend(*v1212, "wrSignpostDurationUnionThreshold");
            if (v492 >= v493)
            {
              v494 = *p_isa;
              if (v1203)
              {
                v495 = (void *)MEMORY[0x1E0CB37E8];
                objc_msgSend(*v1212, "wrSignpostDurationUnion");
                objc_msgSend(v495, "numberWithDouble:");
                v496 = (void *)objc_claimAutoreleasedReturnValue();
                SAJSONWriteDictionaryEntry(v494, CFSTR("wrSignpostDurationUnion"), v496);

                v497 = *p_isa;
                v498 = (void *)MEMORY[0x1E0CB37E8];
                objc_msgSend(*v1212, "wrSignpostDurationUnionThreshold");
                objc_msgSend(v498, "numberWithDouble:");
                v499 = (void *)objc_claimAutoreleasedReturnValue();
                SAJSONWriteDictionaryEntry(v497, CFSTR("wrSignpostDurationUnionThreshold"), v499);

              }
              else
              {
                objc_msgSend(v494, "printWithFormat:", CFSTR("%-*sSignpost interval duration (union) "), 18, "Trigger: ");
                v500 = *(void **)(v1253 + 8);
                objc_msgSend(*(id *)(v1253 + 160), "wrSignpostDurationUnion");
                v502 = v501;
                if (objc_msgSend(*(id *)(v1253 + 16), "displayDetailedWallTime"))
                  v503 = 9;
                else
                  v503 = 3;
                saos_printf_seconds(v500, (unint64_t)(v502 * 1000000000.0), v503);
                objc_msgSend(*(id *)(v1253 + 8), "appendString:", CFSTR(", above threshold "));
                v504 = *(void **)(v1253 + 8);
                objc_msgSend(*(id *)(v1253 + 160), "wrSignpostDurationUnionThreshold");
                v506 = v505;
                if (objc_msgSend(*(id *)(v1253 + 16), "displayDetailedWallTime"))
                  v507 = 9;
                else
                  v507 = 3;
                saos_printf_seconds(v504, (unint64_t)(v506 * 1000000000.0), v507);
                objc_msgSend(*(id *)(v1253 + 8), "appendString:", CFSTR("\n"));
              }
            }
          }
        }
        objc_msgSend(*v1212, "wrSignpostDurationSum");
        if (v508 > 0.0)
        {
          objc_msgSend(*v1212, "wrSignpostDurationSumThreshold");
          if (v509 > 0.0)
          {
            objc_msgSend(*v1212, "wrSignpostDurationSum");
            v511 = v510;
            objc_msgSend(*v1212, "wrSignpostDurationSumThreshold");
            if (v511 >= v512)
            {
              v513 = *p_isa;
              if (v1203)
              {
                v514 = (void *)MEMORY[0x1E0CB37E8];
                objc_msgSend(*v1212, "wrSignpostDurationSum");
                objc_msgSend(v514, "numberWithDouble:");
                v515 = (void *)objc_claimAutoreleasedReturnValue();
                SAJSONWriteDictionaryEntry(v513, CFSTR("wrSignpostDurationSum"), v515);

                v516 = *p_isa;
                v517 = (void *)MEMORY[0x1E0CB37E8];
                objc_msgSend(*v1212, "wrSignpostDurationSumThreshold");
                objc_msgSend(v517, "numberWithDouble:");
                v518 = (void *)objc_claimAutoreleasedReturnValue();
                SAJSONWriteDictionaryEntry(v516, CFSTR("wrSignpostDurationSumThreshold"), v518);

              }
              else
              {
                objc_msgSend(v513, "printWithFormat:", CFSTR("%-*sSignpost interval duration (sum) "), 18, "Trigger: ");
                v519 = *(void **)(v1253 + 8);
                objc_msgSend(*(id *)(v1253 + 160), "wrSignpostDurationSum");
                v521 = v520;
                if (objc_msgSend(*(id *)(v1253 + 16), "displayDetailedWallTime"))
                  v522 = 9;
                else
                  v522 = 3;
                saos_printf_seconds(v519, (unint64_t)(v521 * 1000000000.0), v522);
                objc_msgSend(*(id *)(v1253 + 8), "appendString:", CFSTR(", above threshold "));
                v523 = *(void **)(v1253 + 8);
                objc_msgSend(*(id *)(v1253 + 160), "wrSignpostDurationSumThreshold");
                v525 = v524;
                if (objc_msgSend(*(id *)(v1253 + 16), "displayDetailedWallTime"))
                  v526 = 9;
                else
                  v526 = 3;
                saos_printf_seconds(v523, (unint64_t)(v525 * 1000000000.0), v526);
                objc_msgSend(*(id *)(v1253 + 8), "appendString:", CFSTR("\n"));
              }
            }
          }
        }
        objc_msgSend(*v1212, "wrSignpostDurationSingle");
        if (v527 > 0.0
          && (objc_msgSend(*v1212, "wrSignpostDurationSingleThreshold"), v528 > 0.0)
          && (objc_msgSend(*v1212, "wrSignpostDurationSingle"),
              v530 = v529,
              objc_msgSend(*v1212, "wrSignpostDurationSingleThreshold"),
              v530 >= v531))
        {
          v588 = *p_isa;
          if (v1203)
          {
            v589 = (void *)MEMORY[0x1E0CB37E8];
            objc_msgSend(*v1212, "wrSignpostDurationSingle");
            objc_msgSend(v589, "numberWithDouble:");
            v590 = (void *)objc_claimAutoreleasedReturnValue();
            SAJSONWriteDictionaryEntry(v588, CFSTR("wrSignpostDurationSingle"), v590);

            v591 = *p_isa;
            v592 = (void *)MEMORY[0x1E0CB37E8];
            objc_msgSend(*v1212, "wrSignpostDurationSingleThreshold");
            objc_msgSend(v592, "numberWithDouble:");
            v593 = (void *)objc_claimAutoreleasedReturnValue();
            SAJSONWriteDictionaryEntry(v591, CFSTR("wrSignpostDurationSingleThreshold"), v593);

            goto LABEL_485;
          }
          objc_msgSend(v588, "printWithFormat:", CFSTR("%-*sSignpost interval duration (single) "), 18, "Trigger: ");
          v756 = *(void **)(v1253 + 8);
          objc_msgSend(*(id *)(v1253 + 160), "wrSignpostDurationSingle");
          v758 = v757;
          if (objc_msgSend(*(id *)(v1253 + 16), "displayDetailedWallTime"))
            v759 = 9;
          else
            v759 = 3;
          saos_printf_seconds(v756, (unint64_t)(v758 * 1000000000.0), v759);
          objc_msgSend(*(id *)(v1253 + 8), "appendString:", CFSTR(", above threshold "));
          v760 = *(void **)(v1253 + 8);
          objc_msgSend(*(id *)(v1253 + 160), "wrSignpostDurationSingleThreshold");
          v762 = v761;
          if (objc_msgSend(*(id *)(v1253 + 16), "displayDetailedWallTime"))
            v763 = 9;
          else
            v763 = 3;
          saos_printf_seconds(v760, (unint64_t)(v762 * 1000000000.0), v763);
          objc_msgSend(*(id *)(v1253 + 8), "appendString:", CFSTR("\n"));
        }
        else if ((v1203 & 1) != 0)
        {
LABEL_485:

          goto LABEL_486;
        }
        objc_msgSend(*p_isa, "appendString:", CFSTR("\n"));
        goto LABEL_485;
      }
      v457 = *p_isa;
      objc_msgSend(*v1212, "wrSignpostCategory");
      v458 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v457, CFSTR("wrSignpostCategory"), v458);
    }
    else
    {
      objc_msgSend(*v1212, "wrSignpostName");
      v458 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*v1212, "wrSignpostSubsystem");
      v459 = (void *)objc_claimAutoreleasedReturnValue();
      if (v459)
      {
        objc_msgSend(*v1212, "wrSignpostCategory");
        v460 = (void *)objc_claimAutoreleasedReturnValue();
        v461 = v460 == 0;

        if (!v461)
        {
          objc_msgSend(*v1212, "wrSignpostSubsystem");
          v462 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*v1212, "wrSignpostCategory");
          v463 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v458, "stringByAppendingFormat:", CFSTR(" [%@:%@]"), v462, v463);
          v464 = objc_claimAutoreleasedReturnValue();

          v458 = (void *)v464;
        }
      }
      objc_msgSend(*p_isa, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Signpost: ", v458);
    }

    goto LABEL_435;
  }
LABEL_486:
  objc_msgSend(*v1212, "hardwareModel");
  v532 = (void *)objc_claimAutoreleasedReturnValue();
  if (v532
    || objc_msgSend(*v1212, "numActiveCPUs")
    || objc_msgSend(*v1212, "hwPageSize")
    || objc_msgSend(*v1212, "vmPageSize"))
  {
    goto LABEL_490;
  }
  objc_msgSend(*v1212, "bootArgs");
  v532 = (void *)objc_claimAutoreleasedReturnValue();
  if (v532)
  {
    objc_msgSend(*v1212, "bootArgs");
    v772 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v772, "length"))
    {

LABEL_490:
      goto LABEL_491;
    }
    v1124 = objc_msgSend(*(id *)(v1253 + 16), "displayEmptyBootArgs");

    if ((v1124 & 1) == 0)
      goto LABEL_523;
  }
  else if ((objc_msgSend(*(id *)(v1253 + 16), "displayEmptyBootArgs") & 1) == 0)
  {
    goto LABEL_523;
  }
LABEL_491:
  objc_msgSend(*v1212, "hardwareModel");
  v533 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v533)
  {
    if (!objc_msgSend(*v1212, "numActiveCPUs"))
      goto LABEL_500;
    if (v1203)
      goto LABEL_497;
LABEL_499:
    objc_msgSend(*p_isa, "printWithFormat:", CFSTR("%-*s%d\n"), 18, "Active cpus: ", objc_msgSend(*v1212, "numActiveCPUs"));
    goto LABEL_500;
  }
  v534 = *p_isa;
  objc_msgSend(*v1212, "hardwareModel");
  v535 = (void *)objc_claimAutoreleasedReturnValue();
  v536 = v535;
  if ((v1203 & 1) == 0)
  {
    SACopySanitizedString(v535, 1, 0);
    v539 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v534, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Hardware model: ", v539);

    if (!objc_msgSend(*v1212, "numActiveCPUs"))
      goto LABEL_500;
    goto LABEL_499;
  }
  SAJSONWriteDictionaryEntry(v534, CFSTR("hardwareModel"), v535);

  if (objc_msgSend(*v1212, "numActiveCPUs"))
  {
LABEL_497:
    v537 = *p_isa;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", objc_msgSend(*v1212, "numActiveCPUs"));
    v538 = (void *)objc_claimAutoreleasedReturnValue();
    SAJSONWriteDictionaryEntry(v537, CFSTR("numActiveCPUs"), v538);

  }
LABEL_500:
  if (!objc_msgSend(*v1212, "hwPageSize"))
  {
    if (!objc_msgSend(*v1212, "vmPageSize"))
      goto LABEL_509;
    if (v1203)
      goto LABEL_506;
LABEL_508:
    objc_msgSend(*p_isa, "printWithFormat:", CFSTR("%-*s%d\n"), 18, "VM page size: ", objc_msgSend(*v1212, "vmPageSize"));
    goto LABEL_509;
  }
  v540 = *p_isa;
  if ((v1203 & 1) == 0)
  {
    objc_msgSend(v540, "printWithFormat:", CFSTR("%-*s%d\n"), 18, "HW page size: ", objc_msgSend(*v1212, "hwPageSize"));
    if (!objc_msgSend(*v1212, "vmPageSize"))
      goto LABEL_509;
    goto LABEL_508;
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", objc_msgSend(*v1212, "hwPageSize"));
  v541 = (void *)objc_claimAutoreleasedReturnValue();
  SAJSONWriteDictionaryEntry(v540, CFSTR("hwPageSize"), v541);

  if (objc_msgSend(*v1212, "vmPageSize"))
  {
LABEL_506:
    v542 = *p_isa;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", objc_msgSend(*v1212, "vmPageSize"));
    v543 = (void *)objc_claimAutoreleasedReturnValue();
    SAJSONWriteDictionaryEntry(v542, CFSTR("vmPageSize"), v543);

  }
LABEL_509:
  objc_msgSend(*v1212, "bootArgs");
  v544 = (void *)objc_claimAutoreleasedReturnValue();
  if (v544)
  {
    objc_msgSend(*v1212, "bootArgs");
    v545 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v545, "length"))
    {

LABEL_515:
      objc_msgSend(*v1212, "bootArgs");
      v547 = objc_claimAutoreleasedReturnValue();
      v548 = (void *)v547;
      v549 = CFSTR("???");
      if (v547)
        v549 = (__CFString *)v547;
      v550 = v549;

      v551 = *p_isa;
      if (v1203)
      {
        SAJSONWriteDictionaryEntry(*p_isa, CFSTR("bootArgs"), v550);
      }
      else
      {
        SACopySanitizedString(v550, 1, 0);
        v552 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v551, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Boot args: ", v552);

      }
      goto LABEL_521;
    }
    v546 = objc_msgSend(*(id *)(v1253 + 16), "displayEmptyBootArgs");

    if ((v546 & 1) != 0)
      goto LABEL_515;
  }
  else if (objc_msgSend(*(id *)(v1253 + 16), "displayEmptyBootArgs"))
  {
    goto LABEL_515;
  }
LABEL_521:
  if ((v1203 & 1) == 0)
    objc_msgSend(*p_isa, "appendString:", CFSTR("\n"));
LABEL_523:
  objc_msgSend(*v1212, "lastWakeTime");
  v554 = v553;
  objc_msgSend(*v1212, "eventTimeRange");
  v555 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v555, "startTime");
  v556 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v556
    || (objc_msgSend(v556, "machAbsTimeSeconds"), v557 == 0.0)
    && (objc_msgSend(v556, "machContTimeSeconds"), v558 == 0.0)
    || ((objc_msgSend(v556, "machAbsTimeSeconds"), v559 == 0.0)
     || (objc_msgSend(v556, "machContTimeSeconds"), v560 == 0.0))
    && (objc_msgSend(*(id *)(v1253 + 32), "machAbsTimeSeconds"), v561 != 0.0)
    && (objc_msgSend(*(id *)(v1253 + 32), "machContTimeSeconds"), v562 != 0.0))
  {
    v563 = *(id *)(v1253 + 32);

    v556 = v563;
  }
  v1199 = v556;
  objc_msgSend(v1199, "wallTime");
  v564 = v1199;
  v1182 = v1199;
  if (v565 == 0.0)
  {
    v1182 = *(id *)(v1253 + 32);

    v564 = v1199;
  }
  objc_msgSend(v564, "machAbsTimeSeconds");
  if (v566 != 0.0
    || (objc_msgSend(v1199, "machContTimeSeconds"), v567 != 0.0)
    || v554 != 0.0 && (v554 < 0.0 || (objc_msgSend(v1182, "wallTime"), v587 > v554)))
  {
    objc_msgSend(v1199, "machContTimeSeconds");
    if (v568 == 0.0)
    {
      objc_msgSend(v1199, "machAbsTimeSeconds");
      if (v573 == 0.0)
        goto LABEL_544;
      if (v1203)
        goto LABEL_541;
    }
    else
    {
      v569 = *p_isa;
      if ((v1203 & 1) != 0)
      {
        v570 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(v1199, "machContTimeSeconds");
        objc_msgSend(v570, "numberWithDouble:");
        v571 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v569, CFSTR("timeSinceBoot"), v571);

        objc_msgSend(v1199, "machAbsTimeSeconds");
        if (v572 == 0.0)
        {
LABEL_544:
          if (v554 >= 0.0)
          {
            if (v554 == 0.0 || (objc_msgSend(v1182, "wallTime"), v582 - v554 <= 0.0))
            {
              if ((v1203 & 1) != 0)
                goto LABEL_562;
            }
            else
            {
              v583 = *p_isa;
              if (v1203)
              {
                v584 = (void *)MEMORY[0x1E0CB37E8];
                objc_msgSend(v1182, "wallTime");
                objc_msgSend(v584, "numberWithDouble:", v585 - v554);
                v586 = (void *)objc_claimAutoreleasedReturnValue();
                SAJSONWriteDictionaryEntry(v583, CFSTR("timeSinceWake"), v586);

                goto LABEL_562;
              }
              objc_msgSend(v1182, "wallTime");
              objc_msgSend(v583, "printWithFormat:", CFSTR("%-*s%.0fs\n"), 18, "Time Since Wake: ", v594 - v554);
            }
          }
          else
          {
            v581 = *p_isa;
            if (v1203)
            {
              SAJSONWriteDictionaryEntry(v581, CFSTR("timeSinceWake"), CFSTR("n/a"));
              goto LABEL_562;
            }
            objc_msgSend(v581, "printWithFormat:", CFSTR("%-*sn/a (machine hasn't slept)\n"), 18, "Time Since Wake: ");
          }
          objc_msgSend(*p_isa, "appendString:", CFSTR("\n"));
          goto LABEL_562;
        }
LABEL_541:
        v574 = *p_isa;
        v575 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(v1199, "machAbsTimeSeconds");
        objc_msgSend(v575, "numberWithDouble:");
        v576 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v574, CFSTR("timeAwakeSinceBoot"), v576);

        goto LABEL_544;
      }
      objc_msgSend(v1199, "machContTimeSeconds");
      objc_msgSend(v569, "printWithFormat:", CFSTR("%-*s%.0fs\n"), 18, "Time Since Boot: ", v577);
      objc_msgSend(v1199, "machAbsTimeSeconds");
      if (v578 == 0.0)
        goto LABEL_544;
    }
    v579 = *p_isa;
    objc_msgSend(v1199, "machAbsTimeSeconds");
    objc_msgSend(v579, "printWithFormat:", CFSTR("%-*s%.0fs\n"), 18, "Time Awake Since Boot: ", v580);
    goto LABEL_544;
  }
LABEL_562:
  objc_msgSend(*(id *)(v1253 + 160), "fanSpeedClosestToTimestamp:", *(_QWORD *)(v1253 + 32));
  v1194 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(v1253 + 160), "fanSpeedClosestToTimestamp:", *(_QWORD *)(v1253 + 40));
  v1196 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1196 && (objc_msgSend(v1196, "fanSpeedIsValid") & 1) != 0
    || v1194 && objc_msgSend(v1194, "fanSpeedIsValid"))
  {
    v595 = objc_msgSend(v1194, "fanSpeedIsValid");
    if (v1203)
    {
      if (v595)
      {
        v596 = *p_isa;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(v1194, "fanSpeed"));
        v597 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v596, CFSTR("startFanSpeed"), v597);

      }
      if (objc_msgSend(v1196, "fanSpeedIsValid"))
      {
        v598 = *p_isa;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(v1196, "fanSpeed"));
        v599 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v598, CFSTR("endFanSpeed"), v599);

      }
    }
    else
    {
      if (v595)
        v600 = v1194;
      else
        v600 = v1196;
      v601 = objc_msgSend(v600, "fanSpeed");
      objc_msgSend(*p_isa, "printWithFormat:", CFSTR("%-*s%d rpm"), 18, "Fan speed: ", v601);
      if (objc_msgSend(v1196, "fanSpeedIsValid"))
      {
        v602 = objc_msgSend(v1196, "fanSpeed");
        v603 = (int)v602 - (int)v601 >= 0 ? v602 - v601 : (int)v601 - (int)v602;
        if (v603 >= 0x64)
          objc_msgSend(*p_isa, "printWithFormat:", CFSTR(" -> %d (%+d)"), v602, (v602 - v601));
      }
      objc_msgSend(*p_isa, "appendString:", CFSTR("\n"));
    }
  }
  +[SATimeRange timeRangeStart:end:](SATimeRange, "timeRangeStart:end:", *(_QWORD *)(v1253 + 32), *(_QWORD *)(v1253 + 40));
  v1180 = (void *)objc_claimAutoreleasedReturnValue();
  v604 = objc_msgSend(v1180, "deltaMachAbsTime");
  v605 = MEMORY[0x1E0C809B0];
  v606 = (unint64_t)&off_1B9CC2000;
  if (!v604)
  {
    v1177 = 0;
    goto LABEL_597;
  }
  *(_QWORD *)v1376 = 0;
  *(_QWORD *)&v1376[8] = v1376;
  *(_QWORD *)&v1376[16] = 0x2020000000;
  *(_QWORD *)&v1376[24] = 0;
  *(_QWORD *)&v1372 = 0;
  *((_QWORD *)&v1372 + 1) = &v1372;
  v1373 = 0x2020000000uLL;
  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &buf;
  v1365 = 0x2020000000;
  v1366 = 0;
  v607 = *(id *)(v1253 + 32);
  v608 = *(id *)(v1253 + 40);
  v609 = *(void **)(v1253 + 160);
  v1310[0] = v605;
  v1310[1] = 3221225472;
  v1310[2] = __30__SASamplePrinter_printHeader__block_invoke;
  v1310[3] = &unk_1E7148F88;
  v610 = v607;
  v1311 = v610;
  v611 = v608;
  v1312 = v611;
  v1313 = v1376;
  v1314 = &v1372;
  p_buf = &buf;
  objc_msgSend(v609, "enumerateTasks:", v1310);
  if (*(_QWORD *)(*(_QWORD *)&v1376[8] + 24))
  {
    v612 = *p_isa;
    if (!v1203)
    {
      objc_msgSend(v612, "printWithFormat:", CFSTR("%-*s"), 18, "Total CPU Time: ");
      v618 = *(_QWORD *)(*(_QWORD *)&v1376[8] + 24);
      v619 = *(void **)(v1253 + 8);
      if (objc_msgSend(*(id *)(v1253 + 16), "displayDetailedCpuTime"))
        v620 = 9;
      else
        v620 = 3;
      saos_printf_seconds(v619, v618, v620);
      v621 = *(_QWORD *)(*((_QWORD *)&buf + 1) + 24);
      if (v621)
        saos_printf_cycles_instructions(*(void **)(v1253 + 8), v621, *(_QWORD *)(*((_QWORD *)&v1372 + 1) + 24), objc_msgSend(*(id *)(v1253 + 16), "displayDetailedCpuTime"));
      objc_msgSend(*p_isa, "appendString:", CFSTR("\n"));
      v1177 = 1;
      goto LABEL_596;
    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:");
    v613 = (void *)objc_claimAutoreleasedReturnValue();
    SAJSONWriteDictionaryEntry(v612, CFSTR("totalCpuNanoseconds"), v613);

    if (*(_QWORD *)(*((_QWORD *)&v1372 + 1) + 24))
    {
      v614 = *p_isa;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:");
      v615 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v614, CFSTR("totalCpuInstructions"), v615);

    }
    if (*(_QWORD *)(*((_QWORD *)&buf + 1) + 24))
    {
      v616 = *p_isa;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:");
      v617 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v616, CFSTR("totalCpuCycles"), v617);

    }
  }
  v1177 = 0;
LABEL_596:

  _Block_object_dispose(&buf, 8);
  _Block_object_dispose(&v1372, 8);
  _Block_object_dispose(v1376, 8);
LABEL_597:
  objc_msgSend(*v1212, "memoryPressureEvents");
  v622 = (void *)objc_claimAutoreleasedReturnValue();
  v623 = objc_msgSend(v622, "count") == 0;

  if (!v623)
  {
    v1309 = 0u;
    v1308 = 0u;
    v1307 = 0u;
    v1306 = 0u;
    objc_msgSend(*v1212, "memoryPressureEvents");
    v1240 = (id)objc_claimAutoreleasedReturnValue();
    v624 = objc_msgSend(v1240, "countByEnumeratingWithState:objects:count:", &v1306, v1355, 16);
    if (v624)
    {
      v625 = 0;
      v606 = 0;
      v626 = 0;
      v627 = *(_QWORD *)v1307;
      v628 = 100;
      objc = -1;
      do
      {
        for (m = 0; m != v624; ++m)
        {
          if (*(_QWORD *)v1307 != v627)
            objc_enumerationMutation(v1240);
          v630 = *(void **)(*((_QWORD *)&v1306 + 1) + 8 * m);
          v631 = *(void **)(v1253 + 32);
          objc_msgSend(v630, "timestamp");
          v632 = (void *)objc_claimAutoreleasedReturnValue();
          LOBYTE(v631) = objc_msgSend(v631, "gt:", v632);

          if ((v631 & 1) == 0)
          {
            v633 = *(void **)(v1253 + 40);
            objc_msgSend(v630, "timestamp");
            v634 = (void *)objc_claimAutoreleasedReturnValue();
            LOBYTE(v633) = objc_msgSend(v633, "lt:", v634);

            if ((v633 & 1) != 0)
              goto LABEL_612;
            if (objc_msgSend(v630, "availableBytes") < objc)
              objc = objc_msgSend(v630, "availableBytes");
            if (objc_msgSend(v630, "memoryStatusLevel") < v628)
              v628 = objc_msgSend(v630, "memoryStatusLevel");
            v626 += objc_msgSend(v630, "memoryStatusLevel");
            v625 += objc_msgSend(v630, "availableBytes");
            ++v606;
          }
        }
        v624 = objc_msgSend(v1240, "countByEnumeratingWithState:objects:count:", &v1306, v1355, 16);
      }
      while (v624);
LABEL_612:

      if (!v606)
        goto LABEL_617;
      v635 = v626 / v606;
      v636 = *p_isa;
      if (v1203)
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", 100 - v635);
        v637 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v636, CFSTR("averageMemoryPressure"), v637);

        v638 = *p_isa;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v625 / v606);
        v639 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v638, CFSTR("averageAvailableBytes"), v639);

        v640 = *p_isa;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 100 - v628);
        v641 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v640, CFSTR("highestMemoryPressure"), v641);

        v642 = *p_isa;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc);
        v1240 = (id)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v642, CFSTR("minimumAvailableBytes"), v1240);
      }
      else
      {
        objc_msgSend(v636, "printWithFormat:", CFSTR("%-*saverage %u%%, highest %u%%\n"), 18, "Memory pressure: ", 100 - v635, 100 - v628);
        v643 = *p_isa;
        SAFormattedBytesEx(v625 / v606, 1, 0, 1, 0);
        v1240 = (id)objc_claimAutoreleasedReturnValue();
        SAFormattedBytesEx(objc, 1, 0, 1, 0);
        v644 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v643, "printWithFormat:", CFSTR("%-*saverage %@, lowest %@\n"), 18, "Available memory: ", v1240, v644);

        v1177 = 1;
      }
    }

  }
LABEL_617:
  objc_msgSend(*v1212, "ioEvents");
  v645 = (void *)objc_claimAutoreleasedReturnValue();
  v646 = objc_msgSend(v645, "count") == 0;

  if (!v646)
  {
    objd = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 4);
    v1241 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 4);
    v1305 = 0u;
    v1304 = 0u;
    v1303 = 0u;
    v1302 = 0u;
    objc_msgSend(*v1212, "ioEvents");
    v1227 = (id)objc_claimAutoreleasedReturnValue();
    v647 = objc_msgSend(v1227, "countByEnumeratingWithState:objects:count:", &v1302, v1354, 16);
    if (v647)
    {
      selfa = 0;
      v648 = 0;
      v649 = *(_QWORD *)v1303;
      do
      {
        v650 = 0;
        v651 = v1253;
        do
        {
          if (*(_QWORD *)v1303 != v649)
          {
            objc_enumerationMutation(v1227);
            v651 = v1253;
          }
          v652 = *(void **)(*((_QWORD *)&v1302 + 1) + 8 * v650);
          v653 = *(void **)(v651 + 32);
          objc_msgSend(v652, "endTimestamp");
          v654 = (void *)objc_claimAutoreleasedReturnValue();
          LOBYTE(v653) = objc_msgSend(v653, "gt:", v654);

          if ((v653 & 1) == 0)
          {
            v655 = *(void **)(v1253 + 40);
            objc_msgSend(v652, "endTimestamp");
            v656 = (void *)objc_claimAutoreleasedReturnValue();
            LOBYTE(v655) = objc_msgSend(v655, "lt:", v656);

            if ((v655 & 1) != 0)
              goto LABEL_630;
            v606 = objc_msgSend(v652, "tier");
            v657 = (void *)MEMORY[0x1E0CB37E8];
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v606);
            v658 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(objd, "objectForKeyedSubscript:", v658);
            v659 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v657, "numberWithUnsignedLongLong:", objc_msgSend(v659, "unsignedLongLongValue") + 1);
            v660 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v606);
            v661 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(objd, "setObject:forKeyedSubscript:", v660, v661);

            v662 = (void *)MEMORY[0x1E0CB37E8];
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v606);
            v663 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v1241, "objectForKeyedSubscript:", v663);
            v664 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v662, "numberWithUnsignedLongLong:", objc_msgSend(v652, "size") + objc_msgSend(v664, "unsignedLongLongValue"));
            v665 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v606);
            v666 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v1241, "setObject:forKeyedSubscript:", v665, v666);

            ++selfa;
            v648 += objc_msgSend(v652, "size");
          }
          v651 = v1253;
          ++v650;
        }
        while (v647 != v650);
        v647 = objc_msgSend(v1227, "countByEnumeratingWithState:objects:count:", &v1302, v1354, 16);
      }
      while (v647);
    }
    else
    {
      selfa = 0;
      v648 = 0;
    }
LABEL_630:

    if (objc_msgSend(objd, "count"))
    {
      objc_msgSend(*(id *)(v1253 + 40), "machAbsTimeSeconds");
      v668 = v667;
      objc_msgSend(*(id *)(v1253 + 32), "machAbsTimeSeconds");
      v670 = *(void **)(v1253 + 8);
      if (v1203)
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", selfa);
        v671 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v670, CFSTR("ioCountTotal"), v671);

        v672 = *p_isa;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v648);
        v673 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v672, CFSTR("ioBytesTotal"), v673);

        v1301 = 0u;
        v1300 = 0u;
        v1299 = 0u;
        v1298 = 0u;
        objc_msgSend(objd, "allKeys");
        v674 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v674, "sortedArrayUsingSelector:", sel_compare_);
        v1228 = (id)objc_claimAutoreleasedReturnValue();

        v675 = objc_msgSend(v1228, "countByEnumeratingWithState:objects:count:", &v1298, v1353, 16);
        if (v675)
        {
          v676 = *(_QWORD *)v1299;
          do
          {
            for (n = 0; n != v675; ++n)
            {
              if (*(_QWORD *)v1299 != v676)
                objc_enumerationMutation(v1228);
              v678 = *(void **)(*((_QWORD *)&v1298 + 1) + 8 * n);
              v679 = *p_isa;
              v680 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("ioCountTier%d"), objc_msgSend(v678, "intValue"));
              objc_msgSend(objd, "objectForKeyedSubscript:", v678);
              v681 = (void *)objc_claimAutoreleasedReturnValue();
              SAJSONWriteDictionaryEntry(v679, v680, v681);

              v682 = *p_isa;
              v683 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("ioBytesTier%d"), objc_msgSend(v678, "intValue"));
              objc_msgSend(v1241, "objectForKeyedSubscript:", v678);
              v684 = (void *)objc_claimAutoreleasedReturnValue();
              SAJSONWriteDictionaryEntry(v682, v683, v684);

            }
            v675 = objc_msgSend(v1228, "countByEnumeratingWithState:objects:count:", &v1298, v1353, 16);
          }
          while (v675);
        }
      }
      else
      {
        v685 = v669;
        objc_msgSend(v670, "printWithFormat:", CFSTR("I/O statistics:\n"));
        v686 = v668 - v685;
        v687 = *p_isa;
        SAFormattedBytesEx(v648, 1, 0, 1, 0);
        v688 = (void *)objc_claimAutoreleasedReturnValue();
        if (v686 <= 0.0)
        {
          v689 = 0.0;
          v690 = 0.0;
        }
        else
        {
          v689 = (double)(unint64_t)selfa / v686;
          v690 = (double)v648 / v686;
        }
        SAFormattedBytesDouble(1, 0, v690);
        v691 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v687, "printWithFormat:", CFSTR("%-*s%llu IOs (%.0f IOs/s), %@ (%@/s)\n"), 18, "  Overall: ", selfa, *(_QWORD *)&v689, v688, v691);

        v1297 = 0u;
        v1296 = 0u;
        v1295 = 0u;
        v1294 = 0u;
        objc_msgSend(objd, "allKeys");
        v692 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v692, "sortedArrayUsingSelector:", sel_compare_);
        v1228 = (id)objc_claimAutoreleasedReturnValue();

        v1223 = objc_msgSend(v1228, "countByEnumeratingWithState:objects:count:", &v1294, v1352, 16);
        if (v1223)
        {
          v1218 = *(_QWORD *)v1295;
          do
          {
            for (ii = 0; ii != v1223; ++ii)
            {
              if (*(_QWORD *)v1295 != v1218)
                objc_enumerationMutation(v1228);
              v694 = *(void **)(*((_QWORD *)&v1294 + 1) + 8 * ii);
              v695 = *p_isa;
              v696 = objc_retainAutorelease((id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%-*sTier%d: "), 2, ", objc_msgSend(v694, "intValue")));
              v697 = objc_msgSend(v696, "UTF8String");
              objc_msgSend(objd, "objectForKeyedSubscript:", v694);
              v698 = (void *)objc_claimAutoreleasedReturnValue();
              v699 = 0.0;
              if (v686 > 0.0)
              {
                objc_msgSend(objd, "objectForKeyedSubscript:", v694);
                selfa = (char *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(selfa, "doubleValue");
                v699 = v700 / v686;
              }
              objc_msgSend(v1241, "objectForKeyedSubscript:", v694);
              v701 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v701, "doubleValue");
              SAFormattedBytesDouble(1, 0, v702);
              v703 = (void *)objc_claimAutoreleasedReturnValue();
              v704 = 0.0;
              if (v686 > 0.0)
              {
                objc_msgSend(v1241, "objectForKeyedSubscript:", v694, 0.0);
                v606 = objc_claimAutoreleasedReturnValue();
                objc_msgSend((id)v606, "doubleValue");
                v704 = v705 / v686;
              }
              SAFormattedBytesDouble(1, 0, v704);
              v706 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v695, "printWithFormat:", CFSTR("%-*s%@ IOs (%.0f IOs/s), %@ (%@/s)\n"), 18, v697, v698, *(_QWORD *)&v699, v703, v706);

              if (v686 > 0.0)
              {

                v703 = v701;
                v701 = selfa;
              }

            }
            v1223 = objc_msgSend(v1228, "countByEnumeratingWithState:objects:count:", &v1294, v1352, 16);
          }
          while (v1223);
        }
        v1177 = 1;
      }

    }
  }
  objc_msgSend(*v1212, "systemAdvisoryLevels");
  v707 = (void *)objc_claimAutoreleasedReturnValue();

  if (v707)
  {
    if (v1203)
    {
      objc_msgSend(*(id *)(v1253 + 160), "systemAdvisoryLevels");
      v708 = (void *)objc_claimAutoreleasedReturnValue();
      v1293[0] = MEMORY[0x1E0C809B0];
      v1293[1] = 3221225472;
      v1293[2] = __30__SASamplePrinter_printHeader__block_invoke_2;
      v1293[3] = &unk_1E7148FB0;
      v1293[4] = v1253;
      objc_msgSend(v708, "enumerateKeysAndObjectsUsingBlock:", v1293);

    }
    else
    {
      v709 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
      objc_msgSend(*v1212, "systemAdvisoryLevels");
      v710 = (void *)objc_claimAutoreleasedReturnValue();
      v1291[0] = MEMORY[0x1E0C809B0];
      v1291[1] = 3221225472;
      v1291[2] = __30__SASamplePrinter_printHeader__block_invoke_3;
      v1291[3] = &unk_1E7148FB0;
      v711 = v709;
      v1292 = v711;
      objc_msgSend(v710, "enumerateKeysAndObjectsUsingBlock:", v1291);

      if (objc_msgSend(v711, "hasSuffix:", CFSTR(", ")))
      {
        v712 = objc_msgSend(CFSTR(", "), "length");
        objc_msgSend(v711, "replaceCharactersInRange:withString:", objc_msgSend(v711, "length") - v712, v712, &stru_1E714A250);
      }
      v713 = *p_isa;
      v714 = objc_retainAutorelease(v711);
      objc_msgSend(v713, "printWithFormat:", CFSTR("%-*s%s\n"), 18, "Advisory levels: ", objc_msgSend(v714, "UTF8String"));

      v1177 = 1;
    }
  }
  objc_msgSend(*v1212, "homeVolumeSpace");
  v715 = (void *)objc_claimAutoreleasedReturnValue();

  if (v715)
  {
    objc_msgSend(*v1212, "homeVolumeSpace");
    v716 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v716, "objectForKeyedSubscript:", 0x1E714A6B0);
    v717 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*v1212, "homeVolumeSpace");
    v718 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v718, "objectForKeyedSubscript:", 0x1E714A6D0);
    v719 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*v1212, "homeVolumeSpace");
    v720 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v720, "objectForKeyedSubscript:", 0x1E714A6F0);
    v721 = (void *)objc_claimAutoreleasedReturnValue();

    if (v717)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & (v719 != 0)) == 1)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          if (v721)
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {

              v721 = 0;
            }
          }
          v722 = *p_isa;
          if (v1203)
          {
            SAJSONWriteDictionaryEntry(*p_isa, CFSTR("homeVolumeTotalSpace"), v717);
            SAJSONWriteDictionaryEntry(*p_isa, CFSTR("homeVolumeAvailableSpace"), v719);
            if (v721)
              SAJSONWriteDictionaryEntry(*p_isa, CFSTR("homeVolumeLowSpaceThreshold"), v721);
          }
          else
          {
            SAFormattedBytesEx(objc_msgSend(v719, "unsignedLongLongValue"), 1, 0, 1, 0);
            v723 = (void *)objc_claimAutoreleasedReturnValue();
            SAFormattedBytesEx(objc_msgSend(v717, "unsignedLongLongValue"), 1, 0, 1, 0);
            v724 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v722, "printWithFormat:", CFSTR("%-*s%@/%@"), 18, "Free disk space: ", v723, v724);

            if (v721)
            {
              v725 = *p_isa;
              SAFormattedBytesEx(objc_msgSend(v721, "unsignedLongLongValue"), 1, 0, 1, 0);
              v726 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v725, "printWithFormat:", CFSTR(", low space threshold %@"), v726);

            }
            objc_msgSend(*p_isa, "printWithFormat:", CFSTR("\n"));
            v1177 = 1;
          }
        }
      }
    }

  }
  objc_msgSend(*v1212, "powerModeTransitions");
  v727 = (void *)objc_claimAutoreleasedReturnValue();
  v728 = objc_msgSend(v727, "count") == 0;

  if (v728)
    goto LABEL_755;
  if ((v1203 & 1) != 0)
  {
    v729 = *p_isa;
    objc_msgSend(*v1212, "powerModeTransitions");
    v730 = (void *)objc_claimAutoreleasedReturnValue();
    SAJSONWriteDictionaryEntry(v729, CFSTR("powerModeTransitions"), v730);

    v731 = *v1212;
    if (*v1212 && v731[126])
      goto LABEL_758;
LABEL_766:
    objc_msgSend(v731, "models");
    v791 = (void *)objc_claimAutoreleasedReturnValue();

    if (v791)
    {
      v792 = *p_isa;
      objc_msgSend(*v1212, "models");
      v793 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v792, CFSTR("models"), v793);

    }
    goto LABEL_875;
  }
  *(_QWORD *)v1376 = 0;
  v1287 = 0u;
  v1288 = 0u;
  v1289 = 0u;
  v1290 = 0u;
  objc_msgSend(*v1212, "powerModeTransitions");
  v732 = (void *)objc_claimAutoreleasedReturnValue();
  v733 = objc_msgSend(v732, "countByEnumeratingWithState:objects:count:", &v1287, v1351, 16);
  if (!v733)
  {

    v738 = 0;
    goto LABEL_754;
  }
  v734 = 0;
  v735 = 0;
  v736 = 0;
  v737 = 0;
  v738 = 0;
  v739 = *(_QWORD *)v1288;
  v740 = 0.0;
  while (2)
  {
    for (jj = 0; jj != v733; ++jj)
    {
      if (*(_QWORD *)v1288 != v739)
        objc_enumerationMutation(v732);
      v742 = *(void **)(*((_QWORD *)&v1287 + 1) + 8 * jj);
      if (objc_msgSend(v742, "lowPowerModeChanged"))
      {
        objc_msgSend(v742, "timestamp");
        v743 = (void *)objc_claimAutoreleasedReturnValue();
        v744 = v743;
        if (v743)
        {
          if (objc_msgSend(v743, "isComparable:", *(_QWORD *)(v1253 + 40))
            && objc_msgSend(v744, "gt:", *(_QWORD *)(v1253 + 40)))
          {
            if ((v737 & 1) != 0)
            {

LABEL_711:
              if (v735)
              {
                if ((v736 & 1) != 0)
                {
                  objc_msgSend(*(id *)(v1253 + 40), "wallTime");
                  v753 = v752;
                  objc_msgSend(v738, "wallTime");
                  v740 = v740 + v753 - v754;
                  if (v735 == 1)
                  {
                    asprintf((char **)v1376, "(for last %.1fs of samples)", v740);
                    goto LABEL_732;
                  }
LABEL_731:
                  objc_msgSend(*(id *)(v1253 + 40), "wallTime");
                  v766 = v765;
                  objc_msgSend(*(id *)(v1253 + 32), "wallTime");
                  asprintf((char **)v1376, "(for %.1fs out of %.1fs of samples)", v740, v766 - v767);
                }
                else
                {
                  if (v735 != 1)
                    goto LABEL_731;
                  asprintf((char **)v1376, "(for first %.1fs of samples)", v740);
                }
LABEL_732:
                objc_msgSend(*p_isa, "printWithFormat:", CFSTR("%-*sEnabled"), 18, "Low Power Mode: ");
                v764 = *p_isa;
                if (!*(_QWORD *)v1376)
                {
LABEL_752:
                  objc_msgSend(v764, "appendString:", CFSTR("\n"));
                  goto LABEL_753;
                }
LABEL_728:
                objc_msgSend(v764, "printWithFormat:", CFSTR(" %s\n"), *(_QWORD *)v1376);
LABEL_753:
                v1177 = 1;
                goto LABEL_754;
              }
              *(_QWORD *)v1376 = 0;
              if ((v736 & 1) != 0)
                goto LABEL_732;
            }
            else
            {
              v755 = objc_msgSend(v742, "lowPowerMode");

              if ((v755 & 1) == 0)
                goto LABEL_732;
            }
LABEL_726:
            if (objc_msgSend(*(id *)(v1253 + 16), "displayDefaultPowerModes"))
            {
              objc_msgSend(*p_isa, "printWithFormat:", CFSTR("%-*sDisabled"), 18, "Low Power Mode: ");
              v764 = *p_isa;
              if (!*(_QWORD *)v1376)
                goto LABEL_752;
              goto LABEL_728;
            }
            goto LABEL_753;
          }
          if (objc_msgSend(v744, "isComparable:", *(_QWORD *)(v1253 + 32))
            && (objc_msgSend(v744, "lt:", *(_QWORD *)(v1253 + 32)) & 1) == 0)
          {
            if ((v737 & 1) != 0 && (v736 & 1) == objc_msgSend(v742, "lowPowerMode"))
              goto LABEL_703;
            if ((objc_msgSend(v742, "lowPowerMode") & 1) == 0)
            {
              objc_msgSend(v742, "timestamp");
              v745 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v745, "wallTime");
              v747 = v746;
              v748 = v738;
              if (!v738)
                v748 = *(void **)(v1253 + 32);
              objc_msgSend(v748, "wallTime");
              v750 = v749;

              v740 = v740 + v747 - v750;
            }
            v751 = v744;

            ++v735;
            v738 = v751;
          }
        }
        v736 = objc_msgSend(v742, "lowPowerMode");
LABEL_703:

        v734 = 1;
        v737 = 1;
        continue;
      }
    }
    v733 = objc_msgSend(v732, "countByEnumeratingWithState:objects:count:", &v1287, v1351, 16);
    if (v733)
      continue;
    break;
  }

  if ((v734 & 1) != 0)
  {
    if ((v737 & 1) != 0)
      goto LABEL_711;
    goto LABEL_726;
  }
LABEL_754:

LABEL_755:
  v731 = *v1212;
  if (!*v1212 || (v779 = v731[126]) == 0)
  {
    if (!v1203)
      goto LABEL_774;
    goto LABEL_766;
  }
  if (v1203)
  {
LABEL_758:
    v780 = *p_isa;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v731[123]);
    v781 = (void *)objc_claimAutoreleasedReturnValue();
    SAJSONWriteDictionaryEntry(v780, CFSTR("numVnodesAllocated"), v781);

    v782 = *p_isa;
    if (*v1212)
      v783 = *((_QWORD *)*v1212 + 124);
    else
      v783 = 0;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v783);
    v784 = (void *)objc_claimAutoreleasedReturnValue();
    SAJSONWriteDictionaryEntry(v782, CFSTR("numVnodesFree"), v784);

    v785 = *p_isa;
    if (*v1212)
      v786 = *((_QWORD *)*v1212 + 125);
    else
      v786 = 0;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v786);
    v787 = (void *)objc_claimAutoreleasedReturnValue();
    SAJSONWriteDictionaryEntry(v785, CFSTR("numVnodesSoftLimit"), v787);

    v788 = *p_isa;
    if (*v1212)
      v789 = *((_QWORD *)*v1212 + 126);
    else
      v789 = 0;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v789);
    v790 = (void *)objc_claimAutoreleasedReturnValue();
    SAJSONWriteDictionaryEntry(v788, CFSTR("numVnodesHardLimit"), v790);

    v731 = *v1212;
    goto LABEL_766;
  }
  v794 = v731[124] - v731[123] + v779;
  objc_msgSend(*p_isa, "printWithFormat:", CFSTR("%-*s%.2f%% (%llu/%llu"), 18, "Vnodes Available: ", (double)v794 * 100.0 / (double)v779, v794, v779);
  v795 = *v1212;
  if (*v1212)
  {
    v796 = v795[123];
    if (v796 == v795[126]
      || (objc_msgSend(*p_isa, "printWithFormat:", CFSTR(", %llu allocated"), v796), (v795 = *v1212) != 0))
    {
      v797 = v795[125];
      if (v797 != v795[126])
        objc_msgSend(*p_isa, "printWithFormat:", CFSTR(", %llu soft limit"), v797);
    }
  }
  objc_msgSend(*p_isa, "printWithFormat:", CFSTR(")\n"));
  v731 = *v1212;
  v1177 = 1;
LABEL_774:
  objc_msgSend(v731, "eventTimeRange");
  v798 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v798, "startTime");
  v799 = (void *)objc_claimAutoreleasedReturnValue();
  v800 = v799;
  if (!v799)
    v800 = *(void **)(v1253 + 32);
  obje = v800;

  objc_msgSend(*v1212, "eventTimeRange");
  v801 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v801, "endTime");
  v802 = (void *)objc_claimAutoreleasedReturnValue();
  v803 = v802;
  if (!v802)
    v803 = *(void **)(v1253 + 40);
  v1242 = v803;

  if (obje && v1242)
  {
    v1286 = 0u;
    v1285 = 0u;
    v1284 = 0u;
    v1283 = 0u;
    objc_msgSend(*v1212, "models");
    v1205 = (id)objc_claimAutoreleasedReturnValue();
    v1214 = objc_msgSend(v1205, "countByEnumeratingWithState:objects:count:", &v1283, v1350, 16);
    if (!v1214)
      goto LABEL_872;
    v1209 = *(id *)v1284;
    while (1)
    {
      v1219 = 0;
      do
      {
        if (*(id *)v1284 != v1209)
          objc_enumerationMutation(v1205);
        selfb = *(id *)(*((_QWORD *)&v1283 + 1) + 8 * v1219);
        v1229 = objc_alloc_init(MEMORY[0x1E0C99E20]);
        objc_msgSend(selfb, "loadedChanges");
        v804 = (void *)objc_claimAutoreleasedReturnValue();
        v805 = objc_msgSend(v804, "count") == 0;

        if (v805)
        {
          v1224 = 0;
          v809 = 0;
          goto LABEL_833;
        }
        v806 = 0;
        v807 = 0;
        v808 = 0;
        v809 = 0;
        do
        {
          objc_msgSend(selfb, "loadedChanges");
          v810 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v810, "objectAtIndexedSubscript:", v806);
          v811 = (void *)objc_claimAutoreleasedReturnValue();

          v812 = objc_msgSend(v811, "loaded");
          if (!v812)
          {
            if ((v808 & 1) == 0)
              goto LABEL_817;
            objc_msgSend(v811, "timestamp");
            v813 = (void *)objc_claimAutoreleasedReturnValue();
            if (v813)
            {
              *(_QWORD *)v1376 = 0;
              objc_msgSend(obje, "deltaSecondsTo:timeDomainPriorityList:timeDomainUsed:", v813, &unk_1E7167B48, v1376);
              if (*(_QWORD *)v1376)
                v815 = v814;
              else
                v815 = NAN;
              if (v815 < -10.0)
                goto LABEL_816;
              if ((v809 & 1) != 0)
              {
LABEL_804:
                objc_msgSend(*p_isa, "printWithFormat:", CFSTR("%-*s"), 18, "  Loaded: ");
                if (v807)
                {
                  *(_QWORD *)v1376 = 0;
                  objc_msgSend(obje, "deltaSecondsTo:timeDomainPriorityList:timeDomainUsed:", v807, &unk_1E7167B60, v1376);
                  if (!*(_QWORD *)v1376)
                    v820 = NAN;
                  saos_printf_seconds_sigfig(*p_isa, v820);
                }
                else
                {
                  objc_msgSend(*p_isa, "printWithFormat:", CFSTR("???"));
                }
                objc_msgSend(*p_isa, "printWithFormat:", CFSTR(" - "));
                saos_printf_seconds_sigfig(*p_isa, v815);
                if (objc_msgSend(v1229, "count"))
                {
                  objc_msgSend(v1229, "allObjects");
                  v823 = (void *)objc_claimAutoreleasedReturnValue();
                  v824 = (void *)objc_msgSend(v823, "mutableCopy");

                  objc_msgSend(v824, "sortUsingSelector:", sel_compare_);
                  v825 = *p_isa;
                  objc_msgSend(v824, "componentsJoinedByString:", CFSTR(", "));
                  v826 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v825, "printWithFormat:", CFSTR(", requested by %@"), v826);

                }
                else
                {
                  objc_msgSend(*p_isa, "printWithFormat:", CFSTR(", requested by UNKNOWN"));
                }
                objc_msgSend(*p_isa, "printWithFormat:", CFSTR("\n"));
                v809 = 1;
LABEL_816:

LABEL_817:
                objc_msgSend(v1229, "removeAllObjects");
                v821 = v807;
                v807 = 0;
                goto LABEL_818;
              }
            }
            else
            {
              objc_msgSend(selfb, "loadedChanges");
              v816 = (void *)objc_claimAutoreleasedReturnValue();
              v817 = v806 < objc_msgSend(v816, "count") - 1;

              if (v817)
                goto LABEL_816;
              v815 = NAN;
              if ((v809 & 1) != 0)
                goto LABEL_804;
            }
            v818 = *p_isa;
            objc_msgSend(selfb, "identifier");
            v819 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v818, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Model: ", v819);

            goto LABEL_804;
          }
          if ((v808 & 1) == 0)
          {
            objc_msgSend(v811, "timestamp");
            v1224 = (void *)objc_claimAutoreleasedReturnValue();

            if (v1224)
            {
              if (objc_msgSend(v1224, "isComparable:", v1242)
                && (objc_msgSend(v1224, "gt:", v1242) & 1) != 0)
              {

                goto LABEL_833;
              }
              v807 = v1224;
            }
            else
            {
              v807 = 0;
            }
          }
          objc_msgSend(v811, "loadedRequesters");
          v821 = (void *)objc_claimAutoreleasedReturnValue();
          if (v821)
          {
            objc_msgSend(v811, "loadedRequesters");
            v822 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v1229, "addObjectsFromArray:", v822);

          }
LABEL_818:

          objc_msgSend(selfb, "loadedChanges");
          v827 = (void *)objc_claimAutoreleasedReturnValue();
          v828 = objc_msgSend(v827, "count");

          ++v806;
          v808 = v812;
        }
        while (v806 < v828);
        if (v812)
        {
          if ((v809 & 1) == 0)
          {
            v829 = *p_isa;
            objc_msgSend(selfb, "identifier");
            v830 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v829, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Model: ", v830);

          }
          objc_msgSend(*p_isa, "printWithFormat:", CFSTR("%-*s"), 18, "  Loaded: ");
          if (v807)
          {
            *(_QWORD *)v1376 = 0;
            objc_msgSend(obje, "deltaSecondsTo:timeDomainPriorityList:timeDomainUsed:", v807, &unk_1E7167B78, v1376);
            if (!*(_QWORD *)v1376)
              v831 = NAN;
            saos_printf_seconds_sigfig(*p_isa, v831);
          }
          else
          {
            objc_msgSend(*p_isa, "printWithFormat:", CFSTR("???"));
          }
          objc_msgSend(*p_isa, "printWithFormat:", CFSTR(" - N/A"));
          if (objc_msgSend(v1229, "count"))
          {
            objc_msgSend(v1229, "allObjects");
            v832 = (void *)objc_claimAutoreleasedReturnValue();
            v833 = (void *)objc_msgSend(v832, "mutableCopy");

            objc_msgSend(v833, "sortUsingSelector:", sel_compare_);
            v834 = *p_isa;
            objc_msgSend(v833, "componentsJoinedByString:", CFSTR(", "));
            v835 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v834, "printWithFormat:", CFSTR(", requested by %@"), v835);

          }
          else
          {
            objc_msgSend(*p_isa, "printWithFormat:", CFSTR(", requested by UNKNOWN"));
          }
          objc_msgSend(*p_isa, "printWithFormat:", CFSTR("\n"));
          v809 = 1;
        }
        v1224 = v807;
LABEL_833:
        v1282 = 0u;
        v1281 = 0u;
        v1280 = 0u;
        v1279 = 0u;
        objc_msgSend(selfb, "executions");
        v836 = (void *)objc_claimAutoreleasedReturnValue();
        v837 = objc_msgSend(v836, "countByEnumeratingWithState:objects:count:", &v1279, v1349, 16);
        if (!v837)
          goto LABEL_868;
        v838 = *(_QWORD *)v1280;
        while (2)
        {
          v839 = 0;
          while (2)
          {
            if (*(_QWORD *)v1280 != v838)
              objc_enumerationMutation(v836);
            v840 = *(void **)(*((_QWORD *)&v1279 + 1) + 8 * v839);
            objc_msgSend(v840, "startTime");
            v841 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v840, "endTime");
            v842 = objc_claimAutoreleasedReturnValue();
            v843 = (void *)v842;
            if (v841)
            {
              if (objc_msgSend(v841, "isComparable:", v1242)
                && (objc_msgSend(v841, "gt:", v1242) & 1) != 0)
              {

                goto LABEL_868;
              }
              *(_QWORD *)v1376 = 0;
              objc_msgSend(obje, "deltaSecondsTo:timeDomainPriorityList:timeDomainUsed:", v841, &unk_1E7167B90, v1376);
              if (*(_QWORD *)v1376)
                v845 = v844;
              else
                v845 = NAN;
              if (v843)
              {
LABEL_845:
                *(_QWORD *)v1376 = 0;
                objc_msgSend(obje, "deltaSecondsTo:timeDomainPriorityList:timeDomainUsed:", v843, &unk_1E7167BA8, v1376);
                if (*(_QWORD *)v1376)
                  v847 = v846;
                else
                  v847 = NAN;
                v848 = 1;
                if (v847 < -10.0)
                  goto LABEL_864;
                goto LABEL_852;
              }
            }
            else
            {
              v845 = NAN;
              if (v842)
                goto LABEL_845;
            }
            v848 = 0;
            v847 = NAN;
LABEL_852:
            if (v845 >= -10.0)
            {
              if ((v809 & 1) == 0)
              {
                v849 = *p_isa;
                objc_msgSend(selfb, "identifier");
                v850 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v849, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Model: ", v850);

              }
              objc_msgSend(*p_isa, "printWithFormat:", CFSTR("%-*s"), 18, "  Executing: ");
              saos_printf_seconds_sigfig(*p_isa, v845);
              objc_msgSend(*p_isa, "printWithFormat:", CFSTR(" - "));
              v851 = *p_isa;
              if (v848)
                saos_printf_seconds_sigfig(v851, v847);
              else
                objc_msgSend(v851, "printWithFormat:", CFSTR("N/A"));
              v852 = *p_isa;
              objc_msgSend(v840, "requester");
              v853 = objc_claimAutoreleasedReturnValue();
              v854 = (void *)v853;
              if (v853)
                v855 = (const __CFString *)v853;
              else
                v855 = CFSTR("UNKNOWN");
              objc_msgSend(v840, "useCaseID");
              v856 = objc_claimAutoreleasedReturnValue();
              v857 = (void *)v856;
              v858 = CFSTR("UNKNOWN");
              if (v856)
                v858 = (const __CFString *)v856;
              objc_msgSend(v852, "printWithFormat:", CFSTR(", requested by %@ use case %@"), v855, v858);

              objc_msgSend(*p_isa, "printWithFormat:", CFSTR("\n"));
              v809 = 1;
            }
LABEL_864:

            if (v837 != ++v839)
              continue;
            break;
          }
          v837 = objc_msgSend(v836, "countByEnumeratingWithState:objects:count:", &v1279, v1349, 16);
          if (v837)
            continue;
          break;
        }
LABEL_868:

        ++v1219;
      }
      while (v1219 != v1214);
      v859 = objc_msgSend(v1205, "countByEnumeratingWithState:objects:count:", &v1283, v1350, 16);
      v1214 = v859;
      if (!v859)
      {
LABEL_872:

        break;
      }
    }
  }

  if (((v1203 | v1177 ^ 1) & 1) == 0)
    objc_msgSend(*p_isa, "printWithFormat:", CFSTR("\n"));
LABEL_875:
  v1275 = 0;
  v1276 = &v1275;
  v1277 = 0x2020000000;
  v1278 = 0;
  v860 = *p_isa;
  objc_msgSend(*v1212, "targetProcess");
  v861 = objc_claimAutoreleasedReturnValue();
  v862 = v1253;
  v863 = MEMORY[0x1E0C809B0];
  v864 = (void *)v861;
  if (v861)
  {
    v865 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    if (TaskHasSwallowedAnExceptionNotedByHIException(v864))
    {
      -[SASamplePrinter displayNameForTask:]((void *)v1253, v864);
      v866 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v865, "addObject:", v866);

      v862 = v1253;
    }
    v867 = objc_msgSend(v864, "pid");
    if (v867 >= 2)
    {
      v868 = *(void **)(v862 + 160);
      *(_QWORD *)v1376 = v863;
      *(_QWORD *)&v1376[8] = 3221225472;
      *(_QWORD *)&v1376[16] = __60__SASamplePrinter_printProcessesWithHIESwallowedExceptions___block_invoke;
      *(_QWORD *)&v1376[24] = &unk_1E7148EE8;
      *(_QWORD *)v1377 = v864;
      *(_DWORD *)&v1377[24] = v867;
      *(_QWORD *)&v1377[8] = v865;
      *(_QWORD *)&v1377[16] = v862;
      objc_msgSend(v868, "enumerateTasks:", v1376);

    }
    if (objc_msgSend(v865, "count"))
    {
      objc_msgSend(v865, "componentsJoinedByString:", CFSTR(", "));
      v869 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v860, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Target/responsible processes that have swallowed at least one exception: ", v869);

      *((_BYTE *)v1276 + 24) = 1;
    }
    else
    {

    }
  }
  else
  {

  }
  v1206 = *(id *)(v1253 + 8);
  v1243 = -[SASamplePrinter hasTimeIndexes](v1253);
  v1201 = objc_msgSend(*v1212, "dataStyle") != 1 && objc_msgSend(*v1212, "dataStyle") != 0;
  objf = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v1347 = 0u;
  v1346 = 0u;
  v1345 = 0u;
  v1344 = 0u;
  objc_msgSend(*v1212, "tasksByPid");
  v870 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v870, "objectForKeyedSubscript:", &unk_1E7167810);
  v1210 = (id)objc_claimAutoreleasedReturnValue();

  v1220 = objc_msgSend(v1210, "countByEnumeratingWithState:objects:count:", &v1344, v1376, 16);
  if (v1220)
  {
    v1215 = *(_QWORD *)v1345;
    do
    {
      for (kk = 0; kk != (id)v1220; kk = (char *)kk + 1)
      {
        if (*(_QWORD *)v1345 != v1215)
          objc_enumerationMutation(v1210);
        v871 = *(void **)(*((_QWORD *)&v1344 + 1) + 8 * (_QWORD)kk);
        v1340 = 0u;
        v1341 = 0u;
        v1342 = 0u;
        v1343 = 0u;
        objc_msgSend(v871, "threads");
        v872 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v872, "allKeys");
        v873 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v873, "sortedArrayUsingSelector:", sel_compare_);
        selfc = (id)objc_claimAutoreleasedReturnValue();

        v874 = objc_msgSend(selfc, "countByEnumeratingWithState:objects:count:", &v1340, &v1372, 16);
        if (v874)
        {
          v875 = *(_QWORD *)v1341;
          do
          {
            for (mm = 0; mm != v874; ++mm)
            {
              if (*(_QWORD *)v1341 != v875)
                objc_enumerationMutation(selfc);
              v877 = *(_QWORD *)(*((_QWORD *)&v1340 + 1) + 8 * mm);
              objc_msgSend(v871, "threads");
              v878 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v878, "objectForKeyedSubscript:", v877);
              v879 = (void *)objc_claimAutoreleasedReturnValue();

              v1338[0] = 0;
              v1338[1] = v1338;
              v1338[2] = 0x3032000000;
              v1338[3] = __Block_byref_object_copy__4;
              v1338[4] = __Block_byref_object_dispose__4;
              v1339 = 0;
              v1336[0] = 0;
              v1336[1] = v1336;
              v1336[2] = 0x3032000000;
              v1336[3] = __Block_byref_object_copy__4;
              v1336[4] = __Block_byref_object_dispose__4;
              v1337 = 0;
              v880 = *(_QWORD *)(v1253 + 32);
              v881 = *(_QWORD *)(v1253 + 40);
              v883 = *(_QWORD *)(v1253 + 48);
              v882 = *(_QWORD *)(v1253 + 56);
              *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
              *((_QWORD *)&buf + 1) = 3221225472;
              v1365 = (uint64_t)__58__SASamplePrinter_printLaunchdThrottledProcessesToStream___block_invoke;
              v1366 = &unk_1E7148F10;
              v1371 = v1243;
              v1367 = v1253;
              v1369 = v1338;
              v1370 = v1336;
              v1368 = objf;
              objc_msgSend(v879, "enumerateThreadStatesBetweenStartTime:startSampleIndex:endTime:endSampleIndex:reverseOrder:block:", v880, v883, v881, v882, 0, &buf);

              _Block_object_dispose(v1336, 8);
              _Block_object_dispose(v1338, 8);

            }
            v874 = objc_msgSend(selfc, "countByEnumeratingWithState:objects:count:", &v1340, &v1372, 16);
          }
          while (v874);
        }

      }
      v1220 = objc_msgSend(v1210, "countByEnumeratingWithState:objects:count:", &v1344, v1376, 16);
    }
    while (v1220);
  }

  v884 = objc_msgSend(objf, "count");
  v885 = MEMORY[0x1E0C809B0];
  if (v884)
  {
    objc_msgSend(v1206, "printWithFormat:", CFSTR("Launchd throttled processes:\n"));
    v1332[0] = v885;
    v1332[1] = 3221225472;
    v1332[2] = __58__SASamplePrinter_printLaunchdThrottledProcessesToStream___block_invoke_2;
    v1332[3] = &unk_1E7148F38;
    v1334 = v1201;
    v1335 = v1243;
    v1332[4] = v1253;
    v886 = v1206;
    v1333 = v886;
    objc_msgSend(objf, "enumerateKeysAndObjectsUsingBlock:", v1332);

    *((_BYTE *)v1276 + 24) = 1;
  }
  else
  {

  }
  v887 = *(id *)(v1253 + 8);
  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &buf;
  v1365 = 0x2020000000;
  LOBYTE(v1366) = 0;
  v888 = *(void **)(v1253 + 160);
  v889 = MEMORY[0x1E0C809B0];
  *(_QWORD *)v1376 = MEMORY[0x1E0C809B0];
  *(_QWORD *)&v1376[8] = 3221225472;
  *(_QWORD *)&v1376[16] = __63__SASamplePrinter_printProcessesHittingWQThreadLimitsToStream___block_invoke;
  *(_QWORD *)&v1376[24] = &unk_1E7148F60;
  *(_QWORD *)&v1377[16] = &buf;
  v890 = v887;
  *(_QWORD *)v1377 = v890;
  *(_QWORD *)&v1377[8] = v1253;
  objc_msgSend(v888, "enumerateTasks:", v1376);
  if (*(_BYTE *)(*((_QWORD *)&buf + 1) + 24))
    objc_msgSend(v890, "appendString:", CFSTR("\n"));
  *(_QWORD *)&v1344 = 0;
  *((_QWORD *)&v1344 + 1) = &v1344;
  *(_QWORD *)&v1345 = 0x2020000000;
  BYTE8(v1345) = 0;
  v891 = *(void **)(v1253 + 160);
  *(_QWORD *)&v1372 = v889;
  *((_QWORD *)&v1372 + 1) = 3221225472;
  *(_QWORD *)&v1373 = __63__SASamplePrinter_printProcessesHittingWQThreadLimitsToStream___block_invoke_2;
  *((_QWORD *)&v1373 + 1) = &unk_1E7148F60;
  *(_QWORD *)&v1375 = &v1344;
  v892 = v890;
  *(_QWORD *)&v1374 = v892;
  *((_QWORD *)&v1374 + 1) = v1253;
  objc_msgSend(v891, "enumerateTasks:", &v1372);
  v893 = *(_BYTE *)(*((_QWORD *)&v1344 + 1) + 24)
      && (objc_msgSend(v892, "appendString:", CFSTR("\n")), *(_BYTE *)(*((_QWORD *)&v1344 + 1) + 24))
      || *(_BYTE *)(*((_QWORD *)&buf + 1) + 24) != 0;

  _Block_object_dispose(&v1344, 8);
  _Block_object_dispose(&buf, 8);

  if (v893)
    *((_BYTE *)v1276 + 24) = 1;
  v894 = v1212;
  v895 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  v896 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  v897 = *(void **)(v1253 + 144);
  v1271[0] = v889;
  v1271[1] = 3221225472;
  v1271[2] = __30__SASamplePrinter_printHeader__block_invoke_4;
  v1271[3] = &unk_1E7148FD8;
  v1271[4] = v1253;
  v1225 = v896;
  v1272 = v1225;
  v1216 = v895;
  v1273 = v1216;
  v1274 = &v1275;
  objc_msgSend(v897, "enumerateKeysAndObjectsUsingBlock:", v1271);
  if (objc_msgSend(v1225, "count"))
  {
    v898 = *p_isa;
    v899 = objc_msgSend(v1225, "count");
    if (objc_msgSend(v1225, "count") == 1)
      v900 = "";
    else
      v900 = "s";
    objc_msgSend(v1225, "allObjects");
    v901 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v901, "sortedArrayUsingSelector:", sel_compare_);
    v902 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v902, "componentsJoinedByString:", CFSTR(", "));
    v903 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v898, "printWithFormat:", CFSTR("%-*s%lu task%s - %@\n"), 18, "Blocked by Deadlock: ", v899, v900, v903);

    v894 = v1212;
  }
  if ((v1203 & 1) == 0 && *((_BYTE *)v1276 + 24))
    objc_msgSend(*p_isa, "printWithFormat:", CFSTR("\n"));
  if (objc_msgSend(*v894, "appleInternalIsKnown"))
  {
    if (v1203)
    {
      v904 = *p_isa;
      if (objc_msgSend(*v894, "isAppleInternal"))
        v905 = (void *)MEMORY[0x1E0C9AAB0];
      else
        v905 = (void *)MEMORY[0x1E0C9AAA0];
      SAJSONWriteDictionaryEntry(v904, CFSTR("isAppleInternal"), v905);
    }
    else if (objc_msgSend(*v894, "isAppleInternal"))
    {
      v906 = *p_isa;
      if (objc_msgSend(*v894, "isAppleInternal"))
        v907 = "Yes";
      else
        v907 = "No";
      objc_msgSend(v906, "printWithFormat:", CFSTR("%-*s%s\n"), 18, "Apple Internal: ", v907);
    }
    if (objc_msgSend(*v894, "isAppleInternal")
      && objc_msgSend(*v894, "hasInternalCarryDeviceDistinction"))
    {
      v908 = *p_isa;
      v909 = *v894;
      if (v1203)
      {
        if (objc_msgSend(v909, "isInternalCarryDevice"))
          v910 = (void *)MEMORY[0x1E0C9AAB0];
        else
          v910 = (void *)MEMORY[0x1E0C9AAA0];
        SAJSONWriteDictionaryEntry(v908, CFSTR("isInternalCarryDevice"), v910);
      }
      else
      {
        if (objc_msgSend(v909, "isInternalCarryDevice"))
          v911 = "Yes";
        else
          v911 = "No";
        objc_msgSend(v908, "printWithFormat:", CFSTR("%-*s%s\n"), 18, "Internal Carry Device: ", v911);
      }
    }
  }
  objc_msgSend(*v894, "automatedDeviceGroup");
  v912 = (void *)objc_claimAutoreleasedReturnValue();

  if (v912)
  {
    v913 = *p_isa;
    objc_msgSend(*v1212, "automatedDeviceGroup");
    v914 = (void *)objc_claimAutoreleasedReturnValue();
    if (v1203)
    {
      SAJSONWriteDictionaryEntry(v913, CFSTR("automatedDeviceGroup"), v914);
    }
    else
    {
      SACopySanitizedString(v914, 1, 0xFFuLL);
      v915 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v913, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Automated Device Group: ", v915);

    }
  }
  objc_msgSend(*v1212, "nonDefaultFeatureFlags");
  v916 = (void *)objc_claimAutoreleasedReturnValue();

  if (v916)
  {
    v917 = MEMORY[0x1E0C809B0];
    if (v1203)
    {
      objc_msgSend(*v1212, "nonDefaultFeatureFlags");
      v918 = (void *)objc_claimAutoreleasedReturnValue();
      v1270[0] = v917;
      v1270[1] = 3221225472;
      v1270[2] = __30__SASamplePrinter_printHeader__block_invoke_5;
      v1270[3] = &unk_1E7148FB0;
      v1270[4] = v1253;
      objc_msgSend(v918, "enumerateKeysAndObjectsUsingBlock:", v1270);

    }
    else
    {
      v919 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
      v920 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
      objc_msgSend(*v1212, "nonDefaultFeatureFlags");
      v921 = (void *)objc_claimAutoreleasedReturnValue();
      v1267[0] = v917;
      v1267[1] = 3221225472;
      v1267[2] = __30__SASamplePrinter_printHeader__block_invoke_6;
      v1267[3] = &unk_1E7149000;
      v922 = v919;
      v1268 = v922;
      v923 = v920;
      v1269 = v923;
      objc_msgSend(v921, "enumerateKeysAndObjectsUsingBlock:", v1267);

      if (objc_msgSend(v922, "length"))
      {
        if (objc_msgSend(v922, "hasSuffix:", CFSTR(", ")))
        {
          v924 = objc_msgSend(CFSTR(", "), "length");
          objc_msgSend(v922, "replaceCharactersInRange:withString:", objc_msgSend(v922, "length") - v924, v924, &stru_1E714A250);
        }
        objc_msgSend(*p_isa, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Enabled Features: ", v922);
      }
      if (objc_msgSend(v923, "length"))
      {
        if (objc_msgSend(v923, "hasSuffix:", CFSTR(", ")))
        {
          v925 = objc_msgSend(CFSTR(", "), "length");
          objc_msgSend(v923, "replaceCharactersInRange:withString:", objc_msgSend(v923, "length") - v925, v925, &stru_1E714A250);
        }
        objc_msgSend(*p_isa, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Disabled Features: ", v923);
      }

    }
  }
  objc_msgSend(*v1212, "preferredLanguages");
  v926 = (void *)objc_claimAutoreleasedReturnValue();

  if (v926)
  {
    if (v1203)
    {
      v927 = *p_isa;
      objc_msgSend(*v1212, "preferredLanguages");
      v928 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v927, CFSTR("preferredLanguages"), v928);
    }
    else
    {
      objc_msgSend(*v1212, "preferredLanguages");
      v929 = (void *)objc_claimAutoreleasedReturnValue();
      v928 = v929;
      if (v929)
      {
        objc_msgSend(v929, "componentsJoinedByString:", CFSTR(", "));
        v930 = (void *)objc_claimAutoreleasedReturnValue();
        SACopySanitizedString(v930, 1, 0);
        v931 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(*p_isa, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Preferred User Language: ", v931);
      }
      else
      {
        v932 = *__error();
        _sa_logt();
        v933 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v933, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)v1376 = 0;
          _os_log_debug_impl(&dword_1B9BE0000, v933, OS_LOG_TYPE_DEBUG, "preferredLang nil!", v1376, 2u);
        }

        v928 = 0;
        *__error() = v932;
      }
    }

  }
  objc_msgSend(*v1212, "countryCode");
  v934 = (void *)objc_claimAutoreleasedReturnValue();

  if (v934)
  {
    if (v1203)
    {
      v935 = *p_isa;
      objc_msgSend(*v1212, "countryCode");
      v936 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v935, CFSTR("countryCode"), v936);
    }
    else
    {
      objc_msgSend(*v1212, "countryCode");
      v937 = (void *)objc_claimAutoreleasedReturnValue();
      v938 = v937;
      if (v937)
      {
        objc_msgSend(v937, "stringByReplacingOccurrencesOfString:withString:", CFSTR(" "), &stru_1E714A250);
        v939 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v939, "stringByReplacingOccurrencesOfString:withString:", CFSTR("\t"), &stru_1E714A250);
        v940 = (void *)objc_claimAutoreleasedReturnValue();

        SACopySanitizedString(v940, 1, 0);
        v936 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(*p_isa, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Country Code: ", v936);
      }
      else
      {
        v941 = *__error();
        _sa_logt();
        v942 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v942, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)v1376 = 0;
          _os_log_debug_impl(&dword_1B9BE0000, v942, OS_LOG_TYPE_DEBUG, "countryCode nil!", v1376, 2u);
        }

        v936 = 0;
        *__error() = v941;
      }
    }

  }
  objc_msgSend(*v1212, "keyboardLanguages");
  v943 = (void *)objc_claimAutoreleasedReturnValue();
  v944 = objc_msgSend(v943, "count") == 0;

  if (!v944)
  {
    if (v1203)
    {
      v945 = *p_isa;
      objc_msgSend(*v1212, "keyboardLanguages");
      v946 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v945, CFSTR("keyboardLanguages"), v946);
    }
    else
    {
      objc_msgSend(*v1212, "keyboardLanguages");
      v947 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v947, "componentsJoinedByString:", CFSTR(", "));
      v948 = (void *)objc_claimAutoreleasedReturnValue();

      if (v948)
      {
        SACopySanitizedString(v948, 1, 0);
        v946 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(*p_isa, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Keyboards: ", v946);
      }
      else
      {
        v949 = *__error();
        _sa_logt();
        v950 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v950, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)v1376 = 0;
          _os_log_debug_impl(&dword_1B9BE0000, v950, OS_LOG_TYPE_DEBUG, "keyboardLang nil!", v1376, 2u);
        }

        v946 = 0;
        *__error() = v949;
      }
    }

  }
  v951 = v1212;
  v952 = objc_msgSend(*v1212, "hasHardwareKeyboardInfo");
  v953 = v1253;
  v954 = MEMORY[0x1E0C809B0];
  if (v952)
  {
    if (v1203)
    {
      v955 = *p_isa;
      if (objc_msgSend(*v1212, "hardwareKeyboard"))
        v956 = (void *)MEMORY[0x1E0C9AAB0];
      else
        v956 = (void *)MEMORY[0x1E0C9AAA0];
      SAJSONWriteDictionaryEntry(v955, CFSTR("hardwareKeyboard"), v956);
    }
    else if (objc_msgSend(*v1212, "hardwareKeyboard"))
    {
      v957 = *p_isa;
      if (objc_msgSend(*v1212, "hardwareKeyboard"))
        v958 = "Yes";
      else
        v958 = "No";
      objc_msgSend(v957, "printWithFormat:", CFSTR("%-*s%s\n"), 18, "HW Keyboard: ", v958);
    }
  }
  if (objc_msgSend(*v1212, "isRootInstalled"))
  {
    if (v1203)
    {
      SAJSONWriteDictionaryEntry(*p_isa, CFSTR("isRootInstalled"), MEMORY[0x1E0C9AAB0]);
      objc_msgSend(*v1212, "installedRootNames");
      v959 = (void *)objc_claimAutoreleasedReturnValue();
      v960 = objc_msgSend(v959, "count") == 0;

      v953 = v1253;
      v951 = v1212;
      if (v960)
        goto LABEL_1009;
      v961 = *p_isa;
      objc_msgSend(*v1212, "installedRootNames");
      v962 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v961, CFSTR("installedRootNames"), v962);
    }
    else
    {
      objc_msgSend(*v1212, "installedRootNames");
      v963 = (void *)objc_claimAutoreleasedReturnValue();
      v964 = objc_msgSend(v963, "count") == 0;

      if (v964
        || (objc_msgSend(*v1212, "installedRootNames"),
            v965 = (void *)objc_claimAutoreleasedReturnValue(),
            objc_msgSend(v965, "componentsJoinedByString:", CFSTR(", ")),
            v966 = (void *)objc_claimAutoreleasedReturnValue(),
            v965,
            !v966))
      {
        v962 = 0;
      }
      else
      {
        SACopySanitizedString(v966, 1, 0);
        v962 = (void *)objc_claimAutoreleasedReturnValue();

      }
      v967 = objc_msgSend(v962, "length");
      v968 = *p_isa;
      if (v967)
        objc_msgSend(v968, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Installed Roots: ", v962);
      else
        objc_msgSend(v968, "printWithFormat:", CFSTR("%-*sYes\n"), 18, "Installed Roots: ");
    }

    v953 = v1253;
    v951 = v1212;
  }
LABEL_1009:
  if (objc_msgSend(*v951, "numOSCryptexFileExtents"))
  {
    v969 = *p_isa;
    if (v1203)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(*v951, "numOSCryptexFileExtents"));
      v970 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v969, CFSTR("numOSCryptexFileExtents"), v970);

      v953 = v1253;
      v951 = v1212;
    }
    else
    {
      objc_msgSend(v969, "printWithFormat:", CFSTR("%-*s%d\n"), 18, "OS Cryptex File Extents: ", objc_msgSend(*v951, "numOSCryptexFileExtents"));
    }
  }
  if (objc_msgSend(*v951, "gpuRestartCount"))
  {
    v971 = *p_isa;
    if (v1203)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(*v951, "gpuRestartCount"));
      v972 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v971, CFSTR("gpuRestartCount"), v972);

      v953 = v1253;
      v951 = v1212;
    }
    else
    {
      objc_msgSend(v971, "printWithFormat:", CFSTR("%-*s%llu\n"), 18, "GPU Restart Count: ", objc_msgSend(*v951, "gpuRestartCount"));
    }
    if (objc_msgSend(*v951, "gpuRestartLastMachAbs"))
    {
      if (v1203)
      {
        v973 = *p_isa;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(*v951, "gpuRestartLastMachAbs"));
        v974 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v973, CFSTR("gpuRestartLastMachAbs"), v974);

        v953 = v1253;
        v951 = v1212;
      }
      else if (objc_msgSend(*v951, "machTimebase")
             && (unint64_t)objc_msgSend(*v951, "machTimebase") >> 32
             && objc_msgSend(*(id *)(v953 + 32), "machAbsTime"))
      {
        v975 = objc_msgSend(*v951, "gpuRestartLastMachAbs");
        if (v975 >= objc_msgSend(*(id *)(v953 + 32), "machAbsTime"))
        {
          v984 = objc_msgSend(*v951, "gpuRestartLastMachAbs");
          v985 = objc_msgSend(*(id *)(v953 + 32), "machAbsTime");
          v986 = objc_msgSend(*v951, "machTimebase");
          v987 = 0;
          if ((_DWORD)v986)
          {
            if (HIDWORD(v986))
            {
              v987 = v984 - v985;
              if ((_DWORD)v986 != HIDWORD(v986))
                v987 = __udivti3();
            }
          }
          v980 = (double)(unint64_t)v987 / -1000000000.0 + 0.0;
        }
        else
        {
          v976 = objc_msgSend(*(id *)(v953 + 32), "machAbsTime");
          v977 = objc_msgSend(*v951, "gpuRestartLastMachAbs");
          v978 = objc_msgSend(*v951, "machTimebase");
          v979 = 0;
          if ((_DWORD)v978)
          {
            if (HIDWORD(v978))
            {
              v979 = v976 - v977;
              if ((_DWORD)v978 != HIDWORD(v978))
                v979 = __udivti3();
            }
          }
          v980 = (double)(unint64_t)v979 / 1000000000.0;
        }
        objc_msgSend(*p_isa, "printWithFormat:", CFSTR("%-*s%.0fs\n"), 18, "Time Since GPU Restart: ", *(_QWORD *)&v980);
      }
    }
  }
  if (objc_msgSend(*v951, "hasEnterprisePersona"))
  {
    v988 = *p_isa;
    if (v1203)
    {
      SAJSONWriteDictionaryEntry(v988, CFSTR("hasEnterprisePersona"), MEMORY[0x1E0C9AAB0]);
      goto LABEL_1057;
    }
    objc_msgSend(v988, "printWithFormat:", CFSTR("%-*sYes\n"), 18, "Has Enterprise Persona: ");
  }
  else if ((v1203 & 1) != 0)
  {
    goto LABEL_1057;
  }
  if (objc_msgSend(*v951, "sanitizePaths"))
    v989 = os_variant_has_internal_diagnostics() ^ 1;
  else
    v989 = 0;
  *(_QWORD *)v1376 = 0;
  *(_QWORD *)&v1376[8] = v1376;
  *(_QWORD *)&v1376[16] = 0x2020000000;
  v1376[24] = 0;
  objc_msgSend(*v951, "mountStatusTracker");
  v990 = (void *)objc_claimAutoreleasedReturnValue();
  v991 = *(void **)(v953 + 32);
  v992 = *(void **)(v953 + 40);
  v1265[0] = v954;
  v1265[1] = 3221225472;
  v1265[2] = __30__SASamplePrinter_printHeader__block_invoke_867;
  v1265[3] = &unk_1E7149068;
  v1266 = v989;
  v1265[4] = v953;
  v1265[5] = v1376;
  -[SAMountStatusTracker enumerateUnresponsiveMountsBetweenStartTime:endTime:block:]((uint64_t)v990, v991, v992, v1265);

  v953 = v1253;
  if (*(_BYTE *)(*(_QWORD *)&v1376[8] + 24))
    objc_msgSend(*p_isa, "appendString:", CFSTR("\n"));
  _Block_object_dispose(v1376, 8);
  v993 = v1203;
  if (!*(_QWORD *)(v1253 + 168))
    v993 = 1;
  v951 = v1212;
  if ((v993 & 1) == 0)
    objc_msgSend(*p_isa, "printWithFormat:", CFSTR("\n%@\n\n"), *(_QWORD *)(v1253 + 168));
LABEL_1057:
  if (objc_msgSend(*(id *)(v953 + 16), "printSpinSignatureStack"))
  {
    v994 = *(void **)(v953 + 128);
    if (v994)
      goto LABEL_1059;
    if ((objc_msgSend(*v951, "targetProcessId") & 0x80000000) == 0)
    {
      v994 = *(void **)(v953 + 128);
      if (!v994)
      {
        objc_msgSend(*v951, "targetProcess");
        v995 = (id)objc_claimAutoreleasedReturnValue();

        v953 = v1253;
        v951 = v1212;
        if (!v995)
          goto LABEL_1124;
LABEL_1060:
        if (*(_QWORD *)(v953 + 128))
        {
          v996 = *(id *)(v953 + 136);
          v997 = v996;
          if (!v996)
          {
            v999 = 0;
LABEL_1123:

            v953 = v1253;
            v951 = v1212;
            goto LABEL_1124;
          }
          v998 = objc_msgSend(v996, "isMainThread");
          goto LABEL_1063;
        }
        if (objc_msgSend(*v951, "targetThreadId"))
        {
          objc_msgSend(v995, "threads");
          v1001 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(*v951, "targetThreadId"));
          v1002 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v1001, "objectForKeyedSubscript:", v1002);
          v997 = (void *)objc_claimAutoreleasedReturnValue();

          if (v997)
          {
            v953 = v1253;
            v951 = v1212;
            v998 = objc_msgSend(v997, "isMainThread");
            v1000 = 1;
          }
          else
          {
            v1003 = *__error();
            _sa_logt();
            v1004 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v1004, OS_LOG_TYPE_DEFAULT))
            {
              v1005 = objc_msgSend(*v1212, "targetThreadId");
              *(_DWORD *)v1376 = 134217984;
              *(_QWORD *)&v1376[4] = v1005;
              _os_log_impl(&dword_1B9BE0000, v1004, OS_LOG_TYPE_DEFAULT, "WARNING: Target thread 0x%llx not found", v1376, 0xCu);
            }

            v951 = v1212;
            v1000 = 0;
            v998 = 0;
            v997 = 0;
            *__error() = v1003;
            v953 = v1253;
          }
        }
        else
        {
          v1000 = 0;
          v998 = 0;
          v997 = 0;
        }
        if (objc_msgSend(*v951, "targetDispatchQueueId"))
        {
          objc_msgSend(v995, "dispatchQueues");
          v1006 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(*v951, "targetDispatchQueueId"));
          v1007 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v1006, "objectForKeyedSubscript:", v1007);
          v999 = (void *)objc_claimAutoreleasedReturnValue();

          if (v999)
          {
            v1000 = 1;
            v953 = v1253;
            goto LABEL_1084;
          }
          v1008 = *__error();
          _sa_logt();
          v1009 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v1009, OS_LOG_TYPE_DEFAULT))
          {
            v1010 = objc_msgSend(*v1212, "targetDispatchQueueId");
            *(_DWORD *)v1376 = 134217984;
            *(_QWORD *)&v1376[4] = v1010;
            _os_log_impl(&dword_1B9BE0000, v1009, OS_LOG_TYPE_DEFAULT, "WARNING: Target dispatch queue %llu not found", v1376, 0xCu);
          }

          v953 = v1253;
          v951 = v1212;
          *__error() = v1008;
        }
        if (!v997)
        {
          v1022 = *(_QWORD *)(v953 + 16);
          if (v1022)
          {
            v1023 = *(_QWORD *)(v1022 + 152);
            if (v1023 == 3 || !v1023 && *(_BYTE *)(v1022 + 11))
            {
              v997 = 0;
LABEL_1063:
              v999 = 0;
              v1000 = 1;
              goto LABEL_1084;
            }
          }
          if (!objc_msgSend(*v951, "targetThreadId"))
          {
            objc_msgSend(v995, "mainThread");
            v997 = (void *)objc_claimAutoreleasedReturnValue();
            if (v997)
            {
              v999 = 0;
              v1000 = 1;
              v998 = 1;
            }
            else
            {
              v1148 = *__error();
              _sa_logt();
              v1149 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v1149, OS_LOG_TYPE_DEFAULT))
              {
                -[SASamplePrinter displayNameForTask:]((void *)v1253, v995);
                v1150 = (id)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)v1376 = 138412290;
                *(_QWORD *)&v1376[4] = v1150;
                _os_log_impl(&dword_1B9BE0000, v1149, OS_LOG_TYPE_DEFAULT, "WARNING: Signature stack requested, but target process %@ doesn't have a main thread", v1376, 0xCu);

              }
              v953 = v1253;
              v997 = 0;
              v999 = 0;
              *__error() = v1148;
            }
LABEL_1084:
            if (((v1203 | v1000 ^ 1) & 1) == 0)
            {
              objc_msgSend(*p_isa, "appendString:", CFSTR("\n"));
              v1011 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
              v1012 = *p_isa;
              if (v999)
              {
                if (v997)
                {
                  -[SASamplePrinter displayNameForDispatchQueue:](v999);
                  v1013 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v1012, "printWithFormat:", CFSTR("Heaviest stack for dispatch queue %@ thread 0x%llx:\n"), v1013, objc_msgSend(v997, "threadId"));

                  v1014 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                  *(_QWORD *)v1376 = 0;
                  *(_QWORD *)&v1376[8] = v1376;
                  *(_QWORD *)&v1376[16] = 0x2020000000;
                  v1376[24] = 1;
                  v1015 = *(_QWORD *)(v1253 + 32);
                  v1016 = *(_QWORD *)(v1253 + 40);
                  v1017 = *(_QWORD *)(v1253 + 48);
                  v1018 = *(_QWORD *)(v1253 + 56);
                  v1261[0] = MEMORY[0x1E0C809B0];
                  v1261[1] = 3221225472;
                  v1261[2] = __30__SASamplePrinter_printHeader__block_invoke_889;
                  v1261[3] = &unk_1E7149090;
                  v1262 = v999;
                  v1019 = v1014;
                  v1263 = v1019;
                  v1264 = v1376;
                  objc_msgSend(v997, "enumerateThreadStatesBetweenStartTime:startSampleIndex:endTime:endSampleIndex:reverseOrder:block:", v1015, v1017, v1016, v1018, 0, v1261);
                  if (objc_msgSend(v1019, "count"))
                  {
                    if (*(_BYTE *)(*(_QWORD *)&v1376[8] + 24))
                      v1020 = 0;
                    else
                      v1020 = v1019;
                    -[SASamplePrinter addStackForDispatchQueue:orSwiftTaskStates:orThread:andThreadStateIndexes:task:toRootObjects:nameChanges:dispatchQueueChanges:swiftTaskChanges:threadChanges:priorityChanges:microstackshotSummary:onlyHeaviestStack:includeState:](v1253, 0, 0, v997, v1020, v995, v1011, 0, 0, 0, 0, 0, 0, 1u, 0);
                  }

                  _Block_object_dispose(v1376, 8);
                }
                else
                {
                  -[SASamplePrinter displayNameForDispatchQueue:](v999);
                  v1021 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v1012, "printWithFormat:", CFSTR("Heaviest stack for dispatch queue %@:\n"), v1021);

                  -[SASamplePrinter addStackForDispatchQueue:orSwiftTaskStates:orThread:andThreadStateIndexes:task:toRootObjects:nameChanges:dispatchQueueChanges:swiftTaskChanges:threadChanges:priorityChanges:microstackshotSummary:onlyHeaviestStack:includeState:](v1253, v999, 0, 0, 0, v995, v1011, 0, 0, 0, 0, 0, 0, 1u, 0);
                }
              }
              else if (v997)
              {
                if (v998)
                  objc_msgSend(*p_isa, "appendString:", CFSTR("Heaviest stack for the main thread of the target process:\n"));
                else
                  objc_msgSend(v1012, "printWithFormat:", CFSTR("Heaviest stack for thread 0x%llx:\n"), objc_msgSend(v997, "threadId"));
                -[SASamplePrinter addStackForDispatchQueue:orSwiftTaskStates:orThread:andThreadStateIndexes:task:toRootObjects:nameChanges:dispatchQueueChanges:swiftTaskChanges:threadChanges:priorityChanges:microstackshotSummary:onlyHeaviestStack:includeState:](v953, 0, 0, v997, 0, v995, v1011, 0, 0, 0, 0, 0, 0, 1u, 0);
              }
              else
              {
                objc_msgSend(*p_isa, "appendString:", CFSTR("Heaviest stack for the target process:\n"));
                objc_msgSend(v995, "threads");
                v1024 = (void *)objc_claimAutoreleasedReturnValue();
                v1258[0] = v954;
                v1258[1] = 3221225472;
                v1258[2] = __30__SASamplePrinter_printHeader__block_invoke_2_898;
                v1258[3] = &unk_1E7149BD0;
                v1258[4] = v953;
                v1259 = v995;
                v1260 = v1011;
                objc_msgSend(v1024, "enumerateKeysAndObjectsUsingBlock:", v1258);

              }
              if (objc_msgSend(v1011, "count"))
              {
                v1256 = 0u;
                v1257 = 0u;
                v1254 = 0u;
                v1255 = 0u;
                v1025 = v1011;
                v1026 = (id)objc_msgSend(v1025, "countByEnumeratingWithState:objects:count:", &v1254, v1348, 16);
                if (v1026)
                {
                  v1027 = *(_QWORD *)v1255;
                  while (2)
                  {
                    for (nn = 0; nn != v1026; nn = (char *)nn + 1)
                    {
                      if (*(_QWORD *)v1255 != v1027)
                        objc_enumerationMutation(v1025);
                      v1029 = *(void **)(*((_QWORD *)&v1254 + 1) + 8 * (_QWORD)nn);
                      objc_opt_class();
                      if ((objc_opt_isKindOfClass() & 1) != 0)
                      {
                        v1026 = v1029;
                        goto LABEL_1116;
                      }
                    }
                    v1026 = (id)objc_msgSend(v1025, "countByEnumeratingWithState:objects:count:", &v1254, v1348, 16);
                    if (v1026)
                      continue;
                    break;
                  }
                }
LABEL_1116:

                v1030 = *p_isa;
                v1031 = objc_msgSend(v1026, "sampleCount");
                -[SASamplePrinter binaryImagesHitByTask:](v1253, v995);
                v1032 = (void *)objc_claimAutoreleasedReturnValue();
                -[SASamplePrinter addStack:toStream:sampleCount:binariesToDisplay:primaryState:primaryMicrostackshotState:onlyHeaviestStack:](v1253, v1025, v1030, v1031, v1032, 0, 0, 1);

                v1033 = v1253;
              }
              else
              {
                v1034 = *__error();
                _sa_logt();
                v1035 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v1035, OS_LOG_TYPE_ERROR))
                {
                  -[SASamplePrinter displayNameForTask:]((void *)v1253, v995);
                  v1145 = (id)objc_claimAutoreleasedReturnValue();
                  -[SASamplePrinter displayNameForDispatchQueue:](v999);
                  v1146 = (id)objc_claimAutoreleasedReturnValue();
                  v1147 = objc_msgSend(v997, "threadId");
                  *(_DWORD *)v1376 = 138412802;
                  *(_QWORD *)&v1376[4] = v1145;
                  *(_WORD *)&v1376[12] = 2112;
                  *(_QWORD *)&v1376[14] = v1146;
                  *(_WORD *)&v1376[22] = 2048;
                  *(_QWORD *)&v1376[24] = v1147;
                  _os_log_error_impl(&dword_1B9BE0000, v1035, OS_LOG_TYPE_ERROR, "No heaviest callstack for %@, dispatch queue %@, thread 0x%llx", v1376, 0x20u);

                }
                v1033 = v1253;
                *__error() = v1034;
              }
              if ((objc_msgSend(*(id *)(v1033 + 16), "displayBody") & 1) == 0)
              {
                -[SASamplePrinter printBinaryImagesForTask:](v1033, v995);
                *(_BYTE *)(v1033 + 105) = 1;
              }

            }
            goto LABEL_1123;
          }
          v997 = 0;
        }
        v999 = 0;
        goto LABEL_1084;
      }
LABEL_1059:
      v995 = v994;
      goto LABEL_1060;
    }
  }
LABEL_1124:
  if ((objc_msgSend(*(id *)(v953 + 16), "hidEventDisplayOptions") & 3) == 0)
    goto LABEL_1128;
  if ((objc_msgSend(*(id *)(v953 + 16), "hidEventDisplayOptions") & 2) != 0)
  {
    v1221 = -1;
    goto LABEL_1130;
  }
  objc_msgSend(*v951, "targetProcess");
  v1036 = (void *)objc_claimAutoreleasedReturnValue();
  v1037 = v1036;
  if (!v1036)
  {
LABEL_1128:
    v1038 = 0;
    goto LABEL_1234;
  }
  v1221 = objc_msgSend(v1036, "pid");

  v951 = v1212;
LABEL_1130:
  objc_msgSend(*v951, "hidEvents");
  v1039 = (void *)objc_claimAutoreleasedReturnValue();
  objg = (id)objc_msgSend(v1039, "mutableCopy");

  v1041 = *v1212;
  if (*v1212)
    v1041 = objc_getProperty(v1041, v1040, 64, 1);
  v1042 = v1041;
  objc_msgSend(objg, "addObjectsFromArray:", v1042);

  objc_msgSend(objg, "sortUsingComparator:", &__block_literal_global_1801);
  if (!objc_msgSend(objg, "count"))
  {
    v1231 = 0;
    goto LABEL_1233;
  }
  v1043 = 0;
  v1231 = 0;
  for (i1 = 0; i1 < objc_msgSend(objg, "count"); ++i1)
  {
    objc_msgSend(objg, "objectAtIndexedSubscript:", i1);
    v1045 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    v1047 = v1045;
    v1049 = v1047;
    if ((isKindOfClass & 1) == 0)
    {
      if (v1047)
      {
        v1056 = objc_getProperty(v1047, v1048, 32, 1);
        v1057 = 0;
        v1055 = v1049;
      }
      else
      {
LABEL_1229:
        v1055 = 0;
        v1056 = 0;
        v1057 = 1;
      }
      v1058 = v1056;
      objc_msgSend(v1058, "startTime");
      v1052 = (void *)objc_claimAutoreleasedReturnValue();

      if ((v1057 & 1) != 0)
        v1060 = 0;
      else
        v1060 = objc_getProperty(v1055, v1059, 32, 1);
      v1061 = v1060;
      objc_msgSend(v1061, "endTime");
      v1053 = (void *)objc_claimAutoreleasedReturnValue();

      v1244 = 0;
      if ((v1057 & 1) != 0)
        v1054 = 0;
      else
        v1054 = v1055[4];
      goto LABEL_1144;
    }
    if (!v1047)
      goto LABEL_1229;
    objc_msgSend(v1047, "steps");
    v1050 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1050, "lastObject");
    v1051 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v1051)
    {
      v1055 = v1049;
      v1244 = v1049;
      goto LABEL_1162;
    }
    objc_msgSend(v1049, "hidEventTimestamp");
    v1052 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1051, "timestamp");
    v1053 = (void *)objc_claimAutoreleasedReturnValue();
    v1054 = objc_msgSend(v1051, "pid");

    v1055 = 0;
    v1244 = v1049;
LABEL_1144:
    objc_msgSend(*v1212, "eventTimeRange");
    v1062 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1062, "startTime");
    v1063 = (void *)objc_claimAutoreleasedReturnValue();
    v1064 = v1063;
    if (!v1063)
      v1064 = *(void **)(v1253 + 32);
    v1065 = v1064;

    objc_msgSend(v1065, "machAbsTimeSeconds");
    if (v1066 != 0.0)
    {
      objc_msgSend(v1053, "machAbsTimeSeconds");
      if (v1067 != 0.0)
      {
        objc_msgSend(v1065, "machAbsTimeSeconds");
        v1069 = v1068;
        objc_msgSend(v1053, "machAbsTimeSeconds");
        if (v1069 > v1070 + 0.25)
          goto LABEL_1152;
        goto LABEL_1153;
      }
    }
    if (!objc_msgSend(v1065, "isComparable:", v1053) || (objc_msgSend(v1065, "gt:", v1053) & 1) != 0)
    {
LABEL_1152:

LABEL_1162:
      continue;
    }
LABEL_1153:
    objc_msgSend(*v1212, "eventTimeRange");
    v1071 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1071, "endTime");
    v1072 = (void *)objc_claimAutoreleasedReturnValue();
    v1073 = v1072;
    if (!v1072)
      v1073 = *(void **)(v1253 + 40);
    selfd = v1073;

    if (objc_msgSend(selfd, "isComparable:", v1052) && (objc_msgSend(selfd, "lt:", v1052) & 1) != 0)
    {
      v1075 = 2;
      goto LABEL_1223;
    }
    if (v1221 != -1 && v1054 != v1221)
    {
      v1075 = 4;
      goto LABEL_1223;
    }
    if (!v1231)
      v1231 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
    if ((v1043 & 1) != 0)
      objc_msgSend(v1231, "appendString:", CFSTR(", "));
    if (v1055)
    {
      if (*(_QWORD *)(v1253 + 112))
      {
        v1375 = 0u;
        v1374 = 0u;
        v1373 = 0u;
        v1372 = 0u;
        v1076 = objc_getProperty(v1055, v1074, 8, 1);
        v1077 = objc_msgSend(v1076, "countByEnumeratingWithState:objects:count:", &v1372, v1376, 16);
        if (v1077)
        {
          v1078 = *(_QWORD *)v1373;
          while (2)
          {
            for (i2 = 0; i2 != v1077; ++i2)
            {
              if (*(_QWORD *)v1373 != v1078)
                objc_enumerationMutation(v1076);
              if (*(_QWORD *)(v1253 + 112) == *(_QWORD *)(*((_QWORD *)&v1372 + 1) + 8 * i2))
              {
                v1080 = 1;
                goto LABEL_1200;
              }
            }
            v1077 = objc_msgSend(v1076, "countByEnumeratingWithState:objects:count:", &v1372, v1376, 16);
            if (v1077)
              continue;
            break;
          }
        }
        v1080 = 0;
LABEL_1200:

      }
      else
      {
        v1080 = 0;
      }
      v1096 = objc_getProperty(v1055, v1074, 24, 1);
      objc_msgSend(v1231, "appendString:", v1096);

      v1098 = objc_getProperty(v1055, v1097, 8, 1);
      v1099 = objc_msgSend(v1098, "count") == 0;

      if (!v1099)
      {
        v1101 = objc_getProperty(v1055, v1100, 8, 1);
        objc_msgSend(v1231, "appendFormat:", CFSTR(" (%lu HID events)"), objc_msgSend(v1101, "count"));

      }
      if (v1221 == -1)
      {
        v1102 = v1055[4];
        if ((_DWORD)v1102 != -1)
        {
          v1103 = objc_getProperty(v1055, v1100, 32, 1);
          objc_msgSend(v1103, "startTime");
          v1104 = (void *)objc_claimAutoreleasedReturnValue();
          -[SASamplePrinter displayNameForPid:threadId:timestamp:]((_QWORD *)v1253, v1102, 0, v1104);
          v1105 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v1231, "appendFormat:", CFSTR(" to %@"), v1105);

        }
      }
      if (v1080)
        objc_msgSend(v1231, "appendString:", CFSTR("*"));
      goto LABEL_1222;
    }
    objc_msgSend(v1244, "steps");
    v1081 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1081, "lastObject");
    v1202 = (void *)objc_claimAutoreleasedReturnValue();

    v1173 = v1244 == *(id *)(v1253 + 112);
    objc_msgSend(v1244, "thresholdToGroupSameEventType");
    v1083 = v1082;
    v1178 = 0;
    if (v1082 <= 0.0 || !v1202)
      goto LABEL_1212;
    if (objc_msgSend(v1202, "pid") == -1 || (objc_msgSend(v1053, "machAbsTimeSeconds"), v1084 == 0.0))
    {
      v1178 = 0;
      goto LABEL_1212;
    }
    v1171 = v1053;
    v1085 = (char *)(i1 + 1);
    if (i1 + 1 >= objc_msgSend(objg, "count"))
    {
      v1178 = 0;
      goto LABEL_1211;
    }
    v1178 = 0;
    v1211 = (char *)i1;
    while (1)
    {
      objc_msgSend(objg, "objectAtIndexedSubscript:", v1085);
      v1086 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        break;
      v1211 = v1085;
LABEL_1197:

      v1085 = v1211 + 1;
      if ((unint64_t)(v1211 + 1) >= objc_msgSend(objg, "count"))
        goto LABEL_1211;
    }
    objc_msgSend(v1086, "hidEventTimestamp");
    v1207 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1207, "machAbsTimeSeconds");
    if (v1087 == 0.0)
    {
      v1211 = v1085;
LABEL_1196:

      goto LABEL_1197;
    }
    objc_msgSend(v1171, "machAbsTimeSeconds");
    v1089 = v1088;
    objc_msgSend(v1207, "machAbsTimeSeconds");
    if (v1083 + v1089 >= v1090)
    {
      objc_msgSend(v1086, "steps");
      v1091 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v1091, "lastObject");
      v1092 = (void *)objc_claimAutoreleasedReturnValue();

      if (v1092 && (v1093 = objc_msgSend(v1092, "pid"), v1093 == objc_msgSend(v1202, "pid")))
      {
        v1094 = *(void **)(v1253 + 112);
        objc_msgSend(v1092, "timestamp");
        v1168 = objc_claimAutoreleasedReturnValue();
        v1095 = v1173;
        if (v1086 == v1094)
          v1095 = 1;
        v1173 = v1095;

        objc_msgSend(objg, "removeObjectAtIndex:", v1085);
        ++v1178;
        v1171 = (id)v1168;
      }
      else
      {
        v1211 = v1085;
      }

      goto LABEL_1196;
    }
    v1110 = *__error();
    _sa_logt();
    v1111 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1111, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend(v1207, "machAbsTimeSeconds");
      v1113 = v1112;
      objc_msgSend(v1171, "machAbsTimeSeconds");
      LODWORD(buf) = 134217984;
      *(double *)((char *)&buf + 4) = v1113 - v1114;
      _os_log_debug_impl(&dword_1B9BE0000, v1111, OS_LOG_TYPE_DEBUG, "breaking grouping due to gap of %.3fs", (uint8_t *)&buf, 0xCu);
    }

    *__error() = v1110;
LABEL_1211:

    v1173 &= 1u;
LABEL_1212:
    objc_msgSend(v1244, "hidEventTypeString");
    v1106 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1231, "appendString:", v1106);

    if (v1173)
      objc_msgSend(v1231, "appendString:", CFSTR("*"));
    if (v1178)
      objc_msgSend(v1231, "appendFormat:", CFSTR(" x%llu"), v1178 + 1);
    if (v1221 == -1)
    {
      if (v1202)
        v1107 = objc_msgSend(v1202, "pid");
      else
        v1107 = 0xFFFFFFFFLL;
      objc_msgSend(v1202, "timestamp");
      v1108 = (void *)objc_claimAutoreleasedReturnValue();
      -[SASamplePrinter displayNameForPid:threadId:timestamp:]((_QWORD *)v1253, v1107, 0, v1108);
      v1109 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v1231, "appendFormat:", CFSTR(" to %@"), v1109);

    }
LABEL_1222:
    v1075 = 0;
    v1043 = 1;
LABEL_1223:

    if ((v1075 | 4) != 4)
      break;
  }
LABEL_1233:

  v953 = v1253;
  v951 = v1212;
  v1038 = v1231;
LABEL_1234:
  v1115 = v1038;
  if (objc_msgSend(v1038, "length"))
  {
    objc_msgSend(*p_isa, "printWithFormat:", CFSTR("\n"));
    objc_msgSend(*p_isa, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "HID Events: ", v1115);
  }
  if (*(_QWORD *)(v953 + 112) && *v951 && (*((_BYTE *)*v951 + 325) & 1) != 0)
  {
    v1116 = objc_msgSend(*(id *)(v953 + 16), "hidEventDisplayOptions");
    v1117 = v1203;
    if ((v1116 & 4) == 0)
      v1117 = 1;
    if ((v1117 & 1) == 0)
    {
      objc_msgSend(*p_isa, "appendString:", CFSTR("\nSlow HID event:\n"));
      -[SASamplePrinter printHIDEvent:](v953, *(void **)(v953 + 112));
    }
  }

  _Block_object_dispose(&v1275, 8);
}

- (BOOL)frame:(void *)a3 matchesFrame:
{
  id *v5;
  id *v6;
  id *v7;
  unint64_t WeakRetained;
  unint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!a1)
  {
LABEL_12:
    v18 = 0;
    goto LABEL_17;
  }
  if (v5 != v6)
  {
    if (v5 && *((unsigned __int8 *)v5 + 8) == *((unsigned __int8 *)v6 + 8))
    {
      if (objc_msgSend(*(id *)(a1 + 16), "aggregateFramesByOffsetIntoBinary"))
      {
        WeakRetained = (unint64_t)objc_loadWeakRetained(v5 + 3);
        v9 = (unint64_t)objc_loadWeakRetained(v7 + 3);
        v10 = (void *)v9;
        if (WeakRetained && v9)
        {
          objc_msgSend((id)WeakRetained, "binary");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "binary");
          v12 = (void *)objc_claimAutoreleasedReturnValue();

          if (v11 == v12)
          {
            objc_msgSend((id)WeakRetained, "segment");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "segment");
            v14 = (void *)objc_claimAutoreleasedReturnValue();

            if (v13 == v14)
            {
              v15 = objc_msgSend(v5, "address");
              v16 = v15 - objc_msgSend((id)WeakRetained, "loadAddress");
              v17 = objc_msgSend(v7, "address");
              v18 = v16 == v17 - objc_msgSend(v10, "loadAddress");
LABEL_15:

              goto LABEL_17;
            }
          }
LABEL_14:
          v18 = 0;
          goto LABEL_15;
        }
        if (WeakRetained | v9)
          goto LABEL_14;
      }
      v19 = objc_msgSend(v5, "address");
      v18 = v19 == objc_msgSend(v7, "address");
      goto LABEL_17;
    }
    goto LABEL_12;
  }
  v18 = 1;
LABEL_17:

  return v18;
}

- (void)copyDescriptionsForFrame:(void *)a3 binariesToDisplay:(void *)a4 extraBinariesToDisplay:
{
  id *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  uint64_t v17;
  id *v18;
  id WeakRetained;
  void *v20;
  id *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  id v28;
  char v29;
  void *v30;
  BOOL v31;
  void *v32;
  uint64_t v33;
  id *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  void *v39;
  __CFString *v40;
  id v41;
  void *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  id v49;
  void *v50;
  id v51;
  void *v52;
  id *v53;
  __CFString *v54;
  __CFString *v55;
  void *v56;
  id v57;
  void *v58;
  __CFString *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t i;
  void *v65;
  uint64_t v67;
  id *v68;
  __CFString *v69;
  id v70;
  id v71;
  id v72;
  void *v73;
  id *v74;
  _QWORD *v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _BYTE v81[128];
  id v82;
  void *v83;
  _QWORD v84[5];
  _QWORD *v85;
  id *v86;
  id v87;
  __CFString *v88;
  id v89;
  uint64_t v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (!a1)
  {
    v16 = 0;
    goto LABEL_56;
  }
  if (!v7)
  {
    v16 = &unk_1E7167BD8;
    goto LABEL_56;
  }
  if (!objc_msgSend(v7, "isTruncatedBacktraceFrame"))
  {
    v17 = objc_msgSend(v7, "address");
    v18 = v7 + 3;
    WeakRetained = objc_loadWeakRetained(v7 + 3);
    v76 = a1;
    v73 = WeakRetained;
    if (WeakRetained)
    {
      v20 = WeakRetained;
      v74 = v7 + 3;
      objc_msgSend(WeakRetained, "binary");
      v21 = v7;
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "segment");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = objc_msgSend(v20, "loadAddress");
      v25 = objc_msgSend(v21, "address");
      v26 = v25 - objc_msgSend(v20, "loadAddress");
      v27 = v9;
      v28 = v8;
      v29 = objc_msgSend(v21, "isKernel");
      v68 = v21;
      objc_msgSend(v21, "exclave");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = v29;
      v8 = v28;
      v9 = v27;
      -[SASamplePrinter displayedBinaryLoadInfoForBinary:segment:desiredLoadAddress:offsetIntoLoadInfo:isInKernelAddressSpace:exclave:binariesToDisplay:extraBinariesToDisplay:](v22, v23, v24, v26, v31, v30, v8, v27);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = objc_msgSend(v32, "loadAddress");

      if (v33 != objc_msgSend(v20, "loadAddress"))
        v17 = v33 + v17 - objc_msgSend(v73, "loadAddress");

      v18 = v74;
      a1 = v76;
      v7 = v68;
    }
    v34 = v7;
    v72 = v8;
    if (objc_msgSend(v34, "isExclave"))
    {
      objc_msgSend(v34, "exclave");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = v35;
      if (v35)
      {
        objc_msgSend(v35, "name");
        v37 = (void *)objc_claimAutoreleasedReturnValue();

        v38 = objc_alloc(MEMORY[0x1E0CB3940]);
        if (v37)
        {
          objc_msgSend(v36, "name");
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          v40 = (__CFString *)objc_msgSend(v38, "initWithFormat:", CFSTR("exclave %@"), v39);

        }
        else
        {
          v40 = (__CFString *)objc_msgSend(v38, "initWithFormat:", CFSTR("exclave %#18llx"), objc_msgSend(v36, "identifier"));
        }
        a1 = v76;
      }
      else
      {
        v40 = CFSTR("exclave UNKNOWN");
      }

    }
    else
    {
      v40 = 0;
    }
    objc_msgSend(v34, "instruction");
    v75 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    v41 = objc_loadWeakRetained(v18);
    v71 = v9;
    if (!v41)
    {
      if (v40)
      {
        v42 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("??? (%@)"), v40);
        v84[0] = v42;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v84, 1);
        v43 = (id)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        v84[0] = CFSTR("???");
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v84, 1);
        v43 = (id)objc_claimAutoreleasedReturnValue();
      }
      goto LABEL_43;
    }
    if (v40)
      v69 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR(" %@"), v40);
    else
      v69 = &stru_1E714A250;
    v44 = objc_msgSend(v34, "address");
    v45 = v44 - objc_msgSend(v41, "loadAddress");
    objc_msgSend(v41, "binary");
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(*(id *)(a1 + 16), "displaySymbolInformation") & 1) != 0)
    {
      v67 = v45;
      objc_msgSend(v46, "name");
      v47 = (void *)objc_claimAutoreleasedReturnValue();

      if (v47)
      {
        objc_msgSend(v46, "name");
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        SACopySanitizedString(v48, 1, 0);
        v70 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v57 = objc_alloc(MEMORY[0x1E0CB3940]);
        objc_msgSend(v46, "uuid");
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v48, "UUIDString");
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        v70 = (id)objc_msgSend(v57, "initWithFormat:", CFSTR("<%@>"), v58);

        a1 = v76;
      }

      v43 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 1);
      if (v75 && v75[1])
      {
        v84[0] = MEMORY[0x1E0C809B0];
        v84[1] = 3221225472;
        v84[2] = __45__SASamplePrinter_copySymbolStringsForFrame___block_invoke;
        v84[3] = &unk_1E7149A98;
        v84[4] = a1;
        v85 = v75;
        v86 = v34;
        v70 = v70;
        v87 = v70;
        v59 = v69;
        v90 = v67;
        v88 = v69;
        v43 = v43;
        v89 = v43;
        objc_msgSend(v85, "enumerateSymbols:", v84);

LABEL_42:
        a1 = v76;
LABEL_43:

        if (objc_msgSend(*(id *)(a1 + 16), "displayFrameAddresses"))
        {
          v60 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v43, "count"));
          v77 = 0u;
          v78 = 0u;
          v79 = 0u;
          v80 = 0u;
          v14 = v43;
          v61 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v77, v81, 16);
          if (v61)
          {
            v62 = v61;
            v63 = *(_QWORD *)v78;
            do
            {
              for (i = 0; i != v62; ++i)
              {
                if (*(_QWORD *)v78 != v63)
                  objc_enumerationMutation(v14);
                v65 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@ [0x%llx]"), *(_QWORD *)(*((_QWORD *)&v77 + 1) + 8 * i), v17);
                objc_msgSend(v60, "addObject:", v65);

              }
              v62 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v77, v81, 16);
            }
            while (v62);
          }

          v16 = (void *)objc_msgSend(v60, "copy");
          v9 = v71;
          v8 = v72;
        }
        else
        {
          v14 = v43;
          v16 = v14;
          v8 = v72;
        }
        v11 = v73;
        goto LABEL_54;
      }
      v51 = v41;
      v52 = v46;
      v53 = v34;
      v54 = v40;
      v55 = v69;
      v50 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("??? (%@ + %llu%@)"), v70, v67, v69);
      v56 = (void *)objc_msgSend(v50, "copy");
      objc_msgSend(v43, "addObject:", v56);
    }
    else
    {
      v49 = objc_alloc(MEMORY[0x1E0CB3940]);
      objc_msgSend(v46, "uuid");
      v70 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v70, "UUIDString");
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      v51 = v41;
      v52 = v46;
      v53 = v34;
      v54 = v40;
      v55 = v69;
      v56 = (void *)objc_msgSend(v49, "initWithFormat:", CFSTR("%@ + %llu%@"), v50, v45, v69);
      v84[0] = v56;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v84, 1);
      v43 = (id)objc_claimAutoreleasedReturnValue();
    }

    v59 = v55;
    v40 = v54;
    v34 = v53;
    v46 = v52;
    v41 = v51;
    v9 = v71;

    goto LABEL_42;
  }
  if (objc_msgSend(v7, "isKernel"))
  {
    if (objc_msgSend(v7, "isExclave"))
    {
      objc_msgSend(v7, "exclave");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = v10;
      if (!v10)
      {
        v16 = &unk_1E7167BF0;
        goto LABEL_55;
      }
      objc_msgSend(v10, "name");
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      v13 = objc_alloc(MEMORY[0x1E0CB3940]);
      if (v12)
      {
        objc_msgSend(v11, "name");
        v14 = (id)objc_claimAutoreleasedReturnValue();
        v15 = (void *)objc_msgSend(v13, "initWithFormat:", CFSTR("<exclave %@>"), v14);
        v83 = v15;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v83, 1);
        v16 = (void *)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        v14 = (id)objc_msgSend(v13, "initWithFormat:", CFSTR("<exclave 0x%llx>"), objc_msgSend(v11, "identifier"));
        v82 = v14;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v82, 1);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
      }
LABEL_54:

LABEL_55:
      goto LABEL_56;
    }
    v16 = &unk_1E7167C08;
  }
  else
  {
    v16 = &unk_1E7167C20;
  }
LABEL_56:

  return v16;
}

- (BOOL)hasTimeIndexes
{
  void *v1;
  _BOOL8 v2;

  if (!a1)
    return 0;
  objc_msgSend(*(id *)(a1 + 160), "sampleTimestamps");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "count") != 0;

  return v2;
}

- (uint64_t)shouldPrintTimeOutsideSamplingRange:(uint64_t)a1
{
  double v3;
  _BOOL4 v4;
  int v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t buf[4];
  double v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a2 < 0.0)
  {
    v6 = *__error();
    _sa_logt();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v15 = a2;
      _os_log_error_impl(&dword_1B9BE0000, v7, OS_LOG_TYPE_ERROR, "negative timeOutsideSamplingRange %f", buf, 0xCu);
    }

    *__error() = v6;
    _SASetCrashLogMessage(12568, "negative timeOutsideSamplingRange %f", v8, v9, v10, v11, v12, v13, SLOBYTE(a2));
    _os_crash();
    __break(1u);
  }
  objc_msgSend(*(id *)(a1 + 160), "attemptedSamplingInterval");
  v4 = v3 != 0.0;
  if (v3 >= a2)
    v4 = 0;
  return a2 > 0.2 || v4;
}

- (void)setIncidentUUID:(id)a3
{
  objc_setProperty_atomic_copy(self, a2, a3, 176);
}

- (SASampleStore)sampleStore
{
  return (SASampleStore *)objc_getProperty(self, a2, 160, 1);
}

- (id)indexForBinary:(uint64_t)a1
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  if (a1)
  {
    objc_msgSend(*(id *)(a1 + 80), "objectForKeyedSubscript:", a2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    if (v2)
    {
      objc_msgSend(MEMORY[0x1E0C99E38], "null");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "objectForKeyedSubscript:", v3);
      v4 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v4)
      {
        objc_msgSend(v2, "allValues");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "firstObject");
        v4 = (void *)objc_claimAutoreleasedReturnValue();

      }
    }
    else
    {
      v4 = 0;
    }

  }
  else
  {
    v4 = 0;
  }
  return v4;
}

- (void)setOptions:(id)a3
{
  id v4;
  SASamplePrintOptions *v5;
  SASamplePrintOptions *options;
  id v7;

  v4 = a3;
  v7 = v4;
  if (v4)
    v5 = (SASamplePrintOptions *)v4;
  else
    v5 = objc_alloc_init(SASamplePrintOptions);
  options = self->_options;
  self->_options = v5;

}

- (SASamplePrintOptions)options
{
  return self->_options;
}

- (SASamplePrinter)initWithSampleStore:(id)a3
{
  id v5;
  SASamplePrinter *v6;
  SASamplePrintOptions *v7;
  SASamplePrintOptions *options;
  id v9;
  void *v10;
  uint64_t v11;
  NSMutableDictionary *binaryImagesHit;
  uint64_t v13;
  SATimestamp *reportStartTime;
  uint64_t v15;
  SATimestamp *reportEndTime;
  void *v17;
  objc_super v19;

  v5 = a3;
  v19.receiver = self;
  v19.super_class = (Class)SASamplePrinter;
  v6 = -[SASamplePrinter init](&v19, sel_init);
  if (v6)
  {
    v7 = objc_alloc_init(SASamplePrintOptions);
    options = v6->_options;
    v6->_options = v7;

    objc_storeStrong((id *)&v6->_sampleStore, a3);
    v9 = objc_alloc(MEMORY[0x1E0C99E08]);
    objc_msgSend(v5, "tasksByPid");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v9, "initWithCapacity:", objc_msgSend(v10, "count"));
    binaryImagesHit = v6->_binaryImagesHit;
    v6->_binaryImagesHit = (NSMutableDictionary *)v11;

    -[SASampleStore startTime](v6->_sampleStore, "startTime");
    v13 = objc_claimAutoreleasedReturnValue();
    reportStartTime = v6->_reportStartTime;
    v6->_reportStartTime = (SATimestamp *)v13;

    -[SASampleStore endTime](v6->_sampleStore, "endTime");
    v15 = objc_claimAutoreleasedReturnValue();
    reportEndTime = v6->_reportEndTime;
    v6->_reportEndTime = (SATimestamp *)v15;

    if (-[SASamplePrinter hasTimeIndexes]((uint64_t)v6))
    {
      v6->_reportStartSampleIndex = 0;
      -[SASampleStore sampleTimestamps](v6->_sampleStore, "sampleTimestamps");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v6->_reportEndSampleIndex = objc_msgSend(v17, "count") - 1;

    }
    else
    {
      *(int64x2_t *)&v6->_reportStartSampleIndex = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    }
    v6->_numSamples = -[SASampleStore numSamples](v6->_sampleStore, "numSamples");
  }

  return v6;
}

- (double)timeSpentAsleepBetweenStartTimestamp:(void *)a3 endTimestamp:
{
  id v5;
  id v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  v8 = 0.0;
  if (a1)
  {
    objc_msgSend(v6, "machContTimeSeconds");
    if (v9 > 0.0)
    {
      objc_msgSend(v5, "machContTimeSeconds");
      if (v10 > 0.0)
      {
        objc_msgSend(v7, "machContTimeSeconds");
        v12 = v11;
        objc_msgSend(v5, "machContTimeSeconds");
        goto LABEL_8;
      }
    }
    objc_msgSend(v7, "wallTime");
    if (v14 > 0.0)
    {
      objc_msgSend(v5, "wallTime");
      if (v15 > 0.0)
      {
        objc_msgSend(v7, "wallTime");
        v12 = v16;
        objc_msgSend(v5, "wallTime");
LABEL_8:
        v17 = v12 - v13;
        objc_msgSend(v7, "machAbsTimeSeconds");
        v19 = v18;
        objc_msgSend(v5, "machAbsTimeSeconds");
        v21 = v17 - (v19 - v20);
        if (v21 >= 1.0)
          v8 = v21;
        else
          v8 = 0.0;
      }
    }
  }

  return v8;
}

- (uint64_t)complainAboutSamplingGapBetweenStartTimestamp:(void *)a3 endTimestamp:
{
  id v5;
  id v6;
  void *v7;
  double v8;
  double v9;
  double v10;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (a1)
    a1 = *(double *)(a1 + 88) > 0.0
      && (objc_msgSend(v6, "machAbsTimeSeconds"),
          v9 = v8,
          objc_msgSend(v5, "machAbsTimeSeconds"),
          v9 - v10 >= *(double *)(a1 + 88) * 10.0);

  return a1;
}

void __37__SASamplePrinter_calculateTimeJumps__block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;

  v5 = a2;
  v6 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  if (v6
    && (-[SASamplePrinter timeSpentAsleepBetweenStartTimestamp:endTimestamp:](*(_QWORD *)(a1 + 32), v6, v5) > 0.0
     || -[SASamplePrinter complainAboutSamplingGapBetweenStartTimestamp:endTimestamp:](*(_QWORD *)(a1 + 32), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v5)))
  {
    v7 = *(void **)(*(_QWORD *)(a1 + 32) + 96);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "addObject:", v8);

  }
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v5;

}

- (void)updateIndexes
{
  void *v2;
  id *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  int v27;
  NSObject *v28;
  id v29;
  uint64_t v30;
  id v31;
  id v32;
  char v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[7];
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t);
  void (*v46)(uint64_t);
  id v47;
  _BYTE buf[24];
  uint64_t (*v49)(uint64_t, uint64_t);
  void (*v50)(uint64_t);
  id v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  v3 = (id *)(a1 + 32);
  v2 = *(void **)(a1 + 32);
  if (v2 && *(_QWORD *)(a1 + 40) && (objc_msgSend(v2, "le:") & 1) == 0)
  {
    v27 = *__error();
    _sa_logt();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(*(id *)(a1 + 32), "debugDescription");
      v29 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v30 = objc_msgSend(v29, "UTF8String");
      objc_msgSend(*(id *)(a1 + 40), "debugDescription");
      v31 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v30;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = objc_msgSend(v31, "UTF8String");
      _os_log_error_impl(&dword_1B9BE0000, v28, OS_LOG_TYPE_ERROR, "reportStartTime %s > reportEndTime %s", buf, 0x16u);

    }
    *__error() = v27;
    objc_msgSend(*(id *)(a1 + 32), "debugDescription");
    v32 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v33 = objc_msgSend(v32, "UTF8String");
    objc_msgSend(*(id *)(a1 + 40), "debugDescription");
    v34 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend(v34, "UTF8String");
    _SASetCrashLogMessage(1530, "reportStartTime %s > reportEndTime %s", v35, v36, v37, v38, v39, v40, v33);

    _os_crash();
    __break(1u);
  }
  if (!-[SASamplePrinter hasTimeIndexes](a1))
  {
    *(int64x2_t *)(a1 + 48) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v49 = __Block_byref_object_copy__4;
    v50 = __Block_byref_object_dispose__4;
    v51 = 0;
    v42 = 0;
    v43 = &v42;
    v44 = 0x3032000000;
    v45 = __Block_byref_object_copy__4;
    v46 = __Block_byref_object_dispose__4;
    v47 = 0;
    *(_QWORD *)(a1 + 64) = 0;
    v10 = *(void **)(a1 + 160);
    v41[0] = MEMORY[0x1E0C809B0];
    v41[1] = 3221225472;
    v41[2] = __32__SASamplePrinter_updateIndexes__block_invoke;
    v41[3] = &unk_1E7148E98;
    v41[4] = a1;
    v41[5] = buf;
    v41[6] = &v42;
    objc_msgSend(v10, "enumerateTasks:", v41);
    v11 = *(void **)(*(_QWORD *)&buf[8] + 40);
    if (v11)
      objc_storeStrong(v3, v11);
    v12 = (void *)v43[5];
    if (v12)
      objc_storeStrong((id *)(a1 + 40), v12);
    _Block_object_dispose(&v42, 8);

    _Block_object_dispose(buf, 8);
    goto LABEL_32;
  }
  objc_msgSend(*(id *)(a1 + 160), "startTime");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 160), "endTime");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *(void **)(a1 + 32);
  if (!v6 || !v4 || !objc_msgSend(v6, "gt:", v4))
  {
    *(_QWORD *)(a1 + 48) = 0;
    objc_msgSend(*(id *)(a1 + 160), "sampleTimestamps");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "firstObject");
    v9 = objc_claimAutoreleasedReturnValue();
    goto LABEL_17;
  }
  v7 = objc_msgSend(*(id *)(a1 + 160), "indexOfFirstSampleOnOrAfterTimestamp:", *(_QWORD *)(a1 + 32));
  *(_QWORD *)(a1 + 48) = v7;
  if (v7 != 0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend(*(id *)(a1 + 160), "sampleTimestamps");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "objectAtIndexedSubscript:", *(_QWORD *)(a1 + 48));
    v9 = objc_claimAutoreleasedReturnValue();
LABEL_17:
    v13 = *v3;
    *v3 = (id)v9;

  }
  v14 = *(void **)(a1 + 40);
  if (!v14 || !v5 || !objc_msgSend(v14, "lt:", v5))
  {
    objc_msgSend(*(id *)(a1 + 160), "sampleTimestamps");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)(a1 + 56) = objc_msgSend(v18, "count") - 1;

    objc_msgSend(*(id *)(a1 + 160), "sampleTimestamps");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "lastObject");
    v17 = objc_claimAutoreleasedReturnValue();
    goto LABEL_24;
  }
  v15 = objc_msgSend(*(id *)(a1 + 160), "indexOfLastSampleOnOrBeforeTimestamp:", *(_QWORD *)(a1 + 40));
  *(_QWORD *)(a1 + 56) = v15;
  if (v15 != 0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend(*(id *)(a1 + 160), "sampleTimestamps");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "objectAtIndexedSubscript:", *(_QWORD *)(a1 + 56));
    v17 = objc_claimAutoreleasedReturnValue();
LABEL_24:
    v19 = *(void **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v17;

  }
  v20 = *(_QWORD *)(a1 + 48);
  if (v20 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v21 = 0;
  }
  else
  {
    v21 = 0;
    v22 = *(_QWORD *)(a1 + 56);
    if (v22 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v23 = v22 >= v20;
      v24 = v22 - v20;
      if (v23)
        v21 = v24 + 1;
    }
  }
  *(_QWORD *)(a1 + 64) = v21;

LABEL_32:
  if (*v3 && *(_QWORD *)(a1 + 40))
  {
    if (objc_msgSend(*v3, "le:"))
    {
      v25 = *(_QWORD *)(a1 + 160);
      +[SATimeRange timeRangeStart:end:](SATimeRange, "timeRangeStart:end:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      -[SASampleStore findTargetProcessInTimeRange:](v25, v26);

    }
  }
}

void __32__SASamplePrinter_updateIndexes__block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v20;
  _QWORD v21[4];
  __int128 v22;
  uint64_t v23;

  v20 = a2;
  objc_msgSend(v20, "taskStates");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "count");

  if (!v4)
  {
    objc_msgSend(v20, "threads");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = __32__SASamplePrinter_updateIndexes__block_invoke_2;
    v21[3] = &unk_1E7148E70;
    v22 = *(_OWORD *)(a1 + 32);
    v23 = *(_QWORD *)(a1 + 48);
    objc_msgSend(v12, "enumerateKeysAndObjectsUsingBlock:", v21);
    goto LABEL_18;
  }
  v5 = objc_msgSend(v20, "indexOfFirstTaskStateOnOrAfterTime:sampleIndex:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), 0x7FFFFFFFFFFFFFFFLL);
  if (v5 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v6 = v5;
    v7 = objc_msgSend(v20, "indexOfLastTaskStateOnOrBeforeTime:sampleIndex:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), 0x7FFFFFFFFFFFFFFFLL);
    if (v7 != 0x7FFFFFFFFFFFFFFFLL && v7 >= v6)
    {
      v9 = v7;
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) += v7 - v6 + 1;
      objc_msgSend(v20, "taskStates");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "objectAtIndexedSubscript:", v6);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "startTimestamp");
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v14 = *(void **)(v13 + 40);
      if (v14)
      {
        if (!objc_msgSend(v14, "gt:", v12))
          goto LABEL_12;
        v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      }
      objc_storeStrong((id *)(v13 + 40), v12);
LABEL_12:
      objc_msgSend(v20, "taskStates");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "objectAtIndexedSubscript:", v9);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "endTimestamp");
      v17 = (void *)objc_claimAutoreleasedReturnValue();

      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v19 = *(void **)(v18 + 40);
      if (v19)
      {
        if (!objc_msgSend(v19, "lt:", v17))
        {
LABEL_16:

LABEL_18:
          goto LABEL_19;
        }
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      }
      objc_storeStrong((id *)(v18 + 40), v17);
      goto LABEL_16;
    }
  }
LABEL_19:

}

void __32__SASamplePrinter_updateIndexes__block_invoke_2(_QWORD *a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;

  v19 = a3;
  v4 = objc_msgSend(v19, "indexOfFirstThreadStateOnOrAfterTime:sampleIndex:", *(_QWORD *)(a1[4] + 32), 0x7FFFFFFFFFFFFFFFLL);
  if (v4 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v5 = v4;
    v6 = objc_msgSend(v19, "indexOfLastThreadStateOnOrBeforeTime:sampleIndex:", *(_QWORD *)(a1[4] + 40), 0x7FFFFFFFFFFFFFFFLL);
    if (v6 != 0x7FFFFFFFFFFFFFFFLL && v6 >= v5)
    {
      v8 = v6;
      *(_QWORD *)(a1[4] + 64) += v6 - v5 + 1;
      objc_msgSend(v19, "threadStates");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "objectAtIndexedSubscript:", v5);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "startTimestamp");
      v11 = (void *)objc_claimAutoreleasedReturnValue();

      v12 = *(_QWORD *)(a1[5] + 8);
      v13 = *(void **)(v12 + 40);
      if (v13)
      {
        if (!objc_msgSend(v13, "gt:", v11))
          goto LABEL_11;
        v12 = *(_QWORD *)(a1[5] + 8);
      }
      objc_storeStrong((id *)(v12 + 40), v11);
LABEL_11:
      objc_msgSend(v19, "threadStates");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "objectAtIndexedSubscript:", v8);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "endTimestamp");
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      v17 = *(_QWORD *)(a1[6] + 8);
      v18 = *(void **)(v17 + 40);
      if (v18)
      {
        if (!objc_msgSend(v18, "lt:", v16))
        {
LABEL_15:

          goto LABEL_16;
        }
        v17 = *(_QWORD *)(a1[6] + 8);
      }
      objc_storeStrong((id *)(v17 + 40), v16);
      goto LABEL_15;
    }
  }
LABEL_16:

}

- (void)filterToTimestampRangeStart:(id)a3 end:(id)a4
{
  SATimestamp *v6;
  SATimestamp *v7;
  SATimestamp *reportStartTime;
  SATimestamp *v9;
  SATimestamp *reportEndTime;

  v6 = (SATimestamp *)a3;
  v7 = (SATimestamp *)a4;
  self->_hasFilterApplied = 1;
  reportStartTime = self->_reportStartTime;
  self->_reportStartTime = v6;
  v9 = v6;

  reportEndTime = self->_reportEndTime;
  self->_reportEndTime = v7;

  -[SASamplePrinter updateIndexes]((uint64_t)self);
}

- (void)filterToMachAbsTimeRangeStart:(unint64_t)a3 end:(unint64_t)a4
{
  SATimestamp *v6;
  SATimestamp *reportStartTime;
  SATimestamp *v8;
  SATimestamp *reportEndTime;

  self->_hasFilterApplied = 1;
  if (a3)
  {
    +[SATimestamp timestampWithMachAbsTime:machContTime:wallTime:machTimebase:](SATimestamp, "timestampWithMachAbsTime:machContTime:wallTime:machTimebase:", a3, 0, -[SASampleStore machTimebase](self->_sampleStore, "machTimebase"), 0.0);
    v6 = (SATimestamp *)objc_claimAutoreleasedReturnValue();
    reportStartTime = self->_reportStartTime;
    self->_reportStartTime = v6;

  }
  if (a4)
  {
    +[SATimestamp timestampWithMachAbsTime:machContTime:wallTime:machTimebase:](SATimestamp, "timestampWithMachAbsTime:machContTime:wallTime:machTimebase:", a4, 0, -[SASampleStore machTimebase](self->_sampleStore, "machTimebase"), 0.0);
    v8 = (SATimestamp *)objc_claimAutoreleasedReturnValue();
    reportEndTime = self->_reportEndTime;
    self->_reportEndTime = v8;

  }
  -[SASamplePrinter updateIndexes]((uint64_t)self);
}

- (void)filterToWallTimeRangeStart:(double)a3 end:(double)a4
{
  SATimestamp *v6;
  SATimestamp *reportStartTime;
  SATimestamp *v8;
  SATimestamp *reportEndTime;

  self->_hasFilterApplied = 1;
  if (a3 != 0.0)
  {
    +[SATimestamp timestampWithMachAbsTime:machContTime:wallTime:machTimebase:](SATimestamp, "timestampWithMachAbsTime:machContTime:wallTime:machTimebase:", 0, 0, -[SASampleStore machTimebase](self->_sampleStore, "machTimebase"), a3);
    v6 = (SATimestamp *)objc_claimAutoreleasedReturnValue();
    reportStartTime = self->_reportStartTime;
    self->_reportStartTime = v6;

  }
  if (a4 != 0.0)
  {
    +[SATimestamp timestampWithMachAbsTime:machContTime:wallTime:machTimebase:](SATimestamp, "timestampWithMachAbsTime:machContTime:wallTime:machTimebase:", 0, 0, -[SASampleStore machTimebase](self->_sampleStore, "machTimebase"), a4);
    v8 = (SATimestamp *)objc_claimAutoreleasedReturnValue();
    reportEndTime = self->_reportEndTime;
    self->_reportEndTime = v8;

  }
  -[SASamplePrinter updateIndexes]((uint64_t)self);
}

- (void)filterToDisplayTimeIndexStart:(unint64_t)a3 end:(unint64_t)a4
{
  int v7;
  NSObject *v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  NSObject *v12;
  void *v13;
  void *v14;
  unint64_t v15;
  void *v16;
  SATimestamp *v17;
  SATimestamp *reportStartTime;
  void *v19;
  SATimestamp *v20;
  SATimestamp *reportEndTime;
  SASampleStore *sampleStore;
  int v23;
  NSObject *v24;
  void *v25;
  id v26;
  uint8_t buf[4];
  unint64_t v28;
  __int16 v29;
  unint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (a4 && a4 < a3)
  {
    v7 = *__error();
    _sa_logt();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218240;
      v28 = a3;
      v29 = 2048;
      v30 = a4;
      _os_log_error_impl(&dword_1B9BE0000, v8, OS_LOG_TYPE_ERROR, "Passed invalid sample index range %lu-%lu", buf, 0x16u);
    }

    *__error() = v7;
    return;
  }
  if (-[SASamplePrinter hasTimeIndexes]((uint64_t)self))
  {
    self->_hasFilterApplied = 1;
    if (a3)
    {
      if (-[SASamplePrinter hasTimeIndexes]((uint64_t)self))
        v9 = a3 - 1;
      else
        v9 = 0x7FFFFFFFFFFFFFFFLL;
      if (a4)
        goto LABEL_12;
    }
    else
    {
      v9 = 0;
      if (a4)
      {
LABEL_12:
        if (-[SASamplePrinter hasTimeIndexes]((uint64_t)self))
          v10 = a4 - 1;
        else
          v10 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_20:
        -[SASampleStore sampleTimestamps](self->_sampleStore, "sampleTimestamps");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = objc_msgSend(v14, "count");

        if (v10 >= v15)
        {
          v23 = *__error();
          _sa_logt();
          v24 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          {
            -[SASampleStore sampleTimestamps](self->_sampleStore, "sampleTimestamps");
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 134218496;
            v28 = a3;
            v29 = 2048;
            v30 = a4;
            v31 = 2048;
            v32 = objc_msgSend(v25, "count");
            _os_log_error_impl(&dword_1B9BE0000, v24, OS_LOG_TYPE_ERROR, "Requested sample index range %lu-%lu outside valid range 1-%lu", buf, 0x20u);

          }
          *__error() = v23;
        }
        else
        {
          self->_reportStartSampleIndex = v9;
          -[SASampleStore sampleTimestamps](self->_sampleStore, "sampleTimestamps");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "objectAtIndexedSubscript:", v9);
          v17 = (SATimestamp *)objc_claimAutoreleasedReturnValue();
          reportStartTime = self->_reportStartTime;
          self->_reportStartTime = v17;

          self->_reportEndSampleIndex = v10;
          -[SASampleStore sampleTimestamps](self->_sampleStore, "sampleTimestamps");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "objectAtIndexedSubscript:", v10);
          v20 = (SATimestamp *)objc_claimAutoreleasedReturnValue();
          reportEndTime = self->_reportEndTime;
          self->_reportEndTime = v20;

          self->_numSamples = self->_reportEndSampleIndex - self->_reportStartSampleIndex + 1;
          if (self->_reportStartTime && self->_reportEndTime)
          {
            sampleStore = self->_sampleStore;
            +[SATimeRange timeRangeStart:end:](SATimeRange, "timeRangeStart:end:");
            v26 = (id)objc_claimAutoreleasedReturnValue();
            -[SASampleStore findTargetProcessInTimeRange:]((uint64_t)sampleStore, v26);

          }
        }
        return;
      }
    }
    -[SASampleStore sampleTimestamps](self->_sampleStore, "sampleTimestamps");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v13, "count") - 1;

    goto LABEL_20;
  }
  v11 = *__error();
  _sa_logt();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1B9BE0000, v12, OS_LOG_TYPE_ERROR, "Requested sample index range on sample store without sample indexes", buf, 2u);
  }

  *__error() = v11;
}

- (id)eventStartTimeWithWallTime
{
  void *v2;
  void *v3;
  double v4;
  id v5;
  double v6;
  id v7;

  objc_msgSend(*(id *)(a1 + 160), "eventTimeRange");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "startTime");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3 || (objc_msgSend(v3, "wallTime"), v4 == 0.0))
  {
    v5 = *(id *)(a1 + 32);

    if (!v5 || (objc_msgSend(v5, "wallTime"), v6 == 0.0))
    {
      v7 = 0;
      goto LABEL_8;
    }
    v3 = v5;
  }
  v7 = v3;
  v5 = v7;
LABEL_8:

  return v7;
}

- (id)eventEndTimeWithWallTime
{
  void *v2;
  void *v3;
  double v4;
  id v5;
  double v6;
  id v7;

  objc_msgSend(*(id *)(a1 + 160), "eventTimeRange");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "endTime");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3 || (objc_msgSend(v3, "wallTime"), v4 == 0.0))
  {
    v5 = *(id *)(a1 + 40);

    if (!v5 || (objc_msgSend(v5, "wallTime"), v6 == 0.0))
    {
      v7 = 0;
      goto LABEL_8;
    }
    v3 = v5;
  }
  v7 = v3;
  v5 = v7;
LABEL_8:

  return v7;
}

- (void)printToStream:(__sFILE *)a3
{
  SAOutputStream *v4;
  SAOutputStream *stream;
  SAOutputStream *v6;

  v4 = (SAOutputStream *)-[SAFileOutputStream initWithFileStream:]([SAFileOutputStream alloc], (uint64_t)a3);
  stream = self->_stream;
  self->_stream = v4;

  -[SASamplePrinter printReport]((uint64_t)self);
  v6 = self->_stream;
  self->_stream = 0;

}

- (void)printToMutableData:(id)a3
{
  id v4;
  SAOutputStream *v5;
  SAOutputStream *stream;
  SAOutputStream *v7;

  v4 = a3;
  v5 = (SAOutputStream *)-[SAMutableDataOutputStream initWithMutableData:]((id *)[SAMutableDataOutputStream alloc], v4);

  stream = self->_stream;
  self->_stream = v5;

  -[SASamplePrinter printReport]((uint64_t)self);
  v7 = self->_stream;
  self->_stream = 0;

}

- (uint64_t)checkForBadOptions
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  const __CFString *v13;
  void *v14;
  int v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  _BOOL4 v28;
  void *v29;
  void *v30;
  _BOOL4 v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  int v40;
  NSObject *v41;
  void *v42;
  uint64_t v43;
  int v44;
  NSObject *v45;
  int v46;
  NSObject *v47;
  int *v48;
  void *v49;
  void *v50;
  int v51;
  NSObject *v52;
  void *v53;
  int v54;
  NSObject *v55;
  void *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  void *v60;
  int v61;
  NSObject *v62;
  int v63;
  NSObject *v64;
  int v65;
  NSObject *v66;
  void *v67;
  void *v68;
  NSObject *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  unint64_t v81;
  unint64_t v82;
  void *v83;
  void *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  int v89;
  NSObject *v90;
  id v91;
  void *v92;
  uint64_t v93;
  _QWORD v94[6];
  _QWORD v95[4];
  id v96;
  _BYTE *v97;
  uint8_t v98[4];
  id v99;
  __int16 v100;
  void *v101;
  _BYTE v102[24];
  char v103;
  _BYTE buf[24];
  uint64_t (*v105)(uint64_t, uint64_t);
  void (*v106)(uint64_t);
  id v107;
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  if ((unint64_t)objc_msgSend(*(id *)(a1 + 16), "callTreeAggregation") >= 4)
  {
    v12 = *(void **)(a1 + 8);
    if (!v12)
    {
      v15 = *__error();
      _sa_logt();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        v43 = objc_msgSend(*(id *)(a1 + 16), "callTreeAggregation");
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v43;
        _os_log_error_impl(&dword_1B9BE0000, v16, OS_LOG_TYPE_ERROR, "unknown callTreeAggregation %llu", buf, 0xCu);
      }
      goto LABEL_27;
    }
    v93 = objc_msgSend(*(id *)(a1 + 16), "callTreeAggregation");
    v13 = CFSTR("unknown callTreeAggregation %llu");
  }
  else
  {
    if ((unint64_t)objc_msgSend(*(id *)(a1 + 16), "swiftAsyncCallTreeAggregation") < 6)
    {
      v2 = *(_QWORD *)(a1 + 16);
      if (!v2
        || (v3 = *(_QWORD *)(v2 + 168), v3 == 1)
        || !v3 && !*(_BYTE *)(v2 + 11)
        || (v4 = *(_QWORD *)(v2 + 152), v4 == 3)
        || !v4 && *(_BYTE *)(v2 + 11))
      {
        objc_msgSend(*(id *)(a1 + 160), "targetProcess");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(*(id *)(a1 + 160), "targetDispatchQueueId"))
        {
          if (!v5)
          {
            v29 = *(void **)(a1 + 8);
            if (v29)
            {
              objc_msgSend(v29, "printWithFormat:", CFSTR("targeting dispatch queue %llu, but no target task"), objc_msgSend(*(id *)(a1 + 160), "targetDispatchQueueId"));
            }
            else
            {
              v40 = *__error();
              _sa_logt();
              v41 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
              {
                v70 = objc_msgSend(*(id *)(a1 + 160), "targetDispatchQueueId");
                *(_DWORD *)buf = 134217984;
                *(_QWORD *)&buf[4] = v70;
                _os_log_error_impl(&dword_1B9BE0000, v41, OS_LOG_TYPE_ERROR, "targeting dispatch queue %llu, but no target task", buf, 0xCu);
              }

              *__error() = v40;
            }
            goto LABEL_76;
          }
          objc_msgSend(v5, "dispatchQueues");
          v6 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(*(id *)(a1 + 160), "targetDispatchQueueId"));
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "objectForKeyedSubscript:", v7);
          v8 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v8)
          {
            v9 = *(void **)(a1 + 8);
            if (v9)
            {
              v10 = objc_msgSend(*(id *)(a1 + 160), "targetDispatchQueueId");
              -[SASamplePrinter displayNameForTask:]((void *)a1, v5);
              v11 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v9, "printWithFormat:", CFSTR("targeting dispatch queue %llu in %@ but no such dispatch queue found"), v10, v11);

            }
            else
            {
              v44 = *__error();
              _sa_logt();
              v45 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
              {
                v73 = objc_msgSend(*(id *)(a1 + 160), "targetDispatchQueueId");
                -[SASamplePrinter displayNameForTask:]((void *)a1, v5);
                v74 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 134218242;
                *(_QWORD *)&buf[4] = v73;
                *(_WORD *)&buf[12] = 2112;
                *(_QWORD *)&buf[14] = v74;
                _os_log_error_impl(&dword_1B9BE0000, v45, OS_LOG_TYPE_ERROR, "targeting dispatch queue %llu in %@ but no such dispatch queue found", buf, 0x16u);

              }
              *__error() = v44;
            }
LABEL_76:
            v17 = 1;
LABEL_163:

            return v17;
          }
        }
        else
        {
          v8 = 0;
        }
        v19 = objc_msgSend(*(id *)(a1 + 160), "targetThreadId");
        if (v19)
        {
          if (!v5)
          {
            v36 = *(void **)(a1 + 8);
            if (v36)
            {
              objc_msgSend(v36, "printWithFormat:", CFSTR("targeting thread 0x%llx, but no target task"), objc_msgSend(*(id *)(a1 + 160), "targetThreadId"));
LABEL_161:
              v17 = 1;
              goto LABEL_162;
            }
            v46 = *__error();
            _sa_logt();
            v47 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
            {
              v75 = objc_msgSend(*(id *)(a1 + 160), "targetThreadId");
              *(_DWORD *)buf = 134217984;
              *(_QWORD *)&buf[4] = v75;
              _os_log_error_impl(&dword_1B9BE0000, v47, OS_LOG_TYPE_ERROR, "targeting thread 0x%llx, but no target task", buf, 0xCu);
            }

            v48 = __error();
LABEL_80:
            *v48 = v46;
            goto LABEL_161;
          }
          objc_msgSend(v5, "threads");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(*(id *)(a1 + 160), "targetThreadId"));
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "objectForKeyedSubscript:", v21);
          v22 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v22)
          {
            v37 = *(void **)(a1 + 8);
            if (v37)
            {
              v38 = objc_msgSend(*(id *)(a1 + 160), "targetThreadId");
              -[SASamplePrinter displayNameForTask:]((void *)a1, v5);
              v39 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v37, "printWithFormat:", CFSTR("targeting thread 0x%llx in %@ but no such thread found"), v38, v39);

            }
            else
            {
              v51 = *__error();
              _sa_logt();
              v52 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
              {
                v76 = objc_msgSend(*(id *)(a1 + 160), "targetThreadId");
                -[SASamplePrinter displayNameForTask:]((void *)a1, v5);
                v77 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 134218242;
                *(_QWORD *)&buf[4] = v76;
                *(_WORD *)&buf[12] = 2112;
                *(_QWORD *)&buf[14] = v77;
                _os_log_error_impl(&dword_1B9BE0000, v52, OS_LOG_TYPE_ERROR, "targeting thread 0x%llx in %@ but no such thread found", buf, 0x16u);

              }
              *__error() = v51;
            }
            goto LABEL_161;
          }
          if (v8)
          {
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = buf;
            *(_QWORD *)&buf[16] = 0x2020000000;
            LOBYTE(v105) = 0;
            v23 = *(_QWORD *)(a1 + 32);
            v24 = *(_QWORD *)(a1 + 40);
            v25 = *(_QWORD *)(a1 + 48);
            v26 = *(_QWORD *)(a1 + 56);
            v95[0] = MEMORY[0x1E0C809B0];
            v95[1] = 3221225472;
            v95[2] = __37__SASamplePrinter_checkForBadOptions__block_invoke;
            v95[3] = &unk_1E7147660;
            v27 = v8;
            v96 = v27;
            v97 = buf;
            objc_msgSend(v22, "enumerateThreadStatesBetweenStartTime:startSampleIndex:endTime:endSampleIndex:reverseOrder:block:", v23, v25, v24, v26, 0, v95);
            if (!*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
            {
              v50 = *(void **)(a1 + 8);
              if (v50)
              {
                objc_msgSend(v50, "printWithFormat:", CFSTR("Target dispatch queue %llu never runs on target thread 0x%llx"), objc_msgSend(v27, "identifier"), objc_msgSend(v22, "threadId"));
              }
              else
              {
                v61 = *__error();
                _sa_logt();
                v62 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
                {
                  v86 = objc_msgSend(v27, "identifier");
                  v87 = objc_msgSend(v22, "threadId");
                  *(_DWORD *)v102 = 134218240;
                  *(_QWORD *)&v102[4] = v86;
                  *(_WORD *)&v102[12] = 2048;
                  *(_QWORD *)&v102[14] = v87;
                  _os_log_error_impl(&dword_1B9BE0000, v62, OS_LOG_TYPE_ERROR, "Target dispatch queue %llu never runs on target thread 0x%llx", v102, 0x16u);
                }

                *__error() = v61;
              }

              _Block_object_dispose(buf, 8);
              goto LABEL_161;
            }

            _Block_object_dispose(buf, 8);
            v28 = 1;
          }
          else
          {
            v28 = 0;
          }
        }
        else
        {
          v22 = 0;
          v28 = v8 != 0;
        }
        if ((objc_msgSend(*(id *)(a1 + 16), "printHeavyStacks") & 1) != 0)
        {
LABEL_43:
          if ((v19 != 0) | (v28 | objc_msgSend(*(id *)(a1 + 16), "printTargetThreadOnly") ^ 1) & 1)
            goto LABEL_172;
          if (!v5)
          {
            v53 = *(void **)(a1 + 8);
            if (v53)
            {
              objc_msgSend(v53, "printWithFormat:", CFSTR("printTargetThreadOnly, but no target task provided"));
            }
            else
            {
              v63 = *__error();
              _sa_logt();
              v64 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_error_impl(&dword_1B9BE0000, v64, OS_LOG_TYPE_ERROR, "printTargetThreadOnly, but no target task provided", buf, 2u);
              }

              *__error() = v63;
            }
            goto LABEL_161;
          }
          objc_msgSend(v5, "mainThread");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          v31 = v30 == 0;

          if (!v31)
          {
LABEL_172:
            if (objc_msgSend(*(id *)(a1 + 16), "systemstatsFormat"))
            {
              if (objc_msgSend(*(id *)(a1 + 16), "displayIOInCallTrees"))
              {
                v32 = *(void **)(a1 + 8);
                if (v32)
                {
                  objc_msgSend(v32, "printWithFormat:", CFSTR("displayIOInCallTrees not supported with systemstatsFormat"));
LABEL_141:

                  goto LABEL_161;
                }
                v65 = *__error();
                _sa_logt();
                v66 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)buf = 0;
                  _os_log_error_impl(&dword_1B9BE0000, v66, OS_LOG_TYPE_ERROR, "displayIOInCallTrees not supported with systemstatsFormat", buf, 2u);
                }
                goto LABEL_140;
              }
              if (objc_msgSend(*(id *)(a1 + 16), "callTreeTimestampsTimeDomain")
                && objc_msgSend(*(id *)(a1 + 16), "callTreeTimestampsTimeDomain") != 1)
              {
                v68 = *(void **)(a1 + 8);
                if (v68)
                {
                  objc_msgSend(v68, "printWithFormat:", CFSTR("callTreeTimestampsTimeDomain time domains other than kSATimeDomainWallTime not supported with systemstatsFormat"));
                  goto LABEL_141;
                }
                v65 = *__error();
                _sa_logt();
                v66 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)buf = 0;
                  _os_log_error_impl(&dword_1B9BE0000, v66, OS_LOG_TYPE_ERROR, "callTreeTimestampsTimeDomain time domains other than kSATimeDomainWallTime not supported with systemstatsFormat", buf, 2u);
                }
                goto LABEL_140;
              }
            }
            if (!objc_msgSend(*(id *)(a1 + 16), "swiftAsyncPrintLeafyCCallstackOnTopOfSwiftAsyncCallstacksAlways")|| !objc_msgSend(*(id *)(a1 + 16), "swiftAsyncPrintLeafyCCallstackOnTopOfCRootCallstacksAlways"))
            {

              v17 = 0;
LABEL_162:

              goto LABEL_163;
            }
            v56 = *(void **)(a1 + 8);
            if (v56)
            {
              objc_msgSend(v56, "printWithFormat:", CFSTR("swiftAsyncPrintLeafyCCallstackOnTopOfSwiftAsyncCallstacksAlways and swiftAsyncPrintLeafyCCallstackOnTopOfCRootCallstacksAlways both set"));
              goto LABEL_141;
            }
            v65 = *__error();
            _sa_logt();
            v66 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_error_impl(&dword_1B9BE0000, v66, OS_LOG_TYPE_ERROR, "swiftAsyncPrintLeafyCCallstackOnTopOfSwiftAsyncCallstacksAlways and swiftAsyncPrintLeafyCCallstackOnTopOfCRootCallstacksAlways both set", buf, 2u);
            }
LABEL_140:

            *__error() = v65;
            goto LABEL_141;
          }
          v59 = *(void **)(a1 + 8);
          if (v59)
          {
            -[SASamplePrinter displayNameForTask:]((void *)a1, v5);
            v60 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v59, "printWithFormat:", CFSTR("printTargetThreadOnly, but target task %@ has no main thread"), v60);

            goto LABEL_161;
          }
          v46 = *__error();
          _sa_logt();
          v69 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
          {
            -[SASamplePrinter displayNameForTask:]((void *)a1, v5);
            v88 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v88;
            _os_log_error_impl(&dword_1B9BE0000, v69, OS_LOG_TYPE_ERROR, "printTargetThreadOnly, but target task %@ has no main thread", buf, 0xCu);

          }
          v48 = __error();
          goto LABEL_80;
        }
        if (!-[SASamplePrinter hasTimeIndexes](a1))
        {
          v42 = *(void **)(a1 + 8);
          if (v42)
          {
            objc_msgSend(v42, "printWithFormat:", CFSTR("cannot display timeline format without time indexes"));
            goto LABEL_160;
          }
          v54 = *__error();
          _sa_logt();
          v55 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1B9BE0000, v55, OS_LOG_TYPE_ERROR, "cannot display timeline format without time indexes", buf, 2u);
          }
LABEL_159:

          *__error() = v54;
          goto LABEL_160;
        }
        if ((objc_msgSend(*(id *)(a1 + 16), "displayBlockedThreads") & 1) == 0)
        {
          v49 = *(void **)(a1 + 8);
          if (v49)
          {
            objc_msgSend(v49, "printWithFormat:", CFSTR("cannot display timeline format without displaying blocked threads"));
            goto LABEL_160;
          }
          v54 = *__error();
          _sa_logt();
          v55 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1B9BE0000, v55, OS_LOG_TYPE_ERROR, "cannot display timeline format without displaying blocked threads", buf, 2u);
          }
          goto LABEL_159;
        }
        if ((objc_msgSend(*(id *)(a1 + 16), "displayRunnableThreads") & 1) == 0)
        {
          v58 = *(void **)(a1 + 8);
          if (v58)
          {
            objc_msgSend(v58, "printWithFormat:", CFSTR("cannot display timeline format without displaying runnable threads"));
            goto LABEL_160;
          }
          v54 = *__error();
          _sa_logt();
          v55 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1B9BE0000, v55, OS_LOG_TYPE_ERROR, "cannot display timeline format without displaying runnable threads", buf, 2u);
          }
          goto LABEL_159;
        }
        if ((objc_msgSend(*(id *)(a1 + 16), "displayRunningThreads") & 1) == 0)
        {
          v67 = *(void **)(a1 + 8);
          if (v67)
          {
            objc_msgSend(v67, "printWithFormat:", CFSTR("cannot display timeline format without displaying running threads"));
            goto LABEL_160;
          }
          v54 = *__error();
          _sa_logt();
          v55 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1B9BE0000, v55, OS_LOG_TYPE_ERROR, "cannot display timeline format without displaying running threads", buf, 2u);
          }
          goto LABEL_159;
        }
        v33 = *(_QWORD *)(a1 + 16);
        if (v33)
        {
          v34 = *(_QWORD *)(v33 + 152);
          if (v34 == 3 || !v34 && *(_BYTE *)(v33 + 11))
          {
            v35 = *(void **)(a1 + 8);
            if (v35)
            {
              objc_msgSend(v35, "printWithFormat:", CFSTR("conflicting display options: kSAAggregateCallTreesByProcess and !printHeavyStacks"));
LABEL_160:

              goto LABEL_161;
            }
            v54 = *__error();
            _sa_logt();
            v55 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_error_impl(&dword_1B9BE0000, v55, OS_LOG_TYPE_ERROR, "conflicting display options: kSAAggregateCallTreesByProcess and !printHeavyStacks", buf, 2u);
            }
            goto LABEL_159;
          }
          v71 = *(_QWORD *)(v33 + 160);
          if (v71)
          {
            if (v71 != 2)
            {
              if (v71 == 4)
              {
                v72 = *(void **)(a1 + 8);
                if (v72)
                {
                  objc_msgSend(v72, "printWithFormat:", CFSTR("conflicting display options: kSAAggregateSwiftAsyncCallTreesByProcess and !printHeavyStacks"));
                  goto LABEL_160;
                }
                v54 = *__error();
                _sa_logt();
                v55 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)buf = 0;
                  _os_log_error_impl(&dword_1B9BE0000, v55, OS_LOG_TYPE_ERROR, "conflicting display options: kSAAggregateSwiftAsyncCallTreesByProcess and !printHeavyStacks", buf, 2u);
                }
                goto LABEL_159;
              }
              goto LABEL_148;
            }
          }
          else if (!*(_BYTE *)(v33 + 14))
          {
            goto LABEL_148;
          }
          v78 = *(void **)(a1 + 8);
          if (v78)
          {
            objc_msgSend(v78, "printWithFormat:", CFSTR("conflicting display options: kSAAggregateSwiftAsyncCallTreesByBaseFunction and !printHeavyStacks"));
            goto LABEL_160;
          }
          v54 = *__error();
          _sa_logt();
          v55 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1B9BE0000, v55, OS_LOG_TYPE_ERROR, "conflicting display options: kSAAggregateSwiftAsyncCallTreesByBaseFunction and !printHeavyStacks", buf, 2u);
          }
          goto LABEL_159;
        }
LABEL_148:
        if (v8 && !v19 && objc_msgSend(v8, "hasConcurrentExecution"))
        {
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = buf;
          *(_QWORD *)&buf[16] = 0x3032000000;
          v105 = __Block_byref_object_copy__4;
          v106 = __Block_byref_object_dispose__4;
          v107 = 0;
          *(_QWORD *)v102 = 0;
          *(_QWORD *)&v102[8] = v102;
          *(_QWORD *)&v102[16] = 0x2020000000;
          v103 = 0;
          v79 = *(void **)(a1 + 32);
          v80 = *(void **)(a1 + 40);
          v81 = *(_QWORD *)(a1 + 48);
          v82 = *(_QWORD *)(a1 + 56);
          v94[0] = MEMORY[0x1E0C809B0];
          v94[1] = 3221225472;
          v94[2] = __37__SASamplePrinter_checkForBadOptions__block_invoke_275;
          v94[3] = &unk_1E7148EC0;
          v94[4] = buf;
          v94[5] = v102;
          -[SARecipe enumerateStatesBetweenStartTime:startSampleIndex:endTime:endSampleIndex:reverseOrder:block:]((uint64_t)v8, v79, v81, v80, v82, 0, v94);
          if (*(_BYTE *)(*(_QWORD *)&v102[8] + 24))
          {
            v83 = *(void **)(a1 + 8);
            if (v83)
            {
              -[SASamplePrinter displayNameForDispatchQueue:](v8);
              v84 = (void *)objc_claimAutoreleasedReturnValue();
              -[SASamplePrinter displayNameForTask:]((void *)a1, v5);
              v85 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v83, "printWithFormat:", CFSTR("cannot display timeline format with concurrent target dispatch queue %@ in %@"), v84, v85);

            }
            else
            {
              v89 = *__error();
              _sa_logt();
              v90 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
              {
                -[SASamplePrinter displayNameForDispatchQueue:](v8);
                v91 = (id)objc_claimAutoreleasedReturnValue();
                -[SASamplePrinter displayNameForTask:]((void *)a1, v5);
                v92 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)v98 = 138412546;
                v99 = v91;
                v100 = 2112;
                v101 = v92;
                _os_log_error_impl(&dword_1B9BE0000, v90, OS_LOG_TYPE_ERROR, "cannot display timeline format with concurrent target dispatch queue %@ in %@", v98, 0x16u);

              }
              *__error() = v89;
            }
            _Block_object_dispose(v102, 8);
            _Block_object_dispose(buf, 8);

            goto LABEL_161;
          }
          _Block_object_dispose(v102, 8);
          _Block_object_dispose(buf, 8);

        }
        goto LABEL_43;
      }
      v14 = *(void **)(a1 + 8);
      if (v14)
      {
        v13 = CFSTR("conflicting display options: aggregation of multiple task instances requires kSAAggregateCallTreesByProcess");
        goto LABEL_21;
      }
      v15 = *__error();
      _sa_logt();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1B9BE0000, v16, OS_LOG_TYPE_ERROR, "conflicting display options: aggregation of multiple task instances requires kSAAggregateCallTreesByProcess", buf, 2u);
      }
LABEL_27:

      *__error() = v15;
      return 1;
    }
    v12 = *(void **)(a1 + 8);
    if (!v12)
    {
      v15 = *__error();
      _sa_logt();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        v57 = objc_msgSend(*(id *)(a1 + 16), "callTreeAggregation");
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v57;
        _os_log_error_impl(&dword_1B9BE0000, v16, OS_LOG_TYPE_ERROR, "unknown swiftAsyncCallTreeAggregation %llu", buf, 0xCu);
      }
      goto LABEL_27;
    }
    v93 = objc_msgSend(*(id *)(a1 + 16), "callTreeAggregation");
    v13 = CFSTR("unknown swiftAsyncCallTreeAggregation %llu");
  }
  v14 = v12;
LABEL_21:
  objc_msgSend(v14, "printWithFormat:", v13, v93);
  return 1;
}

- (id)displayNameForTask:(void *)a1
{
  if (a1)
  {
    -[SASamplePrinter displayNameForTask:includePid:](a1, a2, 1);
    a1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return a1;
}

void __37__SASamplePrinter_checkForBadOptions__block_invoke(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  void *v7;

  objc_msgSend(a2, "dispatchQueue");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = *(void **)(a1 + 32);

  if (v6 == v7)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
  }
}

void __37__SASamplePrinter_checkForBadOptions__block_invoke_275(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;

  v5 = a2;
  v6 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v14 = v5;
  if (v6)
  {
    objc_msgSend(v5, "threadState");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "startTimestamp");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v6, "gt:", v8);

    v5 = v14;
    if (v9)
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
      *a3 = 1;
    }
  }
  objc_msgSend(v5, "threadState");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "endTimestamp");
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v13 = *(void **)(v12 + 40);
  *(_QWORD *)(v12 + 40) = v11;

}

- (__CFString)displayNameForDispatchQueue:(void *)a1
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  __CFString *v7;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "dispatchQueueLabel");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    v4 = objc_alloc(MEMORY[0x1E0CB3940]);
    if (v3)
    {
      objc_msgSend(v2, "dispatchQueueLabel");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      SACopySanitizedString(v5, 1, 0);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = (__CFString *)objc_msgSend(v4, "initWithFormat:", CFSTR("\"%@\"(%llu)"), v6, objc_msgSend(v2, "identifier"));

    }
    else
    {
      v7 = (__CFString *)objc_msgSend(v4, "initWithFormat:", CFSTR("%llu"), objc_msgSend(v2, "identifier"));
    }
  }
  else
  {
    v7 = CFSTR("none");
  }

  return v7;
}

void __60__SASamplePrinter_printProcessesWithHIESwallowedExceptions___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  int v5;
  int v6;
  int HasSwallowedAnExceptionNotedByHIException;
  void *v8;
  void *v9;
  void *v10;

  v3 = a2;
  v4 = v3;
  if (*(id *)(a1 + 32) != v3)
  {
    v10 = v3;
    v5 = objc_msgSend(v3, "rpid");
    v4 = v10;
    if (v5 == *(_DWORD *)(a1 + 56) || (v6 = objc_msgSend(v10, "ppid"), v4 = v10, v6 == *(_DWORD *)(a1 + 56)))
    {
      HasSwallowedAnExceptionNotedByHIException = TaskHasSwallowedAnExceptionNotedByHIException(v4);
      v4 = v10;
      if (HasSwallowedAnExceptionNotedByHIException)
      {
        v8 = *(void **)(a1 + 40);
        -[SASamplePrinter displayNameForTask:](*(void **)(a1 + 48), v10);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "addObject:", v9);

        v4 = v10;
      }
    }
  }

}

void __58__SASamplePrinter_printLaunchdThrottledProcessesToStream___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  SATimeRangeOfSamples *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;

  v25 = a2;
  objc_msgSend(v25, "name");
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)v3;
  if (*(_BYTE *)(a1 + 64))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48);
    v6 = objc_msgSend(v25, "startSampleIndex");
    if (v5 <= v6)
      v7 = v6;
    else
      v7 = v5;
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56);
    v9 = objc_msgSend(v25, "endSampleIndex");
    if (v8 >= v9)
      v8 = v9;
    if (!v4)
      goto LABEL_14;
  }
  else
  {
    v8 = 0x7FFFFFFFFFFFFFFFLL;
    v7 = 0x7FFFFFFFFFFFFFFFLL;
    if (!v3)
    {
LABEL_14:
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v13 = *(void **)(v12 + 40);
      *(_QWORD *)(v12 + 40) = 0;

      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v15 = *(void **)(v14 + 40);
      *(_QWORD *)(v14 + 40) = 0;

      goto LABEL_19;
    }
  }
  if ((objc_msgSend(v4, "containsString:", CFSTR("throttled")) & 1) == 0)
    goto LABEL_14;
  v10 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  if (v10 && objc_msgSend(v10, "isEqual:", v4))
  {
    objc_msgSend(v25, "endTimestamp");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "setEndTime:", v11);

    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "setEndSampleIndex:", v8);
  }
  else
  {
    v16 = [SATimeRangeOfSamples alloc];
    objc_msgSend(v25, "startTimestamp");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "endTimestamp");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = -[SATimeRangeOfSamples initWithStartTime:endTime:startSampleIndex:endSampleIndex:](v16, "initWithStartTime:endTime:startSampleIndex:endSampleIndex:", v17, v18, v7, v8);
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v21 = *(void **)(v20 + 40);
    *(_QWORD *)(v20 + 40) = v19;

    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v4);
    objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", v4);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = v22;
    if (v22)
    {
      objc_msgSend(v22, "addObject:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
    }
    else
    {
      v24 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithObjects:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), 0);
      objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v24, v4);

    }
  }
LABEL_19:

}

void __58__SASamplePrinter_printLaunchdThrottledProcessesToStream___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  void *v33;
  void *v34;
  void *v35;
  double v36;
  double v37;
  void *v38;
  void *v39;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  id v44;
  id v45;
  uint64_t v46;
  int obj;
  id obja;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[128];
  _BYTE v58[128];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
  objc_msgSend(v7, "appendFormat:", CFSTR("%@"), v5);
  if (*(_BYTE *)(a1 + 48))
  {
    v44 = v5;
    objc_msgSend(v7, "appendFormat:", CFSTR(":"));
    v8 = *(_QWORD *)(a1 + 32);
    v45 = v6;
    v46 = a1;
    if (*(_BYTE *)(a1 + 49))
    {
      v9 = *(_QWORD *)(v8 + 48);
      v53 = 0u;
      v54 = 0u;
      v55 = 0u;
      v56 = 0u;
      v10 = v6;
      v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v53, v58, 16);
      if (v11)
      {
        v12 = v11;
        v13 = 0;
        v14 = *(_QWORD *)v54;
        do
        {
          for (i = 0; i != v12; ++i)
          {
            if (*(_QWORD *)v54 != v14)
              objc_enumerationMutation(v10);
            v16 = *(void **)(*((_QWORD *)&v53 + 1) + 8 * i);
            if (objc_msgSend(v16, "startSampleIndex") != 0x7FFFFFFFFFFFFFFFLL
              && objc_msgSend(v16, "endSampleIndex") != 0x7FFFFFFFFFFFFFFFLL)
            {
              obj = v13;
              if (v13 >= 1)
                objc_msgSend(v7, "appendFormat:", CFSTR(","));
              if (v9 < objc_msgSend(v16, "startSampleIndex"))
              {
                v17 = objc_msgSend(v16, "startSampleIndex") - 1;
                v18 = -[SASamplePrinter displayTimeIndexForSampleIndex:](*(_QWORD *)(v46 + 32), v9);
                if (v9 == v17)
                  objc_msgSend(v7, "appendFormat:", CFSTR(" not throttled sample %lu,"), v18, v43);
                else
                  objc_msgSend(v7, "appendFormat:", CFSTR(" not throttled samples %lu-%lu,"), v18, -[SASamplePrinter displayTimeIndexForSampleIndex:](*(_QWORD *)(v46 + 32), objc_msgSend(v16, "startSampleIndex") - 1));
              }
              v19 = objc_msgSend(v16, "startSampleIndex");
              v20 = objc_msgSend(v16, "endSampleIndex");
              v21 = -[SASamplePrinter displayTimeIndexForSampleIndex:](*(_QWORD *)(v46 + 32), objc_msgSend(v16, "startSampleIndex"));
              v22 = v21;
              if (v19 >= v20)
              {
                objc_msgSend(v7, "appendFormat:", CFSTR(" throttled sample %lu"), v21);
              }
              else
              {
                v43 = -[SASamplePrinter displayTimeIndexForSampleIndex:](*(_QWORD *)(v46 + 32), objc_msgSend(v16, "endSampleIndex"));
                objc_msgSend(v7, "appendFormat:", CFSTR(" throttled samples %lu-%lu"), v22);
              }
              v9 = objc_msgSend(v16, "endSampleIndex") + 1;
              v13 = obj + 1;
            }
          }
          v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v53, v58, 16);
        }
        while (v12);
      }

      v6 = v45;
      a1 = v46;
      v23 = *(_QWORD *)(v46 + 32);
      v24 = *(_QWORD *)(v23 + 56);
      v5 = v44;
      if (v9 <= v24)
      {
        if (-[SASamplePrinter hasTimeIndexes](*(_QWORD *)(v46 + 32)))
        {
          v25 = v9 + 1;
          if (objc_msgSend(*(id *)(v23 + 16), "forceOneBasedTimeIndexes"))
            v25 -= *(_QWORD *)(v23 + 48);
        }
        else
        {
          v25 = 0x7FFFFFFFFFFFFFFFLL;
        }
        if (v9 == v24)
          objc_msgSend(v7, "appendFormat:", CFSTR(", not throttled sample %lu"), v25, v43);
        else
          objc_msgSend(v7, "appendFormat:", CFSTR(", not throttled samples %lu-%lu"), v25, -[SASamplePrinter displayTimeIndexForSampleIndex:](*(_QWORD *)(v46 + 32), *(_QWORD *)(*(_QWORD *)(v46 + 32) + 56)));
        v6 = v45;
      }
    }
    else
    {
      v26 = *(id *)(v8 + 32);
      v49 = 0u;
      v50 = 0u;
      v51 = 0u;
      v52 = 0u;
      obja = v6;
      v27 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v49, v57, 16);
      if (v27)
      {
        v28 = v27;
        v29 = 0;
        v30 = *(_QWORD *)v50;
        do
        {
          v31 = 0;
          v32 = v29;
          v33 = v26;
          do
          {
            if (*(_QWORD *)v50 != v30)
              objc_enumerationMutation(obja);
            v34 = *(void **)(*((_QWORD *)&v49 + 1) + 8 * v31);
            if (v32 + (int)v31 >= 1)
              objc_msgSend(v7, "appendFormat:", CFSTR(","));
            objc_msgSend(v34, "startTime");
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v33, "deltaSecondsTo:timeDomainPriorityList:timeDomainUsed:", v35, &unk_1E7167A88, 0);
            v37 = v36;

            if (v37 > 0.0)
              objc_msgSend(v7, "appendFormat:", CFSTR(" not throttled %.2fs,"), *(_QWORD *)&v37);
            objc_msgSend(v34, "startTime");
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v34, "endTime");
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v38, "deltaSecondsTo:timeDomainPriorityList:timeDomainUsed:", v39, &unk_1E7167AA0, 0);
            v41 = v40;

            if (v41 > 0.0)
              objc_msgSend(v7, "appendFormat:", CFSTR(" throttled %.2fs"), *(_QWORD *)&v41);
            objc_msgSend(v34, "endTime");
            v26 = (id)objc_claimAutoreleasedReturnValue();

            ++v31;
            v33 = v26;
          }
          while (v28 != v31);
          v29 = v32 + v28;
          v28 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v49, v57, 16);
        }
        while (v28);
      }

      objc_msgSend(v26, "deltaSecondsTo:timeDomainPriorityList:timeDomainUsed:", *(_QWORD *)(*(_QWORD *)(v46 + 32) + 40), &unk_1E7167AB8, 0);
      if (v42 > 0.0)
        objc_msgSend(v7, "appendFormat:", CFSTR(", not throttled %.2fs"), *(_QWORD *)&v42);

      v5 = v44;
      v6 = v45;
      a1 = v46;
    }
  }
  objc_msgSend(*(id *)(a1 + 40), "printWithFormat:", CFSTR("  %@\n"), v7);

}

- (uint64_t)displayTimeIndexForSampleIndex:(uint64_t)result
{
  uint64_t v3;
  int v4;

  if (result)
  {
    v3 = result;
    if (-[SASamplePrinter hasTimeIndexes](result))
    {
      v4 = objc_msgSend(*(id *)(v3 + 16), "forceOneBasedTimeIndexes");
      result = a2 + 1;
      if (v4)
        result -= *(_QWORD *)(v3 + 48);
    }
    else
    {
      return 0x7FFFFFFFFFFFFFFFLL;
    }
  }
  return result;
}

void __63__SASamplePrinter_printProcessesHittingWQThreadLimitsToStream___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = a2;
  objc_msgSend(v7, "taskStates");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "lastObject");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4 && objc_msgSend(v4, "wqExceededTotalThreadLimit"))
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
    {
      objc_msgSend(*(id *)(a1 + 32), "printWithFormat:", CFSTR(", "));
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 32), "printWithFormat:", CFSTR("Processes reached dispatch thread hard limit (%u): "), objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 160), "workQueueHardThreadLimit"));
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
    }
    v5 = *(void **)(a1 + 32);
    -[SASamplePrinter displayNameForTask:](*(void **)(a1 + 40), v7);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "printWithFormat:", CFSTR("%@"), v6);

  }
}

void __63__SASamplePrinter_printProcessesHittingWQThreadLimitsToStream___block_invoke_2(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = a2;
  objc_msgSend(v7, "taskStates");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "lastObject");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4 && objc_msgSend(v4, "wqExceededConstrainedThreadLimit"))
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
    {
      objc_msgSend(*(id *)(a1 + 32), "printWithFormat:", CFSTR(", "));
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 32), "printWithFormat:", CFSTR("Processes reached dispatch thread soft limit (%u): "), objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 160), "workQueueSoftThreadLimit"));
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
    }
    v5 = *(void **)(a1 + 32);
    -[SASamplePrinter displayNameForTask:](*(void **)(a1 + 40), v7);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "printWithFormat:", CFSTR("%@"), v6);

  }
}

- (id)displayNameForPid:(uint64_t)a3 threadId:(void *)a4 timestamp:
{
  id v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  void *v11;
  id v13;
  const __CFString *v14;
  id v15;
  const __CFString *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v7 = a4;
  if (!a1)
  {
    v9 = 0;
    goto LABEL_11;
  }
  if ((_DWORD)a2 != -1 || a3)
  {
    v10 = (_QWORD *)a1[20];
    if (v7)
      -[SASampleStore taskWithPid:orTid:atTimestamp:](v10, a2, a3, v7);
    else
      -[SASampleStore lastTaskWithPid:orTid:](v10, a2, a3);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (v11)
    {
      -[SASamplePrinter displayNameForTask:threadId:](a1, v11, a3);
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      goto LABEL_11;
    }
    if (a3)
    {
      v13 = objc_alloc(MEMORY[0x1E0CB3940]);
      if ((_DWORD)a2 == -1)
      {
        v8 = objc_msgSend(v13, "initWithFormat:", CFSTR("UNKNOWN TASK thread 0x%llx"), a3, v18, v19);
      }
      else
      {
        v14 = CFSTR("UNKNOWN");
        if (!(_DWORD)a2)
          v14 = CFSTR("kernel_task");
        v8 = objc_msgSend(v13, "initWithFormat:", CFSTR("%@ [%d] thread 0x%llx"), v14, a2, a3);
      }
      goto LABEL_5;
    }
    if ((_DWORD)a2 != -1)
    {
      v15 = objc_alloc(MEMORY[0x1E0CB3940]);
      v16 = CFSTR("UNKNOWN");
      if (!(_DWORD)a2)
        v16 = CFSTR("kernel_task");
      v8 = objc_msgSend(v15, "initWithFormat:", CFSTR("%@ [%d]"), v16, a2, v19);
      goto LABEL_5;
    }
  }
  v8 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("UNKNOWN TASK"), v17, v18, v19);
LABEL_5:
  v9 = (void *)v8;
LABEL_11:

  return v9;
}

- (__CFString)displayStringForResourceCoalition:(void *)a1
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  __CFString *v5;

  v1 = a1;
  if (objc_msgSend(v1, "resourceCoalitionID"))
  {
    objc_msgSend(v1, "resourceCoalitionName");
    v2 = (void *)objc_claimAutoreleasedReturnValue();

    v3 = objc_alloc(MEMORY[0x1E0CB3940]);
    if (v2)
    {
      objc_msgSend(v1, "resourceCoalitionName");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = (__CFString *)objc_msgSend(v3, "initWithFormat:", CFSTR("\"%@\"(%llu)"), v4, objc_msgSend(v1, "resourceCoalitionID"));

    }
    else
    {
      v5 = (__CFString *)objc_msgSend(v3, "initWithFormat:", CFSTR("%llu"), objc_msgSend(v1, "resourceCoalitionID"));
    }
  }
  else
  {
    v5 = CFSTR("none");
  }

  return v5;
}

- (id)displayStringForOnBehalfOfForTasks:(uint64_t)a1 includePid:(void *)a2
{
  id v3;
  char v4;
  void *v5;
  void *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  char v10;
  void *v11;
  void *v12;
  unint64_t v13;
  char v14;
  void *v15;
  unint64_t v16;
  void *v17;
  char v18;
  void *v19;
  void *v20;
  unsigned int v21;
  uint64_t v22;
  void *v23;
  unint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  void *v30;
  void *v31;
  SAOnBehalfOfMultiple *v32;
  SAOnBehalfOfMultiple *v33;
  void *v34;
  void *v36;
  SAOnBehalfOfMultiple *v37;
  _QWORD v38[4];
  SAOnBehalfOfMultiple *v39;
  unint64_t v40;
  _QWORD v41[5];
  SAOnBehalfOfMultiple *v42;
  uint64_t *v43;
  unint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, uint64_t);
  void (*v53)(uint64_t);
  id v54;
  _BYTE v55[128];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v37 = objc_alloc_init(SAOnBehalfOfMultiple);
  v49 = 0;
  v50 = &v49;
  v51 = 0x3032000000;
  v52 = __Block_byref_object_copy__4;
  v53 = __Block_byref_object_dispose__4;
  v54 = 0;
  objc_msgSend(*(id *)(a1 + 160), "sampleTimestamps");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v36, "count");
  v5 = *(void **)(a1 + 160);
  if ((v4 & 7) != 0)
  {
    objc_msgSend(v5, "sampleTimestamps");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = ((unint64_t)objc_msgSend(v6, "count") >> 3) + 1;
  }
  else
  {
    objc_msgSend(v5, "sampleTimestamps");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (unint64_t)objc_msgSend(v6, "count") >> 3;
  }
  v8 = *(void **)(a1 + 160);
  if ((v7 & 7) != 0)
  {
    objc_msgSend(v8, "sampleTimestamps");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "count");
    v11 = *(void **)(a1 + 160);
    if ((v10 & 7) != 0)
    {
      objc_msgSend(v11, "sampleTimestamps");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = ((unint64_t)objc_msgSend(v12, "count") >> 3) + 1;
    }
    else
    {
      objc_msgSend(v11, "sampleTimestamps");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = (unint64_t)objc_msgSend(v12, "count") >> 3;
    }
    objc_msgSend(*(id *)(a1 + 160), "sampleTimestamps");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v17, "count");
    v19 = *(void **)(a1 + 160);
    if ((v18 & 7) != 0)
    {
      objc_msgSend(v19, "sampleTimestamps");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = objc_msgSend(v20, "count");

      v22 = ((v21 >> 3) + 1) & 7;
    }
    else
    {
      objc_msgSend(v19, "sampleTimestamps");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = objc_msgSend(v23, "count");

      v22 = (v24 >> 3) & 7;
    }
    v16 = v13 - v22 + 8;
  }
  else
  {
    objc_msgSend(v8, "sampleTimestamps");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v9, "count");
    v15 = *(void **)(a1 + 160);
    if ((v14 & 7) != 0)
    {
      objc_msgSend(v15, "sampleTimestamps");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = ((unint64_t)objc_msgSend(v12, "count") >> 3) + 1;
    }
    else
    {
      objc_msgSend(v15, "sampleTimestamps");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = (unint64_t)objc_msgSend(v12, "count") >> 3;
    }
  }

  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v25 = v3;
  v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v45, v55, 16);
  v27 = MEMORY[0x1E0C809B0];
  if (v26)
  {
    v28 = *(_QWORD *)v46;
    do
    {
      for (i = 0; i != v26; ++i)
      {
        if (*(_QWORD *)v46 != v28)
          objc_enumerationMutation(v25);
        objc_msgSend(*(id *)(*((_QWORD *)&v45 + 1) + 8 * i), "threads");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v41[0] = v27;
        v41[1] = 3221225472;
        v41[2] = __65__SASamplePrinter_displayStringForOnBehalfOfForTasks_includePid___block_invoke;
        v41[3] = &unk_1E7149AE8;
        v41[4] = a1;
        v42 = v37;
        v43 = &v49;
        v44 = v16;
        objc_msgSend(v30, "enumerateKeysAndObjectsUsingBlock:", v41);

      }
      v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v45, v55, 16);
    }
    while (v26);
  }

  if (objc_msgSend((id)v50[5], "count"))
  {
    v31 = (void *)v50[5];
    v38[0] = v27;
    v38[1] = 3221225472;
    v38[2] = __65__SASamplePrinter_displayStringForOnBehalfOfForTasks_includePid___block_invoke_3;
    v38[3] = &unk_1E7149B10;
    v40 = v16;
    v39 = v37;
    objc_msgSend(v31, "enumerateKeysAndObjectsUsingBlock:", v38);

  }
  if (v37 && v37->_count)
  {
    v32 = v37;
    v33 = v32;
    if (v37->_count)
    {
      -[SAOnBehalfOfMultiple displayString](v32);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v34 = 0;
    }

  }
  else
  {
    v34 = 0;
  }
  _Block_object_dispose(&v49, 8);

  return v34;
}

- (id)displayNameForTask:(void *)a3 thread:(void *)a4 threadState:
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (a1)
  {
    if (v7)
    {
      -[SASamplePrinter displayNameForTask:threadId:](a1, v7, objc_msgSend(v8, "threadId"));
      v10 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v10 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Thread 0x%llx"), objc_msgSend(v8, "threadId"));
    }
    a1 = (void *)v10;
    objc_msgSend(v9, "name");
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = (void *)v11;
    if (v11)
    {
      objc_msgSend(a1, "stringByAppendingFormat:", CFSTR(" \"%@\"), v11);
      v13 = objc_claimAutoreleasedReturnValue();

      a1 = (void *)v13;
    }
    objc_msgSend(v9, "dispatchQueue");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v14;
    if (v14)
    {
      -[SASamplePrinter displayNameForDispatchQueue:](v14);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1, "stringByAppendingFormat:", CFSTR(" %@ %@"), CFSTR("DispatchQueue"), v16);
      v17 = objc_claimAutoreleasedReturnValue();

      a1 = (void *)v17;
    }
    objc_msgSend(v9, "swiftTask");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = v18;
    if (v18)
    {
      if (objc_msgSend(v18, "identifier") == -1)
        objc_msgSend(a1, "stringByAppendingFormat:", CFSTR(" %@ %@"), CFSTR("Swift Task"), CFSTR("UNKNOWN"));
      else
        objc_msgSend(a1, "stringByAppendingFormat:", CFSTR(" %@ %llu"), CFSTR("Swift Task"), objc_msgSend(v19, "identifier"));
      v20 = objc_claimAutoreleasedReturnValue();

      a1 = (void *)v20;
    }

  }
  return a1;
}

- (id)architectureStringForTask:(uint64_t)a1
{
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t dest;

  v3 = a2;
  objc_msgSend(v3, "architectureString");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = *(_QWORD *)(a1 + 160);
  if (!v5)
  {
    v6 = 0;
    if (v3)
      goto LABEL_3;
LABEL_10:
    v9 = 0;
    goto LABEL_7;
  }
  v6 = *(_QWORD *)(v5 + 192);
  if (!v3)
    goto LABEL_10;
LABEL_3:
  objc_copyStruct(&dest, v3 + 288, 8, 1, 0);
  v7 = dest;

  if (v6)
  {
    if (v7)
    {
      CSArchitectureGetFamily();
      CSArchitectureGetFamily();
      if ((CSArchitectureMatchesArchitecture() & 1) == 0)
      {
        objc_msgSend(v4, "stringByAppendingString:", CFSTR(" (translated)"));
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = v4;
        v4 = (void *)v8;
LABEL_7:

      }
    }
  }
  return v4;
}

- (void)addTaskHeaderToStream:(void *)a3 displayName:(uint64_t)a4 pid:(void *)a5 mainBinary:(void *)a6 mainBinaryPath:(void *)a7 sharedCaches:(uint64_t)a8 uid:(double)a9 bundleIdentifier:(void *)a10 bundleVersion:(void *)a11 bundleShortVersion:(void *)a12 bundleBuildVersion:(void *)a13 bundleProjectName:(void *)a14 bundleSourceVersion:(void *)a15 bundleProductBuildVersion:(void *)a16 adamID:(uint64_t)a17 installerVersionID:(void *)a18 developerType:(char)a19 appType:(void *)a20 isBeta:(unsigned __int8)a21 cohortID:(void *)a22 vendorID:(void *)a23 distributorID:(void *)a24 codesigningID:(void *)a25 teamID:(void *)a26 resourceCoalitionSampleCounts:(void *)a27 onBehalfOfProcesses:(void *)a28 architectureString:(void *)a29 kernelVersion:(void *)a30 parentName:(void *)a31 responsibleName:(void *)a32 taskExecedFromName:(void *)a33 taskExecedToName:(void *)a34 pidStartTimestamp:(void *)a35 startTimestamp:(void *)a36 endTimestamp:(void *)a37 startSampleIndex:(unint64_t)a38 endSampleIndex:(unint64_t)a39 numSamples:(unint64_t)a40 totalNumSamples:(unint64_t)a41 numSamplesSuspended:(uint64_t)a42 numSamplesTerminated:(uint64_t)a43 startingTaskSize:(unint64_t)a44 endingTaskSize:(unint64_t)a45 maxTaskSize:(unint64_t)a46 startSampleIndexOfMaxTaskSize:(unint64_t)a47 endSampleIndexOfMaxTaskSize:(unint64_t)a48 numPageins:(unsigned int)a49 cpuTimeNs:(unint64_t)a50 cpuInstructions:(unint64_t)a51 cpuCycles:(unint64_t)a52 nonThreadCpuTimeNs:(unint64_t)a53 nonThreadCpuInstructions:(unint64_t)a54 nonThreadCpuCycles:(unint64_t)a55 usesSuddenTermination:(char)a56 allowsIdleExit:(char)a57 isTranslocated:(char)a58 isUnresponsive:(char)a59 timeOfLastResponse:(uint64_t)a60 numThreads:(uint64_t)a61 numIdleWorkQueueThreads:(uint64_t)a62 numOtherHiddenThreads:(char)a63 hieSwallowedException:wqExceededConstrainedThreadLimit:wqExceededTotalThreadLimit:threadsDeadlocked:threadsBlockedByADeadlock:ioSize:numIOs:isReportHeader:
{
  char a64;
  char a65;
  void *a66;
  void *a67;
  unint64_t a68;
  uint64_t a69;
  char a70;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  void *v85;
  void *v86;
  void *v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  int v97;
  void *v98;
  __CFString *v99;
  const char *v100;
  unint64_t v101;
  void *v102;
  void *v103;
  void *v104;
  char v105;
  id v106;
  void *v107;
  void *v108;
  uint64_t v109;
  __CFString *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  __CFString *v119;
  __CFString *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  char v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  __CFString *v150;
  void *v151;
  void *v152;
  void *v153;
  void *v154;
  void *v155;
  const char *v156;
  void *v157;
  int v158;
  BOOL v159;
  void *v160;
  const char *v161;
  void *v162;
  unint64_t v163;
  id v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t i;
  void *v169;
  void *v170;
  void *v171;
  char v172;
  void *v173;
  id v174;
  void *v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t j;
  uint64_t v181;
  void *v182;
  uint64_t v183;
  id v184;
  const char *v185;
  void *v186;
  id v187;
  void *v188;
  void *v189;
  unint64_t v190;
  int v191;
  int v192;
  void *v193;
  void *v194;
  unint64_t v195;
  id v196;
  double v197;
  void *v198;
  void *v199;
  void *v200;
  unint64_t v201;
  int v202;
  char v203;
  void *v204;
  void *v205;
  void *v206;
  void *v207;
  __CFString *v208;
  uint64_t v209;
  void *v210;
  const char *v211;
  const __CFString *v212;
  const char *v213;
  void *v214;
  double v215;
  double v216;
  double v217;
  double v218;
  double v219;
  double v220;
  void *v221;
  double v222;
  double v223;
  double v224;
  double v225;
  double v226;
  double v227;
  double v228;
  double v229;
  double v230;
  double v231;
  void *v232;
  void *v233;
  double v234;
  double v235;
  double v236;
  double v237;
  double v238;
  int v239;
  double v240;
  uint64_t v241;
  int v242;
  __CFString *v243;
  void *v244;
  double v245;
  double v246;
  double v247;
  double v248;
  double v249;
  double v250;
  double v251;
  double v252;
  double v253;
  double v254;
  double v255;
  double v256;
  double v257;
  double v258;
  double v259;
  double v260;
  double v261;
  double v262;
  int v263;
  double v264;
  uint64_t v265;
  int v266;
  __CFString *v267;
  id v268;
  void *v269;
  int v270;
  uint64_t v271;
  void *v272;
  int v273;
  uint64_t v274;
  uint64_t v275;
  int v276;
  int v277;
  uint64_t v278;
  const char *v279;
  const char *v280;
  double v281;
  char v282;
  const char *v283;
  const char *v284;
  uint64_t v285;
  const char *v286;
  void *v287;
  uint64_t v288;
  const char *v289;
  void *v290;
  int v291;
  NSObject *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  int v299;
  NSObject *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  int v307;
  NSObject *v308;
  uint64_t v309;
  void *v310;
  id v311;
  uint64_t v312;
  char v313;
  id v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  int v321;
  NSObject *v322;
  uint64_t v323;
  char v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  char v331;
  const char *v332;
  const char *v333;
  const char *v334;
  void *v335;
  void *v338;
  void *v339;
  id v340;
  id v341;
  unint64_t v342;
  void *v343;
  __int128 v344;
  void *v345;
  id v346;
  id v347;
  id v348;
  id v349;
  id v350;
  id v351;
  id v352;
  id v353;
  id v354;
  void *v355;
  id v356;
  id v357;
  void *v358;
  id v359;
  id v360;
  id v361;
  id v362;
  void *v363;
  void *v364;
  void *v365;
  id v366;
  id v367;
  void *v368;
  id obj;
  id v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  _QWORD v376[4];
  id v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  uint8_t buf[4];
  uint64_t v383;
  __int16 v384;
  uint64_t v385;
  __int16 v386;
  unint64_t v387;
  _BYTE v388[128];
  _BYTE v389[128];
  uint64_t v390;

  v390 = *MEMORY[0x1E0C80C00];
  v371 = a2;
  v362 = a3;
  v340 = a5;
  v75 = a6;
  v356 = a7;
  v366 = a10;
  *((_QWORD *)&v344 + 1) = a11;
  *(_QWORD *)&v344 = a12;
  v76 = a13;
  v77 = a14;
  v78 = a15;
  v79 = a16;
  v80 = a18;
  v81 = a20;
  v351 = a22;
  v361 = a23;
  v82 = a24;
  v367 = a25;
  v360 = a26;
  v83 = a27;
  v352 = a28;
  v350 = a29;
  v359 = a30;
  v349 = a31;
  v348 = a32;
  v347 = a33;
  v346 = a34;
  v341 = a35;
  v353 = a36;
  v84 = a37;
  v357 = a66;
  v354 = a67;
  if (a70)
  {
    if (objc_msgSend(*(id *)(a1 + 16), "printJson"))
    {
      v291 = *__error();
      _sa_logt();
      v292 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v292, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1B9BE0000, v292, OS_LOG_TYPE_ERROR, "printing report target task header with json", buf, 2u);
      }

      *__error() = v291;
      _SASetCrashLogMessage(6681, "printing report target task header with json", v293, v294, v295, v296, v297, v298, v331);
      _os_crash();
      __break(1u);
    }
    else if (!objc_msgSend(*(id *)(a1 + 16), "systemstatsFormat"))
    {
      goto LABEL_4;
    }
    v299 = *__error();
    _sa_logt();
    v300 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v300, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1B9BE0000, v300, OS_LOG_TYPE_ERROR, "printing report target task header with systemstats format", buf, 2u);
    }

    *__error() = v299;
    _SASetCrashLogMessage(6682, "printing report target task header with systemstats format", v301, v302, v303, v304, v305, v306, v331);
    _os_crash();
    __break(1u);
    goto LABEL_441;
  }
LABEL_4:
  v364 = v78;
  v365 = v84;
  v368 = v83;
  v363 = v79;
  v342 = a40;
  v345 = v76;
  v355 = v77;
  v358 = v80;
  v338 = v82;
  v339 = v81;
  if (!a19)
  {
    v84 = v340;
    v85 = v371;
    v86 = v366;
    v87 = v352;
    if (!v81)
    {
      v88 = 0;
      v89 = 0;
      goto LABEL_14;
    }
    if ((objc_msgSend(v81, "isEqualToString:", CFSTR("System")) & 1) == 0
      && (objc_msgSend(v81, "isEqualToString:", CFSTR("Internal")) & 1) == 0)
    {
      v88 = objc_msgSend(v81, "isEqualToString:", CFSTR("Hidden"));
      goto LABEL_13;
    }
LABEL_12:
    v88 = 1;
LABEL_13:
    v89 = 1;
    goto LABEL_14;
  }
  v84 = v340;
  v85 = v371;
  v86 = v366;
  v87 = v352;
  if (a19 == 1)
    goto LABEL_12;
  v88 = 0;
  v89 = 1;
  if (v366 && a19 == -1)
    v88 = objc_msgSend(v366, "hasPrefix:", CFSTR("com.apple."));
LABEL_14:
  v90 = a21;
  v91 = a17;
  v343 = v75;
  if (objc_msgSend(*(id *)(a1 + 16), "printJson"))
  {
    SAJSONWriteDictionaryFirstEntry(v85, (uint64_t)CFSTR("name"), v362);
    if (v84)
    {
      objc_msgSend(v84, "uuid");
      v92 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v92, "UUIDString");
      v93 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v85, CFSTR("uuid"), v93);

      v75 = v343;
    }
    if (v75)
      SAJSONWriteDictionaryEntry(v85, CFSTR("path"), v75);
    if (v356)
      SAJSONWriteDictionaryEntry(v85, CFSTR("sharedcaches"), v356);
    if ((_DWORD)a8 != -314)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:");
      v94 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v85, CFSTR("uid"), v94);

    }
    if (a17)
    {
      objc_msgSend(*(id *)(a1 + 160), "osProductName");
      v95 = (void *)objc_claimAutoreleasedReturnValue();

      if (v95)
      {
        objc_msgSend(*(id *)(a1 + 160), "osProductName");
        v96 = (void *)objc_claimAutoreleasedReturnValue();
        v97 = SAIsEmbeddedPlatform(v96);

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", a17);
        v98 = (void *)objc_claimAutoreleasedReturnValue();
        if (v97)
          v99 = CFSTR("adamID");
        else
          v99 = CFSTR("appItemID");
        SAJSONWriteDictionaryEntry(v85, v99, v98);
        v86 = v366;
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", a17);
        v98 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v85, CFSTR("adamID"), v98);
      }

    }
    if (v358)
    {
      SACopySanitizedString(v358, 1, 0);
      v111 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v85, CFSTR("appExternalID"), v111);

    }
    v112 = v345;
    if (v89)
    {
      if (v88)
        v113 = (void *)MEMORY[0x1E0C9AAB0];
      else
        v113 = (void *)MEMORY[0x1E0C9AAA0];
      SAJSONWriteDictionaryEntry(v85, CFSTR("isFirstParty"), v113);
    }
    if (a21)
    {
      SAJSONWriteDictionaryEntry(v85, CFSTR("isBeta"), MEMORY[0x1E0C9AAB0]);
      if (v351)
        SAJSONWriteDictionaryEntry(v85, CFSTR("cohort"), v351);
    }
    v114 = v356;
    if (v361)
      SAJSONWriteDictionaryEntry(v85, CFSTR("betaIdentifier"), v361);
    v115 = v355;
    if (v86)
    {
      SACopySanitizedString(v86, 1, 0);
      v116 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryEntry(v85, CFSTR("bundleIdentifier"), v116);

    }
    if (v359)
    {
      SAJSONWriteDictionaryEntry(v85, CFSTR("version"), v359);
    }
    else
    {
      v118 = v363;
      v117 = v364;
      if (v344 == 0)
      {
LABEL_89:
        if (v345)
        {
          SACopySanitizedString(v345, 1, 0);
          v122 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, CFSTR("buildVersion"), v122);

        }
        if (v118)
        {
          SACopySanitizedString(v118, 1, 0);
          v123 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, CFSTR("productBuildVersion"), v123);

        }
        if (v355)
        {
          SACopySanitizedString(v355, 1, 0);
          v124 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, CFSTR("projectName"), v124);

        }
        if (v117)
        {
          SACopySanitizedString(v117, 1, 0);
          v125 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, CFSTR("sourceVersion"), v125);

        }
        if (v367)
          SAJSONWriteDictionaryEntry(v85, CFSTR("codesigningID"), v367);
        if (v360)
          SAJSONWriteDictionaryEntry(v85, CFSTR("teamID"), v360);
        if ((unint64_t)objc_msgSend(v368, "count") > 1
          || objc_msgSend(v368, "count") == 1
          && (objc_msgSend(v368, "allKeys"),
              v126 = (void *)objc_claimAutoreleasedReturnValue(),
              objc_msgSend(v126, "firstObject"),
              v127 = (void *)objc_claimAutoreleasedReturnValue(),
              v128 = objc_msgSend(v127, "isEqualToString:", CFSTR("none")),
              v127,
              v126,
              (v128 & 1) == 0))
        {
          SAJSONWriteDictionaryEntry(v85, CFSTR("resourceCoalitionSampleCounts"), v368);
        }
        v87 = v352;
        if (v352)
          SAJSONWriteDictionaryEntry(v85, CFSTR("onBehalfOf"), v352);
        if (v349)
          SAJSONWriteDictionaryEntry(v85, CFSTR("parent"), v349);
        if (v348)
          SAJSONWriteDictionaryEntry(v85, CFSTR("responsible"), v348);
        v86 = v366;
        if (v347)
          SAJSONWriteDictionaryEntry(v85, CFSTR("taskExecedFrom"), v347);
        if (v346)
          SAJSONWriteDictionaryEntry(v85, CFSTR("taskExecedTo"), v346);
        if (v350)
          SAJSONWriteDictionaryEntry(v85, CFSTR("arch"), v350);
        if (v353)
          SAJSONWriteDictionaryEntry(v85, CFSTR("startTime"), v353);
        if (v365)
          SAJSONWriteDictionaryEntry(v85, CFSTR("endTime"), v365);
        if (a38 != 0x7FFFFFFFFFFFFFFFLL)
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:");
          v129 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, CFSTR("startSampleIndex"), v129);

        }
        if (a39 != 0x7FFFFFFFFFFFFFFFLL)
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:");
          v130 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, CFSTR("endSampleIndex"), v130);

        }
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a40);
        v131 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v85, CFSTR("numSamples"), v131);

        if (a42)
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:");
          v132 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, CFSTR("numSamplesSuspended"), v132);

        }
        if (a43)
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:");
          v133 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, CFSTR("numSamplesTerminated"), v133);

        }
        if (a44)
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:");
          v134 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, CFSTR("startingTaskSize"), v134);

        }
        if (a45)
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:");
          v135 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, CFSTR("endingTaskSize"), v135);

        }
        if (a46)
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:");
          v136 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, CFSTR("maxTaskSize"), v136);

        }
        if (a47 != 0x7FFFFFFFFFFFFFFFLL)
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:");
          v137 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, CFSTR("startSampleIndexOfMaxTaskSize"), v137);

        }
        if (a48 != 0x7FFFFFFFFFFFFFFFLL)
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:");
          v138 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, CFSTR("endSampleIndexOfMaxTaskSize"), v138);

        }
        v139 = v357;
        if (a49)
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:");
          v140 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, CFSTR("numPageins"), v140);

        }
        if (a50)
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:");
          v141 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, CFSTR("cpuNanoseconds"), v141);

        }
        if (a51)
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:");
          v142 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, CFSTR("cpuInstructions"), v142);

        }
        if (a52)
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:");
          v143 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, CFSTR("cpuCycles"), v143);

        }
        if (a56)
          SAJSONWriteDictionaryEntry(v85, CFSTR("usesSuddenTermination"), MEMORY[0x1E0C9AAB0]);
        if (a57)
          SAJSONWriteDictionaryEntry(v85, CFSTR("allowsIdleExit"), MEMORY[0x1E0C9AAB0]);
        if (a58)
          SAJSONWriteDictionaryEntry(v85, CFSTR("isTranslocated"), MEMORY[0x1E0C9AAB0]);
        if (a59)
        {
          SAJSONWriteDictionaryEntry(v85, CFSTR("isUnresponsive"), MEMORY[0x1E0C9AAB0]);
          if (a9 > 0.0)
          {
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a9);
            v144 = (void *)objc_claimAutoreleasedReturnValue();
            SAJSONWriteDictionaryEntry(v85, CFSTR("timeOfLastResponseCF"), v144);

          }
        }
        if (a60)
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:");
          v145 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, CFSTR("numThreads"), v145);

        }
        if (a61)
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:");
          v146 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, CFSTR("numIdleWorkQueueThreads"), v146);

        }
        if (a62)
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:");
          v147 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, CFSTR("numOtherHiddenThreads"), v147);

        }
        if (a63)
          SAJSONWriteDictionaryEntry(v85, CFSTR("hieSwallowedException"), MEMORY[0x1E0C9AAB0]);
        if (a64)
          SAJSONWriteDictionaryEntry(v85, CFSTR("wqExceededConstrainedThreadLimit"), MEMORY[0x1E0C9AAB0]);
        if (a65)
          SAJSONWriteDictionaryEntry(v85, CFSTR("wqExceededTotalThreadLimit"), MEMORY[0x1E0C9AAB0]);
        if (objc_msgSend(v357, "count"))
          SAJSONWriteDictionaryEntry(v85, CFSTR("threadsDeadlocked"), v357);
        if (objc_msgSend(v354, "count"))
          SAJSONWriteDictionaryEntry(v85, CFSTR("threadsBlockedByADeadlock"), v354);
        if (a69)
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:");
          v148 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, CFSTR("numIOs"), v148);

          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", a68);
          v149 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v85, CFSTR("ioSize"), v149);

        }
        goto LABEL_434;
      }
      if ((_QWORD)v344)
      {
        SACopySanitizedString((void *)v344, 1, 0);
        v119 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        v119 = CFSTR("???");
      }
      if (*((_QWORD *)&v344 + 1))
      {
        SACopySanitizedString(*((void **)&v344 + 1), 1, 0);
        v120 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        v120 = CFSTR("???");
      }
      v121 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@ (%@)"), v119, v120);
      SAJSONWriteDictionaryEntry(v85, CFSTR("version"), v121);

    }
    v118 = v363;
    v117 = v364;
    goto LABEL_89;
  }
  if (a70)
  {
    objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Command: ", v362);
    if (!v84)
      goto LABEL_46;
    goto LABEL_41;
  }
  v100 = "Powerstats for: ";
  if ((objc_msgSend(*(id *)(a1 + 16), "microstackshotsFormat") & 1) == 0
    && !objc_msgSend(*(id *)(a1 + 16), "systemstatsFormat"))
  {
    v100 = "Process: ";
  }
  objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%@"), 18, v100, v362);
  *(_BYTE *)(a1 + 105) = 1;
  v90 = a21;
  v91 = a17;
  if ((objc_msgSend(*(id *)(a1 + 16), "systemstatsFormat") & 1) == 0)
  {
    v101 = a40;
    if (a40 && a42 == a40)
    {
      objc_msgSend(v85, "appendString:", CFSTR(" (suspended)"));
      v101 = a40;
    }
    if (v101 && a43 == a40)
      objc_msgSend(v85, "appendString:", CFSTR(" (zombie)"));
  }
  objc_msgSend(v85, "appendString:", CFSTR("\n"));
  if (v84)
  {
LABEL_41:
    if (!objc_msgSend(*(id *)(a1 + 16), "systemstatsFormat"))
    {
      objc_msgSend(v84, "uuid");
      v103 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v103, "UUIDString");
      v104 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "UUID: ", v104);

      v75 = v343;
      goto LABEL_45;
    }
    -[SASamplePrinter indexForBinary:](a1, (uint64_t)v84);
    v102 = (void *)objc_claimAutoreleasedReturnValue();
    if (v102)
    {
      v103 = v102;
      objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%lu\n"), 18, "UUID: ", objc_msgSend(v102, "unsignedLongValue"));
LABEL_45:

      goto LABEL_46;
    }
LABEL_441:
    v307 = *__error();
    _sa_logt();
    v308 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v308, OS_LOG_TYPE_ERROR))
    {
      v309 = objc_msgSend(objc_retainAutorelease(v362), "UTF8String");
      objc_msgSend(v84, "uuid");
      v310 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v310, "UUIDString");
      v311 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v312 = objc_msgSend(v311, "UTF8String");
      *(_DWORD *)buf = 136315394;
      v383 = v309;
      v384 = 2080;
      v385 = v312;
      _os_log_error_impl(&dword_1B9BE0000, v308, OS_LOG_TYPE_ERROR, "%s: no index for main binary %s, required by systemstats format", buf, 0x16u);

    }
    *__error() = v307;
    v313 = objc_msgSend(objc_retainAutorelease(v362), "UTF8String");
    objc_msgSend(v84, "uuid");
    v269 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v269, "UUIDString");
    v314 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend(v314, "UTF8String");
    _SASetCrashLogMessage(6933, "%s: no index for main binary %s, required by systemstats format", v315, v316, v317, v318, v319, v320, v313);

    _os_crash();
    __break(1u);
    goto LABEL_444;
  }
LABEL_46:
  v105 = objc_msgSend(*(id *)(a1 + 16), "systemstatsFormat");
  if (v75 && (v105 & 1) == 0)
  {
    if (objc_msgSend(*(id *)(a1 + 160), "sanitizePaths"))
    {
      v106 = v75;

    }
    SACopySanitizedString(v75, 1, 0);
    v107 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Path: ", v107);

  }
  if (v86)
  {
    SACopySanitizedString(v86, 1, 0);
    v108 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Identifier: ", v108);

  }
  v109 = a1;
  if (v359)
  {
    objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Version: ", v359);
  }
  else if (v344 != 0)
  {
    if ((_QWORD)v344)
    {
      SACopySanitizedString((void *)v344, 1, 0);
      v110 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v110 = CFSTR("???");
    }
    if (*((_QWORD *)&v344 + 1))
    {
      SACopySanitizedString(*((void **)&v344 + 1), 1, 0);
      v150 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v150 = CFSTR("???");
    }
    objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%@ (%@)\n"), 18, "Version: ", v110, v150);

    v109 = a1;
  }
  if (v345)
  {
    SACopySanitizedString(v345, 1, 0);
    v151 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Build Version: ", v151);

  }
  if (v363)
  {
    SACopySanitizedString(v363, 1, 0);
    v152 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Product Build Version: ", v152);

  }
  if (v355)
  {
    SACopySanitizedString(v355, 1, 0);
    v153 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Project Name: ", v153);

  }
  if (v364)
  {
    SACopySanitizedString(v364, 1, 0);
    v154 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Source Version: ", v154);

  }
  if (v367
    && (!v86
     || !objc_msgSend(v367, "isEqualToString:", v86)
     || objc_msgSend(*(id *)(v109 + 16), "displayCodesigningIDsMatchingBundleIDs")))
  {
    objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Codesigning ID: ", v367);
  }
  if (v360)
    objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Team ID: ", v360);
  if (v91)
  {
    objc_msgSend(*(id *)(v109 + 160), "osProductName");
    v155 = (void *)objc_claimAutoreleasedReturnValue();

    v156 = "Adam ID: ";
    if (v155)
    {
      objc_msgSend(*(id *)(v109 + 160), "osProductName");
      v157 = (void *)objc_claimAutoreleasedReturnValue();
      v158 = SAIsEmbeddedPlatform(v157);

      v159 = v158 == 0;
      v109 = a1;
      if (v159)
        v156 = "App Item ID: ";
    }
    v332 = v156;
    v85 = v371;
    objc_msgSend(v371, "printWithFormat:", CFSTR("%-*s%llu\n"), 18, v332, v91);
  }
  if (v358)
  {
    SACopySanitizedString(v358, 1, 0);
    v160 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "App External ID: ", v160);

  }
  if (v89)
  {
    v161 = "No";
    if (v88)
      v161 = "Yes";
    objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%s\n"), 18, "Is First Party: ", v161);
  }
  if (v90)
  {
    objc_msgSend(v85, "printWithFormat:", CFSTR("%-*sYes\n"), 18, "Is Beta: ");
    if (v351)
      objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Cohort: ", v351);
  }
  v114 = v356;
  if (v361)
    objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Beta Identifier: ", v361);
  v115 = v355;
  if (objc_msgSend(v356, "count"))
  {
    objc_msgSend(*(id *)(v109 + 160), "sharedCaches");
    v162 = (void *)objc_claimAutoreleasedReturnValue();
    if ((unint64_t)objc_msgSend(v162, "count") > 1)
    {

LABEL_215:
      v380 = 0u;
      v381 = 0u;
      v378 = 0u;
      v379 = 0u;
      v164 = v356;
      v165 = objc_msgSend(v164, "countByEnumeratingWithState:objects:count:", &v378, v389, 16);
      if (v165)
      {
        v166 = v165;
        v167 = *(_QWORD *)v379;
        do
        {
          for (i = 0; i != v166; ++i)
          {
            if (*(_QWORD *)v379 != v167)
              objc_enumerationMutation(v164);
            _shared_cache_display_string(*(void **)(*((_QWORD *)&v378 + 1) + 8 * i));
            v169 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v371, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Shared Cache: ", v169);

          }
          v166 = objc_msgSend(v164, "countByEnumeratingWithState:objects:count:", &v378, v389, 16);
        }
        while (v166);
      }

      v85 = v371;
      v115 = v355;
      v114 = v356;
      v86 = v366;
      v109 = a1;
      goto LABEL_223;
    }
    v163 = objc_msgSend(v356, "count");

    if (v163 > 1)
      goto LABEL_215;
    objc_msgSend(*(id *)(v109 + 160), "sharedCaches");
    v198 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v198, "count"))
    {
      objc_msgSend(v356, "firstObject");
      v199 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99E38], "null");
      v200 = (void *)objc_claimAutoreleasedReturnValue();

      if (v199 == v200)
      {
        objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Shared Cache: ", CFSTR("None"));
        goto LABEL_223;
      }
    }
    else
    {

    }
    if (objc_msgSend(*(id *)(v109 + 16), "displayAllBinaries"))
    {
      objc_msgSend(v356, "firstObject");
      v232 = (void *)objc_claimAutoreleasedReturnValue();
      _shared_cache_display_string(v232);
      v233 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Shared Cache: ", v233);

    }
  }
LABEL_223:
  if ((unint64_t)objc_msgSend(v368, "count") > 1
    || objc_msgSend(v368, "count") == 1
    && (objc_msgSend(v368, "allKeys"),
        v170 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v170, "firstObject"),
        v171 = (void *)objc_claimAutoreleasedReturnValue(),
        v172 = objc_msgSend(v171, "isEqualToString:", CFSTR("none")),
        v171,
        v170,
        (v172 & 1) == 0))
  {
    objc_msgSend(v368, "allKeys");
    v173 = (void *)objc_claimAutoreleasedReturnValue();
    v376[0] = MEMORY[0x1E0C809B0];
    v376[1] = 3221225472;
    v376[2] = __1143__SASamplePrinter_addTaskHeaderToStream_displayName_pid_mainBinary_mainBinaryPath_sharedCaches_uid_bundleIdentifier_bundleVersion_bundleShortVersion_bundleBuildVersion_bundleProjectName_bundleSourceVersion_bundleProductBuildVersion_adamID_installerVersionID_developerType_appType_isBeta_cohortID_vendorID_distributorID_codesigningID_teamID_resourceCoalitionSampleCounts_onBehalfOfProcesses_architectureString_kernelVersion_parentName_responsibleName_taskExecedFromName_taskExecedToName_pidStartTimestamp_startTimestamp_endTimestamp_startSampleIndex_endSampleIndex_numSamples_totalNumSamples_numSamplesSuspended_numSamplesTerminated_startingTaskSize_endingTaskSize_maxTaskSize_startSampleIndexOfMaxTaskSize_endSampleIndexOfMaxTaskSize_numPageins_cpuTimeNs_cpuInstructions_cpuCycles_nonThreadCpuTimeNs_nonThreadCpuInstructions_nonThreadCpuCycles_usesSuddenTermination_allowsIdleExit_isTranslocated_isUnresponsive_timeOfLastResponse_numThreads_numIdleWorkQueueThreads_numOtherHiddenThreads_hieSwallowedException_wqExceededConstrainedThreadLimit_wqExceededTotalThreadLimit_threadsDeadlocked_threadsBlockedByADeadlock_ioSize_numIOs_isReportHeader___block_invoke;
    v376[3] = &unk_1E7149450;
    v174 = v368;
    v377 = v174;
    objc_msgSend(v173, "sortedArrayUsingComparator:", v376);
    v175 = (void *)objc_claimAutoreleasedReturnValue();

    if (a40)
    {
      v176 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v175, "count"));
      v372 = 0u;
      v373 = 0u;
      v374 = 0u;
      v375 = 0u;
      v335 = v175;
      obj = v175;
      v177 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v372, v388, 16);
      if (v177)
      {
        v178 = v177;
        v179 = *(_QWORD *)v373;
        do
        {
          for (j = 0; j != v178; ++j)
          {
            if (*(_QWORD *)v373 != v179)
              objc_enumerationMutation(obj);
            v181 = *(_QWORD *)(*((_QWORD *)&v372 + 1) + 8 * j);
            objc_msgSend(v174, "objectForKeyedSubscript:", v181);
            v182 = (void *)objc_claimAutoreleasedReturnValue();
            v183 = objc_msgSend(v182, "unsignedLongLongValue");

            v184 = objc_alloc(MEMORY[0x1E0CB3940]);
            v185 = "s";
            if (v183 == 1)
              v185 = "";
            v186 = (void *)objc_msgSend(v184, "initWithFormat:", CFSTR("%llu sample%s %@"), v183, v185, v181);
            objc_msgSend(v176, "addObject:", v186);

          }
          v178 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v372, v388, 16);
        }
        while (v178);
      }

      v187 = v176;
      v84 = v340;
      v85 = v371;
      v115 = v355;
      v114 = v356;
      v87 = v352;
      v109 = a1;
      v175 = v335;
    }
    else
    {
      v187 = v175;
    }
    objc_msgSend(v187, "componentsJoinedByString:", CFSTR(", "));
    v188 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Resource Coalition: ", v188);

    v86 = v366;
  }
  if (v87)
    objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "On Behalf Of: ", v87);
  v112 = v345;
  v139 = v357;
  if ((objc_msgSend(*(id *)(v109 + 16), "systemstatsFormat") & 1) == 0)
  {
    if (v350)
      objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Architecture: ", v350);
    if (v347)
      objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Execed from: ", v347);
    if (v346)
      objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Execed to: ", v346);
    if (v349)
      objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Parent: ", v349);
    if (v348)
      objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Responsible: ", v348);
    if ((_DWORD)a4 != -1)
      objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%i\n"), 18, "PID: ", a4);
    if ((_DWORD)a8 != -314)
      objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%d\n"), 18, "UID: ", a8);
    if (a56)
    {
      objc_msgSend(v85, "printWithFormat:", CFSTR("%-*sTracked"), 18, "Sudden Term: ");
      if (a57)
        objc_msgSend(v85, "appendString:", CFSTR(" (allows idle exit)"));
      objc_msgSend(v85, "appendString:", CFSTR("\n"));
    }
    if (!a44)
    {
LABEL_283:
      if (a49)
        objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%u pages\n"), 18, "Pageins: ", a49);
      if (a69)
      {
        if (a69 == 1)
          v213 = "";
        else
          v213 = "s";
        SAFormattedBytesEx(a68, 1, 0, 1, 0);
        v214 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%lu I/O%s (%@)\n"), 18, "I/O: ", a69, v213, v214);

      }
      objc_msgSend(v341, "wallTime");
      if (v215 != 0.0)
      {
        objc_msgSend(*(id *)(v109 + 32), "wallTime");
        if (v216 != 0.0)
        {
          objc_msgSend(*(id *)(v109 + 32), "wallTime");
          v218 = v217;
          objc_msgSend(v341, "wallTime");
          v220 = v218 - v219;
          if (v220 < 0.0)
            v220 = 0.0;
          objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%.0fs\n"), 18, "Time Since Fork: ", *(_QWORD *)&v220);
        }
      }
      v112 = v345;
      v139 = v357;
      if (!v353
        || (objc_msgSend(v353, "gt:", *(_QWORD *)(v109 + 32)) & 1) == 0
        && !objc_msgSend(*(id *)(v109 + 16), "microstackshotsFormat"))
      {
        goto LABEL_324;
      }
      if (objc_msgSend(v353, "gt:", *(_QWORD *)(v109 + 32)))
        v221 = v353;
      else
        v221 = *(void **)(v109 + 32);
      objc_msgSend(v221, "wallTime");
      v223 = v222;
      if (v222 == 0.0)
      {
        objc_msgSend(*(id *)(v109 + 32), "wallTime");
        if (v224 != 0.0)
        {
          objc_msgSend(*(id *)(v109 + 32), "machContTimeSeconds");
          if (v225 != 0.0)
          {
            objc_msgSend(v353, "machContTimeSeconds");
            if (v226 != 0.0)
            {
              objc_msgSend(*(id *)(v109 + 32), "wallTime");
              v228 = v227;
              objc_msgSend(v353, "machContTimeSeconds");
              v230 = v229;
              objc_msgSend(*(id *)(v109 + 32), "machContTimeSeconds");
LABEL_312:
              v223 = v228 + v230 - v231;
              goto LABEL_313;
            }
          }
          objc_msgSend(*(id *)(v109 + 32), "machAbsTimeSeconds");
          if (v234 != 0.0)
          {
            objc_msgSend(v353, "machAbsTimeSeconds");
            if (v235 != 0.0)
            {
              objc_msgSend(*(id *)(v109 + 32), "wallTime");
              v228 = v236;
              objc_msgSend(v353, "machAbsTimeSeconds");
              v230 = v237;
              objc_msgSend(*(id *)(v109 + 32), "machAbsTimeSeconds");
              goto LABEL_312;
            }
          }
        }
      }
LABEL_313:
      if (v223 != 0.0)
      {
        if ((objc_msgSend(*(id *)(v109 + 16), "omitAbsoluteWallTimes") & 1) != 0)
        {
          objc_msgSend(*(id *)(v109 + 32), "wallTime");
          if (v238 != 0.0)
          {
            v239 = objc_msgSend(*(id *)(v109 + 16), "displayDetailedWallTime");
            objc_msgSend(*(id *)(v109 + 32), "wallTime");
            if (v239)
              v241 = 9;
            else
              v241 = 3;
            objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%.*fs\n"), 18, "Start time: ", v241, v223 - v240);
          }
        }
        else
        {
          if (objc_msgSend(*(id *)(v109 + 16), "displayDetailedWallTime"))
            v242 = 9;
          else
            v242 = 3;
          v243 = (__CFString *)_CopyStringForTime(v242, v223);
          objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "Start time: ", v243);

        }
      }
LABEL_324:
      if (v365
        && ((objc_msgSend(v365, "lt:", *(_QWORD *)(v109 + 40)) & 1) != 0
         || objc_msgSend(*(id *)(v109 + 16), "microstackshotsFormat")))
      {
        if (objc_msgSend(v365, "lt:", *(_QWORD *)(v109 + 40)))
          v244 = v365;
        else
          v244 = *(void **)(v109 + 40);
        objc_msgSend(v244, "wallTime");
        v246 = v245;
        if (v245 == 0.0)
        {
          objc_msgSend(*(id *)(v109 + 40), "wallTime");
          if (v247 != 0.0)
          {
            objc_msgSend(*(id *)(v109 + 40), "machContTimeSeconds");
            if (v248 == 0.0 || (objc_msgSend(v365, "machContTimeSeconds"), v249 == 0.0))
            {
              objc_msgSend(*(id *)(v109 + 40), "machAbsTimeSeconds");
              if (v255 != 0.0)
              {
                objc_msgSend(v365, "machAbsTimeSeconds");
                if (v256 != 0.0)
                {
                  objc_msgSend(*(id *)(v109 + 40), "wallTime");
                  v258 = v257;
                  objc_msgSend(*(id *)(v109 + 40), "machAbsTimeSeconds");
                  v260 = v259;
                  objc_msgSend(v365, "machAbsTimeSeconds");
                  v246 = v258 + v260 - v261;
                }
              }
            }
            else
            {
              objc_msgSend(*(id *)(v109 + 40), "wallTime");
              v251 = v250;
              objc_msgSend(*(id *)(v109 + 40), "machContTimeSeconds");
              v253 = v252;
              objc_msgSend(v365, "machContTimeSeconds");
              v246 = v251 - (v253 - v254);
            }
          }
        }
        if (v246 != 0.0)
        {
          if ((objc_msgSend(*(id *)(v109 + 16), "omitAbsoluteWallTimes") & 1) != 0)
          {
            objc_msgSend(*(id *)(v109 + 32), "wallTime");
            if (v262 != 0.0)
            {
              v263 = objc_msgSend(*(id *)(v109 + 16), "displayDetailedWallTime");
              objc_msgSend(*(id *)(v109 + 32), "wallTime");
              if (v263)
                v265 = 9;
              else
                v265 = 3;
              objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%.*fs\n"), 18, "End time: ", v265, v246 - v264);
            }
          }
          else
          {
            if (objc_msgSend(*(id *)(v109 + 16), "displayDetailedWallTime"))
              v266 = 9;
            else
              v266 = 3;
            v267 = (__CFString *)_CopyStringForTime(v266, v246);
            objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%@\n"), 18, "End time: ", v267);

          }
        }
      }
      goto LABEL_349;
    }
    SAFormattedBytesEx(a44, 1, 0, 1, 0);
    v189 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%@"), 18, "Footprint: ", v189);

    v190 = a45;
    if (!a45 || (v191 = 1, (double)a44 * 1.05 > (double)a45) && (double)a45 * 1.05 > (double)a44)
    {
      v192 = objc_msgSend(*(id *)(v109 + 16), "displayAllTaskSizeChanges");
      v190 = a45;
      v191 = v192;
    }
    v193 = v114;
    v194 = v115;
    v195 = v190 - a44;
    if (v190 >= a44 && v191)
    {
      v196 = v84;
      v197 = (double)v190;
    }
    else
    {
      v196 = v84;
      v197 = (double)a44;
    }
    if (v197 * 1.05 <= (double)a46)
    {
      SAFormattedBytesEx(v190, 1, 0, 1, 0);
      v206 = (void *)objc_claimAutoreleasedReturnValue();
      SAFormattedSignedBytes(v195, 1, 0);
      v207 = (void *)objc_claimAutoreleasedReturnValue();
      v85 = v371;
      objc_msgSend(v371, "printWithFormat:", CFSTR(" -> %@ (%@)"), v206, v207);

    }
    else
    {
      v201 = v190;
      v202 = objc_msgSend(*(id *)(v109 + 16), "displayAllTaskSizeChanges");
      v85 = v371;
      if ((v191 | v202) != 1)
        goto LABEL_282;
      v203 = v202;
      SAFormattedBytesEx(v201, 1, 0, 1, 0);
      v204 = (void *)objc_claimAutoreleasedReturnValue();
      SAFormattedSignedBytes(v195, 1, 0);
      v205 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v371, "printWithFormat:", CFSTR(" -> %@ (%@)"), v204, v205);

      if ((v203 & 1) == 0)
      {
LABEL_282:
        objc_msgSend(v85, "appendString:", CFSTR("\n"));
        v86 = v366;
        v84 = v196;
        v115 = v194;
        v114 = v193;
        v87 = v352;
        goto LABEL_283;
      }
    }
    -[SASamplePrinter timeIndexDescriptionForStartSampleIndex:endSampleIndex:formattedToLength:](v109, a47, a48, 0);
    v208 = (__CFString *)objc_claimAutoreleasedReturnValue();
    SAFormattedBytesEx(a46, 1, 0, 1, 0);
    v209 = objc_claimAutoreleasedReturnValue();
    v210 = (void *)v209;
    v211 = " ";
    if (!v208)
      v211 = "";
    v212 = &stru_1E714A250;
    if (v208)
      v212 = v208;
    objc_msgSend(v85, "printWithFormat:", CFSTR(" (max %@%s%@)"), v209, v211, v212);

    goto LABEL_282;
  }
LABEL_349:
  if ((a70 & 1) != 0)
    goto LABEL_374;
  objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%lu"), 18, "Num samples: ", a40);
  if (!-[SASamplePrinter hasTimeIndexes](v109))
  {
    v269 = (void *)a41;
    if (!a41 || (objc_msgSend(*(id *)(v109 + 16), "systemstatsFormat") & 1) != 0)
    {
      objc_msgSend(v85, "appendString:", CFSTR("\n"));
LABEL_365:
      v139 = v357;
      goto LABEL_374;
    }
    if (a41 >= a40)
    {
      objc_msgSend(v85, "printWithFormat:", CFSTR(" (%.0f%%)\n"), (double)a40 * 100.0 / (double)a41);
      goto LABEL_365;
    }
LABEL_444:
    v321 = *__error();
    _sa_logt();
    v322 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v322, OS_LOG_TYPE_ERROR))
    {
      v323 = objc_msgSend(objc_retainAutorelease(v362), "UTF8String");
      *(_DWORD *)buf = 136315650;
      v383 = v323;
      v384 = 2048;
      v385 = (uint64_t)v269;
      v386 = 2048;
      v387 = v342;
      _os_log_error_impl(&dword_1B9BE0000, v322, OS_LOG_TYPE_ERROR, "%s: totalNumSamples %lu < numSamples %lu", buf, 0x20u);
    }

    *__error() = v321;
    v324 = objc_msgSend(objc_retainAutorelease(v362), "UTF8String");
    _SASetCrashLogMessage(7229, "%s: totalNumSamples %lu < numSamples %lu", v325, v326, v327, v328, v329, v330, v324);
    _os_crash();
    __break(1u);
  }
  if (a38 != 0x7FFFFFFFFFFFFFFFLL)
  {
    if (-[SASamplePrinter hasTimeIndexes](v109))
    {
      v270 = objc_msgSend(*(id *)(v109 + 16), "forceOneBasedTimeIndexes");
      v271 = a38 + 1;
      if (v270)
        v271 -= *(_QWORD *)(v109 + 48);
    }
    else
    {
      v271 = 0x7FFFFFFFFFFFFFFFLL;
    }
    objc_msgSend(v85, "printWithFormat:", CFSTR(" (%lu"), v271);
    if (a38 < a39)
    {
      if (-[SASamplePrinter hasTimeIndexes](v109))
      {
        v273 = objc_msgSend(*(id *)(v109 + 16), "forceOneBasedTimeIndexes");
        v274 = a39 + 1;
        if (v273)
          v274 -= *(_QWORD *)(v109 + 48);
      }
      else
      {
        v274 = 0x7FFFFFFFFFFFFFFFLL;
      }
      objc_msgSend(v85, "printWithFormat:", CFSTR("-%lu"), v274);
    }
    objc_msgSend(v85, "appendString:", CFSTR(")\n"));
    goto LABEL_374;
  }
  if (v353 && objc_msgSend(v353, "gt:", *(_QWORD *)(v109 + 40)))
  {
    v268 = v353;
  }
  else
  {
    v268 = v365;
    if (!v268)
      goto LABEL_374;
  }
  -[SASamplePrinter timeIndexDescriptionForTimestamp:](v109, v268);
  v272 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v85, "printWithFormat:", CFSTR(" (task existed only %@)\n"), v272);

  v139 = v357;
LABEL_374:
  if ((objc_msgSend(*(id *)(v109 + 16), "systemstatsFormat") & 1) == 0)
  {
    if (a50)
    {
      objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s"), 18, "CPU Time: ");
      if (objc_msgSend(*(id *)(a1 + 16), "displayDetailedCpuTime"))
        v275 = 9;
      else
        v275 = 3;
      saos_printf_seconds(v85, a50, v275);
      if (a52)
        saos_printf_cycles_instructions(v85, a52, a51, objc_msgSend(*(id *)(a1 + 16), "displayDetailedCpuTime"));
      objc_msgSend(v85, "appendString:", CFSTR("\n"));
      v276 = objc_msgSend(*(id *)(a1 + 16), "displayDetailedCpuTime");
      if (a53)
        v277 = v276;
      else
        v277 = 0;
      v139 = v357;
      if (a53 > 0x98967F || v277)
      {
        objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s"), 18, "CPU Time (exited threads): ");
        if (objc_msgSend(*(id *)(a1 + 16), "displayDetailedCpuTime"))
          v278 = 9;
        else
          v278 = 3;
        saos_printf_seconds(v85, a53, v278);
        if (a55)
          saos_printf_cycles_instructions(v85, a55, a54, objc_msgSend(*(id *)(a1 + 16), "displayDetailedCpuTime"));
        objc_msgSend(v85, "appendString:", CFSTR("\n"));
        v139 = v357;
      }
    }
    if (a58)
      objc_msgSend(v85, "printWithFormat:", CFSTR("%-*sTranslocated\n"), 18, "Note: ");
    if (a42)
    {
      v279 = "s";
      if (a42 == 1)
        v279 = "";
      objc_msgSend(v85, "printWithFormat:", CFSTR("%-*sSuspended for %lu sample%s\n"), 18, "Note: ", a42, v279);
    }
    if (a43)
    {
      v280 = "s";
      if (a43 == 1)
        v280 = "";
      objc_msgSend(v85, "printWithFormat:", CFSTR("%-*sTerminated (zombie) for %lu sample%s\n"), 18, "Note: ", a43, v280);
    }
    if (a59)
    {
      objc_msgSend(v85, "printWithFormat:", CFSTR("%-*sUnresponsive"), 18, "Note: ");
      if (a9 > 0.0)
      {
        objc_msgSend(*(id *)(a1 + 32), "wallTime");
        if (v281 + -2.0 >= a9)
          objc_msgSend(v85, "printWithFormat:", CFSTR(" for %.0f seconds before sampling"), v281 - a9);
      }
      objc_msgSend(v85, "appendString:", CFSTR("\n"));
    }
    if (a60)
      objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%lu\n"), 18, "Num threads: ", a60);
    v282 = objc_msgSend(*(id *)(a1 + 16), "displayIdleWorkQueueThreads");
    if (a61 && (v282 & 1) == 0)
    {
      v283 = "s";
      if (a61 == 1)
        v283 = "";
      objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%lu idle work queue thread%s omitted\n"), 18, "Note: ", a61, v283);
    }
    if (a62)
    {
      v284 = "s";
      if (a62 == 1)
        v284 = "";
      objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%lu other thread%s omitted\n"), 18, "Note: ", a62, v284);
    }
    if (a63)
      objc_msgSend(v85, "printWithFormat:", CFSTR("%-*sProcess has swallowed at least one exception\n"), 18, "Note: ");
    if (a64)
      objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%4d  (too many dispatch threads blocked in synchronous operations)\n"), 18, "Dispatch Thread Soft Limit Reached: ", objc_msgSend(*(id *)(a1 + 160), "workQueueSoftThreadLimit"));
    if (a65)
      objc_msgSend(v85, "printWithFormat:", CFSTR("%-*s%4d  (too many dispatch threads blocked in synchronous operations)\n"), 18, "Dispatch Thread Hard Limit Reached: ", objc_msgSend(*(id *)(a1 + 160), "workQueueHardThreadLimit"));
    if (objc_msgSend(v139, "count"))
    {
      v285 = objc_msgSend(v139, "count");
      if (objc_msgSend(v139, "count") == 1)
        v286 = "";
      else
        v286 = "s";
      objc_msgSend(v139, "componentsJoinedByString:", CFSTR(", "));
      v287 = (void *)objc_claimAutoreleasedReturnValue();
      v333 = v286;
      v85 = v371;
      objc_msgSend(v371, "printWithFormat:", CFSTR("%-*s%lu thread%s - %@\n"), 18, "Deadlocked: ", v285, v333, v287);

      v139 = v357;
    }
    if (objc_msgSend(v354, "count"))
    {
      v288 = objc_msgSend(v354, "count");
      if (objc_msgSend(v354, "count") == 1)
        v289 = "";
      else
        v289 = "s";
      objc_msgSend(v354, "componentsJoinedByString:", CFSTR(", "));
      v290 = (void *)objc_claimAutoreleasedReturnValue();
      v334 = v289;
      v85 = v371;
      objc_msgSend(v371, "printWithFormat:", CFSTR("%-*s%lu thread%s - %@\n"), 18, "Blocked by Deadlock: ", v288, v334, v290);

      v139 = v357;
    }
  }
LABEL_434:

}

uint64_t __30__SASamplePrinter_printHeader__block_invoke(_QWORD *a1, void *a2, _BYTE *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a3 = 0;
  v6 = 0;
  v7 = 0;
  v5 = 0;
  result = objc_msgSend(a2, "cpuTimeNs:cpuInstructions:cpuCycles:betweenStartTime:endTime:", &v7, &v6, &v5, a1[4], a1[5]);
  *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) += v7;
  *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24) += v6;
  *(_QWORD *)(*(_QWORD *)(a1[8] + 8) + 24) += v5;
  return result;
}

void __30__SASamplePrinter_printHeader__block_invoke_2(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  void *v6;
  objc_class *v7;
  id v8;
  id v9;
  void *v10;

  v6 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v7 = (objc_class *)MEMORY[0x1E0CB3940];
  v8 = a3;
  v9 = a2;
  v10 = (void *)objc_msgSend([v7 alloc], "initWithFormat:", CFSTR("systemAdvisoryLevel%@"), v9);

  SAJSONWriteDictionaryEntry(v6, v10, v8);
  *a4 = 0;
}

uint64_t __30__SASamplePrinter_printHeader__block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1 + 32), "appendFormat:", CFSTR("%@ -> %@, "), a2, a3);
  *a4 = 0;
  return result;
}

void __30__SASamplePrinter_printHeader__block_invoke_4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  char v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;

  v32 = a2;
  v5 = a3;
  if ((objc_msgSend(v5, "isPartOfADeadlock") & 1) != 0 || objc_msgSend(v5, "isBlockedByADeadlock"))
  {
    objc_msgSend(v5, "threadState");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "startTimestamp");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v7, "gt:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40)))
    {

LABEL_5:
      goto LABEL_11;
    }
    objc_msgSend(v5, "threadState");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "endTimestamp");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "lt:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32));

    if ((v10 & 1) == 0)
    {
      if (objc_msgSend(v5, "isBlockedByADeadlock"))
      {
        v12 = *(void **)(a1 + 32);
        v11 = *(void **)(a1 + 40);
        objc_msgSend(v5, "task");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        -[SASamplePrinter displayNameForTask:](v12, v13);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "addObject:", v14);

      }
      if (objc_msgSend(v5, "isPartOfADeadlock")
        && (objc_msgSend(*(id *)(a1 + 48), "containsObject:", v32) & 1) == 0)
      {
        objc_msgSend(*(id *)(a1 + 48), "addObject:", v32);
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
        v15 = *(void **)(a1 + 32);
        objc_msgSend(v5, "task");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "thread");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "threadState");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        -[SASamplePrinter displayNameForTask:thread:threadState:](v15, v16, v17, v18);
        v6 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "printWithFormat:", CFSTR("%-*s%@"), 18, "Deadlock: ", v6);
        objc_msgSend(v5, "dependency");
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = (id)v19;
        while (v20 && v20 != v5)
        {
          v21 = v20;
          v22 = *(void **)(a1 + 48);
          v23 = (void *)MEMORY[0x1E0CB37E8];
          objc_msgSend(v21, "thread");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "numberWithUnsignedLongLong:", objc_msgSend(v24, "threadId"));
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "addObject:", v25);

          v26 = *(_QWORD **)(a1 + 32);
          v27 = (void *)v26[1];
          objc_msgSend(v21, "task");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "thread");
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "threadState");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          -[SASamplePrinter displayNameForTask:thread:threadState:](v26, v28, v29, v30);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v27, "printWithFormat:", CFSTR(" -> %@"), v31);

          objc_msgSend(v21, "dependency");
          v20 = (id)objc_claimAutoreleasedReturnValue();

        }
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "printWithFormat:", CFSTR(" -> %@\n"), v6);
        goto LABEL_5;
      }
    }
  }
LABEL_11:

}

void __30__SASamplePrinter_printHeader__block_invoke_5(uint64_t a1, void *a2, void *a3)
{
  SAJSONWriteDictionaryEntry(*(void **)(*(_QWORD *)(a1 + 32) + 8), a2, a3);
}

void __30__SASamplePrinter_printHeader__block_invoke_6(uint64_t a1, void *a2, void *a3)
{
  int v5;
  uint64_t v6;
  id v7;

  v7 = a2;
  v5 = objc_msgSend(a3, "BOOLValue");
  v6 = 40;
  if (v5)
    v6 = 32;
  objc_msgSend(*(id *)(a1 + v6), "appendFormat:", CFSTR("%@, "), v7);

}

void __30__SASamplePrinter_printHeader__block_invoke_867(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  const __CFString *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  const char *v27;
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (objc_msgSend(v9, "count"))
  {
    v28 = v8;
    objc_msgSend(v9, "sortedArrayUsingComparator:", &__block_literal_global_870);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 32);
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v12 = v10;
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
    if (v13)
    {
      v14 = v13;
      v15 = 0;
      v16 = *(_QWORD *)v30;
      do
      {
        for (i = 0; i != v14; ++i)
        {
          if (*(_QWORD *)v30 != v16)
            objc_enumerationMutation(v12);
          v18 = objc_msgSend(*(id *)(*((_QWORD *)&v29 + 1) + 8 * i), "unsignedLongLongValue");
          if (-v15 == i)
            v19 = CFSTR("0x%llx");
          else
            v19 = CFSTR(", 0x%llx");
          objc_msgSend(v11, "appendFormat:", v19, v18);
        }
        v15 += v14;
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
      }
      while (v14);
    }

    v8 = v28;
  }
  else
  {
    v11 = 0;
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "printWithFormat:", CFSTR("%-*s"), 18, "Network mount: ");
  if (!*(_BYTE *)(a1 + 48))
  {
    v20 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
    SACopySanitizedString(v7, 1, 0);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "printWithFormat:", CFSTR("%@ "), v21);

  }
  v22 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  SACopySanitizedString(v8, 1, 0);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "printWithFormat:", CFSTR("(%@)"), v23);

  v24 = *(_QWORD *)(a1 + 32);
  v25 = *(void **)(v24 + 8);
  if (v11)
  {
    v26 = objc_msgSend(v9, "count");
    v27 = "s";
    if (v26 == 1)
      v27 = "";
    objc_msgSend(v25, "printWithFormat:", CFSTR(" blocking thread%s %@"), v27, v11);
  }
  else
  {
    objc_msgSend(*(id *)(v24 + 8), "appendString:", CFSTR(" unresponsive"));
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "appendString:", CFSTR("\n"));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;

}

uint64_t __30__SASamplePrinter_printHeader__block_invoke_2_868(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "compare:");
}

void __30__SASamplePrinter_printHeader__block_invoke_889(_QWORD *a1, void *a2, uint64_t a3)
{
  void *v5;
  void *v6;
  void *v7;
  id v8;

  objc_msgSend(a2, "dispatchQueue");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)a1[4];

  if (v5 == v6)
  {
    v7 = (void *)a1[5];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "addObject:", v8);

  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 0;
  }
}

- (void)addStackForDispatchQueue:(void *)a3 orSwiftTaskStates:(void *)a4 orThread:(void *)a5 andThreadStateIndexes:(void *)a6 task:(void *)a7 toRootObjects:(char)a8 nameChanges:(char)a9 dispatchQueueChanges:(char)a10 swiftTaskChanges:(char)a11 threadChanges:(char)a12 priorityChanges:(void *)a13 microstackshotSummary:(unsigned __int8)a14 onlyHeaviestStack:(unsigned __int8)a15 includeState:
{
  id v22;
  id v23;
  id v24;
  int v25;
  const char *v26;
  int v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  int v35;
  id v36;
  uint64_t v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  void *v44;
  unint64_t v45;
  NSObject *v46;
  const char *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  void *v66;
  void *v67;
  BOOL v68;
  uint64_t i;
  uint64_t v70;
  char v71;
  int v72;
  int v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;
  char v79;
  char v80;
  char v81;
  char v82;
  char v83;
  char v84;
  char v85;
  char v86;
  BOOL v87;
  char v88;
  char v89;
  char v90;
  uint64_t v91;
  char v92;
  void *context;
  void *v94;
  char v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  _QWORD v101[5];
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t *v112;
  _QWORD *v113;
  _QWORD *v114;
  _BYTE *v115;
  _QWORD *v116;
  uint64_t *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  char v129;
  BOOL v130;
  char v131;
  char v132;
  char v133;
  char v134;
  char v135;
  char v136;
  char v137;
  char v138;
  char v139;
  char v140;
  char v141;
  char v142;
  char v143;
  char v144;
  char v145;
  char v146;
  char v147;
  char v148;
  char v149;
  char v150;
  char v151;
  char v152;
  char v153;
  char v154;
  char v155;
  char v156;
  BOOL v157;
  _QWORD v158[3];
  char v159;
  _QWORD v160[4];
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t (*v168)(uint64_t, uint64_t);
  void (*v169)(uint64_t);
  id v170;
  _QWORD v171[5];
  id v172;
  _QWORD v173[4];
  _QWORD v174[5];
  id v175;
  _QWORD v176[5];
  id v177;
  _QWORD v178[5];
  id v179;
  _QWORD v180[5];
  id v181;
  _QWORD v182[5];
  id v183;
  _QWORD v184[4];
  _BYTE buf[24];
  uint64_t (*v186)(uint64_t, uint64_t);
  void (*v187)(uint64_t);
  id v188;
  uint64_t v189;

  v189 = *MEMORY[0x1E0C80C00];
  v100 = a2;
  v99 = a3;
  v22 = a4;
  v23 = a5;
  v98 = a6;
  v96 = a7;
  v97 = a13;
  if (a1)
  {
    LODWORD(v24) = a14;
    context = (void *)MEMORY[0x1BCCCC288]();
    if ((a14 & 1) != 0)
      v25 = 1;
    else
      v25 = objc_msgSend(*(id *)(a1 + 16), "printHeavyStacks");
    v26 = buf;
    if ((v99 || v100 || !v22) && (v99 || !v100 || v22) && (!v99 || v100 || v22))
    {
      v37 = *__error();
      _sa_logt();
      v46 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      {
        if (v22)
          v47 = "y";
        else
          v47 = "n";
        if (v100)
          v48 = "y";
        else
          v48 = "n";
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v47;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v48;
        if (v99)
          v26 = "y";
        else
          v26 = "n";
        *(_WORD *)&buf[22] = 2080;
        v186 = (uint64_t (*)(uint64_t, uint64_t))v26;
        _os_log_error_impl(&dword_1B9BE0000, v46, OS_LOG_TYPE_ERROR, "aThread %s, dispatchQueue %s, swiftTaskStates %s", buf, 0x20u);
      }
      else
      {
        if (v22)
          v47 = "y";
        else
          v47 = "n";
        if (v99)
          v26 = "y";
        else
          v26 = "n";
      }

      *__error() = v37;
      _SASetCrashLogMessage(10376, "aThread %s, dispatchQueue %s, swiftTaskStates %s", v49, v50, v51, v52, v53, v54, (char)v47);
      _os_crash();
      __break(1u);
      goto LABEL_71;
    }
    v27 = objc_msgSend(*(id *)(a1 + 16), "displayBlockedReasons");
    if (v27)
    {
      v28 = objc_msgSend(*(id *)(a1 + 16), "displayBlockedReasonsLackingProcessOwners");
      if (objc_msgSend(*(id *)(a1 + 16), "displayAddressesInBlockedReasons"))
        v28 |= 2uLL;
    }
    else
    {
      v28 = 0;
    }
    v29 = objc_msgSend(*(id *)(a1 + 16), "patchTruncatedStacks");
    v86 = objc_msgSend(*(id *)(a1 + 16), "displayBlockedThreads");
    v84 = objc_msgSend(*(id *)(a1 + 16), "displayRunnableThreads");
    v81 = objc_msgSend(*(id *)(a1 + 16), "displayRunningThreads");
    v89 = objc_msgSend(*(id *)(a1 + 16), "displayKernelFrames");
    v88 = objc_msgSend(*(id *)(a1 + 16), "displayExclaveFrames");
    v85 = objc_msgSend(*(id *)(a1 + 16), "displayUserFrames");
    v80 = objc_msgSend(*(id *)(a1 + 16), "displayIOInCallTrees");
    v87 = objc_msgSend(*(id *)(a1 + 16), "callTreeTimestampsTimeDomain") != 0;
    v83 = objc_msgSend(*(id *)(a1 + 16), "displayOnBehalfOfInCallTrees");
    v95 = objc_msgSend(*(id *)(a1 + 16), "showThreadStateAsLeafFrame");
    v82 = objc_msgSend(*(id *)(a1 + 16), "includeUserIdleAndBatteryStateInStacks");
    v79 = objc_msgSend(*(id *)(a1 + 16), "omitStacksOnAC");
    v78 = objc_msgSend(*(id *)(a1 + 16), "omitStacksOnBattery");
    v77 = objc_msgSend(*(id *)(a1 + 16), "omitStacksWithUserIdle");
    v76 = objc_msgSend(*(id *)(a1 + 16), "omitStacksWithUserActive");
    v75 = objc_msgSend(*(id *)(a1 + 16), "omitStacksWithPCore");
    v74 = objc_msgSend(*(id *)(a1 + 16), "omitStacksWithECore");
    v73 = objc_msgSend(*(id *)(a1 + 16), "omitStacksBelowBasePriority");
    v72 = objc_msgSend(*(id *)(a1 + 16), "omitStacksAboveBasePriority");
    if ((objc_msgSend(*(id *)(a1 + 16), "swiftAsyncDisplayCRootCallstacks") & 1) != 0)
      v71 = 1;
    else
      v71 = objc_msgSend(*(id *)(a1 + 16), "swiftAsyncPrintLeafyCCallstackOnTopOfCRootCallstacksAlways");
    v30 = *(_QWORD *)(a1 + 16);
    if (!v30)
      goto LABEL_74;
    v31 = *(_QWORD *)(v30 + 152);
    if (!v31)
    {
      v31 = 3;
      if (!*(_BYTE *)(v30 + 11))
        v31 = 1;
    }
    v70 = v31;
    v32 = *(_QWORD *)(v30 + 160);
    if (!v32)
    {
      v32 = 2;
      if (!*(_BYTE *)(v30 + 14))
        v32 = 3;
    }
    for (i = v32; ; i = 0)
    {
      v91 = v28;
      v90 = v29;
      v68 = ((objc_msgSend((id)v30, "printTargetThreadOnly") & 1) != 0 || (_DWORD)v24)
         && (v33 = *(_QWORD *)(a1 + 160)) != 0
         && (*(_BYTE *)(v33 + 325) & 1) != 0
         && *(_QWORD *)(a1 + 112) != 0;
      objc_msgSend((id)a1, "options");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v34, "tidsToPrint");
      v94 = (void *)objc_claimAutoreleasedReturnValue();

      v35 = a15;
      v36 = v98;
      if (!(v25 ^ 1 | (a15 & v95)))
        v36 = 0;
      if ((_DWORD)v24)
        v36 = 0;
      v67 = v36;
      if (v100)
        break;
      if (v99)
      {
        v37 = 0;
        goto LABEL_45;
      }
      v43 = objc_msgSend(v22, "indexOfFirstThreadStateOnOrAfterTime:sampleIndex:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
      if (v43 == 0x7FFFFFFFFFFFFFFFLL)
        goto LABEL_53;
      v37 = v43;
      if (!v23)
        goto LABEL_45;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v43);
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      v45 = objc_msgSend(v23, "indexOfObject:inSortedRange:options:usingComparator:", v44, 0, objc_msgSend(v23, "count"), 1280, &__block_literal_global_1536);

      v37 = v45;
      if (v45 < objc_msgSend(v23, "count"))
      {
        v35 = a15;
        goto LABEL_45;
      }
LABEL_71:
      a1 = v37;
      v28 = *__error();
      _sa_logt();
      v55 = objc_claimAutoreleasedReturnValue();
      a8 = (char)v23;
      if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend(v22, "debugDescription");
        v56 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v57 = objc_msgSend(v56, "UTF8String");
        v58 = objc_msgSend(v23, "count");
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)(v26 + 4) = v57;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)(v26 + 14) = a1;
        *(_WORD *)&buf[22] = 2048;
        v186 = (uint64_t (*)(uint64_t, uint64_t))v58;
        _os_log_error_impl(&dword_1B9BE0000, v55, OS_LOG_TYPE_ERROR, "%s: startingIndex %lu < threadStateIndexes.count %lu", buf, 0x20u);

      }
      v29 = (char)v23;
      *__error() = v28;
      objc_msgSend(v22, "debugDescription");
      v24 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      LOBYTE(v27) = objc_msgSend(v24, "UTF8String");
      objc_msgSend(v23, "count");
      _SASetCrashLogMessage(10442, "%s: startingIndex %lu < threadStateIndexes.count %lu", v59, v60, v61, v62, v63, v64, v27);

      v30 = _os_crash();
      __break(1u);
LABEL_74:
      v70 = 0;
    }
    v37 = -[SARecipe indexOfFirstStateOnOrAfterTime:sampleIndex:]((uint64_t)v100, *(void **)(a1 + 32), *(_QWORD *)(a1 + 48));
    if (v37 == 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_53;
LABEL_45:
    v92 = v25;
    v184[0] = 0;
    v184[1] = v184;
    v184[2] = 0x2020000000;
    v184[3] = 0;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v186 = __Block_byref_object_copy__4;
    v187 = __Block_byref_object_dispose__4;
    v188 = 0;
    v182[0] = 0;
    v182[1] = v182;
    v182[2] = 0x3032000000;
    v182[3] = __Block_byref_object_copy__4;
    v182[4] = __Block_byref_object_dispose__4;
    v183 = 0;
    v180[0] = 0;
    v180[1] = v180;
    v180[2] = 0x3032000000;
    v180[3] = __Block_byref_object_copy__4;
    v180[4] = __Block_byref_object_dispose__4;
    v181 = 0;
    v178[0] = 0;
    v178[1] = v178;
    v178[2] = 0x3032000000;
    v178[3] = __Block_byref_object_copy__4;
    v178[4] = __Block_byref_object_dispose__4;
    v179 = 0;
    v176[0] = 0;
    v176[1] = v176;
    v176[2] = 0x3032000000;
    v176[3] = __Block_byref_object_copy__4;
    v176[4] = __Block_byref_object_dispose__4;
    v177 = 0;
    v174[0] = 0;
    v174[1] = v174;
    v174[2] = 0x3032000000;
    v174[3] = __Block_byref_object_copy__4;
    v174[4] = __Block_byref_object_dispose__4;
    v175 = 0;
    v173[0] = 0;
    v173[1] = v173;
    v173[2] = 0x2020000000;
    v173[3] = 0x7FFFFFFFFFFFFFFFLL;
    v171[0] = 0;
    v171[1] = v171;
    v171[2] = 0x3032000000;
    v171[3] = __Block_byref_object_copy__4;
    v171[4] = __Block_byref_object_dispose__4;
    v172 = 0;
    v165 = 0;
    v166 = &v165;
    v167 = 0x3032000000;
    v168 = __Block_byref_object_copy__4;
    v169 = __Block_byref_object_dispose__4;
    v170 = 0;
    v161 = 0;
    v162 = &v161;
    v163 = 0x2020000000;
    v164 = 0;
    v160[0] = 0;
    v160[1] = v160;
    v160[2] = 0x2020000000;
    v160[3] = 0x7FFFFFFFFFFFFFFFLL;
    v158[0] = 0;
    v158[1] = v158;
    v158[2] = 0x2020000000;
    v159 = 0;
    v66 = *(void **)(a1 + 40);
    v65 = -[SASamplePrinter hasTimeIndexes](a1) & (v25 ^ 1);
    v101[0] = MEMORY[0x1E0C809B0];
    v101[1] = 3221225472;
    v101[2] = __245__SASamplePrinter_addStackForDispatchQueue_orSwiftTaskStates_orThread_andThreadStateIndexes_task_toRootObjects_nameChanges_dispatchQueueChanges_swiftTaskChanges_threadChanges_priorityChanges_microstackshotSummary_onlyHeaviestStack_includeState___block_invoke_1539;
    v101[3] = &unk_1E7149890;
    v101[4] = a1;
    v129 = 0;
    v102 = v98;
    v123 = v37;
    v103 = v22;
    v104 = v23;
    v38 = v100;
    v105 = v38;
    v39 = v99;
    v106 = v39;
    v107 = v94;
    v110 = v160;
    v130 = v68;
    v111 = v173;
    v112 = &v161;
    v131 = v81;
    v132 = v84;
    v133 = v86;
    v127 = v72;
    v128 = v73;
    v134 = v76;
    v135 = v77;
    v136 = v78;
    v137 = v79;
    v138 = v75;
    v139 = v74;
    v140 = v71;
    v125 = v70;
    v141 = v80;
    v113 = v158;
    v114 = v184;
    v115 = buf;
    v116 = v182;
    v142 = v35;
    v143 = v92;
    v117 = &v165;
    v118 = v171;
    v119 = v174;
    v120 = v178;
    v124 = i;
    v121 = v176;
    v144 = a9;
    v145 = a10;
    v146 = a12;
    v147 = a8;
    v148 = a11;
    v149 = v85;
    v150 = v89;
    v151 = v88;
    v40 = v96;
    v108 = v40;
    v122 = v180;
    v152 = v90;
    v153 = v27;
    v154 = v83;
    v155 = v95;
    v156 = v82;
    v109 = v97;
    v126 = v91;
    v157 = v87;
    -[SASamplePrinter iterateDispatchQueue:orSwiftTaskStates:orThread:threadStateIndexes:startingAtIndex:endingAfterTimestamp:task:stopAtTimeJumps:callback:](a1, v38, v39, v103, v104, v37, v66, v67, v65, v101);
    if (v35)
    {
      if ((v92 & 1) == 0)
      {
        v41 = v162[3];
        if (v166[5] || v41)
        {
          -[SASamplePrinter stateChangeStringForThreadState:serialDispatchQueue:swiftTaskStates:thread:threadStateIndexes:taskState:task:iteratorIndex:missingStateIsInAnotherStack:numSamplesOmittedSincePreviousDisplayedSample:sampleTimestamp:previousSampleTimestamp:previousDisplayedTimestamp:previousTaskState:previousThread:previousThreadState:dispatchQueueChanges:swiftTaskChanges:priorityChanges:nameChanges:threadChanges:isTimeJump:ioEventsSincePreviousThreadState:](a1, 0, v38, v39, 0, 0, 0, 0, 0, 0, v41, 0, 0, 0, 0, 0, 0, 0, 0,
            0,
            0,
            0,
            0,
            (void *)v166[5]);
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          if (v42)
            objc_msgSend(v40, "addObject:", v42);

        }
      }
    }

    _Block_object_dispose(v158, 8);
    _Block_object_dispose(v160, 8);
    _Block_object_dispose(&v161, 8);
    _Block_object_dispose(&v165, 8);

    _Block_object_dispose(v171, 8);
    _Block_object_dispose(v173, 8);
    _Block_object_dispose(v174, 8);

    _Block_object_dispose(v176, 8);
    _Block_object_dispose(v178, 8);

    _Block_object_dispose(v180, 8);
    _Block_object_dispose(v182, 8);

    _Block_object_dispose(buf, 8);
    _Block_object_dispose(v184, 8);
LABEL_53:

    objc_autoreleasePoolPop(context);
  }

}

void __30__SASamplePrinter_printHeader__block_invoke_2_898(uint64_t a1, uint64_t a2, void *a3)
{
  -[SASamplePrinter addStackForDispatchQueue:orSwiftTaskStates:orThread:andThreadStateIndexes:task:toRootObjects:nameChanges:dispatchQueueChanges:swiftTaskChanges:threadChanges:priorityChanges:microstackshotSummary:onlyHeaviestStack:includeState:](*(_QWORD *)(a1 + 32), 0, 0, a3, 0, *(void **)(a1 + 40), *(void **)(a1 + 48), 1, 1, 0, 1, 1, 0, 1u, 0);
}

- (id)binaryImagesHitByTask:(uint64_t)a1
{
  id v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v3 = a2;
  if (a1)
  {
    v4 = *(void **)(a1 + 128);
    v5 = v4;
    if (!v4)
    {
      objc_msgSend(*(id *)(a1 + 160), "targetProcess");
      v5 = (id)objc_claimAutoreleasedReturnValue();
    }
    v6 = v3;
    v7 = v6;
    if (v5 != v3
      && (v8 = *(_QWORD *)(a1 + 16)) != 0
      && (v9 = *(_QWORD *)(v8 + 168), v9 != 1)
      && (v9 || *(_BYTE *)(v8 + 11))
      && (objc_msgSend(v6, "mainBinary"), (v10 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      v11 = (void *)v10;
      if (objc_msgSend(*(id *)(a1 + 16), "taskAggregation") == 3)
      {
        v12 = (void *)objc_msgSend(v7, "resourceCoalitionID");
        if (v12)
        {
          objc_msgSend(v7, "sharedCache");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v13 = 0;
        }
      }
      else
      {
        v13 = 0;
        v12 = 0;
      }
      v14 = -[SATaskAggregationIdentifier initWithBinary:sharedCache:rcid:]((id *)[SATaskAggregationIdentifier alloc], v11, v13, v12);

    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v7);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
    }

    if (!v4)
    objc_msgSend(*(id *)(a1 + 72), "objectForKeyedSubscript:", v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v15)
    {
      v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 10);
      objc_msgSend(*(id *)(a1 + 72), "setObject:forKeyedSubscript:", v15, v14);
    }

  }
  else
  {
    v15 = 0;
  }

  return v15;
}

- (void)addStack:(void *)a3 toStream:(unint64_t)a4 sampleCount:(void *)a5 binariesToDisplay:(uint64_t)a6 primaryState:(int)a7 primaryMicrostackshotState:(char)a8 onlyHeaviestStack:
{
  id v15;
  void *v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  void *v20;
  double v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  char v37;
  BOOL v38;
  char v39;
  char v40;
  id v41;
  id v42;
  unsigned int v43;
  _QWORD v44[5];
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  char v67;
  char v68;
  BOOL v69;
  char v70;
  char v71;
  BOOL v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t (*v84)(uint64_t, uint64_t);
  void (*v85)(uint64_t);
  id v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  char v94;
  _QWORD v95[3];
  char v96;
  _QWORD v97[3];
  int v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD v103[3];
  int v104;
  _QWORD v105[4];
  _QWORD v106[3];
  char v107;

  v15 = a2;
  v42 = a3;
  v41 = a5;
  v16 = (void *)MEMORY[0x1BCCCC288]();
  v17 = 1;
  v40 = a8;
  if ((objc_msgSend(*(id *)(a1 + 16), "printHeavyStacks") & 1) == 0 && (a8 & 1) == 0)
    v17 = !-[SASamplePrinter hasTimeIndexes](a1);
  v18 = objc_msgSend(*(id *)(a1 + 16), "printJson");
  if (objc_msgSend(*(id *)(a1 + 16), "displayBlockedReasons"))
  {
    v19 = objc_msgSend(*(id *)(a1 + 16), "displayBlockedReasonsLackingProcessOwners");
    if (objc_msgSend(*(id *)(a1 + 16), "displayAddressesInBlockedReasons"))
      v19 |= 2uLL;
  }
  else
  {
    v19 = 0;
  }
  v39 = objc_msgSend(*(id *)(a1 + 16), "showThreadStateAsLeafFrame");
  v38 = objc_msgSend(*(id *)(a1 + 16), "callTreeTimestampsTimeDomain") != 0;
  v37 = objc_msgSend(*(id *)(a1 + 16), "displayOnBehalfOfInCallTrees");
  if (v17)
  {
    v20 = &__block_literal_global_1570;
    objc_msgSend(v15, "sortUsingComparator:", &__block_literal_global_1570);
    v36 = &__block_literal_global_1578;
  }
  else
  {
    v20 = 0;
    v36 = 0;
  }
  v106[0] = 0;
  v106[1] = v106;
  v106[2] = 0x2020000000;
  v107 = 1;
  if (v18)
    objc_msgSend(v42, "appendString:", CFSTR(",\n\n\"stack\":["));
  v35 = v19;
  v21 = log10((double)a4 + 1.0);
  -[SASampleStore lastTaskWithPid:](*(_QWORD **)(a1 + 160), 0);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(*(id *)(a1 + 16), "omitFramesBelowSampleCount") < 1)
    v22 = 0;
  else
    v22 = objc_msgSend(*(id *)(a1 + 16), "omitFramesBelowSampleCount");
  if ((int)objc_msgSend(*(id *)(a1 + 16), "omitFramesBelowPercentOfStackSamples") >= 1)
  {
    v23 = objc_msgSend(*(id *)(a1 + 16), "omitFramesBelowPercentOfStackSamples");
    if (v22 <= v23 * a4 / 0x64)
      v22 = v23 * a4 / 0x64;
  }
  v33 = a6;
  v32 = a7;
  if (objc_msgSend(*(id *)(a1 + 16), "omitFramesAfterLineCount") < 1)
    v24 = 0;
  else
    v24 = objc_msgSend(*(id *)(a1 + 16), "omitFramesAfterLineCount");
  v105[0] = 0;
  v105[1] = v105;
  v105[2] = 0x2020000000;
  v105[3] = 0;
  v103[0] = 0;
  v103[1] = v103;
  v103[2] = 0x2020000000;
  v104 = -1;
  v99 = 0;
  v100 = &v99;
  v101 = 0x2020000000;
  v102 = 0;
  v97[0] = 0;
  v97[1] = v97;
  v97[2] = 0x2020000000;
  v98 = 0;
  v95[0] = 0;
  v95[1] = v95;
  v95[2] = 0x2020000000;
  v96 = 0;
  v91 = 0;
  v92 = &v91;
  v93 = 0x2020000000;
  v94 = 0;
  v87 = 0;
  v88 = &v87;
  v89 = 0x2020000000;
  v90 = 0;
  v81 = 0;
  v82 = &v81;
  v83 = 0x3032000000;
  v84 = __Block_byref_object_copy__4;
  v85 = __Block_byref_object_dispose__4;
  v86 = 0;
  v77 = 0;
  v78 = &v77;
  v79 = 0x2020000000;
  v80 = 0x7FFFFFFFFFFFFFFFLL;
  v73 = 0;
  v74 = &v73;
  v75 = 0x2020000000;
  v76 = 0x7FFFFFFFFFFFFFFFLL;
  v44[0] = MEMORY[0x1E0C809B0];
  v44[1] = 3221225472;
  v44[2] = __125__SASamplePrinter_addStack_toStream_sampleCount_binariesToDisplay_primaryState_primaryMicrostackshotState_onlyHeaviestStack___block_invoke_1583;
  v44[3] = &unk_1E7149968;
  v67 = v40;
  v50 = v105;
  v51 = v103;
  v52 = v97;
  v53 = &v99;
  v61 = v24;
  v62 = v22;
  v44[4] = a1;
  v48 = v20;
  v68 = v18;
  v54 = v95;
  v55 = v106;
  v25 = v42;
  v69 = v17;
  v45 = v25;
  v56 = &v73;
  v57 = &v87;
  v43 = vcvtpd_u64_f64(v21);
  v65 = v43;
  v58 = &v77;
  v59 = &v91;
  v60 = &v81;
  v26 = v34;
  v46 = v26;
  v27 = v41;
  v70 = v39;
  v47 = v27;
  v49 = v36;
  v71 = v37;
  v66 = v32;
  v63 = v33;
  v64 = v35;
  v72 = v38;
  +[SACallTreeFrame enumerateTree:block:]((uint64_t)SACallTreeFrame, v15, v44);
  v28 = (void *)v100[3];
  if (v28)
  {
    free(v28);
    v100[3] = 0;
  }
  v29 = v74[3];
  if (v29 != 0x7FFFFFFFFFFFFFFFLL)
  {
    if (v17)
    {
      saos_printf_frame(v25, *((unsigned int *)v88 + 6), v43, v29 - v78[3] + 1, *((unsigned __int8 *)v92 + 24), (void *)v82[5]);
    }
    else
    {
      if (-[SASamplePrinter hasTimeIndexes](a1))
      {
        v30 = objc_msgSend(*(id *)(a1 + 16), "forceOneBasedTimeIndexes");
        v31 = v29 + 1;
        if (v30)
          v31 -= *(_QWORD *)(a1 + 48);
      }
      else
      {
        v31 = 0x7FFFFFFFFFFFFFFFLL;
      }
      saos_printf_timeline_frame(v25, *((unsigned int *)v88 + 6), v43, v74[3] - v78[3] + 1, *((unsigned __int8 *)v92 + 24), (void *)v82[5], v31);
    }
  }
  if (v18)
    objc_msgSend(v25, "appendString:", CFSTR("]\n"));

  _Block_object_dispose(&v73, 8);
  _Block_object_dispose(&v77, 8);
  _Block_object_dispose(&v81, 8);

  _Block_object_dispose(&v87, 8);
  _Block_object_dispose(&v91, 8);
  _Block_object_dispose(v95, 8);
  _Block_object_dispose(v97, 8);
  _Block_object_dispose(&v99, 8);
  _Block_object_dispose(v103, 8);
  _Block_object_dispose(v105, 8);

  _Block_object_dispose(v106, 8);
  objc_autoreleasePoolPop(v16);

}

- (void)printBinaryImagesForTask:(uint64_t)a1
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  int v12;
  void *v13;
  id v14;

  v3 = a2;
  -[SASamplePrinter binaryImagesHitByTask:](a1, v3);
  v14 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "mainBinaryLoadInfo");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    if (objc_msgSend(v4, "loadAddress"))
    {
      objc_msgSend(v4, "binary");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "objectForKeyedSubscript:", v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v6, "count");

      if (!v7)
        v8 = -[SASamplePrinter displayedBinaryLoadInfoForLoadInfo:offsetIntoLoadInfo:binariesToDisplay:extraBinariesToDisplay:](a1, v4, 0, v14);
    }
  }
  if (objc_msgSend(v14, "count"))
  {
    -[SASamplePrinter sortedLoadInfosForBinaryImages:](a1, v14);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v9, "count"))
    {
      v10 = *(void **)(a1 + 16);
      v11 = v9;
      v12 = objc_msgSend(v10, "printJson");
      v13 = *(void **)(a1 + 8);
      if (v12)
        objc_msgSend(v13, "appendString:", CFSTR(",\"binaryImages\":"));
      else
        objc_msgSend(v13, "printWithFormat:", CFSTR("\n%*sBinary Images:\n"), 2, ");
      -[SASamplePrinter printLoadInfos:]((id *)a1, v11);

    }
  }

}

- (void)printHIDEvent:(uint64_t)a1
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  uint64_t i;
  void *v31;
  void *v32;
  void *v33;
  double v34;
  double v35;
  double v36;
  double v37;
  id v38;
  __CFString *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v49;
  unint64_t v50;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  id v57;
  uint64_t v58;
  __CFString *v59;
  uint64_t v60;
  void *v61;
  id obj;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _BYTE v69[128];
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(v3, "hidEventTimestamp");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = *(void **)(a1 + 8);
  objc_msgSend(v3, "hidEventTypeString");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "printWithFormat:", CFSTR("HID event %@"), v6);

  if (-[SASamplePrinter hasTimeIndexes](a1))
  {
    v7 = *(void **)(a1 + 8);
    -[SASamplePrinter timeIndexDescriptionForTimestamp:](a1, v4);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "printWithFormat:", CFSTR(" started %@\n"), v8);

    goto LABEL_18;
  }
  objc_msgSend(v4, "machAbsTimeSeconds");
  v9 = 0.0;
  if (v10 == 0.0 || (objc_msgSend(*(id *)(a1 + 32), "machAbsTimeSeconds"), v11 == 0.0))
  {
    v15 = 0;
  }
  else
  {
    objc_msgSend(v4, "machAbsTimeSeconds");
    v13 = v12;
    objc_msgSend(*(id *)(a1 + 32), "machAbsTimeSeconds");
    v9 = v13 - v14;
    v15 = 1;
  }
  objc_msgSend(v4, "machContTimeSeconds");
  if (v16 != 0.0)
  {
    objc_msgSend(*(id *)(a1 + 32), "machContTimeSeconds");
    if (v17 != 0.0)
    {
      objc_msgSend(v4, "machContTimeSeconds");
      v19 = v18;
      objc_msgSend(*(id *)(a1 + 32), "machContTimeSeconds");
      v9 = v19 - v20;
      v15 = 1;
    }
  }
  objc_msgSend(v4, "wallTime");
  if (v21 == 0.0 || (objc_msgSend(*(id *)(a1 + 32), "wallTime"), v22 == 0.0))
  {
    if (!v15)
    {
      objc_msgSend(*(id *)(a1 + 8), "printWithFormat:", CFSTR("\n"), v60);
      goto LABEL_18;
    }
  }
  else
  {
    objc_msgSend(v4, "wallTime");
    v24 = v23;
    objc_msgSend(*(id *)(a1 + 32), "wallTime");
    v9 = v24 - v25;
  }
  v26 = *(void **)(a1 + 8);
  if (v9 >= 0.0)
    objc_msgSend(v26, "printWithFormat:", CFSTR(" started %.1f seconds after start of sampling\n"), *(_QWORD *)&v9);
  else
    objc_msgSend(v26, "printWithFormat:", CFSTR(" started %.1f seconds before sampling\n"), -v9);
LABEL_18:
  objc_msgSend(*(id *)(a1 + 8), "printWithFormat:", CFSTR("%-48s %-11s %11s  %s\n"), "Event", "Time Index", "Delay", "Process/Thread");
  v27 = *(void **)(a1 + 8);
  -[SASamplePrinter displayNameForPid:threadId:timestamp:]((_QWORD *)a1, 0, 0, *(void **)(a1 + 32));
  v28 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  objc_msgSend(v27, "printWithFormat:", CFSTR("%-48s %-11s %11s  %s\n"), "handleReport", "No samples", "N/A", objc_msgSend(v28, "UTF8String"));

  v29 = v4;
  v65 = 0u;
  v66 = 0u;
  v67 = 0u;
  v68 = 0u;
  objc_msgSend(v3, "steps");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v61 = v29;
  v64 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v65, v69, 16);
  if (v64)
  {
    v63 = *(_QWORD *)v66;
    do
    {
      for (i = 0; i != v64; ++i)
      {
        if (*(_QWORD *)v66 != v63)
          objc_enumerationMutation(obj);
        v31 = *(void **)(*((_QWORD *)&v65 + 1) + 8 * i);
        objc_msgSend(v31, "timestamp");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v31, "debugidString");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v32, "machAbsTimeSeconds");
        v35 = v34;
        objc_msgSend(v29, "machAbsTimeSeconds");
        v37 = ReduceToSignificantDigits(2, 0, (v35 - v36) * 1000.0);
        v38 = v29;
        v29 = v32;
        v39 = &stru_1E714A250;
        if (-[SASamplePrinter hasTimeIndexes](a1))
        {
          v40 = objc_msgSend(*(id *)(a1 + 160), "indexOfFirstSampleOnOrAfterTimestamp:", v38);
          v41 = objc_msgSend(*(id *)(a1 + 160), "indexOfLastSampleOnOrBeforeTimestamp:", v29);
          v42 = 0x7FFFFFFFFFFFFFFFLL;
          if (v40 != 0x7FFFFFFFFFFFFFFFLL)
          {
            v44 = *(_QWORD *)(a1 + 48);
            v43 = *(_QWORD *)(a1 + 56);
            v45 = v44 <= v40 || v44 == 0x7FFFFFFFFFFFFFFFLL;
            v42 = v45 ? v40 : *(_QWORD *)(a1 + 48);
            if (v43 != 0x7FFFFFFFFFFFFFFFLL && v43 < v42)
              v42 = 0x7FFFFFFFFFFFFFFFLL;
          }
          v39 = CFSTR("No samples");
          if (v41 != 0x7FFFFFFFFFFFFFFFLL)
          {
            v47 = *(_QWORD *)(a1 + 48);
            v46 = *(_QWORD *)(a1 + 56);
            if (v46 >= v41 || v46 == 0x7FFFFFFFFFFFFFFFLL)
              v46 = v41;
            if (v47 <= v46)
              v49 = v46;
            else
              v49 = 0x7FFFFFFFFFFFFFFFLL;
            if (v47 == 0x7FFFFFFFFFFFFFFFLL)
              v50 = v46;
            else
              v50 = v49;
            if (v42 != 0x7FFFFFFFFFFFFFFFLL && v50 != 0x7FFFFFFFFFFFFFFFLL && v42 <= v50)
            {
              -[SASamplePrinter timeIndexDescriptionForStartSampleIndex:endSampleIndex:formattedToLength:](a1, v42, v50, 0xBu);
              v39 = (__CFString *)objc_claimAutoreleasedReturnValue();
            }
          }
        }

        v52 = objc_msgSend(v31, "pid");
        v53 = objc_msgSend(v31, "tid");
        objc_msgSend(v31, "timestamp");
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        -[SASamplePrinter displayNameForPid:threadId:timestamp:]((_QWORD *)a1, v52, v53, v54);
        v55 = (void *)objc_claimAutoreleasedReturnValue();

        v56 = *(void **)(a1 + 8);
        v57 = objc_retainAutorelease(v33);
        v58 = objc_msgSend(v57, "UTF8String");
        v59 = objc_retainAutorelease(v39);
        objc_msgSend(v56, "printWithFormat:", CFSTR("%-48s %-11s %9.3fms  %@\n"), v58, -[__CFString UTF8String](v59, "UTF8String"), *(_QWORD *)&v37, v55);

      }
      v64 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v65, v69, 16);
    }
    while (v64);
  }

}

- (void)printLoadInfos:(id *)a1
{
  id v3;
  int v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  int v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v18;
  int v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  int v27;
  uint64_t v28;
  void *v29;
  void *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  void *v36;
  _QWORD *v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  void *v49;
  int v50;
  NSObject *v51;
  const __CFString *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  id v58;
  id v59;
  id v60;
  void *v61;
  void *v62;
  id v63;
  void *v64;
  id v65;
  void *v66;
  void *v67;
  char v68;
  char v69;
  id v70;
  id v71;
  char v72;
  id v73;
  uint64_t v74;
  void *v75;
  id v76;
  id v77;
  void *v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  NSObject *v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  NSObject *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  id v102;
  uint64_t v103;
  id obj;
  id obja;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  void *v112;
  id v113;
  id v114;
  void *v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint8_t buf[4];
  uint64_t v126;
  __int16 v127;
  _OWORD *v128;
  __int16 v129;
  uint64_t v130;
  _OWORD v131[4];
  _BYTE v132[128];
  _BYTE v133[128];
  uint64_t v134;

  v134 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (!objc_msgSend(a1[2], "printJson"))
  {
    v101 = v3;
    if ((objc_msgSend(a1[2], "tabDelineateBinaryImageSections") & 1) != 0)
    {
      v106 = 0;
      v107 = 0;
      v108 = 0;
      goto LABEL_58;
    }
    v123 = 0u;
    v124 = 0u;
    v121 = 0u;
    v122 = 0u;
    obj = v3;
    v111 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v121, v133, 16);
    if (!v111)
    {
      v106 = 0;
      v107 = 0;
      v108 = 0;
      goto LABEL_57;
    }
    v106 = 0;
    v107 = 0;
    v108 = 0;
    v109 = *(_QWORD *)v122;
    v4 = 1;
    while (1)
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v122 != v109)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v121 + 1) + 8 * v5);
        objc_msgSend(v6, "binary");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "bundleIdentifier");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = v8;
        if (v8)
        {
          v10 = v8;
        }
        else
        {
          objc_msgSend(v7, "name");
          v10 = (id)objc_claimAutoreleasedReturnValue();

        }
        if ((objc_msgSend(a1[2], "displayBinaryImagesLackingNameOrPath") & 1) == 0 && !v10)
        {
          if (((v4 | objc_msgSend(a1[2], "displayBinaryImageAddresses")) & 1) == 0)
            goto LABEL_50;
LABEL_19:
          v113 = v10;
          v12 = objc_msgSend(CFSTR("???"), "length");
          goto LABEL_20;
        }
        if (!v10)
          goto LABEL_19;
        v113 = v10;
        SACopySanitizedString(v10, 1, 0);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = objc_msgSend(v11, "length");

LABEL_20:
        objc_msgSend(v7, "bundleVersion");
        v13 = objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "bundleShortVersion");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "binaryVersion");
        v15 = objc_claimAutoreleasedReturnValue();
        v115 = (void *)v15;
        if (v14 || v13 || v15)
        {
          ++v12;
          if (v14)
          {
            v16 = v13 | v15;
            SACopySanitizedString(v14, 1, 0);
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            v18 = objc_msgSend(v17, "length");

            if (v16)
              v19 = v12 + 1;
            else
              v19 = v12;
            v12 = v19 + v18;
            if (!v16)
              goto LABEL_32;
LABEL_28:
            if (v13)
              v20 = (void *)v13;
            else
              v20 = v115;
            SACopySanitizedString(v20, 1, 0);
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            v12 += objc_msgSend(v21, "length") + 2;

            goto LABEL_32;
          }
          if (v13 | v15)
            goto LABEL_28;
        }
LABEL_32:
        if ((int)v108 <= v12)
          v22 = v12;
        else
          v22 = v108;
        v108 = v22;
        objc_msgSend(v6, "exclave");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = v23;
        if (v23)
        {
          objc_msgSend(v23, "name");
          v25 = (void *)objc_claimAutoreleasedReturnValue();

          if (v25)
          {
            objc_msgSend(v24, "name");
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            v27 = objc_msgSend(v26, "length") + 9;

          }
          else
          {
            v27 = 27;
          }
          if ((int)v107 <= v27)
            v28 = v27;
          else
            v28 = v107;
          v107 = v28;
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0 || (objc_msgSend(v6, "isZerothAndOnlySegment") & 1) == 0)
        {
          objc_msgSend(v6, "segment");
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v29, "name");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          v31 = objc_msgSend(v30, "length");

          if ((int)v106 <= v31)
            v32 = v31;
          else
            v32 = v106;
          v106 = v32;
        }

        v10 = v113;
LABEL_50:

        v4 = 0;
        ++v5;
      }
      while (v111 != v5);
      v33 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v121, v133, 16);
      v4 = 0;
      v111 = v33;
      if (!v33)
      {
LABEL_57:

        v3 = v101;
LABEL_58:
        v119 = 0u;
        v120 = 0u;
        v117 = 0u;
        v118 = 0u;
        v102 = v3;
        obja = (id)objc_msgSend(v102, "countByEnumeratingWithState:objects:count:", &v117, v132, 16);
        if (!obja)
          goto LABEL_168;
        v34 = 1;
        v103 = *(_QWORD *)v118;
        while (2)
        {
          v35 = 0;
LABEL_61:
          if (*(_QWORD *)v118 != v103)
            objc_enumerationMutation(v102);
          v36 = *(void **)(*((_QWORD *)&v117 + 1) + 8 * v35);
          objc_msgSend(v36, "binary");
          v37 = (_QWORD *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v36, "segment");
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v36, "exclave");
          v112 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v37, "bundleIdentifier");
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          v40 = v39;
          if (v39)
          {
            v41 = v39;
          }
          else
          {
            objc_msgSend(v37, "name");
            v41 = (id)objc_claimAutoreleasedReturnValue();

          }
          if ((objc_msgSend(a1[2], "displayBinaryImagesLackingNameOrPath") & 1) == 0
            && !v41
            && ((v34 | objc_msgSend(a1[2], "displayBinaryImageAddresses")) & 1) == 0)
          {
            goto LABEL_162;
          }
          memset(v131, 0, sizeof(v131));
          if (objc_msgSend(v36, "isInKernelAddressSpace"))
          {
            LOWORD(v131[0]) = 42;
            v42 = 1;
          }
          else
          {
            v42 = 0;
          }
          v114 = v41;
          if (objc_msgSend(a1[2], "displayBinaryImageAddresses"))
          {
            if (objc_msgSend(v36, "loadAddress"))
            {
              v43 = v42
                  + snprintf((char *)((unint64_t)v131 | v42), 64 - v42, "0x%llx", objc_msgSend(v36, "loadAddress"));
              if (v43 >= 64)
              {
                v83 = *__error();
                _sa_logt();
                v84 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218242;
                  v126 = v43;
                  v127 = 2080;
                  v128 = v131;
                  _os_log_error_impl(&dword_1B9BE0000, v84, OS_LOG_TYPE_ERROR, "ran off end of adornment  (%ld): '%s'", buf, 0x16u);
                }

                *__error() = v83;
                _SASetCrashLogMessage(7695, "ran off end of adornment  (%ld): '%s'", v86, v87, v88, v89, v90, v91, v43);
                _os_crash();
                __break(1u);
LABEL_173:
                v92 = *__error();
                _sa_logt();
                v93 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218242;
                  v126 = v43;
                  v127 = 2080;
                  v128 = v131;
                  _os_log_error_impl(&dword_1B9BE0000, v93, OS_LOG_TYPE_ERROR, "ran off end of adornment  (%ld): '%s'", buf, 0x16u);
                }

                *__error() = v92;
                _SASetCrashLogMessage(7698, "ran off end of adornment  (%ld): '%s'", v94, v95, v96, v97, v98, v99, v43);
                _os_crash();
                __break(1u);
              }
            }
            else
            {
              v43 = v42 + snprintf((char *)((unint64_t)v131 | v42), 64 - v42, "%s", "???");
              if (v43 >= 64)
                goto LABEL_173;
            }
            objc_msgSend(a1[1], "printWithFormat:", CFSTR("%*s"), 22, v131);
            if (v38)
            {
              v46 = objc_msgSend(v38, "length");
              if (!v46)
              {
LABEL_83:
                v46 = objc_msgSend(v37, "length");
                if (!v46)
                  goto LABEL_99;
              }
LABEL_93:
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0 || objc_msgSend(v36, "highestOffset") < v46)
              {
                objc_msgSend(a1[1], "printWithFormat:", CFSTR(" - %#18llx"), v46 + objc_msgSend(v36, "loadAddress") - 1);
                goto LABEL_100;
              }
              v50 = *__error();
              _sa_logt();
              v51 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
              {
                objc_msgSend(v36, "debugDescription");
                v79 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                v80 = objc_msgSend(v79, "UTF8String");
                v81 = objc_msgSend(v36, "highestOffset");
                *(_DWORD *)buf = 136315650;
                v126 = v80;
                v127 = 2048;
                v128 = (_OWORD *)v46;
                v129 = 2048;
                v130 = v81;
                _os_log_error_impl(&dword_1B9BE0000, v51, OS_LOG_TYPE_ERROR, "load info %s length 0x%llx has a hit at 0x%llx", buf, 0x20u);

              }
              *__error() = v50;
              v41 = v114;
            }
            else
            {
              if (objc_msgSend(v37, "length"))
                goto LABEL_83;
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
                v47 = objc_msgSend(v36, "highestOffset");
              else
                v47 = 0;
              -[SABinary segmentAtOffsetIntoBinary:](v37, 0);
              v48 = (void *)objc_claimAutoreleasedReturnValue();
              v49 = v48;
              if (v48
                && objc_msgSend(v48, "hasOffsetIntoBinary")
                && !objc_msgSend(v49, "offsetIntoBinary")
                && objc_msgSend(v49, "length")
                && v47 < objc_msgSend(v49, "length"))
              {
                v46 = objc_msgSend(v49, "length");
              }
              else
              {
                v46 = 0;
              }

              if (v46)
                goto LABEL_93;
            }
LABEL_99:
            objc_msgSend(a1[1], "printWithFormat:", CFSTR(" - %18s"), "???");
LABEL_100:
            if (objc_msgSend(a1[2], "tabDelineateBinaryImageSections"))
              v52 = CFSTR("\t");
            else
              v52 = CFSTR("  ");
            objc_msgSend(a1[1], "appendString:", v52);
            if (!v41)
            {
LABEL_104:
              v45 = (void *)objc_msgSend(CFSTR("???"), "mutableCopy");
LABEL_105:
              v110 = v38;
              if (objc_msgSend(a1[2], "tabDelineateBinaryImageSections"))
                objc_msgSend(v45, "appendString:", CFSTR("\t"));
              objc_msgSend(v37, "bundleVersion");
              v53 = objc_claimAutoreleasedReturnValue();
              objc_msgSend(v37, "bundleShortVersion");
              v54 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v37, "binaryVersion");
              v116 = objc_claimAutoreleasedReturnValue();
              if (v54 || v53 || v116)
              {
                if ((objc_msgSend(a1[2], "tabDelineateBinaryImageSections") & 1) == 0)
                  objc_msgSend(v45, "appendString:", CFSTR(" "));
                if (v54)
                {
                  SACopySanitizedString(v54, 1, 0);
                  v55 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v45, "appendFormat:", CFSTR("%@"), v55);

                  if (v53 | v116)
                  {
                    objc_msgSend(v45, "appendString:", CFSTR(" "));
                    goto LABEL_116;
                  }
                }
                else if (v53 | v116)
                {
LABEL_116:
                  if (v53)
                    v56 = (void *)v53;
                  else
                    v56 = (void *)v116;
                  SACopySanitizedString(v56, 1, 0);
                  v57 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v45, "appendFormat:", CFSTR("(%@)"), v57);

                }
              }
              v58 = a1[1];
              v59 = objc_retainAutorelease(v45);
              objc_msgSend(v58, "printWithFormat:", CFSTR("%-*s"), v108, objc_msgSend(v59, "UTF8String"));
              if (objc_msgSend(a1[2], "tabDelineateBinaryImageSections"))
                objc_msgSend(a1[1], "appendString:", CFSTR("\t"));
              if ((objc_msgSend(a1[2], "tabDelineateBinaryImageSections") & 1) == 0 && (int)v107 >= 1)
              {
                v60 = a1[1];
                if (v112)
                {
                  objc_msgSend(v112, "name");
                  v61 = (void *)objc_claimAutoreleasedReturnValue();
                  if (v61)
                  {
                    objc_msgSend(v112, "name");
                    v62 = (void *)objc_claimAutoreleasedReturnValue();
                  }
                  else
                  {
                    v62 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%#18llx"), objc_msgSend(v112, "identifier"));
                  }
                  v63 = objc_retainAutorelease(v62);
                  objc_msgSend(v60, "printWithFormat:", CFSTR(" exclave %-*s"), (v107 - 9), objc_msgSend(v63, "UTF8String"));

                }
                else
                {
                  objc_msgSend(v60, "printWithFormat:", CFSTR("%-*s"), v107, ");
                }
              }
              objc_msgSend(v37, "uuid");
              v64 = (void *)objc_claimAutoreleasedReturnValue();

              v41 = v114;
              if (v64)
              {
                if ((objc_msgSend(a1[2], "tabDelineateBinaryImageSections") & 1) == 0)
                  objc_msgSend(a1[1], "appendString:", CFSTR(" "));
                v65 = a1[1];
                objc_msgSend(v37, "uuid");
                v66 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v66, "UUIDString");
                v67 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v65, "printWithFormat:", CFSTR("<%@>"), v67);

                v41 = v114;
              }
              if (objc_msgSend(a1[2], "tabDelineateBinaryImageSections"))
                objc_msgSend(a1[1], "appendString:", CFSTR("\t"));
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
                v68 = objc_msgSend(v36, "isZerothAndOnlySegment");
              else
                v68 = 0;
              if (objc_msgSend(a1[2], "tabDelineateBinaryImageSections"))
              {
                if (v110)
                  v69 = v68;
                else
                  v69 = 1;
                if ((v69 & 1) == 0)
                {
                  v70 = a1[1];
                  objc_msgSend(v110, "name");
                  v71 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                  objc_msgSend(v70, "printWithFormat:", CFSTR("%s"), objc_msgSend(v71, "UTF8String"), v100);
                  goto LABEL_152;
                }
              }
              else if ((int)v106 >= 1)
              {
                if (v110)
                  v72 = v68;
                else
                  v72 = 1;
                v73 = a1[1];
                if ((v72 & 1) != 0)
                {
                  objc_msgSend(v73, "printWithFormat:", CFSTR("%-*s"), v106, ");
                }
                else
                {
                  objc_msgSend(v110, "name");
                  v71 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                  objc_msgSend(v73, "printWithFormat:", CFSTR("%-*s"), v106, objc_msgSend(v71, "UTF8String"));
LABEL_152:

                }
              }
              if (objc_msgSend(a1[2], "tabDelineateBinaryImageSections"))
                objc_msgSend(a1[1], "appendString:", CFSTR("\t"));
              objc_msgSend(v37, "path");
              v74 = objc_claimAutoreleasedReturnValue();
              if (v74)
              {
                v75 = (void *)v74;
                if ((objc_msgSend(a1[2], "tabDelineateBinaryImageSections") & 1) == 0)
                  objc_msgSend(a1[1], "appendString:", CFSTR("  "));
                if (objc_msgSend(a1[20], "sanitizePaths"))
                {
                  v76 = v75;

                }
                v77 = a1[1];
                SACopySanitizedString(v75, 1, 0);
                v78 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v77, "printWithFormat:", CFSTR("%@"), v78);

                v41 = v114;
              }
              objc_msgSend(a1[1], "appendString:", CFSTR("\n"));

              v38 = v110;
LABEL_162:

              v34 = 0;
              if (obja == (id)++v35)
              {
                v82 = objc_msgSend(v102, "countByEnumeratingWithState:objects:count:", &v117, v132, 16);
                v34 = 0;
                obja = (id)v82;
                if (!v82)
                {
LABEL_168:

                  v3 = v101;
                  goto LABEL_169;
                }
                continue;
              }
              goto LABEL_61;
            }
          }
          else
          {
            objc_msgSend(a1[1], "printWithFormat:", CFSTR("%*s"), 4, v131);
            if (!v41)
              goto LABEL_104;
          }
          break;
        }
        SACopySanitizedString(v41, 1, 0);
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        v45 = (void *)objc_msgSend(v44, "mutableCopy");

        goto LABEL_105;
      }
    }
  }
  SAJSONWriteArray(a1[1], v3);
LABEL_169:

}

- (void)avoidOverlapInBinaryLoadInfos:(int)a3 onlyExclaves:(void *)a4 inTask:
{
  id v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  void *v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  int v30;
  NSObject *v31;
  _QWORD *v32;
  void *v33;
  int v34;
  NSObject *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  _QWORD *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  id obj;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint8_t buf[4];
  void *v72;
  __int16 v73;
  void *v74;
  __int16 v75;
  void *v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  unint64_t v80;
  __int16 v81;
  void *v82;
  __int16 v83;
  void *v84;
  __int16 v85;
  uint64_t v86;
  __int16 v87;
  unint64_t v88;
  _BYTE v89[128];
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v46 = a4;
  v67 = 0u;
  v68 = 0u;
  v69 = 0u;
  v70 = 0u;
  obj = v6;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v67, v89, 16);
  if (!v7)
  {
    v10 = 0;
    goto LABEL_47;
  }
  v9 = v7;
  v10 = 0;
  v11 = 0;
  v12 = (unint64_t *)MEMORY[0x1E0C85AD8];
  v66 = *(_QWORD *)v68;
  *(_QWORD *)&v8 = 138414338;
  v45 = v8;
  do
  {
    v13 = 0;
    v63 = v9;
    do
    {
      if (*(_QWORD *)v68 != v66)
        objc_enumerationMutation(obj);
      v14 = *(_QWORD **)(*((_QWORD *)&v67 + 1) + 8 * v13);
      objc_msgSend(v14, "segment", v45);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = objc_msgSend(v15, "length");
      if (v16)
      {
        v17 = v16;

      }
      else
      {
        objc_msgSend(v14, "binary");
        v18 = v10;
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = objc_msgSend(v19, "length");

        v10 = v18;
        if (!v17)
        {
          if (objc_msgSend(v14, "highestOffset"))
          {
            v20 = objc_msgSend(v14, "highestOffset");
            if (v20 >= 0x10000000)
              v17 = 0x10000000;
            else
              v17 = v20;
          }
          else
          {
            v21 = objc_msgSend(*(id *)(a1 + 160), "vmPageSize");
            if (v21)
              v17 = v21;
            else
              v17 = *v12;
          }
        }
      }
      v22 = objc_msgSend(*(id *)(a1 + 160), "vmPageSize");
      v23 = v22;
      if (!v22)
        v23 = *v12;
      if (v17 % v23)
      {
        v24 = objc_msgSend(*(id *)(a1 + 160), "vmPageSize");
        if (v24)
          v25 = v24;
        else
          v25 = *v12;
        v26 = objc_msgSend(*(id *)(a1 + 160), "vmPageSize");
        v27 = v26;
        if (!v26)
          v27 = *v12;
        v17 = v25 + v17 / v27 * v27;
      }
      v28 = objc_msgSend(v14, "loadAddress") + v17;
      if (objc_msgSend(v14, "loadAddress") < v11)
      {
        if (!a3
          || (objc_msgSend(v14, "exclave"), v29 = (void *)objc_claimAutoreleasedReturnValue(), v29, v29))
        {
          v30 = *__error();
          _sa_logt();
          v31 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
          {
            objc_msgSend(v46, "debugDescription");
            v61 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "binary");
            v55 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v55, "name");
            v59 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "binary");
            v53 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v53, "uuid");
            v57 = (void *)objc_claimAutoreleasedReturnValue();
            v47 = objc_msgSend(v14, "loadAddress");
            objc_msgSend(v10, "binary");
            v51 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v51, "name");
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "binary");
            v49 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v49, "uuid");
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            v39 = objc_msgSend(v10, "loadAddress");
            *(_DWORD *)buf = v45;
            v72 = v61;
            v73 = 2112;
            v74 = v59;
            v75 = 2112;
            v76 = v57;
            v77 = 2048;
            v78 = v47;
            v79 = 2048;
            v80 = v11;
            v81 = 2112;
            v82 = v37;
            v83 = 2112;
            v84 = v38;
            v85 = 2048;
            v86 = v39;
            v87 = 2048;
            v88 = v11;
            _os_log_debug_impl(&dword_1B9BE0000, v31, OS_LOG_TYPE_DEBUG, "%@: adjusted load address of %@ <%@> from 0x%llx to 0x%llx to avoid overlapping with %@ <%@> 0x%llx - 0x%llx", buf, 0x5Cu);

          }
          *__error() = v30;
          if (v14)
            v14[3] = v11;
          v28 = v17 + v11;
LABEL_33:
          v9 = v63;
          goto LABEL_34;
        }
        objc_msgSend(v10, "exclave");
        v33 = (void *)objc_claimAutoreleasedReturnValue();

        if (v33)
        {
          v34 = *__error();
          _sa_logt();
          v35 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
          {
            objc_msgSend(v46, "debugDescription");
            v62 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "binary");
            v56 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v56, "name");
            v60 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "binary");
            v54 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v54, "uuid");
            v40 = (void *)objc_claimAutoreleasedReturnValue();
            v48 = objc_msgSend(v10, "loadAddress");
            objc_msgSend(v14, "binary");
            v52 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v52, "name");
            v58 = v10;
            v41 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "binary");
            v50 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v50, "uuid");
            v42 = (void *)objc_claimAutoreleasedReturnValue();
            v43 = objc_msgSend(v14, "loadAddress");
            *(_DWORD *)buf = v45;
            v72 = v62;
            v73 = 2112;
            v74 = v60;
            v75 = 2112;
            v76 = v40;
            v77 = 2048;
            v78 = v48;
            v79 = 2048;
            v80 = v28;
            v81 = 2112;
            v82 = v41;
            v83 = 2112;
            v84 = v42;
            v85 = 2048;
            v86 = v43;
            v87 = 2048;
            v88 = v28;
            _os_log_debug_impl(&dword_1B9BE0000, v35, OS_LOG_TYPE_DEBUG, "%@: adjusted load address of %@ <%@> from 0x%llx to 0x%llx to avoid overlapping with %@ <%@> 0x%llx - 0x%llx", buf, 0x5Cu);

            v10 = v58;
          }

          *__error() = v34;
          v36 = objc_msgSend(v10, "loadAddress");
          if (v10)
            v10[3] = v28;
          v11 = v28 + v11 - v36;
          goto LABEL_33;
        }
      }
LABEL_34:
      if (v11 < v28)
      {
        v32 = v14;

        v10 = v32;
        v11 = v28;
      }
      v12 = (unint64_t *)MEMORY[0x1E0C85AD8];
      ++v13;
    }
    while (v9 != v13);
    v44 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v67, v89, 16);
    v9 = v44;
  }
  while (v44);
LABEL_47:

}

void __29__SASamplePrinter_preprocess__block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  void *v16;
  _QWORD v17[4];
  id v18;
  uint64_t v19;
  id v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = a2;
  if (v2)
  {
    -[SASamplePrinter binaryImagesHitByTask:](v2, v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(*(id *)(v2 + 16), "displayAllBinaries"))
    {
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      objc_msgSend(v3, "binaryLoadInfos");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
      if (v6)
      {
        v7 = v6;
        v8 = *(_QWORD *)v22;
        do
        {
          for (i = 0; i != v7; ++i)
          {
            if (*(_QWORD *)v22 != v8)
              objc_enumerationMutation(v5);
            v10 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * i);
            if (objc_msgSend(v10, "loadAddress"))
              v11 = -[SASamplePrinter displayedBinaryLoadInfoForLoadInfo:offsetIntoLoadInfo:binariesToDisplay:extraBinariesToDisplay:](v2, v10, 0, v4);
          }
          v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
        }
        while (v7);
      }

    }
    v12 = *(_QWORD *)(v2 + 16);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 168);
      if (v13 != 1 && (v13 || *(_BYTE *)(v12 + 11)))
      {
        v17[0] = MEMORY[0x1E0C809B0];
        v17[1] = 3221225472;
        v17[2] = __34__SASamplePrinter_preprocessTask___block_invoke;
        v17[3] = &unk_1E71490E0;
        v14 = v3;
        v18 = v14;
        v19 = v2;
        v15 = v4;
        v20 = v15;
        -[SATask enumerateFrames:]((uint64_t)v14, v17);
        -[SASamplePrinter sortedLoadInfosForBinaryImages:](v2, v15);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        -[SASamplePrinter avoidOverlapInBinaryLoadInfos:onlyExclaves:inTask:](v2, v16, 0, v14);

      }
    }

  }
}

void __29__SASamplePrinter_preprocess__block_invoke_2(uint64_t a1, void *a2)
{
  id *v3;
  id WeakRetained;
  id v5;
  id *v6;

  v3 = a2;
  v6 = v3;
  if (v3)
  {
    WeakRetained = objc_loadWeakRetained(v3 + 3);
    if (WeakRetained)
      v5 = -[SASamplePrinter displayedBinaryLoadInfoForLoadInfo:offsetIntoLoadInfo:binariesToDisplay:extraBinariesToDisplay:](*(_QWORD *)(a1 + 32), WeakRetained, objc_msgSend(v6, "address") - objc_msgSend(WeakRetained, "loadAddress"), *(void **)(a1 + 40));
  }
  else
  {
    WeakRetained = 0;
  }

}

- (id)displayedBinaryLoadInfoForLoadInfo:(uint64_t)a1 offsetIntoLoadInfo:(void *)a2 binariesToDisplay:(unint64_t)a3 extraBinariesToDisplay:(void *)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  char v11;
  void *v12;
  void *v13;

  if (a1)
  {
    v6 = a4;
    v7 = a2;
    objc_msgSend(v7, "binary");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "segment");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v7, "loadAddress");
    v11 = objc_msgSend(v7, "isInKernelAddressSpace");
    objc_msgSend(v7, "exclave");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    -[SASamplePrinter displayedBinaryLoadInfoForBinary:segment:desiredLoadAddress:offsetIntoLoadInfo:isInKernelAddressSpace:exclave:binariesToDisplay:extraBinariesToDisplay:](v8, v9, v10, a3, v11, v12, v6, 0);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v13 = 0;
  }
  return v13;
}

void __29__SASamplePrinter_preprocess__block_invoke_3(uint64_t a1, void *a2)
{
  id *v3;
  id WeakRetained;
  id v5;
  id *v6;

  v3 = a2;
  v6 = v3;
  if (v3)
  {
    WeakRetained = objc_loadWeakRetained(v3 + 3);
    if (WeakRetained)
      v5 = -[SASamplePrinter displayedBinaryLoadInfoForLoadInfo:offsetIntoLoadInfo:binariesToDisplay:extraBinariesToDisplay:](*(_QWORD *)(a1 + 32), WeakRetained, objc_msgSend(v6, "address") - objc_msgSend(WeakRetained, "loadAddress"), *(void **)(a1 + 40));
  }
  else
  {
    WeakRetained = 0;
  }

}

- (id)sortedLoadInfosForBinaryImages:(uint64_t)a1
{
  objc_class *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, void *);
  void *v13;
  uint64_t v14;
  id v15;

  v3 = (objc_class *)MEMORY[0x1E0C99DE8];
  v4 = a2;
  v5 = (void *)objc_msgSend([v3 alloc], "initWithCapacity:", objc_msgSend(v4, "count"));
  v10 = MEMORY[0x1E0C809B0];
  v11 = 3221225472;
  v12 = __50__SASamplePrinter_sortedLoadInfosForBinaryImages___block_invoke;
  v13 = &unk_1E7149478;
  v14 = a1;
  v6 = v5;
  v15 = v6;
  objc_msgSend(v4, "enumerateKeysAndObjectsUsingBlock:", &v10);

  objc_msgSend(v6, "sortUsingComparator:", &__block_literal_global_1224, v10, v11, v12, v13, v14);
  v7 = v15;
  v8 = v6;

  return v8;
}

void __34__SASamplePrinter_preprocessTask___block_invoke(uint64_t a1, void *a2)
{
  id *v3;
  id WeakRetained;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  int v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  id *v14;

  v3 = a2;
  v14 = v3;
  if (!v3)
  {
    WeakRetained = 0;
    goto LABEL_7;
  }
  WeakRetained = objc_loadWeakRetained(v3 + 3);
  if (WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "binaryLoadInfos");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "indexOfObjectIdenticalTo:", WeakRetained);

    if (v6 != 0x7FFFFFFFFFFFFFFFLL)
    {
      -[SASamplePrinter displayedBinaryLoadInfoForLoadInfo:offsetIntoLoadInfo:binariesToDisplay:extraBinariesToDisplay:](*(_QWORD *)(a1 + 40), WeakRetained, objc_msgSend(v14, "address") - objc_msgSend(WeakRetained, "loadAddress"), *(void **)(a1 + 48));
      v7 = (_QWORD *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "mainBinaryLoadInfo");
      v8 = (id)objc_claimAutoreleasedReturnValue();
      if (v8 == WeakRetained)
      {
        v9 = objc_msgSend(*(id *)(a1 + 32), "pid");

        if (!v9)
          goto LABEL_6;
        v10 = objc_msgSend(v7, "loadAddress");
        objc_msgSend(*(id *)(a1 + 32), "mainBinaryLoadInfo");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = objc_msgSend(v11, "loadAddress");

        if (v10 <= v12)
          goto LABEL_6;
        objc_msgSend(*(id *)(a1 + 32), "mainBinaryLoadInfo");
        v8 = (id)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v8, "loadAddress");
        if (v7)
          v7[3] = v13;
      }

LABEL_6:
    }
  }
LABEL_7:

}

- (uint64_t)shouldPrintTask:(void *)a3 thread:(void *)a4 dispatchQueue:
{
  id v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  id v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  void *v27;
  void *v28;
  int v29;
  uint64_t v30;
  void *v31;
  int v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t i;
  void *v44;
  int v45;
  void *v46;
  char v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t j;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  id Property;
  uint64_t v64;
  unint64_t v66;
  unint64_t v67;
  void *v68;
  void *v69;
  void *v70;
  char objb;
  id obj;
  id obja;
  void *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _BYTE v87[128];
  _BYTE v88[128];
  _BYTE v89[128];
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (!a1)
    goto LABEL_98;
  objc_msgSend((id)a1, "options");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "pidsToPrint");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend((id)a1, "options");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "uniquePidsToPrint");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend((id)a1, "options");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "processNamesToPrint");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend((id)a1, "options");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "processUUIDsToPrint");
  v74 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend((id)a1, "options");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "tidsToPrint");
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v11 && !v13 && !v18 && !v15 && !v74)
  {
    objc_msgSend((id)a1, "options");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v19, "printTargetThreadOnly");

    if (!v20)
    {
LABEL_96:
      a1 = 1;
      goto LABEL_97;
    }
  }
  objc_msgSend(*(id *)(a1 + 160), "targetProcess");
  v21 = (id)objc_claimAutoreleasedReturnValue();

  if (v21 == v7)
  {
    if (!(v8 | v9))
      goto LABEL_96;
    objc_msgSend((id)a1, "options");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = objc_msgSend(v28, "printTargetThreadOnly");

    if (!v29)
      goto LABEL_96;
    if (objc_msgSend(*(id *)(a1 + 160), "targetThreadId") && objc_msgSend(*(id *)(a1 + 160), "targetDispatchQueueId"))
    {
      if (!v8)
        goto LABEL_9;
      if (!v9)
        goto LABEL_9;
      v30 = objc_msgSend((id)v8, "threadId");
      if (v30 != objc_msgSend(*(id *)(a1 + 160), "targetThreadId"))
        goto LABEL_9;
    }
    else
    {
      if (objc_msgSend(*(id *)(a1 + 160), "targetThreadId"))
      {
        if (!v8)
          goto LABEL_9;
        v38 = objc_msgSend((id)v8, "threadId");
        v39 = objc_msgSend(*(id *)(a1 + 160), "targetThreadId");
        goto LABEL_43;
      }
      if (!objc_msgSend(*(id *)(a1 + 160), "targetDispatchQueueId"))
      {
        if ((objc_msgSend((id)v8, "isMainThread") & 1) != 0)
          goto LABEL_96;
        goto LABEL_9;
      }
      if (!v9)
        goto LABEL_9;
    }
    v38 = objc_msgSend((id)v9, "identifier");
    v39 = objc_msgSend(*(id *)(a1 + 160), "targetDispatchQueueId");
LABEL_43:
    if (v38 == v39)
      goto LABEL_96;
  }
LABEL_9:
  if (v11)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(v7, "pid"));
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = objc_msgSend(v11, "containsObject:", v22);

    if ((v23 & 1) != 0)
      goto LABEL_96;
  }
  if (v13)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v7, "uniquePid"));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend(v13, "containsObject:", v24);

    if ((v25 & 1) != 0)
      goto LABEL_96;
  }
  if (v15)
  {
    objc_msgSend(v7, "name");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    if (v26 && objc_msgSend(v15, "containsObject:", v26))
      goto LABEL_20;

  }
  if (v74)
  {
    objc_msgSend(v7, "mainBinary");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "uuid");
    v26 = (void *)objc_claimAutoreleasedReturnValue();

    if (v26 && objc_msgSend(v74, "containsObject:", v26))
    {
LABEL_20:

      goto LABEL_96;
    }

  }
  objc_msgSend((id)a1, "options");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = objc_msgSend(v31, "printProblematicProcessesAndThreads");

  if (!v32)
    goto LABEL_55;
  objc_msgSend(v7, "taskStates");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "lastObject");
  v34 = (void *)objc_claimAutoreleasedReturnValue();

  if (v34
    && ((objc_msgSend(v34, "wqExceededTotalThreadLimit") & 1) != 0
     || (objc_msgSend(v34, "wqExceededConstrainedThreadLimit") & 1) != 0))
  {
LABEL_95:

    goto LABEL_96;
  }
  v68 = v34;
  if (v8)
  {
    v35 = *(void **)(a1 + 144);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend((id)v8, "threadId"));
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "objectForKeyedSubscript:", v36);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objb = objc_msgSend(v37, "isPartOfADeadlock");

    v34 = v68;
    if ((objb & 1) == 0)
      goto LABEL_54;
    goto LABEL_95;
  }
  v69 = v15;
  v66 = v9;
  v85 = 0u;
  v86 = 0u;
  v83 = 0u;
  v84 = 0u;
  objc_msgSend(v7, "threads");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v40 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v83, v89, 16);
  if (!v40)
    goto LABEL_53;
  v41 = v40;
  v42 = *(_QWORD *)v84;
  do
  {
    for (i = 0; i != v41; ++i)
    {
      if (*(_QWORD *)v84 != v42)
        objc_enumerationMutation(obj);
      objc_msgSend(*(id *)(a1 + 144), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v83 + 1) + 8 * i));
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      v45 = objc_msgSend(v44, "isPartOfADeadlock");

      if (v45)
      {

        v8 = 0;
        v9 = v66;
        v34 = v68;
        v15 = v69;
        goto LABEL_95;
      }
    }
    v41 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v83, v89, 16);
  }
  while (v41);
LABEL_53:

  v8 = 0;
  v9 = v66;
  v34 = v68;
  v15 = v69;
LABEL_54:

LABEL_55:
  v70 = v15;
  if (v18)
  {
    if (v8)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend((id)v8, "threadId"));
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      v47 = objc_msgSend(v18, "containsObject:", v46);

      v15 = v70;
      if ((v47 & 1) != 0)
        goto LABEL_96;
    }
    else
    {
      v67 = v9;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      objc_msgSend(v7, "threads");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      v49 = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v79, v88, 16);
      if (v49)
      {
        v50 = v49;
        v51 = *(_QWORD *)v80;
        do
        {
          for (j = 0; j != v50; ++j)
          {
            if (*(_QWORD *)v80 != v51)
              objc_enumerationMutation(v48);
            if (objc_msgSend(v18, "containsObject:", *(_QWORD *)(*((_QWORD *)&v79 + 1) + 8 * j)))
            {

              a1 = 1;
              v9 = v67;
              goto LABEL_93;
            }
          }
          v50 = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v79, v88, 16);
        }
        while (v50);
      }

      v9 = v67;
      v15 = v70;
    }
  }
  objc_msgSend((id)a1, "options");
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v53, "printTargetThreadOnly"))
  {

    a1 = 0;
    goto LABEL_97;
  }
  v54 = objc_msgSend(*(id *)(a1 + 120), "count");

  if (!v54)
    goto LABEL_89;
  v77 = 0u;
  v78 = 0u;
  v75 = 0u;
  v76 = 0u;
  obja = *(id *)(a1 + 120);
  v55 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v75, v87, 16);
  if (!v55)
    goto LABEL_88;
  v57 = v55;
  v58 = *(_QWORD *)v76;
  while (2)
  {
    v59 = 0;
    while (2)
    {
      if (*(_QWORD *)v76 != v58)
        objc_enumerationMutation(obja);
      v60 = *(_QWORD **)(*((_QWORD *)&v75 + 1) + 8 * v59);
      if (!v8)
      {
        if (v60)
          goto LABEL_82;
        goto LABEL_86;
      }
      if (!v60)
      {
LABEL_86:
        Property = 0;
        goto LABEL_83;
      }
      if (!v60[2])
        goto LABEL_82;
      v61 = objc_msgSend((id)v8, "threadId");
      v62 = v60[2];
      if (v61 == v62)
        goto LABEL_92;
      if (!v62)
      {
LABEL_82:
        Property = objc_getProperty(v60, v56, 8, 1);
LABEL_83:
        if (Property == v7)
        {
LABEL_92:

          a1 = 1;
          goto LABEL_93;
        }
      }
      if (v57 != ++v59)
        continue;
      break;
    }
    v64 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v75, v87, 16);
    v57 = v64;
    if (v64)
      continue;
    break;
  }
LABEL_88:

LABEL_89:
  a1 = 0;
LABEL_93:
  v15 = v70;
LABEL_97:

LABEL_98:
  return a1;
}

void __59__SASamplePrinter_highestPriorityInThread_useBasePriority___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  BOOL v4;
  void *v5;
  int v6;
  id v7;

  v3 = a2;
  v7 = v3;
  if (*(_BYTE *)(a1 + 40))
  {
    v4 = (int)objc_msgSend(v3, "basePriority") <= *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5 = v7;
    if (!v4)
    {
      v6 = objc_msgSend(v7, "basePriority");
LABEL_6:
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v6;
      v5 = v7;
    }
  }
  else
  {
    v4 = (int)objc_msgSend(v3, "scheduledPriority") <= *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v5 = v7;
    if (!v4)
    {
      v6 = objc_msgSend(v7, "scheduledPriority");
      goto LABEL_6;
    }
  }

}

- (uint64_t)highestPriorityInTask:(char)a3 useBasePriority:
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  _QWORD v10[6];
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;

  v5 = a2;
  v6 = v5;
  if (a1)
  {
    v12 = 0;
    v13 = &v12;
    v14 = 0x2020000000;
    v15 = 0;
    objc_msgSend(v5, "threads");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __57__SASamplePrinter_highestPriorityInTask_useBasePriority___block_invoke;
    v10[3] = &unk_1E7149130;
    v11 = a3;
    v10[4] = a1;
    v10[5] = &v12;
    objc_msgSend(v7, "enumerateKeysAndObjectsUsingBlock:", v10);

    v8 = *((unsigned int *)v13 + 6);
    _Block_object_dispose(&v12, 8);
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

void __57__SASamplePrinter_highestPriorityInTask_useBasePriority___block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD *v4;
  char v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD v14[5];
  char v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;

  v4 = *(_QWORD **)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 48);
  v6 = a3;
  v7 = v6;
  if (v4)
  {
    v16 = 0;
    v17 = &v16;
    v18 = 0x2020000000;
    v19 = 0;
    v8 = v4[4];
    v9 = v4[5];
    v10 = v4[6];
    v11 = v4[7];
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __59__SASamplePrinter_highestPriorityInThread_useBasePriority___block_invoke;
    v14[3] = &unk_1E7149108;
    v15 = v5;
    v14[4] = &v16;
    objc_msgSend(v6, "enumerateThreadStatesBetweenStartTime:startSampleIndex:endTime:endSampleIndex:reverseOrder:block:", v8, v10, v9, v11, 0, v14);
    v12 = *((_DWORD *)v17 + 6);
    _Block_object_dispose(&v16, 8);
  }
  else
  {
    v12 = 0;
  }

  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (v12 > *(_DWORD *)(v13 + 24))
    *(_DWORD *)(v13 + 24) = v12;
}

- (_QWORD)largestFootprintInTask:(_QWORD *)a1
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v11 = 0;
    v12 = &v11;
    v13 = 0x2020000000;
    v14 = 0;
    v5 = a1[4];
    v6 = a1[5];
    v7 = a1[6];
    v8 = a1[7];
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __42__SASamplePrinter_largestFootprintInTask___block_invoke;
    v10[3] = &unk_1E7149158;
    v10[4] = &v11;
    objc_msgSend(v3, "enumerateTaskStatesBetweenStartTime:startSampleIndex:endTime:endSampleIndex:reverseOrder:block:", v5, v7, v6, v8, 0, v10);
    a1 = (_QWORD *)v12[3];
    _Block_object_dispose(&v11, 8);
  }

  return a1;
}

void __42__SASamplePrinter_largestFootprintInTask___block_invoke(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((unint64_t)objc_msgSend(v3, "taskSizeInBytes") > *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend(v3, "taskSizeInBytes");

}

void __41__SASamplePrinter_printTasksIndividually__block_invoke(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  id v5;

  v3 = a2;
  if (*(id *)(a1 + 32) != v3)
  {
    v5 = v3;
    v4 = -[SASamplePrinter shouldPrintTask:thread:dispatchQueue:](*(_QWORD *)(a1 + 40), v3, 0, 0);
    v3 = v5;
    if (v4)
    {
      objc_msgSend(*(id *)(a1 + 48), "addObject:", v5);
      v3 = v5;
    }
  }

}

uint64_t __41__SASamplePrinter_printTasksIndividually__block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t (**v20)(_QWORD, _QWORD);
  id v21;
  id v22;
  uint64_t (**v23)(_QWORD);
  id v24;
  uint64_t v25;
  uint64_t (**v26)(_QWORD);
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (**v34)(void);
  uint64_t v35;
  id v37;
  id v38;
  uint64_t (**v39)(void);
  uint64_t (**v40)(void);
  uint64_t (**v41)(void);
  uint64_t (**v42)(void);
  uint64_t (**v43)(void);
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _QWORD v48[4];
  id v49;
  uint64_t v50;
  id v51;
  _QWORD v52[5];
  id v53;
  id v54;
  _QWORD v55[5];
  id v56;
  id v57;
  _QWORD v58[4];
  id v59;
  id v60;
  _QWORD v61[5];
  id v62;
  id v63;
  _QWORD v64[4];
  id v65;
  id v66;
  _QWORD v67[4];
  id v68;
  id v69;
  _QWORD v70[4];
  id v71;
  id v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = MEMORY[0x1E0C809B0];
  v70[0] = MEMORY[0x1E0C809B0];
  v70[1] = 3221225472;
  v70[2] = __41__SASamplePrinter_printTasksIndividually__block_invoke_3;
  v70[3] = &unk_1E71491A8;
  v8 = v5;
  v71 = v8;
  v9 = v6;
  v72 = v9;
  v42 = (uint64_t (**)(void))MEMORY[0x1BCCCC450](v70);
  v67[0] = v7;
  v67[1] = 3221225472;
  v67[2] = __41__SASamplePrinter_printTasksIndividually__block_invoke_4;
  v67[3] = &unk_1E71491A8;
  v10 = v8;
  v68 = v10;
  v11 = v9;
  v69 = v11;
  v41 = (uint64_t (**)(void))MEMORY[0x1BCCCC450](v67);
  v64[0] = v7;
  v64[1] = 3221225472;
  v64[2] = __41__SASamplePrinter_printTasksIndividually__block_invoke_5;
  v64[3] = &unk_1E71491A8;
  v12 = v10;
  v65 = v12;
  v13 = v11;
  v66 = v13;
  v40 = (uint64_t (**)(void))MEMORY[0x1BCCCC450](v64);
  v61[0] = v7;
  v61[1] = 3221225472;
  v61[2] = __41__SASamplePrinter_printTasksIndividually__block_invoke_6;
  v61[3] = &unk_1E71491D0;
  v61[4] = *(_QWORD *)(a1 + 32);
  v14 = v12;
  v62 = v14;
  v15 = v13;
  v63 = v15;
  v39 = (uint64_t (**)(void))MEMORY[0x1BCCCC450](v61);
  v58[0] = v7;
  v58[1] = 3221225472;
  v58[2] = __41__SASamplePrinter_printTasksIndividually__block_invoke_7;
  v58[3] = &unk_1E71491A8;
  v16 = v14;
  v59 = v16;
  v17 = v15;
  v60 = v17;
  v43 = (uint64_t (**)(void))MEMORY[0x1BCCCC450](v58);
  v55[0] = v7;
  v55[1] = 3221225472;
  v55[2] = __41__SASamplePrinter_printTasksIndividually__block_invoke_8;
  v55[3] = &unk_1E71491F8;
  v55[4] = *(_QWORD *)(a1 + 32);
  v18 = v16;
  v56 = v18;
  v19 = v17;
  v57 = v19;
  v20 = (uint64_t (**)(_QWORD, _QWORD))MEMORY[0x1BCCCC450](v55);
  v52[0] = v7;
  v52[1] = 3221225472;
  v52[2] = __41__SASamplePrinter_printTasksIndividually__block_invoke_9;
  v52[3] = &unk_1E71491D0;
  v52[4] = *(_QWORD *)(a1 + 32);
  v21 = v18;
  v53 = v21;
  v22 = v19;
  v54 = v22;
  v23 = (uint64_t (**)(_QWORD))MEMORY[0x1BCCCC450](v52);
  v48[0] = v7;
  v48[1] = 3221225472;
  v48[2] = __41__SASamplePrinter_printTasksIndividually__block_invoke_10;
  v48[3] = &unk_1E7149220;
  v24 = v21;
  v25 = *(_QWORD *)(a1 + 32);
  v38 = v24;
  v49 = v24;
  v50 = v25;
  v37 = v22;
  v51 = v37;
  v26 = (uint64_t (**)(_QWORD))MEMORY[0x1BCCCC450](v48);
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v27 = *(id *)(a1 + 40);
  v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v44, v73, 16);
  if (v28)
  {
    v29 = v28;
    v30 = *(_QWORD *)v45;
LABEL_3:
    v31 = 0;
    while (2)
    {
      if (*(_QWORD *)v45 != v30)
        objc_enumerationMutation(v27);
      v32 = objc_msgSend(*(id *)(*((_QWORD *)&v44 + 1) + 8 * v31), "unsignedLongLongValue");
      switch(v32 & 0x7FFFFFFFFFFFFFFFLL)
      {
        case 1:
          v34 = v42;
          goto LABEL_17;
        case 2:
          v34 = v41;
          goto LABEL_17;
        case 3:
          v33 = v20[2](v20, 1);
          goto LABEL_18;
        case 4:
          v33 = v20[2](v20, 0);
          goto LABEL_18;
        case 5:
          v33 = v23[2](v23);
          goto LABEL_18;
        case 6:
        case 7:
        case 8:
        case 9:
          v33 = v26[2](v26);
          goto LABEL_18;
        case 0xALL:
          v34 = v43;
          goto LABEL_17;
        case 0xBLL:
          v34 = v39;
          goto LABEL_17;
        case 0xCLL:
          v34 = v40;
LABEL_17:
          v33 = ((uint64_t (*)(uint64_t (**)(void)))v34[2])(v34);
LABEL_18:
          if (!v33)
            goto LABEL_19;
          if (v32 >= 0)
            v35 = v33;
          else
            v35 = -v33;

          goto LABEL_36;
        default:
LABEL_19:
          if (v29 != ++v31)
            continue;
          v29 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v44, v73, 16);
          if (!v29)
            goto LABEL_21;
          goto LABEL_3;
      }
    }
  }
LABEL_21:

  if (((objc_msgSend(*(id *)(a1 + 40), "containsObject:", &unk_1E7167888) & 1) != 0 || (v35 = v43[2]()) == 0)
    && ((objc_msgSend(*(id *)(a1 + 40), "containsObject:", &unk_1E7167858) & 1) != 0 || (v35 = v42[2]()) == 0)
    && ((objc_msgSend(*(id *)(a1 + 40), "containsObject:", &unk_1E71678A0) & 1) != 0 || (v35 = v41[2]()) == 0)
    && ((objc_msgSend(*(id *)(a1 + 40), "containsObject:", &unk_1E71678B8) & 1) != 0 || (v35 = v40[2]()) == 0)
    && ((objc_msgSend(*(id *)(a1 + 40), "containsObject:", &unk_1E71678D0) & 1) != 0 || (v35 = v39[2]()) == 0))
  {
    v35 = 0;
  }
LABEL_36:

  return v35;
}

uint64_t __41__SASamplePrinter_printTasksIndividually__block_invoke_3(uint64_t a1)
{
  void *v2;
  void *v3;
  _BOOL4 v4;
  uint64_t v5;

  objc_msgSend(*(id *)(a1 + 32), "name");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "name");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v2, "length"))
  {

    v2 = 0;
  }
  if (objc_msgSend(v3, "length"))
  {
    v4 = v2 != 0;
    if (v2 && v3)
    {
      v5 = objc_msgSend(v2, "compare:options:", v3, 577);
      goto LABEL_11;
    }
  }
  else
  {

    v3 = 0;
    v4 = v2 != 0;
  }
  if (v4)
    v5 = -1;
  else
    v5 = 1;
LABEL_11:

  return v5;
}

uint64_t __41__SASamplePrinter_printTasksIndividually__block_invoke_4(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  int v5;
  int v6;

  v2 = objc_msgSend(*(id *)(a1 + 32), "uniquePid");
  if (v2 < objc_msgSend(*(id *)(a1 + 40), "uniquePid"))
    return -1;
  v3 = objc_msgSend(*(id *)(a1 + 32), "uniquePid");
  if (v3 > objc_msgSend(*(id *)(a1 + 40), "uniquePid"))
    return 1;
  v5 = objc_msgSend(*(id *)(a1 + 32), "pid");
  if (v5 < (int)objc_msgSend(*(id *)(a1 + 40), "pid"))
    return -1;
  v6 = objc_msgSend(*(id *)(a1 + 32), "pid");
  return v6 > (int)objc_msgSend(*(id *)(a1 + 40), "pid");
}

uint64_t __41__SASamplePrinter_printTasksIndividually__block_invoke_5(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  BOOL v5;
  uint64_t v6;

  objc_msgSend(*(id *)(a1 + 32), "startTimestamp");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "startTimestamp");
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)v3;
  if (v2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (v5)
  {
    if (v2)
      v6 = -1;
    else
      v6 = v3 != 0;
  }
  else
  {
    v6 = objc_msgSend(v2, "compare:", v3);
  }

  return v6;
}

uint64_t __41__SASamplePrinter_printTasksIndividually__block_invoke_6(uint64_t a1)
{
  _BOOL4 v2;
  void *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;

  v2 = -[SASamplePrinter hasTimeIndexes](*(_QWORD *)(a1 + 32));
  v4 = *(_QWORD **)(a1 + 32);
  v3 = *(void **)(a1 + 40);
  if (v2)
  {
    v5 = objc_msgSend(v3, "sampleCountInSampleIndexRangeStart:end:", v4[6], v4[7]);
    v6 = objc_msgSend(*(id *)(a1 + 48), "sampleCountInSampleIndexRangeStart:end:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56));
  }
  else
  {
    v5 = objc_msgSend(v3, "sampleCountInTimestampRangeStart:end:", v4[4], v4[5]);
    v6 = objc_msgSend(*(id *)(a1 + 48), "sampleCountInTimestampRangeStart:end:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40));
  }
  if (v5 > v6)
    return -1;
  else
    return v5 < v6;
}

uint64_t __41__SASamplePrinter_printTasksIndividually__block_invoke_7(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;

  if (objc_msgSend(*(id *)(a1 + 32), "uniquePid"))
    v2 = objc_msgSend(*(id *)(a1 + 32), "pid") == 0;
  else
    v2 = 1;
  if (objc_msgSend(*(id *)(a1 + 40), "uniquePid"))
    v3 = objc_msgSend(*(id *)(a1 + 40), "pid") == 0;
  else
    v3 = 1;
  v4 = 1;
  if (!v2)
    v4 = -1;
  if (v3 == v2)
    return 0;
  else
    return v4;
}

uint64_t __41__SASamplePrinter_printTasksIndividually__block_invoke_8(uint64_t a1, char a2)
{
  int v4;
  int v5;
  uint64_t v6;

  v4 = -[SASamplePrinter highestPriorityInTask:useBasePriority:](*(_QWORD *)(a1 + 32), *(void **)(a1 + 40), a2);
  v5 = -[SASamplePrinter highestPriorityInTask:useBasePriority:](*(_QWORD *)(a1 + 32), *(void **)(a1 + 48), a2);
  if (v4 <= v5)
    v6 = 0;
  else
    v6 = -1;
  if (v4 < v5)
    return 1;
  else
    return v6;
}

uint64_t __41__SASamplePrinter_printTasksIndividually__block_invoke_9(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = -[SASamplePrinter largestFootprintInTask:](*(_QWORD **)(a1 + 32), *(void **)(a1 + 40));
  v3 = -[SASamplePrinter largestFootprintInTask:](*(_QWORD **)(a1 + 32), *(void **)(a1 + 48));
  if (v2 <= v3)
    v4 = 0;
  else
    v4 = -1;
  if (v2 < v3)
    return 1;
  else
    return v4;
}

uint64_t __41__SASamplePrinter_printTasksIndividually__block_invoke_10(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  double v6;
  double v7;
  int v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint8_t buf[4];
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v21 = 0;
  v22 = 0;
  v20 = 0;
  objc_msgSend(*(id *)(a1 + 32), "cpuTimeNs:cpuInstructions:cpuCycles:betweenStartTime:endTime:", &v22, &v21, &v20, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 40));
  v18 = 0;
  v19 = 0;
  v17 = 0;
  objc_msgSend(*(id *)(a1 + 48), "cpuTimeNs:cpuInstructions:cpuCycles:betweenStartTime:endTime:", &v19, &v18, &v17, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 40));
  switch(a2)
  {
    case 6:
      v4 = v22;
      v5 = v19;
      goto LABEL_12;
    case 7:
      v4 = v21;
      v5 = v18;
      goto LABEL_12;
    case 8:
      v4 = v20;
      v5 = v17;
LABEL_12:
      if (v4 < v5)
        return 1;
      if (v4 <= v5)
        return 0;
      return -1;
    case 9:
      v6 = 0.0;
      v7 = 0.0;
      if (v21)
        v7 = (double)v20 / (double)v21;
      if (v18)
        v6 = (double)v17 / (double)v18;
      if (v7 < v6)
        return 1;
      if (v7 <= v6)
        return 0;
      return -1;
    default:
      v9 = *__error();
      _sa_logt();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        v24 = a2;
        _os_log_error_impl(&dword_1B9BE0000, v10, OS_LOG_TYPE_ERROR, "invalid sort option 0x%llx", buf, 0xCu);
      }

      *__error() = v9;
      _SASetCrashLogMessage(5109, "invalid sort option 0x%llx", v11, v12, v13, v14, v15, v16, a2);
      _os_crash();
      __break(1u);
      JUMPOUT(0x1B9C81E3CLL);
  }
}

void __41__SASamplePrinter_printTasksIndividually__block_invoke_952(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  NSObject *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v25 = a2;
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "printJson"))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    if (!*(_BYTE *)(v3 + 24))
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "appendString:", CFSTR(","));
      v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    }
    *(_BYTE *)(v3 + 24) = 0;
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "appendString:", CFSTR("\n\n\n{"));
  }
  if (*(id *)(a1 + 40) != v25
    || !objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "printTargetThreadOnly"))
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (!v4)
      goto LABEL_14;
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 160);
  if (v5 && (*(_BYTE *)(v5 + 325) & 1) != 0 && *(_QWORD *)(v4 + 112))
  {
LABEL_13:
    -[SASamplePrinter printTask:specialDispatchQueueId:specialThreadId:omitSpecial:omitOther:]((id *)v4, v25, 0, 0, 0, 0);
    goto LABEL_14;
  }
  v6 = objc_msgSend(*(id *)(v4 + 160), "targetDispatchQueueId");
  if (v6)
  {
    objc_msgSend(v25, "dispatchQueues");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "objectForKeyedSubscript:", v8);
    v9 = objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v9 = 0;
  }
  v10 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "targetThreadId");
  if (v10)
  {
    objc_msgSend(v25, "threads");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "objectForKeyedSubscript:", v12);
    v13 = objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v13 = 0;
  }
  if (!(v10 | v6))
  {
    objc_msgSend(v25, "mainThread");
    v14 = objc_claimAutoreleasedReturnValue();

    v13 = v14;
  }
  if (!(v9 | v13))
  {
    v15 = *__error();
    _sa_logt();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v25, "debugDescription");
      v17 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      *(_DWORD *)buf = 134218498;
      v27 = v6;
      v28 = 2048;
      v29 = v10;
      v30 = 2080;
      v31 = objc_msgSend(v17, "UTF8String");
      _os_log_error_impl(&dword_1B9BE0000, v16, OS_LOG_TYPE_ERROR, "target dispatch queue %llu, thread id 0x%llx, target task %s: no target dispatch queue nor thread", buf, 0x20u);

    }
    *__error() = v15;
    objc_msgSend(v25, "debugDescription");
    v18 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend(v18, "UTF8String");
    _SASetCrashLogMessage(5235, "target dispatch queue %llu, thread id 0x%llx, target task %s: no target dispatch queue nor thread", v19, v20, v21, v22, v23, v24, v6);

    _os_crash();
    __break(1u);
  }
  -[SASamplePrinter printTask:specialDispatchQueueId:specialThreadId:omitSpecial:omitOther:](*(id **)(a1 + 32), v25, objc_msgSend((id)v9, "identifier"), objc_msgSend((id)v13, "threadId"), 0, 0);

LABEL_14:
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "printJson"))
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "appendString:", CFSTR("}"));

}

- (void)printTask:(unint64_t)a3 specialDispatchQueueId:(uint64_t)a4 specialThreadId:(char *)a5 omitSpecial:(int)a6 omitOther:
{
  id v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  _BYTE *v31;
  int v32;
  const __CFString *v33;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  unint64_t v39;
  void *v40;
  void *v41;
  unint64_t v42;
  BOOL v43;
  id v44;
  void *v45;
  void *v46;
  id v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  int v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  void *context;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  id v70;
  uint8_t buf[128];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v11 = a2;
  if (a1)
  {
    v12 = (void *)MEMORY[0x1BCCCC288]();
    if ((_DWORD)a5 && a6)
    {
      v52 = *__error();
      _sa_logt();
      v53 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1B9BE0000, v53, OS_LOG_TYPE_ERROR, "Omitting special and other", buf, 2u);
      }

      *__error() = v52;
      _SASetCrashLogMessage(5948, "Omitting special and other", v54, v55, v56, v57, v58, v59, v60);
      _os_crash();
      __break(1u);
    }
    v13 = -[SASamplePrinter printTaskHeaderForTask:specialDispatchQueueId:specialThreadId:omitSpecial:omitOther:]((uint64_t)a1, v11, a3, a4, a5, a6);
    if (v13 < 0)
      goto LABEL_49;
    v14 = v13;
    if (objc_msgSend(a1[2], "binaryImagesBeforeStacks"))
      -[SASamplePrinter printBinaryImagesForTask:]((uint64_t)a1, v11);
    v15 = a1[2];
    if (!v15 || (v16 = v15[19], v16 != 3) && (v16 || !*((_BYTE *)v15 + 11)))
    {
      v23 = v11;
      context = (void *)MEMORY[0x1BCCCC288]();
      -[SASamplePrinter stacksForTask:taskSampleCount:](a1, v23, v14);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(a1[2], "printJson"))
        objc_msgSend(a1[1], "appendString:", CFSTR(",\"threads\":["));
      v62 = v23;
      v65 = v12;
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      v25 = v24;
      v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v66, buf, 16);
      if (v26)
      {
        v27 = v26;
        v28 = 0;
        v29 = *(_QWORD *)v67;
        do
        {
          for (i = 0; i != v27; ++i)
          {
            if (*(_QWORD *)v67 != v29)
              objc_enumerationMutation(v25);
            v31 = *(_BYTE **)(*((_QWORD *)&v66 + 1) + 8 * i);
            if (!v31 || (v31[8] & 1) == 0)
            {
              v32 = objc_msgSend(a1[2], "printJson");
              v33 = CFSTR("\n");
              if (v32)
              {
                if (v28)
                  objc_msgSend(a1[1], "appendString:", CFSTR(","));
                v33 = CFSTR("{");
              }
              objc_msgSend(a1[1], "appendString:", v33);
              -[SASamplePrinter printStack:stream:]((uint64_t)a1, v31, a1[1]);
              if (objc_msgSend(a1[2], "printJson"))
                objc_msgSend(a1[1], "appendString:", CFSTR("}"));
              ++v28;
            }
          }
          v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v66, buf, 16);
        }
        while (v27);
      }
      else
      {
        v28 = 0;
      }

      if (objc_msgSend(a1[2], "printJson"))
      {
        objc_msgSend(a1[1], "appendString:", CFSTR("]\n\n"));
        v12 = v65;
      }
      else
      {
        v12 = v65;
        if (!v28)
        {
          if (!-[SASamplePrinter hasTimeIndexes]((uint64_t)a1))
            goto LABEL_40;
          objc_msgSend(v62, "taskStates");
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v37, "firstObject");
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          v39 = objc_msgSend(v38, "endSampleIndex");
          objc_msgSend(v62, "taskStates");
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v40, "lastObject");
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          v42 = objc_msgSend(v41, "endSampleIndex");

          v43 = v39 >= v42;
          v12 = v65;
          if (!v43)
          {
LABEL_40:
            objc_msgSend(a1[1], "appendString:", CFSTR("\n"));
            objc_msgSend(a1[1], "printWithFormat:", CFSTR("%*sNo threads sampled\n"), 2, ", context);
          }
        }
      }

      objc_autoreleasePoolPop(context);
      goto LABEL_47;
    }
    if (!(a4 | a3))
    {
      *(_QWORD *)buf = v11;
      v34 = (void *)MEMORY[0x1E0C99D20];
      v35 = v11;
      objc_msgSend(v34, "arrayWithObjects:count:", buf, 1);
      v36 = (void *)objc_claimAutoreleasedReturnValue();

      -[SASamplePrinter printSingleStackForTasks:limitToDispatchQueueIds:limitToThreadIds:intersection:sampleCount:]((uint64_t)a1, v36, 0, 0, 0, v14);
      goto LABEL_47;
    }
    v64 = v12;
    if (a6)
    {
      v17 = objc_alloc(MEMORY[0x1E0C99E60]);
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", a4);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = (void *)objc_msgSend(v17, "initWithObjects:", v18, 0);

      v20 = objc_alloc(MEMORY[0x1E0C99E60]);
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", a3);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = (void *)objc_msgSend(v20, "initWithObjects:", v21, 0);
    }
    else
    {
      v44 = objc_alloc(MEMORY[0x1E0C99E20]);
      objc_msgSend(v11, "threads");
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v45, "allKeys");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      v63 = (void *)objc_msgSend(v44, "initWithArray:", v46);

      v47 = objc_alloc(MEMORY[0x1E0C99E20]);
      objc_msgSend(v11, "dispatchQueues");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v48, "allKeys");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = (void *)objc_msgSend(v47, "initWithArray:", v49);

      if (!(_DWORD)a5)
      {
        v19 = v63;
        v12 = v64;
        goto LABEL_46;
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", a4);
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = v63;
      objc_msgSend(v63, "removeObject:", v50);

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", a3);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "removeObject:", v21);
    }
    v12 = v64;

LABEL_46:
    v70 = v11;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v70, 1);
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    -[SASamplePrinter printSingleStackForTasks:limitToDispatchQueueIds:limitToThreadIds:intersection:sampleCount:]((uint64_t)a1, v51, v22, v19, a6, v14);

LABEL_47:
    if ((objc_msgSend(a1[2], "binaryImagesBeforeStacks") & 1) == 0)
      -[SASamplePrinter printBinaryImagesForTask:]((uint64_t)a1, v11);
LABEL_49:
    objc_autoreleasePoolPop(v12);
  }

}

void __44__SASamplePrinter_printTasksWithAggregation__block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  NSObject *v9;
  void *v10;
  id *v11;
  id v12;
  int v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (*(id *)(a1 + 32) != v3)
  {
    objc_msgSend(v3, "mainBinary");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      if (-[SASamplePrinter shouldPrintTask:thread:dispatchQueue:](*(_QWORD *)(a1 + 40), v4, 0, 0))
      {
        if (*(_BYTE *)(a1 + 56))
        {
          v6 = (void *)objc_msgSend(v4, "resourceCoalitionID");
          if (v6)
          {
            objc_msgSend(v4, "sharedCache");
            v7 = (void *)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            v7 = 0;
          }
        }
        else
        {
          v7 = 0;
          v6 = 0;
        }
        v11 = -[SATaskAggregationIdentifier initWithBinary:sharedCache:rcid:]((id *)[SATaskAggregationIdentifier alloc], v5, v7, v6);
        objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", v11);
        v12 = (id)objc_claimAutoreleasedReturnValue();
        if (!v12)
        {
          v12 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
          objc_msgSend(*(id *)(a1 + 48), "setObject:forKeyedSubscript:", v12, v11);
        }
        objc_msgSend(v12, "addObject:", v4);

      }
    }
    else
    {
      v8 = *__error();
      _sa_logt();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        -[SASamplePrinter displayNameForTask:includePid:](*(void **)(a1 + 40), v4, 1);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = 138412290;
        v14 = v10;
        _os_log_impl(&dword_1B9BE0000, v9, OS_LOG_TYPE_DEFAULT, "WARNING: No main binary for %@, not including in report", (uint8_t *)&v13, 0xCu);

      }
      *__error() = v8;
    }

  }
}

- (id)displayNameForTask:(int)a3 includePid:
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  const __CFString *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;

  v5 = a2;
  if (a1)
  {
    a1 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 64);
    objc_msgSend(v5, "name");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      objc_msgSend(v5, "name");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      SACopySanitizedString(v7, 1, 0);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1, "appendString:", v8);

    }
    else
    {
      if (objc_msgSend(v5, "pid"))
        v9 = CFSTR("UNKNOWN");
      else
        v9 = CFSTR("kernel_task");
      objc_msgSend(a1, "appendString:", v9);
    }

    objc_msgSend(v5, "bundleName");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (v10)
    {
      objc_msgSend(v5, "bundleName");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      SACopySanitizedString(v11, 1, 0);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1, "appendFormat:", CFSTR(" (%@)"), v12);

    }
    if (a3)
    {
      objc_msgSend(a1, "appendFormat:", CFSTR(" [%d]"), objc_msgSend(v5, "pid"));
      if (objc_msgSend(v5, "uniquePid") != -1)
      {
        v13 = objc_msgSend(v5, "uniquePid");
        if (v13 != (int)objc_msgSend(v5, "pid"))
          objc_msgSend(a1, "appendFormat:", CFSTR(" [unique pid %llu]"), objc_msgSend(v5, "uniquePid"));
      }
    }
  }

  return a1;
}

uint64_t __44__SASamplePrinter_printTasksWithAggregation__block_invoke_958(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t (**v21)(_QWORD, _QWORD);
  id v22;
  uint64_t v23;
  id v24;
  uint64_t (**v25)(_QWORD);
  id v26;
  uint64_t v27;
  uint64_t (**v28)(_QWORD);
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (**v36)(void);
  uint64_t v37;
  id v39;
  id v40;
  uint64_t (**v41)(void);
  uint64_t (**v42)(void);
  uint64_t (**v43)(void);
  uint64_t (**v44)(void);
  uint64_t (**v45)(void);
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _QWORD v50[4];
  id v51;
  uint64_t v52;
  id v53;
  _QWORD v54[4];
  id v55;
  uint64_t v56;
  id v57;
  _QWORD v58[4];
  id v59;
  uint64_t v60;
  id v61;
  _QWORD v62[4];
  id v63;
  id v64;
  _QWORD v65[5];
  id v66;
  id v67;
  _QWORD v68[4];
  id v69;
  id v70;
  _QWORD v71[4];
  id v72;
  id v73;
  _QWORD v74[4];
  id v75;
  id v76;
  _BYTE v77[128];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = MEMORY[0x1E0C809B0];
  v74[0] = MEMORY[0x1E0C809B0];
  v74[1] = 3221225472;
  v74[2] = __44__SASamplePrinter_printTasksWithAggregation__block_invoke_2;
  v74[3] = &unk_1E71491A8;
  v8 = v5;
  v75 = v8;
  v9 = v6;
  v76 = v9;
  v43 = (uint64_t (**)(void))MEMORY[0x1BCCCC450](v74);
  v71[0] = v7;
  v71[1] = 3221225472;
  v71[2] = __44__SASamplePrinter_printTasksWithAggregation__block_invoke_3;
  v71[3] = &unk_1E71491A8;
  v10 = v8;
  v72 = v10;
  v11 = v9;
  v73 = v11;
  v41 = (uint64_t (**)(void))MEMORY[0x1BCCCC450](v71);
  v68[0] = v7;
  v68[1] = 3221225472;
  v68[2] = __44__SASamplePrinter_printTasksWithAggregation__block_invoke_4;
  v68[3] = &unk_1E71491A8;
  v12 = v10;
  v69 = v12;
  v13 = v11;
  v70 = v13;
  v42 = (uint64_t (**)(void))MEMORY[0x1BCCCC450](v68);
  v65[0] = v7;
  v65[1] = 3221225472;
  v65[2] = __44__SASamplePrinter_printTasksWithAggregation__block_invoke_5;
  v65[3] = &unk_1E71491D0;
  v65[4] = *(_QWORD *)(a1 + 32);
  v14 = v12;
  v66 = v14;
  v15 = v13;
  v67 = v15;
  v44 = (uint64_t (**)(void))MEMORY[0x1BCCCC450](v65);
  v62[0] = v7;
  v62[1] = 3221225472;
  v62[2] = __44__SASamplePrinter_printTasksWithAggregation__block_invoke_6;
  v62[3] = &unk_1E71491A8;
  v16 = v14;
  v63 = v16;
  v17 = v15;
  v64 = v17;
  v45 = (uint64_t (**)(void))MEMORY[0x1BCCCC450](v62);
  v58[0] = v7;
  v58[1] = 3221225472;
  v58[2] = __44__SASamplePrinter_printTasksWithAggregation__block_invoke_7;
  v58[3] = &unk_1E71491F8;
  v18 = v16;
  v19 = *(_QWORD *)(a1 + 32);
  v59 = v18;
  v60 = v19;
  v20 = v17;
  v61 = v20;
  v21 = (uint64_t (**)(_QWORD, _QWORD))MEMORY[0x1BCCCC450](v58);
  v54[0] = v7;
  v54[1] = 3221225472;
  v54[2] = __44__SASamplePrinter_printTasksWithAggregation__block_invoke_8;
  v54[3] = &unk_1E71491D0;
  v22 = v18;
  v23 = *(_QWORD *)(a1 + 32);
  v55 = v22;
  v56 = v23;
  v24 = v20;
  v57 = v24;
  v25 = (uint64_t (**)(_QWORD))MEMORY[0x1BCCCC450](v54);
  v50[0] = v7;
  v50[1] = 3221225472;
  v50[2] = __44__SASamplePrinter_printTasksWithAggregation__block_invoke_9;
  v50[3] = &unk_1E7149220;
  v26 = v22;
  v27 = *(_QWORD *)(a1 + 32);
  v40 = v26;
  v51 = v26;
  v52 = v27;
  v39 = v24;
  v53 = v39;
  v28 = (uint64_t (**)(_QWORD))MEMORY[0x1BCCCC450](v50);
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v29 = *(id *)(a1 + 40);
  v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v46, v77, 16);
  if (v30)
  {
    v31 = v30;
    v32 = *(_QWORD *)v47;
LABEL_3:
    v33 = 0;
    while (2)
    {
      if (*(_QWORD *)v47 != v32)
        objc_enumerationMutation(v29);
      v34 = objc_msgSend(*(id *)(*((_QWORD *)&v46 + 1) + 8 * v33), "unsignedLongLongValue");
      switch(v34 & 0x7FFFFFFFFFFFFFFFLL)
      {
        case 1:
          v36 = v43;
          goto LABEL_17;
        case 2:
          v36 = v41;
          goto LABEL_17;
        case 3:
          v35 = v21[2](v21, 1);
          goto LABEL_18;
        case 4:
          v35 = v21[2](v21, 0);
          goto LABEL_18;
        case 5:
          v35 = v25[2](v25);
          goto LABEL_18;
        case 6:
        case 7:
        case 8:
        case 9:
          v35 = v28[2](v28);
          goto LABEL_18;
        case 0xALL:
          v36 = v45;
          goto LABEL_17;
        case 0xBLL:
          v36 = v44;
          goto LABEL_17;
        case 0xCLL:
          v36 = v42;
LABEL_17:
          v35 = ((uint64_t (*)(uint64_t (**)(void)))v36[2])(v36);
LABEL_18:
          if (!v35)
            goto LABEL_19;
          if (v34 >= 0)
            v37 = v35;
          else
            v37 = -v35;

          goto LABEL_34;
        default:
LABEL_19:
          if (v31 != ++v33)
            continue;
          v31 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v46, v77, 16);
          if (!v31)
            goto LABEL_21;
          goto LABEL_3;
      }
    }
  }
LABEL_21:

  if (((objc_msgSend(*(id *)(a1 + 40), "containsObject:", &unk_1E7167888) & 1) != 0 || (v37 = v45[2]()) == 0)
    && ((objc_msgSend(*(id *)(a1 + 40), "containsObject:", &unk_1E71678D0) & 1) != 0 || (v37 = v44[2]()) == 0)
    && ((objc_msgSend(*(id *)(a1 + 40), "containsObject:", &unk_1E7167858) & 1) != 0 || (v37 = v43[2]()) == 0)
    && ((objc_msgSend(*(id *)(a1 + 40), "containsObject:", &unk_1E71678B8) & 1) != 0 || (v37 = v42[2]()) == 0))
  {
    v37 = 0;
  }
LABEL_34:

  return v37;
}

uint64_t __44__SASamplePrinter_printTasksWithAggregation__block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _BOOL4 v6;
  uint64_t v7;

  objc_msgSend(*(id *)(a1 + 32), "firstObject");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "name");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 40), "firstObject");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "name");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (!objc_msgSend(v3, "length"))
  {

    v3 = 0;
  }
  if (objc_msgSend(v5, "length"))
  {
    v6 = v3 != 0;
    if (v3 && v5)
    {
      v7 = objc_msgSend(v3, "compare:options:", v5, 577);
      goto LABEL_11;
    }
  }
  else
  {

    v5 = 0;
    v6 = v3 != 0;
  }
  if (v6)
    v7 = -1;
  else
    v7 = 1;
LABEL_11:

  return v7;
}

uint64_t __44__SASamplePrinter_printTasksWithAggregation__block_invoke_3(uint64_t a1)
{
  void *v2;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  objc_msgSend(*(id *)(a1 + 32), "firstObject");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "firstObject");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v2, "uniquePid");
  if (v4 < objc_msgSend(v3, "uniquePid"))
  {
LABEL_5:
    v6 = -1;
    goto LABEL_6;
  }
  v5 = objc_msgSend(v2, "uniquePid");
  if (v5 <= objc_msgSend(v3, "uniquePid"))
  {
    v7 = objc_msgSend(v2, "pid");
    if (v7 >= (int)objc_msgSend(v3, "pid"))
    {
      v9 = objc_msgSend(v2, "pid");
      v6 = v9 > (int)objc_msgSend(v3, "pid");
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  v6 = 1;
LABEL_6:

  return v6;
}

uint64_t __44__SASamplePrinter_printTasksWithAggregation__block_invoke_4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  BOOL v6;
  uint64_t v7;

  objc_msgSend(*(id *)(a1 + 32), "firstObject");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "startTimestamp");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 40), "firstObject");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startTimestamp");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
  {
    if (v3)
      v7 = -1;
    else
      v7 = v5 != 0;
  }
  else
  {
    v7 = objc_msgSend(v3, "compare:", v5);
  }

  return v7;
}

uint64_t __44__SASamplePrinter_printTasksWithAggregation__block_invoke_5(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t i;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t k;
  id v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t j;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t m;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[128];
  _BYTE v41[128];
  _BYTE v42[128];
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (-[SASamplePrinter hasTimeIndexes](*(_QWORD *)(a1 + 32)))
  {
    v38 = 0uLL;
    v39 = 0uLL;
    v36 = 0uLL;
    v37 = 0uLL;
    v2 = *(id *)(a1 + 40);
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v36, v43, 16);
    if (v3)
    {
      v4 = v3;
      v5 = 0;
      v6 = *(_QWORD *)v37;
      do
      {
        for (i = 0; i != v4; ++i)
        {
          if (*(_QWORD *)v37 != v6)
            objc_enumerationMutation(v2);
          v5 += objc_msgSend(*(id *)(*((_QWORD *)&v36 + 1) + 8 * i), "sampleCountInSampleIndexRangeStart:end:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56));
        }
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v36, v43, 16);
      }
      while (v4);
    }
    else
    {
      v5 = 0;
    }

    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v13 = *(id *)(a1 + 48);
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v32, v42, 16);
    if (v14)
    {
      v15 = v14;
      v16 = 0;
      v17 = *(_QWORD *)v33;
      do
      {
        for (j = 0; j != v15; ++j)
        {
          if (*(_QWORD *)v33 != v17)
            objc_enumerationMutation(v13);
          v16 += objc_msgSend(*(id *)(*((_QWORD *)&v32 + 1) + 8 * j), "sampleCountInSampleIndexRangeStart:end:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56));
        }
        v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v32, v42, 16);
      }
      while (v15);
      goto LABEL_37;
    }
LABEL_36:
    v16 = 0;
    goto LABEL_37;
  }
  v30 = 0uLL;
  v31 = 0uLL;
  v28 = 0uLL;
  v29 = 0uLL;
  v8 = *(id *)(a1 + 40);
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v28, v41, 16);
  if (v9)
  {
    v10 = v9;
    v5 = 0;
    v11 = *(_QWORD *)v29;
    do
    {
      for (k = 0; k != v10; ++k)
      {
        if (*(_QWORD *)v29 != v11)
          objc_enumerationMutation(v8);
        v5 += objc_msgSend(*(id *)(*((_QWORD *)&v28 + 1) + 8 * k), "sampleCountInTimestampRangeStart:end:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40));
      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v28, v41, 16);
    }
    while (v10);
  }
  else
  {
    v5 = 0;
  }

  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v13 = *(id *)(a1 + 48);
  v19 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v24, v40, 16);
  if (!v19)
    goto LABEL_36;
  v20 = v19;
  v16 = 0;
  v21 = *(_QWORD *)v25;
  do
  {
    for (m = 0; m != v20; ++m)
    {
      if (*(_QWORD *)v25 != v21)
        objc_enumerationMutation(v13);
      v16 += objc_msgSend(*(id *)(*((_QWORD *)&v24 + 1) + 8 * m), "sampleCountInTimestampRangeStart:end:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), (_QWORD)v24);
    }
    v20 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v24, v40, 16);
  }
  while (v20);
LABEL_37:

  if (v5 > v16)
    return -1;
  else
    return v5 < v16;
}

uint64_t __44__SASamplePrinter_printTasksWithAggregation__block_invoke_6(uint64_t a1)
{
  void *v2;
  void *v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  objc_msgSend(*(id *)(a1 + 32), "firstObject");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "firstObject");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "uniquePid"))
    v4 = objc_msgSend(v2, "pid") == 0;
  else
    v4 = 1;
  if (objc_msgSend(v3, "uniquePid"))
    v5 = objc_msgSend(v3, "pid") == 0;
  else
    v5 = 1;
  v6 = 1;
  if (!v4)
    v6 = -1;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = v6;

  return v7;
}

uint64_t __44__SASamplePrinter_printTasksWithAggregation__block_invoke_7(uint64_t a1, char a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t i;
  int v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t j;
  int v17;
  uint64_t v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v4 = *(id *)(a1 + 32);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
  if (v5)
  {
    v6 = v5;
    v7 = 0;
    v8 = *(_QWORD *)v25;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v25 != v8)
          objc_enumerationMutation(v4);
        v10 = -[SASamplePrinter highestPriorityInTask:useBasePriority:](*(_QWORD *)(a1 + 40), *(void **)(*((_QWORD *)&v24 + 1) + 8 * i), a2);
        if (v10 > v7)
          v7 = v10;
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
    }
    while (v6);
  }
  else
  {
    v7 = 0;
  }

  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v11 = *(id *)(a1 + 48);
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
  if (v12)
  {
    v13 = v12;
    v14 = 0;
    v15 = *(_QWORD *)v21;
    do
    {
      for (j = 0; j != v13; ++j)
      {
        if (*(_QWORD *)v21 != v15)
          objc_enumerationMutation(v11);
        v17 = -[SASamplePrinter highestPriorityInTask:useBasePriority:](*(_QWORD *)(a1 + 40), *(void **)(*((_QWORD *)&v20 + 1) + 8 * j), a2);
        if (v17 > v14)
          v14 = v17;
      }
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
    }
    while (v13);
  }
  else
  {
    v14 = 0;
  }

  if (v7 <= v14)
    v18 = 0;
  else
    v18 = -1;
  if (v7 < v14)
    return 1;
  else
    return v18;
}

uint64_t __44__SASamplePrinter_printTasksWithAggregation__block_invoke_8(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t j;
  _QWORD *v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
  if (v3)
  {
    v4 = v3;
    v5 = 0;
    v6 = *(_QWORD *)v23;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v23 != v6)
          objc_enumerationMutation(v2);
        v8 = -[SASamplePrinter largestFootprintInTask:](*(_QWORD **)(a1 + 40), *(void **)(*((_QWORD *)&v22 + 1) + 8 * i));
        if (v8 > v5)
          v5 = v8;
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
    }
    while (v4);
  }
  else
  {
    v5 = 0;
  }

  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v9 = *(id *)(a1 + 48);
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
  if (v10)
  {
    v11 = v10;
    v12 = 0;
    v13 = *(_QWORD *)v19;
    do
    {
      for (j = 0; j != v11; ++j)
      {
        if (*(_QWORD *)v19 != v13)
          objc_enumerationMutation(v9);
        v15 = -[SASamplePrinter largestFootprintInTask:](*(_QWORD **)(a1 + 40), *(void **)(*((_QWORD *)&v18 + 1) + 8 * j));
        if (v15 > v12)
          v12 = v15;
      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
    }
    while (v11);
  }
  else
  {
    v12 = 0;
  }

  if (v5 <= v12)
    v16 = 0;
  else
    v16 = -1;
  if (v5 < v12)
    return 1;
  else
    return v16;
}

uint64_t __44__SASamplePrinter_printTasksWithAggregation__block_invoke_9(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t j;
  void *v19;
  BOOL v20;
  double v21;
  double v22;
  int v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id obj;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint8_t buf[16];
  _BYTE v45[128];
  _BYTE v46[128];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v3 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v40, v46, 16);
  if (v4)
  {
    v5 = v4;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = *(_QWORD *)v41;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v41 != v9)
          objc_enumerationMutation(v3);
        v11 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * i);
        *(_QWORD *)buf = 0;
        v38 = 0;
        v39 = 0;
        objc_msgSend(v11, "cpuTimeNs:cpuInstructions:cpuCycles:betweenStartTime:endTime:", buf, &v39, &v38, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 40));
        v8 += *(_QWORD *)buf;
        v7 += v39;
        v6 += v38;
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v40, v46, 16);
    }
    while (v5);
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
  }

  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  obj = *(id *)(a1 + 48);
  v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v34, v45, 16);
  if (v12)
  {
    v13 = v12;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = *(_QWORD *)v35;
    do
    {
      for (j = 0; j != v13; ++j)
      {
        if (*(_QWORD *)v35 != v17)
          objc_enumerationMutation(obj);
        v19 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * j);
        *(_QWORD *)buf = 0;
        v38 = 0;
        v39 = 0;
        objc_msgSend(v19, "cpuTimeNs:cpuInstructions:cpuCycles:betweenStartTime:endTime:", buf, &v39, &v38, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 40));
        v14 += *(_QWORD *)buf;
        v15 += v39;
        v16 += v38;
      }
      v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v34, v45, 16);
    }
    while (v13);
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
  }

  switch(a2)
  {
    case 6:
      v20 = v8 > v14;
      if (v8 >= v14)
        goto LABEL_33;
      return 1;
    case 7:
      v20 = v7 > v15;
      if (v7 < v15)
        return 1;
      goto LABEL_33;
    case 8:
      v20 = v6 > v16;
      if (v6 < v16)
        return 1;
LABEL_33:
      if (!v20)
        return 0;
      return -1;
    case 9:
      v21 = 0.0;
      v22 = 0.0;
      if (v7)
        v22 = (double)v6 / (double)v7;
      if (v15)
        v21 = (double)v16 / (double)v15;
      if (v22 < v21)
        return 1;
      if (v22 <= v21)
        return 0;
      return -1;
    default:
      v24 = *__error();
      _sa_logt();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_1B9BE0000, v25, OS_LOG_TYPE_ERROR, "invalid sort option 0x%llx", buf, 0xCu);
      }

      *__error() = v24;
      _SASetCrashLogMessage(5495, "invalid sort option 0x%llx", v26, v27, v28, v29, v30, v31, a2);
      _os_crash();
      __break(1u);
      JUMPOUT(0x1B9C83CECLL);
  }
}

- (void)printSingleStackForTasks:(void *)a3 limitToDispatchQueueIds:(void *)a4 limitToThreadIds:(char)a5 intersection:(unint64_t)a6 sampleCount:
{
  objc_super *p_dest;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t j;
  void *v24;
  void *v25;
  void *v26;
  unint64_t v27;
  void *v28;
  unint64_t v29;
  id v30;
  const char *v31;
  uint64_t k;
  _QWORD *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t m;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  _BOOL4 v43;
  uint64_t v44;
  void *v45;
  SABinaryLoadInfoToDisplay *v46;
  id v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  void *v54;
  id v55;
  SEL v56;
  id v57;
  int v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  int v72;
  uint64_t *v73;
  uint64_t v74;
  char v75;
  char v76;
  void *v77;
  unint64_t v78;
  void *v79;
  unint64_t v80;
  int v81;
  NSObject *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  NSObject *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  NSObject *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  NSObject *v106;
  id v107;
  uint64_t v108;
  void *v109;
  id v110;
  uint64_t v111;
  id v112;
  char v113;
  void *v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  void *v124;
  void *v126;
  uint64_t v127;
  id v128;
  uint64_t v129;
  uint64_t v130;
  id obj;
  id v132;
  __int128 v133;
  SAMicrostackshotSummary *self;
  uint64_t v135;
  void *v136;
  _QWORD v137[6];
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD v142[6];
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  _QWORD v163[4];
  id v164;
  id v165;
  uint64_t v166;
  void *v167;
  id v168;
  SAMicrostackshotSummary *v169;
  char v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  objc_super dest;
  uint64_t v176;
  int v177;
  _BYTE v178[128];
  _BYTE v179[128];
  _BYTE v180[128];
  _BYTE v181[128];
  uint64_t v182;

  v182 = *MEMORY[0x1E0C80C00];
  v11 = a2;
  *((_QWORD *)&v133 + 1) = a3;
  *(_QWORD *)&v133 = a4;
  v135 = a1;
  if ((objc_msgSend(*(id *)(a1 + 16), "printHeavyStacks") & 1) == 0)
  {
    v81 = *__error();
    _sa_logt();
    v82 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
    {
      LOWORD(dest.receiver) = 0;
      _os_log_error_impl(&dword_1B9BE0000, v82, OS_LOG_TYPE_ERROR, "!printHeavyStacks", (uint8_t *)&dest, 2u);
    }

    *__error() = v81;
    _SASetCrashLogMessage(7960, "!printHeavyStacks", v83, v84, v85, v86, v87, v88, v122);
    _os_crash();
    __break(1u);
    goto LABEL_93;
  }
  if (!objc_msgSend(v11, "count"))
  {
LABEL_93:
    v89 = *__error();
    _sa_logt();
    v90 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
    {
      LOWORD(dest.receiver) = 0;
      _os_log_error_impl(&dword_1B9BE0000, v90, OS_LOG_TYPE_ERROR, "Printing single stack for 0 tasks", (uint8_t *)&dest, 2u);
    }

    *__error() = v89;
    _SASetCrashLogMessage(7961, "Printing single stack for 0 tasks", v91, v92, v93, v94, v95, v96, v122);
    _os_crash();
    __break(1u);
    goto LABEL_96;
  }
  if (v133 != 0 && objc_msgSend(v11, "count") != 1)
  {
LABEL_96:
    v97 = *__error();
    _sa_logt();
    v98 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
    {
      LOWORD(dest.receiver) = 0;
      _os_log_error_impl(&dword_1B9BE0000, v98, OS_LOG_TYPE_ERROR, "Limiting to specific dispatch queues/threads, but with multiple tasks", (uint8_t *)&dest, 2u);
    }

    *__error() = v97;
    _SASetCrashLogMessage(7962, "Limiting to specific dispatch queues/threads, but with multiple tasks", v99, v100, v101, v102, v103, v104, v122);
    _os_crash();
    __break(1u);
    goto LABEL_99;
  }
  v132 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if ((objc_msgSend(*(id *)(a1 + 16), "microstackshotsFormat") & 1) != 0
    || objc_msgSend(*(id *)(a1 + 16), "systemstatsFormat"))
  {
    self = objc_alloc_init(SAMicrostackshotSummary);
  }
  else
  {
    self = 0;
  }
  v173 = 0u;
  v174 = 0u;
  v171 = 0u;
  v172 = 0u;
  v12 = v11;
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v171, v181, 16);
  if (v13)
  {
    v14 = *(_QWORD *)v172;
    do
    {
      for (i = 0; i != v13; ++i)
      {
        if (*(_QWORD *)v172 != v14)
          objc_enumerationMutation(v12);
        v16 = *(void **)(*((_QWORD *)&v171 + 1) + 8 * i);
        objc_msgSend(v16, "threads");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v163[0] = MEMORY[0x1E0C809B0];
        v163[1] = 3221225472;
        v163[2] = __110__SASamplePrinter_printSingleStackForTasks_limitToDispatchQueueIds_limitToThreadIds_intersection_sampleCount___block_invoke;
        v163[3] = &unk_1E71495E0;
        v164 = *((id *)&v133 + 1);
        v18 = (id)v133;
        v170 = a5;
        v165 = v18;
        v166 = v135;
        v167 = v16;
        v168 = v132;
        v169 = self;
        objc_msgSend(v17, "enumerateKeysAndObjectsUsingBlock:", v163);

      }
      v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v171, v181, 16);
    }
    while (v13);
  }

  objc_msgSend(v12, "firstObject");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  -[SASamplePrinter binaryImagesHitByTask:](v135, v19);
  v126 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v12, "firstObject");
  v127 = objc_claimAutoreleasedReturnValue();
  if (objc_msgSend((id)v127, "pid"))
  {
    v20 = 0;
  }
  else
  {
    if (v127)
      objc_copyStruct(&dest, (const void *)(v127 + 288), 8, 1, 0);
    v20 = CSArchitectureIs32Bit() ^ 1;
  }
  v161 = 0u;
  v162 = 0u;
  v159 = 0u;
  v160 = 0u;
  obj = v12;
  v21 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v159, v180, 16);
  if (!v21)
  {
    v136 = 0;
    v45 = obj;
    goto LABEL_69;
  }
  v136 = 0;
  p_dest = &dest;
  v22 = *(_QWORD *)v160;
  do
  {
    for (j = 0; j != v21; ++j)
    {
      if (*(_QWORD *)v160 != v22)
        objc_enumerationMutation(obj);
      v24 = *(void **)(*((_QWORD *)&v159 + 1) + 8 * j);
      objc_msgSend(v24, "mainBinaryLoadInfo");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = v25;
      if (v25)
      {
        if (!v136)
          goto LABEL_32;
        v27 = objc_msgSend(v25, "loadAddress");
        objc_msgSend(v136, "mainBinaryLoadInfo");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = objc_msgSend(v28, "loadAddress");

        if (!v20)
        {
          if (v27 >= v29)
            goto LABEL_33;
LABEL_32:
          v30 = v24;

          v136 = v30;
          goto LABEL_33;
        }
        if (v27 > v29)
          goto LABEL_32;
      }
LABEL_33:

    }
    v21 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v159, v180, 16);
  }
  while (v21);

  if (!v136)
  {
    v136 = 0;
    goto LABEL_70;
  }
  objc_msgSend((id)v127, "mainBinary");
  v123 = objc_claimAutoreleasedReturnValue();
  if (!v123)
  {
LABEL_99:
    v105 = *__error();
    _sa_logt();
    v106 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend((id)v127, "debugDescription");
      v107 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v108 = objc_msgSend(v107, "UTF8String");
      objc_msgSend((id)v127, "mainBinaryLoadInfo");
      v109 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v109, "debugDescription");
      v110 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v111 = objc_msgSend(v110, "UTF8String");
      LODWORD(dest.receiver) = 136315394;
      *(id *)((char *)&p_dest->receiver + 4) = (id)v108;
      WORD2(dest.super_class) = 2080;
      *(Class *)((char *)&p_dest->super_class + 6) = (Class)v111;
      _os_log_error_impl(&dword_1B9BE0000, v106, OS_LOG_TYPE_ERROR, "No main binary for %s with main binary load info %s", (uint8_t *)&dest, 0x16u);

    }
    *__error() = v105;
    objc_msgSend((id)v127, "debugDescription");
    v112 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v113 = objc_msgSend(v112, "UTF8String");
    objc_msgSend((id)v127, "mainBinaryLoadInfo");
    v114 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v114, "debugDescription");
    v115 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend(v115, "UTF8String");
    _SASetCrashLogMessage(8032, "No main binary for %s with main binary load info %s", v116, v117, v118, v119, v120, v121, v113);

    _os_crash();
    __break(1u);
  }
  objc_msgSend(v126, "objectForKeyedSubscript:");
  v124 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v124, "count"))
  {
    v157 = 0u;
    v158 = 0u;
    v155 = 0u;
    v156 = 0u;
    objc_msgSend(v126, "objectForKeyedSubscript:", v123);
    v128 = (id)objc_claimAutoreleasedReturnValue();
    v130 = objc_msgSend(v128, "countByEnumeratingWithState:objects:count:", &v155, v179, 16);
    if (v130)
    {
      v129 = *(_QWORD *)v156;
      do
      {
        for (k = 0; k != v130; ++k)
        {
          if (*(_QWORD *)v156 != v129)
            objc_enumerationMutation(v128);
          v33 = *(_QWORD **)(*((_QWORD *)&v155 + 1) + 8 * k);
          v151 = 0u;
          v152 = 0u;
          v153 = 0u;
          v154 = 0u;
          objc_msgSend(v136, "binaryLoadInfos");
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          v35 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v151, v178, 16);
          if (v35)
          {
            v36 = *(_QWORD *)v152;
            while (2)
            {
              for (m = 0; m != v35; ++m)
              {
                if (*(_QWORD *)v152 != v36)
                  objc_enumerationMutation(v34);
                v38 = *(void **)(*((_QWORD *)&v151 + 1) + 8 * m);
                objc_msgSend(v38, "binary");
                v39 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v33, "binary");
                v40 = (void *)objc_claimAutoreleasedReturnValue();
                if (v39 == v40)
                {
                  objc_msgSend(v38, "segment");
                  v41 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v33, "segment");
                  v42 = (void *)objc_claimAutoreleasedReturnValue();
                  v43 = v41 == v42;

                  if (v43)
                  {
                    v44 = objc_msgSend(v38, "loadAddress");
                    if (v33)
                      v33[3] = v44;
                    goto LABEL_56;
                  }
                }
                else
                {

                }
              }
              v35 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v151, v178, 16);
              if (v35)
                continue;
              break;
            }
          }
LABEL_56:

        }
        v130 = objc_msgSend(v128, "countByEnumeratingWithState:objects:count:", &v155, v179, 16);
      }
      while (v130);
    }
  }
  else
  {
    if (!v124)
    {
      v124 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 1);
      objc_msgSend(v126, "setObject:forKeyedSubscript:", v124, v123);
    }
    v46 = [SABinaryLoadInfoToDisplay alloc];
    objc_msgSend(v136, "mainBinaryLoadInfo");
    v47 = (id)objc_claimAutoreleasedReturnValue();
    if (v46)
    {
      v48 = v47;
      objc_msgSend(v47, "binary");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v48, "segment");
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      v51 = objc_msgSend(v48, "loadAddress");
      dest.receiver = v46;
      dest.super_class = (Class)SABinaryLoadInfoToDisplay;
      v52 = objc_msgSendSuper2(&dest, sel_initWithBinary_segment_loadAddress_, v49, v50, v51);

      if (v52)
      {
        v52[40] = objc_msgSend(v48, "isInKernelAddressSpace");
        objc_msgSend(v48, "exclave");
        v53 = objc_claimAutoreleasedReturnValue();
        v54 = (void *)*((_QWORD *)v52 + 4);
        *((_QWORD *)v52 + 4) = v53;

      }
      v47 = v48;
    }
    else
    {
      v52 = 0;
    }
    v128 = v47;

    objc_msgSend(v124, "addObject:", v52);
  }

  v45 = (void *)v123;
LABEL_69:

LABEL_70:
  dest.receiver = 0;
  dest.super_class = (Class)&dest;
  v176 = 0x2020000000;
  v177 = 0;
  v147 = 0;
  v148 = &v147;
  v149 = 0x2020000000;
  v150 = 0;
  if (self)
  {
    v143 = 0;
    v144 = &v143;
    v145 = 0x2020000000;
    v146 = 0;
    v55 = objc_getProperty(self, v31, 8, 1);
    v142[0] = MEMORY[0x1E0C809B0];
    v142[1] = 3221225472;
    v142[2] = __110__SASamplePrinter_printSingleStackForTasks_limitToDispatchQueueIds_limitToThreadIds_intersection_sampleCount___block_invoke_1276;
    v142[3] = &unk_1E7149608;
    v142[4] = &v143;
    v142[5] = &dest;
    objc_msgSend(v55, "enumerateKeysAndObjectsUsingBlock:", v142);

    v138 = 0;
    v139 = &v138;
    v140 = 0x2020000000;
    v141 = 0;
    v57 = objc_getProperty(self, v56, 16, 1);
    v137[0] = MEMORY[0x1E0C809B0];
    v137[1] = 3221225472;
    v137[2] = __110__SASamplePrinter_printSingleStackForTasks_limitToDispatchQueueIds_limitToThreadIds_intersection_sampleCount___block_invoke_2_1278;
    v137[3] = &unk_1E7149608;
    v137[4] = &v138;
    v137[5] = &v147;
    objc_msgSend(v57, "enumerateKeysAndObjectsUsingBlock:", v137);

    v58 = objc_msgSend(*(id *)(v135 + 16), "printJson");
    v59 = *(void **)(v135 + 8);
    if (v58)
    {
      objc_msgSend(v59, "appendString:", CFSTR(",\"primaryMicrostackshotState\":{"));
      v60 = *(void **)(v135 + 8);
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v144[3]);
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryFirstEntry(v60, (uint64_t)CFSTR("count"), v61);

      +[SACallTreeState writeJSONDictionaryEntriesToStream:microstackshotState:primaryMicrostackshotState:includeIdleAndBattery:]((uint64_t)SACallTreeState, *(void **)(v135 + 8), *((_DWORD *)dest.super_class + 6), ~(unsigned __int16)*((_DWORD *)dest.super_class + 6), objc_msgSend(*(id *)(v135 + 16), "includeUserIdleAndBatteryStateInStacks"));
      objc_msgSend(*(id *)(v135 + 8), "appendString:", CFSTR("}"));
      objc_msgSend(*(id *)(v135 + 8), "appendString:", CFSTR(",\"primaryCountedState\":{"));
      v62 = *(void **)(v135 + 8);
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v139[3]);
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      SAJSONWriteDictionaryFirstEntry(v62, (uint64_t)CFSTR("count"), v63);

      +[SACallTreeState writeJSONDictionaryEntriesToStream:state:primaryState:]((uint64_t)SACallTreeState, *(void **)(v135 + 8), v148[3], 0);
      objc_msgSend(*(id *)(v135 + 8), "appendString:", CFSTR("}"));
      if ((objc_msgSend(*(id *)(v135 + 16), "includeUserIdleAndBatteryStateInStacks") & 1) == 0)
      {
        v64 = *(void **)(v135 + 8);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", self->_userActiveCount);
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v64, CFSTR("userActiveSampleCount"), v65);

        v66 = *(void **)(v135 + 8);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", self->_userIdleCount);
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v66, CFSTR("userIdleSampleCount"), v67);

        v68 = *(void **)(v135 + 8);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", self->_onBatteryCount);
        v69 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v68, CFSTR("onBatterySampleCount"), v69);

        v70 = *(void **)(v135 + 8);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", self->_onACCount);
        v71 = (void *)objc_claimAutoreleasedReturnValue();
        SAJSONWriteDictionaryEntry(v70, CFSTR("onACSampleCount"), v71);

      }
    }
    else
    {
      objc_msgSend(v59, "printWithFormat:", CFSTR("%-*s%lu samples "), 18, "Primary state: ", v144[3]);
      saos_printf_microstackshot_state(*(void **)(v135 + 8), *((unsigned int *)dest.super_class + 6), ~*((_DWORD *)dest.super_class + 6), objc_msgSend(*(id *)(v135 + 16), "systemstatsFormat"), objc_msgSend(*(id *)(v135 + 16), "includeUserIdleAndBatteryStateInStacks"));
      v74 = v148[3];
      v75 = objc_msgSend(*(id *)(v135 + 16), "systemstatsFormat");
      if (v74)
        v76 = v75;
      else
        v76 = 1;
      if ((v76 & 1) == 0)
      {
        objc_msgSend(*(id *)(v135 + 8), "appendString:", CFSTR(", "));
        _saos_printf_state_appended_noparens(*(void **)(v135 + 8), v148[3], 0, 0);
      }
      objc_msgSend(*(id *)(v135 + 8), "appendString:", CFSTR("\n"));
      if ((objc_msgSend(*(id *)(v135 + 16), "includeUserIdleAndBatteryStateInStacks") & 1) == 0)
      {
        objc_msgSend(*(id *)(v135 + 8), "printWithFormat:", CFSTR("%-*s%lu samples Idle, %lu samples Active"), 18, "User Activity: ", self->_userIdleCount, self->_userActiveCount);
        v77 = *(void **)(v135 + 8);
        v78 = a6 - (self->_userActiveCount + self->_userIdleCount);
        if (v78)
          objc_msgSend(v77, "printWithFormat:", CFSTR(", %lu samples Unknown\n"), v78);
        else
          objc_msgSend(v77, "appendString:", CFSTR("\n"));
        objc_msgSend(*(id *)(v135 + 8), "printWithFormat:", CFSTR("%-*s%lu samples on Battery, %lu samples on AC"), 18, "Power Source: ", self->_onBatteryCount, self->_onACCount);
        v79 = *(void **)(v135 + 8);
        v80 = a6 - (self->_onACCount + self->_onBatteryCount);
        if (v80)
          objc_msgSend(v79, "printWithFormat:", CFSTR(", %lu samples Unknown\n"), v80);
        else
          objc_msgSend(v79, "appendString:", CFSTR("\n"));
        *((_DWORD *)dest.super_class + 6) &= 0xFFFFFFE3;
      }
    }
    _Block_object_dispose(&v138, 8);
    _Block_object_dispose(&v143, 8);
    v73 = v148 + 3;
    v72 = *((_DWORD *)dest.super_class + 6);
  }
  else
  {
    v72 = 0;
    v73 = &v150;
  }
  -[SASamplePrinter addStack:toStream:sampleCount:binariesToDisplay:primaryState:primaryMicrostackshotState:onlyHeaviestStack:](v135, v132, *(void **)(v135 + 8), a6, v126, (uint64_t)v73, v72, 0);
  _Block_object_dispose(&v147, 8);
  _Block_object_dispose(&dest, 8);

}

void __51__SASamplePrinter_printTaskHeaderForMultipleTasks___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  int v25;
  NSObject *v26;
  id v27;
  uint64_t v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint8_t buf[4];
  unint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  unint64_t v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v38 = a2;
  v5 = a3;
  v6 = objc_msgSend(v5, "indexOfFirstThreadStateOnOrAfterTime:sampleIndex:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48));
  if (v6 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v7 = v6;
    v8 = objc_msgSend(v5, "indexOfLastThreadStateOnOrBeforeTime:sampleIndex:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56));
    if (v8 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v9 = v8;
      v10 = v8 - v7;
      if (v8 < v7)
      {
        v25 = *__error();
        _sa_logt();
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "debugDescription");
          v27 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v28 = objc_msgSend(v27, "UTF8String");
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "debugDescription");
          v29 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          *(_DWORD *)buf = 134218754;
          v40 = v7;
          v41 = 2080;
          v42 = v28;
          v43 = 2048;
          v44 = v9;
          v45 = 2080;
          v46 = objc_msgSend(v29, "UTF8String");
          _os_log_error_impl(&dword_1B9BE0000, v26, OS_LOG_TYPE_ERROR, "firstThreadStateIndex %lu after reportStartTime %s > lastThreadStateIndex %lu before reportEndTime %s", buf, 0x2Au);

        }
        *__error() = v25;
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "debugDescription");
        v30 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        objc_msgSend(v30, "UTF8String");
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "debugDescription");
        v31 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        objc_msgSend(v31, "UTF8String");
        _SASetCrashLogMessage(5789, "firstThreadStateIndex %lu after reportStartTime %s > lastThreadStateIndex %lu before reportEndTime %s", v32, v33, v34, v35, v36, v37, v7);

        _os_crash();
        __break(1u);
      }
      objc_msgSend(v5, "threadStates");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "objectAtIndexedSubscript:", v7);
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40)
        || (objc_msgSend(v12, "startTimestamp"),
            v13 = (void *)objc_claimAutoreleasedReturnValue(),
            v14 = objc_msgSend(v13, "lt:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40)),
            v13,
            v14))
      {
        objc_msgSend(v12, "startTimestamp");
        v15 = objc_claimAutoreleasedReturnValue();
        v16 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v17 = *(void **)(v16 + 40);
        *(_QWORD *)(v16 + 40) = v15;

        if (*(_BYTE *)(a1 + 80))
        {
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v12, "startSampleIndex");
          if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) == 0x7FFFFFFFFFFFFFFFLL)
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v12, "endSampleIndex") + 1;
        }
      }
      objc_msgSend(v5, "threadStates");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "objectAtIndexedSubscript:", v9);
      v19 = (void *)objc_claimAutoreleasedReturnValue();

      if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40)
        || (objc_msgSend(v19, "endTimestamp"),
            v20 = (void *)objc_claimAutoreleasedReturnValue(),
            v21 = objc_msgSend(v20, "gt:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40)),
            v20,
            v21))
      {
        objc_msgSend(v19, "endTimestamp");
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        v24 = *(void **)(v23 + 40);
        *(_QWORD *)(v23 + 40) = v22;

        if (*(_BYTE *)(a1 + 80))
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = objc_msgSend(v19, "endSampleIndex");
      }
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) += v10 + 1;

    }
  }

}

- (uint64_t)numIOsForTask:(_QWORD *)a3 ioSize:
{
  id v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[7];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  v5 = a2;
  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 0;
  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  objc_msgSend(v5, "threads");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __40__SASamplePrinter_numIOsForTask_ioSize___block_invoke;
  v9[3] = &unk_1E7148E70;
  v9[4] = a1;
  v9[5] = &v14;
  v9[6] = &v10;
  objc_msgSend(v6, "enumerateKeysAndObjectsUsingBlock:", v9);

  *a3 = v15[3];
  v7 = v11[3];
  _Block_object_dispose(&v10, 8);
  _Block_object_dispose(&v14, 8);

  return v7;
}

- (uint64_t)printTaskHeaderForTask:(unint64_t)a3 specialDispatchQueueId:(uint64_t)a4 specialThreadId:(char *)a5 omitSpecial:(int)a6 omitOther:
{
  uint8_t *v6;
  unint64_t v11;
  _BOOL4 v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  id v18;
  uint64_t v19;
  id v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const __CFString *v28;
  id v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  void *v46;
  _BOOL4 v47;
  unint64_t v48;
  unint64_t v49;
  BOOL v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  _QWORD *v56;
  _QWORD *v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  void *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  void *v67;
  unint64_t v68;
  unint64_t v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  id v74;
  void *v75;
  void *v76;
  uint64_t v77;
  BOOL v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  void *v85;
  void *v86;
  void *v87;
  int v88;
  void *v89;
  void *v90;
  void *v91;
  int v92;
  void *v93;
  uint64_t v94;
  void *v95;
  id v96;
  uint64_t v97;
  void *v98;
  id v99;
  void *v100;
  void *v101;
  uint64_t *v102;
  void *v103;
  uint64_t v104;
  int v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  void *v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t i;
  void *v120;
  BOOL v121;
  uint64_t v122;
  void *v123;
  void *v124;
  uint64_t v125;
  id v126;
  void *v127;
  void *v128;
  unint64_t v129;
  unint64_t v130;
  id v131;
  id v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t j;
  uint64_t v136;
  void *v137;
  void *v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t k;
  void *v143;
  BOOL v144;
  id v145;
  void *v146;
  void *v147;
  void *v148;
  id v149;
  void *v150;
  void *v151;
  _BOOL4 v152;
  void *v153;
  void *v154;
  unint64_t v155;
  unint64_t v156;
  _DWORD *v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  char v170;
  void *v171;
  void *v172;
  void *v173;
  void *v174;
  uint64_t v175;
  const char *v176;
  id Property;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  char v184;
  char v185;
  char v186;
  double v187;
  double v188;
  void *v189;
  uint64_t v190;
  int v192;
  NSObject *v193;
  id v194;
  uint64_t v195;
  id v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  NSObject *v204;
  id v205;
  uint64_t v206;
  const char *v207;
  const char *v208;
  id v209;
  char v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  NSObject *v218;
  id v219;
  uint64_t v220;
  id v221;
  char v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  NSObject *v230;
  id v231;
  uint64_t v232;
  id v233;
  uint64_t v234;
  id v235;
  char v236;
  id v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  NSObject *v245;
  id v246;
  uint64_t v247;
  uint64_t v248;
  id v249;
  char v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  NSObject *v258;
  id v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t (*v262)(uint64_t, uint64_t);
  id v263;
  char v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  char v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unsigned __int8 v282;
  char v283;
  uint64_t v284;
  unsigned int v285;
  void *v286;
  char HasSwallowedAnExceptionNotedByHIException;
  _BOOL4 v288;
  unint64_t v289;
  unsigned int v290;
  unint64_t v291;
  unint64_t v292;
  id v293;
  void *v294;
  void *v295;
  void *v296;
  void *v297;
  void *v298;
  void *v299;
  void *v300;
  void *v301;
  void *v302;
  void *v303;
  void *v304;
  void *v305;
  void *v306;
  void *v307;
  void *v308;
  void *v309;
  void *v310;
  void *v311;
  void *v312;
  void *v313;
  void *v314;
  __CFString *v315;
  void *v316;
  void *v317;
  unint64_t v318;
  void *v319;
  void *v320;
  void *v321;
  void *v322;
  void *v323;
  uint64_t v324;
  uint64_t v325;
  _QWORD *v326;
  _BOOL4 obj;
  id obja;
  id objb;
  int v330;
  uint64_t v331;
  void *v332;
  uint64_t v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  _QWORD v339[6];
  uint64_t v340;
  _QWORD v341[6];
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  _QWORD v350[4];
  id v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  uint64_t v356;
  uint64_t *v357;
  uint64_t v358;
  uint64_t v359;
  unint64_t v360;
  unint64_t v361;
  unint64_t v362;
  unint64_t v363;
  unint64_t v364;
  unint64_t v365;
  _QWORD v366[5];
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  _QWORD v371[6];
  uint64_t v372;
  uint64_t *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t *v377;
  uint64_t v378;
  uint64_t v379;
  _QWORD v380[5];
  id v381;
  id v382;
  uint64_t *v383;
  uint64_t *v384;
  char v385;
  _QWORD v386[15];
  _QWORD v387[8];
  uint64_t v388;
  uint64_t *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t *v397;
  uint64_t v398;
  uint64_t (*v399)(uint64_t, uint64_t);
  void (*v400)(uint64_t);
  id v401;
  uint64_t v402;
  uint64_t *v403;
  uint64_t v404;
  uint64_t (*v405)(uint64_t, uint64_t);
  void (*v406)(uint64_t);
  id v407;
  uint64_t v408;
  uint64_t *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t *v417;
  uint64_t v418;
  uint64_t v419;
  _QWORD v420[3];
  char v421;
  _QWORD v422[3];
  char v423;
  uint64_t v424;
  uint64_t *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t *v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t *v433;
  uint64_t v434;
  uint64_t v435;
  _BYTE v436[128];
  _QWORD *v437;
  uint8_t v438[8];
  uint8_t *v439;
  uint64_t v440;
  uint64_t (*v441)(uint64_t, uint64_t);
  void (*v442)(uint64_t);
  id v443;
  void *v444;
  void *v445;
  _BYTE v446[128];
  _BYTE v447[128];
  _BYTE v448[128];
  uint8_t v449[128];
  _BYTE buf[24];
  void *v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;

  v11 = (unint64_t)buf;
  v455 = *MEMORY[0x1E0C80C00];
  v326 = a2;
  if ((_DWORD)a5 && a6)
  {
    v192 = *__error();
    _sa_logt();
    v193 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v193, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v326, "debugDescription");
      v194 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v195 = objc_msgSend(v194, "UTF8String");
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v195;
      _os_log_error_impl(&dword_1B9BE0000, v193, OS_LOG_TYPE_ERROR, "%s: omitSpecialThreadId and omitOtherThreads", buf, 0xCu);

    }
    *__error() = v192;
    objc_msgSend(v326, "debugDescription");
    v196 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v197 = objc_msgSend(v196, "UTF8String");
    _SASetCrashLogMessage(6018, "%s: omitSpecialThreadId and omitOtherThreads", v198, v199, v200, v201, v202, v203, v197);

    _os_crash();
    __break(1u);
    goto LABEL_251;
  }
  v330 = a6;
  v12 = -[SASamplePrinter hasTimeIndexes](a1);
  if (!a3)
    goto LABEL_10;
  objc_msgSend(v326, "dispatchQueues");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", a3);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "objectForKeyedSubscript:", v14);
  v334 = objc_claimAutoreleasedReturnValue();

  if (!v334)
    goto LABEL_260;
  if (a4)
  {
    while (1)
    {
      objc_msgSend(v326, "threads");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", a4);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "objectForKeyedSubscript:", v16);
      v324 = objc_claimAutoreleasedReturnValue();

      if (v324)
        break;
      LODWORD(a5) = *__error();
      _sa_logt();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend(v326, "debugDescription");
        v18 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v19 = objc_msgSend(v18, "UTF8String");
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v19;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = a4;
        _os_log_error_impl(&dword_1B9BE0000, v17, OS_LOG_TYPE_ERROR, "%s: specialThreadId 0x%llx doesn't exist", buf, 0x16u);

      }
      *__error() = (int)a5;
      objc_msgSend(v326, "debugDescription");
      v20 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v21 = objc_msgSend(v20, "UTF8String");
      _SASetCrashLogMessage(6031, "%s: specialThreadId 0x%llx doesn't exist", v22, v23, v24, v25, v26, v27, v21);

      _os_crash();
      __break(1u);
LABEL_10:
      v334 = 0;
      if (!a4)
        goto LABEL_11;
    }
  }
  else
  {
LABEL_11:
    v324 = 0;
  }
  v318 = a4 | a3;
  if (a4 | a3)
  {
    if ((_DWORD)a5)
    {
      v28 = CFSTR("(other dispatch queues/threads)");
      if (!a3)
        v28 = CFSTR("(other threads)");
      v321 = (void *)v28;
    }
    else
    {
      v29 = objc_alloc(MEMORY[0x1E0CB3940]);
      v30 = v29;
      if (a3)
      {
        -[SASamplePrinter displayNameForDispatchQueue:]((void *)v334);
        v31 = objc_claimAutoreleasedReturnValue();
        v32 = (void *)v31;
        if (a4)
          v33 = objc_msgSend(v30, "initWithFormat:", CFSTR("%@ 0x%llx, %@ %@"), CFSTR("Thread"), a4, CFSTR("DispatchQueue"), v31);
        else
          v33 = objc_msgSend(v30, "initWithFormat:", CFSTR("%@ %@"), CFSTR("DispatchQueue"), v31, v271, v272);
        v321 = (void *)v33;

      }
      else
      {
        v321 = (void *)objc_msgSend(v29, "initWithFormat:", CFSTR("%@ 0x%llx"), CFSTR("Thread"), a4);
      }
    }
  }
  else
  {
    v321 = 0;
  }
  v432 = 0;
  v433 = &v432;
  v434 = 0x2020000000;
  v435 = 0;
  v428 = 0;
  v429 = &v428;
  v430 = 0x2020000000;
  v431 = 0;
  v424 = 0;
  v425 = &v424;
  v426 = 0x2020000000;
  v427 = 0;
  a3 = (unint64_t)v422;
  v422[0] = 0;
  v422[1] = v422;
  v422[2] = 0x2020000000;
  v423 = 0;
  v420[0] = 0;
  v420[1] = v420;
  v420[2] = 0x2020000000;
  v421 = 0;
  v416 = 0;
  v417 = &v416;
  v418 = 0x2020000000;
  v419 = 0;
  v412 = 0;
  v413 = &v412;
  v414 = 0x2020000000;
  v415 = 0x7FFFFFFFFFFFFFFFLL;
  v408 = 0;
  v409 = &v408;
  v410 = 0x2020000000;
  v411 = 0x7FFFFFFFFFFFFFFFLL;
  v402 = 0;
  v403 = &v402;
  v404 = 0x3032000000;
  v405 = __Block_byref_object_copy__4;
  v406 = __Block_byref_object_dispose__4;
  v407 = 0;
  v396 = 0;
  v397 = &v396;
  v398 = 0x3032000000;
  v399 = __Block_byref_object_copy__4;
  v400 = __Block_byref_object_dispose__4;
  v401 = 0;
  v392 = 0;
  v393 = &v392;
  v394 = 0x2020000000;
  v395 = 0;
  v388 = 0;
  v389 = &v388;
  v390 = 0x2020000000;
  v391 = 0;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x3810000000;
  v451 = &unk_1B9CEFD9F;
  v452 = 0;
  v453 = 0;
  v454 = 0;
  v34 = MEMORY[0x1E0C809B0];
  obj = (v324 | v334) != 0;
  if (v324 | v334)
  {
    v35 = *(void **)(a1 + 32);
    v36 = *(void **)(a1 + 40);
    v37 = *(_QWORD *)(a1 + 48);
    v38 = *(_QWORD *)(a1 + 56);
    v39 = MEMORY[0x1E0C809B0];
    v387[0] = MEMORY[0x1E0C809B0];
    v387[1] = 3221225472;
    v387[2] = __103__SASamplePrinter_printTaskHeaderForTask_specialDispatchQueueId_specialThreadId_omitSpecial_omitOther___block_invoke;
    v387[3] = &unk_1E7149310;
    v387[4] = a1;
    v387[5] = &v392;
    v387[6] = &v388;
    v387[7] = buf;
    -[SATask enumerateThreadStatesForThread:dispatchQueue:betweenStartTime:startSampleIndex:endTime:endSampleIndex:reverseOrder:block:]((uint64_t)v326, (void *)v324, (void *)v334, v35, v37, v36, v38, 0, v387);
    v34 = v39;
  }
  v40 = *(_QWORD *)(a1 + 32);
  v41 = *(_QWORD *)(a1 + 40);
  v42 = *(_QWORD *)(a1 + 48);
  v43 = *(_QWORD *)(a1 + 56);
  v386[0] = v34;
  v386[1] = 3221225472;
  v386[2] = __103__SASamplePrinter_printTaskHeaderForTask_specialDispatchQueueId_specialThreadId_omitSpecial_omitOther___block_invoke_2;
  v386[3] = &unk_1E7149338;
  v386[4] = a1;
  v386[5] = &v402;
  v386[6] = &v396;
  v386[7] = &v416;
  v386[8] = &v412;
  v386[9] = &v408;
  v386[10] = v422;
  v386[11] = v420;
  v386[12] = &v424;
  v386[13] = &v432;
  v386[14] = &v428;
  objc_msgSend(v326, "enumerateTaskStatesBetweenStartTime:startSampleIndex:endTime:endSampleIndex:reverseOrder:block:", v40, v42, v41, v43, 0, v386);
  v6 = v438;
  if ((v403[5] != 0) != (v397[5] != 0))
  {
LABEL_251:
    v11 = *__error();
    _sa_logt();
    v204 = objc_claimAutoreleasedReturnValue();
    a5 = "n";
    if (os_log_type_enabled(v204, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v326, "debugDescription");
      v205 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v206 = objc_msgSend(v205, "UTF8String");
      if (v403[5])
        v207 = "y";
      else
        v207 = "n";
      if (v397[5])
        v208 = "y";
      else
        v208 = "n";
      *(_DWORD *)v438 = 136315650;
      *(_QWORD *)(v6 + 4) = v206;
      WORD2(v439) = 2080;
      *(_QWORD *)(v6 + 14) = v207;
      HIWORD(v440) = 2080;
      v441 = (uint64_t (*)(uint64_t, uint64_t))v208;
      _os_log_error_impl(&dword_1B9BE0000, v204, OS_LOG_TYPE_ERROR, "%s: firstTaskState %s, lastTaskState %s", v438, 0x20u);

    }
    *__error() = v11;
    objc_msgSend(v326, "debugDescription");
    v209 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v210 = objc_msgSend(v209, "UTF8String");
    _SASetCrashLogMessage(6122, "%s: firstTaskState %s, lastTaskState %s", v211, v212, v213, v214, v215, v216, v210);

    _os_crash();
    __break(1u);
LABEL_260:
    v217 = *__error();
    _sa_logt();
    v218 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v218, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v326, "debugDescription");
      v219 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v220 = objc_msgSend(v219, "UTF8String");
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)(v11 + 4) = v220;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)(v11 + 14) = a3;
      _os_log_error_impl(&dword_1B9BE0000, v218, OS_LOG_TYPE_ERROR, "%s: specialDispatchQueue %llu doesn't exist", buf, 0x16u);

    }
    *__error() = v217;
    objc_msgSend(v326, "debugDescription");
    v221 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v222 = objc_msgSend(v221, "UTF8String");
    _SASetCrashLogMessage(6025, "%s: specialDispatchQueue %llu doesn't exist", v223, v224, v225, v226, v227, v228, v222);

    _os_crash();
    __break(1u);
    goto LABEL_263;
  }
  objc_msgSend(v326, "startTimestamp");
  v323 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v326, "endTimestamp");
  v322 = (void *)objc_claimAutoreleasedReturnValue();
  v44 = v330;
  v45 = (int)a5;
  if (!v403[5])
  {
    v54 = -1;
    if (!v323
      || !v322
      || (objc_msgSend(v323, "gt:", *(_QWORD *)(a1 + 40)) & 1) != 0
      || (objc_msgSend(v322, "lt:", *(_QWORD *)(a1 + 32)) & 1) != 0)
    {
      goto LABEL_245;
    }
  }
  if (v12
    || (objc_msgSend(v326, "taskStates"),
        v46 = (void *)objc_claimAutoreleasedReturnValue(),
        v47 = objc_msgSend(v46, "count") == 0,
        v46,
        v44 = v330,
        !v47))
  {
    if (!v318)
      goto LABEL_50;
    if ((_DWORD)a5)
    {
      if (v12)
        goto LABEL_50;
      v48 = v425[3];
      v49 = v393[3];
      v50 = v48 >= v49;
      v51 = v48 - v49;
      if (!v50)
        goto LABEL_270;
      v425[3] = v51;
      v52 = v433;
      v53 = v433[3] - v389[3];
      goto LABEL_48;
    }
    if (!v44)
      goto LABEL_50;
    v425[3] = v393[3];
LABEL_47:
    v53 = v389[3];
    v52 = v433;
LABEL_48:
    v52[3] = v53;
    v429[3] = 0;
    goto LABEL_50;
  }
  if (v425[3])
    goto LABEL_267;
  if (v318 && (v330 & 1) != 0)
  {
    v425[3] = v393[3];
    goto LABEL_47;
  }
  objc_msgSend(v326, "threads");
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  v380[0] = MEMORY[0x1E0C809B0];
  v380[1] = 3221225472;
  v380[2] = __103__SASamplePrinter_printTaskHeaderForTask_specialDispatchQueueId_specialThreadId_omitSpecial_omitOther___block_invoke_997;
  v380[3] = &unk_1E7149388;
  v380[4] = a1;
  v385 = (char)a5;
  v381 = (id)v334;
  v382 = (id)v324;
  v383 = &v424;
  v384 = &v432;
  objc_msgSend(v55, "enumerateKeysAndObjectsUsingBlock:", v380);

LABEL_50:
  v56 = *(_QWORD **)(a1 + 128);
  if (v56)
  {
    if (v56 == v326 && !(_DWORD)a5)
      goto LABEL_68;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 160), "targetProcess");
    v57 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    if (v57 == v326)
      v58 = (char)a5;
    else
      v58 = 1;

    if ((v58 & 1) == 0)
      goto LABEL_68;
  }
  if (!v425[3] && !objc_msgSend(*(id *)(a1 + 16), "displayTasksWithZeroCount"))
    goto LABEL_75;
  if (objc_msgSend(*(id *)(a1 + 16), "omitTasksBelowSampleCount") < 1)
    v59 = 0;
  else
    v59 = objc_msgSend(*(id *)(a1 + 16), "omitTasksBelowSampleCount");
  if ((int)objc_msgSend(*(id *)(a1 + 16), "omitTasksBelowPercentOfTotalSamples") >= 1)
  {
    v60 = *(_QWORD *)(a1 + 64);
    v61 = objc_msgSend(*(id *)(a1 + 16), "omitTasksBelowPercentOfTotalSamples");
    if (v59 <= v60 * v61 / 0x64uLL)
      v59 = v60 * v61 / 0x64uLL;
  }
  if (v59 && v425[3] <= v59)
  {
LABEL_75:
    v54 = -1;
    goto LABEL_245;
  }
LABEL_68:
  v376 = 0;
  v377 = &v376;
  v378 = 0x2020000000;
  v379 = 0x7FFFFFFFFFFFFFFFLL;
  v372 = 0;
  v373 = &v372;
  v374 = 0x2020000000;
  v375 = 0x7FFFFFFFFFFFFFFFLL;
  if (v12)
  {
    v62 = (void *)v403[5];
    if (v62)
    {
      v63 = objc_msgSend(v62, "startSampleIndex");
      v64 = *(_QWORD *)(a1 + 48);
      if (v63 > v64)
        v64 = v63;
      v377[3] = v64;
      v65 = objc_msgSend((id)v397[5], "endSampleIndex");
      v66 = *(_QWORD *)(a1 + 56);
      if (v65 < v66)
        v66 = v65;
      v373[3] = v66;
    }
    else
    {
      objc_msgSend(v326, "threads");
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      v371[0] = MEMORY[0x1E0C809B0];
      v371[1] = 3221225472;
      v371[2] = __103__SASamplePrinter_printTaskHeaderForTask_specialDispatchQueueId_specialThreadId_omitSpecial_omitOther___block_invoke_1001;
      v371[3] = &unk_1E71493B0;
      v371[4] = &v376;
      v371[5] = &v372;
      objc_msgSend(v67, "enumerateKeysAndObjectsUsingBlock:", v371);

      v68 = v377[3];
      if (v68 <= *(_QWORD *)(a1 + 48))
        v68 = *(_QWORD *)(a1 + 48);
      v377[3] = v68;
      v69 = v373[3];
      if (v69 >= *(_QWORD *)(a1 + 56))
        v69 = *(_QWORD *)(a1 + 56);
      v373[3] = v69;
    }
  }
  objc_msgSend(*(id *)(a1 + 160), "tasksByUniquePid");
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v326, "uniquePid"));
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v70, "objectForKeyedSubscript:", v71);
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  v73 = v72;
  if (v72)
  {
    v74 = v72;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 160), "tasksByPid");
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(v326, "pid"));
    v76 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v75, "objectForKeyedSubscript:", v76);
    v74 = (id)objc_claimAutoreleasedReturnValue();

  }
  v370 = 0u;
  v369 = 0u;
  v368 = 0u;
  v367 = 0u;
  a5 = (char *)v74;
  v77 = objc_msgSend(a5, "countByEnumeratingWithState:objects:count:", &v367, v449, 16);
  if (!v77)
  {
LABEL_263:

    goto LABEL_264;
  }
  v78 = 0;
  v79 = 0;
  v80 = *(_QWORD *)v368;
LABEL_86:
  v81 = 0;
  while (1)
  {
    if (*(_QWORD *)v368 != v80)
      objc_enumerationMutation(a5);
    v82 = *(_QWORD **)(*((_QWORD *)&v367 + 1) + 8 * v81);
    if (v78)
      break;
    v78 = v82 == v326;
    if (v82 != v326)
    {
      v83 = v82;

      v79 = v83;
    }
    if (v77 == ++v81)
    {
      v77 = objc_msgSend(a5, "countByEnumeratingWithState:objects:count:", &v367, v449, 16);
      if (!v77)
      {

        if (v82 == v326)
        {
          v84 = 0;
          goto LABEL_97;
        }
LABEL_264:
        v229 = *__error();
        _sa_logt();
        v230 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v230, OS_LOG_TYPE_ERROR))
        {
          objc_msgSend(v326, "debugDescription");
          v231 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v232 = objc_msgSend(v231, "UTF8String");
          objc_msgSend(a5, "debugDescription");
          v233 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v234 = objc_msgSend(v233, "UTF8String");
          *(_DWORD *)v438 = 136315394;
          *(_QWORD *)(v6 + 4) = v232;
          WORD2(v439) = 2080;
          *(_QWORD *)(v6 + 14) = v234;
          _os_log_error_impl(&dword_1B9BE0000, v230, OS_LOG_TYPE_ERROR, "%s not in tasksWithSamePid %s", v438, 0x16u);

        }
        *__error() = v229;
        objc_msgSend(v326, "debugDescription");
        v235 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v236 = objc_msgSend(v235, "UTF8String");
        objc_msgSend(a5, "debugDescription");
        v237 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        objc_msgSend(v237, "UTF8String");
        _SASetCrashLogMessage(6282, "%s not in tasksWithSamePid %s", v238, v239, v240, v241, v242, v243, v236);

        _os_crash();
        __break(1u);
LABEL_267:
        v244 = *__error();
        _sa_logt();
        v245 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v245, OS_LOG_TYPE_ERROR))
        {
          objc_msgSend(v326, "debugDescription");
          v246 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v247 = objc_msgSend(v246, "UTF8String");
          v248 = v425[3];
          *(_DWORD *)v438 = 136315394;
          *(_QWORD *)(v6 + 4) = v247;
          WORD2(v439) = 2048;
          *(_QWORD *)(v6 + 14) = v248;
          _os_log_error_impl(&dword_1B9BE0000, v245, OS_LOG_TYPE_ERROR, "%s: %lu numSamples (!hasTimeIndexes, no task states)", v438, 0x16u);

        }
        *__error() = v244;
        objc_msgSend(v326, "debugDescription");
        v249 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v250 = objc_msgSend(v249, "UTF8String");
        _SASetCrashLogMessage(6143, "%s: %lu numSamples (!hasTimeIndexes, no task states)", v251, v252, v253, v254, v255, v256, v250);

        _os_crash();
        __break(1u);
LABEL_270:
        v257 = *__error();
        _sa_logt();
        v258 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v258, OS_LOG_TYPE_ERROR))
        {
          objc_msgSend(v326, "debugDescription");
          v259 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v260 = objc_msgSend(v259, "UTF8String");
          v261 = v425[3];
          v262 = (uint64_t (*)(uint64_t, uint64_t))v393[3];
          *(_DWORD *)v438 = 136315650;
          *(_QWORD *)(v6 + 4) = v260;
          WORD2(v439) = 2048;
          *(_QWORD *)(v6 + 14) = v261;
          HIWORD(v440) = 2048;
          v441 = v262;
          _os_log_error_impl(&dword_1B9BE0000, v258, OS_LOG_TYPE_ERROR, "%s: numSamples %lu >= specialNumSamples %lu", v438, 0x20u);

        }
        *__error() = v257;
        objc_msgSend(v326, "debugDescription");
        v263 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v264 = objc_msgSend(v263, "UTF8String");
        _SASetCrashLogMessage(6190, "%s: numSamples %lu >= specialNumSamples %lu", v265, v266, v267, v268, v269, v270, v264);

        _os_crash();
        __break(1u);
      }
      goto LABEL_86;
    }
  }
  v84 = v82;

LABEL_97:
  if (v79)
  {
    objc_msgSend(v79, "sharedCache");
    v85 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v326, "sharedCache");
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    if (v85 == v86)
    {
      objc_msgSend(v79, "endTimestamp");
      v87 = (void *)objc_claimAutoreleasedReturnValue();
      v88 = objc_msgSend(v87, "ge:", *(_QWORD *)(a1 + 32));

      if (v88)
      {
        -[SASamplePrinter displayNameForTask:]((void *)a1, v79);
        v320 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v84)
          goto LABEL_108;
        goto LABEL_104;
      }
    }
    else
    {

    }
  }
  v320 = 0;
  if (!v84)
  {
LABEL_108:
    v319 = 0;
    goto LABEL_109;
  }
LABEL_104:
  objc_msgSend(v84, "sharedCache");
  v89 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v326, "sharedCache");
  v90 = (void *)objc_claimAutoreleasedReturnValue();
  if (v89 != v90)
  {

    goto LABEL_108;
  }
  objc_msgSend(v84, "startTimestamp");
  v91 = (void *)objc_claimAutoreleasedReturnValue();
  v92 = objc_msgSend(v91, "le:", *(_QWORD *)(a1 + 40));

  if (!v92)
    goto LABEL_108;
  -[SASamplePrinter displayNameForTask:]((void *)a1, v84);
  v319 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_109:

  objc_msgSend(v326, "startTimestamp");
  v93 = (void *)objc_claimAutoreleasedReturnValue();
  v94 = objc_msgSend(v326, "ppid");
  if ((_DWORD)v94 == -1 || (_DWORD)v94 == objc_msgSend(v326, "pid"))
  {
    v317 = 0;
  }
  else
  {
    -[SASampleStore lastTaskWithPid:onOrBeforeTimestamp:](*(_QWORD **)(a1 + 160), v94, v93);
    v95 = (void *)objc_claimAutoreleasedReturnValue();
    if (v95)
    {
      v96 = v95;

    }
    else
    {
      -[SASampleStore firstTaskWithPid:](*(_QWORD **)(a1 + 160), v94);
      v96 = (id)objc_claimAutoreleasedReturnValue();

      if (!v96)
      {
        -[SASamplePrinter displayNameForPid:threadId:timestamp:]((_QWORD *)a1, v94, 0, v93);
        v317 = (void *)objc_claimAutoreleasedReturnValue();
        goto LABEL_116;
      }
    }
    -[SASamplePrinter displayNameForTask:]((void *)a1, v96);
    v317 = (void *)objc_claimAutoreleasedReturnValue();

  }
LABEL_116:
  v97 = objc_msgSend(v326, "rpid");
  if ((int)v97 < 1 || (_DWORD)v97 == objc_msgSend(v326, "pid"))
  {
    v316 = 0;
    goto LABEL_123;
  }
  -[SASampleStore lastTaskWithPid:onOrBeforeTimestamp:](*(_QWORD **)(a1 + 160), v97, v93);
  v98 = (void *)objc_claimAutoreleasedReturnValue();
  if (v98)
  {
    v99 = v98;

LABEL_122:
    -[SASamplePrinter displayNameForTask:]((void *)a1, v99);
    v316 = (void *)objc_claimAutoreleasedReturnValue();

    goto LABEL_123;
  }
  -[SASampleStore firstTaskWithPid:](*(_QWORD **)(a1 + 160), v97);
  v99 = (id)objc_claimAutoreleasedReturnValue();

  if (v99)
    goto LABEL_122;
  -[SASamplePrinter displayNameForPid:threadId:timestamp:]((_QWORD *)a1, v97, 0, v93);
  v316 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_123:

  if (objc_msgSend(v326, "pid"))
  {
    v315 = 0;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 160), "kernelVersion");
    v100 = (void *)objc_claimAutoreleasedReturnValue();
    if (v100)
    {
      objc_msgSend(*(id *)(a1 + 160), "kernelVersion");
      v101 = (void *)objc_claimAutoreleasedReturnValue();
      SACopySanitizedString(v101, 1, 0);
      v315 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v315 = CFSTR("???");
    }

  }
  v102 = v403;
  v103 = (void *)v403[5];
  if (v103)
  {
    v104 = objc_msgSend(v103, "taskSizeInBytes");
    v105 = v330;
    v102 = v403;
    if (v104)
    {
      v292 = objc_msgSend((id)v403[5], "taskSizeInBytes");
      *(_QWORD *)v438 = 0;
      v439 = v438;
      v440 = 0x2020000000;
      v441 = 0;
      v441 = (uint64_t (*)(uint64_t, uint64_t))objc_msgSend((id)v397[5], "taskSizeInBytes");
      v106 = *((_QWORD *)v439 + 3);
      if (!v106)
      {
        v107 = *(_QWORD *)(a1 + 32);
        v108 = *(_QWORD *)(a1 + 40);
        v109 = *(_QWORD *)(a1 + 48);
        v110 = *(_QWORD *)(a1 + 56);
        v366[0] = MEMORY[0x1E0C809B0];
        v366[1] = 3221225472;
        v366[2] = __103__SASamplePrinter_printTaskHeaderForTask_specialDispatchQueueId_specialThreadId_omitSpecial_omitOther___block_invoke_1004;
        v366[3] = &unk_1E7149158;
        v366[4] = v438;
        objc_msgSend(v326, "enumerateTaskStatesBetweenStartTime:startSampleIndex:endTime:endSampleIndex:reverseOrder:block:", v107, v109, v108, v110, 1, v366);
        v106 = *((_QWORD *)v439 + 3);
      }
      v291 = v106;
      _Block_object_dispose(v438, 8);
      v102 = v403;
    }
    else
    {
      v292 = 0;
      v291 = 0;
    }
  }
  else
  {
    v292 = 0;
    v291 = 0;
    v105 = v330;
  }
  if (v102[5])
  {
    v111 = objc_msgSend((id)v397[5], "pageins");
    v290 = v111 - objc_msgSend((id)v403[5], "pageins");
  }
  else
  {
    v290 = 0;
  }
  v365 = 0;
  v364 = 0;
  v363 = 0;
  v362 = 0;
  v361 = 0;
  v360 = 0;
  if (objc_msgSend(*(id *)(a1 + 160), "dataSource") != 8
    || (objc_msgSend(*(id *)(a1 + 160), "haveKPerfSched") | v105) == 1)
  {
    if (objc_msgSend(*(id *)(a1 + 160), "dataStyle") == 1)
    {
      if (!v105)
        goto LABEL_154;
    }
    else if (!objc_msgSend(*(id *)(a1 + 160), "dataStyle") && (v105 & 1) == 0)
    {
      goto LABEL_154;
    }
    if ((((v324 | v334) != 0) & v105) == 0)
      -[SATask cpuTimeNs:cpuInstructions:cpuCycles:nonThreadCpuTimeNs:nonThreadCpuInstructions:nonThreadCpuCycles:betweenStartTime:endTime:](v326, &v365, &v364, &v363, &v362, &v361, &v360, *(void **)(a1 + 32), *(void **)(a1 + 40));
    if (((v45 | v105) & obj) == 1)
    {
      if (v45)
      {
        v112 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
        v365 -= *(_QWORD *)(*(_QWORD *)&buf[8] + 32);
        v364 -= v112;
        v113 = v363 - *(_QWORD *)(*(_QWORD *)&buf[8] + 48);
LABEL_153:
        v363 = v113;
        goto LABEL_154;
      }
      if (v105)
      {
        v114 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
        v365 = *(_QWORD *)(*(_QWORD *)&buf[8] + 32);
        v364 = v114;
        v113 = *(_QWORD *)(*(_QWORD *)&buf[8] + 48);
        goto LABEL_153;
      }
    }
  }
LABEL_154:
  v356 = 0;
  v357 = &v356;
  v358 = 0x2020000000;
  v359 = 0;
  if (!(v324 | v334) || (v45 & 1) != 0 || (v105 & 1) != 0)
  {
    objc_msgSend(v326, "threads");
    v123 = (void *)objc_claimAutoreleasedReturnValue();
    v341[0] = MEMORY[0x1E0C809B0];
    v341[1] = 3221225472;
    v341[2] = __103__SASamplePrinter_printTaskHeaderForTask_specialDispatchQueueId_specialThreadId_omitSpecial_omitOther___block_invoke_3;
    v341[3] = &unk_1E71474D0;
    v341[4] = a1;
    v341[5] = &v356;
    objc_msgSend(v123, "enumerateKeysAndObjectsUsingBlock:", v341);

    v325 = 0;
    goto LABEL_190;
  }
  if (!v334)
  {
    objc_msgSend(v326, "threads");
    v124 = (void *)objc_claimAutoreleasedReturnValue();
    v125 = objc_msgSend(v124, "count");

    v122 = v125 - 1;
LABEL_170:
    v325 = v122;
    goto LABEL_190;
  }
  objc_msgSend(v326, "threads");
  v115 = (void *)objc_claimAutoreleasedReturnValue();
  v325 = objc_msgSend(v115, "count");

  if (v324)
  {
    v355 = 0u;
    v354 = 0u;
    v353 = 0u;
    v352 = 0u;
    objc_msgSend((id)v324, "threadStates");
    v116 = (void *)objc_claimAutoreleasedReturnValue();
    v117 = objc_msgSend(v116, "countByEnumeratingWithState:objects:count:", &v352, v448, 16);
    if (v117)
    {
      v118 = *(_QWORD *)v353;
      while (2)
      {
        for (i = 0; i != v117; ++i)
        {
          if (*(_QWORD *)v353 != v118)
            objc_enumerationMutation(v116);
          objc_msgSend(*(id *)(*((_QWORD *)&v352 + 1) + 8 * i), "dispatchQueue");
          v120 = (void *)objc_claimAutoreleasedReturnValue();
          v121 = v120 == (void *)v334;

          if (!v121)
          {

            goto LABEL_190;
          }
        }
        v117 = objc_msgSend(v116, "countByEnumeratingWithState:objects:count:", &v352, v448, 16);
        if (v117)
          continue;
        break;
      }
    }

    v122 = v325 - 1;
    goto LABEL_170;
  }
  v126 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  v127 = *(void **)(a1 + 32);
  v128 = *(void **)(a1 + 40);
  v129 = *(_QWORD *)(a1 + 48);
  v130 = *(_QWORD *)(a1 + 56);
  v350[0] = MEMORY[0x1E0C809B0];
  v350[1] = 3221225472;
  v350[2] = __103__SASamplePrinter_printTaskHeaderForTask_specialDispatchQueueId_specialThreadId_omitSpecial_omitOther___block_invoke_2_1005;
  v350[3] = &unk_1E71493D8;
  v131 = v126;
  v351 = v131;
  -[SARecipe enumerateStatesBetweenStartTime:startSampleIndex:endTime:endSampleIndex:reverseOrder:block:](v334, v127, v129, v128, v130, 0, v350);
  v349 = 0u;
  v348 = 0u;
  v347 = 0u;
  v346 = 0u;
  v132 = v131;
  v133 = objc_msgSend(v132, "countByEnumeratingWithState:objects:count:", &v346, v447, 16);
  if (v133)
  {
    v134 = *(_QWORD *)v347;
    do
    {
      for (j = 0; j != v133; ++j)
      {
        if (*(_QWORD *)v347 != v134)
          objc_enumerationMutation(v132);
        v136 = *(_QWORD *)(*((_QWORD *)&v346 + 1) + 8 * j);
        objc_msgSend(v326, "threads");
        v137 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v137, "objectForKeyedSubscript:", v136);
        v138 = (void *)objc_claimAutoreleasedReturnValue();

        v345 = 0u;
        v344 = 0u;
        v343 = 0u;
        v342 = 0u;
        objc_msgSend(v138, "threadStates");
        v139 = (void *)objc_claimAutoreleasedReturnValue();
        v140 = objc_msgSend(v139, "countByEnumeratingWithState:objects:count:", &v342, v446, 16);
        if (v140)
        {
          v141 = *(_QWORD *)v343;
          while (2)
          {
            for (k = 0; k != v140; ++k)
            {
              if (*(_QWORD *)v343 != v141)
                objc_enumerationMutation(v139);
              objc_msgSend(*(id *)(*((_QWORD *)&v342 + 1) + 8 * k), "dispatchQueue");
              v143 = (void *)objc_claimAutoreleasedReturnValue();
              v144 = v143 == (void *)v334;

              if (!v144)
              {

                goto LABEL_187;
              }
            }
            v140 = objc_msgSend(v139, "countByEnumeratingWithState:objects:count:", &v342, v446, 16);
            if (v140)
              continue;
            break;
          }
        }

        --v325;
LABEL_187:

      }
      v133 = objc_msgSend(v132, "countByEnumeratingWithState:objects:count:", &v346, v447, 16);
    }
    while (v133);
  }

LABEL_190:
  -[SASamplePrinter architectureStringForTask:](a1, v326);
  v314 = (void *)objc_claimAutoreleasedReturnValue();
  if (v321)
  {
    v145 = objc_alloc(MEMORY[0x1E0CB3940]);
    -[SASamplePrinter displayNameForTask:]((void *)a1, v326);
    v146 = (void *)objc_claimAutoreleasedReturnValue();
    v313 = (void *)objc_msgSend(v145, "initWithFormat:", CFSTR("%@ %@"), v146, v321);

  }
  else
  {
    -[SASamplePrinter displayNameForTask:]((void *)a1, v326);
    v313 = (void *)objc_claimAutoreleasedReturnValue();
  }
  if (objc_msgSend(v326, "pid"))
  {
    objc_msgSend(v326, "sharedCache");
    v147 = (void *)objc_claimAutoreleasedReturnValue();
    v148 = v147;
    if (v147)
    {
      v149 = v147;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0C99E38], "null");
      v149 = (id)objc_claimAutoreleasedReturnValue();

    }
    v312 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", v149, 0);

  }
  else
  {
    v312 = 0;
  }
  if (objc_msgSend(v326, "resourceCoalitionID"))
  {
    -[SASamplePrinter displayStringForResourceCoalition:](v326);
    v150 = (void *)objc_claimAutoreleasedReturnValue();
    v444 = v150;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v425[3]);
    v151 = (void *)objc_claimAutoreleasedReturnValue();
    v445 = v151;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v445, &v444, 1);
    v311 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v311 = 0;
  }
  if (objc_msgSend(*(id *)(a1 + 160), "dataStyle") == 1 || !objc_msgSend(*(id *)(a1 + 160), "dataStyle"))
  {
    if (objc_msgSend(*(id *)(a1 + 160), "dataSource") == 8)
    {
      v288 = 0;
      goto LABEL_209;
    }
    v152 = objc_msgSend(*(id *)(a1 + 160), "dataSource") != 0;
  }
  else
  {
    v152 = 1;
  }
  v288 = v152;
LABEL_209:
  v340 = 0;
  -[SASamplePrinter numIOsForTask:ioSize:](a1, v326, &v340);
  if ((obj & v330) == 1)
  {
    *(_QWORD *)v438 = 0;
    v439 = v438;
    v440 = 0x3032000000;
    v441 = __Block_byref_object_copy__4;
    v442 = __Block_byref_object_dispose__4;
    v443 = 0;
    v153 = *(void **)(a1 + 32);
    v154 = *(void **)(a1 + 40);
    v155 = *(_QWORD *)(a1 + 48);
    v156 = *(_QWORD *)(a1 + 56);
    v339[0] = MEMORY[0x1E0C809B0];
    v339[1] = 3221225472;
    v339[2] = __103__SASamplePrinter_printTaskHeaderForTask_specialDispatchQueueId_specialThreadId_omitSpecial_omitOther___block_invoke_5;
    v339[3] = &unk_1E7149428;
    v339[4] = a1;
    v339[5] = v438;
    -[SATask enumerateThreadStatesForThread:dispatchQueue:betweenStartTime:startSampleIndex:endTime:endSampleIndex:reverseOrder:block:]((uint64_t)v326, (void *)v324, (void *)v334, v153, v155, v154, v156, 0, v339);
    v157 = (_DWORD *)*((_QWORD *)v439 + 5);
    if (v157 && v157[2])
    {
      -[SAOnBehalfOfMultiple displayString](v157);
      v310 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v310 = 0;
    }
    _Block_object_dispose(v438, 8);

  }
  else
  {
    v437 = v326;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v437, 1);
    v158 = (void *)objc_claimAutoreleasedReturnValue();
    -[SASamplePrinter displayStringForOnBehalfOfForTasks:includePid:](a1, v158);
    v310 = (void *)objc_claimAutoreleasedReturnValue();

  }
  v337 = 0u;
  v338 = 0u;
  v335 = 0u;
  v336 = 0u;
  objc_msgSend(v326, "threads");
  v159 = (void *)objc_claimAutoreleasedReturnValue();
  v160 = 0;
  v161 = 0;
  v162 = objc_msgSend(v159, "countByEnumeratingWithState:objects:count:", &v335, v436, 16);
  if (v162)
  {
    v331 = *(_QWORD *)v336;
    obja = v159;
    do
    {
      v163 = 0;
      do
      {
        if (*(_QWORD *)v336 != v331)
          objc_enumerationMutation(obja);
        objc_msgSend(*(id *)(a1 + 144), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v335 + 1) + 8 * v163));
        v164 = (void *)objc_claimAutoreleasedReturnValue();
        v165 = v164;
        if (v164)
        {
          objc_msgSend(v164, "threadState");
          v166 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v166, "startTimestamp");
          v167 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v167, "gt:", *(_QWORD *)(a1 + 40)))
          {

LABEL_224:
            goto LABEL_226;
          }
          objc_msgSend(v165, "threadState");
          v168 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v168, "endTimestamp");
          v169 = (void *)objc_claimAutoreleasedReturnValue();
          v170 = objc_msgSend(v169, "lt:", *(_QWORD *)(a1 + 32));

          if ((v170 & 1) == 0)
          {
            if (objc_msgSend(v165, "isPartOfADeadlock"))
            {
              objc_msgSend(v165, "thread");
              v171 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v165, "threadState");
              v172 = (void *)objc_claimAutoreleasedReturnValue();
              -[SASamplePrinter displayNameForTask:thread:threadState:]((void *)a1, 0, v171, v172);
              v166 = (void *)objc_claimAutoreleasedReturnValue();

              if (v160)
                objc_msgSend(v160, "addObject:", v166);
              else
                v160 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithObjects:", v166, 0);
              goto LABEL_224;
            }
            if (objc_msgSend(v165, "isBlockedByADeadlock"))
            {
              objc_msgSend(v165, "thread");
              v173 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v165, "threadState");
              v174 = (void *)objc_claimAutoreleasedReturnValue();
              -[SASamplePrinter displayNameForTask:thread:threadState:]((void *)a1, 0, v173, v174);
              v166 = (void *)objc_claimAutoreleasedReturnValue();

              if (v161)
                objc_msgSend(v161, "addObject:", v166);
              else
                v161 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithObjects:", v166, 0);
              goto LABEL_224;
            }
          }
        }
LABEL_226:

        ++v163;
      }
      while (v162 != v163);
      v159 = obja;
      v175 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v335, v436, 16);
      v162 = v175;
    }
    while (v175);
  }
  v332 = v161;
  v309 = v160;

  HasSwallowedAnExceptionNotedByHIException = TaskHasSwallowedAnExceptionNotedByHIException(v326);
  if ((objc_msgSend(*(id *)(a1 + 16), "printJson") & 1) == 0)
    objc_msgSend(*(id *)(a1 + 8), "appendString:", CFSTR("\n\n"));
  v286 = *(void **)(a1 + 8);
  objc_msgSend(v326, "mainBinary");
  objb = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v326, "mainBinaryPath");
  v308 = (void *)objc_claimAutoreleasedReturnValue();
  v285 = objc_msgSend(v326, "uid");
  objc_msgSend(v326, "bundleIdentifier");
  v307 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v326, "bundleVersion");
  v306 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v326, "bundleShortVersion");
  v305 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v326, "bundleBuildVersion");
  v304 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v326, "bundleProjectName");
  v303 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v326, "bundleSourceVersion");
  v302 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v326, "bundleProductBuildVersion");
  v301 = (void *)objc_claimAutoreleasedReturnValue();
  v284 = objc_msgSend(v326, "adamID");
  objc_msgSend(v326, "installerVersionID");
  v300 = (void *)objc_claimAutoreleasedReturnValue();
  v283 = objc_msgSend(v326, "developerType");
  objc_msgSend(v326, "appType");
  v299 = (void *)objc_claimAutoreleasedReturnValue();
  v282 = objc_msgSend(v326, "isBeta");
  objc_msgSend(v326, "cohortID");
  v296 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v326, "vendorID");
  v295 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v326, "distributorID");
  v298 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v326, "codesigningID");
  v297 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v326, "teamID");
  v294 = (void *)objc_claimAutoreleasedReturnValue();
  if (v326)
    Property = objc_getProperty(v326, v176, 272, 1);
  else
    Property = 0;
  v293 = Property;
  if (v288)
    v289 = *(_QWORD *)(a1 + 64);
  else
    v289 = 0;
  v280 = v373[3];
  v281 = v377[3];
  v278 = v433[3];
  v279 = v425[3];
  v276 = v417[3];
  v277 = v429[3];
  v274 = v409[3];
  v275 = v413[3];
  v178 = v365;
  v179 = v364;
  v180 = v363;
  v181 = v362;
  v182 = v361;
  v183 = v360;
  v273 = objc_msgSend(v326, "usesSuddenTermination");
  v184 = objc_msgSend(v326, "allowsIdleExit");
  v185 = objc_msgSend(v326, "isTranslocated");
  v186 = objc_msgSend(v326, "isUnresponsive");
  objc_msgSend(v326, "timeOfLastResponse");
  v188 = v187;
  objc_msgSend(v326, "threads");
  v189 = (void *)objc_claimAutoreleasedReturnValue();
  v190 = objc_msgSend(v189, "count");
  -[SASamplePrinter addTaskHeaderToStream:displayName:pid:mainBinary:mainBinaryPath:sharedCaches:uid:bundleIdentifier:bundleVersion:bundleShortVersion:bundleBuildVersion:bundleProjectName:bundleSourceVersion:bundleProductBuildVersion:adamID:installerVersionID:developerType:appType:isBeta:cohortID:vendorID:distributorID:codesigningID:teamID:resourceCoalitionSampleCounts:onBehalfOfProcesses:architectureString:kernelVersion:parentName:responsibleName:taskExecedFromName:taskExecedToName:pidStartTimestamp:startTimestamp:endTimestamp:startSampleIndex:endSampleIndex:numSamples:totalNumSamples:numSamplesSuspended:numSamplesTerminated:startingTaskSize:endingTaskSize:maxTaskSize:startSampleIndexOfMaxTaskSize:endSampleIndexOfMaxTaskSize:numPageins:cpuTimeNs:cpuInstructions:cpuCycles:nonThreadCpuTimeNs:nonThreadCpuInstructions:nonThreadCpuCycles:usesSuddenTermination:allowsIdleExit:isTranslocated:isUnresponsive:timeOfLastResponse:numThreads:numIdleWorkQueueThreads:numOtherHiddenThreads:hieSwallowedException:wqExceededConstrainedThreadLimit:wqExceededTotalThreadLimit:threadsDeadlocked:threadsBlockedByADeadlock:ioSize:numIOs:isReportHeader:](a1, v286, v313, 0xFFFFFFFFLL, objb, v308, v312, v285, v188, v307, v306, v305, v304, v303, v302, v301, v284, v300, v283,
    v299,
    v282,
    v296,
    v295,
    v298,
    v297,
    v294,
    v311,
    v310,
    v314,
    v315,
    v317,
    v316,
    v320,
    v319,
    v293,
    v323,
    v322,
    v281,
    v280,
    v279,
    v289,
    v278,
    v277,
    v292,
    v291,
    v276,
    v275,
    v274,
    v290,
    v178,
    v179,
    v180,
    v181,
    v182,
    v183,
    v273,
    v184,
    v185,
    v186,
    v190,
    v357[3],
    v325,
    HasSwallowedAnExceptionNotedByHIException);

  v54 = v425[3];
  _Block_object_dispose(&v356, 8);

  _Block_object_dispose(&v372, 8);
  _Block_object_dispose(&v376, 8);
LABEL_245:

  _Block_object_dispose(buf, 8);
  _Block_object_dispose(&v388, 8);
  _Block_object_dispose(&v392, 8);
  _Block_object_dispose(&v396, 8);

  _Block_object_dispose(&v402, 8);
  _Block_object_dispose(&v408, 8);
  _Block_object_dispose(&v412, 8);
  _Block_object_dispose(&v416, 8);
  _Block_object_dispose(v420, 8);
  _Block_object_dispose(v422, 8);
  _Block_object_dispose(&v424, 8);
  _Block_object_dispose(&v428, 8);
  _Block_object_dispose(&v432, 8);

  return v54;
}

void __103__SASamplePrinter_printTaskHeaderForTask_specialDispatchQueueId_specialThreadId_omitSpecial_omitOther___block_invoke(_QWORD *a1, void *a2, void *a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v7 = a1[4];
  v8 = *(_QWORD *)(v7 + 48);
  v9 = *(_QWORD *)(v7 + 56);
  v10 = a3;
  v11 = a2;
  v12 = objc_msgSend(v10, "sampleCountInSampleIndexRangeStart:end:", v8, v9);
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) += v12;
  LODWORD(v9) = objc_msgSend(v10, "isSuspended");

  if ((_DWORD)v9)
    *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) += v12;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  -[SAThread cpuTimeForThreadStateIndex:inTimestampRangeStart:end:](v11, a4, *(void **)(a1[4] + 32), *(void **)(a1[4] + 40), &v14);

  v13 = v15;
  *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 32) += v14;
  *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 40) += v13;
  *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 48) += v16;
}

void __103__SASamplePrinter_printTaskHeaderForTask_specialDispatchQueueId_specialThreadId_omitSpecial_omitOther___block_invoke_2(_QWORD *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  id v22;

  v22 = a2;
  v4 = objc_msgSend(v22, "sampleCountInSampleIndexRangeStart:end:", *(_QWORD *)(a1[4] + 48), *(_QWORD *)(a1[4] + 56));
  if (!v4)
    goto LABEL_21;
  v5 = v4;
  v6 = *(_QWORD *)(a1[5] + 8);
  v8 = *(_QWORD *)(v6 + 40);
  v7 = (id *)(v6 + 40);
  if (!v8)
    objc_storeStrong(v7, a2);
  objc_storeStrong((id *)(*(_QWORD *)(a1[6] + 8) + 40), a2);
  v9 = *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24);
  v10 = v22;
  if (v9 && (v11 = v9 >= objc_msgSend(v22, "taskSizeInBytes"), v10 = v22, v11))
  {
    v18 = *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24);
    v19 = v18 == objc_msgSend(v22, "taskSizeInBytes");
    v17 = v22;
    if (!v19)
      goto LABEL_12;
    v16 = a1 + 9;
    v20 = *(_QWORD *)(*(_QWORD *)(a1[9] + 8) + 24) + 1;
    v19 = v20 == objc_msgSend(v22, "startSampleIndex");
    v17 = v22;
    if (!v19)
      goto LABEL_12;
    v21 = objc_msgSend(v22, "endSampleIndex");
    v15 = *(_QWORD *)(a1[4] + 56);
    if (v21 < v15)
      v15 = v21;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24) = objc_msgSend(v10, "taskSizeInBytes");
    v12 = objc_msgSend(v22, "startSampleIndex");
    v13 = *(_QWORD *)(a1[4] + 48);
    if (v12 > v13)
      v13 = v12;
    *(_QWORD *)(*(_QWORD *)(a1[8] + 8) + 24) = v13;
    v14 = objc_msgSend(v22, "endSampleIndex");
    v15 = *(_QWORD *)(a1[4] + 56);
    if (v14 < v15)
      v15 = v14;
    v16 = a1 + 9;
  }
  *(_QWORD *)(*(_QWORD *)(*v16 + 8) + 24) = v15;
  v17 = v22;
LABEL_12:
  if (objc_msgSend(v17, "wqExceededTotalThreadLimit"))
    *(_BYTE *)(*(_QWORD *)(a1[10] + 8) + 24) = 1;
  if (objc_msgSend(v22, "wqExceededConstrainedThreadLimit"))
    *(_BYTE *)(*(_QWORD *)(a1[11] + 8) + 24) = 1;
  *(_QWORD *)(*(_QWORD *)(a1[12] + 8) + 24) += v5;
  if (objc_msgSend(v22, "isSuspended"))
    *(_QWORD *)(*(_QWORD *)(a1[13] + 8) + 24) += v5;
  if ((objc_msgSend(v22, "isTerminatedSnapshot") & 1) != 0 || objc_msgSend(v22, "transitionIsTerminated"))
    *(_QWORD *)(*(_QWORD *)(a1[14] + 8) + 24) += v5;
LABEL_21:

}

void __103__SASamplePrinter_printTaskHeaderForTask_specialDispatchQueueId_specialThreadId_omitSpecial_omitOther___block_invoke_997(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  __int128 v17;
  char v18;

  v4 = a3;
  v5 = *(_QWORD **)(a1 + 32);
  v6 = *(void **)(a1 + 40);
  v7 = v5[4];
  v8 = v5[5];
  v12[0] = MEMORY[0x1E0C809B0];
  v12[2] = __103__SASamplePrinter_printTaskHeaderForTask_specialDispatchQueueId_specialThreadId_omitSpecial_omitOther___block_invoke_2_998;
  v12[3] = &unk_1E7149360;
  v18 = *(_BYTE *)(a1 + 72);
  v9 = v5[6];
  v10 = v5[7];
  v12[1] = 3221225472;
  v13 = v6;
  v14 = *(id *)(a1 + 48);
  v15 = v4;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_OWORD *)(a1 + 56);
  v11 = v4;
  objc_msgSend(v11, "enumerateThreadStatesBetweenStartTime:startSampleIndex:endTime:endSampleIndex:reverseOrder:block:", v7, v9, v8, v10, 0, v12);

}

void __103__SASamplePrinter_printTaskHeaderForTask_specialDispatchQueueId_specialThreadId_omitSpecial_omitOther___block_invoke_2_998(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  int v9;
  void *v10;

  v3 = a2;
  v4 = v3;
  v10 = v3;
  if (!*(_BYTE *)(a1 + 80))
    goto LABEL_9;
  v6 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  if (!v6)
  {
    if (v5 && v5 == *(_QWORD *)(a1 + 48))
      goto LABEL_11;
    goto LABEL_9;
  }
  if (v5 && v5 != *(_QWORD *)(a1 + 48)
    || (objc_msgSend(v3, "dispatchQueue"),
        v7 = (void *)objc_claimAutoreleasedReturnValue(),
        v7,
        v4 = v10,
        v6 != v7))
  {
LABEL_9:
    v8 = objc_msgSend(v4, "sampleCountInSampleIndexRangeStart:end:", *(_QWORD *)(*(_QWORD *)(a1 + 56) + 48), *(_QWORD *)(*(_QWORD *)(a1 + 56) + 56));
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) += v8;
    v9 = objc_msgSend(v10, "isSuspended");
    v4 = v10;
    if (v9)
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) += v8;
  }
LABEL_11:

}

void __103__SASamplePrinter_printTaskHeaderForTask_specialDispatchQueueId_specialThreadId_omitSpecial_omitOther___block_invoke_1001(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  unint64_t v9;
  void *v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  unint64_t v17;
  id v19;

  v19 = a3;
  objc_msgSend(v19, "threadStates");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "count");

  v6 = v19;
  if (v5)
  {
    objc_msgSend(v19, "threadStates");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "firstObject");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    v9 = objc_msgSend(v8, "startSampleIndex");
    objc_msgSend(v19, "threadStates");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "lastObject");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    v12 = objc_msgSend(v11, "endSampleIndex");
    if (v9 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v14 = *(_QWORD *)(v13 + 24);
      if (v14 == 0x7FFFFFFFFFFFFFFFLL || v14 > v9)
        *(_QWORD *)(v13 + 24) = v9;
    }
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v17 = *(_QWORD *)(v16 + 24);
    if (v17 == 0x7FFFFFFFFFFFFFFFLL || v17 < v12)
      *(_QWORD *)(v16 + 24) = v12;

    v6 = v19;
  }

}

void __103__SASamplePrinter_printTaskHeaderForTask_specialDispatchQueueId_specialThreadId_omitSpecial_omitOther___block_invoke_1004(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;

  v6 = a2;
  if (objc_msgSend(v6, "taskSizeInBytes"))
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend(v6, "taskSizeInBytes");
    *a4 = 1;
  }

}

void __103__SASamplePrinter_printTaskHeaderForTask_specialDispatchQueueId_specialThreadId_omitSpecial_omitOther___block_invoke_2_1005(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(a2, "thread");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "numberWithUnsignedLongLong:", objc_msgSend(v5, "threadId"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v4);

}

uint64_t __103__SASamplePrinter_printTaskHeaderForTask_specialDispatchQueueId_specialThreadId_omitSpecial_omitOther___block_invoke_3(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[5];

  v4 = *(_QWORD **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = v4[4];
  v7 = v4[5];
  v8 = v4[6];
  v9 = v4[7];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __103__SASamplePrinter_printTaskHeaderForTask_specialDispatchQueueId_specialThreadId_omitSpecial_omitOther___block_invoke_4;
  v11[3] = &unk_1E7149400;
  v11[4] = v5;
  return objc_msgSend(a3, "enumerateThreadStatesBetweenStartTime:startSampleIndex:endTime:endSampleIndex:reverseOrder:block:", v6, v8, v7, v9, 0, v11);
}

uint64_t __103__SASamplePrinter_printTaskHeaderForTask_specialDispatchQueueId_specialThreadId_omitSpecial_omitOther___block_invoke_4(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t result;

  result = objc_msgSend(a2, "isIdleWorkQueue");
  if ((_DWORD)result)
  {
    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    *a4 = 1;
  }
  return result;
}

void __103__SASamplePrinter_printTaskHeaderForTask_specialDispatchQueueId_specialThreadId_omitSpecial_omitOther___block_invoke_5(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;
  void *v8;
  void *v9;
  id *v10;
  void *v11;
  void *v12;
  _DWORD *v13;
  SAOnBehalfOfMultiple *v14;
  uint64_t v15;
  void *v16;
  id v17;

  v17 = a3;
  v4 = objc_msgSend(v17, "originPid");
  v5 = objc_msgSend(v17, "proximatePid");
  v6 = v5;
  if ((_DWORD)v4 != -1 || (_DWORD)v5 != -1)
  {
    v7 = *(id **)(a1 + 32);
    objc_msgSend(v17, "endTimestamp");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[SASamplePrinter displayNameForPid:aroundTimestamp:includePid:](v7, v4, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    v10 = *(id **)(a1 + 32);
    objc_msgSend(v17, "endTimestamp");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[SASamplePrinter displayNameForPid:aroundTimestamp:includePid:](v10, v6, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    v13 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    if (!v13)
    {
      v14 = objc_alloc_init(SAOnBehalfOfMultiple);
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v16 = *(void **)(v15 + 40);
      *(_QWORD *)(v15 + 40) = v14;

      v13 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    }
    -[SAOnBehalfOfMultiple addProximateName:proximatePid:originName:originPid:count:](v13, v12, v6, v9, v4, 1);

  }
}

- (__CFString)displayNameForPid:(id *)a1 aroundTimestamp:(uint64_t)a2 includePid:(void *)a3
{
  id v5;
  void *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  const char *v22;
  id Property;
  id v24;
  void *v25;
  __CFString *v26;
  __CFString *v27;
  __CFString *v28;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int v61;
  NSObject *v62;
  id v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  void *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint8_t buf[4];
  uint64_t v79;
  _BYTE v80[128];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (!a1)
  {
LABEL_85:
    v28 = 0;
    goto LABEL_31;
  }
  objc_msgSend(a1[20], "tasksByPid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = 0x1E0CB3000uLL;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "objectForKeyedSubscript:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v10 = v9;
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v74, v80, 16);
    if (v11)
    {
      v12 = v11;
      v72 = a2;
      v73 = v9;
      v13 = 0;
      v14 = 0;
      v15 = *(_QWORD *)v75;
LABEL_5:
      v16 = 0;
      v17 = v13;
      v18 = v14;
      while (1)
      {
        if (*(_QWORD *)v75 != v15)
          objc_enumerationMutation(v10);
        v19 = *(void **)(*((_QWORD *)&v74 + 1) + 8 * v16);
        objc_msgSend(v19, "endTimestamp");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v13, "ge:", v5) & 1) == 0)
          break;
        v14 = v19;

        ++v16;
        v17 = v13;
        v18 = v14;
        if (v12 == v16)
        {
          v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v74, v80, 16);
          if (v12)
            goto LABEL_5;
          goto LABEL_27;
        }
      }
      if (!v18)
      {
        v18 = v19;
        goto LABEL_26;
      }
      objc_msgSend(v19, "startTimestamp");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v20, "le:", v5) & 1) != 0)
        goto LABEL_14;
      if (v17)
      {
        objc_msgSend(v17, "machContTimeSeconds");
        if (v30 == 0.0 || (objc_msgSend(v5, "machContTimeSeconds"), v31 == 0.0))
        {
          objc_msgSend(v17, "machAbsTimeSeconds");
          if (v35 == 0.0 || (objc_msgSend(v5, "machAbsTimeSeconds"), v36 == 0.0))
          {
            objc_msgSend(v17, "wallTime");
            if (v38 == 0.0)
              goto LABEL_58;
            objc_msgSend(v5, "wallTime");
            if (v39 == 0.0)
              goto LABEL_58;
            objc_msgSend(v17, "wallTime");
            v33 = v40;
            objc_msgSend(v5, "wallTime");
          }
          else
          {
            objc_msgSend(v17, "machAbsTimeSeconds");
            v33 = v37;
            objc_msgSend(v5, "machAbsTimeSeconds");
          }
        }
        else
        {
          objc_msgSend(v17, "machContTimeSeconds");
          v33 = v32;
          objc_msgSend(v5, "machContTimeSeconds");
        }
        v41 = v33 - v34;
        if (v41 >= 0.0)
          v42 = v41;
        else
          v42 = -v41;
        if (v42 != 0.0)
        {
          objc_msgSend(v20, "machContTimeSeconds");
          if (v43 == 0.0 || (objc_msgSend(v5, "machContTimeSeconds"), v44 == 0.0))
          {
            objc_msgSend(v20, "machAbsTimeSeconds");
            if (v48 == 0.0 || (objc_msgSend(v5, "machAbsTimeSeconds"), v49 == 0.0))
            {
              objc_msgSend(v20, "wallTime");
              if (v51 == 0.0)
                goto LABEL_58;
              objc_msgSend(v5, "wallTime");
              if (v52 == 0.0)
                goto LABEL_58;
              objc_msgSend(v20, "wallTime");
              v46 = v53;
              objc_msgSend(v5, "wallTime");
            }
            else
            {
              objc_msgSend(v20, "machAbsTimeSeconds");
              v46 = v50;
              objc_msgSend(v5, "machAbsTimeSeconds");
            }
          }
          else
          {
            objc_msgSend(v20, "machContTimeSeconds");
            v46 = v45;
            objc_msgSend(v5, "machContTimeSeconds");
          }
          v54 = v46 - v47;
          if (v54 < 0.0)
            v54 = -v54;
          if (v54 != 0.0)
          {
            if (v42 < v54)
              goto LABEL_15;
            goto LABEL_14;
          }
        }
LABEL_58:
        if (objc_msgSend(v17, "machContTime") && objc_msgSend(v5, "machContTime"))
        {
          v55 = objc_msgSend(v17, "machContTime");
          v56 = objc_msgSend(v5, "machContTime");
        }
        else
        {
          if (!objc_msgSend(v17, "machAbsTime") || !objc_msgSend(v5, "machAbsTime"))
            goto LABEL_14;
          v55 = objc_msgSend(v17, "machAbsTime");
          v56 = objc_msgSend(v5, "machAbsTime");
        }
        if (v55 - v56 >= 0)
          v57 = v55 - v56;
        else
          v57 = v56 - v55;
        if (v55 != v56)
        {
          if (objc_msgSend(v20, "machContTime") && objc_msgSend(v5, "machContTime"))
          {
            v58 = objc_msgSend(v20, "machContTime");
            v59 = objc_msgSend(v5, "machContTime");
            goto LABEL_74;
          }
          if (objc_msgSend(v20, "machAbsTime") && objc_msgSend(v5, "machAbsTime"))
          {
            v58 = objc_msgSend(v20, "machAbsTime");
            v59 = objc_msgSend(v5, "machAbsTime");
LABEL_74:
            if (v58 - v59 >= 0)
              v60 = v58 - v59;
            else
              v60 = v59 - v58;
            if (v58 != v59 && v57 < v60)
              goto LABEL_15;
          }
        }
LABEL_14:
        v21 = v19;

        v18 = v21;
LABEL_15:

LABEL_26:
        v13 = v17;
        v14 = v18;
LABEL_27:

        v9 = v73;
        a2 = v72;
        v7 = 0x1E0CB3000;
        goto LABEL_28;
      }
      v61 = *__error();
      _sa_logt();
      v62 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend(v10, "debugDescription");
        v63 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v64 = objc_msgSend(v63, "UTF8String");
        *(_DWORD *)buf = 136315138;
        v79 = v64;
        _os_log_error_impl(&dword_1B9BE0000, v62, OS_LOG_TYPE_ERROR, "no earlierTaskEndTimestamp in %s", buf, 0xCu);

      }
      *__error() = v61;
      objc_msgSend(v10, "debugDescription");
      v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v65 = objc_msgSend(v5, "UTF8String");
      _SASetCrashLogMessage(12801, "no earlierTaskEndTimestamp in %s", v66, v67, v68, v69, v70, v71, v65);

      _os_crash();
      __break(1u);
      goto LABEL_85;
    }
    v14 = 0;
LABEL_28:

    if (v14)
      goto LABEL_29;
LABEL_17:
    Property = a1[20];
    if (Property)
      Property = objc_getProperty(Property, v22, 976, 1);
    v24 = Property;
    objc_msgSend(*(id *)(v7 + 2024), "numberWithInt:", a2);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "objectForKeyedSubscript:", v25);
    v26 = (__CFString *)objc_claimAutoreleasedReturnValue();

    if (!v26)
    {
      v27 = CFSTR("UNKNOWN");
      if (!(_DWORD)a2)
        v27 = CFSTR("kernel_task");
      v26 = v27;
    }
    v28 = v26;

    goto LABEL_30;
  }
  objc_msgSend(v9, "lastObject");
  v14 = (id)objc_claimAutoreleasedReturnValue();
  if (!v14)
    goto LABEL_17;
LABEL_29:
  -[SASamplePrinter displayNameForTask:includePid:](a1, v14, 0);
  v28 = (__CFString *)objc_claimAutoreleasedReturnValue();
LABEL_30:

LABEL_31:
  return v28;
}

uint64_t __1143__SASamplePrinter_addTaskHeaderToStream_displayName_pid_mainBinary_mainBinaryPath_sharedCaches_uid_bundleIdentifier_bundleVersion_bundleShortVersion_bundleBuildVersion_bundleProjectName_bundleSourceVersion_bundleProductBuildVersion_adamID_installerVersionID_developerType_appType_isBeta_cohortID_vendorID_distributorID_codesigningID_teamID_resourceCoalitionSampleCounts_onBehalfOfProcesses_architectureString_kernelVersion_parentName_responsibleName_taskExecedFromName_taskExecedToName_pidStartTimestamp_startTimestamp_endTimestamp_startSampleIndex_endSampleIndex_numSamples_totalNumSamples_numSamplesSuspended_numSamplesTerminated_startingTaskSize_endingTaskSize_maxTaskSize_startSampleIndexOfMaxTaskSize_endSampleIndexOfMaxTaskSize_numPageins_cpuTimeNs_cpuInstructions_cpuCycles_nonThreadCpuTimeNs_nonThreadCpuInstructions_nonThreadCpuCycles_usesSuddenTermination_allowsIdleExit_isTranslocated_isUnresponsive_timeOfLastResponse_numThreads_numIdleWorkQueueThreads_numOtherHiddenThreads_hieSwallowedException_wqExceededConstrainedThreadLimit_wqExceededTotalThreadLimit_threadsDeadlocked_threadsBlockedByADeadlock_ioSize_numIOs_isReportHeader___block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;

  v5 = *(void **)(a1 + 32);
  v6 = a2;
  objc_msgSend(v5, "objectForKeyedSubscript:", a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = objc_msgSend(v7, "compare:", v8);
  return v9;
}

- (__CFString)timeIndexDescriptionForStartSampleIndex:(unint64_t)a3 endSampleIndex:(unsigned int)a4 formattedToLength:
{
  unint64_t v8;
  id v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v18;
  uint64_t v19;
  id v20;
  _BOOL4 v21;
  int v22;
  uint64_t v23;
  const __CFString *v24;
  void *v25;
  _BOOL4 v26;
  int v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  void *v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint8_t buf[4];
  unint64_t v53;
  __int16 v54;
  unint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (a3 == 0x7FFFFFFFFFFFFFFFLL)
    return &stru_1E714A250;
  if (a2 != 0x7FFFFFFFFFFFFFFFLL && a2 > a3)
  {
    v40 = *__error();
    _sa_logt();
    v41 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218240;
      v53 = a2;
      v54 = 2048;
      v55 = a3;
      _os_log_error_impl(&dword_1B9BE0000, v41, OS_LOG_TYPE_ERROR, "startSampleIndex %lu > endSampleIndex %lu", buf, 0x16u);
    }

    *__error() = v40;
    _SASetCrashLogMessage(12587, "startSampleIndex %lu > endSampleIndex %lu", v42, v43, v44, v45, v46, v47, a2);
    _os_crash();
    __break(1u);
  }
  v8 = *(_QWORD *)(a1 + 56);
  if (a2 == 0x7FFFFFFFFFFFFFFFLL)
  {
    if (v8 <= a3)
      goto LABEL_7;
LABEL_12:
    if (*(_QWORD *)(a1 + 48) <= a3)
    {
      if (a2 != 0x7FFFFFFFFFFFFFFFLL)
      {
        if (a4)
        {
          if (a4 >> 1 <= 1)
            v16 = 1;
          else
            v16 = a4 >> 1;
          v18 = (a4 & 1) == 0 && v16 > 1;
          v19 = (v16 - v18);
          v20 = objc_alloc(MEMORY[0x1E0CB3940]);
          v21 = -[SASamplePrinter hasTimeIndexes](a1);
          if (a2 == a3)
          {
            if (v21)
            {
              v22 = objc_msgSend(*(id *)(a1 + 16), "forceOneBasedTimeIndexes");
              v23 = a3 + 1;
              if (v22)
                v23 -= *(_QWORD *)(a1 + 48);
            }
            else
            {
              v23 = 0x7FFFFFFFFFFFFFFFLL;
            }
            v50 = v16;
            v51 = v23;
            v48 = v19;
            v49 = "";
            v24 = CFSTR("%*s %-*lu");
          }
          else
          {
            if (v21)
            {
              v31 = a2 + 1;
              if (objc_msgSend(*(id *)(a1 + 16), "forceOneBasedTimeIndexes"))
                v31 -= *(_QWORD *)(a1 + 48);
            }
            else
            {
              v31 = 0x7FFFFFFFFFFFFFFFLL;
            }
            if (-[SASamplePrinter hasTimeIndexes](a1))
            {
              v36 = objc_msgSend(*(id *)(a1 + 16), "forceOneBasedTimeIndexes");
              v37 = a3 + 1;
              if (v36)
                v37 -= *(_QWORD *)(a1 + 48);
            }
            else
            {
              v37 = 0x7FFFFFFFFFFFFFFFLL;
            }
            v50 = v16;
            v51 = v37;
            v48 = v19;
            v49 = (const char *)v31;
            v24 = CFSTR("%*lu-%-*lu");
          }
        }
        else
        {
          v20 = objc_alloc(MEMORY[0x1E0CB3940]);
          v26 = -[SASamplePrinter hasTimeIndexes](a1);
          if (a2 == a3)
          {
            if (v26)
            {
              v27 = objc_msgSend(*(id *)(a1 + 16), "forceOneBasedTimeIndexes");
              v28 = a3 + 1;
              if (v27)
                v28 -= *(_QWORD *)(a1 + 48);
            }
            else
            {
              v28 = 0x7FFFFFFFFFFFFFFFLL;
            }
            v48 = v28;
            v24 = CFSTR("at time index %lu");
          }
          else
          {
            if (v26)
            {
              v32 = a2 + 1;
              if (objc_msgSend(*(id *)(a1 + 16), "forceOneBasedTimeIndexes"))
                v32 -= *(_QWORD *)(a1 + 48);
            }
            else
            {
              v32 = 0x7FFFFFFFFFFFFFFFLL;
            }
            if (-[SASamplePrinter hasTimeIndexes](a1))
            {
              v38 = objc_msgSend(*(id *)(a1 + 16), "forceOneBasedTimeIndexes");
              v39 = a3 + 1;
              if (v38)
                v39 -= *(_QWORD *)(a1 + 48);
            }
            else
            {
              v39 = 0x7FFFFFFFFFFFFFFFLL;
            }
            v48 = v32;
            v49 = (const char *)v39;
            v24 = CFSTR("at time indexes %lu-%lu");
          }
        }
        v25 = v20;
        goto LABEL_75;
      }
      if (!a4)
      {
        v29 = objc_alloc(MEMORY[0x1E0CB3940]);
        if (-[SASamplePrinter hasTimeIndexes](a1))
        {
          v30 = a3 + 1;
          if (objc_msgSend(*(id *)(a1 + 16), "forceOneBasedTimeIndexes"))
            v30 -= *(_QWORD *)(a1 + 48);
        }
        else
        {
          v30 = 0x7FFFFFFFFFFFFFFFLL;
        }
        if (-[SASamplePrinter hasTimeIndexes](a1))
        {
          v33 = objc_msgSend(*(id *)(a1 + 16), "forceOneBasedTimeIndexes");
          v34 = a3 + 2;
          if (v33)
            v34 -= *(_QWORD *)(a1 + 48);
        }
        else
        {
          v34 = 0x7FFFFFFFFFFFFFFFLL;
        }
        v35 = (void *)objc_msgSend(v29, "initWithFormat:", CFSTR("between time indexes %lu and %lu"), v30, v34, v50, v51);
        return (__CFString *)v35;
      }
    }
    else if (!a4)
    {
      v9 = objc_alloc(MEMORY[0x1E0CB3940]);
      v13 = *(_QWORD *)(a1 + 48);
      if (-[SASamplePrinter hasTimeIndexes](a1))
      {
        v14 = objc_msgSend(*(id *)(a1 + 16), "forceOneBasedTimeIndexes");
        v15 = v13 + 1;
        if (v14)
          v15 -= *(_QWORD *)(a1 + 48);
      }
      else
      {
        v15 = 0x7FFFFFFFFFFFFFFFLL;
      }
      v48 = v15;
      v24 = CFSTR("before time index %lu");
      goto LABEL_38;
    }
    return CFSTR("No samples");
  }
  if (v8 >= a2)
    goto LABEL_12;
LABEL_7:
  if (a4)
    return CFSTR("No samples");
  v9 = objc_alloc(MEMORY[0x1E0CB3940]);
  v10 = *(_QWORD *)(a1 + 56);
  if (-[SASamplePrinter hasTimeIndexes](a1))
  {
    v11 = objc_msgSend(*(id *)(a1 + 16), "forceOneBasedTimeIndexes");
    v12 = v10 + 1;
    if (v11)
      v12 -= *(_QWORD *)(a1 + 48);
  }
  else
  {
    v12 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v48 = v12;
  v24 = CFSTR("after time index %lu");
LABEL_38:
  v25 = v9;
LABEL_75:
  v35 = (void *)objc_msgSend(v25, "initWithFormat:", v24, v48, v49, v50, v51);
  return (__CFString *)v35;
}

- (__CFString)timeIndexDescriptionForTimestamp:(uint64_t)a1
{
  id v3;
  double v4;
  double v5;
  double v6;
  double v7;
  id v8;
  uint64_t v9;
  _BOOL4 v10;
  int v11;
  uint64_t v12;
  __CFString *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  _BOOL4 v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  id v26;
  _BOOL4 v27;
  int v28;
  uint64_t v29;
  const __CFString *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  int v35;
  uint64_t v36;
  int v38;
  NSObject *v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint8_t buf[4];
  unint64_t v51;
  __int16 v52;
  unint64_t v53;
  __int16 v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (-[SASamplePrinter hasTimeIndexes](a1))
  {
    if (objc_msgSend(v3, "lt:", *(_QWORD *)(a1 + 32)))
    {
      objc_msgSend(*(id *)(a1 + 32), "machAbsTimeSeconds");
      v5 = v4;
      objc_msgSend(v3, "machAbsTimeSeconds");
      v7 = v5 - v6;
      v8 = objc_alloc(MEMORY[0x1E0CB3940]);
      v9 = *(_QWORD *)(a1 + 48);
      v10 = -[SASamplePrinter hasTimeIndexes](a1);
      if (v7 >= 0.1)
      {
        if (v10)
        {
          v22 = objc_msgSend(*(id *)(a1 + 16), "forceOneBasedTimeIndexes");
          v23 = v9 + 1;
          if (v22)
            v23 -= *(_QWORD *)(a1 + 48);
        }
        else
        {
          v23 = 0x7FFFFFFFFFFFFFFFLL;
        }
        v49 = v23;
        v48 = v7;
        v30 = CFSTR("%.1fs before time index %lu");
      }
      else
      {
        if (v10)
        {
          v11 = objc_msgSend(*(id *)(a1 + 16), "forceOneBasedTimeIndexes");
          v12 = v9 + 1;
          if (v11)
            v12 -= *(_QWORD *)(a1 + 48);
        }
        else
        {
          v12 = 0x7FFFFFFFFFFFFFFFLL;
        }
        v48 = *(double *)&v12;
        v30 = CFSTR("<0.1s before time index %lu");
      }
    }
    else
    {
      if (!objc_msgSend(v3, "gt:", *(_QWORD *)(a1 + 40)))
      {
        v24 = objc_msgSend(*(id *)(a1 + 160), "indexOfLastSampleOnOrBeforeTimestamp:", v3);
        v25 = objc_msgSend(*(id *)(a1 + 160), "indexOfFirstSampleOnOrAfterTimestamp:", v3);
        if (v24 > v25)
        {
          v38 = *__error();
          _sa_logt();
          v39 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
          {
            objc_msgSend(v3, "debugDescription");
            v40 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            *(_DWORD *)buf = 134218498;
            v51 = v24;
            v52 = 2048;
            v53 = v25;
            v54 = 2080;
            v55 = objc_msgSend(v40, "UTF8String");
            _os_log_error_impl(&dword_1B9BE0000, v39, OS_LOG_TYPE_ERROR, "indexBefore %lu > indexAfter %lu for %s", buf, 0x20u);

          }
          *__error() = v38;
          objc_msgSend(v3, "debugDescription");
          v41 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          objc_msgSend(v41, "UTF8String");
          _SASetCrashLogMessage(12726, "indexBefore %lu > indexAfter %lu for %s", v42, v43, v44, v45, v46, v47, v24);

          _os_crash();
          __break(1u);
        }
        v26 = objc_alloc(MEMORY[0x1E0CB3940]);
        v27 = -[SASamplePrinter hasTimeIndexes](a1);
        if (v25 == v24)
        {
          if (v27)
          {
            v28 = objc_msgSend(*(id *)(a1 + 16), "forceOneBasedTimeIndexes");
            v29 = v24 + 1;
            if (v28)
              v29 -= *(_QWORD *)(a1 + 48);
          }
          else
          {
            v29 = 0x7FFFFFFFFFFFFFFFLL;
          }
          v48 = *(double *)&v29;
          v30 = CFSTR("at time index %lu");
        }
        else
        {
          if (v27)
          {
            v33 = v24 + 1;
            if (objc_msgSend(*(id *)(a1 + 16), "forceOneBasedTimeIndexes"))
              v33 -= *(_QWORD *)(a1 + 48);
          }
          else
          {
            v33 = 0x7FFFFFFFFFFFFFFFLL;
          }
          if (-[SASamplePrinter hasTimeIndexes](a1))
          {
            v35 = objc_msgSend(*(id *)(a1 + 16), "forceOneBasedTimeIndexes");
            v36 = v25 + 1;
            if (v35)
              v36 -= *(_QWORD *)(a1 + 48);
          }
          else
          {
            v36 = 0x7FFFFFFFFFFFFFFFLL;
          }
          v48 = *(double *)&v33;
          v49 = v36;
          v30 = CFSTR("between time indexes %lu and %lu");
        }
        v34 = v26;
        goto LABEL_45;
      }
      objc_msgSend(v3, "machAbsTimeSeconds");
      v15 = v14;
      objc_msgSend(*(id *)(a1 + 40), "machAbsTimeSeconds");
      v17 = v15 - v16;
      v8 = objc_alloc(MEMORY[0x1E0CB3940]);
      v18 = *(_QWORD *)(a1 + 56);
      v19 = -[SASamplePrinter hasTimeIndexes](a1);
      if (v17 >= 0.1)
      {
        if (v19)
        {
          v31 = objc_msgSend(*(id *)(a1 + 16), "forceOneBasedTimeIndexes");
          v32 = v18 + 1;
          if (v31)
            v32 -= *(_QWORD *)(a1 + 48);
        }
        else
        {
          v32 = 0x7FFFFFFFFFFFFFFFLL;
        }
        v49 = v32;
        v48 = v17;
        v30 = CFSTR("%.1fs after time index %lu");
      }
      else
      {
        if (v19)
        {
          v20 = objc_msgSend(*(id *)(a1 + 16), "forceOneBasedTimeIndexes");
          v21 = v18 + 1;
          if (v20)
            v21 -= *(_QWORD *)(a1 + 48);
        }
        else
        {
          v21 = 0x7FFFFFFFFFFFFFFFLL;
        }
        v48 = *(double *)&v21;
        v30 = CFSTR("<0.1s after time index %lu");
      }
    }
    v34 = v8;
LABEL_45:
    v13 = (__CFString *)objc_msgSend(v34, "initWithFormat:", v30, *(_QWORD *)&v48, v49);
    goto LABEL_46;
  }
  v13 = &stru_1E714A250;
LABEL_46:

  return v13;
}

- (SABinaryLoadInfoToDisplay)displayedBinaryLoadInfoForBinary:(void *)a1 segment:(void *)a2 desiredLoadAddress:(uint64_t)a3 offsetIntoLoadInfo:(unint64_t)a4 isInKernelAddressSpace:(BOOL)a5 exclave:(void *)a6 binariesToDisplay:(void *)a7 extraBinariesToDisplay:(void *)a8
{
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  void *v26;
  id v27;
  id v28;
  SABinaryLoadInfoToDisplay *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  SABinaryLoadInfoToDisplay *v35;
  id v36;
  id v37;
  char v38;
  void *v39;
  void *v40;
  id v41;
  SABinaryLoadInfoToDisplay *v42;
  void *v43;
  char v44;
  void *v45;
  int v47;
  NSObject *v48;
  id v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  id v53;
  char v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id obj;
  void *v65;
  char v66;
  id v68;
  id v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  _BYTE v78[22];
  _BYTE v79[128];
  _BYTE v80[128];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v12 = a1;
  v13 = a2;
  obj = a6;
  v14 = a6;
  v15 = a7;
  v16 = a8;
  v17 = v15;
  v18 = v16;
  if (v17 == v16)
  {

    v18 = 0;
  }
  objc_msgSend(v17, "objectForKeyedSubscript:", v12);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v68 = v18;
  v69 = v12;
  objc_msgSend(v18, "objectForKeyedSubscript:", v12);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v74 = 0u;
  v75 = 0u;
  v76 = 0u;
  v77 = 0u;
  v21 = v19;
  v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v74, v80, 16);
  if (v22)
  {
    v23 = v22;
    v24 = *(_QWORD *)v75;
    while (2)
    {
      for (i = 0; i != v23; ++i)
      {
        if (*(_QWORD *)v75 != v24)
          objc_enumerationMutation(v21);
        v26 = *(void **)(*((_QWORD *)&v74 + 1) + 8 * i);
        objc_msgSend(v26, "segment");
        v27 = (id)objc_claimAutoreleasedReturnValue();
        if (v27 == v13)
        {
          objc_msgSend(v26, "exclave");
          v28 = (id)objc_claimAutoreleasedReturnValue();

          if (v28 == v14)
          {
            v29 = v26;
            v66 = 1;
            goto LABEL_15;
          }
        }
        else
        {

        }
      }
      v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v74, v80, 16);
      if (v23)
        continue;
      break;
    }
  }
  v29 = 0;
  v66 = 0;
LABEL_15:

  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v30 = v20;
  v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v70, v79, 16);
  if (!v31)
  {
    v38 = 0;
    v39 = v69;
LABEL_32:
    v40 = v68;

    if (!v29)
    {
      v29 = [SABinaryLoadInfoToDisplay alloc];
      v41 = v14;
      if (v29)
      {
        *(_QWORD *)v78 = v29;
        *(_QWORD *)&v78[8] = SABinaryLoadInfoToDisplay;
        v42 = (SABinaryLoadInfoToDisplay *)objc_msgSendSuper2((objc_super *)v78, sel_initWithBinary_segment_loadAddress_, v69, v13, a3);
        v29 = v42;
        if (v42)
        {
          v42->_isInKernelAddressSpace = a5;
          objc_storeStrong((id *)&v42->_exclave, obj);
        }
      }

      v40 = v68;
      v39 = v69;
    }
    goto LABEL_37;
  }
  v32 = v31;
  v65 = v17;
  v33 = *(_QWORD *)v71;
LABEL_17:
  v34 = 0;
  while (1)
  {
    if (*(_QWORD *)v71 != v33)
      objc_enumerationMutation(v30);
    v35 = *(SABinaryLoadInfoToDisplay **)(*((_QWORD *)&v70 + 1) + 8 * v34);
    -[SABinaryLoadInfo segment](v35, "segment");
    v36 = (id)objc_claimAutoreleasedReturnValue();
    if (v36 == v13)
      break;

LABEL_23:
    if (v32 == ++v34)
    {
      v32 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v70, v79, 16);
      if (v32)
        goto LABEL_17;
      v38 = 0;
      goto LABEL_31;
    }
  }
  -[SABinaryLoadInfoToDisplay exclave](v35, "exclave");
  v37 = (id)objc_claimAutoreleasedReturnValue();

  if (v37 != v14)
    goto LABEL_23;
  if (!v29)
  {
    v29 = v35;
    v38 = 1;
LABEL_31:
    v39 = v69;
    v17 = v65;
    goto LABEL_32;
  }
  v40 = v68;
  v39 = v69;
  v17 = v65;
  if (v29 != v35)
  {
    v47 = *__error();
    _sa_logt();
    v48 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      -[SABinaryLoadInfoToDisplay debugDescription](v29, "debugDescription");
      v49 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v50 = objc_msgSend(v49, "UTF8String");
      -[SABinaryLoadInfoToDisplay debugDescription](v35, "debugDescription");
      v51 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v52 = objc_msgSend(v51, "UTF8String");
      *(_DWORD *)v78 = 136315394;
      *(_QWORD *)&v78[4] = v50;
      *(_WORD *)&v78[12] = 2080;
      *(_QWORD *)&v78[14] = v52;
      _os_log_error_impl(&dword_1B9BE0000, v48, OS_LOG_TYPE_ERROR, "mismatch between binaries and extra binaries: %s vs %s", v78, 0x16u);

    }
    *__error() = v47;
    -[SABinaryLoadInfoToDisplay debugDescription](v29, "debugDescription");
    v53 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v54 = objc_msgSend(v53, "UTF8String");
    -[SABinaryLoadInfoToDisplay debugDescription](v35, "debugDescription");
    v55 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend(v55, "UTF8String");
    _SASetCrashLogMessage(7384, "mismatch between binaries and extra binaries: %s vs %s", v56, v57, v58, v59, v60, v61, v54);

    _os_crash();
    __break(1u);
  }

  v38 = 1;
LABEL_37:
  if (-[SABinaryLoadInfoToDisplay highestOffset](v29, "highestOffset") < a4)
    -[SABinaryLoadInfoToDisplay setHighestOffset:](v29, "setHighestOffset:");
  if ((v66 & 1) == 0)
  {
    if (v21)
    {
      objc_msgSend(v21, "addObject:", v29);
    }
    else
    {
      v43 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithObjects:", v29, 0);
      objc_msgSend(v17, "setObject:forKeyedSubscript:", v43, v39);

    }
  }
  if (v40)
    v44 = v38;
  else
    v44 = 1;
  if ((v44 & 1) == 0)
  {
    if (v30)
    {
      objc_msgSend(v30, "addObject:", v29);
    }
    else
    {
      v45 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithObjects:", v29, 0);
      objc_msgSend(v40, "setObject:forKeyedSubscript:", v45, v39);

    }
  }

  return v29;
}

void __50__SASamplePrinter_sortedLoadInfosForBinaryImages___block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (objc_msgSend(v4, "count") == 1)
  {
    objc_msgSend(v4, "firstObject");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "displayAllBinaries") & 1) == 0)
    {
      objc_msgSend(v5, "segment");
      v6 = objc_claimAutoreleasedReturnValue();
      if (v6)
      {
        v7 = (void *)v6;
        objc_msgSend(v5, "segment");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v8, "hasOffsetIntoBinary") & 1) != 0)
        {
          objc_msgSend(v5, "segment");
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          v10 = objc_msgSend(v9, "offsetIntoBinary");

          if (!v10)
          {
            v11 = 1;
LABEL_17:
            objc_msgSend(v5, "setIsZerothAndOnlySegment:", v11);
            objc_msgSend(*(id *)(a1 + 40), "addObject:", v5);

            goto LABEL_18;
          }
        }
        else
        {

        }
      }
    }
    v11 = 0;
    goto LABEL_17;
  }
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v12 = v4;
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v18;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v18 != v15)
          objc_enumerationMutation(v12);
        objc_msgSend(*(id *)(*((_QWORD *)&v17 + 1) + 8 * v16++), "setIsZerothAndOnlySegment:", 0, (_QWORD)v17);
      }
      while (v14 != v16);
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v14);
  }

  objc_msgSend(*(id *)(a1 + 40), "addObjectsFromArray:", v12);
LABEL_18:

}

uint64_t __50__SASamplePrinter_sortedLoadInfosForBinaryImages___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  _BOOL4 v19;
  unsigned __int8 uu2[8];
  uint64_t v21;
  unsigned __int8 uu1[8];
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v5 = a3;
  if (objc_msgSend(v4, "isInKernelAddressSpace")
    && !objc_msgSend(v5, "isInKernelAddressSpace"))
  {
    goto LABEL_10;
  }
  if ((objc_msgSend(v4, "isInKernelAddressSpace") & 1) == 0 && (objc_msgSend(v5, "isInKernelAddressSpace") & 1) != 0)
    goto LABEL_12;
  v6 = objc_msgSend(v4, "loadAddress");
  v7 = objc_msgSend(v5, "loadAddress");
  if (v6)
  {
    if (v7 - 1 >= v6)
    {
LABEL_12:
      v8 = -1;
      goto LABEL_13;
    }
    if (v6 > v7)
      goto LABEL_10;
  }
  else if (v7)
  {
    goto LABEL_10;
  }
  *(_QWORD *)uu1 = 0;
  v23 = 0;
  *(_QWORD *)uu2 = 0;
  v21 = 0;
  objc_msgSend(v4, "binary");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "uuid");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "getUUIDBytes:", uu1);

  objc_msgSend(v5, "binary");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "uuid");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "getUUIDBytes:", uu2);

  v13 = uuid_compare(uu1, uu2);
  if (v13 > 0)
    goto LABEL_12;
  if ((v13 & 0x80000000) == 0)
  {
    objc_msgSend(v4, "segment");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "name");
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v5, "segment");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "name");
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    if (!objc_msgSend(v16, "length"))
    {

      v16 = 0;
    }
    if (objc_msgSend(v18, "length"))
    {
      v19 = v16 != 0;
      if (v16 && v18)
      {
        v8 = objc_msgSend(v16, "compare:options:", v18, 577);
LABEL_25:

        goto LABEL_13;
      }
    }
    else
    {

      v18 = 0;
      v19 = v16 != 0;
    }
    if (v19)
      v8 = -1;
    else
      v8 = 1;
    goto LABEL_25;
  }
LABEL_10:
  v8 = 1;
LABEL_13:

  return v8;
}

void __52__SASamplePrinter_printSystemStatsStyleBinaryImages__block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(v3, "binary");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v5)
  {
    v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 1);
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v5, v4);
  }
  objc_msgSend(v3, "segment");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v7 = v5;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v14;
    while (2)
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v14 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * v11), "segment", (_QWORD)v13);
        v12 = (void *)objc_claimAutoreleasedReturnValue();

        if (v12 == v6)
        {

          goto LABEL_13;
        }
        ++v11;
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      if (v9)
        continue;
      break;
    }
  }

  objc_msgSend(v7, "addObject:", v3);
LABEL_13:

}

void __52__SASamplePrinter_printSystemStatsStyleBinaryImages__block_invoke_2(uint64_t a1, void *a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  _QWORD v9[4];
  id v10;

  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __52__SASamplePrinter_printSystemStatsStyleBinaryImages__block_invoke_3;
  v9[3] = &unk_1E7149508;
  v10 = *(id *)(a1 + 40);
  v4 = a2;
  -[SATask enumerateFrames:]((uint64_t)v4, v9);
  objc_msgSend(v4, "mainBinaryLoadInfo");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 32);
    objc_msgSend(v5, "binary");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[SASamplePrinter indexForBinary:](v6, (uint64_t)v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v8)
      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

void __52__SASamplePrinter_printSystemStatsStyleBinaryImages__block_invoke_3(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  id v4;

  if (a2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a2 + 24));
    if (WeakRetained)
    {
      v4 = WeakRetained;
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
      WeakRetained = v4;
    }

  }
  else
  {

  }
}

uint64_t __52__SASamplePrinter_printSystemStatsStyleBinaryImages__block_invoke_4(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  int v7;
  int v8;
  unsigned __int8 uu2[8];
  uint64_t v11;
  unsigned __int8 uu1[8];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)uu1 = 0;
  v13 = 0;
  *(_QWORD *)uu2 = 0;
  v11 = 0;
  v4 = a3;
  objc_msgSend(a2, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "getUUIDBytes:", uu1);

  objc_msgSend(v4, "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "getUUIDBytes:", uu2);
  v7 = uuid_compare(uu1, uu2);
  v8 = v7 >> 31;
  if (v7 >= 1)
    return 1;
  return v8;
}

uint64_t __52__SASamplePrinter_printSystemStatsStyleBinaryImages__block_invoke_5(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;

  v4 = a3;
  objc_msgSend(a2, "segment");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "segment");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5 == v6)
  {
    v9 = 0;
  }
  else if (v5)
  {
    if (v6)
    {
      objc_msgSend(v5, "name");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "name");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v7, "compare:", v8);

    }
    else
    {
      v9 = 1;
    }
  }
  else
  {
    v9 = -1;
  }

  return v9;
}

void __110__SASamplePrinter_printSingleStackForTasks_limitToDispatchQueueIds_limitToThreadIds_intersection_sampleCount___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  int v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  void *v20;
  _QWORD v21[4];
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  id v26;
  id v27;

  v5 = a2;
  v6 = a3;
  v7 = *(void **)(a1 + 40);
  if (*(_QWORD *)(a1 + 32))
  {
    if (!v7)
      goto LABEL_14;
    v8 = *(unsigned __int8 *)(a1 + 80);
    v9 = objc_msgSend(v7, "containsObject:", v5);
    if (v8)
    {
      if ((v9 & 1) == 0)
        goto LABEL_15;
      goto LABEL_14;
    }
    if (!v9
      || !-[SASamplePrinter shouldPrintTask:thread:dispatchQueue:](*(_QWORD *)(a1 + 48), *(void **)(a1 + 56), v6, 0))
    {
LABEL_14:
      v11 = *(_QWORD **)(a1 + 48);
      v12 = v11[4];
      v13 = v11[5];
      v14 = v11[6];
      v15 = v11[7];
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = __110__SASamplePrinter_printSingleStackForTasks_limitToDispatchQueueIds_limitToThreadIds_intersection_sampleCount___block_invoke_2;
      v21[3] = &unk_1E71495B8;
      v16 = *(id *)(a1 + 32);
      v17 = *(_QWORD *)(a1 + 48);
      v22 = v16;
      v23 = v17;
      v18 = v6;
      v19 = *(_QWORD *)(a1 + 56);
      v20 = *(void **)(a1 + 64);
      v24 = v18;
      v25 = v19;
      v26 = v20;
      v27 = *(id *)(a1 + 72);
      objc_msgSend(v18, "enumerateThreadStatesBetweenStartTime:startSampleIndex:endTime:endSampleIndex:reverseOrder:block:", v12, v14, v13, v15, 0, v21);

      goto LABEL_15;
    }
    goto LABEL_12;
  }
  if ((!v7 || objc_msgSend(v7, "containsObject:", v5))
    && -[SASamplePrinter shouldPrintTask:thread:dispatchQueue:](*(_QWORD *)(a1 + 48), *(void **)(a1 + 56), v6, 0))
  {
LABEL_12:
    v10 = *(_QWORD *)(a1 + 48);
    if (v10)
      -[SASamplePrinter addStackForDispatchQueue:orSwiftTaskStates:orThread:andThreadStateIndexes:task:toRootObjects:nameChanges:dispatchQueueChanges:swiftTaskChanges:threadChanges:priorityChanges:microstackshotSummary:onlyHeaviestStack:includeState:](v10, 0, 0, v6, 0, *(void **)(a1 + 56), *(void **)(a1 + 64), 1, 1, 1, 1, 1, *(void **)(a1 + 72), 0, 1u);
  }
LABEL_15:

}

void __110__SASamplePrinter_printSingleStackForTasks_limitToDispatchQueueIds_limitToThreadIds_intersection_sampleCount___block_invoke_2(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v5 = *(void **)(a1 + 32);
  v6 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(a2, "dispatchQueue");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "numberWithUnsignedLongLong:", objc_msgSend(v7, "identifier"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v5) = objc_msgSend(v5, "containsObject:", v8);

  if ((_DWORD)v5)
  {
    v10 = *(_QWORD *)(a1 + 40);
    v9 = *(void **)(a1 + 48);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v13[0] = v11;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v13, 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10)
      -[SASamplePrinter addStackForDispatchQueue:orSwiftTaskStates:orThread:andThreadStateIndexes:task:toRootObjects:nameChanges:dispatchQueueChanges:swiftTaskChanges:threadChanges:priorityChanges:microstackshotSummary:onlyHeaviestStack:includeState:](v10, 0, 0, v9, v12, *(void **)(a1 + 56), *(void **)(a1 + 64), 1, 1, 1, 1, 1, *(void **)(a1 + 72), 0, 1u);

  }
}

void __110__SASamplePrinter_printSingleStackForTasks_limitToDispatchQueueIds_limitToThreadIds_intersection_sampleCount___block_invoke_1276(uint64_t a1, void *a2, void *a3)
{
  id v5;
  int v6;
  unint64_t v7;
  uint64_t v8;

  v5 = a3;
  v6 = objc_msgSend(a2, "unsignedIntValue");
  v7 = objc_msgSend(v5, "unsignedLongValue");

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_QWORD *)(v8 + 24) < v7)
  {
    *(_QWORD *)(v8 + 24) = v7;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v6;
  }
}

void __110__SASamplePrinter_printSingleStackForTasks_limitToDispatchQueueIds_limitToThreadIds_intersection_sampleCount___block_invoke_2_1278(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v5 = a3;
  v6 = objc_msgSend(a2, "unsignedLongLongValue");
  v7 = objc_msgSend(v5, "unsignedLongValue");

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_QWORD *)(v8 + 24) < v7)
  {
    *(_QWORD *)(v8 + 24) = v7;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v6;
  }
}

- (id)stacksForTask:(uint64_t)a3 taskSampleCount:
{
  NSObject *v4;
  NSObject *v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  id v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  NSObject *v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  NSObject *v30;
  NSObject *v31;
  id v32;
  uint64_t v33;
  void *v34;
  id *v35;
  id *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  NSObject *v40;
  id v41;
  void *v42;
  NSObject *v43;
  id v44;
  int v46;
  NSObject *v47;
  _QWORD *v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  id v52;
  char v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  _QWORD v63[4];
  id v64;
  _QWORD v65[5];
  NSObject *v66;
  id v67;
  uint64_t v68;
  _QWORD v69[5];
  NSObject *v70;
  _QWORD v71[2];
  _QWORD v72[5];
  NSObject *v73;
  _QWORD v74[2];
  _QWORD v75[5];
  id v76;
  _BYTE buf[24];
  void *v78;
  id *v79;
  id v80;
  NSObject *v81;
  uint64_t v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v61 = v4;
  if (a1)
  {
    v5 = v4;
    v6 = (void *)MEMORY[0x1BCCCC288]();
    v7 = a1[2];
    if (v7)
    {
      v8 = v7[19];
      if (v8)
        goto LABEL_8;
      if (*((_BYTE *)v7 + 11))
      {
        do
        {
          v9 = *__error();
          _sa_logt();
          v5 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
          {
            objc_msgSend(a1[2], "debugDescription");
            v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v11 = objc_msgSend(v10, "UTF8String");
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v11;
            _os_log_error_impl(&dword_1B9BE0000, v5, OS_LOG_TYPE_ERROR, "stacksForTask without kSAAggregateCallTreesByProcess: %s", buf, 0xCu);

          }
          *__error() = v9;
          objc_msgSend(a1[2], "debugDescription");
          a1 = (id *)objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v12 = objc_msgSend(a1, "UTF8String");
          _SASetCrashLogMessage(8177, "stacksForTask without kSAAggregateCallTreesByProcess: %s", v13, v14, v15, v16, v17, v18, v12);

          _os_crash();
          __break(1u);
LABEL_8:
          ;
        }
        while (v8 == 3);
      }
    }
    v19 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v20 = a1[2];
    v21 = MEMORY[0x1E0C809B0];
    if (!v20 || v20[20] != 1 && (v22 = v20[19], v22 != 3) && (v22 || !*((_BYTE *)v20 + 11)))
    {
      v23 = v6;
      v24 = v5;
      v25 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      -[NSObject swiftTasks](v24, "swiftTasks");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v75[0] = v21;
      v75[1] = 3221225472;
      v75[2] = __61__SASamplePrinter_stacksForSwiftAsyncInTask_taskSampleCount___block_invoke;
      v75[3] = &unk_1E71499B8;
      v75[4] = a1;
      v76 = v25;
      v27 = v25;
      objc_msgSend(v26, "enumerateKeysAndObjectsUsingBlock:", v75);

      v28 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v27, "count"));
      *(_QWORD *)buf = v21;
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = __61__SASamplePrinter_stacksForSwiftAsyncInTask_taskSampleCount___block_invoke_3;
      v78 = &unk_1E7149A20;
      v79 = a1;
      v29 = v28;
      v80 = v29;
      v30 = v24;
      v81 = v30;
      v82 = a3;
      objc_msgSend(v27, "enumerateKeysAndObjectsUsingBlock:", buf);
      v31 = v81;
      v32 = v29;

      v6 = v23;
      objc_msgSend(v19, "addObjectsFromArray:", v32);

      v20 = a1[2];
      if (!v20)
        goto LABEL_23;
    }
    v33 = v20[19];
    if (v33)
    {
      if (v33 != 1)
      {
        if (v33 == 2)
        {
          -[NSObject threads](v5, "threads");
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          v72[0] = v21;
          v72[1] = 3221225472;
          v72[2] = __49__SASamplePrinter_stacksForTask_taskSampleCount___block_invoke;
          v72[3] = &unk_1E7149630;
          v72[4] = a1;
          v35 = (id *)&v73;
          v73 = v5;
          v36 = (id *)v74;
          v74[0] = v19;
          v74[1] = a3;
          objc_msgSend(v34, "enumerateKeysAndObjectsUsingBlock:", v72);

LABEL_21:
          objc_msgSend(a1[2], "callTreeSortAttributes");
          v63[0] = v21;
          v63[1] = 3221225472;
          v63[2] = __49__SASamplePrinter_stacksForTask_taskSampleCount___block_invoke_1313;
          v63[3] = &unk_1E71496D0;
          v64 = (id)objc_claimAutoreleasedReturnValue();
          v44 = v64;
          objc_msgSend(v19, "sortUsingComparator:", v63);
          a1 = (id *)objc_msgSend(v19, "copy");

          objc_autoreleasePoolPop(v6);
          goto LABEL_22;
        }
LABEL_23:
        v46 = *__error();
        _sa_logt();
        v47 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
        {
          v48 = a1[2];
          if (v48)
          {
            v49 = v48[19];
            if (!v49)
            {
              if (*((_BYTE *)v48 + 11))
                v49 = 3;
              else
                v49 = 1;
            }
          }
          else
          {
            v49 = 0;
          }
          objc_msgSend(v48, "debugDescription");
          v50 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v51 = objc_msgSend(v50, "UTF8String");
          *(_DWORD *)buf = 134218242;
          *(_QWORD *)&buf[4] = v49;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v51;
          _os_log_error_impl(&dword_1B9BE0000, v47, OS_LOG_TYPE_ERROR, "stacksForTask with not kSAAggregateCallTreesByDispatchQueue nor Thread %llu: %s", buf, 0x16u);

        }
        *__error() = v46;
        v52 = a1[2];
        v53 = -[SASamplePrintOptions callTreeAggregationResolved]((uint64_t)v52);
        objc_msgSend(v52, "debugDescription");
        v54 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        objc_msgSend(v54, "UTF8String");
        _SASetCrashLogMessage(8204, "stacksForTask with not kSAAggregateCallTreesByDispatchQueue nor Thread %llu: %s", v55, v56, v57, v58, v59, v60, v53);

        _os_crash();
        __break(1u);
      }
    }
    else if (*((_BYTE *)v20 + 11))
    {
      goto LABEL_23;
    }
    -[NSObject dispatchQueues](v5, "dispatchQueues");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    v69[0] = v21;
    v69[1] = 3221225472;
    v69[2] = __49__SASamplePrinter_stacksForTask_taskSampleCount___block_invoke_2;
    v69[3] = &unk_1E7149658;
    v69[4] = a1;
    v35 = (id *)&v70;
    v38 = v21;
    v39 = v6;
    v40 = v5;
    v70 = v40;
    v36 = (id *)v71;
    v41 = v19;
    v71[0] = v41;
    v71[1] = a3;
    objc_msgSend(v37, "enumerateKeysAndObjectsUsingBlock:", v69);

    -[NSObject threads](v40, "threads");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v65[0] = v38;
    v65[1] = 3221225472;
    v65[2] = __49__SASamplePrinter_stacksForTask_taskSampleCount___block_invoke_3;
    v65[3] = &unk_1E7149630;
    v65[4] = a1;
    v43 = v40;
    v6 = v39;
    v21 = v38;
    v66 = v43;
    v67 = v41;
    v68 = a3;
    objc_msgSend(v42, "enumerateKeysAndObjectsUsingBlock:", v65);

    goto LABEL_21;
  }
LABEL_22:

  return a1;
}

- (void)printStack:(void *)a3 stream:
{
  unint64_t v5;
  id v6;
  SEL v7;
  id v8;
  SEL v9;
  id v10;
  int v11;
  SEL v12;
  id v13;
  SEL v14;
  id v15;
  double i;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char v26;
  uint64_t kk;
  void *v28;
  const __CFString *v29;
  int v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t mm;
  void *v48;
  int v49;
  void *v50;
  int v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t nn;
  void *v59;
  void *v60;
  void *v61;
  id v62;
  int v63;
  int v64;
  void *v65;
  uint64_t v66;
  void *v67;
  const __CFString *v68;
  const char *v69;
  int v70;
  uint64_t v71;
  double v72;
  double v73;
  double v74;
  double v75;
  int v76;
  void *v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t ii;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t jj;
  void *v92;
  void *v93;
  void *v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  void *v99;
  void *v100;
  uint64_t v101;
  void *v102;
  void *v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t m;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t n;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  const __CFString *v122;
  __CFString *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t j;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  int v142;
  uint64_t v143;
  void *v144;
  void *v145;
  int v146;
  uint64_t v147;
  void *v148;
  void *v149;
  void *v150;
  unint64_t v151;
  unint64_t v152;
  int v153;
  uint64_t v154;
  id v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t k;
  void *v160;
  void *v161;
  void *v162;
  uint64_t v163;
  int v164;
  int v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  const __CFString *v169;
  const __CFString *v170;
  int v171;
  uint64_t v172;
  const char *v173;
  uint64_t v174;
  void *v175;
  void *v176;
  id v177;
  const char *v178;
  id v179;
  unint64_t v180;
  SEL v181;
  id Property;
  NSObject *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  NSObject *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  void *context;
  uint64_t v214;
  unint64_t v215;
  id v216;
  uint64_t v217;
  id v218;
  id v219;
  id v220;
  id v221;
  unsigned int *self;
  id obj;
  id obja;
  void *v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint8_t buf[4];
  uint64_t v239;
  __int16 v240;
  unint64_t v241;
  __int16 v242;
  unint64_t v243;
  _BYTE v244[128];
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  uint8_t v249[4];
  uint64_t v250;
  uint64_t v251;

  v251 = *MEMORY[0x1E0C80C00];
  self = a2;
  v5 = a3;
  if (!self)
    goto LABEL_288;
  v6 = objc_getProperty(self, (SEL)self, 56, 1);
  v8 = objc_getProperty(self, v7, 40, 1);
  v10 = objc_getProperty(self, v9, 48, 1);
  v11 = *((_BYTE *)self + 11) & 1;
  v13 = objc_getProperty(self, v12, 64, 1);
  v209 = self[3] & 1;
  v203 = *((_QWORD *)self + 4);
  v204 = *((_QWORD *)self + 9);
  v200 = *((_QWORD *)self + 10);
  v15 = objc_getProperty(self, v14, 88, 1);
  v214 = self[4];
  v205 = self[5];
  v212 = self[6];
  v201 = self[7];
  v215 = *((_QWORD *)self + 12);
  v202 = *((_QWORD *)self + 13);
  LODWORD(v206) = *((_BYTE *)self + 14) & 1;
  HIDWORD(v206) = *((_BYTE *)self + 13) & 1;
  v207 = *((_QWORD *)self + 14);
  v208 = *((_QWORD *)self + 17);
  v217 = *((_QWORD *)self + 18);
  for (i = *((double *)self + 19); ; i = 0.0)
  {
    v17 = (id)v5;
    v18 = v6;
    v19 = v8;
    v20 = v10;
    v221 = v13;
    v216 = v15;
    context = (void *)MEMORY[0x1BCCCC288]();
    v225 = v17;
    v218 = v18;
    v219 = v19;
    v220 = v20;
    if (objc_msgSend(*(id *)(a1 + 16), "printJson"))
    {
      objc_msgSend(v17, "appendString:", CFSTR("\n\n"));
      if (!objc_msgSend(v18, "count") && (objc_msgSend(v19, "count") || objc_msgSend(v20, "count")))
      {
        if (!objc_msgSend(v19, "count"))
        {
          if (!objc_msgSend(v20, "count"))
          {
LABEL_170:
            if (v215)
            {
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:");
              v121 = (void *)objc_claimAutoreleasedReturnValue();
              v122 = CFSTR("cpuTimeNs");
              if ((_DWORD)v206)
                v122 = CFSTR("cpuForcedIdleTimeNs");
              if (HIDWORD(v206))
                v123 = CFSTR("cpuIdleTimeNs");
              else
                v123 = (__CFString *)v122;
              SAJSONWriteDictionaryEntry(v17, v123, v121);

              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v207);
              v124 = (void *)objc_claimAutoreleasedReturnValue();
              SAJSONWriteDictionaryEntry(v17, CFSTR("cycles"), v124);

              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v202);
              v125 = (void *)objc_claimAutoreleasedReturnValue();
              SAJSONWriteDictionaryEntry(v17, CFSTR("intructions"), v125);

            }
            if ((v214 & 0x80000000) == 0)
            {
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:");
              v126 = (void *)objc_claimAutoreleasedReturnValue();
              SAJSONWriteDictionaryEntry(v17, CFSTR("minPriority"), v126);

              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v205);
              v127 = (void *)objc_claimAutoreleasedReturnValue();
              SAJSONWriteDictionaryEntry(v17, CFSTR("maxPriority"), v127);

              if ((v212 & 0x80000000) == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v212);
                v128 = (void *)objc_claimAutoreleasedReturnValue();
                SAJSONWriteDictionaryEntry(v17, CFSTR("minBasePriority"), v128);

                objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v201);
                v129 = (void *)objc_claimAutoreleasedReturnValue();
                SAJSONWriteDictionaryEntry(v17, CFSTR("maxBasePriority"), v129);

              }
            }
            if (v221)
            {
              SAJSONWriteDictionaryEntry(v17, CFSTR("threadName"), v221);
              if (v209)
                SAJSONWriteDictionaryEntry(v17, CFSTR("threadNameChanges"), MEMORY[0x1E0C9AAB0]);
            }
            if (objc_msgSend(v19, "count"))
            {
              v130 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v19, "count"));
              v226 = 0u;
              v227 = 0u;
              v228 = 0u;
              v229 = 0u;
              v131 = v19;
              v132 = objc_msgSend(v131, "countByEnumeratingWithState:objects:count:", &v226, v244, 16);
              if (v132)
              {
                v133 = v132;
                v134 = *(_QWORD *)v227;
                do
                {
                  for (j = 0; j != v133; ++j)
                  {
                    if (*(_QWORD *)v227 != v134)
                      objc_enumerationMutation(v131);
                    v136 = *(void **)(*((_QWORD *)&v226 + 1) + 8 * j);
                    objc_msgSend(MEMORY[0x1E0C99E38], "null");
                    v137 = (void *)objc_claimAutoreleasedReturnValue();

                    if (v136 != v137)
                    {
                      objc_msgSend(v136, "dispatchQueueLabel");
                      v138 = (void *)objc_claimAutoreleasedReturnValue();
                      if (v138)
                        objc_msgSend(v130, "addObject:", v138);

                    }
                  }
                  v133 = objc_msgSend(v131, "countByEnumeratingWithState:objects:count:", &v226, v244, 16);
                }
                while (v133);
              }

              v17 = v225;
              v18 = v218;
              v20 = v220;
              if (objc_msgSend(v130, "count"))
              {
                if (objc_msgSend(v130, "count") == 1)
                {
                  objc_msgSend(v130, "firstObject");
                  v139 = (void *)objc_claimAutoreleasedReturnValue();
                  SAJSONWriteDictionaryEntry(v225, CFSTR("dispatchQueueLabel"), v139);

                }
                else
                {
                  SAJSONWriteDictionaryEntry(v225, CFSTR("dispatchQueueLabel"), v130);
                }
              }

              v19 = v219;
            }
            if (-[SASamplePrinter hasTimeIndexes](a1))
            {
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v203);
              v140 = (void *)objc_claimAutoreleasedReturnValue();
              SAJSONWriteDictionaryEntry(v17, CFSTR("numSamples"), v140);

              v141 = (void *)MEMORY[0x1E0CB37E8];
              if (-[SASamplePrinter hasTimeIndexes](a1))
              {
                v142 = objc_msgSend(*(id *)(a1 + 16), "forceOneBasedTimeIndexes");
                v143 = v204 + 1;
                if (v142)
                  v143 -= *(_QWORD *)(a1 + 48);
              }
              else
              {
                v143 = 0x7FFFFFFFFFFFFFFFLL;
              }
              objc_msgSend(v141, "numberWithUnsignedInteger:", v143);
              v144 = (void *)objc_claimAutoreleasedReturnValue();
              SAJSONWriteDictionaryEntry(v17, CFSTR("firstSampleIndex"), v144);

              v145 = (void *)MEMORY[0x1E0CB37E8];
              if (-[SASamplePrinter hasTimeIndexes](a1))
              {
                v146 = objc_msgSend(*(id *)(a1 + 16), "forceOneBasedTimeIndexes");
                v147 = v200 + 1;
                if (v146)
                  v147 -= *(_QWORD *)(a1 + 48);
              }
              else
              {
                v147 = 0x7FFFFFFFFFFFFFFFLL;
              }
              objc_msgSend(v145, "numberWithUnsignedInteger:", v147);
              v148 = (void *)objc_claimAutoreleasedReturnValue();
              SAJSONWriteDictionaryEntry(v17, CFSTR("lastSampleIndex"), v148);

            }
            if (v217)
            {
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:");
              v149 = (void *)objc_claimAutoreleasedReturnValue();
              SAJSONWriteDictionaryEntry(v17, CFSTR("numIOs"), v149);

              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v208);
              v150 = (void *)objc_claimAutoreleasedReturnValue();
              SAJSONWriteDictionaryEntry(v17, CFSTR("ioSize"), v150);

            }
            goto LABEL_279;
          }
          if (objc_msgSend(v20, "count") == 1)
          {
            objc_msgSend(v20, "firstObject");
            v99 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0C99E38], "null");
            v100 = (void *)objc_claimAutoreleasedReturnValue();

            if (v99 == v100)
              goto LABEL_155;
            v101 = objc_msgSend(v99, "identifier");
            if (!v101)
              goto LABEL_155;
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v101);
            v102 = (void *)objc_claimAutoreleasedReturnValue();
            SAJSONWriteDictionaryFirstEntry(v17, (uint64_t)CFSTR("swiftTaskID"), v102);
            goto LABEL_154;
          }
          v211 = a1;
          v86 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v20, "count"));
          v245 = 0u;
          v246 = 0u;
          v247 = 0u;
          v248 = 0u;
          v155 = v20;
          v156 = objc_msgSend(v155, "countByEnumeratingWithState:objects:count:", &v245, v249, 16);
          if (v156)
          {
            v157 = v156;
            v158 = *(_QWORD *)v246;
            do
            {
              for (k = 0; k != v157; ++k)
              {
                if (*(_QWORD *)v246 != v158)
                  objc_enumerationMutation(v155);
                v160 = *(void **)(*((_QWORD *)&v245 + 1) + 8 * k);
                objc_msgSend(MEMORY[0x1E0C99E38], "null");
                v161 = (void *)objc_claimAutoreleasedReturnValue();

                if (v160 == v161)
                {
                  objc_msgSend(v86, "addObject:", &unk_1E7167870);
                }
                else
                {
                  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v160, "identifier"));
                  v162 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v86, "addObject:", v162);

                }
              }
              v157 = objc_msgSend(v155, "countByEnumeratingWithState:objects:count:", &v245, v249, 16);
            }
            while (v157);
          }

          v17 = v225;
          SAJSONWriteDictionaryFirstEntry(v225, (uint64_t)CFSTR("swiftTaskID"), v86);
LABEL_169:

          a1 = v211;
          v18 = v218;
          v19 = v219;
          goto LABEL_170;
        }
        if (objc_msgSend(v19, "count") == 1)
        {
          objc_msgSend(v19, "firstObject");
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0C99E38], "null");
          v32 = (void *)objc_claimAutoreleasedReturnValue();

          if (v31 != v32)
          {
            v33 = objc_msgSend(v31, "identifier");
            if (v33)
            {
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v33);
              v34 = (void *)objc_claimAutoreleasedReturnValue();
              SAJSONWriteDictionaryFirstEntry(v17, (uint64_t)CFSTR("dispatchQueueID"), v34);

            }
          }

        }
        else
        {
          v103 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v19, "count"));
          v234 = 0u;
          v235 = 0u;
          v236 = 0u;
          v237 = 0u;
          v104 = v19;
          v105 = objc_msgSend(v104, "countByEnumeratingWithState:objects:count:", &v234, v249, 16);
          if (v105)
          {
            v106 = v105;
            v107 = *(_QWORD *)v235;
            do
            {
              for (m = 0; m != v106; ++m)
              {
                if (*(_QWORD *)v235 != v107)
                  objc_enumerationMutation(v104);
                v109 = *(void **)(*((_QWORD *)&v234 + 1) + 8 * m);
                objc_msgSend(MEMORY[0x1E0C99E38], "null");
                v110 = (void *)objc_claimAutoreleasedReturnValue();

                if (v109 == v110)
                {
                  objc_msgSend(v103, "addObject:", &unk_1E7167870);
                }
                else
                {
                  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v109, "identifier"));
                  v111 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v103, "addObject:", v111);

                }
              }
              v106 = objc_msgSend(v104, "countByEnumeratingWithState:objects:count:", &v234, v249, 16);
            }
            while (v106);
          }

          v17 = v225;
          SAJSONWriteDictionaryFirstEntry(v225, (uint64_t)CFSTR("dispatchQueueID"), v103);

          v18 = v218;
          v19 = v219;
        }
        if (!objc_msgSend(v20, "count"))
          goto LABEL_170;
        if (objc_msgSend(v20, "count") == 1)
          goto LABEL_151;
        v211 = a1;
        v86 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v20, "count"));
        v230 = 0u;
        v231 = 0u;
        v232 = 0u;
        v233 = 0u;
        v87 = v20;
        v114 = objc_msgSend(v87, "countByEnumeratingWithState:objects:count:", &v230, &v245, 16);
        if (v114)
        {
          v115 = v114;
          v116 = *(_QWORD *)v231;
          do
          {
            for (n = 0; n != v115; ++n)
            {
              if (*(_QWORD *)v231 != v116)
                objc_enumerationMutation(v87);
              v118 = *(void **)(*((_QWORD *)&v230 + 1) + 8 * n);
              objc_msgSend(MEMORY[0x1E0C99E38], "null");
              v119 = (void *)objc_claimAutoreleasedReturnValue();

              if (v118 == v119)
              {
                objc_msgSend(v86, "addObject:", &unk_1E7167870);
              }
              else
              {
                objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v118, "identifier"));
                v120 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v86, "addObject:", v120);

              }
            }
            v115 = objc_msgSend(v87, "countByEnumeratingWithState:objects:count:", &v230, &v245, 16);
          }
          while (v115);
        }
      }
      else
      {
        if (objc_msgSend(v18, "count") == 1)
        {
          objc_msgSend(v18, "firstObject");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryFirstEntry(v17, (uint64_t)CFSTR("threadID"), v21);

        }
        else
        {
          SAJSONWriteDictionaryFirstEntry(v17, (uint64_t)CFSTR("threadID"), v18);
        }
        if (objc_msgSend(v19, "count"))
        {
          if (objc_msgSend(v19, "count") == 1)
          {
            objc_msgSend(v19, "firstObject");
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0C99E38], "null");
            v36 = (void *)objc_claimAutoreleasedReturnValue();

            if (v35 != v36)
            {
              v37 = objc_msgSend(v35, "identifier");
              if (v37)
              {
                objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v37);
                v38 = (void *)objc_claimAutoreleasedReturnValue();
                SAJSONWriteDictionaryEntry(v17, CFSTR("dispatchQueueID"), v38);

              }
            }

          }
          else
          {
            v77 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v19, "count"));
            v234 = 0u;
            v235 = 0u;
            v236 = 0u;
            v237 = 0u;
            v78 = v19;
            v79 = objc_msgSend(v78, "countByEnumeratingWithState:objects:count:", &v234, v249, 16);
            if (v79)
            {
              v80 = v79;
              v81 = *(_QWORD *)v235;
              do
              {
                for (ii = 0; ii != v80; ++ii)
                {
                  if (*(_QWORD *)v235 != v81)
                    objc_enumerationMutation(v78);
                  v83 = *(void **)(*((_QWORD *)&v234 + 1) + 8 * ii);
                  objc_msgSend(MEMORY[0x1E0C99E38], "null");
                  v84 = (void *)objc_claimAutoreleasedReturnValue();

                  if (v83 == v84)
                  {
                    objc_msgSend(v77, "addObject:", &unk_1E7167870);
                  }
                  else
                  {
                    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v83, "identifier"));
                    v85 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v77, "addObject:", v85);

                  }
                }
                v80 = objc_msgSend(v78, "countByEnumeratingWithState:objects:count:", &v234, v249, 16);
              }
              while (v80);
            }

            v17 = v225;
            SAJSONWriteDictionaryEntry(v225, CFSTR("dispatchQueueID"), v77);

            v18 = v218;
            v19 = v219;
          }
        }
        if (!objc_msgSend(v20, "count"))
          goto LABEL_170;
        if (objc_msgSend(v20, "count") == 1)
        {
LABEL_151:
          objc_msgSend(v20, "firstObject");
          v99 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0C99E38], "null");
          v112 = (void *)objc_claimAutoreleasedReturnValue();

          if (v99 == v112)
            goto LABEL_155;
          v113 = objc_msgSend(v99, "identifier");
          if (!v113)
            goto LABEL_155;
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v113);
          v102 = (void *)objc_claimAutoreleasedReturnValue();
          SAJSONWriteDictionaryEntry(v17, CFSTR("swiftTaskID"), v102);
LABEL_154:

LABEL_155:
          goto LABEL_170;
        }
        v211 = a1;
        v86 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v20, "count"));
        v230 = 0u;
        v231 = 0u;
        v232 = 0u;
        v233 = 0u;
        v87 = v20;
        v88 = objc_msgSend(v87, "countByEnumeratingWithState:objects:count:", &v230, &v245, 16);
        if (v88)
        {
          v89 = v88;
          v90 = *(_QWORD *)v231;
          do
          {
            for (jj = 0; jj != v89; ++jj)
            {
              if (*(_QWORD *)v231 != v90)
                objc_enumerationMutation(v87);
              v92 = *(void **)(*((_QWORD *)&v230 + 1) + 8 * jj);
              objc_msgSend(MEMORY[0x1E0C99E38], "null");
              v93 = (void *)objc_claimAutoreleasedReturnValue();

              if (v92 == v93)
              {
                objc_msgSend(v86, "addObject:", &unk_1E7167870);
              }
              else
              {
                objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v92, "identifier"));
                v94 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v86, "addObject:", v94);

              }
            }
            v89 = objc_msgSend(v87, "countByEnumeratingWithState:objects:count:", &v230, &v245, 16);
          }
          while (v89);
        }
      }

      v17 = v225;
      SAJSONWriteDictionaryEntry(v225, CFSTR("swiftTaskID"), v86);
      goto LABEL_169;
    }
    objc_msgSend(v17, "printWithFormat:", CFSTR("%*s"), 2, ");
    v210 = a1;
    if (objc_msgSend(v18, "count"))
    {
      v236 = 0u;
      v237 = 0u;
      v234 = 0u;
      v235 = 0u;
      obj = v18;
      v22 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v234, v249, 16);
      if (v22)
      {
        v23 = v22;
        v24 = 0;
        v25 = *(_QWORD *)v235;
        v26 = 1;
        do
        {
          for (kk = 0; kk != v23; ++kk)
          {
            if (*(_QWORD *)v235 != v25)
              objc_enumerationMutation(obj);
            v28 = *(void **)(*((_QWORD *)&v234 + 1) + 8 * kk);
            if ((v26 & 1) != 0)
              v29 = CFSTR("Thread ");
            else
              v29 = CFSTR(",");
            v30 = objc_msgSend(v225, "appendString:", v29);
            v26 = 0;
            v24 += v30
                 + objc_msgSend(v225, "printWithFormat:", CFSTR("0x%llx"), objc_msgSend(v28, "unsignedLongLongValue"));
          }
          v23 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v234, v249, 16);
          v26 = 0;
        }
        while (v23);
      }
      else
      {
        v24 = 0;
      }

      v17 = v225;
      if (v11)
        v24 += objc_msgSend(v225, "appendString:", CFSTR(" (idle work queue)"));
      v18 = v218;
      v19 = v219;
    }
    else
    {
      v24 = 0;
    }
    if ((unint64_t)objc_msgSend(v20, "count") > 1
      || objc_msgSend(v20, "count") == 1
      && (objc_msgSend(v20, "firstObject"),
          v39 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend(MEMORY[0x1E0C99E38], "null"),
          v40 = (void *)objc_claimAutoreleasedReturnValue(),
          v40,
          v39,
          v39 != v40))
    {
      if (v24)
        objc_msgSend(v17, "printWithFormat:", CFSTR("%*s"), 4, ");
      v41 = a1;
      v232 = 0u;
      v233 = 0u;
      v230 = 0u;
      v231 = 0u;
      v42 = v20;
      v43 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v230, &v245, 16);
      if (v43)
      {
        v44 = v43;
        v24 = 0;
        v45 = *(_QWORD *)v231;
        v46 = 1;
        do
        {
          for (mm = 0; mm != v44; ++mm)
          {
            if (*(_QWORD *)v231 != v45)
              objc_enumerationMutation(v42);
            v48 = *(void **)(*((_QWORD *)&v230 + 1) + 8 * mm);
            if ((v46 & 1) != 0)
            {
              v49 = objc_msgSend(v225, "appendString:", CFSTR("Swift Task")) + v24;
              v24 = objc_msgSend(v225, "appendString:", CFSTR(" "));
            }
            else
            {
              v49 = objc_msgSend(v225, "appendString:", CFSTR(","));
            }
            objc_msgSend(MEMORY[0x1E0C99E38], "null");
            v50 = (void *)objc_claimAutoreleasedReturnValue();

            if (v48 == v50)
            {
              v51 = objc_msgSend(v225, "appendString:", CFSTR("none"));
            }
            else if (objc_msgSend(v48, "identifier") == -1)
            {
              v51 = objc_msgSend(v225, "printWithFormat:", CFSTR("%@"), CFSTR("UNKNOWN"));
            }
            else
            {
              v51 = objc_msgSend(v225, "printWithFormat:", CFSTR("%llu"), objc_msgSend(v48, "identifier"));
            }
            v46 = 0;
            v24 += v49 + v51;
          }
          v44 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v230, &v245, 16);
          v46 = 0;
        }
        while (v44);
      }
      else
      {
        v24 = 0;
      }

      a1 = v41;
      v17 = v225;
      v18 = v218;
      v19 = v219;
    }
    if ((unint64_t)objc_msgSend(v19, "count") > 1
      || objc_msgSend(v19, "count") == 1
      && (objc_msgSend(v19, "firstObject"),
          v52 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend(MEMORY[0x1E0C99E38], "null"),
          v53 = (void *)objc_claimAutoreleasedReturnValue(),
          v53,
          v52,
          v52 != v53))
    {
      if (v24)
        objc_msgSend(v17, "printWithFormat:", CFSTR("%*s"), 4, ");
      v228 = 0u;
      v229 = 0u;
      v226 = 0u;
      v227 = 0u;
      obja = v19;
      v54 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v226, v244, 16);
      if (v54)
      {
        v55 = v54;
        v24 = 0;
        v56 = 1;
        v57 = *(_QWORD *)v227;
        do
        {
          for (nn = 0; nn != v55; ++nn)
          {
            if (*(_QWORD *)v227 != v57)
              objc_enumerationMutation(obja);
            v59 = *(void **)(*((_QWORD *)&v226 + 1) + 8 * nn);
            objc_msgSend(MEMORY[0x1E0C99E38], "null");
            v60 = (void *)objc_claimAutoreleasedReturnValue();
            if (v59 == v60)
              v61 = 0;
            else
              v61 = v59;
            v62 = v61;

            if ((v56 & 1) != 0)
            {
              v63 = objc_msgSend(v225, "appendString:", CFSTR("DispatchQueue")) + v24;
              v24 = objc_msgSend(v225, "appendString:", CFSTR(" "));
            }
            else
            {
              v63 = objc_msgSend(v225, "appendString:", CFSTR(","));
            }
            v64 = v63 + v24;
            -[SASamplePrinter displayNameForDispatchQueue:](v62);
            v65 = (void *)objc_claimAutoreleasedReturnValue();
            v24 = v64 + objc_msgSend(v225, "printWithFormat:", CFSTR("%@"), v65);

            v56 = 0;
          }
          v55 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v226, v244, 16);
          v56 = 0;
        }
        while (v55);
      }
      else
      {
        v24 = 0;
      }

      a1 = v210;
      v17 = v225;
      v18 = v218;
      v19 = v219;
    }
    if (v221)
    {
      if (v24)
        objc_msgSend(v17, "printWithFormat:", CFSTR("%*s"), 4, ");
      SACopySanitizedString(v221, 1, 0);
      v66 = objc_claimAutoreleasedReturnValue();
      v67 = (void *)v66;
      if (v209)
        v68 = CFSTR("Thread name \"%@\" (changed)");
      else
        v68 = CFSTR("Thread name \"%@\");
      v24 = objc_msgSend(v17, "printWithFormat:", v68, v66);

    }
    if (!-[SASamplePrinter hasTimeIndexes](a1))
    {
      if (v216)
      {
        objc_msgSend(v216, "machAbsTimeSeconds");
        v73 = v72;
        objc_msgSend(*(id *)(a1 + 32), "machAbsTimeSeconds");
        v75 = v73 - v74;
        if (v75 > 0.0)
        {
          if (v75 >= 0.01)
            v76 = objc_msgSend(v17, "printWithFormat:", CFSTR("(not sampled for first %.2fs)"), *(_QWORD *)&v75);
          else
            v76 = objc_msgSend(v17, "appendString:", CFSTR("(not sampled for first <0.01s)"));
          v24 += v76;
        }
      }
      goto LABEL_239;
    }
    if (v24)
      objc_msgSend(v17, "printWithFormat:", CFSTR("%*s"), 4, ");
    if (v203 == 1)
      v69 = "";
    else
      v69 = "s";
    v24 = objc_msgSend(v17, "printWithFormat:", CFSTR("%lu sample%s"), v203, v69, v199);
    if (v204 == 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_239;
    if (-[SASamplePrinter hasTimeIndexes](a1))
    {
      v70 = objc_msgSend(*(id *)(a1 + 16), "forceOneBasedTimeIndexes");
      v71 = v204 + 1;
      if (v70)
        v71 -= *(_QWORD *)(a1 + 48);
    }
    else
    {
      v71 = 0x7FFFFFFFFFFFFFFFLL;
    }
    v95 = objc_msgSend(v17, "printWithFormat:", CFSTR(" (%lu"), v71) + v24;
    v96 = v200 - v204;
    if (v200 != v204)
    {
      if (-[SASamplePrinter hasTimeIndexes](a1))
      {
        v97 = objc_msgSend(*(id *)(a1 + 16), "forceOneBasedTimeIndexes");
        v98 = v200 + 1;
        if (v97)
          v98 -= *(_QWORD *)(a1 + 48);
      }
      else
      {
        v98 = 0x7FFFFFFFFFFFFFFFLL;
      }
      v95 += objc_msgSend(v17, "printWithFormat:", CFSTR("-%lu"), v98);
    }
    if ((objc_msgSend(*(id *)(a1 + 16), "printHeavyStacks") & 1) != 0)
      goto LABEL_218;
    if (v96 + 1 >= v203)
      break;
    v5 = *__error();
    _sa_logt();
    v183 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v183, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218496;
      v239 = v200;
      v240 = 2048;
      v241 = v204;
      v242 = 2048;
      v243 = v203;
      _os_log_error_impl(&dword_1B9BE0000, v183, OS_LOG_TYPE_ERROR, "lastSampleIndex %lu - firstSampleIndex %lu + 1 < count %lu", buf, 0x20u);
    }

    *__error() = v5;
    v199 = v203;
    _SASetCrashLogMessage(9432, "lastSampleIndex %lu - firstSampleIndex %lu + 1 < count %lu", v184, v185, v186, v187, v188, v189, v200);
    _os_crash();
    __break(1u);
LABEL_288:
    v217 = 0;
    v206 = 0;
    v207 = 0;
    v214 = 0;
    v215 = 0;
    v212 = 0;
    v200 = 0;
    v201 = 0;
    v203 = 0;
    v204 = 0;
    v13 = 0;
    v10 = 0;
    v6 = 0;
    v8 = 0;
    v11 = 0;
    v209 = 0;
    v15 = 0;
    v205 = 0;
    v202 = 0;
    v208 = 0;
  }
  if (v96 + 1 != v203)
    v95 += objc_msgSend(v17, "printWithFormat:", CFSTR(" with gaps of %d"), v96 + 1 - v203);
LABEL_218:
  if (v216)
  {
    v151 = objc_msgSend(*(id *)(a1 + 160), "indexOfFirstSampleOnOrAfterTimestamp:");
    if (v151)
    {
      v152 = v151;
      if (v151 != 0x7FFFFFFFFFFFFFFFLL && v151 <= v204)
      {
        if (-[SASamplePrinter hasTimeIndexes](a1))
        {
          v153 = objc_msgSend(*(id *)(a1 + 16), "forceOneBasedTimeIndexes");
          v154 = v152 + 1;
          if (v153)
            v154 -= *(_QWORD *)(a1 + 48);
        }
        else
        {
          v154 = 0x7FFFFFFFFFFFFFFFLL;
        }
        v95 += objc_msgSend(v17, "printWithFormat:", CFSTR(", not sampled before %lu"), v154);
      }
    }
  }
  v24 = objc_msgSend(v17, "appendString:", CFSTR(")")) + v95;
LABEL_239:
  v163 = v214;
  if ((v214 & 0x80000000) == 0)
  {
    if (v24)
    {
      objc_msgSend(v17, "printWithFormat:", CFSTR("%*s"), 4, ");
      v163 = v214;
    }
    v164 = v163;
    v24 = objc_msgSend(v17, "printWithFormat:", CFSTR("priority %d"), v163);
    if (v164 != (_DWORD)v205)
      v24 += objc_msgSend(v17, "printWithFormat:", CFSTR("-%d"), v205);
    if ((v212 & 0x80000000) == 0)
    {
      v165 = objc_msgSend(v17, "printWithFormat:", CFSTR(" (base %d"), v212) + v24;
      if ((_DWORD)v212 != (_DWORD)v201)
        v165 += objc_msgSend(v17, "printWithFormat:", CFSTR("-%d"), v201);
      v24 = objc_msgSend(v17, "appendString:", CFSTR(")")) + v165;
    }
  }
  if (i > 0.0
    && ((objc_msgSend(*(id *)(a1 + 16), "displayDetailedCpuTime") & 1) != 0
     || -[SASamplePrinter shouldPrintTimeOutsideSamplingRange:](a1, i)))
  {
    if (v24)
      objc_msgSend(v17, "printWithFormat:", CFSTR("%*s"), 4, ");
    v166 = objc_msgSend(v17, "appendString:", CFSTR("runnable before first sample for "));
    if (objc_msgSend(*(id *)(a1 + 16), "displayDetailedCpuTime"))
      v167 = 9;
    else
      v167 = 3;
    v24 = saos_printf_seconds(v17, (unint64_t)(i * 1000000000.0), v167) + v166;
  }
  v168 = v217;
  if (v215)
  {
    if (v24)
      objc_msgSend(v17, "printWithFormat:", CFSTR("%*s"), 4, ");
    v169 = CFSTR("cpu time ");
    if ((_DWORD)v206)
      v169 = CFSTR("forced idle time ");
    if (HIDWORD(v206))
      v170 = CFSTR("idle time ");
    else
      v170 = v169;
    v171 = objc_msgSend(v17, "appendString:", v170);
    if (objc_msgSend(*(id *)(a1 + 16), "displayDetailedCpuTime"))
      v172 = 9;
    else
      v172 = 3;
    v24 = saos_printf_seconds(v17, v215, v172) + v171;
    if (v207)
      v24 += saos_printf_cycles_instructions(v17, v207, v202, objc_msgSend(*(id *)(a1 + 16), "displayDetailedCpuTime"));
    v168 = v217;
  }
  if (v168)
  {
    if (v24)
    {
      objc_msgSend(v17, "printWithFormat:", CFSTR("%*s"), 4, ");
      v168 = v217;
    }
    if (v168 == 1)
      v173 = "";
    else
      v173 = "s";
    v174 = v168;
    SAFormattedBytesEx(v208, 1, 0, 1, 0);
    v175 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "printWithFormat:", CFSTR("%lu I/O%s (%@)"), v174, v173, v175);

    v19 = v219;
  }
  objc_msgSend(v17, "appendString:", CFSTR("\n"));
  v20 = v220;
LABEL_279:
  objc_autoreleasePoolPop(context);

  v176 = self;
  if (self)
  {
    if (!*((_QWORD *)self + 4) || (v177 = objc_getProperty(self, (SEL)self, 120, 1), v176 = self, v177))
    {
      if (objc_getProperty(v176, (SEL)v176, 120, 1))
      {
        v179 = objc_getProperty(self, v178, 120, 1);
        v180 = *((_QWORD *)self + 4);
        Property = objc_getProperty(self, v181, 128, 1);
        -[SASamplePrinter addStack:toStream:sampleCount:binariesToDisplay:primaryState:primaryMicrostackshotState:onlyHeaviestStack:](a1, v179, v17, v180, Property, 0, 0, 0);

      }
      goto LABEL_284;
    }
    v190 = *__error();
    _sa_logt();
    v191 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v191, OS_LOG_TYPE_ERROR))
    {
      v192 = *((_QWORD *)self + 4);
      *(_DWORD *)v249 = 134217984;
      v250 = v192;
      _os_log_error_impl(&dword_1B9BE0000, v191, OS_LOG_TYPE_ERROR, "%lu count, but no rootObjects", v249, 0xCu);
    }

    *__error() = v190;
    _SASetCrashLogMessage(8732, "%lu count, but no rootObjects", v193, v194, v195, v196, v197, v198, *((_QWORD *)self + 4));
    _os_crash();
    __break(1u);
  }
  else
  {
LABEL_284:

  }
}

void __49__SASamplePrinter_stacksForTask_taskSampleCount___block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  void *v5;
  id v6;

  v6 = a3;
  if (-[SASamplePrinter shouldPrintTask:thread:dispatchQueue:](*(_QWORD *)(a1 + 32), *(void **)(a1 + 40), v6, 0))
  {
    v4 = *(void **)(a1 + 48);
    -[SASamplePrinter stackForThread:threadStateIndexes:task:taskSampleCount:isTarget:](*(const char **)(a1 + 32), v6, 0, *(void **)(a1 + 40), *(_QWORD *)(a1 + 56), objc_msgSend(v6, "threadId") == objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "targetThreadId"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v5);

  }
}

- (SAStack)stackForThread:(void *)a3 threadStateIndexes:(void *)a4 task:(uint64_t)a5 taskSampleCount:(BOOL)a6 isTarget:
{
  id v11;
  id v12;
  id v13;
  SAStack *v14;
  char v15;
  id v16;
  void *v17;
  const char *v18;
  void *v19;
  const char *v20;
  void *v21;
  const char *v22;
  id v23;
  void *v24;
  const char *v25;
  void *v26;
  id v27;
  BOOL threadNameChanges;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  SEL v33;
  SAStack *v34;
  SAStack *v35;

  v11 = a2;
  v12 = a3;
  v13 = a4;
  if (a1)
  {
    v14 = objc_alloc_init(SAStack);
    v15 = objc_msgSend(v11, "isMainThread");
    if (v14)
    {
      v14->_isMainThread = v15;
      v14->_isTargetCallTree = a6;
    }
    v16 = objc_alloc(MEMORY[0x1E0C99DE8]);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v11, "threadId"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = (void *)objc_msgSend(v16, "initWithObjects:", v17, 0);
    if (v14)
      objc_setProperty_atomic(v14, v18, v19, 56);

    v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 2);
    if (v14)
      objc_setProperty_atomic(v14, v20, v21, 40);

    v23 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    if (v14)
      objc_setProperty_atomic(v14, v22, v23, 48);

    -[SASamplePrinter binaryImagesHitByTask:]((uint64_t)a1, v13);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = v24;
    if (v14)
    {
      objc_setProperty_atomic(v14, v25, v24, 128);

      -[SASamplePrinter addHeaderForDispatchQueue:orSwiftTaskStates:orThread:andThreadStateIndexes:toStack:task:taskSampleCount:](a1, 0, 0, v11, v12, v14, v13, a5);
      if (!v14->_omit && v14->_count)
      {
        v27 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        threadNameChanges = v14->_threadNameChanges;
        v29 = -[NSMutableArray count](v14->_dispatchQueues, "count");
        v30 = -[NSMutableArray count](v14->_swiftTasks, "count");
        v31 = -[NSMutableArray count](v14->_threadIds, "count");
        v32 = v14->_minPriority != v14->_maxPriority || v14->_minBasePriority != v14->_maxBasePriority;
        -[SASamplePrinter addStackForDispatchQueue:orSwiftTaskStates:orThread:andThreadStateIndexes:task:toRootObjects:nameChanges:dispatchQueueChanges:swiftTaskChanges:threadChanges:priorityChanges:microstackshotSummary:onlyHeaviestStack:includeState:]((uint64_t)a1, 0, 0, v11, v12, v13, v27, threadNameChanges, v29 > 1, v30 > 1, v31 > 1, v32, 0, 0, 1u);
        objc_setProperty_atomic(v14, v33, v27, 120);
        v34 = v14;

        goto LABEL_20;
      }
    }
    else
    {

      -[SASamplePrinter addHeaderForDispatchQueue:orSwiftTaskStates:orThread:andThreadStateIndexes:toStack:task:taskSampleCount:](a1, 0, 0, v11, v12, 0, v13, a5);
    }
    v35 = v14;
LABEL_20:

    goto LABEL_21;
  }
  v14 = 0;
LABEL_21:

  return v14;
}

void __49__SASamplePrinter_stacksForTask_taskSampleCount___block_invoke_2(uint64_t *a1, uint64_t a2, void *a3)
{
  void *v4;
  void *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  SAStack *v16;
  SAStack *v17;
  const char *v18;
  void *v19;
  const char *v20;
  void *v21;
  const char *v22;
  id v23;
  void *v24;
  const char *v25;
  void *v26;
  id v27;
  BOOL threadNameChanges;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  SEL v33;
  SAStack *v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  SAStack *v46;
  id v47;
  uint8_t buf[4];
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v47 = a3;
  if (-[SASamplePrinter aggregateByDispatchQueue:](a1[4], v47))
  {
    v4 = (void *)a1[5];
    objc_msgSend(*(id *)(a1[4] + 160), "targetProcess");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v4 == v5)
    {
      v7 = objc_msgSend(v47, "identifier");
      v6 = v7 == objc_msgSend(*(id *)(a1[4] + 160), "targetDispatchQueueId");
    }
    else
    {
      v6 = 0;
    }

    v8 = a1[4];
    v9 = (void *)a1[5];
    v10 = (void *)a1[6];
    v11 = a1[7];
    v12 = v47;
    v13 = v9;
    if (v8)
    {
      v14 = *(_QWORD *)(v8 + 16);
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 152);
        if (v15 == 1 || !v15 && !*(_BYTE *)(v14 + 11))
        {
          v16 = objc_alloc_init(SAStack);
          v17 = v16;
          if (v16)
            v16->_isTargetCallTree = v6;
          v19 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 1);
          if (v17)
            objc_setProperty_atomic(v17, v18, v19, 56);

          v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithObjects:", v12, 0);
          if (v17)
            objc_setProperty_atomic(v17, v20, v21, 40);

          v23 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
          if (v17)
            objc_setProperty_atomic(v17, v22, v23, 48);

          -[SASamplePrinter binaryImagesHitByTask:](v8, (void *)v13);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = v24;
          if (v17)
          {
            objc_setProperty_atomic(v17, v25, v24, 128);

            -[SASamplePrinter addHeaderForDispatchQueue:orSwiftTaskStates:orThread:andThreadStateIndexes:toStack:task:taskSampleCount:]((const char *)v8, v12, 0, 0, 0, v17, (void *)v13, v11);
            if (!v17->_omit && v17->_count)
            {
              v27 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
              threadNameChanges = v17->_threadNameChanges;
              v29 = -[NSMutableArray count](v17->_dispatchQueues, "count");
              v30 = -[NSMutableArray count](v17->_swiftTasks, "count");
              v31 = -[NSMutableArray count](v17->_threadIds, "count");
              v32 = v17->_minPriority != v17->_maxPriority || v17->_minBasePriority != v17->_maxBasePriority;
              -[SASamplePrinter addStackForDispatchQueue:orSwiftTaskStates:orThread:andThreadStateIndexes:task:toRootObjects:nameChanges:dispatchQueueChanges:swiftTaskChanges:threadChanges:priorityChanges:microstackshotSummary:onlyHeaviestStack:includeState:](v8, v12, 0, 0, 0, (void *)v13, v27, threadNameChanges, v29 > 1, v30 > 1, v31 > 1, v32, 0, 0, 1u);
              objc_setProperty_atomic(v17, v33, v27, 120);
              v34 = v17;

              goto LABEL_36;
            }
          }
          else
          {

            -[SASamplePrinter addHeaderForDispatchQueue:orSwiftTaskStates:orThread:andThreadStateIndexes:toStack:task:taskSampleCount:]((const char *)v8, v12, 0, 0, 0, 0, (void *)v13, v11);
          }
          v46 = v17;
LABEL_36:

          goto LABEL_37;
        }
      }
      v13 = *__error();
      _sa_logt();
      v35 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        v36 = *(_QWORD *)(v8 + 16);
        if (v36)
        {
          v37 = *(_QWORD *)(v36 + 152);
          if (!v37)
          {
            if (*(_BYTE *)(v36 + 11))
              v37 = 3;
            else
              v37 = 1;
          }
        }
        else
        {
          v37 = 0;
        }
        objc_msgSend((id)v36, "debugDescription");
        v12 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        *(_DWORD *)buf = 134218242;
        v49 = v37;
        v50 = 2080;
        v51 = objc_msgSend(v12, "UTF8String");
        _os_log_error_impl(&dword_1B9BE0000, v35, OS_LOG_TYPE_ERROR, "stackForDispatchQueue, but not kSAAggregateCallTreesByDispatchQueue %llu: %s", buf, 0x16u);

      }
      *__error() = v13;
      v38 = *(void **)(v8 + 16);
      v10 = (void *)-[SASamplePrintOptions callTreeAggregationResolved]((uint64_t)v38);
      objc_msgSend(v38, "debugDescription");
      v39 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      objc_msgSend(v39, "UTF8String");
      _SASetCrashLogMessage(11921, "stackForDispatchQueue, but not kSAAggregateCallTreesByDispatchQueue %llu: %s", v40, v41, v42, v43, v44, v45, (char)v10);

      _os_crash();
      __break(1u);
    }
    v17 = 0;
LABEL_37:

    objc_msgSend(v10, "addObject:", v17);
  }

}

- (uint64_t)aggregateByDispatchQueue:(uint64_t)a1
{
  id v3;
  void *v4;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if (objc_msgSend(v3, "hasConcurrentExecution"))
      a1 = objc_msgSend(*(id *)(a1 + 16), "printHeavyStacks");
    else
      a1 = 1;
  }

  return a1;
}

void __49__SASamplePrinter_stacksForTask_taskSampleCount___block_invoke_3(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  id v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  unint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  BOOL v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  id v51;
  void *v52;
  uint64_t v53;
  void *v54;
  id v55;
  _QWORD v56[5];
  id v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  char v64;
  _BYTE buf[24];
  void *v66;
  uint64_t v67;
  id v68;
  id v69;
  id v70;
  uint64_t *v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v55 = a3;
  if (-[SASamplePrinter shouldPrintTask:thread:dispatchQueue:](*(_QWORD *)(a1 + 32), *(void **)(a1 + 40), v55, 0))
  {
    v7 = *(_QWORD *)(a1 + 32);
    v6 = *(void **)(a1 + 40);
    v8 = *(_QWORD *)(a1 + 48);
    v9 = *(id *)(a1 + 56);
    v10 = v55;
    v11 = v6;
    v54 = (void *)v8;
    if (!v7)
    {
LABEL_42:

      objc_msgSend(v54, "addObjectsFromArray:", v7);
      goto LABEL_43;
    }
    v12 = *(_QWORD *)(v7 + 16);
    if (!v12 || (v13 = *(_QWORD *)(v12 + 152), v13 != 1) && (v13 || *(_BYTE *)(v12 + 11)))
    {
      v11 = *__error();
      _sa_logt();
      v38 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        v39 = *(_QWORD *)(v7 + 16);
        if (v39)
        {
          v8 = *(_QWORD *)(v39 + 152);
          if (!v8)
          {
            if (*(_BYTE *)(v39 + 11))
              v8 = 3;
            else
              v8 = 1;
          }
        }
        else
        {
          v8 = 0;
        }
        objc_msgSend((id)v39, "debugDescription");
        v40 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        *(_DWORD *)buf = 134218242;
        *(_QWORD *)&buf[4] = v8;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = objc_msgSend(v40, "UTF8String");
        _os_log_error_impl(&dword_1B9BE0000, v38, OS_LOG_TYPE_ERROR, "stacksForThread, but not kSAAggregateCallTreesByDispatchQueue %llu: %s", buf, 0x16u);

      }
      *__error() = v11;
      v41 = *(void **)(v7 + 16);
      v29 = (void *)-[SASamplePrintOptions callTreeAggregationResolved]((uint64_t)v41);
      objc_msgSend(v41, "debugDescription");
      v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      objc_msgSend(v10, "UTF8String");
      _SASetCrashLogMessage(8551, "stacksForThread, but not kSAAggregateCallTreesByDispatchQueue %llu: %s", v42, v43, v44, v45, v46, v47, (char)v29);

      _os_crash();
      __break(1u);
      goto LABEL_38;
    }
    v53 = (uint64_t)v9;
    v14 = objc_msgSend(*(id *)(v7 + 160), "targetDispatchQueueId");
    if (v14)
    {
      objc_msgSend(*(id *)(v7 + 160), "targetProcess");
      v3 = (id)objc_claimAutoreleasedReturnValue();
      if (v3 == (id)v11)
      {

        goto LABEL_17;
      }
      if ((objc_msgSend(v10, "isMainThread") & 1) != 0)
      {

LABEL_15:
        v17 = objc_alloc(MEMORY[0x1E0C99D20]);
        -[SASamplePrinter stackForThread:threadStateIndexes:task:taskSampleCount:isTarget:]((const char *)v7, v10, 0, (void *)v11, v53, objc_msgSend(v10, "threadId") == objc_msgSend(*(id *)(v7 + 160), "targetThreadId"));
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v7 = objc_msgSend(v17, "initWithObjects:", v18, 0);

        goto LABEL_42;
      }
    }
    else if ((objc_msgSend(v10, "isMainThread") & 1) != 0)
    {
      goto LABEL_15;
    }
    v15 = objc_msgSend(v10, "threadId");
    v16 = objc_msgSend(*(id *)(v7 + 160), "targetThreadId");
    if (v14)

    if (v15 == v16)
      goto LABEL_15;
LABEL_17:
    v19 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v61 = 0;
    v62 = &v61;
    v63 = 0x2020000000;
    v64 = 1;
    v20 = *(_QWORD *)(v7 + 32);
    v21 = *(_QWORD *)(v7 + 40);
    v22 = *(_QWORD *)(v7 + 48);
    v23 = *(_QWORD *)(v7 + 56);
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = __56__SASamplePrinter_stacksForThread_task_taskSampleCount___block_invoke;
    v66 = &unk_1E71496F8;
    v67 = v7;
    v71 = &v61;
    v24 = v10;
    v25 = v11;
    v26 = (id)v11;
    v68 = v26;
    v52 = v24;
    v27 = v24;
    v69 = v27;
    v9 = v19;
    v70 = v9;
    v8 = (uint64_t)v27;
    objc_msgSend(v27, "enumerateThreadStatesBetweenStartTime:startSampleIndex:endTime:endSampleIndex:reverseOrder:block:", v20, v22, v21, v23, 0, buf);
    if (objc_msgSend(v9, "count") != 1 || !*((_BYTE *)v62 + 24))
    {
      v33 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v11 = v25;
      v56[0] = MEMORY[0x1E0C809B0];
      v56[1] = 3221225472;
      v56[2] = __56__SASamplePrinter_stacksForThread_task_taskSampleCount___block_invoke_2;
      v56[3] = &unk_1E7149720;
      v56[4] = v7;
      v57 = v26;
      v58 = (id)v8;
      v34 = v33;
      v59 = v34;
      v60 = v53;
      objc_msgSend(v9, "enumerateKeysAndObjectsUsingBlock:", v56);
      v35 = v59;
      v36 = v34;

      v10 = v52;
      v7 = (uint64_t)v36;
LABEL_41:

      _Block_object_dispose(&v61, 8);
      goto LABEL_42;
    }
    v11 = v25;
    v10 = v52;
    v28 = objc_msgSend(*(id *)(v7 + 160), "targetThreadId");
    v29 = v26;
    v30 = *(void **)(v7 + 160);
    if (v28)
    {
      if (!objc_msgSend(v30, "targetDispatchQueueId"))
      {
        v37 = objc_msgSend((id)v8, "threadId");
        v32 = v37 == objc_msgSend(*(id *)(v7 + 160), "targetThreadId");
        goto LABEL_40;
      }
      v31 = objc_msgSend((id)v8, "threadId");
      if (v31 == objc_msgSend(*(id *)(v7 + 160), "targetThreadId"))
      {
        objc_msgSend(*(id *)(v7 + 160), "targetProcess");
        v4 = (id)objc_claimAutoreleasedReturnValue();
        if (v4 != v26)
        {
          v32 = 0;
LABEL_39:

          goto LABEL_40;
        }
        goto LABEL_38;
      }
    }
    else if (objc_msgSend(v30, "targetDispatchQueueId"))
    {
      objc_msgSend(*(id *)(v7 + 160), "targetProcess");
      v4 = (id)objc_claimAutoreleasedReturnValue();
      if (v4 != v26)
      {
        v32 = 0;
        goto LABEL_39;
      }
LABEL_38:
      objc_msgSend(v9, "allKeys");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v48, "firstObject");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      v50 = objc_msgSend(v49, "unsignedLongLongValue");
      v32 = v50 == objc_msgSend(*(id *)(v7 + 160), "targetDispatchQueueId");

      goto LABEL_39;
    }
    v32 = 0;
LABEL_40:
    v51 = objc_alloc(MEMORY[0x1E0C99D20]);
    -[SASamplePrinter stackForThread:threadStateIndexes:task:taskSampleCount:isTarget:]((const char *)v7, (void *)v8, 0, v29, v53, v32);
    v36 = (id)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v51, "initWithObjects:", v36, 0);
    goto LABEL_41;
  }
LABEL_43:

}

uint64_t __49__SASamplePrinter_stacksForTask_taskSampleCount___block_invoke_1313(uint64_t a1, void *a2, void *a3)
{
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t (**v23)(_QWORD, _QWORD);
  uint64_t (**v24)(_QWORD);
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (**v32)(void);
  uint64_t v34;
  void *v35;
  uint64_t (**v36)(void);
  uint64_t (**v37)(void);
  uint64_t (**v38)(void);
  uint64_t (**v39)(void);
  uint64_t (**v40)(void);
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _QWORD v45[4];
  _BYTE *v46;
  _BYTE *v47;
  _QWORD v48[4];
  id v49;
  id v50;
  _QWORD v51[4];
  id v52;
  id v53;
  _QWORD v54[4];
  id v55;
  id v56;
  _QWORD v57[4];
  id v58;
  id v59;
  _QWORD v60[4];
  id v61;
  id v62;
  _QWORD v63[4];
  id v64;
  id v65;
  _BYTE v66[128];
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = MEMORY[0x1BCCCC288]();
  v8 = (void *)v7;
  if (v5 && (v5[10] & 1) != 0)
  {
    if (!v6 || (v6[10] & 1) == 0)
    {
      v9 = -1;
      goto LABEL_44;
    }
  }
  else if (v6 && (v6[10] & 1) != 0)
  {
    v9 = 1;
    goto LABEL_44;
  }
  v35 = (void *)v7;
  v10 = MEMORY[0x1E0C809B0];
  v63[0] = MEMORY[0x1E0C809B0];
  v63[1] = 3221225472;
  v63[2] = __49__SASamplePrinter_stacksForTask_taskSampleCount___block_invoke_2_1314;
  v63[3] = &unk_1E71491A8;
  v11 = v5;
  v64 = v11;
  v12 = v6;
  v65 = v12;
  v40 = (uint64_t (**)(void))MEMORY[0x1BCCCC450](v63);
  v60[0] = v10;
  v60[1] = 3221225472;
  v60[2] = __49__SASamplePrinter_stacksForTask_taskSampleCount___block_invoke_3_1315;
  v60[3] = &unk_1E71491A8;
  v13 = v11;
  v61 = v13;
  v14 = v12;
  v62 = v14;
  v39 = (uint64_t (**)(void))MEMORY[0x1BCCCC450](v60);
  v57[0] = v10;
  v57[1] = 3221225472;
  v57[2] = __49__SASamplePrinter_stacksForTask_taskSampleCount___block_invoke_4;
  v57[3] = &unk_1E71491A8;
  v15 = v13;
  v58 = v15;
  v16 = v14;
  v59 = v16;
  v37 = (uint64_t (**)(void))MEMORY[0x1BCCCC450](v57);
  v54[0] = v10;
  v54[1] = 3221225472;
  v54[2] = __49__SASamplePrinter_stacksForTask_taskSampleCount___block_invoke_5;
  v54[3] = &unk_1E71491A8;
  v17 = v15;
  v55 = v17;
  v18 = v16;
  v56 = v18;
  v38 = (uint64_t (**)(void))MEMORY[0x1BCCCC450](v54);
  v51[0] = v10;
  v51[1] = 3221225472;
  v51[2] = __49__SASamplePrinter_stacksForTask_taskSampleCount___block_invoke_6;
  v51[3] = &unk_1E71491A8;
  v19 = v17;
  v52 = v19;
  v20 = v18;
  v53 = v20;
  v36 = (uint64_t (**)(void))MEMORY[0x1BCCCC450](v51);
  v48[0] = v10;
  v48[1] = 3221225472;
  v48[2] = __49__SASamplePrinter_stacksForTask_taskSampleCount___block_invoke_7;
  v48[3] = &unk_1E7149680;
  v21 = v19;
  v49 = v21;
  v22 = v20;
  v50 = v22;
  v23 = (uint64_t (**)(_QWORD, _QWORD))MEMORY[0x1BCCCC450](v48);
  v45[0] = v10;
  v45[1] = 3221225472;
  v45[2] = __49__SASamplePrinter_stacksForTask_taskSampleCount___block_invoke_8;
  v45[3] = &unk_1E71496A8;
  v46 = v21;
  v47 = v22;
  v24 = (uint64_t (**)(_QWORD))MEMORY[0x1BCCCC450](v45);
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v34 = a1;
  v25 = *(id *)(a1 + 32);
  v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v41, v66, 16);
  if (v26)
  {
    v27 = v26;
    v28 = *(_QWORD *)v42;
LABEL_11:
    v29 = 0;
    while (2)
    {
      if (*(_QWORD *)v42 != v28)
        objc_enumerationMutation(v25);
      v30 = objc_msgSend(*(id *)(*((_QWORD *)&v41 + 1) + 8 * v29), "unsignedLongLongValue");
      switch(v30 & 0x7FFFFFFFFFFFFFFFLL)
      {
        case 1:
          v32 = v40;
          goto LABEL_24;
        case 2:
          v32 = v39;
          goto LABEL_24;
        case 3:
          v32 = v37;
          goto LABEL_24;
        case 4:
          v32 = v36;
          goto LABEL_24;
        case 5:
          v31 = v23[2](v23, 1);
          goto LABEL_25;
        case 6:
          v31 = v23[2](v23, 0);
          goto LABEL_25;
        case 7:
        case 8:
        case 9:
        case 0xALL:
          v31 = v24[2](v24);
          goto LABEL_25;
        case 0xBLL:
          v32 = v38;
LABEL_24:
          v31 = v32[2]();
LABEL_25:
          if (!v31)
            goto LABEL_26;
          if (v30 >= 0)
            v9 = v31;
          else
            v9 = -v31;

          v8 = v35;
          goto LABEL_43;
        default:
LABEL_26:
          if (v27 != ++v29)
            continue;
          v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v41, v66, 16);
          if (!v27)
            goto LABEL_28;
          goto LABEL_11;
      }
    }
  }
LABEL_28:

  v8 = v35;
  if (((objc_msgSend(*(id *)(v34 + 32), "containsObject:", &unk_1E7167858) & 1) != 0 || (v9 = v40[2]()) == 0)
    && ((objc_msgSend(*(id *)(v34 + 32), "containsObject:", &unk_1E71678A0) & 1) != 0 || (v9 = v39[2]()) == 0)
    && ((objc_msgSend(*(id *)(v34 + 32), "containsObject:", &unk_1E71678D0) & 1) != 0 || (v9 = v38[2]()) == 0)
    && ((objc_msgSend(*(id *)(v34 + 32), "containsObject:", &unk_1E71678E8) & 1) != 0 || (v9 = v37[2]()) == 0)
    && ((objc_msgSend(*(id *)(v34 + 32), "containsObject:", &unk_1E7167828) & 1) != 0 || (v9 = v36[2]()) == 0))
  {
    v9 = 0;
  }
LABEL_43:

LABEL_44:
  objc_autoreleasePoolPop(v8);

  return v9;
}

uint64_t __49__SASamplePrinter_stacksForTask_taskSampleCount___block_invoke_2_1314(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1 && (*(_BYTE *)(v1 + 9) & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (!v4 || (*(_BYTE *)(v4 + 9) & 1) == 0)
      return -1;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 40);
    if (v2 && (*(_BYTE *)(v2 + 9) & 1) != 0)
      return 1;
  }
  return 0;
}

uint64_t __49__SASamplePrinter_stacksForTask_taskSampleCount___block_invoke_3_1315(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
    v2 = *(_QWORD *)(v1 + 32);
  else
    v2 = 0;
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
    v4 = *(_QWORD *)(v3 + 32);
  else
    v4 = 0;
  if (v2 == v4)
    return 0;
  if (v1)
    v1 = *(_QWORD *)(v1 + 32);
  if (v3)
    v3 = *(_QWORD *)(v3 + 32);
  if (v1 > v3)
    return -1;
  else
    return 1;
}

uint64_t __49__SASamplePrinter_stacksForTask_taskSampleCount___block_invoke_4(uint64_t a1, const char *a2)
{
  id Property;
  const char *v4;
  id v5;
  id v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  _BOOL4 v13;
  void *v14;
  void *v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t i;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;

  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 40, 1);
  v5 = Property;
  v6 = *(id *)(a1 + 40);
  if (v6)
    v6 = objc_getProperty(v6, v4, 40, 1);
  v7 = v6;
  v8 = objc_msgSend(v5, "count");
  v9 = objc_msgSend(v7, "count");
  if (!(v8 | v9))
    goto LABEL_16;
  v10 = v9;
  if (objc_msgSend(v5, "count"))
  {
    if (objc_msgSend(v5, "count") == 1)
    {
      objc_msgSend(v5, "firstObject");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99E38], "null");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = v11 == v12;

    }
    else
    {
      v13 = 0;
    }
  }
  else
  {
    v13 = 1;
  }
  if (objc_msgSend(v7, "count"))
  {
    if (objc_msgSend(v7, "count") != 1)
    {
      if (v13)
        goto LABEL_27;
      goto LABEL_24;
    }
    objc_msgSend(v7, "firstObject");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = v14 == v15;

  }
  else
  {
    v16 = 1;
  }
  if (v13 && v16)
  {
LABEL_16:
    v17 = 0;
    goto LABEL_17;
  }
  if (v16)
    v17 = -1;
  else
    v17 = 1;
  if (!v16 && !v13)
  {
LABEL_24:
    if (v10 < v8)
    {
      v17 = -1;
      goto LABEL_17;
    }
    if (v8 < v10)
    {
LABEL_27:
      v17 = 1;
      goto LABEL_17;
    }
    if (!v8)
      goto LABEL_16;
    for (i = 0; v8 != i; ++i)
    {
      objc_msgSend(v5, "objectAtIndexedSubscript:", i);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99E38], "null");
      v21 = (void *)objc_claimAutoreleasedReturnValue();

      if (v20 == v21)
      {

        v20 = 0;
      }
      objc_msgSend(v7, "objectAtIndexedSubscript:", i);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99E38], "null");
      v23 = (void *)objc_claimAutoreleasedReturnValue();

      if (v22 == v23)
      {

        v22 = 0;
      }
      objc_msgSend(v20, "dispatchQueueLabel");
      v24 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "dispatchQueueLabel");
      v25 = objc_claimAutoreleasedReturnValue();
      v26 = (void *)v25;
      if (v24 && v25)
      {
        v27 = objc_msgSend((id)v24, "compare:options:", v25, 577);
        if (v27)
        {
          v28 = 0;
          v32 = v27;
          goto LABEL_53;
        }
      }
      else
      {
        v29 = -1;
        if (!v24)
          v29 = 1;
        if (v24 | v25)
        {
LABEL_48:
          v28 = 0;
          goto LABEL_49;
        }
      }
      v30 = objc_msgSend(v20, "identifier");
      v31 = objc_msgSend(v22, "identifier");
      if (v30 && v31)
      {
        if (v30 < v31)
        {
          v28 = 0;
          v29 = -1;
LABEL_49:
          v32 = v29;
          goto LABEL_53;
        }
        if (v30 > v31)
        {
          v28 = 0;
          v29 = 1;
          goto LABEL_49;
        }
      }
      else
      {
        v29 = -1;
        if (!v30)
          v29 = 1;
        if (v30 | v31)
          goto LABEL_48;
      }
      v28 = 1;
LABEL_53:

      if ((v28 & 1) == 0)
      {
        v17 = v32;
        break;
      }
      v17 = 0;
    }
  }
LABEL_17:

  return v17;
}

uint64_t __49__SASamplePrinter_stacksForTask_taskSampleCount___block_invoke_5(uint64_t a1, const char *a2)
{
  id Property;
  const char *v4;
  id v5;
  id v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  _BOOL4 v13;
  void *v14;
  void *v15;
  _BOOL4 v16;
  uint64_t v17;
  BOOL v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  unint64_t v25;
  unint64_t v26;

  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 48, 1);
  v5 = Property;
  v6 = *(id *)(a1 + 40);
  if (v6)
    v6 = objc_getProperty(v6, v4, 48, 1);
  v7 = v6;
  v8 = objc_msgSend(v5, "count");
  v9 = objc_msgSend(v7, "count");
  if (!(v8 | v9))
    goto LABEL_16;
  v10 = v9;
  if (objc_msgSend(v5, "count"))
  {
    if (objc_msgSend(v5, "count") == 1)
    {
      objc_msgSend(v5, "firstObject");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99E38], "null");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = v11 == v12;

    }
    else
    {
      v13 = 0;
    }
  }
  else
  {
    v13 = 1;
  }
  if (objc_msgSend(v7, "count"))
  {
    if (objc_msgSend(v7, "count") != 1)
    {
      if (v13)
        goto LABEL_27;
      goto LABEL_24;
    }
    objc_msgSend(v7, "firstObject");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = v14 == v15;

  }
  else
  {
    v16 = 1;
  }
  if (v13 && v16)
  {
LABEL_16:
    v17 = 0;
    goto LABEL_17;
  }
  v19 = v16 || v13;
  if (v16)
    v17 = -1;
  else
    v17 = 1;
  if (v19)
    goto LABEL_17;
LABEL_24:
  if (v10 < v8)
  {
    v17 = -1;
    goto LABEL_17;
  }
  if (v8 < v10)
  {
LABEL_27:
    v17 = 1;
    goto LABEL_17;
  }
  if (!v8)
    goto LABEL_16;
  v20 = 0;
  while (1)
  {
    objc_msgSend(v5, "objectAtIndexedSubscript:", v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    if (v21 == v22)
    {

      v21 = 0;
    }
    objc_msgSend(v7, "objectAtIndexedSubscript:", v20);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v24 = (void *)objc_claimAutoreleasedReturnValue();

    if (v23 == v24)
    {

      v23 = 0;
    }
    v25 = objc_msgSend(v21, "identifier");
    v26 = objc_msgSend(v23, "identifier");
    if (!v25 || !v26)
      break;
    if (v25 < v26)
    {
      v17 = -1;
      goto LABEL_46;
    }
    if (v25 > v26)
    {
      v17 = 1;
      goto LABEL_46;
    }
LABEL_40:

    v17 = 0;
    if (v8 == ++v20)
      goto LABEL_17;
  }
  if (!(v25 | v26))
    goto LABEL_40;
  if (v25)
    v17 = -1;
  else
    v17 = 1;
LABEL_46:

LABEL_17:
  return v17;
}

uint64_t __49__SASamplePrinter_stacksForTask_taskSampleCount___block_invoke_6(uint64_t a1, const char *a2)
{
  id Property;
  const char *v4;
  id v5;
  id v6;
  id v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  Property = *(id *)(a1 + 32);
  if (Property)
    Property = objc_getProperty(Property, a2, 56, 1);
  v5 = Property;
  v6 = *(id *)(a1 + 40);
  if (v6)
    v6 = objc_getProperty(v6, v4, 56, 1);
  v7 = v6;
  v8 = objc_msgSend(v5, "count");
  v9 = objc_msgSend(v7, "count");
  if (!(v8 | v9))
    goto LABEL_16;
  if (v9 >= v8)
  {
    if (v8 < v9)
    {
LABEL_9:
      v10 = 1;
      goto LABEL_17;
    }
    if (v8)
    {
      v11 = 0;
      while (1)
      {
        objc_msgSend(v5, "objectAtIndexedSubscript:", v11);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "objectAtIndexedSubscript:", v11);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend(v12, "unsignedLongLongValue");
        if (v14 < objc_msgSend(v13, "unsignedLongLongValue"))
          break;
        v15 = objc_msgSend(v12, "unsignedLongLongValue");
        v16 = objc_msgSend(v13, "unsignedLongLongValue");

        if (v15 > v16)
          goto LABEL_9;
        v10 = 0;
        if (v8 == ++v11)
          goto LABEL_17;
      }

      goto LABEL_7;
    }
LABEL_16:
    v10 = 0;
    goto LABEL_17;
  }
LABEL_7:
  v10 = -1;
LABEL_17:

  return v10;
}

uint64_t __49__SASamplePrinter_stacksForTask_taskSampleCount___block_invoke_7(uint64_t a1, int a2)
{
  uint64_t v2;
  _DWORD *v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 32);
  if (a2)
  {
    if (v2)
      LODWORD(v2) = *(_DWORD *)(v2 + 28);
    v3 = *(_DWORD **)(a1 + 40);
    if (v3)
    {
      v3 += 7;
LABEL_10:
      LODWORD(v3) = *v3;
    }
  }
  else
  {
    if (v2)
      LODWORD(v2) = *(_DWORD *)(v2 + 20);
    v3 = *(_DWORD **)(a1 + 40);
    if (v3)
    {
      v3 += 5;
      goto LABEL_10;
    }
  }
  v4 = (int)v2 < (int)v3;
  if ((int)v2 <= (int)v3)
    v5 = 0;
  else
    v5 = -1;
  if (v4)
    return 1;
  else
    return v5;
}

uint64_t __49__SASamplePrinter_stacksForTask_taskSampleCount___block_invoke_8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v15;
  unint64_t v16;
  int v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t buf[4];
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  switch(a2)
  {
    case 7:
      v2 = *(_QWORD **)(a1 + 32);
      if (!v2)
        goto LABEL_45;
      v3 = v2[12];
      goto LABEL_4;
    case 8:
      v2 = *(_QWORD **)(a1 + 32);
      if (v2)
        v15 = v2[13];
      else
        v15 = 0;
      v4 = *(_QWORD **)(a1 + 40);
      if (v4)
        v16 = v4[13];
      else
        v16 = 0;
      if (v15 < v16)
        return 1;
      if (v2)
        v2 = (_QWORD *)v2[13];
      if (v4)
        v4 = (_QWORD *)v4[13];
      goto LABEL_39;
    case 9:
      v2 = *(_QWORD **)(a1 + 32);
      if (v2)
        v6 = v2[14];
      else
        v6 = 0;
      v4 = *(_QWORD **)(a1 + 40);
      if (v4)
        v7 = v4[14];
      else
        v7 = 0;
      if (v6 < v7)
        return 1;
      if (v2)
        v2 = (_QWORD *)v2[14];
      if (v4)
        v4 = (_QWORD *)v4[14];
      goto LABEL_39;
    case 10:
      v8 = *(_QWORD *)(a1 + 32);
      v9 = 0.0;
      v10 = 0.0;
      if (v8)
      {
        v11 = *(_QWORD *)(v8 + 104);
        if (v11)
          v10 = (double)*(unint64_t *)(v8 + 112) / (double)v11;
      }
      v12 = *(_QWORD *)(a1 + 40);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 104);
        if (v13)
          v9 = (double)*(unint64_t *)(v12 + 112) / (double)v13;
      }
      if (v10 < v9)
        return 1;
      if (v10 > v9)
        return -1;
      return 0;
    default:
      v17 = *__error();
      _sa_logt();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        v27 = a2;
        _os_log_error_impl(&dword_1B9BE0000, v18, OS_LOG_TYPE_ERROR, "invalid sort option 0x%llx", buf, 0xCu);
      }

      *__error() = v17;
      _SASetCrashLogMessage(8444, "invalid sort option 0x%llx", v19, v20, v21, v22, v23, v24, a2);
      a1 = _os_crash();
      __break(1u);
LABEL_45:
      v3 = 0;
LABEL_4:
      v4 = *(_QWORD **)(a1 + 40);
      if (v4)
        v5 = v4[12];
      else
        v5 = 0;
      if (v3 < v5)
        return 1;
      if (v2)
        v2 = (_QWORD *)v2[12];
      if (v4)
        v4 = (_QWORD *)v4[12];
LABEL_39:
      if (v2 > v4)
        return -1;
      else
        return 0;
  }
}

void __56__SASamplePrinter_stacksForThread_task_taskSampleCount___block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  int v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  id v24;

  v24 = a2;
  if (!objc_msgSend(v24, "isIdleWorkQueue")
    || (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "displayIdleWorkQueueThreads") & 1) != 0)
  {
    objc_msgSend(v24, "dispatchQueue");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
      v6 = -[SASamplePrinter aggregateByDispatchQueue:](*(_QWORD *)(a1 + 32), v5);
    else
      v6 = 0;
    if ((objc_msgSend(v24, "isIdleWorkQueue") & 1) != 0)
      v7 = -3;
    else
      v7 = objc_msgSend(v5, "identifier");
    if (!objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "targetDispatchQueueId")
      || (v8 = *(void **)(a1 + 40),
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "targetProcess"),
          v9 = (void *)objc_claimAutoreleasedReturnValue(),
          v9,
          v8 != v9))
    {
      if ((objc_msgSend(*(id *)(a1 + 48), "isMainThread") & 1) != 0)
      {
        v7 = 0;
LABEL_31:
        v17 = *(void **)(a1 + 56);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v7);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "objectForKeyedSubscript:", v18);
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        if (v19)
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "addObject:", v20);
        }
        else
        {
          v21 = objc_alloc(MEMORY[0x1E0C99DE8]);
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v19 = (void *)objc_msgSend(v21, "initWithObjects:", v22, 0);

          v23 = *(void **)(a1 + 56);
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v7);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "setObject:forKeyedSubscript:", v19, v20);
        }

        goto LABEL_35;
      }
      v10 = objc_msgSend(*(id *)(a1 + 48), "threadId");
      v11 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "targetThreadId");
      if (v10 == v11)
        v12 = 0;
      else
        v12 = v6;
      if (v10 == v11)
        v7 = 0;
      if ((v12 & 1) == 0)
        goto LABEL_31;
      goto LABEL_29;
    }
    if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "targetThreadId"))
    {
      v13 = objc_msgSend(*(id *)(a1 + 48), "threadId");
      if (v13 == objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "targetThreadId"))
      {
        v14 = objc_msgSend(v5, "identifier");
        if (v14 == objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "targetDispatchQueueId"))
        {
          v7 = objc_msgSend(v5, "identifier");
          goto LABEL_31;
        }
        if (!v6)
          goto LABEL_31;
LABEL_29:
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 0;
LABEL_35:

        goto LABEL_36;
      }
    }
    else
    {
      v15 = objc_msgSend(v5, "identifier");
      if (v15 == objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "targetDispatchQueueId"))
        goto LABEL_29;
    }
    v16 = objc_msgSend(*(id *)(a1 + 48), "isMainThread");
    if (v16)
      v7 = 0;
    if ((v6 & ~(_BYTE)v16 & 1) == 0)
      goto LABEL_31;
    goto LABEL_29;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 0;
LABEL_36:

}

void __56__SASamplePrinter_stacksForThread_task_taskSampleCount___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  void *v11;
  void *v12;
  id v13;

  v13 = a2;
  v5 = a3;
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "targetThreadId")
    && objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "targetDispatchQueueId")
    && (v6 = *(void **)(a1 + 40),
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "targetProcess"),
        v7 = (void *)objc_claimAutoreleasedReturnValue(),
        v7,
        v6 == v7)
    && (v8 = objc_msgSend(*(id *)(a1 + 48), "threadId"),
        v8 == objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "targetThreadId")))
  {
    v9 = objc_msgSend(v13, "unsignedLongLongValue");
    v10 = v9 == objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "targetDispatchQueueId");
  }
  else
  {
    v10 = 0;
  }
  v11 = *(void **)(a1 + 56);
  -[SASamplePrinter stackForThread:threadStateIndexes:task:taskSampleCount:isTarget:](*(const char **)(a1 + 32), *(void **)(a1 + 48), v5, *(void **)(a1 + 40), *(_QWORD *)(a1 + 64), v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "addObject:", v12);

}

- (void)addHeaderForDispatchQueue:(void *)a3 orSwiftTaskStates:(void *)a4 orThread:(void *)a5 andThreadStateIndexes:(void *)a6 toStack:(void *)a7 task:(uint64_t)a8 taskSampleCount:
{
  id v15;
  id v16;
  const char *v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  SEL v27;
  SEL v28;
  id Property;
  id v30;
  char *v31;
  void (**v32)(_QWORD, _QWORD, _QWORD, _QWORD);
  void (**v33)(_QWORD, _QWORD, _QWORD, _QWORD);
  void *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  id v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t i;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t j;
  uint64_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  void *v61;
  void *v62;
  const char *v63;
  void *v64;
  void *v65;
  void *v66;
  id v67;
  void *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  void *v72;
  void *v73;
  int v74;
  void *v75;
  _BOOL4 v76;
  void *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  SEL v83;
  char v84;
  char v85;
  void *v86;
  void *v87;
  int v88;
  int v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *context;
  uint64_t v99;
  id v100;
  id v101;
  char v102;
  int v103;
  int v104;
  char v105;
  char v106;
  char v107;
  id v108;
  void *v109;
  void *v110;
  char v111;
  id v112;
  id v113;
  id v114;
  char v115;
  id v116;
  id v117;
  char *v118;
  id self;
  _QWORD v120[4];
  char *v121;
  void (**v122)(_QWORD, _QWORD, _QWORD, _QWORD);
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  _QWORD v131[4];
  void (**v132)(_QWORD, _QWORD, _QWORD, _QWORD);
  _QWORD v133[4];
  id v134;
  const char *v135;
  id v136;
  id v137;
  char *v138;
  id v139;
  id v140;
  id v141;
  uint64_t *v142;
  _QWORD *v143;
  uint64_t *v144;
  uint64_t *v145;
  _BYTE *v146;
  uint64_t *v147;
  uint64_t *v148;
  uint64_t *v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t *v152;
  uint64_t *v153;
  uint64_t *v154;
  uint64_t *v155;
  uint64_t *v156;
  uint64_t *v157;
  _QWORD *v158;
  _QWORD *v159;
  _QWORD *v160;
  uint64_t *v161;
  uint64_t *v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  int v167;
  char v168;
  char v169;
  char v170;
  char v171;
  char v172;
  char v173;
  char v174;
  _QWORD v175[3];
  char v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD v181[5];
  id v182;
  _QWORD v183[5];
  id v184;
  _QWORD v185[4];
  uint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t *v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t v224;
  char v225;
  uint64_t v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t *v231;
  uint64_t v232;
  char v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t (*v237)(uint64_t, uint64_t);
  void (*v238)(uint64_t);
  id v239;
  uint64_t v240;
  uint64_t *v241;
  uint64_t v242;
  char v243;
  uint64_t v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t *v249;
  uint64_t v250;
  uint64_t v251;
  _BYTE v252[128];
  uint8_t v253[128];
  _BYTE buf[24];
  uint64_t (*v255)(uint64_t, uint64_t);
  void (*v256)(uint64_t);
  id v257;
  uint64_t v258;

  v258 = *MEMORY[0x1E0C80C00];
  v15 = a2;
  v16 = a3;
  v17 = a4;
  v18 = a5;
  v19 = a6;
  v20 = a7;
  v21 = MEMORY[0x1BCCCC288]();
  if ((v16 || v15 || !v17) && (v16 || !v15 || v17) && (!v16 || v15 || v17))
  {
    v89 = *__error();
    _sa_logt();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      if (v17)
        a1 = "y";
      else
        a1 = "n";
      if (v15)
        v90 = "y";
      else
        v90 = "n";
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v90;
      if (v16)
        v17 = "y";
      else
        v17 = "n";
      *(_WORD *)&buf[22] = 2080;
      v255 = (uint64_t (*)(uint64_t, uint64_t))v17;
      _os_log_error_impl(&dword_1B9BE0000, v22, OS_LOG_TYPE_ERROR, "aThread %s, aDispatchQueue %s, swiftTaskStates %s", buf, 0x20u);
    }
    else
    {
      if (v17)
        a1 = "y";
      else
        a1 = "n";
      if (v16)
        v17 = "y";
      else
        v17 = "n";
    }

    *__error() = v89;
    _SASetCrashLogMessage(8773, "aThread %s, aDispatchQueue %s, swiftTaskStates %s", v91, v92, v93, v94, v95, v96, (char)a1);
    _os_crash();
    __break(1u);
    goto LABEL_137;
  }
  context = (void *)v21;
  LOBYTE(v22) = objc_msgSend(*((id *)a1 + 2), "omitStacksOnAC");
  v115 = objc_msgSend(*((id *)a1 + 2), "omitStacksOnBattery");
  v111 = objc_msgSend(*((id *)a1 + 2), "omitStacksWithUserIdle");
  v107 = objc_msgSend(*((id *)a1 + 2), "omitStacksWithUserActive");
  v106 = objc_msgSend(*((id *)a1 + 2), "omitStacksWithPCore");
  v105 = objc_msgSend(*((id *)a1 + 2), "omitStacksWithECore");
  v104 = objc_msgSend(*((id *)a1 + 2), "omitStacksBelowBasePriority");
  v103 = objc_msgSend(*((id *)a1 + 2), "omitStacksAboveBasePriority");
  if ((objc_msgSend(*((id *)a1 + 2), "swiftAsyncDisplayCRootCallstacks") & 1) != 0)
    v102 = 1;
  else
    v102 = objc_msgSend(*((id *)a1 + 2), "swiftAsyncPrintLeafyCCallstackOnTopOfCRootCallstacksAlways");
  v24 = *((_QWORD *)a1 + 2);
  v109 = v16;
  v110 = v18;
  self = v19;
  v97 = a8;
  if (!v24)
  {
LABEL_137:
    v25 = 0;
    v26 = 0;
    goto LABEL_22;
  }
  v25 = *(_QWORD *)(v24 + 152);
  if (!v25)
  {
    if (*(_BYTE *)(v24 + 11))
      v25 = 3;
    else
      v25 = 1;
  }
  v26 = *(_QWORD *)(v24 + 160);
  if (!v26)
  {
    if (*(_BYTE *)(v24 + 14))
      v26 = 2;
    else
      v26 = 3;
  }
LABEL_22:
  v248 = 0;
  v249 = &v248;
  v250 = 0x2020000000;
  v251 = 0x7FFFFFFFFFFFFFFFLL;
  v244 = 0;
  v245 = &v244;
  v246 = 0x2020000000;
  v247 = 0x7FFFFFFFFFFFFFFFLL;
  v240 = 0;
  v241 = &v240;
  v242 = 0x2020000000;
  v243 = 0;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x3032000000;
  v255 = __Block_byref_object_copy__4;
  v256 = __Block_byref_object_dispose__4;
  v257 = 0;
  v118 = (char *)v17;
  if (self)
  {
    v101 = objc_getProperty(self, v23, 40, 1);
    v100 = objc_getProperty(self, v27, 48, 1);
    Property = objc_getProperty(self, v28, 56, 1);
  }
  else
  {
    v100 = 0;
    v101 = 0;
    Property = 0;
  }
  v30 = Property;
  v234 = 0;
  v235 = &v234;
  v236 = 0x3032000000;
  v237 = __Block_byref_object_copy__4;
  v238 = __Block_byref_object_dispose__4;
  v239 = 0;
  v230 = 0;
  v231 = &v230;
  v232 = 0x2020000000;
  v233 = 0;
  v226 = 0;
  v227 = &v226;
  v228 = 0x2020000000;
  v229 = 0;
  v222 = 0;
  v223 = &v222;
  v224 = 0x2020000000;
  v225 = 0;
  v218 = 0;
  v219 = &v218;
  v220 = 0x2020000000;
  v221 = -1;
  v214 = 0;
  v215 = &v214;
  v216 = 0x2020000000;
  v217 = -1;
  v210 = 0;
  v211 = &v210;
  v212 = 0x2020000000;
  v213 = -1;
  v206 = 0;
  v207 = &v206;
  v208 = 0x2020000000;
  v209 = -1;
  v202 = 0;
  v203 = &v202;
  v204 = 0x2020000000;
  v205 = 0;
  v198 = 0;
  v199 = &v198;
  v200 = 0x2020000000;
  v201 = 0;
  v194 = 0;
  v195 = &v194;
  v196 = 0x2020000000;
  v197 = 0;
  v190 = 0;
  v191 = &v190;
  v192 = 0x2020000000;
  v193 = 0;
  v186 = 0;
  v187 = &v186;
  v188 = 0x2020000000;
  v189 = 0;
  v185[0] = 0;
  v185[1] = v185;
  v185[2] = 0x2020000000;
  v185[3] = 0;
  v183[0] = 0;
  v183[1] = v183;
  v183[2] = 0x3032000000;
  v183[3] = __Block_byref_object_copy__4;
  v183[4] = __Block_byref_object_dispose__4;
  v184 = 0;
  v181[0] = 0;
  v181[1] = v181;
  v181[2] = 0x3032000000;
  v181[3] = __Block_byref_object_copy__4;
  v181[4] = __Block_byref_object_dispose__4;
  v182 = 0;
  v177 = 0;
  v178 = &v177;
  v179 = 0x2020000000;
  v180 = 0;
  v175[0] = 0;
  v175[1] = v175;
  v175[2] = 0x2020000000;
  v176 = 1;
  v133[0] = MEMORY[0x1E0C809B0];
  v133[1] = 3221225472;
  v133[2] = __123__SASamplePrinter_addHeaderForDispatchQueue_orSwiftTaskStates_orThread_andThreadStateIndexes_toStack_task_taskSampleCount___block_invoke;
  v133[3] = &unk_1E7149748;
  v99 = (uint64_t)v15;
  v114 = v15;
  v134 = v114;
  v135 = a1;
  v113 = v20;
  v136 = v113;
  v142 = &v222;
  v166 = v103;
  v167 = v104;
  v168 = v107;
  v169 = v111;
  v170 = (char)v22;
  v171 = v115;
  v172 = v106;
  v173 = v105;
  v174 = v102;
  v164 = v26;
  v165 = v25;
  v112 = v109;
  v137 = v112;
  v143 = v175;
  v144 = &v240;
  v31 = v118;
  v138 = v31;
  v108 = v30;
  v139 = v108;
  v117 = v101;
  v140 = v117;
  v116 = v100;
  v141 = v116;
  v145 = &v248;
  v146 = buf;
  v147 = &v244;
  v148 = &v230;
  v149 = &v234;
  v150 = &v226;
  v151 = &v218;
  v152 = &v214;
  v153 = &v210;
  v154 = &v206;
  v155 = &v202;
  v156 = &v198;
  v157 = &v194;
  v158 = v185;
  v159 = v183;
  v160 = v181;
  v161 = &v190;
  v162 = &v186;
  v163 = &v177;
  v32 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x1BCCCC450](v133);
  v33 = v32;
  if (v15)
  {
    v34 = (void *)*((_QWORD *)a1 + 4);
    v35 = (void *)*((_QWORD *)a1 + 5);
    v36 = *((_QWORD *)a1 + 6);
    v37 = *((_QWORD *)a1 + 7);
    v131[0] = MEMORY[0x1E0C809B0];
    v131[1] = 3221225472;
    v131[2] = __123__SASamplePrinter_addHeaderForDispatchQueue_orSwiftTaskStates_orThread_andThreadStateIndexes_toStack_task_taskSampleCount___block_invoke_2;
    v131[3] = &unk_1E7149B80;
    v132 = v32;
    -[SARecipe enumerateStatesBetweenStartTime:startSampleIndex:endTime:endSampleIndex:reverseOrder:block:]((uint64_t)v114, v34, v36, v35, v37, 0, v131);
    v38 = v132;
  }
  else if (v109)
  {
    v129 = 0u;
    v130 = 0u;
    v127 = 0u;
    v128 = 0u;
    v38 = v112;
    v46 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v127, v253, 16);
    if (v46)
    {
      v47 = *(_QWORD *)v128;
      do
      {
        for (i = 0; i != v46; ++i)
        {
          if (*(_QWORD *)v128 != v47)
            objc_enumerationMutation(v38);
          v49 = *(void **)(*((_QWORD *)&v127 + 1) + 8 * i);
          objc_msgSend(v49, "thread");
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v49, "threadState");
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          ((void (**)(_QWORD, void *, void *, uint64_t))v33)[2](v33, v50, v51, objc_msgSend(v49, "threadStateIndex"));

        }
        v46 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v127, v253, 16);
      }
      while (v46);
    }
  }
  else if (v110)
  {
    v125 = 0u;
    v126 = 0u;
    v123 = 0u;
    v124 = 0u;
    v38 = v110;
    v52 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v123, v252, 16);
    if (v52)
    {
      v53 = *(_QWORD *)v124;
      do
      {
        for (j = 0; j != v52; ++j)
        {
          if (*(_QWORD *)v124 != v53)
            objc_enumerationMutation(v38);
          v55 = objc_msgSend(*(id *)(*((_QWORD *)&v123 + 1) + 8 * j), "unsignedLongValue");
          objc_msgSend(v31, "threadStates");
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v56, "objectAtIndexedSubscript:", v55);
          v57 = (void *)objc_claimAutoreleasedReturnValue();
          ((void (**)(_QWORD, char *, void *, uint64_t))v33)[2](v33, v31, v57, v55);

        }
        v52 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v123, v252, 16);
      }
      while (v52);
    }
  }
  else
  {
    v79 = *((_QWORD *)a1 + 4);
    v80 = *((_QWORD *)a1 + 5);
    v81 = *((_QWORD *)a1 + 6);
    v82 = *((_QWORD *)a1 + 7);
    v120[0] = MEMORY[0x1E0C809B0];
    v120[1] = 3221225472;
    v120[2] = __123__SASamplePrinter_addHeaderForDispatchQueue_orSwiftTaskStates_orThread_andThreadStateIndexes_toStack_task_taskSampleCount___block_invoke_3;
    v120[3] = &unk_1E7149770;
    v122 = v32;
    v121 = v31;
    objc_msgSend(v121, "enumerateThreadStatesBetweenStartTime:startSampleIndex:endTime:endSampleIndex:reverseOrder:block:", v79, v81, v80, v82, 0, v120);

    v38 = v122;
  }

  v39 = v249[3];
  if (v39 != 0x7FFFFFFFFFFFFFFFLL)
  {
    if (v39 <= *((_QWORD *)a1 + 6))
      v39 = *((_QWORD *)a1 + 6);
    v249[3] = v39;
  }
  v40 = v245[3];
  v41 = v99;
  if (v40 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v42 = *((_QWORD *)a1 + 7);
    if (v40 < v42)
      v42 = v245[3];
    v245[3] = v42;
  }
  if (self)
    *((_QWORD *)self + 4) = v227[3];
  if (v118 && objc_msgSend(*((id *)a1 + 20), "targetThreadId"))
  {
    v43 = objc_msgSend(v31, "threadId");
    v44 = objc_msgSend(*((id *)a1 + 20), "targetThreadId");
    if (!v99 || v43 == v44)
    {
      if (v43 == v44)
        goto LABEL_77;
      goto LABEL_65;
    }
  }
  else if (!v99)
  {
    goto LABEL_65;
  }
  if (objc_msgSend(*((id *)a1 + 20), "targetDispatchQueueId"))
  {
    objc_msgSend(*((id *)a1 + 20), "targetProcess");
    v45 = (id)objc_claimAutoreleasedReturnValue();
    if (v45 == v113)
    {
      v58 = objc_msgSend(v114, "identifier");
      v41 = v58 == objc_msgSend(*((id *)a1 + 20), "targetDispatchQueueId");

      if ((v41 & 1) != 0)
        goto LABEL_77;
    }
    else
    {

    }
  }
LABEL_65:
  if (v227[3] || *((_BYTE *)v223 + 24) && (objc_msgSend(*((id *)a1 + 2), "displayCallTreesWithZeroCount") & 1) != 0)
  {
    if (objc_msgSend(*((id *)a1 + 2), "omitStacksBelowSampleCount") < 1)
      v59 = 0;
    else
      v59 = objc_msgSend(*((id *)a1 + 2), "omitStacksBelowSampleCount");
    if ((int)objc_msgSend(*((id *)a1 + 2), "omitStacksBelowPercentOfTaskSamples") >= 1)
    {
      v60 = objc_msgSend(*((id *)a1 + 2), "omitStacksBelowPercentOfTaskSamples");
      if (v59 <= v60 * v97 / 0x64uLL)
        v59 = v60 * v97 / 0x64uLL;
    }
    if (!v59 || v227[3] > v59)
    {
LABEL_77:
      if (objc_msgSend(v117, "count") == 1)
      {
        objc_msgSend(v117, "firstObject");
        v61 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0C99E38], "null");
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        v41 = v61 == v62;

        if ((_DWORD)v41)
          objc_msgSend(v117, "removeAllObjects");
      }
      if (objc_msgSend(v116, "count") == 1)
      {
        objc_msgSend(v116, "firstObject");
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0C99E38], "null");
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        v41 = v64 == v65;

        if ((_DWORD)v41)
          objc_msgSend(v116, "removeAllObjects");
      }
      v66 = *(void **)(*(_QWORD *)&buf[8] + 40);
      if (!v66)
      {
        v69 = 0;
LABEL_112:
        if (self)
        {
          *((_BYTE *)self + 11) = *((_BYTE *)v241 + 24);
          objc_setProperty_atomic(self, v63, (id)v235[5], 64);
          *((_BYTE *)self + 12) = *((_BYTE *)v231 + 24);
          *((_QWORD *)self + 4) = v227[3];
          *((_QWORD *)self + 9) = v249[3];
          *((_QWORD *)self + 10) = v245[3];
          objc_setProperty_atomic(self, v83, v69, 88);
          *((_DWORD *)self + 4) = *((_DWORD *)v219 + 6);
          *((_DWORD *)self + 5) = *((_DWORD *)v215 + 6);
          *((_DWORD *)self + 6) = *((_DWORD *)v211 + 6);
          *((_DWORD *)self + 7) = *((_DWORD *)v207 + 6);
          *((_QWORD *)self + 12) = v203[3];
          *((_QWORD *)self + 13) = v199[3];
          *((_QWORD *)self + 14) = v195[3];
        }
        v84 = objc_msgSend(v31, "isProcessorIdleThread");
        if (self)
          *((_BYTE *)self + 13) = v84;
        v85 = objc_msgSend(v31, "isGlobalForcedIdle");
        if (self)
        {
          *((_BYTE *)self + 14) = v85;
          *((_QWORD *)self + 17) = v191[3];
          *((_QWORD *)self + 18) = v187[3];
          *((_QWORD *)self + 19) = v178[3];
        }

        goto LABEL_119;
      }
      v67 = v66;
      objc_msgSend(*((id *)a1 + 20), "timeWhenTransitionedToSamplingAllThreads");
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      if (v68)
      {

      }
      else
      {
        objc_msgSend(*((id *)a1 + 20), "timeWhenTransitionedToSamplingAllProcesses");
        v70 = (void *)objc_claimAutoreleasedReturnValue();
        v41 = v70 == 0;

        if ((v41 & 1) != 0)
        {
          v69 = 0;
LABEL_111:

          goto LABEL_112;
        }
      }
      if (-[SASamplePrinter hasTimeIndexes]((uint64_t)a1))
        v71 = 0;
      else
        v71 = 0x7FFFFFFFFFFFFFFFLL;
      objc_msgSend(v67, "firstThreadStateOnOrAfterTime:sampleIndex:", 0, v71);
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v72)
        goto LABEL_109;
      if (!-[SASamplePrinter hasTimeIndexes]((uint64_t)a1)
        || (unint64_t)objc_msgSend(v72, "startSampleIndex") <= *((_QWORD *)a1 + 6))
      {
        if (-[SASamplePrinter hasTimeIndexes]((uint64_t)a1))
          goto LABEL_109;
        objc_msgSend(v72, "startTimestamp");
        v73 = (void *)objc_claimAutoreleasedReturnValue();
        v74 = objc_msgSend(v73, "gt:", *((_QWORD *)a1 + 4));

        if (!v74)
          goto LABEL_109;
      }
      objc_msgSend(v67, "creationTimestamp");
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v75)
      {
LABEL_124:
        objc_msgSend(v72, "startTimestamp");
        v69 = (void *)objc_claimAutoreleasedReturnValue();
        goto LABEL_110;
      }
      v76 = -[SASamplePrinter hasTimeIndexes]((uint64_t)a1);
      if (v76)
      {
        v77 = (void *)*((_QWORD *)a1 + 20);
        objc_msgSend(v67, "creationTimestamp");
        v41 = objc_claimAutoreleasedReturnValue();
        v78 = objc_msgSend(v77, "indexOfFirstSampleOnOrAfterTimestamp:", v41);
        if (v78 < objc_msgSend(v72, "startSampleIndex"))
        {

          goto LABEL_124;
        }
        if (-[SASamplePrinter hasTimeIndexes]((uint64_t)a1))
        {

          goto LABEL_108;
        }
      }
      else if (-[SASamplePrinter hasTimeIndexes]((uint64_t)a1))
      {
LABEL_108:

        goto LABEL_109;
      }
      objc_msgSend(v67, "creationTimestamp");
      v86 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v72, "startTimestamp");
      v87 = (void *)objc_claimAutoreleasedReturnValue();
      v88 = objc_msgSend(v86, "lt:", v87);

      if (v76)
      {

        if ((v88 & 1) != 0)
          goto LABEL_124;
      }
      else
      {

        if (v88)
          goto LABEL_124;
      }
LABEL_109:
      v69 = 0;
LABEL_110:

      goto LABEL_111;
    }
  }
  if (self)
    *((_BYTE *)self + 8) = 1;
LABEL_119:

  _Block_object_dispose(v175, 8);
  _Block_object_dispose(&v177, 8);
  _Block_object_dispose(v181, 8);

  _Block_object_dispose(v183, 8);
  _Block_object_dispose(v185, 8);
  _Block_object_dispose(&v186, 8);
  _Block_object_dispose(&v190, 8);
  _Block_object_dispose(&v194, 8);
  _Block_object_dispose(&v198, 8);
  _Block_object_dispose(&v202, 8);
  _Block_object_dispose(&v206, 8);
  _Block_object_dispose(&v210, 8);
  _Block_object_dispose(&v214, 8);
  _Block_object_dispose(&v218, 8);
  _Block_object_dispose(&v222, 8);
  _Block_object_dispose(&v226, 8);
  _Block_object_dispose(&v230, 8);
  _Block_object_dispose(&v234, 8);

  _Block_object_dispose(buf, 8);
  _Block_object_dispose(&v240, 8);
  _Block_object_dispose(&v244, 8);
  _Block_object_dispose(&v248, 8);
  objc_autoreleasePoolPop(context);

}

void __123__SASamplePrinter_addHeaderForDispatchQueue_orSwiftTaskStates_orThread_andThreadStateIndexes_toStack_task_taskSampleCount___block_invoke(uint64_t a1, void *a2, void *a3, unint64_t a4)
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  char v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  char v36;
  void *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  id Property;
  id v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t i;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t j;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t k;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  void *v85;
  id v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  void *v102;
  void *v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE v107[128];
  _BYTE v108[128];
  _BYTE v109[128];
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v8 = a2;
  v9 = a3;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_10;
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 160), "targetDispatchQueueId"))
  {
    v10 = *(void **)(a1 + 48);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 160), "targetProcess");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10 == v11)
    {
      v12 = objc_msgSend(*(id *)(a1 + 32), "identifier");
      v13 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 160), "targetDispatchQueueId");

      if (v12 == v13)
      {
        if (!objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 160), "targetThreadId"))
          goto LABEL_10;
        goto LABEL_9;
      }
    }
    else
    {

    }
  }
  if ((objc_msgSend(v8, "isMainThread") & 1) != 0)
    goto LABEL_139;
LABEL_9:
  v14 = objc_msgSend(v8, "threadId");
  if (v14 == objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 160), "targetThreadId"))
    goto LABEL_139;
LABEL_10:
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24) = 1;
  v15 = *(_DWORD *)(a1 + 288);
  if (v15 && v15 < (int)objc_msgSend(v9, "basePriority"))
    goto LABEL_139;
  v16 = *(_DWORD *)(a1 + 292);
  if (v16)
  {
    if (v16 > (int)objc_msgSend(v9, "basePriority"))
      goto LABEL_139;
  }
  if (*(_BYTE *)(a1 + 296)
    && objc_msgSend(v9, "isBatteryAndUserActivityValid")
    && (objc_msgSend(v9, "isUserActive") & 1) != 0)
  {
    goto LABEL_139;
  }
  if (*(_BYTE *)(a1 + 297)
    && objc_msgSend(v9, "isBatteryAndUserActivityValid")
    && !objc_msgSend(v9, "isUserActive"))
  {
    goto LABEL_139;
  }
  if (*(_BYTE *)(a1 + 298)
    && objc_msgSend(v9, "isBatteryAndUserActivityValid")
    && !objc_msgSend(v9, "isOnBattery"))
  {
    goto LABEL_139;
  }
  if (*(_BYTE *)(a1 + 299)
    && objc_msgSend(v9, "isBatteryAndUserActivityValid")
    && (objc_msgSend(v9, "isOnBattery") & 1) != 0)
  {
    goto LABEL_139;
  }
  if (*(_BYTE *)(a1 + 300) || *(_BYTE *)(a1 + 301))
  {
    if (objc_msgSend(v9, "isRunning"))
    {
      v17 = (const char *)objc_msgSend(v9, "cpuNum");
      if ((_DWORD)v17 != -1)
      {
        v18 = v17;
        if (*(_BYTE *)(a1 + 300))
        {
          if ((-[SASampleStore clusterFlagsForCPUNum:](*(void **)(*(_QWORD *)(a1 + 40) + 160), v17) & 2) != 0)
            goto LABEL_139;
        }
        if (*(_BYTE *)(a1 + 301)
          && (-[SASampleStore clusterFlagsForCPUNum:](*(void **)(*(_QWORD *)(a1 + 40) + 160), v18) & 1) != 0)
        {
          goto LABEL_139;
        }
      }
    }
  }
  if (objc_msgSend(v9, "startSampleIndex") != 0x7FFFFFFFFFFFFFFFLL
    && (unint64_t)objc_msgSend(v9, "startSampleIndex") > *(_QWORD *)(*(_QWORD *)(a1 + 40) + 56))
  {
    goto LABEL_139;
  }
  if (objc_msgSend(v9, "endSampleIndex") != 0x7FFFFFFFFFFFFFFFLL
    && (unint64_t)objc_msgSend(v9, "endSampleIndex") < *(_QWORD *)(*(_QWORD *)(a1 + 40) + 48))
  {
    goto LABEL_139;
  }
  if (!*(_BYTE *)(a1 + 302) && *(_QWORD *)(a1 + 272) != 1 && *(_QWORD *)(a1 + 280) != 3 && !*(_QWORD *)(a1 + 56))
  {
    if (objc_msgSend(v9, "hasSwiftTask"))
    {
      if ((objc_msgSend(v8, "isMainThread") & 1) == 0)
      {
        v19 = objc_msgSend(v8, "threadId");
        if (v19 != objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 160), "targetThreadId"))
          goto LABEL_139;
      }
    }
  }
  v20 = *(_QWORD *)(a1 + 40);
  v21 = *(void **)(a1 + 48);
  objc_msgSend(v9, "dispatchQueue");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v20) = -[SASamplePrinter shouldPrintTask:thread:dispatchQueue:](v20, v21, v8, v22);

  if (!(_DWORD)v20)
    goto LABEL_139;
  if (!*(_QWORD *)(a1 + 32)
    && !*(_QWORD *)(a1 + 56)
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24)
    && objc_msgSend(v9, "isIdleWorkQueue"))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24) = 1;
  }
  if (!*(_QWORD *)(a1 + 64))
  {
    v23 = *(void **)(a1 + 72);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v8, "threadId"));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v23) = objc_msgSend(v23, "containsObject:", v24);

    if ((v23 & 1) == 0)
    {
      v25 = *(void **)(a1 + 72);
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v8, "threadId"));
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "addObject:", v26);

    }
  }
  if (!*(_QWORD *)(a1 + 32))
  {
    objc_msgSend(v9, "dispatchQueue");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = *(void **)(a1 + 80);
    if (v27)
    {
      if ((objc_msgSend(*(id *)(a1 + 80), "containsObject:", v27) & 1) == 0)
        objc_msgSend(*(id *)(a1 + 80), "addObject:", v27);
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0C99E38], "null");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = objc_msgSend(v28, "containsObject:", v29);

      if ((v30 & 1) == 0)
      {
        v31 = *(void **)(a1 + 80);
        objc_msgSend(MEMORY[0x1E0C99E38], "null");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v31, "addObject:", v32);

      }
    }

  }
  objc_msgSend(v9, "swiftTask");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = *(void **)(a1 + 88);
  if (v33)
  {
    if ((objc_msgSend(*(id *)(a1 + 88), "containsObject:", v33) & 1) == 0)
      objc_msgSend(*(id *)(a1 + 88), "addObject:", v33);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = objc_msgSend(v34, "containsObject:", v35);

    if ((v36 & 1) == 0)
    {
      v37 = *(void **)(a1 + 88);
      objc_msgSend(MEMORY[0x1E0C99E38], "null");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "addObject:", v38);

    }
  }
  if (objc_msgSend(v9, "startSampleIndex") != 0x7FFFFFFFFFFFFFFFLL)
  {
    v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 24);
    if (v39 == 0x7FFFFFFFFFFFFFFFLL || v39 > objc_msgSend(v9, "startSampleIndex"))
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 24) = objc_msgSend(v9, "startSampleIndex");
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 40), a2);
    }
    v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 24);
    if (v40 == 0x7FFFFFFFFFFFFFFFLL || v40 < objc_msgSend(v9, "endSampleIndex"))
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 24) = objc_msgSend(v9, "endSampleIndex");
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8) + 24))
    goto LABEL_84;
  objc_msgSend(v9, "name");
  v41 = (void *)objc_claimAutoreleasedReturnValue();

  v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 8) + 40);
  if (!v41)
  {
    if (!v42)
      goto LABEL_84;
    goto LABEL_82;
  }
  objc_msgSend(v9, "name");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  v44 = v43;
  v45 = *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8);
  v46 = *(void **)(v45 + 40);
  if (!v42)
  {
    *(_QWORD *)(v45 + 40) = v43;

    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24))
      goto LABEL_84;
    goto LABEL_82;
  }
  if (v43 == v46)
  {

    goto LABEL_84;
  }
  objc_msgSend(v9, "name");
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  v48 = objc_msgSend(v47, "isEqualToString:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 8) + 40));

  if ((v48 & 1) == 0)
LABEL_82:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8) + 24) = 1;
LABEL_84:
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 8) + 24) += objc_msgSend(v9, "sampleCountInSampleIndexRangeStart:end:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 48), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 56));
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 160), "dataSource") != 8
    || objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 160), "haveKPerfSched"))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 8) + 24) & 0x80000000) != 0
      || (int)objc_msgSend(v9, "scheduledPriority") < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 8) + 24))
    {
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 8) + 24) = objc_msgSend(v9, "scheduledPriority");
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 8) + 24) & 0x80000000) != 0
      || (int)objc_msgSend(v9, "scheduledPriority") > *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 8) + 24))
    {
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 8) + 24) = objc_msgSend(v9, "scheduledPriority");
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 8) + 24) & 0x80000000) != 0
      || (int)objc_msgSend(v9, "basePriority") < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 8) + 24))
    {
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 8) + 24) = objc_msgSend(v9, "basePriority");
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8) + 24) & 0x80000000) != 0
      || (int)objc_msgSend(v9, "basePriority") > *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8) + 24))
    {
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8) + 24) = objc_msgSend(v9, "basePriority");
    }
    v104 = 0;
    v105 = 0;
    v106 = 0;
    -[SAThread cpuTimeForThreadStateIndex:inTimestampRangeStart:end:](v8, a4, *(void **)(*(_QWORD *)(a1 + 40) + 32), *(void **)(*(_QWORD *)(a1 + 40) + 40), &v104);
    v49 = v105;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8) + 24) += v104;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 8) + 24) += v49;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 216) + 8) + 24) += v106;
  }
  v103 = 0;
  v104 = 0;
  v102 = 0;
  v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8) + 24);
  if (v50 != objc_msgSend(v8, "threadId"))
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8) + 24) = objc_msgSend(v8, "threadId");
    Property = *(id *)(*(_QWORD *)(a1 + 40) + 160);
    if (Property)
      Property = objc_getProperty(Property, v51, 968, 1);
    v53 = Property;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8) + 24));
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v53, "objectForKeyedSubscript:", v54);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v55, "objectEnumerator");
    v56 = objc_claimAutoreleasedReturnValue();
    v57 = *(_QWORD *)(*(_QWORD *)(a1 + 232) + 8);
    v58 = *(void **)(v57 + 40);
    *(_QWORD *)(v57 + 40) = v56;

    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 232) + 8) + 40), "nextObject");
    v59 = objc_claimAutoreleasedReturnValue();
    v60 = *(_QWORD *)(*(_QWORD *)(a1 + 240) + 8);
    v61 = *(void **)(v60 + 40);
    *(_QWORD *)(v60 + 40) = v59;

  }
  v62 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 240) + 8) + 40);
  if (v62)
  {
    -[SASamplePrinter _findIOBefore:during:after:thread:stateIndex:inIO:nextIO:](*(_QWORD *)(a1 + 40), &v104, &v103, &v102, v8, a4, *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 232) + 8) + 40), v62);
    v63 = objc_claimAutoreleasedReturnValue();
    v64 = *(_QWORD *)(*(_QWORD *)(a1 + 240) + 8);
    v65 = *(void **)(v64 + 40);
    *(_QWORD *)(v64 + 40) = v63;

    v66 = v104;
  }
  else
  {
    v66 = 0;
  }
  v100 = 0u;
  v101 = 0u;
  v98 = 0u;
  v99 = 0u;
  v67 = v66;
  v68 = objc_msgSend(v67, "countByEnumeratingWithState:objects:count:", &v98, v109, 16);
  if (v68)
  {
    v69 = v68;
    v70 = *(_QWORD *)v99;
    do
    {
      for (i = 0; i != v69; ++i)
      {
        if (*(_QWORD *)v99 != v70)
          objc_enumerationMutation(v67);
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 248) + 8) + 24) += objc_msgSend(*(id *)(*((_QWORD *)&v98 + 1) + 8 * i), "size");
      }
      v69 = objc_msgSend(v67, "countByEnumeratingWithState:objects:count:", &v98, v109, 16);
    }
    while (v69);
  }

  v96 = 0u;
  v97 = 0u;
  v94 = 0u;
  v95 = 0u;
  v72 = v103;
  v73 = objc_msgSend(v72, "countByEnumeratingWithState:objects:count:", &v94, v108, 16);
  if (v73)
  {
    v74 = v73;
    v75 = *(_QWORD *)v95;
    do
    {
      for (j = 0; j != v74; ++j)
      {
        if (*(_QWORD *)v95 != v75)
          objc_enumerationMutation(v72);
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 248) + 8) + 24) += objc_msgSend(*(id *)(*((_QWORD *)&v94 + 1) + 8 * j), "size");
      }
      v74 = objc_msgSend(v72, "countByEnumeratingWithState:objects:count:", &v94, v108, 16);
    }
    while (v74);
  }

  v92 = 0u;
  v93 = 0u;
  v90 = 0u;
  v91 = 0u;
  v77 = v102;
  v78 = objc_msgSend(v77, "countByEnumeratingWithState:objects:count:", &v90, v107, 16);
  if (v78)
  {
    v79 = v78;
    v80 = *(_QWORD *)v91;
    do
    {
      for (k = 0; k != v79; ++k)
      {
        if (*(_QWORD *)v91 != v80)
          objc_enumerationMutation(v77);
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 248) + 8) + 24) += objc_msgSend(*(id *)(*((_QWORD *)&v90 + 1) + 8 * k), "size", (_QWORD)v90);
      }
      v79 = objc_msgSend(v77, "countByEnumeratingWithState:objects:count:", &v90, v107, 16);
    }
    while (v79);
  }

  v82 = objc_msgSend(v67, "count");
  v83 = objc_msgSend(v72, "count") + v82;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 8) + 24) += v83 + objc_msgSend(v77, "count");
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24))
  {
    if (objc_msgSend(v9, "isRunnable"))
    {
      if ((objc_msgSend(v9, "isRunning") & 1) == 0)
      {
        objc_msgSend(v9, "timestampLastMadeRunnable");
        v84 = (void *)objc_claimAutoreleasedReturnValue();

        if (v84)
        {
          objc_msgSend(v9, "startTimestamp");
          v85 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend(v85, "gt:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32)) & 1) != 0)
          {
            objc_msgSend(v9, "startTimestamp");
            v86 = (id)objc_claimAutoreleasedReturnValue();

          }
          else
          {
            v86 = *(id *)(*(_QWORD *)(a1 + 40) + 32);
          }

          if (v86)
          {
            objc_msgSend(v9, "timestampLastMadeRunnable");
            v87 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v87, "deltaSecondsTo:timeDomainPriorityList:timeDomainUsed:", v86, &unk_1E7167BC0, 0);
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 264) + 8) + 24) = v88;

            v89 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8);
            if (*(double *)(v89 + 24) < 0.0)
              *(_QWORD *)(v89 + 24) = 0;
          }

        }
      }
    }
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24) = 0;

LABEL_139:
}

- (id)_findIOBefore:(void *)a3 during:(void *)a4 after:(void *)a5 thread:(unint64_t)a6 stateIndex:(void *)a7 inIO:(void *)a8 nextIO:
{
  id v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  char v24;
  id v25;
  id v26;
  int v27;
  id v28;
  void *v29;
  void *v30;
  char v31;
  void *v32;
  int v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  int v39;
  void *v40;
  void *v41;
  int v42;
  void *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  unint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  id v52;
  void *v53;
  void *v54;
  int v55;
  uint64_t v56;
  void *v57;
  id v58;
  void *v59;
  id v60;
  void *v61;
  id v62;
  uint64_t v64;
  unint64_t v65;
  int v66;
  void **v67;
  void **v68;
  void **v69;
  void *v70;
  void *v71;

  v15 = a5;
  v16 = a7;
  v17 = a8;
  v70 = v17;
  v71 = v15;
  if (!a1)
  {
    v29 = 0;
    goto LABEL_61;
  }
  v18 = v17;
  v67 = a2;
  objc_msgSend(v15, "threadStates");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "objectAtIndexedSubscript:", a6);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  v65 = a6;
  if (a6)
  {
    objc_msgSend(v15, "threadStates");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "objectAtIndexedSubscript:", a6 - 1);
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v22, "endTimestamp");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v22, "isIdleWorkQueue") & 1) != 0)
      v24 = 0;
    else
      v24 = objc_msgSend(v20, "isIdleWorkQueue");

  }
  else
  {
    objc_msgSend(v15, "creationTimestamp");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = 0;
  }
  v68 = a3;
  v69 = a4;
  if (!v23 || *(_QWORD *)(a1 + 32) && (objc_msgSend(v23, "lt:") & 1) != 0)
  {
    v25 = *(id *)(a1 + 32);

    v26 = v18;
    if (!v25)
    {
      v29 = v26;
      v23 = 0;
LABEL_35:
      v36 = 0;
      v45 = 0;
      v35 = 0;
      goto LABEL_60;
    }
    v27 = 0;
    v23 = v25;
  }
  else
  {
    v28 = v18;
    v27 = 1;
  }
  v29 = v18;
  while (1)
  {
    if (v27)
    {
      objc_msgSend(v29, "startTimestamp");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = objc_msgSend(v30, "lt:", v23);

      if ((v31 & 1) == 0)
        break;
      goto LABEL_19;
    }
    objc_msgSend(v29, "endTimestamp");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = objc_msgSend(v32, "le:", v23);

    if (!v33)
      break;
LABEL_19:
    objc_msgSend(v16, "nextObject");
    v34 = objc_claimAutoreleasedReturnValue();

    v29 = (void *)v34;
    if (!v34)
      goto LABEL_35;
  }
  v64 = a1;
  v35 = 0;
  v36 = 0;
  while (1)
  {
    objc_msgSend(v29, "startTimestamp");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "endTimestamp");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = objc_msgSend(v37, "lt:", v38);

    if (!v39)
      break;
    objc_msgSend(v29, "endTimestamp");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "startTimestamp");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    v42 = objc_msgSend(v40, "le:", v41);

    if (!v42)
    {
      if (!v36)
      {
        v36 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithObjects:", v29, 0);
        goto LABEL_32;
      }
      v43 = v36;
      goto LABEL_29;
    }
    if ((v24 & 1) == 0)
    {
      if (!v35)
      {
        v35 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithObjects:", v29, 0);
        goto LABEL_32;
      }
      v43 = v35;
LABEL_29:
      objc_msgSend(v43, "addObject:", v29);
    }
LABEL_32:
    objc_msgSend(v16, "nextObject");
    v44 = objc_claimAutoreleasedReturnValue();

    v29 = (void *)v44;
    if (!v44)
      goto LABEL_33;
  }
  objc_msgSend(v71, "threadStates");
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  v47 = objc_msgSend(v46, "count") - 1;

  if (v47 <= v65)
  {
    objc_msgSend(v71, "exitTimestamp");
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    v51 = v64;
    goto LABEL_41;
  }
  objc_msgSend(v71, "threadStates");
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v48, "objectAtIndexedSubscript:", v65 + 1);
  v49 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v49, "startTimestamp");
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  v51 = v64;
  if ((objc_msgSend(v20, "isIdleWorkQueue") & 1) != 0 || (objc_msgSend(v49, "isIdleWorkQueue") & 1) == 0)
  {
    v45 = 0;
LABEL_46:

LABEL_59:
  }
  else
  {

LABEL_41:
    if (v50 && !objc_msgSend(v50, "gt:", *(_QWORD *)(v51 + 40)))
    {
      v66 = 1;
      goto LABEL_48;
    }
    v52 = *(id *)(v51 + 40);

    if (v52)
    {
      v66 = 0;
      v50 = v52;
LABEL_48:
      v45 = 0;
      v53 = v50;
      while (1)
      {
        if (v66)
        {
          objc_msgSend(v29, "endTimestamp");
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          if (!objc_msgSend(v49, "le:", v50))
            goto LABEL_46;

        }
        else
        {
          objc_msgSend(v29, "startTimestamp");
          v54 = (void *)objc_claimAutoreleasedReturnValue();
          v55 = objc_msgSend(v54, "lt:", v50);

          if (!v55)
          {
            v50 = v53;
            goto LABEL_59;
          }
        }
        if (v45)
          objc_msgSend(v45, "addObject:", v29);
        else
          v45 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithObjects:", v29, 0);
        v50 = v53;
        objc_msgSend(v16, "nextObject");
        v56 = objc_claimAutoreleasedReturnValue();

        v29 = (void *)v56;
        if (!v56)
          goto LABEL_59;
      }
    }
LABEL_33:
    v45 = 0;
  }
LABEL_60:
  v57 = *v67;
  *v67 = v35;
  v58 = v35;

  v59 = *v68;
  *v68 = v36;
  v60 = v36;

  v61 = *v69;
  *v69 = v45;
  v62 = v45;

LABEL_61:
  return v29;
}

void __123__SASamplePrinter_addHeaderForDispatchQueue_orSwiftTaskStates_orThread_andThreadStateIndexes_toStack_task_taskSampleCount___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  id v6;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a2;
  objc_msgSend(v3, "thread");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "threadState");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "threadStateIndex");

  (*(void (**)(uint64_t, id, void *, uint64_t))(v2 + 16))(v2, v6, v4, v5);
}

uint64_t __123__SASamplePrinter_addHeaderForDispatchQueue_orSwiftTaskStates_orThread_andThreadStateIndexes_toStack_task_taskSampleCount___block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), a2, a3);
}

- (void)iterateDispatchQueue:(void *)a3 orSwiftTaskStates:(void *)a4 orThread:(void *)a5 threadStateIndexes:(unint64_t)a6 startingAtIndex:(void *)a7 endingAfterTimestamp:(void *)a8 task:(char)a9 stopAtTimeJumps:(void *)a10 callback:
{
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  unint64_t v27;
  void *v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  unint64_t v34;
  void *v35;
  unint64_t v36;
  void *v37;
  int v38;
  void *v39;
  uint64_t v40;
  void *v41;
  int v42;
  unint64_t v43;
  void *v44;
  unint64_t v45;
  void *v46;
  void *v47;
  int v48;
  void *v49;
  unint64_t v50;
  _BOOL8 v52;
  _BOOL4 v53;
  BOOL v54;
  BOOL v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  void *v59;
  unint64_t v60;
  unint64_t v61;
  void *v62;
  unint64_t v63;
  void *v64;
  int v65;
  void *v66;
  void *v67;
  void *v68;
  unint64_t v69;
  void *v70;
  unint64_t v71;
  void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  int v77;
  void *v78;
  char v79;
  int v80;
  NSObject *v81;
  void *v82;
  id v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  void *v87;
  id v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  NSObject *v97;
  const char *v98;
  const char *v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  void *v108;
  unint64_t v109;
  id v110;
  char v111;
  void *v112;
  id v113;
  unint64_t v114;
  void (**v115)(id, unint64_t, unint64_t, void *, id, uint64_t, void *, _BOOL8, _DWORD, uint8_t *);
  void *context;
  id v117;
  unint64_t v118;
  uint64_t v119;
  id v120;
  int v121;
  void *v122;
  uint8_t buf[4];
  uint64_t v124;
  __int16 v125;
  uint64_t v126;
  __int16 v127;
  const char *v128;
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v17 = a2;
  v18 = a3;
  v19 = a4;
  v110 = a5;
  v117 = a7;
  v20 = a8;
  v115 = a10;
  v112 = v18;
  if (v18 || v17 || !v19)
  {
    if (!v18 && v17 && !v19)
    {
      objc_msgSend(v17, "states");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_10;
    }
    if (!v18 || v17 || v19)
      goto LABEL_122;
    v21 = v18;
  }
  else
  {
    v21 = v110;
    if (!v110)
    {
      objc_msgSend(v19, "threadStates");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_10:
      v23 = v22;
      v24 = objc_msgSend(v22, "count");

      goto LABEL_16;
    }
  }
  v24 = objc_msgSend(v21, "count");
LABEL_16:
  if (v24 > a6)
  {
    v108 = v19;
    v109 = 0;
    v25 = 0;
    v26 = 0;
    v121 = 0;
    v111 = 1;
    v27 = 0x7FFFFFFFFFFFFFFFLL;
    v113 = v17;
    v114 = v24;
    while (1)
    {
      context = (void *)MEMORY[0x1BCCCC288]();
      if (v17)
        break;
      if (v112)
      {
        objc_msgSend(v112, "objectAtIndexedSubscript:", a6);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "thread");
        v30 = (id)objc_claimAutoreleasedReturnValue();
LABEL_25:
        v32 = objc_msgSend(v29, "threadStateIndex");
        goto LABEL_26;
      }
      v30 = v108;
      if (!v110)
      {
        v119 = a6;
        goto LABEL_27;
      }
      objc_msgSend(v110, "objectAtIndexedSubscript:", a6);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = objc_msgSend(v29, "unsignedLongValue");
LABEL_26:
      v119 = v32;

LABEL_27:
      objc_msgSend(v30, "threadStates");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "objectAtIndexedSubscript:", v119);
      v29 = (void *)objc_claimAutoreleasedReturnValue();

      v34 = objc_msgSend(v29, "startSampleIndex");
      v120 = v30;
      v122 = v29;
      if (-[SASamplePrinter hasTimeIndexes](a1))
      {
        if (v34 == 0x7FFFFFFFFFFFFFFFLL)
        {
          v17 = 0;
          goto LABEL_111;
        }
        if (v34 <= *(_QWORD *)(a1 + 48))
          v34 = *(_QWORD *)(a1 + 48);
        objc_msgSend(*(id *)(a1 + 160), "sampleTimestamps");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v35, "objectAtIndexedSubscript:", v34);
        v17 = (id)objc_claimAutoreleasedReturnValue();

        v29 = v122;
      }
      else
      {
        objc_msgSend(v29, "startTimestamp");
        v17 = (id)objc_claimAutoreleasedReturnValue();
      }
      v36 = v27;
      v118 = a6;
      objc_msgSend(v29, "endTimestamp");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      if (!objc_msgSend(v17, "le:", v37))
      {
        v77 = v121;
        v67 = v17;
        goto LABEL_102;
      }
      do
      {
        v38 = objc_msgSend(v17, "le:", v117);

        if (!v38)
          goto LABEL_103;
        v27 = v36;
        if (!v20)
          goto LABEL_47;
        objc_msgSend(v20, "taskStates");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        v40 = objc_msgSend(v39, "count");

        if (!v40)
          goto LABEL_47;
        if (v26)
        {
          objc_msgSend(v26, "endTimestamp");
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          v42 = objc_msgSend(v41, "lt:", v17);

          if (!v42)
            goto LABEL_47;
        }

        v43 = v25 + ((v111 & 1) == 0);
        objc_msgSend(v20, "taskStates");
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        v45 = objc_msgSend(v44, "count");

        if (v43 >= v45)
        {
          v26 = 0;
LABEL_47:
          v29 = v122;
          goto LABEL_48;
        }
        while (1)
        {
          objc_msgSend(v20, "taskStates");
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v46, "objectAtIndexedSubscript:", v43);
          v26 = (void *)objc_claimAutoreleasedReturnValue();

          if (!-[SASamplePrinter hasTimeIndexes](a1) || objc_msgSend(v26, "startSampleIndex") != 0x7FFFFFFFFFFFFFFFLL)
          {
            objc_msgSend(v26, "endTimestamp");
            v47 = (void *)objc_claimAutoreleasedReturnValue();
            v48 = objc_msgSend(v47, "ge:", v17);

            if (v48)
              break;
          }

          ++v43;
          objc_msgSend(v20, "taskStates");
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          v50 = objc_msgSend(v49, "count");

          if (v43 >= v50)
          {
            v26 = 0;
            v111 = 0;
            v27 = v36;
            goto LABEL_47;
          }
        }
        objc_msgSend(v26, "startTimestamp");
        v78 = (void *)objc_claimAutoreleasedReturnValue();
        v79 = objc_msgSend(v78, "le:", v17);

        v29 = v122;
        if ((v79 & 1) == 0)
        {
          v80 = *__error();
          _sa_logt();
          v81 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
          {
            objc_msgSend(v26, "startTimestamp");
            v82 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v82, "debugDescription");
            v83 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v84 = objc_msgSend(v83, "UTF8String");
            objc_msgSend(v17, "debugDescription");
            v85 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v86 = objc_msgSend(v85, "UTF8String");
            *(_DWORD *)buf = 136315394;
            v124 = v84;
            v125 = 2080;
            v126 = v86;
            _os_log_error_impl(&dword_1B9BE0000, v81, OS_LOG_TYPE_ERROR, "tempTaskState.startTimestamp %s > timestamp %s", buf, 0x16u);

          }
          *__error() = v80;
          objc_msgSend(v26, "startTimestamp");
          v87 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v87, "debugDescription");
          v88 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v89 = objc_msgSend(v88, "UTF8String");
          objc_msgSend(v17, "debugDescription");
          v19 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          objc_msgSend(v19, "UTF8String");
          _SASetCrashLogMessage(9622, "tempTaskState.startTimestamp %s > timestamp %s", v90, v91, v92, v93, v94, v95, v89);

          _os_crash();
          __break(1u);
LABEL_122:
          v96 = *__error();
          _sa_logt();
          v97 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
          {
            if (v19)
              v98 = "y";
            else
              v98 = "n";
            if (v17)
              v99 = "y";
            else
              v99 = "n";
            *(_DWORD *)buf = 136315650;
            v124 = (uint64_t)v98;
            v125 = 2080;
            v126 = (uint64_t)v99;
            if (v112)
              v100 = "y";
            else
              v100 = "n";
            v127 = 2080;
            v128 = v100;
            _os_log_error_impl(&dword_1B9BE0000, v97, OS_LOG_TYPE_ERROR, "thread %s, dispatchQueue %s, swiftTaskStates %s", buf, 0x20u);
          }
          else if (v19)
          {
            v98 = "y";
          }
          else
          {
            v98 = "n";
          }

          *__error() = v96;
          _SASetCrashLogMessage(9545, "thread %s, dispatchQueue %s, swiftTaskStates %s", v101, v102, v103, v104, v105, v106, (char)v98);
          _os_crash();
          __break(1u);
        }
        v111 = 0;
        v25 = v43;
        v27 = v36;
LABEL_48:
        buf[0] = 0;
        v52 = v27 != 0x7FFFFFFFFFFFFFFFLL && v27 == v34;
        LOBYTE(v107) = v121;
        a6 = v118;
        v30 = v120;
        v115[2](v115, v118, v34, v26, v120, v119, v29, v52, v107, buf);
        if (buf[0])
          goto LABEL_116;
        if (a9 && *(_QWORD *)(a1 + 96))
        {
          v53 = -[SASamplePrinter hasTimeIndexes](a1);
          v54 = v27 != 0x7FFFFFFFFFFFFFFFLL && v27 > v34;
          v55 = v54;
          if (v53 && !v55)
          {
            v56 = v109;
            if (v109 < objc_msgSend(*(id *)(a1 + 96), "count"))
            {
              if (v27 == 0x7FFFFFFFFFFFFFFFLL)
              {
                objc_msgSend(*(id *)(a1 + 96), "objectAtIndexedSubscript:", v109);
                v57 = (void *)objc_claimAutoreleasedReturnValue();
                v58 = objc_msgSend(v57, "unsignedLongValue");

                v27 = v58;
                v56 = v109;
              }
              if (v27 <= v34)
              {
                do
                {
                  if (++v56 >= objc_msgSend(*(id *)(a1 + 96), "count"))
                    break;
                  objc_msgSend(*(id *)(a1 + 96), "objectAtIndexedSubscript:", v56);
                  v59 = (void *)objc_claimAutoreleasedReturnValue();
                  v60 = objc_msgSend(v59, "unsignedLongValue");

                  v27 = v60;
                }
                while (v60 <= v34);
              }
              v109 = v56;
              if (v56 >= objc_msgSend(*(id *)(a1 + 96), "count"))
                v27 = 0x7FFFFFFFFFFFFFFFLL;
              v30 = v120;
            }
          }
        }
        if (!v26)
          goto LABEL_79;
        if (-[SASamplePrinter hasTimeIndexes](a1))
        {
          v61 = objc_msgSend(v26, "endSampleIndex");
          if (v61 >= objc_msgSend(v122, "endSampleIndex"))
            goto LABEL_79;
        }
        if (!-[SASamplePrinter hasTimeIndexes](a1))
        {
          objc_msgSend(v26, "endTimestamp");
          v62 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v122, "endTimestamp");
          v63 = v27;
          v64 = (void *)objc_claimAutoreleasedReturnValue();
          v65 = objc_msgSend(v62, "ge:", v64);

          v27 = v63;
          v30 = v120;

          if (v65)
          {
LABEL_79:
            if (v27 != 0x7FFFFFFFFFFFFFFFLL)
            {
              v29 = v122;
              if (-[SASamplePrinter hasTimeIndexes](a1) && v27 < objc_msgSend(v122, "endSampleIndex") + 1)
              {
                objc_msgSend(*(id *)(a1 + 160), "sampleTimestamps");
                v66 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v66, "objectAtIndexedSubscript:", v27);
                v67 = (void *)objc_claimAutoreleasedReturnValue();

                v17 = v66;
                v36 = v27;
                v34 = v27;
                goto LABEL_97;
              }
              goto LABEL_109;
            }
            v27 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_108:
            v29 = v122;
LABEL_109:
            v121 = 0;
            goto LABEL_110;
          }
        }
        if (v27 != 0x7FFFFFFFFFFFFFFFLL
          && -[SASamplePrinter hasTimeIndexes](a1)
          && v27 < objc_msgSend(v26, "endSampleIndex") + 1)
        {
          objc_msgSend(*(id *)(a1 + 160), "sampleTimestamps");
          v68 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v68, "objectAtIndexedSubscript:", v27);
          v67 = (void *)objc_claimAutoreleasedReturnValue();

          v17 = v68;
          v36 = v27;
          v34 = v27;
          goto LABEL_96;
        }
        v36 = v27;
        v69 = v25 + 1;
        do
        {
          v25 = v69;
          objc_msgSend(v20, "taskStates");
          v70 = (void *)objc_claimAutoreleasedReturnValue();
          v71 = objc_msgSend(v70, "count");

          if (v25 >= v71)
          {

LABEL_107:
            v26 = 0;
            v27 = v36;
            v30 = v120;
            goto LABEL_108;
          }
          objc_msgSend(v20, "taskStates");
          v72 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v72, "objectAtIndexedSubscript:", v25);
          v73 = (void *)objc_claimAutoreleasedReturnValue();

          if (!-[SASamplePrinter hasTimeIndexes](a1))
            break;
          v74 = objc_msgSend(v73, "startSampleIndex");
          v69 = v25 + 1;
          v26 = v73;
        }
        while (v74 == 0x7FFFFFFFFFFFFFFFLL);
        if (!v73)
          goto LABEL_107;
        v75 = objc_msgSend(v73, "startSampleIndex");
        if (v75 == 0x7FFFFFFFFFFFFFFFLL)
        {
          objc_msgSend(v73, "startTimestamp");
          v67 = (void *)objc_claimAutoreleasedReturnValue();
          v34 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v34 = v75;
          objc_msgSend(*(id *)(a1 + 160), "sampleTimestamps");
          v76 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v76, "objectAtIndexedSubscript:", v34);
          v67 = (void *)objc_claimAutoreleasedReturnValue();

          v17 = v76;
        }
        v26 = v73;
LABEL_96:
        v29 = v122;
LABEL_97:

        objc_msgSend(v29, "endTimestamp");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        v121 = 0;
        v77 = 0;
        v17 = v67;
      }
      while ((objc_msgSend(v67, "le:", v37) & 1) != 0);
LABEL_102:

      v17 = v67;
      v121 = v77;
LABEL_103:
      a6 = v118;
      v27 = v36;
      v30 = v120;
      v29 = v122;
LABEL_110:
      if (objc_msgSend(v17, "gt:", v117))
      {
LABEL_116:

        objc_autoreleasePoolPop(context);
        v17 = v113;
        goto LABEL_117;
      }
LABEL_111:

      v17 = v113;
LABEL_112:

      objc_autoreleasePoolPop(context);
      if (++a6 == v114)
      {
LABEL_117:

        v19 = v108;
        goto LABEL_118;
      }
    }
    objc_msgSend(v17, "states");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "objectAtIndexedSubscript:", a6);
    v29 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v29, "thread");
    v30 = (id)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(*(id *)(a1 + 160), "targetDispatchQueueId"))
    {
      if ((objc_msgSend(v30, "isMainThread") & 1) != 0
        || (v31 = objc_msgSend(v30, "threadId"), v31 == objc_msgSend(*(id *)(a1 + 160), "targetThreadId")))
      {
        v121 = 1;
        goto LABEL_112;
      }
    }
    goto LABEL_25;
  }
LABEL_118:

}

- (id)stateChangeStringForThreadState:(void *)a3 serialDispatchQueue:(void *)a4 swiftTaskStates:(void *)a5 thread:(void *)a6 threadStateIndexes:(void *)a7 taskState:(void *)a8 task:(uint64_t)a9 iteratorIndex:(char)a10 missingStateIsInAnotherStack:(uint64_t)a11 numSamplesOmittedSincePreviousDisplayedSample:(void *)a12 sampleTimestamp:(void *)a13 previousSampleTimestamp:(void *)a14 previousDisplayedTimestamp:(void *)a15 previousTaskState:(void *)a16 previousThread:(void *)a17 previousThreadState:(char)a18 dispatchQueueChanges:(char)a19 swiftTaskChanges:(char)a20 priorityChanges:(char)a21 nameChanges:(char)a22 threadChanges:(char)a23 isTimeJump:(void *)a24 ioEventsSincePreviousThreadState:
{
  id v31;
  double v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  double v40;
  double v41;
  double v42;
  const __CFString *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const __CFString *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  const __CFString *v52;
  void *v53;
  id v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  void *v61;
  const __CFString *v62;
  BOOL v63;
  char v64;
  void *v65;
  uint64_t v66;
  void *v67;
  BOOL v68;
  char v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  uint64_t v74;
  void *v75;
  void *v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  uint64_t v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  BOOL v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  char v98;
  void *v99;
  void *v100;
  const __CFString *v101;
  uint64_t v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  BOOL v110;
  char v111;
  int v112;
  int v113;
  void *v114;
  const __CFString *v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t (**v121)(_QWORD, _QWORD);
  uint64_t (**v122)(_QWORD, _QWORD, _QWORD);
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  void *v131;
  uint64_t v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  const __CFString *v148;
  int v149;
  int v150;
  void *v151;
  const __CFString *v152;
  uint64_t v153;
  void *v154;
  uint64_t v155;
  int v156;
  int v157;
  void *v158;
  const __CFString *v159;
  uint64_t v160;
  void *v161;
  uint64_t v162;
  int v163;
  void *v164;
  int v165;
  uint64_t v166;
  void *v167;
  void *v168;
  int v169;
  const __CFString *v170;
  int v171;
  void *v172;
  uint64_t v173;
  void *v174;
  void *v175;
  const __CFString *v176;
  const __CFString *v177;
  void *v178;
  uint64_t v179;
  void *v180;
  uint64_t v181;
  void (**v182)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  void *v183;
  int v184;
  int v185;
  int v186;
  _BOOL4 v187;
  int v188;
  void *v189;
  const __CFString *v190;
  char v191;
  void *v192;
  void *v193;
  void *v194;
  uint64_t v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  void *v199;
  void *v200;
  uint64_t v201;
  const __CFString *v202;
  uint64_t v203;
  void *v204;
  void *v205;
  const __CFString *v206;
  void *v207;
  uint64_t v208;
  void *v209;
  void *v210;
  uint64_t v211;
  void *v212;
  uint64_t v213;
  int v214;
  void *v215;
  const __CFString *v216;
  uint64_t v217;
  void *v218;
  uint64_t v219;
  int v220;
  int v221;
  void *v222;
  const __CFString *v223;
  uint64_t v224;
  void *v225;
  uint64_t v226;
  int v227;
  int v228;
  int v229;
  void *v230;
  uint64_t v231;
  void *v232;
  void *v233;
  uint64_t v234;
  uint64_t v235;
  void *v236;
  int v237;
  const __CFString *v238;
  void *v239;
  int v240;
  int v241;
  void *v242;
  uint64_t v243;
  void *v244;
  int v245;
  int v246;
  int v247;
  void *v248;
  int v249;
  uint64_t v250;
  void *v251;
  uint64_t v252;
  void *v253;
  void *v254;
  uint64_t v255;
  void *v256;
  void *v257;
  void *v258;
  void *v259;
  int v260;
  void *v261;
  id v262;
  id v263;
  void *v264;
  void *v265;
  void *v266;
  void *v267;
  void *v268;
  void *v269;
  char v270;
  void *v271;
  uint64_t v272;
  id v273;
  id result;
  uint64_t v275;
  void *v276;
  int v277;
  NSObject *v278;
  id v279;
  uint64_t v280;
  id v281;
  char v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  int v289;
  NSObject *v290;
  id v291;
  id v292;
  uint64_t v293;
  id v294;
  id v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  NSObject *v302;
  uint64_t v303;
  id v304;
  uint64_t v305;
  id v306;
  uint64_t v307;
  id v308;
  uint64_t v309;
  id v310;
  id v311;
  id v312;
  id v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  int v320;
  NSObject *v321;
  id v322;
  uint64_t v323;
  id v324;
  char v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  int v332;
  int v333;
  char v334;
  id v335;
  unint64_t v336;
  id v337;
  unint64_t v338;
  id v339;
  void *v340;
  id v341;
  char v342;
  id v343;
  id v344;
  uint64_t v345;
  char v346;
  id v347;
  uint64_t v348;
  id v349;
  id v350;
  id v351;
  id v352;
  _QWORD v353[5];
  char v354;
  _QWORD v355[4];
  id v356;
  id v357;
  _BYTE *v358;
  _QWORD v359[4];
  id v360;
  uint64_t v361;
  uint64_t *v362;
  _QWORD v363[4];
  char v364;
  _QWORD v365[4];
  char v366;
  uint64_t v367;
  uint64_t *v368;
  uint64_t v369;
  uint64_t (*v370)(uint64_t, uint64_t);
  void (*v371)(uint64_t);
  id v372;
  _BYTE buf[24];
  uint64_t (*v374)(uint64_t, uint64_t);
  _BYTE v375[20];
  __int16 v376;
  uint64_t v377;
  uint64_t v378;

  v378 = *MEMORY[0x1E0C80C00];
  v352 = a2;
  v338 = a3;
  v336 = a4;
  v347 = a5;
  v335 = a6;
  v350 = a7;
  v337 = a8;
  v344 = a12;
  v341 = a13;
  v31 = a14;
  v349 = a15;
  v339 = a16;
  v351 = a17;
  v343 = a24;
  v348 = a1;
  v340 = v31;
  if (!a1)
  {
LABEL_431:
    v273 = 0;
LABEL_419:

    return v273;
  }
  v367 = 0;
  v368 = &v367;
  v369 = 0x3032000000;
  v370 = __Block_byref_object_copy__4;
  v371 = __Block_byref_object_dispose__4;
  v372 = 0;
  if (v31 && a23)
  {
    if (!v344 || !v341)
    {
LABEL_425:
      v289 = *__error();
      _sa_logt();
      v290 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v290, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend(v341, "debugDescription");
        v291 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        a6 = (void *)objc_msgSend(v291, "UTF8String");
        objc_msgSend(v344, "debugDescription");
        v292 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v293 = objc_msgSend(v292, "UTF8String");
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = a6;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v293;
        _os_log_error_impl(&dword_1B9BE0000, v290, OS_LOG_TYPE_ERROR, "timeJump, but previousSampleTimestamp %s and sampleTimestamp %s", buf, 0x16u);

      }
      *__error() = v289;
      objc_msgSend(v341, "debugDescription");
      v294 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v50 = objc_msgSend(v294, "UTF8String");
      objc_msgSend(v344, "debugDescription");
      v295 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      objc_msgSend(v295, "UTF8String");
      _SASetCrashLogMessage(9763, "timeJump, but previousSampleTimestamp %s and sampleTimestamp %s", v296, v297, v298, v299, v300, v301, v50);

      _os_crash();
      __break(1u);
LABEL_428:
      LODWORD(v349) = *__error();
      _sa_logt();
      v302 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v302, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend(v339, "debugDescription");
        v350 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v303 = objc_msgSend(v350, "UTF8String");
        objc_msgSend(v351, "debugDescription");
        v304 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v305 = objc_msgSend(v304, "UTF8String");
        objc_msgSend(v347, "debugDescription");
        v306 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v307 = objc_msgSend(v306, "UTF8String");
        objc_msgSend(v352, "debugDescription");
        v308 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v309 = objc_msgSend(v308, "UTF8String");
        *(_DWORD *)buf = 134219266;
        *(_QWORD *)&buf[4] = a6;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v50;
        *(_WORD *)&buf[22] = 2080;
        v374 = (uint64_t (*)(uint64_t, uint64_t))v303;
        *(_WORD *)v375 = 2080;
        *(_QWORD *)&v375[2] = v305;
        *(_WORD *)&v375[10] = 2080;
        *(_QWORD *)&v375[12] = v307;
        v376 = 2080;
        v377 = v309;
        _os_log_error_impl(&dword_1B9BE0000, v302, OS_LOG_TYPE_ERROR, "expected index %lu, actual is %lu, previousThread:%s previousThreadState:%s thread:%s threadState:%s", buf, 0x3Eu);

      }
      *__error() = (int)v349;
      objc_msgSend(v339, "debugDescription");
      v310 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      objc_msgSend(v310, "UTF8String");
      objc_msgSend(v351, "debugDescription");
      v311 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      objc_msgSend(v311, "UTF8String");
      objc_msgSend(v347, "debugDescription");
      v312 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      objc_msgSend(v312, "UTF8String");
      objc_msgSend(v352, "debugDescription");
      v313 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      objc_msgSend(v313, "UTF8String");
      _SASetCrashLogMessage(9824, "expected index %lu, actual is %lu, previousThread:%s previousThreadState:%s thread:%s threadState:%s", v314, v315, v316, v317, v318, v319, (char)a6);

      _os_crash();
      __break(1u);
      goto LABEL_431;
    }
    v32 = -[SASamplePrinter timeSpentAsleepBetweenStartTimestamp:endTimestamp:](a1, v31, v344);
    if (v32 > 0.0)
    {
      v33 = (void *)v368[5];
      if (v33)
      {
        objc_msgSend(v33, "appendString:", CFSTR(", "));
      }
      else
      {
        v34 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
        v35 = (void *)v368[5];
        v368[5] = v34;

      }
      objc_msgSend((id)v368[5], "appendFormat:", CFSTR("machine asleep for %.0fs"), *(_QWORD *)&v32);
    }
    if (-[SASamplePrinter complainAboutSamplingGapBetweenStartTimestamp:endTimestamp:](a1, v341, v344))
    {
      v36 = (void *)v368[5];
      if (v36)
      {
        objc_msgSend(v36, "appendString:", CFSTR(", "));
      }
      else
      {
        v37 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
        v38 = (void *)v368[5];
        v368[5] = v37;

      }
      v39 = (void *)v368[5];
      objc_msgSend(v344, "machAbsTimeSeconds");
      v41 = v40;
      objc_msgSend(v341, "machAbsTimeSeconds");
      objc_msgSend(v39, "appendFormat:", CFSTR("%.0fms gap with no samples"), (v41 - v42) * 1000.0);
    }
  }
  if (!-[SASamplePrinter hasTimeIndexes](a1))
    goto LABEL_64;
  if (v338)
  {
    v43 = CFSTR("DispatchQueue");
LABEL_19:
    if (a11)
    {
      v44 = (void *)v368[5];
      if (v44)
      {
        objc_msgSend(v44, "appendString:", CFSTR(", "));
      }
      else
      {
        v46 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
        v47 = (void *)v368[5];
        v368[5] = v46;

      }
      v48 = CFSTR("s");
      if (a11 == 1)
        v48 = &stru_1E714A250;
      objc_msgSend((id)v368[5], "appendFormat:", CFSTR("%@ omitted via filtering for %lu sample%@"), v43, a11, v48);
    }
    if (!v352 || v351 == v352)
    {
LABEL_64:
      if (v347)
        v63 = v339 == v347;
      else
        v63 = 1;
      v64 = v63;
      v334 = v64;
      if (!v63 && a22)
      {
        v65 = (void *)v368[5];
        if (v65)
        {
          objc_msgSend(v65, "appendString:", CFSTR(", "));
        }
        else
        {
          v66 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
          v67 = (void *)v368[5];
          v368[5] = v66;

        }
        objc_msgSend((id)v368[5], "appendFormat:", CFSTR("%@ 0x%llx"), CFSTR("Thread"), objc_msgSend(v347, "threadId"));
      }
      if (v352)
        v68 = v351 == v352;
      else
        v68 = 1;
      v69 = v68;
      v342 = v69;
      if (v68)
        goto LABEL_135;
      if (v351)
      {
        objc_msgSend(v351, "swiftTask");
        v70 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v352, "swiftTask");
        v71 = (void *)objc_claimAutoreleasedReturnValue();
        if (v70 == v71)
        {

LABEL_103:
          objc_msgSend(v351, "dispatchQueue");
          v83 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v352, "dispatchQueue");
          v84 = (void *)objc_claimAutoreleasedReturnValue();
          if (v83 == v84)
          {

            if ((a21 & 1) == 0)
              goto LABEL_135;
LABEL_113:
            objc_msgSend(v351, "name");
            v91 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v352, "name");
            v92 = (void *)objc_claimAutoreleasedReturnValue();
            v93 = v91 == v92;

            if (v93)
              goto LABEL_135;
            objc_msgSend(v351, "name");
            v94 = (void *)objc_claimAutoreleasedReturnValue();
            if (v94)
            {
              objc_msgSend(v352, "name");
              v95 = (void *)objc_claimAutoreleasedReturnValue();
              if (v95)
              {
                objc_msgSend(v351, "name");
                v96 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v352, "name");
                v97 = (void *)objc_claimAutoreleasedReturnValue();
                v98 = objc_msgSend(v96, "isEqualToString:", v97);

                if ((v98 & 1) != 0)
                  goto LABEL_135;
              }
              else
              {

              }
            }
            goto LABEL_121;
          }

          goto LABEL_106;
        }

      }
      else if ((a19 & 1) == 0)
      {
        goto LABEL_105;
      }
      objc_msgSend(v352, "swiftTask");
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      v73 = v72;
      if (v72)
      {
        v74 = objc_msgSend(v72, "identifier");
        v75 = (void *)v368[5];
        if (v74 == -1)
        {
          if (v75)
          {
            objc_msgSend(v75, "appendString:", CFSTR(", "));
          }
          else
          {
            v81 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
            v82 = (void *)v368[5];
            v368[5] = v81;

          }
          objc_msgSend((id)v368[5], "appendFormat:", CFSTR("%@ %@"), CFSTR("Swift Task"), CFSTR("UNKNOWN"));
        }
        else
        {
          if (v75)
          {
            objc_msgSend(v75, "appendString:", CFSTR(", "));
          }
          else
          {
            v77 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
            v78 = (void *)v368[5];
            v368[5] = v77;

          }
          objc_msgSend((id)v368[5], "appendFormat:", CFSTR("%@ %llu"), CFSTR("Swift Task"), objc_msgSend(v73, "identifier"));
        }
      }
      else
      {
        v76 = (void *)v368[5];
        if (v76)
        {
          objc_msgSend(v76, "appendString:", CFSTR(", "));
        }
        else
        {
          v79 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
          v80 = (void *)v368[5];
          v368[5] = v79;

        }
        objc_msgSend((id)v368[5], "appendFormat:", CFSTR("%@ none"), CFSTR("Swift Task"));
      }

      if (v351)
        goto LABEL_103;
LABEL_105:
      if (!a18)
      {
        if ((a21 & 1) == 0)
          goto LABEL_135;
LABEL_121:
        objc_msgSend(v352, "name");
        v99 = (void *)objc_claimAutoreleasedReturnValue();

        v100 = (void *)v368[5];
        if (v99)
        {
          if (v100)
          {
            objc_msgSend(v100, "appendString:", CFSTR(", "));
          }
          else
          {
            v102 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
            v103 = (void *)v368[5];
            v368[5] = v102;

          }
          v104 = (void *)v368[5];
          objc_msgSend(v352, "name");
          v105 = (void *)objc_claimAutoreleasedReturnValue();
          SACopySanitizedString(v105, 1, 0);
          v106 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v104, "appendFormat:", CFSTR("Thread name \"%@\"), v106);

          goto LABEL_135;
        }
        if (v351)
        {
          if (v100)
          {
            objc_msgSend(v100, "appendString:", CFSTR(", "));
            v101 = CFSTR("Thread name cleared");
LABEL_134:
            objc_msgSend((id)v368[5], "appendFormat:", v101);
            goto LABEL_135;
          }
          v107 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
          v108 = (void *)v368[5];
          v368[5] = v107;
          v101 = CFSTR("Thread name cleared");
        }
        else
        {
          if (v100)
          {
            objc_msgSend(v100, "appendString:", CFSTR(", "));
            v101 = CFSTR("Thread name unset");
            goto LABEL_134;
          }
          v109 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
          v108 = (void *)v368[5];
          v368[5] = v109;
          v101 = CFSTR("Thread name unset");
        }

        goto LABEL_134;
      }
LABEL_106:
      v85 = (void *)v368[5];
      if (v85)
      {
        objc_msgSend(v85, "appendString:", CFSTR(", "));
      }
      else
      {
        v86 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
        v87 = (void *)v368[5];
        v368[5] = v86;

      }
      v88 = (void *)v368[5];
      objc_msgSend(v352, "dispatchQueue");
      v89 = (void *)objc_claimAutoreleasedReturnValue();
      -[SASamplePrinter displayNameForDispatchQueue:](v89);
      v90 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v88, "appendFormat:", CFSTR("%@ %@"), CFSTR("DispatchQueue"), v90);

      if ((a21 & 1) != 0)
      {
        if (!v351)
          goto LABEL_121;
        goto LABEL_113;
      }
LABEL_135:
      if (v350)
        v110 = v349 == v350;
      else
        v110 = 1;
      v111 = v110;
      v346 = v111;
      if (v110)
      {
LABEL_155:
        if ((v342 & 1) != 0)
          goto LABEL_205;
        v119 = objc_msgSend(*(id *)(v348 + 16), "displayQoSTransitionsBetweenUnspecifiedAndUnavailable");
        v120 = MEMORY[0x1E0C809B0];
        v365[0] = MEMORY[0x1E0C809B0];
        v365[1] = 3221225472;
        v365[2] = __461__SASamplePrinter_stateChangeStringForThreadState_serialDispatchQueue_swiftTaskStates_thread_threadStateIndexes_taskState_task_iteratorIndex_missingStateIsInAnotherStack_numSamplesOmittedSincePreviousDisplayedSample_sampleTimestamp_previousSampleTimestamp_previousDisplayedTimestamp_previousTaskState_previousThread_previousThreadState_dispatchQueueChanges_swiftTaskChanges_priorityChanges_nameChanges_threadChanges_isTimeJump_ioEventsSincePreviousThreadState___block_invoke;
        v365[3] = &__block_descriptor_33_e8_B12__0C8l;
        v366 = v119;
        v121 = (uint64_t (**)(_QWORD, _QWORD))MEMORY[0x1BCCCC450](v365);
        v363[0] = v120;
        v363[1] = 3221225472;
        v363[2] = __461__SASamplePrinter_stateChangeStringForThreadState_serialDispatchQueue_swiftTaskStates_thread_threadStateIndexes_taskState_task_iteratorIndex_missingStateIsInAnotherStack_numSamplesOmittedSincePreviousDisplayedSample_sampleTimestamp_previousSampleTimestamp_previousDisplayedTimestamp_previousTaskState_previousThread_previousThreadState_dispatchQueueChanges_swiftTaskChanges_priorityChanges_nameChanges_threadChanges_isTimeJump_ioEventsSincePreviousThreadState___block_invoke_2;
        v363[3] = &__block_descriptor_33_e11_B16__0C8C12l;
        v364 = v119;
        v122 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))MEMORY[0x1BCCCC450](v363);
        if (v351)
        {
          v123 = v122[2](v122, objc_msgSend(v351, "threadRequestedQos"), objc_msgSend(v352, "threadRequestedQos"));
          v124 = v122[2](v122, objc_msgSend(v351, "threadRequestedQosOverride"), objc_msgSend(v352, "threadRequestedQosOverride"));
          v125 = v122[2](v122, objc_msgSend(v351, "threadQosPromote"), objc_msgSend(v352, "threadQosPromote"));
          v126 = v122[2](v122, objc_msgSend(v351, "threadQosKEventOverride"), objc_msgSend(v352, "threadQosKEventOverride"));
          v333 = v122[2](v122, objc_msgSend(v351, "threadQosWorkQueueOverride"), objc_msgSend(v352, "threadQosWorkQueueOverride"));
          v127 = v122[2](v122, objc_msgSend(v351, "threadQosWorkloopServicerOverride"), objc_msgSend(v352, "threadQosWorkloopServicerOverride"));
          v128 = objc_msgSend(v352, "isPromotedAboveTask");
          if (v128 == objc_msgSend(v351, "isPromotedAboveTask"))
          {
            if (((v123 | v124 | v125 | v126 | v333 | v127) & 1) == 0)
            {
              v129 = objc_msgSend(v352, "threadQos");
              if (v129 == objc_msgSend(v351, "threadQos"))
                goto LABEL_204;
LABEL_166:
              v130 = 0;
              v332 = 0;
              v333 = 0;
              v125 = 0;
              LOBYTE(v123) = 0;
              LOBYTE(v124) = 0;
              LOBYTE(v126) = 0;
              LOBYTE(v127) = 0;
LABEL_167:
              v131 = (void *)v368[5];
              if (v131)
              {
                objc_msgSend(v131, "appendString:", CFSTR(", "));
              }
              else
              {
                v132 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
                v133 = (void *)v368[5];
                v368[5] = v132;

              }
              v134 = (void *)v368[5];
              StringForThreadQoS(objc_msgSend(v352, "threadQos"));
              v135 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v134, "appendFormat:", CFSTR("thread QoS %@"), v135);

              if (!v130)
                goto LABEL_204;
              objc_msgSend((id)v368[5], "appendString:", CFSTR(" ("));
              if ((v123 & 1) != 0)
              {
                v136 = (void *)v368[5];
                StringForThreadQoS(objc_msgSend(v352, "threadRequestedQos"));
                v137 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v136, "appendFormat:", CFSTR("requested %@"), v137);

                if ((v124 & 1) == 0)
                {
                  if ((v125 & 1) == 0)
                  {
LABEL_186:
                    if ((v126 & 1) == 0)
                    {
                      if ((v333 & 1) == 0)
                      {
LABEL_193:
                        if ((v127 & 1) != 0)
                        {
                          objc_msgSend((id)v368[5], "appendString:", CFSTR(", "));
LABEL_195:
                          v146 = (void *)v368[5];
                          StringForThreadQoS(objc_msgSend(v352, "threadQosWorkloopServicerOverride"));
                          v147 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v146, "appendFormat:", CFSTR("workloop servicer override %@"), v147);

                          if (!v332)
                            goto LABEL_203;
                          goto LABEL_198;
                        }
                        if ((v332 & 1) != 0)
                        {
LABEL_198:
                          objc_msgSend((id)v368[5], "appendString:", CFSTR(", "));
                          goto LABEL_199;
                        }
LABEL_203:
                        objc_msgSend((id)v368[5], "appendString:", CFSTR(")"));
                        goto LABEL_204;
                      }
                      goto LABEL_191;
                    }
                    objc_msgSend((id)v368[5], "appendString:", CFSTR(", "));
LABEL_188:
                    v142 = (void *)v368[5];
                    StringForThreadQoS(objc_msgSend(v352, "threadQosKEventOverride"));
                    v143 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v142, "appendFormat:", CFSTR("kevent override %@"), v143);

                    if (!v333)
                      goto LABEL_193;
LABEL_191:
                    objc_msgSend((id)v368[5], "appendString:", CFSTR(", "));
LABEL_192:
                    v144 = (void *)v368[5];
                    StringForThreadQoS(objc_msgSend(v352, "threadQosWorkQueueOverride"));
                    v145 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v144, "appendFormat:", CFSTR("work queue override %@"), v145);

                    goto LABEL_193;
                  }
                  goto LABEL_184;
                }
                objc_msgSend((id)v368[5], "appendString:", CFSTR(", "));
              }
              else if ((v124 & 1) == 0)
              {
                if ((v125 & 1) == 0)
                {
                  if ((v126 & 1) == 0)
                  {
                    if ((v333 & 1) == 0)
                    {
                      if ((v127 & 1) != 0)
                        goto LABEL_195;
                      if ((v332 & 1) != 0)
                      {
LABEL_199:
                        if (objc_msgSend(v352, "isPromotedAboveTask"))
                          v148 = CFSTR("thread promoted above process clamp");
                        else
                          v148 = CFSTR("thread limited by process clamp");
                        objc_msgSend((id)v368[5], "appendFormat:", v148);
                        goto LABEL_203;
                      }
                      goto LABEL_203;
                    }
                    goto LABEL_192;
                  }
                  goto LABEL_188;
                }
                goto LABEL_185;
              }
              v138 = (void *)v368[5];
              StringForThreadQoS(objc_msgSend(v352, "threadRequestedQosOverride"));
              v139 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v138, "appendFormat:", CFSTR("requested override %@"), v139);

              if (!v125)
                goto LABEL_186;
LABEL_184:
              objc_msgSend((id)v368[5], "appendString:", CFSTR(", "));
LABEL_185:
              v140 = (void *)v368[5];
              StringForThreadQoS(objc_msgSend(v352, "threadQosPromote"));
              v141 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v140, "appendFormat:", CFSTR("promote %@"), v141);

              goto LABEL_186;
            }
            goto LABEL_164;
          }
        }
        else
        {
          v123 = v121[2](v121, objc_msgSend(v352, "threadRequestedQos"));
          v124 = v121[2](v121, objc_msgSend(v352, "threadRequestedQosOverride"));
          v125 = v121[2](v121, objc_msgSend(v352, "threadQosPromote"));
          v126 = v121[2](v121, objc_msgSend(v352, "threadQosKEventOverride"));
          v333 = v121[2](v121, objc_msgSend(v352, "threadQosWorkQueueOverride"));
          v127 = v121[2](v121, objc_msgSend(v352, "threadQosWorkloopServicerOverride"));
          if ((objc_msgSend(v352, "isPromotedAboveTask") & 1) == 0)
          {
            if (((v123 | v124 | v125 | v126 | v333 | v127) & 1) == 0)
            {
              if (!objc_msgSend(v352, "threadQos"))
              {
LABEL_204:

LABEL_205:
                if ((v346 & 1) != 0)
                {
                  if (!v352)
                    goto LABEL_267;
                  goto LABEL_234;
                }
                if (!objc_msgSend(v337, "usesSuddenTermination"))
                {
LABEL_220:
                  if (!v349)
                  {
                    if ((objc_msgSend(v350, "isBoosted") & 1) == 0)
                      goto LABEL_233;
                    goto LABEL_224;
                  }
LABEL_221:
                  v156 = objc_msgSend(v350, "isBoosted");
                  if (v156 == objc_msgSend(v349, "isBoosted"))
                  {
LABEL_233:
                    if (!v352)
                      goto LABEL_260;
LABEL_234:
                    if (v351 != v352)
                    {
                      if (v351)
                      {
                        v163 = objc_msgSend(v351, "isDarwinBG");
                        if (v163 != objc_msgSend(v352, "isDarwinBG"))
                        {
LABEL_237:
                          v164 = (void *)v368[5];
                          if (v164)
                          {
                            objc_msgSend(v164, "appendString:", CFSTR(", "));
                          }
                          else
                          {
                            v166 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
                            v167 = (void *)v368[5];
                            v368[5] = v166;

                          }
                          v168 = (void *)v368[5];
                          v169 = objc_msgSend(v352, "isDarwinBG");
                          v170 = CFSTR("not ");
                          if (v169)
                            v170 = &stru_1E714A250;
                          objc_msgSend(v168, "appendFormat:", CFSTR("thread %@darwinbg"), v170);
                          v165 = 0;
LABEL_245:
                          if ((v346 & 1) != 0)
                            goto LABEL_267;
                          if (v349)
                          {
                            v171 = objc_msgSend(v349, "isDarwinBG");
                            if (v171 == objc_msgSend(v350, "isDarwinBG"))
                            {
LABEL_260:
                              objc_msgSend(v349, "donatingUniquePids");
                              v178 = (void *)objc_claimAutoreleasedReturnValue();
                              objc_msgSend(v350, "donatingUniquePids");
                              v179 = objc_claimAutoreleasedReturnValue();
                              v180 = (void *)v179;
                              if ((v178 != 0) != (v179 != 0)
                                || v178 && v179 && (objc_msgSend(v178, "isEqualToSet:", v179) & 1) == 0)
                              {
                                v359[0] = MEMORY[0x1E0C809B0];
                                v359[1] = 3221225472;
                                v359[2] = __461__SASamplePrinter_stateChangeStringForThreadState_serialDispatchQueue_swiftTaskStates_thread_threadStateIndexes_taskState_task_iteratorIndex_missingStateIsInAnotherStack_numSamplesOmittedSincePreviousDisplayedSample_sampleTimestamp_previousSampleTimestamp_previousDisplayedTimestamp_previousTaskState_previousThread_previousThreadState_dispatchQueueChanges_swiftTaskChanges_priorityChanges_nameChanges_threadChanges_isTimeJump_ioEventsSincePreviousThreadState___block_invoke_3;
                                v359[3] = &unk_1E71497D8;
                                v360 = v337;
                                v361 = v348;
                                v362 = &v367;
                                v181 = MEMORY[0x1BCCCC450](v359);
                                v182 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v181;
                                if (v340 != 0 && v178 != 0)
                                  (*(void (**)(uint64_t, void *, void *, const __CFString *, void *))(v181 + 16))(v181, v178, v180, CFSTR("dropped"), v340);
                                objc_msgSend(v350, "startTimestamp");
                                v183 = (void *)objc_claimAutoreleasedReturnValue();
                                if (v183)
                                  ((void (**)(_QWORD, void *, void *, const __CFString *, void *))v182)[2](v182, v180, v178, CFSTR("received"), v183);

                              }
LABEL_267:
                              if (!objc_msgSend(*(id *)(v348 + 16), "displayDifferentTypesOfSuspension"))
                                goto LABEL_335;
                              if ((v342 & 1) == 0)
                              {
                                if (v351)
                                {
                                  v184 = objc_msgSend(v352, "isSuspended");
                                  if (v184 != objc_msgSend(v351, "isSuspended"))
                                  {
LABEL_271:
                                    v185 = 1;
                                    goto LABEL_278;
                                  }
                                }
                                else if ((objc_msgSend(v352, "isSuspended") & 1) != 0)
                                {
                                  goto LABEL_271;
                                }
                              }
                              v185 = 0;
LABEL_278:
                              if ((v346 & 1) != 0)
                                goto LABEL_325;
                              if (v349)
                              {
                                v186 = objc_msgSend(v350, "suspendCount");
                                v187 = v186 != objc_msgSend(v349, "suspendCount");
                                v188 = objc_msgSend(v350, "isPidSuspended");
                                if (v188 != objc_msgSend(v349, "isPidSuspended"))
                                  goto LABEL_281;
                              }
                              else
                              {
                                v187 = objc_msgSend(v350, "suspendCount") != 0;
                                if ((objc_msgSend(v350, "isPidSuspended") & 1) != 0)
                                {
LABEL_281:
                                  if (objc_msgSend(v350, "isPidSuspended"))
                                  {
                                    v189 = (void *)v368[5];
                                    if (v189)
                                    {
                                      objc_msgSend(v189, "appendString:", CFSTR(", "));
                                      v190 = CFSTR("process pidsuspended");
LABEL_303:
                                      objc_msgSend((id)v368[5], "appendFormat:", v190);
                                      if (!v187)
                                        goto LABEL_325;
                                      v191 = 1;
LABEL_305:
                                      if (objc_msgSend(v350, "suspendCount"))
                                      {
                                        v204 = (void *)v368[5];
                                        if (v204)
                                        {
                                          objc_msgSend(v204, "appendString:", CFSTR(", "));
                                        }
                                        else
                                        {
                                          v208 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
                                          v209 = (void *)v368[5];
                                          v368[5] = v208;

                                        }
                                        v200 = (void *)v368[5];
                                        v201 = objc_msgSend(v350, "suspendCount");
                                        v202 = CFSTR("process suspend count %d");
LABEL_318:
                                        objc_msgSend(v200, "appendFormat:", v202, v201);
                                        goto LABEL_325;
                                      }
                                      if ((v191 & 1) != 0 || !objc_msgSend(v350, "isPidSuspended"))
                                      {
                                        if ((v185 & 1) == 0 && objc_msgSend(v352, "isSuspended"))
                                        {
                                          v207 = (void *)v368[5];
                                          if (v207)
                                          {
                                            objc_msgSend(v207, "appendString:", CFSTR(", "));
                                          }
                                          else
                                          {
                                            v275 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
                                            v276 = (void *)v368[5];
                                            v368[5] = v275;

                                          }
                                          objc_msgSend((id)v368[5], "appendFormat:", CFSTR("process suspend count 0 (thread still suspended)"));
                                          goto LABEL_336;
                                        }
                                        v210 = (void *)v368[5];
                                        if (v210)
                                        {
                                          objc_msgSend(v210, "appendString:", CFSTR(", "));
                                          v206 = CFSTR("process suspend count 0");
                                          goto LABEL_324;
                                        }
                                        v211 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
                                        v212 = (void *)v368[5];
                                        v368[5] = v211;
                                        v206 = CFSTR("process suspend count 0");
                                      }
                                      else
                                      {
                                        v205 = (void *)v368[5];
                                        if (v205)
                                        {
                                          objc_msgSend(v205, "appendString:", CFSTR(", "));
                                          v206 = CFSTR("process suspend count 0 (process still pidsuspended)");
LABEL_324:
                                          objc_msgSend((id)v368[5], "appendFormat:", v206);
LABEL_325:
                                          if (!v185)
                                            goto LABEL_335;
                                          v214 = objc_msgSend(v352, "isSuspended");
                                          v215 = (void *)v368[5];
                                          if (v214)
                                          {
                                            if (v215)
                                            {
                                              objc_msgSend(v215, "appendString:", CFSTR(", "));
                                              v216 = CFSTR("thread suspended");
LABEL_334:
                                              objc_msgSend((id)v368[5], "appendFormat:", v216);
LABEL_335:
                                              if ((v346 & 1) != 0)
                                                goto LABEL_371;
LABEL_336:
                                              if (v349)
                                              {
                                                v220 = objc_msgSend(v350, "isSuppressed");
                                                if (v220 == objc_msgSend(v349, "isSuppressed"))
                                                {
LABEL_349:
                                                  v227 = objc_msgSend(v350, "latencyQos");
                                                  if (v227 == objc_msgSend(v349, "latencyQos"))
                                                    goto LABEL_371;
                                                  goto LABEL_353;
                                                }
                                              }
                                              else if ((objc_msgSend(v350, "isSuppressed") & 1) == 0)
                                              {
                                                goto LABEL_351;
                                              }
                                              v221 = objc_msgSend(v350, "isSuppressed");
                                              v222 = (void *)v368[5];
                                              if (v221)
                                              {
                                                if (v222)
                                                {
                                                  objc_msgSend(v222, "appendString:", CFSTR(", "));
                                                  v223 = CFSTR("process suppressed");
                                                  goto LABEL_348;
                                                }
                                                v224 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
                                                v225 = (void *)v368[5];
                                                v368[5] = v224;
                                                v223 = CFSTR("process suppressed");
                                              }
                                              else
                                              {
                                                if (v222)
                                                {
                                                  objc_msgSend(v222, "appendString:", CFSTR(", "));
                                                  v223 = CFSTR("process unsuppressed");
                                                  goto LABEL_348;
                                                }
                                                v226 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
                                                v225 = (void *)v368[5];
                                                v368[5] = v226;
                                                v223 = CFSTR("process unsuppressed");
                                              }

LABEL_348:
                                              objc_msgSend((id)v368[5], "appendFormat:", v223);
                                              if (v349)
                                                goto LABEL_349;
LABEL_351:
                                              v228 = objc_msgSend(v350, "latencyQos");
                                              if (!v228 || v228 == 16711681)
                                              {
LABEL_371:
                                                if ((v342 & 1) == 0)
                                                {
                                                  if (v351
                                                    && (v240 = objc_msgSend(v352, "ioTier"),
                                                        v240 == objc_msgSend(v351, "ioTier"))
                                                    && (v241 = objc_msgSend(v352, "isIOPassive"),
                                                        v241 == objc_msgSend(v351, "isIOPassive")))
                                                  {
                                                    if ((a20 & 1) == 0)
                                                      goto LABEL_399;
                                                  }
                                                  else
                                                  {
                                                    v242 = (void *)v368[5];
                                                    if (v242)
                                                    {
                                                      objc_msgSend(v242, "appendString:", CFSTR(", "));
                                                    }
                                                    else
                                                    {
                                                      v243 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
                                                      v244 = (void *)v368[5];
                                                      v368[5] = v243;

                                                    }
                                                    objc_msgSend((id)v368[5], "appendFormat:", CFSTR("IO tier %d"), objc_msgSend(v352, "ioTier"));
                                                    if (objc_msgSend(v352, "isIOPassive"))
                                                      objc_msgSend((id)v368[5], "appendString:", CFSTR(" and passive"));
                                                    if ((a20 & 1) == 0)
                                                      goto LABEL_399;
                                                    if (!v351)
                                                      goto LABEL_386;
                                                  }
                                                  v245 = objc_msgSend(v351, "scheduledPriority");
                                                  if (v245 != objc_msgSend(v352, "scheduledPriority")
                                                    || (v246 = objc_msgSend(v351, "basePriority"),
                                                        v246 != objc_msgSend(v352, "basePriority")))
                                                  {
LABEL_386:
                                                    if ((objc_msgSend(v352, "scheduledPriority") & 0x80000000) == 0)
                                                    {
                                                      v247 = objc_msgSend(v352, "basePriority");
                                                      v248 = (void *)v368[5];
                                                      if (v247 < 0)
                                                      {
                                                        if (v248)
                                                        {
                                                          objc_msgSend(v248, "appendString:", CFSTR(", "));
                                                        }
                                                        else
                                                        {
                                                          v252 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
                                                          v253 = (void *)v368[5];
                                                          v368[5] = v252;

                                                        }
                                                        objc_msgSend((id)v368[5], "appendFormat:", CFSTR("priority %d"), objc_msgSend(v352, "scheduledPriority"));
                                                      }
                                                      else
                                                      {
                                                        if (v248)
                                                        {
                                                          objc_msgSend(v248, "appendString:", CFSTR(", "));
                                                        }
                                                        else
                                                        {
                                                          v250 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
                                                          v251 = (void *)v368[5];
                                                          v368[5] = v250;

                                                        }
                                                        objc_msgSend((id)v368[5], "appendFormat:", CFSTR("priority %d (%d)"), objc_msgSend(v352, "scheduledPriority"), objc_msgSend(v352, "basePriority"));
                                                      }
                                                    }
                                                  }
                                                }
LABEL_399:
                                                if (objc_msgSend(v343, "count"))
                                                {
                                                  v254 = (void *)v368[5];
                                                  if (v254)
                                                  {
                                                    objc_msgSend(v254, "appendString:", CFSTR(", "));
                                                  }
                                                  else
                                                  {
                                                    v255 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
                                                    v256 = (void *)v368[5];
                                                    v368[5] = v255;

                                                  }
                                                  v257 = (void *)v368[5];
                                                  v258 = (void *)-[SASamplePrinter copyDescriptionForIOEvents:]((id *)v348, v343);
                                                  objc_msgSend(v257, "appendString:", v258);

                                                }
                                                if ((v334 & 1) == 0)
                                                {
                                                  objc_msgSend(*(id *)(v348 + 160), "mountStatusTracker");
                                                  v259 = (void *)objc_claimAutoreleasedReturnValue();
                                                  v260 = -[SAMountStatusTracker hasUnresponsiveMountsForThreadID:]((uint64_t)v259, objc_msgSend(v347, "threadId"));

                                                  if (v260)
                                                  {
                                                    v261 = v340;
                                                    if (!v340)
                                                      v261 = *(void **)(v348 + 32);
                                                    v262 = v261;
                                                    if (v338 | v336)
                                                    {
                                                      *(_QWORD *)buf = 0;
                                                      *(_QWORD *)&buf[8] = buf;
                                                      *(_QWORD *)&buf[16] = 0x3032000000;
                                                      v374 = __Block_byref_object_copy__4;
                                                      *(_QWORD *)v375 = __Block_byref_object_dispose__4;
                                                      v263 = v352;
                                                      *(_QWORD *)&v375[8] = v263;
                                                      v264 = *(void **)(v348 + 40);
                                                      v355[0] = MEMORY[0x1E0C809B0];
                                                      v355[1] = 3221225472;
                                                      v355[2] = __461__SASamplePrinter_stateChangeStringForThreadState_serialDispatchQueue_swiftTaskStates_thread_threadStateIndexes_taskState_task_iteratorIndex_missingStateIsInAnotherStack_numSamplesOmittedSincePreviousDisplayedSample_sampleTimestamp_previousSampleTimestamp_previousDisplayedTimestamp_previousTaskState_previousThread_previousThreadState_dispatchQueueChanges_swiftTaskChanges_priorityChanges_nameChanges_threadChanges_isTimeJump_ioEventsSincePreviousThreadState___block_invoke_4;
                                                      v355[3] = &unk_1E7149800;
                                                      v356 = v347;
                                                      v358 = buf;
                                                      v357 = v263;
                                                      -[SASamplePrinter iterateDispatchQueue:orSwiftTaskStates:orThread:threadStateIndexes:startingAtIndex:endingAfterTimestamp:task:stopAtTimeJumps:callback:](v348, (void *)v338, (void *)v336, 0, 0, a9 + 1, v264, 0, 0, v355);
                                                      objc_msgSend(*(id *)(*(_QWORD *)&buf[8] + 40), "endTimestamp");
                                                      v265 = (void *)objc_claimAutoreleasedReturnValue();

                                                      _Block_object_dispose(buf, 8);
                                                    }
                                                    else
                                                    {
                                                      objc_msgSend(v347, "threadStates");
                                                      v266 = (void *)objc_claimAutoreleasedReturnValue();
                                                      if (v335)
                                                      {
                                                        objc_msgSend(v335, "lastObject");
                                                        v267 = (void *)objc_claimAutoreleasedReturnValue();
                                                        objc_msgSend(v266, "objectAtIndexedSubscript:", objc_msgSend(v267, "unsignedLongValue"));
                                                        v268 = (void *)objc_claimAutoreleasedReturnValue();
                                                        objc_msgSend(v268, "endTimestamp");
                                                        v265 = (void *)objc_claimAutoreleasedReturnValue();

                                                      }
                                                      else
                                                      {
                                                        objc_msgSend(v266, "lastObject");
                                                        v269 = (void *)objc_claimAutoreleasedReturnValue();
                                                        objc_msgSend(v269, "endTimestamp");
                                                        v265 = (void *)objc_claimAutoreleasedReturnValue();

                                                      }
                                                    }
                                                    if (objc_msgSend(*(id *)(v348 + 160), "sanitizePaths"))v270 = os_variant_has_internal_diagnostics() ^ 1;
                                                    else
                                                      v270 = 0;
                                                    objc_msgSend(*(id *)(v348 + 160), "mountStatusTracker");
                                                    v271 = (void *)objc_claimAutoreleasedReturnValue();
                                                    v272 = objc_msgSend(v347, "threadId");
                                                    v353[0] = MEMORY[0x1E0C809B0];
                                                    v353[1] = 3221225472;
                                                    v353[2] = __461__SASamplePrinter_stateChangeStringForThreadState_serialDispatchQueue_swiftTaskStates_thread_threadStateIndexes_taskState_task_iteratorIndex_missingStateIsInAnotherStack_numSamplesOmittedSincePreviousDisplayedSample_sampleTimestamp_previousSampleTimestamp_previousDisplayedTimestamp_previousTaskState_previousThread_previousThreadState_dispatchQueueChanges_swiftTaskChanges_priorityChanges_nameChanges_threadChanges_isTimeJump_ioEventsSincePreviousThreadState___block_invoke_5;
                                                    v353[3] = &unk_1E7149828;
                                                    v354 = v270;
                                                    v353[4] = &v367;
                                                    -[SAMountStatusTracker enumerateMountsBlockingThread:betweenStartTime:endTime:block:]((uint64_t)v271, v272, v262, v265, v353);

                                                  }
                                                }
                                                v273 = (id)v368[5];
                                                _Block_object_dispose(&v367, 8);

                                                goto LABEL_419;
                                              }
LABEL_353:
                                              v229 = objc_msgSend(v350, "latencyQos");
                                              v230 = (void *)v368[5];
                                              if (v229)
                                              {
                                                if (v230)
                                                {
                                                  objc_msgSend(v230, "appendString:", CFSTR(", "));
                                                }
                                                else
                                                {
                                                  v231 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
                                                  v232 = (void *)v368[5];
                                                  v368[5] = v231;

                                                }
                                                v233 = (void *)v368[5];
                                                LODWORD(v234) = objc_msgSend(v350, "latencyQos") - 16711681;
                                                if (v234 >= 6)
                                                  v234 = 0xFFFFFFFFLL;
                                                else
                                                  v234 = v234;
                                                objc_msgSend(v233, "appendFormat:", CFSTR("timers tier %d"), v234);
                                              }
                                              else
                                              {
                                                if (v230)
                                                {
                                                  objc_msgSend(v230, "appendString:", CFSTR(", "));
                                                }
                                                else
                                                {
                                                  v235 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
                                                  v236 = (void *)v368[5];
                                                  v368[5] = v235;

                                                }
                                                objc_msgSend((id)v368[5], "appendFormat:", CFSTR("timers tier unspecified"));
                                              }
                                              v237 = objc_msgSend(v350, "latencyQos");
                                              v238 = CFSTR(" (normal)");
                                              if (v237 && v237 != 16711681)
                                              {
                                                if (objc_msgSend(v350, "latencyQos", CFSTR(" (normal)"))
                                                   - 16711682 >= 3)
                                                {
                                                  v249 = objc_msgSend(v350, "latencyQos");
                                                  v239 = (void *)v368[5];
                                                  if ((v249 - 16711685) >= 2)
                                                  {
                                                    objc_msgSend(v239, "appendFormat:", CFSTR(" (unknown: 0x%x)"), objc_msgSend(v350, "latencyQos"));
                                                    goto LABEL_371;
                                                  }
                                                  v238 = CFSTR(" (throttled)");
LABEL_370:
                                                  objc_msgSend(v239, "appendString:", v238);
                                                  goto LABEL_371;
                                                }
                                                v238 = CFSTR(" (coalesced)");
                                              }
                                              v239 = (void *)v368[5];
                                              goto LABEL_370;
                                            }
                                            v217 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
                                            v218 = (void *)v368[5];
                                            v368[5] = v217;
                                            v216 = CFSTR("thread suspended");
                                          }
                                          else
                                          {
                                            if (v215)
                                            {
                                              objc_msgSend(v215, "appendString:", CFSTR(", "));
                                              v216 = CFSTR("thread unsuspended");
                                              goto LABEL_334;
                                            }
                                            v219 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
                                            v218 = (void *)v368[5];
                                            v368[5] = v219;
                                            v216 = CFSTR("thread unsuspended");
                                          }

                                          goto LABEL_334;
                                        }
                                        v213 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
                                        v212 = (void *)v368[5];
                                        v368[5] = v213;
                                        v206 = CFSTR("process suspend count 0 (process still pidsuspended)");
                                      }

                                      goto LABEL_324;
                                    }
                                    v195 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
                                    v196 = (void *)v368[5];
                                    v368[5] = v195;
                                    v190 = CFSTR("process pidsuspended");
                                  }
                                  else
                                  {
                                    if (!v187 && objc_msgSend(v350, "suspendCount"))
                                    {
                                      v192 = (void *)v368[5];
                                      if (v192)
                                      {
                                        objc_msgSend(v192, "appendString:", CFSTR(", "));
                                      }
                                      else
                                      {
                                        v198 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
                                        v199 = (void *)v368[5];
                                        v368[5] = v198;

                                      }
                                      v200 = (void *)v368[5];
                                      v201 = objc_msgSend(v350, "suspendCount");
                                      v202 = CFSTR("process unpidsuspended (process suspend count still %d)");
                                      goto LABEL_318;
                                    }
                                    if ((v185 & 1) != 0 || !objc_msgSend(v352, "isSuspended"))
                                    {
                                      v194 = (void *)v368[5];
                                      if (v194)
                                      {
                                        objc_msgSend(v194, "appendString:", CFSTR(", "));
                                        v190 = CFSTR("process unpidsuspended");
                                        goto LABEL_303;
                                      }
                                      v197 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
                                      v196 = (void *)v368[5];
                                      v368[5] = v197;
                                      v190 = CFSTR("process unpidsuspended");
                                    }
                                    else
                                    {
                                      v193 = (void *)v368[5];
                                      if (v193)
                                      {
                                        objc_msgSend(v193, "appendString:", CFSTR(", "));
                                        v190 = CFSTR("process unpidsuspended (thread still suspended)");
                                        goto LABEL_303;
                                      }
                                      v203 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
                                      v196 = (void *)v368[5];
                                      v368[5] = v203;
                                      v190 = CFSTR("process unpidsuspended (thread still suspended)");
                                    }
                                  }

                                  goto LABEL_303;
                                }
                              }
                              if (!v187)
                                goto LABEL_325;
                              v191 = 0;
                              goto LABEL_305;
                            }
                          }
                          else if ((objc_msgSend(v350, "isDarwinBG") & 1) == 0)
                          {
                            goto LABEL_260;
                          }
                          v172 = (void *)v368[5];
                          if (v172)
                          {
                            objc_msgSend(v172, "appendString:", CFSTR(", "));
                          }
                          else
                          {
                            v173 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
                            v174 = (void *)v368[5];
                            v368[5] = v173;

                          }
                          v175 = (void *)v368[5];
                          if (objc_msgSend(v350, "isDarwinBG"))
                            v176 = &stru_1E714A250;
                          else
                            v176 = CFSTR("not ");
                          v177 = &stru_1E714A250;
                          if ((objc_msgSend(v350, "isDarwinBG") & 1) == 0
                            && (v165 & objc_msgSend(v352, "isDarwinBG")) != 0)
                          {
                            v177 = CFSTR(" (thread still darwinbg)");
                          }
                          objc_msgSend(v175, "appendFormat:", CFSTR("process %@darwinbg%@"), v176, v177);
                          goto LABEL_260;
                        }
                      }
                      else if ((objc_msgSend(v352, "isDarwinBG") & 1) != 0)
                      {
                        goto LABEL_237;
                      }
                    }
                    v165 = 1;
                    goto LABEL_245;
                  }
LABEL_224:
                  v157 = objc_msgSend(v350, "isBoosted");
                  v158 = (void *)v368[5];
                  if (v157)
                  {
                    if (v158)
                    {
                      objc_msgSend(v158, "appendString:", CFSTR(", "));
                      v159 = CFSTR("process unclamped");
LABEL_232:
                      objc_msgSend((id)v368[5], "appendFormat:", v159);
                      goto LABEL_233;
                    }
                    v160 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
                    v161 = (void *)v368[5];
                    v368[5] = v160;
                    v159 = CFSTR("process unclamped");
                  }
                  else
                  {
                    if (v158)
                    {
                      objc_msgSend(v158, "appendString:", CFSTR(", "));
                      v159 = CFSTR("process clamped");
                      goto LABEL_232;
                    }
                    v162 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
                    v161 = (void *)v368[5];
                    v368[5] = v162;
                    v159 = CFSTR("process clamped");
                  }

                  goto LABEL_232;
                }
                if (v349)
                {
                  v149 = objc_msgSend(v350, "isDirty");
                  if (v149 == objc_msgSend(v349, "isDirty"))
                    goto LABEL_221;
                }
                v150 = objc_msgSend(v350, "isDirty");
                v151 = (void *)v368[5];
                if (v150)
                {
                  if (v151)
                  {
                    objc_msgSend(v151, "appendString:", CFSTR(", "));
                    v152 = CFSTR("process sudden termination dirty");
LABEL_219:
                    objc_msgSend((id)v368[5], "appendFormat:", v152);
                    goto LABEL_220;
                  }
                  v153 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
                  v154 = (void *)v368[5];
                  v368[5] = v153;
                  v152 = CFSTR("process sudden termination dirty");
                }
                else
                {
                  if (v151)
                  {
                    objc_msgSend(v151, "appendString:", CFSTR(", "));
                    v152 = CFSTR("process sudden termination clean");
                    goto LABEL_219;
                  }
                  v155 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
                  v154 = (void *)v368[5];
                  v368[5] = v155;
                  v152 = CFSTR("process sudden termination clean");
                }

                goto LABEL_219;
              }
              goto LABEL_166;
            }
LABEL_164:
            v332 = 0;
            v130 = 1;
            goto LABEL_167;
          }
        }
        v130 = 1;
        v332 = 1;
        goto LABEL_167;
      }
      if (v349)
      {
        v112 = objc_msgSend(v350, "isForeground");
        if (v112 == objc_msgSend(v349, "isForeground"))
          goto LABEL_155;
      }
      else if ((objc_msgSend(v350, "isForeground") & 1) == 0)
      {
        goto LABEL_155;
      }
      v113 = objc_msgSend(v350, "isForeground");
      v114 = (void *)v368[5];
      if (v113)
      {
        if (v114)
        {
          objc_msgSend(v114, "appendString:", CFSTR(", "));
          v115 = CFSTR("process frontmost");
LABEL_154:
          objc_msgSend((id)v368[5], "appendFormat:", v115);
          goto LABEL_155;
        }
        v116 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
        v117 = (void *)v368[5];
        v368[5] = v116;
        v115 = CFSTR("process frontmost");
      }
      else
      {
        if (v114)
        {
          objc_msgSend(v114, "appendString:", CFSTR(", "));
          v115 = CFSTR("process non-frontmost");
          goto LABEL_154;
        }
        v118 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
        v117 = (void *)v368[5];
        v368[5] = v118;
        v115 = CFSTR("process non-frontmost");
      }

      goto LABEL_154;
    }
    if (v351)
      a6 = (void *)(objc_msgSend(v351, "endSampleIndex") + 1);
    else
      a6 = *(void **)(a1 + 48);
    v49 = objc_msgSend(v352, "startSampleIndex");
    if (v49 <= *(_QWORD *)(a1 + 48))
      v50 = *(_QWORD *)(a1 + 48);
    else
      v50 = v49;
    v51 = v50 - (_QWORD)a6;
    if (v50 >= (unint64_t)a6)
    {
      if ((unint64_t)a6 + a11 < v50)
      {
        if ((a10 & 1) != 0)
        {
          v52 = CFSTR("in another call tree");
        }
        else
        {
          v52 = CFSTR("not seen");
          if (!v338 && !v336 && v335)
          {
            objc_msgSend(v347, "threadStates");
            v53 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v53, "firstObject");
            v54 = (id)objc_claimAutoreleasedReturnValue();
            if (v54 == v352)
            {
              v52 = CFSTR("not seen");
            }
            else
            {
              objc_msgSend(v347, "threadStates");
              v55 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v55, "firstObject");
              v56 = (void *)objc_claimAutoreleasedReturnValue();
              v52 = CFSTR("in another call tree");
              if (objc_msgSend(v56, "startSampleIndex") == 0x7FFFFFFFFFFFFFFFLL)
              {
                v345 = objc_msgSend(v352, "startSampleIndex");
                objc_msgSend(v347, "threadStates");
                v57 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v57, "firstObject");
                v58 = (void *)objc_claimAutoreleasedReturnValue();
                if (v345 == objc_msgSend(v58, "endSampleIndex") + 1)
                  v52 = CFSTR("not seen");

              }
            }

          }
        }
        v59 = (void *)v368[5];
        if (v59)
        {
          objc_msgSend(v59, "appendString:", CFSTR(", "));
        }
        else
        {
          v60 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
          v61 = (void *)v368[5];
          v368[5] = v60;

        }
        v62 = CFSTR("s");
        if (v51 == 1)
          v62 = &stru_1E714A250;
        objc_msgSend((id)v368[5], "appendFormat:", CFSTR("%@ %@ for %lu sample%@"), v43, v52, v51, v62);
      }
      goto LABEL_64;
    }
    goto LABEL_428;
  }
  if (!v336)
  {
    v43 = CFSTR("Thread");
    goto LABEL_19;
  }
  v45 = *(_QWORD *)(a1 + 16);
  if (v45)
  {
    switch(*(_QWORD *)(v45 + 160))
    {
      case 0:
        if (*(_BYTE *)(v45 + 14))
          goto LABEL_54;
        goto LABEL_25;
      case 1:
        v277 = *__error();
        _sa_logt();
        v278 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v278, OS_LOG_TYPE_ERROR))
        {
          objc_msgSend(*(id *)(a1 + 16), "debugDescription");
          v279 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v280 = objc_msgSend(v279, "UTF8String");
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v280;
          _os_log_error_impl(&dword_1B9BE0000, v278, OS_LOG_TYPE_ERROR, "state for swiftTaskStates, but kSAAggregateSwiftAsyncTogetherWithOtherCallTrees: %s", buf, 0xCu);

        }
        *__error() = v277;
        objc_msgSend(*(id *)(a1 + 16), "debugDescription");
        v281 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v282 = objc_msgSend(v281, "UTF8String");
        _SASetCrashLogMessage(9786, "state for swiftTaskStates, but kSAAggregateSwiftAsyncTogetherWithOtherCallTrees: %s", v283, v284, v285, v286, v287, v288, v282);

        _os_crash();
        __break(1u);
        goto LABEL_425;
      case 2:
LABEL_54:
        v43 = CFSTR("Swift Async Base Function");
        break;
      case 3:
      case 5:
LABEL_25:
        v43 = CFSTR("Swift Task");
        break;
      case 4:
        v43 = CFSTR("Swift Async");
        goto LABEL_19;
      default:
        v43 = 0;
        goto LABEL_19;
    }
    goto LABEL_19;
  }
  v320 = *__error();
  _sa_logt();
  v321 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v321, OS_LOG_TYPE_ERROR))
  {
    objc_msgSend(*(id *)(a1 + 16), "debugDescription");
    v322 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v323 = objc_msgSend(v322, "UTF8String");
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v323;
    _os_log_error_impl(&dword_1B9BE0000, v321, OS_LOG_TYPE_ERROR, "swiftAsyncCallTreeAggregationResolved returned default: %s", buf, 0xCu);

  }
  *__error() = v320;
  objc_msgSend(*(id *)(a1 + 16), "debugDescription");
  v324 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v325 = objc_msgSend(v324, "UTF8String");
  _SASetCrashLogMessage(9806, "swiftAsyncCallTreeAggregationResolved returned default: %s", v326, v327, v328, v329, v330, v331, v325);

  result = (id)_os_crash();
  __break(1u);
  return result;
}

uint64_t __461__SASamplePrinter_stateChangeStringForThreadState_serialDispatchQueue_swiftTaskStates_thread_threadStateIndexes_taskState_task_iteratorIndex_missingStateIsInAnotherStack_numSamplesOmittedSincePreviousDisplayedSample_sampleTimestamp_previousSampleTimestamp_previousDisplayedTimestamp_previousTaskState_previousThread_previousThreadState_dispatchQueueChanges_swiftTaskChanges_priorityChanges_nameChanges_threadChanges_isTimeJump_ioEventsSincePreviousThreadState___block_invoke(uint64_t a1, int a2)
{
  BOOL v2;
  unsigned int v3;

  if (a2)
    v2 = a2 == 125;
  else
    v2 = 1;
  v3 = !v2;
  if (*(_BYTE *)(a1 + 32))
    return 1;
  else
    return v3;
}

BOOL __461__SASamplePrinter_stateChangeStringForThreadState_serialDispatchQueue_swiftTaskStates_thread_threadStateIndexes_taskState_task_iteratorIndex_missingStateIsInAnotherStack_numSamplesOmittedSincePreviousDisplayedSample_sampleTimestamp_previousSampleTimestamp_previousDisplayedTimestamp_previousTaskState_previousThread_previousThreadState_dispatchQueueChanges_swiftTaskChanges_priorityChanges_nameChanges_threadChanges_isTimeJump_ioEventsSincePreviousThreadState___block_invoke_2(uint64_t a1, int a2, int a3)
{
  BOOL v4;

  if (a2 == a3)
    return 0;
  if (*(_BYTE *)(a1 + 32) || a3 != 125 && a3)
    return 1;
  if (a2)
    v4 = a2 == 125;
  else
    v4 = 1;
  return !v4;
}

void __461__SASamplePrinter_stateChangeStringForThreadState_serialDispatchQueue_swiftTaskStates_thread_threadStateIndexes_taskState_task_iteratorIndex_missingStateIsInAnotherStack_numSamplesOmittedSincePreviousDisplayedSample_sampleTimestamp_previousSampleTimestamp_previousDisplayedTimestamp_previousTaskState_previousThread_previousThreadState_dispatchQueueChanges_swiftTaskChanges_priorityChanges_nameChanges_threadChanges_isTimeJump_ioEventsSincePreviousThreadState___block_invoke_3(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v30 = a4;
  v10 = a5;
  objc_msgSend(a2, "allObjects");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "sortedArrayUsingSelector:", sel_compare_);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v13 = v12;
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v32;
    do
    {
      for (i = 0; i != v15; ++i)
      {
        if (*(_QWORD *)v32 != v16)
          objc_enumerationMutation(v13);
        v18 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * i);
        v19 = objc_msgSend(v18, "unsignedLongLongValue");
        if (v19 != objc_msgSend(*(id *)(a1 + 32), "uniquePid") && (objc_msgSend(v9, "containsObject:", v18) & 1) == 0)
        {
          -[SASampleStore taskWithUniquePid:atTimestamp:](*(_QWORD **)(*(_QWORD *)(a1 + 40) + 160), objc_msgSend(v18, "unsignedLongLongValue"), v10);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          v21 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
          if (v20)
          {
            if (v21)
            {
              objc_msgSend(v21, "appendString:", CFSTR(", "));
            }
            else
            {
              v22 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
              v23 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
              v24 = *(void **)(v23 + 40);
              *(_QWORD *)(v23 + 40) = v22;

            }
            v25 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
            -[SASamplePrinter displayNameForTask:](*(void **)(a1 + 40), v20);
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v25, "appendFormat:", CFSTR("process %@ importance donation from %@"), v30, v26);

          }
          else
          {
            if (v21)
            {
              objc_msgSend(v21, "appendString:", CFSTR(", "));
            }
            else
            {
              v27 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
              v28 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
              v29 = *(void **)(v28 + 40);
              *(_QWORD *)(v28 + 40) = v27;

            }
            objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "appendFormat:", CFSTR("process %@ importance donation from %@ [%llu]"), v30, CFSTR("UNKNOWN"), objc_msgSend(v18, "unsignedLongLongValue"));
          }

        }
      }
      v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
    }
    while (v15);
  }

}

- (uint64_t)copyDescriptionForIOEvents:(id *)a1
{
  id v3;
  void *v4;
  void *v5;
  int v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  char v14;
  void *v15;
  uint64_t v16;
  uint64_t result;
  int v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint8_t buf[16];

  v3 = a2;
  v4 = v3;
  if (!a1)
    goto LABEL_26;
  if (objc_msgSend(v3, "count"))
  {
    if (objc_msgSend(v4, "count") == 1)
    {
      objc_msgSend(v4, "firstObject");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      a1 = (id *)-[SASamplePrinter copyDescriptionForIOEvent:](v5);
    }
    else
    {
      if ((unint64_t)objc_msgSend(v4, "count") < 6)
        LOBYTE(v6) = 0;
      else
        v6 = objc_msgSend(a1[2], "displayEachIndividualIOInCallTrees") ^ 1;
      v7 = objc_alloc(MEMORY[0x1E0CB37A0]);
      v8 = objc_msgSend(v4, "count");
      v9 = 5;
      if (v8 > 5)
        v9 = v8;
      a1 = (id *)objc_msgSend(v7, "initWithCapacity:", 16 * v9);
      if (objc_msgSend(v4, "count"))
      {
        v10 = 0;
        v11 = 0;
        do
        {
          objc_msgSend(v4, "objectAtIndexedSubscript:", v10);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = v12;
          if (v10 > 2)
            v14 = v6;
          else
            v14 = 0;
          if ((v14 & 1) != 0)
          {
            v11 += objc_msgSend(v12, "size");
          }
          else
          {
            if (v10)
              objc_msgSend(a1, "appendString:", CFSTR(", "));
            v15 = (void *)-[SASamplePrinter copyDescriptionForIOEvent:](v13);
            objc_msgSend(a1, "appendString:", v15);

          }
          ++v10;
        }
        while (v10 < objc_msgSend(v4, "count"));
        if ((v6 & 1) == 0)
          goto LABEL_26;
      }
      else
      {
        v11 = 0;
        if ((v6 & 1) == 0)
        {
LABEL_26:

          return (uint64_t)a1;
        }
      }
      v16 = objc_msgSend(v4, "count") - 3;
      SAFormattedBytesEx(v11, 1, 0, 0, 0x1000uLL);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1, "appendFormat:", CFSTR("... and %lu more I/Os totaling %@"), v16, v5);
    }

    goto LABEL_26;
  }
  v18 = *__error();
  _sa_logt();
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1B9BE0000, v19, OS_LOG_TYPE_ERROR, "No IO events", buf, 2u);
  }

  *__error() = v18;
  _SASetCrashLogMessage(12257, "No IO events", v20, v21, v22, v23, v24, v25, v26);
  result = _os_crash();
  __break(1u);
  return result;
}

void __461__SASamplePrinter_stateChangeStringForThreadState_serialDispatchQueue_swiftTaskStates_thread_threadStateIndexes_taskState_task_iteratorIndex_missingStateIsInAnotherStack_numSamplesOmittedSincePreviousDisplayedSample_sampleTimestamp_previousSampleTimestamp_previousDisplayedTimestamp_previousTaskState_previousThread_previousThreadState_dispatchQueueChanges_swiftTaskChanges_priorityChanges_nameChanges_threadChanges_isTimeJump_ioEventsSincePreviousThreadState___block_invoke_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _BYTE *a10)
{
  if (*(_QWORD *)(a1 + 32) == a5)
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), *(id *)(a1 + 40));
  else
    *a10 = 1;
}

void __461__SASamplePrinter_stateChangeStringForThreadState_serialDispatchQueue_swiftTaskStates_thread_threadStateIndexes_taskState_task_iteratorIndex_missingStateIsInAnotherStack_numSamplesOmittedSincePreviousDisplayedSample_sampleTimestamp_previousSampleTimestamp_previousDisplayedTimestamp_previousTaskState_previousThread_previousThreadState_dispatchQueueChanges_swiftTaskChanges_priorityChanges_nameChanges_threadChanges_isTimeJump_ioEventsSincePreviousThreadState___block_invoke_5(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;

  v17 = a2;
  v5 = a3;
  v6 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  if (*(_BYTE *)(a1 + 40))
  {
    if (v6)
    {
      objc_msgSend(v6, "appendString:", CFSTR(", "));
    }
    else
    {
      v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v9 = *(void **)(v8 + 40);
      *(_QWORD *)(v8 + 40) = v7;

    }
    v10 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    SACopySanitizedString(v5, 1, 0);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "appendFormat:", CFSTR("Thread becomes blocked by network mount (%@)"), v11);
  }
  else
  {
    if (v6)
    {
      objc_msgSend(v6, "appendString:", CFSTR(", "));
    }
    else
    {
      v12 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v14 = *(void **)(v13 + 40);
      *(_QWORD *)(v13 + 40) = v12;

    }
    v15 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    SACopySanitizedString(v17, 1, 0);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    SACopySanitizedString(v5, 1, 0);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "appendFormat:", CFSTR("Thread becomes blocked by network mount %@ (%@)"), v11, v16);

  }
}

uint64_t __245__SASamplePrinter_addStackForDispatchQueue_orSwiftTaskStates_orThread_andThreadStateIndexes_task_toRootObjects_nameChanges_dispatchQueueChanges_swiftTaskChanges_threadChanges_priorityChanges_microstackshotSummary_onlyHeaviestStack_includeState___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "compare:");
}

void __245__SASamplePrinter_addStackForDispatchQueue_orSwiftTaskStates_orThread_andThreadStateIndexes_task_toRootObjects_nameChanges_dispatchQueueChanges_swiftTaskChanges_threadChanges_priorityChanges_microstackshotSummary_onlyHeaviestStack_includeState___block_invoke_1539(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, void *a5, char *a6, void *a7, int a8, char a9)
{
  uint64_t v9;
  uint64_t p_vtable;
  unsigned __int8 *v16;
  id v17;
  id *v18;
  id *v19;
  uint64_t v20;
  void *v21;
  int v22;
  void *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  void *v31;
  void *v32;
  int v33;
  uint64_t v34;
  void *v35;
  void *v36;
  char v37;
  id v38;
  uint64_t v39;
  const char *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id Property;
  id v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  id v54;
  id v55;
  const char *v56;
  id v57;
  int v58;
  id v59;
  void *v60;
  id v61;
  int v62;
  const char *v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v79;
  unint64_t v80;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  int v85;
  int v86;
  const char *v87;
  const char *v88;
  uint64_t v89;
  BOOL v90;
  char v91;
  unint64_t v92;
  uint64_t v94;
  void *v95;
  void *v96;
  uint64_t v97;
  const char *v98;
  id v99;
  id v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  id v114;
  void *v115;
  uint64_t v116;
  void *v117;
  void *v118;
  void *v119;
  id v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  uint64_t v125;
  int v126;
  void *v127;
  void *v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  _BOOL4 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  id *v143;
  uint64_t v144;
  void *v145;
  void *v146;
  SEL v147;
  id v148;
  uint64_t v149;
  void *v150;
  unint64_t v151;
  _BYTE *v152;
  id v153;
  void *v154;
  void *v155;
  void *v156;
  void *v157;
  unint64_t v158;
  uint64_t v159;
  NSObject *v160;
  uint64_t v161;
  unint64_t isa;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned __int8 *v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  void *v178;
  uint64_t v179;
  unsigned __int8 *v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  id v189;
  uint64_t v190;
  uint64_t v191;
  const char *v192;
  void *v193;
  int v194;
  NSObject *v195;
  id v196;
  id v197;
  uint64_t v198;
  uint64_t v199;
  void *v200;
  id v201;
  uint64_t v202;
  uint64_t v203;
  const char *v204;
  void *v205;
  void *v206;
  unsigned int v207;
  unsigned int v208;
  char *v209;
  void *v210;
  void *v211;
  void *v212;
  const char *v213;
  void *v214;
  unsigned int v215;
  char *v216;
  unsigned int v217;
  uint64_t v218;
  unsigned int v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  unsigned int v223;
  char *v224;
  void *v225;
  void *v226;
  const char *v227;
  void *v228;
  id v229;
  id v230;
  void *v231;
  const char *v232;
  id v233;
  id v234;
  void *v235;
  const char *v236;
  id v237;
  id v238;
  _BYTE *v239;
  id v240;
  uint64_t v241;
  uint64_t v242;
  unsigned int v243;
  unsigned int v244;
  int v245;
  uint64_t v246;
  char v247;
  SATimeRange *v248;
  char *v249;
  unsigned int *v250;
  const char *v251;
  void *v252;
  id v253;
  id v254;
  const char *v255;
  id v256;
  id v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  BOOL v262;
  BOOL v264;
  uint64_t v265;
  char v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  const char *v270;
  id v271;
  const char *v272;
  int v273;
  void *v274;
  unint64_t v275;
  id v276;
  id v277;
  const char *v278;
  int v279;
  int v280;
  int v281;
  int v282;
  id v283;
  const char *v284;
  int v285;
  char v286;
  ptrdiff_t v287;
  uint64_t v288;
  int v289;
  uint64_t v290;
  char v291;
  uint64_t v292;
  const char *v293;
  int *v294;
  const char *v295;
  const char *v296;
  void *v297;
  id v298;
  SATimeRange *v299;
  uint64_t v300;
  const char *v301;
  id v302;
  id v303;
  id v304;
  const char *v305;
  id v306;
  void *v307;
  void *v308;
  char v309;
  const char *v310;
  id v311;
  void *v312;
  void *v313;
  const char *v314;
  id v315;
  void *v316;
  id v317;
  const char *v318;
  id v319;
  void *v320;
  const char *v321;
  void *v322;
  id *v323;
  SEL v324;
  id v325;
  SEL v326;
  id v327;
  void *v328;
  const char *v329;
  id v330;
  uint64_t v331;
  const char *v332;
  unint64_t v333;
  id v334;
  void *v335;
  void *v336;
  char v337;
  id v338;
  unint64_t v339;
  id v340;
  unint64_t v341;
  const char *v342;
  id v343;
  unint64_t v344;
  SEL v345;
  id v346;
  void *v347;
  const char *v348;
  void *v349;
  SEL v350;
  id v351;
  uint64_t v352;
  void *v353;
  uint64_t v354;
  SATimeRange *v355;
  const char *v356;
  SEL v357;
  id v358;
  void *v359;
  const char *v360;
  void *v361;
  uint64_t v362;
  NSObject *v363;
  id v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  int v374;
  NSObject *v375;
  void *v376;
  int v377;
  NSObject *v378;
  id v379;
  id v380;
  char v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  void *v388;
  int v389;
  NSObject *v390;
  id v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  id v399;
  int v400;
  NSObject *v401;
  id v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  char v410;
  int v411;
  int v412;
  NSObject *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  int v420;
  NSObject *v421;
  id v422;
  uint64_t v423;
  id v424;
  char v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  int v432;
  NSObject *v433;
  const char *v434;
  int v435;
  const char *v436;
  int v437;
  id v438;
  int v439;
  NSObject *v440;
  id v441;
  uint64_t v442;
  id v443;
  uint64_t v444;
  id v445;
  id v446;
  id v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  int v454;
  NSObject *v455;
  id v456;
  uint64_t v457;
  id v458;
  uint64_t v459;
  id v460;
  id v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  int v468;
  NSObject *v469;
  uint64_t v470;
  id v471;
  char v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  int v479;
  NSObject *v480;
  objc_class *v481;
  uint64_t v482;
  objc_class *v483;
  char v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  int v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  unint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  void *v502;
  void *v503;
  uint64_t v504;
  _BOOL4 v505;
  _BOOL4 v506;
  _BOOL4 v507;
  _BOOL4 v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  NSObject *v515;
  uint64_t v516;
  void *v517;
  int v518;
  NSObject *v519;
  id v520;
  id v521;
  uint64_t v522;
  char v523;
  id v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  int v531;
  NSObject *v532;
  id v533;
  id v534;
  uint64_t v535;
  id v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  id v547;
  uint64_t v548;
  uint64_t v549;
  id v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  unsigned int v558;
  char v559;
  char v560;
  uint64_t v561;
  int v562;
  char v563;
  id v564;
  id v565;
  id v566;
  id v567;
  void *v568;
  id v569;
  id v570;
  int v571;
  void *v572;
  void *v573;
  id v574;
  id v575;
  id v576;
  int v577;
  uint64_t v578;
  unsigned __int8 *v579;
  _BOOL4 v580;
  unint64_t v581;
  id v582;
  void *v584;
  unsigned __int8 *v585;
  id obj;
  id *v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  id v591;
  uint64_t v592;
  _BOOL4 v593;
  uint64_t v594;
  uint64_t v595;
  void *v597;
  uint64_t v598;
  int v599;
  unint64_t v600;
  unint64_t v601;
  unint64_t v602;
  void *v603;
  uint64_t v604;
  uint64_t v605;
  unint64_t v606;
  unint64_t v607;
  int v608;
  id v609;
  id v610;
  void *v611;
  __int128 v612;
  __int128 v613;
  __int128 v614;
  __int128 v615;
  __int128 v616;
  __int128 v617;
  __int128 v618;
  __int128 v619;
  __int128 v620;
  __int128 v621;
  __int128 v622;
  __int128 v623;
  id v624;
  id newValue;
  id v626;
  __int128 v627;
  __int128 v628;
  __int128 v629;
  __int128 v630;
  uint8_t buf[4];
  unint64_t v632;
  __int16 v633;
  uint64_t v634;
  __int16 v635;
  unint64_t v636;
  __int16 v637;
  _BYTE v638[34];
  __int16 v639;
  uint64_t v640;
  __int16 v641;
  uint64_t v642;
  __int16 v643;
  uint64_t v644;
  __int16 v645;
  uint64_t v646;
  __int16 v647;
  _BYTE v648[14];
  __int16 v649;
  _BYTE v650[10];
  uint64_t v651;
  _BYTE v652[128];
  _BYTE v653[128];
  _BYTE v654[128];
  _BYTE v655[128];
  uint64_t v656;

  LODWORD(v598) = a8;
  v656 = *MEMORY[0x1E0C80C00];
  v16 = a4;
  v584 = a5;
  v17 = a5;
  v582 = a7;
  v18 = a7;
  v19 = v18;
  v585 = v16;
  v587 = v18;
  v611 = v17;
  v594 = a2;
  if (a3 != 0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "sampleTimestamps");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "objectAtIndexedSubscript:", a3);
    v20 = objc_claimAutoreleasedReturnValue();

    v24 = objc_msgSend(v19, "endSampleIndex");
    v25 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56);
    if (v24 < v25)
      v25 = v24;
    v606 = v25;
    if (v16 && *(_BYTE *)(a1 + 248))
    {
      v26 = objc_msgSend(v16, "endSampleIndex");
      v27 = v606;
      if (v606 >= v26)
        v27 = v26;
      v606 = v27;
    }
    v9 = v606;
    if (v606 < a3)
    {
      v374 = *__error();
      _sa_logt();
      v375 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v375, OS_LOG_TYPE_FAULT))
      {
LABEL_613:

        v96 = 0;
        *__error() = v374;
        v95 = v611;
        goto LABEL_590;
      }
LABEL_688:
      v498 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 176);
      -[SAThreadState debugDescriptionWithThread:](v587, v611);
      v610 = (id)objc_claimAutoreleasedReturnValue();
      -[SATaskState debugDescriptionWithTask:]((uint64_t)v16, *(void **)(a1 + 40));
      v499 = objc_claimAutoreleasedReturnValue();
      v608 = *(unsigned __int8 *)(a1 + 248);
      v500 = *(_QWORD *)(a1 + 32);
      v603 = (void *)v499;
      v605 = *(_QWORD *)(v500 + 48);
      v589 = v20;
      v501 = *(_QWORD *)(v500 + 56);
      objc_msgSend(*(id *)(v500 + 32), "debugDescription");
      v502 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "debugDescription");
      v503 = (void *)objc_claimAutoreleasedReturnValue();
      v504 = *(_QWORD *)(a1 + 208);
      v505 = *(_QWORD *)(a1 + 48) != 0;
      v506 = *(_QWORD *)(a1 + 56) != 0;
      v507 = *(_QWORD *)(a1 + 64) != 0;
      v508 = *(_QWORD *)(a1 + 72) != 0;
      *(_DWORD *)buf = 138416130;
      v632 = v498;
      v19 = v587;
      v633 = 2048;
      v634 = a3;
      v635 = 2048;
      v636 = v606;
      v637 = 2112;
      *(_QWORD *)v638 = v610;
      *(_WORD *)&v638[8] = 2112;
      *(_QWORD *)&v638[10] = v603;
      *(_WORD *)&v638[18] = 1024;
      *(_DWORD *)&v638[20] = v608;
      *(_WORD *)&v638[24] = 2048;
      *(_QWORD *)&v638[26] = v605;
      v639 = 2048;
      v640 = v501;
      v20 = v589;
      v641 = 2112;
      v642 = (uint64_t)v502;
      v643 = 2112;
      v644 = (uint64_t)v503;
      v645 = 2048;
      v646 = v504;
      v647 = 2048;
      *(_QWORD *)v648 = v594;
      *(_WORD *)&v648[8] = 1024;
      *(_DWORD *)&v648[10] = v505;
      v649 = 1024;
      *(_DWORD *)v650 = v506;
      *(_WORD *)&v650[4] = 1024;
      *(_DWORD *)&v650[6] = v507;
      LOWORD(v651) = 1024;
      *(_DWORD *)((char *)&v651 + 2) = v508;
      _os_log_fault_impl(&dword_1B9BE0000, v375, OS_LOG_TYPE_FAULT, "incident %@. sampleIndex %lu, endIndex %lu, thread state %@, task state %@ (%d), report start index %lu, report end index %lu, report start time %@, report end time %@, starting iterator index %lu, iterator index %lu, by-thread:%d indexes:%d, by-dispatchQueue:%d, by-swiftTaskStates:%d", buf, 0x8Eu);

      v16 = v585;
      goto LABEL_613;
    }
    v28 = v606 - a3 + 1;
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "sampleTimestamps");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "objectAtIndexedSubscript:", v606);
    v609 = (id)objc_claimAutoreleasedReturnValue();

    goto LABEL_24;
  }
  objc_msgSend(v18, "startTimestamp");
  v20 = objc_claimAutoreleasedReturnValue();
  if (v16 && *(_BYTE *)(a1 + 248))
  {
    objc_msgSend(v16, "startTimestamp");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v20;
    v22 = objc_msgSend(v21, "gt:", v20);

    if (v22)
    {
      objc_msgSend(v16, "startTimestamp");
      v20 = objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v20 = v9;
    }
  }
  objc_msgSend(v19, "endTimestamp");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  if (v16 && *(_BYTE *)(a1 + 248))
  {
    v9 = v20;
    objc_msgSend(v16, "endTimestamp");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = objc_msgSend(v32, "lt:", v31);

    if (v33)
    {
      objc_msgSend(v16, "endTimestamp");
      v34 = objc_claimAutoreleasedReturnValue();

      v31 = (void *)v34;
    }
    v20 = v9;
  }
  if (!v20)
  {
    v376 = v17;
    v377 = *__error();
    _sa_logt();
    v378 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v378, OS_LOG_TYPE_ERROR))
    {
      -[SAThreadState debugDescriptionWithThread:](v19, v376);
      v379 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v9 = objc_msgSend(v379, "UTF8String");
      -[SATaskState debugDescriptionWithTask:]((uint64_t)v16, *(void **)(a1 + 40));
      a3 = (unint64_t)objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      *(_DWORD *)buf = 136315394;
      v632 = v9;
      v633 = 2080;
      v634 = objc_msgSend((id)a3, "UTF8String");
      _os_log_error_impl(&dword_1B9BE0000, v378, OS_LOG_TYPE_ERROR, "nil startTimestamp for %s %s", buf, 0x16u);

    }
    *__error() = v377;
    -[SAThreadState debugDescriptionWithThread:](v19, v376);
    v380 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v381 = objc_msgSend(v380, "UTF8String");
    -[SATaskState debugDescriptionWithTask:]((uint64_t)v16, *(void **)(a1 + 40));
    v17 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend(v17, "UTF8String");
    _SASetCrashLogMessage(10489, "nil startTimestamp for %s %s", v382, v383, v384, v385, v386, v387, v381);

    _os_crash();
    __break(1u);
    goto LABEL_617;
  }
  if (!v31)
  {
LABEL_617:
    v388 = v17;
    v389 = *__error();
    _sa_logt();
    v390 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v390, OS_LOG_TYPE_ERROR))
    {
      -[SAThreadState debugDescriptionWithThread:](v19, v388);
      v391 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v9 = objc_msgSend(v391, "UTF8String");
      -[SATaskState debugDescriptionWithTask:]((uint64_t)v16, *(void **)(a1 + 40));
      a3 = (unint64_t)objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v392 = objc_msgSend((id)a3, "UTF8String");
      *(_DWORD *)buf = 136315394;
      v632 = v9;
      v633 = 2080;
      v634 = v392;
      _os_log_error_impl(&dword_1B9BE0000, v390, OS_LOG_TYPE_ERROR, "nil endTimestamp for %s %s", buf, 0x16u);

    }
    *__error() = v389;
    -[SAThreadState debugDescriptionWithThread:](v19, v388);
    v258 = (uint64_t *)objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v20 = objc_msgSend(v258, "UTF8String");
    -[SATaskState debugDescriptionWithTask:]((uint64_t)v16, *(void **)(a1 + 40));
    v294 = (int *)objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend(v294, "UTF8String");
    _SASetCrashLogMessage(10490, "nil endTimestamp for %s %s", v393, v394, v395, v396, v397, v398, v20);

    _os_crash();
    __break(1u);
    goto LABEL_620;
  }
  v609 = v31;
  v606 = 0x7FFFFFFFFFFFFFFFLL;
  v28 = 1;
LABEL_24:
  v35 = *(void **)(a1 + 80);
  v604 = a1;
  if (v35
    && (v9 = v20,
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v17, "threadId")),
        v36 = (void *)objc_claimAutoreleasedReturnValue(),
        v37 = objc_msgSend(v35, "containsObject:", v36),
        v36,
        v20 = v9,
        (v37 & 1) != 0)
    || !*(_BYTE *)(a1 + 249))
  {
    v581 = 0;
    v41 = 0;
    goto LABEL_138;
  }
  v629 = 0u;
  v630 = 0u;
  v627 = 0u;
  v628 = 0u;
  v38 = *(id *)(*(_QWORD *)(a1 + 32) + 120);
  v39 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v627, v655, 16);
  v41 = v39 == 0;
  if (!v39)
  {
    v581 = 0;
LABEL_134:

    goto LABEL_138;
  }
  v42 = v39;
  LODWORD(v592) = v39 == 0;
  v595 = v28;
  v28 = v20;
  v43 = *(_QWORD *)v628;
  v44 = 1;
  v600 = 0x7FFFFFFFFFFFFFFFLL;
  v601 = a3;
  v607 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v45 = 0;
    do
    {
      if (*(_QWORD *)v628 != v43)
        objc_enumerationMutation(v38);
      v9 = *(_QWORD *)(*((_QWORD *)&v627 + 1) + 8 * v45);
      if (v9)
      {
        if (*(_QWORD *)(v9 + 16))
        {
          v46 = objc_msgSend(v611, "threadId");
          v47 = *(_QWORD *)(v9 + 16);
          if (v46 == v47)
          {
            if (!-[SASamplePrinter hasTimeIndexes](*(_QWORD *)(a1 + 32)))
              goto LABEL_53;
LABEL_42:
            if (*(_QWORD *)(v9 + 40) > v606)
              goto LABEL_89;
            v50 = *(_QWORD *)(v9 + 48);
            goto LABEL_44;
          }
          if (v47)
            goto LABEL_89;
        }
        Property = objc_getProperty((id)v9, v40, 8, 1);
      }
      else
      {
        Property = 0;
      }
      v49 = Property;
      p_vtable = *(_QWORD *)(a1 + 40);

      if (v49 != (id)p_vtable)
        goto LABEL_89;
      if (!-[SASamplePrinter hasTimeIndexes](*(_QWORD *)(a1 + 32)))
      {
        if (v9)
LABEL_53:
          v54 = objc_getProperty((id)v9, v40, 24, 1);
        else
          v54 = 0;
        v55 = v54;
        if ((objc_msgSend(v55, "le:", v609) & 1) == 0)
        {

          goto LABEL_89;
        }
        if (v9)
          v57 = objc_getProperty((id)v9, v56, 32, 1);
        else
          v57 = 0;
        p_vtable = (uint64_t)v57;
        v58 = objc_msgSend((id)p_vtable, "ge:", v28);

        if (v58)
        {
          if (v9)
            v59 = objc_getProperty((id)v9, v40, 32, 1);
          else
            v59 = 0;
          v60 = (void *)v28;
          v61 = v59;
          v62 = objc_msgSend(v61, "gt:", v609);

          if (v62)
          {
            a1 = v604;
            if (v9)
              v64 = objc_getProperty((id)v9, v63, 32, 1);
            else
              v64 = 0;
            v65 = v64;

            v609 = v65;
          }
          else
          {
            a1 = v604;
          }
          if (v9)
            v66 = objc_getProperty((id)v9, v63, 24, 1);
          else
            v66 = 0;
          v67 = v66;
          p_vtable = objc_msgSend(v67, "lt:", v28);

          if ((_DWORD)p_vtable)
          {
            if (v9)
              v68 = objc_getProperty((id)v9, v40, 24, 1);
            else
              v68 = 0;
            v28 = (uint64_t)v68;

          }
          goto LABEL_79;
        }
        goto LABEL_88;
      }
      if (v9)
        goto LABEL_42;
      v50 = 0;
LABEL_44:
      if (v50 < v601)
        goto LABEL_89;
      v51 = v607;
      v52 = v600;
      if (v607 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v53 = v9 ? *(_QWORD *)(v9 + 40) : 0;
        if (v607 <= v53)
        {
          if (v600 != 0x7FFFFFFFFFFFFFFFLL)
          {
            if (v9)
              goto LABEL_74;
            v69 = 0;
LABEL_75:
            if (v52 >= v69)
            {
              v607 = v51;
LABEL_79:
              v44 = 0;
              goto LABEL_89;
            }
          }
          if (v9)
          {
LABEL_77:
            v607 = v51;
            v44 = 0;
            v600 = *(_QWORD *)(v9 + 48);
            goto LABEL_89;
          }
          v607 = v51;
          v600 = 0;
          goto LABEL_79;
        }
      }
      if (v9)
      {
        v51 = *(_QWORD *)(v9 + 40);
        if (v600 == 0x7FFFFFFFFFFFFFFFLL)
          goto LABEL_77;
LABEL_74:
        v69 = *(_QWORD *)(v9 + 48);
        goto LABEL_75;
      }
      v607 = 0;
      if (v600 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v51 = 0;
        v69 = 0;
        a1 = v604;
        v52 = v600;
        goto LABEL_75;
      }
      v44 = 0;
      v600 = 0;
LABEL_88:
      a1 = v604;
LABEL_89:
      ++v45;
    }
    while (v42 != v45);
    v70 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v627, v655, 16);
    v42 = v70;
  }
  while (v70);

  if ((v44 & 1) != 0)
  {
    v581 = 0;
    v41 = 1;
    v16 = v585;
LABEL_136:
    v19 = v587;
    a3 = v601;
    v20 = v28;
    goto LABEL_137;
  }
  v20 = 0x7FFFFFFFFFFFFFFFLL;
  v16 = v585;
  if (v607 == 0x7FFFFFFFFFFFFFFFLL || v607 <= v601)
    goto LABEL_128;
  if (v607 > v606)
  {
    v439 = *__error();
    _sa_logt();
    v440 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v440, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v587, "debugDescription");
      v441 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v442 = objc_msgSend(v441, "UTF8String");
      objc_msgSend(v585, "debugDescription");
      v443 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v28 = objc_msgSend(v443, "UTF8String");
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "debugDescription");
      v16 = (unsigned __int8 *)objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v444 = objc_msgSend(v16, "UTF8String");
      *(_DWORD *)buf = 134219266;
      v632 = v607;
      v633 = 2048;
      v634 = v601;
      v635 = 2048;
      v636 = v595;
      v637 = 2080;
      *(_QWORD *)v638 = v442;
      *(_WORD *)&v638[8] = 2080;
      *(_QWORD *)&v638[10] = v28;
      *(_WORD *)&v638[18] = 2080;
      *(_QWORD *)&v638[20] = v444;
      _os_log_error_impl(&dword_1B9BE0000, v440, OS_LOG_TYPE_ERROR, "startSampleIndexCap %lu < sampleIndex %lu + sampleCount %lu for %s, %s hidStepSamples:\n%s", buf, 0x3Eu);

    }
    *__error() = v439;
    objc_msgSend(v587, "debugDescription");
    v445 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend(v445, "UTF8String");
    objc_msgSend(v585, "debugDescription");
    v446 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend(v446, "UTF8String");
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "debugDescription");
    v447 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend(v447, "UTF8String");
    _SASetCrashLogMessage(10549, "startSampleIndexCap %lu < sampleIndex %lu + sampleCount %lu for %s, %s hidStepSamples:\n%s", v448, v449, v450, v451, v452, v453, v607);

    _os_crash();
    __break(1u);
    goto LABEL_652;
  }
  v71 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24);
  v72 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24);
  if (v71 >= v72 && v71 != 0x7FFFFFFFFFFFFFFFLL || v72 == 0x7FFFFFFFFFFFFFFFLL)
    v72 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24);
  v75 = *(_QWORD *)(a1 + 32);
  v76 = *(_QWORD *)(v75 + 48);
  v77 = v76 - 1;
  if (!v76)
    v77 = 0x7FFFFFFFFFFFFFFFLL;
  if (v72 != 0x7FFFFFFFFFFFFFFFLL || v76 == 0x7FFFFFFFFFFFFFFFLL)
    v79 = v72;
  else
    v79 = v77;
  v80 = v607 - 1;
  if (v79 == 0x7FFFFFFFFFFFFFFFLL || v79 < v80)
  {
    if (v79 == 0x7FFFFFFFFFFFFFFFLL)
      v82 = 0;
    else
      v82 = ~v79;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 24) += v82 + v607;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24) = v80;
    v75 = *(_QWORD *)(a1 + 32);
  }
  v595 = v606 - v607 + 1;
  objc_msgSend(*(id *)(v75 + 160), "sampleTimestamps");
  v83 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v83, "objectAtIndexedSubscript:", v607);
  v9 = objc_claimAutoreleasedReturnValue();

  v28 = v9;
  v601 = v607;
LABEL_128:
  v41 = 0;
  if (v600 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v581 = 0;
    goto LABEL_136;
  }
  if (v606 > v600)
  {
    if (v600 >= v601)
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "sampleTimestamps");
      v38 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v38, "objectAtIndexedSubscript:", v600);
      v9 = v600;
      v84 = objc_claimAutoreleasedReturnValue();

      v581 = v606 - v600;
      v606 = v600;
      v609 = (id)v84;
      v19 = v587;
      a3 = v601;
      v20 = v28;
      v28 = v600 - v601 + 1;
      v41 = v592;
      goto LABEL_134;
    }
LABEL_652:
    v454 = *__error();
    _sa_logt();
    v455 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v455, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v587, "debugDescription");
      v456 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v457 = objc_msgSend(v456, "UTF8String");
      objc_msgSend(v585, "debugDescription");
      v458 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v28 = objc_msgSend(v458, "UTF8String");
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "debugDescription");
      v16 = (unsigned __int8 *)objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v459 = objc_msgSend(v16, "UTF8String");
      *(_DWORD *)buf = 134219010;
      v632 = v607;
      v633 = 2048;
      v634 = v601;
      v635 = 2080;
      v636 = v457;
      v637 = 2080;
      *(_QWORD *)v638 = v28;
      *(_WORD *)&v638[8] = 2080;
      *(_QWORD *)&v638[10] = v459;
      _os_log_error_impl(&dword_1B9BE0000, v455, OS_LOG_TYPE_ERROR, "endSampleIndexCap %lu >= sampleIndex %lu for %s, %s hidStepSamples:\n%s", buf, 0x34u);

    }
    *__error() = v454;
    objc_msgSend(v587, "debugDescription");
    v460 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend(v460, "UTF8String");
    objc_msgSend(v585, "debugDescription");
    v9 = (uint64_t)objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend((id)v9, "UTF8String");
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "debugDescription");
    v461 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend(v461, "UTF8String");
    _SASetCrashLogMessage(10571, "endSampleIndexCap %lu >= sampleIndex %lu for %s, %s hidStepSamples:\n%s", v462, v463, v464, v465, v466, v467, v607);

    _os_crash();
    __break(1u);
LABEL_655:
    v468 = *__error();
    _sa_logt();
    v469 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v469, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v604 + 200) + 8) + 40), "debugDescription");
      v20 = (uint64_t)objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v470 = objc_msgSend((id)v20, "UTF8String");
      *(_DWORD *)buf = 136315138;
      v632 = v470;
      _os_log_error_impl(&dword_1B9BE0000, v469, OS_LOG_TYPE_ERROR, "leaf frame %s !isLeafFrame", buf, 0xCu);

    }
    *__error() = v468;
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v604 + 200) + 8) + 40), "debugDescription");
    v471 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v472 = objc_msgSend(v471, "UTF8String");
    _SASetCrashLogMessage(11015, "leaf frame %s !isLeafFrame", v473, v474, v475, v476, v477, v478, v472);

    _os_crash();
    __break(1u);
LABEL_658:
    v479 = *__error();
    _sa_logt();
    v480 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v480, OS_LOG_TYPE_ERROR))
    {
      v481 = (objc_class *)objc_opt_class();
      NSStringFromClass(v481);
      v20 = (uint64_t)objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v482 = objc_msgSend((id)v20, "UTF8String");
      *(_DWORD *)buf = 136315138;
      v632 = v482;
      _os_log_error_impl(&dword_1B9BE0000, v480, OS_LOG_TYPE_ERROR, "treeCountedState is a %s", buf, 0xCu);

    }
    *__error() = v479;
    v483 = (objc_class *)objc_opt_class();
    NSStringFromClass(v483);
    v258 = (uint64_t *)objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v484 = objc_msgSend(v258, "UTF8String");
    _SASetCrashLogMessage(11024, "treeCountedState is a %s", v485, v486, v487, v488, v489, v490, v484);

    _os_crash();
    __break(1u);
    goto LABEL_661;
  }
  v20 = v28;
  v581 = 0;
  v19 = v587;
  a3 = v601;
LABEL_137:
  v28 = v595;
LABEL_138:
  if ((!*(_BYTE *)(a1 + 250) || (objc_msgSend(v19, "isRunning") & 1) == 0)
    && (!*(_BYTE *)(a1 + 251) || (objc_msgSend(v19, "isRunnable") & 1) == 0)
    && (!*(_BYTE *)(a1 + 252)
     || (objc_msgSend(v19, "isRunning") & 1) != 0
     || objc_msgSend(v19, "isRunnable")))
  {
    v41 = 1;
  }
  v85 = *(_DWORD *)(a1 + 240);
  if (v85 && v85 < (int)objc_msgSend(v19, "basePriority")
    || (v86 = *(_DWORD *)(a1 + 244)) != 0 && v86 > (int)objc_msgSend(v19, "basePriority")
    || *(_BYTE *)(a1 + 253)
    && objc_msgSend(v19, "isBatteryAndUserActivityValid")
    && (objc_msgSend(v19, "isUserActive") & 1) != 0
    || *(_BYTE *)(a1 + 254)
    && objc_msgSend(v19, "isBatteryAndUserActivityValid")
    && !objc_msgSend(v19, "isUserActive")
    || *(_BYTE *)(a1 + 255)
    && objc_msgSend(v19, "isBatteryAndUserActivityValid")
    && (objc_msgSend(v19, "isOnBattery") & 1) != 0
    || *(_BYTE *)(a1 + 256)
    && objc_msgSend(v19, "isBatteryAndUserActivityValid")
    && (objc_msgSend(v19, "isOnBattery") & 1) == 0)
  {
    v41 = 1;
  }
  if (*(_BYTE *)(a1 + 257) || *(_BYTE *)(a1 + 258))
  {
    if (objc_msgSend(v19, "isRunning"))
    {
      v87 = (const char *)objc_msgSend(v19, "cpuNum");
      if ((_DWORD)v87 != -1)
      {
        v88 = v87;
        if (*(_BYTE *)(a1 + 257))
          v41 |= ((unint64_t)-[SASampleStore clusterFlagsForCPUNum:](*(void **)(*(_QWORD *)(a1 + 32) + 160), v87) >> 1) & 1;
        if (*(_BYTE *)(a1 + 258))
          v41 |= -[SASampleStore clusterFlagsForCPUNum:](*(void **)(*(_QWORD *)(a1 + 32) + 160), v88);
      }
    }
  }
  v588 = v20;
  if (*(_BYTE *)(a1 + 259)
    || *(_QWORD *)(a1 + 216) == 1
    || *(_QWORD *)(a1 + 224) == 3
    || *(_QWORD *)(a1 + 72)
    || !objc_msgSend(v19, "hasSwiftTask")
    || (objc_msgSend(v611, "isMainThread") & 1) != 0
    || objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "targetThreadId")
    && (v89 = objc_msgSend(v611, "threadId"),
        v89 == objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "targetThreadId")))
  {
    v90 = 0;
    goto LABEL_180;
  }
  if (!objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "targetDispatchQueueId") || !*(_QWORD *)(a1 + 64))
    goto LABEL_181;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "targetProcess");
  v353 = (void *)objc_claimAutoreleasedReturnValue();
  if (v353 == *(void **)(a1 + 40))
  {
    v362 = objc_msgSend(*(id *)(a1 + 64), "identifier");
    v90 = v362 != objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "targetDispatchQueueId");
  }
  else
  {
    v90 = 1;
  }

LABEL_180:
  v91 = v90 | v41;
  v20 = v588;
  if ((v91 & 1) != 0)
  {
LABEL_181:
    v92 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24);
    if (v92 == 0x7FFFFFFFFFFFFFFFLL || v606 > v92)
    {
      if (v92 < a3 || v92 == 0x7FFFFFFFFFFFFFFFLL)
        v92 = a3 - 1;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 24) += v606 - v92;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24) = v606;
    }
    v94 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8);
    v95 = v611;
    if (!*(_BYTE *)(v94 + 24) && (_DWORD)v598)
      *(_BYTE *)(v94 + 24) = 1;
    v96 = v609;
    goto LABEL_590;
  }
  v626 = 0;
  newValue = 0;
  v624 = 0;
  v95 = v611;
  if (*(_BYTE *)(a1 + 260))
  {
    v97 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 24);
    if (v97 != objc_msgSend(v611, "threadId"))
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 24) = objc_msgSend(v611, "threadId");
      v99 = *(id *)(*(_QWORD *)(a1 + 32) + 160);
      if (v99)
        v99 = objc_getProperty(v99, v98, 968, 1);
      v100 = v99;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 24));
      v101 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v100, "objectForKeyedSubscript:", v101);
      v9 = objc_claimAutoreleasedReturnValue();
      objc_msgSend((id)v9, "objectEnumerator");
      v102 = objc_claimAutoreleasedReturnValue();
      v103 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8);
      v104 = *(void **)(v103 + 40);
      *(_QWORD *)(v103 + 40) = v102;

      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8) + 40), "nextObject");
      v105 = objc_claimAutoreleasedReturnValue();
      v106 = *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8);
      v107 = *(void **)(v106 + 40);
      *(_QWORD *)(v106 + 40) = v105;

      v20 = v588;
    }
    v108 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 8) + 40);
    if (v108)
    {
      -[SASamplePrinter _findIOBefore:during:after:thread:stateIndex:inIO:nextIO:](*(_QWORD *)(a1 + 32), &v626, &newValue, &v624, v611, (unint64_t)a6, *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8) + 40), v108);
      v109 = objc_claimAutoreleasedReturnValue();
      v110 = *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8);
      v111 = *(void **)(v110 + 40);
      *(_QWORD *)(v110 + 40) = v109;

    }
  }
  if ((v598 & 1) != 0)
  {
LABEL_203:
    v571 = 1;
  }
  else
  {
    v112 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8);
    if (*(_BYTE *)(v112 + 24))
    {
      *(_BYTE *)(v112 + 24) = 0;
      goto LABEL_203;
    }
    v571 = 0;
  }
  v601 = a3;
  v595 = v28;
  if (*(_BYTE *)(a1 + 261) && !*(_BYTE *)(a1 + 262))
  {
    if (a3 == 0x7FFFFFFFFFFFFFFFLL)
    {
      v114 = 0;
      p_vtable = 0;
    }
    else
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "sampleTimestamps");
      v115 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v115, "objectAtIndexedSubscript:", a3);
      p_vtable = (uint64_t)(id)objc_claimAutoreleasedReturnValue();

      v116 = *(_QWORD *)(a1 + 32);
      if (a3 <= *(_QWORD *)(v116 + 48))
      {
        v114 = 0;
      }
      else
      {
        objc_msgSend(*(id *)(v116 + 160), "sampleTimestamps");
        v117 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v117, "objectAtIndexedSubscript:", a3 - 1);
        v114 = (id)objc_claimAutoreleasedReturnValue();

      }
    }
    v118 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 8) + 40);
    if (v118)
    {
      v119 = v626;
      if (v626)
      {
        objc_msgSend(v626, "addObjectsFromArray:");
        v120 = (id)objc_msgSend(v119, "sortedArrayUsingComparator:", &__block_literal_global_1550);
      }
      else
      {
        v626 = v118;
      }
    }
    v121 = *(void **)(a1 + 64);
    v122 = *(void **)(a1 + 72);
    v123 = *(void **)(a1 + 56);
    v9 = *(_QWORD *)(a1 + 32);
    v124 = *(void **)(a1 + 40);
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24) >= v601)
      v125 = 0;
    else
      v125 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 24);
    if (!v114
      || (v126 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 8) + 40), "lt:", v114), v127 = v114, v126))
    {
      v127 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 8) + 40);
    }
    v562 = *(_DWORD *)(a1 + 264);
    v561 = v125;
    v19 = v587;
    v128 = v122;
    v95 = v611;
    v16 = v585;
    -[SASamplePrinter stateChangeStringForThreadState:serialDispatchQueue:swiftTaskStates:thread:threadStateIndexes:taskState:task:iteratorIndex:missingStateIsInAnotherStack:numSamplesOmittedSincePreviousDisplayedSample:sampleTimestamp:previousSampleTimestamp:previousDisplayedTimestamp:previousTaskState:previousThread:previousThreadState:dispatchQueueChanges:swiftTaskChanges:priorityChanges:nameChanges:threadChanges:isTimeJump:ioEventsSincePreviousThreadState:](v9, v587, v121, v128, v611, v123, v585, v124, v594, a9, v561, (void *)p_vtable, v114, v127, *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 8) + 40), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 8) + 40), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8) + 40), *(_BYTE *)(a1 + 263), v562,
      SBYTE1(v562),
      SBYTE2(v562),
      SHIBYTE(v562),
      v571,
      v626);
    v113 = objc_claimAutoreleasedReturnValue();

    a3 = v601;
    v20 = v588;
    v28 = v595;
  }
  else
  {
    v113 = 0;
  }
  v598 = v113;
  if (*(_BYTE *)(a1 + 268))
  {
    if (objc_msgSend(v19, "hasSwiftTask"))
    {
      v129 = v95;
      v130 = *(_QWORD *)(a1 + 32);
      v131 = *(_QWORD *)(a1 + 72);
      if ((objc_msgSend(v129, "isMainThread") & 1) != 0)
      {
        v132 = 1;
      }
      else
      {
        v134 = objc_msgSend(v129, "threadId");
        v132 = v134 == objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "targetThreadId");
      }
      if (!v130)
      {
        v133 = 0;
        goto LABEL_241;
      }
      v135 = *(_QWORD *)(v130 + 16);
      if (v135
        && (*(_QWORD *)(v135 + 160) == 1
         || (v136 = *(_QWORD *)(v135 + 152), v136 == 3)
         || !v136 && *(_BYTE *)(v135 + 11)))
      {
        v137 = objc_msgSend((id)v135, "swiftAsyncPrintLeafyCCallstackOnTopOfCRootCallstacksAlways");
        v133 = 4;
        if (!v137)
          v133 = 0;
LABEL_241:
        v95 = v611;
        v20 = v588;
      }
      else
      {
        if (v131)
        {
          v20 = v588;
          if ((objc_msgSend((id)v135, "swiftAsyncPrintLeafyCCallstackOnTopOfSwiftAsyncCallstacksAlways") & 1) != 0)
          {
            v133 = 0;
          }
          else
          {
            v138 = objc_msgSend(*(id *)(v130 + 16), "swiftAsyncPrintLeafyCCallstackOnTopOfCRootCallstacksAlways");
            v133 = 8;
            if (!(v132 | v138))
              v133 = 0;
          }
        }
        else
        {
          v20 = v588;
          if ((objc_msgSend((id)v135, "swiftAsyncPrintLeafyCCallstackOnTopOfCRootCallstacksAlways") & 1) != 0)
          {
            v133 = 4;
          }
          else
          {
            v139 = objc_msgSend(*(id *)(v130 + 16), "swiftAsyncPrintLeafyCCallstackOnTopOfSwiftAsyncCallstacksAlways");
            v133 = 16;
            v140 = 4;
            if (!v132)
              v140 = 16;
            if (!v139)
              v133 = v140;
          }
        }
        v95 = v611;
      }
    }
    else
    {
      v133 = 0;
    }
  }
  else
  {
    v133 = 2;
  }
  v141 = v133 | (*(_BYTE *)(a1 + 269) == 0);
  if (*(_BYTE *)(a1 + 270))
    v142 = v141;
  else
    v142 = v141 | 0x20;
  v143 = *(id **)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8) + 40);
  if (v143
    && v143 == v19
    && (!*(_BYTE *)(a1 + 248) || *(unsigned __int8 **)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 8) + 40) == v16))
  {
    if (!v598)
    {
      v598 = 0;
      goto LABEL_586;
    }
    if (a3 != 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_274;
    goto LABEL_635;
  }
  LODWORD(v594) = 0;
  if (!v143 || *(_BYTE *)(a1 + 262))
  {
LABEL_279:
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "cpuSignalHandlerStackLeafKernelFrame");
    v154 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "stackWithBacktraceStyle:ignoringKernelStackWithLeafFrame:", v142, v154);
    v155 = (void *)objc_claimAutoreleasedReturnValue();

    v146 = v155;
    if (!objc_msgSend(v155, "count"))
    {
      v159 = *(_QWORD *)(*(_QWORD *)(a1 + 200) + 8);
      v9 = *(_QWORD *)(v159 + 40);
      *(_QWORD *)(v159 + 40) = 0;
      goto LABEL_365;
    }
    if (!*(_BYTE *)(a1 + 271))
      goto LABEL_301;
    objc_msgSend(v155, "objectAtIndexedSubscript:", 0);
    v156 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v156, "isTruncatedBacktraceFrame"))
    {
      v157 = v146;
      v158 = objc_msgSend(v146, "count");

      if (v158 < 2)
      {
        v146 = v157;
        goto LABEL_301;
      }
      objc_msgSend(v95, "patchedStackForTruncatedStack:", v157);
      v146 = (void *)objc_claimAutoreleasedReturnValue();
      v156 = v157;
    }

LABEL_301:
    v9 = (uint64_t)*(id *)(a1 + 88);
    v165 = objc_msgSend(v146, "count");
    v620 = 0u;
    v621 = 0u;
    v622 = 0u;
    v623 = 0u;
    obj = v146;
    v592 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v620, v654, 16);
    v579 = (unsigned __int8 *)v165;
    a1 = 0;
    if (!v592)
      goto LABEL_363;
    p_vtable = v165 - 1;
    v590 = *(_QWORD *)v621;
    v578 = 138412290;
    v166 = 0x1E7145000uLL;
    v167 = 0x1EF23E000uLL;
    while (1)
    {
      v168 = 0;
      v600 = v9;
      do
      {
        if (*(_QWORD *)v621 != v590)
          objc_enumerationMutation(obj);
        a6 = v168;
        v9 = *(_QWORD *)(*((_QWORD *)&v620 + 1) + 8 * (_QWORD)v168);
        if ((v594 & 1) != 0)
          goto LABEL_332;
        if (!*(_BYTE *)(v604 + 262))
        {
          objc_msgSend((id)v600, "lastObject");
          v180 = (unsigned __int8 *)objc_claimAutoreleasedReturnValue();
          if (!v180)
            goto LABEL_331;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_331;
          v181 = objc_msgSend(v180, "isTruncatedLeafCallstack");
          if (v181 != objc_msgSend((id)v9, "isLeafyCallstackIsInAnotherCallTreeFrame"))
            goto LABEL_331;
          if ((((p_vtable == a1) ^ v180[*(int *)(v167 + 1960)]) & 1) != 0)
            goto LABEL_331;
          v182 = *(_QWORD *)(v604 + 32);
          objc_msgSend(v180, "frame");
          a3 = objc_claimAutoreleasedReturnValue();
          LODWORD(v182) = -[SASamplePrinter frame:matchesFrame:](v182, (void *)a3, (void *)v9);

          if (!(_DWORD)v182)
            goto LABEL_331;
          v16 = v180;

LABEL_344:
          v191 = v598;
          objc_msgSend(v16, "setSampleCount:", objc_msgSend(v16, "sampleCount") + v595);
          a3 = v601;
          goto LABEL_354;
        }
        v618 = 0u;
        v619 = 0u;
        v616 = 0u;
        v617 = 0u;
        v607 = (unint64_t)(id)v600;
        v169 = objc_msgSend((id)v607, "countByEnumeratingWithState:objects:count:", &v616, v653, 16);
        if (!v169)
          goto LABEL_324;
        v170 = v169;
        v171 = *(_QWORD *)v617;
        do
        {
          v172 = 0;
          do
          {
            if (*(_QWORD *)v617 != v171)
              objc_enumerationMutation((id)v607);
            v173 = *(unsigned __int8 **)(*((_QWORD *)&v616 + 1) + 8 * v172);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              a3 = objc_msgSend(v173, "isTruncatedLeafCallstack");
              if ((_DWORD)a3 == objc_msgSend((id)v9, "isLeafyCallstackIsInAnotherCallTreeFrame"))
              {
                if (v173)
                {
                  if ((((p_vtable == a1) ^ v173[*(int *)(v167 + 1960)]) & 1) != 0)
                    goto LABEL_318;
                }
                else if (p_vtable == a1)
                {
                  goto LABEL_318;
                }
                v174 = *(_QWORD *)(v604 + 32);
                objc_msgSend(v173, "frame");
                v175 = v166;
                v176 = a1;
                v177 = p_vtable;
                v178 = (void *)objc_claimAutoreleasedReturnValue();
                a3 = -[SASamplePrinter frame:matchesFrame:](v174, v178, (void *)v9);

                p_vtable = v177;
                a1 = v176;
                v166 = v175;
                v167 = 0x1EF23E000;
                if ((a3 & 1) != 0)
                {
                  v16 = v173;

                  v19 = v587;
                  v95 = v611;
                  if (!v173)
                    goto LABEL_332;
                  goto LABEL_344;
                }
              }
            }
LABEL_318:
            ++v172;
          }
          while (v170 != v172);
          v179 = objc_msgSend((id)v607, "countByEnumeratingWithState:objects:count:", &v616, v653, 16);
          v170 = v179;
        }
        while (v179);
        v19 = v587;
        v95 = v611;
LABEL_324:
        v180 = (unsigned __int8 *)v607;
LABEL_331:

LABEL_332:
        if (v598)
        {
          objc_msgSend((id)v600, "addObject:", v598);

        }
        if (!objc_msgSend((id)v9, "isLeafyCallstackIsInAnotherCallTreeFrame"))
        {
          a3 = v601;
          objc_msgSend(*(id *)(v166 + 2712), "callTreeFrameWithFrame:startSampleIndex:sampleCount:isLeafFrame:", v9, v601, v595, p_vtable == a1);
          v16 = (unsigned __int8 *)objc_claimAutoreleasedReturnValue();
          goto LABEL_353;
        }
        v183 = p_vtable - a1;
        if (p_vtable != a1)
        {
          p_vtable = *__error();
          _sa_logt();
          v363 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v363, OS_LOG_TYPE_ERROR))
          {
            objc_msgSend((id)v9, "debugDescription");
            v364 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v365 = objc_msgSend(v364, "UTF8String");
            v366 = a1 + 1;
            a1 = (uint64_t)obj;
            objc_msgSend(obj, "objectAtIndexedSubscript:", v366);
            v241 = v9;
            v9 = objc_claimAutoreleasedReturnValue();
            objc_msgSend((id)v9, "debugDescription");
            a3 = (unint64_t)objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v367 = objc_msgSend((id)a3, "UTF8String");
            *(_DWORD *)buf = 136315650;
            v632 = v365;
            v633 = 2048;
            v634 = v183;
            v635 = 2080;
            v636 = v367;
            _os_log_error_impl(&dword_1B9BE0000, v363, OS_LOG_TYPE_ERROR, "leafy truncated frame %s not leaf: %lu more to go (%s is next)", buf, 0x20u);

          }
          else
          {
            v366 = a1 + 1;
            a1 = (uint64_t)obj;
            v241 = v9;
          }

          *__error() = p_vtable;
          objc_msgSend((id)v241, "debugDescription");
          v258 = (uint64_t *)objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v294 = (int *)objc_msgSend(v258, "UTF8String");
          objc_msgSend((id)a1, "objectAtIndexedSubscript:", v366);
          v20 = objc_claimAutoreleasedReturnValue();
          objc_msgSend((id)v20, "debugDescription");
          v19 = (id *)objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          objc_msgSend(v19, "UTF8String");
          _SASetCrashLogMessage(10814, "leafy truncated frame %s not leaf: %lu more to go (%s is next)", v368, v369, v370, v371, v372, v373, (char)v294);

          _os_crash();
          __break(1u);
          goto LABEL_609;
        }
        v184 = (void *)v9;
        if (objc_msgSend((id)v9, "isSwiftAsync"))
        {
          objc_msgSend(v19, "swiftTask");
          v185 = (void *)objc_claimAutoreleasedReturnValue();
          v186 = objc_msgSend(v185, "identifier");
          if (v185)
          {
            if (v186 != -1)
            {
              v187 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@ %llu"), CFSTR("Swift Task"), v186);
              goto LABEL_351;
            }
          }
          else
          {
            v194 = *__error();
            _sa_logt();
            v195 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v195, OS_LOG_TYPE_FAULT))
            {
              -[SAThreadState debugDescriptionWithThread:](v19, v611);
              v197 = (id)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138412290;
              v632 = (unint64_t)v197;
              _os_log_fault_impl(&dword_1B9BE0000, v195, OS_LOG_TYPE_FAULT, "isLeafyCallstackIsInAnotherCallTreeFrame, but no swiftTask for %@", buf, 0xCu);

            }
            *__error() = v194;
            v95 = v611;
          }
          v187 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@ %@"), CFSTR("Swift Task"), CFSTR("UNKNOWN"));
LABEL_351:
          v193 = (void *)v187;

        }
        else
        {
          v188 = objc_msgSend(v95, "threadId");
          v189 = objc_alloc(MEMORY[0x1E0CB3940]);
          if (v188)
            v190 = objc_msgSend(v189, "initWithFormat:", CFSTR("%@ 0x%llx"), CFSTR("Thread"), objc_msgSend(v95, "threadId"));
          else
            v190 = objc_msgSend(v189, "initWithFormat:", CFSTR("%@ %@"), CFSTR("Thread"), CFSTR("UNKNOWN"));
          v193 = (void *)v190;
        }
        a3 = v601;
        +[SACallTreeTruncatedLeafCallstacks callTreeFrameWithFrame:startSampleIndex:sampleCount:otherCallTreeDescription:]((uint64_t)SACallTreeTruncatedLeafCallstacks, v184, v601, v595, v193);
        v16 = (unsigned __int8 *)objc_claimAutoreleasedReturnValue();

LABEL_353:
        objc_msgSend((id)v600, "addObject:", v16);
        v191 = 0;
LABEL_354:
        v598 = v191;
        if (p_vtable == a1)
        {
          objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(v604 + 200) + 8) + 40), v16);

          v9 = v600;
          a1 = p_vtable;
          goto LABEL_363;
        }
        if (v16)
          v196 = objc_getProperty(v16, v192, 40, 1);
        else
          v196 = 0;
        v9 = (uint64_t)v196;

        ++a1;
        v168 = a6 + 1;
        v600 = v9;
      }
      while (a6 + 1 != (char *)v592);
      v198 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v620, v654, 16);
      v592 = v198;
      if (!v198)
      {
LABEL_363:
        v146 = obj;

        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v604 + 200) + 8) + 40))
        {
          v16 = v585;
          a1 = v604;
LABEL_365:
          v151 = v606;

LABEL_366:
          goto LABEL_367;
        }
        v20 = *__error();
        _sa_logt();
        v401 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v401, OS_LOG_TYPE_ERROR))
        {
          objc_msgSend(obj, "debugDescription");
          v402 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v403 = objc_msgSend(v402, "UTF8String");
          *(_DWORD *)buf = 134218498;
          v632 = a1;
          v633 = 2048;
          v634 = (uint64_t)v579;
          v635 = 2080;
          v636 = v403;
          _os_log_error_impl(&dword_1B9BE0000, v401, OS_LOG_TYPE_ERROR, "No leaf frame picked: index %lu, count %lu, stack %s", buf, 0x20u);

        }
        *__error() = v20;
        objc_msgSend(obj, "debugDescription");
        v258 = (uint64_t *)objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        objc_msgSend(v258, "UTF8String");
        _SASetCrashLogMessage(10853, "No leaf frame picked: index %lu, count %lu, stack %s", v404, v405, v406, v407, v408, v409, a1);

        _os_crash();
        __break(1u);
LABEL_625:
        v579 = v16;
        if (a6
          && -[SAWaitInfo _displaysContentForPid:tid:options:displayString:nameCallback:]((uint64_t)a6, *((_DWORD *)v258 + 7), v258[6], *(_QWORD *)(a1 + 232), 0, 0))
        {
          v400 = 0;
          v399 = 0;
          v19 = v587;
          a3 = v601;
          goto LABEL_628;
        }
        LODWORD(v590) = 1;
        v19 = v587;
LABEL_638:
        LODWORD(v592) = v9 ^ 1;
        v9 = (uint64_t)objc_getProperty(v258, v295, 64, 1);
        LODWORD(v28) = objc_msgSend((id)v9, "isEqual:", obj);
        if ((v28 & 1) != 0)
        {
          LODWORD(a1) = 0;
          v435 = 0;
          goto LABEL_662;
        }
        v16 = (unsigned __int8 *)objc_getProperty(v258, v434, 64, 1);
        LODWORD(a1) = v16 != 0;
        if (v16)
        {
          v574 = objc_getProperty(v258, v436, 64, 1);
          if ((-[SATurnstileInfo displaysSameContentAs:forPid:tid:displayOptions:]((uint64_t)v574, obj, *((unsigned int *)v258 + 7), v258[6], *(_QWORD *)(v604 + 232)) & 1) != 0)
          {
            v435 = 0;
            LODWORD(a1) = 1;
            goto LABEL_662;
          }
        }
        v437 = 1;
        v438 = objc_getProperty(v258, v436, 64, 1);
        if (v438)
        {
          v400 = 0;
          goto LABEL_648;
        }
        if (obj
          && (-[SATurnstileInfo _displaysContentForPid:tid:threadPriority:options:displayString:nameCallback:]((uint64_t)obj, *((_DWORD *)v258 + 7), v258[6], 0, *(_QWORD *)(v604 + 232), 0, 0) & 1) != 0)
        {
          v400 = 0;
          v438 = 0;
          v19 = v587;
LABEL_648:
          a3 = v601;
LABEL_665:

          if ((a1 & 1) != 0)
          {
LABEL_666:

            if ((v437 & 1) == 0)
              goto LABEL_667;
LABEL_672:

            a1 = v604;
            if ((v590 & 1) != 0)
            {
              v399 = 0;
              v16 = v579;
LABEL_674:
              v410 = v598;
              v411 = v592;
LABEL_675:

              if ((v410 & 1) != 0)
              {
LABEL_676:

                if ((v411 & 1) == 0)
                  goto LABEL_677;
LABEL_682:

                if ((v400 & 1) == 0)
                  goto LABEL_683;
LABEL_678:
                v250 = v258;

                v214 = v568;
LABEL_554:
                v16 = v585;
                v249 = a6;
                if (*(_BYTE *)(a1 + 276))
                {
                  v297 = v214;
                  if ((v571 & 1) != 0
                    || (v354 = *((_QWORD *)v250 + 12), v354 == 0x7FFFFFFFFFFFFFFFLL)
                    || v354 + 1 != a3)
                  {
                    v298 = objc_getProperty(v250, v296, 88, 1);
                    v299 = -[SATimeRange initWithStart:end:]([SATimeRange alloc], "initWithStart:end:", v588, v609);
                    objc_msgSend(v298, "addObject:", v299);
                  }
                  else
                  {
                    v298 = objc_getProperty(v250, v296, 88, 1);
                    objc_msgSend(v298, "lastObject");
                    v355 = (SATimeRange *)objc_claimAutoreleasedReturnValue();
                    v299 = v355;
                    if (v355)
                      objc_setProperty_atomic(v355, v356, v609, 16);
                  }

                  v214 = v297;
                }
                *((_QWORD *)v250 + 12) = v606;
                objc_msgSend(v250, "setSampleCount:", objc_msgSend(v250, "sampleCount") + v595);
                goto LABEL_448;
              }
LABEL_681:
              if (v411)
                goto LABEL_682;
LABEL_677:

              if (v400)
                goto LABEL_678;
LABEL_683:
              v220 = v611;
LABEL_684:
              v241 = (uint64_t)v258;
              v214 = v568;
LABEL_446:

              goto LABEL_447;
            }
            v16 = v579;
LABEL_680:
            v411 = v592;
            if ((_DWORD)v598)
              goto LABEL_676;
            goto LABEL_681;
          }
LABEL_671:
          if (v437)
            goto LABEL_672;
LABEL_667:

          a1 = v604;
          v16 = v579;
          if ((_DWORD)v590)
          {
            v399 = 0;
            goto LABEL_674;
          }
          goto LABEL_680;
        }
LABEL_661:
        v435 = 1;
LABEL_662:
        v437 = v28 ^ 1;
        if (((objc_msgSend(v568, "isPartOfADeadlock") ^ *((unsigned __int8 *)v258 + 25)) & 1) != 0)
        {
          v400 = 0;
          a3 = v601;
          if (v435)
          {
LABEL_664:
            v438 = 0;
            v19 = v587;
            goto LABEL_665;
          }
        }
        else
        {
          v491 = objc_msgSend(v568, "isBlockedByADeadlock");
          v400 = v491 ^ objc_msgSend(v568, "isBlockedByADeadlock") ^ 1;
          a3 = v601;
          if ((v435 & 1) != 0)
            goto LABEL_664;
        }
        v19 = v587;
        if ((_DWORD)a1)
          goto LABEL_666;
        goto LABEL_671;
      }
    }
  }
  if (-[SASamplePrinter hasTimeIndexes](*(_QWORD *)(a1 + 32))
    && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24) + 1 != a3
    || !objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8) + 40), "hasSameStackAs:", v19))
  {
    LODWORD(v594) = !*(_BYTE *)(a1 + 262)
                 && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8) + 40)
                 && -[SASamplePrinter hasTimeIndexes](*(_QWORD *)(a1 + 32))
                 && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24) + 1 < a3;
    goto LABEL_279;
  }
  objc_msgSend(*(id *)(a1 + 88), "lastObject");
  v144 = objc_claimAutoreleasedReturnValue();
  if (v144)
  {
    v145 = (void *)v144;
    do
    {
      objc_opt_class();
      v146 = v145;
      if ((objc_opt_isKindOfClass() & 1) == 0)
        break;
      objc_msgSend(v145, "setSampleCount:", objc_msgSend(v145, "sampleCount") + v28);
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8) + 40), v145);
      v148 = objc_getProperty(v145, v147, 40, 1);
      objc_msgSend(v148, "lastObject");
      v149 = objc_claimAutoreleasedReturnValue();
      v150 = v146;
      v146 = (void *)v149;

      v145 = v146;
    }
    while (v146);
    v19 = v587;
    v151 = v606;
    goto LABEL_366;
  }
  v151 = v606;
LABEL_367:
  if (!*(_BYTE *)(a1 + 261))
  {
    v206 = a4;
    v205 = v584;
    goto LABEL_542;
  }
  v199 = *(_QWORD *)(a1 + 32);
  v200 = *(void **)(v199 + 16);
  v201 = *(id *)(v199 + 160);
  p_vtable = v19;
  v20 = v200;
  if (!objc_msgSend((id)p_vtable, "isRunning"))
  {
    if (objc_msgSend((id)p_vtable, "isRunnable"))
    {
      if (objc_msgSend((id)v20, "displayThreadRunningState"))
        v202 = 2;
      else
        v202 = 0;
    }
    else
    {
      v202 = 0;
    }
    if (!objc_msgSend((id)v20, "displayCPUNumForNonRunningThreads"))
      goto LABEL_390;
    v207 = objc_msgSend((id)p_vtable, "cpuNum");
    if (v207 == -1)
      goto LABEL_390;
    v208 = v207;
    if (v207 < 0xFF)
    {
      v202 |= 8 * v207 + 8;
      goto LABEL_390;
    }
    v374 = *__error();
    _sa_logt();
    v375 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v375, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v632) = v208;
      _os_log_error_impl(&dword_1B9BE0000, v375, OS_LOG_TYPE_ERROR, "bad cpu num %u", buf, 8u);
    }

    *__error() = v374;
    _SASetCrashLogMessage(168, "bad cpu num %u", v492, v493, v494, v495, v496, v497, v208);
    _os_crash();
    __break(1u);
    goto LABEL_688;
  }
  if (objc_msgSend((id)v20, "displayThreadRunningState"))
    v202 = 4;
  else
    v202 = 0;
  if ((objc_msgSend((id)v20, "displayCPUNumForRunningThreads") & 1) != 0
    || objc_msgSend((id)v20, "displayCPUClusterInfoForRunningThreads"))
  {
    v203 = objc_msgSend((id)p_vtable, "cpuNum");
    if ((_DWORD)v203 != -1)
    {
      v204 = (const char *)v203;
      if (objc_msgSend((id)v20, "displayCPUNumForRunningThreads"))
      {
        if (v204 >= 0xFF)
        {
          v300 = *__error();
          _sa_logt();
          v160 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v160, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109120;
            LODWORD(v632) = (_DWORD)v204;
            _os_log_error_impl(&dword_1B9BE0000, v160, OS_LOG_TYPE_ERROR, "bad cpu num %u", buf, 8u);
          }

          *__error() = v300;
          _SASetCrashLogMessage(147, "bad cpu num %u", v509, v510, v511, v512, v513, v514, (char)v204);
          _os_crash();
          __break(1u);
          goto LABEL_692;
        }
        v202 |= (8 * (_DWORD)v204 + 8);
      }
      if (objc_msgSend((id)v20, "displayCPUClusterInfoForRunningThreads"))
        v202 |= ((unint64_t)-[SASampleStore clusterFlagsForCPUNum:](v201, v204) & 3) << 11;
    }
  }
LABEL_390:
  v9 = objc_msgSend((id)p_vtable, "isSuspended");

  if (*(_BYTE *)(a1 + 272))
  {
    objc_msgSend((id)p_vtable, "waitInfo");
    v209 = (char *)(id)objc_claimAutoreleasedReturnValue();

    a6 = v209;
    if (*(_BYTE *)(a1 + 272))
    {
      objc_msgSend((id)p_vtable, "turnstileInfo");
      obj = (id)objc_claimAutoreleasedReturnValue();

      goto LABEL_395;
    }
  }
  else
  {
    a6 = 0;
  }
  obj = 0;
LABEL_395:
  v210 = *(void **)(*(_QWORD *)(a1 + 32) + 144);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v611, "threadId"));
  v211 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v210, "objectForKeyedSubscript:", v211);
  v28 = objc_claimAutoreleasedReturnValue();

  objc_msgSend((id)v28, "threadState");
  v212 = (void *)objc_claimAutoreleasedReturnValue();

  v573 = (void *)p_vtable;
  if (v212 == (void *)p_vtable)
  {
    v214 = (void *)v28;
  }
  else
  {

    v214 = 0;
  }
  v578 = v202 | v9;
  if (*(_BYTE *)(a1 + 273))
  {
    LODWORD(v600) = objc_msgSend((id)p_vtable, "originPid");
    v19 = v587;
    if (*(_BYTE *)(a1 + 273))
      LODWORD(v594) = objc_msgSend((id)p_vtable, "proximatePid");
    else
      LODWORD(v594) = -1;
  }
  else
  {
    LODWORD(v600) = -1;
    LODWORD(v594) = -1;
    v19 = v587;
  }
  if (!*(_BYTE *)(a1 + 274))
  {
    LODWORD(v607) = 0;
LABEL_416:
    v220 = v611;
    goto LABEL_440;
  }
  if (!v16)
  {
    v412 = *__error();
    _sa_logt();
    v413 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v413, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1B9BE0000, v413, OS_LOG_TYPE_ERROR, "No task state for thread state in microstackshot data", buf, 2u);
    }

    *__error() = v412;
    _SASetCrashLogMessage(10875, "No task state for thread state in microstackshot data", v414, v415, v416, v417, v418, v419, v559);
    _os_crash();
    __break(1u);
    goto LABEL_632;
  }
  v215 = SAMicrostackshotStateForFlagsTaskAndThreadState(objc_msgSend((id)p_vtable, "microstackshotFlags"), v16, (void *)p_vtable);
  v216 = *(char **)(a1 + 96);
  if (!v216)
  {
    if (*(_BYTE *)(a1 + 275))
      v219 = v215;
    else
      v219 = v215 & 0xFFFFFFE3;
    LODWORD(v607) = v219;
    goto LABEL_416;
  }
  if ((v215 & 0x10) == 0)
  {
    if (*(_BYTE *)(a1 + 275))
      v217 = v215;
    else
      v217 = v215 & 0xFFFFFFE3;
    LODWORD(v607) = v217;
    v218 = v595;
    goto LABEL_426;
  }
  v221 = 40;
  if ((v215 & 8) == 0)
    v221 = 48;
  v218 = v595;
  *(_QWORD *)&v216[v221] += v595;
  v216 = *(char **)(a1 + 96);
  if (v216)
  {
    v222 = 32;
    if ((v215 & 4) == 0)
      v222 = 24;
    *(_QWORD *)&v216[v222] += v595;
    v216 = *(char **)(a1 + 96);
    if (*(_BYTE *)(a1 + 275))
      v223 = v215;
    else
      v223 = v215 & 0xFFFFFFE3;
    LODWORD(v607) = v223;
    if (v216)
LABEL_426:
      v216 = (char *)objc_getProperty(v216, v213, 8, 1);
  }
  else
  {
    if (*(_BYTE *)(a1 + 275))
      v558 = v215;
    else
      v558 = v215 & 0xFFFFFFE3;
    LODWORD(v607) = v558;
  }
  v224 = v216;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v607);
  v225 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v224, "objectForKeyedSubscript:", v225);
  v226 = (void *)objc_claimAutoreleasedReturnValue();

  if (v226)
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", objc_msgSend(v226, "unsignedLongValue") + v218);
  else
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v218);
  v228 = (void *)objc_claimAutoreleasedReturnValue();
  v229 = *(id *)(a1 + 96);
  if (v229)
    v229 = objc_getProperty(v229, v227, 8, 1);
  v230 = v229;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v607);
  v231 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v230, "setObject:forKeyedSubscript:", v228, v231);

  v233 = *(id *)(a1 + 96);
  if (v233)
    v233 = objc_getProperty(v233, v232, 16, 1);
  v234 = v233;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v578);
  v235 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v234, "objectForKeyedSubscript:", v235);
  v9 = objc_claimAutoreleasedReturnValue();

  if (v9)
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", objc_msgSend((id)v9, "unsignedLongValue") + v595);
  else
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v595);
  v28 = objc_claimAutoreleasedReturnValue();
  v237 = *(id *)(a1 + 96);
  if (v237)
    v237 = objc_getProperty(v237, v236, 16, 1);
  v238 = v237;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v578);
  v16 = (unsigned __int8 *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v238, "setObject:forKeyedSubscript:", v28, v16);

  v220 = v611;
  a3 = v601;
LABEL_440:
  v239 = *(_BYTE **)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8) + 40);
  if (v239)
  {
    if ((v239[24] & 1) != 0)
    {
      v240 = objc_getProperty(v239, v213, 40, 1);
      goto LABEL_444;
    }
LABEL_632:
    v420 = *__error();
    _sa_logt();
    v421 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v421, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8) + 40), "debugDescription");
      v422 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v423 = objc_msgSend(v422, "UTF8String");
      *(_DWORD *)buf = 136315138;
      v632 = v423;
      _os_log_error_impl(&dword_1B9BE0000, v421, OS_LOG_TYPE_ERROR, "leaf frame %s !isLeafFrame", buf, 0xCu);

    }
    *__error() = v420;
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8) + 40), "debugDescription");
    v424 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v425 = objc_msgSend(v424, "UTF8String");
    _SASetCrashLogMessage(10919, "leaf frame %s !isLeafFrame", v426, v427, v428, v429, v430, v431, v425);

    _os_crash();
    __break(1u);
LABEL_635:
    v432 = *__error();
    _sa_logt();
    v433 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v433, OS_LOG_TYPE_FAULT))
      goto LABEL_710;
    while (2)
    {

      *__error() = v432;
      v16 = v585;
      a3 = v601;
      a1 = v604;
      v20 = v588;
LABEL_274:
      v152 = *(_BYTE **)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8) + 40);
      if (v152)
      {
        if ((v152[24] & 1) == 0)
          goto LABEL_655;
        v153 = objc_getProperty(v152, v30, 40, 1);
      }
      else
      {
        v153 = *(id *)(a1 + 88);
      }
      p_vtable = (uint64_t)v153;
      objc_msgSend(v153, "lastObject");
      v160 = objc_claimAutoreleasedReturnValue();
      if (!v160)
      {
        objc_msgSend((id)p_vtable, "addObject:", v598);
        goto LABEL_585;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        goto LABEL_658;
      if (-[NSObject startSampleIndex](v160, "startSampleIndex") != 0x7FFFFFFFFFFFFFFFLL
        && -[NSObject startSampleIndex](v160, "startSampleIndex") >= a3)
      {
        objc_msgSend((id)p_vtable, "insertObject:atIndex:", v598, objc_msgSend((id)p_vtable, "count") - 1);
        goto LABEL_584;
      }
      v161 = 0x1EF23E000uLL;
      isa = (unint64_t)v160[12].isa;
      objc_msgSend((id)p_vtable, "addObject:", v598);
      v20 = v588;
      if (isa == 0x7FFFFFFFFFFFFFFFLL || isa < a3)
        goto LABEL_585;
      v163 = -[NSObject sampleCount](v160, "sampleCount");
      if (-[NSObject startSampleIndex](v160, "startSampleIndex") == 0x7FFFFFFFFFFFFFFFLL)
        v164 = -1;
      else
        v164 = -[NSObject startSampleIndex](v160, "startSampleIndex") - a3;
      v300 = v164 + v163;
      if (-[NSObject sampleCount](v160, "sampleCount") > (unint64_t)(v164 + v163))
      {
        v20 = v588;
        if (!v300)
          goto LABEL_585;
        v600 = v300;
        if (a3 == 0x7FFFFFFFFFFFFFFFLL)
        {
          v302 = objc_getProperty(v160, v301, 88, 1);
          objc_msgSend(v302, "lastObject");
          v303 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v303, "startTime");
          v304 = (id)objc_claimAutoreleasedReturnValue();

        }
        else
        {
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "sampleTimestamps");
          v302 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v302, "objectAtIndexedSubscript:", a3);
          v303 = (id)objc_claimAutoreleasedReturnValue();
          v304 = v303;
        }

        if (!v304)
          goto LABEL_695;
        v306 = objc_getProperty(v160, v305, 88, 1);
        objc_msgSend(v306, "lastObject");
        v307 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v307, "startTime");
        v308 = (void *)objc_claimAutoreleasedReturnValue();
        v309 = objc_msgSend(v308, "le:", v304);

        if ((v309 & 1) != 0)
        {
          v311 = objc_getProperty(v160, v310, 88, 1);
          objc_msgSend(v311, "lastObject");
          v312 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v312, "endTime");
          v313 = (void *)objc_claimAutoreleasedReturnValue();
          v595 = p_vtable;
          v607 = (unint64_t)v304;
          if ((objc_msgSend(v313, "ge:", v304) & 1) != 0)
          {
            v315 = objc_getProperty(v160, v314, 88, 1);
            objc_msgSend(v315, "lastObject");
            v316 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v316, "endTime");
            v317 = (id)objc_claimAutoreleasedReturnValue();

          }
          else
          {
            v317 = v304;
          }

          if (v317)
          {
            +[SATimeRange timeRangeStart:end:](SATimeRange, "timeRangeStart:end:", v607, v317);
            v597 = (void *)objc_claimAutoreleasedReturnValue();
            -[NSObject setSampleCount:](v160, "setSampleCount:", -[NSObject sampleCount](v160, "sampleCount") - v600);
            v160[12].isa = (Class)((char *)v160[12].isa - v600);
            if (v571 && v601 && v601 != 0x7FFFFFFFFFFFFFFFLL)
            {
              objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "sampleTimestamps");
              v319 = (id)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v319, "objectAtIndexedSubscript:", v601 - 1);
              v322 = (void *)objc_claimAutoreleasedReturnValue();
              v358 = objc_getProperty(v160, v357, 88, 1);
              objc_msgSend(v358, "lastObject");
              v359 = (void *)objc_claimAutoreleasedReturnValue();
              v361 = v359;
              v323 = v587;
              if (v359)
                objc_setProperty_atomic(v359, v360, v322, 16);

            }
            else
            {
              v319 = objc_getProperty(v160, v318, 88, 1);
              objc_msgSend(v319, "lastObject");
              v320 = (void *)objc_claimAutoreleasedReturnValue();
              v322 = v320;
              v323 = v587;
              if (v320)
                objc_setProperty_atomic(v320, v321, (id)v607, 16);
            }

            v325 = objc_getProperty(v160, v324, 56, 1);
            v327 = objc_getProperty(v160, v326, 64, 1);
            +[SACallTreeState treeCountedStateWithWaitInfo:turnstileInfo:isPartOfADeadlock:isBlockedByADeadlock:state:microstackshotState:pid:threadId:threadPriority:timeRange:originPid:proximatePid:startSampleIndex:sampleCount:]((uint64_t)SACallTreeState, v325, v327, BYTE1(v160[3].isa) & 1, BYTE2(v160[3].isa) & 1, (uint64_t)v160[9].isa, v160[4].isa, HIDWORD(v160[3].isa), (uint64_t)v160[6].isa, objc_msgSend(v323, "basePriority"), v597, *(uint64_t *)((char *)&v160[4].isa + 4), v601, v600);
            v328 = (void *)objc_claimAutoreleasedReturnValue();

            p_vtable = v595;
            objc_msgSend((id)v595, "addObject:", v328);
            v16 = v585;
            if (v601 != 0x7FFFFFFFFFFFFFFFLL)
            {
              v330 = objc_getProperty(v160, v329, 80, 1);
              v331 = objc_msgSend(v330, "count");

              v333 = 0;
              if (v331)
              {
                do
                {
                  v334 = objc_getProperty(v160, v332, 80, 1);
                  objc_msgSend(v334, "objectAtIndexedSubscript:", v333);
                  v335 = (void *)objc_claimAutoreleasedReturnValue();

                  objc_msgSend(v335, "startTimestamp");
                  v336 = (void *)objc_claimAutoreleasedReturnValue();
                  v337 = objc_msgSend(v336, "gt:", v607);

                  if ((v337 & 1) != 0)
                    break;
                  ++v333;
                  v338 = objc_getProperty(v160, v332, 80, 1);
                  v339 = objc_msgSend(v338, "count");

                }
                while (v333 < v339);
              }
              v340 = objc_getProperty(v160, v332, 80, 1);
              v341 = objc_msgSend(v340, "count");

              if (v333 < v341)
              {
                v343 = objc_getProperty(v160, v342, 80, 1);
                v344 = objc_msgSend(v343, "count") - v333;

                v346 = objc_getProperty(v160, v345, 80, 1);
                v602 = v344;
                objc_msgSend(v346, "subarrayWithRange:", v333, v344);
                v347 = (void *)objc_claimAutoreleasedReturnValue();
                v349 = (void *)objc_msgSend(v347, "mutableCopy");
                if (v328)
                  objc_setProperty_atomic(v328, v348, v349, 80);

                v351 = objc_getProperty(v160, v350, 80, 1);
                objc_msgSend(v351, "removeObjectsInRange:", v333, v602);

              }
            }

            a1 = v604;
LABEL_584:
            v20 = v588;
LABEL_585:

            v19 = v587;
            v95 = v611;
LABEL_586:
            v206 = a4;
            v205 = v584;
            v151 = v606;
            goto LABEL_587;
          }
        }
        else
        {
LABEL_695:
          v517 = v304;
          v518 = *__error();
          _sa_logt();
          v519 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v519, OS_LOG_TYPE_ERROR))
          {
            -[NSObject debugDescription](v160, "debugDescription");
            v520 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v161 = objc_msgSend(v520, "UTF8String");
            objc_msgSend(v517, "debugDescription");
            v521 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v522 = objc_msgSend(v521, "UTF8String");
            *(_DWORD *)buf = 136315650;
            v632 = v161;
            v633 = 2048;
            v634 = v601;
            v635 = 2080;
            v636 = v522;
            _os_log_error_impl(&dword_1B9BE0000, v519, OS_LOG_TYPE_ERROR, "%s splitting at %lu %s", buf, 0x20u);

          }
          *__error() = v518;
          -[NSObject debugDescription](v160, "debugDescription");
          v160 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v523 = -[NSObject UTF8String](v160, "UTF8String");
          objc_msgSend(v517, "debugDescription");
          v524 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          objc_msgSend(v524, "UTF8String");
          _SASetCrashLogMessage(11039, "%s splitting at %lu %s", v525, v526, v527, v528, v529, v530, v523);

          _os_crash();
          __break(1u);
        }
        v531 = *__error();
        _sa_logt();
        v532 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v532, OS_LOG_TYPE_ERROR))
        {
          -[NSObject debugDescription](v160, "debugDescription");
          v533 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v161 = objc_msgSend(v533, "UTF8String");
          objc_msgSend((id)v607, "debugDescription");
          v534 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v535 = objc_msgSend(v534, "UTF8String");
          *(_DWORD *)buf = 136315394;
          v632 = v161;
          v633 = 2080;
          v634 = v535;
          _os_log_error_impl(&dword_1B9BE0000, v532, OS_LOG_TYPE_ERROR, "nil newCountedStateEndTimestamp from %s and %s", buf, 0x16u);

        }
        *__error() = v531;
        -[NSObject debugDescription](v160, "debugDescription");
        v160 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v515 = -[NSObject UTF8String](v160, "UTF8String");
        objc_msgSend((id)v607, "debugDescription");
        v536 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        objc_msgSend(v536, "UTF8String");
        _SASetCrashLogMessage(11043, "nil newCountedStateEndTimestamp from %s and %s", v537, v538, v539, v540, v541, v542, (char)v515);

        _os_crash();
        __break(1u);
LABEL_701:
        objc_msgSend(*(id *)(v604 + 40), "taskStates");
        v590 = objc_claimAutoreleasedReturnValue();
        v516 = objc_msgSend((id)v590, "indexOfObject:", v585);
        goto LABEL_702;
      }
LABEL_692:
      v600 = v300;
      v595 = p_vtable;
      LODWORD(v609) = *__error();
      _sa_logt();
      v515 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v515, OS_LOG_TYPE_ERROR))
      {
        v606 = -[NSObject startSampleIndex](v160, "startSampleIndex");
        v598 = -[NSObject sampleCount](v160, "sampleCount");
        LODWORD(v161) = p_vtable == *(_QWORD *)(v604 + 88);
        objc_msgSend(v611, "threadStates");
        v607 = objc_claimAutoreleasedReturnValue();
        a6 = (char *)objc_msgSend((id)v607, "indexOfObject:", v587);
        v594 = objc_msgSend(v587, "startSampleIndex");
        v592 = objc_msgSend(v587, "endSampleIndex");
        if (v585)
          goto LABEL_701;
        v516 = -1;
LABEL_702:
        v543 = objc_msgSend(v585, "startSampleIndex");
        v544 = objc_msgSend(v585, "endSampleIndex");
        v545 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v604 + 200) + 8) + 40), "startSampleIndex");
        v546 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v604 + 200) + 8) + 40), "sampleCount");
        objc_msgSend((id)v595, "lastObject");
        v547 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v548 = objc_msgSend(v547, "UTF8String");
        *(_DWORD *)buf = 134221570;
        v632 = v606;
        v633 = 2048;
        v634 = v598;
        v635 = 2048;
        v636 = v600;
        v637 = 1024;
        *(_DWORD *)v638 = v161;
        *(_WORD *)&v638[4] = 2048;
        *(_QWORD *)&v638[6] = v601;
        *(_WORD *)&v638[14] = 2048;
        *(_QWORD *)&v638[16] = a6;
        *(_WORD *)&v638[24] = 2048;
        *(_QWORD *)&v638[26] = v594;
        v639 = 2048;
        v640 = v592;
        v641 = 2048;
        v642 = v516;
        v643 = 2048;
        v644 = v543;
        v645 = 2048;
        v646 = v544;
        v647 = 1024;
        *(_DWORD *)v648 = v571;
        *(_WORD *)&v648[4] = 2048;
        *(_QWORD *)&v648[6] = v545;
        v649 = 2048;
        *(_QWORD *)v650 = v546;
        *(_WORD *)&v650[8] = 2080;
        v651 = v548;
        _os_log_error_impl(&dword_1B9BE0000, v515, OS_LOG_TYPE_ERROR, "start %lu, count %lu, newcount %lu, is root %d, index %lu, thread state %lu %lu-%lu, task state %lu %lu-%lu, timeJump %d, leaf start %lu, count %lu, state %s", buf, 0x90u);

        if (v585)
      }

      *__error() = (int)v609;
      v609 = (id)-[NSObject startSampleIndex](v160, "startSampleIndex");
      v549 = -[NSObject sampleCount](v160, "sampleCount");
      v606 = v595 == *(_QWORD *)(v604 + 88);
      v607 = v549;
      objc_msgSend(v611, "threadStates");
      v433 = objc_claimAutoreleasedReturnValue();
      v611 = (void *)-[NSObject indexOfObject:](v433, "indexOfObject:", v587);
      LODWORD(v28) = objc_msgSend(v587, "startSampleIndex");
      p_vtable = objc_msgSend(v587, "endSampleIndex");
      if (v585)
      {
        objc_msgSend(*(id *)(v604 + 40), "taskStates");
        v598 = objc_claimAutoreleasedReturnValue();
        objc_msgSend((id)v598, "indexOfObject:", v585);
      }
      objc_msgSend(v585, "startSampleIndex");
      objc_msgSend(v585, "endSampleIndex");
      v9 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v604 + 200) + 8) + 40), "startSampleIndex");
      v432 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v604 + 200) + 8) + 40), "sampleCount");
      objc_msgSend((id)v595, "lastObject");
      v550 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      objc_msgSend(v550, "UTF8String");
      _SASetCrashLogMessage(11035, "start %lu, count %lu, newcount %lu, is root %d, index %lu, thread state %lu %lu-%lu, task state %lu %lu-%lu, timeJump %d, leaf start %lu, count %lu, state %s", v551, v552, v553, v554, v555, v556, (char)v609);

      if (v585)
      _os_crash();
      __break(1u);
LABEL_710:
      v557 = objc_msgSend(objc_retainAutorelease((id)v598), "UTF8String");
      *(_DWORD *)buf = 136315138;
      v632 = v557;
      _os_log_fault_impl(&dword_1B9BE0000, v433, OS_LOG_TYPE_FAULT, "Countless state change %s, but no sampleIndex", buf, 0xCu);
      continue;
    }
  }
  v240 = *(id *)(a1 + 88);
LABEL_444:
  p_vtable = (uint64_t)&OBJC_METACLASS___SAMemoryPressureEvent.vtable;
  v241 = v598;
  v572 = v240;
  if (v598)
  {
    objc_msgSend(v240, "addObject:", v598);
    goto LABEL_446;
  }
  if (!*(_BYTE *)(a1 + 262))
  {
    objc_msgSend(v240, "lastObject");
    v241 = objc_claimAutoreleasedReturnValue();
    if (!v241)
      goto LABEL_446;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0
      || *(_QWORD *)(v241 + 72) != v578
      || *(_DWORD *)(v241 + 32) != (_DWORD)v607
      || *(_DWORD *)(v241 + 36) != (_DWORD)v600
      || *(_DWORD *)(v241 + 40) != (_DWORD)v594)
    {
      goto LABEL_446;
    }
    v568 = v214;
    v294 = (int *)0x1EF23E000;
    v20 = (uint64_t)objc_getProperty((id)v241, v293, 56, 1);
    LODWORD(v9) = objc_msgSend((id)v20, "isEqual:", a6);
    v258 = (uint64_t *)v241;
    if ((v9 & 1) != 0)
    {
      LODWORD(v598) = 0;
      LODWORD(v590) = 0;
      goto LABEL_638;
    }
LABEL_609:
    v16 = (unsigned __int8 *)objc_getProperty((id)v241, v295, v294[495], 1);
    LODWORD(v598) = v16 != 0;
    if (v16)
    {
      v576 = objc_getProperty((id)v241, v295, v294[495], 1);
      if ((-[SAWaitInfo displaysSameContentAs:forPid:tid:displayOptions:]((uint64_t)v576, a6, *(_DWORD *)(v241 + 28), *(_QWORD *)(v241 + 48), *(_QWORD *)(a1 + 232)) & 1) != 0)
      {
        v579 = v16;
        LODWORD(v590) = 0;
        LODWORD(v598) = 1;
        goto LABEL_638;
      }
    }
LABEL_620:
    v399 = objc_getProperty(v258, v295, v294[495], 1);
    if (!v399)
      goto LABEL_625;
    v400 = 0;
LABEL_628:
    v410 = v598;
    v411 = 1;
    goto LABEL_675;
  }
  v568 = v214;
  v614 = 0u;
  v615 = 0u;
  v612 = 0u;
  v613 = 0u;
  v258 = (uint64_t *)v240;
  v259 = objc_msgSend(v258, "countByEnumeratingWithState:objects:count:", &v612, v652, 16);
  if (!v259)
    goto LABEL_684;
  v260 = v259;
  v261 = v578;
  if (v578)
    v262 = 0;
  else
    v262 = (_DWORD)v607 == 0;
  v264 = v262 && (_DWORD)v600 == 0 && (_DWORD)v594 == 0;
  v265 = *(_QWORD *)v613;
  v266 = v264;
  v563 = v266;
  v267 = 0x1EF23E000uLL;
  while (2)
  {
    v268 = 0;
LABEL_471:
    if (*(_QWORD *)v613 != v265)
      objc_enumerationMutation(v258);
    v269 = *(_QWORD *)(*((_QWORD *)&v612 + 1) + 8 * v268);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      goto LABEL_531;
    if (v269)
    {
      if (*(_QWORD *)(v269 + *(int *)(v267 + 1996)) == v261
        && *(_DWORD *)(v269 + 32) == (_DWORD)v607
        && *(_DWORD *)(v269 + 36) == (_DWORD)v600
        && *(_DWORD *)(v269 + 40) == (_DWORD)v594)
      {
        v271 = objc_getProperty((id)v269, v270, 56, 1);
        goto LABEL_480;
      }
LABEL_531:
      if (v260 == ++v268)
      {
        v292 = objc_msgSend(v258, "countByEnumeratingWithState:objects:count:", &v612, v652, 16);
        v260 = v292;
        if (!v292)
        {
          a1 = v604;
          v241 = (uint64_t)v258;
          v214 = v568;
          v220 = v611;
          goto LABEL_446;
        }
        continue;
      }
      goto LABEL_471;
    }
    break;
  }
  if ((v563 & 1) == 0)
  {
    v19 = v587;
    v261 = v578;
    v267 = 0x1EF23E000;
    goto LABEL_531;
  }
  v271 = 0;
  v19 = v587;
  v261 = v578;
LABEL_480:
  v591 = v271;
  v273 = objc_msgSend(v591, "isEqual:", a6);
  if ((v273 & 1) != 0)
  {
    v593 = 0;
    goto LABEL_482;
  }
  if (v269)
  {
    v276 = objc_getProperty((id)v269, v272, 56, 1);
    v593 = v276 != 0;
    v569 = v276;
    if (v276)
    {
      v599 = 1;
      v567 = objc_getProperty((id)v269, v272, 56, 1);
      if ((-[SAWaitInfo displaysSameContentAs:forPid:tid:displayOptions:]((uint64_t)v567, a6, *(_DWORD *)(v269 + 28), *(_QWORD *)(v269 + 48), *(_QWORD *)(v604 + 232)) & 1) != 0)
      {
        v577 = 0;
        v593 = 1;
        v274 = obj;
        v275 = 0x1EF23E000uLL;
LABEL_488:
        v277 = objc_getProperty((id)v269, v272, *(int *)(v275 + 1984), 1);
        goto LABEL_489;
      }
    }
    v599 = 1;
    v570 = objc_getProperty((id)v269, v272, 56, 1);
    if (v570)
    {
      v286 = 0;
      goto LABEL_520;
    }
    v272 = (const char *)*(unsigned int *)(v269 + 28);
    v288 = *(_QWORD *)(v269 + 48);
  }
  else
  {
    v272 = 0;
    v593 = 0;
    v569 = 0;
    v288 = 0;
  }
  v267 = 0x1EF23E000;
  if (a6)
  {
    v570 = 0;
    if (-[SAWaitInfo _displaysContentForPid:tid:options:displayString:nameCallback:]((uint64_t)a6, (int)v272, v288, *(_QWORD *)(v604 + 232), 0, 0))
    {
      v286 = 0;
      v599 = 1;
      goto LABEL_521;
    }
  }
  else
  {
    v570 = 0;
  }
LABEL_482:
  v274 = obj;
  v275 = 0x1EF23E000;
  v599 = v273 ^ 1;
  if (v269)
  {
    v577 = v273 ^ 1;
    goto LABEL_488;
  }
  v277 = 0;
  v577 = v273 ^ 1;
LABEL_489:
  v575 = v277;
  v279 = objc_msgSend(v575, "isEqual:", v274);
  if ((v279 & 1) != 0)
  {
    v580 = 0;
    goto LABEL_491;
  }
  if (!v269)
  {
    v289 = 0;
    v580 = 0;
    v565 = 0;
    v290 = 0;
    if (v274)
      goto LABEL_509;
    goto LABEL_535;
  }
  v283 = objc_getProperty((id)v269, v278, *(int *)(v275 + 1984), 1);
  v580 = v283 != 0;
  v565 = v283;
  if (v283)
  {
    v564 = objc_getProperty((id)v269, v284, *(int *)(v275 + 1984), 1);
    if (-[SATurnstileInfo displaysSameContentAs:forPid:tid:displayOptions:]((uint64_t)v564, v274, *(unsigned int *)(v269 + 28), *(_QWORD *)(v269 + 48), *(_QWORD *)(v604 + 232)))
    {
      v281 = objc_msgSend(v568, "isPartOfADeadlock");
      v282 = 0;
      v280 = 1;
      v580 = 1;
LABEL_497:
      v285 = v280;
      v280 = v282;
      if (((v281 ^ *(unsigned __int8 *)(v269 + 25)) & 1) != 0)
        goto LABEL_498;
LABEL_516:
      v291 = objc_msgSend(v568, "isBlockedByADeadlock");
      v261 = v578;
      v286 = v291 ^ objc_msgSend(v568, "isBlockedByADeadlock") ^ 1;
      if ((v280 & 1) != 0)
        goto LABEL_517;
LABEL_524:
      if (!v580)
        goto LABEL_525;
LABEL_518:

      v19 = v587;
      if ((v285 & 1) == 0)
        goto LABEL_519;
LABEL_526:

      if ((v577 & 1) == 0)
        goto LABEL_527;
LABEL_520:
      v267 = 0x1EF23E000;
LABEL_521:

      if (v593)
        goto LABEL_522;
LABEL_528:
      if (v599)
        goto LABEL_529;
      goto LABEL_530;
    }
  }
  v287 = *(int *)(v275 + 1984);
  v285 = 1;
  v566 = objc_getProperty((id)v269, v284, v287, 1);
  if (v566)
  {
    v286 = 0;
    goto LABEL_517;
  }
  v289 = *(_DWORD *)(v269 + 28);
  v290 = *(_QWORD *)(v269 + 48);
  if (!v274)
  {
LABEL_535:
    v566 = 0;
    goto LABEL_491;
  }
LABEL_509:
  v566 = 0;
  if ((-[SATurnstileInfo _displaysContentForPid:tid:threadPriority:options:displayString:nameCallback:]((uint64_t)v274, v289, v290, 0, *(_QWORD *)(v604 + 232), 0, 0) & 1) != 0)
  {
    v286 = 0;
    v285 = 1;
    goto LABEL_517;
  }
LABEL_491:
  v280 = v279 ^ 1;
  v281 = objc_msgSend(v568, "isPartOfADeadlock");
  if (v269)
  {
    v282 = v279 ^ 1;
    goto LABEL_497;
  }
  v285 = v279 ^ 1;
  if ((v281 & 1) == 0)
    goto LABEL_516;
LABEL_498:
  v286 = 0;
  if (!v280)
    goto LABEL_524;
LABEL_517:

  if (v580)
    goto LABEL_518;
LABEL_525:
  v19 = v587;
  if (v285)
    goto LABEL_526;
LABEL_519:

  if (v577)
    goto LABEL_520;
LABEL_527:
  v267 = 0x1EF23E000;
  if (!v593)
    goto LABEL_528;
LABEL_522:

  if ((v599 & 1) != 0)
LABEL_529:

LABEL_530:
  if ((v286 & 1) == 0)
    goto LABEL_531;
  v250 = (unsigned int *)(id)v269;

  a1 = v604;
  v214 = v568;
  v220 = v611;
  if (v269)
  {
    a3 = v601;
    goto LABEL_554;
  }
LABEL_447:
  v242 = p_vtable + 2696;
  v243 = objc_msgSend(v214, "isPartOfADeadlock");
  v244 = objc_msgSend(v214, "isBlockedByADeadlock");
  v245 = objc_msgSend(*(id *)(a1 + 40), "pid");
  v246 = objc_msgSend(v220, "threadId");
  v247 = objc_msgSend(v573, "basePriority");
  v248 = -[SATimeRange initWithStart:end:]([SATimeRange alloc], "initWithStart:end:", v588, v609);
  v560 = v247;
  v249 = a6;
  +[SACallTreeState treeCountedStateWithWaitInfo:turnstileInfo:isPartOfADeadlock:isBlockedByADeadlock:state:microstackshotState:pid:threadId:threadPriority:timeRange:originPid:proximatePid:startSampleIndex:sampleCount:](v242, a6, obj, v243, v244, v578, v607, v245, v246, v560, v248, __SPAIR64__(v594, v600), v601, v595);
  v250 = (unsigned int *)objc_claimAutoreleasedReturnValue();

  a1 = v604;
  objc_msgSend(v572, "addObject:", v250);
  v16 = v585;
LABEL_448:
  v206 = a4;
  v205 = v584;
  if (objc_msgSend(newValue, "count"))
  {
    v252 = v214;
    if (v250)
      v253 = objc_getProperty(v250, v251, 80, 1);
    else
      v253 = 0;
    v254 = v253;

    if (v254)
    {
      if (v250)
        v256 = objc_getProperty(v250, v255, 80, 1);
      else
        v256 = 0;
      v257 = v256;
      objc_msgSend(v257, "addObjectsFromArray:", newValue);

      v214 = v252;
    }
    else
    {
      v214 = v252;
      if (v250)
        objc_setProperty_atomic(v250, v255, newValue, 80);
    }
  }

  v598 = 0;
  v151 = v606;
LABEL_542:
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24) = v151;
  v95 = v611;
  v20 = v588;
LABEL_587:
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8) + 40), v582);
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 8) + 40), v206);
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 8) + 40), v205);
  v96 = v609;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 8) + 40), v609);
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 8) + 40), v624);
  v352 = v151 + v581;
  if (!v581)
    v352 = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24) = v352;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 24) = v581;

LABEL_590:
}

uint64_t __245__SASamplePrinter_addStackForDispatchQueue_orSwiftTaskStates_orThread_andThreadStateIndexes_task_toRootObjects_nameChanges_dispatchQueueChanges_swiftTaskChanges_threadChanges_priorityChanges_microstackshotSummary_onlyHeaviestStack_includeState___block_invoke_1548(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "startTimestamp");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startTimestamp");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = objc_msgSend(v5, "compare:", v6);
  return v7;
}

uint64_t __125__SASamplePrinter_addStack_toStream_sampleCount_binariesToDisplay_primaryState_primaryMicrostackshotState_onlyHeaviestStack___block_invoke(uint64_t a1, void *a2, void *a3)
{
  unint64_t v3;
  void *v4;
  NSObject *v6;
  id v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  NSObject *v12;
  char isKindOfClass;
  const char *v14;
  id v15;
  id v16;
  unint64_t v17;
  const char *v18;
  id v19;
  id v20;
  unint64_t v21;
  void *v22;
  unint64_t v23;
  void *v24;
  unint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  const char *v28;
  char v29;
  objc_class *v30;
  objc_class *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  Class isa;
  unint64_t v40;
  unsigned int v41;
  unsigned int v42;
  id v43;
  id v44;
  id v45;
  const char *v46;
  unint64_t v47;
  NSObject *v48;
  objc_class *v49;
  uint64_t v50;
  objc_class *v51;
  id v52;
  objc_class *v53;
  objc_class *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  id v62;
  const char *v63;
  id Property;
  id v65;
  SEL v66;
  id v67;
  NSObject *v68;
  objc_class *v69;
  objc_class *v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  NSObject *v79;
  objc_class *v80;
  id v81;
  objc_class *v82;
  id v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint8_t buf[4];
  uint64_t v93;
  __int16 v94;
  uint64_t v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    v47 = *__error();
    _sa_logt();
    v48 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      v49 = (objc_class *)objc_opt_class();
      NSStringFromClass(v49);
      v3 = (unint64_t)objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v50 = objc_msgSend((id)v3, "UTF8String");
      v51 = (objc_class *)objc_opt_class();
      NSStringFromClass(v51);
      v52 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      *(_DWORD *)buf = 136315394;
      v93 = v50;
      v94 = 2080;
      v95 = objc_msgSend(v52, "UTF8String");
      _os_log_error_impl(&dword_1B9BE0000, v48, OS_LOG_TYPE_ERROR, "first is a %s, second is a %s", buf, 0x16u);

    }
    *__error() = v47;
    v53 = (objc_class *)objc_opt_class();
    NSStringFromClass(v53);
    v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v12 = -[NSObject UTF8String](v6, "UTF8String");
    v54 = (objc_class *)objc_opt_class();
    NSStringFromClass(v54);
    v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend(v7, "UTF8String");
    _SASetCrashLogMessage(11144, "first is a %s, second is a %s", v55, v56, v57, v58, v59, v60, (char)v12);

    _os_crash();
    __break(1u);
LABEL_57:
    if (v47)
    {
      v43 = 0;
      v10 = 1;
LABEL_96:

      goto LABEL_33;
    }
    if (v12)
    {
      v61 = objc_getProperty(v12, v46, 56, 1);
      if ((v4 & 1) != 0)
      {
        v62 = 0;
        v91 = v61;
        if (v61)
        {
          v10 = -1;
          v4 = 0;
          goto LABEL_95;
        }
        goto LABEL_94;
      }
LABEL_62:
      v62 = objc_getProperty((id)v3, v46, 56, 1);
      if (v61)
      {
        v91 = v61;
        v4 = v62;
        if (v62)
        {
          if (v12)
            Property = objc_getProperty(v12, v63, 56, 1);
          else
            Property = 0;
          v65 = Property;
          v67 = objc_getProperty((id)v3, v66, 56, 1);
          v10 = objc_msgSend(v65, "compare:", v67);

          goto LABEL_95;
        }
        goto LABEL_70;
      }
LABEL_94:
      v91 = 0;
      v4 = v62;
      v10 = v62 != 0;
      goto LABEL_95;
    }
    v61 = 0;
    if ((v4 & 1) == 0)
      goto LABEL_62;
LABEL_93:
    v62 = 0;
    goto LABEL_94;
  }
  v8 = -[NSObject sampleCount](v6, "sampleCount");
  v9 = objc_msgSend(v7, "sampleCount");
  if (v8 < v9)
  {
LABEL_4:
    v10 = 1;
    goto LABEL_8;
  }
  if (v8 > v9)
    goto LABEL_7;
  v12 = 0x1E7145000;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v3 = *__error();
      _sa_logt();
      v68 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
      {
        v69 = (objc_class *)objc_opt_class();
        NSStringFromClass(v69);
        v12 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        *(_DWORD *)buf = 136315138;
        v93 = -[NSObject UTF8String](v12, "UTF8String");
        _os_log_error_impl(&dword_1B9BE0000, v68, OS_LOG_TYPE_ERROR, "first is a %s", buf, 0xCu);

      }
      *__error() = v3;
      v70 = (objc_class *)objc_opt_class();
      NSStringFromClass(v70);
      v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v71 = objc_msgSend(v7, "UTF8String");
      _SASetCrashLogMessage(11186, "first is a %s", v72, v73, v74, v75, v76, v77, v71);

      _os_crash();
      __break(1u);
LABEL_70:
      v10 = -1;
LABEL_95:

      v47 = 0;
      v43 = 0;
      goto LABEL_96;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        v78 = *__error();
        _sa_logt();
        v79 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
        {
          v80 = (objc_class *)objc_opt_class();
          NSStringFromClass(v80);
          v81 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          *(_DWORD *)buf = 136315138;
          v93 = objc_msgSend(v81, "UTF8String");
          _os_log_error_impl(&dword_1B9BE0000, v79, OS_LOG_TYPE_ERROR, "second is a %s", buf, 0xCu);

        }
        *__error() = v78;
        v82 = (objc_class *)objc_opt_class();
        NSStringFromClass(v82);
        v83 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v84 = objc_msgSend(v83, "UTF8String");
        _SASetCrashLogMessage(11190, "second is a %s", v85, v86, v87, v88, v89, v90, v84);

        _os_crash();
        __break(1u);
      }
      v12 = v6;
      v27 = v7;
      v3 = (unint64_t)v27;
      if (!v12)
      {
        if (!v27)
          goto LABEL_93;
        if ((v27[25] & 1) != 0 || (v27[26] & 1) != 0)
          goto LABEL_42;
        isa = 0;
        goto LABEL_39;
      }
      v29 = BYTE1(v12[3].isa);
      if (v27)
      {
        if ((v29 & 1) == (v27[25] & 1))
        {
          v29 = BYTE2(v12[3].isa);
          if ((v29 & 1) == (v27[26] & 1))
          {
LABEL_38:
            isa = v12[9].isa;
LABEL_39:
            v40 = *(_QWORD *)(v3 + 72);
            if ((unint64_t)isa < v40)
            {
LABEL_40:
              v10 = -1;
LABEL_33:

              goto LABEL_8;
            }
            if ((unint64_t)isa <= v40)
            {
              if (v12)
                v41 = v12[4].isa;
              else
                v41 = 0;
              v42 = *(_DWORD *)(v3 + 32);
              if (v41 < v42)
                goto LABEL_40;
              if (v41 <= v42)
              {
                if (!v12)
                {
                  v43 = 0;
                  goto LABEL_50;
                }
                LOBYTE(v10) = 0;
LABEL_49:
                LOBYTE(v4) = 1;
                v43 = objc_getProperty(v12, v28, 64, 1);
                if ((v10 & 1) != 0)
                {
                  v44 = 0;
LABEL_51:
                  v45 = v44;
                  v47 = (unint64_t)v45;
                  if (v43)
                  {
                    if (v45)
                      v10 = objc_msgSend(v43, "compare:", v45);
                    else
                      v10 = -1;
                    goto LABEL_96;
                  }
                  goto LABEL_57;
                }
LABEL_50:
                v44 = objc_getProperty((id)v3, v28, 64, 1);
                LOBYTE(v4) = 0;
                goto LABEL_51;
              }
            }
            goto LABEL_42;
          }
        }
      }
      else if ((BYTE1(v12[3].isa) & 1) == 0)
      {
        v29 = BYTE2(v12[3].isa);
        if ((v29 & 1) == 0)
        {
          if (!v12[9].isa)
          {
            v10 = 1;
            if (LODWORD(v12[4].isa))
              goto LABEL_33;
            goto LABEL_49;
          }
LABEL_42:
          v10 = 1;
          goto LABEL_33;
        }
      }
      if ((v29 & 1) != 0)
        v10 = -1;
      else
        v10 = 1;
      goto LABEL_33;
    }
LABEL_7:
    v10 = -1;
    goto LABEL_8;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      goto LABEL_4;
    v3 = *__error();
    _sa_logt();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v30 = (objc_class *)objc_opt_class();
      NSStringFromClass(v30);
      v12 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      *(_DWORD *)buf = 136315138;
      v93 = -[NSObject UTF8String](v12, "UTF8String");
      _os_log_error_impl(&dword_1B9BE0000, v6, OS_LOG_TYPE_ERROR, "second is a %s", buf, 0xCu);

    }
    *__error() = v3;
    v31 = (objc_class *)objc_opt_class();
    NSStringFromClass(v31);
    v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v32 = objc_msgSend(v7, "UTF8String");
    _SASetCrashLogMessage(11182, "second is a %s", v33, v34, v35, v36, v37, v38, v32);

    _os_crash();
    __break(1u);
    goto LABEL_38;
  }
  if (v6)
    v15 = objc_getProperty(v6, v14, 40, 1);
  else
    v15 = 0;
  v16 = v15;
  v17 = objc_msgSend(v16, "count");

  if (v7)
    v19 = objc_getProperty(v7, v18, 40, 1);
  else
    v19 = 0;
  v20 = v19;
  v21 = objc_msgSend(v20, "count");

  if (v17 < v21)
    goto LABEL_7;
  if (v17 > v21)
    goto LABEL_4;
  -[NSObject frame](v6, "frame");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_msgSend(v22, "address");

  objc_msgSend(v7, "frame");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = objc_msgSend(v24, "address");

  if (v23 <= v25)
    v26 = 0;
  else
    v26 = -1;
  if (v23 < v25)
    v10 = 1;
  else
    v10 = v26;
LABEL_8:

  return v10;
}

uint64_t __125__SASamplePrinter_addStack_toStream_sampleCount_binariesToDisplay_primaryState_primaryMicrostackshotState_onlyHeaviestStack___block_invoke_1577(uint64_t a1, void *a2, void *a3)
{
  _DWORD *v4;
  _DWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  NSObject *v17;
  objc_class *v18;
  id v19;
  uint64_t v20;
  objc_class *v21;
  id v22;
  objc_class *v23;
  id v24;
  char v25;
  objc_class *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t buf[4];
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v5 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    v16 = *__error();
    _sa_logt();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = (objc_class *)objc_opt_class();
      NSStringFromClass(v18);
      v19 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v20 = objc_msgSend(v19, "UTF8String");
      v21 = (objc_class *)objc_opt_class();
      NSStringFromClass(v21);
      v22 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      *(_DWORD *)buf = 136315394;
      v35 = v20;
      v36 = 2080;
      v37 = objc_msgSend(v22, "UTF8String");
      _os_log_error_impl(&dword_1B9BE0000, v17, OS_LOG_TYPE_ERROR, "first is a %s, second is a %s", buf, 0x16u);

    }
    *__error() = v16;
    v23 = (objc_class *)objc_opt_class();
    NSStringFromClass(v23);
    v24 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v25 = objc_msgSend(v24, "UTF8String");
    v26 = (objc_class *)objc_opt_class();
    NSStringFromClass(v26);
    v27 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend(v27, "UTF8String");
    _SASetCrashLogMessage(11263, "first is a %s, second is a %s", v28, v29, v30, v31, v32, v33, v25);

    _os_crash();
    __break(1u);
  }
  v6 = objc_msgSend(v4, "size");
  if (v6 < objc_msgSend(v5, "size"))
    goto LABEL_4;
  v8 = objc_msgSend(v4, "size");
  if (v8 > objc_msgSend(v5, "size") || (v9 = objc_msgSend(v4, "tier"), v9 < objc_msgSend(v5, "tier")))
  {
LABEL_7:
    v7 = -1;
    goto LABEL_8;
  }
  v11 = objc_msgSend(v4, "tier");
  if (v11 <= objc_msgSend(v5, "tier"))
  {
    if (v4)
    {
      v12 = v4[3];
      if (v5)
      {
LABEL_12:
        v13 = v5[3];
        goto LABEL_13;
      }
    }
    else
    {
      v12 = 0;
      if (v5)
        goto LABEL_12;
    }
    v13 = 0;
LABEL_13:
    if (v12 < v13)
      goto LABEL_7;
    if (v4)
    {
      v14 = v4[3];
      if (v5)
      {
LABEL_16:
        v15 = v5[3];
LABEL_17:
        v7 = v14 > v15;
        goto LABEL_8;
      }
    }
    else
    {
      v14 = 0;
      if (v5)
        goto LABEL_16;
    }
    v15 = 0;
    goto LABEL_17;
  }
LABEL_4:
  v7 = 1;
LABEL_8:

  return v7;
}

void __125__SASamplePrinter_addStack_toStream_sampleCount_binariesToDisplay_primaryState_primaryMicrostackshotState_onlyHeaviestStack___block_invoke_1583(uint64_t a1, void *a2, unsigned int a3, _BYTE *a4)
{
  _DWORD *v4;
  void *v5;
  void *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  const char *v23;
  const char *v24;
  _DWORD *v25;
  const char *v26;
  id v27;
  id v28;
  uint64_t v29;
  void *v30;
  id *v31;
  id **v32;
  id v33;
  id v34;
  void *v35;
  void *v36;
  const char *v37;
  id *v38;
  uint64_t v39;
  id v40;
  id v41;
  void *v42;
  void *v43;
  void *v44;
  id *v45;
  uint64_t v46;
  uint64_t v47;
  objc_class *v48;
  id v49;
  id v50;
  _DWORD *v51;
  const char *v52;
  id v53;
  id v54;
  const char *v55;
  const char *v56;
  id v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t k;
  void *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  id v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t m;
  void *v73;
  uint64_t v74;
  void *v75;
  void *v76;
  uint64_t v77;
  id v78;
  id v79;
  uint64_t v80;
  _DWORD *v81;
  _BOOL4 v82;
  uint64_t v83;
  _QWORD *v84;
  BOOL v85;
  void *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  NSObject *v91;
  objc_class *v92;
  id v93;
  uint64_t v94;
  objc_class *v95;
  id v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  void *v106;
  id v107;
  uint64_t v108;
  void *v109;
  void *v110;
  id v111;
  int v112;
  int v113;
  uint64_t v114;
  const char *v115;
  const char *v116;
  id v117;
  id v118;
  BOOL v119;
  const char *v120;
  void *v121;
  uint64_t v122;
  id v123;
  id v124;
  id v125;
  void *v126;
  id i;
  id v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  id v135;
  id v136;
  BOOL v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  unsigned int v142;
  uint64_t v143;
  id v144;
  id v145;
  BOOL v146;
  const char *v147;
  id v148;
  id *v149;
  id v150;
  void *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  id *v157;
  void *v158;
  id WeakRetained;
  void *v160;
  void *v161;
  id v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  int v167;
  uint64_t v168;
  void *v169;
  __CFString *v170;
  __CFString *v171;
  __CFString *v172;
  int v173;
  uint64_t v174;
  const char *v175;
  void *v176;
  id Property;
  id v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  id v183;
  uint64_t v184;
  uint64_t v185;
  id v186;
  id v187;
  uint64_t v188;
  void *v189;
  id v190;
  uint64_t v191;
  void *v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  void *v196;
  void *v197;
  uint64_t v198;
  int v199;
  void *v200;
  uint64_t v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  unint64_t v206;
  int v207;
  void *v208;
  uint64_t v209;
  unint64_t v210;
  SEL v211;
  id v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char v218;
  id v219;
  unsigned int *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  void *v224;
  void *v225;
  uint64_t v226;
  uint64_t v227;
  const __CFString *v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  _QWORD *v232;
  char v233;
  void *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  void *v241;
  unsigned int v242;
  uint64_t v243;
  uint64_t v244;
  unsigned int v245;
  unint64_t v246;
  void *v247;
  uint64_t v248;
  uint64_t v249;
  unsigned int v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  NSObject *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  int v269;
  NSObject *v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  NSObject *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  int v289;
  NSObject *v290;
  void *v291;
  id v292;
  uint64_t v293;
  void *v294;
  id v295;
  char v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  int v303;
  NSObject *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  int v311;
  NSObject *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  int v322;
  NSObject *v323;
  uint64_t v324;
  char v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  void *v332;
  uint64_t v333;
  unint64_t j;
  void *v335;
  uint64_t v336;
  int v337;
  void *v338;
  uint64_t v339;
  uint64_t v340;
  void *v341;
  unint64_t v342;
  int v343;
  void *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  void *v351;
  uint64_t v352;
  int v353;
  void *v354;
  uint64_t v355;
  uint64_t v356;
  void *v357;
  unint64_t v358;
  int v359;
  void *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  void *v369;
  char v370;
  unsigned int v371;
  unsigned int v372;
  unsigned int v373;
  __CFString *v374;
  id v375;
  void *v376;
  uint64_t v377;
  void *context;
  void (**v379)(_QWORD, _QWORD);
  id v380;
  unsigned int *self;
  uint64_t v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  _QWORD v391[5];
  unsigned int *v392;
  _QWORD v393[5];
  unsigned int *v394;
  _QWORD v395[8];
  unsigned int v396;
  char v397;
  _BYTE v398[128];
  uint8_t v399[128];
  uint8_t buf[4];
  uint64_t v401;
  __int16 v402;
  uint64_t v403;
  void *v404;
  __CFString *v405;
  uint8_t v406[8];
  uint8_t *v407;
  uint64_t v408;
  int v409;
  uint8_t v410[8];
  uint8_t *v411;
  uint64_t v412;
  unsigned int v413;
  uint64_t v414;

  v414 = *MEMORY[0x1E0C80C00];
  v380 = a2;
  v9 = (void *)MEMORY[0x1BCCCC288]();
  if (a3 >= 0x7FFFFFFF)
  {
    v19 = *__error();
    _sa_logt();
    v262 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v262, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v410 = 67109120;
      *(_DWORD *)&v410[4] = a3;
      _os_log_error_impl(&dword_1B9BE0000, v262, OS_LOG_TYPE_ERROR, "unmodifed depth %u", v410, 8u);
    }

    *__error() = v19;
    _SASetCrashLogMessage(11328, "unmodifed depth %u", v263, v264, v265, v266, v267, v268, a3);
    _os_crash();
    __break(1u);
    goto LABEL_315;
  }
  v10 = *(_QWORD *)(a1 + 168);
  if (v10 && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) >= v10)
    goto LABEL_7;
  v11 = *(unsigned __int8 *)(a1 + 208);
  if (!*(_BYTE *)(a1 + 208))
  {
LABEL_9:
    v14 = *(_QWORD *)(a1 + 96);
    v15 = *(unsigned int *)(*(_QWORD *)(v14 + 8) + 24);
    if ((int)v15 >= 1)
    {
      v16 = v15 + 1;
      do
      {
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24) + 8 * (v16 - 2)) >= a3)
          --*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24);
        --v16;
      }
      while (v16 > 1);
      v14 = *(_QWORD *)(a1 + 96);
    }
    *(_QWORD *)v410 = 0;
    v411 = v410;
    v412 = 0x2020000000;
    v413 = a3;
    v17 = *(_DWORD *)(*(_QWORD *)(v14 + 8) + 24);
    v18 = *(_QWORD *)(a1 + 104);
    v19 = a3;
    v382 = a1;
    if (v17 <= 0)
    {
LABEL_18:
      context = v9;
      *(_QWORD *)v406 = 0;
      v407 = v406;
      v408 = 0x2020000000;
      v20 = 2 * v19 + 2;
      if (v11)
        v20 = 2;
      v409 = v20;
      v395[0] = MEMORY[0x1E0C809B0];
      v395[1] = 3221225472;
      v395[2] = __125__SASamplePrinter_addStack_toStream_sampleCount_binariesToDisplay_primaryState_primaryMicrostackshotState_onlyHeaviestStack___block_invoke_1588;
      v395[3] = &unk_1E7149918;
      v395[4] = v14;
      v395[5] = v18;
      v396 = a3;
      v395[6] = v410;
      v395[7] = v406;
      v397 = v11;
      v379 = (void (**)(_QWORD, _QWORD))MEMORY[0x1BCCCC450](v395);
      objc_opt_class();
      v21 = a1;
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v22 = v380;
        v4 = v22;
        self = v22;
        if (!*(_QWORD *)(a1 + 176) || (unint64_t)objc_msgSend(v22, "sampleCount") > *(_QWORD *)(a1 + 176))
        {
          if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "systemstatsFormat")
            && (objc_msgSend(v4, "isTruncatedLeafCallstack") & 1) != 0)
          {
            goto LABEL_379;
          }
          if (!a3)
          {
            objc_msgSend(v4, "frame");
            v86 = (void *)objc_claimAutoreleasedReturnValue();
            v87 = objc_msgSend(v86, "isTruncatedBacktraceFrame");

            v21 = v382;
            v88 = *(_QWORD *)(*(_QWORD *)(v382 + 112) + 8);
            LODWORD(v377) = 0;
            if (v87)
              *(_BYTE *)(v88 + 24) = 1;
            else
              *(_BYTE *)(v88 + 24) = 0;
LABEL_135:
            v4 = self;
LABEL_136:
            if (!*(_QWORD *)(v21 + 64))
              goto LABEL_140;
            if (!v4)
              goto LABEL_333;
            for (i = objc_getProperty(v4, v24, 40, 1); ; i = 0)
            {
              v128 = i;
              objc_msgSend(v128, "sortUsingComparator:", *(_QWORD *)(v382 + 64));

              v4 = self;
              v21 = v382;
LABEL_140:
              if (*(_BYTE *)(v21 + 209))
              {
                v129 = *(_QWORD *)(*(_QWORD *)(v21 + 120) + 8);
                if (*(_BYTE *)(v129 + 24))
                  *(_BYTE *)(v129 + 24) = 0;
                else
                  objc_msgSend(*(id *)(v21 + 40), "appendString:", CFSTR(","));
                objc_msgSend(*(id *)(v382 + 40), "appendString:", CFSTR("{"));
                objc_msgSend(self, "writeJSONDictionaryEntriesToStream:", *(_QWORD *)(v382 + 40));
                v131 = *(void **)(v382 + 40);
                objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *((unsigned int *)v411 + 6));
                v132 = (void *)objc_claimAutoreleasedReturnValue();
                SAJSONWriteDictionaryEntry(v131, CFSTR("depth"), v132);

                if (!*(_BYTE *)(v382 + 210))
                {
                  v133 = *(void **)(v382 + 40);
                  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", -[SASamplePrinter displayTimeIndexForSampleIndex:](*(_QWORD *)(v382 + 32), objc_msgSend(self, "startSampleIndex") + objc_msgSend(self, "sampleCount") - 1));
                  v134 = (void *)objc_claimAutoreleasedReturnValue();
                  SAJSONWriteDictionaryEntry(v133, CFSTR("endIndex"), v134);

                }
                if ((_DWORD)v377)
                  SAJSONWriteDictionaryEntry(*(void **)(v382 + 40), CFSTR("patched"), MEMORY[0x1E0C9AAB0]);
                objc_msgSend(*(id *)(v382 + 40), "appendString:", CFSTR("}"));
                v77 = *(_QWORD *)(v382 + 80);
                goto LABEL_152;
              }
              v130 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 128) + 8) + 24);
              if (v130 != 0x7FFFFFFFFFFFFFFFLL)
              {
                if (*(_BYTE *)(v21 + 210))
                {
                  saos_printf_frame(*(void **)(v21 + 40), *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v21 + 136) + 8) + 24), *(unsigned int *)(v21 + 200), v130 - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 144) + 8) + 24) + 1, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v21 + 152) + 8) + 24), *(void **)(*(_QWORD *)(*(_QWORD *)(v21 + 160) + 8) + 40));
                }
                else
                {
                  v153 = -[SASamplePrinter displayTimeIndexForSampleIndex:](*(_QWORD *)(v21 + 32), v130);
                  saos_printf_timeline_frame(*(void **)(v382 + 40), *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v382 + 136) + 8) + 24), *(unsigned int *)(v382 + 200), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v382 + 128) + 8) + 24)- *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v382 + 144) + 8) + 24)+ 1, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v382 + 152) + 8) + 24), *(void **)(*(_QWORD *)(*(_QWORD *)(v382 + 160) + 8) + 40), v153);
                }
                ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v382 + 80) + 8) + 24);
                *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v382 + 152) + 8) + 24) = 0;
                *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v382 + 136) + 8) + 24) = 0;
                v154 = *(_QWORD *)(*(_QWORD *)(v382 + 160) + 8);
                v155 = *(void **)(v154 + 40);
                *(_QWORD *)(v154 + 40) = 0;

                v4 = self;
                v21 = v382;
                *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v382 + 144) + 8) + 24) = 0x7FFFFFFFFFFFFFFFLL;
                *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v382 + 128) + 8) + 24) = 0x7FFFFFFFFFFFFFFFLL;
              }
              if (!objc_msgSend(*(id *)(*(_QWORD *)(v21 + 32) + 16), "systemstatsFormat"))
                break;
              v156 = *(_QWORD *)(v21 + 32);
              objc_msgSend(v4, "frame");
              v157 = (id *)(id)objc_claimAutoreleasedReturnValue();
              v158 = v157;
              if (!v156)
              {
                v171 = 0;
                goto LABEL_350;
              }
              if (!v157)
              {
                v5 = 0;
LABEL_348:
                v171 = CFSTR("???");
LABEL_349:

LABEL_350:
                v405 = v171;
                objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v405, 1);
                v180 = (void *)objc_claimAutoreleasedReturnValue();
                goto LABEL_351;
              }
              WeakRetained = objc_loadWeakRetained(v157 + 3);
              v5 = WeakRetained;
              if (!WeakRetained)
                goto LABEL_348;
              objc_msgSend(WeakRetained, "binary");
              v160 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v5, "segment");
              v161 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v161, "name");
              v162 = (id)objc_claimAutoreleasedReturnValue();
              objc_msgSend(*(id *)(v156 + 80), "objectForKeyedSubscript:", v160);
              v163 = (void *)objc_claimAutoreleasedReturnValue();
              v164 = v163;
              if (v162)
              {
                objc_msgSend(v163, "objectForKeyedSubscript:", v162);
                v165 = (void *)objc_claimAutoreleasedReturnValue();
              }
              else
              {
                objc_msgSend(MEMORY[0x1E0C99E38], "null");
                v182 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v164, "objectForKeyedSubscript:", v182);
                v165 = (void *)objc_claimAutoreleasedReturnValue();

              }
              if (v165)
              {
                v171 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%lu + %llu"), objc_msgSend(v165, "unsignedLongValue"), objc_msgSend(v158, "address") - objc_msgSend(v5, "loadAddress"));

                goto LABEL_349;
              }
LABEL_321:
              v289 = *__error();
              _sa_logt();
              v290 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v290, OS_LOG_TYPE_ERROR))
              {
                objc_msgSend(v5, "binary");
                v291 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v291, "debugDescription");
                v292 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                v293 = objc_msgSend(v292, "UTF8String");
                *(_DWORD *)buf = 136315138;
                v401 = v293;
                _os_log_error_impl(&dword_1B9BE0000, v290, OS_LOG_TYPE_ERROR, "binaryIndex nil for %s", buf, 0xCu);

              }
              *__error() = v289;
              objc_msgSend(v5, "binary");
              v294 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v294, "debugDescription");
              v295 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
              v296 = objc_msgSend(v295, "UTF8String");
              _SASetCrashLogMessage(12296, "binaryIndex nil for %s", v297, v298, v299, v300, v301, v302, v296);

              _os_crash();
              __break(1u);
LABEL_324:
              v303 = *__error();
              _sa_logt();
              v304 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v304, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_error_impl(&dword_1B9BE0000, v304, OS_LOG_TYPE_ERROR, "Displaying IO in call trees unsupported in systemstats format", buf, 2u);
              }

              *__error() = v303;
              _SASetCrashLogMessage(11788, "Displaying IO in call trees unsupported in systemstats format", v305, v306, v307, v308, v309, v310, v370);
              _os_crash();
              __break(1u);
LABEL_327:
              v311 = *__error();
              _sa_logt();
              v312 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v312, OS_LOG_TYPE_ERROR))
              {
                v313 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v382 + 128) + 8) + 24);
                v314 = objc_msgSend(self, "startSampleIndex");
                *(_DWORD *)buf = 134218240;
                v401 = v313;
                v402 = 2048;
                v403 = v314;
                _os_log_error_impl(&dword_1B9BE0000, v312, OS_LOG_TYPE_ERROR, "leafFrameSkippedCountedStateToIndex %lu + 1 != treeCountedState.startSampleIndex %lu", buf, 0x16u);
              }

              *__error() = v311;
              v315 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v382 + 128) + 8) + 24);
              objc_msgSend(self, "startSampleIndex");
              _SASetCrashLogMessage(11603, "leafFrameSkippedCountedStateToIndex %lu + 1 != treeCountedState.startSampleIndex %lu", v316, v317, v318, v319, v320, v321, v315);
              _os_crash();
              __break(1u);
LABEL_330:
              v322 = *__error();
              _sa_logt();
              v323 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v323, OS_LOG_TYPE_ERROR))
              {
                v324 = objc_msgSend(*(id *)(*(_QWORD *)(v382 + 32) + 16), "callTreeTimestampsTimeDomain");
                *(_DWORD *)buf = 134217984;
                v401 = v324;
                _os_log_error_impl(&dword_1B9BE0000, v323, OS_LOG_TYPE_ERROR, "Time domain other than walltime not handled for systemstats format: 0x%llx", buf, 0xCu);
              }

              *__error() = v322;
              v325 = objc_msgSend(*(id *)(*(_QWORD *)(v382 + 32) + 16), "callTreeTimestampsTimeDomain");
              _SASetCrashLogMessage(11791, "Time domain other than walltime not handled for systemstats format: 0x%llx", v326, v327, v328, v329, v330, v331, v325);
              _os_crash();
              __break(1u);
LABEL_333:
              ;
            }
            objc_msgSend(v4, "frame");
            v166 = (void *)objc_claimAutoreleasedReturnValue();
            v167 = objc_msgSend(v166, "isKernel");

            if (v167)
            {
              v168 = v382;
              -[SASamplePrinter binaryImagesHitByTask:](*(_QWORD *)(v382 + 32), *(void **)(v382 + 48));
              v169 = self;
              v158 = (void *)objc_claimAutoreleasedReturnValue();
              v170 = *(__CFString **)(v382 + 56);
              v171 = v170;
            }
            else
            {
              v171 = 0;
              v169 = self;
              v168 = v382;
              v170 = *(__CFString **)(v382 + 56);
              v158 = v170;
            }
            v172 = v170;
            v173 = objc_msgSend(v169, "isTruncatedLeafCallstack");
            v174 = *(_QWORD *)(v168 + 32);
            if (v173)
            {
              objc_msgSend(v169, "frame");
              v176 = (void *)objc_claimAutoreleasedReturnValue();
              if (v169)
                Property = objc_getProperty(v169, v175, 48, 1);
              else
                Property = 0;
              v178 = Property;
              v179 = (void *)-[SASamplePrinter copyDescriptionForTruncatedLeafFrame:otherCallTreeDescription:binariesToDisplay:extraBinariesToDisplay:](v174, v176, v178, v158, v171);
              v404 = v179;
              objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v404, 1);
              v180 = (void *)objc_claimAutoreleasedReturnValue();

            }
            else
            {
              objc_msgSend(v169, "frame");
              v176 = (void *)objc_claimAutoreleasedReturnValue();
              v180 = -[SASamplePrinter copyDescriptionsForFrame:binariesToDisplay:extraBinariesToDisplay:](v174, v176, v158, v171);
            }

LABEL_351:
            if ((_DWORD)v377)
            {
              v332 = (void *)objc_msgSend(v180, "mutableCopy");
              objc_msgSend(v332, "insertObject:atIndex:", CFSTR("<patched truncated backtrace>"), 0);

            }
            else
            {
              v332 = v180;
            }
            v333 = v382;
            if ((unint64_t)objc_msgSend(v332, "count") >= 2)
            {
              for (j = 0; j < objc_msgSend(v332, "count") - 1; ++j)
              {
                objc_msgSend(v332, "objectAtIndexedSubscript:", j);
                v335 = (void *)objc_claimAutoreleasedReturnValue();
                v336 = *(_QWORD *)(v333 + 32);
                if (*(_BYTE *)(v333 + 210))
                {
                  v337 = objc_msgSend(*(id *)(v336 + 16), "systemstatsFormat");
                  v338 = *(void **)(v333 + 40);
                  v339 = *((unsigned int *)v407 + 6);
                  if (v337)
                  {
                    v340 = objc_msgSend(self, "sampleCount");
                    objc_msgSend(self, "frame");
                    v341 = (void *)objc_claimAutoreleasedReturnValue();
                    saos_printf_frame_noindent(v338, v339, v340, objc_msgSend(v341, "isKernel"), v335);
                  }
                  else
                  {
                    v347 = *(unsigned int *)(v333 + 200);
                    v348 = objc_msgSend(self, "sampleCount");
                    objc_msgSend(self, "frame");
                    v341 = (void *)objc_claimAutoreleasedReturnValue();
                    saos_printf_frame(v338, v339, v347, v348, objc_msgSend(v341, "isKernel"), v335);
                  }
                }
                else
                {
                  v342 = -[SASamplePrinter displayTimeIndexForSampleIndex:](v336, objc_msgSend(self, "startSampleIndex") + objc_msgSend(self, "sampleCount") - 1);
                  v343 = objc_msgSend(*(id *)(*(_QWORD *)(v333 + 32) + 16), "systemstatsFormat");
                  v344 = *(void **)(v333 + 40);
                  v345 = *((unsigned int *)v407 + 6);
                  if (v343)
                  {
                    v346 = objc_msgSend(self, "sampleCount");
                    objc_msgSend(self, "frame");
                    v341 = (void *)objc_claimAutoreleasedReturnValue();
                    saos_printf_timeline_frame_noindent(v344, v345, v346, objc_msgSend(v341, "isKernel"), v335, v342);
                  }
                  else
                  {
                    v349 = *(unsigned int *)(v333 + 200);
                    v350 = objc_msgSend(self, "sampleCount");
                    objc_msgSend(self, "frame");
                    v341 = (void *)objc_claimAutoreleasedReturnValue();
                    saos_printf_timeline_frame(v344, v345, v349, v350, objc_msgSend(v341, "isKernel"), v335, v342);
                  }
                }

                ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v382 + 80) + 8) + 24);
                v379[2](v379, 1);

                v333 = v382;
              }
            }
            objc_msgSend(v332, "lastObject");
            v351 = (void *)objc_claimAutoreleasedReturnValue();
            if (self && (self[6] & 1) != 0 && !*(_BYTE *)(v333 + 208) && !*(_BYTE *)(v333 + 211))
            {
              objc_msgSend(self, "frame");
              v369 = (void *)objc_claimAutoreleasedReturnValue();
              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v333 + 152) + 8) + 24) = objc_msgSend(v369, "isKernel");

              *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v382 + 136) + 8) + 24) = *((_DWORD *)v407 + 6);
              objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(v382 + 160) + 8) + 40), v351);
              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v382 + 144) + 8) + 24) = objc_msgSend(self, "startSampleIndex");
              v367 = *(_QWORD *)(*(_QWORD *)(v382 + 128) + 8);
              v368 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else
            {
              v352 = *(_QWORD *)(v333 + 32);
              if (*(_BYTE *)(v333 + 210))
              {
                v353 = objc_msgSend(*(id *)(v352 + 16), "systemstatsFormat");
                v354 = *(void **)(v333 + 40);
                v355 = *((unsigned int *)v407 + 6);
                if (v353)
                {
                  v356 = objc_msgSend(self, "sampleCount");
                  objc_msgSend(self, "frame");
                  v357 = (void *)objc_claimAutoreleasedReturnValue();
                  saos_printf_frame_noindent(v354, v355, v356, objc_msgSend(v357, "isKernel"), v351);
                }
                else
                {
                  v363 = *(unsigned int *)(v333 + 200);
                  v364 = objc_msgSend(self, "sampleCount");
                  objc_msgSend(self, "frame");
                  v357 = (void *)objc_claimAutoreleasedReturnValue();
                  saos_printf_frame(v354, v355, v363, v364, objc_msgSend(v357, "isKernel"), v351);
                }
              }
              else
              {
                v358 = -[SASamplePrinter displayTimeIndexForSampleIndex:](v352, objc_msgSend(self, "startSampleIndex") + objc_msgSend(self, "sampleCount") - 1);
                v359 = objc_msgSend(*(id *)(*(_QWORD *)(v333 + 32) + 16), "systemstatsFormat");
                v360 = *(void **)(v333 + 40);
                v361 = *((unsigned int *)v407 + 6);
                if (v359)
                {
                  v362 = objc_msgSend(self, "sampleCount");
                  objc_msgSend(self, "frame");
                  v357 = (void *)objc_claimAutoreleasedReturnValue();
                  saos_printf_timeline_frame_noindent(v360, v361, v362, objc_msgSend(v357, "isKernel"), v351, v358);
                }
                else
                {
                  v365 = *(unsigned int *)(v333 + 200);
                  v366 = objc_msgSend(self, "sampleCount");
                  objc_msgSend(self, "frame");
                  v357 = (void *)objc_claimAutoreleasedReturnValue();
                  saos_printf_timeline_frame(v360, v361, v365, v366, objc_msgSend(v357, "isKernel"), v351, v358);
                }
              }

              v367 = *(_QWORD *)(*(_QWORD *)(v382 + 80) + 8);
              v368 = *(_QWORD *)(v367 + 24) + 1;
            }
            *(_QWORD *)(v367 + 24) = v368;

            goto LABEL_378;
          }
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24))
          {
            LODWORD(v377) = 0;
            goto LABEL_136;
          }
LABEL_107:
          objc_msgSend(v4, "frame");
          v104 = objc_claimAutoreleasedReturnValue();
          v105 = (void *)v104;
          if (v104)
            v106 = *(void **)(v104 + 32);
          else
            v106 = 0;
          v107 = v106;
          if (objc_msgSend(v107, "isTruncatedBacktraceFrame"))
          {
            objc_msgSend(self, "frame");
            v108 = objc_claimAutoreleasedReturnValue();
            v109 = (void *)v108;
            if (v108)
              v110 = *(void **)(v108 + 32);
            else
              v110 = 0;
            v111 = v110;
            v112 = objc_msgSend(v111, "isExclave");

            LODWORD(v377) = v112 ^ 1;
          }
          else
          {
            LODWORD(v377) = 0;
          }

          v21 = v382;
          goto LABEL_135;
        }
        if (v4)
          v78 = objc_getProperty(v4, v23, 40, 1);
        else
          v78 = 0;
        v79 = v78;
        objc_msgSend(v79, "removeAllObjects");

LABEL_378:
        v4 = self;
        goto LABEL_379;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v25 = v380;
        v4 = v25;
        if (!*((_DWORD *)v411 + 6)
          && *(_QWORD *)(a1 + 176)
          && (unint64_t)objc_msgSend(v25, "sampleCount") <= *(_QWORD *)(a1 + 176))
        {
          goto LABEL_379;
        }
        self = v4;
        if (*(_QWORD *)(a1 + 72))
        {
          if (v4)
            v27 = objc_getProperty(v4, v26, 80, 1);
          else
            v27 = 0;
          v28 = v27;
          objc_msgSend(v28, "sortUsingComparator:", *(_QWORD *)(v382 + 72));

          v21 = v382;
        }
        if (*(_BYTE *)(v21 + 212))
        {
          if (!v4)
          {
            v29 = 0;
            v33 = 0;
            v32 = (id **)(v21 + 32);
            v31 = *(id **)(v21 + 32);
LABEL_38:
            v34 = v33;
            objc_msgSend(v34, "firstObject");
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v35, "startTime");
            v36 = (void *)objc_claimAutoreleasedReturnValue();
            -[SASamplePrinter displayNameForPid:aroundTimestamp:includePid:](v31, v29, v36);
            v5 = (void *)objc_claimAutoreleasedReturnValue();

            v38 = *v32;
            if (self)
            {
              v39 = self[10];
              v40 = objc_getProperty(self, v37, 88, 1);
            }
            else
            {
              v39 = 0;
              v40 = 0;
            }
            v41 = v40;
            objc_msgSend(v41, "firstObject");
            v42 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v42, "startTime");
            v43 = (void *)objc_claimAutoreleasedReturnValue();
            -[SASamplePrinter displayNameForPid:aroundTimestamp:includePid:](v38, v39, v43);
            v44 = (void *)objc_claimAutoreleasedReturnValue();

            v45 = *v32;
            if (self)
            {
              v46 = self[10];
              v47 = self[9];
              if (v45)
              {
LABEL_42:
                v48 = (objc_class *)MEMORY[0x1E0CB3940];
                v49 = v5;
                v50 = v44;
                v377 = objc_msgSend([v48 alloc], "initWithFormat:", CFSTR("%@ [%d] (originated by %@ [%d])"), v50, v46, v49, v47);

LABEL_43:
                v4 = self;
                v21 = v382;
                goto LABEL_85;
              }
            }
            else
            {
              v46 = 0;
              v47 = 0;
              if (v45)
                goto LABEL_42;
            }
            v377 = 0;
            goto LABEL_43;
          }
          v29 = v4[9];
          if (*(_QWORD *)(v4 + 9) != -1)
          {
            v30 = v4;
            v32 = (id **)(v21 + 32);
            v31 = *(id **)(v21 + 32);
            v33 = objc_getProperty(v30, v26, 88, 1);
            goto LABEL_38;
          }
        }
        v377 = 0;
LABEL_85:
        if (*(_BYTE *)(v21 + 209))
        {
          if (v4)
          {
            v81 = v4;
            v82 = v4[8] != *(_DWORD *)(v21 + 204);
            v83 = *((_QWORD *)v81 + 9);
          }
          else
          {
            v83 = 0;
            v82 = *(_DWORD *)(v21 + 204) != 0;
          }
          v84 = *(_QWORD **)(v21 + 184);
          if (v84)
            v85 = *v84 == v83;
          else
            v85 = v83 == 0;
          v113 = !v85;
          if (((v82 | v113) & 1) != 0 || v377)
          {
            v114 = *(_QWORD *)(*(_QWORD *)(v21 + 120) + 8);
            if (*(_BYTE *)(v114 + 24))
              *(_BYTE *)(v114 + 24) = 0;
            else
              objc_msgSend(*(id *)(v21 + 40), "appendString:", CFSTR(","));
            objc_msgSend(*(id *)(v382 + 40), "appendString:", CFSTR("{"));
            v138 = *(void **)(v382 + 40);
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(self, "sampleCount"));
            v139 = (void *)objc_claimAutoreleasedReturnValue();
            SAJSONWriteDictionaryFirstEntry(v138, (uint64_t)CFSTR("count"), v139);

            v140 = *(void **)(v382 + 40);
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *((unsigned int *)v411 + 6));
            v141 = (void *)objc_claimAutoreleasedReturnValue();
            SAJSONWriteDictionaryEntry(v140, CFSTR("depth"), v141);

            if (v82)
            {
              if (self)
                v142 = self[8];
              else
                LOWORD(v142) = 0;
              +[SACallTreeState writeJSONDictionaryEntriesToStream:microstackshotState:primaryMicrostackshotState:includeIdleAndBattery:]((uint64_t)SACallTreeState, *(void **)(v382 + 40), v142, *(_DWORD *)(v382 + 204), objc_msgSend(*(id *)(*(_QWORD *)(v382 + 32) + 16), "includeUserIdleAndBatteryStateInStacks"));
            }
            if (v113)
            {
              if (self)
                v143 = *((_QWORD *)self + 9);
              else
                v143 = 0;
              +[SACallTreeState writeJSONDictionaryEntriesToStream:state:primaryState:]((uint64_t)SACallTreeState, *(void **)(v382 + 40), v143, *(uint64_t **)(v382 + 184));
            }
            if (v377)
              SAJSONWriteDictionaryEntry(*(void **)(v382 + 40), CFSTR("onBehalfOf"), (void *)v377);
            objc_msgSend(*(id *)(v382 + 40), "appendString:", CFSTR("}"));
            ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v382 + 80) + 8) + 24);
          }
          else
          {
            v379[2](v379, 0xFFFFFFFFLL);
          }
          goto LABEL_305;
        }
        if (!*((_DWORD *)v411 + 6))
        {
          v89 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 128) + 8) + 24);
          if (v89 != 0x7FFFFFFFFFFFFFFFLL)
          {
            if (v89 + 1 != objc_msgSend(v4, "startSampleIndex"))
              goto LABEL_327;
            if (*(_BYTE *)(v21 + 210))
            {
              saos_printf_frame(*(void **)(v21 + 40), *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v21 + 136) + 8) + 24), *(unsigned int *)(v21 + 200), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 128) + 8) + 24)- *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 144) + 8) + 24)+ 1, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v21 + 152) + 8) + 24), *(void **)(*(_QWORD *)(*(_QWORD *)(v21 + 160) + 8) + 40));
            }
            else
            {
              v194 = -[SASamplePrinter displayTimeIndexForSampleIndex:](*(_QWORD *)(v21 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 128) + 8) + 24));
              saos_printf_timeline_frame(*(void **)(v21 + 40), *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v21 + 136) + 8) + 24), *(unsigned int *)(v21 + 200), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 128) + 8) + 24)- *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 144) + 8) + 24)+ 1, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v21 + 152) + 8) + 24), *(void **)(*(_QWORD *)(*(_QWORD *)(v21 + 160) + 8) + 40), v194);
            }
            ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 80) + 8) + 24);
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v21 + 152) + 8) + 24) = 0;
            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 136) + 8) + 24) = 0;
            v195 = *(_QWORD *)(*(_QWORD *)(v21 + 160) + 8);
            v196 = *(void **)(v195 + 40);
            *(_QWORD *)(v195 + 40) = 0;

            v21 = v382;
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v382 + 144) + 8) + 24) = 0x7FFFFFFFFFFFFFFFLL;
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v382 + 128) + 8) + 24) = 0x7FFFFFFFFFFFFFFFLL;
          }
          v197 = -[SASamplePrinter copyDescriptionsForFrame:binariesToDisplay:extraBinariesToDisplay:](*(_QWORD *)(v21 + 32), 0, *(void **)(v21 + 56), 0);
          objc_msgSend(v197, "firstObject");
          v5 = (void *)objc_claimAutoreleasedReturnValue();

          if (*(_BYTE *)(v382 + 211))
          {
            v198 = *(_QWORD *)(v382 + 32);
            if (*(_BYTE *)(v382 + 210))
            {
              v199 = objc_msgSend(*(id *)(v198 + 16), "systemstatsFormat");
              v200 = *(void **)(v382 + 40);
              v201 = *((unsigned int *)v407 + 6);
              if (v199)
                saos_printf_frame_noindent(v200, v201, objc_msgSend(self, "sampleCount"), 0, v5);
              else
                saos_printf_frame(v200, v201, *(unsigned int *)(v382 + 200), objc_msgSend(self, "sampleCount"), 0, v5);
            }
            else
            {
              v206 = -[SASamplePrinter displayTimeIndexForSampleIndex:](v198, objc_msgSend(self, "startSampleIndex") + objc_msgSend(self, "sampleCount") - 1);
              v207 = objc_msgSend(*(id *)(*(_QWORD *)(v382 + 32) + 16), "systemstatsFormat");
              v208 = *(void **)(v382 + 40);
              v209 = *((unsigned int *)v407 + 6);
              if (v207)
                saos_printf_timeline_frame_noindent(v208, v209, objc_msgSend(self, "sampleCount"), 0, v5, v206);
              else
                saos_printf_timeline_frame(v208, v209, *(unsigned int *)(v382 + 200), objc_msgSend(self, "sampleCount"), 0, v5, v206);
            }
            ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v382 + 80) + 8) + 24);
            v379[2](v379, 1);
          }
          else
          {
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v382 + 152) + 8) + 24) = 0;
            v202 = -[SASamplePrinter copyDescriptionsForFrame:binariesToDisplay:extraBinariesToDisplay:](*(_QWORD *)(v382 + 32), 0, *(void **)(v382 + 56), 0);
            objc_msgSend(v202, "firstObject");
            v203 = objc_claimAutoreleasedReturnValue();
            v204 = *(_QWORD *)(*(_QWORD *)(v382 + 160) + 8);
            v205 = *(void **)(v204 + 40);
            *(_QWORD *)(v204 + 40) = v203;

            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v382 + 136) + 8) + 24) = *((_DWORD *)v407 + 6);
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v382 + 144) + 8) + 24) = objc_msgSend(self, "startSampleIndex");
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v382 + 128) + 8) + 24) = 0x7FFFFFFFFFFFFFFFLL;
          }

          v4 = self;
        }
        if (!v4)
        {
          v376 = 0;
          if (v377)
          {
            v374 = 0;
            v375 = 0;
            goto LABEL_264;
          }
          v230 = 0;
          v375 = 0;
          v227 = v382;
LABEL_262:
          if (_microstackshot_state_has_change_to_display(v230, *(_DWORD *)(v227 + 204), objc_msgSend(*(id *)(*(_QWORD *)(v227 + 32) + 16), "systemstatsFormat"), objc_msgSend(*(id *)(*(_QWORD *)(v382 + 32) + 16), "includeUserIdleAndBatteryStateInStacks")))
          {
            v374 = 0;
LABEL_264:
            v227 = v382;
LABEL_281:
            v220 = self;
            goto LABEL_282;
          }
          if (self)
            v231 = *((_QWORD *)self + 9);
          else
            v231 = 0;
          v232 = *(_QWORD **)(v382 + 184);
          v233 = objc_msgSend(*(id *)(*(_QWORD *)(v382 + 32) + 16), "systemstatsFormat");
          v227 = v382;
          if ((v233 & 1) == 0)
          {
            if (v232)
            {
              if (*v232 == v231)
                goto LABEL_270;
            }
            else if (!v231)
            {
              goto LABEL_270;
            }
            v374 = 0;
            goto LABEL_281;
          }
LABEL_270:
          if (!*(_BYTE *)(v382 + 211))
          {
            if (*(_BYTE *)(v382 + 210))
            {
              v234 = *(void **)(v382 + 40);
              v235 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v382 + 136) + 8) + 24);
              v236 = *(unsigned int *)(v382 + 200);
              v237 = objc_msgSend(self, "sampleCount");
              if (self)
                v238 = *((_QWORD *)self + 9);
              else
                v238 = 0;
              saos_printf_frame_with_state(v234, v235, v236, v237, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v382 + 152) + 8) + 24), *(void **)(*(_QWORD *)(*(_QWORD *)(v382 + 160) + 8) + 40), v238, 0);
              ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v382 + 80) + 8) + 24);
            }
            else
            {
              v261 = objc_msgSend(self, "startSampleIndex");
              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v382 + 128) + 8) + 24) = v261
                                                                             + objc_msgSend(self, "sampleCount")
                                                                             - 1;
            }
          }
          v379[2](v379, 0xFFFFFFFFLL);
          goto LABEL_304;
        }
        v375 = objc_getProperty(v4, v26, 64, 1);
        v212 = objc_getProperty(v4, v211, 56, 1);
        v5 = (void *)0x1EF23E000;
        v376 = v212;
        if (v375)
        {
          v213 = self[7];
          v214 = *((_QWORD *)self + 6);
          v215 = *((unsigned __int8 *)self + 24);
          v216 = *(_QWORD *)(v382 + 192);
          v393[0] = MEMORY[0x1E0C809B0];
          v393[1] = 3221225472;
          v393[2] = __125__SASamplePrinter_addStack_toStream_sampleCount_binariesToDisplay_primaryState_primaryMicrostackshotState_onlyHeaviestStack___block_invoke_1600;
          v393[3] = &unk_1E7149940;
          v393[4] = *(_QWORD *)(v382 + 32);
          v394 = self;
          objc_msgSend(v375, "descriptionForPid:tid:threadPriority:options:nameCallback:", v213, v214, v215, v216, v393);
          v217 = objc_claimAutoreleasedReturnValue();

          if (!v376)
          {
            v376 = 0;
            goto LABEL_253;
          }
          if (v217)
          {
            if ((objc_msgSend(*(id *)(*(_QWORD *)(v382 + 32) + 16), "displayMultipleMatchingBlockedReasons") & 1) == 0
              && (objc_msgSend(v376, "hasMatchingBlocker:", v375) & 1) != 0)
            {
              goto LABEL_253;
            }
            v218 = 0;
          }
          else
          {
            v218 = 1;
          }
          v220 = self;
        }
        else
        {
          v219 = v212;
          v220 = self;
          if (!v219)
          {
            if ((*((_BYTE *)self + 25) & 1) != 0)
            {
              v375 = 0;
              v376 = 0;
              v374 = CFSTR(" - part of a deadlock");
              v227 = v382;
              goto LABEL_282;
            }
            v217 = 0;
            v227 = v382;
            v376 = 0;
            if ((*((_BYTE *)self + 26) & 1) != 0)
            {
              v374 = CFSTR(" - ends in a deadlock");
              v375 = 0;
              goto LABEL_282;
            }
            goto LABEL_259;
          }
          v217 = 0;
          v218 = 1;
        }
        v221 = v220[7];
        v222 = *((_QWORD *)v220 + 6);
        v223 = *(_QWORD *)(v382 + 192);
        v391[0] = MEMORY[0x1E0C809B0];
        v391[1] = 3221225472;
        v391[2] = __125__SASamplePrinter_addStack_toStream_sampleCount_binariesToDisplay_primaryState_primaryMicrostackshotState_onlyHeaviestStack___block_invoke_2;
        v391[3] = &unk_1E7149940;
        v391[4] = *(_QWORD *)(v382 + 32);
        v392 = v220;
        objc_msgSend(v376, "descriptionForPid:tid:options:nameCallback:", v221, v222, v223, v391);
        v224 = (void *)objc_claimAutoreleasedReturnValue();
        v225 = v224;
        if (v224)
        {
          if ((v218 & 1) != 0)
          {
            v217 = v224;
          }
          else
          {
            objc_msgSend((id)v217, "stringByAppendingFormat:", CFSTR(", %@"), v224);
            v226 = objc_claimAutoreleasedReturnValue();

            v217 = v226;
          }
        }

LABEL_253:
        v220 = self;
        v227 = v382;
        if ((*((_BYTE *)self + 25) & 1) != 0)
        {
          v228 = CFSTR(" - part of a deadlock");
          if (!v217)
            goto LABEL_256;
        }
        else
        {
          if ((*((_BYTE *)self + 26) & 1) == 0)
          {
LABEL_259:
            if (v217 | v377)
            {
              v374 = (__CFString *)v217;
              goto LABEL_282;
            }
            v230 = v220[8];
            goto LABEL_262;
          }
          v228 = CFSTR(" - ends in a deadlock");
          if (!v217)
          {
LABEL_256:
            v374 = (__CFString *)v228;
LABEL_282:
            v239 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v227 + 128) + 8) + 24);
            if (v239 == 0x7FFFFFFFFFFFFFFFLL)
              goto LABEL_288;
            if (v239 + 1 == objc_msgSend(v220, "startSampleIndex"))
            {
              if (*(_BYTE *)(v382 + 210))
              {
                saos_printf_frame(*(void **)(v382 + 40), *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v382 + 136) + 8) + 24), *(unsigned int *)(v382 + 200), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v382 + 128) + 8) + 24)- *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v382 + 144) + 8) + 24)+ 1, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v382 + 152) + 8) + 24), *(void **)(*(_QWORD *)(*(_QWORD *)(v382 + 160) + 8) + 40));
              }
              else
              {
                v240 = -[SASamplePrinter displayTimeIndexForSampleIndex:](*(_QWORD *)(v382 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v382 + 128) + 8) + 24));
                saos_printf_timeline_frame(*(void **)(v382 + 40), *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v382 + 136) + 8) + 24), *(unsigned int *)(v382 + 200), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v382 + 128) + 8) + 24)- *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v382 + 144) + 8) + 24)+ 1, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v382 + 152) + 8) + 24), *(void **)(*(_QWORD *)(*(_QWORD *)(v382 + 160) + 8) + 40), v240);
              }
              v220 = self;
              v227 = v382;
              ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v382 + 80) + 8) + 24);
LABEL_288:
              if (*(_BYTE *)(v227 + 210))
              {
                v241 = *(void **)(v227 + 40);
                if (*(_BYTE *)(v227 + 211))
                {
                  v372 = *((_DWORD *)v407 + 6);
                  v242 = *(_DWORD *)(v227 + 200);
                  v243 = objc_msgSend(v220, "sampleCount");
                  if (self)
                  {
                    v244 = *((_QWORD *)self + 9);
                    v245 = self[8];
                  }
                  else
                  {
                    v244 = 0;
                    v245 = 0;
                  }
                  saos_printf_microstackshot_state_as_frame(v241, v372, v242, v243, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v382 + 152) + 8) + 24) != 0, v244, *(uint64_t **)(v382 + 184), v245, *(_DWORD *)(v382 + 204), objc_msgSend(*(id *)(*(_QWORD *)(v382 + 32) + 16), "systemstatsFormat"), objc_msgSend(*(id *)(*(_QWORD *)(v382 + 32) + 16), "includeUserIdleAndBatteryStateInStacks"), objc_msgSend(*(id *)(*(_QWORD *)(v382 + 32) + 16), "systemstatsFormat"), (void *)v377);
                }
                else
                {
                  v251 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v227 + 136) + 8) + 24);
                  v252 = *(unsigned int *)(v227 + 200);
                  v253 = objc_msgSend(v220, "sampleCount");
                  if (self)
                    v254 = *((_QWORD *)self + 9);
                  else
                    v254 = 0;
                  saos_printf_frame_with_state(v241, v251, v252, v253, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v382 + 152) + 8) + 24), *(void **)(*(_QWORD *)(*(_QWORD *)(v382 + 160) + 8) + 40), v254, v374);
                  v379[2](v379, 0xFFFFFFFFLL);
                }
              }
              else
              {
                v246 = -[SASamplePrinter displayTimeIndexForSampleIndex:](*(_QWORD *)(v227 + 32), objc_msgSend(v220, "startSampleIndex") + objc_msgSend(self, "sampleCount") - 1);
                v247 = *(void **)(v382 + 40);
                if (*(_BYTE *)(v382 + 211))
                {
                  v371 = *(_DWORD *)(v382 + 200);
                  v373 = *((_DWORD *)v407 + 6);
                  v248 = objc_msgSend(self, "sampleCount");
                  if (self)
                  {
                    v249 = *((_QWORD *)self + 9);
                    v250 = self[8];
                  }
                  else
                  {
                    v249 = 0;
                    v250 = 0;
                  }
                  saos_printf_microstackshot_state_as_timeline_frame(v247, v373, v371, v248, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v382 + 152) + 8) + 24) != 0, v249, *(uint64_t **)(v382 + 184), v250, *(_DWORD *)(v382 + 204), objc_msgSend(*(id *)(*(_QWORD *)(v382 + 32) + 16), "systemstatsFormat"), objc_msgSend(*(id *)(*(_QWORD *)(v382 + 32) + 16), "includeUserIdleAndBatteryStateInStacks"), v246, objc_msgSend(*(id *)(*(_QWORD *)(v382 + 32) + 16), "systemstatsFormat"), (void *)v377);
                }
                else
                {
                  v255 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v382 + 136) + 8) + 24);
                  v256 = *(unsigned int *)(v382 + 200);
                  v257 = objc_msgSend(self, "sampleCount");
                  if (self)
                    v258 = *((_QWORD *)self + 9);
                  else
                    v258 = 0;
                  saos_printf_timeline_frame_with_state(v247, v255, v256, v257, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v382 + 152) + 8) + 24), *(void **)(*(_QWORD *)(*(_QWORD *)(v382 + 160) + 8) + 40), v258, v374, v246);
                  v379[2](v379, 0xFFFFFFFFLL);
                }
              }
              ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v382 + 80) + 8) + 24);
              v259 = objc_msgSend(self, "startSampleIndex");
              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v382 + 144) + 8) + 24) = objc_msgSend(self, "sampleCount") + v259;
              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v382 + 128) + 8) + 24) = 0x7FFFFFFFFFFFFFFFLL;

LABEL_304:
LABEL_305:

              goto LABEL_378;
            }
LABEL_318:
            v278 = *__error();
            _sa_logt();
            v279 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v279, OS_LOG_TYPE_ERROR))
            {
              v280 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v382 + 128) + 8) + 24);
              v281 = objc_msgSend(self, "startSampleIndex");
              *(_DWORD *)buf = 134218240;
              v401 = v280;
              v402 = 2048;
              v403 = v281;
              _os_log_error_impl(&dword_1B9BE0000, v279, OS_LOG_TYPE_ERROR, "leafFrameSkippedCountedStateToIndex %lu + 1 != treeCountedState.startSampleIndex %lu", buf, 0x16u);
            }

            *__error() = v278;
            v282 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v382 + 128) + 8) + 24);
            objc_msgSend(self, "startSampleIndex");
            _SASetCrashLogMessage(11693, "leafFrameSkippedCountedStateToIndex %lu + 1 != treeCountedState.startSampleIndex %lu", v283, v284, v285, v286, v287, v288, v282);
            _os_crash();
            __break(1u);
            goto LABEL_321;
          }
        }
        objc_msgSend((id)v217, "stringByAppendingFormat:", v228);
        v229 = objc_claimAutoreleasedReturnValue();

        v217 = v229;
        v220 = self;
        v227 = v382;
        goto LABEL_259;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v4 = v380;
          if (*(_BYTE *)(a1 + 209))
          {
            v80 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8);
            if (*(_BYTE *)(v80 + 24))
              *(_BYTE *)(v80 + 24) = 0;
            else
              objc_msgSend(*(id *)(a1 + 40), "appendString:", CFSTR(","));
            objc_msgSend(v4, "stringByReplacingOccurrencesOfString:withString:", CFSTR("\"), &stru_1E714A250);
            v181 = (void *)objc_claimAutoreleasedReturnValue();

            v21 = v382;
            SAJSONWriteItem(*(void **)(v382 + 40), v181);
            v4 = v181;
          }
          else
          {
            v152 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 24);
            if (v152 != 0x7FFFFFFFFFFFFFFFLL)
            {
              if (*(_BYTE *)(a1 + 210))
              {
                saos_printf_frame(*(void **)(a1 + 40), *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 24), *(unsigned int *)(a1 + 200), v152 - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8) + 24) + 1, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 8) + 24), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 8) + 40));
              }
              else
              {
                v210 = -[SASamplePrinter displayTimeIndexForSampleIndex:](*(_QWORD *)(a1 + 32), v152);
                saos_printf_timeline_frame(*(void **)(a1 + 40), *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 24), *(unsigned int *)(a1 + 200), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 24)- *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8) + 24)+ 1, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 8) + 24), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 8) + 40), v210);
              }
              ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24);
              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8)
                                                                                       + 24)
                                                                           + 1;
              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 24) = 0x7FFFFFFFFFFFFFFFLL;
            }
            objc_msgSend(*(id *)(a1 + 40), "printWithFormat:", CFSTR("%-*s<%@>\n"), 2, ", v4);
          }
          ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 80) + 8) + 24);
          goto LABEL_379;
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          goto LABEL_380;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          goto LABEL_380;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          goto LABEL_380;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          goto LABEL_380;
        v90 = *__error();
        _sa_logt();
        v91 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
        {
          v92 = (objc_class *)objc_opt_class();
          NSStringFromClass(v92);
          v93 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v94 = objc_msgSend(v93, "UTF8String");
          *(_DWORD *)buf = 136315138;
          v401 = v94;
          _os_log_error_impl(&dword_1B9BE0000, v91, OS_LOG_TYPE_ERROR, "treeNode is a %s", buf, 0xCu);

        }
        *__error() = v90;
        v95 = (objc_class *)objc_opt_class();
        NSStringFromClass(v95);
        v96 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v97 = objc_msgSend(v96, "UTF8String");
        _SASetCrashLogMessage(11889, "treeNode is a %s", v98, v99, v100, v101, v102, v103, v97);

        _os_crash();
        __break(1u);
        goto LABEL_107;
      }
      v51 = v380;
      v4 = v51;
      self = v51;
      if (*(_BYTE *)(a1 + 209))
      {
        if (v51)
          v53 = objc_getProperty(v51, v52, 40, 1);
        else
          v53 = 0;
        v54 = v53;
        if (objc_msgSend(v54, "count"))
        {

          v4 = self;
          goto LABEL_50;
        }
        if (*(_BYTE *)(a1 + 213))
        {
          if (v4)
            v135 = objc_getProperty(v4, v55, 32, 1);
          else
            v135 = 0;
          v136 = v135;
          v137 = v136 == 0;

          v4 = self;
          if (!v137)
          {
LABEL_50:
            v389 = 0u;
            v390 = 0u;
            v387 = 0u;
            v388 = 0u;
            if (v4)
              v57 = objc_getProperty(v4, v56, 40, 1);
            else
              v57 = 0;
            v58 = v57;
            v59 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v387, v399, 16);
            if (v59)
            {
              v60 = *(_QWORD *)v388;
              do
              {
                for (k = 0; k != v59; ++k)
                {
                  if (*(_QWORD *)v388 != v60)
                    objc_enumerationMutation(v58);
                  v62 = *(void **)(*((_QWORD *)&v387 + 1) + 8 * k);
                  v63 = *(_QWORD *)(*(_QWORD *)(v382 + 120) + 8);
                  if (*(_BYTE *)(v63 + 24))
                    *(_BYTE *)(v63 + 24) = 0;
                  else
                    objc_msgSend(*(id *)(v382 + 40), "appendString:", CFSTR(","));
                  objc_msgSend(*(id *)(v382 + 40), "appendString:", CFSTR("{"));
                  objc_msgSend(v62, "writeJSONDictionaryEntriesToStream:", *(_QWORD *)(v382 + 40));
                  v64 = *(void **)(v382 + 40);
                  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *((unsigned int *)v411 + 6));
                  v65 = (void *)objc_claimAutoreleasedReturnValue();
                  SAJSONWriteDictionaryEntry(v64, CFSTR("depth"), v65);

                  objc_msgSend(*(id *)(v382 + 40), "appendString:", CFSTR("}"));
                }
                v59 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v387, v399, 16);
              }
              while (v59);
            }

            v67 = v382;
            if (*(_BYTE *)(v382 + 213))
            {
              v385 = 0u;
              v386 = 0u;
              v383 = 0u;
              v384 = 0u;
              v68 = self;
              if (self)
                v68 = objc_getProperty(self, v66, 32, 1);
              v69 = v68;
              v70 = objc_msgSend(v69, "countByEnumeratingWithState:objects:count:", &v383, v398, 16);
              if (v70)
              {
                v71 = *(_QWORD *)v384;
                do
                {
                  for (m = 0; m != v70; ++m)
                  {
                    if (*(_QWORD *)v384 != v71)
                      objc_enumerationMutation(v69);
                    v73 = *(void **)(*((_QWORD *)&v383 + 1) + 8 * m);
                    v74 = *(_QWORD *)(*(_QWORD *)(v382 + 120) + 8);
                    if (*(_BYTE *)(v74 + 24))
                      *(_BYTE *)(v74 + 24) = 0;
                    else
                      objc_msgSend(*(id *)(v382 + 40), "appendString:", CFSTR(","));
                    objc_msgSend(*(id *)(v382 + 40), "appendString:", CFSTR("{"));
                    objc_msgSend(v73, "writeJSONDictionaryEntriesToStream:", *(_QWORD *)(v382 + 40));
                    v75 = *(void **)(v382 + 40);
                    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *((unsigned int *)v411 + 6));
                    v76 = (void *)objc_claimAutoreleasedReturnValue();
                    SAJSONWriteDictionaryEntry(v75, CFSTR("depth"), v76);

                    objc_msgSend(*(id *)(v382 + 40), "appendString:", CFSTR("}"));
                  }
                  v70 = objc_msgSend(v69, "countByEnumeratingWithState:objects:count:", &v383, v398, 16);
                }
                while (v70);
              }

              v67 = v382;
            }
            v77 = *(_QWORD *)(v67 + 80);
LABEL_152:
            ++*(_QWORD *)(*(_QWORD *)(v77 + 8) + 24);
            goto LABEL_378;
          }
        }
        else
        {

          v4 = self;
        }
LABEL_202:
        v379[2](v379, 0xFFFFFFFFLL);
LABEL_379:

LABEL_380:
        _Block_object_dispose(v406, 8);
        _Block_object_dispose(v410, 8);
        v9 = context;
        goto LABEL_381;
      }
      if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "systemstatsFormat"))
      {
        if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "displayIOInCallTrees"))
          goto LABEL_324;
        if (*(_BYTE *)(a1 + 213))
        {
          v117 = v4 ? objc_getProperty(v4, v116, 32, 1) : 0;
          v118 = v117;
          v119 = objc_msgSend(v118, "count") == 0;

          v4 = self;
          if (!v119)
          {
            if (objc_msgSend(*(id *)(*(_QWORD *)(v382 + 32) + 16), "callTreeTimestampsTimeDomain") != 1)
              goto LABEL_330;
            v121 = (void *)MEMORY[0x1E0CB3940];
            v122 = *(_QWORD *)(v382 + 32);
            if (self)
              v123 = objc_getProperty(self, v120, 32, 1);
            else
              v123 = 0;
            v124 = v123;
            v125 = -[SASamplePrinter copyDescriptionForTimeRanges:](v122, v124);
            objc_msgSend(v121, "stringWithFormat:", CFSTR("walltime %@"), v125);
            v126 = (void *)objc_claimAutoreleasedReturnValue();

            saos_printf_call_tree_node_noindent(*(void **)(v382 + 40), *((unsigned int *)v407 + 6), objc_msgSend(self, "sampleCount"), v126);
            goto LABEL_378;
          }
        }
        goto LABEL_202;
      }
      if (v4)
        v144 = objc_getProperty(v4, v115, 40, 1);
      else
        v144 = 0;
      v145 = v144;
      v146 = objc_msgSend(v145, "count") == 0;

      if (v146)
      {
        v151 = 0;
      }
      else
      {
        v148 = self;
        v149 = *(id **)(v382 + 32);
        if (self)
          v148 = objc_getProperty(self, v147, 40, 1);
        v150 = v148;
        v151 = (void *)-[SASamplePrinter copyDescriptionForIOEvents:](v149, v150);

      }
      v183 = self;
      v184 = v382;
      if (*(_BYTE *)(v382 + 213))
      {
        v185 = *(_QWORD *)(v382 + 32);
        if (self)
          v183 = objc_getProperty(self, v147, 32, 1);
        v186 = v183;
        v187 = -[SASamplePrinter copyDescriptionForTimeRanges:](v185, v186);

        v184 = v382;
      }
      else
      {
        v187 = 0;
      }
      if (objc_msgSend(v187, "length"))
      {
        v188 = objc_msgSend(v151, "length");
        v189 = v187;
        if (v188)
        {
          objc_msgSend(v151, "stringByAppendingFormat:", CFSTR(", %@"), v187);
          v190 = (id)objc_claimAutoreleasedReturnValue();
          goto LABEL_214;
        }
      }
      else
      {
        v191 = objc_msgSend(v151, "length");
        v189 = v151;
        if (!v191)
          goto LABEL_218;
      }
      v190 = v189;
LABEL_214:
      v192 = v190;
      if (v190)
      {
        v193 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v184 + 128) + 8) + 24);
        if (v193 != 0x7FFFFFFFFFFFFFFFLL)
        {
          if (*(_BYTE *)(v184 + 210))
          {
            saos_printf_frame(*(void **)(v184 + 40), *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v184 + 136) + 8) + 24), *(unsigned int *)(v184 + 200), v193 - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v184 + 144) + 8) + 24) + 1, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v184 + 152) + 8) + 24), *(void **)(*(_QWORD *)(*(_QWORD *)(v184 + 160) + 8) + 40));
          }
          else
          {
            v260 = -[SASamplePrinter displayTimeIndexForSampleIndex:](*(_QWORD *)(v184 + 32), v193);
            saos_printf_timeline_frame(*(void **)(v184 + 40), *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v184 + 136) + 8) + 24), *(unsigned int *)(v184 + 200), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v184 + 128) + 8) + 24)- *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v184 + 144) + 8) + 24)+ 1, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v184 + 152) + 8) + 24), *(void **)(*(_QWORD *)(*(_QWORD *)(v184 + 160) + 8) + 40), v260);
          }
          ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v184 + 80) + 8) + 24);
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v184 + 144) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v184 + 128)
                                                                                                 + 8)
                                                                                     + 24)
                                                                         + 1;
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v184 + 128) + 8) + 24) = 0x7FFFFFFFFFFFFFFFLL;
        }
        saos_printf_call_tree_node_without_count(*(void **)(v184 + 40), *((unsigned int *)v407 + 6), *(unsigned int *)(v184 + 200), v192);
        ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v184 + 80) + 8) + 24);

        goto LABEL_309;
      }
LABEL_218:
      v379[2](v379, 0xFFFFFFFFLL);
LABEL_309:

      goto LABEL_378;
    }
    v19 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) + 24) + 8 * (v17 - 1) + 4) + a3;
    if (v19 >= 0)
    {
      v413 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) + 24) + 8 * (v17 - 1) + 4) + a3;
      goto LABEL_18;
    }
LABEL_315:
    v269 = *__error();
    _sa_logt();
    v270 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v270, OS_LOG_TYPE_ERROR))
    {
      v271 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v382 + 104) + 8) + 24)
                       + 8 * *(int *)(*(_QWORD *)(*(_QWORD *)(v382 + 96) + 8) + 24)
                       - 4);
      *(_DWORD *)v406 = 67109632;
      *(_DWORD *)&v406[4] = v19;
      LOWORD(v407) = 1024;
      *(_DWORD *)((char *)&v407 + 2) = a3;
      HIWORD(v407) = 1024;
      LODWORD(v408) = v271;
      _os_log_error_impl(&dword_1B9BE0000, v270, OS_LOG_TYPE_ERROR, "adjustDepth %d (%u + %d)", v406, 0x14u);
    }

    *__error() = v269;
    _SASetCrashLogMessage(11358, "adjustDepth %d (%u + %d)", v272, v273, v274, v275, v276, v277, v19);
    _os_crash();
    __break(1u);
    goto LABEL_318;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
  v13 = *(_DWORD *)(v12 + 24);
  if ((v13 & 0x80000000) != 0 || v13 < a3)
  {
    *(_DWORD *)(v12 + 24) = a3;
    goto LABEL_9;
  }
LABEL_7:
  *a4 = 1;
LABEL_381:
  objc_autoreleasePoolPop(v9);

}

_QWORD *__125__SASamplePrinter_addStack_toStream_sampleCount_binariesToDisplay_primaryState_primaryMicrostackshotState_onlyHeaviestStack___block_invoke_1588(_QWORD *result, int a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;

  v3 = result;
  v4 = *(_QWORD *)(result[4] + 8);
  v5 = *(int *)(v4 + 24);
  if (!(_DWORD)v5
    || (v6 = *(_QWORD *)(*(_QWORD *)(result[5] + 8) + 24),
        v7 = v5 - 1,
        *(_DWORD *)(v6 + 8 * (v5 - 1)) != *((_DWORD *)result + 16)))
  {
    *(_DWORD *)(v4 + 24) = v5 + 1;
    result = malloc_type_realloc(*(void **)(*(_QWORD *)(result[5] + 8) + 24), 8 * *(int *)(*(_QWORD *)(result[4] + 8) + 24), 0x100004000313F17uLL);
    *(_QWORD *)(*(_QWORD *)(v3[5] + 8) + 24) = result;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3[5] + 8) + 24) + 8 * *(int *)(*(_QWORD *)(v3[4] + 8) + 24) - 8) = *((_DWORD *)v3 + 16);
    v8 = *(int *)(*(_QWORD *)(v3[4] + 8) + 24);
    v9 = *(_QWORD *)(*(_QWORD *)(v3[5] + 8) + 24);
    if ((int)v8 < 2)
    {
      v10 = 0;
      v11 = v8 - 1;
    }
    else
    {
      v10 = *(_DWORD *)(v9 + 8 * (v8 - 2) + 4);
      v11 = (v8 - 1);
    }
    *(_DWORD *)(v9 + 8 * v11 + 4) = v10;
    v6 = *(_QWORD *)(*(_QWORD *)(v3[5] + 8) + 24);
    v7 = *(int *)(*(_QWORD *)(v3[4] + 8) + 24) - 1;
  }
  *(_DWORD *)(v6 + 8 * v7 + 4) += a2;
  *(_DWORD *)(*(_QWORD *)(v3[6] + 8) + 24) += a2;
  if (*((_BYTE *)v3 + 68))
    v12 = 2;
  else
    v12 = 2 * *(_DWORD *)(*(_QWORD *)(v3[6] + 8) + 24) + 2;
  *(_DWORD *)(*(_QWORD *)(v3[7] + 8) + 24) = v12;
  return result;
}

- (uint64_t)copyDescriptionForTruncatedLeafFrame:(void *)a3 otherCallTreeDescription:(void *)a4 binariesToDisplay:(void *)a5 extraBinariesToDisplay:
{
  uint64_t v8;
  id v9;
  void *v10;
  __CFString *v11;
  id v12;
  const __CFString *v13;
  uint64_t v14;

  if (result)
  {
    v8 = result;
    v9 = a3;
    v10 = -[SASamplePrinter copyDescriptionsForFrame:binariesToDisplay:extraBinariesToDisplay:](v8, a2, a4, a5);
    if (objc_msgSend(v10, "count"))
    {
      objc_msgSend(v10, "firstObject");
      v11 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v11 = 0;
    }
    v12 = objc_alloc(MEMORY[0x1E0CB3940]);
    v13 = CFSTR("???");
    if (v11)
      v13 = v11;
    v14 = objc_msgSend(v12, "initWithFormat:", CFSTR("<callstack in another call tree for %@: %@>"), v9, v13);

    return v14;
  }
  return result;
}

id __125__SASamplePrinter_addStack_toStream_sampleCount_binariesToDisplay_primaryState_primaryMicrostackshotState_onlyHeaviestStack___block_invoke_1600(uint64_t a1, const char *a2, uint64_t a3)
{
  id Property;
  _QWORD *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;

  v6 = *(_QWORD **)(a1 + 32);
  Property = *(id *)(a1 + 40);
  if (Property)
    Property = objc_getProperty(Property, a2, 88, 1);
  v7 = Property;
  objc_msgSend(v7, "firstObject");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "startTime");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[SASamplePrinter displayNameForPid:threadId:timestamp:](v6, (uint64_t)a2, a3, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

id __125__SASamplePrinter_addStack_toStream_sampleCount_binariesToDisplay_primaryState_primaryMicrostackshotState_onlyHeaviestStack___block_invoke_2(uint64_t a1, const char *a2, uint64_t a3)
{
  id Property;
  _QWORD *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;

  v6 = *(_QWORD **)(a1 + 32);
  Property = *(id *)(a1 + 40);
  if (Property)
    Property = objc_getProperty(Property, a2, 88, 1);
  v7 = Property;
  objc_msgSend(v7, "firstObject");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "startTime");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[SASamplePrinter displayNameForPid:threadId:timestamp:](v6, (uint64_t)a2, a3, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

- (id)copyDescriptionForTimeRanges:(uint64_t)a1
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  BOOL v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void (**v17)(_QWORD, _QWORD);
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t i;
  void *v24;
  void *v25;
  void *v26;
  int v27;
  void *v28;
  SEL v29;
  uint64_t v30;
  id v31;
  int v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _QWORD v51[4];
  id v52;
  id v53;
  id v54;
  id v55;
  BOOL v56;
  _QWORD v57[4];
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint8_t buf[16];
  _BYTE v64[128];
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (!a1)
  {
LABEL_24:
    v31 = 0;
    goto LABEL_20;
  }
  if (!objc_msgSend(*(id *)(a1 + 16), "callTreeTimestampsTimeDomain"))
  {
    v33 = *__error();
    _sa_logt();
    v34 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1B9BE0000, v34, OS_LOG_TYPE_ERROR, "Displaying timestamp with no time domain", buf, 2u);
    }

    *__error() = v33;
    _SASetCrashLogMessage(12122, "Displaying timestamp with no time domain", v35, v36, v37, v38, v39, v40, v41);
    _os_crash();
    __break(1u);
    goto LABEL_24;
  }
  v4 = objc_msgSend(*(id *)(a1 + 16), "callTreeTimestampsTimeDomain");
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 16 * objc_msgSend(v3, "count"));
  -[SASamplePrinter eventStartTimeWithWallTime](a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[SASamplePrinter eventEndTimeWithWallTime](a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = MEMORY[0x1E0C809B0];
  v9 = (v4 & (v4 - 1)) != 0;
  v57[0] = MEMORY[0x1E0C809B0];
  v57[1] = 3221225472;
  v57[2] = __48__SASamplePrinter_copyDescriptionForTimeRanges___block_invoke;
  v57[3] = &unk_1E7149A48;
  v61 = v4;
  v10 = v5;
  v58 = v10;
  v62 = v9;
  v11 = v6;
  v59 = v11;
  v60 = a1;
  v12 = (void *)MEMORY[0x1BCCCC450](v57);
  v51[0] = v8;
  v51[1] = 3221225472;
  v51[2] = __48__SASamplePrinter_copyDescriptionForTimeRanges___block_invoke_2;
  v51[3] = &unk_1E7149A70;
  v13 = v10;
  v52 = v13;
  v14 = v11;
  v53 = v14;
  v15 = v7;
  v54 = v15;
  v16 = v12;
  v55 = v16;
  v56 = v9;
  v17 = (void (**)(_QWORD, _QWORD))MEMORY[0x1BCCCC450](v51);
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v18 = v3;
  v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v47, v64, 16);
  if (!v19)
  {

    v21 = 0;
    goto LABEL_19;
  }
  v20 = v19;
  v42 = v13;
  v43 = v16;
  v44 = v15;
  v45 = v14;
  v46 = v3;
  v21 = 0;
  v22 = *(_QWORD *)v48;
  do
  {
    for (i = 0; i != v20; ++i)
    {
      if (*(_QWORD *)v48 != v22)
        objc_enumerationMutation(v18);
      v24 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * i);
      if (v21)
      {
        objc_msgSend(v21, "endTime");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "startTime");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v27 = objc_msgSend(v25, "eq:", v26);

        if (v27)
        {
          objc_msgSend(v24, "endTime");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_setProperty_atomic(v21, v29, v28, 16);
          goto LABEL_13;
        }
        ((void (**)(_QWORD, void *))v17)[2](v17, v21);
      }
      v30 = objc_msgSend(v24, "copy");
      v28 = v21;
      v21 = (void *)v30;
LABEL_13:

    }
    v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v47, v64, 16);
  }
  while (v20);

  if (v21)
    ((void (**)(_QWORD, void *))v17)[2](v17, v21);
  v14 = v45;
  v3 = v46;
  v16 = v43;
  v15 = v44;
  v13 = v42;
LABEL_19:
  v31 = v13;

LABEL_20:
  return v31;
}

void __61__SASamplePrinter_stacksForSwiftAsyncInTask_taskSampleCount___block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  _QWORD v12[5];
  id v13;
  id v14;

  v4 = a3;
  v5 = *(_QWORD **)(a1 + 32);
  v6 = *(void **)(a1 + 40);
  v7 = (void *)v5[4];
  v8 = (void *)v5[5];
  v9 = v5[6];
  v10 = v5[7];
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __61__SASamplePrinter_stacksForSwiftAsyncInTask_taskSampleCount___block_invoke_2;
  v12[3] = &unk_1E7149990;
  v12[4] = v5;
  v13 = v4;
  v14 = v6;
  v11 = v4;
  -[SARecipe enumerateStatesBetweenStartTime:startSampleIndex:endTime:endSampleIndex:reverseOrder:block:]((uint64_t)v11, v7, v9, v8, v10, 0, v12);

}

void __61__SASamplePrinter_stacksForSwiftAsyncInTask_taskSampleCount___block_invoke_2(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  NSObject *v19;
  id v20;
  id v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  NSObject *v30;
  id v31;
  id v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint8_t buf[4];
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(a1 + 40);
  v5 = a2;
  v6 = v3;
  v7 = v5;
  if (v4)
  {
    v8 = *(_QWORD *)(v4 + 16);
    if (!v8)
    {
      v18 = *__error();
      _sa_logt();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend(*(id *)(v4 + 16), "debugDescription");
        v20 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        *(_DWORD *)buf = 136315138;
        v42 = objc_msgSend(v20, "UTF8String");
        _os_log_error_impl(&dword_1B9BE0000, v19, OS_LOG_TYPE_ERROR, "swiftAsyncCallTreeAggregationResolved returned default: %s", buf, 0xCu);

      }
      *__error() = v18;
      objc_msgSend(*(id *)(v4 + 16), "debugDescription");
      v21 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v22 = objc_msgSend(v21, "UTF8String");
      _SASetCrashLogMessage(11976, "swiftAsyncCallTreeAggregationResolved returned default: %s", v23, v24, v25, v26, v27, v28, v22);

      _os_crash();
      __break(1u);
    }
    v40 = &unk_1E7167870;
    switch(*(_QWORD *)(v8 + 160))
    {
      case 0:
        if (*(_BYTE *)(v8 + 14))
          goto LABEL_5;
        goto LABEL_6;
      case 1:
        v29 = *__error();
        _sa_logt();
        v30 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          objc_msgSend(*(id *)(v4 + 16), "debugDescription");
          v31 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          *(_DWORD *)buf = 136315138;
          v42 = objc_msgSend(v31, "UTF8String");
          _os_log_error_impl(&dword_1B9BE0000, v30, OS_LOG_TYPE_ERROR, "aggregationPointForSwiftTask, but kSAAggregateSwiftAsyncTogetherWithOtherCallTrees: %s", buf, 0xCu);

        }
        *__error() = v29;
        objc_msgSend(*(id *)(v4 + 16), "debugDescription");
        v32 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v33 = objc_msgSend(v32, "UTF8String");
        _SASetCrashLogMessage(11953, "aggregationPointForSwiftTask, but kSAAggregateSwiftAsyncTogetherWithOtherCallTrees: %s", v34, v35, v36, v37, v38, v39, v33);

        _os_crash();
        __break(1u);
        JUMPOUT(0x1B9C9D218);
      case 2:
LABEL_5:
        v9 = (void *)MEMORY[0x1E0CB37E8];
        v10 = -[SASwiftTaskState baseFunctionAddress](v7);
        goto LABEL_11;
      case 3:
LABEL_6:
        v11 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(v7, "thread");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "numberWithUnsignedLongLong:", objc_msgSend(v12, "threadId"));
        v13 = objc_claimAutoreleasedReturnValue();
        goto LABEL_7;
      case 5:
        if ((objc_msgSend((id)v8, "printHeavyStacks") & 1) == 0 && objc_msgSend(v6, "identifier") == -1)
        {
          v17 = (void *)MEMORY[0x1E0CB37E8];
          objc_msgSend(v7, "thread");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "numberWithUnsignedLong:", v12);
          v13 = objc_claimAutoreleasedReturnValue();
LABEL_7:
          v40 = (id)v13;

        }
        else
        {
          v9 = (void *)MEMORY[0x1E0CB37E8];
          v10 = (void *)objc_msgSend(v6, "identifier");
LABEL_11:
          objc_msgSend(v9, "numberWithUnsignedLongLong:", v10);
          v40 = (id)objc_claimAutoreleasedReturnValue();
        }
        break;
      default:
        break;
    }
  }
  else
  {
    v40 = 0;
  }

  objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", v40);
  v14 = objc_claimAutoreleasedReturnValue();
  if (v14)
  {
    v15 = (void *)v14;
    objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", v40);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "addObject:", v7);

  }
  else
  {
    v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithObjects:", v7, 0);

    objc_msgSend(*(id *)(a1 + 48), "setObject:forKeyedSubscript:", v15, v40);
  }

}

void __61__SASamplePrinter_stacksForSwiftAsyncInTask_taskSampleCount___block_invoke_3(_QWORD *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  SAStack *v22;
  const char *v23;
  void *v24;
  const char *v25;
  void *v26;
  const char *v27;
  void *v28;
  void *v29;
  const char *v30;
  void *v31;
  id v32;
  BOOL threadNameChanges;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  SEL v38;
  SAStack *v39;
  SAStack *v40;
  id v41;
  uint8_t buf[4];
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if ((objc_msgSend(*(id *)(a1[4] + 16), "printHeavyStacks") & 1) == 0)
    objc_msgSend(v4, "sortUsingComparator:", &__block_literal_global_1629);
  v6 = a1[4];
  v5 = (id)a1[5];
  v8 = (void *)a1[6];
  v7 = a1[7];
  v41 = v4;
  v9 = v8;
  if (v6)
  {
    v10 = *(_QWORD *)(v6 + 16);
    if (v10)
    {
      if (*(_QWORD *)(v10 + 160) == 1)
        goto LABEL_32;
      v11 = *(_QWORD *)(v10 + 152);
      if (v11)
        goto LABEL_11;
      if (*(_BYTE *)(v10 + 11))
      {
LABEL_32:
        do
        {
          v12 = *__error();
          _sa_logt();
          v13 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            objc_msgSend(*(id *)(v6 + 16), "debugDescription");
            v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v14 = objc_msgSend(v9, "UTF8String");
            *(_DWORD *)buf = 136315138;
            v43 = v14;
            _os_log_error_impl(&dword_1B9BE0000, v13, OS_LOG_TYPE_ERROR, "stackForSwiftTasks, but kSAAggregateSwiftAsyncTogetherWithOtherCallTrees: %s", buf, 0xCu);

          }
          *__error() = v12;
          objc_msgSend(*(id *)(v6 + 16), "debugDescription");
          v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v15 = objc_msgSend(v5, "UTF8String");
          _SASetCrashLogMessage(12021, "stackForSwiftTasks, but kSAAggregateSwiftAsyncTogetherWithOtherCallTrees: %s", v16, v17, v18, v19, v20, v21, v15);

          _os_crash();
          __break(1u);
LABEL_11:
          ;
        }
        while (v11 == 3);
      }
    }
    v22 = objc_alloc_init(SAStack);
    v24 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 1);
    if (v22)
      objc_setProperty_atomic(v22, v23, v24, 56);

    v26 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 1);
    if (v22)
      objc_setProperty_atomic(v22, v25, v26, 40);

    v28 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 1);
    if (v22)
      objc_setProperty_atomic(v22, v27, v28, 48);

    -[SASamplePrinter binaryImagesHitByTask:](v6, v9);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = v29;
    if (v22)
    {
      objc_setProperty_atomic(v22, v30, v29, 128);

      -[SASamplePrinter addHeaderForDispatchQueue:orSwiftTaskStates:orThread:andThreadStateIndexes:toStack:task:taskSampleCount:]((const char *)v6, 0, v41, 0, 0, v22, v9, v7);
      if (!v22->_omit && v22->_count)
      {
        v32 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        threadNameChanges = v22->_threadNameChanges;
        v34 = -[NSMutableArray count](v22->_dispatchQueues, "count");
        v35 = -[NSMutableArray count](v22->_swiftTasks, "count");
        v36 = -[NSMutableArray count](v22->_threadIds, "count");
        v37 = v22->_minPriority != v22->_maxPriority || v22->_minBasePriority != v22->_maxBasePriority;
        -[SASamplePrinter addStackForDispatchQueue:orSwiftTaskStates:orThread:andThreadStateIndexes:task:toRootObjects:nameChanges:dispatchQueueChanges:swiftTaskChanges:threadChanges:priorityChanges:microstackshotSummary:onlyHeaviestStack:includeState:](v6, 0, v41, 0, 0, v9, v32, threadNameChanges, v34 > 1, v35 > 1, v36 > 1, v37, 0, 0, 1u);
        objc_setProperty_atomic(v22, v38, v32, 120);
        v39 = v22;

        goto LABEL_28;
      }
    }
    else
    {

      -[SASamplePrinter addHeaderForDispatchQueue:orSwiftTaskStates:orThread:andThreadStateIndexes:toStack:task:taskSampleCount:]((const char *)v6, 0, v41, 0, 0, 0, v9, v7);
    }
    v40 = v22;
LABEL_28:

    goto LABEL_29;
  }
  v22 = 0;
LABEL_29:

  objc_msgSend(v5, "addObject:", v22);
}

uint64_t __61__SASamplePrinter_stacksForSwiftAsyncInTask_taskSampleCount___block_invoke_4(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;

  v4 = a3;
  objc_msgSend(a2, "threadState");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "startTimestamp");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "threadState");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "startTimestamp");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v6, "compare:", v8);

  return v9;
}

void __48__SASamplePrinter_copyDescriptionForTimeRanges___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  double v5;
  double v6;
  void *v7;
  int v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  void *v13;
  char v14;
  void *v15;
  void *v16;
  double v17;
  uint64_t v18;
  void *v19;
  double v20;
  uint64_t v21;
  double v22;
  long double v23;
  int v24;
  __CFString *v25;
  id v26;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 56);
  v26 = v3;
  if ((v4 & 1) == 0)
  {
    if ((v4 & 2) == 0)
    {
      if ((v4 & 4) == 0)
      {
        if ((v4 & 8) == 0)
        {
          if ((v4 & 0x10) == 0)
            goto LABEL_46;
          goto LABEL_41;
        }
        goto LABEL_34;
      }
      goto LABEL_27;
    }
    goto LABEL_20;
  }
  if (*(_BYTE *)(a1 + 64))
  {
    objc_msgSend(*(id *)(a1 + 32), "appendString:", CFSTR("wall:"));
    v3 = v26;
  }
  objc_msgSend(v3, "wallTime");
  if (v5 == 0.0)
  {
    v13 = *(void **)(a1 + 32);
    goto LABEL_17;
  }
  objc_msgSend(*(id *)(a1 + 40), "wallTime");
  if (v6 == 0.0)
  {
    v14 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 16), "omitAbsoluteWallTimes");
    v15 = *(void **)(a1 + 32);
    if ((v14 & 1) == 0)
    {
      objc_msgSend(v26, "wallTime");
      v23 = v22;
      if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 16), "displayDetailedWallTime"))
        v24 = 9;
      else
        v24 = 3;
      v25 = (__CFString *)_CopyStringForTime(v24, v23);
      objc_msgSend(v15, "appendString:", v25);

      goto LABEL_18;
    }
    v13 = *(void **)(a1 + 32);
LABEL_17:
    objc_msgSend(v13, "appendString:", CFSTR("???"));
    goto LABEL_18;
  }
  v7 = *(void **)(a1 + 32);
  v8 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 16), "displayDetailedWallTime");
  objc_msgSend(v26, "wallTime");
  v10 = v9;
  objc_msgSend(*(id *)(a1 + 40), "wallTime");
  v12 = 3;
  if (v8)
    v12 = 9;
  objc_msgSend(v7, "appendFormat:", CFSTR("%.*fs"), v12, v10 - v11);
LABEL_18:
  if ((*(_BYTE *)(a1 + 56) & 2) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "appendString:", CFSTR(" "));
    v3 = v26;
LABEL_20:
    if (*(_BYTE *)(a1 + 64))
    {
      objc_msgSend(*(id *)(a1 + 32), "appendString:", CFSTR("machabs:"));
      v3 = v26;
    }
    if (objc_msgSend(v3, "machAbsTime"))
      objc_msgSend(*(id *)(a1 + 32), "appendFormat:", CFSTR("%llu"), objc_msgSend(v26, "machAbsTime"));
    else
      objc_msgSend(*(id *)(a1 + 32), "appendString:", CFSTR("???"));
  }
  if ((*(_BYTE *)(a1 + 56) & 4) == 0)
    goto LABEL_32;
  objc_msgSend(*(id *)(a1 + 32), "appendString:", CFSTR(" "));
  v3 = v26;
LABEL_27:
  if (*(_BYTE *)(a1 + 64))
  {
    objc_msgSend(*(id *)(a1 + 32), "appendString:", CFSTR("machabssec:"));
    v3 = v26;
  }
  objc_msgSend(v3, "machAbsTimeSeconds");
  v16 = *(void **)(a1 + 32);
  if (v17 == 0.0)
  {
    objc_msgSend(*(id *)(a1 + 32), "appendString:", CFSTR("???"));
  }
  else
  {
    objc_msgSend(v26, "machAbsTimeSeconds");
    objc_msgSend(v16, "appendFormat:", CFSTR("%fs"), v18);
  }
LABEL_32:
  if ((*(_BYTE *)(a1 + 56) & 8) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "appendString:", CFSTR(" "));
    v3 = v26;
LABEL_34:
    if (*(_BYTE *)(a1 + 64))
    {
      objc_msgSend(*(id *)(a1 + 32), "appendString:", CFSTR("machcont:"));
      v3 = v26;
    }
    if (objc_msgSend(v3, "machContTime"))
      objc_msgSend(*(id *)(a1 + 32), "appendFormat:", CFSTR("%llu"), objc_msgSend(v26, "machContTime"));
    else
      objc_msgSend(*(id *)(a1 + 32), "appendString:", CFSTR("???"));
  }
  if ((*(_BYTE *)(a1 + 56) & 0x10) == 0)
    goto LABEL_46;
  objc_msgSend(*(id *)(a1 + 32), "appendString:", CFSTR(" "));
LABEL_41:
  if (*(_BYTE *)(a1 + 64))
    objc_msgSend(*(id *)(a1 + 32), "appendString:", CFSTR("machcontsec:"));
  objc_msgSend(v26, "machContTimeSeconds");
  v19 = *(void **)(a1 + 32);
  if (v20 == 0.0)
  {
    objc_msgSend(v19, "appendString:", CFSTR("???"));
  }
  else
  {
    objc_msgSend(v26, "machContTimeSeconds");
    objc_msgSend(v19, "appendFormat:", CFSTR("%fs"), v21);
  }
LABEL_46:

}

void __48__SASamplePrinter_copyDescriptionForTimeRanges___block_invoke_2(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  id v6;
  const __CFString *v7;
  id v8;

  v8 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "length"))
    objc_msgSend(*(id *)(a1 + 32), "appendString:", CFSTR(", "));
  objc_msgSend(v8, "startTime");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(*(id *)(a1 + 40), "isComparable:", v3)
    && objc_msgSend(*(id *)(a1 + 40), "gt:", v3))
  {
    v4 = *(id *)(a1 + 40);

    v3 = v4;
  }
  objc_msgSend(v8, "endTime");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(*(id *)(a1 + 48), "isComparable:", v5)
    && objc_msgSend(*(id *)(a1 + 48), "lt:", v5))
  {
    v6 = *(id *)(a1 + 48);

    v5 = v6;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  if (objc_msgSend(v3, "ne:", v5))
  {
    if (*(_BYTE *)(a1 + 64))
      v7 = CFSTR(" - ");
    else
      v7 = CFSTR("-");
    objc_msgSend(*(id *)(a1 + 32), "appendString:", v7);
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }

}

- (uint64_t)copyDescriptionForIOEvent:(void *)a1
{
  objc_class *v1;
  id v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (objc_class *)MEMORY[0x1E0CB3940];
  v2 = a1;
  v3 = [v1 alloc];
  SAFormattedBytesEx(objc_msgSend(v2, "size"), 1, 0, 0, 0x1000uLL);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "type");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v2, "tier");

  v7 = objc_msgSend(v3, "initWithFormat:", CFSTR("%@ %@T%u"), v4, v5, v6);
  return v7;
}

void __45__SASamplePrinter_copySymbolStringsForFrame___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;

  v20 = a2;
  v5 = a3;
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 128);
  objc_msgSend(v20, "name");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7)
  {
    SACopySanitizedString(v7, 1, 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "appendString:", v9);

  }
  else
  {
    objc_msgSend(v6, "appendString:", CFSTR("???"));
    if (!objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "displayOffsetsFromUnnamedSymbols"))
      goto LABEL_5;
  }
  objc_msgSend(v6, "appendFormat:", CFSTR(" + %llu"), objc_msgSend(*(id *)(a1 + 40), "offsetIntoSegment")- objc_msgSend(v20, "offsetIntoSegment")+ objc_msgSend(*(id *)(a1 + 48), "isSymbolicationOffByOne"));
LABEL_5:
  objc_msgSend(v6, "appendString:", CFSTR(" ("));
  if (v5)
  {
    if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "displayFullSourcePaths"))
    {
      objc_msgSend(v5, "filePath");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = v10;
      if (v10)
      {
        v12 = v10;
      }
      else
      {
        objc_msgSend(v5, "fileName");
        v12 = (id)objc_claimAutoreleasedReturnValue();
      }
      v13 = v12;

    }
    else
    {
      objc_msgSend(v5, "fileName");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
    }
    v14 = objc_msgSend(v5, "lineNum");
    v15 = objc_msgSend(v5, "columnNum");
    if (v13)
    {
      v16 = v15;
      SACopySanitizedString(v13, 1, 0);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "appendString:", v17);

      if ((_DWORD)v14)
      {
        objc_msgSend(v6, "appendFormat:", CFSTR(":%u"), v14);
        if ((_DWORD)v16)
          objc_msgSend(v6, "appendFormat:", CFSTR(",%u"), v16);
      }
    }
    objc_msgSend(v6, "appendString:", CFSTR(" in "));

  }
  objc_msgSend(v6, "appendFormat:", CFSTR("%@ + %llu%@)"), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 64));
  v18 = *(void **)(a1 + 72);
  v19 = (void *)objc_msgSend(v6, "copy");
  objc_msgSend(v18, "addObject:", v19);

}

- (id)displayNameForTask:(uint64_t)a3 threadId:
{
  void *v4;
  void *v5;
  id v6;
  void *v7;

  -[SASamplePrinter displayNameForTask:](a1, a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (a3)
    v6 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@ thread 0x%llx"), v4, a3);
  else
    v6 = v4;
  v7 = v6;

  return v7;
}

void __65__SASamplePrinter_displayStringForOnBehalfOfForTasks_includePid___block_invoke(_QWORD *a1, uint64_t a2, void *a3)
{
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];
  id v15;
  uint64_t v16;
  uint64_t v17;

  v5 = (_QWORD *)a1[4];
  v6 = (void *)a1[5];
  v7 = v5[4];
  v8 = v5[5];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[2] = __65__SASamplePrinter_displayStringForOnBehalfOfForTasks_includePid___block_invoke_2;
  v14[3] = &unk_1E7149AC0;
  v9 = v5[6];
  v10 = v5[7];
  v14[1] = 3221225472;
  v14[4] = v5;
  v11 = v6;
  v12 = a1[6];
  v13 = a1[7];
  v15 = v11;
  v16 = v12;
  v17 = v13;
  objc_msgSend(a3, "enumerateThreadStatesBetweenStartTime:startSampleIndex:endTime:endSampleIndex:reverseOrder:block:", v7, v9, v8, v10, 0, v14);

}

void __65__SASamplePrinter_displayStringForOnBehalfOfForTasks_includePid___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id *v6;
  void *v7;
  void *v8;
  id *v9;
  void *v10;
  void *v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  void *v15;
  SAOnBehalfOfSingle *v16;
  id v17;
  id v18;
  uint64_t v19;
  NSString *proximateName;
  uint64_t v21;
  NSString *originName;
  void *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  id v33;
  objc_super v34;

  v33 = a2;
  v3 = objc_msgSend(v33, "originPid");
  v4 = objc_msgSend(v33, "proximatePid");
  v5 = v4;
  if ((_DWORD)v3 != -1 || (_DWORD)v4 != -1)
  {
    v6 = *(id **)(a1 + 32);
    objc_msgSend(v33, "endTimestamp");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[SASamplePrinter displayNameForPid:aroundTimestamp:includePid:](v6, v3, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    v9 = *(id **)(a1 + 32);
    objc_msgSend(v33, "endTimestamp");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[SASamplePrinter displayNameForPid:aroundTimestamp:includePid:](v9, v5, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    v12 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "dataStyle");
    if (v12 - 2 >= 3)
    {
      if (v12 <= 1)
        -[SAOnBehalfOfMultiple addProximateName:proximatePid:originName:originPid:count:](*(_DWORD **)(a1 + 40), v11, v5, v8, v3, objc_msgSend(v33, "sampleCountInSampleIndexRangeStart:end:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56)));
    }
    else if (objc_msgSend(v33, "startSampleIndex") != 0x7FFFFFFFFFFFFFFFLL)
    {
      if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
      {
        v13 = objc_alloc_init(MEMORY[0x1E0C99E08]);
        v14 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
        v15 = *(void **)(v14 + 40);
        *(_QWORD *)(v14 + 40) = v13;

      }
      v16 = [SAOnBehalfOfSingle alloc];
      v17 = v11;
      v18 = v8;
      if (v16)
      {
        v34.receiver = v16;
        v34.super_class = (Class)SAOnBehalfOfSingle;
        v16 = (SAOnBehalfOfSingle *)objc_msgSendSuper2(&v34, sel_init);
        if (v16)
        {
          v19 = objc_msgSend(v17, "copy");
          proximateName = v16->_proximateName;
          v16->_proximateName = (NSString *)v19;

          v21 = objc_msgSend(v18, "copy");
          originName = v16->_originName;
          v16->_originName = (NSString *)v21;

          v16->_proximatePid = v5;
          v16->_originPid = v3;
        }
      }

      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "objectForKeyedSubscript:", v16);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v23)
      {
        v23 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DF0]), "initWithLength:", *(_QWORD *)(a1 + 56));
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", v23, v16);
      }
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48);
      v25 = objc_msgSend(v33, "startSampleIndex");
      if (v24 <= v25)
        v24 = v25;
      v26 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56);
      v27 = objc_msgSend(v33, "endSampleIndex");
      if (v26 >= v27)
        v28 = v27;
      else
        v28 = v26;
      if (v24 < v28)
      {
        do
        {
          v29 = objc_msgSend(objc_retainAutorelease(v23), "mutableBytes");
          *(_BYTE *)(v29 + (v24 >> 3)) |= 1 << (v24 & 7);
          ++v24;
          v30 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56);
          v31 = objc_msgSend(v33, "endSampleIndex");
          if (v30 >= v31)
            v32 = v31;
          else
            v32 = v30;
        }
        while (v24 < v32);
      }

    }
  }

}

void __65__SASamplePrinter_displayStringForOnBehalfOfForTasks_includePid___block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  id v5;
  int8x8_t *v6;
  unint64_t v7;
  const char *v8;
  NSObject *v9;
  unsigned int *v10;
  unint64_t v11;
  int8x8_t v12;
  uint8x8_t v13;
  id v14;
  uint64_t v15;
  SEL v16;
  id v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *self;
  uint8_t buf[4];
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  self = a2;
  v5 = objc_retainAutorelease(a3);
  v6 = (int8x8_t *)objc_msgSend(v5, "bytes");
  v7 = objc_msgSend(v5, "length");
  if (v7 != *(_QWORD *)(a1 + 40))
  {
    v19 = *__error();
    _sa_logt();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v20 = objc_msgSend(v5, "length");
      v21 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 134218240;
      v31 = v20;
      v32 = 2048;
      v33 = v21;
      _os_log_error_impl(&dword_1B9BE0000, v9, OS_LOG_TYPE_ERROR, "sampleIndexBitfield.length %lu != bitfieldSize %llu", buf, 0x16u);
    }

    *__error() = v19;
    v22 = objc_msgSend(v5, "length");
    _SASetCrashLogMessage(13039, "sampleIndexBitfield.length %lu != bitfieldSize %llu", v23, v24, v25, v26, v27, v28, v22);
    _os_crash();
    __break(1u);
    goto LABEL_12;
  }
  if (v7 >= 8)
  {
    LODWORD(v9) = 0;
    v11 = v7 >> 3;
    v10 = self;
    do
    {
      v12 = *v6++;
      v13 = (uint8x8_t)vcnt_s8(v12);
      v13.i16[0] = vaddlv_u8(v13);
      LODWORD(v9) = (_DWORD)v9 + v13.i32[0];
      --v11;
    }
    while (v11);
  }
  else
  {
    LODWORD(v9) = 0;
    v10 = self;
  }
  a1 = *(_QWORD *)(a1 + 32);
  if (!v10)
  {
LABEL_12:
    v17 = 0;
    v14 = 0;
    v15 = 0;
    v18 = 0;
    goto LABEL_8;
  }
  v14 = objc_getProperty(v10, v8, 16, 1);
  v15 = self[2];
  v17 = objc_getProperty(self, v16, 24, 1);
  v18 = self[3];
LABEL_8:
  -[SAOnBehalfOfMultiple addProximateName:proximatePid:originName:originPid:count:]((_DWORD *)a1, v14, v15, v17, v18, (int)v9);

}

uint64_t __44__SASamplePrinter_displayStringForHIDEvents__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  const char *v6;
  void *v7;
  id Property;
  id v9;
  const char *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;

  v4 = a3;
  v5 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v5, "hidEventTimestamp");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (v5)
      Property = objc_getProperty(v5, v6, 32, 1);
    else
      Property = 0;
    v9 = Property;

    objc_msgSend(v9, "startTime");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v9;
  }

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v4, "hidEventTimestamp");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (v4)
      v12 = objc_getProperty(v4, v10, 32, 1);
    else
      v12 = 0;
    v13 = v12;
    objc_msgSend(v13, "startTime");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

  }
  v14 = objc_msgSend(v7, "compare:", v11);

  return v14;
}

void __40__SASamplePrinter_numIOsForTask_ioSize___block_invoke(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  id v7;
  id Property;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  void *v23;
  char v24;
  void *v25;
  char v26;
  void *v27;
  id v28;
  id v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v7 = a3;
  Property = *(id *)(a1[4] + 160);
  if (Property)
    Property = objc_getProperty(Property, v6, 968, 1);
  v9 = Property;
  objc_msgSend(v9, "objectForKeyedSubscript:", v5);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    objc_msgSend(v7, "creationTimestamp");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v11;
    if (!v11 || objc_msgSend(v11, "lt:", *(_QWORD *)(a1[4] + 32)))
    {
      v13 = *(id *)(a1[4] + 32);

      v12 = v13;
    }
    objc_msgSend(v7, "exitTimestamp");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v14;
    v28 = v7;
    v29 = v5;
    if (!v14 || objc_msgSend(v14, "gt:", *(_QWORD *)(a1[4] + 40)))
    {
      v16 = *(id *)(a1[4] + 40);

      v15 = v16;
    }
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v27 = v10;
    v17 = v10;
    v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
    if (v18)
    {
      v19 = v18;
      v20 = *(_QWORD *)v31;
      do
      {
        for (i = 0; i != v19; ++i)
        {
          if (*(_QWORD *)v31 != v20)
            objc_enumerationMutation(v17);
          v22 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * i);
          objc_msgSend(v22, "endTimestamp");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v24 = objc_msgSend(v12, "gt:", v23);

          if ((v24 & 1) == 0)
          {
            objc_msgSend(v22, "endTimestamp");
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            v26 = objc_msgSend(v15, "lt:", v25);

            if ((v26 & 1) != 0)
              goto LABEL_20;
            *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) += objc_msgSend(v22, "size");
            ++*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24);
          }
        }
        v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
      }
      while (v19);
    }
LABEL_20:

    v7 = v28;
    v5 = v29;
    v10 = v27;
  }

}

void __73__SASamplePrinter_addStackForDispatchQueue_andThread_task_toRootObjects___block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  void *v6;
  void *v7;
  id v8;

  objc_msgSend(a2, "dispatchQueue");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *(void **)(a1 + 32);

  if (v5 == v6)
  {
    v7 = *(void **)(a1 + 40);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "addObject:", v8);

  }
}

- (void)addStackForSwiftTask:(void *)a3 andThread:(void *)a4 task:(void *)a5 toRootObjects:
{
  unint64_t v9;
  unint64_t v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  int v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _QWORD v28[4];
  id v29;
  id v30;
  uint8_t buf[16];

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  if (!a1)
  {
LABEL_7:

    return;
  }
  if (v9 | v10)
  {
    if (v10)
    {
      v13 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v14 = a1[4];
      v15 = a1[5];
      v16 = a1[6];
      v17 = a1[7];
      v28[0] = MEMORY[0x1E0C809B0];
      v28[1] = 3221225472;
      v28[2] = __69__SASamplePrinter_addStackForSwiftTask_andThread_task_toRootObjects___block_invoke;
      v28[3] = &unk_1E7148AE0;
      v29 = (id)v9;
      v30 = v13;
      v18 = v13;
      objc_msgSend((id)v10, "enumerateThreadStatesBetweenStartTime:startSampleIndex:endTime:endSampleIndex:reverseOrder:block:", v14, v16, v15, v17, 0, v28);
      -[SASamplePrinter addStackForDispatchQueue:orSwiftTaskStates:orThread:andThreadStateIndexes:task:toRootObjects:nameChanges:dispatchQueueChanges:swiftTaskChanges:threadChanges:priorityChanges:microstackshotSummary:onlyHeaviestStack:includeState:]((uint64_t)a1, 0, 0, (void *)v10, v18, v11, v12, 0, 0, 0, 0, 0, 0, 0, 0);

    }
    else
    {
      objc_msgSend((id)v9, "states");
      v18 = (id)objc_claimAutoreleasedReturnValue();
      -[SASamplePrinter addStackForDispatchQueue:orSwiftTaskStates:orThread:andThreadStateIndexes:task:toRootObjects:nameChanges:dispatchQueueChanges:swiftTaskChanges:threadChanges:priorityChanges:microstackshotSummary:onlyHeaviestStack:includeState:]((uint64_t)a1, 0, v18, 0, 0, v11, v12, 0, 0, 0, 0, 0, 0, 0, 0);
    }

    goto LABEL_7;
  }
  v19 = *__error();
  _sa_logt();
  v20 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1B9BE0000, v20, OS_LOG_TYPE_ERROR, "Neither thread nor swiftTask provided", buf, 2u);
  }

  *__error() = v19;
  _SASetCrashLogMessage(13439, "Neither thread nor swiftTask provided", v21, v22, v23, v24, v25, v26, v27);
  _os_crash();
  __break(1u);
}

void __69__SASamplePrinter_addStackForSwiftTask_andThread_task_toRootObjects___block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  void *v6;
  void *v7;
  id v8;

  objc_msgSend(a2, "swiftTask");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *(void **)(a1 + 32);

  if (v5 == v6)
  {
    v7 = *(void **)(a1 + 40);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "addObject:", v8);

  }
}

void __49__SASamplePrinter_addStackForTask_toRootObjects___block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  id v5;

  v5 = a3;
  if (-[SASamplePrinter shouldPrintTask:thread:dispatchQueue:](*(_QWORD *)(a1 + 32), *(void **)(a1 + 40), v5, 0))
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
      -[SASamplePrinter addStackForDispatchQueue:orSwiftTaskStates:orThread:andThreadStateIndexes:task:toRootObjects:nameChanges:dispatchQueueChanges:swiftTaskChanges:threadChanges:priorityChanges:microstackshotSummary:onlyHeaviestStack:includeState:](v4, 0, 0, v5, 0, *(void **)(a1 + 40), *(void **)(a1 + 48), 1, 1, 1, 1, 1, 0, 0, 1u);
  }

}

void __55__SASamplePrinter_addStackForExecutable_toRootObjects___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[5];
  id v8;
  id v9;

  v6 = a2;
  objc_msgSend(v6, "mainBinary");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = *(void **)(a1 + 32);

  if (v3 == v4)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v6);
    objc_msgSend(v6, "threads");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __55__SASamplePrinter_addStackForExecutable_toRootObjects___block_invoke_2;
    v7[3] = &unk_1E7149BD0;
    v7[4] = *(_QWORD *)(a1 + 48);
    v8 = v6;
    v9 = *(id *)(a1 + 56);
    objc_msgSend(v5, "enumerateKeysAndObjectsUsingBlock:", v7);

  }
}

void __55__SASamplePrinter_addStackForExecutable_toRootObjects___block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  id v5;

  v5 = a3;
  if (-[SASamplePrinter shouldPrintTask:thread:dispatchQueue:](*(_QWORD *)(a1 + 32), *(void **)(a1 + 40), v5, 0))
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
      -[SASamplePrinter addStackForDispatchQueue:orSwiftTaskStates:orThread:andThreadStateIndexes:task:toRootObjects:nameChanges:dispatchQueueChanges:swiftTaskChanges:threadChanges:priorityChanges:microstackshotSummary:onlyHeaviestStack:includeState:](v4, 0, 0, v5, 0, *(void **)(a1 + 40), *(void **)(a1 + 48), 1, 1, 1, 1, 1, 0, 0, 1u);
  }

}

- (id)callTreesForThreadsInTask:(id)a3
{
  id v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id *v14;
  void *v15;
  void *v16;
  SEL v17;
  id Property;
  void *v19;
  const char *v20;
  void *v21;
  id v22;
  void *v23;
  const char *v24;
  const char *v25;
  SAThreadCallTree *v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  void *v31;
  uint64_t v32;
  void *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if ((-[SASamplePrinter checkForBadOptions]((uint64_t)self) & 1) == 0)
  {
    if (-[SASamplePrinter hasTimeIndexes]((uint64_t)self))
      v6 = objc_msgSend(v4, "sampleCountInSampleIndexRangeStart:end:", self->_reportStartSampleIndex, self->_reportEndSampleIndex);
    else
      v6 = objc_msgSend(v4, "sampleCountInTimestampRangeStart:end:", self->_reportStartTime, self->_reportEndTime);
    v34 = v4;
    -[SASamplePrinter stacksForTask:taskSampleCount:]((id *)&self->super.isa, v4, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v7, "count"));
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v9 = v7;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
    if (!v10)
    {
LABEL_36:

      v4 = v34;
      v5 = -[SATaskThreadCallTrees initWithTask:threadCallTrees:]([SATaskThreadCallTrees alloc], v34, v8);

      goto LABEL_37;
    }
    v11 = v10;
    v12 = *(_QWORD *)v36;
LABEL_8:
    v13 = 0;
    while (1)
    {
      if (*(_QWORD *)v36 != v12)
        objc_enumerationMutation(v9);
      v14 = *(id **)(*((_QWORD *)&v35 + 1) + 8 * v13);
      if (v14)
      {
        if ((unint64_t)objc_msgSend(v14[7], "count") > 1)
        {
          v15 = 0;
          goto LABEL_16;
        }
        objc_msgSend(v34, "threads");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        Property = objc_getProperty(v14, v17, 56, 1);
      }
      else
      {
        objc_msgSend(v34, "threads");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        Property = 0;
      }
      objc_msgSend(Property, "firstObject");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "objectForKeyedSubscript:", v19);
      v15 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v14)
      {
        v22 = 0;
        goto LABEL_19;
      }
LABEL_16:
      if ((unint64_t)objc_msgSend(v14[5], "count") > 1)
      {
        v21 = 0;
        goto LABEL_22;
      }
      v22 = objc_getProperty(v14, v20, 40, 1);
LABEL_19:
      objc_msgSend(v22, "firstObject");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99E38], "null");
      v23 = (void *)objc_claimAutoreleasedReturnValue();

      if (v21 == v23)
      {

        v21 = 0;
      }
      if (!v14)
      {
        v28 = 0;
        goto LABEL_25;
      }
LABEL_22:
      if ((unint64_t)objc_msgSend(v14[6], "count") >= 2)
      {
        v26 = [SAThreadCallTree alloc];
        v27 = 0;
        goto LABEL_28;
      }
      v28 = objc_getProperty(v14, v24, 48, 1);
LABEL_25:
      objc_msgSend(v28, "firstObject");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99E38], "null");
      v29 = (void *)objc_claimAutoreleasedReturnValue();

      if (v27 == v29)
      {

        v27 = 0;
      }
      v26 = [SAThreadCallTree alloc];
      if (!v14)
      {
        v30 = 0;
        goto LABEL_29;
      }
LABEL_28:
      v30 = objc_getProperty(v14, v25, 120, 1);
LABEL_29:
      v31 = (void *)-[SAThreadCallTree initWithThread:dispatchQueue:swiftTask:rootObjects:]((id *)&v26->super.super.isa, v15, v21, v27, v30);
      objc_msgSend(v8, "addObject:", v31);

      if (v11 == ++v13)
      {
        v32 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
        v11 = v32;
        if (!v32)
          goto LABEL_36;
        goto LABEL_8;
      }
    }
  }
  v5 = 0;
LABEL_37:

  return v5;
}

- (id)callTreeForTask:(id)a3
{
  id v4;
  id *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  _QWORD v11[5];
  id v12;
  id v13;

  v4 = a3;
  if ((-[SASamplePrinter checkForBadOptions]((uint64_t)self) & 1) != 0)
  {
    v5 = 0;
  }
  else
  {
    v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 1);
    v7 = v4;
    v8 = v6;
    if (self)
    {
      objc_msgSend(v7, "threads");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = __49__SASamplePrinter_addStackForTask_toRootObjects___block_invoke;
      v11[3] = &unk_1E7149BD0;
      v11[4] = self;
      v12 = v7;
      v13 = v8;
      objc_msgSend(v9, "enumerateKeysAndObjectsUsingBlock:", v11);

    }
    v5 = -[SATaskCallTree initWithTask:rootObjects:]([SATaskCallTree alloc], v7, (uint64_t)v8);

  }
  return v5;
}

- (id)callTreeForDispatchQueue:(id)a3 andThread:(id)a4 inTask:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  unint64_t reportEndSampleIndex;
  unint64_t reportStartSampleIndex;
  id v21;
  unint64_t v22;
  unint64_t v23;
  id result;
  int v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  SATimestamp *reportEndTime;
  SATimestamp *reportStartTime;
  id v36;
  uint8_t buf[8];
  uint64_t v38;
  void (*v39)(uint64_t, void *, uint64_t);
  void *v40;
  id v41;
  id v42;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  if ((-[SASamplePrinter checkForBadOptions]((uint64_t)self) & 1) != 0)
  {
    v11 = 0;
LABEL_9:

    return v11;
  }
  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 1);
  v13 = (unint64_t)v8;
  v14 = (unint64_t)v9;
  v15 = v10;
  v16 = v12;
  if (!self)
  {
LABEL_8:

    v11 = (void *)-[SAThreadCallTree initWithThread:dispatchQueue:swiftTask:rootObjects:]((id *)[SAThreadCallTree alloc], (void *)v14, (void *)v13, 0, v16);
    goto LABEL_9;
  }
  if (v13 | v14)
  {
    if (v14)
    {
      v17 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      reportEndTime = self->_reportEndTime;
      reportStartTime = self->_reportStartTime;
      v18 = v15;
      v36 = v8;
      reportStartSampleIndex = self->_reportStartSampleIndex;
      reportEndSampleIndex = self->_reportEndSampleIndex;
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      v38 = 3221225472;
      v39 = __73__SASamplePrinter_addStackForDispatchQueue_andThread_task_toRootObjects___block_invoke;
      v40 = &unk_1E7148AE0;
      v41 = (id)v13;
      v42 = v17;
      v21 = v17;
      v22 = reportStartSampleIndex;
      v15 = v18;
      v23 = reportEndSampleIndex;
      v8 = v36;
      objc_msgSend((id)v14, "enumerateThreadStatesBetweenStartTime:startSampleIndex:endTime:endSampleIndex:reverseOrder:block:", reportStartTime, v22, reportEndTime, v23, 0, buf);
      -[SASamplePrinter addStackForDispatchQueue:orSwiftTaskStates:orThread:andThreadStateIndexes:task:toRootObjects:nameChanges:dispatchQueueChanges:swiftTaskChanges:threadChanges:priorityChanges:microstackshotSummary:onlyHeaviestStack:includeState:]((uint64_t)self, 0, 0, (void *)v14, v21, v18, v16, 0, 0, 0, 0, 0, 0, 0, 0);

    }
    else
    {
      -[SASamplePrinter addStackForDispatchQueue:orSwiftTaskStates:orThread:andThreadStateIndexes:task:toRootObjects:nameChanges:dispatchQueueChanges:swiftTaskChanges:threadChanges:priorityChanges:microstackshotSummary:onlyHeaviestStack:includeState:]((uint64_t)self, (void *)v13, 0, 0, 0, v15, v16, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    goto LABEL_8;
  }
  v25 = *__error();
  _sa_logt();
  v26 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1B9BE0000, v26, OS_LOG_TYPE_ERROR, "Neither thread nor dispatchQueue provided", buf, 2u);
  }

  *__error() = v25;
  _SASetCrashLogMessage(13423, "Neither thread nor dispatchQueue provided", v27, v28, v29, v30, v31, v32, v33);
  result = (id)_os_crash();
  __break(1u);
  return result;
}

- (id)callTreeForSwiftTask:(id)a3 thread:(id)a4 inTask:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  if ((-[SASamplePrinter checkForBadOptions]((uint64_t)self) & 1) != 0)
  {
    v11 = 0;
  }
  else
  {
    v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 1);
    -[SASamplePrinter addStackForSwiftTask:andThread:task:toRootObjects:](self, v8, v9, v10, v12);
    v11 = (void *)-[SAThreadCallTree initWithThread:dispatchQueue:swiftTask:rootObjects:]((id *)[SAThreadCallTree alloc], v9, 0, v8, v12);

  }
  return v11;
}

- (id)callTreeForDispatchQueue:(id)a3 swiftTask:(id)a4 thread:(id)a5 inTask:(id)a6
{
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;

  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  if ((-[SASamplePrinter checkForBadOptions]((uint64_t)self) & 1) != 0)
  {
    v14 = 0;
  }
  else
  {
    v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 1);
    -[SASamplePrinter addStackForSwiftTask:andThread:task:toRootObjects:](self, v11, v12, v13, v15);
    v14 = (void *)-[SAThreadCallTree initWithThread:dispatchQueue:swiftTask:rootObjects:]((id *)[SAThreadCallTree alloc], v12, v10, v11, v15);

  }
  return v14;
}

- (id)callTreeForThread:(id)a3 inTask:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;

  v6 = a3;
  v7 = a4;
  if ((-[SASamplePrinter checkForBadOptions]((uint64_t)self) & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 1);
    if (self)
      -[SASamplePrinter addStackForDispatchQueue:orSwiftTaskStates:orThread:andThreadStateIndexes:task:toRootObjects:nameChanges:dispatchQueueChanges:swiftTaskChanges:threadChanges:priorityChanges:microstackshotSummary:onlyHeaviestStack:includeState:]((uint64_t)self, 0, 0, v6, 0, v7, v9, 0, 0, 0, 0, 0, 0, 0, 0);
    v8 = (void *)-[SAThreadCallTree initWithThread:dispatchQueue:swiftTask:rootObjects:]((id *)[SAThreadCallTree alloc], v6, 0, 0, v9);

  }
  return v8;
}

- (id)callTreeForExecutable:(id)a3
{
  id v4;
  _QWORD *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  SASampleStore *sampleStore;
  id v11;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, void *);
  void *v16;
  id v17;
  id v18;
  SASamplePrinter *v19;
  id v20;

  v4 = a3;
  if ((-[SASamplePrinter checkForBadOptions]((uint64_t)self) & 1) != 0)
  {
    v5 = 0;
  }
  else
  {
    v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 1);
    v7 = v4;
    v8 = v6;
    if (self)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      sampleStore = self->_sampleStore;
      v13 = MEMORY[0x1E0C809B0];
      v14 = 3221225472;
      v15 = __55__SASamplePrinter_addStackForExecutable_toRootObjects___block_invoke;
      v16 = &unk_1E7149B58;
      v17 = v7;
      v18 = v9;
      v19 = self;
      v20 = v8;
      v11 = v9;
      -[SASampleStore enumerateTasks:](sampleStore, "enumerateTasks:", &v13);
      self = (SASamplePrinter *)objc_msgSend(v11, "copy", v13, v14, v15, v16);

    }
    v5 = -[SAExecutableCallTree initWithTasks:rootObjects:]([SAExecutableCallTree alloc], self, (uint64_t)v8);

  }
  return v5;
}

- (NSString)headerNote
{
  return (NSString *)objc_getProperty(self, a2, 168, 1);
}

- (void)setHeaderNote:(id)a3
{
  objc_setProperty_atomic_copy(self, a2, a3, 168);
}

- (NSUUID)incidentUUID
{
  return (NSUUID *)objc_getProperty(self, a2, 176, 1);
}

- (BOOL)shareWithAppDevs
{
  return self->_shareWithAppDevs;
}

- (void)setShareWithAppDevs:(BOOL)a3
{
  self->_shareWithAppDevs = a3;
}

- (void).cxx_destruct
{
  objc_storeStrong((id *)&self->_incidentUUID, 0);
  objc_storeStrong((id *)&self->_headerNote, 0);
  objc_storeStrong((id *)&self->_sampleStore, 0);
  objc_storeStrong((id *)&self->_dependencyGraphForLastStackshot, 0);
  objc_storeStrong((id *)&self->_heaviestThread, 0);
  objc_storeStrong((id *)&self->_heaviestTask, 0);
  objc_storeStrong((id *)&self->_targetHidStepSamples, 0);
  objc_storeStrong((id *)&self->_targetHIDEvent, 0);
  objc_storeStrong((id *)&self->_timeJumps, 0);
  objc_storeStrong((id *)&self->_indexForImage, 0);
  objc_storeStrong((id *)&self->_binaryImagesHit, 0);
  objc_storeStrong((id *)&self->_reportEndTime, 0);
  objc_storeStrong((id *)&self->_reportStartTime, 0);
  objc_storeStrong((id *)&self->_options, 0);
  objc_storeStrong((id *)&self->_stream, 0);
}

@end
