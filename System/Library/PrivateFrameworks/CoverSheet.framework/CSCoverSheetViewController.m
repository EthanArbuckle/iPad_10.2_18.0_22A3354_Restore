@implementation CSCoverSheetViewController

- (void)updateBehaviorForController:(id)a3
{
  id v4;
  NSObject *v5;
  NSObject *v6;

  v4 = a3;
  SBLogDashBoard();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    -[CSCoverSheetViewController updateBehaviorForController:].cold.2((uint64_t)v4, v5);

  if (objc_msgSend(v4, "participantState") == 2)
  {
    objc_msgSend(v4, "coverSheetIdentifier");
    v6 = objc_claimAutoreleasedReturnValue();
    -[CSCoverSheetViewController _updateActiveBehaviorsForReason:](self, "_updateActiveBehaviorsForReason:", v6);
  }
  else
  {
    SBLogDashBoard();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      -[CSCoverSheetViewController updateBehaviorForController:].cold.1();
  }

}

- (void)updateNotificationSectionSettings:(id)a3 previousSectionSettings:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[CSPresentationViewController contentViewControllers](self->_modalPresentationController, "contentViewControllers");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "bs_objectsOfClass:", objc_opt_class());
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v10 = v9;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v16;
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v16 != v13)
          objc_enumerationMutation(v10);
        objc_msgSend(*(id *)(*((_QWORD *)&v15 + 1) + 8 * v14++), "updateNotificationSectionSettings:previousSectionSettings:", v6, v7, (_QWORD)v15);
      }
      while (v12 != v14);
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v12);
  }

}

- (void)combinedListViewController:(id)a3 didUpdateVisibleNotificationCount:(unint64_t)a4
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v6 = (void *)-[NSHashTable copy](self->_observers, "copy", a3, 0);
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v13;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v13 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * v10);
        if ((objc_opt_respondsToSelector() & 1) != 0)
          objc_msgSend(v11, "coverSheetViewController:didUpdateVisibleNotificationCount:", self, a4);
        ++v10;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v8);
  }

}

- (void)externalBehaviorProviderBehaviorChanged:(id)a3
{
  id v4;

  objc_msgSend(a3, "coverSheetIdentifier");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController _updateActiveBehaviorsForReason:](self, "_updateActiveBehaviorsForReason:", v4);

}

- (void)externalAppearanceProviderBehaviorChanged:(id)a3
{
  id v4;

  objc_msgSend(a3, "coverSheetIdentifier");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController _updateActiveAppearanceForReason:](self, "_updateActiveAppearanceForReason:", v4);

}

- (void)_updateActiveBehaviorsForReason:(id)a3 updatingAppearanceIfNeeded:(BOOL)a4
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  int64_t v8;
  NSObject *v9;
  id v10;
  id v11;
  void *v12;
  NSObject *v13;
  id v14;
  NSObject *v15;
  id v16;
  void *v17;
  BOOL v18;
  NSObject *v19;
  _BOOL4 v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  NSHashTable *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  void *v30;
  void *v31;
  NSObject *v32;
  id v33;
  id v34;
  NSObject *v35;
  id v36;
  void *v37;
  void *v38;
  uint64_t v39;
  NSObject *v40;
  id v41;
  id v42;
  uint64_t v43;
  NSObject *v44;
  id v45;
  id v46;
  id WeakRetained;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  id v61;
  id v62;
  void (**v63)(_QWORD, _QWORD);
  int v64;
  int v65;
  uint64_t v66;
  NSObject *v67;
  id v68;
  id v69;
  NSObject *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t j;
  void *v75;
  id v76;
  void *v77;
  void *v78;
  _BOOL4 v79;
  void *v80;
  void *v81;
  CSCoverSheetViewController *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _QWORD v87[4];
  id v88;
  _BYTE *v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint8_t v94[128];
  _BYTE buf[24];
  id v96;
  _BYTE v97[128];
  uint64_t v98;

  v79 = a4;
  v98 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (-[CSCoverSheetViewController isViewLoaded](self, "isViewLoaded")
    && !-[CSCoverSheetViewController isTransitioning](self, "isTransitioning")
    && -[CSCoverSheetViewController participantState](self, "participantState") == 2)
  {
    v76 = v5;
    -[CSCoverSheetViewController _updateScrollingBehavior](self, "_updateScrollingBehavior");
    -[CSCoverSheetViewController _updateRestrictedBehavior](self, "_updateRestrictedBehavior");
    -[CSCoverSheetViewController _updateIdleTimerBehavior](self, "_updateIdleTimerBehavior");
    v82 = self;
    -[CSCoverSheetViewController activeBehavior](self, "activeBehavior");
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    +[CSBehavior behavior](CSBehavior, "behavior");
    v81 = (void *)objc_claimAutoreleasedReturnValue();
    SBLogDashBoard();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D0337000, v6, OS_LOG_TYPE_DEFAULT, "---------------- [Behavior] Restricted capabilities: starting new ----------------", buf, 2u);
    }

    -[CSCoverSheetViewController pageViewControllerAtIndex:](self, "pageViewControllerAtIndex:", self->_lastSettledPageIndex);
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v78, "participantState");
    v8 = -[CSPresentationViewController participantState](self->_modalPresentationController, "participantState");
    -[CSCoverSheetViewController _behaviorForParticipant:](self, "_behaviorForParticipant:", self->_modalPresentationController);
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7 != 2 || v8 != 2)
    {
      if (v7 == 2 && v8 != 2)
      {
        objc_msgSend(v81, "unionBehavior:", v78);
        SBLogDashBoard();
        v9 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          NSStringFromCoverSheetCapability(objc_msgSend(v78, "restrictedCapabilities"));
          v10 = (id)objc_claimAutoreleasedReturnValue();
          v11 = (id)objc_opt_class();
          *(_DWORD *)buf = 138543618;
          *(_QWORD *)&buf[4] = v10;
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v11;
          _os_log_impl(&dword_1D0337000, v9, OS_LOG_TYPE_DEFAULT, "[Behavior] Restricted capabilities: %{public}@ from current page VC: %{public}@", buf, 0x16u);

        }
      }
    }
    else if (objc_msgSend(v77, "areRestrictedCapabilities:", 0x4000000))
    {
      objc_msgSend(v78, "activeBehavior");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v81, "setRestrictedCapabilities:", objc_msgSend(v12, "restrictedCapabilities"));

      objc_msgSend(v81, "addRestrictedCapabilities:", objc_msgSend(v77, "restrictedCapabilities") - 0x4000000);
    }
    objc_msgSend(v81, "unionBehavior:", self->_irisBehavior);
    SBLogDashBoard();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      NSStringFromCoverSheetCapability(-[CSBehavior restrictedCapabilities](self->_irisBehavior, "restrictedCapabilities"));
      v14 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v14;
      _os_log_impl(&dword_1D0337000, v13, OS_LOG_TYPE_DEFAULT, "[Behavior] Restricted capabilities: %{public}@ from iris", buf, 0xCu);

    }
    objc_msgSend(v81, "unionBehavior:", self->_localBehavior);
    SBLogDashBoard();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      NSStringFromCoverSheetCapability(-[CSBehavior restrictedCapabilities](self->_localBehavior, "restrictedCapabilities"));
      v16 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v16;
      _os_log_impl(&dword_1D0337000, v15, OS_LOG_TYPE_DEFAULT, "[Behavior] Restricted capabilities: %{public}@ from local", buf, 0xCu);

    }
    if (v8 == 2)
    {
      objc_msgSend(v81, "unionBehavior:", v77);
      -[CSPresentationViewController presentedViewControllers](self->_modalPresentationController, "presentedViewControllers");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = objc_msgSend(v17, "count") == 0;

      SBLogDashBoard();
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
      if (v18)
      {
        if (v20)
        {
          NSStringFromCoverSheetCapability(-[CSCoverSheetViewControllerBase restrictedCapabilities](v82->_modalPresentationController, "restrictedCapabilities"));
          v25 = (id)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v25;
          _os_log_impl(&dword_1D0337000, v19, OS_LOG_TYPE_DEFAULT, "[Behavior] Restricted capabilities: %{public}@ from modal", buf, 0xCu);

        }
      }
      else if (v20)
      {
        NSStringFromCoverSheetCapability(-[CSCoverSheetViewControllerBase restrictedCapabilities](v82->_modalPresentationController, "restrictedCapabilities"));
        v21 = (id)objc_claimAutoreleasedReturnValue();
        -[CSPresentationViewController presentedViewControllers](v82->_modalPresentationController, "presentedViewControllers");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "objectAtIndexedSubscript:", 0);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = (id)objc_opt_class();
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)&buf[4] = v21;
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v24;
        _os_log_impl(&dword_1D0337000, v19, OS_LOG_TYPE_DEFAULT, "[Behavior] Restricted capabilities: %{public}@ from modal: %{public}@", buf, 0x16u);

      }
    }
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v26 = v82->_externalBehaviorProviders;
    v27 = -[NSHashTable countByEnumeratingWithState:objects:count:](v26, "countByEnumeratingWithState:objects:count:", &v90, v97, 16);
    if (v27)
    {
      v28 = *(_QWORD *)v91;
      do
      {
        for (i = 0; i != v27; ++i)
        {
          if (*(_QWORD *)v91 != v28)
            objc_enumerationMutation(v26);
          v30 = *(void **)(*((_QWORD *)&v90 + 1) + 8 * i);
          -[CSCoverSheetViewController _behaviorForParticipant:](v82, "_behaviorForParticipant:", v30);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          if (v31)
          {
            objc_msgSend(v81, "unionBehavior:", v31);
            SBLogDashBoard();
            v32 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
            {
              NSStringFromCoverSheetCapability(objc_msgSend(v30, "restrictedCapabilities"));
              v33 = (id)objc_claimAutoreleasedReturnValue();
              v34 = (id)objc_opt_class();
              *(_DWORD *)buf = 138543618;
              *(_QWORD *)&buf[4] = v33;
              *(_WORD *)&buf[12] = 2114;
              *(_QWORD *)&buf[14] = v34;
              _os_log_impl(&dword_1D0337000, v32, OS_LOG_TYPE_DEFAULT, "[Behavior] Restricted capabilities: %{public}@ from external provider: %{public}@", buf, 0x16u);

            }
          }

        }
        v27 = -[NSHashTable countByEnumeratingWithState:objects:count:](v26, "countByEnumeratingWithState:objects:count:", &v90, v97, 16);
      }
      while (v27);
    }

    -[CSCoverSheetViewController setActiveBehavior:](v82, "setActiveBehavior:", v81);
    SBLogDashBoard();
    v35 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      NSStringFromCoverSheetCapability(objc_msgSend(v81, "restrictedCapabilities"));
      v36 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v36;
      _os_log_impl(&dword_1D0337000, v35, OS_LOG_TYPE_DEFAULT, "[Behavior] Restricted capabilities: setting active - %{public}@", buf, 0xCu);

    }
    -[CSScrollGestureController setScrollingStrategy:](v82->_scrollGestureController, "setScrollingStrategy:", objc_msgSend(v81, "scrollingStrategy"));
    -[CSCoverSheetViewController coverSheetView](v82, "coverSheetView");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "scrollView");
    v38 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v81, "scrollingStrategy") == 3 && objc_msgSend(v38, "isScrolling"))
      objc_msgSend(v38, "_stopScrollingAndZoomingAnimations");
    v39 = objc_msgSend(v81, "notificationBehavior");
    if (v39 != objc_msgSend(v80, "notificationBehavior"))
    {
      SBLogDashBoard();
      v40 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        NSStringFromCoverSheetNotificationBehavior(objc_msgSend(v80, "notificationBehavior"));
        v41 = (id)objc_claimAutoreleasedReturnValue();
        NSStringFromCoverSheetNotificationBehavior(objc_msgSend(v81, "notificationBehavior"));
        v42 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        *(_QWORD *)&buf[4] = v41;
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v42;
        *(_WORD *)&buf[22] = 2114;
        v96 = v76;
        _os_log_impl(&dword_1D0337000, v40, OS_LOG_TYPE_DEFAULT, "[Behavior] Notification behavior changed from %{public}@ to %{public}@ for reason: %{public}@", buf, 0x20u);

      }
      -[CSNotificationDispatcher setActiveBehavior:](v82->_notificationDispatcher, "setActiveBehavior:", v81);
    }
    v43 = objc_msgSend(v81, "restrictedCapabilities");
    if (v43 != objc_msgSend(v80, "restrictedCapabilities"))
    {
      SBLogDashBoard();
      v44 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
      {
        NSStringFromCoverSheetCapability(objc_msgSend(v80, "restrictedCapabilities"));
        v45 = (id)objc_claimAutoreleasedReturnValue();
        NSStringFromCoverSheetCapability(objc_msgSend(v81, "restrictedCapabilities"));
        v46 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        *(_QWORD *)&buf[4] = v45;
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v46;
        *(_WORD *)&buf[22] = 2114;
        v96 = v76;
        _os_log_impl(&dword_1D0337000, v44, OS_LOG_TYPE_DEFAULT, "[Behavior] Restricted capabilities changed from %{public}@ to %{public}@ for reason: %{public}@", buf, 0x20u);

      }
      WeakRetained = objc_loadWeakRetained((id *)&v82->_delegate);
      v48 = objc_msgSend(v81, "areRestrictedCapabilities:", 8);
      v49 = objc_msgSend(v80, "areRestrictedCapabilities:", 8);
      v50 = objc_msgSend(v81, "areRestrictedCapabilities:", 56);
      v51 = v50 ^ objc_msgSend(v80, "areRestrictedCapabilities:", 56);
      if ((v48 ^ v49 | v51) == 1)
      {
        if ((objc_msgSend(v81, "areRestrictedCapabilities:", 8) & 1) != 0)
          v52 = 1;
        else
          v52 = objc_msgSend(v81, "areRestrictedCapabilities:", 56);
        objc_msgSend(WeakRetained, "coverSheetViewController:requestsTouchIDDisabled:forReason:", v82, v52, CFSTR("CSActiveBehavior"));
      }
      v53 = objc_msgSend(v81, "areRestrictedCapabilities:", 16);
      if ((_DWORD)v53 != objc_msgSend(v80, "areRestrictedCapabilities:", 16))
        objc_msgSend(WeakRetained, "coverSheetViewController:requestsPreArmDisabled:forReason:", v82, v53, CFSTR("CSActiveBehavior"));
      v54 = objc_msgSend(v80, "restrictedCapabilities");
      v55 = -[CSCoverSheetViewController _pageCapabilities](v82, "_pageCapabilities");
      v56 = objc_msgSend(v81, "restrictedCapabilities");
      if ((-[CSCoverSheetViewController _pageCapabilities](v82, "_pageCapabilities") & v56) != (v55 & v54))
        -[CSCoverSheetViewController _loadViewsForRestrictedPagesIfPossible](v82, "_loadViewsForRestrictedPagesIfPossible");
      v57 = objc_msgSend(v81, "areRestrictedCapabilities:", 0x2000);
      if (v57 != objc_msgSend(v80, "areRestrictedCapabilities:", 0x2000))
        -[CSCoverSheetViewController _setupQuickNoteGestureRecognizer](v82, "_setupQuickNoteGestureRecognizer");
      v58 = objc_msgSend(v81, "areRestrictedCapabilities:", 256);
      if (v58 != objc_msgSend(v80, "areRestrictedCapabilities:", 256))
        -[CSCoverSheetViewController _setupWallpaperGesture](v82, "_setupWallpaperGesture");
      v59 = objc_msgSend(v81, "areRestrictedCapabilities:", 0x8000);
      if (v59 != objc_msgSend(v80, "areRestrictedCapabilities:", 0x8000))
        -[CSCoverSheetViewController _updateProudLockViewUpdateSuspension](v82, "_updateProudLockViewUpdateSuspension");
      v60 = objc_msgSend(v81, "areRestrictedCapabilities:", 0x800000);
      if (v60 != objc_msgSend(v80, "areRestrictedCapabilities:", 0x800000))
        -[CSCoverSheetViewController _setupPosterSwitcherGestureRecognizer](v82, "_setupPosterSwitcherGestureRecognizer");
      if (objc_msgSend(v81, "areRestrictedCapabilities:", 64)
        && (objc_msgSend(v80, "areRestrictedCapabilities:", 64) & 1) == 0
        && -[CSCoverSheetViewController isShowingTodayView](v82, "isShowingTodayView"))
      {
        -[CSCoverSheetViewController deactivateTodayViewWithCompletion:](v82, "deactivateTodayViewWithCompletion:", 0);
      }
      if (v79)
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x2020000000;
        LOBYTE(v96) = 0;
        v61 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
        v87[0] = MEMORY[0x1E0C809B0];
        v87[1] = 3221225472;
        v87[2] = __89__CSCoverSheetViewController__updateActiveBehaviorsForReason_updatingAppearanceIfNeeded___block_invoke;
        v87[3] = &unk_1E8E2E730;
        v89 = buf;
        v62 = v61;
        v88 = v62;
        v63 = (void (**)(_QWORD, _QWORD))MEMORY[0x1D17E1614](v87);
        v64 = objc_msgSend(v81, "areRestrictedCapabilities:", 128);
        if (v64 != objc_msgSend(v80, "areRestrictedCapabilities:", 128))
          ((void (**)(_QWORD, const __CFString *))v63)[2](v63, CFSTR("Control Center Capability Changed"));
        v65 = objc_msgSend(v81, "areRestrictedCapabilities:", 4096);
        if (v65 != objc_msgSend(v80, "areRestrictedCapabilities:", 4096))
          ((void (**)(_QWORD, const __CFString *))v63)[2](v63, CFSTR("Dismiss CoverSheet Capability Changed"));
        if (v51)
          ((void (**)(_QWORD, const __CFString *))v63)[2](v63, CFSTR("Unlock disabled changed"));
        if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
          -[CSCoverSheetViewController _updateActiveAppearanceForReason:](v82, "_updateActiveAppearanceForReason:", v62);

        _Block_object_dispose(buf, 8);
      }

    }
    v66 = objc_msgSend(v81, "proximityDetectionMode");
    if (v66 != objc_msgSend(v80, "proximityDetectionMode"))
    {
      SBLogDashBoard();
      v67 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
      {
        NSStringFromCoverSheetProximityDetectionMode(objc_msgSend(v80, "proximityDetectionMode"));
        v68 = (id)objc_claimAutoreleasedReturnValue();
        NSStringFromCoverSheetProximityDetectionMode(objc_msgSend(v81, "proximityDetectionMode"));
        v69 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412802;
        *(_QWORD *)&buf[4] = v68;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v69;
        *(_WORD *)&buf[22] = 2112;
        v96 = v76;
        _os_log_impl(&dword_1D0337000, v67, OS_LOG_TYPE_DEFAULT, "[Behavior] Proximity detection mode changed from %@ to %@ for reason: %@", buf, 0x20u);

      }
    }
    if ((objc_msgSend(v80, "isEqual:", v81) & 1) == 0)
    {
      SBLogDashBoard();
      v70 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = v81;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v76;
        _os_log_impl(&dword_1D0337000, v70, OS_LOG_TYPE_DEFAULT, "[Behavior] Aggregate behavior did change: %@ for reason: %@", buf, 0x16u);
      }

      -[CSCoverSheetViewController _handleEventType:](v82, "_handleEventType:", 2);
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v71 = (void *)-[NSHashTable copy](v82->_observers, "copy");
      v72 = objc_msgSend(v71, "countByEnumeratingWithState:objects:count:", &v83, v94, 16);
      if (v72)
      {
        v73 = *(_QWORD *)v84;
        do
        {
          for (j = 0; j != v72; ++j)
          {
            if (*(_QWORD *)v84 != v73)
              objc_enumerationMutation(v71);
            v75 = *(void **)(*((_QWORD *)&v83 + 1) + 8 * j);
            if ((objc_opt_respondsToSelector() & 1) != 0)
              objc_msgSend(v75, "coverSheetViewController:didChangeActiveBehavior:", v82, v81);
          }
          v72 = objc_msgSend(v71, "countByEnumeratingWithState:objects:count:", &v83, v94, 16);
        }
        while (v72);
      }

    }
    v5 = v76;
  }

}

- (int64_t)participantState
{
  return self->_participantState;
}

- (BOOL)isTransitioning
{
  return self->_transitionType != 0;
}

- (void)_updateActiveBehaviorsForReason:(id)a3
{
  -[CSCoverSheetViewController _updateActiveBehaviorsForReason:updatingAppearanceIfNeeded:](self, "_updateActiveBehaviorsForReason:updatingAppearanceIfNeeded:", a3, 1);
}

- (void)_updateActiveAppearanceForReason:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  CSCoverSheetViewTransitionSource *currentTransitionSource;
  CSCoverSheetViewTransitionSource *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  CSCoverSheetViewTransitionSource *v21;
  CSLegibilityProviding *legibilityProvider;
  void *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  NSObject *v38;
  _BOOL4 v39;
  void *v40;
  void *v41;
  void *v42;
  __CFString *v43;
  void *v44;
  void *v45;
  __CFString *v46;
  void *v47;
  NSObject *v48;
  NSObject *v49;
  NSObject *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  _BOOL4 v61;
  int v62;
  int v63;
  _BOOL4 v64;
  char v65;
  _BOOL4 v66;
  _BOOL4 v67;
  _BOOL8 v68;
  void *v69;
  id v70;
  id v71;
  uint64_t v72;
  CSLegibilityProviding *v73;
  uint64_t v74;
  void *v75;
  BOOL v76;
  unsigned int v77;
  CSCoverSheetAppearanceResolver *appearanceResolver;
  void *v79;
  void *v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  void *v87;
  void *v88;
  _QWORD v89[5];
  id v90;
  id v91;
  id v92;
  char v93;
  BOOL v94;
  BOOL v95;
  _QWORD v96[5];
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  uint64_t v102;
  uint8_t buf[16];
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  BSDispatchQueueAssertMain();
  if (-[CSCoverSheetViewController _shouldUpdateActiveAppearanceForReason:](self, "_shouldUpdateActiveAppearanceForReason:", v4))
  {
    SBLogDashBoard();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v4;
      _os_log_impl(&dword_1D0337000, v5, OS_LOG_TYPE_INFO, "Beginning appearance update for %@... --------", buf, 0xCu);
    }

    v102 = 0;
    *(_QWORD *)buf = 0;
    v100 = 0;
    v101 = 0;
    v98 = 0;
    v99 = 0;
    v97 = 0;
    -[CSCoverSheetViewController __currentDesiredAppearanceWithStartIndex:targetIndex:targetAppearance:targetPresentation:modalAppearance:proudLockAppearance:poseidonAppearance:](self, "__currentDesiredAppearanceWithStartIndex:targetIndex:targetAppearance:targetPresentation:modalAppearance:proudLockAppearance:poseidonAppearance:", buf, &v102, &v101, &v100, &v99, &v98, &v97);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v101;
    v8 = v100;
    v9 = v99;
    v10 = v98;
    v11 = v97;
    if (v6)
    {
      v87 = v6;
      v83 = v8;
      -[CSCoverSheetViewController previousAppearance](self, "previousAppearance");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = v12;
      if (v12)
      {
        v14 = v12;
      }
      else
      {
        -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
        v14 = (id)objc_claimAutoreleasedReturnValue();
      }
      v88 = v14;

      +[CSAppearance appearanceWithIdentifier:](CSAppearance, "appearanceWithIdentifier:", CFSTR("(active)"));
      v79 = (void *)objc_claimAutoreleasedReturnValue();
      currentTransitionSource = self->_currentTransitionSource;
      -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
      v16 = (CSCoverSheetViewTransitionSource *)objc_claimAutoreleasedReturnValue();
      v84 = v4;
      v85 = v7;
      v86 = v9;
      v81 = v11;
      v82 = v10;
      v76 = currentTransitionSource == v16
         || -[CSCoverSheetViewController _isPresentingPosterSwitcher](self, "_isPresentingPosterSwitcher");

      appearanceResolver = self->_appearanceResolver;
      -[CSCoverSheetViewController activeBehavior](self, "activeBehavior");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = v102;
      v18 = *(_QWORD *)buf;
      v20 = -[CSCoverSheetViewController _indexOfMainPage](self, "_indexOfMainPage");
      v21 = self->_currentTransitionSource;
      legibilityProvider = self->_legibilityProvider;
      -[CSCoverSheetViewController view](self, "view");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "bounds");
      v25 = v24;
      v27 = v26;
      v29 = v28;
      v31 = v30;
      -[CSCoverSheetViewController _whitePointValues](self, "_whitePointValues");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      LOBYTE(v74) = self->_hasContentAboveCoverSheet;
      v73 = legibilityProvider;
      LOBYTE(v72) = v76;
      v7 = v85;
      v33 = -[CSCoverSheetAppearanceResolver newActiveAppearanceGivenDesiredAppearance:oldAppearance:activeAppearance:activeBehavior:startIndex:targetIndex:indexOfMainPage:targetAppearance:modalAppearance:currentTransitionSource:contentTransitionIsAtCoverSheetLevel:legibilityProvider:bounds:whitePointValues:hasContentAboveCoverSheet:](appearanceResolver, "newActiveAppearanceGivenDesiredAppearance:oldAppearance:activeAppearance:activeBehavior:startIndex:targetIndex:indexOfMainPage:targetAppearance:modalAppearance:currentTransitionSource:contentTransitionIsAtCoverSheetLevel:legibilityProvider:bounds:whitePointValues:hasContentAboveCoverSheet:", v87, v88, v79, v17, v18, v19, v25, v27, v29, v31, v20, v85, v86, v21, v72,
              v73,
              v32,
              v74);

      objc_msgSend(v33, "setTransitional:", -[CSCoverSheetViewTransitionSource isTransitioning](self->_currentTransitionSource, "isTransitioning"));
      -[CSCoverSheetViewController previousAppearance](self, "previousAppearance");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = v34;
      if (v34)
      {
        v36 = v34;
      }
      else
      {
        -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
        v36 = (id)objc_claimAutoreleasedReturnValue();
      }
      v37 = v36;

      -[CSCoverSheetViewController setActiveAppearance:](self, "setActiveAppearance:", v33);
      if ((objc_msgSend(v37, "isEqualToAppearance:", v33) & 1) == 0)
      {
        SBLogDashBoard();
        v38 = objc_claimAutoreleasedReturnValue();
        v39 = os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG);

        if (v39)
        {
          v40 = (void *)MEMORY[0x1E0C99E20];
          v41 = v37;
          objc_msgSend(v37, "components");
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v40, "setWithSet:", v42);
          v43 = (__CFString *)objc_claimAutoreleasedReturnValue();

          v44 = (void *)MEMORY[0x1E0C99E20];
          objc_msgSend(v33, "components");
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v44, "setWithSet:", v45);
          v46 = (__CFString *)objc_claimAutoreleasedReturnValue();

          -[__CFString minusSet:](v46, "minusSet:", v43);
          objc_msgSend(v33, "components");
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          -[__CFString minusSet:](v43, "minusSet:", v47);

          SBLogDashBoard();
          v48 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
            -[CSCoverSheetViewController _updateActiveAppearanceForReason:].cold.3();

          SBLogDashBoard();
          v49 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
            -[CSCoverSheetViewController _updateActiveAppearanceForReason:].cold.2(v46, v49);

          SBLogDashBoard();
          v50 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
            -[CSCoverSheetViewController _updateActiveAppearanceForReason:].cold.1(v43, v50);

          v37 = v41;
        }
        -[CSCoverSheetViewController _handleEventType:](self, "_handleEventType:", 1);
        v77 = objc_msgSend(MEMORY[0x1E0CEABB0], "_isInAnimationBlock");
        objc_msgSend(v88, "componentForType:identifier:", 4, CFSTR("(active)"));
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v33, "componentForType:identifier:", 4, CFSTR("(active)"));
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v88, "componentForType:identifier:", 4, CFSTR("(active)"));
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v33, "componentForType:identifier:", 4, CFSTR("(active)"));
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v53, "offset");
        v56 = v55;
        v58 = v57;
        objc_msgSend(v54, "offset");
        v61 = v58 != v60 || v56 != v59;
        v80 = v51;
        v62 = objc_msgSend(v51, "isHidden");
        v63 = v62 ^ objc_msgSend(v52, "isHidden");
        v64 = -[CSPresentationViewController isTransitioning](self->_modalPresentationController, "isTransitioning");
        if (!-[CSCoverSheetViewController isTransitioning](self, "isTransitioning") && v63 | v64 | v61)
        {
          v75 = v37;
          v65 = objc_msgSend(v52, "isHidden");
          objc_msgSend(v54, "offset");
          v66 = -[CSCoverSheetViewController _isSlideableContentOffsetOnscreen:](self, "_isSlideableContentOffsetOnscreen:");
          v67 = -[CSPresentationViewController isPresentingContent](self->_modalPresentationController, "isPresentingContent");
          v68 = (v65 & 1) == 0 && v66 && !v67;
          -[CSCoverSheetViewController _beginAppearanceTransitionForPageViewControllersToVisible:animated:](self, "_beginAppearanceTransitionForPageViewControllersToVisible:animated:", v68, v77);
          v37 = v75;
        }
        -[CSCoverSheetViewController _updateHomeAffordance](self, "_updateHomeAffordance");
        v69 = (void *)MEMORY[0x1E0D01908];
        v96[0] = MEMORY[0x1E0C809B0];
        v96[1] = 3221225472;
        v96[2] = __63__CSCoverSheetViewController__updateActiveAppearanceForReason___block_invoke;
        v96[3] = &unk_1E8E2DB38;
        v96[4] = self;
        v89[0] = MEMORY[0x1E0C809B0];
        v89[1] = 3221225472;
        v89[2] = __63__CSCoverSheetViewController__updateActiveAppearanceForReason___block_invoke_2;
        v89[3] = &unk_1E8E2E708;
        v89[4] = self;
        v93 = v63;
        v90 = v33;
        v91 = v52;
        v94 = v61;
        v92 = v54;
        v95 = v64;
        v70 = v54;
        v71 = v52;
        objc_msgSend(v69, "addAlongsideAnimations:completion:", v96, v89);

        v7 = v85;
      }

      v8 = v83;
      v4 = v84;
      v9 = v86;
      v6 = v87;
      v11 = v81;
      v10 = v82;
    }

  }
}

- (BOOL)_shouldUpdateActiveAppearanceForReason:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  BOOL v11;
  int v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (-[CSCoverSheetViewController _appearState](self, "_appearState")
    && v5
    && (objc_msgSend(v5, "scrollView"),
        v6 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v6, "visiblePageRange"),
        v8 = v7,
        v6,
        v8))
  {
    if (!self->_preventAppearanceUpdatesForRotation)
    {
      v11 = 1;
      goto LABEL_11;
    }
    SBLogDashBoard();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v13 = 138412290;
      v14 = v4;
      v10 = "Ignoring appearance update for %@ because we are in a rotation.";
LABEL_9:
      _os_log_impl(&dword_1D0337000, v9, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v13, 0xCu);
    }
  }
  else
  {
    SBLogDashBoard();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v13 = 138412290;
      v14 = v4;
      v10 = "Ignoring appearance update for %@ because we have no view.";
      goto LABEL_9;
    }
  }

  v11 = 0;
LABEL_11:

  return v11;
}

- (BOOL)isHostingAnApp
{
  NSHashTable *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = self->_applicationHosters;
  v4 = -[NSHashTable countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v10;
    while (2)
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v3);
        if ((objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * v7), "isHostingAnApp", (_QWORD)v9) & 1) != 0)
        {

          return 1;
        }
        ++v7;
      }
      while (v5 != v7);
      v5 = -[NSHashTable countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v5)
        continue;
      break;
    }
  }

  return -[CSPresentationViewController isHostingAnApp](self->_modalPresentationController, "isHostingAnApp");
}

- (CSCoverSheetViewController)initWithPageViewControllers:(id)a3 mainPageContentViewController:(id)a4 context:(id)a5
{
  id v9;
  id v10;
  id v11;
  CSCoverSheetViewController *v12;
  CSCoverSheetViewController *v13;
  id *p_coverSheetContext;
  uint64_t v15;
  CSLockScreenSettings *prototypeSettings;
  SBLockScreenDefaults *v17;
  SBLockScreenDefaults *lockScreenDefaults;
  SBAlwaysOnDefaults *v19;
  SBAlwaysOnDefaults *alwaysOnDefaults;
  uint64_t v21;
  ACActivityCenter *activityCenter;
  CSMagSafeAccessoryStatusObserver *v23;
  CSMagSafeAccessoryStatusObserver *accessoryAttachmentObserver;
  uint64_t v25;
  NSMutableArray *attachedAccessories;
  uint64_t v27;
  CSBehavior *localBehavior;
  uint64_t v29;
  CSBehavior *irisBehavior;
  uint64_t v31;
  CSAppearance *localAppearance;
  CSAppearance *v33;
  void *v34;
  void *v35;
  void *v36;
  CSAppearance *v37;
  void *v38;
  void *v39;
  void *v40;
  CSAppearance *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  CSAppearance *v46;
  void *v47;
  void *v48;
  void *v49;
  CSAppearance *v50;
  void *v51;
  void *v52;
  void *v53;
  CSAppearance *v54;
  void *v55;
  void *v56;
  void *v57;
  CSAppearance *v58;
  void *v59;
  void *v60;
  void *v61;
  CSAppearance *v62;
  void *v63;
  void *v64;
  void *v65;
  CSAppearance *v66;
  void *v67;
  void *v68;
  void *v69;
  CSAppearance *v70;
  void *v71;
  void *v72;
  void *v73;
  CSAppearance *v74;
  void *v75;
  void *v76;
  void *v77;
  CSAppearance *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  CSAppearance *v83;
  void *v84;
  void *v85;
  void *v86;
  CSAppearance *v87;
  void *v88;
  void *v89;
  void *v90;
  CSAppearance *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  CSAppearance *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  char v101;
  CSAppearance *v102;
  void *v103;
  void *v104;
  void *v105;
  CSPowerChangeObserver *v106;
  void *v107;
  void *v108;
  CSCoverSheetViewController *v109;
  uint64_t v110;
  CSPowerChangeObserver *powerChangeObserver;
  BCBatteryDeviceController *v112;
  BCBatteryDeviceController *batteryDeviceController;
  CSEmbeddedContentActionManager *v114;
  CSEmbeddedContentActionManager *embeddedContentActionManager;
  CSEmbeddedContentActionManager *v116;
  void *v117;
  CSBackgroundPresentationManager *v118;
  CSBackgroundPresentationManager *backgroundPresentationManager;
  CSBackgroundContentActionManager *v120;
  CSBackgroundContentActionManager *backgroundContentActionManager;
  CSBackgroundContentActionManager *v122;
  void *v123;
  CSRemoteContentSessionManager *v124;
  void *v125;
  uint64_t v126;
  CSRemoteContentSessionManager *remoteContentSessionManager;
  uint64_t v128;
  NSMutableSet *remoteContentInlineProvidingManagers;
  void *v130;
  void *v131;
  CSModalPresentationViewController *v132;
  CSModalPresentationViewController *modalPresentationController;
  uint64_t v134;
  NSMutableSet *pendingModalViewControllers;
  CSTimerViewController *v136;
  CSTimerViewController *timerViewController;
  CSNotificationDispatcher *v138;
  CSNotificationDispatcher *notificationDispatcher;
  CSNotificationDispatcher *v140;
  void *v141;
  void *v142;
  void *v143;
  uint64_t v144;
  CSLegibilityProviding *legibilityProvider;
  void *v146;
  CSLayoutStrategy *v147;
  NSMutableArray *v148;
  NSMutableArray *exemptFromInactiveAppearanceParticipants;
  uint64_t v150;
  NSHashTable *externalAppearanceProviders;
  uint64_t v152;
  NSHashTable *externalBehaviorProviders;
  uint64_t v154;
  NSHashTable *externalEventHandlers;
  uint64_t v156;
  NSHashTable *externalLockProviders;
  uint64_t v158;
  NSHashTable *externalPresentationProviders;
  uint64_t v160;
  NSHashTable *applicationHosters;
  CSNotificationClearingTrigger *v162;
  CSNotificationClearingTrigger *notificationClearingTrigger;
  uint64_t v164;
  SBFScreenWakeAnimationControlling *screenWakeAnimationController;
  SBFLegacyWallpaperWakeAnimator *v166;
  SBFLegacyWallpaperWakeAnimator *legacyWallpaperWakeAnimator;
  uint64_t v168;
  SBUIPhoneUnlockWithWatchController *phoneUnlockWithWatchController;
  SBUIPhoneUnlockWithWatchController *v170;
  void *v171;
  CSCoverSheetAppearanceResolver *v172;
  CSCoverSheetAppearanceResolver *appearanceResolver;
  CSPosterSwitcherActivationManager *v174;
  void *v175;
  uint64_t v176;
  CSPosterSwitcherActivationManager *posterSwitcherActivationManager;
  void *v178;
  uint64_t v179;
  APSubjectMonitorSubscription *appProtectionSubjectMonitorSubscription;
  void *v182;
  id v183;
  _QWORD v184[4];
  CSCoverSheetViewController *v185;
  objc_super v186;

  v9 = a3;
  v10 = a4;
  v11 = a5;
  if ((objc_msgSend(v9, "containsObject:", v10) & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v182 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v182, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("CSCoverSheetViewController.m"), 518, CFSTR("The centerViewController must be part of viewControllers."));

  }
  v186.receiver = self;
  v186.super_class = (Class)CSCoverSheetViewController;
  v12 = -[CSCoverSheetViewController init](&v186, sel_init);
  v13 = v12;
  if (v12)
  {
    p_coverSheetContext = (id *)&v12->_coverSheetContext;
    objc_storeStrong((id *)&v12->_coverSheetContext, a5);
    +[CSLockScreenDomain rootSettings](CSLockScreenDomain, "rootSettings");
    v15 = objc_claimAutoreleasedReturnValue();
    prototypeSettings = v13->_prototypeSettings;
    v13->_prototypeSettings = (CSLockScreenSettings *)v15;

    -[PTSettings addKeyObserver:](v13->_prototypeSettings, "addKeyObserver:", v13);
    v17 = (SBLockScreenDefaults *)objc_alloc_init(MEMORY[0x1E0DA9FA8]);
    lockScreenDefaults = v13->_lockScreenDefaults;
    v13->_lockScreenDefaults = v17;

    v19 = (SBAlwaysOnDefaults *)objc_alloc_init(MEMORY[0x1E0DA9D40]);
    alwaysOnDefaults = v13->_alwaysOnDefaults;
    v13->_alwaysOnDefaults = v19;

    v21 = objc_opt_new();
    activityCenter = v13->_activityCenter;
    v13->_activityCenter = (ACActivityCenter *)v21;

    v183 = v9;
    -[CSCoverSheetViewController _setPageViewControllers:](v13, "_setPageViewControllers:", v9);
    -[CSCoverSheetViewController _setAllowedPageViewControllers:](v13, "_setAllowedPageViewControllers:", MEMORY[0x1E0C9AA60]);
    -[CSCoverSheetViewController _setMainPageContentViewController:](v13, "_setMainPageContentViewController:", v10);
    v23 = -[CSMagSafeAccessoryStatusObserver initWithCoverSheetContext:]([CSMagSafeAccessoryStatusObserver alloc], "initWithCoverSheetContext:", *p_coverSheetContext);
    accessoryAttachmentObserver = v13->_accessoryAttachmentObserver;
    v13->_accessoryAttachmentObserver = v23;

    -[CSMagSafeAccessoryStatusObserver setDelegate:](v13->_accessoryAttachmentObserver, "setDelegate:", v13);
    v25 = objc_opt_new();
    attachedAccessories = v13->_attachedAccessories;
    v13->_attachedAccessories = (NSMutableArray *)v25;

    v13->_isAccessoryAnimationPresenting = 0;
    v13->_isAccessoryAnimationAllowed = 0;
    +[CSBehavior behavior](CSBehavior, "behavior");
    v27 = objc_claimAutoreleasedReturnValue();
    localBehavior = v13->_localBehavior;
    v13->_localBehavior = (CSBehavior *)v27;

    +[CSBehavior behavior](CSBehavior, "behavior");
    v29 = objc_claimAutoreleasedReturnValue();
    irisBehavior = v13->_irisBehavior;
    v13->_irisBehavior = (CSBehavior *)v29;

    +[CSAppearance appearanceWithIdentifier:](CSAppearance, "appearanceWithIdentifier:", CFSTR("(default)"));
    v31 = objc_claimAutoreleasedReturnValue();
    localAppearance = v13->_localAppearance;
    v13->_localAppearance = (CSAppearance *)v31;

    v33 = v13->_localAppearance;
    v34 = (void *)objc_opt_new();
    objc_msgSend(v34, "priority:", -100);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "style:", &unk_1E8E8A2B8);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSAppearance addComponent:](v33, "addComponent:", v36);

    v37 = v13->_localAppearance;
    +[CSComponent dateView](CSComponent, "dateView");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v38, "priority:", -100);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "hidden:", 0);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSAppearance addComponent:](v37, "addComponent:", v40);

    v41 = v13->_localAppearance;
    v42 = (void *)objc_opt_new();
    objc_msgSend(v42, "priority:", -100);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v43, "hidden:", 0);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v44, "fakeStatusBarLevel:", &unk_1E8E8A2D0);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSAppearance addComponent:](v41, "addComponent:", v45);

    v46 = v13->_localAppearance;
    +[CSComponent statusBarBackground](CSComponent, "statusBarBackground");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v47, "priority:", -100);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v48, "hidden:", 1);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSAppearance addComponent:](v46, "addComponent:", v49);

    v50 = v13->_localAppearance;
    +[CSComponent pageControl](CSComponent, "pageControl");
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v51, "priority:", -100);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v52, "hidden:", 0);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSAppearance addComponent:](v50, "addComponent:", v53);

    v54 = v13->_localAppearance;
    +[CSComponent pageContent](CSComponent, "pageContent");
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v55, "priority:", -100);
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v56, "hidden:", 0);
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSAppearance addComponent:](v54, "addComponent:", v57);

    v58 = v13->_localAppearance;
    +[CSComponent slideableContent](CSComponent, "slideableContent");
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v59, "priority:", -100);
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v60, "hidden:", 0);
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSAppearance addComponent:](v58, "addComponent:", v61);

    v62 = v13->_localAppearance;
    +[CSComponent wallpaper](CSComponent, "wallpaper");
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v63, "priority:", -100);
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v64, "hidden:", 1);
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSAppearance addComponent:](v62, "addComponent:", v65);

    v66 = v13->_localAppearance;
    +[CSComponent tinting](CSComponent, "tinting");
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v67, "priority:", -100);
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v68, "hidden:", 1);
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSAppearance addComponent:](v66, "addComponent:", v69);

    v70 = v13->_localAppearance;
    +[CSComponent footerStatusLabel](CSComponent, "footerStatusLabel");
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v71, "priority:", -100);
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v72, "hidden:", 0);
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSAppearance addComponent:](v70, "addComponent:", v73);

    v74 = v13->_localAppearance;
    +[CSComponent footerCallToActionLabel](CSComponent, "footerCallToActionLabel");
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v75, "priority:", -100);
    v76 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v76, "hidden:", 0);
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSAppearance addComponent:](v74, "addComponent:", v77);

    v78 = v13->_localAppearance;
    v79 = (void *)objc_opt_new();
    objc_msgSend(v79, "priority:", -100);
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v80, "hidden:", 0);
    v81 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v81, "prefersInlineCoaching:", 0);
    v82 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSAppearance addComponent:](v78, "addComponent:", v82);

    v83 = v13->_localAppearance;
    +[CSComponent content](CSComponent, "content");
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v84, "priority:", -100);
    v85 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v85, "hidden:", 0);
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSAppearance addComponent:](v83, "addComponent:", v86);

    v87 = v13->_localAppearance;
    +[CSComponent statusBarGradient](CSComponent, "statusBarGradient");
    v88 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v88, "priority:", -100);
    v89 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v89, "hidden:", 0);
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSAppearance addComponent:](v87, "addComponent:", v90);

    v91 = v13->_localAppearance;
    v92 = (void *)objc_opt_new();
    objc_msgSend(v92, "priority:", -100);
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v93, "hidden:", 1);
    v94 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v94, "lighterReduction:", 1);
    v95 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSAppearance addComponent:](v91, "addComponent:", v95);

    v96 = v13->_localAppearance;
    +[CSComponent dimmingLayer](CSComponent, "dimmingLayer");
    v97 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v97, "priority:", -100);
    v98 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v98, "hidden:", 0);
    v99 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSAppearance addComponent:](v96, "addComponent:", v99);

    if (__sb__runningInSpringBoard())
    {
      if (SBFEffectiveDeviceClass() != 2 || !_os_feature_enabled_impl())
        goto LABEL_12;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      v100 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v100, "userInterfaceIdiom") != 1)
      {
LABEL_11:

        goto LABEL_12;
      }
      v101 = _os_feature_enabled_impl();

      if ((v101 & 1) == 0)
      {
LABEL_12:
        objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
        v105 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v105, "addObserver:selector:name:object:", v13, sel__displayWillTurnOnWhileOnCoverSheet_, *MEMORY[0x1E0DAC310], 0);
        objc_msgSend(v105, "addObserver:selector:name:object:", v13, sel__preferredContentSizeDidChange, *MEMORY[0x1E0CEB3F0], 0);
        objc_msgSend(v105, "addObserver:selector:name:object:", v13, sel__liftToWakeGestureDetected, *MEMORY[0x1E0DAC348], 0);
        objc_msgSend(v105, "addObserver:selector:name:object:", v13, sel__managedConfigurationEffectiveSettingsDidChange_, *MEMORY[0x1E0D46EC8], 0);
        v106 = [CSPowerChangeObserver alloc];
        objc_msgSend(*p_coverSheetContext, "powerStatusProvider");
        v107 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*p_coverSheetContext, "powerStatusChangeNotificationName");
        v108 = (void *)objc_claimAutoreleasedReturnValue();
        v184[0] = MEMORY[0x1E0C809B0];
        v184[1] = 3221225472;
        v184[2] = __96__CSCoverSheetViewController_initWithPageViewControllers_mainPageContentViewController_context___block_invoke;
        v184[3] = &unk_1E8E2DDE0;
        v109 = v13;
        v185 = v109;
        v110 = -[CSPowerChangeObserver initWithStatusProvider:notificationName:updateBlock:](v106, "initWithStatusProvider:notificationName:updateBlock:", v107, v108, v184);
        powerChangeObserver = v109->_powerChangeObserver;
        v109->_powerChangeObserver = (CSPowerChangeObserver *)v110;

        v112 = (BCBatteryDeviceController *)objc_alloc_init(MEMORY[0x1E0D01B20]);
        batteryDeviceController = v109->_batteryDeviceController;
        v109->_batteryDeviceController = v112;

        v114 = -[CSEmbeddedContentActionManager initWithDelegate:]([CSEmbeddedContentActionManager alloc], "initWithDelegate:", v109);
        embeddedContentActionManager = v109->_embeddedContentActionManager;
        v109->_embeddedContentActionManager = v114;

        v116 = v109->_embeddedContentActionManager;
        objc_msgSend(*p_coverSheetContext, "contentActionProvider");
        v117 = (void *)objc_claimAutoreleasedReturnValue();
        -[CSEmbeddedContentActionManager setContentActionProvider:](v116, "setContentActionProvider:", v117);

        v118 = objc_alloc_init(CSBackgroundPresentationManager);
        backgroundPresentationManager = v109->_backgroundPresentationManager;
        v109->_backgroundPresentationManager = v118;

        v120 = -[CSBackgroundContentActionManager initWithDelegate:]([CSBackgroundContentActionManager alloc], "initWithDelegate:", v109);
        backgroundContentActionManager = v109->_backgroundContentActionManager;
        v109->_backgroundContentActionManager = v120;

        v122 = v109->_backgroundContentActionManager;
        objc_msgSend(*p_coverSheetContext, "contentActionProvider");
        v123 = (void *)objc_claimAutoreleasedReturnValue();
        -[CSBackgroundContentActionManager setContentActionProvider:](v122, "setContentActionProvider:", v123);

        v124 = [CSRemoteContentSessionManager alloc];
        objc_msgSend(*p_coverSheetContext, "authenticationStatusProvider");
        v125 = (void *)objc_claimAutoreleasedReturnValue();
        v126 = -[CSRemoteContentSessionManager initWithAuthenticationStatusProvider:](v124, "initWithAuthenticationStatusProvider:", v125);
        remoteContentSessionManager = v109->_remoteContentSessionManager;
        v109->_remoteContentSessionManager = (CSRemoteContentSessionManager *)v126;

        -[CSRemoteContentSessionManager setForwardingHostDelegate:](v109->_remoteContentSessionManager, "setForwardingHostDelegate:", v109);
        objc_msgSend(MEMORY[0x1E0C99E20], "set");
        v128 = objc_claimAutoreleasedReturnValue();
        remoteContentInlineProvidingManagers = v109->_remoteContentInlineProvidingManagers;
        v109->_remoteContentInlineProvidingManagers = (NSMutableSet *)v128;

        objc_msgSend(v10, "combinedListViewController");
        v130 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v130, "setRemoteContentInlineProvider:", v109);

        objc_msgSend(v10, "combinedListViewController");
        v131 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v131, "setCoverSheetGestureHandling:", v109);
        objc_msgSend(v131, "setActivityItemObserver:", v109);
        objc_msgSend(v131, "setAudioCategoriesObserver:", v109);
        v132 = objc_alloc_init(CSModalPresentationViewController);
        modalPresentationController = v109->_modalPresentationController;
        v109->_modalPresentationController = v132;

        -[CSPresentationViewController setPresentationDelegate:](v109->_modalPresentationController, "setPresentationDelegate:", v109);
        objc_msgSend(MEMORY[0x1E0C99E20], "set");
        v134 = objc_claimAutoreleasedReturnValue();
        pendingModalViewControllers = v109->_pendingModalViewControllers;
        v109->_pendingModalViewControllers = (NSMutableSet *)v134;

        v136 = -[CSTimerViewController initWithNibName:bundle:]([CSTimerViewController alloc], "initWithNibName:bundle:", 0, 0);
        timerViewController = v109->_timerViewController;
        v109->_timerViewController = v136;

        -[CSTimerViewController setDelegate:](v109->_timerViewController, "setDelegate:", v109);
        -[CSTimerViewController setEnabled:](v109->_timerViewController, "setEnabled:", 1);
        v138 = objc_alloc_init(CSNotificationDispatcher);
        notificationDispatcher = v109->_notificationDispatcher;
        v109->_notificationDispatcher = v138;

        -[CSNotificationDispatcher setModalDestination:](v109->_notificationDispatcher, "setModalDestination:", v109);
        v140 = v109->_notificationDispatcher;
        objc_msgSend(*p_coverSheetContext, "carPlayStatusProvider");
        v141 = (void *)objc_claimAutoreleasedReturnValue();
        -[CSNotificationDispatcher setCarPlayStatusProvider:](v140, "setCarPlayStatusProvider:", v141);

        -[CSNotificationDispatcher setListDestination:](v109->_notificationDispatcher, "setListDestination:", v10);
        objc_msgSend(v10, "setDispatcher:", v109->_notificationDispatcher);
        objc_msgSend(v10, "combinedListViewController");
        v142 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*p_coverSheetContext, "contentActionProvider");
        v143 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v142, "setContentActionProvider:", v143);

        objc_msgSend(*p_coverSheetContext, "legibilityProvider");
        v144 = objc_claimAutoreleasedReturnValue();
        legibilityProvider = v109->_legibilityProvider;
        v109->_legibilityProvider = (CSLegibilityProviding *)v144;

        -[CSLegibilityProviding setLegibilityProviderDelegate:](v109->_legibilityProvider, "setLegibilityProviderDelegate:", v109);
        objc_msgSend(*p_coverSheetContext, "lockOutStatusProvider");
        v146 = (void *)objc_claimAutoreleasedReturnValue();
        -[CSCoverSheetViewController _setLockOutController:](v109, "_setLockOutController:", v146);

        v147 = objc_alloc_init(CSLayoutStrategy);
        -[CSLayoutStrategy setPersistentLayout:](v147, "setPersistentLayout:", v109);
        -[CSCoverSheetViewController setLayoutStrategy:](v109, "setLayoutStrategy:", v147);
        v148 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
        exemptFromInactiveAppearanceParticipants = v109->_exemptFromInactiveAppearanceParticipants;
        v109->_exemptFromInactiveAppearanceParticipants = v148;

        objc_msgSend(MEMORY[0x1E0CB3690], "weakObjectsHashTable");
        v150 = objc_claimAutoreleasedReturnValue();
        externalAppearanceProviders = v109->_externalAppearanceProviders;
        v109->_externalAppearanceProviders = (NSHashTable *)v150;

        objc_msgSend(MEMORY[0x1E0CB3690], "weakObjectsHashTable");
        v152 = objc_claimAutoreleasedReturnValue();
        externalBehaviorProviders = v109->_externalBehaviorProviders;
        v109->_externalBehaviorProviders = (NSHashTable *)v152;

        objc_msgSend(MEMORY[0x1E0CB3690], "weakObjectsHashTable");
        v154 = objc_claimAutoreleasedReturnValue();
        externalEventHandlers = v109->_externalEventHandlers;
        v109->_externalEventHandlers = (NSHashTable *)v154;

        objc_msgSend(MEMORY[0x1E0CB3690], "weakObjectsHashTable");
        v156 = objc_claimAutoreleasedReturnValue();
        externalLockProviders = v109->_externalLockProviders;
        v109->_externalLockProviders = (NSHashTable *)v156;

        objc_msgSend(MEMORY[0x1E0CB3690], "weakObjectsHashTable");
        v158 = objc_claimAutoreleasedReturnValue();
        externalPresentationProviders = v109->_externalPresentationProviders;
        v109->_externalPresentationProviders = (NSHashTable *)v158;

        objc_msgSend(MEMORY[0x1E0CB3690], "weakObjectsHashTable");
        v160 = objc_claimAutoreleasedReturnValue();
        applicationHosters = v109->_applicationHosters;
        v109->_applicationHosters = (NSHashTable *)v160;

        v162 = -[CSNotificationClearingTrigger initWithDelegate:]([CSNotificationClearingTrigger alloc], "initWithDelegate:", v109);
        notificationClearingTrigger = v109->_notificationClearingTrigger;
        v109->_notificationClearingTrigger = v162;

        objc_msgSend(*p_coverSheetContext, "screenWakeAnimationController");
        v164 = objc_claimAutoreleasedReturnValue();
        screenWakeAnimationController = v109->_screenWakeAnimationController;
        v109->_screenWakeAnimationController = (SBFScreenWakeAnimationControlling *)v164;

        v166 = (SBFLegacyWallpaperWakeAnimator *)objc_alloc_init(MEMORY[0x1E0DA9E30]);
        legacyWallpaperWakeAnimator = v109->_legacyWallpaperWakeAnimator;
        v109->_legacyWallpaperWakeAnimator = v166;

        -[SBFLegacyWallpaperWakeAnimator setWakeState:](v109->_legacyWallpaperWakeAnimator, "setWakeState:", 0);
        v109->_lastAppearState = 0;
        -[CSCoverSheetViewController _preferredContentSizeDidChange](v109, "_preferredContentSizeDidChange");
        -[CSCoverSheetViewController _addStateCaptureHandlers](v109, "_addStateCaptureHandlers");
        objc_msgSend(MEMORY[0x1E0DAC608], "sharedInstance");
        v168 = objc_claimAutoreleasedReturnValue();
        phoneUnlockWithWatchController = v109->_phoneUnlockWithWatchController;
        v109->_phoneUnlockWithWatchController = (SBUIPhoneUnlockWithWatchController *)v168;

        -[SBUIPhoneUnlockWithWatchController setDelegate:](v109->_phoneUnlockWithWatchController, "setDelegate:", v109);
        v170 = v109->_phoneUnlockWithWatchController;
        objc_msgSend(*p_coverSheetContext, "biometricResource");
        v171 = (void *)objc_claimAutoreleasedReturnValue();
        -[SBUIPhoneUnlockWithWatchController setBiometricResource:](v170, "setBiometricResource:", v171);

        -[SBUIPhoneUnlockWithWatchController addObserver:](v109->_phoneUnlockWithWatchController, "addObserver:", v109);
        v172 = objc_alloc_init(CSCoverSheetAppearanceResolver);
        appearanceResolver = v109->_appearanceResolver;
        v109->_appearanceResolver = v172;

        v174 = [CSPosterSwitcherActivationManager alloc];
        objc_msgSend(*p_coverSheetContext, "unlockRequester");
        v175 = (void *)objc_claimAutoreleasedReturnValue();
        v176 = -[CSPosterSwitcherActivationManager initWithSource:delegate:unlockRequester:](v174, "initWithSource:delegate:unlockRequester:", v109, v109, v175);
        posterSwitcherActivationManager = v109->_posterSwitcherActivationManager;
        v109->_posterSwitcherActivationManager = (CSPosterSwitcherActivationManager *)v176;

        objc_msgSend(MEMORY[0x1E0CF96A8], "subjectMonitorRegistry");
        v178 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v178, "addMonitor:subjectMask:subscriptionOptions:", v109, 1, 1);
        v179 = objc_claimAutoreleasedReturnValue();
        appProtectionSubjectMonitorSubscription = v109->_appProtectionSubjectMonitorSubscription;
        v109->_appProtectionSubjectMonitorSubscription = (APSubjectMonitorSubscription *)v179;

        v9 = v183;
        goto LABEL_13;
      }
    }
    v102 = v13->_localAppearance;
    +[CSComponent fullBleedContent](CSComponent, "fullBleedContent");
    v100 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v100, "priority:", 40);
    v103 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v103, "flag:", 1);
    v104 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSAppearance addComponent:](v102, "addComponent:", v104);

    goto LABEL_11;
  }
LABEL_13:

  return v13;
}

uint64_t __96__CSCoverSheetViewController_initWithPageViewControllers_mainPageContentViewController_context___block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_powerStatusChangedToConnectedState:", a2);
}

- (void)dealloc
{
  objc_super v3;

  -[BSAbsoluteMachTimer invalidate](self->_accessoryViewControllerTimer, "invalidate");
  -[BSAbsoluteMachTimer invalidate](self->_accessoryViewControllerChargingTimer, "invalidate");
  -[BSAbsoluteMachTimer invalidate](self->_chargingViewControllerTimer, "invalidate");
  -[APSubjectMonitorSubscription invalidate](self->_appProtectionSubjectMonitorSubscription, "invalidate");
  v3.receiver = self;
  v3.super_class = (Class)CSCoverSheetViewController;
  -[CSCoverSheetViewControllerBase dealloc](&v3, sel_dealloc);
}

- (void)_addStateCaptureHandlers
{
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7[5];
  id v8[5];
  id v9;
  id location;

  objc_initWeak(&location, self);
  v2 = MEMORY[0x1E0C80D38];
  v3 = (void *)MEMORY[0x1E0C809B0];
  v8[1] = (id)MEMORY[0x1E0C809B0];
  v8[2] = (id)3221225472;
  v8[3] = __54__CSCoverSheetViewController__addStateCaptureHandlers__block_invoke;
  v8[4] = &unk_1E8E2DCA8;
  objc_copyWeak(&v9, &location);
  v4 = (id)BSLogAddStateCaptureBlockWithTitle();

  v7[1] = v3;
  v7[2] = (id)3221225472;
  v7[3] = __54__CSCoverSheetViewController__addStateCaptureHandlers__block_invoke_2;
  v7[4] = &unk_1E8E2DCA8;
  objc_copyWeak(v8, &location);
  v5 = (id)BSLogAddStateCaptureBlockWithTitle();

  objc_copyWeak(v7, &location);
  v6 = (id)BSLogAddStateCaptureBlockWithTitle();

  objc_destroyWeak(v7);
  objc_destroyWeak(v8);
  objc_destroyWeak(&v9);
  objc_destroyWeak(&location);
}

id __54__CSCoverSheetViewController__addStateCaptureHandlers__block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "descriptionWithMultilinePrefix:", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id __54__CSCoverSheetViewController__addStateCaptureHandlers__block_invoke_2(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "__currentDesiredAppearanceWithStartIndex:targetIndex:targetAppearance:targetPresentation:modalAppearance:proudLockAppearance:poseidonAppearance:", 0, 0, 0, 0, 0, 0, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "description");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id __54__CSCoverSheetViewController__addStateCaptureHandlers__block_invoke_3(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "activeBehavior");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  NSStringFromCoverSheetScrollingStrategy(objc_msgSend(v2, "scrollingStrategy"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(WeakRetained, "activeBehavior");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  NSStringFromCoverSheetCapability(objc_msgSend(v4, "restrictedCapabilities"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Scrolling Strategy: %@\nRestricted Capabilities: %@"), v3, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (void)setIrisWallpaperPlayer:(id)a3
{
  PBUIIrisWallpaperPlaying *v5;
  PBUIIrisWallpaperPlaying *v6;

  v5 = (PBUIIrisWallpaperPlaying *)a3;
  if (self->_irisWallpaperPlayer != v5)
  {
    v6 = v5;
    objc_storeStrong((id *)&self->_irisWallpaperPlayer, a3);
    -[PBUIIrisWallpaperPlaying setIrisDelegate:](self->_irisWallpaperPlayer, "setIrisDelegate:", self);
    v5 = v6;
  }

}

- (void)setWallpaperGestureRecognizer:(id)a3
{
  UIGestureRecognizer *v5;
  UIGestureRecognizer *v6;

  v5 = (UIGestureRecognizer *)a3;
  if (self->_wallpaperGestureRecognizer != v5)
  {
    v6 = v5;
    objc_storeStrong((id *)&self->_wallpaperGestureRecognizer, a3);
    -[CSCoverSheetViewController _setupWallpaperGesture](self, "_setupWallpaperGesture");
    v5 = v6;
  }

}

- (void)setWallpaperColorProvider:(id)a3
{
  id WeakRetained;
  id obj;

  obj = a3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_wallpaperColorProvider);

  if (WeakRetained != obj)
  {
    objc_storeWeak((id *)&self->_wallpaperColorProvider, obj);
    -[CSMainPageContentViewController setWallpaperColorProvider:](self->_mainPageContentViewController, "setWallpaperColorProvider:", obj);
  }

}

- (void)setCameraPrewarmer:(id)a3
{
  CSCameraPrewarming *v5;
  CSCameraPrewarming *v6;

  v5 = (CSCameraPrewarming *)a3;
  if (self->_cameraPrewarmer != v5)
  {
    v6 = v5;
    objc_storeStrong((id *)&self->_cameraPrewarmer, a3);
    -[CSQuickActionsViewController setCameraPrewarmer:](self->_quickActionsViewController, "setCameraPrewarmer:", self->_cameraPrewarmer);
    v5 = v6;
  }

}

- (void)setEffectiveInterfaceOrientationOverride:(int64_t)a3
{
  id v3;

  if (self->_effectiveInterfaceOrientationOverride != a3)
  {
    self->_effectiveInterfaceOrientationOverride = a3;
    -[CSCoverSheetViewController view](self, "view");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setNeedsLayout");

  }
}

- (SBNotificationDestination)notificationDestination
{
  return (SBNotificationDestination *)self->_notificationDispatcher;
}

- (BOOL)isShowingTodayView
{
  void *v3;
  void *v4;
  double v5;
  BOOL v6;
  unint64_t v7;
  unint64_t value;

  -[CSCoverSheetViewController overlayControllerIfExists](self, "overlayControllerIfExists");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3 && (objc_msgSend(v3, "presentationProgress"), v5 > 0.0))
  {
    v6 = 1;
  }
  else
  {
    v7 = -[CSCoverSheetViewController _indexOfTodayPage](self, "_indexOfTodayPage");
    if (-[CSCoverSheetViewController isTransitioning](self, "isTransitioning"))
      value = (unint64_t)self->_transitionContext.interval.end.value;
    else
      value = self->_lastSettledPageIndex;
    v6 = value == v7;
  }

  return v6;
}

- (int64_t)_passcodePresentationMode
{
  if (!-[CSCoverSheetViewController isShowingTodayView](self, "isShowingTodayView")
    && (!-[CSCoverSheetViewController isShowingModalView](self, "isShowingModalView")
     || -[CSCoverSheetViewController isPasscodeLockVisible](self, "isPasscodeLockVisible")))
  {
    return 0;
  }
  if (-[CSCoverSheetViewController _isRemoteContentPresentedInUnlockMode](self, "_isRemoteContentPresentedInUnlockMode"))
  {
    return 2;
  }
  return 1;
}

- (void)activateTodayViewWithCompletion:(id)a3
{
  void (**v4)(_QWORD);
  void *v5;
  int v6;
  void *v7;
  id *v8;
  void (**v9)(_QWORD);
  unint64_t v10;
  void (**v11)(_QWORD);
  _QWORD v12[4];
  void (**v13)(_QWORD);
  _QWORD v14[4];
  void (**v15)(_QWORD);

  v4 = (void (**)(_QWORD))a3;
  -[CSCoverSheetViewController activeBehavior](self, "activeBehavior");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "areRestrictedCapabilities:", 64);

  if (v4 && v6)
    v4[2](v4);
  -[CSCoverSheetViewController overlayController](self, "overlayController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __62__CSCoverSheetViewController_activateTodayViewWithCompletion___block_invoke;
    v14[3] = &unk_1E8E2DFA8;
    v8 = (id *)&v15;
    v15 = v4;
    v9 = v4;
    objc_msgSend(v7, "setPresentationProgress:interactive:animated:completionHandler:", 0, 1, v14, 1.0);
  }
  else
  {
    v10 = -[CSCoverSheetViewController _indexOfTodayPage](self, "_indexOfTodayPage");
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __62__CSCoverSheetViewController_activateTodayViewWithCompletion___block_invoke_2;
    v12[3] = &unk_1E8E2DFD8;
    v8 = (id *)&v13;
    v13 = v4;
    v11 = v4;
    -[CSCoverSheetViewController activatePage:animated:withCompletion:](self, "activatePage:animated:withCompletion:", v10, 1, v12);
  }

}

uint64_t __62__CSCoverSheetViewController_activateTodayViewWithCompletion___block_invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t __62__CSCoverSheetViewController_activateTodayViewWithCompletion___block_invoke_2(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

- (void)deactivateTodayViewWithCompletion:(id)a3
{
  void (**v4)(_QWORD);
  void *v5;
  void *v6;
  _QWORD v7[4];
  void (**v8)(_QWORD);

  v4 = (void (**)(_QWORD))a3;
  -[CSCoverSheetViewController overlayControllerIfExists](self, "overlayControllerIfExists");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    if (objc_msgSend(v5, "isPresented"))
    {
      v7[0] = MEMORY[0x1E0C809B0];
      v7[1] = 3221225472;
      v7[2] = __64__CSCoverSheetViewController_deactivateTodayViewWithCompletion___block_invoke;
      v7[3] = &unk_1E8E2DFA8;
      v8 = v4;
      objc_msgSend(v6, "setPresentationProgress:interactive:animated:completionHandler:", 0, 1, v7, 0.0);

    }
    else if (v4)
    {
      v4[2](v4);
    }
  }

}

uint64_t __64__CSCoverSheetViewController_deactivateTodayViewWithCompletion___block_invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

- (void)activateMainPageWithCompletion:(id)a3
{
  id v4;

  v4 = a3;
  -[CSCoverSheetViewController activatePage:animated:withCompletion:](self, "activatePage:animated:withCompletion:", -[CSCoverSheetViewController _indexOfMainPage](self, "_indexOfMainPage"), 1, v4);

}

- (void)activateCameraViewAnimated:(BOOL)a3 sendingActions:(id)a4 completion:(id)a5
{
  -[CSCoverSheetViewController activateCameraWithHostableEntity:animated:sendingActions:completion:](self, "activateCameraWithHostableEntity:animated:sendingActions:completion:", 0, a3, a4, a5);
}

- (void)activateCameraWithHostableEntity:(id)a3 animated:(BOOL)a4 sendingActions:(id)a5 completion:(id)a6
{
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  void (**v17)(_QWORD);
  CSCoverSheetViewTransitionSource *currentTransitionSource;
  CSCoverSheetViewTransitionSource *v19;
  int v20;
  CSMagSafeAccessoryViewController *accessoryViewController;
  void *v22;
  id WeakRetained;
  CSCoverSheetViewTransitionSource *v24;
  double v25;
  _QWORD v26[4];
  void (**v27)(_QWORD);
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _QWORD v31[5];
  id v32;
  id v33;
  id v34;
  BOOL v35;

  v10 = a3;
  v11 = a5;
  v12 = a6;
  v13 = MEMORY[0x1E0C809B0];
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3221225472;
  v31[2] = __98__CSCoverSheetViewController_activateCameraWithHostableEntity_animated_sendingActions_completion___block_invoke;
  v31[3] = &unk_1E8E2E028;
  v31[4] = self;
  v14 = v10;
  v32 = v14;
  v35 = a4;
  v15 = v11;
  v33 = v15;
  v16 = v12;
  v34 = v16;
  v17 = (void (**)(_QWORD))MEMORY[0x1D17E1614](v31);
  if (!-[CSCoverSheetViewTransitionSource isTransitioning](self->_currentTransitionSource, "isTransitioning"))goto LABEL_3;
  currentTransitionSource = self->_currentTransitionSource;
  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v19 = (CSCoverSheetViewTransitionSource *)objc_claimAutoreleasedReturnValue();

  if (currentTransitionSource != v19)
    goto LABEL_3;
  v24 = self->_currentTransitionSource;
  if (v24)
  {
    -[CSCoverSheetViewTransitionSource transitionContext](v24, "transitionContext");
    v25 = *((double *)&v29 + 1);
  }
  else
  {
    v29 = 0u;
    v30 = 0u;
    v28 = 0u;
    v25 = 0.0;
  }
  if (v25 == (double)-[CSCoverSheetViewController _indexOfMainPage](self, "_indexOfMainPage"))
    v20 = 1;
  else
LABEL_3:
    v20 = 0;
  accessoryViewController = self->_accessoryViewController;
  if (accessoryViewController)
  {
    -[CSMagSafeAccessoryViewController accessory](accessoryViewController, "accessory");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSCoverSheetViewController _transitionAccessoryViewToVisible:accessory:animated:](self, "_transitionAccessoryViewToVisible:accessory:animated:", 0, v22, 1);

  }
  -[CSCoverSheetViewTransitionSource cancelTransition](self->_currentTransitionSource, "cancelTransition");
  -[CSCoverSheetViewController dismissHomeScreenOverlay](self, "dismissHomeScreenOverlay");
  if (-[CSCoverSheetViewController _isPresentingModalRemoteContent](self, "_isPresentingModalRemoteContent"))
  {
    v26[0] = v13;
    v26[1] = 3221225472;
    v26[2] = __98__CSCoverSheetViewController_activateCameraWithHostableEntity_animated_sendingActions_completion___block_invoke_96;
    v26[3] = &unk_1E8E2DFA8;
    v27 = v17;
    -[CSCoverSheetViewController _dismissRemoteViewControllerForReason:completion:](self, "_dismissRemoteViewControllerForReason:completion:", 5, v26);

  }
  else
  {
    if (self->_spotlightModalViewController)
    {
      WeakRetained = objc_loadWeakRetained((id *)&self->_coverSheetSpotlightPresenter);
      objc_msgSend(WeakRetained, "dismissSpotlightAnimated:", 1);

    }
    else if (v20)
    {
      self->_transitionType = 0;
      -[CSCoverSheetViewController setCurrentTransitionSource:](self, "setCurrentTransitionSource:", 0);
      -[CSCoverSheetViewController activatePage:animated:withCompletion:](self, "activatePage:animated:withCompletion:", -[CSCoverSheetViewController _indexOfMainPage](self, "_indexOfMainPage"), 0, 0);
    }
    v17[2](v17);
  }

}

void __98__CSCoverSheetViewController_activateCameraWithHostableEntity_animated_sendingActions_completion___block_invoke(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;

  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(unsigned __int8 *)(a1 + 64);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __98__CSCoverSheetViewController_activateCameraWithHostableEntity_animated_sendingActions_completion___block_invoke_2;
  v5[3] = &unk_1E8E2E000;
  v4 = *(_QWORD *)(a1 + 48);
  v6 = *(id *)(a1 + 56);
  objc_msgSend(v1, "_activateCameraEntity:animated:actions:completion:", v2, v3, v4, v5);

}

void __98__CSCoverSheetViewController_activateCameraWithHostableEntity_animated_sendingActions_completion___block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  NSObject *v6;
  uint64_t v7;

  v5 = a3;
  if (a2)
  {
    SBLogDashBoard();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      __98__CSCoverSheetViewController_activateCameraWithHostableEntity_animated_sendingActions_completion___block_invoke_2_cold_1();

  }
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
    (*(void (**)(uint64_t, BOOL))(v7 + 16))(v7, a2 == 0);

}

void __98__CSCoverSheetViewController_activateCameraWithHostableEntity_animated_sendingActions_completion___block_invoke_96(uint64_t a1, int a2)
{
  NSObject *v2;
  uint8_t v3[16];

  if (a2)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    SBLogDashBoard();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl(&dword_1D0337000, v2, OS_LOG_TYPE_DEFAULT, "[CSCSVC][RemoteContent] Dismissing remote modal VC failed; not activating camera",
        v3,
        2u);
    }

  }
}

- (void)setCoverSheetIsVisible:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  id WeakRetained;

  v3 = a3;
  if (-[CSCoverSheetViewController isShowingTodayView](self, "isShowingTodayView"))
  {
    -[CSCoverSheetViewController pageViewControllerAtIndex:](self, "pageViewControllerAtIndex:", -[CSCoverSheetViewController _indexOfTodayPage](self, "_indexOfTodayPage"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v3)
      -[CSCoverSheetViewController dismissHomeScreenOverlay](self, "dismissHomeScreenOverlay");
    objc_msgSend(v5, "setDisplayLayoutElementActive:", v3);

  }
  if (v3)
  {
    if (-[CSCoverSheetViewController _isShowingInlineContent](self, "_isShowingInlineContent"))
      -[CSCoverSheetViewController _overrideNotificationDisplayStyleForInlineContent](self, "_overrideNotificationDisplayStyleForInlineContent");
  }
  else
  {
    if (-[CSCoverSheetViewController _isPresentingDismissableRemoteContent](self, "_isPresentingDismissableRemoteContent"))
    {
      -[CSCoverSheetViewController _dismissRemoteViewControllerForReason:completion:](self, "_dismissRemoteViewControllerForReason:completion:", 7, 0);
    }
    if (self->_spotlightModalViewController)
    {
      WeakRetained = objc_loadWeakRetained((id *)&self->_coverSheetSpotlightPresenter);
      objc_msgSend(WeakRetained, "dismissSpotlightAnimated:", 0);

    }
    if (-[CSCoverSheetViewController isPasscodeLockVisible](self, "isPasscodeLockVisible"))
      -[CSCoverSheetViewController setPasscodeLockVisible:animated:](self, "setPasscodeLockVisible:animated:", 0, 0);
  }
}

- (BOOL)isShowingModalView
{
  void *v2;
  char v3;

  -[CSCoverSheetViewController modalPresentationController](self, "modalPresentationController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isPresentingContent");

  return v3;
}

- (BOOL)shouldPresentOrDismissCoverSheetSpotlight
{
  _BOOL4 v2;
  id WeakRetained;

  if (self->_spotlightModalViewController)
  {
    LOBYTE(v2) = 1;
  }
  else if (-[CSCoverSheetViewController isMainPageVisible](self, "isMainPageVisible")
         && !-[CSCoverSheetViewController isShowingModalView](self, "isShowingModalView"))
  {
    WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
    if ((objc_msgSend(WeakRetained, "coverSheetViewControllerHasSecureApp:", self) & 1) != 0
      || -[CSCoverSheetViewController isPresentingNotificationInLongLook](self, "isPresentingNotificationInLongLook"))
    {
      LOBYTE(v2) = 0;
    }
    else
    {
      v2 = !-[CSCoverSheetViewController _isSpotlightBehaviorRestricted](self, "_isSpotlightBehaviorRestricted");
    }

  }
  else
  {
    LOBYTE(v2) = 0;
  }
  return v2;
}

- (void)presentOrDismissCoverSheetSpotlightAnimated:(BOOL)a3
{
  _BOOL8 v3;
  id WeakRetained;
  id v6;

  v3 = a3;
  if (-[CSCoverSheetViewController shouldPresentOrDismissCoverSheetSpotlight](self, "shouldPresentOrDismissCoverSheetSpotlight"))
  {
    WeakRetained = objc_loadWeakRetained((id *)&self->_coverSheetSpotlightPresenter);
    v6 = WeakRetained;
    if (self->_spotlightModalViewController)
      objc_msgSend(WeakRetained, "dismissSpotlightAnimated:", v3);
    else
      objc_msgSend(WeakRetained, "presentSpotlightAnimated:", v3);

  }
}

- (void)updateScaleViewWithScale:(double)a3 withDuration:(double)a4
{
  CSAppearance *localAppearance;
  void *v6;
  CSAppearance *v7;
  void *v8;
  CSAppearance *v9;
  void *v10;
  CSAppearance *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  CSAppearance *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  CSAppearance *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v33 = 0u;
  v34 = 0u;
  v32 = 0u;
  CSComponentTransitionInputsMake(0, (uint64_t)&v32, a4, *MEMORY[0x1E0C9D538], *(double *)(MEMORY[0x1E0C9D538] + 8), a3, 0.0);
  localAppearance = self->_localAppearance;
  -[CSAppearance componentForType:identifier:](localAppearance, "componentForType:identifier:", 1, CFSTR("Spotlight"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSAppearance removeComponent:](localAppearance, "removeComponent:", v6);

  v7 = self->_localAppearance;
  -[CSAppearance componentForType:identifier:](v7, "componentForType:identifier:", 11, CFSTR("Spotlight"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSAppearance removeComponent:](v7, "removeComponent:", v8);

  v9 = self->_localAppearance;
  -[CSAppearance componentForType:identifier:](v9, "componentForType:identifier:", 15, CFSTR("Spotlight"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSAppearance removeComponent:](v9, "removeComponent:", v10);

  v11 = self->_localAppearance;
  v12 = (void *)objc_opt_new();
  objc_msgSend(v12, "identifier:", CFSTR("Spotlight"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "priority:", 40);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "transitionModifiers:", 16);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = v32;
  v30 = v33;
  v31 = v34;
  objc_msgSend(v15, "transitionInputs:", &v29);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSAppearance addComponent:](v11, "addComponent:", v16);

  v17 = self->_localAppearance;
  v18 = (void *)objc_opt_new();
  objc_msgSend(v18, "identifier:", CFSTR("Spotlight"));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "priority:", 40);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "transitionModifiers:", 16);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = v32;
  v30 = v33;
  v31 = v34;
  objc_msgSend(v21, "transitionInputs:", &v29);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSAppearance addComponent:](v17, "addComponent:", v22);

  v23 = self->_localAppearance;
  v24 = (void *)objc_opt_new();
  objc_msgSend(v24, "identifier:", CFSTR("Spotlight"));
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "priority:", 40);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "transitionModifiers:", 16);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = v32;
  v30 = v33;
  v31 = v34;
  objc_msgSend(v27, "transitionInputs:", &v29);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSAppearance addComponent:](v23, "addComponent:", v28);

  -[CSCoverSheetViewController _updateActiveAppearanceForReason:](self, "_updateActiveAppearanceForReason:", CFSTR("Spotlight"));
}

- (void)noteWillPresentForUserGesture
{
  NSObject *v3;
  NSObject *v4;
  _BOOL4 v5;
  void *v6;
  void *v7;
  int v8;
  _BOOL4 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  -[CSCoverSheetViewController setPasscodeLockVisible:animated:](self, "setPasscodeLockVisible:animated:", 0, 1);
  -[CSCoverSheetViewController _setDidDismissSinceScreenOn:](self, "_setDidDismissSinceScreenOn:", 1);
  -[CSFixedFooterViewController updateCallToActionForReversingInteractiveTransition](self->_fixedFooterViewController, "updateCallToActionForReversingInteractiveTransition");
  SBLogDashBoard();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 67109120;
    v9 = -[CSCoverSheetViewController _isShowingChargingModal](self, "_isShowingChargingModal");
    _os_log_impl(&dword_1D0337000, v3, OS_LOG_TYPE_DEFAULT, "[Charge UI][User Gesture] visible NO, showBattery NO – isAlreadyShowingChargingModal: %d", (uint8_t *)&v8, 8u);
  }

  -[CSCoverSheetViewController _transitionChargingViewToVisible:showBattery:animated:](self, "_transitionChargingViewToVisible:showBattery:animated:", 0, 0, 1);
  SBLogDashBoard();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = -[CSCoverSheetViewController _isShowingChargingModal](self, "_isShowingChargingModal");
    v8 = 67109120;
    v9 = v5;
    _os_log_impl(&dword_1D0337000, v4, OS_LOG_TYPE_DEFAULT, "[Charge UI][User Gesture] – endedShowingChargingModal: %d", (uint8_t *)&v8, 8u);
  }

  -[SBFLockScreenDateViewController dateViewIfExists](self->_dateViewController, "dateViewIfExists");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setAlpha:", 1.0);

  -[CSCoverSheetViewController _addOrRemoveRemoteContentViewIfNecessaryMaintainingState:](self, "_addOrRemoveRemoteContentViewIfNecessaryMaintainingState:", 1);
  +[CSEvent eventWithType:](CSEvent, "eventWithType:", 36);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController _handleEvent:](self, "_handleEvent:", v7);

}

- (void)setLayoutStrategy:(id)a3
{
  CSLayoutStrategy *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = (CSLayoutStrategy *)a3;
  if (self->_layoutStrategy != v5)
  {
    objc_storeStrong((id *)&self->_layoutStrategy, a3);
    -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setLayoutStrategy:", v5);

    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    -[CSCoverSheetViewController pageViewControllers](self, "pageViewControllers", 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v13;
      do
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v13 != v10)
            objc_enumerationMutation(v7);
          objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * i), "setLayoutStrategy:", v5);
        }
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      }
      while (v9);
    }

  }
}

- (int64_t)effectiveInterfaceOrientation
{
  int64_t result;
  void *v4;
  uint64_t v5;

  if (__sb__runningInSpringBoard())
  {
    if (SBFEffectiveDeviceClass() != 2)
      goto LABEL_3;
    return 0;
  }
  objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "userInterfaceIdiom");

  if (v5 == 1)
    return 0;
LABEL_3:
  result = -[CSCoverSheetViewController effectiveInterfaceOrientationOverride](self, "effectiveInterfaceOrientationOverride");
  if ((unint64_t)result <= 1)
    return 1;
  return result;
}

- (void)resetMainPageContentOffset
{
  id v2;

  -[CSMainPageContentViewController combinedListViewController](self->_mainPageContentViewController, "combinedListViewController");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "resetContentOffset");

}

- (void)setPartiallyOnScreen:(BOOL)a3
{
  if (self->_partiallyOnScreen != a3)
  {
    self->_partiallyOnScreen = a3;
    -[CSCoverSheetViewController setNeedsUpdateOfSupportedInterfaceOrientations](self, "setNeedsUpdateOfSupportedInterfaceOrientations");
  }
}

- (BOOL)isAlternateDateEnabled
{
  return -[SBFLockScreenDateViewController isAlternateDateEnabled](self->_dateViewController, "isAlternateDateEnabled");
}

- (void)setAlternateDateEnabled:(BOOL)a3
{
  -[SBFLockScreenDateViewController setAlternateDateEnabled:](self->_dateViewController, "setAlternateDateEnabled:", a3);
}

- (void)updateFont:(id)a3 vibrancyConfiguration:(id)a4 numberingSystem:(id)a5 contentStyle:(id)a6
{
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;

  v19 = a3;
  v10 = a4;
  v11 = a5;
  v12 = a6;
  if (_os_feature_enabled_impl())
  {
    -[CSCoverSheetViewController setVibrancyConfiguration:](self, "setVibrancyConfiguration:", v10);
    -[SBFLockScreenDateViewController dateView](self->_dateViewController, "dateView");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setCustomTimeFont:", v19);

    -[SBFLockScreenDateViewController dateView](self->_dateViewController, "dateView");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setCustomTimeNumberingSystem:", v11);

    -[SBFLockScreenDateViewController dateView](self->_dateViewController, "dateView");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "setContentStyle:", v12);

    -[CSWidgetGridViewController setContentStyle:](self->_sidebarComplicationContainerViewController, "setContentStyle:", v12);
  }
  else
  {
    -[CSCoverSheetViewController setVibrancyConfiguration:](self, "setVibrancyConfiguration:", 0);
    -[SBFLockScreenDateViewController dateView](self->_dateViewController, "dateView");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setCustomTimeFont:", 0);

    -[SBFLockScreenDateViewController dateView](self->_dateViewController, "dateView");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "setTextColor:", 0);

    -[SBFLockScreenDateViewController dateView](self->_dateViewController, "dateView");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "setCustomTimeNumberingSystem:", 0);

  }
}

- (void)_updateVibrancy
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _BOOL4 IsDarkAffectingLegibility;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  double v16;
  double v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  id v26;

  -[CSCoverSheetViewController vibrancyConfigurationOverride](self, "vibrancyConfigurationOverride");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    v5 = v3;
  }
  else
  {
    -[CSCoverSheetViewController vibrancyConfiguration](self, "vibrancyConfiguration");
    v5 = (id)objc_claimAutoreleasedReturnValue();
  }
  v25 = v5;

  -[CSCoverSheetViewController effectiveVibrancyConfiguration](self, "effectiveVibrancyConfiguration");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "componentForType:identifier:", 19, CFSTR("(active)"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v25, "backgroundType") == 1)
  {
    if (v8)
    {
      objc_msgSend(v8, "value");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      IsDarkAffectingLegibility = CSBackgroundStyleIsDarkAffectingLegibility(objc_msgSend(v9, "integerValue"));

      if (IsDarkAffectingLegibility)
      {
        v11 = objc_msgSend(v25, "copyWithWithBackgroundType:", 0);

        v25 = (id)v11;
      }
    }
  }
  -[CSCoverSheetViewController traitCollection](self, "traitCollection");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "_backlightLuminance");

  if (v13 == 1)
  {
    objc_msgSend(v25, "cs_adjustedForReducedBacklight");
    v14 = objc_claimAutoreleasedReturnValue();

    v15 = (id)v14;
  }
  else
  {
    v15 = v25;
  }
  v26 = v15;
  if ((BSEqualObjects() & 1) != 0
    || !-[CSCoverSheetViewTransitionSource isTransitioning](self->_currentTransitionSource, "isTransitioning"))
  {
    v24 = v26;
  }
  else
  {
    objc_msgSend(v8, "transitionProgress");
    v17 = v16;
    v18 = objc_alloc(MEMORY[0x1E0D01958]);
    v19 = objc_msgSend(v6, "effectType");
    v20 = objc_msgSend(v6, "backgroundType");
    objc_msgSend(v6, "color");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "groupName");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "alternativeVibrancyEffectLUT");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = (id)objc_msgSend(v18, "initWithEffectType:backgroundType:color:groupName:blendConfiguration:blendAmount:alternativeVibrancyEffectLUT:", v19, v20, v21, v22, v26, v23, v17);

  }
  -[CSCoverSheetViewController setEffectiveVibrancyConfiguration:](self, "setEffectiveVibrancyConfiguration:", v24);

}

- (void)setVibrancyConfiguration:(id)a3
{
  id v4;
  objc_class *v5;
  void *v6;
  BSUIVibrancyConfiguration *v7;
  BSUIVibrancyConfiguration *vibrancyConfiguration;
  id v9;

  v4 = a3;
  v5 = (objc_class *)objc_opt_class();
  NSStringFromClass(v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (id)objc_msgSend(v4, "copyWithGroupName:", v6);

  if ((BSEqualObjects() & 1) == 0)
  {
    v7 = (BSUIVibrancyConfiguration *)objc_msgSend(v9, "copy");
    vibrancyConfiguration = self->_vibrancyConfiguration;
    self->_vibrancyConfiguration = v7;

    -[CSCoverSheetViewController _updateVibrancy](self, "_updateVibrancy");
  }

}

- (void)setVibrancyConfigurationOverride:(id)a3
{
  id v4;
  objc_class *v5;
  void *v6;
  BSUIVibrancyConfiguration *v7;
  BSUIVibrancyConfiguration *vibrancyConfigurationOverride;
  id v9;

  v4 = a3;
  v5 = (objc_class *)objc_opt_class();
  NSStringFromClass(v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (id)objc_msgSend(v4, "copyWithGroupName:", v6);

  if ((BSEqualObjects() & 1) == 0)
  {
    v7 = (BSUIVibrancyConfiguration *)objc_msgSend(v9, "copy");
    vibrancyConfigurationOverride = self->_vibrancyConfigurationOverride;
    self->_vibrancyConfigurationOverride = v7;

    -[CSCoverSheetViewController _updateVibrancy](self, "_updateVibrancy");
  }

}

- (void)setEffectiveVibrancyConfiguration:(id)a3
{
  BSUIVibrancyConfiguration *v4;
  BSUIVibrancyConfiguration *effectiveVibrancyConfiguration;
  void *v6;
  id v7;

  v7 = a3;
  if ((BSEqualObjects() & 1) == 0)
  {
    v4 = (BSUIVibrancyConfiguration *)objc_msgSend(v7, "copy");
    effectiveVibrancyConfiguration = self->_effectiveVibrancyConfiguration;
    self->_effectiveVibrancyConfiguration = v4;

    -[SBFLockScreenDateViewController dateView](self->_dateViewController, "dateView");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setVibrancyConfiguration:", self->_effectiveVibrancyConfiguration);

    -[CSWidgetGridViewController setVibrancyConfiguration:](self->_sidebarComplicationContainerViewController, "setVibrancyConfiguration:", self->_effectiveVibrancyConfiguration);
    -[CSPosterSwitcherViewController setVibrancyConfiguration:](self->_posterSwitcherViewController, "setVibrancyConfiguration:", self->_effectiveVibrancyConfiguration);
  }

}

- (void)updateLeadingTopButtonFrame:(CGRect)a3 trailingTopButtonFrame:(CGRect)a4
{
  -[CSPosterSwitcherViewController setLeadingTopButtonFrame:trailingTopButtonFrame:](self->_posterSwitcherViewController, "setLeadingTopButtonFrame:trailingTopButtonFrame:", a3.origin.x, a3.origin.y, a3.size.width, a3.size.height, a4.origin.x, a4.origin.y, a4.size.width, a4.size.height);
}

- (void)updateFloatingLayerOrdering
{
  BSInvalidatable *floatingLayerView;
  BSInvalidatable *v4;

  floatingLayerView = self->_floatingLayerView;
  if (floatingLayerView)
  {
    -[BSInvalidatable invalidate](floatingLayerView, "invalidate");
    -[BSInvalidatable removeFromSuperview](self->_floatingLayerView, "removeFromSuperview");
    v4 = self->_floatingLayerView;
    self->_floatingLayerView = 0;

    -[CSCoverSheetViewController _updateWallpaperFloatingLayerContainerView](self, "_updateWallpaperFloatingLayerContainerView");
  }
}

- (void)handleReachabilityAnimationWillBegin
{
  int v3;
  void *v4;
  int IsZero;
  BOOL v6;
  CSAppearance *localAppearance;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  CSAppearance *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  v3 = -[CSCoverSheetViewController _appearState](self, "_appearState");
  -[CSCoverSheetContextProviding reachabilityController](self->_coverSheetContext, "reachabilityController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "effectiveReachabilityYOffset");
  IsZero = BSFloatIsZero();

  if (IsZero)
    v6 = v3 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    localAppearance = self->_localAppearance;
    v8 = (void *)objc_opt_new();
    objc_msgSend(v8, "identifier:", CFSTR("ReachabilityOverride"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "priority:", 20);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "hidden:", 0);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSAppearance addComponent:](localAppearance, "addComponent:", v11);

    v12 = self->_localAppearance;
    v13 = (void *)objc_opt_new();
    objc_msgSend(v13, "identifier:", CFSTR("ReachabilityOverride"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "priority:", 20);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "shouldMatchMove:", 0);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSAppearance addComponent:](v12, "addComponent:", v16);

    -[CSCoverSheetViewController _updateActiveAppearanceForReason:](self, "_updateActiveAppearanceForReason:", CFSTR("ReachabilityOverride"));
  }
}

- (void)handleReachabilityAnimationDidEnd
{
  void *v3;
  void *v4;
  int IsZero;

  -[CSAppearance componentForType:identifier:](self->_localAppearance, "componentForType:identifier:", 6, CFSTR("ReachabilityOverride"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    -[CSCoverSheetContextProviding reachabilityController](self->_coverSheetContext, "reachabilityController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "effectiveReachabilityYOffset");
    IsZero = BSFloatIsZero();

    if (IsZero)
    {
      -[CSAppearance removeAllComponentsWithIdentifier:](self->_localAppearance, "removeAllComponentsWithIdentifier:", CFSTR("ReachabilityOverride"));
      -[CSCoverSheetViewController _updateActiveAppearanceForReason:](self, "_updateActiveAppearanceForReason:", CFSTR("ReachabilityOverride"));
    }
  }
}

- (void)startObservingAmbientPresentationForController:(id)a3
{
  objc_msgSend(a3, "addObserver:", self);
}

- (void)requestIdleTimerResetForPoster
{
  _BOOL4 v3;
  id v4;

  -[CSCoverSheetContextProviding authenticationStatusProvider](self->_coverSheetContext, "authenticationStatusProvider");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "hasPasscodeSet"))
  {
    v3 = -[CSCoverSheetViewController isAuthenticated](self, "isAuthenticated");

    if (!v3)
      return;
    +[CSAction actionWithType:](CSAction, "actionWithType:", 3);
    v4 = (id)objc_claimAutoreleasedReturnValue();
    -[CSCoverSheetViewController handleAction:fromSender:](self, "handleAction:fromSender:");
  }

}

- (void)setQuickActionsConfiguration:(id)a3
{
  -[CSQuickActionsViewController setQuickActionsConfiguration:](self->_quickActionsViewController, "setQuickActionsConfiguration:", a3);
}

- (CSQuickActionsConfiguration)quickActionsConfiguration
{
  return -[CSQuickActionsViewController quickActionsConfiguration](self->_quickActionsViewController, "quickActionsConfiguration");
}

- (void)_setLastSettledPageIndex:(unint64_t)a3
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  self->_lastSettledPageIndex = a3;
  -[CSCoverSheetViewController pageViewControllerAtIndex:](self, "pageViewControllerAtIndex:");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController mainPageContentViewController](self, "mainPageContentViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v6 = (void *)-[NSHashTable copy](self->_observers, "copy", 0);
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v13;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v13 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * v10);
        if ((objc_opt_respondsToSelector() & 1) != 0)
          objc_msgSend(v11, "coverSheetViewControllerDidSettleOnPage:mainPage:", self, v4 == v5);
        ++v10;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v8);
  }

}

- (void)registerExternalAppearanceProvider:(id)a3
{
  NSHashTable *externalAppearanceProviders;
  id v5;
  id v6;

  externalAppearanceProviders = self->_externalAppearanceProviders;
  v5 = a3;
  -[NSHashTable addObject:](externalAppearanceProviders, "addObject:", v5);
  objc_msgSend(v5, "coverSheetIdentifier");
  v6 = (id)objc_claimAutoreleasedReturnValue();

  -[CSCoverSheetViewController _updateActiveAppearanceForReason:](self, "_updateActiveAppearanceForReason:", v6);
}

- (void)unregisterExternalAppearanceProvider:(id)a3
{
  NSHashTable *externalAppearanceProviders;
  id v5;
  id v6;

  externalAppearanceProviders = self->_externalAppearanceProviders;
  v5 = a3;
  -[NSHashTable removeObject:](externalAppearanceProviders, "removeObject:", v5);
  objc_msgSend(v5, "coverSheetIdentifier");
  v6 = (id)objc_claimAutoreleasedReturnValue();

  -[CSCoverSheetViewController _updateActiveAppearanceForReason:](self, "_updateActiveAppearanceForReason:", v6);
}

- (void)registerExternalBehaviorProvider:(id)a3
{
  NSHashTable *externalBehaviorProviders;
  id v5;
  id v6;

  externalBehaviorProviders = self->_externalBehaviorProviders;
  v5 = a3;
  -[NSHashTable addObject:](externalBehaviorProviders, "addObject:", v5);
  objc_msgSend(v5, "coverSheetIdentifier");
  v6 = (id)objc_claimAutoreleasedReturnValue();

  -[CSCoverSheetViewController _updateActiveBehaviorsForReason:](self, "_updateActiveBehaviorsForReason:", v6);
}

- (void)unregisterExternalBehaviorProvider:(id)a3
{
  NSHashTable *externalBehaviorProviders;
  id v5;
  id v6;

  externalBehaviorProviders = self->_externalBehaviorProviders;
  v5 = a3;
  -[NSHashTable removeObject:](externalBehaviorProviders, "removeObject:", v5);
  objc_msgSend(v5, "coverSheetIdentifier");
  v6 = (id)objc_claimAutoreleasedReturnValue();

  -[CSCoverSheetViewController _updateActiveBehaviorsForReason:](self, "_updateActiveBehaviorsForReason:", v6);
}

- (void)registerExternalEventHandler:(id)a3
{
  -[NSHashTable addObject:](self->_externalEventHandlers, "addObject:", a3);
}

- (void)unregisterExternalEventHandler:(id)a3
{
  -[NSHashTable removeObject:](self->_externalEventHandlers, "removeObject:", a3);
}

- (void)registerExternalLockProvider:(id)a3
{
  -[NSHashTable addObject:](self->_externalLockProviders, "addObject:", a3);
}

- (void)externalLockProviderStateChanged:(id)a3
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v4 = (void *)-[NSHashTable copy](self->_observers, "copy", a3, 0);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v11;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v11 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * v8);
        if ((objc_opt_respondsToSelector() & 1) != 0)
          objc_msgSend(v9, "coverSheetViewControllerExternalLockProviderStateDidChange:", self);
        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v6);
  }

}

- (void)unregisterExternalLockProvider:(id)a3
{
  -[NSHashTable removeObject:](self->_externalLockProviders, "removeObject:", a3);
}

- (void)registerExternalPresentationProvider:(id)a3
{
  NSHashTable *externalPresentationProviders;
  id v5;
  void *v6;
  id v7;

  externalPresentationProviders = self->_externalPresentationProviders;
  v5 = a3;
  -[NSHashTable addObject:](externalPresentationProviders, "addObject:", v5);
  -[CSCoverSheetViewController visiblePageViewController](self, "visiblePageViewController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "updatePresentationAnimated:", 1);

  objc_msgSend(v5, "coverSheetIdentifier");
  v7 = (id)objc_claimAutoreleasedReturnValue();

  -[CSCoverSheetViewController _updateActiveAppearanceForReason:](self, "_updateActiveAppearanceForReason:", v7);
}

- (void)externalPresentationProviderPresentationChanged:(id)a3
{
  id v4;
  void *v5;
  id v6;

  v4 = a3;
  -[CSCoverSheetViewController visiblePageViewController](self, "visiblePageViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "updatePresentationAnimated:", 1);

  objc_msgSend(v4, "coverSheetIdentifier");
  v6 = (id)objc_claimAutoreleasedReturnValue();

  -[CSCoverSheetViewController _updateActiveAppearanceForReason:](self, "_updateActiveAppearanceForReason:", v6);
}

- (void)unregisterExternalPresentationProvider:(id)a3
{
  NSHashTable *externalPresentationProviders;
  id v5;
  void *v6;
  id v7;

  externalPresentationProviders = self->_externalPresentationProviders;
  v5 = a3;
  -[NSHashTable removeObject:](externalPresentationProviders, "removeObject:", v5);
  -[CSCoverSheetViewController visiblePageViewController](self, "visiblePageViewController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "updatePresentationAnimated:", 1);

  objc_msgSend(v5, "coverSheetIdentifier");
  v7 = (id)objc_claimAutoreleasedReturnValue();

  -[CSCoverSheetViewController _updateActiveAppearanceForReason:](self, "_updateActiveAppearanceForReason:", v7);
}

- (void)addCoverSheetObserver:(id)a3
{
  NSHashTable *observers;
  NSHashTable *v5;
  NSHashTable *v6;
  id v7;

  v7 = a3;
  if (!-[NSHashTable containsObject:](self->_observers, "containsObject:"))
  {
    observers = self->_observers;
    if (!observers)
    {
      objc_msgSend(MEMORY[0x1E0CB3690], "weakObjectsHashTable");
      v5 = (NSHashTable *)objc_claimAutoreleasedReturnValue();
      v6 = self->_observers;
      self->_observers = v5;

      observers = self->_observers;
    }
    -[NSHashTable addObject:](observers, "addObject:", v7);
  }

}

- (void)removeCoverSheetObserver:(id)a3
{
  id v4;

  v4 = a3;
  if (-[NSHashTable containsObject:](self->_observers, "containsObject:"))
    -[NSHashTable removeObject:](self->_observers, "removeObject:", v4);

}

- (void)loadView
{
  CSCoverSheetView *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  CSCoverSheetView *v9;

  v3 = [CSCoverSheetView alloc];
  objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "bounds");
  v9 = -[CSCoverSheetView initWithFrame:](v3, "initWithFrame:");

  -[CSCoverSheetView setAutoresizingMask:](v9, "setAutoresizingMask:", 18);
  -[CSCoverSheetView setAutoresizesSubviews:](v9, "setAutoresizesSubviews:", 1);
  -[CSCoverSheetView layer](v9, "layer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setHitTestsAsOpaque:", 1);

  -[CSCoverSheetView setLayoutStrategy:](v9, "setLayoutStrategy:", self->_layoutStrategy);
  -[CSCoverSheetView _setLockScreenDefaults:](v9, "_setLockScreenDefaults:", self->_lockScreenDefaults);
  -[CSCoverSheetContextProviding homeScreenOverlayProvider](self->_coverSheetContext, "homeScreenOverlayProvider");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v4) = objc_msgSend(v6, "wantsHomeScreenOverlay");

  if ((_DWORD)v4)
  {
    -[CSCoverSheetView scrollView](v9, "scrollView");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "panGestureRecognizer");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "addTarget:action:", self, sel_scrollPanGestureDidUpdate_);

    -[CSCoverSheetView setIgnoresOverscrollOnMainPage:](v9, "setIgnoresOverscrollOnMainPage:", 1);
  }
  -[CSCoverSheetViewController setActiveAppearance:](self, "setActiveAppearance:", 0);
  -[CSCoverSheetViewController setView:](self, "setView:", v9);
  -[CSCoverSheetView setDelegate:](v9, "setDelegate:", self);

}

- (void)viewDidLoad
{
  __CFNotificationCenter *DarwinNotifyCenter;
  void *v4;
  CSComplicationManager *v5;
  void *v6;
  id WeakRetained;
  CSComplicationManager *v8;
  CSComplicationManager *complicationManager;
  void *v10;
  uint64_t v11;
  CSWidgetGridViewController *v12;
  CSComplicationManager *v13;
  void *v14;
  CSWidgetGridViewController *v15;
  CSWidgetGridViewController *sidebarComplicationContainerViewController;
  CSWidgetGridViewController *v17;
  CSComplicationManager *v18;
  void *v19;
  CSWidgetGridViewController *v20;
  CSWidgetGridViewController *complicationContainerViewController;
  CSComplicationManager *v22;
  CSComplicationManager *v23;
  CSComplicationManager *v24;
  SBFLockScreenDateViewController *v25;
  SBFLockScreenDateViewController *dateViewController;
  SBFLockScreenDateViewController *v27;
  void *v28;
  SBFLockScreenDateViewController *v29;
  void *v30;
  void *v31;
  SBFLockScreenDateViewController *v32;
  id v33;
  NSDate *defaultsDerivedOverrideDate;
  CSFixedFooterViewController *v35;
  CSFixedFooterViewController *fixedFooterViewController;
  CSFixedFooterViewController *v37;
  void *v38;
  CSFixedFooterViewController *v39;
  id v40;
  void *v41;
  _BOOL4 v42;
  CSWidgetGridViewController *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  CSTeachableMomentsContainerViewController *v47;
  CSTeachableMomentsContainerViewController *teachableMomentsContainerViewController;
  CSTeachableMomentsContainerViewController *v49;
  CSUserPresenceMonitor *v50;
  CSUserPresenceMonitor *userPresenceMonitor;
  CSFaceOcclusionMonitor *v52;
  CSFaceOcclusionMonitor *faceOcclusionMonitor;
  CSQuickActionsViewController *v54;
  SBLockScreenDefaults *lockScreenDefaults;
  void *v56;
  CSQuickActionsViewController *v57;
  CSQuickActionsViewController *quickActionsViewController;
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  char v63;
  CSProudLockViewController *v64;
  CSProudLockViewController *proudLockViewController;
  CSProudLockViewController *v66;
  void *v67;
  CSProudLockViewController *v68;
  void *v69;
  CSProudLockViewController *v70;
  void *v71;
  CSPoseidonViewController *v72;
  CSPoseidonViewController *poseidonViewController;
  CSPoseidonViewController *v74;
  void *v75;
  CSPoseidonViewController *v76;
  void *v77;
  CSPoseidonViewController *v78;
  id v79;
  void *v80;
  void *v81;
  void *v82;
  id v83;
  void *v84;
  _QWORD v86[4];
  id v87;
  CSCoverSheetViewController *v88;
  _QWORD v89[5];
  id v90;
  char v91;
  _QWORD v92[4];
  id v93;
  CSCoverSheetViewController *v94;
  _QWORD v95[4];
  id v96;
  CSCoverSheetViewController *v97;
  _QWORD v98[4];
  id v99;
  CSCoverSheetViewController *v100;
  _QWORD v101[4];
  id v102;
  CSCoverSheetViewController *v103;
  _QWORD v104[4];
  id v105;
  _QWORD v106[4];
  id v107;
  _QWORD v108[4];
  id v109;
  id location;
  objc_super v111;
  _QWORD v112[3];

  v112[1] = *MEMORY[0x1E0C80C00];
  v111.receiver = self;
  v111.super_class = (Class)CSCoverSheetViewController;
  -[CSCoverSheetViewControllerBase viewDidLoad](&v111, sel_viewDidLoad);
  CFPreferencesSetAppValue(CFSTR("SBIconVisibility"), MEMORY[0x1E0C9AAB0], CFSTR("com.apple.springboard.SensitiveUIModule"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.springboard.appIconVisibilityPreferencesChanged"), 0, 0, 1u);
  -[CSCoverSheetViewTransitionSource cancelTransition](self->_currentTransitionSource, "cancelTransition");
  self->_transitionType = 0;
  -[CSCoverSheetViewController setCurrentTransitionSource:](self, "setCurrentTransitionSource:", 0);
  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (-[CSCoverSheetViewController _shouldLoadComplications](self, "_shouldLoadComplications"))
  {
    v5 = [CSComplicationManager alloc];
    -[CSCoverSheetContextProviding applicationInformer](self->_coverSheetContext, "applicationInformer");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    WeakRetained = objc_loadWeakRetained((id *)&self->_widgetURLHandler);
    v8 = -[CSComplicationManager initWithApplicationInformer:urlHandler:](v5, "initWithApplicationInformer:urlHandler:", v6, WeakRetained);
    complicationManager = self->_complicationManager;
    self->_complicationManager = v8;

    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "userInterfaceIdiom");

    if ((v11 & 0xFFFFFFFFFFFFFFFBLL) == 1 && _os_feature_enabled_impl())
    {
      v12 = [CSWidgetGridViewController alloc];
      v13 = self->_complicationManager;
      -[CSCoverSheetContextProviding applicationInformer](self->_coverSheetContext, "applicationInformer");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = -[CSWidgetGridViewController initWithComplicationManager:type:applicationInformer:](v12, "initWithComplicationManager:type:applicationInformer:", v13, 1, v14);
      sidebarComplicationContainerViewController = self->_sidebarComplicationContainerViewController;
      self->_sidebarComplicationContainerViewController = v15;

      -[CSWidgetGridViewController setDelegate:](self->_sidebarComplicationContainerViewController, "setDelegate:", self);
    }
    v17 = [CSWidgetGridViewController alloc];
    v18 = self->_complicationManager;
    -[CSCoverSheetContextProviding applicationInformer](self->_coverSheetContext, "applicationInformer");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = -[CSWidgetGridViewController initWithComplicationManager:type:applicationInformer:](v17, "initWithComplicationManager:type:applicationInformer:", v18, 0, v19);
    complicationContainerViewController = self->_complicationContainerViewController;
    self->_complicationContainerViewController = v20;

    -[CSWidgetGridViewController setDelegate:](self->_complicationContainerViewController, "setDelegate:", self);
    objc_initWeak(&location, self);
    v22 = self->_complicationManager;
    v108[0] = MEMORY[0x1E0C809B0];
    v108[1] = 3221225472;
    v108[2] = __41__CSCoverSheetViewController_viewDidLoad__block_invoke;
    v108[3] = &unk_1E8E2E090;
    objc_copyWeak(&v109, &location);
    -[CSComplicationManager setOnWidgetUpdate:](v22, "setOnWidgetUpdate:", v108);
    v23 = self->_complicationManager;
    v106[0] = MEMORY[0x1E0C809B0];
    v106[1] = 3221225472;
    v106[2] = __41__CSCoverSheetViewController_viewDidLoad__block_invoke_2;
    v106[3] = &unk_1E8E2E090;
    objc_copyWeak(&v107, &location);
    -[CSComplicationManager setOnSidebarWidgetUpdate:](v23, "setOnSidebarWidgetUpdate:", v106);
    v24 = self->_complicationManager;
    v104[0] = MEMORY[0x1E0C809B0];
    v104[1] = 3221225472;
    v104[2] = __41__CSCoverSheetViewController_viewDidLoad__block_invoke_2_133;
    v104[3] = &unk_1E8E2E0D8;
    objc_copyWeak(&v105, &location);
    -[CSComplicationManager setOnInlineComplicationUpdate:](v24, "setOnInlineComplicationUpdate:", v104);
    objc_destroyWeak(&v105);
    objc_destroyWeak(&v107);
    objc_destroyWeak(&v109);
    objc_destroyWeak(&location);
  }
  if (self->_dateViewController)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v84, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("CSCoverSheetViewController.m"), 1345, CFSTR("We never cleaned up the old _dateViewController"));

  }
  v25 = (SBFLockScreenDateViewController *)objc_alloc_init(MEMORY[0x1E0DA9E60]);
  dateViewController = self->_dateViewController;
  self->_dateViewController = v25;

  -[SBFLockScreenDateViewController setShouldApplyVibrancyToComplications:](self->_dateViewController, "setShouldApplyVibrancyToComplications:", 1);
  -[SBFLockScreenDateViewController setComplicationContainerViewController:](self->_dateViewController, "setComplicationContainerViewController:", self->_complicationContainerViewController);
  v27 = self->_dateViewController;
  -[CSCoverSheetContextProviding dateProvider](self->_coverSheetContext, "dateProvider");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  -[SBFLockScreenDateViewController setDateProvider:](v27, "setDateProvider:", v28);

  v29 = self->_dateViewController;
  -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "legibilitySettings");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  -[SBFLockScreenDateViewController setLegibilitySettings:](v29, "setLegibilitySettings:", v31);

  v32 = self->_dateViewController;
  v101[0] = MEMORY[0x1E0C809B0];
  v101[1] = 3221225472;
  v101[2] = __41__CSCoverSheetViewController_viewDidLoad__block_invoke_138;
  v101[3] = &unk_1E8E2DF58;
  v33 = v4;
  v102 = v33;
  v103 = self;
  -[CSCoverSheetViewController bs_addChildViewController:animated:transitionBlock:](self, "bs_addChildViewController:animated:transitionBlock:", v32, 0, v101);
  defaultsDerivedOverrideDate = self->_defaultsDerivedOverrideDate;
  self->_defaultsDerivedOverrideDate = 0;

  -[CSCoverSheetViewController _updateOverrideDateIfNeeded](self, "_updateOverrideDateIfNeeded");
  v35 = objc_alloc_init(CSFixedFooterViewController);
  fixedFooterViewController = self->_fixedFooterViewController;
  self->_fixedFooterViewController = v35;

  v37 = self->_fixedFooterViewController;
  -[CSCoverSheetContextProviding authenticationStatusProvider](self->_coverSheetContext, "authenticationStatusProvider");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSFixedFooterViewController setAuthenticationStatusProvider:](v37, "setAuthenticationStatusProvider:", v38);

  v39 = self->_fixedFooterViewController;
  v98[0] = MEMORY[0x1E0C809B0];
  v98[1] = 3221225472;
  v98[2] = __41__CSCoverSheetViewController_viewDidLoad__block_invoke_2_141;
  v98[3] = &unk_1E8E2DF58;
  v40 = v33;
  v99 = v40;
  v100 = self;
  -[CSCoverSheetViewController bs_addChildViewController:animated:transitionBlock:](self, "bs_addChildViewController:animated:transitionBlock:", v39, 0, v98);
  if (__sb__runningInSpringBoard())
  {
    if (SBFEffectiveDeviceClass() != 2)
      goto LABEL_13;
    goto LABEL_12;
  }
  objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  v42 = objc_msgSend(v41, "userInterfaceIdiom") == 1;

  if (v42)
  {
LABEL_12:
    v43 = self->_sidebarComplicationContainerViewController;
    v95[0] = MEMORY[0x1E0C809B0];
    v95[1] = 3221225472;
    v95[2] = __41__CSCoverSheetViewController_viewDidLoad__block_invoke_3;
    v95[3] = &unk_1E8E2DF58;
    v96 = v40;
    v97 = self;
    -[CSCoverSheetViewController bs_addChildViewController:animated:transitionBlock:](self, "bs_addChildViewController:animated:transitionBlock:", v43, 0, v95);

  }
LABEL_13:
  -[CSCoverSheetContextProviding biometricResource](self->_coverSheetContext, "biometricResource");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  if (SBFEffectiveHomeButtonType() == 2
    || (objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice"),
        v45 = (void *)objc_claimAutoreleasedReturnValue(),
        v46 = objc_msgSend(v45, "userInterfaceIdiom"),
        v45,
        (v46 & 0xFFFFFFFFFFFFFFFBLL) == 1))
  {
    v47 = -[CSTeachableMomentsContainerViewController initWithCoverSheetContext:]([CSTeachableMomentsContainerViewController alloc], "initWithCoverSheetContext:", self->_coverSheetContext);
    teachableMomentsContainerViewController = self->_teachableMomentsContainerViewController;
    self->_teachableMomentsContainerViewController = v47;

    -[CSTeachableMomentsContainerViewController setBiometricResource:](self->_teachableMomentsContainerViewController, "setBiometricResource:", v44);
    v49 = self->_teachableMomentsContainerViewController;
    v92[0] = MEMORY[0x1E0C809B0];
    v92[1] = 3221225472;
    v92[2] = __41__CSCoverSheetViewController_viewDidLoad__block_invoke_4;
    v92[3] = &unk_1E8E2DF58;
    v93 = v40;
    v94 = self;
    -[CSCoverSheetViewController bs_addChildViewController:animated:transitionBlock:](self, "bs_addChildViewController:animated:transitionBlock:", v49, 0, v92);

  }
  v50 = -[CSUserPresenceMonitor initWithBiometricResource:]([CSUserPresenceMonitor alloc], "initWithBiometricResource:", v44);
  userPresenceMonitor = self->_userPresenceMonitor;
  self->_userPresenceMonitor = v50;

  -[CSMainPageContentViewController setUserPresenceMonitor:](self->_mainPageContentViewController, "setUserPresenceMonitor:", self->_userPresenceMonitor);
  v52 = objc_alloc_init(CSFaceOcclusionMonitor);
  faceOcclusionMonitor = self->_faceOcclusionMonitor;
  self->_faceOcclusionMonitor = v52;

  v54 = [CSQuickActionsViewController alloc];
  lockScreenDefaults = self->_lockScreenDefaults;
  -[CSCoverSheetContextProviding applicationInformer](self->_coverSheetContext, "applicationInformer");
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  v57 = -[CSQuickActionsViewController initWithLockScreenDefaults:applicationInformer:](v54, "initWithLockScreenDefaults:applicationInformer:", lockScreenDefaults, v56);
  quickActionsViewController = self->_quickActionsViewController;
  self->_quickActionsViewController = v57;

  -[CSQuickActionsViewController setCameraPrewarmer:](self->_quickActionsViewController, "setCameraPrewarmer:", self->_cameraPrewarmer);
  -[CSQuickActionsViewController setLockOutController:](self->_quickActionsViewController, "setLockOutController:", self->_lockOutController);
  -[CSCoverSheetViewController updateQuickActionsVisibility](self, "updateQuickActionsVisibility");
  if ((objc_msgSend(v44, "hasPearlSupport") & 1) != 0)
    v59 = 1;
  else
    v59 = MGGetBoolAnswer();
  v60 = objc_msgSend(v44, "hasPoseidonSupport");
  v61 = SBFEffectiveArtworkSubtype();
  v62 = v59 | v60;
  v63 = 1;
  if (v61 <= 2795)
  {
    if (v61 != 2556 && v61 != 2622)
      goto LABEL_32;
LABEL_25:
    if (!v62)
      goto LABEL_27;
    goto LABEL_26;
  }
  if (v61 == 2796 || v61 == 2868)
    goto LABEL_25;
LABEL_32:
  v63 = 0;
  if (v62)
  {
LABEL_26:
    v64 = objc_alloc_init(CSProudLockViewController);
    proudLockViewController = self->_proudLockViewController;
    self->_proudLockViewController = v64;

    v66 = self->_proudLockViewController;
    objc_msgSend(MEMORY[0x1E0DAC5A0], "sharedInstance");
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSProudLockViewController setBiometricResource:](v66, "setBiometricResource:", v67);

    v68 = self->_proudLockViewController;
    -[CSCoverSheetContextProviding authenticationStatusProvider](self->_coverSheetContext, "authenticationStatusProvider");
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSProudLockViewController setAuthenticationStatusProvider:](v68, "setAuthenticationStatusProvider:", v69);

    -[CSProudLockViewController setDelegate:](self->_proudLockViewController, "setDelegate:", self);
    v70 = self->_proudLockViewController;
    v89[0] = MEMORY[0x1E0C809B0];
    v89[1] = 3221225472;
    v89[2] = __41__CSCoverSheetViewController_viewDidLoad__block_invoke_5;
    v89[3] = &unk_1E8E2E100;
    v89[4] = self;
    v91 = v63;
    v90 = v40;
    -[CSCoverSheetViewController bs_addChildViewController:animated:transitionBlock:](self, "bs_addChildViewController:animated:transitionBlock:", v70, 0, v89);

  }
LABEL_27:
  self->_wantsStatusBarLockItemDisabled = v62;
  if ((v63 & 1) == 0)
  {
    -[CSProudLockViewController cameraCoveredView](self->_proudLockViewController, "cameraCoveredView");
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "setCameraCoveredView:", v71);

  }
  if (v60)
  {
    v72 = objc_alloc_init(CSPoseidonViewController);
    poseidonViewController = self->_poseidonViewController;
    self->_poseidonViewController = v72;

    v74 = self->_poseidonViewController;
    -[CSCoverSheetContextProviding biometricResource](self->_coverSheetContext, "biometricResource");
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSPoseidonViewController setBiometricResource:](v74, "setBiometricResource:", v75);

    v76 = self->_poseidonViewController;
    -[CSCoverSheetContextProviding authenticationStatusProvider](self->_coverSheetContext, "authenticationStatusProvider");
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSPoseidonViewController setAuthenticationStatusProvider:](v76, "setAuthenticationStatusProvider:", v77);

    v78 = self->_poseidonViewController;
    v86[0] = MEMORY[0x1E0C809B0];
    v86[1] = 3221225472;
    v86[2] = __41__CSCoverSheetViewController_viewDidLoad__block_invoke_6;
    v86[3] = &unk_1E8E2DF58;
    v87 = v40;
    v88 = self;
    -[CSCoverSheetViewController bs_addChildViewController:animated:transitionBlock:](self, "bs_addChildViewController:animated:transitionBlock:", v78, 0, v86);

  }
  v79 = objc_alloc(MEMORY[0x1E0CEABE8]);
  objc_msgSend(v40, "bounds");
  v80 = (void *)objc_msgSend(v79, "initWithFrame:");
  objc_msgSend(v80, "setAutoresizingMask:", 18);
  -[SBFLegacyWallpaperWakeAnimator setWakeEffectView:](self->_legacyWallpaperWakeAnimator, "setWakeEffectView:", v80);
  objc_msgSend(v40, "setWakeEffectView:", v80);
  -[CSCoverSheetViewController _updateActiveAppearanceForReason:](self, "_updateActiveAppearanceForReason:", CFSTR("ViewDidLoad"));
  -[CSCoverSheetViewController _updateActiveBehaviorsForReason:](self, "_updateActiveBehaviorsForReason:", CFSTR("ViewDidLoad"));
  -[CSCoverSheetViewController _loadViewsForRestrictedPagesIfPossible](self, "_loadViewsForRestrictedPagesIfPossible");
  objc_msgSend(v40, "resetScrollViewToMainPageAnimated:withCompletion:", 0, 0);
  objc_opt_self();
  v81 = (void *)objc_claimAutoreleasedReturnValue();
  v112[0] = v81;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v112, 1);
  v82 = (void *)objc_claimAutoreleasedReturnValue();
  v83 = (id)-[CSCoverSheetViewController registerForTraitChanges:withHandler:](self, "registerForTraitChanges:withHandler:", v82, &__block_literal_global_157);

}

void __41__CSCoverSheetViewController_viewDidLoad__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id *WeakRetained;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  int v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  SBLogDashBoard();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v15 = 138412290;
    v16 = v5;
    _os_log_impl(&dword_1D0337000, v7, OS_LOG_TYPE_DEFAULT, "Received portrait widget update: %@", (uint8_t *)&v15, 0xCu);
  }

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    objc_msgSend(v5, "bs_map:", &__block_literal_global_2);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained[255], "setComplicationDescriptors:iconLayout:", v9, v6);
    if (objc_msgSend(v5, "count"))
    {
      objc_msgSend(WeakRetained, "dateBaselineToComplicationY");
      v11 = v10;
      objc_msgSend(getCSProminentLayoutControllerClass(), "boundsForElements:", 8);
      v13 = v11 + v12;
    }
    else
    {
      v13 = 0.0;
    }
    *((double *)WeakRetained + 201) = v13;
    objc_msgSend(WeakRetained[196], "hostDidChangeContentBounds");
    objc_msgSend(WeakRetained[244], "combinedListViewController");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "layoutListView");

  }
}

id __41__CSCoverSheetViewController_viewDidLoad__block_invoke_127(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = (objc_class *)MEMORY[0x1E0D7F9F8];
  v3 = a2;
  v4 = [v2 alloc];
  objc_msgSend(v3, "uniqueIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "widget");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = (void *)objc_msgSend(v4, "initWithUniqueIdentifier:widget:suggestedComplication:", v5, v6, 0);
  return v7;
}

void __41__CSCoverSheetViewController_viewDidLoad__block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id *WeakRetained;
  void *v9;
  int v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  SBLogDashBoard();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v10 = 138412290;
    v11 = v5;
    _os_log_impl(&dword_1D0337000, v7, OS_LOG_TYPE_DEFAULT, "Received sidebar widget update: %@", (uint8_t *)&v10, 0xCu);
  }

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    objc_msgSend(v5, "bs_map:", &__block_literal_global_132);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained[256], "setComplicationDescriptors:iconLayout:", v9, v6);

  }
}

id __41__CSCoverSheetViewController_viewDidLoad__block_invoke_131(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = (objc_class *)MEMORY[0x1E0D7F9F8];
  v3 = a2;
  v4 = [v2 alloc];
  objc_msgSend(v3, "uniqueIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "widget");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = (void *)objc_msgSend(v4, "initWithUniqueIdentifier:widget:suggestedComplication:", v5, v6, 0);
  return v7;
}

void __41__CSCoverSheetViewController_viewDidLoad__block_invoke_2_133(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  _QWORD *WeakRetained;
  void *v9;
  id v10;
  void *v11;
  int v12;
  id v13;
  __int16 v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  SBLogDashBoard();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v12 = 138412546;
    v13 = v5;
    v14 = 2112;
    v15 = v6;
    _os_log_impl(&dword_1D0337000, v7, OS_LOG_TYPE_DEFAULT, "Received inline widget update: %@ / %@", (uint8_t *)&v12, 0x16u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v9 = (void *)WeakRetained[218];
  WeakRetained[218] = v5;
  v10 = v5;

  v11 = (void *)WeakRetained[219];
  WeakRetained[219] = v6;

  objc_msgSend(WeakRetained, "_validateAndUpdateInlineComplication");
}

void __41__CSCoverSheetViewController_viewDidLoad__block_invoke_138(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  void *v4;
  void (**v5)(void);

  v2 = *(void **)(a1 + 32);
  v3 = *(void **)(*(_QWORD *)(a1 + 40) + 2016);
  v5 = a2;
  objc_msgSend(v3, "dateView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setDateView:", v4);

  v5[2]();
}

void __41__CSCoverSheetViewController_viewDidLoad__block_invoke_2_141(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  void *v4;
  void (**v5)(void);

  v2 = *(void **)(a1 + 32);
  v3 = *(void **)(*(_QWORD *)(a1 + 40) + 1352);
  v5 = a2;
  objc_msgSend(v3, "fixedFooterView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setFixedFooterView:", v4);

  v5[2]();
}

void __41__CSCoverSheetViewController_viewDidLoad__block_invoke_3(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  void *v4;
  void (**v5)(void);

  v2 = *(void **)(a1 + 32);
  v3 = *(void **)(*(_QWORD *)(a1 + 40) + 2048);
  v5 = a2;
  objc_msgSend(v3, "view");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setSidebarComplicationContainerView:", v4);

  v5[2]();
}

void __41__CSCoverSheetViewController_viewDidLoad__block_invoke_4(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  void *v4;
  void (**v5)(void);

  v2 = *(void **)(a1 + 32);
  v3 = *(void **)(*(_QWORD *)(a1 + 40) + 1384);
  v5 = a2;
  objc_msgSend(v3, "teachableMomentsContainerView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setTeachableMomentsContainerView:", v4);

  v5[2]();
}

void __41__CSCoverSheetViewController_viewDidLoad__block_invoke_5(uint64_t a1, void *a2)
{
  void *v3;
  void (**v4)(_QWORD);
  id v5;

  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 1360);
  v4 = a2;
  objc_msgSend(v3, "view");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setHidden:", *(unsigned __int8 *)(a1 + 48));
  objc_msgSend(*(id *)(a1 + 40), "setProudLockContainerView:", v5);
  v4[2](v4);

}

void __41__CSCoverSheetViewController_viewDidLoad__block_invoke_6(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  void *v4;
  void (**v5)(void);

  v2 = *(void **)(a1 + 32);
  v3 = *(void **)(*(_QWORD *)(a1 + 40) + 1376);
  v5 = a2;
  objc_msgSend(v3, "view");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setPoseidonContainerView:", v4);

  v5[2]();
}

void __41__CSCoverSheetViewController_viewDidLoad__block_invoke_7(uint64_t a1, void *a2, void *a3)
{
  _BOOL4 v4;
  void *v5;
  uint64_t v6;
  id v7;

  v7 = a2;
  v4 = objc_msgSend(a3, "_backlightLuminance") != 1;
  objc_msgSend(v7, "traitCollection");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "_backlightLuminance");

  if (((v4 ^ (v6 == 1)) & 1) == 0)
    objc_msgSend(v7, "_updateAppearanceForAODTransitionToInactive:", v6 == 1);

}

- (BOOL)shouldAutomaticallyForwardAppearanceMethods
{
  return 0;
}

- (BOOL)sendAppearanceTransitionForChildViewControllers
{
  return 0;
}

- (void)updateQuickActionsVisibility
{
  void *v3;
  char v4;
  CSQuickActionsViewController *quickActionsViewController;
  void *v6;
  _QWORD v7[5];

  if (self->_quickActionsViewController)
  {
    if (-[CSCoverSheetViewController _quickActionsSupported](self, "_quickActionsSupported"))
    {
      -[CSCoverSheetViewController childViewControllers](self, "childViewControllers");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = objc_msgSend(v3, "containsObject:", self->_quickActionsViewController);

      if ((v4 & 1) == 0)
      {
        quickActionsViewController = self->_quickActionsViewController;
        v7[0] = MEMORY[0x1E0C809B0];
        v7[1] = 3221225472;
        v7[2] = __58__CSCoverSheetViewController_updateQuickActionsVisibility__block_invoke;
        v7[3] = &unk_1E8E2DB60;
        v7[4] = self;
        -[CSCoverSheetViewController bs_addChildViewController:animated:transitionBlock:](self, "bs_addChildViewController:animated:transitionBlock:", quickActionsViewController, 0, v7);
      }
    }
    else
    {
      -[CSQuickActionsViewController parentViewController](self->_quickActionsViewController, "parentViewController");
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      if (v6)
        -[CSCoverSheetViewController bs_removeChildViewController:](self, "bs_removeChildViewController:", self->_quickActionsViewController);
    }
  }
}

uint64_t __58__CSCoverSheetViewController_updateQuickActionsVisibility__block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  objc_msgSend(*(id *)(a1 + 32), "coverSheetView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1400), "quickActionsView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setQuickActionsView:", v3);

  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1400), "setCoverSheetViewController:");
}

- (void)_prepareForViewWillAppearIfNecessary
{
  void *v3;
  CSScrollGestureController *v4;
  CSScrollGestureController *scrollGestureController;
  id v6;

  if (!self->_lastAppearState)
  {
    -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "viewControllerWillAppear");

    -[CSCoverSheetViewController setActiveAppearance:](self, "setActiveAppearance:", 0);
    -[CSCoverSheetViewTransitionSource cancelTransition](self->_currentTransitionSource, "cancelTransition");
    self->_transitionType = 0;
    -[CSCoverSheetViewController setCurrentTransitionSource:](self, "setCurrentTransitionSource:", 0);
    -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    v4 = -[CSScrollGestureController initWithScrollableView:]([CSScrollGestureController alloc], "initWithScrollableView:", v6);
    scrollGestureController = self->_scrollGestureController;
    self->_scrollGestureController = v4;

    -[CSScrollGestureController setDelegate:](self->_scrollGestureController, "setDelegate:", self);
    -[CSCoverSheetViewController _loadViewsForRestrictedPagesIfPossible](self, "_loadViewsForRestrictedPagesIfPossible");
    objc_msgSend(v6, "resetScrollViewToMainPageAnimated:withCompletion:", 0, 0);

  }
}

- (void)viewWillAppear:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  objc_super v6;

  v3 = a3;
  -[CSCoverSheetViewController _prepareForViewWillAppearIfNecessary](self, "_prepareForViewWillAppearIfNecessary");
  v6.receiver = self;
  v6.super_class = (Class)CSCoverSheetViewController;
  -[CSCoverSheetViewControllerBase viewWillAppear:](&v6, sel_viewWillAppear_, v3);
  -[CSCoverSheetViewController _handleEventType:](self, "_handleEventType:", 3);
  -[CSCoverSheetViewController updateQuickActionsVisibility](self, "updateQuickActionsVisibility");
  -[CSCoverSheetViewController bs_beginAppearanceTransitionForChildViewController:toVisible:animated:](self, "bs_beginAppearanceTransitionForChildViewController:toVisible:animated:", self->_dateViewController, 1, v3);
  -[CSCoverSheetViewController bs_beginAppearanceTransitionForChildViewController:toVisible:animated:](self, "bs_beginAppearanceTransitionForChildViewController:toVisible:animated:", self->_fixedFooterViewController, 1, v3);
  -[CSCoverSheetViewController bs_beginAppearanceTransitionForChildViewController:toVisible:animated:](self, "bs_beginAppearanceTransitionForChildViewController:toVisible:animated:", self->_teachableMomentsContainerViewController, 1, v3);
  -[CSCoverSheetViewController bs_beginAppearanceTransitionForChildViewController:toVisible:animated:](self, "bs_beginAppearanceTransitionForChildViewController:toVisible:animated:", self->_inlineComplicationContainerViewController, 1, v3);
  -[CSCoverSheetViewController bs_beginAppearanceTransitionForChildViewController:toVisible:animated:](self, "bs_beginAppearanceTransitionForChildViewController:toVisible:animated:", self->_landscapeInlineComplicationContainerViewController, 1, v3);
  -[CSCoverSheetViewController bs_beginAppearanceTransitionForChildViewController:toVisible:animated:](self, "bs_beginAppearanceTransitionForChildViewController:toVisible:animated:", self->_complicationContainerViewController, 1, v3);
  -[CSCoverSheetViewController bs_beginAppearanceTransitionForChildViewController:toVisible:animated:](self, "bs_beginAppearanceTransitionForChildViewController:toVisible:animated:", self->_sidebarComplicationContainerViewController, 1, v3);
  -[CSCoverSheetViewController bs_beginAppearanceTransitionForChildViewController:toVisible:animated:](self, "bs_beginAppearanceTransitionForChildViewController:toVisible:animated:", self->_backgroundContentViewController, 1, v3);
  if (-[CSCoverSheetViewController _quickActionsSupported](self, "_quickActionsSupported"))
    -[CSCoverSheetViewController bs_beginAppearanceTransitionForChildViewController:toVisible:animated:](self, "bs_beginAppearanceTransitionForChildViewController:toVisible:animated:", self->_quickActionsViewController, 1, v3);
  -[CSCoverSheetViewController bs_beginAppearanceTransitionForChildViewController:toVisible:animated:](self, "bs_beginAppearanceTransitionForChildViewController:toVisible:animated:", self->_proudLockViewController, 1, v3);
  -[CSCoverSheetViewController bs_beginAppearanceTransitionForChildViewController:toVisible:animated:](self, "bs_beginAppearanceTransitionForChildViewController:toVisible:animated:", self->_poseidonViewController, 1, v3);
  -[CSCoverSheetViewController _beginAppearanceTransitionForPageViewControllersToVisible:animated:](self, "_beginAppearanceTransitionForPageViewControllersToVisible:animated:", 1, v3);
  -[CSCoverSheetViewController noteDeviceBlockedStatusUpdated](self, "noteDeviceBlockedStatusUpdated");
  -[CSCoverSheetViewController _updateScrollingBehavior](self, "_updateScrollingBehavior");
  -[CSCoverSheetViewController _updateAppearanceForTransitionToOrientation:](self, "_updateAppearanceForTransitionToOrientation:", -[CSCoverSheetViewController interfaceOrientation](self, "interfaceOrientation"));
  -[CSCoverSheetViewController _calculateAppearanceForCurrentOrientation](self, "_calculateAppearanceForCurrentOrientation");
  -[CSCoverSheetViewController _updateActiveAppearanceForReason:](self, "_updateActiveAppearanceForReason:", CFSTR("viewWillAppear"));
  -[CSCoverSheetViewController _updateActiveBehaviorsForReason:](self, "_updateActiveBehaviorsForReason:", CFSTR("viewWillAppear"));
  -[CSCoverSheetViewController _addOrRemoveRemoteContentViewIfNecessaryMaintainingState:](self, "_addOrRemoveRemoteContentViewIfNecessaryMaintainingState:", 1);
  -[CSCoverSheetViewController _displayWillAppearImplementation](self, "_displayWillAppearImplementation");
  -[CSCoverSheetViewController _sendAuthenticationChangedEvent](self, "_sendAuthenticationChangedEvent");
  -[CSCoverSheetViewController setPasscodeLockVisible:animated:](self, "setPasscodeLockVisible:animated:", 0, v3);
  self->_lastAppearState = -[CSCoverSheetViewController _appearState](self, "_appearState");
  -[CSCoverSheetViewController _setDismissed:](self, "_setDismissed:", 0);
  -[CSRemoteContentInlineViewController hostViewController](self->_remoteContentInlineViewController, "hostViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hostDidChangeContentBounds");

  -[CSCoverSheetViewController _updateRemoteContentInlineHorizontalMargin](self, "_updateRemoteContentInlineHorizontalMargin");
}

- (void)viewDidAppear:(BOOL)a3
{
  objc_super v4;

  v4.receiver = self;
  v4.super_class = (Class)CSCoverSheetViewController;
  -[CSCoverSheetViewControllerBase viewDidAppear:](&v4, sel_viewDidAppear_, a3);
  -[CSCoverSheetViewController _handleEventType:](self, "_handleEventType:", 4);
  -[CSCoverSheetViewController _setupWallpaperGesture](self, "_setupWallpaperGesture");
  -[CSCoverSheetViewController _setupBackgroundContentGestureRecognizer](self, "_setupBackgroundContentGestureRecognizer");
  -[CSCoverSheetViewController _setupQuickNoteGestureRecognizer](self, "_setupQuickNoteGestureRecognizer");
  -[CSCoverSheetViewController _setupPosterSwitcherGestureRecognizer](self, "_setupPosterSwitcherGestureRecognizer");
  -[CSCoverSheetViewController _setupComplicationSelectionGestureRecognizer](self, "_setupComplicationSelectionGestureRecognizer");
  -[CSCoverSheetViewController _setupSearchGesture](self, "_setupSearchGesture");
  -[CSCoverSheetViewController bs_endAppearanceTransitionForChildViewController:](self, "bs_endAppearanceTransitionForChildViewController:", self->_dateViewController);
  -[CSCoverSheetViewController bs_endAppearanceTransitionForChildViewController:](self, "bs_endAppearanceTransitionForChildViewController:", self->_fixedFooterViewController);
  -[CSCoverSheetViewController bs_endAppearanceTransitionForChildViewController:](self, "bs_endAppearanceTransitionForChildViewController:", self->_teachableMomentsContainerViewController);
  -[CSCoverSheetViewController bs_endAppearanceTransitionForChildViewController:](self, "bs_endAppearanceTransitionForChildViewController:", self->_inlineComplicationContainerViewController);
  -[CSCoverSheetViewController bs_endAppearanceTransitionForChildViewController:](self, "bs_endAppearanceTransitionForChildViewController:", self->_landscapeInlineComplicationContainerViewController);
  -[CSCoverSheetViewController bs_endAppearanceTransitionForChildViewController:](self, "bs_endAppearanceTransitionForChildViewController:", self->_complicationContainerViewController);
  -[CSCoverSheetViewController bs_endAppearanceTransitionForChildViewController:](self, "bs_endAppearanceTransitionForChildViewController:", self->_sidebarComplicationContainerViewController);
  -[CSCoverSheetViewController bs_endAppearanceTransitionForChildViewController:](self, "bs_endAppearanceTransitionForChildViewController:", self->_backgroundContentViewController);
  if (-[CSCoverSheetViewController _quickActionsSupported](self, "_quickActionsSupported"))
    -[CSCoverSheetViewController bs_endAppearanceTransitionForChildViewController:](self, "bs_endAppearanceTransitionForChildViewController:", self->_quickActionsViewController);
  -[CSCoverSheetViewController bs_endAppearanceTransitionForChildViewController:](self, "bs_endAppearanceTransitionForChildViewController:", self->_proudLockViewController);
  -[CSCoverSheetViewController bs_endAppearanceTransitionForChildViewController:](self, "bs_endAppearanceTransitionForChildViewController:", self->_poseidonViewController);
  -[CSCoverSheetViewController _endAppearanceTransitionForPageViewControllersToVisible:](self, "_endAppearanceTransitionForPageViewControllersToVisible:", 1);
  self->_statusBarInLockdownForTeardown = 0;
  -[CSNotificationClearingTrigger setUiLocked:](self->_notificationClearingTrigger, "setUiLocked:", 1);
  self->_lastAppearState = -[CSCoverSheetViewController _appearState](self, "_appearState");
}

- (void)viewWillDisappear:(BOOL)a3
{
  _BOOL8 v3;
  objc_super v5;

  v3 = a3;
  v5.receiver = self;
  v5.super_class = (Class)CSCoverSheetViewController;
  -[CSCoverSheetViewControllerBase viewWillDisappear:](&v5, sel_viewWillDisappear_);
  -[CSCoverSheetViewController _handleEventType:](self, "_handleEventType:", 5);
  -[CSCoverSheetViewController bs_beginAppearanceTransitionForChildViewController:toVisible:animated:](self, "bs_beginAppearanceTransitionForChildViewController:toVisible:animated:", self->_dateViewController, 0, v3);
  -[CSCoverSheetViewController bs_beginAppearanceTransitionForChildViewController:toVisible:animated:](self, "bs_beginAppearanceTransitionForChildViewController:toVisible:animated:", self->_fixedFooterViewController, 0, v3);
  -[CSCoverSheetViewController bs_beginAppearanceTransitionForChildViewController:toVisible:animated:](self, "bs_beginAppearanceTransitionForChildViewController:toVisible:animated:", self->_teachableMomentsContainerViewController, 0, v3);
  -[CSCoverSheetViewController bs_beginAppearanceTransitionForChildViewController:toVisible:animated:](self, "bs_beginAppearanceTransitionForChildViewController:toVisible:animated:", self->_inlineComplicationContainerViewController, 0, v3);
  -[CSCoverSheetViewController bs_beginAppearanceTransitionForChildViewController:toVisible:animated:](self, "bs_beginAppearanceTransitionForChildViewController:toVisible:animated:", self->_landscapeInlineComplicationContainerViewController, 0, v3);
  -[CSCoverSheetViewController bs_beginAppearanceTransitionForChildViewController:toVisible:animated:](self, "bs_beginAppearanceTransitionForChildViewController:toVisible:animated:", self->_complicationContainerViewController, 0, v3);
  -[CSCoverSheetViewController bs_beginAppearanceTransitionForChildViewController:toVisible:animated:](self, "bs_beginAppearanceTransitionForChildViewController:toVisible:animated:", self->_sidebarComplicationContainerViewController, 0, v3);
  -[CSCoverSheetViewController bs_beginAppearanceTransitionForChildViewController:toVisible:animated:](self, "bs_beginAppearanceTransitionForChildViewController:toVisible:animated:", self->_backgroundContentViewController, 0, v3);
  if (-[CSCoverSheetViewController _quickActionsSupported](self, "_quickActionsSupported"))
    -[CSCoverSheetViewController bs_beginAppearanceTransitionForChildViewController:toVisible:animated:](self, "bs_beginAppearanceTransitionForChildViewController:toVisible:animated:", self->_quickActionsViewController, 0, v3);
  -[CSCoverSheetViewController bs_beginAppearanceTransitionForChildViewController:toVisible:animated:](self, "bs_beginAppearanceTransitionForChildViewController:toVisible:animated:", self->_proudLockViewController, 0, v3);
  -[CSCoverSheetViewController bs_beginAppearanceTransitionForChildViewController:toVisible:animated:](self, "bs_beginAppearanceTransitionForChildViewController:toVisible:animated:", self->_poseidonViewController, 0, v3);
  -[CSCoverSheetViewController _beginAppearanceTransitionForPageViewControllersToVisible:animated:](self, "_beginAppearanceTransitionForPageViewControllersToVisible:animated:", 0, v3);
  -[CSCoverSheetViewController _displayWillDisappearImplementation](self, "_displayWillDisappearImplementation");
  self->_lastAppearState = -[CSCoverSheetViewController _appearState](self, "_appearState");
}

- (void)viewDidDisappear:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  objc_super v6;

  v3 = a3;
  -[CSCoverSheetViewTransitionSource cancelTransition](self->_currentTransitionSource, "cancelTransition");
  v6.receiver = self;
  v6.super_class = (Class)CSCoverSheetViewController;
  -[CSCoverSheetViewControllerBase viewDidDisappear:](&v6, sel_viewDidDisappear_, v3);
  -[CSCoverSheetViewController _handleEventType:](self, "_handleEventType:", 6);
  -[CSCoverSheetViewController bs_endAppearanceTransitionForChildViewController:](self, "bs_endAppearanceTransitionForChildViewController:", self->_dateViewController);
  -[CSCoverSheetViewController bs_endAppearanceTransitionForChildViewController:](self, "bs_endAppearanceTransitionForChildViewController:", self->_fixedFooterViewController);
  -[CSCoverSheetViewController bs_endAppearanceTransitionForChildViewController:](self, "bs_endAppearanceTransitionForChildViewController:", self->_teachableMomentsContainerViewController);
  -[CSCoverSheetViewController bs_endAppearanceTransitionForChildViewController:](self, "bs_endAppearanceTransitionForChildViewController:", self->_inlineComplicationContainerViewController);
  -[CSCoverSheetViewController bs_endAppearanceTransitionForChildViewController:](self, "bs_endAppearanceTransitionForChildViewController:", self->_landscapeInlineComplicationContainerViewController);
  -[CSCoverSheetViewController bs_endAppearanceTransitionForChildViewController:](self, "bs_endAppearanceTransitionForChildViewController:", self->_complicationContainerViewController);
  -[CSCoverSheetViewController bs_endAppearanceTransitionForChildViewController:](self, "bs_endAppearanceTransitionForChildViewController:", self->_sidebarComplicationContainerViewController);
  -[CSCoverSheetViewController bs_endAppearanceTransitionForChildViewController:](self, "bs_endAppearanceTransitionForChildViewController:", self->_backgroundContentViewController);
  if (-[CSCoverSheetViewController _quickActionsSupported](self, "_quickActionsSupported"))
    -[CSCoverSheetViewController bs_endAppearanceTransitionForChildViewController:](self, "bs_endAppearanceTransitionForChildViewController:", self->_quickActionsViewController);
  -[CSCoverSheetViewController bs_endAppearanceTransitionForChildViewController:](self, "bs_endAppearanceTransitionForChildViewController:", self->_proudLockViewController);
  -[CSCoverSheetViewController bs_endAppearanceTransitionForChildViewController:](self, "bs_endAppearanceTransitionForChildViewController:", self->_poseidonViewController);
  -[CSCoverSheetViewController _endAppearanceTransitionForPageViewControllersToVisible:](self, "_endAppearanceTransitionForPageViewControllersToVisible:", 0);
  -[BCBatteryDeviceController removeBatteryDeviceObserver:](self->_batteryDeviceController, "removeBatteryDeviceObserver:", self);
  -[CSCoverSheetViewController _displayDidDisappearImplementation](self, "_displayDidDisappearImplementation");
  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "removeContentView");

  -[CSCoverSheetViewController _clearChargingModalStateIfNecessary](self, "_clearChargingModalStateIfNecessary");
  -[CSCoverSheetViewController _updateWallpaperFloatingLayerContainerView](self, "_updateWallpaperFloatingLayerContainerView");
  self->_statusBarInLockdownForTeardown = 0;
  if (-[CSCoverSheetViewController _isPresentingDismissableRemoteContent](self, "_isPresentingDismissableRemoteContent"))
  {
    -[CSCoverSheetViewController _dismissRemoteViewControllerForReason:](self, "_dismissRemoteViewControllerForReason:", 7);
  }
  self->_lastAppearState = -[CSCoverSheetViewController _appearState](self, "_appearState");
  -[CSCoverSheetViewController _setDismissed:](self, "_setDismissed:", 1);
  if (-[CSCoverSheetViewController _isShowingInlineContent](self, "_isShowingInlineContent"))
    -[CSCoverSheetViewController _overrideNotificationDisplayStyleForInlineContent](self, "_overrideNotificationDisplayStyleForInlineContent");
}

- (void)presentModalViewController:(id)a3 fromRect:(CGRect)a4 inView:(id)a5 animated:(BOOL)a6
{
  id v8;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler", a3, a5, a6, a4.origin.x, a4.origin.y, a4.size.width, a4.size.height);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("CSCoverSheetViewController.m"), 1668, CFSTR("DashBoard does not support modal view controller presentations."));

}

- (void)presentModalViewController:(id)a3 withTransition:(int)a4
{
  id v6;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler", a3, *(_QWORD *)&a4);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("CSCoverSheetViewController.m"), 1672, CFSTR("DashBoard does not support modal view controller presentations."));

}

- (void):(id)a3 withTransition:(int)a4 completion:(id)a5
{
  id v7;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler", a3, *(_QWORD *)&a4, a5);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("CSCoverSheetViewController.m"), 1676, CFSTR("DashBoard does not support modal view controller presentations."));

}

- (BOOL)_canShowWhileLocked
{
  return 1;
}

- (BOOL)_shouldLoadComplications
{
  int v2;

  v2 = CSAutobahnEnabledForPlatform();
  if (v2)
    LOBYTE(v2) = CSFeatureEnabled(4);
  return v2;
}

- (void)setHidesDimmingLayer:(BOOL)a3
{
  _BOOL4 v3;
  void *v5;
  void *v6;

  if (self->_hidesDimmingLayer != a3)
  {
    v3 = a3;
    self->_hidesDimmingLayer = a3;
    -[CSAppearance removeAllComponentsWithIdentifier:](self->_localAppearance, "removeAllComponentsWithIdentifier:", CFSTR("HidesDimmingLayer"));
    if (v3)
    {
      +[CSComponent dimmingLayer](CSComponent, "dimmingLayer");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "identifier:", CFSTR("HidesDimmingLayer"));
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v6, "setHidden:", 1);
      -[CSAppearance addComponent:](self->_localAppearance, "addComponent:", v6);

    }
    -[CSCoverSheetViewController _updateActiveAppearanceForReason:](self, "_updateActiveAppearanceForReason:", CFSTR("HidesDimmingLayer"));
  }
}

- (NSSet)audioCategoriesDisablingVolumeHUD
{
  void *v2;
  void *v3;

  -[CSMainPageContentViewController combinedListViewController](self->_mainPageContentViewController, "combinedListViewController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "audioCategoriesDisablingVolumeHUD");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSSet *)v3;
}

- (void)_updateAppearanceForAODTransitionToInactive:(BOOL)a3
{
  uint64_t v3;
  _QWORD v4[5];
  BOOL v5;

  v3 = 98;
  if (a3)
    v3 = 96;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __74__CSCoverSheetViewController__updateAppearanceForAODTransitionToInactive___block_invoke;
  v4[3] = &unk_1E8E2E190;
  v4[4] = self;
  v5 = a3;
  objc_msgSend(MEMORY[0x1E0CEABB0], "_animateUsingSpringWithDuration:delay:options:mass:stiffness:damping:initialVelocity:animations:completion:", v3, v4, 0, 0.9, 0.0, 1.0, 130.507, 32.319, 0.0);
}

uint64_t __74__CSCoverSheetViewController__updateAppearanceForAODTransitionToInactive___block_invoke(uint64_t a1)
{
  uint64_t v2;
  double v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  id v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  char v76;
  char v77;
  char v78;
  uint64_t v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD v91[5];
  __CFString *v92;
  uint64_t v93;
  _QWORD v94[5];
  __CFString *v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;

  ++*(_QWORD *)(*(_QWORD *)(a1 + 32) + 1696);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2000), "setLegibilitySettings:", 0);
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(a1 + 40))
  {
    objc_msgSend(*(id *)(v2 + 2000), "removeAllComponentsWithIdentifier:", CFSTR("_UIBacklightLuminance"));
    v100 = 0u;
    v101 = 0u;
    v99 = 0u;
    objc_msgSend(MEMORY[0x1E0CEABB0], "inheritedAnimationDuration");
    CSComponentTransitionInputsMake(0, (uint64_t)&v99, v3, *MEMORY[0x1E0C9D538], *(double *)(MEMORY[0x1E0C9D538] + 8), 0.97, 10.0);
    v4 = *(void **)(*(_QWORD *)(a1 + 32) + 2000);
    v5 = (void *)objc_opt_new();
    objc_msgSend(v5, "identifier:", CFSTR("_UIBacklightLuminance"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "fakeStatusBar:", 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "priority:", 80);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v96 = v99;
    v97 = v100;
    v98 = v101;
    objc_msgSend(v8, "transitionInputs:", &v96);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addComponent:", v9);

    objc_msgSend(*(id *)(a1 + 32), "_updateActiveAppearanceForReason:", CFSTR("_UIBacklightLuminance"));
    v10 = *(void **)(*(_QWORD *)(a1 + 32) + 2000);
    v11 = (void *)objc_opt_new();
    objc_msgSend(v11, "viewStyle:", 3);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "identifier:", CFSTR("_UIBacklightLuminance"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1040), "touchEnvironmentStatusProvider");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "hidden:", objc_msgSend(v14, "tapToWakeEnabled") ^ 1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "priority:", 80);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "addComponent:", v16);

    v17 = *(void **)(*(_QWORD *)(a1 + 32) + 2000);
    v18 = (void *)objc_opt_new();
    objc_msgSend(v18, "hidden:", 1);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "identifier:", CFSTR("_UIBacklightLuminance"));
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "priority:", 80);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "transitionModifiers:", 48);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v96 = v99;
    v97 = v100;
    v98 = v101;
    objc_msgSend(v22, "transitionInputs:", &v96);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "addComponent:", v23);

    v24 = *(void **)(*(_QWORD *)(a1 + 32) + 2000);
    v25 = (void *)objc_opt_new();
    objc_msgSend(v25, "hidden:", 1);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "identifier:", CFSTR("_UIBacklightLuminance"));
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "priority:", 80);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "transitionModifiers:", 48);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v96 = v99;
    v97 = v100;
    v98 = v101;
    objc_msgSend(v29, "transitionInputs:", &v96);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "addComponent:", v30);

    v31 = *(void **)(*(_QWORD *)(a1 + 32) + 2000);
    v32 = (void *)objc_opt_new();
    objc_msgSend(v32, "hidden:", 1);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "identifier:", CFSTR("_UIBacklightLuminance"));
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "fakeStatusBar:", 1);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "priority:", 80);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v36, "transitionModifiers:", 48);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    v96 = v99;
    v97 = v100;
    v98 = v101;
    objc_msgSend(v37, "transitionInputs:", &v96);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "addComponent:", v38);

    v39 = *(void **)(*(_QWORD *)(a1 + 32) + 2000);
    v40 = (void *)objc_opt_new();
    objc_msgSend(v40, "identifier:", CFSTR("_UIBacklightLuminance"));
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v41, "priority:", 80);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v42, "transitionModifiers:", 16);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    v96 = v99;
    v97 = v100;
    v98 = v101;
    objc_msgSend(v43, "transitionInputs:", &v96);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "addComponent:", v44);

    v45 = *(void **)(*(_QWORD *)(a1 + 32) + 2000);
    v46 = (void *)objc_opt_new();
    objc_msgSend(v46, "identifier:", CFSTR("_UIBacklightLuminance"));
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v47, "priority:", 80);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v48, "transitionModifiers:", 16);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    v96 = v99;
    v97 = v100;
    v98 = v101;
    objc_msgSend(v49, "transitionInputs:", &v96);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v45, "addComponent:", v50);

    v51 = *(void **)(*(_QWORD *)(a1 + 32) + 2000);
    v52 = (void *)objc_opt_new();
    objc_msgSend(v52, "identifier:", CFSTR("_UIBacklightLuminance"));
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v53, "priority:", 80);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v54, "transitionModifiers:", 16);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    v96 = v99;
    v97 = v100;
    v98 = v101;
    objc_msgSend(v55, "transitionInputs:", &v96);
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v51, "addComponent:", v56);

    v57 = *(void **)(*(_QWORD *)(a1 + 32) + 2000);
    v58 = (void *)objc_opt_new();
    objc_msgSend(v58, "identifier:", CFSTR("_UIBacklightLuminance"));
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v59, "priority:", 80);
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v60, "transitionModifiers:", 16);
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    v96 = v99;
    v97 = v100;
    v98 = v101;
    objc_msgSend(v61, "transitionInputs:", &v96);
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v57, "addComponent:", v62);

    if ((objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1536), "showWallpaperInAlwaysOn") & 1) == 0)
    {
      v63 = *(void **)(*(_QWORD *)(a1 + 32) + 2000);
      v64 = (void *)objc_opt_new();
      objc_msgSend(v64, "identifier:", CFSTR("_UIBacklightLuminance"));
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v65, "priority:", 80);
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v66, "style:", &unk_1E8E8A2B8);
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CEA478], "blackColor");
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v67, "color:", v68);
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v63, "addComponent:", v69);

      v70 = *(void **)(*(_QWORD *)(a1 + 32) + 2000);
      v71 = objc_alloc(MEMORY[0x1E0CEADE8]);
      objc_msgSend(MEMORY[0x1E0CEA478], "whiteColor");
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      v73 = (void *)objc_msgSend(v71, "initWithStyle:contentColor:", 1, v72);
      objc_msgSend(v70, "setLegibilitySettings:", v73);

    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1952), "combinedListViewController");
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v74, "setShowNotificationsInAlwaysOn:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1536), "showNotificationsInAlwaysOn"));

    objc_msgSend(*(id *)(a1 + 32), "coverSheetView");
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v75, "addContentView");

  }
  else
  {
    v76 = objc_msgSend(*(id *)(v2 + 1536), "showWallpaperInAlwaysOn");
    v77 = objc_msgSend(*(id *)(a1 + 32), "isDepthEffectEnabled");
    v78 = objc_msgSend(*(id *)(a1 + 32), "isFloatingLayerFullscreen");
    v79 = MEMORY[0x1E0C809B0];
    if ((v76 & 1) == 0 && (v77 & 1) == 0 && (v78 & 1) == 0)
    {
      v80 = *(void **)(*(_QWORD *)(a1 + 32) + 2000);
      objc_msgSend(v80, "componentForType:identifier:", 19, CFSTR("_UIBacklightLuminance"));
      v81 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v80, "removeComponent:", v81);

      v94[0] = v79;
      v94[1] = 3221225472;
      v94[2] = __74__CSCoverSheetViewController__updateAppearanceForAODTransitionToInactive___block_invoke_2;
      v94[3] = &unk_1E8E2DC00;
      v94[4] = *(_QWORD *)(a1 + 32);
      v95 = CFSTR("_UIBacklightLuminance");
      objc_msgSend(MEMORY[0x1E0CEABB0], "performWithoutAnimation:", v94);

    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2000), "removeAllComponentsWithIdentifier:", CFSTR("_UIBacklightLuminance"));
    v82 = *(void **)(*(_QWORD *)(a1 + 32) + 2000);
    v83 = (void *)objc_opt_new();
    objc_msgSend(v83, "identifier:", CFSTR("_UIBacklightLuminance"));
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v84, "hidden:", 0);
    v85 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v85, "fakeStatusBar:", 1);
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v86, "priority:", 80);
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v82, "addComponent:", v87);

    v88 = *(_QWORD *)(a1 + 32);
    v89 = *(_QWORD *)(v88 + 1696);
    v91[0] = v79;
    v91[1] = 3221225472;
    v91[2] = __74__CSCoverSheetViewController__updateAppearanceForAODTransitionToInactive___block_invoke_3;
    v91[3] = &unk_1E8E2E168;
    v92 = CFSTR("_UIBacklightLuminance");
    v93 = v89;
    v91[4] = v88;
    objc_msgSend(MEMORY[0x1E0D01908], "addAlongsideAnimations:completion:", 0, v91);

  }
  return objc_msgSend(*(id *)(a1 + 32), "_updateActiveAppearanceForReason:", CFSTR("_UIBacklightLuminance"));
}

uint64_t __74__CSCoverSheetViewController__updateAppearanceForAODTransitionToInactive___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateActiveAppearanceForReason:", *(_QWORD *)(a1 + 40));
}

void __74__CSCoverSheetViewController__updateAppearanceForAODTransitionToInactive___block_invoke_3(uint64_t a1)
{
  void *v2;
  int IsZero;
  void *v4;
  uint64_t v5;

  objc_msgSend(*(id *)(a1 + 32), "coverSheetView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "foregroundViewPositionOffset");
  IsZero = BSFloatIsZero();

  if (IsZero)
  {
    objc_msgSend(*(id *)(a1 + 32), "coverSheetView");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "removeContentView");

  }
  v5 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 48) == *(_QWORD *)(v5 + 1696))
    objc_msgSend(*(id *)(v5 + 2000), "removeAllComponentsWithIdentifier:", *(_QWORD *)(a1 + 40));
}

- (void)getRotationContentSettings:(id *)a3 forWindow:(id)a4
{
  void *v5;
  int IsYes;

  -[CSCoverSheetViewController activeAppearance](self, "activeAppearance", a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "flagForComponentType:", 26);
  IsYes = BSSettingFlagIsYes();

  if (a3)
  {
    if (IsYes)
      a3->var6 = 0;
  }
}

- (BOOL)shouldAutorotate
{
  void *v3;
  char v4;
  void *v6;
  uint64_t v7;

  -[CSCoverSheetViewController delegate](self, "delegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "coverSheetViewControllerTraitsArbiterOrientationActuationEnabled:", self);

  if ((v4 & 1) != 0)
    return 1;
  if (__sb__runningInSpringBoard())
  {
    if (SBFEffectiveDeviceClass() != 2)
      return 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "userInterfaceIdiom");

    if (v7 != 1)
      return 0;
  }
  return !-[CSCoverSheetViewController isTransitioningInteractively](self, "isTransitioningInteractively");
}

- (int64_t)preferredInterfaceOrientationForPresentation
{
  objc_super v4;

  if (!-[CSCoverSheetViewController shouldAutorotate](self, "shouldAutorotate"))
    return 1;
  v4.receiver = self;
  v4.super_class = (Class)CSCoverSheetViewController;
  return -[CSCoverSheetViewController preferredInterfaceOrientationForPresentation](&v4, sel_preferredInterfaceOrientationForPresentation);
}

- (unint64_t)supportedInterfaceOrientations
{
  uint64_t v2;
  void *v4;
  char v5;
  id WeakRetained;
  void *v7;
  void *v8;
  unint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v15;
  int v16;
  char v17;
  void *v18;
  void *v19;
  void *v20;
  BOOL v21;
  objc_super v22;

  -[CSCoverSheetViewController delegate](self, "delegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "coverSheetViewControllerTraitsArbiterOrientationActuationEnabled:", self);

  if ((v5 & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
    if ((objc_msgSend(WeakRetained, "coverSheetViewControllerShouldPreserveOrientationForExternalTransition:", self) & 1) != 0)
    {
LABEL_3:
      -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "window");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "interfaceOrientation");
      v9 = XBInterfaceOrientationMaskForInterfaceOrientation();

LABEL_4:
      return v9;
    }
    if (__sb__runningInSpringBoard())
    {
      if (SBFEffectiveDeviceClass() != 2
        && !objc_msgSend(WeakRetained, "coverSheetViewControllerHasBeenDismissedSinceKeybagLock:", self))
      {
        goto LABEL_26;
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v15, "userInterfaceIdiom") == 1)
      {

      }
      else
      {
        v2 = objc_msgSend(WeakRetained, "coverSheetViewControllerHasBeenDismissedSinceKeybagLock:", self);

        if ((v2 & 1) == 0)
        {
LABEL_26:
          v9 = 2;
          goto LABEL_4;
        }
      }
    }
    v16 = __sb__runningInSpringBoard();
    v17 = v16;
    if (v16)
    {
      if (SBFEffectiveDeviceClass() == 2)
        goto LABEL_28;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      v2 = objc_claimAutoreleasedReturnValue();
      if (objc_msgSend((id)v2, "userInterfaceIdiom") == 1)
      {

        goto LABEL_28;
      }
    }
    -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "window");
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    if ((v17 & 1) != 0)
    {
      if (!v19)
        goto LABEL_37;
    }
    else
    {

      if (!v19)
        goto LABEL_37;
    }
LABEL_28:
    if (__sb__runningInSpringBoard())
    {
      if (SBFEffectiveDeviceClass() != 2 && !-[CSCoverSheetViewController dismissed](self, "dismissed"))
        goto LABEL_3;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v20, "userInterfaceIdiom") == 1)
      {

      }
      else
      {
        v21 = -[CSCoverSheetViewController dismissed](self, "dismissed");

        if (!v21)
          goto LABEL_3;
      }
    }
    if (-[CSCoverSheetViewController partiallyOnScreen](self, "partiallyOnScreen")
      || -[CSCoverSheetViewController lockOrientationWhileTransitioning](self, "lockOrientationWhileTransitioning"))
    {
      goto LABEL_3;
    }
LABEL_37:
    v9 = 30;
    goto LABEL_4;
  }
  -[CSCoverSheetViewController effectiveInterfaceOrientation](self, "effectiveInterfaceOrientation");
  v9 = XBInterfaceOrientationMaskForInterfaceOrientation();
  if (-[CSCoverSheetViewController shouldAutorotate](self, "shouldAutorotate"))
  {
    if (-[CSCoverSheetViewController isHostingAnApp](self, "isHostingAnApp"))
    {
      -[CSCoverSheetViewController hostedAppSceneHandle](self, "hostedAppSceneHandle");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "sceneIfExists");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "uiSettings");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v12, "deviceOrientationEventsEnabled");

      if (v13)
      {
        objc_msgSend((id)*MEMORY[0x1E0CEB258], "activeInterfaceOrientation");
        return XBInterfaceOrientationMaskForInterfaceOrientation();
      }
    }
    v22.receiver = self;
    v22.super_class = (Class)CSCoverSheetViewController;
    return -[CSCoverSheetViewController supportedInterfaceOrientations](&v22, sel_supportedInterfaceOrientations);
  }
  return v9;
}

- (void)viewWillTransitionToSize:(CGSize)a3 withTransitionCoordinator:(id)a4
{
  double height;
  double width;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  double v20;
  double v21;
  void *v22;
  BOOL v23;
  BOOL v24;
  uint64_t v25;
  id v26;
  id v27;
  _QWORD v28[4];
  id v29;
  CSCoverSheetViewController *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[5];
  id v37;
  uint64_t v38;
  double v39;
  BOOL v40;
  BOOL v41;
  objc_super v42;

  height = a3.height;
  width = a3.width;
  v7 = a4;
  SBFWindowForViewControllerTransition();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "_fromWindowOrientation");

  SBFWindowForViewControllerTransition();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "_toWindowOrientation");

  -[CSCoverSheetViewController visiblePageViewController](self, "visiblePageViewController");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "scrollView");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "contentOffset");
  v16 = v15;
  v18 = v17;

  +[CSAction actionWithType:](CSAction, "actionWithType:", 3);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController handleAction:fromSender:](self, "handleAction:fromSender:", v19, self);

  self->_preventAppearanceUpdatesForRotation = 1;
  if (-[CSCoverSheetViewController _appearState](self, "_appearState") == 2)
  {
    objc_msgSend(v7, "transitionDuration");
    -[CSOrientationUpdateControlling noteInterfaceOrientationChanged:duration:logMessage:](self->_orientationUpdateController, "noteInterfaceOrientationChanged:duration:logMessage:", v11, CFSTR("Cover Sheet is transitioning"));
  }
  v42.receiver = self;
  v42.super_class = (Class)CSCoverSheetViewController;
  -[CSCoverSheetViewControllerBase viewWillTransitionToSize:withTransitionCoordinator:](&v42, sel_viewWillTransitionToSize_withTransitionCoordinator_, v7, width, height);
  objc_msgSend(v7, "transitionDuration");
  v21 = v20;
  -[CSCoverSheetContextProviding wallpaperProvider](self->_coverSheetContext, "wallpaperProvider");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "wallpaperClientWillRotateToInterfaceOrientation:duration:", v11, v21);
  if ((unint64_t)(v9 - 3) > 1)
  {
    v24 = 0;
    v23 = (unint64_t)(v9 - 1) <= 1 && (unint64_t)(v11 - 1) < 2;
  }
  else
  {
    v23 = 0;
    v24 = (unint64_t)(v11 - 3) < 2;
  }
  v25 = MEMORY[0x1E0C809B0];
  v36[0] = MEMORY[0x1E0C809B0];
  v36[1] = 3221225472;
  v36[2] = __81__CSCoverSheetViewController_viewWillTransitionToSize_withTransitionCoordinator___block_invoke;
  v36[3] = &unk_1E8E2E1B8;
  v40 = v23;
  v41 = v24;
  v36[4] = self;
  v38 = v11;
  v37 = v22;
  v39 = v21;
  v28[0] = v25;
  v28[1] = 3221225472;
  v28[2] = __81__CSCoverSheetViewController_viewWillTransitionToSize_withTransitionCoordinator___block_invoke_2;
  v28[3] = &unk_1E8E2E1E0;
  v29 = v37;
  v30 = self;
  v32 = v9;
  v33 = v11;
  v31 = v12;
  v34 = v16;
  v35 = v18;
  v26 = v12;
  v27 = v37;
  objc_msgSend(v7, "animateAlongsideTransition:completion:", v36, v28);

}

void __81__CSCoverSheetViewController_viewWillTransitionToSize_withTransitionCoordinator___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  __int128 v6;
  __int128 v7;

  objc_msgSend(*(id *)(a1 + 32), "dismissHomeScreenOverlay");
  if (*(_BYTE *)(a1 + 64) || *(_BYTE *)(a1 + 65))
  {
    objc_msgSend(*(id *)(a1 + 32), "coverSheetView");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "_layoutWallpaperFloatingLayerContainerView");

  }
  objc_msgSend(*(id *)(a1 + 32), "coverSheetView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "updateContainerOrientationForBackgroundViews:", *(_QWORD *)(a1 + 48));

  objc_msgSend(*(id *)(a1 + 40), "wallpaperClientWillAnimateRotationToInterfaceOrientation:duration:", *(_QWORD *)(a1 + 48), *(double *)(a1 + 56));
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 1059) = 0;
  objc_msgSend(*(id *)(a1 + 32), "_updateAppearanceForTransitionToOrientation:", *(_QWORD *)(a1 + 48));
  objc_msgSend(*(id *)(a1 + 32), "_updateActiveAppearanceForReason:", CFSTR("Rotation"));
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 1059) = 1;
  objc_msgSend(*(id *)(a1 + 32), "visiblePageViewController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *(_OWORD *)(*(_QWORD *)(a1 + 32) + 1152);
  v7 = *(_OWORD *)(*(_QWORD *)(a1 + 32) + 1168);
  BSIntervalFractionForValue();
  objc_msgSend(v4, "updateTransitionToVisible:progress:mode:", 1, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1184), v6, v7);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1568), "hostViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hostDidChangeContentBounds");

  objc_msgSend(*(id *)(a1 + 32), "_updateRemoteContentInlineHorizontalMargin");
}

void __81__CSCoverSheetViewController_viewWillTransitionToSize_withTransitionCoordinator___block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  objc_class *v15;
  void *v16;
  objc_class *v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  void *v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  void *v30;
  __int16 v31;
  void *v32;
  uint64_t v33;
  CGPoint v34;

  v33 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "wallpaperClientDidRotateFromInterfaceOrientation:", *(_QWORD *)(a1 + 56));
  objc_msgSend(*(id *)(a1 + 40), "visiblePageViewController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "coverSheetView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "scrollView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "contentOffset");
  v6 = v5;
  v8 = v7;

  *(_BYTE *)(*(_QWORD *)(a1 + 40) + 1059) = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 40) + 1368) = 0;
  objc_msgSend(*(id *)(a1 + 40), "coverSheetView");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "_layoutWallpaperFloatingLayerContainerView");

  if (objc_msgSend(*(id *)(a1 + 40), "_wouldUpdateActiveAppearance"))
    objc_msgSend(*(id *)(a1 + 40), "_calculateAppearanceForCurrentOrientation");
  objc_msgSend(*(id *)(a1 + 40), "_updateActiveAppearanceForReason:", CFSTR("CompleteRotation"));
  objc_msgSend(*(id *)(a1 + 40), "mainPageContentViewController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "combinedListViewController");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "layoutListView");

  SBLogDashBoard();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    MEMORY[0x1D17E0ED0](*(_QWORD *)(a1 + 56));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x1D17E0ED0](*(_QWORD *)(a1 + 64));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = (objc_class *)objc_opt_class();
    NSStringFromClass(v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = (objc_class *)objc_opt_class();
    NSStringFromClass(v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    NSStringFromCGPoint(*(CGPoint *)(a1 + 72));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v34.x = v6;
    v34.y = v8;
    NSStringFromCGPoint(v34);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = 138544642;
    v22 = v13;
    v23 = 2114;
    v24 = v14;
    v25 = 2114;
    v26 = v16;
    v27 = 2114;
    v28 = v18;
    v29 = 2114;
    v30 = v19;
    v31 = 2114;
    v32 = v20;
    _os_log_impl(&dword_1D0337000, v12, OS_LOG_TYPE_DEFAULT, "DashBoard has transitioned from orientation %{public}@ to %{public}@. \nVisible page: %{public}@ -> %{public}@. \nScrollView content offset: %{public}@ -> %{public}@", (uint8_t *)&v21, 0x3Eu);

  }
}

- (void)viewDidMoveToWindow:(id)a3 shouldAppearOrDisappear:(BOOL)a4
{
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  objc_super v9;

  v9.receiver = self;
  v9.super_class = (Class)CSCoverSheetViewController;
  -[CSCoverSheetViewController viewDidMoveToWindow:shouldAppearOrDisappear:](&v9, sel_viewDidMoveToWindow_shouldAppearOrDisappear_, a3, a4);
  -[CSCoverSheetViewController view](self, "view");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "window");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "_windowInterfaceOrientation");

  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "updateContainerOrientationForBackgroundViews:", v7);

}

- (void)_updateAppearanceForTransitionToOrientation:(int64_t)a3
{
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;

  if (__sb__runningInSpringBoard())
  {
    if (SBFEffectiveDeviceClass() != 2)
      return;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "userInterfaceIdiom");

    if (v6 != 1)
      return;
  }
  if (_os_feature_enabled_impl())
  {
    -[CSAppearance removeAllComponentsWithIdentifier:](self->_localAppearance, "removeAllComponentsWithIdentifier:", CFSTR("ActiveComplicationContainer"));
    if ((unint64_t)(a3 - 3) > 1)
      +[CSComponent complicationSidebar](CSComponent, "complicationSidebar");
    else
      +[CSComponent complicationContainer](CSComponent, "complicationContainer");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "identifier:", CFSTR("ActiveComplicationContainer"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v8, "setHidden:", 1);
    -[CSAppearance addComponent:](self->_localAppearance, "addComponent:", v8);

  }
  self->_finalInterfaceOrientationForInProgressTransition = a3;
}

- (void)_setAppearanceForLandscape:(BOOL)a3
{
  CSCoverSheetViewController *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  CSCoverSheetViewController *v18;
  void *v19;
  unint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  char v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  char v29;
  void *v30;
  char v31;
  id v32;
  id v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  uint64_t v39;

  v3 = self;
  v39 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    if (__sb__runningInSpringBoard())
    {
      if (SBFEffectiveDeviceClass() == 2)
      {
LABEL_4:
        v4 = (void *)MEMORY[0x1E0C9AA60];
        goto LABEL_13;
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "userInterfaceIdiom");

      if (v6 == 1)
        goto LABEL_4;
    }
    if (_os_feature_enabled_impl())
      v4 = &unk_1E8E89700;
    else
      v4 = &unk_1E8E89718;
LABEL_13:
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v7 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(id *)v35;
      v10 = 0x1EFC12000uLL;
      v32 = *(id *)v35;
      do
      {
        v11 = 0;
        do
        {
          if (*(id *)v35 != v9)
            objc_enumerationMutation(v4);
          v12 = objc_msgSend(*(id *)(*((_QWORD *)&v34 + 1) + 8 * v11), "integerValue");
          v13 = *(int *)(v10 + 3444);
          objc_msgSend(*(id *)((char *)&v3->super.super.super.super.isa + v13), "componentForType:identifier:", v12, CFSTR("SBDashBoardThingsToHideInLandscape"));
          v14 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v14)
          {
            +[CSComponent componentWithType:](CSComponent, "componentWithType:", v12);
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v15, "identifier:", CFSTR("SBDashBoardThingsToHideInLandscape"));
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v16, "priority:", 20);
            v17 = v8;
            v18 = v3;
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v19, "hidden:", 1);
            v20 = v10;
            v21 = v4;
            v22 = (void *)objc_claimAutoreleasedReturnValue();

            v3 = v18;
            v8 = v17;

            objc_msgSend(*(id *)((char *)&v3->super.super.super.super.isa + v13), "addComponent:", v22);
            v4 = v21;
            v10 = v20;
            v9 = v32;
          }
          ++v11;
        }
        while (v8 != v11);
        v8 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
      }
      while (v8);
    }
    if (__sb__runningInSpringBoard())
    {
      if (SBFEffectiveDeviceClass() == 2 || !_os_feature_enabled_impl())
        return;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v23, "userInterfaceIdiom") == 1)
      {
LABEL_35:

        return;
      }
      v24 = _os_feature_enabled_impl();

      if ((v24 & 1) == 0)
        return;
    }
    v25 = (void *)objc_opt_new();
    objc_msgSend(v25, "identifier:", CFSTR("SBDashBoardThingsToHideInLandscape"));
    v26 = objc_claimAutoreleasedReturnValue();
    objc_msgSend((id)v26, "priority:", 20);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "shouldRenderInline:", 1);
    v23 = (void *)objc_claimAutoreleasedReturnValue();

    -[CSAppearance addComponent:](v3->_localAppearance, "addComponent:", v23);
    -[SBFLockScreenDateViewController setDateTimeAlignment:](v3->_dateViewController, "setDateTimeAlignment:", 0);
    -[CSBehavior addRestrictedCapabilities:](v3->_localBehavior, "addRestrictedCapabilities:", 2097220);
    -[SBFLockScreenDateViewController inlineComplicationViewController](v3->_dateViewController, "inlineComplicationViewController");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v26) = BSEqualObjects();

    if ((v26 & 1) == 0)
      -[SBFLockScreenDateViewController setInlineComplicationViewController:](v3->_dateViewController, "setInlineComplicationViewController:", v3->_landscapeInlineComplicationContainerViewController);
    if (-[CSCoverSheetViewController _isShowingInlineContent](v3, "_isShowingInlineContent"))
    {
      if (-[CSCoverSheetViewController isShowingMediaControls](v3, "isShowingMediaControls"))
        -[CSCoverSheetViewController _dismissRemoteViewControllerForReason:](v3, "_dismissRemoteViewControllerForReason:", 4);
    }
    goto LABEL_35;
  }
  -[CSAppearance removeAllComponentsWithIdentifier:](self->_localAppearance, "removeAllComponentsWithIdentifier:", CFSTR("SBDashBoardThingsToHideInLandscape"));
  if (__sb__runningInSpringBoard())
  {
    if (SBFEffectiveDeviceClass() == 2 || !_os_feature_enabled_impl())
      return;
    goto LABEL_38;
  }
  objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
  v33 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v33, "userInterfaceIdiom") == 1)
  {

    return;
  }
  v29 = _os_feature_enabled_impl();

  if ((v29 & 1) != 0)
  {
LABEL_38:
    -[SBFLockScreenDateViewController setDateTimeAlignment:](v3->_dateViewController, "setDateTimeAlignment:", 1);
    -[CSBehavior removeRestrictedCapabilities:](v3->_localBehavior, "removeRestrictedCapabilities:", 2097220);
    -[SBFLockScreenDateViewController inlineComplicationViewController](v3->_dateViewController, "inlineComplicationViewController");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = BSEqualObjects();

    if ((v31 & 1) == 0)
      -[SBFLockScreenDateViewController setInlineComplicationViewController:](v3->_dateViewController, "setInlineComplicationViewController:", v3->_inlineComplicationContainerViewController);
  }
}

- (void)_calculateAppearanceForCurrentOrientation
{
  int v3;
  int v4;
  _BOOL4 v5;
  void *v6;
  void *v7;
  void *v8;
  _BOOL8 v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;

  v3 = __sb__runningInSpringBoard();
  if (v3)
  {
    if (SBFEffectiveDeviceClass() == 2)
    {
      v4 = 0;
      goto LABEL_8;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v14 = (id)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v14, "userInterfaceIdiom") == 1)
    {
      v4 = 1;
      goto LABEL_8;
    }
  }
  v4 = v3 ^ 1;
  if ((_os_feature_enabled_impl() & 1) != 0)
  {
    v5 = 1;
    goto LABEL_19;
  }
LABEL_8:
  if (!__sb__runningInSpringBoard())
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v7, "userInterfaceIdiom"))
    {

      v8 = v14;
      if ((v4 & 1) != 0)
      {
LABEL_29:

        return;
      }
      return;
    }
    v5 = SBFEffectiveHomeButtonType() == 2;

    goto LABEL_19;
  }
  if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
  {
    v5 = 0;
LABEL_19:
    v6 = v14;
    if ((v4 & 1) == 0)
    {
LABEL_12:
      if (!v5)
        return;
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  v5 = SBFEffectiveHomeButtonType() == 2;
  v6 = v14;
  if (!v4)
    goto LABEL_12;
LABEL_20:

  if (v5)
  {
LABEL_21:
    v9 = (unint64_t)(-[CSCoverSheetViewController interfaceOrientation](self, "interfaceOrientation") - 3) < 2;
    -[CSCoverSheetViewController _setAppearanceForLandscape:](self, "_setAppearanceForLandscape:", v9);
    -[CSAppearance componentForType:identifier:](self->_localAppearance, "componentForType:identifier:", 2, CFSTR("D22_OVERRIDE"));
    v15 = (id)objc_claimAutoreleasedReturnValue();
    -[CSCoverSheetViewController traitCollection](self, "traitCollection");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v10, "verticalSizeClass") != 1)
      LODWORD(v9) = 0;

    v8 = v15;
    if ((v15 == 0) == v9)
    {
      if (v9)
      {
        +[CSComponent statusBar](CSComponent, "statusBar");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "priority:", 20);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "identifier:", CFSTR("D22_OVERRIDE"));
        v13 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v13, "setHidden:", 1);
        objc_msgSend(v13, "setFlag:", 0);
        objc_msgSend(v13, "setAlpha:", 0.0);
        -[CSAppearance addComponent:](self->_localAppearance, "addComponent:", v13);

      }
      else
      {
        -[CSAppearance removeComponent:](self->_localAppearance, "removeComponent:", v15);
      }
      v8 = v15;
    }
    goto LABEL_29;
  }
}

- (void)_displayWillAppearImplementation
{
  NSObject *v3;
  id v4;
  uint8_t v5[16];

  SBLogDashBoard();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1D0337000, v3, OS_LOG_TYPE_DEFAULT, "DashBoard switching to CSCoverSheetParticipantStateActive", v5, 2u);
  }

  self->_participantState = 2;
  v4 = (id)-[CSCoverSheetViewController view](self, "view");
  -[CSCoverSheetViewController _setHasContentAboveCoverSheet:](self, "_setHasContentAboveCoverSheet:", 0);
  -[CSCoverSheetViewController _listenForDisplayLayoutChanges:](self, "_listenForDisplayLayoutChanges:", 1);
  -[CSNotificationDispatcher setActive:](self->_notificationDispatcher, "setActive:", 1);
  -[CSCoverSheetViewController _handleEventType:](self, "_handleEventType:", 8);
}

- (void)_displayWillDisappearImplementation
{
  CSNotificationClearingTrigger *notificationClearingTrigger;
  id v4;

  -[CSCoverSheetViewController _listenForDisplayLayoutChanges:](self, "_listenForDisplayLayoutChanges:", 0);
  notificationClearingTrigger = self->_notificationClearingTrigger;
  -[CSMainPageContentViewController combinedListViewController](self->_mainPageContentViewController, "combinedListViewController");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  -[CSNotificationClearingTrigger setHadNotificationContentAtDisappearance:](notificationClearingTrigger, "setHadNotificationContentAtDisappearance:", objc_msgSend(v4, "hasContent"));

}

- (void)_displayDidDisappearImplementation
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  CSScrollGestureController *scrollGestureController;
  void *v11;
  UIView *statusBarBackgroundView;
  id WeakRetained;
  NSObject *v14;
  uint8_t v15[16];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  -[CSCoverSheetViewController _setHasContentAboveCoverSheet:](self, "_setHasContentAboveCoverSheet:", 0);
  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "resetScrollViewToMainPageAnimated:withCompletion:", 0, 0);

  -[CSCoverSheetViewController _handleEventType:](self, "_handleEventType:", 9);
  -[CSNotificationClearingTrigger setUiLocked:](self->_notificationClearingTrigger, "setUiLocked:", 0);
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  -[CSCoverSheetViewController pageViewControllers](self, "pageViewControllers");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v17;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v17 != v7)
          objc_enumerationMutation(v4);
        objc_msgSend(*(id *)(*((_QWORD *)&v16 + 1) + 8 * v8++), "dismissPresentationAnimated:", 0);
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v6);
  }

  if (-[CSCoverSheetViewController _isPresentingDismissableRemoteContent](self, "_isPresentingDismissableRemoteContent"))
  {
    -[CSCoverSheetViewController _dismissRemoteViewControllerForReason:](self, "_dismissRemoteViewControllerForReason:", 7);
  }
  -[CSPresentationViewController dismissPresentationAnimated:](self->_modalPresentationController, "dismissPresentationAnimated:", 0);
  -[CSNotificationDispatcher setActive:](self->_notificationDispatcher, "setActive:", 0);
  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "viewControllerDidDisappear");

  -[CSCoverSheetViewController setActiveAppearance:](self, "setActiveAppearance:", 0);
  -[CSScrollGestureController setDelegate:](self->_scrollGestureController, "setDelegate:", 0);
  -[CSScrollGestureController invalidate](self->_scrollGestureController, "invalidate");
  scrollGestureController = self->_scrollGestureController;
  self->_scrollGestureController = 0;

  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "setStatusBarBackgroundView:", 0);

  statusBarBackgroundView = self->_statusBarBackgroundView;
  self->_statusBarBackgroundView = 0;

  -[CSCoverSheetViewController _invalidateStatusBarAssertions](self, "_invalidateStatusBarAssertions");
  -[CSCoverSheetViewController dismissHomeScreenOverlay](self, "dismissHomeScreenOverlay");
  WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
  objc_msgSend(WeakRetained, "coverSheetViewController:requestsTouchIDDisabled:forReason:", self, 0, CFSTR("CSActiveBehavior"));
  objc_msgSend(WeakRetained, "coverSheetViewController:requestsPreArmDisabled:forReason:", self, 0, CFSTR("CSActiveBehavior"));
  SBLogDashBoard();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_1D0337000, v14, OS_LOG_TYPE_DEFAULT, "DashBoard switching to CSCoverSheetParticipantStateInactive", v15, 2u);
  }

  self->_participantState = 1;
}

- (void)_listenForDisplayLayoutChanges:(BOOL)a3
{
  _BOOL4 v3;
  void *v5;
  id v6;

  if (self->_listeningForDisplayLayoutChanges != a3)
  {
    v3 = a3;
    self->_listeningForDisplayLayoutChanges = a3;
    -[CSCoverSheetViewControllerBase _displayLayoutPublisher](self, "_displayLayoutPublisher");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (v3)
      objc_msgSend(v5, "addObserver:", self);
    else
      objc_msgSend(v5, "removeObserver:", self);

  }
}

- (void)coverSheetNotificationClearingTriggerDidFire:(id)a3
{
  id v4;

  +[CSEvent eventWithType:](CSEvent, "eventWithType:", 35);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController _handleEvent:](self, "_handleEvent:", v4);

}

- (void)passcodeViewControllerDidCancelPasscodeEntry:(id)a3
{
  NSObject *v4;
  _QWORD v5[5];
  _QWORD v6[5];
  uint8_t buf[16];

  if (-[CSInterstitialTransitionSource isTransitioning](self->_interstitialTransitionSource, "isTransitioning", a3))
  {
    SBLogDashBoard();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D0337000, v4, OS_LOG_TYPE_DEFAULT, "[CSViewController] Cancel button pressed while interstitial was transitioning", buf, 2u);
    }

    -[CSCoverSheetViewController updateInterstitialPresentationWithProgress:](self, "updateInterstitialPresentationWithProgress:", self->_initialInterstitialTransitionProgress);
    v5[4] = self;
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __75__CSCoverSheetViewController_passcodeViewControllerDidCancelPasscodeEntry___block_invoke;
    v6[3] = &unk_1E8E2DB38;
    v6[4] = self;
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = __75__CSCoverSheetViewController_passcodeViewControllerDidCancelPasscodeEntry___block_invoke_2;
    v5[3] = &unk_1E8E2E208;
    objc_msgSend(MEMORY[0x1E0CEABB0], "_animateUsingSpringWithTension:friction:interactive:animations:completion:", 0, v6, v5, 9300.0, 196.0);
  }
}

uint64_t __75__CSCoverSheetViewController_passcodeViewControllerDidCancelPasscodeEntry___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateInterstitialPresentationWithProgress:", 0.0);
}

uint64_t __75__CSCoverSheetViewController_passcodeViewControllerDidCancelPasscodeEntry___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "cleanupInterstitialPresentationToPresented:inPlace:", 0, 0);
}

- (BOOL)passcodeViewControllerShouldHideStatusBar:(id)a3
{
  void *v3;
  char v4;
  BOOL v5;
  uint64_t v7;

  -[CSPoseidonViewController poseidonContainerViewController](self->_poseidonViewController, "poseidonContainerViewController", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "coachingActive");

  v5 = 1;
  if ((v4 & 1) == 0)
  {
    v7 = SBFEffectiveArtworkSubtype();
    if (v7 > 2795)
    {
      if (v7 == 2796 || v7 == 2868)
        return v5;
    }
    else if (v7 == 2556 || v7 == 2622)
    {
      return v5;
    }
    return 0;
  }
  return v5;
}

- (BOOL)suppressesBanners
{
  void *v2;
  BOOL v3;

  if (self->_participantState != 2)
    return 0;
  -[CSCoverSheetViewController activeBehavior](self, "activeBehavior");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "notificationBehavior") != 2;

  return v3;
}

- (BOOL)suppressesControlCenter
{
  void *v2;
  char v3;

  if (self->_participantState != 2)
    return 0;
  -[CSCoverSheetViewController activeBehavior](self, "activeBehavior");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "areRestrictedCapabilities:", 128);

  return v3;
}

- (BOOL)suppressesScreenshots
{
  void *v2;
  char v3;

  -[CSCoverSheetViewController activeBehavior](self, "activeBehavior");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "areRestrictedCapabilities:", 0x4000);

  return v3;
}

- (BOOL)handleHomeButtonPress
{
  return -[CSCoverSheetViewController _handleEventType:](self, "_handleEventType:", 27);
}

- (BOOL)handleHomeButtonDoublePress
{
  return 1;
}

- (BOOL)handleHomeButtonLongPress
{
  return 0;
}

- (BOOL)handleLockButtonPress
{
  return -[CSCoverSheetViewController _handleEventType:](self, "_handleEventType:", 28);
}

- (BOOL)handleVoiceCommandButtonPress
{
  return -[CSCoverSheetViewController _handleEventType:](self, "_handleEventType:", 29);
}

- (BOOL)handleVolumeUpButtonPress
{
  return -[CSCoverSheetViewController _handleEventType:](self, "_handleEventType:", 30);
}

- (BOOL)handleVolumeDownButtonPress
{
  return -[CSCoverSheetViewController _handleEventType:](self, "_handleEventType:", 31);
}

- (BOOL)handleHeadsetButtonPress:(BOOL)a3
{
  uint64_t v3;

  if (a3)
    v3 = 33;
  else
    v3 = 32;
  return -[CSCoverSheetViewController _handleEventType:](self, "_handleEventType:", v3);
}

- (int64_t)statusBarStyle
{
  void *v2;
  int64_t v3;

  -[CSCoverSheetViewControllerBase legibilitySettings](self, "legibilitySettings");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "style") != 2;

  return v3;
}

- (BOOL)externalLockProvidersRequireUnlock
{
  NSHashTable *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t i;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v2 = self->_externalLockProviders;
  v3 = -[NSHashTable countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = 0;
    v6 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v2);
        if ((v5 & 1) != 0)
          v5 = 1;
        else
          v5 = objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * i), "isLocked", (_QWORD)v9);
      }
      v4 = -[NSHashTable countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

- (BOOL)externalLockProvidersShowPasscode
{
  NSHashTable *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = self->_externalLockProviders;
  v3 = -[NSHashTable countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v9 != v4)
          objc_enumerationMutation(v2);
        v6 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * i);
        if (objc_msgSend(v6, "participantState", (_QWORD)v8) == 2
          && objc_msgSend(v6, "isLocked")
          && (objc_msgSend(v6, "showPasscode") & 1) != 0)
        {
          LOBYTE(v3) = 1;
          goto LABEL_13;
        }
      }
      v3 = -[NSHashTable countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v3)
        continue;
      break;
    }
  }
LABEL_13:

  return v3;
}

- (BOOL)isInlinePasscodeLockVisible
{
  return self->_interstitialTransitionSource && self->_hasPresentedForInterstitialTransitionSource
      || -[CSCoverSheetViewController isPasscodeLockVisible](self, "isPasscodeLockVisible");
}

- (BOOL)isPasscodeLockVisible
{
  void *v3;

  +[CSCoverSheetViewControllerBase coverSheetIdentifier](CSPasscodeViewController, "coverSheetIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(self) = -[CSCoverSheetViewController _isPresentingModalViewControllerWithIdentifier:](self, "_isPresentingModalViewControllerWithIdentifier:", v3);

  return (char)self;
}

- (void)setPasscodeLockVisible:(BOOL)a3 animated:(BOOL)a4
{
  -[CSCoverSheetViewController setPasscodeLockVisible:animated:completion:](self, "setPasscodeLockVisible:animated:completion:", a3, a4, 0);
}

- (void)setPasscodeLockVisible:(BOOL)a3 animated:(BOOL)a4 completion:(id)a5
{
  -[CSCoverSheetViewController setPasscodeLockVisible:animated:forceBiometricPresentation:completion:](self, "setPasscodeLockVisible:animated:forceBiometricPresentation:completion:", a3, a4, 0, a5);
}

- (void)setPasscodeLockVisible:(BOOL)a3 animated:(BOOL)a4 forceBiometricPresentation:(BOOL)a5 completion:(id)a6
{
  _BOOL8 v7;
  _BOOL4 v8;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  CSPasscodeViewController *v18;
  id WeakRetained;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _QWORD v40[5];
  id v41;
  _BYTE v42[128];
  uint64_t v43;

  v7 = a4;
  v8 = a3;
  v43 = *MEMORY[0x1E0C80C00];
  v10 = a6;
  +[CSCoverSheetViewControllerBase coverSheetIdentifier](CSPasscodeViewController, "coverSheetIdentifier");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController delegate](self, "delegate");
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = (void *)v12;
  if (v8)
  {
    if (!-[CSCoverSheetViewController _isPresentingModalViewControllerWithIdentifier:](self, "_isPresentingModalViewControllerWithIdentifier:", v11)&& !-[CSCoverSheetViewController isUnlockDisabled](self, "isUnlockDisabled"))
    {
      v34 = v13;
      -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "componentForType:property:", 19, 64);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "color");
      v16 = objc_claimAutoreleasedReturnValue();

      -[CSCoverSheetViewController _customLockScreenActionContext](self, "_customLockScreenActionContext");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = -[CSPasscodeViewController initWithOptions:]([CSPasscodeViewController alloc], "initWithOptions:", 0);
      -[CSPasscodeViewController setCoverSheetContext:](v18, "setCoverSheetContext:", self->_coverSheetContext);
      WeakRetained = objc_loadWeakRetained((id *)&self->_wallpaperColorProvider);
      -[CSPasscodeViewController setWallpaperColorProvider:](v18, "setWallpaperColorProvider:", WeakRetained);

      v33 = (void *)v16;
      -[CSPasscodeViewController setWallpaperAverageColorOverride:](v18, "setWallpaperAverageColorOverride:", v16);
      if (a5)
        v20 = 1;
      else
        v20 = objc_msgSend(v17, "wantsBiometricPresentation");
      -[CSPasscodeViewController setUseBiometricPresentation:](v18, "setUseBiometricPresentation:", v20);
      -[CSPasscodeViewController setFaceOcclusionMonitor:](v18, "setFaceOcclusionMonitor:", self->_faceOcclusionMonitor);
      -[CSPasscodeViewController setDelegate:](v18, "setDelegate:", self);
      objc_msgSend(MEMORY[0x1E0DAC5A0], "sharedInstance");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v28, "hasPearlSupport") & 1) != 0)
        v29 = 0;
      else
        v29 = MGGetBoolAnswer() ^ 1;
      -[CSPasscodeViewController setBiometricButtonsInitiallyVisible:](v18, "setBiometricButtonsInitiallyVisible:", v29);
      v30 = 1;
      -[CSPasscodeViewController setShowProudLock:](v18, "setShowProudLock:", 1);
      -[CSProudLockViewController proudLockContainerViewController](self->_proudLockViewController, "proudLockContainerViewController");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      -[CSPasscodeViewController setProudLockContainerViewControllerToUpdate:](v18, "setProudLockContainerViewControllerToUpdate:", v31);

      objc_msgSend(v17, "unlockDestination");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      -[CSPasscodeViewController setUnlockDestination:](v18, "setUnlockDestination:", v32);

      if (!a5)
        v30 = objc_msgSend(v17, "confirmedNotInPocket");
      -[CSPasscodeViewController setConfirmedNotInPocket:](v18, "setConfirmedNotInPocket:", v30);
      -[CSCoverSheetViewController _presentModalViewController:animated:completion:](self, "_presentModalViewController:animated:completion:", v18, v7, v10);

      v13 = v34;
    }
  }
  else
  {
    v35 = (void *)v12;
    v40[0] = MEMORY[0x1E0C809B0];
    v40[1] = 3221225472;
    v40[2] = __100__CSCoverSheetViewController_setPasscodeLockVisible_animated_forceBiometricPresentation_completion___block_invoke;
    v40[3] = &unk_1E8E2DF80;
    v40[4] = self;
    v21 = v10;
    v41 = v10;
    -[CSCoverSheetViewController _dismissModalViewControllersWithIdentifier:animated:completion:](self, "_dismissModalViewControllersWithIdentifier:animated:completion:", v11, v7, v40);
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v22 = (void *)-[NSHashTable copy](self->_observers, "copy");
    v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v36, v42, 16);
    if (v23)
    {
      v24 = v23;
      v25 = *(_QWORD *)v37;
      do
      {
        v26 = 0;
        do
        {
          if (*(_QWORD *)v37 != v25)
            objc_enumerationMutation(v22);
          v27 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * v26);
          if ((objc_opt_respondsToSelector() & 1) != 0)
            objc_msgSend(v27, "coverSheetViewControllerDidDismissPasscodeLockView:", self);
          ++v26;
        }
        while (v24 != v26);
        v24 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v36, v42, 16);
      }
      while (v24);
    }

    v13 = v35;
    objc_msgSend(v35, "coverSheetViewControllerDidDismissInlinePasscode:", self);

    v10 = v21;
  }

}

void __100__CSCoverSheetViewController_setPasscodeLockVisible_animated_forceBiometricPresentation_completion___block_invoke(uint64_t a1)
{
  uint64_t v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "interstitialTransitionSource");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "isTransitioning"))
    objc_msgSend(v3, "cancelTransition");
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(void))(v2 + 16))();

}

- (void)setAuthenticated:(BOOL)a3
{
  _BOOL8 v3;
  id WeakRetained;
  void *v6;
  _QWORD v7[5];

  v3 = a3;
  if (-[CSCoverSheetViewController isAuthenticated](self, "isAuthenticated") != a3)
  {
    self->_authenticated = v3;
    -[CSCoverSheetViewController _sendAuthenticationChangedEvent](self, "_sendAuthenticationChangedEvent");
    if (v3)
    {
      -[CSCoverSheetViewController _updateCoachingString](self, "_updateCoachingString");
    }
    else
    {
      v7[0] = MEMORY[0x1E0C809B0];
      v7[1] = 3221225472;
      v7[2] = __47__CSCoverSheetViewController_setAuthenticated___block_invoke;
      v7[3] = &unk_1E8E2DB38;
      v7[4] = self;
      objc_msgSend(MEMORY[0x1E0CEABB0], "performWithoutAnimation:", v7);
      if (-[CSCoverSheetViewController _isSpotlightBehaviorRestricted](self, "_isSpotlightBehaviorRestricted")
        && self->_spotlightModalViewController)
      {
        WeakRetained = objc_loadWeakRetained((id *)&self->_coverSheetSpotlightPresenter);
        objc_msgSend(WeakRetained, "dismissSpotlightAnimated:", 1);

      }
    }
  }
  -[CSHomeButtonShowPasscodeRecognizer noteAuthenticated:](self->_homeButtonShowPasscodeRecognizer, "noteAuthenticated:", v3);
  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "updateUIForAuthenticated:", v3);

  if (v3)
    -[CSCoverSheetViewController _setupQuickNoteGestureRecognizer](self, "_setupQuickNoteGestureRecognizer");
  -[CSCoverSheetViewController _updateActiveBehaviorsForReason:](self, "_updateActiveBehaviorsForReason:", CFSTR("UserAuthenticationChanged"));
  -[CSNotificationClearingTrigger setAuthenticated:](self->_notificationClearingTrigger, "setAuthenticated:", v3);
}

uint64_t __47__CSCoverSheetViewController_setAuthenticated___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setNeedsUpdateOfSupportedInterfaceOrientations");
}

- (void)_sendAuthenticationChangedEvent
{
  void *v3;
  id v4;

  +[CSEvent eventWithType:](CSEvent, "eventWithType:", 13);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", self->_authenticated);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setValue:", v3);

  -[CSCoverSheetViewController _handleEvent:](self, "_handleEvent:", v4);
}

- (BOOL)isUnlockDisabled
{
  void *v2;
  int v3;
  NSObject *v4;

  -[CSCoverSheetViewController activeBehavior](self, "activeBehavior");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "areRestrictedCapabilities:", 56);
  if (v3)
  {
    SBLogDashBoard();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      -[CSCoverSheetViewController isUnlockDisabled].cold.1();

  }
  return v3;
}

- (void)respondToUIUnlockFromSource:(int)a3
{
  id v3;

  if (a3 <= 0x29 && ((1 << a3) & 0x2020202052ELL) != 0)
  {
    -[CSMainPageContentViewController combinedListViewController](self->_mainPageContentViewController, "combinedListViewController");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleDisplayWake");

  }
}

- (BOOL)willUIUnlockFromSource:(int)a3
{
  uint64_t v3;
  NSObject *v5;
  NSHashTable *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  BOOL v12;
  NSHashTable *v13;
  int v14;
  char v15;
  NSObject *v16;
  void *v17;
  const char *v18;
  NSObject *v19;
  uint32_t v20;
  NSObject *v21;
  void *v23;
  void *v24;
  BOOL v25;
  const __CFString *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint8_t buf[4];
  unint64_t v32;
  __int16 v33;
  const __CFString *v34;
  _BYTE v35[128];
  uint64_t v36;

  v3 = *(_QWORD *)&a3;
  v36 = *MEMORY[0x1E0C80C00];
  SBLogDashBoard();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v32 = v3;
    _os_log_impl(&dword_1D0337000, v5, OS_LOG_TYPE_DEFAULT, "[UIUnlock] Can UIUnlock from source %ld?", buf, 0xCu);
  }

  if (-[CSCoverSheetViewController isUnlockDisabled](self, "isUnlockDisabled"))
  {
    SBLogDashBoard();
    v6 = (NSHashTable *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(&v6->super, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D0337000, &v6->super, OS_LOG_TYPE_DEFAULT, "[UIUnlock] Returning NO because unlock is disabled.", buf, 2u);
    }
    goto LABEL_24;
  }
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v6 = self->_externalLockProviders;
  v7 = -[NSHashTable countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
  if (!v7)
    goto LABEL_16;
  v8 = v7;
  v9 = *(_QWORD *)v28;
LABEL_8:
  v10 = 0;
  while (1)
  {
    if (*(_QWORD *)v28 != v9)
      objc_enumerationMutation(v6);
    v11 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * v10);
    if (objc_msgSend(v11, "participantState", (_QWORD)v27) == 2
      && objc_msgSend(v11, "isLocked")
      && (objc_msgSend(v11, "unlockFromSource:", v3) & 1) == 0)
    {
      break;
    }
    if (v8 == ++v10)
    {
      v8 = -[NSHashTable countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
      if (!v8)
      {
LABEL_16:

        v12 = -[CSCoverSheetViewController isPasscodeLockVisible](self, "isPasscodeLockVisible");
        -[CSCoverSheetViewController activeBehavior](self, "activeBehavior");
        v13 = (NSHashTable *)objc_claimAutoreleasedReturnValue();
        v6 = v13;
        v14 = v3 - 1;
        v15 = 1;
        switch(v14)
        {
          case 0:
          case 16:
            +[CSLockScreenDomain rootSettings](CSLockScreenDomain, "rootSettings");
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            v15 = objc_msgSend(v23, "autoDismissUnlockedLockScreen");

            goto LABEL_17;
          case 1:
          case 2:
          case 3:
          case 7:
          case 8:
          case 9:
          case 10:
          case 12:
          case 17:
          case 18:
          case 23:
          case 24:
          case 25:
          case 28:
          case 29:
          case 32:
          case 33:
          case 40:
            goto LABEL_17;
          case 14:
            +[CSEvent eventWithType:](CSEvent, "eventWithType:", 27);
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            v25 = -[CSCoverSheetViewController wouldHandleButtonEvent:](self, "wouldHandleButtonEvent:", v24);

            if (v25)
            {
              v15 = 0;
              v26 = CFSTR("the home button is being handled manually");
              goto LABEL_35;
            }
            v15 = 1;
            goto LABEL_17;
          case 22:
            if (v12)
            {
              v26 = CFSTR("we're showing the passcode UI");
            }
            else
            {
              if ((-[NSHashTable areRestrictedCapabilities:](v13, "areRestrictedCapabilities:", 8) & 1) == 0)
              {
LABEL_17:
                SBLogDashBoard();
                v16 = objc_claimAutoreleasedReturnValue();
                if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
                  goto LABEL_20;
                NSStringFromBOOL();
                v17 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138412290;
                v32 = (unint64_t)v17;
                v18 = "[UIUnlock] Returning %@.";
                v19 = v16;
                v20 = 12;
                goto LABEL_19;
              }
              v15 = 0;
              v26 = CFSTR("CSCapabilityTouchID is restricted");
            }
LABEL_35:
            SBLogDashBoard();
            v16 = objc_claimAutoreleasedReturnValue();
            if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
            {
LABEL_20:

              goto LABEL_25;
            }
            NSStringFromBOOL();
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412546;
            v32 = (unint64_t)v17;
            v33 = 2112;
            v34 = v26;
            v18 = "[UIUnlock] Returning %@ because %@.";
            v19 = v16;
            v20 = 22;
LABEL_19:
            _os_log_impl(&dword_1D0337000, v19, OS_LOG_TYPE_DEFAULT, v18, buf, v20);

            goto LABEL_20;
          default:
            v15 = 0;
            goto LABEL_17;
        }
      }
      goto LABEL_8;
    }
  }
  SBLogDashBoard();
  v21 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v32 = (unint64_t)v11;
    _os_log_impl(&dword_1D0337000, v21, OS_LOG_TYPE_DEFAULT, "[UIUnlock] Returning NO because external lock provider said so: %@", buf, 0xCu);
  }

LABEL_24:
  v15 = 0;
LABEL_25:

  return v15;
}

- (void)prepareForUIUnlock
{
  -[CSCoverSheetViewController _listenForDisplayLayoutChanges:](self, "_listenForDisplayLayoutChanges:", 0);
}

- (void)finishUIUnlockFromSource:(int)a3
{
  void *v5;
  int v6;
  void *v7;

  -[CSCoverSheetViewController activeBehavior](self, "activeBehavior", *(_QWORD *)&a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "areRestrictedCapabilities:", 56);

  if (v6)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Invalid condition not satisfying: %@"), CFSTR("[[self activeBehavior] areRestrictedCapabilities:CSCapabilityUnlock] == NO"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      -[CSCoverSheetViewController finishUIUnlockFromSource:].cold.1(a2);
    objc_msgSend(objc_retainAutorelease(v7), "UTF8String");
    _bs_set_crash_log_message();
    __break(0);
  }
  else
  {
    -[CSCoverSheetViewController _handleEventType:](self, "_handleEventType:", 12);
  }
}

- (void)_setDidDismissSinceScreenOn:(BOOL)a3
{
  void *v4;
  void *v5;
  id v6;

  if (self->_didDismissSinceScreenOn != a3)
  {
    self->_didDismissSinceScreenOn = a3;
    -[CSAppearance removeAllComponentsWithIdentifier:](self->_localAppearance, "removeAllComponentsWithIdentifier:", CFSTR("didDismissSinceScreenOn"));
    +[CSComponent componentWithType:](CSComponent, "componentWithType:", 12);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "identifier:", CFSTR("didDismissSinceScreenOn"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "priority:", 10);
    v6 = (id)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v6, "setSuppressTeachableMomentsAnimation:", BSSettingFlagIfYes());
    -[CSAppearance addComponent:](self->_localAppearance, "addComponent:", v6);
    -[CSCoverSheetViewController _updateActiveAppearanceForReason:](self, "_updateActiveAppearanceForReason:", CFSTR("didDismissSinceScreenOn"));

  }
}

- (void)_setDismissed:(BOOL)a3
{
  if (self->_dismissed != a3)
  {
    self->_dismissed = a3;
    if (a3)
      -[CSCoverSheetViewController _setDidDismissSinceScreenOn:](self, "_setDidDismissSinceScreenOn:", 1);
    -[CSCoverSheetViewController setNeedsUpdateOfSupportedInterfaceOrientations](self, "setNeedsUpdateOfSupportedInterfaceOrientations");
  }
}

- (BOOL)canBeDeactivatedForUIUnlockFromSource:(int)a3
{
  void *v4;
  char v5;

  -[CSCoverSheetViewController activeBehavior](self, "activeBehavior", *(_QWORD *)&a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "areRestrictedCapabilities:", 56);

  if ((v5 & 1) != 0)
    return 0;
  else
    return !-[CSCoverSheetViewController externalLockProvidersRequireUnlock](self, "externalLockProvidersRequireUnlock");
}

- (void)jiggleLockIcon
{
  void *v3;

  objc_msgSend((id)*MEMORY[0x1E0CEB258], "statusBar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "jiggleLockIcon");

  -[CSProudLockViewController updateLockForBiometricMatchFailure](self->_proudLockViewController, "updateLockForBiometricMatchFailure");
}

- (unint64_t)visibleNotificationCount
{
  void *v2;
  unint64_t v3;

  -[CSMainPageContentViewController combinedListViewController](self->_mainPageContentViewController, "combinedListViewController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "visibleNotificationCount");

  return v3;
}

- (BOOL)isInteractingWithNotificationList
{
  void *v2;
  char v3;

  -[CSMainPageContentViewController combinedListViewController](self->_mainPageContentViewController, "combinedListViewController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isInteractingWithNotificationList");

  return v3;
}

- (BOOL)contentOccludesBackground
{
  _BOOL4 v3;

  v3 = -[CSCoverSheetViewController isPasscodeLockVisible](self, "isPasscodeLockVisible");
  if (v3)
    LOBYTE(v3) = !-[CSInterstitialTransitionSource isTransitioning](self->_interstitialTransitionSource, "isTransitioning");
  return v3;
}

- (void)prepareForInterstitialPresentation
{
  void *v3;
  char v4;
  void *v5;
  CSInterstitialTransitionSource *v6;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;
  CSCoverSheetViewController *v11;

  -[CSCoverSheetViewController currentTransitionSource](self, "currentTransitionSource");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isTransitioning");

  if ((v4 & 1) == 0)
  {
    -[CSCoverSheetViewController _passcodeViewController](self, "_passcodeViewController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    self->_interstitialTransitionStartedFromPasscodePresented = v5 != 0;
    v6 = objc_alloc_init(CSInterstitialTransitionSource);
    -[CSInterstitialTransitionSource setTransitioningDelegate:](v6, "setTransitioningDelegate:", self);
    -[CSCoverSheetViewController setInterstitialTransitionSource:](self, "setInterstitialTransitionSource:", v6);
    -[CSInterstitialTransitionSource prepareForPresentation](v6, "prepareForPresentation");
    -[CSCoverSheetViewController attemptPhoneUnlockWithWatch](self, "attemptPhoneUnlockWithWatch");
    -[CSCoverSheetViewController setPasscodeLockVisible:animated:forceBiometricPresentation:completion:](self, "setPasscodeLockVisible:animated:forceBiometricPresentation:completion:", 1, 0, 1, 0);
    if (!v5)
    {
      -[CSCoverSheetViewController _passcodeViewController](self, "_passcodeViewController");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
    }
    objc_msgSend(v5, "beginInteractivePresentationTransitionForInitialTransition:", !self->_interstitialTransitionStartedFromPasscodePresented);
    v7 = (void *)MEMORY[0x1E0CEABB0];
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __64__CSCoverSheetViewController_prepareForInterstitialPresentation__block_invoke;
    v9[3] = &unk_1E8E2DC00;
    v10 = v5;
    v11 = self;
    v8 = v5;
    objc_msgSend(v7, "_performWithoutRetargetingAnimations:", v9);
    self->_initialInterstitialTransitionProgress = -1.0;

  }
}

uint64_t __64__CSCoverSheetViewController_prepareForInterstitialPresentation__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateInteractiveTransitionWithPercent:forInitialTransition:", *(_BYTE *)(*(_QWORD *)(a1 + 40) + 1520) == 0, 0.0);
}

- (void)updateInterstitialPresentationWithProgress:(double)a3
{
  double initialInterstitialTransitionProgress;
  void *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  _QWORD v13[4];
  id v14;
  CSCoverSheetViewController *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  initialInterstitialTransitionProgress = self->_initialInterstitialTransitionProgress;
  if (initialInterstitialTransitionProgress < 0.0)
  {
    self->_initialInterstitialTransitionProgress = a3;
    initialInterstitialTransitionProgress = a3;
  }
  -[CSCoverSheetViewController interstitialTransitionSource](self, "interstitialTransitionSource");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v6, "isTransitioning"))
  {
    objc_msgSend(v6, "updatePresentationWithProgress:", a3 - initialInterstitialTransitionProgress + a3 - initialInterstitialTransitionProgress);
    v7 = *(_OWORD *)(MEMORY[0x1E0D013B0] + 16);
    v17 = *MEMORY[0x1E0D013B0];
    v18 = v7;
    BSUIConstrainValueToIntervalWithRubberBand();
    v9 = v8;
    -[CSCoverSheetViewController _passcodeViewController](self, "_passcodeViewController");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = (void *)MEMORY[0x1E0CEABB0];
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __73__CSCoverSheetViewController_updateInterstitialPresentationWithProgress___block_invoke;
    v13[3] = &unk_1E8E2E230;
    v16 = v9;
    v14 = v10;
    v15 = self;
    v12 = v10;
    objc_msgSend(v11, "_animateUsingSpringWithTension:friction:interactive:animations:completion:", 0, v13, &__block_literal_global_231, 9300.0, 196.0);

  }
}

void __73__CSCoverSheetViewController_updateInterstitialPresentationWithProgress___block_invoke(uint64_t a1)
{
  void *v2;
  float minimum;
  float maximum;
  float preferred;
  id v6;
  uint64_t v7;
  double v8;
  double v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  uint64_t v13;
  CAFrameRateRange v14;

  v2 = (void *)MEMORY[0x1E0CEABB0];
  v14 = CAFrameRateRangeMake(80.0, 120.0, 120.0);
  minimum = v14.minimum;
  maximum = v14.maximum;
  preferred = v14.preferred;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __73__CSCoverSheetViewController_updateInterstitialPresentationWithProgress___block_invoke_2;
  v10[3] = &unk_1E8E2E230;
  v6 = *(id *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 40);
  v11 = v6;
  v12 = v7;
  *(float *)&v8 = maximum;
  *(float *)&v9 = preferred;
  objc_msgSend(v2, "sb_modifyAnimationsWithPreferredFrameRateRange:updateReason:animations:", 1114125, v10, COERCE_DOUBLE(__PAIR64__(HIDWORD(v13), LODWORD(minimum))), v8, v9);

}

uint64_t __73__CSCoverSheetViewController_updateInterstitialPresentationWithProgress___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateInteractiveTransitionWithPercent:forInitialTransition:", *(_BYTE *)(*(_QWORD *)(a1 + 40) + 1520) == 0, *(double *)(a1 + 48));
}

- (void)cleanupInterstitialPresentationToPresented:(BOOL)a3 inPlace:(BOOL)a4
{
  _BOOL4 v4;
  _BOOL8 v5;
  void *v7;
  double v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  void (**v14)(_QWORD);
  void *v15;
  _QWORD v16[4];
  void (**v17)(_QWORD);
  _QWORD v18[4];
  id v19;
  CSCoverSheetViewController *v20;
  id v21;
  double v22;
  _QWORD v23[4];
  id v24;
  CSCoverSheetViewController *v25;
  id v26;
  BOOL v27;

  v4 = a4;
  v5 = a3;
  -[CSCoverSheetViewController interstitialTransitionSource](self, "interstitialTransitionSource");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v7, "isTransitioning"))
  {
    if (v5)
      v8 = 1.0;
    else
      v8 = 0.0;
    if (v5 && !self->_hasPresentedForInterstitialTransitionSource)
    {
      self->_hasPresentedForInterstitialTransitionSource = 1;
      -[CSCoverSheetViewController delegate](self, "delegate");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "coverSheetViewControllerWillPresentInlinePasscode:", self);

    }
    -[CSCoverSheetViewController _passcodeViewController](self, "_passcodeViewController");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = MEMORY[0x1E0C809B0];
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __81__CSCoverSheetViewController_cleanupInterstitialPresentationToPresented_inPlace___block_invoke;
    v23[3] = &unk_1E8E2E298;
    v12 = v7;
    v24 = v12;
    v25 = self;
    v13 = v10;
    v26 = v13;
    v27 = v5;
    v14 = (void (**)(_QWORD))MEMORY[0x1D17E1614](v23);
    objc_msgSend(v13, "commitingToEndTransitionToPresented:forInitialTransition:", v5, !self->_interstitialTransitionStartedFromPasscodePresented);
    if (v4)
    {
      v14[2](v14);
    }
    else
    {
      v15 = (void *)MEMORY[0x1E0CEABB0];
      v18[0] = v11;
      v18[1] = 3221225472;
      v18[2] = __81__CSCoverSheetViewController_cleanupInterstitialPresentationToPresented_inPlace___block_invoke_2;
      v18[3] = &unk_1E8E2DA80;
      v22 = v8;
      v19 = v13;
      v20 = self;
      v21 = v12;
      v16[0] = v11;
      v16[1] = 3221225472;
      v16[2] = __81__CSCoverSheetViewController_cleanupInterstitialPresentationToPresented_inPlace___block_invoke_4;
      v16[3] = &unk_1E8E2E2C0;
      v17 = v14;
      objc_msgSend(v15, "_animateUsingSpringWithTension:friction:interactive:animations:completion:", 0, v18, v16, 240.0, 30.0);

    }
  }
  self->_initialInterstitialTransitionProgress = -1.0;

}

void __81__CSCoverSheetViewController_cleanupInterstitialPresentationToPresented_inPlace___block_invoke(uint64_t a1)
{
  _BYTE *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "cleanupPresentation");
  objc_msgSend(*(id *)(a1 + 40), "setInterstitialTransitionSource:", 0);
  objc_msgSend(*(id *)(a1 + 48), "endInteractiveTransitionToPresented:forInitialTransition:", *(unsigned __int8 *)(a1 + 56), *(_BYTE *)(*(_QWORD *)(a1 + 40) + 1520) == 0);
  v2 = *(_BYTE **)(a1 + 40);
  if (!*(_BYTE *)(a1 + 56) && !v2[1520])
  {
    objc_msgSend(v2, "setPasscodeLockVisible:animated:", 0, 0);
    v2 = *(_BYTE **)(a1 + 40);
  }
  objc_msgSend(v2, "delegate");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "coverSheetViewControllerDidDismissInlinePasscode:", *(_QWORD *)(a1 + 40));

}

void __81__CSCoverSheetViewController_cleanupInterstitialPresentationToPresented_inPlace___block_invoke_2(uint64_t a1)
{
  void *v2;
  float minimum;
  float maximum;
  float preferred;
  id v6;
  uint64_t v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  _QWORD v12[4];
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  CAFrameRateRange v17;

  v2 = (void *)MEMORY[0x1E0CEABB0];
  v17 = CAFrameRateRangeMake(80.0, 120.0, 120.0);
  minimum = v17.minimum;
  maximum = v17.maximum;
  preferred = v17.preferred;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __81__CSCoverSheetViewController_cleanupInterstitialPresentationToPresented_inPlace___block_invoke_3;
  v12[3] = &unk_1E8E2DA80;
  v6 = *(id *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(void **)(a1 + 48);
  v13 = v6;
  v14 = v7;
  v15 = v8;
  *(float *)&v9 = minimum;
  *(float *)&v10 = maximum;
  *(float *)&v11 = preferred;
  objc_msgSend(v2, "_modifyAnimationsWithPreferredFrameRateRange:updateReason:animations:", 1114125, v12, v9, v10, v11);

}

uint64_t __81__CSCoverSheetViewController_cleanupInterstitialPresentationToPresented_inPlace___block_invoke_3(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "updateInteractiveTransitionWithPercent:forInitialTransition:", *(_BYTE *)(*(_QWORD *)(a1 + 40) + 1520) == 0, *(double *)(a1 + 56));
  return objc_msgSend(*(id *)(a1 + 48), "updatePresentationWithProgress:", *(double *)(a1 + 56));
}

uint64_t __81__CSCoverSheetViewController_cleanupInterstitialPresentationToPresented_inPlace___block_invoke_4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

- (void)setInterstitialTransitionSource:(id)a3
{
  CSInterstitialTransitionSource **p_interstitialTransitionSource;
  CSInterstitialTransitionSource *v6;

  p_interstitialTransitionSource = &self->_interstitialTransitionSource;
  v6 = (CSInterstitialTransitionSource *)a3;
  if (*p_interstitialTransitionSource != v6)
  {
    -[CSCoverSheetViewController unregisterExternalAppearanceProvider:](self, "unregisterExternalAppearanceProvider:");
    -[CSCoverSheetViewController unregisterExternalBehaviorProvider:](self, "unregisterExternalBehaviorProvider:", *p_interstitialTransitionSource);
    objc_storeStrong((id *)&self->_interstitialTransitionSource, a3);
    self->_hasPresentedForInterstitialTransitionSource = 0;
    if (*p_interstitialTransitionSource)
    {
      -[CSCoverSheetViewController registerExternalAppearanceProvider:](self, "registerExternalAppearanceProvider:");
      -[CSCoverSheetViewController registerExternalBehaviorProvider:](self, "registerExternalBehaviorProvider:", *p_interstitialTransitionSource);
    }
  }

}

- (void)setBacklightLevel:(double)a3
{
  double v5;
  void *v6;
  id v7;

  -[CSCoverSheetViewController backlightLevel](self, "backlightLevel");
  if (v5 != a3)
  {
    +[CSEvent eventWithType:](CSEvent, "eventWithType:", 16);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setValue:", v6);

    -[CSCoverSheetViewController _handleEvent:](self, "_handleEvent:", v7);
    self->_backlightLevel = a3;

  }
}

- (BOOL)isInScreenOffMode
{
  return self->_screenOffMode;
}

- (void)setInScreenOffMode:(BOOL)a3
{
  -[CSCoverSheetViewController setInScreenOffMode:forAutoUnlock:fromUnlockSource:](self, "setInScreenOffMode:forAutoUnlock:fromUnlockSource:", a3, 0, 0);
}

- (void)setInScreenOffMode:(BOOL)a3 forAutoUnlock:(BOOL)a4 fromUnlockSource:(int)a5
{
  uint64_t v5;
  _BOOL8 v6;
  unint64_t v8;
  BSAbsoluteMachTimer *chargingViewControllerTimer;
  BSAbsoluteMachTimer *v10;
  id chargingViewTimerHandler;
  BSAbsoluteMachTimer *accessoryViewControllerTimer;
  BSAbsoluteMachTimer *v13;
  id accessoryViewControllerTimerHandler;
  BSAbsoluteMachTimer *accessoryViewControllerChargingTimer;
  BSAbsoluteMachTimer *v16;
  id accessoryViewControllerChargingTimerHandler;
  NSObject *v18;
  NSObject *v19;
  _BOOL4 v20;
  void *v21;
  void *v22;
  unint64_t v23;
  void *v24;
  int v25;
  CSAppearance *localAppearance;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  CSAppearance *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  const __CFString *v36;
  void *v37;
  void *v38;
  CSNotificationClearingTrigger *notificationClearingTrigger;
  void *v40;
  int v41;
  _BOOL4 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (self->_screenOffMode == a3)
    return;
  v5 = *(_QWORD *)&a5;
  v6 = a3;
  self->_screenOffMode = a3;
  v8 = 0x1EFC12000uLL;
  if (a3)
  {
    -[CSCoverSheetViewController _setDidDismissSinceScreenOn:](self, "_setDidDismissSinceScreenOn:", 0, a4);
    -[CSOrientationUpdateControlling deferOrientationUpdatesWithReason:](self->_orientationUpdateController, "deferOrientationUpdatesWithReason:", CFSTR("CSCoverSheetScreenOffReason"));
    -[SBUIPhoneUnlockWithWatchController handleScreenOff](self->_phoneUnlockWithWatchController, "handleScreenOff");
    chargingViewControllerTimer = self->_chargingViewControllerTimer;
    if (chargingViewControllerTimer && self->_chargingViewTimerHandler)
    {
      -[BSAbsoluteMachTimer invalidate](chargingViewControllerTimer, "invalidate");
      (*((void (**)(void))self->_chargingViewTimerHandler + 2))();
      v10 = self->_chargingViewControllerTimer;
      self->_chargingViewControllerTimer = 0;

      chargingViewTimerHandler = self->_chargingViewTimerHandler;
      self->_chargingViewTimerHandler = 0;

    }
    accessoryViewControllerTimer = self->_accessoryViewControllerTimer;
    if (accessoryViewControllerTimer && self->_accessoryViewControllerTimerHandler)
    {
      -[BSAbsoluteMachTimer invalidate](accessoryViewControllerTimer, "invalidate");
      (*((void (**)(void))self->_accessoryViewControllerTimerHandler + 2))();
      v13 = self->_accessoryViewControllerTimer;
      self->_accessoryViewControllerTimer = 0;

      accessoryViewControllerTimerHandler = self->_accessoryViewControllerTimerHandler;
      self->_accessoryViewControllerTimerHandler = 0;

      self->_accessoryViewPresentationDelayed = 0;
    }
    accessoryViewControllerChargingTimer = self->_accessoryViewControllerChargingTimer;
    if (accessoryViewControllerChargingTimer && self->_accessoryViewControllerChargingTimerHandler)
    {
      -[BSAbsoluteMachTimer invalidate](accessoryViewControllerChargingTimer, "invalidate");
      (*((void (**)(void))self->_accessoryViewControllerChargingTimerHandler + 2))();
      v16 = self->_accessoryViewControllerChargingTimer;
      self->_accessoryViewControllerChargingTimer = 0;

      accessoryViewControllerChargingTimerHandler = self->_accessoryViewControllerChargingTimerHandler;
      self->_accessoryViewControllerChargingTimerHandler = 0;

    }
    SBLogDashBoard();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v41 = 67109120;
      v42 = -[CSCoverSheetViewController _isShowingChargingModal](self, "_isShowingChargingModal");
      _os_log_impl(&dword_1D0337000, v18, OS_LOG_TYPE_DEFAULT, "[Charge UI][Screen Off Mode] visible NO, showBattery NO – isAlreadyShowingChargingModal: %d", (uint8_t *)&v41, 8u);
    }

    -[CSCoverSheetViewController _transitionChargingViewToVisible:showBattery:animated:](self, "_transitionChargingViewToVisible:showBattery:animated:", 0, 0, 0);
    SBLogDashBoard();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      v20 = -[CSCoverSheetViewController _isShowingChargingModal](self, "_isShowingChargingModal");
      v41 = 67109120;
      v42 = v20;
      _os_log_impl(&dword_1D0337000, v19, OS_LOG_TYPE_DEFAULT, "[Charge UI][Screen Off Mode] – endedShowingChargingModal: %d", (uint8_t *)&v41, 8u);
    }

    -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "resetScrollViewToMainPageAnimated:withCompletion:", 0, 0);

    -[CSCoverSheetViewTransitionSource cancelTransition](self->_currentTransitionSource, "cancelTransition");
    -[CSTimerViewController setEnabled:](self->_timerViewController, "setEnabled:", 0);
    -[CSCoverSheetViewController _addOrRemoveRemoteContentViewIfNecessary](self, "_addOrRemoveRemoteContentViewIfNecessary");
    -[CSCoverSheetViewController dismissHomeScreenOverlay](self, "dismissHomeScreenOverlay");
  }
  else
  {
    -[CSCoverSheetViewController _updateOverrideDateIfNeeded](self, "_updateOverrideDateIfNeeded", a3, a4);
    -[CSOrientationUpdateControlling cancelOrientationUpdateDeferral](self->_orientationUpdateController, "cancelOrientationUpdateDeferral");
    if ((-[SBFScreenWakeAnimationControlling isWakeAnimationInProgress](self->_screenWakeAnimationController, "isWakeAnimationInProgress") & 1) == 0)-[SBFLockScreenDateViewController updateTimeNow](self->_dateViewController, "updateTimeNow");
    +[CSAction actionWithType:](CSAction, "actionWithType:", 3);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSCoverSheetViewController handleAction:fromSender:](self, "handleAction:fromSender:", v22, self);

    -[CSTimerViewController setEnabled:](self->_timerViewController, "setEnabled:", 1);
  }
  v23 = 0x1E0D00000uLL;
  objc_msgSend(MEMORY[0x1E0D00F58], "sharedBacklight");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v24, "backlightState") != 1)
  {

    goto LABEL_24;
  }
  v25 = -[CSCoverSheetViewController _appearState](self, "_appearState");

  if (v25 == 2)
  {
LABEL_24:
    -[CSAppearance removeAllComponentsWithIdentifier:](self->_localAppearance, "removeAllComponentsWithIdentifier:", CFSTR("HiddenAODTransitionElement"));
    goto LABEL_25;
  }
  localAppearance = self->_localAppearance;
  v27 = (void *)objc_opt_new();
  objc_msgSend(v27, "hidden:", 1);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "identifier:", CFSTR("HiddenAODTransitionElement"));
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "priority:", 80);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSAppearance addComponent:](localAppearance, "addComponent:", v30);

  v31 = self->_localAppearance;
  v32 = (void *)objc_opt_new();
  objc_msgSend(v32, "hidden:", 1);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "identifier:", CFSTR("HiddenAODTransitionElement"));
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v34, "priority:", 80);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSAppearance addComponent:](v31, "addComponent:", v35);

  v23 = 0x1E0D00000;
  v8 = 0x1EFC12000;

LABEL_25:
  objc_msgSend(*(id *)((char *)&self->super.super.super.super.isa + *(int *)(v8 + 3632)), "setScreenOff:", self->_screenOffMode);
  -[CSInlineWidgetContainerViewController setScreenOff:](self->_inlineComplicationContainerViewController, "setScreenOff:", self->_screenOffMode);
  -[CSInlineWidgetContainerViewController setScreenOff:](self->_landscapeInlineComplicationContainerViewController, "setScreenOff:", self->_screenOffMode);
  -[CSWidgetGridViewController setScreenOff:](self->_complicationContainerViewController, "setScreenOff:", self->_screenOffMode);
  -[CSWidgetGridViewController setScreenOff:](self->_sidebarComplicationContainerViewController, "setScreenOff:", self->_screenOffMode);
  if (v6)
    v36 = CFSTR("ScreenOff");
  else
    v36 = CFSTR("ScreenOn");
  -[CSCoverSheetViewController _updateActiveAppearanceForReason:](self, "_updateActiveAppearanceForReason:", v36);
  -[CSCoverSheetViewController _updateActiveBehaviorsForReason:](self, "_updateActiveBehaviorsForReason:", CFSTR("ScreenOffModeUpdate"));
  if (self->_screenOffMode)
  {
    +[CSEvent eventWithType:](CSEvent, "eventWithType:", 25);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    +[CSEvent eventWithType:](CSEvent, "eventWithType:", 24);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v5);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "setValue:", v38);

  }
  -[CSCoverSheetViewController _handleEvent:](self, "_handleEvent:", v37);
  -[CSNotificationClearingTrigger setScreenOff:](self->_notificationClearingTrigger, "setScreenOff:", v6);
  notificationClearingTrigger = self->_notificationClearingTrigger;
  objc_msgSend(*(id *)(v23 + 3928), "sharedBacklight");
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSNotificationClearingTrigger setScreenInactive:](notificationClearingTrigger, "setScreenInactive:", objc_msgSend(v40, "backlightState") == 1);

}

- (int64_t)backlightLuminance
{
  void *v2;
  int64_t v3;

  -[CSCoverSheetViewController traitCollection](self, "traitCollection");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "_backlightLuminance");

  return v3;
}

- (BOOL)shouldDisableALS
{
  return 1;
}

- (BOOL)_isTodayViewOverlayShowing
{
  void *v2;
  char v3;

  -[CSCoverSheetViewController overlayControllerIfExists](self, "overlayControllerIfExists");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isPresented");

  return v3;
}

- (BOOL)isMainPageVisible
{
  void *v3;
  void *v4;
  _BOOL4 v5;

  -[CSCoverSheetViewController visiblePageViewController](self, "visiblePageViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController mainPageContentViewController](self, "mainPageContentViewController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 == v4)
    v5 = !-[CSCoverSheetViewController _isTodayViewOverlayShowing](self, "_isTodayViewOverlayShowing");
  else
    LOBYTE(v5) = 0;

  return v5;
}

- (void)noteDeviceBlockedStatusUpdated
{
  -[CSCoverSheetViewController _addOrRemoveThermalTrapViewIfNecessaryAnimated:](self, "_addOrRemoveThermalTrapViewIfNecessaryAnimated:", 1);
  -[CSCoverSheetViewController _addOrRemoveBlockedViewIfNecessaryAnimated:](self, "_addOrRemoveBlockedViewIfNecessaryAnimated:", 1);
  -[CSCoverSheetViewController _addOrRemoveResetRestoreViewIfNecessaryAnimated:](self, "_addOrRemoveResetRestoreViewIfNecessaryAnimated:", 1);
  -[CSCoverSheetViewController _updateModalPresentationControllerVisibility](self, "_updateModalPresentationControllerVisibility");
}

- (BOOL)shouldUnlockUIOnKeyDownEvent
{
  void *v3;
  char v4;

  if (-[CSCoverSheetViewController isPasscodeLockVisible](self, "isPasscodeLockVisible"))
    return 0;
  -[CSCoverSheetViewController modalPresentationController](self, "modalPresentationController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isPresentingContent");

  if ((v4 & 1) != 0)
    return 0;
  else
    return !-[CSCoverSheetViewController isHostingAnApp](self, "isHostingAnApp");
}

- (BOOL)isShowingMediaControls
{
  void *v2;
  char v3;

  -[CSCoverSheetViewController mainPageContentViewController](self, "mainPageContentViewController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isShowingMediaControls");

  return v3;
}

- (void)setShowingMediaControls:(BOOL)a3
{
  if (a3)
  {
    if (-[CSRemoteContentInlineViewController shouldDismissInlineContentForNowPlaying](self->_remoteContentInlineViewController, "shouldDismissInlineContentForNowPlaying"))
    {
      -[CSCoverSheetViewController _dismissRemoteViewControllerForReason:](self, "_dismissRemoteViewControllerForReason:", 4);
    }
  }
}

- (void)_activateCameraEntity:(id)a3 animated:(BOOL)a4 actions:(id)a5 completion:(id)a6
{
  _BOOL4 v8;
  id v10;
  id v11;
  void (**v12)(id, uint64_t, const __CFString *);
  void *v13;
  unint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  char v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  _QWORD v24[4];
  id v25;
  id v26;
  void *v27;
  BOOL v28;
  _QWORD v29[4];
  id v30;
  CSCoverSheetViewController *v31;
  id v32;
  id v33;
  void (**v34)(id, uint64_t, const __CFString *);
  id v35[2];
  char v36;
  id location[2];

  v8 = a4;
  v10 = a3;
  v11 = a5;
  v12 = (void (**)(id, uint64_t, const __CFString *))a6;
  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = -[CSCoverSheetViewController _indexOfCameraPage](self, "_indexOfCameraPage");
  if (v14 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v12[2](v12, 5, CFSTR("Camera page not accessible"));
    goto LABEL_15;
  }
  v15 = (void *)v14;
  -[CSCoverSheetViewController pageViewControllerAtIndex:](self, "pageViewControllerAtIndex:", v14);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v16, "acquireLiveContentAssertionForReason:", CFSTR("Camera Activation"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v10)
      goto LABEL_9;
LABEL_7:
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(v16, "setHostedEntity:", v10);
    goto LABEL_9;
  }
  v17 = 0;
  if (v10)
    goto LABEL_7;
LABEL_9:
  v18 = objc_opt_respondsToSelector() & 1;
  if (v18)
    objc_msgSend(v16, "setActionsToDeliver:", v11);
  v23 = v11;
  objc_initWeak(location, self);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = __80__CSCoverSheetViewController__activateCameraEntity_animated_actions_completion___block_invoke;
  v29[3] = &unk_1E8E2E2E8;
  objc_copyWeak(v35, location);
  v19 = v13;
  v35[1] = v15;
  v30 = v19;
  v31 = self;
  v36 = v18;
  v20 = v16;
  v32 = v20;
  v21 = v17;
  v33 = v21;
  v34 = v12;
  v22 = (void *)MEMORY[0x1D17E1614](v29);
  if (-[CSCoverSheetViewController isPasscodeLockVisible](self, "isPasscodeLockVisible"))
  {
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 3221225472;
    v24[2] = __80__CSCoverSheetViewController__activateCameraEntity_animated_actions_completion___block_invoke_2;
    v24[3] = &unk_1E8E2E310;
    v25 = v19;
    v27 = v15;
    v28 = v8;
    v26 = v22;
    -[CSCoverSheetViewController setPasscodeLockVisible:animated:completion:](self, "setPasscodeLockVisible:animated:completion:", 0, v8, v24);

  }
  else
  {
    objc_msgSend(v19, "scrollToPageAtIndex:animated:withCompletion:", v15, v8, v22);
  }

  objc_destroyWeak(v35);
  objc_destroyWeak(location);

  v11 = v23;
LABEL_15:

}

void __80__CSCoverSheetViewController__activateCameraEntity_animated_actions_completion___block_invoke(uint64_t a1)
{
  void *v2;
  double v3;
  double v4;
  void *v5;
  double v6;
  double v7;
  const __CFString *v8;
  uint64_t v9;
  uint64_t v10;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  objc_msgSend(*(id *)(a1 + 32), "scrollView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "contentOffset");
  v4 = v3;
  objc_msgSend(*(id *)(a1 + 32), "scrollView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "contentOffsetForPageAtIndex:", *(_QWORD *)(a1 + 80));
  v7 = v6;

  if (v4 >= v7)
  {
    v8 = 0;
    v9 = 0;
  }
  else
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 2112), "cancelTransition");
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 1136) = 0;
    objc_msgSend(*(id *)(a1 + 40), "setCurrentTransitionSource:", 0);
    objc_msgSend(WeakRetained, "activateMainPageWithCompletion:", 0);
    if (*(_BYTE *)(a1 + 88))
      objc_msgSend(*(id *)(a1 + 48), "setActionsToDeliver:", 0);
    v8 = CFSTR("Camera presentation interrupted existing scroll.");
    v9 = 1;
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1896), "cancelOrientationUpdateDeferral");
  objc_msgSend(*(id *)(a1 + 56), "invalidate");
  v10 = *(_QWORD *)(a1 + 64);
  if (v10)
    (*(void (**)(uint64_t, uint64_t, const __CFString *))(v10 + 16))(v10, v9, v8);

}

uint64_t __80__CSCoverSheetViewController__activateCameraEntity_animated_actions_completion___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "scrollToPageAtIndex:animated:withCompletion:", *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 40));
}

- (void)activateOverlayWithViewController:(id)a3 animated:(BOOL)a4 completion:(id)a5
{
  _BOOL8 v6;
  id v8;
  id v9;
  NSObject *v10;
  unint64_t v11;
  id v12;
  id v13;
  _QWORD v14[5];
  id v15;
  id v16;
  BOOL v17;
  uint8_t buf[4];
  id v19;
  uint64_t v20;

  v6 = a4;
  v20 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a5;
  SBLogDashBoard();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v19 = v8;
    _os_log_impl(&dword_1D0337000, v10, OS_LOG_TYPE_DEFAULT, "Attempt to activate overlay with view controller: %@", buf, 0xCu);
  }

  v11 = -[CSCoverSheetViewController _indexOfMainPage](self, "_indexOfMainPage");
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __84__CSCoverSheetViewController_activateOverlayWithViewController_animated_completion___block_invoke;
  v14[3] = &unk_1E8E2E338;
  v14[4] = self;
  v15 = v8;
  v17 = v6;
  v16 = v9;
  v12 = v9;
  v13 = v8;
  -[CSCoverSheetViewController activatePage:animated:withCompletion:](self, "activatePage:animated:withCompletion:", v11, v6, v14);

}

void __84__CSCoverSheetViewController_activateOverlayWithViewController_animated_completion___block_invoke(uint64_t a1)
{
  CSDismissableModalViewController *v2;
  void *v3;
  void *v4;
  CSDismissableModalViewController *v5;
  _QWORD v6[4];
  CSDismissableModalViewController *v7;
  id v8;
  id v9;
  char v10;

  v2 = objc_alloc_init(CSDismissableModalViewController);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1040), "modalHomeAffordanceController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSDismissableModalViewController setHomeAffordanceController:](v2, "setHomeAffordanceController:", v3);

  -[CSDismissableModalViewController setDelegate:](v2, "setDelegate:", *(_QWORD *)(a1 + 40));
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __84__CSCoverSheetViewController_activateOverlayWithViewController_animated_completion___block_invoke_2;
  v6[3] = &unk_1E8E2E338;
  v7 = v2;
  v4 = *(void **)(a1 + 32);
  v8 = *(id *)(a1 + 40);
  v10 = *(_BYTE *)(a1 + 56);
  v9 = *(id *)(a1 + 48);
  v5 = v2;
  objc_msgSend(v4, "_presentModalViewController:shouldDismissOverlays:animated:completion:", v5, 0, 0, v6);

}

void __84__CSCoverSheetViewController_activateOverlayWithViewController_animated_completion___block_invoke_2(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[4];
  id v5;

  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(unsigned __int8 *)(a1 + 56);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __84__CSCoverSheetViewController_activateOverlayWithViewController_animated_completion___block_invoke_3;
  v4[3] = &unk_1E8E2DFD8;
  v5 = *(id *)(a1 + 48);
  objc_msgSend(v1, "presentContentViewController:animated:completion:", v2, v3, v4);

}

uint64_t __84__CSCoverSheetViewController_activateOverlayWithViewController_animated_completion___block_invoke_3(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, 1);
  return result;
}

- (void)dismissHostedAppsAnimated:(BOOL)a3 completion:(id)a4
{
  _BOOL8 v4;
  id v6;
  _QWORD v7[5];
  id v8;
  BOOL v9;

  v4 = a3;
  v6 = a4;
  if (-[CSCoverSheetViewController isMainPageVisible](self, "isMainPageVisible"))
  {
    -[CSCoverSheetViewController _dismissHostingModalsAnimated:completion:](self, "_dismissHostingModalsAnimated:completion:", v4, v6);
  }
  else
  {
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __67__CSCoverSheetViewController_dismissHostedAppsAnimated_completion___block_invoke;
    v7[3] = &unk_1E8E2E360;
    v7[4] = self;
    v9 = v4;
    v8 = v6;
    -[CSCoverSheetViewController _dismissHostingModalsAnimated:completion:](self, "_dismissHostingModalsAnimated:completion:", 0, v7);

  }
}

uint64_t __67__CSCoverSheetViewController_dismissHostedAppsAnimated_completion___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "activatePage:animated:withCompletion:", objc_msgSend(*(id *)(a1 + 32), "_indexOfMainPage"), *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 40));
}

- (void)_dismissHostingModalsAnimated:(BOOL)a3 completion:(id)a4
{
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  CSModalPresentationViewController *modalPresentationController;
  id v15;
  _BOOL4 v16;
  _QWORD v17[4];
  NSObject *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _QWORD block[4];
  id v24;
  _BYTE v25[128];
  uint64_t v26;

  v16 = a3;
  v26 = *MEMORY[0x1E0C80C00];
  v5 = a4;
  v6 = dispatch_group_create();
  dispatch_group_enter(v6);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __71__CSCoverSheetViewController__dismissHostingModalsAnimated_completion___block_invoke;
  block[3] = &unk_1E8E2DFD8;
  v15 = v5;
  v24 = v15;
  dispatch_group_notify(v6, MEMORY[0x1E0C80D38], block);
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  -[CSPresentationViewController contentViewControllers](self->_modalPresentationController, "contentViewControllers");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v19, v25, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v20;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v20 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * v11);
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v13 = v12;
          if (objc_msgSend(v13, "isHostingAnApp"))
          {
            dispatch_group_enter(v6);
            modalPresentationController = self->_modalPresentationController;
            v17[0] = MEMORY[0x1E0C809B0];
            v17[1] = 3221225472;
            v17[2] = __71__CSCoverSheetViewController__dismissHostingModalsAnimated_completion___block_invoke_2;
            v17[3] = &unk_1E8E2DB38;
            v18 = v6;
            -[CSPresentationViewController dismissContentViewController:animated:completion:](modalPresentationController, "dismissContentViewController:animated:completion:", v13, v16, v17);

          }
        }
        ++v11;
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v19, v25, 16);
    }
    while (v9);
  }

  dispatch_group_leave(v6);
}

uint64_t __71__CSCoverSheetViewController__dismissHostingModalsAnimated_completion___block_invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __71__CSCoverSheetViewController__dismissHostingModalsAnimated_completion___block_invoke_2(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

- (void)idleTimerDidRefresh
{
  id v3;

  +[CSEvent eventWithType:](CSEvent, "eventWithType:", 18);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController _handleEvent:](self, "_handleEvent:", v3);

}

- (void)idleTimerDidExpire
{
  id v3;

  +[CSEvent eventWithType:](CSEvent, "eventWithType:", 20);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController _handleEvent:](self, "_handleEvent:", v3);

}

- (void)idleTimerDidWarn
{
  id v3;

  +[CSEvent eventWithType:](CSEvent, "eventWithType:", 19);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController _handleEvent:](self, "_handleEvent:", v3);

}

- (void)idleTimerWillRefresh
{
  id v3;

  +[CSEvent eventWithType:](CSEvent, "eventWithType:", 17);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController _handleEvent:](self, "_handleEvent:", v3);

}

- (SBFOverlayControlling)overlayController
{
  SBFOverlayControlling *overlayController;
  void *v4;
  SBFOverlayControlling *v5;
  SBFOverlayControlling *v6;

  overlayController = self->_overlayController;
  if (!overlayController)
  {
    -[CSCoverSheetContextProviding homeScreenOverlayProvider](self->_coverSheetContext, "homeScreenOverlayProvider");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (SBFOverlayControlling *)objc_msgSend(v4, "newOverlayController");
    v6 = self->_overlayController;
    self->_overlayController = v5;

    -[SBFOverlayControlling addHomeScreenOverlayObserver:](self->_overlayController, "addHomeScreenOverlayObserver:", self);
    -[SBFOverlayControlling setDismissalDelegate:](self->_overlayController, "setDismissalDelegate:", self);
    overlayController = self->_overlayController;
  }
  return overlayController;
}

- (id)overlayControllerIfExists
{
  return self->_overlayController;
}

- (void)scrollPanGestureDidUpdate:(id)a3
{
  void *v4;
  char v5;
  CSCoverSheetViewController *v6;
  id v7;
  id v8;

  v8 = a3;
  -[CSCoverSheetViewController activeBehavior](self, "activeBehavior");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "areRestrictedCapabilities:", 64);

  if ((v5 & 1) == 0)
  {
    switch(objc_msgSend(v8, "state"))
    {
      case 1:
        -[CSCoverSheetViewController _scrollPanGestureBegan:](self, "_scrollPanGestureBegan:", v8);
        v6 = self;
        v7 = v8;
        goto LABEL_6;
      case 2:
        v6 = self;
        v7 = v8;
LABEL_6:
        -[CSCoverSheetViewController _scrollPanGestureChanged:](v6, "_scrollPanGestureChanged:", v7);
        break;
      case 3:
        -[CSCoverSheetViewController _scrollPanGestureEnded:](self, "_scrollPanGestureEnded:", v8);
        break;
      case 4:
      case 5:
        -[CSCoverSheetViewController dismissHomeScreenOverlay](self, "dismissHomeScreenOverlay");
        -[CSWidgetGridViewController endCancellingTouches](self->_complicationContainerViewController, "endCancellingTouches");
        break;
      default:
        break;
    }
  }

}

- (void)_scrollPanGestureBegan:(id)a3
{
  void *v4;
  double v5;
  id v6;

  -[CSWidgetGridViewController beginCancellingTouches](self->_complicationContainerViewController, "beginCancellingTouches", a3);
  -[CSCoverSheetViewController overlayControllerIfExists](self, "overlayControllerIfExists");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    -[CSCoverSheetViewController overlayControllerIfExists](self, "overlayControllerIfExists");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "layerPresentationProgress");
    self->_initialOverlayPresentationProgress = v5;

  }
  else
  {
    self->_initialOverlayPresentationProgress = 0.0;
  }
}

- (void)_scrollPanGestureChanged:(id)a3
{
  id v4;
  void *v5;
  double v6;
  double v7;
  uint64_t v8;
  _BOOL4 v9;
  NSObject *v10;
  void *v11;
  double v12;
  double v13;
  void *v14;
  uint64_t v15;

  v4 = a3;
  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "translationInView:", v5);
  v7 = v6;

  v8 = objc_msgSend((id)*MEMORY[0x1E0CEB258], "userInterfaceLayoutDirection");
  v9 = v7 > 0.0;
  if (v8 == 1)
    v9 = v7 < 0.0;
  if (v9)
  {
    SBLogDashBoard();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      -[CSCoverSheetViewController _scrollPanGestureChanged:].cold.1();

    -[CSCoverSheetViewController overlayController](self, "overlayController");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "presentationProgressForTranslation:initialPresentationProgress:fromLeading:", 1, v7, self->_initialOverlayPresentationProgress);
    v13 = v12;
    objc_msgSend(v11, "setPresentationProgress:interactive:animated:completionHandler:", 1, 1, 0);
    if (__sb__runningInSpringBoard())
    {
      if (SBFEffectiveDeviceClass() == 2)
        goto LABEL_11;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend(v14, "userInterfaceIdiom");

      if (v15 == 1)
      {
LABEL_11:

        return;
      }
    }
    -[CSCoverSheetViewController _updateIdleTimerForTransitionProgress:](self, "_updateIdleTimerForTransitionProgress:", v13);
    goto LABEL_11;
  }
}

- (void)_scrollPanGestureEnded:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  double v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  void *v15;
  _OWORD v16[3];
  double v17[4];
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v4 = a3;
  -[CSWidgetGridViewController endCancellingTouches](self->_complicationContainerViewController, "endCancellingTouches");
  -[CSCoverSheetViewController overlayControllerIfExists](self, "overlayControllerIfExists");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "presentationProgress");
    -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "velocityInView:", v7);
    v9 = v8;

    -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "translationInView:", v10);
    v12 = v11;

    objc_msgSend(v6, "finalPresentationProgressForTranslation:velocity:initialPresentationProgress:fromLeading:", 1, v12, v9, self->_initialOverlayPresentationProgress);
    v14 = v13;
    if ((BSFloatIsZero() & 1) == 0 && (BSFloatIsZero() & 1) == 0)
    {
      v19 = 0u;
      v20 = 0u;
      v18 = 0u;
      v17[0] = (double)-[CSCoverSheetViewController _indexOfMainPage](self, "_indexOfMainPage");
      v17[2] = v17[0];
      *(_QWORD *)&v17[1] = 1;
      *(_QWORD *)&v17[3] = 1;
      -[CSCoverSheetViewController coverSheetView](self, "coverSheetView", CSCoverSheetTransitionContextMake((uint64_t)v17, self->_transitionContext.mode, (uint64_t)&v18).n128_f64[0]);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16[0] = v18;
      v16[1] = v19;
      v16[2] = v20;
      -[CSCoverSheetViewController transitionSource:didEndWithContext:](self, "transitionSource:didEndWithContext:", v15, v16);

    }
    objc_msgSend(v6, "setPresentationProgress:interactive:animated:completionHandler:", 0, 1, 0, v14);
  }

}

- (void)dismissHomeScreenOverlay
{
  void *v2;
  id v3;

  -[CSCoverSheetViewController overlayControllerIfExists](self, "overlayControllerIfExists");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v2, "dismissAnimated:completionHandler:", 1, 0);
    v2 = v3;
  }

}

- (void)overlayControllerDidBeginChangingPresentationProgress:(id)a3
{
  id WeakRetained;

  if (-[CSCoverSheetViewController bs_isAppearingOrAppeared](self, "bs_isAppearingOrAppeared", a3))
  {
    WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
    objc_msgSend(WeakRetained, "coverSheetViewControllerShouldDismissContextMenu:", self);

  }
}

- (void)overlayController:(id)a3 didChangePresentationProgress:(double)a4 newPresentationProgress:(double)a5 fromLeading:(BOOL)a6
{
  id v8;
  double v9;
  id v10;

  v10 = a3;
  -[CSCoverSheetViewController overlayControllerIfExists](self, "overlayControllerIfExists");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  if (v8 == v10)
  {
    objc_msgSend(v10, "presentationProgress");
    if (a4 > 0.0 || v9 <= 0.0)
    {
      if (a4 > 0.0 && v9 <= 0.0)
      {
        -[CSCoverSheetViewController unregisterExternalBehaviorProvider:](self, "unregisterExternalBehaviorProvider:", v10);
        -[CSCoverSheetViewController unregisterExternalEventHandler:](self, "unregisterExternalEventHandler:", v10);
      }
    }
    else
    {
      -[CSCoverSheetViewController registerExternalBehaviorProvider:](self, "registerExternalBehaviorProvider:", v10);
      -[CSCoverSheetViewController registerExternalEventHandler:](self, "registerExternalEventHandler:", v10);
    }
  }

}

- (BOOL)interceptDismissalGestureForOverlayController:(id)a3
{
  void *v4;
  char v5;

  if (self->_overlayController != a3)
    return 0;
  -[CSCoverSheetContextProviding homeScreenOverlayProvider](self->_coverSheetContext, "homeScreenOverlayProvider");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "dismissModalContentIfVisibleAnimated:", 1);

  return v5;
}

- (void)overlayControllerRequestsDismissal:(id)a3
{
  if (self->_overlayController == a3)
    -[CSCoverSheetViewController dismissHomeScreenOverlay](self, "dismissHomeScreenOverlay");
}

- (BOOL)isLockScreenShowingDefaultContent
{
  _BOOL4 v3;

  v3 = -[CSCoverSheetViewController isMainPageVisible](self, "isMainPageVisible");
  if (v3)
    LOBYTE(v3) = !-[CSCoverSheetViewController hasContentAboveCoverSheet](self, "hasContentAboveCoverSheet");
  return v3;
}

- (BOOL)isLockScreenShowingDefaultContentExceptControlCenter
{
  _BOOL4 v3;

  v3 = -[CSCoverSheetViewController isMainPageVisible](self, "isMainPageVisible");
  if (v3)
  {
    if (-[CSCoverSheetViewController hasContentAboveCoverSheet](self, "hasContentAboveCoverSheet"))
      LOBYTE(v3) = self->_contentAboveIsControlCenter;
    else
      LOBYTE(v3) = 1;
  }
  return v3;
}

- (void)updateCallToActionForMesaMatchFailure
{
  -[CSFixedFooterViewController updateCallToActionForMesaMatchFailure](self->_fixedFooterViewController, "updateCallToActionForMesaMatchFailure");
}

- (BOOL)shouldShowLockStatusBarTime
{
  id WeakRetained;
  char v4;
  char v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;

  WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
  v4 = objc_msgSend(WeakRetained, "coverSheetViewControllerIsShowingSecureApp:", self);

  if ((v4 & 1) != 0 || self->_hasContentAboveCoverSheet && !self->_contentAboveIsControlCenter)
    return 1;
  if (-[CSCoverSheetViewController isTransitioning](self, "isTransitioning"))
    -[CSCoverSheetViewController previousAppearance](self, "previousAppearance");
  else
    -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "componentForType:identifier:", 1, CFSTR("(active)"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_opt_class();
  v9 = v7;
  if (v8)
  {
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v10 = v9;
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  v11 = v10;

  if ((objc_msgSend(v11, "isHidden") & 1) != 0)
    v5 = 1;
  else
    v5 = objc_msgSend(v11, "hidesTime");

  return v5;
}

- (id)createHomeButtonShowPasscodeRecognizerForHomeButtonPress
{
  void *v4;
  int v5;
  void *v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  CSHomeButtonShowPasscodeRecognizer *v10;
  void *v12;
  __int16 v13;
  uint8_t buf[2];

  -[CSCoverSheetContextProviding authenticationStatusProvider](self->_coverSheetContext, "authenticationStatusProvider");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isAuthenticated");

  if (v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("CSCoverSheetViewController.m"), 3255, CFSTR("We shouldn't get asked for this if we're already authenticated."));

  }
  -[CSCoverSheetContextProviding biometricResource](self->_coverSheetContext, "biometricResource");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v6, "hasBiometricAuthenticationCapabilityEnabled") & 1) != 0)
  {
    if (!objc_msgSend(v6, "biometricLockoutState"))
    {
      v10 = -[CSHomeButtonShowPasscodeRecognizer initWithFingerOn:]([CSHomeButtonShowPasscodeRecognizer alloc], "initWithFingerOn:", objc_msgSend(v6, "isFingerOn"));
      goto LABEL_11;
    }
    SBLogLockScreenMesaHomeButtonPasscodeRecognizer();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v13 = 0;
      v8 = "Not creating home button passcode recognizer because we're already in bio-lockout status.";
      v9 = (uint8_t *)&v13;
LABEL_9:
      _os_log_impl(&dword_1D0337000, v7, OS_LOG_TYPE_DEFAULT, v8, v9, 2u);
    }
  }
  else
  {
    SBLogLockScreenMesaHomeButtonPasscodeRecognizer();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v8 = "Not creating home button passcode recognizer because mesa unlock is disabled.";
      v9 = buf;
      goto LABEL_9;
    }
  }

  v10 = 0;
LABEL_11:
  objc_storeStrong((id *)&self->_homeButtonShowPasscodeRecognizer, v10);

  return v10;
}

- (id)createHomeButtonSuppressAfterUnlockRecognizerForUnlockSource:(int)a3
{
  CSHomeButtonSuppressAfterUnlockRecognizer *v4;

  v4 = objc_alloc_init(CSHomeButtonSuppressAfterUnlockRecognizer);
  objc_storeWeak((id *)&self->_homeButtonSuppressAfterUnlockRecognizer, v4);
  return v4;
}

- (SBSWidgetMetricsProviding)widgetMetricsProvider
{
  return -[CSMainPageContentViewController widgetMetricsProvider](self->_mainPageContentViewController, "widgetMetricsProvider");
}

- (BOOL)_isComplicationContainerVisible
{
  int v2;

  v2 = CSAutobahnEnabledForPlatform();
  if (v2)
    LOBYTE(v2) = CSFeatureEnabled(4);
  return v2;
}

- (id)_validatedComplicationDescriptorForDescriptor:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  char v10;
  int v11;

  v4 = a3;
  objc_msgSend(v4, "widget");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "containerBundleIdentifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CF9688], "applicationWithBundleIdentifier:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v7, "isLocked") & 1) != 0 || (objc_msgSend(v7, "isHidden") & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    -[CSCoverSheetContextProviding applicationInformer](self->_coverSheetContext, "applicationInformer");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "isInstallingApplicationWithBundleIdentifier:", v6);
    v11 = objc_msgSend(v9, "applicationExistsForBundleIdentifier:", v6);
    if ((v10 & 1) != 0 || v11)
      v8 = v4;
    else
      v8 = 0;

  }
  return v8;
}

- (void)_validateAndUpdateInlineComplication
{
  void *v3;
  void *v4;
  int v5;
  void *v6;
  char v7;
  CSInlineWidgetContainerViewController *inlineComplicationContainerViewController;
  CSInlineWidgetContainerViewController *v9;
  CSInlineWidgetContainerViewController *v10;
  void *v11;
  unint64_t v12;
  CSInlineWidgetContainerViewController *v13;
  void *landscapeInlineComplicationContainerViewController;
  CSInlineWidgetContainerViewController *v15;
  CSInlineWidgetContainerViewController *v16;
  unint64_t v17;
  id v18;

  -[CSCoverSheetViewController _validatedComplicationDescriptorForDescriptor:](self, "_validatedComplicationDescriptorForDescriptor:", self->_posterPortraitDescriptor);
  v18 = (id)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController _validatedComplicationDescriptorForDescriptor:](self, "_validatedComplicationDescriptorForDescriptor:", self->_posterLandscapeDescriptor);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSInlineWidgetContainerViewController widgetDescriptor](self->_inlineComplicationContainerViewController, "widgetDescriptor");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = BSEqualObjects();

  if (!v5
    || (-[CSInlineWidgetContainerViewController widgetDescriptor](self->_landscapeInlineComplicationContainerViewController, "widgetDescriptor"), v6 = (void *)objc_claimAutoreleasedReturnValue(), v7 = BSEqualObjects(), v6, (v7 & 1) == 0))
  {
    inlineComplicationContainerViewController = self->_inlineComplicationContainerViewController;
    if (v18)
    {
      if (!inlineComplicationContainerViewController)
      {
        v9 = -[CSInlineWidgetContainerViewController initWithComplicationManager:]([CSInlineWidgetContainerViewController alloc], "initWithComplicationManager:", self->_complicationManager);
        v10 = self->_inlineComplicationContainerViewController;
        self->_inlineComplicationContainerViewController = v9;

        -[CSInlineWidgetContainerViewController setDelegate:](self->_inlineComplicationContainerViewController, "setDelegate:", self);
        inlineComplicationContainerViewController = self->_inlineComplicationContainerViewController;
      }
      -[CSInlineWidgetContainerViewController setWidgetDescriptor:](inlineComplicationContainerViewController, "setWidgetDescriptor:", v18);
      if (__sb__runningInSpringBoard())
      {
        if (SBFEffectiveDeviceClass() != 2
          && (unint64_t)(-[CSCoverSheetViewController interfaceOrientation](self, "interfaceOrientation") - 1) > 1)
        {
          goto LABEL_15;
        }
LABEL_14:
        v13 = self->_inlineComplicationContainerViewController;
        goto LABEL_16;
      }
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v11, "userInterfaceIdiom") == 1)
      {

        goto LABEL_14;
      }
      v12 = -[CSCoverSheetViewController interfaceOrientation](self, "interfaceOrientation") - 1;

      if (v12 < 2)
        goto LABEL_14;
    }
    else
    {
      self->_inlineComplicationContainerViewController = 0;

    }
LABEL_15:
    v13 = 0;
LABEL_16:
    landscapeInlineComplicationContainerViewController = self->_landscapeInlineComplicationContainerViewController;
    if (v3)
    {
      if (!landscapeInlineComplicationContainerViewController)
      {
        v15 = -[CSInlineWidgetContainerViewController initWithComplicationManager:inlineTextAlignment:]([CSInlineWidgetContainerViewController alloc], "initWithComplicationManager:inlineTextAlignment:", self->_complicationManager, 1);
        v16 = self->_landscapeInlineComplicationContainerViewController;
        self->_landscapeInlineComplicationContainerViewController = v15;

        -[CSInlineWidgetContainerViewController setDelegate:](self->_landscapeInlineComplicationContainerViewController, "setDelegate:", self);
        landscapeInlineComplicationContainerViewController = self->_landscapeInlineComplicationContainerViewController;
      }
      objc_msgSend(landscapeInlineComplicationContainerViewController, "setWidgetDescriptor:", v3);
      if (__sb__runningInSpringBoard())
      {
        if (SBFEffectiveDeviceClass() == 2
          || (unint64_t)(-[CSCoverSheetViewController interfaceOrientation](self, "interfaceOrientation") - 3) > 1)
        {
          goto LABEL_28;
        }
LABEL_26:
        landscapeInlineComplicationContainerViewController = v13;
        v13 = self->_landscapeInlineComplicationContainerViewController;
        goto LABEL_27;
      }
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      landscapeInlineComplicationContainerViewController = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(landscapeInlineComplicationContainerViewController, "userInterfaceIdiom") != 1)
      {
        v17 = -[CSCoverSheetViewController interfaceOrientation](self, "interfaceOrientation") - 3;

        if (v17 >= 2)
        {
LABEL_28:
          -[SBFLockScreenDateViewController setInlineComplicationViewController:](self->_dateViewController, "setInlineComplicationViewController:", v13);

          goto LABEL_29;
        }
        goto LABEL_26;
      }
    }
    else
    {
      self->_landscapeInlineComplicationContainerViewController = 0;
    }
LABEL_27:

    goto LABEL_28;
  }
LABEL_29:

}

- (id)succinctDescription
{
  void *v2;
  void *v3;

  -[CSCoverSheetViewController succinctDescriptionBuilder](self, "succinctDescriptionBuilder");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "build");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (id)succinctDescriptionBuilder
{
  return (id)objc_msgSend(MEMORY[0x1E0D01748], "builderWithObject:", self);
}

- (id)descriptionWithMultilinePrefix:(id)a3
{
  void *v3;
  void *v4;

  -[CSCoverSheetViewController descriptionBuilderWithMultilinePrefix:](self, "descriptionBuilderWithMultilinePrefix:", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "build");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (id)descriptionBuilderWithMultilinePrefix:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  _QWORD v10[5];
  id v11;

  v4 = a3;
  -[CSCoverSheetViewController succinctDescriptionBuilder](self, "succinctDescriptionBuilder");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __68__CSCoverSheetViewController_descriptionBuilderWithMultilinePrefix___block_invoke;
  v10[3] = &unk_1E8E2DC00;
  v10[4] = self;
  v6 = v5;
  v11 = v6;
  objc_msgSend(v6, "appendBodySectionWithName:multilinePrefix:block:", 0, v4, v10);

  v7 = v11;
  v8 = v6;

  return v8;
}

id __68__CSCoverSheetViewController_descriptionBuilderWithMultilinePrefix___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  id v44;
  void *v45;
  void *v46;
  id v47;
  void *v48;
  void *v49;
  id v50;
  __int128 v52[3];

  if (objc_msgSend(*(id *)(a1 + 32), "isTransitioning"))
  {
    v2 = (void *)MEMORY[0x1E0D01748];
    v3 = *(void **)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 32), "currentTransitionSource");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "descriptionForObject:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (id)objc_msgSend(v3, "appendObject:withName:", v5, CFSTR("transitionSource"));

    v7 = *(void **)(a1 + 40);
    v8 = *(_OWORD *)(*(_QWORD *)(a1 + 32) + 1144);
    v9 = *(_OWORD *)(*(_QWORD *)(a1 + 32) + 1176);
    v52[1] = *(_OWORD *)(*(_QWORD *)(a1 + 32) + 1160);
    v52[2] = v9;
    v52[0] = v8;
    NSStringFromCoverSheetTransitionContext(v52);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = (id)objc_msgSend(v7, "appendObject:withName:", v10, CFSTR("transitionContext"));

  }
  v12 = *(void **)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 32), "coverSheetView");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = (id)objc_msgSend(v12, "appendObject:withName:", v13, CFSTR("view"));

  v15 = *(void **)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 32), "_appearState");
  SBFStringForAppearState();
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = (id)objc_msgSend(v15, "appendObject:withName:", v16, CFSTR("appearState"));

  v18 = *(void **)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 32), "pageViewControllers");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "appendArraySection:withName:skipIfEmpty:", v19, CFSTR("pageControllers"), 0);

  v20 = *(void **)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 32), "modalPresentationController");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = (id)objc_msgSend(v20, "appendObject:withName:skipIfNil:", v21, CFSTR("modalPresentationController"), 1);

  v23 = (id)objc_msgSend(*(id *)(a1 + 40), "appendObject:withName:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1128), CFSTR("notificationDispatcher"));
  v24 = *(void **)(a1 + 40);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1112), "allObjects");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "activeMultilinePrefix");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "appendArraySection:withName:multilinePrefix:skipIfEmpty:objectTransformer:", v25, CFSTR("observers"), v26, 1, &__block_literal_global_280);

  v27 = *(void **)(a1 + 40);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1072), "allObjects");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "activeMultilinePrefix");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "appendArraySection:withName:multilinePrefix:skipIfEmpty:objectTransformer:", v28, CFSTR("externalAppearanceProviders"), v29, 1, &__block_literal_global_283);

  v30 = *(void **)(a1 + 40);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1080), "allObjects");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "activeMultilinePrefix");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "appendArraySection:withName:multilinePrefix:skipIfEmpty:objectTransformer:", v31, CFSTR("externalBehaviorProviders"), v32, 1, &__block_literal_global_286);

  v33 = *(void **)(a1 + 40);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1088), "allObjects");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "activeMultilinePrefix");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "appendArraySection:withName:multilinePrefix:skipIfEmpty:objectTransformer:", v34, CFSTR("externalEventHandlers"), v35, 1, &__block_literal_global_289);

  v36 = *(void **)(a1 + 40);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1104), "allObjects");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "activeMultilinePrefix");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v36, "appendArraySection:withName:multilinePrefix:skipIfEmpty:objectTransformer:", v37, CFSTR("externalLockProviders"), v38, 1, &__block_literal_global_292);

  v39 = *(void **)(a1 + 40);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1096), "allObjects");
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "activeMultilinePrefix");
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v39, "appendArraySection:withName:multilinePrefix:skipIfEmpty:objectTransformer:", v40, CFSTR("externalPresentationProviders"), v41, 1, &__block_literal_global_295);

  v42 = *(void **)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 32), "activeAppearance");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  v44 = (id)objc_msgSend(v42, "appendObject:withName:", v43, CFSTR("activeAppearance"));

  v45 = *(void **)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 32), "activeBehavior");
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  v47 = (id)objc_msgSend(v45, "appendObject:withName:", v46, CFSTR("activeBehavior"));

  v48 = *(void **)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 32), "activePresentation");
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  v50 = (id)objc_msgSend(v48, "appendObject:withName:", v49, CFSTR("activePresentation"));

  return (id)objc_msgSend(*(id *)(a1 + 40), "appendObject:withName:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1408), CFSTR("scrollGestureController"));
}

uint64_t __68__CSCoverSheetViewController_descriptionBuilderWithMultilinePrefix___block_invoke_2(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(MEMORY[0x1E0D01748], "descriptionForObject:", a2);
}

uint64_t __68__CSCoverSheetViewController_descriptionBuilderWithMultilinePrefix___block_invoke_3(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(MEMORY[0x1E0D01748], "descriptionForObject:", a2);
}

uint64_t __68__CSCoverSheetViewController_descriptionBuilderWithMultilinePrefix___block_invoke_4(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(MEMORY[0x1E0D01748], "descriptionForObject:", a2);
}

uint64_t __68__CSCoverSheetViewController_descriptionBuilderWithMultilinePrefix___block_invoke_5(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(MEMORY[0x1E0D01748], "descriptionForObject:", a2);
}

uint64_t __68__CSCoverSheetViewController_descriptionBuilderWithMultilinePrefix___block_invoke_6(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(MEMORY[0x1E0D01748], "descriptionForObject:", a2);
}

uint64_t __68__CSCoverSheetViewController_descriptionBuilderWithMultilinePrefix___block_invoke_7(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(MEMORY[0x1E0D01748], "descriptionForObject:", a2);
}

- (NSString)coverSheetIdentifier
{
  objc_class *v2;

  v2 = (objc_class *)objc_opt_class();
  return NSStringFromClass(v2);
}

- (CSPresentation)externalPresentation
{
  void *v3;
  void *v4;
  void *v5;
  NSHashTable *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (-[CSCoverSheetViewController isViewLoaded](self, "isViewLoaded"))
  {
    -[CSCoverSheetViewController view](self, "view");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "window");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    +[CSPresentation presentationWithCoordinateSpace:](CSPresentation, "presentationWithCoordinateSpace:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v6 = self->_externalPresentationProviders;
    v7 = -[NSHashTable countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v14;
      do
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v14 != v9)
            objc_enumerationMutation(v6);
          -[CSCoverSheetViewController _presentationForParticipant:](self, "_presentationForParticipant:", *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * v10), (_QWORD)v13);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v5, "unionPresentation:", v11);

          ++v10;
        }
        while (v8 != v10);
        v8 = -[NSHashTable countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v8);
    }

  }
  else
  {
    v5 = 0;
  }
  return (CSPresentation *)v5;
}

- (void)updateAppearanceForController:(id)a3
{
  id v5;
  void *v6;
  uint64_t v7;
  id v8;

  v5 = a3;
  v8 = v5;
  if (a3 == self)
  {
    objc_msgSend(v5, "coverSheetIdentifier");
    v7 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "_updateActiveAppearanceForReason:", v7);

    v6 = (void *)v7;
  }
  else
  {
    -[CSCoverSheetViewController updateAppearanceForController:withAnimationSettings:completion:](self, "updateAppearanceForController:withAnimationSettings:completion:", v5, 0, 0);
    v6 = v8;
  }

}

- (void)updateAppearanceForController:(id)a3 withAnimationSettings:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  void (**v10)(id, _QWORD);
  NSObject *v11;
  void *v12;
  objc_class *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  void *v19;
  NSObject *v20;
  void *v21;
  _QWORD v22[5];
  id v23;
  _QWORD v24[5];
  id v25;

  v8 = a3;
  v9 = a4;
  v10 = (void (**)(id, _QWORD))a5;
  SBLogDashBoard();
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    -[CSCoverSheetViewController updateAppearanceForController:withAnimationSettings:completion:].cold.2((uint64_t)v8, v11);

  v12 = (void *)MEMORY[0x1E0CB3940];
  v13 = (objc_class *)objc_opt_class();
  NSStringFromClass(v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "stringWithFormat:", CFSTR("%@:%p"), v14, v8);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v8, "participantState") == 2
    || (-[NSMutableArray containsObject:](self->_exemptFromInactiveAppearanceParticipants, "containsObject:", v8) & 1) != 0)
  {
    if (!-[CSCoverSheetViewController isTransitioning](self, "isTransitioning"))
    {
      if (objc_msgSend(MEMORY[0x1E0CEABB0], "_isInAnimationBlock")
        && (!v9
         || (objc_msgSend(MEMORY[0x1E0CEABB0], "_currentAnimationSettings"),
             v16 = (void *)objc_claimAutoreleasedReturnValue(),
             v17 = objc_msgSend(v9, "isEqual:", v16),
             v16,
             v17)))
      {
        v18 = (void *)MEMORY[0x1E0D01908];
        v24[0] = MEMORY[0x1E0C809B0];
        v24[1] = 3221225472;
        v24[2] = __93__CSCoverSheetViewController_updateAppearanceForController_withAnimationSettings_completion___block_invoke;
        v24[3] = &unk_1E8E2DC00;
        v24[4] = self;
        v25 = v15;
        objc_msgSend(v18, "addAlongsideAnimations:completion:", v24, v10);
        v19 = v25;
      }
      else
      {
        v21 = (void *)MEMORY[0x1E0D01908];
        v22[0] = MEMORY[0x1E0C809B0];
        v22[1] = 3221225472;
        v22[2] = __93__CSCoverSheetViewController_updateAppearanceForController_withAnimationSettings_completion___block_invoke_2;
        v22[3] = &unk_1E8E2DC00;
        v22[4] = self;
        v23 = v15;
        objc_msgSend(v21, "animateWithSettings:actions:completion:", v9, v22, v10);
        v19 = v23;
      }

      goto LABEL_17;
    }
  }
  else
  {
    SBLogDashBoard();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      -[CSCoverSheetViewController updateBehaviorForController:].cold.1();

  }
  if (v10)
    v10[2](v10, 0);
LABEL_17:

}

uint64_t __93__CSCoverSheetViewController_updateAppearanceForController_withAnimationSettings_completion___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateActiveAppearanceForReason:", *(_QWORD *)(a1 + 40));
}

uint64_t __93__CSCoverSheetViewController_updateAppearanceForController_withAnimationSettings_completion___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateActiveAppearanceForReason:", *(_QWORD *)(a1 + 40));
}

- (CSCoverSheetViewPresenting)presenter
{
  return 0;
}

- (int64_t)presentationStyle
{
  return 0;
}

- (int64_t)presentationType
{
  return 0;
}

- (int64_t)presentationPriority
{
  return 0;
}

- (int64_t)presentationTransition
{
  return 0;
}

- (int64_t)presentationAltitude
{
  return 0;
}

- (CAFrameRateRange)presentationPreferredFrameRateRange
{
  float v2;
  float v3;
  float v4;
  CAFrameRateRange result;

  v2 = *MEMORY[0x1E0CD23C0];
  v3 = *(float *)(MEMORY[0x1E0CD23C0] + 4);
  v4 = *(float *)(MEMORY[0x1E0CD23C0] + 8);
  result.preferred = v4;
  result.maximum = v3;
  result.minimum = v2;
  return result;
}

- (unsigned)presentationFrameRateRangeReason
{
  return 0;
}

- (void)setLegibilitySettings:(id)a3
{
  -[CSCoverSheetViewController _updateActiveAppearanceForReason:](self, "_updateActiveAppearanceForReason:", CFSTR("setLegibilitySettings"));
}

- (NSArray)presentationRegions
{
  return 0;
}

- (void)handleAction:(id)a3 fromSender:(id)a4
{
  id v6;
  CSRemoteContentModalViewController *v7;
  NSObject *v8;
  id WeakRetained;
  void *v10;
  void *v11;
  void *v12;
  void (**v13)(void);
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  CSRemoteContentModalViewController *v25;
  CSRemoteContentModalViewController *v26;
  void *v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  void *v32;
  objc_class *v33;
  void *v34;
  void *v35;
  int v36;
  NSObject *v37;
  _BOOL4 v38;
  void *v39;
  void *v40;
  dispatch_time_t v41;
  id v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  int v47;
  uint64_t v48;
  CSFocusActivityViewController *v49;
  CSFocusActivityViewController *activityViewController;
  void *v51;
  uint64_t v52;
  int v53;
  void *v54;
  int v55;
  void *v56;
  uint64_t v57;
  int v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  void *v65;
  _QWORD block[4];
  id v67;
  _QWORD v68[4];
  id v69;
  _QWORD v70[5];
  _QWORD v71[5];
  id v72;
  uint8_t buf[4];
  void *v74;
  __int16 v75;
  id v76;
  __int16 v77;
  void *v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = (CSRemoteContentModalViewController *)a4;
  if (-[CSCoverSheetViewController participantState](self, "participantState") == 2)
  {
    SBLogDashBoard();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      _SBFLoggingMethodProem();
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0D01748], "descriptionForObject:", v7);
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412802;
      v74 = v43;
      v75 = 2112;
      v76 = v6;
      v77 = 2112;
      v78 = v44;
      _os_log_debug_impl(&dword_1D0337000, v8, OS_LOG_TYPE_DEBUG, "%@ %@ fromSender: %@", buf, 0x20u);

    }
    WeakRetained = objc_loadWeakRetained((id *)&self->_idleTimerController);
    switch(objc_msgSend(v6, "type"))
    {
      case 0:
        objc_msgSend(v6, "context");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = v10;
        if (v10 && objc_msgSend(v10, "intent"))
        {
          -[CSCoverSheetContextProviding unlockRequester](self->_coverSheetContext, "unlockRequester");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "createUnlockRequestForActionContext:", v11);
          v13 = (void (**)(void))objc_claimAutoreleasedReturnValue();

          -[CSCoverSheetViewController setCustomLockScreenActionContext:](self, "setCustomLockScreenActionContext:", v11);
          -[CSCoverSheetContextProviding unlockRequester](self->_coverSheetContext, "unlockRequester");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v71[0] = MEMORY[0x1E0C809B0];
          v71[1] = 3221225472;
          v71[2] = __54__CSCoverSheetViewController_handleAction_fromSender___block_invoke;
          v71[3] = &unk_1E8E2E468;
          v71[4] = self;
          v72 = v11;
          objc_msgSend(v14, "unlockWithRequest:completion:", v13, v71);

          v15 = v72;
          goto LABEL_60;
        }
        objc_msgSend(v11, "action");
        v45 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v45)
          goto LABEL_25;
        objc_msgSend(v11, "action");
        v13 = (void (**)(void))objc_claimAutoreleasedReturnValue();
        v13[2]();
        goto LABEL_61;
      case 1:
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          goto LABEL_71;
        if ((CSRemoteContentModalViewController *)self->_accessoryViewController == v7
          && -[CSCoverSheetViewController _currentlyShowingAccessoryView](self, "_currentlyShowingAccessoryView"))
        {
          -[CSCoverSheetViewController _dismissAccessoryViewController:animated:](self, "_dismissAccessoryViewController:animated:", v7, 1);
        }
        else if ((CSRemoteContentModalViewController *)self->_modalPresentationController == v7)
        {
          -[CSCoverSheetViewController _setModalPresentationControllerVisibility:](self, "_setModalPresentationControllerVisibility:", 0);
        }
        else if ((CSRemoteContentModalViewController *)self->_posterSwitcherViewController == v7)
        {
          -[CSCoverSheetViewController _dismissPosterSwitcherViewController](self, "_dismissPosterSwitcherViewController");
        }
        else if (self->_remoteContentModalViewController == v7
               || (CSRemoteContentModalViewController *)self->_remoteContentInlineViewController == v7)
        {
          -[CSCoverSheetViewController _dismissRemoteViewControllerForReason:](self, "_dismissRemoteViewControllerForReason:", 2);
        }
        else
        {
          -[CSCoverSheetViewController pageViewControllers](self, "pageViewControllers");
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          v47 = objc_msgSend(v46, "containsObject:", v7);

          if (v47)
          {
            v48 = objc_opt_class();
            __BSSafeCast(v7, v48);
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            -[CSCoverSheetViewController _dismissToMainPageFromPageViewController:](self, "_dismissToMainPageFromPageViewController:", v11);
LABEL_25:

          }
          else
          {
            -[CSCoverSheetViewController mainPageContentViewController](self, "mainPageContentViewController");
            v65 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v65, "dismissContentViewController:animated:", v7, 1);

            -[CSCoverSheetViewController _dismissModalViewController:animated:completion:](self, "_dismissModalViewController:animated:completion:", v7, 1, 0);
          }
        }
LABEL_71:

        break;
      case 2:
        v16 = objc_loadWeakRetained((id *)&self->_emergencyCaller);
        objc_msgSend(v16, "launchEmergencyDialer");
        goto LABEL_27;
      case 3:
        objc_msgSend(WeakRetained, "resetIdleTimerIfTopMost");
        goto LABEL_71;
      case 4:
        -[SBUIPhoneUnlockWithWatchController setSignificantUserInteractionOccuredSinceScreenOn:](self->_phoneUnlockWithWatchController, "setSignificantUserInteractionOccuredSinceScreenOn:", 1);
        -[CSLockScreenSettings idleTimerSettings](self->_prototypeSettings, "idleTimerSettings");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = objc_msgSend(v17, "increaseNotificationScrollLogging");

        if (v18)
        {
          SBLogIdleTimer();
          v19 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1D0337000, v19, OS_LOG_TYPE_DEFAULT, "[SignificantUserInteraction] trying idle timer reset", buf, 2u);
          }

        }
        objc_msgSend(WeakRetained, "resetIdleTimerIfTopMost");
        v20 = 21;
        goto LABEL_24;
      case 5:
        v20 = 22;
        goto LABEL_24;
      case 6:
        v20 = 23;
        goto LABEL_24;
      case 7:
        -[CSCoverSheetViewController _addBedtimeGreetingBackgroundView](self, "_addBedtimeGreetingBackgroundView");
        goto LABEL_71;
      case 8:
        -[CSCoverSheetViewController _removeBedtimeGreetingBackgroundViewAnimated:](self, "_removeBedtimeGreetingBackgroundViewAnimated:", objc_msgSend(v6, "animated"));
        goto LABEL_71;
      case 9:
        v20 = 37;
LABEL_24:
        +[CSEvent eventWithType:](CSEvent, "eventWithType:", v20);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        -[CSCoverSheetViewController _handleEvent:](self, "_handleEvent:", v11);
        goto LABEL_25;
      case 10:
        -[CSCoverSheetContextProviding reachabilityController](self->_coverSheetContext, "reachabilityController");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "deactivateReachability");
LABEL_27:

        goto LABEL_71;
      case 11:
        -[CSCoverSheetContextProviding unlockRequester](self->_coverSheetContext, "unlockRequester");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "createUnlockRequest");
        v22 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v22, "setIntent:", 3);
        objc_msgSend(v22, "setSource:", 15);
        -[CSCoverSheetContextProviding unlockRequester](self->_coverSheetContext, "unlockRequester");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "unlockWithRequest:completion:", v22, 0);

        goto LABEL_71;
      case 12:
        v24 = objc_opt_class();
        v25 = v7;
        if (v24)
        {
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v26 = v25;
          else
            v26 = 0;
        }
        else
        {
          v26 = 0;
        }
        v49 = v26;

        activityViewController = self->_activityViewController;
        self->_activityViewController = v49;

        objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        v52 = objc_msgSend(v51, "userInterfaceIdiom");

        if ((v52 & 0xFFFFFFFFFFFFFFFBLL) == 1
          || !-[CSUserPresenceMonitor isUserPresenceDetectionSupported](self->_userPresenceMonitor, "isUserPresenceDetectionSupported"))
        {
          v53 = 0;
        }
        else
        {
          v53 = !-[CSUserPresenceMonitor userPresenceDetectedSinceWake](self->_userPresenceMonitor, "userPresenceDetectedSinceWake");
        }
        if (!self->_activityViewController
          || ((!-[CSCoverSheetViewController _canPresentSwipeDismissableModal](self, "_canPresentSwipeDismissableModal") | v53) & 1) != 0)
        {
          goto LABEL_71;
        }
        -[CSCoverSheetViewController activeBehavior](self, "activeBehavior");
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        v55 = objc_msgSend(v54, "areRestrictedCapabilities:", 0x400000);

        objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        v57 = objc_msgSend(v56, "userInterfaceIdiom");

        v58 = (v57 & 0xFFFFFFFFFFFFFFFBLL) != 1;
        if ((v57 & 0xFFFFFFFFFFFFFFFBLL) == 1 && v55)
        {
          +[CSLockScreenDomain rootSettings](CSLockScreenDomain, "rootSettings");
          v59 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v59, "focusSettings");
          v60 = (void *)objc_claimAutoreleasedReturnValue();
          v58 = objc_msgSend(v60, "requiresAuthWithoutControlCenterAccess");

        }
        v61 = MEMORY[0x1E0C809B0];
        v70[0] = MEMORY[0x1E0C809B0];
        v70[1] = 3221225472;
        v70[2] = __54__CSCoverSheetViewController_handleAction_fromSender___block_invoke_312;
        v70[3] = &unk_1E8E2DB38;
        v70[4] = self;
        v62 = MEMORY[0x1D17E1614](v70);
        v11 = (void *)v62;
        if (v58)
        {
          -[CSCoverSheetContextProviding unlockRequester](self->_coverSheetContext, "unlockRequester");
          v63 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v63, "createUnlockRequest");
          v13 = (void (**)(void))objc_claimAutoreleasedReturnValue();

          objc_msgSend(v13, "setIntent:", 2);
          objc_msgSend(v13, "setSource:", 24);
          objc_msgSend(v13, "setName:", CFSTR("FocusPicker"));
          objc_msgSend(v13, "setWantsBiometricPresentation:", 1);
          objc_msgSend(v13, "setConfirmedNotInPocket:", 1);
          -[CSCoverSheetContextProviding unlockRequester](self->_coverSheetContext, "unlockRequester");
          v64 = (void *)objc_claimAutoreleasedReturnValue();
          v68[0] = v61;
          v68[1] = 3221225472;
          v68[2] = __54__CSCoverSheetViewController_handleAction_fromSender___block_invoke_2;
          v68[3] = &unk_1E8E2DFA8;
          v69 = v11;
          objc_msgSend(v64, "unlockWithRequest:completion:", v13, v68);

          v15 = v69;
LABEL_60:

LABEL_61:
        }
        else
        {
          (*(void (**)(uint64_t))(v62 + 16))(v62);
        }
        goto LABEL_25;
      case 13:
        -[CSCoverSheetViewController viewIfLoaded](self, "viewIfLoaded");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "window");
        v28 = objc_claimAutoreleasedReturnValue();
        objc_msgSend((id)v28, "windowScene");
        v11 = (void *)objc_claimAutoreleasedReturnValue();

        v29 = objc_loadWeakRetained((id *)&self->_delegate);
        LOBYTE(v28) = objc_msgSend(v29, "coverSheetViewControllerIsShowingSecureApp:", self);

        if ((v28 & 1) == 0)
        {
          if (v11)
          {
            -[CSCoverSheetViewController traitCollection](self, "traitCollection");
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            v31 = objc_msgSend(v30, "_backlightLuminance");

            if (v31 == 1)
            {
              v32 = (void *)MEMORY[0x1E0CB3940];
              v33 = (objc_class *)objc_opt_class();
              NSStringFromClass(v33);
              v34 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v32, "stringWithFormat:", CFSTR("Inactive content update from <%@: %p>"), v34, v7);
              v35 = (void *)objc_claimAutoreleasedReturnValue();

              v36 = objc_msgSend(v6, "animated");
              SBLogLiveRendering();
              v37 = objc_claimAutoreleasedReturnValue();
              v38 = os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
              if (v36)
              {
                if (v38)
                {
                  *(_DWORD *)buf = 138412290;
                  v74 = v35;
                  _os_log_impl(&dword_1D0337000, v37, OS_LOG_TYPE_DEFAULT, "Will request live-rendering assertion with reason: '%@'", buf, 0xCu);
                }

                objc_msgSend(MEMORY[0x1E0DA9D68], "sharedInstance");
                v39 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v39, "acquireLiveRenderingAssertionForUIScene:reason:", v11, v35);
                v40 = (void *)objc_claimAutoreleasedReturnValue();

                v41 = dispatch_time(0, 1000000000);
                block[0] = MEMORY[0x1E0C809B0];
                block[1] = 3221225472;
                block[2] = __54__CSCoverSheetViewController_handleAction_fromSender___block_invoke_319;
                block[3] = &unk_1E8E2DB38;
                v67 = v40;
                v42 = v40;
                dispatch_after(v41, MEMORY[0x1E0C80D38], block);

              }
              else
              {
                if (v38)
                {
                  *(_DWORD *)buf = 138412290;
                  v74 = v35;
                  _os_log_impl(&dword_1D0337000, v37, OS_LOG_TYPE_DEFAULT, "Will invalidate timelines with reason '%@'", buf, 0xCu);
                }

                objc_msgSend(v11, "_backlightSceneEnvironment");
                v42 = (id)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v42, "invalidateAllTimelinesForReason:", v35);
              }

            }
          }
        }
        goto LABEL_25;
      default:
        goto LABEL_71;
    }
  }

}

void __54__CSCoverSheetViewController_handleAction_fromSender___block_invoke(uint64_t a1, char a2)
{
  void *v3;
  void *v4;

  if ((a2 & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "_customLockScreenActionContext");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = *(void **)(a1 + 40);

    if (v3 == v4)
      objc_msgSend(*(id *)(a1 + 32), "setCustomLockScreenActionContext:", 0);
  }
}

void __54__CSCoverSheetViewController_handleAction_fromSender___block_invoke_312(uint64_t a1)
{
  void *v2;
  CSDismissableModalViewController *v3;
  NSObject *v4;
  void *v5;
  void *v6;
  id v7;
  CSDismissableModalViewController *v8;
  _QWORD v9[4];
  CSDismissableModalViewController *v10;
  id v11;
  uint8_t buf[16];

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1720), "activityPickerViewController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setParentContainer:", *(_QWORD *)(a1 + 32));
  v3 = objc_alloc_init(CSDismissableModalViewController);
  SBLogDashBoard();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1D0337000, v4, OS_LOG_TYPE_DEFAULT, "[ZStack-Participant] adding activity picker modal home affordance", buf, 2u);
  }

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1040), "modalHomeAffordanceController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSDismissableModalViewController setHomeAffordanceController:](v3, "setHomeAffordanceController:", v5);

  -[CSDismissableModalViewController setDelegate:](v3, "setDelegate:", v2);
  objc_msgSend(v2, "setModalPresenter:", v3);
  v6 = *(void **)(a1 + 32);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __54__CSCoverSheetViewController_handleAction_fromSender___block_invoke_313;
  v9[3] = &unk_1E8E2DC00;
  v10 = v3;
  v11 = v2;
  v7 = v2;
  v8 = v3;
  objc_msgSend(v6, "_presentModalViewController:shouldDismissOverlays:animated:completion:", v8, 0, 0, v9);

}

uint64_t __54__CSCoverSheetViewController_handleAction_fromSender___block_invoke_313(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "presentContentViewController:animated:", *(_QWORD *)(a1 + 40), 1);
}

uint64_t __54__CSCoverSheetViewController_handleAction_fromSender___block_invoke_2(uint64_t result, int a2)
{
  if (a2)
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 32) + 16))();
  return result;
}

uint64_t __54__CSCoverSheetViewController_handleAction_fromSender___block_invoke_319(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "invalidate");
}

- (void)_addBedtimeGreetingBackgroundView
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  void *v14;
  int v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "bedtimeGreetingViewBackgroundView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4)
  {
    v5 = objc_alloc(MEMORY[0x1E0DAC270]);
    objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "bounds");
    v7 = (void *)objc_msgSend(v5, "initWithFrame:");

    objc_msgSend(v7, "setAutoresizingMask:", 18);
    -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "legibilitySettings");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "style");

    if (v10 == 1)
      v11 = 5;
    else
      v11 = 2;
    objc_msgSend(v7, "setBackgroundStyle:", v11);
    -[CSCoverSheetViewController _averageLockScreenWallpaperColor](self, "_averageLockScreenWallpaperColor");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setReduceTransparencyBackingColor:", v12);

    SBLogDoNotDisturbBedtime();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v15 = 138543362;
      v16 = v7;
      _os_log_impl(&dword_1D0337000, v13, OS_LOG_TYPE_DEFAULT, "Adding greeting view background: %{public}@", (uint8_t *)&v15, 0xCu);
    }

    -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setBedtimeGreetingViewBackgroundView:", v7);

  }
}

- (void)_removeBedtimeGreetingBackgroundViewAnimated:(BOOL)a3
{
  _BOOL4 v3;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  double v10;
  _QWORD v11[5];
  _QWORD v12[5];
  uint8_t buf[4];
  void *v14;
  uint64_t v15;

  v3 = a3;
  v15 = *MEMORY[0x1E0C80C00];
  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "bedtimeGreetingViewBackgroundView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    SBLogDoNotDisturbBedtime();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "bedtimeGreetingViewBackgroundView");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v14 = v9;
      _os_log_impl(&dword_1D0337000, v7, OS_LOG_TYPE_DEFAULT, "Removing greeting view background: %{public}@", buf, 0xCu);

    }
    v10 = 0.6;
    if (!v3)
      v10 = 0.0;
    v11[4] = self;
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __75__CSCoverSheetViewController__removeBedtimeGreetingBackgroundViewAnimated___block_invoke;
    v12[3] = &unk_1E8E2DB38;
    v12[4] = self;
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __75__CSCoverSheetViewController__removeBedtimeGreetingBackgroundViewAnimated___block_invoke_2;
    v11[3] = &unk_1E8E2DDE0;
    objc_msgSend(MEMORY[0x1E0CEABB0], "animateWithDuration:animations:completion:", v12, v11, v10);
  }
}

void __75__CSCoverSheetViewController__removeBedtimeGreetingBackgroundViewAnimated___block_invoke(uint64_t a1)
{
  void *v1;
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "coverSheetView");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "bedtimeGreetingViewBackgroundView");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setBackgroundStyle:", 1);

}

void __75__CSCoverSheetViewController__removeBedtimeGreetingBackgroundViewAnimated___block_invoke_2(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "coverSheetView");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setBedtimeGreetingViewBackgroundView:", 0);

}

- (BOOL)wouldHandleButtonEvent:(id)a3
{
  id v4;
  CSModalPresentationViewController **p_modalPresentationController;
  CSModalPresentationViewController *v6;
  void *v7;
  CSModalPresentationViewController *v8;
  double v9;
  NSObject *v10;
  BOOL v11;

  v4 = a3;
  p_modalPresentationController = &self->_modalPresentationController;
  if (-[CSPresentationViewController participantState](self->_modalPresentationController, "participantState") == 2)
  {
    if (-[CSPresentationViewController wouldHandleButtonEvent:](*p_modalPresentationController, "wouldHandleButtonEvent:", v4))
    {
      v6 = *p_modalPresentationController;
      if (v6)
        goto LABEL_12;
    }
  }
  else
  {
    -[CSCoverSheetViewController pageViewControllerAtIndex:](self, "pageViewControllerAtIndex:", self->_lastSettledPageIndex);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v7, "wouldHandleButtonEvent:", v4))
      v6 = v7;
    else
      v6 = 0;

    if (v6)
      goto LABEL_12;
  }
  -[CSCoverSheetViewController overlayControllerIfExists](self, "overlayControllerIfExists");
  v8 = (CSModalPresentationViewController *)objc_claimAutoreleasedReturnValue();
  v6 = v8;
  if (!v8
    || (-[CSModalPresentationViewController presentationProgress](v8, "presentationProgress"), v9 <= 0.0)
    || !-[CSPresentationViewController wouldHandleButtonEvent:](v6, "wouldHandleButtonEvent:", v4))
  {

    v11 = 0;
    goto LABEL_16;
  }
LABEL_12:
  SBLogDashBoard();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    -[CSCoverSheetViewController wouldHandleButtonEvent:].cold.1((uint64_t)p_modalPresentationController, v4, v10);

  v11 = 1;
LABEL_16:

  return v11;
}

- (void)coverSheetLegibilityProviderDidUpdate:(id)a3
{
  -[CSCoverSheetViewController _updateActiveAppearanceForReason:](self, "_updateActiveAppearanceForReason:", CFSTR("legibilityProvider"));
}

- (BOOL)isTransitioningInteractively
{
  CSCoverSheetViewTransitionSource *currentTransitionSource;
  uint64_t v4;

  currentTransitionSource = self->_currentTransitionSource;
  if (currentTransitionSource)
  {
    -[CSCoverSheetViewTransitionSource transitionContext](currentTransitionSource, "transitionContext");
    LOBYTE(currentTransitionSource) = v4 == 3;
  }
  return (char)currentTransitionSource;
}

- (BOOL)shouldModifyPageScrolling
{
  void *v2;
  BOOL v3;

  -[CSCoverSheetViewController activeBehavior](self, "activeBehavior");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "scrollingStrategy") != 2;

  return v3;
}

- (BOOL)isTouchLocation:(CGPoint)a3 inRestrictedRectForGestureView:(id)a4
{
  double y;
  double x;
  id v7;
  void *v8;
  char v9;
  void *v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  CGFloat Width;
  double Height;
  void *v21;
  double v22;
  CGFloat v23;
  double v24;
  double v25;
  void *v26;
  uint64_t v27;
  int v28;
  _BOOL4 v29;
  BOOL v30;
  char v31;
  CGPoint v33;
  CGPoint v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;

  y = a3.y;
  x = a3.x;
  v7 = a4;
  -[CSMainPageContentViewController combinedListViewController](self->_mainPageContentViewController, "combinedListViewController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "isTouchLocationInRestrictedRect:", x, y);

  -[CSCoverSheetViewController view](self, "view");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "bounds");
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v18 = v17;

  v35.origin.x = v12;
  v35.origin.y = v14;
  v35.size.width = v16;
  v35.size.height = v18;
  Width = CGRectGetWidth(v35);
  v36.origin.x = v12;
  v36.origin.y = v14;
  v36.size.width = v16;
  v36.size.height = v18;
  Height = CGRectGetHeight(v36);
  -[CSCoverSheetViewController view](self, "view");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "safeAreaInsets");
  v23 = v22;
  v25 = v24;

  objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = objc_msgSend(v26, "userInterfaceIdiom");

  if ((v27 & 0xFFFFFFFFFFFFFFFBLL) == 1)
  {
    LOBYTE(v28) = 0;
  }
  else
  {
    v37.origin.x = 0.0;
    v37.origin.y = 0.0;
    v37.size.width = Width;
    v37.size.height = v23;
    v33.x = x;
    v33.y = y;
    v29 = CGRectContainsPoint(v37, v33);
    v38.origin.y = Height - v25;
    v38.origin.x = 0.0;
    v38.size.width = Width;
    v38.size.height = v25;
    v34.x = x;
    v34.y = y;
    v28 = v29 | CGRectContainsPoint(v38, v34);
  }
  v30 = -[CSCoverSheetViewController _quickActionButtonInterpretsLocation:asBesideContentForGestureView:](self, "_quickActionButtonInterpretsLocation:asBesideContentForGestureView:", v7, x, y);
  if ((v9 & 1) != 0)
    v31 = 1;
  else
    v31 = v28 | v30;

  return v31;
}

- (void)setRestrictsTouchesForRemoteView:(BOOL)a3
{
  _BOOL8 v3;
  id v4;

  v3 = a3;
  -[CSMainPageContentViewController combinedListViewController](self->_mainPageContentViewController, "combinedListViewController");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setRestrictsTouchesForRemoteView:", v3);

}

- (void)transitionSource:(id)a3 willBeginWithType:(int64_t)a4
{
  CSCoverSheetViewTransitionSource *v7;
  NSObject *v8;
  CSCoverSheetViewTransitionSource *currentTransitionSource;
  BOOL v10;
  NSObject *v11;
  objc_class *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  CSCoverSheetViewTransitionSource *v18;
  NSObject *v19;
  objc_class *v21;
  void *v22;
  objc_class *v23;
  void *v24;
  __int128 v25;
  const __CFString *v26;
  BSInvalidatable *displayLayoutTransitionAssertion;
  BSInvalidatable *v28;
  BSInvalidatable *v29;
  BSInvalidatable *v30;
  objc_class *v31;
  void *v32;
  objc_class *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint8_t buf[32];
  __int128 v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v7 = (CSCoverSheetViewTransitionSource *)a3;
  if (self->_transitionType
    && !-[CSCoverSheetViewController _isKnownTransitionConflictFrom:to:](self, "_isKnownTransitionConflictFrom:to:", self->_currentTransitionSource, v7))
  {
    SBLogDashBoard();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
    {
      v31 = (objc_class *)objc_opt_class();
      NSStringFromClass(v31);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      NSStringFromCoverSheetTransitionType(self->_transitionType);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = (objc_class *)objc_opt_class();
      NSStringFromClass(v33);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      NSStringFromCoverSheetTransitionType(a4);
      *(_DWORD *)buf = 138413058;
      *(_QWORD *)&buf[4] = v38;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v32;
      *(_WORD *)&buf[22] = 2112;
      *(_QWORD *)&buf[24] = v34;
      LOWORD(v40) = 2112;
      *(_QWORD *)((char *)&v40 + 2) = objc_claimAutoreleasedReturnValue();
      v35 = *(void **)((char *)&v40 + 2);
      _os_log_fault_impl(&dword_1D0337000, v8, OS_LOG_TYPE_FAULT, "[Transition] Nested transitions are not supported. Current source: %@ | type: %@; new source: %@ | type: %@",
        buf,
        0x2Au);

    }
  }
  currentTransitionSource = self->_currentTransitionSource;
  if (currentTransitionSource)
    v10 = currentTransitionSource == v7;
  else
    v10 = 1;
  if (v10)
  {
    if (!a4)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("CSCoverSheetViewController.m"), 3838, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("type != CSCoverSheetTransitionTypeNone"));

    }
    SBLogDashBoard();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = (objc_class *)objc_opt_class();
      NSStringFromClass(v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v13;
      _os_log_impl(&dword_1D0337000, v11, OS_LOG_TYPE_DEFAULT, "[Transition] Will begin from %@", buf, 0xCu);

    }
    if (!self->_currentTransitionSource)
    {
      -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      -[CSCoverSheetViewController setPreviousAppearance:](self, "setPreviousAppearance:", v14);

      v15 = (void *)MEMORY[0x1E0CB3940];
      -[CSCoverSheetViewTransitionSource coverSheetIdentifier](v7, "coverSheetIdentifier");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "stringWithFormat:", CFSTR("beginTransition-%@"), v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();

      -[CSCoverSheetViewController _updateActiveBehaviorsForReason:updatingAppearanceIfNeeded:](self, "_updateActiveBehaviorsForReason:updatingAppearanceIfNeeded:", v17, 0);
      -[CSCoverSheetViewController setCurrentTransitionSource:](self, "setCurrentTransitionSource:", v7);
      self->_transitionType = a4;
      if (-[CSCoverSheetViewController _isSourceForHorizontalScrolling:](self, "_isSourceForHorizontalScrolling:", v7))
      {
        v18 = self->_currentTransitionSource;
        if (v18)
        {
          -[CSCoverSheetViewTransitionSource transitionContext](v18, "transitionContext");
        }
        else
        {
          v40 = 0u;
          memset(buf, 0, sizeof(buf));
        }
        v25 = *(_OWORD *)&buf[16];
        *(_OWORD *)&self->_transitionContext.value = *(_OWORD *)buf;
        *(_OWORD *)&self->_transitionContext.interval.start.inclusive = v25;
        *(_OWORD *)&self->_transitionContext.interval.end.inclusive = v40;
      }
      -[CSCoverSheetViewController _updateActiveAppearanceForReason:](self, "_updateActiveAppearanceForReason:", v17);

    }
    if (-[CSCoverSheetViewController _isSourceForHorizontalScrolling:](self, "_isSourceForHorizontalScrolling:", v7))
      v26 = CFSTR("com.apple.springboard.lock-screen.scroll");
    else
      v26 = CFSTR("CSCoverSheetViewController");
    -[CSCoverSheetViewControllerBase _displayLayoutPublisher](self, "_displayLayoutPublisher");
    v19 = objc_claimAutoreleasedReturnValue();
    if (!v19)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("CSCoverSheetViewController.m"), 3868, CFSTR("No publisher"));

    }
    displayLayoutTransitionAssertion = self->_displayLayoutTransitionAssertion;
    if (displayLayoutTransitionAssertion)
    {
      -[BSInvalidatable invalidate](displayLayoutTransitionAssertion, "invalidate");
      v28 = self->_displayLayoutTransitionAssertion;
      self->_displayLayoutTransitionAssertion = 0;

    }
    -[NSObject transitionAssertionWithReason:](v19, "transitionAssertionWithReason:", v26);
    v29 = (BSInvalidatable *)objc_claimAutoreleasedReturnValue();
    v30 = self->_displayLayoutTransitionAssertion;
    self->_displayLayoutTransitionAssertion = v29;

  }
  else
  {
    SBLogDashBoard();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      v21 = (objc_class *)objc_opt_class();
      NSStringFromClass(v21);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = (objc_class *)objc_opt_class();
      NSStringFromClass(v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v22;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v24;
      _os_log_impl(&dword_1D0337000, v19, OS_LOG_TYPE_DEFAULT, "[Transition] Ignoring transition began from %@ since there is an active transition from %@", buf, 0x16u);

    }
  }

}

- (void)transitionSource:(id)a3 didUpdateTransitionWithContext:(id *)a4
{
  CSCoverSheetViewTransitionSource *v6;
  CSCoverSheetViewTransitionSource *currentTransitionSource;
  NSObject *v8;
  NSObject *v9;
  objc_class *v10;
  void *v11;
  objc_class *v12;
  void *v13;
  $06DF839FA51B3C3CDB187C0923524556 var1;
  $06DF839FA51B3C3CDB187C0923524556 v15;
  double v16;
  double v17;
  __int128 v18;
  __int128 v19;
  unint64_t var0;
  BOOL v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  $DCA72CBAB2CDF67DA9370D0153CCCF3D end;
  unint64_t v26;
  void *v27;
  objc_class *v28;
  void *v29;
  __int128 v30;
  void *v31;
  _QWORD v32[7];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  BOOL v36;
  _QWORD v37[5];
  _BYTE buf[32];
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v6 = (CSCoverSheetViewTransitionSource *)a3;
  currentTransitionSource = self->_currentTransitionSource;
  SBLogDashBoard();
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (currentTransitionSource == v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      v28 = (objc_class *)objc_opt_class();
      NSStringFromClass(v28);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = *(_OWORD *)&a4->var1.var0.var1;
      *(_OWORD *)buf = *(_OWORD *)&a4->var0;
      *(_OWORD *)&buf[16] = v30;
      v39 = *(_OWORD *)&a4->var1.var1.var1;
      NSStringFromCoverSheetTransitionContext((__int128 *)buf);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v29;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v31;
      _os_log_debug_impl(&dword_1D0337000, v9, OS_LOG_TYPE_DEBUG, "[Transition] Update from %@ with context %@", buf, 0x16u);

    }
    var1 = a4->var1.var1;
    *($06DF839FA51B3C3CDB187C0923524556 *)buf = a4->var1.var0;
    *($06DF839FA51B3C3CDB187C0923524556 *)&buf[16] = var1;
    if (BSIntervalOrder()
      || self->_transitionContext.mode
      && (end = self->_transitionContext.interval.end,
          *($DCA72CBAB2CDF67DA9370D0153CCCF3D *)buf = self->_transitionContext.interval.start,
          *($DCA72CBAB2CDF67DA9370D0153CCCF3D *)&buf[16] = end,
          BSIntervalOrder()))
    {
      v15 = a4->var1.var1;
      *($06DF839FA51B3C3CDB187C0923524556 *)buf = a4->var1.var0;
      *($06DF839FA51B3C3CDB187C0923524556 *)&buf[16] = v15;
      BSIntervalFractionForValue();
      v17 = v16;
      if (-[CSCoverSheetViewController _isSourceForHorizontalScrolling:](self, "_isSourceForHorizontalScrolling:", v6))
      {
        v19 = *(_OWORD *)&a4->var1.var0.var1;
        v18 = *(_OWORD *)&a4->var1.var1.var1;
        *(_OWORD *)&self->_transitionContext.value = *(_OWORD *)&a4->var0;
        *(_OWORD *)&self->_transitionContext.interval.start.inclusive = v19;
        *(_OWORD *)&self->_transitionContext.interval.end.inclusive = v18;
        var0 = (unint64_t)a4->var1.var1.var0;
        v21 = (a4->var2 & 0xFFFFFFFFFFFFFFFELL) == 2;
        -[CSCoverSheetViewController _allowedPageViewControllers](self, "_allowedPageViewControllers");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v32[1] = 3221225472;
        v23 = *(_OWORD *)&a4->var1.var0.var1;
        v33 = *(_OWORD *)&a4->var0;
        v32[0] = MEMORY[0x1E0C809B0];
        v32[2] = __78__CSCoverSheetViewController_transitionSource_didUpdateTransitionWithContext___block_invoke_2;
        v32[3] = &unk_1E8E2E4B0;
        v32[4] = self;
        v32[5] = var0;
        v36 = v21;
        *(double *)&v32[6] = v17;
        v24 = *(_OWORD *)&a4->var1.var1.var1;
        v34 = v23;
        v35 = v24;
        objc_msgSend(v22, "enumerateObjectsUsingBlock:", v32);

      }
      -[CSCoverSheetViewController _updateIdleTimerForTransitionProgress:](self, "_updateIdleTimerForTransitionProgress:", v17);
      -[CSCoverSheetViewController _updateActiveAppearanceForReason:](self, "_updateActiveAppearanceForReason:", CFSTR("TransitionSourceDidUpdate"));
    }
    else if (-[CSCoverSheetViewController _isSourceForHorizontalScrolling:](self, "_isSourceForHorizontalScrolling:", v6))
    {
      v26 = (unint64_t)a4->var1.var1.var0;
      -[CSCoverSheetViewController _allowedPageViewControllers](self, "_allowedPageViewControllers");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v37[0] = MEMORY[0x1E0C809B0];
      v37[1] = 3221225472;
      v37[2] = __78__CSCoverSheetViewController_transitionSource_didUpdateTransitionWithContext___block_invoke;
      v37[3] = &__block_descriptor_40_e37_v32__0__CSPageViewController_8Q16_B24l;
      v37[4] = v26;
      objc_msgSend(v27, "enumerateObjectsUsingBlock:", v37);

    }
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v10 = (objc_class *)objc_opt_class();
      NSStringFromClass(v10);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = (objc_class *)objc_opt_class();
      NSStringFromClass(v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v11;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v13;
      _os_log_impl(&dword_1D0337000, v9, OS_LOG_TYPE_DEFAULT, "[Transition] Ignoring transition update from %@ since there is an active transition from %@", buf, 0x16u);

    }
  }

}

uint64_t __78__CSCoverSheetViewController_transitionSource_didUpdateTransitionWithContext___block_invoke(uint64_t result, void *a2, uint64_t a3)
{
  if (*(_QWORD *)(result + 32) == a3)
    return objc_msgSend(a2, "updateTransitionWhileRubberBandingInProgress:", 1);
  return result;
}

void __78__CSCoverSheetViewController_transitionSource_didUpdateTransitionWithContext___block_invoke_2(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  int v6;
  id v7;
  uint64_t v8;
  id v9;

  v5 = a2;
  v9 = v5;
  if (*(_QWORD *)(a1 + 40) == a3)
  {
    v6 = objc_msgSend(*(id *)(a1 + 32), "_isPageContentHidden");
    v7 = v9;
    v8 = v6 ^ 1u;
  }
  else
  {
    v7 = v5;
    v8 = 0;
  }
  if (objc_msgSend(*(id *)(a1 + 32), "bs_beginAppearanceTransitionForChildViewController:toVisible:animated:", v7, v8, *(unsigned __int8 *)(a1 + 104)))
  {
    objc_msgSend(v9, "setTransitioning:", 1);
    objc_msgSend(v9, "willTransitionToVisible:", v8);
    if ((_DWORD)v8)
      objc_msgSend(v9, "rebuildAppearance");
  }
  if (objc_msgSend(v9, "isTransitioning"))
    objc_msgSend(v9, "updateTransitionToVisible:progress:mode:", v8, *(_QWORD *)(a1 + 96), *(double *)(a1 + 48));

}

- (void)transitionSource:(id)a3 didEndWithContext:(id *)a4
{
  CSCoverSheetViewTransitionSource *v6;
  BOOL v7;
  NSObject *v8;
  _BOOL4 v9;
  objc_class *v10;
  void *v11;
  objc_class *v12;
  void *v13;
  objc_class *v14;
  void *v15;
  __int128 v16;
  void *v17;
  $06DF839FA51B3C3CDB187C0923524556 var1;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  void *v25;
  void *v26;
  __int128 v27;
  $DCA72CBAB2CDF67DA9370D0153CCCF3D end;
  double var0;
  void *v30;
  __int128 v31;
  __int128 v32;
  NSObject *v33;
  __int128 v34;
  void *v35;
  $DCA72CBAB2CDF67DA9370D0153CCCF3D v36;
  uint64_t v37;
  double v38;
  void *v39;
  NSObject *WeakRetained;
  BSInvalidatable *displayLayoutTransitionAssertion;
  NSObject *v42;
  objc_class *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  _QWORD v48[8];
  BOOL v49;
  $DCA72CBAB2CDF67DA9370D0153CCCF3D start;
  $DCA72CBAB2CDF67DA9370D0153CCCF3D v51;
  _QWORD v52[3];
  char v53;
  double v54[4];
  _QWORD v55[5];
  _BYTE buf[32];
  __int128 v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v6 = (CSCoverSheetViewTransitionSource *)a3;
  v7 = self->_currentTransitionSource == v6;
  SBLogDashBoard();
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    if (v9)
    {
      v14 = (objc_class *)objc_opt_class();
      NSStringFromClass(v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = *(_OWORD *)&a4->var1.var0.var1;
      *(_OWORD *)buf = *(_OWORD *)&a4->var0;
      *(_OWORD *)&buf[16] = v16;
      v57 = *(_OWORD *)&a4->var1.var1.var1;
      NSStringFromCoverSheetTransitionContext((__int128 *)buf);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v15;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v17;
      _os_log_impl(&dword_1D0337000, v8, OS_LOG_TYPE_DEFAULT, "[Transition] Will end from %@ with context %@", buf, 0x16u);

    }
    var1 = a4->var1.var1;
    *($06DF839FA51B3C3CDB187C0923524556 *)buf = a4->var1.var0;
    *($06DF839FA51B3C3CDB187C0923524556 *)&buf[16] = var1;
    if (!BSIntervalOrder())
    {
      if (!self->_transitionContext.mode
        || (end = self->_transitionContext.interval.end,
            *($DCA72CBAB2CDF67DA9370D0153CCCF3D *)buf = self->_transitionContext.interval.start,
            *($DCA72CBAB2CDF67DA9370D0153CCCF3D *)&buf[16] = end,
            !BSIntervalOrder()))
      {
        if (-[CSCoverSheetViewController _isSourceForHorizontalScrolling:](self, "_isSourceForHorizontalScrolling:", v6))
        {
          var0 = a4->var1.var1.var0;
          -[CSCoverSheetViewController _allowedPageViewControllers](self, "_allowedPageViewControllers");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          v55[0] = MEMORY[0x1E0C809B0];
          v55[1] = 3221225472;
          v55[2] = __65__CSCoverSheetViewController_transitionSource_didEndWithContext___block_invoke;
          v55[3] = &__block_descriptor_40_e37_v32__0__CSPageViewController_8Q16_B24l;
          v55[4] = (unint64_t)var0;
          objc_msgSend(v30, "enumerateObjectsUsingBlock:", v55);

        }
      }
    }
    if (-[CSCoverSheetViewController _isSourceForHorizontalScrolling:](self, "_isSourceForHorizontalScrolling:", v6))
    {
      -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "scrollView");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = objc_msgSend(v20, "visiblePageRange");
      v23 = v22;

      SBLogDashBoard();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v21;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v21 + v23;
        _os_log_impl(&dword_1D0337000, v24, OS_LOG_TYPE_DEFAULT, "[Transition] New visible pages indexes: [%lu..%lu]", buf, 0x16u);
      }

      if (v23 == 1)
      {
        -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "scrollView");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        -[CSCoverSheetViewController _setLastSettledPageIndex:](self, "_setLastSettledPageIndex:", objc_msgSend(v26, "currentPageIndex"));

        v54[0] = (double)self->_lastSettledPageIndex;
        v54[2] = v54[0];
        *(_QWORD *)&v54[1] = 1;
        *(_QWORD *)&v54[3] = 1;
        CSCoverSheetTransitionContextMake((uint64_t)v54, 0, (uint64_t)buf);
        v27 = *(_OWORD *)&buf[16];
        *(_OWORD *)&self->_transitionContext.value = *(_OWORD *)buf;
        *(_OWORD *)&self->_transitionContext.interval.start.inclusive = v27;
        *(_OWORD *)&self->_transitionContext.interval.end.inclusive = v57;
      }
      else
      {
        v32 = *(_OWORD *)&a4->var1.var0.var1;
        v31 = *(_OWORD *)&a4->var1.var1.var1;
        *(_OWORD *)&self->_transitionContext.value = *(_OWORD *)&a4->var0;
        *(_OWORD *)&self->_transitionContext.interval.start.inclusive = v32;
        *(_OWORD *)&self->_transitionContext.interval.end.inclusive = v31;
      }
      SBLogDashBoard();
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        v34 = *(_OWORD *)&self->_transitionContext.interval.start.inclusive;
        *(_OWORD *)buf = *(_OWORD *)&self->_transitionContext.value;
        *(_OWORD *)&buf[16] = v34;
        v57 = *(_OWORD *)&self->_transitionContext.interval.end.inclusive;
        NSStringFromCoverSheetTransitionContext((__int128 *)buf);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v35;
        _os_log_impl(&dword_1D0337000, v33, OS_LOG_TYPE_DEFAULT, "[Transition] Updated internal transition context: %@", buf, 0xCu);

      }
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      buf[24] = 0;
      v52[0] = 0;
      v52[1] = v52;
      v52[2] = 0x2020000000;
      v53 = 0;
      v36 = self->_transitionContext.interval.end;
      start = self->_transitionContext.interval.start;
      v51 = v36;
      v37 = BSIntervalOrder();
      v38 = a4->var1.var1.var0;
      -[CSCoverSheetViewController _allowedPageViewControllers](self, "_allowedPageViewControllers");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      v48[0] = MEMORY[0x1E0C809B0];
      v48[1] = 3221225472;
      v48[2] = __65__CSCoverSheetViewController_transitionSource_didEndWithContext___block_invoke_338;
      v48[3] = &unk_1E8E2E4D8;
      v49 = v37 == 0;
      v48[4] = self;
      v48[5] = buf;
      v48[6] = v52;
      v48[7] = (unint64_t)v38;
      objc_msgSend(v39, "enumerateObjectsUsingBlock:", v48);

      _Block_object_dispose(v52, 8);
      _Block_object_dispose(buf, 8);
    }
    WeakRetained = objc_loadWeakRetained((id *)&self->_idleTimerController);
    v8 = WeakRetained;
    if (self->_transitionDisabledIdleTimer)
      -[NSObject removeIdleTimerDisabledAssertionReason:](WeakRetained, "removeIdleTimerDisabledAssertionReason:", CFSTR("CSCoverSheetTransitioningReason"));
    -[BSInvalidatable invalidate](self->_displayLayoutTransitionAssertion, "invalidate");
    displayLayoutTransitionAssertion = self->_displayLayoutTransitionAssertion;
    self->_displayLayoutTransitionAssertion = 0;

    self->_transitionType = 0;
    -[CSCoverSheetViewController setCurrentTransitionSource:](self, "setCurrentTransitionSource:", 0);
    self->_transitionDisabledIdleTimer = 0;
    SBLogDashBoard();
    v42 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      v43 = (objc_class *)objc_opt_class();
      NSStringFromClass(v43);
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v44;
      _os_log_impl(&dword_1D0337000, v42, OS_LOG_TYPE_DEFAULT, "[Transition] Did end transition from %@", buf, 0xCu);

    }
    -[NSObject removeIdleTimerDisabledAssertionReason:](v8, "removeIdleTimerDisabledAssertionReason:", CFSTR("CSCoverSheetTransitioningReason"));
    v45 = (void *)MEMORY[0x1E0CB3940];
    -[CSCoverSheetViewTransitionSource coverSheetIdentifier](v6, "coverSheetIdentifier");
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v45, "stringWithFormat:", CFSTR("endTransition-%@"), v46);
    v47 = (void *)objc_claimAutoreleasedReturnValue();

    -[CSCoverSheetViewController _updateActiveAppearanceForReason:](self, "_updateActiveAppearanceForReason:", v47);
    -[CSCoverSheetViewController _updateActiveBehaviorsForReason:](self, "_updateActiveBehaviorsForReason:", v47);
    -[CSCoverSheetViewController setPreviousAppearance:](self, "setPreviousAppearance:", 0);

  }
  else if (v9)
  {
    v10 = (objc_class *)objc_opt_class();
    NSStringFromClass(v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = (objc_class *)objc_opt_class();
    NSStringFromClass(v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = v11;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v13;
    _os_log_impl(&dword_1D0337000, v8, OS_LOG_TYPE_DEFAULT, "[Transition] Ignoring transition ended from %@ since there is an active transition from %@", buf, 0x16u);

  }
}

uint64_t __65__CSCoverSheetViewController_transitionSource_didEndWithContext___block_invoke(uint64_t result, void *a2, uint64_t a3)
{
  if (*(_QWORD *)(result + 32) == a3)
    return objc_msgSend(a2, "updateTransitionWhileRubberBandingInProgress:", 0);
  return result;
}

void __65__CSCoverSheetViewController_transitionSource_didEndWithContext___block_invoke_338(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  int v6;
  void *v7;
  uint64_t v8;
  void *v9;
  BOOL v10;
  void *v11;
  int v12;
  void *v13;

  v5 = a2;
  v13 = v5;
  if (*(_QWORD *)(a1 + 56) == a3)
  {
    v6 = objc_msgSend(*(id *)(a1 + 32), "_isPageContentHidden");
    v7 = v13;
    v8 = v6 ^ 1u;
  }
  else
  {
    v7 = v5;
    v8 = 0;
  }
  if (objc_msgSend(v7, "isTransitioning"))
  {
    objc_msgSend(v13, "setTransitioning:", 0);
    objc_msgSend(*(id *)(a1 + 32), "bs_endAppearanceTransitionForChildViewController:toVisible:", v13, v8);
    objc_msgSend(v13, "didTransitionToVisible:", v8);
    if ((v8 & 1) == 0 && *(_BYTE *)(a1 + 64))
    {
      objc_msgSend(v13, "rebuildAppearance");
      objc_msgSend(v13, "rebuildBehavior");
    }
    v9 = v13;
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    {
      v10 = (objc_opt_respondsToSelector() & 1) == 0;
      v11 = v13;
      if (v10)
        v11 = 0;
      v12 = objc_msgSend(v11, "canHostAnApp");
      v9 = v13;
      if (v12)
      {
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
        if ((_DWORD)v8)
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
      }
    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "bs_endAppearanceTransitionForChildViewController:toVisible:", v13, v8);
    v9 = v13;
  }

}

- (void)irisWallpaperPlayerPlaybackStateDidChange:(id)a3
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  CSCoverSheetViewController *v9;
  uint64_t v10;
  void *v11;
  void *v12;

  switch(objc_msgSend(a3, "irisPlaybackState"))
  {
    case -1:
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("CSCoverSheetViewController.m"), 4060, CFSTR("unknown is not a valid state"));

      break;
    case 0:
      -[CSCoverSheetViewController delegate](self, "delegate");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_opt_respondsToSelector() & 1) != 0)
        objc_msgSend(v7, "coverSheetViewControllerIrisPlayingDidFinish:", self);

      goto LABEL_7;
    case 1:
    case 2:
    case 3:
      -[CSCoverSheetViewController irisBehavior](self, "irisBehavior");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "setIdleTimerMode:", 3);

      break;
    case 4:
      -[CSCoverSheetViewController irisBehavior](self, "irisBehavior");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "setIdleTimerMode:", 3);

      -[CSCoverSheetContextProviding wallpaperLogger](self->_coverSheetContext, "wallpaperLogger");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "incrementIrisPlayCount");

      v9 = self;
      v10 = 1;
      goto LABEL_9;
    case 5:
LABEL_7:
      -[CSCoverSheetViewController irisBehavior](self, "irisBehavior");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setIdleTimerMode:", 0);

      v9 = self;
      v10 = 0;
LABEL_9:
      -[CSCoverSheetViewController _updateUIForPlaying:immediately:](v9, "_updateUIForPlaying:immediately:", v10, 1);
      break;
    default:
      break;
  }
  -[CSCoverSheetViewController _updateActiveBehaviorsForReason:](self, "_updateActiveBehaviorsForReason:", CFSTR("iris"));
}

- (void)irisWallpaperPlayerIsInteractingDidChange:(id)a3
{
  id v4;
  uint64_t v5;
  int v6;
  NSObject *v7;
  _BOOL4 irisPlayerIsInteracting;
  void *v9;
  CSCoverSheetViewController *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD v14[2];
  __int16 v15;
  _BOOL4 v16;
  __int16 v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = objc_msgSend(v4, "irisPlaybackState");
  v6 = objc_msgSend(v4, "isIrisInteracting");

  SBLogDashBoard();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    irisPlayerIsInteracting = self->_irisPlayerIsInteracting;
    PBUIIrisWallpaperPlaybackStateDescription();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v14[0] = 67109634;
    v14[1] = v6;
    v15 = 1024;
    v16 = irisPlayerIsInteracting;
    v17 = 2112;
    v18 = v9;
    _os_log_impl(&dword_1D0337000, v7, OS_LOG_TYPE_DEFAULT, "Iris wallpaper view interaction changed: isIrisInteracting: %{BOOL}u, wasInteracting: %{BOOL}u, playbackState: %@", (uint8_t *)v14, 0x18u);

  }
  if (v5 == 4)
  {
    if (self->_irisPlayerIsInteracting || v6 == 0)
    {
      if (!self->_irisPlayerIsInteracting || (v6 & 1) != 0)
        goto LABEL_13;
      v11 = self;
      v12 = 0;
      v13 = 0;
    }
    else
    {
      v11 = self;
      v12 = 1;
      v13 = 1;
    }
    -[CSCoverSheetViewController _updateUIForPlaying:immediately:](v11, "_updateUIForPlaying:immediately:", v12, v13);
LABEL_13:
    self->_irisPlayerIsInteracting = v6;
  }
}

- (void)irisWallpaperPlayer:(id)a3 didReplaceGestureRecognizer:(id)a4 withGestureRecognizer:(id)a5
{
  id v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  id v12;
  id v13;

  v13 = a4;
  v7 = a5;
  if (-[CSCoverSheetViewController _shouldSetUpWallpaperGesture](self, "_shouldSetUpWallpaperGesture"))
  {
    objc_msgSend(v13, "setDelegate:", 0);
    objc_msgSend(v7, "setDelegate:", self);
    -[CSCoverSheetViewController irisBehavior](self, "irisBehavior");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "areRestrictedCapabilities:", 256);

    -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10;
    if (v9)
      v12 = 0;
    else
      v12 = v7;
    objc_msgSend(v10, "setWallpaperGestureRecognizer:", v12);

  }
}

- (void)addRemoteContentInlineProvidingManager:(id)a3
{
  id v4;

  v4 = a3;
  BSDispatchQueueAssertMain();
  -[NSMutableSet addObject:](self->_remoteContentInlineProvidingManagers, "addObject:", v4);

}

- (void)removeRemoteContentInlineProvidingManager:(id)a3
{
  id v4;

  v4 = a3;
  BSDispatchQueueAssertMain();
  -[NSMutableSet removeObject:](self->_remoteContentInlineProvidingManagers, "removeObject:", v4);

}

- (BOOL)gestureRecognizerShouldBegin:(id)a3
{
  UITapGestureRecognizer *v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  unsigned int (**v15)(_QWORD, double, double);
  void *v16;
  void *v17;
  void *v18;
  _BOOL4 v19;
  void *v20;
  void *v21;
  _BOOL4 v22;
  int v23;
  id v24;
  void *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  double v34;
  double v35;
  double v36;
  double v37;
  void *v38;
  uint64_t v39;
  int v40;
  int v41;
  void *v42;
  int v43;
  unsigned int (**v44)(_QWORD, double, double);
  uint64_t (**v45)(_QWORD, _QWORD, double, double);
  void *v46;
  void *v47;
  int v48;
  unsigned int (**v49)(_QWORD, double, double);
  void *v50;
  int v51;
  NSObject *v52;
  const char *v53;
  void *v54;
  double v55;
  CGFloat v56;
  double v57;
  CGFloat v58;
  double v59;
  CGFloat v60;
  double v61;
  CGFloat v62;
  double Width;
  double Height;
  void *v65;
  double v66;
  CGFloat v67;
  double v68;
  double v69;
  void *v70;
  uint64_t v71;
  BOOL v72;
  _BOOL4 v73;
  void *v74;
  uint64_t v75;
  NSObject *v76;
  const char *v77;
  NSObject *v78;
  os_log_type_t v79;
  uint64_t v80;
  double v81;
  double v82;
  _BOOL4 v83;
  NSObject *v84;
  const char *v85;
  void *v86;
  int v87;
  NSObject *v88;
  const char *v89;
  void *v91;
  _BOOL4 v92;
  void *v93;
  void *v94;
  double v95;
  double v96;
  double v97;
  double v98;
  void *v99;
  void *v100;
  NSObject *v101;
  void *v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint8_t buf[16];
  _QWORD v107[5];
  _QWORD v108[5];
  _QWORD v109[6];
  CGPoint v110;
  CGPoint v111;
  CGPoint v112;
  CGPoint v113;
  CGRect v114;
  CGRect v115;
  CGRect v116;
  CGRect v117;
  CGRect v118;
  CGRect v119;

  v4 = (UITapGestureRecognizer *)a3;
  if ((UITapGestureRecognizer *)self->_wallpaperGestureRecognizer != v4)
    goto LABEL_2;
  -[CSWidgetGridViewController view](self->_complicationContainerViewController, "view");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  -[UITapGestureRecognizer locationInView:](v4, "locationInView:", v17);
  objc_msgSend(v17, "hitTest:withEvent:", 0);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = -[CSWidgetGridViewController interpretsViewAsContent:](self->_complicationContainerViewController, "interpretsViewAsContent:", v18);

  -[CSWidgetGridViewController view](self->_sidebarComplicationContainerViewController, "view");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  -[UITapGestureRecognizer locationInView:](v4, "locationInView:", v20);
  objc_msgSend(v20, "hitTest:withEvent:", 0);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = -[CSWidgetGridViewController interpretsViewAsContent:](self->_sidebarComplicationContainerViewController, "interpretsViewAsContent:", v21);

  if (!_os_feature_enabled_impl() || !v19 && !v22)
  {
LABEL_2:
    -[CSCoverSheetViewController view](self, "view");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[UITapGestureRecognizer locationInView:](v4, "locationInView:", v5);
    v7 = v6;
    v9 = v8;

    v10 = MEMORY[0x1E0C809B0];
    v109[0] = MEMORY[0x1E0C809B0];
    v109[1] = 3221225472;
    v109[2] = __59__CSCoverSheetViewController_gestureRecognizerShouldBegin___block_invoke;
    v109[3] = &unk_1E8E2E500;
    v109[4] = self;
    v11 = MEMORY[0x1D17E1614](v109);
    v108[0] = v10;
    v108[1] = 3221225472;
    v108[2] = __59__CSCoverSheetViewController_gestureRecognizerShouldBegin___block_invoke_2;
    v108[3] = &unk_1E8E2E528;
    v108[4] = self;
    v105 = MEMORY[0x1D17E1614](v108);
    v107[0] = v10;
    v107[1] = 3221225472;
    v107[2] = __59__CSCoverSheetViewController_gestureRecognizerShouldBegin___block_invoke_3;
    v107[3] = &unk_1E8E2E500;
    v107[4] = self;
    v104 = MEMORY[0x1D17E1614](v107);
    -[SBFLockScreenDateViewController inlineComplicationViewController](self->_dateViewController, "inlineComplicationViewController");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_opt_class();
    v14 = v12;
    v15 = (unsigned int (**)(_QWORD, double, double))v11;
    if (v13)
    {
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v16 = v14;
      else
        v16 = 0;
    }
    else
    {
      v16 = 0;
    }
    v24 = v16;

    objc_msgSend(v24, "view");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    -[UITapGestureRecognizer locationInView:](v4, "locationInView:", v25);
    v27 = v26;
    v29 = v28;

    objc_msgSend(v24, "view");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "hitTest:forEvent:", 0, v27, v29);
    v31 = objc_claimAutoreleasedReturnValue();

    -[CSCoverSheetViewController complicationContainerViewController](self, "complicationContainerViewController");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "view");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    -[UITapGestureRecognizer locationInView:](v4, "locationInView:", v33);
    v35 = v34;
    v37 = v36;

    objc_msgSend(v32, "view");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v38, "hitTest:forEvent:", 0, v35, v37);
    v39 = objc_claimAutoreleasedReturnValue();

    v103 = (void *)v31;
    v40 = objc_msgSend(v24, "interpretsViewAsContent:", v31);

    v102 = (void *)v39;
    v41 = objc_msgSend(v32, "interpretsViewAsContent:", v39);
    -[CSMainPageContentViewController combinedListViewController](self->_mainPageContentViewController, "combinedListViewController");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = objc_msgSend(v42, "hasUserInteraction");

    v44 = v15;
    if ((UITapGestureRecognizer *)self->_wallpaperGestureRecognizer == v4
      && CSAutobahnEnabledForPlatform()
      && (v15[2](v15, v7, v9) | v43) != 1)
    {
      LOBYTE(v23) = 1;
      goto LABEL_33;
    }
    if (self->_backgroundContentGestureRecognizer == v4)
    {
      v45 = (uint64_t (**)(_QWORD, _QWORD, double, double))v105;
      if (self->_backgroundContentViewController)
      {
        v47 = (void *)v104;
        v23 = ((*(uint64_t (**)(uint64_t, double, double))(v104 + 16))(v104, v7, v9) | v43) ^ 1;
LABEL_63:
        v46 = v103;
        goto LABEL_64;
      }
      goto LABEL_61;
    }
    if (-[UITapGestureRecognizer isEqual:](v4, "isEqual:", self->_wallpaperGestureRecognizer))
    {
      if ((unint64_t)(-[CSCoverSheetViewController interfaceOrientation](self, "interfaceOrientation") - 3) >= 2)
      {
        v45 = (uint64_t (**)(_QWORD, _QWORD, double, double))v105;
        v46 = v103;
        if (!-[CSCoverSheetViewController _wallpaperGestureShouldRequireUserPresence](self, "_wallpaperGestureShouldRequireUserPresence")|| !-[CSUserPresenceMonitor isUserPresenceDetectionSupported](self->_userPresenceMonitor, "isUserPresenceDetectionSupported")|| -[CSUserPresenceMonitor userPresenceDetectedSinceWake](self->_userPresenceMonitor, "userPresenceDetectedSinceWake"))
        {
          if (((v44[2](v44, v7, v9) | v43) & 1) != 0)
            goto LABEL_43;
LABEL_31:
          LOBYTE(v23) = 1;
LABEL_44:
          v47 = (void *)v104;
LABEL_64:

          goto LABEL_65;
        }
        SBLogDashBoard();
        v76 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v76, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          v77 = "Live wallpaper gesture not beginning due to no user presence.";
          v78 = v76;
          v79 = OS_LOG_TYPE_INFO;
          goto LABEL_41;
        }
        goto LABEL_42;
      }
      goto LABEL_29;
    }
    v48 = v40 | v41;
    if (!-[UITapGestureRecognizer isEqual:](v4, "isEqual:", self->_posterSwitcherGestureRecognizer))
    {
      v45 = (uint64_t (**)(_QWORD, _QWORD, double, double))v105;
      v46 = v103;
      if (((-[UITapGestureRecognizer isEqual:](v4, "isEqual:", self->_complicationSelectionRecognizer) ^ 1 | v48) & 1) != 0)
        goto LABEL_31;
      SBLogDashBoard();
      v76 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v77 = "Complication Selection gesture not beginning because location for the gesture is not in a complication";
        v78 = v76;
        v79 = OS_LOG_TYPE_DEFAULT;
LABEL_41:
        _os_log_impl(&dword_1D0337000, v78, v79, v77, buf, 2u);
      }
LABEL_42:

LABEL_43:
      LOBYTE(v23) = 0;
      goto LABEL_44;
    }
    v49 = v15;
    -[CSCoverSheetViewController activeBehavior](self, "activeBehavior");
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    v51 = objc_msgSend(v50, "areRestrictedCapabilities:", 0x800000);

    if (v51)
    {
      SBLogDashBoard();
      v52 = objc_claimAutoreleasedReturnValue();
      v44 = v15;
      if (!os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
LABEL_28:

LABEL_29:
        LOBYTE(v23) = 0;
LABEL_33:
        v45 = (uint64_t (**)(_QWORD, _QWORD, double, double))v105;
LABEL_62:
        v47 = (void *)v104;
        goto LABEL_63;
      }
      *(_WORD *)buf = 0;
      v53 = "Rejecting Poster Switcher gesture – capability is restricted.";
LABEL_27:
      _os_log_impl(&dword_1D0337000, v52, OS_LOG_TYPE_DEFAULT, v53, buf, 2u);
      goto LABEL_28;
    }
    -[CSCoverSheetViewController view](self, "view");
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v54, "bounds");
    v56 = v55;
    v58 = v57;
    v60 = v59;
    v62 = v61;

    v114.origin.x = v56;
    v114.origin.y = v58;
    v114.size.width = v60;
    v114.size.height = v62;
    Width = CGRectGetWidth(v114);
    v115.origin.x = v56;
    v115.origin.y = v58;
    v115.size.width = v60;
    v115.size.height = v62;
    Height = CGRectGetHeight(v115);
    -[CSCoverSheetViewController view](self, "view");
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v65, "safeAreaInsets");
    v67 = v66;
    v69 = v68;

    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    v71 = objc_msgSend(v70, "userInterfaceIdiom");

    if ((v71 & 0xFFFFFFFFFFFFFFFBLL) != 1)
    {
      v116.origin.x = 0.0;
      v116.origin.y = 0.0;
      v116.size.width = Width;
      v116.size.height = v67;
      v110.x = v7;
      v110.y = v9;
      v72 = CGRectContainsPoint(v116, v110);
      v117.origin.y = Height - v69;
      v117.origin.x = 0.0;
      v117.size.width = Width;
      v117.size.height = v69;
      v111.x = v7;
      v111.y = v9;
      v73 = CGRectContainsPoint(v117, v111);
      if (v72 || v73)
      {
        SBLogDashBoard();
        v52 = objc_claimAutoreleasedReturnValue();
        v44 = v15;
        if (!os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
          goto LABEL_28;
        *(_WORD *)buf = 0;
        v53 = "Rejecting Poster Switcher gesture – location is in safe area";
        goto LABEL_27;
      }
    }
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    v75 = objc_msgSend(v74, "userInterfaceIdiom");

    if ((v75 & 0xFFFFFFFFFFFFFFFBLL) == 1)
    {
      v44 = v15;
      v45 = (uint64_t (**)(_QWORD, _QWORD, double, double))v105;
    }
    else
    {
      -[CSMainPageContentViewController combinedListViewController](self->_mainPageContentViewController, "combinedListViewController");
      v80 = objc_claimAutoreleasedReturnValue();
      objc_msgSend((id)v80, "horizontalInsetMargin");
      v82 = v81;

      v118.origin.x = 0.0;
      v118.origin.y = 0.0;
      v118.size.width = v82;
      v118.size.height = Height;
      v112.x = v7;
      v112.y = v9;
      LOBYTE(v80) = CGRectContainsPoint(v118, v112);
      v119.origin.x = Width - v82;
      v119.origin.y = 0.0;
      v119.size.width = v82;
      v119.size.height = Height;
      v113.x = v7;
      v113.y = v9;
      v83 = CGRectContainsPoint(v119, v113);
      v44 = v15;
      v45 = (uint64_t (**)(_QWORD, _QWORD, double, double))v105;
      if ((v80 & 1) != 0 || v83)
      {
        SBLogDashBoard();
        v84 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          v85 = "Rejecting Poster Switcher gesture – location is in notification list gutter";
          goto LABEL_59;
        }
LABEL_60:

LABEL_61:
        LOBYTE(v23) = 0;
        goto LABEL_62;
      }
    }
    if (v44[2](v44, v7, v9))
    {
      SBLogDashBoard();
      v84 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v85 = "Rejecting Poster Switcher gesture – location is in combined list";
LABEL_59:
        _os_log_impl(&dword_1D0337000, v84, OS_LOG_TYPE_DEFAULT, v85, buf, 2u);
        goto LABEL_60;
      }
      goto LABEL_60;
    }
    -[UITapGestureRecognizer view](v4, "view");
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    v87 = ((uint64_t (**)(_QWORD, void *, double, double))v45)[2](v45, v86, v7, v9);

    if (v87)
    {
      SBLogDashBoard();
      v88 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v89 = "Rejecting Poster Switcher gesture – location is over a quick action button";
LABEL_72:
        _os_log_impl(&dword_1D0337000, v88, OS_LOG_TYPE_DEFAULT, v89, buf, 2u);
      }
    }
    else
    {
      -[UITapGestureRecognizer view](v4, "view");
      v91 = (void *)objc_claimAutoreleasedReturnValue();
      v92 = -[CSCoverSheetViewController _quickActionButtonInterpretsLocation:asBesideContentForGestureView:](self, "_quickActionButtonInterpretsLocation:asBesideContentForGestureView:", v91, v7, v9);

      if (!v92)
      {
        if (!v48)
        {
          -[CSCoverSheetViewController sidebarComplicationContainerViewController](self, "sidebarComplicationContainerViewController");
          v93 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v93, "view");
          v94 = (void *)objc_claimAutoreleasedReturnValue();
          -[UITapGestureRecognizer locationInView:](v4, "locationInView:", v94);
          v96 = v95;
          v98 = v97;

          objc_msgSend(v93, "view");
          v99 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v99, "hitTest:forEvent:", 0, v96, v98);
          v100 = (void *)objc_claimAutoreleasedReturnValue();

          if ((objc_msgSend(v93, "interpretsViewAsContent:", v100) & 1) != 0)
          {
            SBLogDashBoard();
            v101 = objc_claimAutoreleasedReturnValue();
            v44 = v49;
            v46 = v103;
            if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1D0337000, v101, OS_LOG_TYPE_DEFAULT, "Poster Switcher gesture not beginning because location for the gesture is in a sidebar complication", buf, 2u);
            }

            goto LABEL_43;
          }

          v44 = v49;
          v46 = v103;
          goto LABEL_31;
        }
        SBLogDashBoard();
        v88 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
          goto LABEL_73;
        *(_WORD *)buf = 0;
        v89 = "Rejecting Poster Switcher gesture – location is in a complication";
        goto LABEL_72;
      }
      SBLogDashBoard();
      v88 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v89 = "Rejecting Poster Switcher gesture – location is beside the quick action buttons";
        goto LABEL_72;
      }
    }
LABEL_73:

    LOBYTE(v23) = 0;
    v44 = v49;
    goto LABEL_62;
  }
  LOBYTE(v23) = 0;
LABEL_65:

  return v23;
}

uint64_t __59__CSCoverSheetViewController_gestureRecognizerShouldBegin___block_invoke(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;

  objc_msgSend(*(id *)(a1 + 32), "view");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "hitTest:withEvent:", 0, a2, a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1952), "combinedListViewController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "interpretsViewAsContent:", v7);

  return v9;
}

uint64_t __59__CSCoverSheetViewController_gestureRecognizerShouldBegin___block_invoke_2(uint64_t a1, void *a2, double a3, double a4)
{
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;

  v7 = a2;
  objc_msgSend(*(id *)(a1 + 32), "activeAppearance");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "componentForType:identifier:", 14, CFSTR("(active)"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_msgSend(v9, "isHidden") & 1) != 0 || (objc_msgSend(v9, "alpha"), (BSFloatIsZero() & 1) != 0))
    v10 = 0;
  else
    v10 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1400), "interpretsLocationAsContent:inView:", v7, a3, a4);

  return v10;
}

uint64_t __59__CSCoverSheetViewController_gestureRecognizerShouldBegin___block_invoke_3(uint64_t a1, double a2, double a3)
{
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;

  objc_msgSend(*(id *)(a1 + 32), "view");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "hitTest:withEvent:", 0, a2, a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1952), "combinedListViewController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v8, "interpretsViewAsContent:", v7))
    v9 = objc_msgSend(v8, "interpretsViewAsAdjunctContent:", v7) ^ 1;
  else
    v9 = 0;

  return v9;
}

- (BOOL)_quickActionButtonInterpretsLocation:(CGPoint)a3 asBesideContentForGestureView:(id)a4
{
  double y;
  double x;
  id v7;
  void *v8;
  void *v9;
  BOOL v10;

  y = a3.y;
  x = a3.x;
  v7 = a4;
  if (-[CSCoverSheetViewController _quickActionsSupported](self, "_quickActionsSupported"))
  {
    -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "componentForType:identifier:", 14, CFSTR("(active)"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    v10 = (objc_msgSend(v9, "isHidden") & 1) == 0
       && (objc_msgSend(v9, "alpha"), (BSFloatIsZero() & 1) == 0)
       && -[CSQuickActionsViewController interpretsLocationAsBesideButtons:inView:](self->_quickActionsViewController, "interpretsLocationAsBesideButtons:inView:", v7, x, y);

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

- (BOOL)gestureRecognizer:(id)a3 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)a4
{
  UILongPressGestureRecognizer *v5;
  BOOL v6;

  v5 = (UILongPressGestureRecognizer *)a3;
  v6 = (-[UILongPressGestureRecognizer isEqual:](v5, "isEqual:", self->_quickNoteGestureRecognizer) & 1) == 0
    && ((UILongPressGestureRecognizer *)self->_wallpaperGestureRecognizer != v5
     || (CSAutobahnEnabledForPlatform() & 1) == 0)
    && self->_posterSwitcherGestureRecognizer != v5;

  return v6;
}

- (BOOL)gestureRecognizer:(id)a3 shouldRequireFailureOfGestureRecognizer:(id)a4
{
  UITapGestureRecognizer *v6;
  UILongPressGestureRecognizer *v7;
  BOOL v8;

  v6 = (UITapGestureRecognizer *)a3;
  v7 = (UILongPressGestureRecognizer *)a4;
  v8 = (UITapGestureRecognizer *)self->_wallpaperGestureRecognizer == v6 && (CSAutobahnEnabledForPlatform() & 1) != 0
    || self->_backgroundContentGestureRecognizer == v6 && self->_posterSwitcherGestureRecognizer == v7;

  return v8;
}

- (void)invalidateLockScreenActionContext
{
  -[CSCoverSheetViewController setCustomLockScreenActionContext:](self, "setCustomLockScreenActionContext:", 0);
}

- (void)postNotificationRequest:(id)a3
{
  id v4;
  os_log_t *v5;
  void *v6;
  NSObject *v7;
  objc_class *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  os_log_t v13;
  NSObject *v14;
  objc_class *v15;
  void *v16;
  void *v17;
  void *v18;
  objc_class *v19;
  void *v20;
  CSFullscreenNotificationViewController *v21;
  os_log_t v22;
  NSObject *v23;
  objc_class *v24;
  void *v25;
  void *v26;
  void *v27;
  objc_class *v28;
  void *v29;
  int v30;
  void *v31;
  __int16 v32;
  void *v33;
  __int16 v34;
  void *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (os_log_t *)MEMORY[0x1E0DC5F70];
  v6 = (void *)*MEMORY[0x1E0DC5F70];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0DC5F70], OS_LOG_TYPE_DEFAULT))
  {
    v7 = v6;
    v8 = (objc_class *)objc_opt_class();
    NSStringFromClass(v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "notificationIdentifier");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "un_logDigest");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = 138543618;
    v31 = v9;
    v32 = 2114;
    v33 = v11;
    _os_log_impl(&dword_1D0337000, v7, OS_LOG_TYPE_DEFAULT, "Destination %{public}@ posting notification %{public}@", (uint8_t *)&v30, 0x16u);

  }
  -[CSCoverSheetViewController _fullscreeNotificationViewControllerMatchingNotificationRequest:](self, "_fullscreeNotificationViewControllerMatchingNotificationRequest:", v4);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12)
  {
    v13 = *v5;
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
    {
      v14 = v13;
      v15 = (objc_class *)objc_opt_class();
      NSStringFromClass(v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "notificationIdentifier");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "un_logDigest");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = (objc_class *)objc_opt_class();
      NSStringFromClass(v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = 138543874;
      v31 = v16;
      v32 = 2114;
      v33 = v18;
      v34 = 2114;
      v35 = v20;
      _os_log_impl(&dword_1D0337000, v14, OS_LOG_TYPE_DEFAULT, "Destination %{public}@ updating notification %{public}@ to %{public}@", (uint8_t *)&v30, 0x20u);

    }
    objc_msgSend(v12, "updateNotificationRequest:", v4);
  }
  else
  {
    v21 = objc_alloc_init(CSFullscreenNotificationViewController);
    -[CSFullscreenNotificationViewController setDispatcher:](v21, "setDispatcher:", self->_notificationDispatcher);
    -[CSFullscreenNotificationViewController postNotificationRequest:](v21, "postNotificationRequest:", v4);
    v22 = *v5;
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
    {
      v23 = v22;
      v24 = (objc_class *)objc_opt_class();
      NSStringFromClass(v24);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "notificationIdentifier");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "un_logDigest");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = (objc_class *)objc_opt_class();
      NSStringFromClass(v28);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = 138543874;
      v31 = v25;
      v32 = 2114;
      v33 = v27;
      v34 = 2114;
      v35 = v29;
      _os_log_impl(&dword_1D0337000, v23, OS_LOG_TYPE_DEFAULT, "Destination %{public}@ presenting notification %{public}@ to %{public}@", (uint8_t *)&v30, 0x20u);

    }
    -[CSCoverSheetViewController _presentModalViewController:shouldDismissOverlays:animated:completion:](self, "_presentModalViewController:shouldDismissOverlays:animated:completion:", v21, 0, 1, 0);

  }
}

- (void)updateNotificationRequest:(id)a3
{
  id v4;
  void *v5;
  NSObject *v6;
  objc_class *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)*MEMORY[0x1E0DC5F70];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0DC5F70], OS_LOG_TYPE_DEFAULT))
  {
    v6 = v5;
    v7 = (objc_class *)objc_opt_class();
    NSStringFromClass(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "notificationIdentifier");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "un_logDigest");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = 138543618;
    v13 = v8;
    v14 = 2114;
    v15 = v10;
    _os_log_impl(&dword_1D0337000, v6, OS_LOG_TYPE_DEFAULT, "Destination %{public}@ updating notification %{public}@", (uint8_t *)&v12, 0x16u);

  }
  -[CSCoverSheetViewController _fullscreeNotificationViewControllerMatchingNotificationRequest:](self, "_fullscreeNotificationViewControllerMatchingNotificationRequest:", v4);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "updateNotificationRequest:", v4);

}

- (id)_fullscreeNotificationViewControllerMatchingNotificationRequest:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  id v17;
  void *v18;
  id obj;
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[CSPresentationViewController contentViewControllers](self->_modalPresentationController, "contentViewControllers");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "bs_objectsOfClass:", objc_opt_class());
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  obj = v6;
  v7 = (id)objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v23;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v23 != v8)
          objc_enumerationMutation(obj);
        v10 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)i);
        objc_msgSend(v10, "notificationRequest");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "sectionIdentifier");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "sectionIdentifier");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v12, "isEqualToString:", v13) & 1) != 0)
        {
          objc_msgSend(v11, "notificationIdentifier");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "notificationIdentifier");
          v15 = v7;
          v16 = v8;
          v17 = v4;
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v21 = objc_msgSend(v14, "isEqualToString:", v18);

          v4 = v17;
          v8 = v16;
          v7 = v15;

          if (v21)
          {
            v7 = v10;

            goto LABEL_12;
          }
        }
        else
        {

        }
      }
      v7 = (id)objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    }
    while (v7);
  }
LABEL_12:

  return v7;
}

- (void)withdrawNotificationRequest:(id)a3
{
  id v4;
  void *v5;
  NSObject *v6;
  objc_class *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  CSCoverSheetViewController *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint8_t v28[128];
  uint8_t buf[4];
  void *v30;
  __int16 v31;
  void *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)*MEMORY[0x1E0DC5F70];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0DC5F70], OS_LOG_TYPE_DEFAULT))
  {
    v6 = v5;
    v7 = (objc_class *)objc_opt_class();
    NSStringFromClass(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "notificationIdentifier");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "un_logDigest");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v30 = v8;
    v31 = 2114;
    v32 = v10;
    _os_log_impl(&dword_1D0337000, v6, OS_LOG_TYPE_DEFAULT, "Destination %{public}@ withdrawing notification %{public}@", buf, 0x16u);

  }
  v23 = self;
  -[CSPresentationViewController contentViewControllers](self->_modalPresentationController, "contentViewControllers");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "bs_objectsOfClass:", objc_opt_class());
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v13 = v12;
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v25;
    while (2)
    {
      for (i = 0; i != v15; ++i)
      {
        if (*(_QWORD *)v25 != v16)
          objc_enumerationMutation(v13);
        v18 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * i);
        objc_msgSend(v18, "notificationRequest");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "notificationIdentifier");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "notificationIdentifier");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = objc_msgSend(v20, "isEqualToString:", v21);

        if (v22)
        {
          objc_msgSend(v18, "withdrawNotificationRequest:", v4);
          -[CSCoverSheetViewController _dismissModalViewController:animated:completion:](v23, "_dismissModalViewController:animated:completion:", v18, 1, 0);
          goto LABEL_13;
        }
      }
      v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
      if (v15)
        continue;
      break;
    }
  }
LABEL_13:

}

- (void)updateNotificationSystemSettings:(id)a3 previousSystemSettings:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[CSPresentationViewController contentViewControllers](self->_modalPresentationController, "contentViewControllers");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "bs_objectsOfClass:", objc_opt_class());
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v10 = v9;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v16;
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v16 != v13)
          objc_enumerationMutation(v10);
        objc_msgSend(*(id *)(*((_QWORD *)&v15 + 1) + 8 * v14++), "updateNotificationSystemSettings:previousSystemSettings:", v6, v7, (_QWORD)v15);
      }
      while (v12 != v14);
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v12);
  }

}

- (void)notificationsLoadedForSectionIdentifier:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[CSPresentationViewController contentViewControllers](self->_modalPresentationController, "contentViewControllers");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "bs_objectsOfClass:", objc_opt_class());
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v7 = v6;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v13;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v13 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * v11++), "notificationsLoadedForSectionIdentifier:", v4, (_QWORD)v12);
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v9);
  }

}

- (BOOL)isNotificationContentExtensionVisible:(id)a3
{
  id v4;
  void *v5;
  char v6;

  v4 = a3;
  -[CSCoverSheetViewController notificationDestination](self, "notificationDestination");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isNotificationContentExtensionVisible:", v4);

  return v6;
}

- (BOOL)isPresentingNotificationInLongLook
{
  void *v2;
  char v3;

  -[CSCoverSheetViewController notificationDestination](self, "notificationDestination");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isPresentingNotificationInLongLook");

  return v3;
}

- (BOOL)dismissNotificationInLongLookAnimated:(BOOL)a3
{
  uint64_t v3;
  void *v4;

  v3 = a3;
  -[CSCoverSheetViewController notificationDestination](self, "notificationDestination");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v3) = objc_msgSend(v4, "dismissNotificationInLongLookAnimated:", v3);

  return v3;
}

- (BOOL)canHostAnApp
{
  return 1;
}

- (id)hostedAppSceneHandle
{
  NSHashTable *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = self->_applicationHosters;
  v4 = -[NSHashTable countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    while (2)
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * v7), "hostedAppSceneHandle", (_QWORD)v11);
        v8 = objc_claimAutoreleasedReturnValue();
        if (v8)
        {
          v10 = (void *)v8;

          return v10;
        }
        ++v7;
      }
      while (v5 != v7);
      v5 = -[NSHashTable countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v5)
        continue;
      break;
    }
  }

  -[CSPresentationViewController hostedAppSceneHandle](self->_modalPresentationController, "hostedAppSceneHandle");
  return (id)objc_claimAutoreleasedReturnValue();
}

- (id)hostedAppSceneHandles
{
  id v3;
  NSHashTable *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v4 = self->_applicationHosters;
  v5 = -[NSHashTable countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v15 != v7)
          objc_enumerationMutation(v4);
        objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * i), "hostedAppSceneHandles", (_QWORD)v14);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        if (v9)
          objc_msgSend(v3, "addObjectsFromArray:", v9);

      }
      v6 = -[NSHashTable countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v6);
  }

  -[CSPresentationViewController hostedAppSceneHandles](self->_modalPresentationController, "hostedAppSceneHandles");
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = (void *)v10;
  if (v10)
    v12 = v10;
  else
    v12 = MEMORY[0x1E0C9AA60];
  objc_msgSend(v3, "addObjectsFromArray:", v12, (_QWORD)v14);

  return v3;
}

- (void)hostedAppWillRotateToInterfaceOrientation:(int64_t)a3
{
  unint64_t v5;
  NSHashTable *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = -[CSCoverSheetViewController supportedInterfaceOrientations](self, "supportedInterfaceOrientations");
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v6 = self->_applicationHosters;
  v7 = -[NSHashTable countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v7)
  {
    v8 = v7;
    v9 = v5 & (1 << a3);
    v10 = *(_QWORD *)v18;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v18 != v10)
          objc_enumerationMutation(v6);
        v12 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * i);
        v13 = objc_msgSend(v12, "isHostingAnApp", (_QWORD)v17);
        v14 = objc_msgSend(v12, "handlesRotationIndependentOfCoverSheet");
        if (v9)
          v15 = 1;
        else
          v15 = v14;
        if (v13)
          v16 = v15 == 0;
        else
          v16 = 1;
        if (!v16)
          objc_msgSend(v12, "hostedAppWillRotateToInterfaceOrientation:", a3);
      }
      v8 = -[NSHashTable countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v8);
  }

}

- (BOOL)shouldAutoUnlockForSource:(int)a3
{
  void *v3;
  int v6;
  int v7;
  void *v8;

  v6 = 1;
  if (a3 != 3 && a3 != 41)
  {
    +[CSLockScreenDomain rootSettings](CSLockScreenDomain, "rootSettings");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v3, "autoDismissUnlockedLockScreen");
  }
  if (a3 != 3 && a3 != 41)

  if (v6
    && !-[CSPresentationViewController isPresentingContent](self->_modalPresentationController, "isPresentingContent"))
  {
    -[CSMainPageContentViewController combinedListViewController](self->_mainPageContentViewController, "combinedListViewController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v8, "hasContent") ^ 1;

  }
  else
  {
    LOBYTE(v7) = 0;
  }
  return v7;
}

- (void)startRestToOpenCoachingWithCompletion:(id)a3
{
  id v4;
  void *v5;
  _QWORD v6[4];
  id v7;

  v4 = a3;
  if (!self->_hasContentAboveCoverSheet)
  {
    -[CSPoseidonViewController poseidonContainerViewController](self->_poseidonViewController, "poseidonContainerViewController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __68__CSCoverSheetViewController_startRestToOpenCoachingWithCompletion___block_invoke;
    v6[3] = &unk_1E8E2DFA8;
    v7 = v4;
    objc_msgSend(v5, "startRestToOpenCoaching:withCompletion:", 1, v6);

  }
}

uint64_t __68__CSCoverSheetViewController_startRestToOpenCoachingWithCompletion___block_invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, 1);
  return result;
}

- (void)fillRestToOpenWithDuration:(double)a3
{
  id v4;

  -[CSPoseidonViewController poseidonContainerViewController](self->_poseidonViewController, "poseidonContainerViewController");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "fillRestToOpenWithDuration:", a3);

}

- (void)resetRestToOpen
{
  id v2;

  -[CSPoseidonViewController poseidonContainerViewController](self->_poseidonViewController, "poseidonContainerViewController");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "resetRestToOpen");

}

- (BOOL)isRestToOpenAvailable
{
  NSHashTable *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = self->_externalLockProviders;
  v4 = -[NSHashTable countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v10;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v3);
        v7 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * i);
        if (objc_msgSend(v7, "participantState", (_QWORD)v9) == 2 && (objc_msgSend(v7, "isLocked") & 1) != 0)
        {
          LOBYTE(v4) = 1;
          goto LABEL_12;
        }
      }
      v4 = -[NSHashTable countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v4)
        continue;
      break;
    }
  }
LABEL_12:

  return (v4 | -[CSCoverSheetViewController isPasscodeLockVisible](self, "isPasscodeLockVisible")) ^ 1;
}

- (BOOL)hasVisibleContentToReveal
{
  void *v2;
  char v3;

  -[CSMainPageContentViewController combinedListViewController](self->_mainPageContentViewController, "combinedListViewController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "hasVisibleContentToReveal");

  return v3;
}

- (BOOL)phoneUnlockWithWatchEnabled
{
  return -[SBUIPhoneUnlockWithWatchController phoneUnlockWithWatchEnabled](self->_phoneUnlockWithWatchController, "phoneUnlockWithWatchEnabled");
}

- (void)attemptPhoneUnlockWithWatch
{
  -[SBUIPhoneUnlockWithWatchController attemptPhoneUnlockWithWatch](self->_phoneUnlockWithWatchController, "attemptPhoneUnlockWithWatch");
}

- (BOOL)didDetectFaceRequirementsForPAU
{
  return -[SBUIPhoneUnlockWithWatchController didDetectFaceRequirementsForPAU](self->_phoneUnlockWithWatchController, "didDetectFaceRequirementsForPAU");
}

- (BOOL)didDetectFaceOcclusionsSinceScreenOn
{
  return (-[CSFaceOcclusionMonitor faceOcclusionsSinceScreenOn](self->_faceOcclusionMonitor, "faceOcclusionsSinceScreenOn") >> 1) & 1;
}

- (BOOL)didDetectBottomFaceOcclusionsSinceScreenOn
{
  return -[CSFaceOcclusionMonitor faceOcclusionsSinceScreenOn](self->_faceOcclusionMonitor, "faceOcclusionsSinceScreenOn") & 1;
}

- (void)completePhoneAutoUnlockWithNotification:(BOOL)a3
{
  -[SBUIPhoneUnlockWithWatchController completePhoneAutoUnlockWithNotification:](self->_phoneUnlockWithWatchController, "completePhoneAutoUnlockWithNotification:", a3);
}

- (BOOL)shouldCompletePhoneAutoUnlockWithNotification
{
  void *v3;
  void *v4;
  char v5;

  -[CSCoverSheetViewController activeBehavior](self, "activeBehavior");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "areRestrictedCapabilities:", 8))
  {

    return 0;
  }
  -[CSCoverSheetViewController activeBehavior](self, "activeBehavior");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "areRestrictedCapabilities:", 56);

  if ((v5 & 1) != 0)
    return 0;
  return -[SBUIPhoneUnlockWithWatchController shouldPhoneCompleteAutoUnlockWithNotification](self->_phoneUnlockWithWatchController, "shouldPhoneCompleteAutoUnlockWithNotification");
}

- (BOOL)phoneUnlockWithWatchControllerShowRawErrorCodes:(id)a3
{
  void *v3;
  char v4;

  +[CSLockScreenDomain rootSettings](CSLockScreenDomain, "rootSettings", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "showRawErrorCodes");

  return v4;
}

- (void)phoneUnlockWithWatchControllerAttemptSucceeded:(id)a3
{
  id v4;

  -[CSCoverSheetViewController delegate](self, "delegate", a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v4, "coverSheetViewControllerIsPasscodeVisible:", self) & 1) == 0)
    objc_msgSend(v4, "coverSheetViewControllerHandleUnlockAttemptSucceeded:", self);

}

- (void)phoneUnlockWithWatchControllerAttemptFailed:(id)a3 withError:(id)a4
{
  void *v5;
  id v6;

  v6 = a4;
  if (-[CSCoverSheetViewController proudLockViewControllerIsCoverSheetVisible](self, "proudLockViewControllerIsCoverSheetVisible"))
  {
    -[CSProudLockViewController proudLockContainerViewController](self->_proudLockViewController, "proudLockContainerViewController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handlePhoneUnlockWithWatchError:", v6);

  }
}

- (void)handleBiometricEvent:(unint64_t)a3
{
  void *v5;
  void *v6;
  void *v7;
  id WeakRetained;
  void *v9;
  id v10;

  switch(a3)
  {
    case 0uLL:
      -[CSPoseidonViewController poseidonContainerViewController](self->_poseidonViewController, "poseidonContainerViewController");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setFingerOffSinceWake:", 1);
      goto LABEL_4;
    case 1uLL:
      +[CSAction actionWithType:](CSAction, "actionWithType:", 3);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      -[CSCoverSheetViewController handleAction:fromSender:](self, "handleAction:fromSender:", v9, self);

      +[CSEvent eventWithType:](CSEvent, "eventWithType:", 34);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      -[CSCoverSheetViewController _handleEvent:](self, "_handleEvent:", v6);
      goto LABEL_4;
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xCuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x10uLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
      goto LABEL_5;
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
    case 0xBuLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
      goto LABEL_2;
    case 0xDuLL:
      goto LABEL_3;
    default:
      if (a3 != 33)
        goto LABEL_5;
LABEL_2:
      +[CSEvent eventWithType:](CSEvent, "eventWithType:", 14);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      -[CSCoverSheetViewController _handleEvent:](self, "_handleEvent:", v5);

      if (a3 == 13)
      {
LABEL_3:
        +[CSAction actionWithType:](CSAction, "actionWithType:", 4);
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        -[CSCoverSheetViewController handleAction:fromSender:](self, "handleAction:fromSender:", v6, self);
LABEL_4:

      }
LABEL_5:
      +[CSEvent eventWithType:](CSEvent, "eventWithType:", 15);
      v10 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "setValue:", v7);

      -[CSCoverSheetViewController _handleEvent:](self, "_handleEvent:", v10);
      -[CSHomeButtonShowPasscodeRecognizer handleBiometricEvent:](self->_homeButtonShowPasscodeRecognizer, "handleBiometricEvent:", a3);
      WeakRetained = objc_loadWeakRetained((id *)&self->_homeButtonSuppressAfterUnlockRecognizer);
      objc_msgSend(WeakRetained, "handleBiometricEvent:", a3);

      return;
  }
}

- (void)settings:(id)a3 changedValueForKey:(id)a4
{
  id v5;
  int v6;
  CSRegionsDebugView *v7;
  void *v8;

  v5 = a4;
  -[CSCoverSheetViewController noteDeviceBlockedStatusUpdated](self, "noteDeviceBlockedStatusUpdated");
  v6 = objc_msgSend(v5, "isEqualToString:", CFSTR("showRegionsDebugView"));

  if (v6)
  {
    if (-[CSLockScreenSettings showRegionsDebugView](self->_prototypeSettings, "showRegionsDebugView"))
    {
      v7 = objc_alloc_init(CSRegionsDebugView);
      -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setRegionsDebugView:", v7);

    }
    else
    {
      -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
      v7 = (CSRegionsDebugView *)objc_claimAutoreleasedReturnValue();
      -[CSRegionsDebugView setRegionsDebugView:](v7, "setRegionsDebugView:", 0);
    }

  }
  -[CSCoverSheetViewController _updateActiveAppearanceForReason:](self, "_updateActiveAppearanceForReason:", CFSTR("PrototypeSettingsChanged"));
  -[CSCoverSheetViewController _updateActiveBehaviorsForReason:](self, "_updateActiveBehaviorsForReason:", CFSTR("PrototypeSettingsChanged"));
}

- (BOOL)controller:(id)a3 shouldAllowPanScrollingWithSystemGestureRecognizer:(id)a4
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  void *v13;
  _BOOL4 v14;
  NSObject *v15;
  NSObject *v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint8_t buf[4];
  NSObject *v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a4;
  -[CSCoverSheetViewController _activeViewControllers](self, "_activeViewControllers");
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v6 = (id)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v19;
LABEL_3:
    v10 = 0;
    while (1)
    {
      if (*(_QWORD *)v19 != v9)
        objc_enumerationMutation(v6);
      v11 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * v10);
      if (-[CSCoverSheetViewController _gestureRecognizer:isLocatedOverHorizontalContentRegionInViewController:](self, "_gestureRecognizer:isLocatedOverHorizontalContentRegionInViewController:", v5, v11, (_QWORD)v18))
      {
        break;
      }
      objc_msgSend(v11, "viewIfLoaded");
      v12 = objc_claimAutoreleasedReturnValue();
      _UISystemGestureLocationInView();
      if (-[CSCoverSheetViewController _overSlidingControlForLocation:inView:](self, "_overSlidingControlForLocation:inView:", v12))
      {
        SBLogDashBoard();
        v15 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          -[NSObject description](v12, "description");
          v16 = objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          v23 = v16;
          _os_log_impl(&dword_1D0337000, v15, OS_LOG_TYPE_DEFAULT, "Preventing panning scroll for sliding control in view: %@", buf, 0xCu);

        }
LABEL_15:

        goto LABEL_16;
      }

      if (v8 == ++v10)
      {
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
        if (v8)
          goto LABEL_3;
        goto LABEL_10;
      }
    }
    SBLogDashBoard();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(v11, "description");
      v15 = objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v23 = v15;
      _os_log_impl(&dword_1D0337000, v12, OS_LOG_TYPE_DEFAULT, "Preventing panning scroll for horizontal content region in view controller: %@", buf, 0xCu);
      goto LABEL_15;
    }
LABEL_16:

    LOBYTE(v14) = 0;
    v13 = v6;
    goto LABEL_17;
  }
LABEL_10:

  -[CSCoverSheetViewController viewIfLoaded](self, "viewIfLoaded");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  _UISystemGestureLocationInView();
  v14 = !-[CSCoverSheetViewController _overSlidingControlForLocation:inView:](self, "_overSlidingControlForLocation:inView:", v13);
LABEL_17:

  return v14;
}

- (void)controllerWillCancelHorizontalScrolling:(id)a3
{
  id v4;

  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView", a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setTargetPageIndexForDraggingEnded:", -[CSCoverSheetViewController _lastSettledPageIndex](self, "_lastSettledPageIndex"));

}

- (id)dateView
{
  return (id)-[SBFLockScreenDateViewController dateViewIfExists](self->_dateViewController, "dateViewIfExists");
}

- (void)presentationViewController:(id)a3 didTransitionViewController:(id)a4 toPresented:(BOOL)a5
{
  _BOOL4 v5;
  id v8;
  void *v9;
  void *v10;
  int v11;
  id v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  id v20;

  v5 = a5;
  v20 = a3;
  v8 = a4;
  objc_msgSend(v8, "coverSheetIdentifier");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  +[CSCoverSheetViewControllerBase coverSheetIdentifier](CSDismissableModalViewController, "coverSheetIdentifier");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v9, "isEqualToString:", v10);

  if (v11)
  {
    v12 = v8;
    objc_msgSend(v12, "contentViewControllers");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = v13;
    if (v5)
    {
      v15 = objc_msgSend(v13, "containsObject:", self->_remoteContentModalViewController);

      if (v15)
      {
        -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "view");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "addContentViewWithCustomContentView:", v17);

LABEL_7:
      }
    }
    else
    {
      -[CSCoverSheetViewController posterSwitcherViewController](self, "posterSwitcherViewController");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = objc_msgSend(v14, "containsObject:", v18);

      if (v19)
      {
        -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "removeContentView");
        goto LABEL_7;
      }
    }

  }
}

- (void)contentRequestCancellingGesture
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "scrollView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "panGestureRecognizer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setEnabled:", 0);

  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "scrollView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "panGestureRecognizer");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setEnabled:", 1);

}

- (void)_updateOverrideDateIfNeeded
{
  void *v3;
  NSDate **p_defaultsDerivedOverrideDate;
  NSObject *v5;
  _BOOL4 v6;
  const char *v7;
  NSObject *v8;
  uint32_t v9;
  void *v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  -[CSCoverSheetViewController _overrideDate](self, "_overrideDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  p_defaultsDerivedOverrideDate = &self->_defaultsDerivedOverrideDate;
  if ((BSEqualObjects() & 1) == 0)
  {
    SBLogDashBoard();
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (v3)
    {
      if (v6)
      {
        v11 = 138543362;
        v12 = v3;
        v7 = "[Date Override] Adding override for date: %{public}@.";
        v8 = v5;
        v9 = 12;
LABEL_7:
        _os_log_impl(&dword_1D0337000, v8, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v11, v9);
      }
    }
    else if (v6)
    {
      LOWORD(v11) = 0;
      v7 = "[Date Override] Removing override.";
      v8 = v5;
      v9 = 2;
      goto LABEL_7;
    }

    objc_storeStrong((id *)p_defaultsDerivedOverrideDate, v3);
    objc_msgSend(MEMORY[0x1E0DA9DE8], "sharedInstance");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setOverrideDate:", v3);

  }
}

- (id)_overrideDate
{
  uint64_t v3;
  double v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  NSObject *v11;
  _BOOL4 v12;
  void *v13;
  double v14;
  uint8_t v16[16];
  uint8_t v17[16];
  uint8_t v18[16];
  uint8_t buf[16];

  if (!-[SBLockScreenDefaults useDefaultsValuesForDateTimeOverrides](self->_lockScreenDefaults, "useDefaultsValuesForDateTimeOverrides"))goto LABEL_18;
  v3 = -[SBLockScreenDefaults dateTimeOverridesIntervalSince1970](self->_lockScreenDefaults, "dateTimeOverridesIntervalSince1970");
  if (!v3)
  {
    if (-[SBLockScreenDefaults overridesDateTimeToDefaultToday](self->_lockScreenDefaults, "overridesDateTimeToDefaultToday"))
    {
      SBLogDashBoard();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v18 = 0;
        _os_log_impl(&dword_1D0337000, v7, OS_LOG_TYPE_DEFAULT, "[Date Override] Enforcing Hero override.", v18, 2u);
      }

      objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99D68], "date");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "dateBySettingHour:minute:second:ofDate:options:", 9, 41, 0, v9, 0);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_14:
      return v6;
    }
    v10 = -[SBLockScreenDefaults overridesDateTimeToDefaultPast](self->_lockScreenDefaults, "overridesDateTimeToDefaultPast");
    SBLogDashBoard();
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      if (v12)
      {
        *(_WORD *)v17 = 0;
        _os_log_impl(&dword_1D0337000, v11, OS_LOG_TYPE_DEFAULT, "[Date Override] Enforcing Historical override.", v17, 2u);
      }

      objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", 1168335660.0);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99E80], "systemTimeZone");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 1168335660.0 - (double)objc_msgSend(v13, "secondsFromGMTForDate:", v8);

      objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", v14);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_14;
    }
    if (v12)
    {
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_1D0337000, v11, OS_LOG_TYPE_DEFAULT, "[Date Override] Couldn't find override.", v16, 2u);
    }

LABEL_18:
    v6 = 0;
    return v6;
  }
  v4 = (double)v3;
  SBLogDashBoard();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1D0337000, v5, OS_LOG_TYPE_DEFAULT, "[Date Override] Enforcing Custom override.", buf, 2u);
  }

  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  return v6;
}

- (void)_addBackgroundContentViewControllerForAction:(id)a3
{
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  CSBackgroundContentViewController *v20;
  CSBackgroundContentViewController *backgroundContentViewController;
  CSBackgroundContentViewController *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _QWORD v35[5];
  _QWORD v36[5];
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a3, "configurationObject");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_opt_class();
  v7 = v5;
  if (v6)
  {
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v8 = v7;
    else
      v8 = 0;
  }
  else
  {
    v8 = 0;
  }
  v9 = v8;

  if (a3)
  {
    if (!self->_backgroundContentViewController && v9 != 0)
    {
      -[CSCoverSheetViewController view](self, "view");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "bounds");
      v13 = v12;
      v15 = v14;
      v17 = v16;
      v19 = v18;

      v30 = v9;
      -[CSBackgroundPresentationManager createBackgroundViewControllerForDefinition:frame:](self->_backgroundPresentationManager, "createBackgroundViewControllerForDefinition:frame:", v9, v13, v15, v17, v19);
      v20 = (CSBackgroundContentViewController *)objc_claimAutoreleasedReturnValue();
      backgroundContentViewController = self->_backgroundContentViewController;
      self->_backgroundContentViewController = v20;

      v22 = self->_backgroundContentViewController;
      v23 = MEMORY[0x1E0C809B0];
      v36[0] = MEMORY[0x1E0C809B0];
      v36[1] = 3221225472;
      v36[2] = __75__CSCoverSheetViewController__addBackgroundContentViewControllerForAction___block_invoke;
      v36[3] = &unk_1E8E2DB60;
      v36[4] = self;
      -[CSCoverSheetViewController bs_addChildViewController:animated:transitionBlock:](self, "bs_addChildViewController:animated:transitionBlock:", v22, 0, v36);
      -[UITapGestureRecognizer addTarget:action:](self->_backgroundContentGestureRecognizer, "addTarget:action:", self->_backgroundContentViewController, sel_tapGestureRecognizerAction_);
      -[CSCoverSheetViewController _updatePosterSwitcherBackgroundView](self, "_updatePosterSwitcherBackgroundView");
      v35[0] = v23;
      v35[1] = 3221225472;
      v35[2] = __75__CSCoverSheetViewController__addBackgroundContentViewControllerForAction___block_invoke_2;
      v35[3] = &unk_1E8E2E550;
      v35[4] = self;
      -[CSCoverSheetViewController _performLocalAppearanceUpdatesWithReason:updates:](self, "_performLocalAppearanceUpdatesWithReason:updates:", CFSTR("Background content added"), v35);
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v24 = (void *)-[NSHashTable copy](self->_observers, "copy");
      v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v31, v37, 16);
      if (v25)
      {
        v26 = v25;
        v27 = *(_QWORD *)v32;
        do
        {
          v28 = 0;
          do
          {
            if (*(_QWORD *)v32 != v27)
              objc_enumerationMutation(v24);
            v29 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * v28);
            if ((objc_opt_respondsToSelector() & 1) != 0)
              objc_msgSend(v29, "coverSheetViewControllerDidAddNewSceneHostEnvironment:", self);
            if ((objc_opt_respondsToSelector() & 1) != 0)
              objc_msgSend(v29, "coverSheetViewControllerDidObscureWallpaper:obscured:", self, 1);
            ++v28;
          }
          while (v26 != v28);
          v26 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v31, v37, 16);
        }
        while (v26);
      }

      v9 = v30;
    }
  }

}

void __75__CSCoverSheetViewController__addBackgroundContentViewControllerForAction___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void (**v4)(_QWORD);
  void *v5;
  id v6;

  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 1672);
  v4 = a2;
  objc_msgSend(v3, "backgroundContentView");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "coverSheetView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setBackgroundContentView:", v6);

  v4[2](v4);
}

void __75__CSCoverSheetViewController__addBackgroundContentViewControllerForAction___block_invoke_2(uint64_t a1, void *a2)
{
  objc_class *v3;
  id v4;
  void *v5;
  id v6;

  v3 = (objc_class *)MEMORY[0x1E0D01958];
  v4 = a2;
  v6 = objc_alloc_init(v3);
  objc_msgSend(*(id *)(a1 + 32), "setVibrancyConfigurationOverride:", v6);
  objc_msgSend(*(id *)(a1 + 32), "_removeBackgroundContentOccludingViewsForAppearance:", v4);
  objc_msgSend(MEMORY[0x1E0CEADE8], "sharedInstanceForStyle:", 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setLegibilitySettings:", v5);

}

- (void)_removeBackgroundContentViewController
{
  uint64_t v3;
  CSBackgroundContentViewController *backgroundContentViewController;
  CSBackgroundContentViewController *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _QWORD v16[5];
  _QWORD v17[5];
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (self->_backgroundContentViewController)
  {
    v3 = MEMORY[0x1E0C809B0];
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = __68__CSCoverSheetViewController__removeBackgroundContentViewController__block_invoke;
    v17[3] = &unk_1E8E2E550;
    v17[4] = self;
    -[CSCoverSheetViewController _performLocalAppearanceUpdatesWithReason:updates:](self, "_performLocalAppearanceUpdatesWithReason:updates:", CFSTR("Background content removed"), v17);
    -[UITapGestureRecognizer removeTarget:action:](self->_backgroundContentGestureRecognizer, "removeTarget:action:", self->_backgroundContentViewController, 0);
    backgroundContentViewController = self->_backgroundContentViewController;
    v16[0] = v3;
    v16[1] = 3221225472;
    v16[2] = __68__CSCoverSheetViewController__removeBackgroundContentViewController__block_invoke_2;
    v16[3] = &unk_1E8E2DB60;
    v16[4] = self;
    -[CSCoverSheetViewController bs_removeChildViewController:animated:transitionBlock:](self, "bs_removeChildViewController:animated:transitionBlock:", backgroundContentViewController, 0, v16);
    v5 = self->_backgroundContentViewController;
    self->_backgroundContentViewController = 0;

    -[CSCoverSheetViewController _updatePosterSwitcherBackgroundView](self, "_updatePosterSwitcherBackgroundView");
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v6 = (void *)-[NSHashTable copy](self->_observers, "copy", 0);
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v18, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v13;
      do
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v13 != v9)
            objc_enumerationMutation(v6);
          v11 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * v10);
          if ((objc_opt_respondsToSelector() & 1) != 0)
            objc_msgSend(v11, "coverSheetViewControllerDidObscureWallpaper:obscured:", self, 0);
          ++v10;
        }
        while (v8 != v10);
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v18, 16);
      }
      while (v8);
    }

  }
}

void __68__CSCoverSheetViewController__removeBackgroundContentViewController__block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  objc_msgSend(v3, "setVibrancyConfigurationOverride:", 0);
  objc_msgSend(*(id *)(a1 + 32), "_addBackgroundContentOccludingViewsForAppearance:", v4);
  objc_msgSend(v4, "setLegibilitySettings:", 0);

}

void __68__CSCoverSheetViewController__removeBackgroundContentViewController__block_invoke_2(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  void (**v4)(void);

  v2 = *(void **)(a1 + 32);
  v4 = a2;
  objc_msgSend(v2, "coverSheetView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setBackgroundContentView:", 0);

  v4[2]();
}

- (void)_performLocalAppearanceUpdatesWithReason:(id)a3 updates:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  CSCoverSheetViewController *v16;
  id v17;
  id v18;

  v6 = a3;
  v7 = a4;
  -[CSCoverSheetViewController localAppearance](self, "localAppearance");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)MEMORY[0x1E0D01908];
  objc_msgSend(MEMORY[0x1E0D016B0], "settingsWithDuration:", 0.4);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __79__CSCoverSheetViewController__performLocalAppearanceUpdatesWithReason_updates___block_invoke;
  v14[3] = &unk_1E8E2E578;
  v15 = v8;
  v16 = self;
  v17 = v6;
  v18 = v7;
  v11 = v6;
  v12 = v8;
  v13 = v7;
  objc_msgSend(v9, "animateWithSettings:actions:completion:", v10, v14, 0);

}

uint64_t __79__CSCoverSheetViewController__performLocalAppearanceUpdatesWithReason_updates___block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  return objc_msgSend(*(id *)(a1 + 40), "_updateActiveAppearanceForReason:", *(_QWORD *)(a1 + 48));
}

- (void)_addBackgroundContentOccludingViewsForAppearance:(id)a3
{
  if (self->_backgroundContentViewController)
    objc_msgSend(a3, "removeAllComponentsWithIdentifier:", CFSTR("BackgroundContent"));
}

- (void)_removeBackgroundContentOccludingViewsForAppearance:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;

  v4 = a3;
  if (self->_backgroundContentViewController)
  {
    v19 = v4;
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "userInterfaceIdiom");

    if ((v6 & 0xFFFFFFFFFFFFFFFBLL) != 1)
    {
      +[CSComponent complicationContainer](CSComponent, "complicationContainer");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "identifier:", CFSTR("BackgroundContent"));
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "priority:", -100);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "hidden:", 1);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "addComponent:", v10);

    }
    +[CSComponent remoteInlineContent](CSComponent, "remoteInlineContent");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "identifier:", CFSTR("BackgroundContent"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "priority:", -100);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "hidden:", 1);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "addComponent:", v14);

    v15 = (void *)objc_opt_new();
    objc_msgSend(v15, "identifier:", CFSTR("BackgroundContent"));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "priority:", -100);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "shouldRenderInline:", 1);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "addComponent:", v18);

    v4 = v19;
  }

}

- (void)_setupBackgroundContentGestureRecognizer
{
  void *v3;
  void *v4;
  UITapGestureRecognizer *v5;
  UITapGestureRecognizer *backgroundContentGestureRecognizer;
  id v7;

  if (!self->_backgroundContentViewController
    || (-[CSCoverSheetViewController coverSheetView](self, "coverSheetView"),
        v3 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v3, "backgroundContentGestureRecognizer"),
        v4 = (void *)objc_claimAutoreleasedReturnValue(),
        v4,
        v3,
        !v4))
  {
    v5 = (UITapGestureRecognizer *)objc_alloc_init(MEMORY[0x1E0CEAA88]);
    backgroundContentGestureRecognizer = self->_backgroundContentGestureRecognizer;
    self->_backgroundContentGestureRecognizer = v5;

    -[UITapGestureRecognizer setDelegate:](self->_backgroundContentGestureRecognizer, "setDelegate:", self);
    -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setBackgroundContentGestureRecognizer:", self->_backgroundContentGestureRecognizer);

  }
}

- (id)_activeRemoteContentAssertion
{
  return -[CSEmbeddedContentActionManager validActionWithIdentifierIfExists:](self->_embeddedContentActionManager, "validActionWithIdentifierIfExists:", *MEMORY[0x1E0DAB128]);
}

- (void)_addOrRemoveRemoteContentViewIfNecessary
{
  -[CSCoverSheetViewController _addOrRemoveRemoteContentViewIfNecessaryMaintainingState:](self, "_addOrRemoveRemoteContentViewIfNecessaryMaintainingState:", 0);
}

- (void)_addOrRemoveRemoteContentViewIfNecessaryMaintainingState:(BOOL)a3
{
  void *v5;
  _BOOL4 v6;
  NSObject *v7;
  _BOOL4 v8;
  _DWORD v9[2];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  -[CSCoverSheetViewController _activeRemoteContentAssertion](self, "_activeRemoteContentAssertion");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    self->_suppressModalRemotePresentation = a3;
    v6 = -[CSCoverSheetViewController _canShowEmbeddedRemoteContent](self, "_canShowEmbeddedRemoteContent");
    SBLogDashBoard();
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v6)
    {
      if (v8)
      {
        LOWORD(v9[0]) = 0;
        _os_log_impl(&dword_1D0337000, v7, OS_LOG_TYPE_DEFAULT, "[CSCSVC][RemoteContent] Reinstating content", (uint8_t *)v9, 2u);
      }

      -[CSCoverSheetViewController _addRemoteViewControllerForAction:](self, "_addRemoteViewControllerForAction:", v5);
    }
    else
    {
      if (v8)
      {
        v9[0] = 67109120;
        v9[1] = 0;
        _os_log_impl(&dword_1D0337000, v7, OS_LOG_TYPE_DEFAULT, "[CSCSVC][RemoteContent] Not reinstating content: canShowContent: %d", (uint8_t *)v9, 8u);
      }

    }
  }
  else
  {
    -[CSCoverSheetViewController _dismissRemoteViewControllerForReason:](self, "_dismissRemoteViewControllerForReason:", 6);
  }

}

- (void)_cleanupStaleRemoteContentWithCompletion:(id)a3
{
  id v4;
  NSMutableSet *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  _QWORD v11[5];
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v5 = self->_remoteContentInlineProvidingManagers;
  v6 = -[NSMutableSet countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v14;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v14 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * v9++), "removeInlineRemoteContentWithAnimatedDismissal:", 0);
      }
      while (v7 != v9);
      v7 = -[NSMutableSet countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v7);
  }

  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __71__CSCoverSheetViewController__cleanupStaleRemoteContentWithCompletion___block_invoke;
  v11[3] = &unk_1E8E2DF80;
  v11[4] = self;
  v12 = v4;
  v10 = v4;
  dispatch_async(MEMORY[0x1E0C80D38], v11);

}

void __71__CSCoverSheetViewController__cleanupStaleRemoteContentWithCompletion___block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint8_t buf[4];
  void *v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1552), "existingSessions");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v19, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v14 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
        SBLogDashBoard();
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          objc_msgSend(v7, "sessionID");
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v18 = v9;
          _os_log_impl(&dword_1D0337000, v8, OS_LOG_TYPE_DEFAULT, "[CSCSVC][RemoteContent] Forcefully removing stale remote session %{public}@", buf, 0xCu);

        }
        objc_msgSend(v7, "forceDisconnect");
        v10 = *(void **)(*(_QWORD *)(a1 + 32) + 1552);
        objc_msgSend(v7, "sessionID");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "didInvalidateSessionWithSessionID:", v11);

      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v19, 16);
    }
    while (v4);
  }
  v12 = *(_QWORD *)(a1 + 40);
  if (v12)
    (*(void (**)(void))(v12 + 16))();

}

- (BOOL)_canShowEmbeddedRemoteContent
{
  uint64_t v3;
  int v4;
  void *v5;
  int v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  void *v10;
  uint64_t v11;
  void *v13;
  _BOOL4 v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  uint8_t buf[2];

  v3 = objc_msgSend((id)*MEMORY[0x1E0CEB258], "activeInterfaceOrientation");
  v4 = -[CSCoverSheetViewController bs_isAppearingOrAppeared](self, "bs_isAppearingOrAppeared");
  if (v4 && (unint64_t)(v3 - 3) < 0xFFFFFFFFFFFFFFFELL)
  {
    if ((__sb__runningInSpringBoard() & 1) != 0)
    {
      if (SBFEffectiveDeviceClass() != 2)
      {
LABEL_11:
        SBLogDashBoard();
        v7 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          v8 = "[RemoteContent] Cannot show content: isAppearingOrAppeared";
          v9 = buf;
          goto LABEL_13;
        }
        goto LABEL_14;
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "userInterfaceIdiom");

      if (v11 != 1)
        goto LABEL_11;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_11;
  }
  -[CSCoverSheetViewController activeBehavior](self, "activeBehavior");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "areRestrictedCapabilities:", 0x80000);

  if (v6)
  {
    SBLogDashBoard();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v19 = 0;
      v8 = "[RemoteContent] Cannot show content: hosted remote content is restricted";
      v9 = (uint8_t *)&v19;
LABEL_13:
      _os_log_impl(&dword_1D0337000, v7, OS_LOG_TYPE_DEFAULT, v8, v9, 2u);
    }
  }
  else
  {
    if (!-[CSCoverSheetViewController isLockScreenShowingDefaultContentExceptControlCenter](self, "isLockScreenShowingDefaultContentExceptControlCenter"))
    {
      SBLogDashBoard();
      v7 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        goto LABEL_14;
      v18 = 0;
      v8 = "[RemoteContent] Cannot show content: !isLockScreenShowingDefaultContentExceptControlCenter";
      v9 = (uint8_t *)&v18;
      goto LABEL_13;
    }
    +[CSCoverSheetViewControllerBase coverSheetIdentifier](CSDismissableModalViewController, "coverSheetIdentifier");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = -[CSCoverSheetViewController _isPresentingModalViewControllerWithIdentifier:](self, "_isPresentingModalViewControllerWithIdentifier:", v13);

    if (v14)
    {
      SBLogDashBoard();
      v7 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        goto LABEL_14;
      v17 = 0;
      v8 = "[RemoteContent] Cannot show content: presenting modal VC";
      v9 = (uint8_t *)&v17;
      goto LABEL_13;
    }
    if (self->_remoteContentInlineViewController)
    {
      SBLogDashBoard();
      v7 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        goto LABEL_14;
      v16 = 0;
      v8 = "[RemoteContent] Cannot show content: already have inline VC";
      v9 = (uint8_t *)&v16;
      goto LABEL_13;
    }
    if (!-[CSCoverSheetViewController isPresentingNotificationInLongLook](self, "isPresentingNotificationInLongLook"))
      return 1;
    SBLogDashBoard();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v15 = 0;
      v8 = "[RemoteContent] Cannot show content: presenting notification in long look";
      v9 = (uint8_t *)&v15;
      goto LABEL_13;
    }
  }
LABEL_14:

  return 0;
}

- (void)_addRemoteViewControllerForAction:(id)a3
{
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint8_t buf[4];
  NSObject *v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a3, "configurationObject");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_opt_class();
  v7 = v5;
  if (v6)
  {
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v8 = v7;
    else
      v8 = 0;
  }
  else
  {
    v8 = 0;
  }
  v9 = v8;

  if (-[CSCoverSheetViewController _isShowingInlineContent](self, "_isShowingInlineContent"))
  {
    -[CSCoverSheetViewController _overrideNotificationDisplayStyleForInlineContent](self, "_overrideNotificationDisplayStyleForInlineContent");
  }
  else
  {
    -[CSCoverSheetViewController _hostedRemoteContentViewController](self, "_hostedRemoteContentViewController");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (!a3 || v10)
    {

    }
    else if (v9)
    {
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      -[CSRemoteContentSessionManager existingSessionsWithDefinition:](self->_remoteContentSessionManager, "existingSessionsWithDefinition:", v9);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v20, v26, 16);
      if (v12)
      {
        v13 = v12;
        v14 = *(_QWORD *)v21;
LABEL_13:
        v15 = 0;
        while (1)
        {
          if (*(_QWORD *)v21 != v14)
            objc_enumerationMutation(v11);
          v16 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * v15);
          if ((objc_msgSend(v16, "isValid") & 1) != 0)
            break;
          if (v13 == ++v15)
          {
            v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v20, v26, 16);
            if (v13)
              goto LABEL_13;
            goto LABEL_19;
          }
        }
        objc_msgSend(v16, "sessionID");
        v17 = objc_claimAutoreleasedReturnValue();

        if (!v17)
          goto LABEL_24;
        SBLogDashBoard();
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138543362;
          v25 = v17;
          _os_log_impl(&dword_1D0337000, v18, OS_LOG_TYPE_DEFAULT, "Already have valid existing session ID %{public}@; not adding remote VC",
            buf,
            0xCu);
        }
      }
      else
      {
LABEL_19:

LABEL_24:
        -[CSRemoteContentSessionManager createSessionWithDefinition:](self->_remoteContentSessionManager, "createSessionWithDefinition:", v9);
        v19 = objc_claimAutoreleasedReturnValue();
        -[NSObject setHostDelegate:](v19, "setHostDelegate:", self);
        v17 = v19;
        BSDispatchMain();
        v18 = v19;
      }

    }
  }

}

uint64_t __64__CSCoverSheetViewController__addRemoteViewControllerForAction___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "activate");
}

- (void)_dismissRemoteViewControllerForReason:(int64_t)a3
{
  -[CSCoverSheetViewController _dismissRemoteViewControllerForReason:completion:](self, "_dismissRemoteViewControllerForReason:completion:", a3, 0);
}

- (void)_dismissRemoteViewControllerForReason:(int64_t)a3 completion:(id)a4
{
  id v6;
  uint64_t v7;
  id v8;
  void (**v9)(_QWORD, _QWORD);
  void *v10;
  NSObject *v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  void *v18;
  CSCoverSheetViewController *v19;
  id v20;
  _QWORD v21[5];
  id v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  BSDispatchQueueAssertMain();
  v7 = MEMORY[0x1E0C809B0];
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = __79__CSCoverSheetViewController__dismissRemoteViewControllerForReason_completion___block_invoke;
  v21[3] = &unk_1E8E2E5A0;
  v21[4] = self;
  v8 = v6;
  v22 = v8;
  v9 = (void (**)(_QWORD, _QWORD))MEMORY[0x1D17E1614](v21);
  -[CSCoverSheetViewController _hostedRemoteContentViewController](self, "_hostedRemoteContentViewController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10)
  {
    SBLogDashBoard();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      NSStringFromSBSRemoteContentDismissType();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v24 = v12;
      v25 = 2114;
      v26 = v10;
      _os_log_impl(&dword_1D0337000, v11, OS_LOG_TYPE_DEFAULT, "[CSCSVC][RemoteContent] Dismissing remote content because of \"%{public}@\": %{public}@", buf, 0x16u);

    }
    v15 = v7;
    v16 = 3221225472;
    v17 = __79__CSCoverSheetViewController__dismissRemoteViewControllerForReason_completion___block_invoke_378;
    v18 = &unk_1E8E2E5C8;
    v13 = v9;
    v19 = self;
    v20 = v13;
    v14 = (void *)MEMORY[0x1D17E1614](&v15);
    self->_isRemovingLockScreenContentAction = 1;
    if ((objc_msgSend(v10, "dismissForDismissType:completion:", a3, v14, v15, v16, v17, v18) & 1) == 0)
      (*((void (**)(id, _QWORD))v13 + 2))(v13, 0);

  }
  else
  {
    v9[2](v9, 0);
  }

}

void __79__CSCoverSheetViewController__dismissRemoteViewControllerForReason_completion___block_invoke(uint64_t a1, char a2)
{
  void *v3;
  _QWORD v4[4];
  id v5;
  id v6;
  char v7;

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __79__CSCoverSheetViewController__dismissRemoteViewControllerForReason_completion___block_invoke_2;
  v4[3] = &unk_1E8E2E360;
  v3 = *(void **)(a1 + 40);
  v5 = *(id *)(a1 + 32);
  v6 = v3;
  v7 = a2;
  objc_msgSend(v5, "_cleanupStaleRemoteContentWithCompletion:", v4);

}

uint64_t __79__CSCoverSheetViewController__dismissRemoteViewControllerForReason_completion___block_invoke_2(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)(result + 32) + 1585) = 0;
  v1 = *(_QWORD *)(result + 40);
  if (v1)
    return (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 16))(*(_QWORD *)(result + 40), *(unsigned __int8 *)(result + 48));
  return result;
}

void __79__CSCoverSheetViewController__dismissRemoteViewControllerForReason_completion___block_invoke_378(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint8_t v4[16];

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  objc_msgSend(*(id *)(a1 + 32), "_activeRemoteContentAssertion");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    SBLogDashBoard();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1D0337000, v3, OS_LOG_TYPE_DEFAULT, "[CSCSVC][RemoteContent] After dismissing remote content we still have an active assertion; adding remote view",
        v4,
        2u);
    }

    objc_msgSend(*(id *)(a1 + 32), "_handleAddedAction");
  }
}

- (BOOL)_removeRemoteViewControllerForInvalidatedSession:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void (**v11)(_QWORD);
  NSObject *v12;
  void *v13;
  CSRemoteContentModalViewController *remoteContentModalViewController;
  void *v15;
  void *v16;
  BOOL v17;
  NSObject *v18;
  void *v19;
  CSRemoteContentInlineViewController *remoteContentInlineViewController;
  NSMutableSet *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  CSRemoteContentInlineViewController *v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _QWORD v32[4];
  id v33;
  CSCoverSheetViewController *v34;
  void (**v35)(_QWORD);
  _QWORD v36[4];
  id v37;
  uint8_t v38[128];
  uint8_t buf[4];
  void *v40;
  __int16 v41;
  void *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = MEMORY[0x1E0C809B0];
  v36[0] = MEMORY[0x1E0C809B0];
  v36[1] = 3221225472;
  v36[2] = __90__CSCoverSheetViewController__removeRemoteViewControllerForInvalidatedSession_completion___block_invoke;
  v36[3] = &unk_1E8E2DFD8;
  v9 = v7;
  v37 = v9;
  v10 = MEMORY[0x1D17E1614](v36);
  v11 = (void (**)(_QWORD))v10;
  if (self->_remoteContentModalViewController)
  {
    SBLogDashBoard();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(v6, "sessionID");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      remoteContentModalViewController = self->_remoteContentModalViewController;
      *(_DWORD *)buf = 138543618;
      v40 = v13;
      v41 = 2114;
      v42 = remoteContentModalViewController;
      _os_log_impl(&dword_1D0337000, v12, OS_LOG_TYPE_DEFAULT, "[CSCSVC][RemoteContent] Removing content for session %{public}@: %{public}@", buf, 0x16u);

    }
    +[CSCoverSheetViewControllerBase coverSheetIdentifier](CSDismissableModalViewController, "coverSheetIdentifier");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSCoverSheetViewController _presentedModalViewControllerWithIdentifier:](self, "_presentedModalViewControllerWithIdentifier:", v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v32[0] = v8;
    v32[1] = 3221225472;
    v32[2] = __90__CSCoverSheetViewController__removeRemoteViewControllerForInvalidatedSession_completion___block_invoke_379;
    v32[3] = &unk_1E8E2E5F0;
    v33 = v6;
    v34 = self;
    v35 = v11;
    v17 = 1;
    -[CSCoverSheetViewController _dismissModalViewController:animated:completion:](self, "_dismissModalViewController:animated:completion:", v16, 1, v32);

  }
  else if (self->_remoteContentInlineViewController)
  {
    SBLogDashBoard();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(v6, "sessionID");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      remoteContentInlineViewController = self->_remoteContentInlineViewController;
      *(_DWORD *)buf = 138543618;
      v40 = v19;
      v41 = 2114;
      v42 = remoteContentInlineViewController;
      _os_log_impl(&dword_1D0337000, v18, OS_LOG_TYPE_DEFAULT, "[CSCSVC][RemoteContent] Removing content for session %{public}@: %{public}@", buf, 0x16u);

    }
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v21 = self->_remoteContentInlineProvidingManagers;
    v22 = -[NSMutableSet countByEnumeratingWithState:objects:count:](v21, "countByEnumeratingWithState:objects:count:", &v28, v38, 16);
    if (v22)
    {
      v23 = v22;
      v24 = *(_QWORD *)v29;
      do
      {
        for (i = 0; i != v23; ++i)
        {
          if (*(_QWORD *)v29 != v24)
            objc_enumerationMutation(v21);
          objc_msgSend(*(id *)(*((_QWORD *)&v28 + 1) + 8 * i), "removeInlineRemoteContentWithAnimatedDismissal:", 1, (_QWORD)v28);
        }
        v23 = -[NSMutableSet countByEnumeratingWithState:objects:count:](v21, "countByEnumeratingWithState:objects:count:", &v28, v38, 16);
      }
      while (v23);
    }

    -[CSMainPageContentViewController removeInlineContentSupport](self->_mainPageContentViewController, "removeInlineContentSupport");
    -[CSCoverSheetViewControllerBase setPresenter:](self->_remoteContentInlineViewController, "setPresenter:", 0);
    v26 = self->_remoteContentInlineViewController;
    self->_remoteContentInlineViewController = 0;

    -[CSCoverSheetViewController _overrideNotificationDisplayStyleWithRemotePreference:](self, "_overrideNotificationDisplayStyleWithRemotePreference:", 0);
    v11[2](v11);
    v17 = 1;
  }
  else
  {
    (*(void (**)(uint64_t))(v10 + 16))(v10);
    v17 = 0;
  }

  return v17;
}

uint64_t __90__CSCoverSheetViewController__removeRemoteViewControllerForInvalidatedSession_completion___block_invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __90__CSCoverSheetViewController__removeRemoteViewControllerForInvalidatedSession_completion___block_invoke_379(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  SBLogDashBoard();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(*(id *)(a1 + 32), "sessionID");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = 138543362;
    v8 = v3;
    _os_log_impl(&dword_1D0337000, v2, OS_LOG_TYPE_DEFAULT, "[CSCSVC][RemoteContent] Did remove content for session %{public}@", (uint8_t *)&v7, 0xCu);

  }
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(void **)(v4 + 1560);
  *(_QWORD *)(v4 + 1560) = 0;

  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  objc_msgSend(*(id *)(a1 + 40), "coverSheetView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "removeContentView");

}

- (BOOL)_isRemoteContentPresentedInUnlockMode
{
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  int v10;
  void *remoteContentModalViewController;

  +[CSCoverSheetViewControllerBase coverSheetIdentifier](CSDismissableModalViewController, "coverSheetIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController _presentedModalViewControllerWithIdentifier:](self, "_presentedModalViewControllerWithIdentifier:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_opt_class();
  v6 = v4;
  if (v5)
  {
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v7 = v6;
    else
      v7 = 0;
  }
  else
  {
    v7 = 0;
  }
  v8 = v7;

  objc_msgSend(v8, "presentedViewControllers");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = objc_msgSend(v9, "containsObject:", self->_remoteContentModalViewController);
  if (v10)
  {
    remoteContentModalViewController = self->_remoteContentModalViewController;
LABEL_9:
    LOBYTE(remoteContentModalViewController) = objc_msgSend(remoteContentModalViewController, "isInUnlockGestureMode");
    return (char)remoteContentModalViewController;
  }
  remoteContentModalViewController = self->_remoteContentInlineViewController;
  if (remoteContentModalViewController)
    goto LABEL_9;
  return (char)remoteContentModalViewController;
}

- (id)_hostedRemoteContentViewController
{
  void *remoteContentModalViewController;

  remoteContentModalViewController = self->_remoteContentModalViewController;
  if (!remoteContentModalViewController)
    remoteContentModalViewController = self->_remoteContentInlineViewController;
  return remoteContentModalViewController;
}

- (BOOL)_isPresentingModalRemoteContent
{
  void *v3;
  BOOL v4;

  +[CSCoverSheetViewControllerBase coverSheetIdentifier](CSDismissableModalViewController, "coverSheetIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (-[CSCoverSheetViewController _isPresentingModalViewControllerWithIdentifier:](self, "_isPresentingModalViewControllerWithIdentifier:", v3))
  {
    v4 = self->_remoteContentModalViewController != 0;
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

- (BOOL)_isPresentingDismissableRemoteContent
{
  BOOL v3;

  v3 = -[CSCoverSheetViewController _isPresentingModalRemoteContent](self, "_isPresentingModalRemoteContent");
  return v3 | -[CSRemoteContentInlineViewController shouldDismissInlineContentForUnlock](self->_remoteContentInlineViewController, "shouldDismissInlineContentForUnlock");
}

- (void)_overrideNotificationDisplayStyleForInlineContent
{
  int64_t v3;

  if (-[CSCoverSheetViewController didDismissSinceScreenOn](self, "didDismissSinceScreenOn"))
    v3 = 0;
  else
    v3 = -[CSRemoteContentInlineViewController preferredNotificationListMode](self->_remoteContentInlineViewController, "preferredNotificationListMode");
  -[CSCoverSheetViewController _overrideNotificationDisplayStyleWithRemotePreference:](self, "_overrideNotificationDisplayStyleWithRemotePreference:", v3);
}

- (void)_overrideNotificationDisplayStyleWithRemotePreference:(int64_t)a3
{
  CSOverrideNotificationListDisplayStyleAssertion *remoteOverrideNotificationDisplayStyleAssertion;
  _BOOL4 v6;
  int64_t v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  CSOverrideNotificationListDisplayStyleAssertion *v11;
  CSOverrideNotificationListDisplayStyleAssertion *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CSOverrideNotificationListDisplayStyleAssertion *v16;
  CSOverrideNotificationListDisplayStyleAssertion *v17;
  int v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  remoteOverrideNotificationDisplayStyleAssertion = self->_remoteOverrideNotificationDisplayStyleAssertion;
  if (!remoteOverrideNotificationDisplayStyleAssertion)
  {
LABEL_6:
    v8 = 0;
    goto LABEL_11;
  }
  v6 = -[CSOverrideNotificationListDisplayStyleAssertion hideNotificationCount](remoteOverrideNotificationDisplayStyleAssertion, "hideNotificationCount");
  v7 = -[CSOverrideNotificationListDisplayStyleAssertion displayStyle](self->_remoteOverrideNotificationDisplayStyleAssertion, "displayStyle");
  switch(v7)
  {
    case 2:
      v8 = 3;
      if (!v6)
        v8 = 4;
      break;
    case 1:
      v8 = 2;
      break;
    case 0:
      v8 = 1;
      break;
    default:
      goto LABEL_6;
  }
LABEL_11:
  if (v8 != a3)
  {
    SBLogDashBoard();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      NSStringFromPreferredNotificationListMode();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543362;
      v19 = v10;
      _os_log_impl(&dword_1D0337000, v9, OS_LOG_TYPE_DEFAULT, "[CSCSVC][RemoteContent] Setting notification list display style override: %{public}@", (uint8_t *)&v18, 0xCu);

    }
    switch(a3)
    {
      case 0:
        v11 = self->_remoteOverrideNotificationDisplayStyleAssertion;
        self->_remoteOverrideNotificationDisplayStyleAssertion = 0;
        goto LABEL_22;
      case 1:
        -[CSMainPageContentViewController combinedListViewController](self->_mainPageContentViewController, "combinedListViewController");
        v12 = (CSOverrideNotificationListDisplayStyleAssertion *)objc_claimAutoreleasedReturnValue();
        v11 = v12;
        v13 = *MEMORY[0x1E0DC6110];
        v14 = 0;
        goto LABEL_20;
      case 2:
        -[CSMainPageContentViewController combinedListViewController](self->_mainPageContentViewController, "combinedListViewController");
        v12 = (CSOverrideNotificationListDisplayStyleAssertion *)objc_claimAutoreleasedReturnValue();
        v11 = v12;
        v13 = *MEMORY[0x1E0DC6110];
        v14 = 1;
        goto LABEL_20;
      case 3:
        -[CSMainPageContentViewController combinedListViewController](self->_mainPageContentViewController, "combinedListViewController");
        v12 = (CSOverrideNotificationListDisplayStyleAssertion *)objc_claimAutoreleasedReturnValue();
        v11 = v12;
        v13 = *MEMORY[0x1E0DC6110];
        v14 = 2;
        v15 = 1;
        goto LABEL_21;
      case 4:
        -[CSMainPageContentViewController combinedListViewController](self->_mainPageContentViewController, "combinedListViewController");
        v12 = (CSOverrideNotificationListDisplayStyleAssertion *)objc_claimAutoreleasedReturnValue();
        v11 = v12;
        v13 = *MEMORY[0x1E0DC6110];
        v14 = 2;
LABEL_20:
        v15 = 0;
LABEL_21:
        -[CSOverrideNotificationListDisplayStyleAssertion acquireOverrideNotificationListDisplayStyleAssertionWithStyle:hideNotificationCount:reason:](v12, "acquireOverrideNotificationListDisplayStyleAssertionWithStyle:hideNotificationCount:reason:", v14, v15, v13);
        v16 = (CSOverrideNotificationListDisplayStyleAssertion *)objc_claimAutoreleasedReturnValue();
        v17 = self->_remoteOverrideNotificationDisplayStyleAssertion;
        self->_remoteOverrideNotificationDisplayStyleAssertion = v16;

LABEL_22:
        break;
      default:
        return;
    }
  }
}

- (void)_dismissInlineContentOnSignificantScroll
{
  NSObject *v3;
  uint8_t v4[16];

  if (-[CSCoverSheetViewController _isShowingInlineContent](self, "_isShowingInlineContent")
    && -[CSRemoteContentInlineViewController inlineContentDismissesOnSignificantScroll](self->_remoteContentInlineViewController, "inlineContentDismissesOnSignificantScroll"))
  {
    SBLogDashBoard();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1D0337000, v3, OS_LOG_TYPE_DEFAULT, "[CSCSVC][RemoteContent]  Dismissing remote content for significant scroll", v4, 2u);
    }

    -[CSCoverSheetViewController _dismissRemoteViewControllerForReason:](self, "_dismissRemoteViewControllerForReason:", 8);
  }
}

- (BOOL)_isShowingInlineContent
{
  return self->_remoteContentInlineViewController != 0;
}

- (BOOL)shouldActivateRemoteContentSession:(id)a3
{
  id v4;
  void *v5;
  int v6;
  void *v7;
  int v8;
  NSObject *v9;
  void *v10;
  int v12;
  void *v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[CSCoverSheetViewController activeBehavior](self, "activeBehavior");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "areRestrictedCapabilities:", 0x80000);

  -[CSCoverSheetViewController _hostedRemoteContentViewController](self, "_hostedRemoteContentViewController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
    v8 = 1;
  else
    v8 = v6;
  if (v8 == 1)
  {
    SBLogDashBoard();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(v4, "sessionID");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138543874;
      v13 = v10;
      v14 = 2114;
      v15 = v7;
      v16 = 1026;
      v17 = v6;
      _os_log_impl(&dword_1D0337000, v9, OS_LOG_TYPE_DEFAULT, "[CSCSVC][RemoteContent] Should not activate for session: %{public}@, controller: %{public}@, restricted: %{public}d", (uint8_t *)&v12, 0x1Cu);

    }
  }

  return v8 ^ 1;
}

- (void)_presentInlineViewController:(id)a3
{
  id v5;
  _BOOL8 v6;
  NSObject *v7;
  NSMutableSet *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint8_t buf[8];
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (v5)
  {
    objc_storeStrong((id *)&self->_remoteContentInlineViewController, a3);
    -[CSCoverSheetViewController _updateRemoteContentInlineHorizontalMargin](self, "_updateRemoteContentInlineHorizontalMargin");
    v6 = -[CSCoverSheetViewController _isMainPageShowing](self, "_isMainPageShowing");
    SBLogDashBoard();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D0337000, v7, OS_LOG_TYPE_DEFAULT, "[RemoteContent] Telling remote inline content managers to present", buf, 2u);
    }

    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v8 = self->_remoteContentInlineProvidingManagers;
    v9 = -[NSMutableSet countByEnumeratingWithState:objects:count:](v8, "countByEnumeratingWithState:objects:count:", &v15, v20, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v16;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v16 != v11)
            objc_enumerationMutation(v8);
          objc_msgSend(*(id *)(*((_QWORD *)&v15 + 1) + 8 * v12++), "presentInlineRemoteContent:animatePresentation:", v5, v6, (_QWORD)v15);
        }
        while (v10 != v12);
        v10 = -[NSMutableSet countByEnumeratingWithState:objects:count:](v8, "countByEnumeratingWithState:objects:count:", &v15, v20, 16);
      }
      while (v10);
    }

    +[CSAction actionWithType:](CSAction, "actionWithType:", 3);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSCoverSheetViewController handleAction:fromSender:](self, "handleAction:fromSender:", v13, self);

    objc_msgSend(v5, "setPresenter:", self);
    if (self->_lastAppearState == 2 && objc_msgSend(v5, "presentationCancelsTouches"))
      BKSHIDServicesCancelTouchesOnMainDisplay();
    -[CSCoverSheetViewController mainPageContentViewController](self, "mainPageContentViewController", (_QWORD)v15);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "addInlineContentSupportForDelegate:", v5);

    -[CSCoverSheetViewController _overrideNotificationDisplayStyleForInlineContent](self, "_overrideNotificationDisplayStyleForInlineContent");
    -[CSCoverSheetViewController _updateActiveBehaviorsForReason:](self, "_updateActiveBehaviorsForReason:", CFSTR("PresentedInlineContentViewController"));
    -[CSCoverSheetViewController _updateActiveAppearanceForReason:](self, "_updateActiveAppearanceForReason:", CFSTR("PresentedInlineContentViewController"));
  }

}

- (BOOL)remoteContentSession:(id)a3 presentViewController:(id)a4
{
  id v6;
  id v7;
  CSDismissableModalViewController *v8;
  const char *v9;
  BOOL v10;
  void *v12;
  int v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  NSObject *v19;
  NSObject *v20;
  void *v21;
  CSRemoteContentInlineViewController *remoteContentInlineViewController;
  void *v23;
  int v24;
  uint64_t v25;
  CSRemoteContentModalViewController *v26;
  CSRemoteContentModalViewController *remoteContentModalViewController;
  NSObject *v28;
  void *v29;
  CSRemoteContentModalViewController *v30;
  int v31;
  void *v32;
  __int16 v33;
  void *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  if (*(_OWORD *)&self->_remoteContentModalViewController == 0)
  {
    -[CSCoverSheetViewController activeBehavior](self, "activeBehavior");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "areRestrictedCapabilities:", 0x80000);

    SBLogDashBoard();
    v8 = (CSDismissableModalViewController *)objc_claimAutoreleasedReturnValue();
    v14 = os_log_type_enabled(&v8->super.super.super.super.super, OS_LOG_TYPE_DEFAULT);
    if (v13)
    {
      if (!v14)
        goto LABEL_5;
      LOWORD(v31) = 0;
      v9 = "[CSCSVC][RemoteContent] capability restricted";
      goto LABEL_4;
    }
    if (v14)
    {
      LOWORD(v31) = 0;
      _os_log_impl(&dword_1D0337000, &v8->super.super.super.super.super, OS_LOG_TYPE_DEFAULT, "[CSCSVS][RemoteContent] Being asked to present remote session", (uint8_t *)&v31, 2u);
    }

    v15 = objc_msgSend(v7, "contentPresentationType");
    if (v15)
    {
      if (v15 != 1)
      {
        v10 = 1;
        goto LABEL_7;
      }
      v16 = objc_opt_class();
      v17 = v7;
      if (v16)
      {
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v18 = v17;
        else
          v18 = 0;
      }
      else
      {
        v18 = 0;
      }
      v8 = v18;

      if (-[CSCoverSheetViewController isShowingMediaControls](self, "isShowingMediaControls")
        && -[CSDismissableModalViewController shouldDismissInlineContentForNowPlaying](v8, "shouldDismissInlineContentForNowPlaying"))
      {
        SBLogDashBoard();
        v19 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v31) = 0;
          _os_log_impl(&dword_1D0337000, v19, OS_LOG_TYPE_DEFAULT, "[CSCSVC][RemoteContent] showing media controls; not presenting inline",
            (uint8_t *)&v31,
            2u);
        }

        goto LABEL_5;
      }
      -[CSCoverSheetViewController _presentInlineViewController:](self, "_presentInlineViewController:", v8);
      SBLogDashBoard();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend(v6, "sessionID");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        remoteContentInlineViewController = self->_remoteContentInlineViewController;
        v31 = 138543618;
        v32 = v21;
        v33 = 2114;
        v34 = remoteContentInlineViewController;
LABEL_40:
        _os_log_impl(&dword_1D0337000, v20, OS_LOG_TYPE_DEFAULT, "[CSCSVC][RemoteContent] Added content for session %{public}@: %{public}@", (uint8_t *)&v31, 0x16u);

      }
    }
    else
    {
      if (self->_suppressModalRemotePresentation)
      {
        SBLogDashBoard();
        v8 = (CSDismissableModalViewController *)objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(&v8->super.super.super.super.super, OS_LOG_TYPE_DEFAULT))
          goto LABEL_5;
        LOWORD(v31) = 0;
        v9 = "[CSCSVC][RemoteContent] not reinstating modal content";
        goto LABEL_4;
      }
      -[CSCoverSheetViewController mainPageContentViewController](self, "mainPageContentViewController");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = objc_msgSend(v23, "hasVisibleBreakthroughContent");

      if (v24)
      {
        SBLogDashBoard();
        v8 = (CSDismissableModalViewController *)objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(&v8->super.super.super.super.super, OS_LOG_TYPE_DEFAULT))
          goto LABEL_5;
        LOWORD(v31) = 0;
        v9 = "[CSCSVC][RemoteContent] has visible breakthrough content; not showing modal";
        goto LABEL_4;
      }
      v25 = objc_opt_class();
      __BSSafeCast(v7, v25);
      v26 = (CSRemoteContentModalViewController *)objc_claimAutoreleasedReturnValue();
      remoteContentModalViewController = self->_remoteContentModalViewController;
      self->_remoteContentModalViewController = v26;

      v8 = objc_alloc_init(CSDismissableModalViewController);
      -[CSPresentationViewController presentContentViewController:animated:](v8, "presentContentViewController:animated:", self->_remoteContentModalViewController, 0);
      if (-[CSRemoteContentModalViewController shouldCaptureHomeGesture](self->_remoteContentModalViewController, "shouldCaptureHomeGesture"))
      {
        SBLogDashBoard();
        v28 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v31) = 0;
          _os_log_impl(&dword_1D0337000, v28, OS_LOG_TYPE_DEFAULT, "[ZStack-Participant] adding remote content modal home affordance", (uint8_t *)&v31, 2u);
        }

        -[CSCoverSheetContextProviding modalHomeAffordanceController](self->_coverSheetContext, "modalHomeAffordanceController");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        -[CSDismissableModalViewController setHomeAffordanceController:](v8, "setHomeAffordanceController:", v29);

      }
      -[CSDismissableModalViewController setDelegate:](v8, "setDelegate:", self->_remoteContentModalViewController);
      -[CSCoverSheetViewController _presentModalViewController:shouldDismissOverlays:animated:completion:](self, "_presentModalViewController:shouldDismissOverlays:animated:completion:", v8, 0, 1, 0);
      SBLogDashBoard();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend(v6, "sessionID");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = self->_remoteContentModalViewController;
        v31 = 138543618;
        v32 = v21;
        v33 = 2114;
        v34 = v30;
        goto LABEL_40;
      }
    }

    v10 = 1;
    goto LABEL_6;
  }
  SBLogDashBoard();
  v8 = (CSDismissableModalViewController *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(&v8->super.super.super.super.super, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v31) = 0;
    v9 = "[CSCSVC][RemoteContent] remote content existed";
LABEL_4:
    _os_log_impl(&dword_1D0337000, &v8->super.super.super.super.super, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v31, 2u);
  }
LABEL_5:
  v10 = 0;
LABEL_6:

LABEL_7:
  return v10;
}

- (BOOL)remoteContentSession:(id)a3 dismissWithReason:(int64_t)a4 completion:(id)a5
{
  id v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  CSRemoteContentSessionManager *remoteContentSessionManager;
  void *v13;
  BOOL v14;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a5;
  SBLogDashBoard();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    objc_msgSend(v7, "sessionID");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    NSStringFromSBSRemoteContentDismissType();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 138543618;
    v17 = v10;
    v18 = 2112;
    v19 = v11;
    _os_log_impl(&dword_1D0337000, v9, OS_LOG_TYPE_INFO, "[CSCSVC][RemoteContent] Dismiss remote content session %{public}@ for reason \"%{pubic}@\", (uint8_t *)&v16, 0x16u);

  }
  remoteContentSessionManager = self->_remoteContentSessionManager;
  objc_msgSend(v7, "sessionID");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSRemoteContentSessionManager didInvalidateSessionWithSessionID:](remoteContentSessionManager, "didInvalidateSessionWithSessionID:", v13);

  v14 = -[CSCoverSheetViewController _removeRemoteViewControllerForInvalidatedSession:completion:](self, "_removeRemoteViewControllerForInvalidatedSession:completion:", v7, v8);
  return v14;
}

- (void)remoteContentSession:(id)a3 didInvalidateWithError:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  CSRemoteContentSessionManager *remoteContentSessionManager;
  void *v12;
  id v13;
  _QWORD v14[4];
  id v15;
  CSCoverSheetViewController *v16;
  uint8_t buf[4];
  void *v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  SBLogDashBoard();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    objc_msgSend(v6, "sessionID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "descriptionWithMultilinePrefix:", 0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v18 = v9;
    v19 = 2112;
    v20 = v10;
    _os_log_impl(&dword_1D0337000, v8, OS_LOG_TYPE_INFO, "[CSCSVC][RemoteContent] Invalidate remote content session %{public}@ for error: %{pubic}@", buf, 0x16u);

  }
  remoteContentSessionManager = self->_remoteContentSessionManager;
  objc_msgSend(v6, "sessionID");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSRemoteContentSessionManager didInvalidateSessionWithSessionID:](remoteContentSessionManager, "didInvalidateSessionWithSessionID:", v12);

  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __74__CSCoverSheetViewController_remoteContentSession_didInvalidateWithError___block_invoke;
  v14[3] = &unk_1E8E2DC00;
  v15 = v7;
  v16 = self;
  v13 = v7;
  -[CSCoverSheetViewController _removeRemoteViewControllerForInvalidatedSession:completion:](self, "_removeRemoteViewControllerForInvalidatedSession:completion:", v6, v14);

}

void __74__CSCoverSheetViewController_remoteContentSession_didInvalidateWithError___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  int v4;
  NSObject *v5;
  void *v6;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 32);
  if (v2
    && (objc_msgSend(v2, "domain"),
        v3 = (void *)objc_claimAutoreleasedReturnValue(),
        v4 = objc_msgSend(v3, "isEqualToString:", CFSTR("CSRemoteContentSessionErrorDomain")),
        v3,
        v4))
  {
    SBLogDashBoard();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "descriptionWithMultilinePrefix:", 0);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = 138543362;
      v8 = v6;
      _os_log_impl(&dword_1D0337000, v5, OS_LOG_TYPE_INFO, "[CSCSVC][RemoteContent] Not re-adding remote content view given error: %{public}@", (uint8_t *)&v7, 0xCu);

    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "_addOrRemoveRemoteContentViewIfNecessary");
  }
}

- (void)remoteContentDidUpdateStyle
{
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  _BOOL4 v9;
  NSObject *v10;
  _BOOL4 v11;
  void *v12;
  uint8_t v13[16];
  uint8_t buf[16];

  +[CSCoverSheetViewControllerBase coverSheetIdentifier](CSDismissableModalViewController, "coverSheetIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController _presentedModalViewControllerWithIdentifier:](self, "_presentedModalViewControllerWithIdentifier:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_opt_class();
  v6 = v4;
  if (v5)
  {
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v7 = v6;
    else
      v7 = 0;
  }
  else
  {
    v7 = 0;
  }
  v8 = v7;

  if (v8)
  {
    v9 = -[CSRemoteContentModalViewController shouldCaptureHomeGesture](self->_remoteContentModalViewController, "shouldCaptureHomeGesture");
    SBLogDashBoard();
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if (v9)
    {
      if (v11)
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D0337000, v10, OS_LOG_TYPE_DEFAULT, "[ZStack-Participant] adding remote content modal home affordance for style update", buf, 2u);
      }

      -[CSCoverSheetContextProviding modalHomeAffordanceController](self->_coverSheetContext, "modalHomeAffordanceController");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setHomeAffordanceController:", v12);

    }
    else
    {
      if (v11)
      {
        *(_WORD *)v13 = 0;
        _os_log_impl(&dword_1D0337000, v10, OS_LOG_TYPE_DEFAULT, "[ZStack-Participant] removing remote content modal home affordance for style update", v13, 2u);
      }

      objc_msgSend(v8, "setHomeAffordanceController:", 0);
    }
  }
  if (-[CSCoverSheetViewController _isShowingInlineContent](self, "_isShowingInlineContent"))
  {
    if (-[CSCoverSheetViewController isShowingMediaControls](self, "isShowingMediaControls")
      && -[CSRemoteContentInlineViewController shouldDismissInlineContentForNowPlaying](self->_remoteContentInlineViewController, "shouldDismissInlineContentForNowPlaying"))
    {
      -[CSCoverSheetViewController _dismissRemoteViewControllerForReason:](self, "_dismissRemoteViewControllerForReason:", 4);
    }
    else
    {
      -[CSCoverSheetViewController _overrideNotificationDisplayStyleForInlineContent](self, "_overrideNotificationDisplayStyleForInlineContent");
      -[CSMainPageContentViewController inlineContentDidChange](self->_mainPageContentViewController, "inlineContentDidChange");
    }
  }

}

- (double)remoteContentComplicationHeightInset
{
  return self->_portraitComplicationContainerHeight;
}

- (void)combinedListViewController:(id)a3 didChangeVisibleBreakthroughContent:(BOOL)a4
{
  void *v6;
  void *v7;
  NSObject *v8;
  uint8_t v9[16];

  -[CSCoverSheetViewController _activeRemoteContentAssertion](self, "_activeRemoteContentAssertion", a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6 && !a4)
  {
    -[CSCoverSheetViewController _hostedRemoteContentViewController](self, "_hostedRemoteContentViewController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {

    }
    else if (-[CSCoverSheetViewController isInScreenOffMode](self, "isInScreenOffMode"))
    {
      SBLogDashBoard();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v9 = 0;
        _os_log_impl(&dword_1D0337000, v8, OS_LOG_TYPE_INFO, "[CSCSVC][RemoteContent] Breakthrough content is gone and screen is off while sleep assertion is active; attemp"
          "t to show remote content",
          v9,
          2u);
      }

      -[CSCoverSheetViewController _addOrRemoveRemoteContentViewIfNecessary](self, "_addOrRemoveRemoteContentViewIfNecessary");
    }
  }
}

- (void)didAddNewActivityItemSceneHostEnvironment
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = (void *)-[NSHashTable copy](self->_observers, "copy", 0);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v10;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * v7);
        if ((objc_opt_respondsToSelector() & 1) != 0)
          objc_msgSend(v8, "coverSheetViewControllerDidAddNewSceneHostEnvironment:", self);
        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v5);
  }

}

- (void)activityItemsMayHaveChanged
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = (void *)-[NSHashTable copy](self->_observers, "copy", 0);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v10;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * v7);
        if ((objc_opt_respondsToSelector() & 1) != 0)
          objc_msgSend(v8, "coverSheetViewControllerActivityItemsMayHaveChanged:", self);
        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v5);
  }

}

- (BOOL)preventsLaunchFromWidgetWithAction:(id)a3
{
  void *v3;
  char v4;

  -[CSCoverSheetViewController activeBehavior](self, "activeBehavior", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "areRestrictedCapabilities:", 0x1000000);

  return v4;
}

- (BOOL)widgetGridViewControllerShouldPreventLaunchFromWidget:(id)a3
{
  void *v3;
  char v4;

  -[CSCoverSheetViewController activeBehavior](self, "activeBehavior", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "areRestrictedCapabilities:", 0x1000000);

  return v4;
}

- (void)actionManager:(id)a3 addedAction:(id)a4
{
  CSEmbeddedContentActionManager *v6;
  id v7;
  NSObject *v8;
  uint8_t v9[16];

  v6 = (CSEmbeddedContentActionManager *)a3;
  v7 = a4;
  if (self->_embeddedContentActionManager == v6)
  {
    if (self->_isRemovingLockScreenContentAction)
    {
      SBLogDashBoard();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v9 = 0;
        _os_log_impl(&dword_1D0337000, v8, OS_LOG_TYPE_DEFAULT, "[CSCSVC][RemoteContent] Pending removing remote content; not adding just yet",
          v9,
          2u);
      }

    }
    else
    {
      -[CSCoverSheetViewController _handleAddedAction](self, "_handleAddedAction");
    }
  }

}

- (void)_handleAddedAction
{
  void *v3;
  id v4;

  -[CSCoverSheetViewController _addOrRemoveRemoteContentViewIfNecessary](self, "_addOrRemoveRemoteContentViewIfNecessary");
  -[CSCoverSheetViewController mainPageContentViewController](self, "mainPageContentViewController");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "combinedListViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addVisibleBreakthroughContentObserver:", self);

}

- (void)actionManager:(id)a3 removedAction:(id)a4
{
  void *v5;
  void *v6;

  if (self->_embeddedContentActionManager == a3)
  {
    -[CSCoverSheetViewController mainPageContentViewController](self, "mainPageContentViewController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "combinedListViewController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "removeVisibleBreakthroughContentObserver:", self);

    -[CSCoverSheetViewController _addOrRemoveRemoteContentViewIfNecessary](self, "_addOrRemoveRemoteContentViewIfNecessary");
  }
}

- (void)backgroundContentActionManager:(id)a3 addedAction:(id)a4
{
  if (self->_backgroundContentActionManager == a3)
    -[CSCoverSheetViewController _addBackgroundContentViewControllerForAction:](self, "_addBackgroundContentViewControllerForAction:", a4);
}

- (void)backgroundContentActionManager:(id)a3 removedAction:(id)a4
{
  if (self->_backgroundContentActionManager == a3)
    -[CSCoverSheetViewController _removeBackgroundContentViewController](self, "_removeBackgroundContentViewController");
}

- (void)didPostNotificationRequest:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  int v12;
  void *v13;
  int v14;
  unint64_t v15;
  int v16;
  CSRemoteContentInlineViewController *remoteContentInlineViewController;
  NSObject *v18;
  const char *v19;
  NSObject *v20;
  uint32_t v21;
  _BOOL4 v22;
  _BOOL4 v23;
  _DWORD v24[2];
  __int16 v25;
  _BOOL4 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  +[CSCoverSheetViewControllerBase coverSheetIdentifier](CSDismissableModalViewController, "coverSheetIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController _presentedModalViewControllerWithIdentifier:](self, "_presentedModalViewControllerWithIdentifier:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_opt_class();
  v8 = v6;
  if (v7)
  {
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v9 = v8;
    else
      v9 = 0;
  }
  else
  {
    v9 = 0;
  }
  v10 = v9;

  objc_msgSend(v10, "presentedViewControllers");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v12 = objc_msgSend(v11, "containsObject:", self->_remoteContentModalViewController);
  if (v12)
  {
    objc_msgSend(v4, "sectionIdentifier");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "isEqualToString:", CFSTR("com.apple.cmas"));

    v15 = objc_msgSend(v4, "interruptionLevel");
    if ((objc_msgSend(v4, "isCriticalAlert") & 1) != 0)
    {
      v16 = 1;
    }
    else if (v15 > 1)
    {
      v16 = 1;
    }
    else
    {
      v16 = v14;
    }
    v22 = -[CSRemoteContentModalViewController suppressesDismissalForNotification](self->_remoteContentModalViewController, "suppressesDismissalForNotification");
    v23 = v22;
    if ((v16 & 1) != 0 || !v22)
    {
      SBLogDashBoard();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        v24[0] = 67240448;
        v24[1] = v16;
        v25 = 1026;
        v26 = v23;
        v19 = "[CSCSVC][RemoteContent] Dismissing modal due to notification isBreakthrough: %{public}d, suppressDismissal: %{public}d";
        v20 = v18;
        v21 = 14;
        goto LABEL_20;
      }
      goto LABEL_21;
    }
  }
  else
  {
    remoteContentInlineViewController = self->_remoteContentInlineViewController;
    if (remoteContentInlineViewController
      && !-[CSRemoteContentInlineViewController suppressesDismissalForNotification](remoteContentInlineViewController, "suppressesDismissalForNotification"))
    {
      SBLogDashBoard();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v24[0]) = 0;
        v19 = "[CSCSVC][RemoteContent] Dismissing inline due to notification";
        v20 = v18;
        v21 = 2;
LABEL_20:
        _os_log_impl(&dword_1D0337000, v20, OS_LOG_TYPE_DEFAULT, v19, (uint8_t *)v24, v21);
      }
LABEL_21:

      -[CSCoverSheetViewController _dismissRemoteViewControllerForReason:](self, "_dismissRemoteViewControllerForReason:", 4);
    }
  }

}

- (void)combinedListViewControllerDidUpdateAudioCategoriesDisablingVolumeHUD:(id)a3
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v4 = (void *)-[NSHashTable copy](self->_observers, "copy", a3, 0);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v11;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v11 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * v8);
        if ((objc_opt_respondsToSelector() & 1) != 0)
          objc_msgSend(v9, "coverSheetViewControllerDidUpdateAudioCategoriesDisablingVolumeHUD:", self);
        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v6);
  }

}

- (void)connectedDevicesDidChange:(id)a3
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t i;
  void *v10;
  void *v11;
  BOOL v12;
  NSArray *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t j;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int v22;
  NSObject *v23;
  _BOOL4 v24;
  NSObject *v25;
  _BOOL4 v26;
  void *v27;
  NSArray *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t k;
  void *v34;
  void *v35;
  BOOL v36;
  NSObject *v37;
  _BOOL4 v38;
  NSObject *v39;
  _BOOL4 v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  id obj;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint8_t v59[128];
  uint8_t buf[4];
  _BOOL4 v61;
  _BYTE v62[128];
  _BYTE v63[128];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  obj = v4;
  v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v55, v63, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v56;
    v44 = *MEMORY[0x1E0D01B28];
    v8 = *MEMORY[0x1E0DAB5B0] * 0.4;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v56 != v7)
          objc_enumerationMutation(obj);
        v10 = *(void **)(*((_QWORD *)&v55 + 1) + 8 * i);
        if (objc_msgSend(v10, "isPowerSource"))
        {
          if ((objc_msgSend(v10, "isInternal") & 1) == 0 && objc_msgSend(v10, "productIdentifier") == v44)
          {
            objc_msgSend(v10, "identifier");
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            v12 = -[CSCoverSheetViewController _containsCachedBatteryDeviceWithIdenfifier:](self, "_containsCachedBatteryDeviceWithIdenfifier:", v11);

            if (!v12)
              objc_msgSend(v43, "addObject:", v10);
          }
        }
        if (objc_msgSend(v10, "isInternal"))
        {
          v53 = 0u;
          v54 = 0u;
          v51 = 0u;
          v52 = 0u;
          v13 = self->_cachedBatteryDevices;
          v14 = -[NSArray countByEnumeratingWithState:objects:count:](v13, "countByEnumeratingWithState:objects:count:", &v51, v62, 16);
          if (v14)
          {
            v15 = v14;
            v16 = *(_QWORD *)v52;
            while (2)
            {
              for (j = 0; j != v15; ++j)
              {
                if (*(_QWORD *)v52 != v16)
                  objc_enumerationMutation(v13);
                v18 = *(void **)(*((_QWORD *)&v51 + 1) + 8 * j);
                if ((objc_msgSend(v18, "isInternal") & 1) != 0)
                {
                  v19 = objc_msgSend(v18, "percentCharge");
                  v20 = objc_msgSend(v10, "percentCharge");

                  if (v19 != v20)
                  {
                    -[BSAbsoluteMachTimer identifier](self->_chargingViewControllerTimer, "identifier");
                    v21 = (void *)objc_claimAutoreleasedReturnValue();
                    v22 = objc_msgSend(v21, "isEqualToString:", CFSTR("CSCoverSheetViewController.chargingViewControllerTimer.subtitleOnly"));

                    if (v22)
                      -[CSCoverSheetViewController _showChargingSubtitleWithTimeout:](self, "_showChargingSubtitleWithTimeout:", v8);
                  }
                  goto LABEL_24;
                }
              }
              v15 = -[NSArray countByEnumeratingWithState:objects:count:](v13, "countByEnumeratingWithState:objects:count:", &v51, v62, 16);
              if (v15)
                continue;
              break;
            }
          }

        }
LABEL_24:
        ;
      }
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v55, v63, 16);
    }
    while (v6);
  }

  if (objc_msgSend(v43, "count"))
  {
    SBLogDashBoard();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      v24 = -[CSCoverSheetViewController _isShowingChargingModal](self, "_isShowingChargingModal");
      *(_DWORD *)buf = 67109120;
      v61 = v24;
      _os_log_impl(&dword_1D0337000, v23, OS_LOG_TYPE_DEFAULT, "[Charge UI][Novel Packs] visible YES, showBattery YES – isAlreadyShowingChargingModal: %d", buf, 8u);
    }

    -[CSCoverSheetViewController _transitionChargingViewToVisible:suppressedByPack:showBattery:animated:](self, "_transitionChargingViewToVisible:suppressedByPack:showBattery:animated:", 1, 0, 1, 1);
    SBLogDashBoard();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      v26 = -[CSCoverSheetViewController _isShowingChargingModal](self, "_isShowingChargingModal");
      *(_DWORD *)buf = 67109120;
      v61 = v26;
      _os_log_impl(&dword_1D0337000, v25, OS_LOG_TYPE_DEFAULT, "[Charge UI][Novel Packs] – endedShowingChargingModal: %d", buf, 8u);
    }

  }
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  -[BCBatteryDeviceController connectedDevices](self->_batteryDeviceController, "connectedDevices");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v42 = 1344;
  v28 = self->_cachedBatteryDevices;
  v29 = -[NSArray countByEnumeratingWithState:objects:count:](v28, "countByEnumeratingWithState:objects:count:", &v47, v59, 16);
  if (v29)
  {
    v30 = v29;
    v31 = *(_QWORD *)v48;
    v32 = *MEMORY[0x1E0D01B28];
    do
    {
      for (k = 0; k != v30; ++k)
      {
        if (*(_QWORD *)v48 != v31)
          objc_enumerationMutation(v28);
        v34 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * k);
        if (objc_msgSend(v34, "productIdentifier", v42) == v32)
        {
          objc_msgSend(v34, "identifier");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          v36 = -[CSCoverSheetViewController _batteryCollection:containsDeviceWithIdentifier:](self, "_batteryCollection:containsDeviceWithIdentifier:", v27, v35);

          if (!v36)
            objc_msgSend(v45, "addObject:", v34);
        }
      }
      v30 = -[NSArray countByEnumeratingWithState:objects:count:](v28, "countByEnumeratingWithState:objects:count:", &v47, v59, 16);
    }
    while (v30);
  }

  if (objc_msgSend(v45, "count"))
  {
    SBLogDashBoard();
    v37 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      v38 = -[CSCoverSheetViewController _isShowingChargingModal](self, "_isShowingChargingModal");
      *(_DWORD *)buf = 67109120;
      v61 = v38;
      _os_log_impl(&dword_1D0337000, v37, OS_LOG_TYPE_DEFAULT, "[Charge UI][Removed Packs] visible YES, showBattery NO – isAlreadyShowingChargingModal: %d", buf, 8u);
    }

    -[CSCoverSheetViewController _transitionChargingViewToVisible:suppressedByPack:showBattery:animated:](self, "_transitionChargingViewToVisible:suppressedByPack:showBattery:animated:", 1, 0, 0, 1);
    SBLogDashBoard();
    v39 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      v40 = -[CSCoverSheetViewController _isShowingChargingModal](self, "_isShowingChargingModal");
      *(_DWORD *)buf = 67109120;
      v61 = v40;
      _os_log_impl(&dword_1D0337000, v39, OS_LOG_TYPE_DEFAULT, "[Charge UI][Removed Packs] – endedShowingChargingModal: %d", buf, 8u);
    }

  }
  v41 = *(Class *)((char *)&self->super.super.super.super.isa + v42);
  *(Class *)((char *)&self->super.super.super.super.isa + v42) = (Class)obj;

}

- (BOOL)_containsCachedBatteryDeviceWithIdenfifier:(id)a3
{
  return -[CSCoverSheetViewController _batteryCollection:containsDeviceWithIdentifier:](self, "_batteryCollection:containsDeviceWithIdentifier:", self->_cachedBatteryDevices, a3);
}

- (BOOL)_batteryCollection:(id)a3 containsDeviceWithIdentifier:(id)a4
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  char v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = a4;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v7 = v5;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v15;
    while (2)
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v15 != v9)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * i), "identifier", (_QWORD)v14);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = objc_msgSend(v11, "isEqualToString:", v6);

        if ((v12 & 1) != 0)
        {
          LOBYTE(v8) = 1;
          goto LABEL_11;
        }
      }
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      if (v8)
        continue;
      break;
    }
  }
LABEL_11:

  return v8;
}

- (BOOL)proudLockViewControllerIsCoverSheetVisible
{
  void *v3;
  int v4;

  -[CSCoverSheetViewController delegate](self, "delegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0 && !self->_hasContentAboveCoverSheet)
    v4 = objc_msgSend(v3, "coverSheetViewControllerIsPasscodeVisible:", self) ^ 1;
  else
    LOBYTE(v4) = 0;

  return v4;
}

- (void)proudLockDidChangeToCoachingText:(id)a3
{
  NSString *v4;
  NSString *currentCoachingString;

  v4 = (NSString *)objc_msgSend(a3, "copy");
  currentCoachingString = self->_currentCoachingString;
  self->_currentCoachingString = v4;

  -[CSCoverSheetViewController _updateCoachingString](self, "_updateCoachingString");
}

- (id)_coachingStringToUse
{
  NSString *v2;

  if (self->_screenOffMode || self->_authenticated)
    v2 = 0;
  else
    v2 = self->_currentCoachingString;
  return v2;
}

- (id)transientSubtitleText
{
  return (id)-[SBFLockScreenDateViewController transientSubtitleText](self->_dateViewController, "transientSubtitleText");
}

- (void)_updateCoachingString
{
  SBFLockScreenDateViewController *dateViewController;
  id v3;

  dateViewController = self->_dateViewController;
  -[CSCoverSheetViewController _coachingStringToUse](self, "_coachingStringToUse");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  -[SBFLockScreenDateViewController setCustomSubtitle:](dateViewController, "setCustomSubtitle:", v3);

}

- (void)_updateCoachingStringWithTimeout:(double)a3
{
  SBFLockScreenDateViewController *dateViewController;
  id v5;

  dateViewController = self->_dateViewController;
  -[CSCoverSheetViewController _coachingStringToUse](self, "_coachingStringToUse");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  -[SBFLockScreenDateViewController setCustomSubtitle:withTimeout:](dateViewController, "setCustomSubtitle:withTimeout:", v5, a3);

}

- (void)scrollablePageViewController:(id)a3 scrollViewWillBeginDragging:(id)a4
{
  id v6;
  id WeakRetained;
  id v8;
  _BOOL4 v9;
  id v10;

  v10 = a3;
  v6 = a4;
  WeakRetained = objc_loadWeakRetained((id *)&self->_coverSheetSpotlightPresenter);
  objc_msgSend(WeakRetained, "scrollViewWillBeginDragging:", v6);

  -[CSCoverSheetViewController mainPageContentViewController](self, "mainPageContentViewController");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  if (v8 == v10)
  {
    v9 = -[CSCoverSheetViewController _isShowingInlineContent](self, "_isShowingInlineContent");

    if (v9)
      -[CSRemoteContentInlineViewController beginCancelTouchesForCurrentEventInHostedContent](self->_remoteContentInlineViewController, "beginCancelTouchesForCurrentEventInHostedContent");
  }
  else
  {

  }
}

- (void)scrollablePageViewController:(id)a3 scrollViewDidScroll:(id)a4
{
  CSCoverSheetSpotlightPresenting **p_coverSheetSpotlightPresenter;
  id v5;
  id WeakRetained;

  p_coverSheetSpotlightPresenter = &self->_coverSheetSpotlightPresenter;
  v5 = a4;
  WeakRetained = objc_loadWeakRetained((id *)p_coverSheetSpotlightPresenter);
  objc_msgSend(WeakRetained, "scrollViewDidScroll:", v5);

}

- (void)scrollablePageViewController:(id)a3 scrollViewWillEndDragging:(id)a4 withVelocity:(CGPoint)a5
{
  double y;
  double x;
  CSCoverSheetSpotlightPresenting **p_coverSheetSpotlightPresenter;
  id v10;
  CSMainPageContentViewController *v11;
  id WeakRetained;
  CSMainPageContentViewController *mainPageContentViewController;
  void *v14;
  int v15;

  y = a5.y;
  x = a5.x;
  p_coverSheetSpotlightPresenter = &self->_coverSheetSpotlightPresenter;
  v10 = a4;
  v11 = (CSMainPageContentViewController *)a3;
  WeakRetained = objc_loadWeakRetained((id *)p_coverSheetSpotlightPresenter);
  objc_msgSend(WeakRetained, "scrollViewWillEndDragging:withVelocity:", v10, x, y);

  mainPageContentViewController = self->_mainPageContentViewController;
  if (mainPageContentViewController == v11
    && -[CSCoverSheetViewController _isShowingInlineContent](self, "_isShowingInlineContent"))
  {
    -[CSRemoteContentInlineViewController endCancelTouchesForCurrentEventInHostedContent](self->_remoteContentInlineViewController, "endCancelTouchesForCurrentEventInHostedContent");
    -[CSMainPageContentViewController combinedListViewController](self->_mainPageContentViewController, "combinedListViewController");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "isNotificationListSignificantlyScrolled");

    if (v15)
      -[CSCoverSheetViewController _dismissInlineContentOnSignificantScroll](self, "_dismissInlineContentOnSignificantScroll");
  }
}

- (BOOL)spotlightPresenterAllowsPullToSearch:(id)a3
{
  void *v4;
  int v5;
  void *v6;
  char v7;
  void *v9;
  char v10;

  if (!-[CSCoverSheetViewController _canPresentSwipeDismissableModal](self, "_canPresentSwipeDismissableModal", a3))
    return 0;
  if (-[CSCoverSheetViewController _isSpotlightBehaviorRestricted](self, "_isSpotlightBehaviorRestricted"))
    return 0;
  -[CSCoverSheetContextProviding screenStateProvider](self->_coverSheetContext, "screenStateProvider");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "screenIsOn");

  if (!v5)
    return 0;
  -[CSMainPageContentViewController combinedListViewController](self->_mainPageContentViewController, "combinedListViewController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isScrollingListContent");

  if ((v7 & 1) != 0)
    return 0;
  objc_msgSend(MEMORY[0x1E0D47230], "sharedConnection");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "isSpotlightAllowed");

  return v10;
}

- (BOOL)_isSpotlightBehaviorRestricted
{
  void *v2;
  char v3;

  -[CSCoverSheetViewController activeBehavior](self, "activeBehavior");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "areRestrictedCapabilities:", 0x200000);

  return v3;
}

- (void)spotlightPresenter:(id)a3 presentDismissableModalViewController:(id)a4 completion:(id)a5
{
  id v7;
  id v8;
  CSDismissableModalViewController *v9;
  CSDismissableModalViewController *spotlightModalViewController;
  NSObject *v11;
  CSDismissableModalViewController *v12;
  void *v13;
  uint8_t v14[16];

  v7 = a4;
  v8 = a5;
  -[NSMutableArray addObject:](self->_exemptFromInactiveAppearanceParticipants, "addObject:", self->_mainPageContentViewController);
  if (!self->_spotlightModalViewController)
  {
    v9 = objc_alloc_init(CSDismissableModalViewController);
    spotlightModalViewController = self->_spotlightModalViewController;
    self->_spotlightModalViewController = v9;

    -[CSPresentationViewController presentContentViewController:animated:](self->_spotlightModalViewController, "presentContentViewController:animated:", v7, 0);
    SBLogDashBoard();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_1D0337000, v11, OS_LOG_TYPE_DEFAULT, "[ZStack-Participant] adding spotlight modal home affordance", v14, 2u);
    }

    v12 = self->_spotlightModalViewController;
    -[CSCoverSheetContextProviding modalHomeAffordanceController](self->_coverSheetContext, "modalHomeAffordanceController");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSDismissableModalViewController setHomeAffordanceController:](v12, "setHomeAffordanceController:", v13);

    -[CSDismissableModalViewController setDelegate:](self->_spotlightModalViewController, "setDelegate:", v7);
    -[CSCoverSheetViewController _presentModalViewController:animated:completion:](self, "_presentModalViewController:animated:completion:", self->_spotlightModalViewController, 0, v8);
  }

}

- (void)spotlightPresenterDidPresentSearch:(id)a3
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v4 = (void *)-[NSHashTable copy](self->_observers, "copy", a3, 0);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v11;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v11 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * v8);
        if ((objc_opt_respondsToSelector() & 1) != 0)
          objc_msgSend(v9, "coverSheetViewControllerDidPresentSearch:", self);
        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v6);
  }

}

- (void)spotlightPresenter:(id)a3 dismissDismissableModalViewController:(id)a4 animated:(BOOL)a5 completion:(id)a6
{
  _BOOL8 v7;
  id v10;
  id v11;
  id v12;
  CSDismissableModalViewController *spotlightModalViewController;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  id location;

  v7 = a5;
  v10 = a3;
  v11 = a4;
  v12 = a6;
  -[NSMutableArray removeObject:](self->_exemptFromInactiveAppearanceParticipants, "removeObject:", self->_mainPageContentViewController);
  objc_initWeak(&location, self);
  spotlightModalViewController = self->_spotlightModalViewController;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __107__CSCoverSheetViewController_spotlightPresenter_dismissDismissableModalViewController_animated_completion___block_invoke;
  v15[3] = &unk_1E8E2E618;
  v14 = v12;
  v16 = v14;
  objc_copyWeak(&v17, &location);
  -[CSCoverSheetViewController _dismissModalViewController:animated:completion:](self, "_dismissModalViewController:animated:completion:", spotlightModalViewController, v7, v15);
  objc_destroyWeak(&v17);

  objc_destroyWeak(&location);
}

void __107__CSCoverSheetViewController_spotlightPresenter_dismissDismissableModalViewController_animated_completion___block_invoke(uint64_t a1)
{
  uint64_t v2;
  _QWORD *WeakRetained;
  void *v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v4 = (void *)WeakRetained[214];
    WeakRetained[214] = 0;
    v5 = WeakRetained;

    WeakRetained = v5;
  }

}

- (void)spotlightPresenterDidDismissSearch:(id)a3
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v4 = (void *)-[NSHashTable copy](self->_observers, "copy", a3, 0);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v11;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v11 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * v8);
        if ((objc_opt_respondsToSelector() & 1) != 0)
          objc_msgSend(v9, "coverSheetViewControllerDidDismissSearch:", self);
        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v6);
  }

}

- (void)spotlightPresenterAddContentView:(id)a3
{
  id v3;

  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView", a3);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addContentView");

}

- (void)spotlightPresenterRemoveContentView:(id)a3
{
  id v3;

  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView", a3);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "removeContentView");

}

- (id)displayConfigurationForSpotlightPresenter:(id)a3
{
  void *v3;
  void *v4;

  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_sbDisplayConfiguration");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (void)searchGesture:(id)a3 startedShowing:(BOOL)a4
{
  id v5;
  void *v6;
  void *v7;
  id v8;

  if (a4)
  {
    v5 = a3;
    -[CSCoverSheetViewController delegate](self, "delegate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "coverSheetViewController:startSpotlightInteractiveGestureTransactionForGesture:", self, v5);

  }
  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView", a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addContentView");

  -[CSPoseidonViewController poseidonContainerViewController](self->_poseidonViewController, "poseidonContainerViewController");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setResignActive:", 1);

}

- (void)searchGesture:(id)a3 changedPercentComplete:(double)a4
{
  void *v6;
  double v7;
  id v8;

  v8 = a3;
  if (objc_msgSend(v8, "isTracking"))
  {
    if (self->_spotlightInteractiveGestureTransaction
      || (-[CSCoverSheetViewController delegate](self, "delegate"),
          v6 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend(v6, "coverSheetViewController:startSpotlightInteractiveGestureTransactionForGesture:", self, v8),
          v6,
          self->_spotlightInteractiveGestureTransaction))
    {
      objc_msgSend((id)objc_opt_class(), "searchHeaderHeight");
      -[SBSpotlightTransientOverlayInteractiveGestureTransaction updatePresentationWithProgress:translation:](self->_spotlightInteractiveGestureTransaction, "updatePresentationWithProgress:translation:", a4, v7 * a4);
    }
  }

}

- (void)searchGesture:(id)a3 endedGesture:(BOOL)a4
{
  SBSpotlightTransientOverlayInteractiveGestureTransaction *spotlightInteractiveGestureTransaction;

  spotlightInteractiveGestureTransaction = self->_spotlightInteractiveGestureTransaction;
  if (spotlightInteractiveGestureTransaction)
    -[SBSpotlightTransientOverlayInteractiveGestureTransaction endPresentation:](spotlightInteractiveGestureTransaction, "endPresentation:", a4);
}

- (void)searchGesture:(id)a3 completedShowing:(BOOL)a4
{
  void *v5;
  CSAppearance *localAppearance;
  void *v7;
  CSAppearance *v8;
  void *v9;
  CSAppearance *v10;
  void *v11;
  id v12;

  objc_msgSend(a3, "resetAnimated:", 0, a4);
  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "removeContentView");

  localAppearance = self->_localAppearance;
  -[CSAppearance componentForType:identifier:](localAppearance, "componentForType:identifier:", 1, CFSTR("Spotlight"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSAppearance removeComponent:](localAppearance, "removeComponent:", v7);

  v8 = self->_localAppearance;
  -[CSAppearance componentForType:identifier:](v8, "componentForType:identifier:", 11, CFSTR("Spotlight"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSAppearance removeComponent:](v8, "removeComponent:", v9);

  v10 = self->_localAppearance;
  -[CSAppearance componentForType:identifier:](v10, "componentForType:identifier:", 15, CFSTR("Spotlight"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSAppearance removeComponent:](v10, "removeComponent:", v11);

  -[CSPoseidonViewController poseidonContainerViewController](self->_poseidonViewController, "poseidonContainerViewController");
  v12 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setResignActive:", 0);

}

- (void)setSearchGesture:(id)a3
{
  id v5;

  objc_storeStrong((id *)&self->_searchGesture, a3);
  v5 = a3;
  objc_msgSend(v5, "addObserver:", self);

}

- (void)_setupSearchGesture
{
  id v3;

  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setSearchGesture:", self->_searchGesture);

}

- (BOOL)searchGestureShouldRecognize:(id)a3
{
  void *v4;
  uint64_t v5;
  void *v6;
  char v7;
  void *v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;

  objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "userInterfaceIdiom");

  if ((v5 & 0xFFFFFFFFFFFFFFFBLL) == 1 && _os_feature_enabled_impl())
  {
    -[CSMainPageContentViewController combinedListViewController](self->_mainPageContentViewController, "combinedListViewController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "isScrollingListContent");

  }
  else
  {
    v7 = 0;
  }
  if (-[CSCoverSheetViewController _isSpotlightBehaviorRestricted](self, "_isSpotlightBehaviorRestricted"))
    return 0;
  if ((v7 & 1) != 0)
    return 0;
  -[CSMainPageContentViewController combinedListViewController](self->_mainPageContentViewController, "combinedListViewController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "notificationListScrollView");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "contentOffset");
  v11 = v10;
  objc_msgSend(v9, "contentInset");
  v13 = fabs(v11 + v12);

  return v13 <= 1.0;
}

- (id)activityPickerViewControllerTransitionContainerView:(id)a3
{
  return (id)-[CSModalPresentationViewController view](self->_modalPresentationController, "view", a3);
}

- (id)sceneHostEnvironmentEntriesForBacklightSession
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  CSBackgroundContentViewController *backgroundContentViewController;
  void *v9;

  -[CSWidgetGridViewController sceneHostEnvironmentEntriesForBacklightSession](self->_complicationContainerViewController, "sceneHostEnvironmentEntriesForBacklightSession");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSInlineWidgetContainerViewController sceneHostEnvironmentEntriesForBacklightSession](self->_inlineComplicationContainerViewController, "sceneHostEnvironmentEntriesForBacklightSession");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSMainPageContentViewController combinedListViewController](self->_mainPageContentViewController, "combinedListViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "sceneHostEnvironmentEntriesForBacklightSession");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0C99E20], "setWithSet:", v3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "unionSet:", v6);
  objc_msgSend(v7, "unionSet:", v4);
  backgroundContentViewController = self->_backgroundContentViewController;
  if (backgroundContentViewController)
  {
    -[CSBackgroundContentViewController sceneHostEnvironmentEntriesForBacklightSession](backgroundContentViewController, "sceneHostEnvironmentEntriesForBacklightSession");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "unionSet:", v9);

  }
  return v7;
}

- (void)ambientPresentationController:(id)a3 didUpdatePresented:(BOOL)a4
{
  _BOOL8 v4;
  CSRemoteContentInlineViewController *remoteContentInlineViewController;
  void *v7;

  v4 = a4;
  if (self->_isAmbientOverlayPresented != a4)
  {
    self->_isAmbientOverlayPresented = a4;
    if (!a4)
    {
      remoteContentInlineViewController = self->_remoteContentInlineViewController;
      if (remoteContentInlineViewController)
      {
        -[CSRemoteContentInlineViewController hostViewController](remoteContentInlineViewController, "hostViewController", a3);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "hostDidChangeContentBounds");

        -[CSCoverSheetViewController _updateRemoteContentInlineHorizontalMargin](self, "_updateRemoteContentInlineHorizontalMargin");
      }
    }
  }
  -[CSNotificationDispatcher setBannerDestinationUnavailable:forReason:](self->_notificationDispatcher, "setBannerDestinationUnavailable:forReason:", v4, CFSTR("CSCoverSheetViewController-Ambient"));
  -[CSCoverSheetViewController _setSuppressChargingUIForAmbient:](self, "_setSuppressChargingUIForAmbient:", v4);
}

- (void)ambientPresentationControllerWillPossiblyPresent:(id)a3
{
  -[CSCoverSheetViewController _setSuppressChargingUIForAmbient:](self, "_setSuppressChargingUIForAmbient:", 1);
}

- (void)ambientPresentationControllerCancelledPossiblePresentation:(id)a3
{
  -[CSCoverSheetViewController _setSuppressChargingUIForAmbient:](self, "_setSuppressChargingUIForAmbient:", 0);
}

- (void)appProtectionSubjectsChanged:(id)a3 forSubscription:(id)a4
{
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  CSCoverSheetViewController *v9;

  v5 = a4;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __75__CSCoverSheetViewController_appProtectionSubjectsChanged_forSubscription___block_invoke;
  v7[3] = &unk_1E8E2DC00;
  v8 = v5;
  v9 = self;
  v6 = v5;
  dispatch_async(MEMORY[0x1E0C80D38], v7);

}

uint64_t __75__CSCoverSheetViewController_appProtectionSubjectsChanged_forSubscription___block_invoke(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1 + 32), "isEqual:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 1760));
  if ((_DWORD)result)
    return objc_msgSend(*(id *)(a1 + 40), "_validateAndUpdateInlineComplication");
  return result;
}

- (id)_windowsFromViewControllers:(id)a3
{
  void *v4;
  void *v5;
  void *v6;

  objc_msgSend(MEMORY[0x1E0C99E20], "set", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController viewIfLoaded](self, "viewIfLoaded");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "window");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
    objc_msgSend(v4, "addObject:", v6);

  return v4;
}

- (id)_activeViewControllers
{
  void *v3;
  void *v4;

  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController pageViewControllerAtIndex:](self, "pageViewControllerAtIndex:", self->_lastSettledPageIndex);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "participantState") == 2)
    objc_msgSend(v3, "addObject:", v4);
  if (-[CSPresentationViewController participantState](self->_modalPresentationController, "participantState") == 2)
    objc_msgSend(v3, "addObject:", self->_modalPresentationController);

  return v3;
}

- (BOOL)_gestureRecognizer:(id)a3 isLocatedOverHorizontalContentRegionInViewController:(id)a4
{
  id v5;
  id v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;
  CGPoint v28;
  CGRect v29;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = a4;
  objc_msgSend(v6, "view");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  _UISystemGestureLocationInView();
  v9 = v8;
  v11 = v10;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  objc_msgSend(v6, "presentationRegions", 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
  if (v13)
  {
    v14 = *(_QWORD *)v23;
    while (2)
    {
      for (i = 0; i != v13; ++i)
      {
        if (*(_QWORD *)v23 != v14)
          objc_enumerationMutation(v12);
        v16 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * i);
        if (objc_msgSend(v16, "isReservedForHorizontalScrolling"))
        {
          objc_msgSend(v16, "convertPoint:fromCoordinateSpace:", v7, v9, v11);
          v18 = v17;
          v20 = v19;
          objc_msgSend(v16, "extent");
          v28.x = v18;
          v28.y = v20;
          if (CGRectContainsPoint(v29, v28))
          {
            LOBYTE(v13) = 1;
            goto LABEL_12;
          }
        }
      }
      v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
      if (v13)
        continue;
      break;
    }
  }
LABEL_12:

  return v13;
}

- (BOOL)_overSlidingControlForLocation:(CGPoint)a3 inView:(id)a4
{
  void *v4;
  char isKindOfClass;

  objc_msgSend(a4, "hitTest:withEvent:", 0, a3.x, a3.y);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    isKindOfClass = 1;
  }
  else
  {
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
  }

  return isKindOfClass & 1;
}

- (BOOL)_isSourceForHorizontalScrolling:(id)a3
{
  id v4;
  id v5;
  BOOL v6;

  if (a3 == self)
    return 1;
  v4 = a3;
  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v6 = v5 == v4;

  return v6;
}

- (BOOL)_isSlideableContentOffsetOnscreen:(CGPoint)a3
{
  double y;
  void *v4;
  double v5;
  double v6;

  y = a3.y;
  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView", a3.x);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "bounds");
  v6 = v5;

  return y > -v6;
}

- (BOOL)_isSlideableContentOnscreen
{
  -[CSCoverSheetViewController _slideableContentOffset](self, "_slideableContentOffset");
  return -[CSCoverSheetViewController _isSlideableContentOffsetOnscreen:](self, "_isSlideableContentOffsetOnscreen:");
}

- (CGPoint)_slideableContentOffset
{
  void *v2;
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  CGPoint result;

  -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "componentForType:property:", 5, 2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "offset");
  v5 = v4;
  v7 = v6;

  v8 = v5;
  v9 = v7;
  result.y = v9;
  result.x = v8;
  return result;
}

- (BOOL)_isPageContentHidden
{
  void *v2;
  void *v3;
  char v4;

  -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "componentForType:property:", 4, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isHidden");

  return v4;
}

- (void)_beginAppearanceTransitionForPageViewControllersToVisible:(BOOL)a3 animated:(BOOL)a4
{
  void *v7;
  _QWORD v8[5];
  BOOL v9;
  BOOL v10;

  -[CSCoverSheetViewController _allowedPageViewControllers](self, "_allowedPageViewControllers");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __97__CSCoverSheetViewController__beginAppearanceTransitionForPageViewControllersToVisible_animated___block_invoke;
  v8[3] = &unk_1E8E2E640;
  v8[4] = self;
  v9 = a3;
  v10 = a4;
  objc_msgSend(v7, "enumerateObjectsUsingBlock:", v8);

}

uint64_t __97__CSCoverSheetViewController__beginAppearanceTransitionForPageViewControllersToVisible_animated___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _BOOL8 v5;

  v4 = *(_QWORD **)(a1 + 32);
  v5 = v4[245] == a3 && *(_BYTE *)(a1 + 40) != 0;
  return objc_msgSend(v4, "bs_beginAppearanceTransitionForChildViewController:toVisible:animated:", a2, v5, *(unsigned __int8 *)(a1 + 41));
}

- (void)_endAppearanceTransitionForPageViewControllersToVisible:(BOOL)a3
{
  void *v5;
  _QWORD v6[5];
  BOOL v7;

  -[CSCoverSheetViewController _allowedPageViewControllers](self, "_allowedPageViewControllers");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __86__CSCoverSheetViewController__endAppearanceTransitionForPageViewControllersToVisible___block_invoke;
  v6[3] = &unk_1E8E2E668;
  v6[4] = self;
  v7 = a3;
  objc_msgSend(v5, "enumerateObjectsUsingBlock:", v6);

}

void __86__CSCoverSheetViewController__endAppearanceTransitionForPageViewControllersToVisible___block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  _QWORD *v3;
  _BOOL8 v4;
  id v5;

  v3 = *(_QWORD **)(a1 + 32);
  v4 = v3[245] == a3 && *(_BYTE *)(a1 + 40) != 0;
  v5 = a2;
  objc_msgSend(v3, "bs_endAppearanceTransitionForChildViewController:toVisible:", v5, v4);
  objc_msgSend(v5, "didTransitionToVisible:", v4);

}

- (double)_dateViewAlphaForCurrentWakeState
{
  void *v2;
  double v3;
  double v4;

  objc_msgSend(MEMORY[0x1E0DA9F60], "rootSettings");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "awakeDateAlpha");
  v4 = v3;

  return v4;
}

- (BOOL)_isKnownTransitionConflictFrom:(id)a3 to:(id)a4
{
  id v5;
  id v6;
  int v7;
  BOOL v8;

  v5 = a4;
  v6 = a3;
  v7 = objc_msgSend(v6, "isMemberOfClass:", objc_opt_class());

  v8 = v7 && (objc_msgSend(v5, "isMemberOfClass:", objc_opt_class()) & 1) != 0;
  return v8;
}

- (BOOL)_canPresentSwipeDismissableModal
{
  void *v3;
  void *v4;
  BOOL v5;

  -[CSCoverSheetViewController visiblePageViewController](self, "visiblePageViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
    return 0;
  -[CSCoverSheetViewController modalPresentationController](self, "modalPresentationController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "_appearState") == 0;

  return v5;
}

- (void)_setPageViewControllers:(id)a3
{
  NSArray *v5;
  NSArray *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = (NSArray *)a3;
  if (self->_pageViewControllers != v5)
  {
    objc_storeStrong((id *)&self->_pageViewControllers, a3);
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v6 = self->_pageViewControllers;
    v7 = -[NSArray countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v12 != v9)
            objc_enumerationMutation(v6);
          objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * i), "setPresenter:", self, (_QWORD)v11);
        }
        v8 = -[NSArray countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v8);
    }

  }
}

- (void)_setMainPageContentViewController:(id)a3
{
  CSMainPageContentViewController *v5;
  CSMainPageContentViewController **p_mainPageContentViewController;
  CSMainPageContentViewController *mainPageContentViewController;
  void *v8;
  CSMainPageContentViewController *v9;
  void *v10;
  CSMainPageContentViewController *v11;
  void *v12;
  CSMainPageContentViewController *v13;
  id WeakRetained;
  CSMainPageContentViewController *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  CSMainPageContentViewController *v29;

  v5 = (CSMainPageContentViewController *)a3;
  p_mainPageContentViewController = &self->_mainPageContentViewController;
  mainPageContentViewController = self->_mainPageContentViewController;
  if (mainPageContentViewController != v5)
  {
    v29 = v5;
    -[CSMainPageContentViewController combinedListViewController](mainPageContentViewController, "combinedListViewController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSCoverSheetViewController removeCoverSheetObserver:](self, "removeCoverSheetObserver:", v8);

    objc_storeStrong((id *)&self->_mainPageContentViewController, a3);
    -[CSMainPageContentViewController setUserPresenceMonitor:](*p_mainPageContentViewController, "setUserPresenceMonitor:", self->_userPresenceMonitor);
    v9 = *p_mainPageContentViewController;
    -[CSCoverSheetContextProviding touchEnvironmentStatusProvider](self->_coverSheetContext, "touchEnvironmentStatusProvider");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSMainPageContentViewController setTouchEnvironmentStatusProvider:](v9, "setTouchEnvironmentStatusProvider:", v10);

    v11 = *p_mainPageContentViewController;
    -[CSCoverSheetContextProviding userSessionController](self->_coverSheetContext, "userSessionController");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSMainPageContentViewController setUserSessionController:](v11, "setUserSessionController:", v12);

    v13 = *p_mainPageContentViewController;
    WeakRetained = objc_loadWeakRetained((id *)&self->_wallpaperColorProvider);
    -[CSMainPageContentViewController setWallpaperColorProvider:](v13, "setWallpaperColorProvider:", WeakRetained);

    v15 = *p_mainPageContentViewController;
    -[CSCoverSheetContextProviding wallpaperProvider](self->_coverSheetContext, "wallpaperProvider");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSMainPageContentViewController setWallpaperProvider:](v15, "setWallpaperProvider:", v16);

    -[CSMainPageContentViewController setMediaControlsObserver:](*p_mainPageContentViewController, "setMediaControlsObserver:", self);
    -[CSMainPageContentViewController setNotificationObserver:](*p_mainPageContentViewController, "setNotificationObserver:", self);
    -[CSMainPageContentViewController setDelegate:](*p_mainPageContentViewController, "setDelegate:", self);
    -[CSMainPageContentViewController combinedListViewController](*p_mainPageContentViewController, "combinedListViewController");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSCoverSheetContextProviding applicationInformer](self->_coverSheetContext, "applicationInformer");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "setApplicationInformer:", v18);

    -[CSCoverSheetContextProviding authenticationStatusProvider](self->_coverSheetContext, "authenticationStatusProvider");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "setAuthenticationStatusProvider:", v19);

    -[CSCoverSheetContextProviding homeAffordanceController](self->_coverSheetContext, "homeAffordanceController");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "setHomeAffordanceController:", v20);

    -[CSCoverSheetContextProviding platterHomeGestureManager](self->_coverSheetContext, "platterHomeGestureManager");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "setPlatterHomeGestureManager:", v21);

    -[CSCoverSheetContextProviding notificationPresenter](self->_coverSheetContext, "notificationPresenter");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "setNotificationPresenter:", v22);

    -[CSCoverSheetContextProviding unlockRequester](self->_coverSheetContext, "unlockRequester");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "setUnlockRequester:", v23);

    -[CSCoverSheetContextProviding contentActionProvider](self->_coverSheetContext, "contentActionProvider");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "setContentActionProvider:", v24);

    -[CSCoverSheetContextProviding proximitySensorProvider](self->_coverSheetContext, "proximitySensorProvider");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "setProximitySensorProvider:", v25);

    -[CSCoverSheetContextProviding deviceOrientationProvider](self->_coverSheetContext, "deviceOrientationProvider");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "setDeviceOrientationProvider:", v26);

    objc_msgSend(v17, "setRemoteContentInlineProvider:", self);
    objc_msgSend(v17, "setCoverSheetViewPresenting:", self);
    objc_msgSend(v17, "setNotificationObserver:", self);
    if (-[CSCoverSheetViewController isInScreenOffMode](self, "isInScreenOffMode"))
      v27 = 25;
    else
      v27 = 24;
    +[CSEvent eventWithType:](CSEvent, "eventWithType:", v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "handleEvent:", v28);
    -[CSCoverSheetViewController addCoverSheetObserver:](self, "addCoverSheetObserver:", v17);

    v5 = v29;
  }

}

- (void)setCurrentTransitionSource:(id)a3
{
  CSCoverSheetViewTransitionSource *v5;
  CSCoverSheetViewTransitionSource *v6;

  v5 = (CSCoverSheetViewTransitionSource *)a3;
  if (self->_currentTransitionSource != v5)
  {
    v6 = v5;
    objc_storeStrong((id *)&self->_currentTransitionSource, a3);
    -[CSCoverSheetViewController _setLockOrientationWhileTransitioning:](self, "_setLockOrientationWhileTransitioning:", self->_currentTransitionSource != 0);
    v5 = v6;
  }

}

- (void)_setLockOrientationWhileTransitioning:(BOOL)a3
{
  if (self->_lockOrientationWhileTransitioning != a3)
  {
    self->_lockOrientationWhileTransitioning = a3;
    -[CSCoverSheetViewController setNeedsUpdateOfSupportedInterfaceOrientations](self, "setNeedsUpdateOfSupportedInterfaceOrientations");
  }
}

- (void)_setSuppressChargingUIForAmbient:(BOOL)a3
{
  NSObject *v5;
  _BOOL4 suppressChargingUIForAmbient;
  _DWORD v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (self->_suppressChargingUIForAmbient != a3)
  {
    SBLogDashBoard();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      suppressChargingUIForAmbient = self->_suppressChargingUIForAmbient;
      v7[0] = 67109120;
      v7[1] = suppressChargingUIForAmbient;
      _os_log_impl(&dword_1D0337000, v5, OS_LOG_TYPE_DEFAULT, "Updating charging UI suppression for ambient presentation [ suppressed : %{BOOL}d ]", (uint8_t *)v7, 8u);
    }

    self->_suppressChargingUIForAmbient = a3;
  }
}

- (void)activatePage:(unint64_t)a3 animated:(BOOL)a4 withCompletion:(id)a5
{
  _BOOL8 v5;
  void (**v8)(_QWORD);
  void *v9;
  void (**v10)(_QWORD);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  void *v14;
  CSCoverSheetViewController *v15;
  void (**v16)(_QWORD);
  unint64_t v17;
  BOOL v18;

  v5 = a4;
  v8 = (void (**)(_QWORD))a5;
  v9 = v8;
  if (a3 == 0x7FFFFFFFFFFFFFFFLL)
  {
    if (v8)
      v8[2](v8);
  }
  else
  {
    v11 = MEMORY[0x1E0C809B0];
    v12 = 3221225472;
    v13 = __67__CSCoverSheetViewController_activatePage_animated_withCompletion___block_invoke;
    v14 = &unk_1E8E2E310;
    v15 = self;
    v17 = a3;
    v18 = v5;
    v16 = v8;
    v10 = (void (**)(_QWORD))MEMORY[0x1D17E1614](&v11);
    if (-[CSCoverSheetViewController isPasscodeLockVisible](self, "isPasscodeLockVisible", v11, v12, v13, v14, v15))
      -[CSCoverSheetViewController setPasscodeLockVisible:animated:completion:](self, "setPasscodeLockVisible:animated:completion:", 0, v5, v10);
    else
      v10[2](v10);

  }
}

void __67__CSCoverSheetViewController_activatePage_animated_withCompletion___block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "coverSheetView");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "scrollToPageAtIndex:animated:withCompletion:", *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 40));

}

- (id)visiblePageViewController
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "scrollView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "visiblePageRange");
  v7 = v6;

  if (v7 == 1)
  {
    -[CSCoverSheetViewController pageViewControllerAtIndex:](self, "pageViewControllerAtIndex:", v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v8 = 0;
  }
  return v8;
}

- (id)pageViewControllerAtIndex:(unint64_t)a3
{
  void *v4;
  void *v5;

  -[CSCoverSheetViewController _allowedPageViewControllers](self, "_allowedPageViewControllers");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "count") <= a3)
  {
    v5 = 0;
  }
  else
  {
    objc_msgSend(v4, "objectAtIndex:", a3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v5;
}

- (void)_loadViewsForRestrictedPagesIfPossible
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  char v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  -[CSCoverSheetViewController visiblePageViewController](self, "visiblePageViewController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController _eligiblePageViewControllers](self, "_eligiblePageViewControllers");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController _allowedPageViewControllers](self, "_allowedPageViewControllers");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "arrayByExcludingObjectsInArray:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v8 = v7;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v36;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v36 != v11)
          objc_enumerationMutation(v8);
        -[CSCoverSheetViewController _addVisiblePageViewController:](self, "_addVisiblePageViewController:", *(_QWORD *)(*((_QWORD *)&v35 + 1) + 8 * v12++));
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
    }
    while (v10);
  }

  -[CSCoverSheetViewController _allowedPageViewControllers](self, "_allowedPageViewControllers");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "arrayByExcludingObjectsInArray:", v5);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v15 = v14;
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
  if (v16)
  {
    v17 = v16;
    v18 = *(_QWORD *)v32;
    do
    {
      v19 = 0;
      do
      {
        if (*(_QWORD *)v32 != v18)
          objc_enumerationMutation(v15);
        -[CSCoverSheetViewController _removeAllowedPageViewController:](self, "_removeAllowedPageViewController:", *(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * v19++), (_QWORD)v31);
      }
      while (v17 != v19);
      v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
    }
    while (v17);
  }

  -[CSCoverSheetViewController _updateVisibilityForPageViewControllersWithVisiblePageViewController:](self, "_updateVisibilityForPageViewControllersWithVisiblePageViewController:", v4);
  -[CSCoverSheetViewController _allowedPageViewControllers](self, "_allowedPageViewControllers");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController mainPageContentViewController](self, "mainPageContentViewController");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = objc_msgSend(v20, "containsObject:", v21);

  if ((v22 & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("CSCoverSheetViewController.m"), 6005, CFSTR("The main page should always be visible"));

  }
  -[CSCoverSheetViewController mainPageContentViewController](self, "mainPageContentViewController", (_QWORD)v31);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "combinedListViewController");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "viewIfLoaded");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "setReferenceViewForBelowPresentationContext:", v26);

  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "scrollView");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "viewIfLoaded");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "bringSubviewToFront:", v29);

}

- (void)_addVisiblePageViewController:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  void *v13;
  unsigned int v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  NSObject *v20;
  void *v21;
  int v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  SBLogDashBoard();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    -[CSCoverSheetViewController _allowedPageViewControllers](self, "_allowedPageViewControllers");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = 138543362;
    v23 = v6;
    _os_log_impl(&dword_1D0337000, v5, OS_LOG_TYPE_DEFAULT, "Adding visible page view controller, current allowed page view controllers: %{public}@", (uint8_t *)&v22, 0xCu);

  }
  -[CSCoverSheetViewController pageViewControllers](self, "pageViewControllers");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "indexOfObject:", v4);

  v9 = 0;
  if (v8)
  {
    for (i = 0; i != v8; ++i)
    {
      -[CSCoverSheetViewController _allowedPageViewControllers](self, "_allowedPageViewControllers");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      -[CSCoverSheetViewController pageViewControllers](self, "pageViewControllers");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "objectAtIndex:", i);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v11, "containsObject:", v13);

      v9 += v14;
    }
  }
  v15 = (void *)MEMORY[0x1E0C99DE8];
  -[CSCoverSheetViewController _allowedPageViewControllers](self, "_allowedPageViewControllers");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "arrayWithArray:", v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v17, "insertObject:atIndex:", v4, v9);
  -[CSCoverSheetViewController _setAllowedPageViewControllers:](self, "_setAllowedPageViewControllers:", v17);
  -[CSCoverSheetViewController addChildViewController:](self, "addChildViewController:", v4);
  -[CSCoverSheetViewController view](self, "view");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "view");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "addSubview:", v19);

  objc_msgSend(v4, "didMoveToParentViewController:", self);
  objc_msgSend(v4, "setCoverSheetViewController:", self);
  objc_msgSend(v4, "setLayoutStrategy:", self->_layoutStrategy);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    -[NSHashTable addObject:](self->_applicationHosters, "addObject:", v4);
  SBLogDashBoard();
  v20 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    -[CSCoverSheetViewController _allowedPageViewControllers](self, "_allowedPageViewControllers");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = 138543362;
    v23 = v21;
    _os_log_impl(&dword_1D0337000, v20, OS_LOG_TYPE_DEFAULT, "Finished adding visible page view controller, current allowed page view controllers: %{public}@", (uint8_t *)&v22, 0xCu);

  }
}

- (void)_removeAllowedPageViewController:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  int v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  SBLogDashBoard();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    -[CSCoverSheetViewController _allowedPageViewControllers](self, "_allowedPageViewControllers");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 138543362;
    v15 = v6;
    _os_log_impl(&dword_1D0337000, v5, OS_LOG_TYPE_DEFAULT, "Removing allowed page view controller, current allowed page view controllers: %{public}@", (uint8_t *)&v14, 0xCu);

  }
  -[CSCoverSheetViewController _allowedPageViewControllers](self, "_allowedPageViewControllers");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "indexOfObject:", v4);

  if (v8 == 0x7FFFFFFFFFFFFFFFLL)
  {
    SBLogDashBoard();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      -[CSCoverSheetViewController _removeAllowedPageViewController:].cold.1(self, v9);
  }
  else
  {
    v10 = (void *)MEMORY[0x1E0C99DE8];
    -[CSCoverSheetViewController _allowedPageViewControllers](self, "_allowedPageViewControllers");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "arrayWithArray:", v11);
    v9 = objc_claimAutoreleasedReturnValue();

    -[NSObject removeObjectAtIndex:](v9, "removeObjectAtIndex:", v8);
    -[CSCoverSheetViewController _setAllowedPageViewControllers:](self, "_setAllowedPageViewControllers:", v9);
    -[CSCoverSheetViewController bs_removeChildViewController:](self, "bs_removeChildViewController:", v4);
    objc_msgSend(v4, "setCoverSheetViewController:", 0);
    objc_msgSend(v4, "setLayoutStrategy:", 0);
    if ((objc_opt_respondsToSelector() & 1) != 0)
      -[NSHashTable removeObject:](self->_applicationHosters, "removeObject:", v4);
    SBLogDashBoard();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      -[CSCoverSheetViewController _allowedPageViewControllers](self, "_allowedPageViewControllers");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543362;
      v15 = v13;
      _os_log_impl(&dword_1D0337000, v12, OS_LOG_TYPE_DEFAULT, "Finished removing allowed page view controller, current allowed page view controllers: %{public}@", (uint8_t *)&v14, 0xCu);

    }
  }

}

- (unint64_t)_pageCapabilities
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t i;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  -[CSCoverSheetViewController pageViewControllers](self, "pageViewControllers", 0, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = 0;
    v6 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v2);
        v5 |= objc_msgSend((id)objc_opt_class(), "requiredCapabilities");
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

- (id)_eligiblePageViewControllers
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  uint64_t v30;
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v20 = (id)objc_claimAutoreleasedReturnValue();
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  -[CSCoverSheetViewController pageViewControllers](self, "pageViewControllers");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v21, v31, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v22;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v22 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * v7);
        v9 = objc_msgSend((id)objc_opt_class(), "isAvailableForConfiguration");
        v10 = objc_msgSend((id)objc_opt_class(), "requiredCapabilities");
        if (v9
          && (v11 = v10,
              -[CSCoverSheetViewController activeBehavior](self, "activeBehavior"),
              v12 = (void *)objc_claimAutoreleasedReturnValue(),
              v13 = objc_msgSend(v12, "restrictedCapabilities") & v11,
              v12,
              !v13))
        {
          objc_msgSend(v20, "addObject:", v8);
        }
        else
        {
          SBLogDashBoard();
          v14 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            objc_msgSend(v8, "pageRole");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            -[CSCoverSheetViewController activeBehavior](self, "activeBehavior");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            v17 = objc_msgSend(v16, "restrictedCapabilities");
            *(_DWORD *)buf = 138412802;
            v26 = v15;
            v27 = 1024;
            v28 = v9;
            v29 = 2048;
            v30 = v17;
            _os_log_impl(&dword_1D0337000, v14, OS_LOG_TYPE_DEFAULT, "Not including page: %@, visibleRegardless: %d, restrictedCapabilities: %lu", buf, 0x1Cu);

          }
        }
        ++v7;
      }
      while (v5 != v7);
      v18 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v21, v31, 16);
      v5 = v18;
    }
    while (v18);
  }

  return v20;
}

- (void)_updateVisibilityForPageViewControllersWithVisiblePageViewController:(id)a3
{
  id v5;
  void *v6;
  void *v7;
  unint64_t v8;
  NSObject *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  double v19[4];
  uint8_t buf[16];
  __int128 v21;
  __int128 v22;
  _QWORD v23[4];
  id v24;

  v5 = a3;
  if (-[CSCoverSheetViewController isTransitioning](self, "isTransitioning"))
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Invalid condition not satisfying: %@"), CFSTR("![self isTransitioning]"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      -[CSCoverSheetViewController _updateVisibilityForPageViewControllersWithVisiblePageViewController:].cold.1(a2);
LABEL_14:
    objc_msgSend(objc_retainAutorelease(v15), "UTF8String");
    _bs_set_crash_log_message();
    __break(0);
    JUMPOUT(0x1D037E1B0);
  }
  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController _allowedPageViewControllers](self, "_allowedPageViewControllers");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "indexOfObject:", v5);
  if (v8 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v8 = -[CSCoverSheetViewController _indexOfMainPage](self, "_indexOfMainPage");
    if (v8 == 0x7FFFFFFFFFFFFFFFLL)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Invalid condition not satisfying: %@"), CFSTR("newPageIndex != NSNotFound"));
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        -[CSCoverSheetViewController _updateVisibilityForPageViewControllersWithVisiblePageViewController:].cold.2(a2);
      goto LABEL_14;
    }
  }
  -[CSCoverSheetViewController _setLastSettledPageIndex:](self, "_setLastSettledPageIndex:", v8);
  SBLogDashBoard();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1D0337000, v9, OS_LOG_TYPE_DEFAULT, "Updating page visibility...", buf, 2u);
  }

  v10 = (void *)objc_opt_new();
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3221225472;
  v23[2] = __99__CSCoverSheetViewController__updateVisibilityForPageViewControllersWithVisiblePageViewController___block_invoke;
  v23[3] = &unk_1E8E2E690;
  v11 = v10;
  v24 = v11;
  objc_msgSend(v7, "enumerateObjectsUsingBlock:", v23);
  objc_msgSend(v6, "setPageViews:", v11);
  -[CSPageViewController view](self->_mainPageContentViewController, "view");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setMainPageView:", v12);

  objc_msgSend(v6, "scrollToPageAtIndex:animated:withCompletion:", v8, 0, 0);
  -[CSFixedFooterViewController fixedFooterView](self->_fixedFooterViewController, "fixedFooterView");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "pageControl");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setCameraPageIndex:", -[CSCoverSheetViewController _indexOfCameraPage](self, "_indexOfCameraPage"));

  if (!-[CSCoverSheetViewController isTransitioning](self, "isTransitioning"))
  {
    v21 = 0u;
    v22 = 0u;
    *(_OWORD *)buf = 0u;
    v19[0] = (double)v8;
    v19[2] = (double)v8;
    *(_QWORD *)&v19[1] = 1;
    *(_QWORD *)&v19[3] = 1;
    -[CSCoverSheetViewController transitionSource:willBeginWithType:](self, "transitionSource:willBeginWithType:", self, 2, CSCoverSheetTransitionContextMake((uint64_t)v19, 1, (uint64_t)buf).n128_f64[0]);
    v16 = *(_OWORD *)buf;
    v17 = v21;
    v18 = v22;
    -[CSCoverSheetViewController transitionSource:didUpdateTransitionWithContext:](self, "transitionSource:didUpdateTransitionWithContext:", self, &v16);
    v16 = *(_OWORD *)buf;
    v17 = v21;
    v18 = v22;
    -[CSCoverSheetViewController transitionSource:didEndWithContext:](self, "transitionSource:didEndWithContext:", self, &v16);
  }

}

void __99__CSCoverSheetViewController__updateVisibilityForPageViewControllersWithVisiblePageViewController___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  objc_class *v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = *(void **)(a1 + 32);
  objc_msgSend(v3, "view");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v5);

  SBLogDashBoard();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = (objc_class *)objc_opt_class();
    NSStringFromClass(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = 138412290;
    v10 = v8;
    _os_log_impl(&dword_1D0337000, v6, OS_LOG_TYPE_DEFAULT, "Allowed view controller: %@", (uint8_t *)&v9, 0xCu);

  }
}

- (unint64_t)_indexOfTodayPage
{
  return -[CSCoverSheetViewController _indexOfPageViewControllerForRole:](self, "_indexOfPageViewControllerForRole:", CFSTR("CSPageViewControllerRoleToday"));
}

- (unint64_t)_indexOfMainPage
{
  void *v3;
  void *v4;
  unint64_t v5;

  -[CSCoverSheetViewController _allowedPageViewControllers](self, "_allowedPageViewControllers");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController mainPageContentViewController](self, "mainPageContentViewController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "indexOfObject:", v4);

  return v5;
}

- (unint64_t)_indexOfCameraPage
{
  void *v3;
  char v4;

  -[CSCoverSheetViewController activeBehavior](self, "activeBehavior");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "areRestrictedCapabilities:", 4);

  if ((v4 & 1) != 0)
    return 0x7FFFFFFFFFFFFFFFLL;
  else
    return -[CSCoverSheetViewController _indexOfPageViewControllerForRole:](self, "_indexOfPageViewControllerForRole:", CFSTR("CSPageViewControllerRoleCamera"));
}

- (unint64_t)_indexOfPageViewControllerForRole:(id)a3
{
  id v4;
  void *v5;
  id v6;
  unint64_t v7;
  _QWORD v9[4];
  id v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a3;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0x7FFFFFFFFFFFFFFFLL;
  -[CSCoverSheetViewController _allowedPageViewControllers](self, "_allowedPageViewControllers");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __64__CSCoverSheetViewController__indexOfPageViewControllerForRole___block_invoke;
  v9[3] = &unk_1E8E2E6B8;
  v6 = v4;
  v10 = v6;
  v11 = &v12;
  objc_msgSend(v5, "enumerateObjectsUsingBlock:", v9);

  v7 = v13[3];
  _Block_object_dispose(&v12, 8);

  return v7;
}

void __64__CSCoverSheetViewController__indexOfPageViewControllerForRole___block_invoke(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v7;
  int v8;
  id v9;

  v9 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v9, "pageRole");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "isEqualToString:", *(_QWORD *)(a1 + 32));

    if (v8)
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a3;
      *a4 = 1;
    }
  }

}

- (BOOL)_handleEventType:(int64_t)a3
{
  void *v5;
  BOOL v6;

  if (CSEventIsButtonType(a3)
    && !CSCoverSheetEventIsVolumeOrHeadsetButtonType(a3)
    && (-[CSCoverSheetViewController isInScreenOffMode](self, "isInScreenOffMode")
     || -[CSCoverSheetViewController _isWakeAnimationInProgress](self, "_isWakeAnimationInProgress")
     || -[CSCoverSheetViewController isTransitioningInteractively](self, "isTransitioningInteractively")))
  {
    return 0;
  }
  +[CSEvent eventWithType:](CSEvent, "eventWithType:", a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[CSCoverSheetViewController _handleEvent:](self, "_handleEvent:", v5);

  return v6;
}

- (BOOL)_handleEvent:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  int v7;
  void *v8;
  BOOL v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  int v29;
  void *v30;
  void *v31;
  double v32;
  NSObject *v33;
  void *v34;
  void *v35;
  char v36;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[128];
  uint8_t v47[128];
  uint8_t buf[4];
  void *v49;
  __int16 v50;
  id v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if ((objc_msgSend(v4, "isStateless") & 1) == 0
    && -[CSCoverSheetViewController participantState](self, "participantState") != 2)
  {
LABEL_44:
    v36 = 0;
    goto LABEL_45;
  }
  SBLogDashBoard();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    _SBFLoggingMethodProem();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412546;
    v49 = v6;
    v50 = 2112;
    v51 = v4;
    _os_log_impl(&dword_1D0337000, v5, OS_LOG_TYPE_DEFAULT, "%@ Sending event: %@", buf, 0x16u);

  }
  if (!objc_msgSend(v4, "isConsumable"))
  {
    -[CSCoverSheetViewController _updateNotificationClearingTriggerForEvent:](self, "_updateNotificationClearingTriggerForEvent:", v4);
    -[CSScrollGestureController handleEvent:](self->_scrollGestureController, "handleEvent:", v4);
    -[CSPresentationViewController handleEvent:](self->_modalPresentationController, "handleEvent:", v4);
    -[CSFixedFooterViewController handleEvent:](self->_fixedFooterViewController, "handleEvent:", v4);
    -[CSQuickActionsViewController handleEvent:](self->_quickActionsViewController, "handleEvent:", v4);
    -[CSTeachableMomentsContainerViewController handleEvent:](self->_teachableMomentsContainerViewController, "handleEvent:", v4);
    -[CSProudLockViewController handleEvent:](self->_proudLockViewController, "handleEvent:", v4);
    -[CSPoseidonViewController handleEvent:](self->_poseidonViewController, "handleEvent:", v4);
    -[CSUserPresenceMonitor handleEvent:](self->_userPresenceMonitor, "handleEvent:", v4);
    -[CSFaceOcclusionMonitor handleEvent:](self->_faceOcclusionMonitor, "handleEvent:", v4);
    -[CSPosterSwitcherActivationManager handleEvent:](self->_posterSwitcherActivationManager, "handleEvent:", v4);
    -[CSCoverSheetViewControllerBase handleEvent:](self->_backgroundContentViewController, "handleEvent:", v4);
    if (-[CSCoverSheetViewController _isPresentingPosterSwitcher](self, "_isPresentingPosterSwitcher"))
    {
      -[CSCoverSheetViewControllerBase coverSheetIdentifier](self->_posterSwitcherViewController, "coverSheetIdentifier");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = -[CSCoverSheetViewController _isPresentingModalViewControllerWithIdentifier:](self, "_isPresentingModalViewControllerWithIdentifier:", v8);

      if (!v9)
        -[CSPosterSwitcherViewController handleEvent:](self->_posterSwitcherViewController, "handleEvent:", v4);
    }
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    -[CSCoverSheetViewController pageViewControllers](self, "pageViewControllers");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v42, v47, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v43;
      do
      {
        for (i = 0; i != v12; ++i)
        {
          if (*(_QWORD *)v43 != v13)
            objc_enumerationMutation(v10);
          v15 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * i);
          v16 = (void *)MEMORY[0x1D17E144C]();
          objc_msgSend(v15, "handleEvent:", v4);
          objc_autoreleasePoolPop(v16);
        }
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v42, v47, 16);
      }
      while (v12);
    }

    v17 = (void *)-[NSHashTable copy](self->_externalEventHandlers, "copy");
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v18 = v17;
    v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v38, v46, 16);
    if (v19)
    {
      v20 = v19;
      v21 = *(_QWORD *)v39;
      do
      {
        v22 = 0;
        do
        {
          if (*(_QWORD *)v39 != v21)
            objc_enumerationMutation(v18);
          v23 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * v22);
          v24 = (void *)MEMORY[0x1D17E144C](v19);
          if (objc_msgSend(v23, "participantState", (_QWORD)v38) == 2)
            objc_msgSend(v23, "handleEvent:", v4);
          objc_autoreleasePoolPop(v24);
          ++v22;
        }
        while (v20 != v22);
        v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v38, v46, 16);
        v20 = v19;
      }
      while (v19);
    }

    SBLogDashBoard();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      _SBFLoggingMethodProem();
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v49 = v26;
      _os_log_impl(&dword_1D0337000, v25, OS_LOG_TYPE_INFO, "%@ Event delivered.", buf, 0xCu);

    }
    goto LABEL_44;
  }
  if (-[CSPresentationViewController participantState](self->_modalPresentationController, "participantState") == 2)
  {
    if (-[CSPresentationViewController handleEvent:](self->_modalPresentationController, "handleEvent:", v4))
    {
LABEL_8:
      v7 = 1;
      goto LABEL_40;
    }
  }
  else
  {
    -[CSCoverSheetViewController pageViewControllerAtIndex:](self, "pageViewControllerAtIndex:", self->_lastSettledPageIndex);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = v27;
    if (v27)
      v29 = objc_msgSend(v27, "handleEvent:", v4);
    else
      v29 = 0;

    if (v29)
      goto LABEL_8;
  }
  -[CSCoverSheetViewController overlayControllerIfExists](self, "overlayControllerIfExists");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = v30;
  if (v30 && (objc_msgSend(v30, "presentationProgress"), v32 > 0.0))
    v7 = objc_msgSend(v31, "handleEvent:", v4);
  else
    v7 = 0;

LABEL_40:
  SBLogDashBoard();
  v33 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
  {
    _SBFLoggingMethodProem();
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    NSStringFromBOOL();
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412546;
    v49 = v34;
    v50 = 2112;
    v51 = v35;
    _os_log_impl(&dword_1D0337000, v33, OS_LOG_TYPE_INFO, "%@ Event handled = %@", buf, 0x16u);

  }
  if (!v7)
    goto LABEL_44;
  v36 = objc_msgSend(v4, "isConsumable");
LABEL_45:

  return v36;
}

- (void)_updateNotificationClearingTriggerForEvent:(id)a3
{
  if (objc_msgSend(a3, "type") == 37)
    -[CSNotificationClearingTrigger setDidDisableCarDNDUntilEndOfDrive:](self->_notificationClearingTrigger, "setDidDisableCarDNDUntilEndOfDrive:", 1);
}

- (void)_updateLocalAppearanceForRequester:(id)a3 animationSettings:(id)a4 actions:(id)a5 completion:(id)a6
{
  id v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  _QWORD v17[4];
  id v18;
  _QWORD v19[4];
  id v20;
  CSCoverSheetViewController *v21;
  id v22;

  v10 = a3;
  v11 = a5;
  v12 = a6;
  v13 = (void *)MEMORY[0x1E0D01908];
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __102__CSCoverSheetViewController__updateLocalAppearanceForRequester_animationSettings_actions_completion___block_invoke;
  v19[3] = &unk_1E8E2E6E0;
  v21 = self;
  v22 = v11;
  v20 = v10;
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = __102__CSCoverSheetViewController__updateLocalAppearanceForRequester_animationSettings_actions_completion___block_invoke_2;
  v17[3] = &unk_1E8E2DFA8;
  v18 = v12;
  v14 = v12;
  v15 = v10;
  v16 = v11;
  objc_msgSend(v13, "animateWithSettings:actions:completion:", a4, v19, v17);

}

uint64_t __102__CSCoverSheetViewController__updateLocalAppearanceForRequester_animationSettings_actions_completion___block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    (*(void (**)(uint64_t))(v2 + 16))(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          v8 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
          objc_msgSend(v8, "setIdentifier:", *(_QWORD *)(a1 + 32));
          objc_msgSend(*(id *)(a1 + 40), "localAppearance");
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "addComponent:", v8);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

  }
  return objc_msgSend(*(id *)(a1 + 40), "_updateActiveAppearanceForReason:", *(_QWORD *)(a1 + 32));
}

uint64_t __102__CSCoverSheetViewController__updateLocalAppearanceForRequester_animationSettings_actions_completion___block_invoke_2(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

- (id)_behaviorForParticipant:(id)a3
{
  id v3;
  void *v4;

  v3 = a3;
  if (objc_msgSend(v3, "participantState") == 2)
  {
    +[CSBehavior behaviorForProvider:](CSBehavior, "behaviorForProvider:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

- (id)_appearanceForParticipant:(id)a3
{
  id v3;
  void *v4;

  v3 = a3;
  if (objc_msgSend(v3, "participantState") == 2)
  {
    +[CSAppearance appearanceForProvider:](CSAppearance, "appearanceForProvider:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

- (id)_presentationForParticipant:(id)a3
{
  id v3;
  void *v4;

  v3 = a3;
  if (objc_msgSend(v3, "participantState") == 2)
  {
    +[CSPresentation presentationForProvider:](CSPresentation, "presentationForProvider:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

- (void)_updateAppearance:(id)a3 forComponentType:(int64_t)a4 shouldHide:(BOOL)a5
{
  _BOOL4 v5;
  uint64_t v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  v5 = a5;
  v14 = a3;
  objc_msgSend(v14, "componentForType:identifier:", a4, CFSTR("CSPresentation"));
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = (void *)v7;
  v9 = !v5;
  if (!v5 || v7)
  {
    if (!v7)
      v9 = 0;
    if (v9 == 1)
      objc_msgSend(v14, "removeComponent:", v7);
  }
  else
  {
    +[CSComponent componentWithType:](CSComponent, "componentWithType:", a4);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "identifier:", CFSTR("CSPresentation"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "priority:", 10);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "hidden:", 1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v14, "addComponent:", v13);
  }

}

- (void)_updateLocalAppearanceForPresentation
{
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  CSCoverSheetViewTransitionSource *currentTransitionSource;
  void *v9;
  void *v10;
  _BOOL8 v11;
  void *v12;
  CSAppearance *localAppearance;
  void *v14;
  CSAppearance *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  _BOOL8 v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;

  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController activePresentation](self, "activePresentation");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "scrollView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "pageRelativeScrollOffset");
  v7 = v6;

  if (-[CSCoverSheetViewTransitionSource isTransitioning](self->_currentTransitionSource, "isTransitioning")&& -[CSCoverSheetViewController _isSourceForHorizontalScrolling:](self, "_isSourceForHorizontalScrolling:", self->_currentTransitionSource))
  {
    currentTransitionSource = self->_currentTransitionSource;
    if (currentTransitionSource)
      -[CSCoverSheetViewTransitionSource transitionContext](currentTransitionSource, "transitionContext");
    v7 = 0.0;
  }
  objc_msgSend(v3, "dateViewPresentationExtentForPageRelativeScrollOffset:", v7);
  +[CSRegion regionForCoordinateSpace:withExtent:](CSRegion, "regionForCoordinateSpace:withExtent:", v3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "firstRegionIntersectingCoordinateSpace:excludingRegionsWithRole:", v9, 3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v10 != 0;

  -[CSCoverSheetViewController _updateAppearance:forComponentType:shouldHide:](self, "_updateAppearance:forComponentType:shouldHide:", self->_localAppearance, 1, v11);
  -[CSFixedFooterViewController fixedFooterView](self->_fixedFooterViewController, "fixedFooterView");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  localAppearance = self->_localAppearance;
  objc_msgSend(v12, "pageControl");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController _updateAppearance:forComponentType:shouldHide:](self, "_updateAppearance:forComponentType:shouldHide:", localAppearance, 3, objc_msgSend(v4, "intersectsCoordinateSpace:", v14));

  v15 = self->_localAppearance;
  objc_msgSend(v12, "statusTextView");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "firstRegionIntersectingCoordinateSpace:excludingRegionsWithRole:", v16, 2);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController _updateAppearance:forComponentType:shouldHide:](self, "_updateAppearance:forComponentType:shouldHide:", v15, 10, v17 != 0);

  -[CSTeachableMomentsContainerViewController teachableMomentsContainerView](self->_teachableMomentsContainerViewController, "teachableMomentsContainerView");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "callToActionLabelPositionPlaceholderView");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = v19;
  v50 = v12;
  if (v19)
  {
    v21 = v19;
  }
  else
  {
    objc_msgSend(v12, "callToActionLabel");
    v21 = (id)objc_claimAutoreleasedReturnValue();
  }
  v22 = v21;

  v49 = v22;
  -[CSCoverSheetViewController _updateAppearance:forComponentType:shouldHide:](self, "_updateAppearance:forComponentType:shouldHide:", self->_localAppearance, 9, objc_msgSend(v4, "intersectsCoordinateSpace:", v22) | -[CSCoverSheetViewController isUnlockDisabled](self, "isUnlockDisabled"));
  -[CSWidgetGridViewController view](self->_sidebarComplicationContainerViewController, "view");
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "firstRegionIntersectingCoordinateSpace:excludingRegionsWithRole:");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = v23 != 0;

  -[CSCoverSheetViewController _updateAppearance:forComponentType:shouldHide:](self, "_updateAppearance:forComponentType:shouldHide:", self->_localAppearance, 25, v24);
  -[CSTeachableMomentsContainerViewController homeAffordanceViewController](self->_teachableMomentsContainerViewController, "homeAffordanceViewController");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "homeAffordanceView");
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  if (v26)
  {
    objc_msgSend(v4, "firstRegionIntersectingCoordinateSpace:excludingRegionsWithRole:", v26, 3);
    v27 = (void *)objc_claimAutoreleasedReturnValue();

    -[CSAppearance componentForType:identifier:](self->_localAppearance, "componentForType:identifier:", 12, CFSTR("CSPresentation"));
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = v28;
    if (v28)
    {
      objc_msgSend(v28, "setHidden:", 0);
      objc_msgSend(v29, "setSuppressTeachableMomentsAnimation:", BSSettingFlagIfYes());
    }
    else
    {
      +[CSComponent componentWithType:](CSComponent, "componentWithType:", 12);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v30, "identifier:", CFSTR("CSPresentation"));
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "priority:", 10);
      v46 = v26;
      v32 = v9;
      v33 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v33, "setHidden:", 0);
      objc_msgSend(v33, "setSuppressTeachableMomentsAnimation:", BSSettingFlagIfYes());
      -[CSAppearance addComponent:](self->_localAppearance, "addComponent:", v33);

      v9 = v32;
      v26 = v46;
    }

  }
  objc_msgSend(v18, "controlCenterGrabberPositionPlaceholderView");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "firstRegionIntersectingCoordinateSpace:excludingRegionsWithRole:", v34, 3);
  v35 = (void *)objc_claimAutoreleasedReturnValue();

  -[CSAppearance componentForType:identifier:](self->_localAppearance, "componentForType:identifier:", 13, CFSTR("CSPresentation"));
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = v36;
  if (v36)
  {
    objc_msgSend(v36, "setHidden:", v35 != 0);
  }
  else
  {
    +[CSComponent componentWithType:](CSComponent, "componentWithType:", 13);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    v45 = v9;
    objc_msgSend(v44, "identifier:", CFSTR("CSPresentation"));
    v47 = v26;
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v38, "priority:", 10);
    v39 = v4;
    v40 = v18;
    v41 = v3;
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v42, "hidden:", v35 != 0);
    v43 = (void *)objc_claimAutoreleasedReturnValue();

    v3 = v41;
    v18 = v40;
    v4 = v39;

    v26 = v47;
    v9 = v45;
    -[CSAppearance addComponent:](self->_localAppearance, "addComponent:", v43);

  }
}

- (BOOL)_wouldUpdateActiveAppearance
{
}

- (id)__currentDesiredAppearanceWithStartIndex:(unint64_t *)a3 targetIndex:(unint64_t *)a4 targetAppearance:(id *)a5 targetPresentation:(id *)a6 modalAppearance:(id *)a7 proudLockAppearance:(id *)a8 poseidonAppearance:(id *)a9
{
  void *v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  void *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  NSObject *v30;
  NSObject *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  NSHashTable *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t i;
  void *v41;
  id v43;
  id *v44;
  id *v45;
  id *v46;
  id *v47;
  void *v48;
  void *v49;
  NSObject *v50;
  id v51;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _BYTE v61[128];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v59 = 0u;
  v60 = 0u;
  v58 = 0u;
  -[CSCoverSheetViewController transitionContext](self, "transitionContext");
  -[CSCoverSheetViewController pageViewControllerAtIndex:](self, "pageViewControllerAtIndex:", (unint64_t)0.0);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v15)
  {
    -[CSCoverSheetViewController pageViewControllerAtIndex:](self, "pageViewControllerAtIndex:", (unint64_t)0.0);
    v16 = objc_claimAutoreleasedReturnValue();
    if (v16)
    {
      v45 = a6;
      v46 = a7;
      v44 = a5;
      v48 = v15;
      v47 = a8;
      +[CSAppearance appearanceForProvider:](CSAppearance, "appearanceForProvider:", v15);
      v51 = (id)objc_claimAutoreleasedReturnValue();
      v17 = v16;
      +[CSPresentation presentationForProvider:](CSPresentation, "presentationForProvider:", v15);
      v49 = v14;
      v50 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "window");
      v20 = (void *)objc_claimAutoreleasedReturnValue();

      if (v20)
      {
        -[CSCoverSheetViewController view](self, "view");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "window");
        v22 = objc_claimAutoreleasedReturnValue();
        +[CSPresentation presentationWithCoordinateSpace:](CSPresentation, "presentationWithCoordinateSpace:", v22);
        v23 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v23, "setIdentifier:", CFSTR("CSPresentation"));
        -[CSCoverSheetViewController _presentationForParticipant:](self, "_presentationForParticipant:", self->_modalPresentationController);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "unionPresentation:", v24);

        objc_msgSend(v23, "unionPresentation:", v50);
        -[CSCoverSheetViewController externalPresentation](self, "externalPresentation");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "unionPresentation:", v25);

        -[CSCoverSheetViewController activePresentation](self, "activePresentation");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        LOBYTE(v22) = objc_msgSend(v23, "isEqual:", v26);

        if ((v22 & 1) == 0)
        {
          -[CSCoverSheetViewController setActivePresentation:](self, "setActivePresentation:", v23);
          -[CSCoverSheetViewController _updateLocalAppearanceForPresentation](self, "_updateLocalAppearanceForPresentation");
          -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v27, "regionsDebugView");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "regions");
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v28, "setRegions:", v29);

          SBLogDashBoard();
          v30 = objc_claimAutoreleasedReturnValue();
          LODWORD(v28) = os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG);

          if ((_DWORD)v28)
          {
            SBLogDashBoard();
            v31 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
              -[CSCoverSheetViewController __currentDesiredAppearanceWithStartIndex:targetIndex:targetAppearance:targetPresentation:modalAppearance:proudLockAppearance:poseidonAppearance:].cold.3();

          }
        }

      }
      +[CSAppearance appearanceWithIdentifier:](CSAppearance, "appearanceWithIdentifier:", CFSTR("(active)"));
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      -[CSCoverSheetViewController _appearanceForParticipant:](self, "_appearanceForParticipant:", self->_modalPresentationController);
      v32 = objc_claimAutoreleasedReturnValue();
      -[CSCoverSheetViewController _appearanceForParticipant:](self, "_appearanceForParticipant:", self->_proudLockViewController);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      -[CSCoverSheetViewController _appearanceForParticipant:](self, "_appearanceForParticipant:", self->_poseidonViewController);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "unionAppearance:", v51);
      -[CSCoverSheetViewController localAppearance](self, "localAppearance");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "unionAppearance:", v35);

      v43 = (id)v32;
      objc_msgSend(v18, "unionAppearance:", v32);
      objc_msgSend(v18, "unionAppearance:", v33);
      objc_msgSend(v18, "unionAppearance:", self->_teachableMomentsContainerViewController);
      objc_msgSend(v18, "unionAppearance:", v34);
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v36 = self->_externalAppearanceProviders;
      v37 = -[NSHashTable countByEnumeratingWithState:objects:count:](v36, "countByEnumeratingWithState:objects:count:", &v54, v61, 16);
      if (v37)
      {
        v38 = v37;
        v39 = *(_QWORD *)v55;
        do
        {
          for (i = 0; i != v38; ++i)
          {
            if (*(_QWORD *)v55 != v39)
              objc_enumerationMutation(v36);
            v41 = *(void **)(*((_QWORD *)&v54 + 1) + 8 * i);
            if (objc_msgSend(v41, "participantState") == 2)
              objc_msgSend(v18, "unionAppearance:", v41);
          }
          v38 = -[NSHashTable countByEnumeratingWithState:objects:count:](v36, "countByEnumeratingWithState:objects:count:", &v54, v61, 16);
        }
        while (v38);
      }

      if (a3)
        *a3 = (unint64_t)0.0;
      if (a4)
        *a4 = (unint64_t)0.0;
      if (v44)
        *v44 = objc_retainAutorelease(v51);
      v19 = v50;
      if (v45)
        *v45 = objc_retainAutorelease(v50);
      if (v46)
        *v46 = objc_retainAutorelease(v43);
      if (v47)
        *v47 = objc_retainAutorelease(v33);
      if (a9)
        *a9 = objc_retainAutorelease(v34);

      v15 = v48;
      v14 = v49;
    }
    else
    {
      SBLogDashBoard();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT))
        -[CSCoverSheetViewController __currentDesiredAppearanceWithStartIndex:targetIndex:targetAppearance:targetPresentation:modalAppearance:proudLockAppearance:poseidonAppearance:].cold.2(self);
      v18 = 0;
      v17 = 0;
    }

  }
  else
  {
    SBLogDashBoard();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
      -[CSCoverSheetViewController __currentDesiredAppearanceWithStartIndex:targetIndex:targetAppearance:targetPresentation:modalAppearance:proudLockAppearance:poseidonAppearance:].cold.1(self);
    v18 = 0;
  }

  return v18;
}

uint64_t __63__CSCoverSheetViewController__updateActiveAppearanceForReason___block_invoke(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_updateDateTimeView");
  objc_msgSend(*(id *)(a1 + 32), "_updateRemoteInlineContentView");
  objc_msgSend(*(id *)(a1 + 32), "_updateStatusBar");
  objc_msgSend(*(id *)(a1 + 32), "_updatePageContent");
  objc_msgSend(*(id *)(a1 + 32), "_updateBackground");
  objc_msgSend(*(id *)(a1 + 32), "_updateBackgroundContentView");
  objc_msgSend(*(id *)(a1 + 32), "_updateComplicationsContainerView");
  objc_msgSend(*(id *)(a1 + 32), "_updateComplicationSidebar");
  objc_msgSend(*(id *)(a1 + 32), "_updateForegroundView");
  objc_msgSend(*(id *)(a1 + 32), "_updateFullBleedContent");
  objc_msgSend(*(id *)(a1 + 32), "_updateVibrancy");
  objc_msgSend(*(id *)(a1 + 32), "_updateLegibilitySettings");
  objc_msgSend(*(id *)(a1 + 32), "_updateWallpaperEffectView");
  objc_msgSend(*(id *)(a1 + 32), "_updateWallpaperFloatingLayerContainerView");
  objc_msgSend(*(id *)(a1 + 32), "_updateTintingView");
  objc_msgSend(*(id *)(a1 + 32), "_updateStatusBarBackground");
  objc_msgSend(*(id *)(a1 + 32), "_updateFixedFooterView");
  objc_msgSend(*(id *)(a1 + 32), "_updateProudLockView");
  objc_msgSend(*(id *)(a1 + 32), "_updateContent");
  objc_msgSend(*(id *)(a1 + 32), "_updateControlCenterGrabber");
  objc_msgSend(*(id *)(a1 + 32), "_updateModalContent");
  objc_msgSend(*(id *)(a1 + 32), "_updateWallpaper");
  objc_msgSend(*(id *)(a1 + 32), "_updateQuickActions");
  objc_msgSend(*(id *)(a1 + 32), "_updateStatusBarGradient");
  objc_msgSend(*(id *)(a1 + 32), "_updatePoseidon");
  objc_msgSend(*(id *)(a1 + 32), "_updateWhitePoint");
  return objc_msgSend(*(id *)(a1 + 32), "_updateDimmingLayer");
}

uint64_t __63__CSCoverSheetViewController__updateActiveAppearanceForReason___block_invoke_2(uint64_t a1)
{
  uint64_t result;
  int v3;
  int v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  _BOOL4 v11;
  int v12;
  uint64_t v13;

  if ((objc_msgSend(*(id *)(a1 + 32), "isTransitioning") & 1) == 0)
    objc_msgSend(*(id *)(a1 + 32), "setPreviousAppearance:", *(_QWORD *)(a1 + 40));
  result = objc_msgSend(*(id *)(a1 + 32), "participantState");
  if (result == 2)
  {
    if (*(_BYTE *)(a1 + 64))
    {
      v3 = objc_msgSend(*(id *)(a1 + 48), "isHidden");
      v4 = v3 ^ objc_msgSend(*(id *)(a1 + 32), "_isPageContentHidden") ^ 1;
    }
    else
    {
      v4 = 0;
    }
    if (*(_BYTE *)(a1 + 65))
    {
      objc_msgSend(*(id *)(a1 + 56), "offset");
      v6 = v5;
      v8 = v7;
      objc_msgSend(*(id *)(a1 + 32), "_slideableContentOffset");
      v11 = v8 == v10 && v6 == v9;
    }
    else
    {
      v11 = 0;
    }
    result = objc_msgSend(*(id *)(a1 + 32), "isTransitioning");
    if ((result & 1) == 0)
    {
      v12 = v4 | v11;
      if ((v12 & 1) != 0 || *(_BYTE *)(a1 + 66))
      {
        result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1240), "isPresentingContent");
        if ((result ^ 1 | v12) == 1)
        {
          if ((objc_msgSend(*(id *)(a1 + 32), "_isPageContentHidden") & 1) != 0)
            v13 = 0;
          else
            v13 = objc_msgSend(*(id *)(a1 + 32), "_isSlideableContentOnscreen");
          return objc_msgSend(*(id *)(a1 + 32), "_endAppearanceTransitionForPageViewControllersToVisible:", v13);
        }
      }
    }
  }
  return result;
}

void __89__CSCoverSheetViewController__updateActiveBehaviorsForReason_updatingAppearanceIfNeeded___block_invoke(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  if (objc_msgSend(*(id *)(a1 + 32), "length"))
    objc_msgSend(*(id *)(a1 + 32), "appendString:", CFSTR(", "));
  objc_msgSend(*(id *)(a1 + 32), "appendString:", v3);

}

- (void)_updateRestrictedBehavior
{
  _BOOL4 screenOffMode;
  CSBehavior *localBehavior;

  screenOffMode = self->_screenOffMode;
  localBehavior = self->_localBehavior;
  if (screenOffMode)
    -[CSBehavior addRestrictedCapabilities:](localBehavior, "addRestrictedCapabilities:", 0x2000000);
  else
    -[CSBehavior removeRestrictedCapabilities:](localBehavior, "removeRestrictedCapabilities:", 0x2000000);
  if (self->_hasContentAboveCoverSheet && !self->_contentAboveIsSiriOrNotFullScreenOniPad)
  {
    -[CSBehavior setNotificationBehavior:](self->_localBehavior, "setNotificationBehavior:", 2);
  }
  else
  {
    -[CSBehavior setNotificationBehavior:](self->_localBehavior, "setNotificationBehavior:", 0);
    if (!-[CSCoverSheetViewController _showingAccessoryView](self, "_showingAccessoryView"))
      -[CSCoverSheetViewController _updateAccessoryAnimationPresenting:userInteractionDisabled:](self, "_updateAccessoryAnimationPresenting:userInteractionDisabled:", 0, 0);
  }
  if ((objc_msgSend(MEMORY[0x1E0D7F648], "supportsPosterCustomization") & 1) == 0)
    -[CSBehavior addRestrictedCapabilities:](self->_localBehavior, "addRestrictedCapabilities:", 0x800000);
}

- (void)_updateBackground
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  double v11;
  double v12;
  void (**v13)(_QWORD, double);
  void *v14;
  void *v15;
  _QWORD v16[4];
  BOOL v17;

  -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "backgroundView");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    -[CSCoverSheetViewController _averageLockScreenWallpaperColor](self, "_averageLockScreenWallpaperColor");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setReduceTransparencyBackingColor:", v6);

    objc_msgSend(v5, "setReduceTransparencyBackingColor:", v6);
    objc_msgSend(v3, "componentForType:identifier:", 19, CFSTR("(active)"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "value");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "integerValue");

    if (-[CSCoverSheetViewTransitionSource isTransitioning](self->_currentTransitionSource, "isTransitioning"))
    {
      objc_msgSend(v5, "beginTransitionToBackgroundStyle:", v10);
      objc_msgSend(v8, "transitionProgress");
      v12 = v11;
      objc_msgSend(v5, "updateBackgroundStyleTransitionProgress:");
      if ((v10 == 7) == (objc_msgSend(v5, "backgroundStyle") == 7))
      {
LABEL_10:
        objc_msgSend(v8, "color");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "setBackgroundColor:", v15);

        goto LABEL_11;
      }
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 3221225472;
      v16[2] = __47__CSCoverSheetViewController__updateBackground__block_invoke;
      v16[3] = &__block_descriptor_33_e8_d16__0d8l;
      v17 = v10 == 7;
      v13 = (void (**)(_QWORD, double))MEMORY[0x1D17E1614](v16);
      objc_msgSend(v5, "backdropView");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v13[2](v13, v12);
      objc_msgSend(v14, "setAlpha:");

    }
    else
    {
      if (objc_msgSend(v5, "isTransitioningBackgroundStyle"))
        objc_msgSend(v5, "completeTransitionToBackgroundStyle:", v10);
      else
        objc_msgSend(v5, "setBackgroundStyle:", v10);
      objc_msgSend(v5, "backdropView");
      v13 = (void (**)(_QWORD, double))objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "setAlpha:", 1.0);
    }

    goto LABEL_10;
  }
LABEL_11:

}

double __47__CSCoverSheetViewController__updateBackground__block_invoke(uint64_t a1, double a2)
{
  double v2;
  double v3;

  if (a2 < 0.2 && *(_BYTE *)(a1 + 32))
  {
    v2 = fmax(a2 / 0.2 + 0.0, 0.0);
    v3 = 1.0;
    return fmin(v2, v3);
  }
  v3 = 1.0;
  if (a2 > 0.8 && !*(_BYTE *)(a1 + 32))
  {
    v2 = fmax((1.0 - a2) / 0.2 + 0.0, 0.0);
    return fmin(v2, v3);
  }
  return v3;
}

- (void)_updateForegroundView
{
  void *v3;
  void *v4;
  id v5;

  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "componentForType:property:", 5, 2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "offset");
  objc_msgSend(v5, "setForegroundViewPositionOffset:");

}

- (void)_updateDateTimeView
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  _BOOL8 v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t IsYes;
  uint64_t v12;
  id v13;
  id v14;
  void (**v15)(_QWORD);
  void *v16;
  void *v17;
  void *v18;
  int IsZero;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  void *v27;
  _BOOL4 v28;
  void *v29;
  void *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  void *v35;
  uint64_t v36;
  double v37;
  void *v38;
  SBFLockScreenDateViewController *dateViewController;
  void *v40;
  void *v41;
  _QWORD v42[4];
  void (**v43)(_QWORD);
  _QWORD v44[4];
  void (**v45)(_QWORD);
  id v46;
  id location;
  _QWORD v48[4];
  id v49;
  id v50;
  char v51;

  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "userInterfaceIdiom");

  v7 = (v6 & 0xFFFFFFFFFFFFFFFBLL) != 1
    && (unint64_t)(-[CSCoverSheetViewController interfaceOrientation](self, "interfaceOrientation") - 3) < 0xFFFFFFFFFFFFFFFELL;
  -[CSCoverSheetViewController dateView](self, "dateView");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setUseCompactDateFormat:", v7);

  -[CSCoverSheetViewController dateView](self, "dateView");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setUseLandscapeTimeFontSize:", v7);

  objc_msgSend(v4, "componentForType:identifier:", 1, CFSTR("(active)"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "vibrantAndCentered");
  IsYes = BSSettingFlagIsYes();
  LOBYTE(v9) = IsYes;
  objc_msgSend(v3, "setDateViewIsVibrant:", IsYes);
  v12 = MEMORY[0x1E0C809B0];
  v48[0] = MEMORY[0x1E0C809B0];
  v48[1] = 3221225472;
  v48[2] = __49__CSCoverSheetViewController__updateDateTimeView__block_invoke;
  v48[3] = &unk_1E8E2E778;
  v13 = v3;
  v49 = v13;
  v51 = (char)v9;
  v14 = v10;
  v50 = v14;
  v15 = (void (**)(_QWORD))MEMORY[0x1D17E1614](v48);
  if (objc_msgSend(v14, "isHidden"))
  {
    objc_initWeak(&location, self);
    v16 = (void *)MEMORY[0x1E0D01908];
    v44[0] = v12;
    v44[1] = 3221225472;
    v44[2] = __49__CSCoverSheetViewController__updateDateTimeView__block_invoke_3;
    v44[3] = &unk_1E8E2E7A0;
    objc_copyWeak(&v46, &location);
    v45 = v15;
    objc_msgSend(v16, "addAlongsideAnimations:completion:", 0, v44);

    objc_destroyWeak(&v46);
    objc_destroyWeak(&location);
    goto LABEL_16;
  }
  objc_msgSend(v13, "dateView");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "timeAlpha");
  if (BSFloatIsZero())
  {
    objc_msgSend(v13, "dateView");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "subtitleAlpha");
    IsZero = BSFloatIsZero();

  }
  else
  {
    IsZero = 0;
  }

  objc_msgSend(v13, "dateViewOffset");
  v21 = v20;
  v23 = v22;
  objc_msgSend(v14, "offset");
  if (IsZero || v24 != v21 || v25 == v23)
  {
    if (!IsZero)
      goto LABEL_13;
  }
  else
  {
    objc_msgSend(v14, "animationDuration");
    if (v26 != 0.0)
    {
LABEL_13:
      v15[2](v15);
      goto LABEL_16;
    }
  }
  v27 = (void *)MEMORY[0x1E0CEABB0];
  v42[0] = v12;
  v42[1] = 3221225472;
  v42[2] = __49__CSCoverSheetViewController__updateDateTimeView__block_invoke_4;
  v42[3] = &unk_1E8E2DFD8;
  v43 = v15;
  objc_msgSend(v27, "performWithoutAnimation:", v42);

LABEL_16:
  if ((objc_msgSend(v14, "isHidden") & 1) != 0)
  {
    v28 = 0;
  }
  else
  {
    objc_msgSend(v14, "string");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    if (v29)
    {
      objc_msgSend(v14, "string");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = objc_msgSend(v30, "length") != 0;

    }
    else
    {
      v28 = 1;
    }

  }
  v31 = 0.0;
  v32 = 0.0;
  if ((objc_msgSend(v14, "isHidden") & 1) == 0 && (objc_msgSend(v14, "hidesTime") & 1) == 0)
  {
    objc_msgSend(v14, "alpha");
    v32 = v33;
  }
  if (v28)
  {
    objc_msgSend(v14, "alpha");
    v31 = v34;
  }
  -[SBFLockScreenDateViewController setTimeAlpha:subtitleAlpha:](self->_dateViewController, "setTimeAlpha:subtitleAlpha:", v32, v31);
  -[CSCoverSheetViewController traitCollection](self, "traitCollection");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v36 = objc_msgSend(v35, "_backlightLuminance");

  v37 = 0.0;
  if (v36 != 1)
    v37 = 1.0;
  -[SBFLockScreenDateViewController setBackgroundAlpha:](self->_dateViewController, "setBackgroundAlpha:", v37);
  objc_msgSend(v14, "view");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  if (v38 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    dateViewController = self->_dateViewController;
    v40 = v38;
  }
  else
  {
    dateViewController = self->_dateViewController;
    v40 = 0;
  }
  -[SBFLockScreenDateViewController setCustomSubtitleView:](dateViewController, "setCustomSubtitleView:", v40);
  objc_msgSend(v13, "dateView");
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController dateTimeSubtitleMaximumWidth](self, "dateTimeSubtitleMaximumWidth");
  objc_msgSend(v41, "setMaximumSubtitleWidth:");

}

void __49__CSCoverSheetViewController__updateDateTimeView__block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  double v7;
  double v8;
  _QWORD v9[4];
  id v10;
  id v11;

  objc_msgSend(*(id *)(a1 + 32), "setForceDateViewCentered:", *(unsigned __int8 *)(a1 + 48));
  objc_msgSend(*(id *)(a1 + 40), "value");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(void **)(a1 + 32);
  if (v2)
    v5 = objc_msgSend(v2, "integerValue");
  else
    v5 = 0x7FFFFFFFFFFFFFFFLL;
  objc_msgSend(v4, "setDateViewPageAlignment:", v5);
  objc_msgSend(*(id *)(a1 + 32), "setDateViewStretch:", objc_msgSend(*(id *)(a1 + 40), "stretch"));
  v6 = (void *)MEMORY[0x1E0CEABB0];
  objc_msgSend(*(id *)(a1 + 40), "animationDuration");
  v8 = v7;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __49__CSCoverSheetViewController__updateDateTimeView__block_invoke_2;
  v9[3] = &unk_1E8E2DC00;
  v10 = *(id *)(a1 + 32);
  v11 = *(id *)(a1 + 40);
  objc_msgSend(v6, "animateWithDuration:animations:", v9, v8);

}

uint64_t __49__CSCoverSheetViewController__updateDateTimeView__block_invoke_2(uint64_t a1)
{
  void *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "offset");
  v4 = v3;
  v6 = v5;
  objc_msgSend(*(id *)(a1 + 40), "scale");
  return objc_msgSend(v2, "setDateViewOffset:scale:", v4, v6, v7);
}

void __49__CSCoverSheetViewController__updateDateTimeView__block_invoke_3(uint64_t a1)
{
  void *v2;
  void *v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "activeAppearance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "componentForType:identifier:", 1, CFSTR("(active)"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "isHidden"))
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

uint64_t __49__CSCoverSheetViewController__updateDateTimeView__block_invoke_4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

- (void)_updateRemoteInlineContentView
{
  void *v3;
  void *v4;
  NSMutableSet *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "componentForType:identifier:", 21, CFSTR("(active)"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v5 = self->_remoteContentInlineProvidingManagers;
  v6 = -[NSMutableSet countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v11;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v11 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v9++), "setInlineRemoteContentHidden:", objc_msgSend(v4, "isHidden", (_QWORD)v10));
      }
      while (v7 != v9);
      v7 = -[NSMutableSet countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v7);
  }

}

- (void)_updateRemoteContentInlineHorizontalMargin
{
  void *v3;
  uint64_t v4;
  double v5;
  void *v6;
  double v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;

  objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "userInterfaceIdiom");

  v5 = 0.0;
  if ((v4 & 0xFFFFFFFFFFFFFFFBLL) != 1)
  {
    if (self->_remoteContentInlineViewController)
    {
      -[CSMainPageContentViewController combinedListViewController](self->_mainPageContentViewController, "combinedListViewController");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "horizontalInsetMargin");
      v5 = v7;

      if ((unint64_t)(-[CSCoverSheetViewController interfaceOrientation](self, "interfaceOrientation") - 1) >= 2
        && (objc_opt_respondsToSelector() & 1) != 0)
      {
        -[CSCoverSheetViewController viewIfLoaded](self, "viewIfLoaded");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "bounds");
        v10 = v9;
        v12 = v11;

        -[CSMainPageContentViewController listInsetX](self->_mainPageContentViewController, "listInsetX");
        v5 = v10 - (v12 + v5 * -2.0 - (v5 * 2.0 + -0.333333)) - v13;
      }
    }
  }
  -[CSRemoteContentInlineViewController setHorizontalInsetMargin:](self->_remoteContentInlineViewController, "setHorizontalInsetMargin:", v5);
}

- (void)_updateProudLockView
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  int64_t finalInterfaceOrientationForInProgressTransition;
  _BOOL4 v8;
  unint64_t v9;
  void *v10;
  double v11;
  double v12;
  uint64_t v13;
  id v14;
  id v15;
  void (**v16)(_QWORD);
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  id v23;
  int v24;
  void *v25;
  void *v26;
  _QWORD v27[4];
  void (**v28)(_QWORD);
  _QWORD v29[4];
  id v30;
  id v31;

  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSProudLockViewController proudLockView](self->_proudLockViewController, "proudLockView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "componentForType:identifier:", 11, CFSTR("(active)"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "alpha");
  objc_msgSend(v4, "setAlpha:");
  finalInterfaceOrientationForInProgressTransition = self->_finalInterfaceOrientationForInProgressTransition;
  if ((unint64_t)(finalInterfaceOrientationForInProgressTransition - 1) >= 2)
  {
    v9 = finalInterfaceOrientationForInProgressTransition - 5;
    v8 = v9 < 0xFFFFFFFFFFFFFFFELL;
    if (v9 <= 0xFFFFFFFFFFFFFFFDLL
      && (unint64_t)(-[CSCoverSheetViewController interfaceOrientation](self, "interfaceOrientation") - 3) > 1)
    {
      v8 = 1;
    }
    else
    {
      -[CSProudLockViewController proudLockContainerViewController](self->_proudLockViewController, "proudLockContainerViewController");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "proudLockLandscapeOffset");
      v12 = v11;

      objc_msgSend(v6, "setOffset:", 0.0, -v12);
    }
  }
  else
  {
    v8 = 0;
  }
  v13 = MEMORY[0x1E0C809B0];
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = __50__CSCoverSheetViewController__updateProudLockView__block_invoke;
  v29[3] = &unk_1E8E2DC00;
  v14 = v6;
  v30 = v14;
  v15 = v3;
  v31 = v15;
  v16 = (void (**)(_QWORD))MEMORY[0x1D17E1614](v29);
  if (_os_feature_enabled_impl())
  {
    if (_os_feature_enabled_impl())
    {
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = objc_msgSend(v17, "userInterfaceIdiom");

      if ((v18 & 0xFFFFFFFFFFFFFFFBLL) == 1)
      {
        v19 = objc_opt_class();
        v20 = v14;
        if (v19)
        {
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v21 = v20;
          else
            v21 = 0;
        }
        else
        {
          v21 = 0;
        }
        v23 = v21;

        v24 = objc_msgSend(v23, "prefersInlineCoaching");
        v22 = v24 ^ 1u;
      }
      else
      {
        v22 = 0;
      }
      v13 = MEMORY[0x1E0C809B0];
    }
    else
    {
      v22 = 0;
    }
    -[CSProudLockViewController proudLockContainerViewController](self->_proudLockViewController, "proudLockContainerViewController");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "setSuppressAlongsideCoaching:", v22);

  }
  objc_msgSend(v14, "animationDuration");
  if ((v8 & BSFloatIsZero()) == 1)
  {
    v26 = (void *)MEMORY[0x1E0CEABB0];
    v27[0] = v13;
    v27[1] = 3221225472;
    v27[2] = __50__CSCoverSheetViewController__updateProudLockView__block_invoke_3;
    v27[3] = &unk_1E8E2DFD8;
    v28 = v16;
    objc_msgSend(v26, "performWithoutAnimation:", v27);

  }
  else
  {
    v16[2](v16);
  }

}

void __50__CSCoverSheetViewController__updateProudLockView__block_invoke(uint64_t a1)
{
  void *v2;
  double v3;
  double v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v2 = (void *)MEMORY[0x1E0CEABB0];
  objc_msgSend(*(id *)(a1 + 32), "animationDuration");
  v4 = v3;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __50__CSCoverSheetViewController__updateProudLockView__block_invoke_2;
  v5[3] = &unk_1E8E2DC00;
  v6 = *(id *)(a1 + 40);
  v7 = *(id *)(a1 + 32);
  objc_msgSend(v2, "animateWithDuration:animations:", v5, v4);

}

uint64_t __50__CSCoverSheetViewController__updateProudLockView__block_invoke_2(uint64_t a1)
{
  void *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  void *v14;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "offset");
  v4 = v3;
  v6 = v5;
  objc_msgSend(*(id *)(a1 + 40), "scale");
  objc_msgSend(v2, "setProudLockIconViewOffset:scale:", v4, v6, v7);
  v8 = *(void **)(a1 + 32);
  v9 = *(void **)(a1 + 40);
  v10 = objc_opt_class();
  v11 = v9;
  if (v10)
  {
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v12 = v11;
    else
      v12 = 0;
  }
  else
  {
    v12 = 0;
  }
  v13 = v12;

  objc_msgSend(v8, "setProudLockPrefersLowerPresentationLevel:", objc_msgSend(v13, "shouldResideInALowerSubview"));
  v14 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "blurRadius");
  return objc_msgSend(v14, "setProudLockIconBlurRadius:");
}

uint64_t __50__CSCoverSheetViewController__updateProudLockView__block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

- (void)_updateProudLockViewUpdateSuspension
{
  CSProudLockViewController *proudLockViewController;
  id v3;

  proudLockViewController = self->_proudLockViewController;
  -[CSCoverSheetViewController activeBehavior](self, "activeBehavior");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  -[CSProudLockViewController setSuspendLockUpdates:](proudLockViewController, "setSuspendLockUpdates:", objc_msgSend(v3, "areRestrictedCapabilities:", 0x8000));

}

- (void)_updateStatusBar
{
  UIStatusBar *fakeStatusBar;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  BOOL v11;
  int IsYes;
  _BOOL4 v13;
  char v14;
  uint64_t v15;
  int v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  _QWORD v26[4];
  id v27;
  id v28;
  _QWORD v29[5];
  _QWORD v30[5];
  id v31;
  id v32;
  id v33;
  BOOL v34;
  char v35;

  fakeStatusBar = self->_fakeStatusBar;
  -[CSCoverSheetViewController _fakeStatusBarSettings](self, "_fakeStatusBarSettings");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIStatusBar setStyleRequest:](fakeStatusBar, "setStyleRequest:", v4);

  -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "componentForType:identifier:", 2, CFSTR("(active)"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetContextProviding statusBarController](self->_coverSheetContext, "statusBarController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "legibilitySettings");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    -[CSAppearance legibilitySettings](self->_activeAppearance, "legibilitySettings");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v8 = objc_msgSend(v7, "style");
  objc_msgSend(v6, "statusBarLegibilitySettings");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "style");
  v24 = v8;
  v11 = v8 != v10;

  objc_msgSend(v5, "flag");
  IsYes = BSSettingFlagIsYes();
  v13 = -[CSCoverSheetViewController _isFakeStatusBarEnabled](self, "_isFakeStatusBarEnabled");
  v14 = v13 & (IsYes ^ 1);
  v15 = MEMORY[0x1E0C809B0];
  if (v13)
    v16 = IsYes ^ 1;
  else
    v16 = IsYes;
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = __46__CSCoverSheetViewController__updateStatusBar__block_invoke;
  v30[3] = &unk_1E8E2E7C8;
  v30[4] = self;
  v17 = v6;
  v31 = v17;
  v18 = v5;
  v32 = v18;
  v34 = v11;
  v19 = v7;
  v33 = v19;
  v35 = v14;
  v20 = (void *)MEMORY[0x1D17E1614](v30);
  v29[0] = v15;
  v29[1] = 3221225472;
  v29[2] = __46__CSCoverSheetViewController__updateStatusBar__block_invoke_2;
  v29[3] = &unk_1E8E2DDE0;
  v29[4] = self;
  v21 = (void *)MEMORY[0x1D17E1614](v29);
  v22 = (void *)MEMORY[0x1E0CEABB0];
  if (v16 == 1)
  {
    v26[0] = v15;
    v26[1] = 3221225472;
    v26[2] = __46__CSCoverSheetViewController__updateStatusBar__block_invoke_3;
    v26[3] = &unk_1E8E2E7F0;
    v27 = v20;
    v28 = v21;
    objc_msgSend(v22, "performWithoutAnimation:", v26);

  }
  else if (objc_msgSend(MEMORY[0x1E0CEABB0], "_isInAnimationBlock"))
  {
    objc_msgSend(MEMORY[0x1E0D01908], "addAlongsideAnimations:completion:", v20, v21);
  }
  else
  {
    if (v24 == v10)
    {
      v23 = 0;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0D016B0], "settingsWithDuration:", 0.25);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
    }
    objc_msgSend(MEMORY[0x1E0D01908], "animateWithSettings:actions:completion:", v23, v20, v21);

  }
}

void __46__CSCoverSheetViewController__updateStatusBar__block_invoke(uint64_t a1)
{
  uint64_t v2;
  int IsYes;
  _BYTE *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  double v16;
  double v17;
  id v18;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 1418) || *(_BYTE *)(v2 + 1737))
  {
    objc_msgSend(*(id *)(a1 + 40), "clearStatusBarParameters");
  }
  else
  {
    v6 = (void *)MEMORY[0x1E0CB37E8];
    v7 = *(void **)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 48), "alpha");
    objc_msgSend(v6, "numberWithDouble:");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(*(id *)(a1 + 32), "statusBarStyle");
    if (*(_BYTE *)(a1 + 64))
      v10 = *(_QWORD *)(a1 + 56);
    else
      v10 = 0;
    objc_msgSend(v7, "setStatusBarAlpha:style:legibilitySettings:", v8, v9, v10);

    if ((objc_msgSend(*(id *)(a1 + 32), "isTransitioning") & 1) == 0 && !*(_BYTE *)(*(_QWORD *)(a1 + 32) + 1058))
    {
      if (objc_msgSend(MEMORY[0x1E0CEABB0], "_isInAnimationBlock"))
      {
        objc_msgSend(MEMORY[0x1E0CEABB0], "_currentAnimationDuration");
        v17 = v16;
      }
      else if (*(_BYTE *)(a1 + 65))
      {
        v17 = 0.0;
      }
      else
      {
        v17 = 0.25;
      }
      objc_msgSend(*(id *)(a1 + 40), "setStatusBarPart:hidden:animationDuration:", 0, objc_msgSend(*(id *)(a1 + 32), "shouldShowLockStatusBarTime") ^ 1, v17);
    }
  }
  objc_msgSend(*(id *)(a1 + 48), "flag");
  IsYes = BSSettingFlagIsYes();
  v4 = *(_BYTE **)(a1 + 32);
  if (!IsYes || v4[1057] || v4[1418])
  {
    objc_msgSend(v4, "coverSheetView");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "blurRadius");
    objc_msgSend(v5, "setFakeStatusBarBlurRadius:");

    objc_msgSend(*(id *)(a1 + 32), "_setFakeStatusBarEnabled:", 0);
  }
  else
  {
    objc_msgSend(v4, "_setFakeStatusBarEnabled:", 1);
    objc_msgSend(*(id *)(a1 + 32), "coverSheetView");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "value");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setFakeStatusBarLevel:", objc_msgSend(v12, "integerValue"));

    objc_msgSend(*(id *)(a1 + 32), "coverSheetView");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "blurRadius");
    objc_msgSend(v13, "setFakeStatusBarBlurRadius:");

    objc_msgSend(*(id *)(a1 + 32), "coverSheetView");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "scale");
    objc_msgSend(v14, "setFakeStatusBarScale:");

    objc_msgSend(*(id *)(a1 + 32), "coverSheetView");
    v18 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "fakeStatusBar");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "alpha");
    objc_msgSend(v15, "setAlpha:");

  }
}

void __46__CSCoverSheetViewController__updateStatusBar__block_invoke_2(uint64_t a1)
{
  void *v2;
  char IsZero;
  void *v4;
  void *v5;
  id v6;

  objc_msgSend((id)*MEMORY[0x1E0CEB258], "statusBar");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "alpha");
  IsZero = BSFloatIsZero();

  if ((IsZero & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "view");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "window");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "rootViewController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "_updateContentOverlayInsetsFromParentIfNecessary");

  }
}

uint64_t __46__CSCoverSheetViewController__updateStatusBar__block_invoke_3(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

- (void)_updateStatusBarBackground
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  int v7;
  _BOOL4 v8;
  void *v9;
  void *v10;
  uint64_t v11;
  CSCoverSheetViewTransitionSource *currentTransitionSource;
  double v13;
  double v14;

  -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "componentForType:identifier:", 2, CFSTR("(active)"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "componentForType:identifier:", 8, CFSTR("(active)"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = objc_msgSend(v4, "isHidden");
  objc_msgSend(v4, "flag");
  if (BSSettingFlagIsYes())
    v8 = !self->_hasContentAboveCoverSheet;
  else
    v8 = 0;
  objc_msgSend(v6, "value");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
    v11 = objc_msgSend(v9, "integerValue");
  else
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  objc_msgSend(v10, "setStatusBarBackgroundPageAlignment:", v11);

  currentTransitionSource = self->_currentTransitionSource;
  if (currentTransitionSource)
    -[CSCoverSheetViewTransitionSource transitionContext](currentTransitionSource, "transitionContext");
  BSIntervalFractionForValue();
  if (-[CSCoverSheetViewController isTransitioning](self, "isTransitioning", 0, 0, 0, 0, 0)
    && (BSFloatIsOne() & 1) == 0)
  {
    v13 = 0.0;
    if ((objc_msgSend(v6, "isHidden") & 1) != 0)
      goto LABEL_19;
  }
  else
  {
    objc_msgSend(v6, "flag");
    v13 = 0.0;
    if (!BSSettingFlagIsYes() || (objc_msgSend(v6, "isHidden") & 1) != 0)
      goto LABEL_19;
  }
  if (!self->_hasContentAboveCoverSheet
    && v8 | v7 ^ 1
    && !-[CSCoverSheetViewController _isPresentingPosterSwitcher](self, "_isPresentingPosterSwitcher"))
  {
    -[CSCoverSheetViewController _createStatusBarBackgroundViewIfNeeded](self, "_createStatusBarBackgroundViewIfNeeded");
    objc_msgSend(v6, "alpha");
    v13 = v14;
  }
LABEL_19:
  -[UIView setAlpha:](self->_statusBarBackgroundView, "setAlpha:", v13);

}

- (void)_updatePageContent
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "componentForType:identifier:", 4, CFSTR("(active)"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "scrollView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "alpha");
  objc_msgSend(v5, "setAlpha:");

  objc_msgSend(v7, "scrollView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "flag");
  objc_msgSend(v6, "setBouncesHorizontally:", BSSettingFlagIsExplicitNo() ^ 1);

}

- (void)_updateModalContent
{
  void *v3;
  void *v4;
  id v5;

  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "componentForType:identifier:", 22, CFSTR("(active)"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setModalPresentationLevel:", objc_msgSend(v4, "level"));

}

- (void)_updateWallpaper
{
  void *v3;
  void *v4;
  id v5;

  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "componentForType:identifier:", 6, CFSTR("(active)"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setWallpaperPresentationLevel:", objc_msgSend(v4, "level"));

}

- (void)_updateFixedFooterView
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  void *v18;
  id v19;

  -[CSFixedFooterViewController fixedFooterView](self->_fixedFooterViewController, "fixedFooterView");
  v19 = (id)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "componentForType:identifier:", 3, CFSTR("(active)"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "pageControl");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "alpha");
  objc_msgSend(v5, "setAlpha:");

  -[CSTeachableMomentsContainerViewController teachableMomentsContainerView](self->_teachableMomentsContainerViewController, "teachableMomentsContainerView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "callToActionLabel");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7)
  {
    v9 = v7;
  }
  else
  {
    objc_msgSend(v19, "callToActionLabel");
    v9 = (id)objc_claimAutoreleasedReturnValue();
  }
  v10 = v9;

  objc_msgSend(v3, "componentForType:identifier:", 9, CFSTR("(active)"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "alpha");
  objc_msgSend(v10, "setAlpha:");
  objc_msgSend(v3, "componentForType:identifier:", 10, CFSTR("(active)"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "offset");
  v14 = v13;
  v16 = v15;
  objc_msgSend(v12, "scale");
  objc_msgSend(v19, "setStatusTextViewOffset:scale:", v14, v16, v17);
  objc_msgSend(v19, "statusTextView");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "alpha");
  objc_msgSend(v18, "setAlpha:");

}

- (void)_updateHomeAffordance
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void (**v8)(_QWORD);
  double v9;
  double v10;
  int IsZero;
  int v12;
  uint64_t v13;
  void *v14;
  int v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD v21[4];
  id v22;
  void (**v23)(_QWORD);
  double v24;
  _QWORD v25[4];
  id v26;
  CSCoverSheetViewController *v27;
  uint8_t buf[4];
  int v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "componentForType:identifier:", 12, CFSTR("(active)"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSTeachableMomentsContainerViewController homeAffordanceViewController](self->_teachableMomentsContainerViewController, "homeAffordanceViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "homeAffordanceView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setStyle:", objc_msgSend(v4, "viewStyle"));
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3221225472;
  v25[2] = __51__CSCoverSheetViewController__updateHomeAffordance__block_invoke;
  v25[3] = &unk_1E8E2DC00;
  v7 = v4;
  v26 = v7;
  v27 = self;
  v8 = (void (**)(_QWORD))MEMORY[0x1D17E1614](v25);
  objc_msgSend(v7, "suppressTeachableMomentsAnimation");
  -[CSTeachableMomentsContainerViewController setAnimationState:](self->_teachableMomentsContainerViewController, "setAnimationState:", BSSettingFlagIsYes() ^ 1);
  objc_msgSend(v7, "alpha");
  v10 = v9;
  objc_msgSend(v6, "alpha");
  IsZero = BSFloatIsZero();
  v12 = objc_msgSend(v7, "isHidden");
  if (-[CSCoverSheetViewController _appearState](self, "_appearState") == 2)
    v13 = BSFloatIsOne() & (v12 ^ 1);
  else
    v13 = 0;
  -[CSCoverSheetContextProviding assistantController](self->_coverSheetContext, "assistantController");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "isSystemAssistantExperienceHomeAffordanceDoubleTapGestureEnabled");

  objc_msgSend(v5, "setHomeAffordanceInteractionEnabled:", v13 & v15);
  objc_msgSend(v6, "setSystemPointerInteractionEnabled:", v13);
  if (IsZero != v12)
  {
    SBLogDashBoard();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      v29 = IsZero ^ 1;
      v30 = 1024;
      v31 = v12 ^ 1;
      _os_log_impl(&dword_1D0337000, v16, OS_LOG_TYPE_DEFAULT, "DashBoard home affordance transitioning from visible: %{BOOL}d to visible:%{BOOL}d", buf, 0xEu);
    }

  }
  if (((IsZero ^ 1 | v12) & 1) != 0)
  {
    objc_msgSend(v6, "setAlpha:", v10);
    v8[2](v8);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0DA9E28], "rootSettings");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "unhideForHomeGestureOwnershipAnimationSettings");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "BSAnimationSettings");
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    v20 = (void *)MEMORY[0x1E0D01908];
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = __51__CSCoverSheetViewController__updateHomeAffordance__block_invoke_436;
    v21[3] = &unk_1E8E2E818;
    v22 = v6;
    v24 = v10;
    v23 = v8;
    objc_msgSend(v20, "animateWithSettings:actions:completion:", v19, v21, 0);

  }
}

void __51__CSCoverSheetViewController__updateHomeAffordance__block_invoke(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  id v8;

  objc_msgSend(*(id *)(a1 + 32), "offset");
  v3 = v2;
  v5 = v4;
  objc_msgSend(*(id *)(a1 + 32), "scale");
  v7 = v6;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1384), "homeAffordanceViewController");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setHomeAffordanceOffset:scale:", v3, v5, v7);

}

uint64_t __51__CSCoverSheetViewController__updateHomeAffordance__block_invoke_436(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setAlpha:", *(double *)(a1 + 48));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

- (void)_updateControlCenterGrabber
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  double v7;
  double v8;
  void *v9;
  void *v10;
  id v11;

  -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "componentForType:identifier:", 13, CFSTR("(active)"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSTeachableMomentsContainerViewController teachableMomentsContainerView](self->_teachableMomentsContainerViewController, "teachableMomentsContainerView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "controlCenterGlyphView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "controlCenterGrabberView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "alpha");
  v8 = v7;
  objc_msgSend(v6, "setAlpha:");
  objc_msgSend(v5, "setAlpha:", v8);
  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "scale");
  objc_msgSend(v9, "setControlCenterGrabberScale:");

  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "blurRadius");
  objc_msgSend(v10, "setControlCenterGrabberBlurRadius:");

}

- (void)_updateQuickActions
{
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  void *v11;
  id v12;

  -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
  v12 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "componentForType:identifier:", 14, CFSTR("(active)"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSQuickActionsViewController setSuppressingVisibleChanges:](self->_quickActionsViewController, "setSuppressingVisibleChanges:", objc_msgSend(v3, "flag") != 0);
  -[CSQuickActionsViewController view](self->_quickActionsViewController, "view");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "alpha");
  objc_msgSend(v4, "setAlpha:");

  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "offset");
  v7 = v6;
  v9 = v8;
  objc_msgSend(v3, "scale");
  objc_msgSend(v5, "setQuickActionsViewOffset:scale:", v7, v9, v10);

  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "blurRadius");
  objc_msgSend(v11, "setQuickActionsViewBlurRadius:");

}

- (BOOL)_quickActionsSupported
{
  return +[CSQuickActionsViewController deviceSupportsButtons](CSQuickActionsViewController, "deviceSupportsButtons");
}

- (void)_updateContent
{
  void *v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  id v10;

  -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "componentForType:identifier:", 15, CFSTR("(active)"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "offset");
  v6 = v5;
  v8 = v7;
  objc_msgSend(v3, "scale");
  objc_msgSend(v4, "setContentViewOffset:scale:", v6, v8, v9);

}

- (void)_updateScrollingBehavior
{
  uint64_t hasContentAboveCoverSheet;
  void *v4;
  uint64_t v5;
  id v6;

  hasContentAboveCoverSheet = self->_hasContentAboveCoverSheet;
  -[CSCoverSheetViewController localBehavior](self, "localBehavior");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "scrollingStrategy");

  if (v5 != hasContentAboveCoverSheet)
  {
    -[CSCoverSheetViewController localBehavior](self, "localBehavior");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setScrollingStrategy:", hasContentAboveCoverSheet);

  }
}

- (void)_updateIdleTimerBehavior
{
  void *v3;
  char v4;
  void *v5;
  int v6;
  void *v7;
  uint64_t v8;
  id v9;

  -[CSCoverSheetViewController mainPageContentViewController](self, "mainPageContentViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isPresentingContent");

  -[CSCoverSheetViewController modalPresentationController](self, "modalPresentationController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isPresentingContent");

  -[CSCoverSheetViewController localBehavior](self, "localBehavior");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (!self->_screenOnForLiftToWake || (v4 & 1) != 0 || v6)
  {
    if (self->_contentAboveIsSiriOrNotFullScreenOniPad)
      v8 = 4;
    else
      v8 = 1;
  }
  else
  {
    v8 = 2;
  }
  v9 = v7;
  objc_msgSend(v7, "setIdleTimerDuration:", v8);

}

- (void)_updateWallpaperEffectView
{
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;

  -[CSCoverSheetContextProviding wallpaperProvider](self->_coverSheetContext, "wallpaperProvider");
  v22 = (id)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "componentForType:identifier:", 6, CFSTR("(active)"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_opt_class();
  v6 = v4;
  if (v5)
  {
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v7 = v6;
    else
      v7 = 0;
  }
  else
  {
    v7 = 0;
  }
  v8 = v7;

  if (v8 && (objc_msgSend(v8, "isHidden") & 1) == 0)
  {
    -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "wallpaperEffectView");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v12)
    {
      objc_msgSend(v22, "createCoverSheetWallpaperView");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      -[CSCoverSheetViewController suspendWallpaperAnimationAssertion](self, "suspendWallpaperAnimationAssertion");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "invalidate");

      -[CSCoverSheetViewController coverSheetIdentifier](self, "coverSheetIdentifier");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "suspendWallpaperAnimationForReason:", v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      -[CSCoverSheetViewController setSuspendWallpaperAnimationAssertion:](self, "setSuspendWallpaperAnimationAssertion:", v16);

      -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "setWallpaperEffectView:", v13);

    }
    if (objc_msgSend(v8, "shouldMatchBackgroundStyle"))
    {
      -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "backgroundView");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = objc_msgSend(v19, "backgroundStyle");

    }
    else
    {
      v20 = 1;
    }
    -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "wallpaperEffectView");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "setBackgroundStyle:", v20);

  }
  else
  {
    -[CSCoverSheetViewController suspendWallpaperAnimationAssertion](self, "suspendWallpaperAnimationAssertion");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "invalidate");

    -[CSCoverSheetViewController setSuspendWallpaperAnimationAssertion:](self, "setSuspendWallpaperAnimationAssertion:", 0);
    -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setWallpaperEffectView:", 0);
  }

}

- (void)_updateWallpaperFloatingLayerContainerView
{
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  char v8;
  int v9;
  BSInvalidatable *floatingLayerView;
  BSInvalidatable *v11;
  void *v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  id v19;
  _QWORD v20[5];

  -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
  v19 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "componentForType:identifier:", 23, CFSTR("(active)"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_opt_class();
  v5 = v3;
  if (v4)
  {
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v6 = v5;
    else
      v6 = 0;
  }
  else
  {
    v6 = 0;
  }
  v7 = v6;

  if (objc_msgSend(v7, "shouldRenderInline"))
    v8 = objc_msgSend(v7, "shouldRenderForPosterSwitcher") ^ 1;
  else
    v8 = 0;
  v9 = -[CSCoverSheetViewController _appearState](self, "_appearState");
  floatingLayerView = self->_floatingLayerView;
  if (!v9 || (v8 & 1) != 0)
  {
    if (floatingLayerView)
    {
      -[BSInvalidatable invalidate](floatingLayerView, "invalidate");
      -[BSInvalidatable removeFromSuperview](self->_floatingLayerView, "removeFromSuperview");
      v11 = self->_floatingLayerView;
      self->_floatingLayerView = 0;

    }
  }
  else if (!floatingLayerView)
  {
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = __72__CSCoverSheetViewController__updateWallpaperFloatingLayerContainerView__block_invoke;
    v20[3] = &unk_1E8E2DB38;
    v20[4] = self;
    objc_msgSend(MEMORY[0x1E0CEABB0], "performWithoutAnimation:", v20);
  }
  if (self->_floatingLayerView)
    -[BSInvalidatable setShouldMatchWallpaperPosition:](self->_floatingLayerView, "setShouldMatchWallpaperPosition:", objc_msgSend(v7, "shouldMatchMove"));
  -[CSCoverSheetViewController posterSwitcherViewController](self, "posterSwitcherViewController");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setCoverSheetWallpaperFloatingLayerInlined:", objc_msgSend(v7, "shouldRenderInline"));

  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "offset");
  v15 = v14;
  v17 = v16;
  objc_msgSend(v7, "scale");
  objc_msgSend(v13, "setWallpaperFloatingLayerContainerViewOffset:scale:", v15, v17, v18);
  objc_msgSend(v13, "setWallpaperFloatingLayerPresentationLevel:", objc_msgSend(v7, "level"));
  objc_msgSend(v13, "setDateTimePresentationLevel:", objc_msgSend(v7, "level"));

}

void __72__CSCoverSheetViewController__updateWallpaperFloatingLayerContainerView__block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1040), "wallpaperProvider");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "coverSheetView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "wallpaperFloatingLayerContainerView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = (objc_class *)objc_opt_class();
  NSStringFromClass(v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "createWallpaperFloatingViewForReason:ignoreReplica:", v5, 0);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(v7 + 1472);
  *(_QWORD *)(v7 + 1472) = v6;

  v9 = *(void **)(*(_QWORD *)(a1 + 32) + 1472);
  objc_msgSend(v3, "bounds");
  objc_msgSend(v9, "setFrame:");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1472), "setAutoresizingMask:", 18);
  objc_msgSend(v3, "addSubview:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1472));

}

- (void)_updateBackgroundContentView
{
  void *v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  void *v10;
  void *v11;
  id v12;

  -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
  v12 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "componentForType:identifier:", 24, CFSTR("(active)"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "offset");
    v6 = v5;
    v8 = v7;
    objc_msgSend(v3, "scale");
    objc_msgSend(v4, "setBackgroundContentViewOffset:scale:", v6, v8, v9);

    -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "alpha");
    objc_msgSend(v10, "setBackgroundContentViewAlpha:");

    -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setBackgroundContentPresentationLevel:", objc_msgSend(v3, "level"));

  }
}

- (void)_updateComplicationsContainerView
{
  void *v3;
  void *v4;
  double v5;
  void *v6;
  void *v7;
  int IsZero;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
  v13 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "componentForType:identifier:", 20, CFSTR("(active)"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    -[CSCoverSheetViewController complicationContainerViewController](self, "complicationContainerViewController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (v4)
    {
      if (objc_msgSend(v3, "isHidden"))
        v5 = 0.0;
      else
        v5 = 1.0;
      -[CSCoverSheetViewController complicationContainerViewController](self, "complicationContainerViewController");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "view");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "alpha");
      IsZero = BSFloatIsZero();

      -[CSCoverSheetViewController complicationContainerViewController](self, "complicationContainerViewController");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "view");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "setAlpha:", v5);

      if (IsZero != objc_msgSend(v3, "isHidden"))
      {
        -[CSCoverSheetViewController mainPageContentViewController](self, "mainPageContentViewController");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "combinedListViewController");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "layoutListView");

      }
    }
  }
  -[CSCoverSheetViewController _updatePosterSwitcherComplicationRowHidden](self, "_updatePosterSwitcherComplicationRowHidden");

}

- (void)_updateComplicationSidebar
{
  void *v3;
  void *v4;
  double v5;
  double v6;
  void *v7;
  void *v8;
  _BOOL8 v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
  v13 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "componentForType:identifier:", 25, CFSTR("(active)"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    -[CSCoverSheetViewController sidebarComplicationContainerViewController](self, "sidebarComplicationContainerViewController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (v4)
    {
      objc_msgSend(v3, "alpha");
      v6 = v5;
      -[CSCoverSheetViewController sidebarComplicationContainerViewController](self, "sidebarComplicationContainerViewController");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "view");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setAlpha:", v6);

    }
  }
  v9 = -[CSWidgetGridViewController containsIconsInRow:](self->_sidebarComplicationContainerViewController, "containsIconsInRow:", 0);
  -[CSPoseidonViewController poseidonContainerViewController](self->_poseidonViewController, "poseidonContainerViewController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "updateContainsFirstRowIcons:", v9);

  -[CSPoseidonViewController poseidonContainerViewController](self->_poseidonViewController, "poseidonContainerViewController");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSWidgetGridViewController view](self->_sidebarComplicationContainerViewController, "view");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "frame");
  objc_msgSend(v11, "updateSidebarComplicationFrame:");

}

- (void)_updateTintingView
{
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  id v8;

  -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "componentForType:property:", 7, 1);
  v8 = (id)objc_claimAutoreleasedReturnValue();

  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "tintingView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8 && (objc_msgSend(v8, "isHidden") & 1) == 0)
  {
    objc_msgSend(v8, "alpha");
    v7 = v6;
    objc_msgSend(v5, "setHidden:", 0);
    objc_msgSend(v5, "setAlpha:", v7);
  }
  else
  {
    objc_msgSend(v5, "setHidden:", 1);
  }

}

- (void)_updateStatusBarGradient
{
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;

  -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "componentForType:property:", 16, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isHidden");

  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "updateStatusBarLegibilityForForceLegibilityGradientHidden:", v5);

}

- (void)_updatePoseidon
{
  void *v3;
  void *v4;
  id v5;

  -[CSPoseidonViewController poseidonView](self->_poseidonViewController, "poseidonView");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "componentForType:identifier:", 17, CFSTR("(active)"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "alpha");
  objc_msgSend(v5, "setAlpha:");

}

- (void)_updateWhitePoint
{
  void *v3;
  int v4;
  int v5;
  int v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  NSObject *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD v23[5];
  _QWORD block[5];
  NSObject *v25;
  _QWORD v26[2];

  v26[1] = *MEMORY[0x1E0C80C00];
  -[CSCoverSheetViewController previousAppearance](self, "previousAppearance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[CSCoverSheetViewController _shouldReduceWhitePointForAppearance:](self, "_shouldReduceWhitePointForAppearance:", v3);

  v5 = -[CSCoverSheetViewController _shouldReduceWhitePoint](self, "_shouldReduceWhitePoint");
  if (v4 != v5)
  {
    v6 = v5;
    -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "componentForType:property:", 18, 1024);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      objc_msgSend(v8, "animationDuration");
      v10 = v9;
    }
    else
    {
      v10 = 0.0;
    }
    if (v6)
    {
      -[CSCoverSheetViewController _whitePointValues](self, "_whitePointValues");
      v11 = objc_claimAutoreleasedReturnValue();
      if (v10 <= 0.0)
      {
        -[CSCoverSheetViewController view](self, "view");
        v12 = objc_claimAutoreleasedReturnValue();
        -[NSObject layer](v12, "layer");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        -[CSCoverSheetViewController _whitePointReductionFilterFromValues:](self, "_whitePointReductionFilterFromValues:", v11);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v26[0] = v19;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v26, 1);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "setFilters:", v20);

      }
      else
      {
        v12 = dispatch_group_create();
        -[CSCoverSheetViewController view](self, "view");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        -[CSCoverSheetViewController _animateView:toWhitePointReduced:withDuration:withDispatchGroup:](self, "_animateView:toWhitePointReduced:withDuration:withDispatchGroup:", v13, 1, v12, v10);

        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = __47__CSCoverSheetViewController__updateWhitePoint__block_invoke;
        block[3] = &unk_1E8E2DC00;
        block[4] = self;
        v25 = v11;
        dispatch_group_notify(v12, MEMORY[0x1E0C80D38], block);

      }
    }
    else
    {
      -[CSCoverSheetViewController view](self, "view");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "layer");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "filters");
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v16)
      {
LABEL_14:

        return;
      }
      if (v10 <= 0.0)
      {
        -[CSCoverSheetViewController view](self, "view");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "layer");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "setFilters:", 0);

        goto LABEL_14;
      }
      v11 = dispatch_group_create();
      -[CSCoverSheetViewController view](self, "view");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      -[CSCoverSheetViewController _animateView:toWhitePointReduced:withDuration:withDispatchGroup:](self, "_animateView:toWhitePointReduced:withDuration:withDispatchGroup:", v17, 0, v11, v10);

      v23[0] = MEMORY[0x1E0C809B0];
      v23[1] = 3221225472;
      v23[2] = __47__CSCoverSheetViewController__updateWhitePoint__block_invoke_2;
      v23[3] = &unk_1E8E2DB38;
      v23[4] = self;
      dispatch_group_notify(v11, MEMORY[0x1E0C80D38], v23);
    }

    goto LABEL_14;
  }
}

void __47__CSCoverSheetViewController__updateWhitePoint__block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldReduceWhitePoint"))
  {
    objc_msgSend(*(id *)(a1 + 32), "view");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "layer");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "_whitePointReductionFilterFromValues:", *(_QWORD *)(a1 + 40));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v6[0] = v4;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v6, 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setFilters:", v5);

  }
}

void __47__CSCoverSheetViewController__updateWhitePoint__block_invoke_2(uint64_t a1)
{
  void *v2;
  id v3;

  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldReduceWhitePoint") & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "view");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "layer");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setFilters:", 0);

  }
}

- (void)_updateFullBleedContent
{
  void *v3;
  int IsYes;
  void *v5;
  id v6;

  -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "flagForComponentType:", 26);
  IsYes = BSSettingFlagIsYes();

  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setClipsToBounds:", IsYes ^ 1u);
  objc_msgSend(v6, "window");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setClipsToBounds:", IsYes ^ 1u);

}

- (void)_updateDimmingLayer
{
  void *v3;
  void *v4;
  double v5;
  double v6;
  void *v7;
  id v8;

  -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "componentForType:identifier:", 27, CFSTR("(active)"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    -[CSCoverSheetViewController dateViewController](self, "dateViewController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (v4)
    {
      objc_msgSend(v3, "alpha");
      v6 = v5;
      -[CSCoverSheetViewController dateViewController](self, "dateViewController");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "setDimmingViewAlpha:", v6);

    }
  }

}

- (void)_animateView:(id)a3 toWhitePointReduced:(BOOL)a4 withDuration:(double)a5 withDispatchGroup:(id)a6
{
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  v9 = a6;
  objc_msgSend(a3, "layer");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10)
  {
    -[CSCoverSheetViewController _whitePointValues](self, "_whitePointValues");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSCoverSheetViewController _addWhitePointAnimationForKeyPath:onLayer:toValues:withDuration:dispatchGroup:](self, "_addWhitePointAnimationForKeyPath:onLayer:toValues:withDuration:dispatchGroup:", CFSTR("filters.curves.inputRedValues"), v10, v11, v9, a5);
    -[CSCoverSheetViewController _addWhitePointAnimationForKeyPath:onLayer:toValues:withDuration:dispatchGroup:](self, "_addWhitePointAnimationForKeyPath:onLayer:toValues:withDuration:dispatchGroup:", CFSTR("filters.curves.inputGreenValues"), v10, v11, v9, a5);
    -[CSCoverSheetViewController _addWhitePointAnimationForKeyPath:onLayer:toValues:withDuration:dispatchGroup:](self, "_addWhitePointAnimationForKeyPath:onLayer:toValues:withDuration:dispatchGroup:", CFSTR("filters.curves.inputBlueValues"), v10, v11, v9, a5);
    -[CSCoverSheetViewController view](self, "view");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "layer");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSCoverSheetViewController _whitePointReductionFilterFromValues:](self, "_whitePointReductionFilterFromValues:", v11);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v16[0] = v14;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v16, 1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setFilters:", v15);

  }
}

- (BOOL)_shouldReduceWhitePoint
{
  CSCoverSheetViewController *v2;
  void *v3;

  v2 = self;
  -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v2) = -[CSCoverSheetViewController _shouldReduceWhitePointForAppearance:](v2, "_shouldReduceWhitePointForAppearance:", v3);

  return (char)v2;
}

- (BOOL)_shouldReduceWhitePointForAppearance:(id)a3
{
  void *v3;
  char v4;

  objc_msgSend(a3, "componentForType:property:", 18, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isHidden") ^ 1;

  return v4;
}

- (id)_whitePointValues
{
  void *v3;
  void *v4;

  -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController _whitePointValuesForAppearance:](self, "_whitePointValuesForAppearance:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (id)_whitePointValuesForAppearance:(id)a3
{
  id v4;
  _BOOL8 v5;
  void *v6;
  int v7;
  uint64_t v8;
  void *v9;

  v4 = a3;
  v5 = -[CSCoverSheetViewController _shouldReduceWhitePointForAppearance:](self, "_shouldReduceWhitePointForAppearance:", v4);
  if (v5)
  {
    objc_msgSend(v4, "componentForType:identifier:", 18, CFSTR("(active)"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (UIAccessibilityDarkerSystemColorsEnabled())
      v7 = 1;
    else
      v7 = _UIAccessibilityReduceWhitePoint();
    objc_msgSend(v6, "flag");
    v8 = BSSettingFlagIsYes() | v7;

  }
  else
  {
    v8 = 0;
  }
  -[CSCoverSheetViewController _filterValuesForWhitePointReduced:lighterReduction:](self, "_filterValuesForWhitePointReduced:lighterReduction:", v5, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

- (id)_filterValuesForWhitePointReduced:(BOOL)a3 lighterReduction:(BOOL)a4
{
  _BOOL4 v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD *v15;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD v21[4];
  _QWORD v22[5];

  v22[4] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return &unk_1E8E89730;
  v4 = a4;
  -[CSLockScreenSettings dashBoardRemoteContentSettings](self->_prototypeSettings, "dashBoardRemoteContentSettings");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  v7 = (void *)MEMORY[0x1E0CB37E8];
  if (v4)
  {
    objc_msgSend(v5, "lighterBottomLuminanceValue");
    objc_msgSend(v7, "numberWithDouble:");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v22[0] = v8;
    v9 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(v6, "lighterLowerLuminanceValue");
    objc_msgSend(v9, "numberWithDouble:");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v22[1] = v10;
    v11 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(v6, "lighterUpperLuminanceValue");
    objc_msgSend(v11, "numberWithDouble:");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v22[2] = v12;
    v13 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(v6, "lighterTopLuminanceValue");
    objc_msgSend(v13, "numberWithDouble:");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v22[3] = v14;
    v15 = v22;
  }
  else
  {
    objc_msgSend(v5, "bottomLuminanceValue");
    objc_msgSend(v7, "numberWithDouble:");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v21[0] = v8;
    v17 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(v6, "lowerLuminanceValue");
    objc_msgSend(v17, "numberWithDouble:");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v21[1] = v10;
    v18 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(v6, "upperLuminanceValue");
    objc_msgSend(v18, "numberWithDouble:");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v21[2] = v12;
    v19 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(v6, "topLuminanceValue");
    objc_msgSend(v19, "numberWithDouble:");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v21[3] = v14;
    v15 = v21;
  }
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v15, 4);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  return v20;
}

- (void)_addWhitePointAnimationForKeyPath:(id)a3 onLayer:(id)a4 toValues:(id)a5 withDuration:(double)a6 dispatchGroup:(id)a7
{
  NSObject *v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;

  v19 = a3;
  v12 = a7;
  v13 = a5;
  v14 = a4;
  objc_msgSend(v14, "presentationLayer");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "valueForKeyPath:", v19);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
    dispatch_group_enter(v12);
  if (!v16)
    v16 = &unk_1E8E89748;
  objc_msgSend(MEMORY[0x1E0CD2710], "animationWithKeyPath:", v19);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setDuration:", a6);
  objc_msgSend(MEMORY[0x1E0CD27D0], "functionWithName:", *MEMORY[0x1E0CD3048]);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setTimingFunction:", v18);

  objc_msgSend(v17, "setFromValue:", v16);
  objc_msgSend(v17, "setToValue:", v13);

  objc_msgSend(v17, "setValue:forKey:", v12, CFSTR("CSCoverSheetWhitePointDispatchGroup"));
  objc_msgSend(v17, "setDelegate:", self);
  objc_msgSend(v14, "removeAnimationForKey:", v19);
  objc_msgSend(v14, "addAnimation:forKey:", v17, v19);

}

- (id)_whitePointReductionFilterFromValues:(id)a3
{
  objc_class *v3;
  id v4;
  id v5;
  void *v6;

  v3 = (objc_class *)MEMORY[0x1E0CD2780];
  v4 = a3;
  v5 = [v3 alloc];
  v6 = (void *)objc_msgSend(v5, "initWithType:", *MEMORY[0x1E0CD2C20]);
  objc_msgSend(v6, "setValue:forKey:", v4, CFSTR("inputRedValues"));
  objc_msgSend(v6, "setValue:forKey:", v4, CFSTR("inputGreenValues"));
  objc_msgSend(v6, "setValue:forKey:", v4, CFSTR("inputBlueValues"));

  return v6;
}

- (void)_removeReduceWhitePointAnimationForKeyPath:(id)a3 onLayer:(id)a4
{
  objc_msgSend(a4, "removeAnimationForKey:", a3);
}

- (void)_updateIdleTimerForTransitionProgress:(double)a3
{
  void *v3;
  int v6;
  _BOOL4 screenOffMode;
  int v8;
  char v9;
  void *v10;
  double v11;
  double v12;
  NSObject *v13;
  void *v14;
  id WeakRetained;
  int v16;
  double v17;
  __int16 v18;
  double v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = -[CSCoverSheetViewController _appearState](self, "_appearState");
  screenOffMode = self->_screenOffMode;
  v8 = __sb__runningInSpringBoard();
  v9 = v8;
  if (v8)
  {
    if (SBFEffectiveDeviceClass() != 2)
    {
LABEL_3:
      -[CSLockScreenSettings idleTimerSettings](self->_prototypeSettings, "idleTimerSettings");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "unlockSlideForIdleTimerDisabledPercentage");
      goto LABEL_6;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v3, "userInterfaceIdiom") != 1)
      goto LABEL_3;
  }
  -[CSLockScreenSettings idleTimerSettings](self->_prototypeSettings, "idleTimerSettings");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "unlockSlideForIdleTimerDisabledPercentageIPad");
LABEL_6:
  v12 = v11;

  if ((v9 & 1) == 0)
  SBLogDashBoard();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    v16 = 134218240;
    v17 = a3;
    v18 = 2048;
    v19 = v12;
    _os_log_impl(&dword_1D0337000, v13, OS_LOG_TYPE_INFO, "transitionProgress: %f, percentThreshold: %f", (uint8_t *)&v16, 0x16u);
  }

  if (!screenOffMode && (v6 - 3) >= 0xFFFFFFFE && v12 < a3 && !self->_transitionDisabledIdleTimer)
  {
    +[CSAction actionWithType:](CSAction, "actionWithType:", 4);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSCoverSheetViewController handleAction:fromSender:](self, "handleAction:fromSender:", v14, self);

    WeakRetained = objc_loadWeakRetained((id *)&self->_idleTimerController);
    objc_msgSend(WeakRetained, "addIdleTimerDisabledAssertionReason:", CFSTR("CSCoverSheetTransitioningReason"));

    self->_transitionDisabledIdleTimer = 1;
  }
}

- (void)animationDidStop:(id)a3 finished:(BOOL)a4
{
  NSObject *v4;
  NSObject *v5;

  objc_msgSend(a3, "valueForKey:", CFSTR("CSCoverSheetWhitePointDispatchGroup"), a4);
  v4 = objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v5 = v4;
    dispatch_group_leave(v4);
    v4 = v5;
  }

}

- (void)_updateLegibilitySettings
{
  void *v3;
  id WeakRetained;
  id v5;

  -[CSAppearance legibilitySettings](self->_activeAppearance, "legibilitySettings");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setLegibilitySettings:", v5);

  -[SBFLockScreenDateViewController setLegibilitySettings:](self->_dateViewController, "setLegibilitySettings:", v5);
  WeakRetained = objc_loadWeakRetained((id *)&self->_coverSheetSpotlightPresenter);
  objc_msgSend(WeakRetained, "setLegibilitySettings:", v5);

}

- (void)updateStatusBarForLockScreenTeardown
{
  void *v3;
  UIStatusBar *fakeStatusBar;
  void *v5;
  id v6;

  objc_msgSend((id)*MEMORY[0x1E0CEB258], "statusBar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setMode:", 0);

  -[UIStatusBar setMode:](self->_fakeStatusBar, "setMode:", 0);
  -[CSCoverSheetContextProviding statusBarController](self->_coverSheetContext, "statusBarController");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "destroyFakeStatusBar:", self->_fakeStatusBar);
  fakeStatusBar = self->_fakeStatusBar;
  self->_fakeStatusBar = 0;

  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setFakeStatusBar:", 0);

  self->_statusBarInLockdownForTeardown = 1;
  -[CSCoverSheetViewController _invalidateStatusBarAssertions](self, "_invalidateStatusBarAssertions");

}

- (void)updateStatusBarForLockScreenComeback
{
  void *v3;
  UIStatusBar *fakeStatusBar;
  UIStatusBar *v5;
  UIStatusBar *v6;
  void *v7;
  id v8;

  objc_msgSend((id)*MEMORY[0x1E0CEB258], "statusBar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setMode:", 2);

  fakeStatusBar = self->_fakeStatusBar;
  if (!fakeStatusBar)
  {
    -[CSCoverSheetViewController _createFakeStatusBar](self, "_createFakeStatusBar");
    v5 = (UIStatusBar *)objc_claimAutoreleasedReturnValue();
    v6 = self->_fakeStatusBar;
    self->_fakeStatusBar = v5;

    fakeStatusBar = self->_fakeStatusBar;
  }
  -[UIStatusBar setMode:](fakeStatusBar, "setMode:", 2);
  if (self->_wantsStatusBarLockItemDisabled)
  {
    -[CSCoverSheetContextProviding statusBarController](self->_coverSheetContext, "statusBarController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setStatusBarPart:hidden:animationDuration:", 1, 1, 0.0);

  }
  self->_statusBarInLockdownForTeardown = 0;
  -[CSCoverSheetViewController _updateActiveAppearanceForReason:](self, "_updateActiveAppearanceForReason:", CFSTR("DashBoard Come Back"));
  -[CSTeachableMomentsContainerViewController view](self->_teachableMomentsContainerViewController, "view");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setNeedsLayout");

}

- (void)_invalidateStatusBarAssertions
{
  id v2;

  -[CSCoverSheetContextProviding statusBarController](self->_coverSheetContext, "statusBarController");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setStatusBarHidden:forReason:", 0, CFSTR("CSCoverSheetFakeStatusBar"));
  objc_msgSend(v2, "clearStatusBarParameters");

}

- (BOOL)_isFakeStatusBarEnabled
{
  void *v2;
  void *v3;
  BOOL v4;

  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "fakeStatusBar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3 != 0;

  return v4;
}

- (void)_setFakeStatusBarEnabled:(BOOL)a3
{
  _BOOL4 v3;
  void *v5;
  uint64_t v6;
  void *v7;
  int v8;
  int v9;
  void *v10;
  void *v11;
  UIStatusBar *fakeStatusBar;
  id v13;

  v3 = a3;
  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v13 = (id)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetContextProviding statusBarController](self->_coverSheetContext, "statusBarController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "fakeStatusBar");
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)v6;
  v8 = !v3;
  if (v6)
    v9 = 1;
  else
    v9 = !v3;
  if ((v9 & 1) == 0)
  {
    -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10;
    fakeStatusBar = self->_fakeStatusBar;
    goto LABEL_10;
  }
  if (!v6)
    v8 = 0;
  if (v8 == 1)
  {
    -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10;
    fakeStatusBar = 0;
LABEL_10:
    objc_msgSend(v10, "setFakeStatusBar:", fakeStatusBar);

    objc_msgSend(v5, "setStatusBarHidden:forReason:", v9 ^ 1u, CFSTR("CSCoverSheetFakeStatusBar"));
  }

}

- (id)_createFakeStatusBar
{
  void *v3;
  double v4;
  double v5;
  void *v6;
  id *v7;
  double v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  void *v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "bounds");
  v5 = v4;

  -[CSCoverSheetContextProviding statusBarController](self->_coverSheetContext, "statusBarController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (id *)MEMORY[0x1E0CEB258];
  objc_msgSend((id)*MEMORY[0x1E0CEB258], "statusBarHeight");
  objc_msgSend(v6, "createFakeStatusBarWithReason:withFrame:", CFSTR("SBDashBoardFakeStatusBar"), 0.0, 0.0, v5, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v20 = &unk_1E8E8A360;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[CSCoverSheetViewController shouldShowLockStatusBarTime](self, "shouldShowLockStatusBarTime"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v21[0] = v10;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v21, &v20, 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setEnabledCenterItems:duration:", v11, 0.0);

  objc_msgSend(v9, "setOrientation:", objc_msgSend(*v7, "activeInterfaceOrientation"));
  -[CSCoverSheetViewController _fakeStatusBarSettings](self, "_fakeStatusBarSettings");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setStyleRequest:", v12);

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v13 = objc_alloc(MEMORY[0x1E0DB0970]);
    objc_msgSend(MEMORY[0x1E0DB09F0], "disabledEntry");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = (id)objc_msgSend(v13, "initWithEntry:forKey:", v14, *MEMORY[0x1E0DB0D40]);

    objc_msgSend(v9, "statusBar");
    v16 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setOverlayData:", v15);
  }
  else
  {
    v15 = objc_alloc_init(MEMORY[0x1E0CEAED8]);
    v16 = objc_alloc_init(MEMORY[0x1E0CEAEE0]);
    objc_msgSend(v16, "setEnabled:", 0);
    objc_msgSend(MEMORY[0x1E0CEAEE0], "disabledEntry");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "setSensorActivityEntry:", v17);

    objc_msgSend(v9, "statusBar");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "setOverlayData:", v15);

  }
  return v9;
}

- (id)_fakeStatusBarSettings
{
  void *v3;
  int64_t v4;
  void *v5;
  void *v6;

  -[CSCoverSheetContextProviding statusBarController](self->_coverSheetContext, "statusBarController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[CSCoverSheetViewController statusBarStyle](self, "statusBarStyle");
  -[CSCoverSheetViewControllerBase legibilitySettings](self, "legibilitySettings");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "effectiveStatusBarStyleRequestForAlpha:style:legibilitySettings:", 0, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (void)_createStatusBarBackgroundViewIfNeeded
{
  double v3;
  uint64_t v4;
  UIView *v5;
  UIView *statusBarBackgroundView;
  _QWORD v7[5];

  if (!self->_statusBarBackgroundView)
  {
    objc_msgSend(MEMORY[0x1E0CEA9E8], "heightForStyle:orientation:", 300, 1);
    if (v3 <= 20.0)
      v4 = 6;
    else
      v4 = 5;
    v5 = (UIView *)objc_msgSend(objc_alloc(MEMORY[0x1E0DA9E00]), "initWithRecipe:", v4);
    statusBarBackgroundView = self->_statusBarBackgroundView;
    self->_statusBarBackgroundView = v5;

    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __68__CSCoverSheetViewController__createStatusBarBackgroundViewIfNeeded__block_invoke;
    v7[3] = &unk_1E8E2DB38;
    v7[4] = self;
    objc_msgSend(MEMORY[0x1E0CEABB0], "performWithoutAnimation:", v7);
  }
}

uint64_t __68__CSCoverSheetViewController__createStatusBarBackgroundViewIfNeeded__block_invoke(uint64_t a1)
{
  void *v2;

  objc_msgSend(*(id *)(a1 + 32), "coverSheetView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setStatusBarBackgroundView:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 2088));

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2088), "setAlpha:", 0.0);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2088), "layoutIfNeeded");
}

- (void)_setupQuickNoteGestureRecognizer
{
  void *v3;
  char v4;
  UITapGestureRecognizer *quickNoteGestureRecognizer;
  void *v6;
  void *v7;
  UITapGestureRecognizer *v8;
  UITapGestureRecognizer *v9;
  UITapGestureRecognizer *v10;
  int v11;
  UITapGestureRecognizer *v12;
  id v13;

  -[CSCoverSheetViewController activeBehavior](self, "activeBehavior");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "areRestrictedCapabilities:", 0x2000);

  quickNoteGestureRecognizer = self->_quickNoteGestureRecognizer;
  if ((v4 & 1) == 0)
  {
    if (quickNoteGestureRecognizer)
    {
      -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "quickNoteGestureRecognizer");
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      if (v7)
        return;
      v8 = self->_quickNoteGestureRecognizer;
    }
    else
    {
      v8 = 0;
    }
    -[UITapGestureRecognizer setDelegate:](v8, "setDelegate:", 0);
    v9 = (UITapGestureRecognizer *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEAA88]), "initWithTarget:action:", self, sel__handleQuickNoteLaunch_);
    v10 = self->_quickNoteGestureRecognizer;
    self->_quickNoteGestureRecognizer = v9;

    -[UITapGestureRecognizer setDelegate:](self->_quickNoteGestureRecognizer, "setDelegate:", self);
    v11 = -[SBLockScreenDefaults showQuickNoteFingerGestureRecognizer](self->_lockScreenDefaults, "showQuickNoteFingerGestureRecognizer");
    v12 = self->_quickNoteGestureRecognizer;
    if (v11)
    {
      -[UITapGestureRecognizer setNumberOfTouchesRequired:](v12, "setNumberOfTouchesRequired:", 2);
      -[UITapGestureRecognizer setNumberOfTapsRequired:](self->_quickNoteGestureRecognizer, "setNumberOfTapsRequired:", 2);
    }
    else
    {
      -[UITapGestureRecognizer setAllowedTouchTypes:](v12, "setAllowedTouchTypes:", &unk_1E8E89760);
      -[UITapGestureRecognizer setAllowableMovement:](self->_quickNoteGestureRecognizer, "setAllowableMovement:", 10.0);
    }
    goto LABEL_12;
  }
  if (quickNoteGestureRecognizer)
  {
    self->_quickNoteGestureRecognizer = 0;

LABEL_12:
    -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
    v13 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setQuickNoteGestureRecognizer:", self->_quickNoteGestureRecognizer);

  }
}

- (void)_handleQuickNoteLaunch:(id)a3
{
  NSObject *v4;
  id WeakRetained;
  uint8_t v6[16];

  SBLogDashBoard();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1D0337000, v4, OS_LOG_TYPE_DEFAULT, "QuickNote gesture recognized.", v6, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)&self->_applicationLauncher);
  objc_msgSend(WeakRetained, "launchQuickNote");

}

- (void)_setupPosterSwitcherGestureRecognizer
{
  void *v3;
  char v4;
  UILongPressGestureRecognizer *posterSwitcherGestureRecognizer;
  void *v6;
  UINotificationFeedbackGenerator *posterSwitcherFeedbackGenerator;
  UINotificationFeedbackGenerator *v8;
  void *v9;
  void *v10;
  UILongPressGestureRecognizer *v11;
  UILongPressGestureRecognizer *v12;
  UILongPressGestureRecognizer *v13;
  void *v14;
  UINotificationFeedbackGenerator *v15;

  -[CSCoverSheetViewController activeBehavior](self, "activeBehavior");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "areRestrictedCapabilities:", 0x800000);

  posterSwitcherGestureRecognizer = self->_posterSwitcherGestureRecognizer;
  if ((v4 & 1) != 0)
  {
    if (posterSwitcherGestureRecognizer)
    {
      self->_posterSwitcherGestureRecognizer = 0;

      -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setDateViewGestureRecognizer:", self->_posterSwitcherGestureRecognizer);

    }
    posterSwitcherFeedbackGenerator = self->_posterSwitcherFeedbackGenerator;
    if (posterSwitcherFeedbackGenerator)
    {
      if (-[UINotificationFeedbackGenerator isActive](posterSwitcherFeedbackGenerator, "isActive"))
        -[UINotificationFeedbackGenerator deactivate](self->_posterSwitcherFeedbackGenerator, "deactivate");
      v8 = self->_posterSwitcherFeedbackGenerator;
      self->_posterSwitcherFeedbackGenerator = 0;
      goto LABEL_16;
    }
    return;
  }
  if (posterSwitcherGestureRecognizer)
  {
    -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "dateViewGestureRecognizer");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (v10)
      goto LABEL_13;
    v11 = self->_posterSwitcherGestureRecognizer;
  }
  else
  {
    v11 = 0;
  }
  -[UILongPressGestureRecognizer setDelegate:](v11, "setDelegate:", 0);
  v12 = (UILongPressGestureRecognizer *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA730]), "initWithTarget:action:", self, sel__handlePosterSwitcherActivation_);
  v13 = self->_posterSwitcherGestureRecognizer;
  self->_posterSwitcherGestureRecognizer = v12;

  -[UILongPressGestureRecognizer setMinimumPressDuration:](self->_posterSwitcherGestureRecognizer, "setMinimumPressDuration:", 0.3);
  -[UILongPressGestureRecognizer setDelegate:](self->_posterSwitcherGestureRecognizer, "setDelegate:", self);
  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setDateViewGestureRecognizer:", self->_posterSwitcherGestureRecognizer);

LABEL_13:
  if (!self->_posterSwitcherFeedbackGenerator)
  {
    v15 = (UINotificationFeedbackGenerator *)objc_alloc_init(MEMORY[0x1E0CEA7D0]);
    v8 = self->_posterSwitcherFeedbackGenerator;
    self->_posterSwitcherFeedbackGenerator = v15;
LABEL_16:

  }
}

- (void)_handlePosterSwitcherActivation:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  CSPosterSwitcherActivationManager *posterSwitcherActivationManager;
  id v9;
  _QWORD v10[5];
  _QWORD v11[5];
  id v12;
  uint8_t buf[16];

  v4 = a3;
  if (objc_msgSend(v4, "state") == 1)
  {
    SBLogDashBoard();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D0337000, v5, OS_LOG_TYPE_DEFAULT, "Poster Switcher gesture recognized.", buf, 2u);
    }

    objc_msgSend(v4, "touches");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (void *)objc_msgSend(v6, "copy");

    posterSwitcherActivationManager = self->_posterSwitcherActivationManager;
    v10[4] = self;
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __62__CSCoverSheetViewController__handlePosterSwitcherActivation___block_invoke;
    v11[3] = &unk_1E8E2DC00;
    v11[4] = self;
    v12 = v7;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __62__CSCoverSheetViewController__handlePosterSwitcherActivation___block_invoke_2;
    v10[3] = &unk_1E8E2E840;
    v9 = v7;
    -[CSPosterSwitcherActivationManager activateWithHandler:onFailure:](posterSwitcherActivationManager, "activateWithHandler:onFailure:", v11, v10);

  }
}

void __62__CSCoverSheetViewController__handlePosterSwitcherActivation___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1040), "wallpaperSnapshotUpdater");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "updatePosterSwitcherSnapshots");
  objc_msgSend(*(id *)(a1 + 32), "coverSheetView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "scrollView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_forcePanGestureToEndImmediately");

  objc_msgSend(*(id *)(a1 + 32), "_prepareForPosterSwitcherPresentation");
  objc_msgSend(*(id *)(a1 + 32), "_updatePosterSwitcherPresentationWithProgress:", 1.0);
  objc_msgSend(*(id *)(a1 + 32), "_cleanupPosterSwitcherPresentationForCompleted:withActivatingTouches:", 1, *(_QWORD *)(a1 + 40));

}

void __62__CSCoverSheetViewController__handlePosterSwitcherActivation___block_invoke_2(uint64_t a1, void *a2, int a3)
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[5];
  uint8_t buf[4];
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  SBLogDashBoard();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v11 = v5;
    _os_log_impl(&dword_1D0337000, v6, OS_LOG_TYPE_DEFAULT, "Failed to activate Poster Switcher for reason: %{public}@.", buf, 0xCu);
  }

  if (a3)
  {
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(void **)(v7 + 1464);
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __62__CSCoverSheetViewController__handlePosterSwitcherActivation___block_invoke_483;
    v9[3] = &unk_1E8E2DDE0;
    v9[4] = v7;
    objc_msgSend(v8, "activateWithCompletionBlock:", v9);
  }

}

uint64_t __62__CSCoverSheetViewController__handlePosterSwitcherActivation___block_invoke_483(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1464), "notificationOccurred:", 2);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1464), "deactivate");
}

- (BOOL)_isPresentingPosterSwitcher
{
  void *v2;
  BOOL v3;

  -[CSCoverSheetViewController posterSwitcherViewController](self, "posterSwitcherViewController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2 != 0;

  return v3;
}

- (void)_prepareForPosterSwitcherPresentation
{
  void *v3;
  char v4;
  void *v5;
  CSPosterSwitcherTransitionSource *v6;

  -[CSCoverSheetViewController currentTransitionSource](self, "currentTransitionSource");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isTransitioning");

  if ((v4 & 1) == 0)
  {
    -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "addContentView");

    v6 = objc_alloc_init(CSPosterSwitcherTransitionSource);
    -[CSPosterSwitcherTransitionSource setTransitioningDelegate:](v6, "setTransitioningDelegate:", self);
    -[CSCoverSheetViewController setPosterSwitcherTransitionSource:](self, "setPosterSwitcherTransitionSource:", v6);
    -[CSPosterSwitcherTransitionSource prepareForPresentation](v6, "prepareForPresentation");

  }
}

- (void)_updatePosterSwitcherPresentationWithProgress:(double)a3
{
  id v4;

  -[CSCoverSheetViewController posterSwitcherTransitionSource](self, "posterSwitcherTransitionSource");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "isTransitioning"))
    objc_msgSend(v4, "updatePresentationWithProgress:", a3);

}

- (void)_cleanupPosterSwitcherPresentationForCompleted:(BOOL)a3 withActivatingTouches:(id)a4
{
  _BOOL4 v4;
  id v6;
  void *v7;
  void *v8;
  int v9;
  double v10;
  NSObject *v11;
  _BOOL4 v12;
  CSDismissableModalViewController *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  CSPosterSwitcherViewController *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  void *v33;
  void *v34;
  NSObject *v35;
  void *v36;
  CSDismissableModalViewController *v37;
  id v38;
  void *v39;
  void *v40;
  uint8_t v41[16];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _QWORD v46[4];
  id v47;
  id buf;
  __int16 v49;
  int v50;
  _BYTE v51[128];
  uint64_t v52;

  v4 = a3;
  v52 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  -[CSCoverSheetViewController posterSwitcherTransitionSource](self, "posterSwitcherTransitionSource");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetContextProviding authenticationStatusProvider](self->_coverSheetContext, "authenticationStatusProvider");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "isAuthenticated");

  if (objc_msgSend(v7, "isTransitioning"))
  {
    v10 = 0.0;
    if (v4)
      v10 = 1.0;
    objc_msgSend(v7, "updatePresentationWithProgress:", v10);
    SBLogDashBoard();
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if ((v4 & v9) != 0)
    {
      if (v12)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1D0337000, v11, OS_LOG_TYPE_DEFAULT, "Poster Switcher gesture completed. Presenting Poster Switcher", (uint8_t *)&buf, 2u);
      }

      v13 = objc_alloc_init(CSDismissableModalViewController);
      -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "componentForType:identifier:", 23, CFSTR("(active)"));
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = objc_opt_class();
      v17 = v15;
      if (v16)
      {
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v18 = v17;
        else
          v18 = 0;
      }
      else
      {
        v18 = 0;
      }
      v20 = v18;

      v21 = objc_alloc_init(CSPosterSwitcherViewController);
      -[CSPosterSwitcherViewController setActivatingTouches:](v21, "setActivatingTouches:", v6);
      -[CSCoverSheetViewController view](self, "view");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "window");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      -[CSPosterSwitcherViewController setTargetWindow:](v21, "setTargetWindow:", v23);

      -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "wallpaperEffectView");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      -[CSPosterSwitcherViewController setCoverSheetWallpaperView:](v21, "setCoverSheetWallpaperView:", v25);

      -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "wallpaperFloatingLayerContainerView");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      -[CSPosterSwitcherViewController setCoverSheetFloatingView:](v21, "setCoverSheetFloatingView:", v27);

      -[CSPosterSwitcherViewController setCoverSheetWallpaperFloatingLayerInlined:](v21, "setCoverSheetWallpaperFloatingLayerInlined:", objc_msgSend(v20, "shouldRenderInline"));
      -[CSCoverSheetViewController effectiveVibrancyConfiguration](self, "effectiveVibrancyConfiguration");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      -[CSPosterSwitcherViewController setVibrancyConfiguration:](v21, "setVibrancyConfiguration:", v28);

      -[CSCoverSheetViewController addApplicationHoster:](self, "addApplicationHoster:", v21);
      -[CSCoverSheetViewController setPosterSwitcherViewController:](self, "setPosterSwitcherViewController:", v21);
      -[CSCoverSheetViewController _updatePosterSwitcherBackgroundView](self, "_updatePosterSwitcherBackgroundView");
      -[CSCoverSheetViewController _updatePosterSwitcherComplicationRowHidden](self, "_updatePosterSwitcherComplicationRowHidden");
      objc_initWeak(&buf, self);
      v46[0] = MEMORY[0x1E0C809B0];
      v46[1] = 3221225472;
      v46[2] = __99__CSCoverSheetViewController__cleanupPosterSwitcherPresentationForCompleted_withActivatingTouches___block_invoke;
      v46[3] = &unk_1E8E2E868;
      objc_copyWeak(&v47, &buf);
      v39 = v20;
      v40 = v14;
      -[CSPosterSwitcherViewController setInvalidationHandler:](v21, "setInvalidationHandler:", v46);
      v37 = v13;
      v38 = v6;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v29 = (void *)-[NSHashTable copy](self->_observers, "copy");
      v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v42, v51, 16);
      if (v30)
      {
        v31 = *(_QWORD *)v43;
        do
        {
          for (i = 0; i != v30; ++i)
          {
            if (*(_QWORD *)v43 != v31)
              objc_enumerationMutation(v29);
            v33 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * i);
            if ((objc_opt_respondsToSelector() & 1) != 0)
              objc_msgSend(v33, "coverSheetViewControllerWillPresentPosterSwitcher:", self);
          }
          v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v42, v51, 16);
        }
        while (v30);
      }

      v6 = v38;
      v19 = v37;
      -[CSCoverSheetContextProviding traitsAwareAppHosting](self->_coverSheetContext, "traitsAwareAppHosting");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      -[CSPosterSwitcherViewController setAppHostConfiguring:](v21, "setAppHostConfiguring:", v34);

      -[CSDismissableModalViewController setDelegate:](v37, "setDelegate:", v21);
      -[CSPresentationViewController presentContentViewController:animated:](v37, "presentContentViewController:animated:", v21, 0);
      -[CSCoverSheetViewController _presentModalViewController:animated:completion:](self, "_presentModalViewController:animated:completion:", v37, 0, 0);
      SBLogDashBoard();
      v35 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v41 = 0;
        _os_log_impl(&dword_1D0337000, v35, OS_LOG_TYPE_DEFAULT, "[ZStack-Participant] adding poster switcher home affordance", v41, 2u);
      }

      -[CSCoverSheetContextProviding modalHomeAffordanceController](self->_coverSheetContext, "modalHomeAffordanceController");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      -[CSDismissableModalViewController setHomeAffordanceController:](v37, "setHomeAffordanceController:", v36);

      objc_destroyWeak(&v47);
      objc_destroyWeak(&buf);

    }
    else
    {
      if (v12)
      {
        LODWORD(buf) = 67109376;
        HIDWORD(buf) = v4;
        v49 = 1024;
        v50 = v9;
        _os_log_impl(&dword_1D0337000, v11, OS_LOG_TYPE_DEFAULT, "Poster Switcher gesture ended in failure. Not presenting Poster Switcher. Interaction completed: %{BOOL}d. Device authenticated: %{BOOL}d", (uint8_t *)&buf, 0xEu);
      }

      -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "removeContentView");
    }

    objc_msgSend(v7, "cleanupPresentation");
    -[CSCoverSheetViewController setPosterSwitcherTransitionSource:](self, "setPosterSwitcherTransitionSource:", 0);
  }

}

void __99__CSCoverSheetViewController__cleanupPosterSwitcherPresentationForCompleted_withActivatingTouches___block_invoke(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setPosterSwitcherViewController:", 0);

}

- (void)setPosterSwitcherTransitionSource:(id)a3
{
  CSPosterSwitcherTransitionSource **p_posterSwitcherTransitionSource;
  CSPosterSwitcherTransitionSource *v6;

  p_posterSwitcherTransitionSource = &self->_posterSwitcherTransitionSource;
  v6 = (CSPosterSwitcherTransitionSource *)a3;
  if (*p_posterSwitcherTransitionSource != v6)
  {
    -[CSCoverSheetViewController unregisterExternalAppearanceProvider:](self, "unregisterExternalAppearanceProvider:");
    -[CSCoverSheetViewController unregisterExternalBehaviorProvider:](self, "unregisterExternalBehaviorProvider:", *p_posterSwitcherTransitionSource);
    objc_storeStrong((id *)&self->_posterSwitcherTransitionSource, a3);
    if (*p_posterSwitcherTransitionSource)
    {
      -[CSCoverSheetViewController registerExternalAppearanceProvider:](self, "registerExternalAppearanceProvider:");
      -[CSCoverSheetViewController registerExternalBehaviorProvider:](self, "registerExternalBehaviorProvider:", *p_posterSwitcherTransitionSource);
    }
  }

}

- (void)setPosterSwitcherViewController:(id)a3
{
  CSPosterSwitcherViewController *v5;
  BOOL v6;
  void *v7;
  CSPosterSwitcherViewController *v8;

  v5 = (CSPosterSwitcherViewController *)a3;
  if (self->_posterSwitcherViewController != v5)
  {
    v8 = v5;
    objc_storeStrong((id *)&self->_posterSwitcherViewController, a3);
    v6 = -[CSCoverSheetViewController _isPresentingPosterSwitcher](self, "_isPresentingPosterSwitcher");
    self->_preventStatusBarDateTimeUpdates = v6;
    if (!v6)
    {
      -[CSMainPageContentViewController combinedListViewController](self->_mainPageContentViewController, "combinedListViewController");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "settleContentOffset");

    }
    -[CSCoverSheetViewController _updateStatusBarBackground](self, "_updateStatusBarBackground");
    v5 = v8;
  }

}

- (void)_updatePosterSwitcherBackgroundView
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  -[CSCoverSheetViewController posterSwitcherViewController](self, "posterSwitcherViewController");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "backgroundContentView");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "backgroundView");
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = (void *)v5;
    if (v4)
      v7 = v4;
    else
      v7 = (void *)v5;
    objc_msgSend(v8, "setCoverSheetBackgroundView:", v7);

  }
}

- (void)_updatePosterSwitcherComplicationRowHidden
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  -[CSCoverSheetViewController posterSwitcherViewController](self, "posterSwitcherViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v9 = v3;
    -[CSCoverSheetViewController localAppearance](self, "localAppearance");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "userInterfaceIdiom");

    if ((v6 & 0xFFFFFFFFFFFFFFFBLL) == 1
      && (unint64_t)(-[CSCoverSheetViewController interfaceOrientation](self, "interfaceOrientation") - 3) < 2)
    {
      v7 = 25;
    }
    else
    {
      v7 = 20;
    }
    objc_msgSend(v4, "componentForType:property:", v7, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setCoverSheetComplicationRowHidden:", objc_msgSend(v8, "isHidden"));

    v3 = v9;
  }

}

- (void)_dismissPosterSwitcherViewController
{
  void *v3;
  void *v4;
  id v5;

  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "removeContentView");

  +[CSCoverSheetViewControllerBase coverSheetIdentifier](CSDismissableModalViewController, "coverSheetIdentifier");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController _presentedModalViewControllerWithIdentifier:](self, "_presentedModalViewControllerWithIdentifier:", v5);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController _dismissModalViewController:animated:completion:](self, "_dismissModalViewController:animated:completion:", v4, 0, 0);

}

- (void)posterSwitcherActivationManager:(id)a3 didChangeToCoachingText:(id)a4
{
  NSString *v5;
  NSString *currentCoachingString;

  v5 = (NSString *)objc_msgSend(a4, "copy", a3);
  currentCoachingString = self->_currentCoachingString;
  self->_currentCoachingString = v5;

  -[CSCoverSheetViewController _updateCoachingStringWithTimeout:](self, "_updateCoachingStringWithTimeout:", 2.5);
}

- (BOOL)userPresenceDetectedSinceWake
{
  _BOOL4 v3;

  v3 = -[CSUserPresenceMonitor isUserPresenceDetectionSupported](self->_userPresenceMonitor, "isUserPresenceDetectionSupported");
  if (v3)
    LOBYTE(v3) = -[CSUserPresenceMonitor userPresenceDetectedSinceWake](self->_userPresenceMonitor, "userPresenceDetectedSinceWake");
  return v3;
}

- (id)posterSwitcherPresentationStatus
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  int v6;
  void *v7;
  char v8;
  void *v10;
  char v11;
  void *v12;
  uint64_t v13;

  if (-[CSCoverSheetViewController _isPresentingPosterSwitcher](self, "_isPresentingPosterSwitcher"))
  {
    v3 = 0;
    v4 = 2;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0D47230], "sharedConnection");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "isWallpaperModificationAllowed");

    if (v6)
    {
      -[CSMainPageContentViewController combinedListViewController](self->_mainPageContentViewController, "combinedListViewController");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v7, "hasUserInteraction");

      if ((v8 & 1) != 0)
      {
        v4 = 0;
        v3 = 1;
      }
      else if (-[CSCoverSheetViewController isAuthenticated](self, "isAuthenticated"))
      {
        -[CSCoverSheetContextProviding proximitySensorProvider](self->_coverSheetContext, "proximitySensorProvider");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_msgSend(v10, "isObjectInProximity");

        if ((v11 & 1) != 0)
        {
          v4 = 0;
          v3 = 3;
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = objc_msgSend(v12, "userInterfaceIdiom");

          if ((v13 & 0xFFFFFFFFFFFFFFFBLL) == 1
            || (unint64_t)(-[CSCoverSheetViewController interfaceOrientation](self, "interfaceOrientation") - 3) >= 2)
          {
            v3 = 0;
            v4 = 1;
          }
          else
          {
            v4 = 0;
            v3 = 4;
          }
        }
      }
      else
      {
        v4 = 0;
        v3 = 2;
      }
    }
    else
    {
      v4 = 0;
      v3 = 5;
    }
  }
  return -[CSPosterSwitcherPresentationStatus initWithState:notReadyReason:]([CSPosterSwitcherPresentationStatus alloc], "initWithState:notReadyReason:", v4, v3);
}

- (void)_complicationSelected:(id)a3
{
  SBFLockScreenDateViewController *dateViewController;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;

  dateViewController = self->_dateViewController;
  v5 = a3;
  -[SBFLockScreenDateViewController inlineComplicationViewController](dateViewController, "inlineComplicationViewController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_opt_class();
  v8 = v6;
  if (v7)
  {
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v9 = v8;
    else
      v9 = 0;
  }
  else
  {
    v9 = 0;
  }
  v10 = v9;

  objc_msgSend(v10, "handleComplicationSelectionGesture:", v5);
  -[CSCoverSheetViewController complicationContainerViewController](self, "complicationContainerViewController");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "handleComplicationSelectionGesture:", v5);

  -[CSCoverSheetViewController sidebarComplicationContainerViewController](self, "sidebarComplicationContainerViewController");
  v12 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "handleComplicationSelectionGesture:", v5);

}

- (void)_setupComplicationSelectionGestureRecognizer
{
  void *v3;
  void *v4;
  UILongPressGestureRecognizer *v5;
  UILongPressGestureRecognizer *v6;
  UILongPressGestureRecognizer *complicationSelectionRecognizer;
  id v8;

  if (!self->_complicationSelectionRecognizer)
  {
    v5 = 0;
LABEL_6:
    -[UILongPressGestureRecognizer setDelegate:](v5, "setDelegate:", 0);
    v6 = (UILongPressGestureRecognizer *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA730]), "initWithTarget:action:", self, sel__complicationSelected_);
    complicationSelectionRecognizer = self->_complicationSelectionRecognizer;
    self->_complicationSelectionRecognizer = v6;

    -[UILongPressGestureRecognizer setMinimumPressDuration:](self->_complicationSelectionRecognizer, "setMinimumPressDuration:", 0.01);
    -[UILongPressGestureRecognizer setDelegate:](self->_complicationSelectionRecognizer, "setDelegate:", self);
    -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setComplicationGestureRecognizer:", self->_complicationSelectionRecognizer);

    return;
  }
  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "complicationGestureRecognizer");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4)
  {
    v5 = self->_complicationSelectionRecognizer;
    goto LABEL_6;
  }
}

- (id)_averageLockScreenWallpaperColor
{
  id WeakRetained;
  void *v3;
  void *v4;
  id v5;
  void *v6;

  WeakRetained = objc_loadWeakRetained((id *)&self->_wallpaperColorProvider);
  objc_msgSend(WeakRetained, "averageColorForCurrentWallpaper");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    v5 = v3;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA478], "whiteColor");
    v5 = (id)objc_claimAutoreleasedReturnValue();
  }
  v6 = v5;

  return v6;
}

- (BOOL)_wallpaperGestureShouldRequireUserPresence
{
  return 1;
}

- (void)_setupWallpaperGesture
{
  void *v3;
  void *v4;
  int v5;
  void *v6;
  void *v7;

  if (-[CSCoverSheetViewController _shouldSetUpWallpaperGesture](self, "_shouldSetUpWallpaperGesture"))
  {
    -[UIGestureRecognizer setDelegate:](self->_wallpaperGestureRecognizer, "setDelegate:", self);
    -[CSCoverSheetViewController irisWallpaperPlayer](self, "irisWallpaperPlayer");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    if (v3
      && (-[CSCoverSheetViewController activeBehavior](self, "activeBehavior"),
          v4 = (void *)objc_claimAutoreleasedReturnValue(),
          v5 = objc_msgSend(v4, "areRestrictedCapabilities:", 256),
          v4,
          v5))
    {
      -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setWallpaperGestureRecognizer:", 0);

    }
    else
    {
      -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "setWallpaperGestureRecognizer:", self->_wallpaperGestureRecognizer);

      if (-[CSCoverSheetViewController _wallpaperGestureShouldRequireUserPresence](self, "_wallpaperGestureShouldRequireUserPresence"))
      {
        -[CSUserPresenceMonitor enableDetectionForReason:](self->_userPresenceMonitor, "enableDetectionForReason:", CFSTR("Wallpaper"));
        return;
      }
    }
    -[CSUserPresenceMonitor disableDetectionForReason:](self->_userPresenceMonitor, "disableDetectionForReason:", CFSTR("Wallpaper"));
  }
}

- (BOOL)_shouldSetUpWallpaperGesture
{
  return 1;
}

- (void)_updateUIForPlaying:(BOOL)a3 immediately:(BOOL)a4
{
  _BOOL4 v4;
  _BOOL8 v5;
  void *v7;
  _QWORD v8[2];

  v4 = a4;
  v5 = a3;
  v8[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend((id)objc_opt_class(), "cancelPreviousPerformRequestsWithTarget:selector:object:", self, sel__actuallyUpdateUIForIrisNotPlaying, 0);
  if (v4)
  {
    -[CSCoverSheetViewController _actuallyUpdateUIForIrisPlaying:](self, "_actuallyUpdateUIForIrisPlaying:", v5);
  }
  else if (!v5)
  {
    v8[0] = *MEMORY[0x1E0C99860];
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v8, 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSCoverSheetViewController performSelector:withObject:afterDelay:inModes:](self, "performSelector:withObject:afterDelay:inModes:", sel__actuallyUpdateUIForIrisNotPlaying, 0, v7, 0.3);

  }
}

- (void)_actuallyUpdateUIForIrisPlaying
{
  -[CSCoverSheetViewController _actuallyUpdateUIForIrisPlaying:](self, "_actuallyUpdateUIForIrisPlaying:", 1);
}

- (void)_actuallyUpdateUIForIrisNotPlaying
{
  -[CSCoverSheetViewController _actuallyUpdateUIForIrisPlaying:](self, "_actuallyUpdateUIForIrisPlaying:", 0);
}

- (void)_actuallyUpdateUIForIrisPlaying:(BOOL)a3
{
  _BOOL4 v3;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v3 = a3;
  -[CSCoverSheetViewController irisBehavior](self, "irisBehavior");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v3)
    v7 = 3;
  else
    v7 = 0;
  objc_msgSend(v5, "setScrollingStrategy:", v7);

  v8 = (void *)MEMORY[0x1E0CB3940];
  NSStringFromBOOL();
  v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "stringWithFormat:", CFSTR("irisPlaying-%@"), v10);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController _updateActiveBehaviorsForReason:](self, "_updateActiveBehaviorsForReason:", v9);

}

- (void)startLockScreenFadeInAnimationForSource:(int)a3
{
  uint64_t v3;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  _BOOL8 v12;
  NSObject *v13;
  _BOOL4 v14;
  NSObject *v15;
  _BOOL4 v16;
  void *v17;
  int v18;
  _DWORD v19[7];

  v3 = *(_QWORD *)&a3;
  *(_QWORD *)&v19[5] = *MEMORY[0x1E0C80C00];
  self->_wakeSource = a3;
  SBLogDashBoard();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    NSStringFromUnlockSource();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138543362;
    *(_QWORD *)v19 = v6;
    _os_log_impl(&dword_1D0337000, v5, OS_LOG_TYPE_DEFAULT, "wake source: %{public}@", (uint8_t *)&v18, 0xCu);

  }
  -[CSPoseidonViewController poseidonContainerViewController](self->_poseidonViewController, "poseidonContainerViewController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setUnlockSource:", v3);

  if (SBUIUnlockSourceIsUserAction())
    -[SBUIPhoneUnlockWithWatchController setWakeSourceIsUserAction:](self->_phoneUnlockWithWatchController, "setWakeSourceIsUserAction:", 1);
  -[CSCoverSheetViewController _updateActiveAppearanceForReason:](self, "_updateActiveAppearanceForReason:", CFSTR("StartFadeInAnimation"));
  -[CSCoverSheetContextProviding screenStateProvider](self->_coverSheetContext, "screenStateProvider");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "screenIsOn");

  SBLogDashBoard();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    NSStringFromBOOL();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138543362;
    *(_QWORD *)v19 = v11;
    _os_log_impl(&dword_1D0337000, v10, OS_LOG_TYPE_DEFAULT, "isScreenOn: %{public}@", (uint8_t *)&v18, 0xCu);

  }
  self->_blockingPowerStatusTriggeredChargingUI = 1;
  -[CSPowerChangeObserver update](self->_powerChangeObserver, "update");
  self->_blockingPowerStatusTriggeredChargingUI = 0;
  v12 = -[CSPowerChangeObserver isConnectedToPower](self->_powerChangeObserver, "isConnectedToPower");
  if ((v3 - 21) > 1)
  {
    if ((_DWORD)v3 != 5)
    {
      SBLogDashBoard();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        v14 = -[CSCoverSheetViewController _isShowingChargingModal](self, "_isShowingChargingModal");
        v18 = 67109376;
        v19[0] = v12;
        LOWORD(v19[1]) = 1024;
        *(_DWORD *)((char *)&v19[1] + 2) = v14;
        _os_log_impl(&dword_1D0337000, v13, OS_LOG_TYPE_DEFAULT, "[Charge UI][Lift Wake] visible %d, showBattery NO – isAlreadyShowingChargingModal: %d", (uint8_t *)&v18, 0xEu);
      }

      -[CSCoverSheetViewController _transitionChargingViewToVisible:suppressedByPack:showBattery:animated:](self, "_transitionChargingViewToVisible:suppressedByPack:showBattery:animated:", v12, 0, 0, v9);
      SBLogDashBoard();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        v16 = -[CSCoverSheetViewController _isShowingChargingModal](self, "_isShowingChargingModal");
        v18 = 67109120;
        v19[0] = v16;
        _os_log_impl(&dword_1D0337000, v15, OS_LOG_TYPE_DEFAULT, "[Charge UI][Lift Wake] – endedShowingChargingModal: %d", (uint8_t *)&v18, 8u);
      }

    }
    if ((v9 & 1) == 0)
      -[CSCoverSheetViewController _startFadeInAnimationForSource:](self, "_startFadeInAnimationForSource:", SBUIConvertUnlockSourceToBacklightChangeSource());
  }
  else
  {
    -[CSCoverSheetViewController _finishFadeInAnimationForPowerSource:connectedToPower:screenOn:](self, "_finishFadeInAnimationForPowerSource:connectedToPower:screenOn:", v3, v12, v9);
  }
  if (SBUIUnlockSourceIsUserAction())
  {
    +[CSEvent eventWithType:](CSEvent, "eventWithType:", 26);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSCoverSheetViewController _handleEvent:](self, "_handleEvent:", v17);

  }
  -[CSTeachableMomentsContainerViewController setAnimationState:](self->_teachableMomentsContainerViewController, "setAnimationState:", 1);
}

- (void)_finishFadeInAnimationForPowerSource:(int)a3 connectedToPower:(BOOL)a4 screenOn:(BOOL)a5
{
  _BOOL8 v5;
  _BOOL8 v6;
  _BOOL4 suppressChargingUIForAmbient;
  NSObject *v9;
  _BOOL4 v10;
  void *v11;
  _BOOL4 v12;
  NSObject *v13;
  void *v14;
  int v15;
  _DWORD v16[7];

  v5 = a5;
  v6 = a4;
  *(_QWORD *)&v16[5] = *MEMORY[0x1E0C80C00];
  if (-[CSPowerChangeObserver isConnectedToWirelessInternalChargingAccessory](self->_powerChangeObserver, "isConnectedToWirelessInternalChargingAccessory"))
  {
    if (v5)
      return;
    goto LABEL_12;
  }
  suppressChargingUIForAmbient = self->_suppressChargingUIForAmbient;
  SBLogDashBoard();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (suppressChargingUIForAmbient)
  {
    if (v10)
    {
      NSStringFromUnlockSource();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138412290;
      *(_QWORD *)v16 = v11;
      _os_log_impl(&dword_1D0337000, v9, OS_LOG_TYPE_DEFAULT, "[Charge UI][Suppressed] visible NO, suppressed for ambient presentation! source: %@", (uint8_t *)&v15, 0xCu);

    }
  }
  else
  {
    if (v10)
    {
      v15 = 67109376;
      v16[0] = v6;
      LOWORD(v16[1]) = 1024;
      *(_DWORD *)((char *)&v16[1] + 2) = -[CSCoverSheetViewController _isShowingChargingModal](self, "_isShowingChargingModal");
      _os_log_impl(&dword_1D0337000, v9, OS_LOG_TYPE_DEFAULT, "[Charge UI][Finish Fade] visible YES, showBattery %d – isAlreadyShowingChargingModal: %d", (uint8_t *)&v15, 0xEu);
    }

    -[CSCoverSheetViewController _transitionChargingViewToVisible:showBattery:animated:](self, "_transitionChargingViewToVisible:showBattery:animated:", 1, v6, v5);
    SBLogDashBoard();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v12 = -[CSCoverSheetViewController _isShowingChargingModal](self, "_isShowingChargingModal");
      v15 = 67109120;
      v16[0] = v12;
      _os_log_impl(&dword_1D0337000, v9, OS_LOG_TYPE_DEFAULT, "[Charge UI][Finish Fade] – endedShowingChargingModal: %d", (uint8_t *)&v15, 8u);
    }
  }

  if (!v5)
  {
LABEL_12:
    SBLogDashBoard();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      NSStringFromUnlockSource();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138412290;
      *(_QWORD *)v16 = v14;
      _os_log_impl(&dword_1D0337000, v13, OS_LOG_TYPE_DEFAULT, "[Charge UI] Starting fade in for source: %@", (uint8_t *)&v15, 0xCu);

    }
    -[CSCoverSheetViewController _startFadeInAnimationForSource:](self, "_startFadeInAnimationForSource:", SBUIConvertUnlockSourceToBacklightChangeSource());
  }
}

- (void)_startFadeInAnimationForSource:(int64_t)a3
{
  NSObject *v5;
  void *v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  SBFScreenWakeAnimationControlling *screenWakeAnimationController;
  void *v13;
  void *v14;
  _QWORD v15[5];
  uint8_t buf[16];

  if (!-[CSCoverSheetViewController _isWakeAnimationInProgress](self, "_isWakeAnimationInProgress")
    && -[CSCoverSheetViewController isViewLoaded](self, "isViewLoaded"))
  {
    SBLogDashBoardTelemetrySignposts();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v5))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1D0337000, v5, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "SB_LOCKSCREEN_FADE_IN", " enableTelemetry=YES  isAnimation=YES ", buf, 2u);
    }

    kdebug_trace();
    -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "componentForType:identifier:", 2, CFSTR("(active)"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    -[CSCoverSheetViewController _dateTimeAlphaForFade](self, "_dateTimeAlphaForFade");
    v9 = v8;
    objc_msgSend(v7, "alpha");
    v11 = v10;
    screenWakeAnimationController = self->_screenWakeAnimationController;
    -[CSCoverSheetViewController legacyWallpaperWakeAnimator](self, "legacyWallpaperWakeAnimator");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[SBFLockScreenDateViewController dateViewIfExists](self->_dateViewController, "dateViewIfExists");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __61__CSCoverSheetViewController__startFadeInAnimationForSource___block_invoke;
    v15[3] = &unk_1E8E2DB38;
    v15[4] = self;
    -[SBFScreenWakeAnimationControlling prepareToWakeForSource:timeAlpha:statusBarAlpha:target:dateView:completion:](screenWakeAnimationController, "prepareToWakeForSource:timeAlpha:statusBarAlpha:target:dateView:completion:", a3, v13, v14, v15, v9, v11);

  }
}

void __61__CSCoverSheetViewController__startFadeInAnimationForSource___block_invoke(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  uint8_t v4[16];

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2016), "updateTimeNow");
  SBLogDashBoardTelemetrySignposts();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v2))
  {
    *(_WORD *)v4 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D0337000, v2, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "SB_LOCKSCREEN_FADE_IN", " enableTelemetry=YES  isAnimation=YES ", v4, 2u);
  }

  kdebug_trace();
  objc_msgSend(*(id *)(a1 + 32), "_updateActiveAppearanceForReason:", CFSTR("FadeIn"));
  +[CSEvent eventWithType:](CSEvent, "eventWithType:", 38);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "_handleEvent:", v3);

}

- (BOOL)_isWakeAnimationInProgress
{
  return -[SBFScreenWakeAnimationControlling isWakeAnimationInProgress](self->_screenWakeAnimationController, "isWakeAnimationInProgress");
}

- (double)_dateTimeAlphaForFade
{
  void *v3;
  void *v4;
  double v5;
  double v6;

  -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "componentForType:identifier:", 1, CFSTR("(active)"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = 1.0;
  if (!-[CSPresentationViewController isPresentingContent](self->_modalPresentationController, "isPresentingContent"))
  {
    objc_msgSend(v4, "alpha");
    v5 = v6;
  }

  return v5;
}

- (void)timerControllerDidStartTimer:(id)a3
{
  id v4;
  NSObject *v5;
  SBFLockScreenDateViewController *dateViewController;
  void *v7;
  uint8_t v8[16];

  v4 = a3;
  SBLogDashBoard();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_1D0337000, v5, OS_LOG_TYPE_DEFAULT, "Timer Controller did start timer.", v8, 2u);
  }

  -[CSCoverSheetViewController _transitionTimerViewToVisible:animated:](self, "_transitionTimerViewToVisible:animated:", 1, 0);
  if ((-[ACActivityCenter areActivitiesEnabled](self->_activityCenter, "areActivitiesEnabled") & 1) == 0)
  {
    dateViewController = self->_dateViewController;
    objc_msgSend(v4, "timerText");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[SBFLockScreenDateViewController setTimerWithText:](dateViewController, "setTimerWithText:", v7);

  }
}

- (void)timerControllerDidUpdateTimer:(id)a3
{
  SBFLockScreenDateViewController *dateViewController;
  void *v5;
  id v6;

  v6 = a3;
  if ((-[ACActivityCenter areActivitiesEnabled](self->_activityCenter, "areActivitiesEnabled") & 1) == 0)
  {
    dateViewController = self->_dateViewController;
    objc_msgSend(v6, "timerText");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[SBFLockScreenDateViewController updateTimerWithText:](dateViewController, "updateTimerWithText:", v5);

  }
}

- (void)timerControllerDidStopTimer:(id)a3
{
  NSObject *v4;
  uint8_t v5[16];

  SBLogDashBoard();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1D0337000, v4, OS_LOG_TYPE_DEFAULT, "Timer Controller did stop timer.", v5, 2u);
  }

  -[CSCoverSheetViewController _transitionTimerViewToVisible:animated:](self, "_transitionTimerViewToVisible:animated:", 0, -[CSTimerViewController isEnabled](self->_timerViewController, "isEnabled"));
  if ((-[ACActivityCenter areActivitiesEnabled](self->_activityCenter, "areActivitiesEnabled") & 1) == 0)
    -[SBFLockScreenDateViewController setTimerWithText:](self->_dateViewController, "setTimerWithText:", 0);
}

- (void)_transitionTimerViewToVisible:(BOOL)a3 animated:(BOOL)a4
{
  _BOOL4 v4;
  int v5;
  void *v7;
  void *v8;
  int v9;
  NSObject *v10;
  void *v11;
  CSCoverSheetViewController *v12;
  _QWORD v13[5];
  char v14;
  uint8_t buf[16];

  v4 = a4;
  v5 = a3;
  -[CSCoverSheetViewController localAppearance](self, "localAppearance");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "componentForType:identifier:", 1, CFSTR("TimerView"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8 != 0;

  if (v9 != v5)
  {
    if (!-[CSTimerViewController isEndDateValid](self->_timerViewController, "isEndDateValid"))
    {
      SBLogDashBoard();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D0337000, v10, OS_LOG_TYPE_DEFAULT, "Timer end date is invalid or nil.", buf, 2u);
      }

      v5 = 0;
    }
    if (v4)
    {
      objc_msgSend(MEMORY[0x1E0D016B0], "settingsWithDuration:", 0.4);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v11 = 0;
    }
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __69__CSCoverSheetViewController__transitionTimerViewToVisible_animated___block_invoke;
    v13[3] = &unk_1E8E2E890;
    v13[4] = self;
    v14 = v5;
    -[CSCoverSheetViewController _updateLocalAppearanceForRequester:animationSettings:actions:completion:](self, "_updateLocalAppearanceForRequester:animationSettings:actions:completion:", CFSTR("TimerView"), v11, v13, 0);
    if (v4)

    if (v5)
      v12 = self;
    else
      v12 = 0;
    -[CSCoverSheetViewControllerBase setPresenter:](self->_timerViewController, "setPresenter:", v12);
  }
}

id __69__CSCoverSheetViewController__transitionTimerViewToVisible_animated___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "localAppearance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "removeAllComponentsWithIdentifier:", CFSTR("TimerView"));

  if (!*(_BYTE *)(a1 + 40))
    return 0;
  +[CSComponent dateView](CSComponent, "dateView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2064), "view");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "view:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "priority:", 10);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = v6;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v9, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (void)accessoryAttached:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  double v7;
  dispatch_time_t v8;
  id v9;
  _QWORD v10[4];
  id v11;
  CSCoverSheetViewController *v12;

  v4 = a3;
  +[CSLockScreenDomain rootSettings](CSLockScreenDomain, "rootSettings");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "chargingSettings");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "omniAccessoryAnimationDelayInMilliseconds");
  v8 = dispatch_time(0, (uint64_t)(v7 / 1000.0 * 1000000000.0));
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __48__CSCoverSheetViewController_accessoryAttached___block_invoke;
  v10[3] = &unk_1E8E2DC00;
  v11 = v4;
  v12 = self;
  v9 = v4;
  dispatch_after(v8, MEMORY[0x1E0C80D38], v10);

}

uint64_t __48__CSCoverSheetViewController_accessoryAttached___block_invoke(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  SBLogDashBoard();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(*(id *)(a1 + 32), "description");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = 138412290;
    v8 = v3;
    _os_log_impl(&dword_1D0337000, v2, OS_LOG_TYPE_DEFAULT, "Accessory attached: %@", (uint8_t *)&v7, 0xCu);

  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1040), "screenStateProvider");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "screenIsOn");

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1296), "addObject:", *(_QWORD *)(a1 + 32));
  return objc_msgSend(*(id *)(a1 + 40), "_transitionAccessoryViewToVisible:accessory:animated:", 1, *(_QWORD *)(a1 + 32), v5);
}

- (void)accessoryDetached:(id)a3
{
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;
  CSCoverSheetViewController *v8;

  v4 = a3;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __48__CSCoverSheetViewController_accessoryDetached___block_invoke;
  v6[3] = &unk_1E8E2DC00;
  v7 = v4;
  v8 = self;
  v5 = v4;
  dispatch_async(MEMORY[0x1E0C80D38], v6);

}

void __48__CSCoverSheetViewController_accessoryDetached___block_invoke(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD v22[4];
  id v23;
  uint8_t v24[128];
  uint8_t buf[4];
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  SBLogDashBoard();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(*(id *)(a1 + 32), "description");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412290;
    v26 = v3;
    _os_log_impl(&dword_1D0337000, v2, OS_LOG_TYPE_DEFAULT, "Accessory detached: %@", buf, 0xCu);

  }
  v4 = *(void **)(a1 + 32);
  v5 = *(void **)(*(_QWORD *)(a1 + 40) + 1296);
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = __48__CSCoverSheetViewController_accessoryDetached___block_invoke_507;
  v22[3] = &unk_1E8E2E8B8;
  v23 = v4;
  objc_msgSend(v5, "bs_filter:", v22);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
  if (v7)
  {
    v9 = v7;
    v10 = *(_QWORD *)v19;
    *(_QWORD *)&v8 = 138412290;
    v17 = v8;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v19 != v10)
          objc_enumerationMutation(v6);
        v12 = *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * v11);
        SBLogDashBoard();
        v13 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          objc_msgSend(*(id *)(a1 + 32), "description");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = v17;
          v26 = v14;
          _os_log_impl(&dword_1D0337000, v13, OS_LOG_TYPE_DEFAULT, "Removing accessory: %@", buf, 0xCu);

        }
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1296), "removeObject:", v12);
        ++v11;
      }
      while (v9 != v11);
      v9 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
    }
    while (v9);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1040), "screenStateProvider", v17);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "screenIsOn");

  objc_msgSend(*(id *)(a1 + 40), "_transitionAccessoryViewToVisible:accessory:animated:", 0, *(_QWORD *)(a1 + 32), v16);
}

uint64_t __48__CSCoverSheetViewController_accessoryDetached___block_invoke_507(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  objc_msgSend(a2, "endpointUUID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "endpointUUID");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "isEqualToString:", v4);

  return v5;
}

- (void)accessoryAnimationStatusChanged:(BOOL)a3
{
  _QWORD v3[5];
  BOOL v4;

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __62__CSCoverSheetViewController_accessoryAnimationStatusChanged___block_invoke;
  v3[3] = &unk_1E8E2E190;
  v4 = a3;
  v3[4] = self;
  dispatch_async(MEMORY[0x1E0C80D38], v3);
}

void __62__CSCoverSheetViewController_accessoryAnimationStatusChanged___block_invoke(uint64_t a1)
{
  NSObject *v2;
  int v3;
  _DWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  SBLogDashBoard();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int8 *)(a1 + 40);
    v4[0] = 67109120;
    v4[1] = v3;
    _os_log_impl(&dword_1D0337000, v2, OS_LOG_TYPE_DEFAULT, "Accessory animation status changed, isAnimationsAllowed: %{BOOL}u", (uint8_t *)v4, 8u);
  }

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 1304) = *(_BYTE *)(a1 + 40);
}

- (unint64_t)_accessoryAnimationRestrictions
{
  return 4348;
}

- (void)_updateAccessoryAnimationPresenting:(BOOL)a3 userInteractionDisabled:(BOOL)a4
{
  _QWORD v4[5];
  BOOL v5;
  BOOL v6;

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __90__CSCoverSheetViewController__updateAccessoryAnimationPresenting_userInteractionDisabled___block_invoke;
  v4[3] = &unk_1E8E2E8E0;
  v5 = a3;
  v6 = a4;
  v4[4] = self;
  dispatch_async(MEMORY[0x1E0C80D38], v4);
}

uint64_t __90__CSCoverSheetViewController__updateAccessoryAnimationPresenting_userInteractionDisabled___block_invoke(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  int v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t result;
  _DWORD v11[2];
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  SBLogDashBoard();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int8 *)(a1 + 40);
    v4 = *(unsigned __int8 *)(a1 + 41);
    v11[0] = 67109376;
    v11[1] = v3;
    v12 = 1024;
    v13 = v4;
    _os_log_impl(&dword_1D0337000, v2, OS_LOG_TYPE_DEFAULT, "Update accessoryAnimationPresenting: %{BOOL}u userInteractionDisabled: %{BOOL}u for accessory animation", (uint8_t *)v11, 0xEu);
  }

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 1771) = *(_BYTE *)(a1 + 40);
  v5 = *(unsigned __int8 *)(a1 + 41);
  v6 = *(_QWORD **)(a1 + 32);
  v7 = (void *)v6[247];
  v8 = objc_msgSend(v6, "_accessoryAnimationRestrictions");
  if (v5)
  {
    objc_msgSend(v7, "addRestrictedCapabilities:", v8);
    v9 = CFSTR("AccessoryAnimationPresentationWillStart");
  }
  else
  {
    result = objc_msgSend(v7, "areRestrictedCapabilities:", v8);
    if (!(_DWORD)result)
      return result;
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1976), "removeRestrictedCapabilities:", objc_msgSend(*(id *)(a1 + 32), "_accessoryAnimationRestrictions"));
    v9 = CFSTR("AccessoryAnimationPresentationDidEnd");
  }
  return objc_msgSend(*(id *)(a1 + 32), "_updateActiveBehaviorsForReason:", v9);
}

- (BOOL)attachedAccessoriesContainsAccessoryType:(int64_t)a3
{
  NSMutableArray *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  BOOL v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v4 = self->_attachedAccessories;
  v5 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v12;
    while (2)
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(v4);
        if (objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * i), "type", (_QWORD)v11) == a3)
        {
          v9 = 1;
          goto LABEL_11;
        }
      }
      v6 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v6)
        continue;
      break;
    }
  }
  v9 = 0;
LABEL_11:

  return v9;
}

- (BOOL)_showingAccessoryView
{
  return -[CSCoverSheetViewController _currentlyShowingAccessoryView](self, "_currentlyShowingAccessoryView")
      || self->_accessoryViewPresentationDelayed;
}

- (BOOL)_currentlyShowingAccessoryView
{
  void *v2;
  BOOL v3;

  -[CSCoverSheetViewController _modalPresentedViewControllerForShowingAccessoryView](self, "_modalPresentedViewControllerForShowingAccessoryView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2 != 0;

  return v3;
}

- (id)_modalPresentedViewControllerForShowingAccessoryView
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CSMagSafeAccessoryViewController *v9;
  void *v10;
  char v11;
  CSMagSafeAccessoryViewController *v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (self->_accessoryViewController)
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    -[CSPresentationViewController contentViewControllers](self->_modalPresentationController, "contentViewControllers", 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = (void *)objc_msgSend(v3, "copy");

    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v15;
      while (2)
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v15 != v7)
            objc_enumerationMutation(v4);
          v9 = *(CSMagSafeAccessoryViewController **)(*((_QWORD *)&v14 + 1) + 8 * v8);
          if (v9 == self->_accessoryViewController
            || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
            && (-[CSMagSafeAccessoryViewController contentViewControllers](v9, "contentViewControllers"),
                v10 = (void *)objc_claimAutoreleasedReturnValue(),
                v11 = objc_msgSend(v10, "containsObject:", self->_accessoryViewController),
                v10,
                (v11 & 1) != 0))
          {
            v12 = v9;
            goto LABEL_14;
          }
          ++v8;
        }
        while (v6 != v8);
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
        if (v6)
          continue;
        break;
      }
    }
    v12 = 0;
LABEL_14:

  }
  else
  {
    v12 = 0;
  }
  return v12;
}

- (BOOL)_isAccessoryAnimationAllowedForAccessory:(id)a3
{
  id v4;
  void *v5;
  char v6;
  char v7;

  v4 = a3;
  -[CSCoverSheetViewController activeBehavior](self, "activeBehavior");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "areRestrictedCapabilities:", 0x100000);

  if ((v6 & 1) != 0)
  {
    v7 = 0;
  }
  else if (self->_isAccessoryAnimationAllowed
         && !-[CSCoverSheetViewController _isShowingNonStaticAccessoryBlockingUI](self, "_isShowingNonStaticAccessoryBlockingUI"))
  {
    v7 = 1;
  }
  else
  {
    v7 = objc_msgSend(v4, "hasStaticView");
  }

  return v7;
}

- (void)_transitionAccessoryViewToVisible:(BOOL)a3 accessory:(id)a4 animated:(BOOL)a5
{
  _BOOL8 v5;
  _BOOL4 v6;
  id v8;
  _BOOL4 v9;
  BOOL v10;
  NSObject *v11;
  void *v12;
  void *v13;
  char v14;
  void *v15;
  void *v16;
  void *v17;
  BSAbsoluteMachTimer *accessoryViewControllerTimer;
  id accessoryViewControllerTimerHandler;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  int IsZero;
  int v28;
  void *v29;
  void *v30;
  int v31;
  int v32;
  unint64_t v33;
  _QWORD v34[5];
  id v35;
  BOOL v36;
  uint8_t buf[4];
  void *v38;
  uint64_t v39;

  v5 = a5;
  v6 = a3;
  v39 = *MEMORY[0x1E0C80C00];
  v8 = a4;
  v9 = -[CSCoverSheetViewController _showingAccessoryView](self, "_showingAccessoryView");
  v10 = v9;
  if (v6 && v9)
  {
    SBLogDashBoard();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      -[CSMagSafeAccessoryViewController accessory](self->_accessoryViewController, "accessory");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "description");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v38 = v13;
      _os_log_impl(&dword_1D0337000, v11, OS_LOG_TYPE_DEFAULT, "Showing an accessory view already: %@.", buf, 0xCu);

    }
LABEL_18:

    goto LABEL_19;
  }
  if (v6)
  {
    if (!-[CSCoverSheetViewController _isAccessoryAnimationAllowedForAccessory:](self, "_isAccessoryAnimationAllowedForAccessory:", v8))
    {
      SBLogDashBoard();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        -[CSMagSafeAccessoryViewController accessory](self->_accessoryViewController, "accessory");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "description");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v38 = v21;
        _os_log_impl(&dword_1D0337000, v11, OS_LOG_TYPE_DEFAULT, "Accessory animation is not allowed. Not showing accessory animation for accessory: %@", buf, 0xCu);

      }
      goto LABEL_18;
    }
    if (v8)
      v14 = v10;
    else
      v14 = 1;
    if ((v14 & 1) == 0 && -[CSCoverSheetViewController _appearState](self, "_appearState") == 2)
    {
      if (-[CSCoverSheetViewController isMainPageVisible](self, "isMainPageVisible"))
      {
        -[CSCoverSheetViewController _animateAccessory:toVisibleAnimated:](self, "_animateAccessory:toVisibleAnimated:", v8, v5);
      }
      else
      {
        v22 = objc_msgSend(v8, "type");
        -[CSCoverSheetViewController visiblePageViewController](self, "visiblePageViewController");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        -[CSCoverSheetViewController mainPageContentViewController](self, "mainPageContentViewController");
        v24 = (void *)objc_claimAutoreleasedReturnValue();

        -[CSCoverSheetViewController overlayControllerIfExists](self, "overlayControllerIfExists");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        if (v25)
        {
          -[CSCoverSheetViewController overlayControllerIfExists](self, "overlayControllerIfExists");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v26, "presentationProgress");
          IsZero = BSFloatIsZero();

          v28 = IsZero ^ 1;
        }
        else
        {
          v28 = 0;
        }

        -[CSCoverSheetViewController overlayControllerIfExists](self, "overlayControllerIfExists");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        if (v29)
        {
          -[CSCoverSheetViewController overlayControllerIfExists](self, "overlayControllerIfExists");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v30, "presentationProgress");
          v31 = BSFloatLessThanFloat();

        }
        else
        {
          v31 = 0;
        }

        if (v22 == 6)
          goto LABEL_30;
        v32 = v28 ^ 1;
        if (v23 != v24)
          v32 = 0;
        if ((v32 | v31) == 1)
        {
LABEL_30:
          v33 = -[CSCoverSheetViewController _indexOfMainPage](self, "_indexOfMainPage");
          v34[0] = MEMORY[0x1E0C809B0];
          v34[1] = 3221225472;
          v34[2] = __83__CSCoverSheetViewController__transitionAccessoryViewToVisible_accessory_animated___block_invoke;
          v34[3] = &unk_1E8E2E778;
          v34[4] = self;
          v35 = v8;
          v36 = v5;
          -[CSCoverSheetViewController activatePage:animated:withCompletion:](self, "activatePage:animated:withCompletion:", v33, 0, v34);

        }
      }
    }
  }
  else
  {
    -[CSMagSafeAccessoryViewController accessory](self->_accessoryViewController, "accessory");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "endpointUUID");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "endpointUUID");
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    if (v16 == v17)
    {
      -[BSAbsoluteMachTimer invalidate](self->_accessoryViewControllerTimer, "invalidate");
      accessoryViewControllerTimer = self->_accessoryViewControllerTimer;
      self->_accessoryViewControllerTimer = 0;

      accessoryViewControllerTimerHandler = self->_accessoryViewControllerTimerHandler;
      self->_accessoryViewControllerTimerHandler = 0;

      -[CSCoverSheetViewController _dismissAccessoryViewController:animated:](self, "_dismissAccessoryViewController:animated:", self->_accessoryViewController, v5);
    }
  }
LABEL_19:

}

uint64_t __83__CSCoverSheetViewController__transitionAccessoryViewToVisible_accessory_animated___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_animateAccessory:toVisibleAnimated:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

- (void)_animateAccessory:(id)a3 toVisibleAnimated:(BOOL)a4
{
  id v6;
  void *v7;
  _BOOL4 v8;
  int v9;
  NSObject *v10;
  void *v11;
  void *v12;
  __objc2_class *v13;
  CSMagSafeAccessoryViewController *v14;
  CSMagSafeAccessorySleeveViewController *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  CSMagSafeAccessoryViewController *accessoryViewController;
  int v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  BOOL v29;
  _QWORD v30[4];
  id v31;
  _QWORD v32[4];
  id v33;
  CSCoverSheetViewController *v34;
  BOOL v35;
  uint8_t buf[4];
  void *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  -[CSCoverSheetContextProviding reachabilityController](self->_coverSheetContext, "reachabilityController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "deactivateReachability");

  v8 = -[CSCoverSheetViewController isShowingModalView](self, "isShowingModalView");
  v9 = objc_msgSend(v6, "shouldLockScreenWhenAttached");
  SBLogDashBoard();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(v6, "description");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412290;
    v37 = v11;
    _os_log_impl(&dword_1D0337000, v10, OS_LOG_TYPE_DEFAULT, "Presenting accessory (%@) view.", buf, 0xCu);

  }
  switch(objc_msgSend(v6, "type"))
  {
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
      if (v8)
        goto LABEL_5;
      v13 = CSMagSafeAccessoryTrayViewController;
      goto LABEL_7;
    case 6:
      v15 = -[CSMagSafeAccessorySleeveViewController initWithAccessory:]([CSMagSafeAccessorySleeveViewController alloc], "initWithAccessory:", v6);
      -[CSCoverSheetContextProviding dateProvider](self->_coverSheetContext, "dateProvider");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      -[CSMagSafeAccessorySleeveViewController setDateProvider:](v15, "setDateProvider:", v16);

      objc_msgSend(v6, "visibleScreenCoordinates");
      -[CSMagSafeAccessorySleeveViewController setVisibleBounds:](v15, "setVisibleBounds:");
      -[CSCoverSheetViewController activeAppearance](self, "activeAppearance");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "legibilitySettings");
      v29 = a4;
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      -[CSMagSafeAccessorySleeveViewController setLegibilitySettings:](v15, "setLegibilitySettings:", v18);

      -[SBFLockScreenDateViewController dateView](self->_dateViewController, "dateView");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "customTimeFont");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "textColor");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "vibrancyConfiguration");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "customTimeNumberingSystem");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      -[CSMagSafeAccessorySleeveViewController updateFont:textColor:vibrancyConfiguration:numberingSystem:](v15, "updateFont:textColor:vibrancyConfiguration:numberingSystem:", v19, v20, v21, v22);

      a4 = v29;
      accessoryViewController = self->_accessoryViewController;
      self->_accessoryViewController = &v15->super;

      goto LABEL_9;
    case 8:
      if (v8)
      {
LABEL_5:
        v12 = self->_accessoryViewController;
        self->_accessoryViewController = 0;
      }
      else
      {
        v13 = CSMagSafeAccessoryWalletViewController;
LABEL_7:
        v14 = (CSMagSafeAccessoryViewController *)objc_msgSend([v13 alloc], "initWithAccessory:", v6);
        v12 = self->_accessoryViewController;
        self->_accessoryViewController = v14;
      }
LABEL_9:

      if (self->_accessoryViewController)
      {
        v24 = v9 & v8;
        v25 = MEMORY[0x1E0C809B0];
        v32[0] = MEMORY[0x1E0C809B0];
        v32[1] = 3221225472;
        v32[2] = __66__CSCoverSheetViewController__animateAccessory_toVisibleAnimated___block_invoke;
        v32[3] = &unk_1E8E2E778;
        v33 = v6;
        v34 = self;
        v35 = a4;
        v26 = MEMORY[0x1D17E1614](v32);
        v27 = (void *)v26;
        if (v24)
        {
          -[CSCoverSheetViewController modalPresentationController](self, "modalPresentationController");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          v30[0] = v25;
          v30[1] = 3221225472;
          v30[2] = __66__CSCoverSheetViewController__animateAccessory_toVisibleAnimated___block_invoke_523;
          v30[3] = &unk_1E8E2DFD8;
          v31 = v27;
          objc_msgSend(v28, "dismissPresentationAnimated:completion:", 1, v30);

        }
        else
        {
          (*(void (**)(uint64_t))(v26 + 16))(v26);
        }

      }
      break;
    default:
      break;
  }

}

void __66__CSCoverSheetViewController__animateAccessory_toVisibleAnimated___block_invoke(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  double v4;
  double v5;
  NSObject *v6;
  dispatch_time_t v7;
  id v8;
  int8x16_t v9;
  _QWORD block[4];
  int8x16_t v11;
  char v12;
  uint8_t buf[4];
  double v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  SBLogDashBoardTelemetrySignposts();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D0337000, v2, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "SB_ACCESSORY_UI_FADE_IN", " enableTelemetry=YES  isAnimation=YES ", buf, 2u);
  }

  kdebug_trace();
  v3 = objc_msgSend(*(id *)(a1 + 32), "shouldDelayAnimation");
  objc_msgSend(*(id *)(a1 + 40), "_updateAccessoryAnimationPresenting:userInteractionDisabled:", 1, v3);
  v4 = 0.0;
  if ((_DWORD)v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "attachAnimationDelay");
    v4 = v5;
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 1248) = v5 > 0.0;
  }
  SBLogDashBoard();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v14 = v4;
    _os_log_impl(&dword_1D0337000, v6, OS_LOG_TYPE_DEFAULT, "Accessory animation delay in seconds: %f", buf, 0xCu);
  }

  v7 = dispatch_time(0, (uint64_t)(v4 * 1000000000.0));
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __66__CSCoverSheetViewController__animateAccessory_toVisibleAnimated___block_invoke_516;
  block[3] = &unk_1E8E2E778;
  v12 = *(_BYTE *)(a1 + 48);
  v9 = *(int8x16_t *)(a1 + 32);
  v8 = (id)v9.i64[0];
  v11 = vextq_s8(v9, v9, 8uLL);
  dispatch_after(v7, MEMORY[0x1E0C80D38], block);

}

void __66__CSCoverSheetViewController__animateAccessory_toVisibleAnimated___block_invoke_516(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  CSDismissableModalViewController *v4;
  CSDismissableModalViewController *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  double v19;
  double v20;
  uint64_t v21;
  id v22;
  _QWORD v23[5];
  _QWORD v24[4];
  id v25;
  id v26;
  _QWORD v27[4];
  CSDismissableModalViewController *v28;
  uint64_t v29;
  id v30;
  id v31;
  id buf[2];

  if ((objc_msgSend(*(id *)(a1 + 32), "_isShowingChargingModal") & 1) != 0)
  {
    SBLogDashBoard();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl(&dword_1D0337000, v2, OS_LOG_TYPE_DEFAULT, "Accessory animation cancelled because charing UI showed up in race", (uint8_t *)buf, 2u);
    }

    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(CSDismissableModalViewController **)(v3 + 1256);
    *(_QWORD *)(v3 + 1256) = 0;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 1248) = 0;
    v5 = objc_alloc_init(CSDismissableModalViewController);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1040), "modalHomeAffordanceController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSDismissableModalViewController setHomeAffordanceController:](v5, "setHomeAffordanceController:", v6);

    -[CSDismissableModalViewController setDelegate:](v5, "setDelegate:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1256));
    objc_initWeak(buf, *(id *)(a1 + 32));
    v7 = *(void **)(a1 + 32);
    v8 = *(unsigned __int8 *)(a1 + 48);
    v9 = MEMORY[0x1E0C809B0];
    v27[0] = MEMORY[0x1E0C809B0];
    v27[1] = 3221225472;
    v27[2] = __66__CSCoverSheetViewController__animateAccessory_toVisibleAnimated___block_invoke_2;
    v27[3] = &unk_1E8E2E930;
    v4 = v5;
    v10 = *(_QWORD *)(a1 + 32);
    v28 = v4;
    v29 = v10;
    objc_copyWeak(&v31, buf);
    v30 = *(id *)(a1 + 40);
    objc_msgSend(v7, "_presentModalViewController:animated:completion:", v4, v8, v27);
    if ((objc_msgSend(*(id *)(a1 + 40), "hasStaticView") & 1) == 0)
    {
      v24[0] = v9;
      v24[1] = 3221225472;
      v24[2] = __66__CSCoverSheetViewController__animateAccessory_toVisibleAnimated___block_invoke_517;
      v24[3] = &unk_1E8E2E958;
      objc_copyWeak(&v26, buf);
      v25 = *(id *)(a1 + 40);
      v11 = MEMORY[0x1D17E1614](v24);
      v12 = *(_QWORD *)(a1 + 32);
      v13 = *(void **)(v12 + 1272);
      *(_QWORD *)(v12 + 1272) = v11;

      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1264), "invalidate");
      v14 = objc_msgSend(objc_alloc(MEMORY[0x1E0D01690]), "initWithIdentifier:", CFSTR("CSCoverSheetViewController.accessoryViewControllerTimer"));
      v15 = *(_QWORD *)(a1 + 32);
      v16 = *(void **)(v15 + 1264);
      *(_QWORD *)(v15 + 1264) = v14;

      v17 = *(_QWORD *)(a1 + 32);
      v18 = *(void **)(v17 + 1264);
      objc_msgSend(*(id *)(v17 + 1256), "animationDurationBeforeDismissal");
      v20 = v19;
      v21 = MEMORY[0x1E0C80D38];
      v22 = MEMORY[0x1E0C80D38];
      v23[0] = v9;
      v23[1] = 3221225472;
      v23[2] = __66__CSCoverSheetViewController__animateAccessory_toVisibleAnimated___block_invoke_2_521;
      v23[3] = &unk_1E8E2E980;
      v23[4] = *(_QWORD *)(a1 + 32);
      objc_msgSend(v18, "scheduleWithFireInterval:leewayInterval:queue:handler:", v21, v23, v20, 0.0);

      objc_destroyWeak(&v26);
    }

    objc_destroyWeak(&v31);
    objc_destroyWeak(buf);
  }

}

void __66__CSCoverSheetViewController__animateAccessory_toVisibleAnimated___block_invoke_2(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;
  id v9;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 1256);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __66__CSCoverSheetViewController__animateAccessory_toVisibleAnimated___block_invoke_3;
  v6[3] = &unk_1E8E2E908;
  objc_copyWeak(&v9, (id *)(a1 + 56));
  v4 = *(id *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 40);
  v7 = v4;
  v8 = v5;
  objc_msgSend(v2, "presentContentViewController:animated:completion:", v3, 1, v6);

  objc_destroyWeak(&v9);
}

void __66__CSCoverSheetViewController__animateAccessory_toVisibleAnimated___block_invoke_3(uint64_t a1)
{
  NSObject *v2;
  id WeakRetained;
  void *v4;
  uint8_t v5[16];

  SBLogDashBoardTelemetrySignposts();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D0337000, v2, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "SB_ACCESSORY_UI_FADE_IN", " enableTelemetry=YES  isAnimation=YES ", v5, 2u);
  }

  kdebug_trace();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (objc_msgSend(*(id *)(a1 + 32), "isWindowed"))
  {
    objc_msgSend(WeakRetained, "delegate");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "coverSheetWindowedAccessoryViewControllerDidPresent:", *(_QWORD *)(a1 + 40));

  }
}

void __66__CSCoverSheetViewController__animateAccessory_toVisibleAnimated___block_invoke_517(uint64_t a1)
{
  id v2;
  id v3;
  id *WeakRetained;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_transitionAccessoryViewToVisible:accessory:animated:", 0, *(_QWORD *)(a1 + 32), objc_msgSend(WeakRetained, "isViewLoaded"));
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained[158], "invalidate");
    v2 = WeakRetained[158];
    WeakRetained[158] = 0;

    v3 = WeakRetained[159];
    WeakRetained[159] = 0;

  }
}

uint64_t __66__CSCoverSheetViewController__animateAccessory_toVisibleAnimated___block_invoke_2_521(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 1272) + 16))();
}

uint64_t __66__CSCoverSheetViewController__animateAccessory_toVisibleAnimated___block_invoke_523(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

- (void)_dismissAccessoryViewController:(id)a3 animated:(BOOL)a4
{
  id v6;
  _BOOL4 v7;
  NSObject *v8;
  _BOOL4 v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v14[5];
  id v15;
  BOOL v16;
  uint8_t buf[4];
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  if (v6)
  {
    v7 = -[CSCoverSheetViewController _currentlyShowingAccessoryView](self, "_currentlyShowingAccessoryView");
    SBLogDashBoard();
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      if (v9)
      {
        objc_msgSend(v6, "accessory");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "description");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v18 = v11;
        _os_log_impl(&dword_1D0337000, v8, OS_LOG_TYPE_DEFAULT, "Dismissing accessory (%@) UI.", buf, 0xCu);

      }
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 3221225472;
      v14[2] = __71__CSCoverSheetViewController__dismissAccessoryViewController_animated___block_invoke;
      v14[3] = &unk_1E8E2E778;
      v14[4] = self;
      v15 = v6;
      v16 = a4;
      objc_msgSend(v15, "performDismissalAnimationWithCompletionHandler:", v14);

    }
    else
    {
      if (v9)
      {
        objc_msgSend(v6, "accessory");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "description");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v18 = v13;
        _os_log_impl(&dword_1D0337000, v8, OS_LOG_TYPE_DEFAULT, "Dismissing non-presented accessory (%@) UI.", buf, 0xCu);

      }
      -[CSCoverSheetViewController _handleDismissalForAccessoryViewController:animated:](self, "_handleDismissalForAccessoryViewController:animated:", v6, 0);
    }
  }

}

uint64_t __71__CSCoverSheetViewController__dismissAccessoryViewController_animated___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleDismissalForAccessoryViewController:animated:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

- (void)_handleDismissalForAccessoryViewController:(id)a3 animated:(BOOL)a4
{
  _BOOL8 v4;
  id v6;
  NSObject *v7;
  void *v8;
  id v9;
  _QWORD v10[5];
  id v11;
  BOOL v12;
  uint8_t buf[16];

  v4 = a4;
  v6 = a3;
  if (v4)
  {
    SBLogDashBoardTelemetrySignposts();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v7))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1D0337000, v7, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "SB_ACCESSORY_UI_FADE_OUT", " enableTelemetry=YES  isAnimation=YES ", buf, 2u);
    }

    kdebug_trace();
  }
  -[CSCoverSheetViewController _modalPresentedViewControllerForShowingAccessoryView](self, "_modalPresentedViewControllerForShowingAccessoryView");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __82__CSCoverSheetViewController__handleDismissalForAccessoryViewController_animated___block_invoke;
  v10[3] = &unk_1E8E2E778;
  v12 = v4;
  v10[4] = self;
  v11 = v6;
  v9 = v6;
  -[CSCoverSheetViewController _dismissModalViewController:animated:completion:](self, "_dismissModalViewController:animated:completion:", v8, v4, v10);

}

void __82__CSCoverSheetViewController__handleDismissalForAccessoryViewController_animated___block_invoke(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  char v5;
  uint8_t v6[16];

  if (*(_BYTE *)(a1 + 48))
  {
    SBLogDashBoardTelemetrySignposts();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v2))
    {
      *(_WORD *)v6 = 0;
      _os_signpost_emit_with_name_impl(&dword_1D0337000, v2, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "SB_ACCESSORY_UI_FADE_OUT", " enableTelemetry=YES  isAnimation=YES ", v6, 2u);
    }

    kdebug_trace();
  }
  objc_msgSend(*(id *)(a1 + 32), "_updateAccessoryAnimationPresenting:userInteractionDisabled:", 0, 0);
  objc_msgSend(*(id *)(a1 + 32), "delegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "accessory");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "isWindowed"))
  {
    v5 = objc_opt_respondsToSelector();

    if ((v5 & 1) != 0)
      objc_msgSend(v3, "coverSheetWindowedAccessoryViewControllerDidDismiss:", *(_QWORD *)(a1 + 32));
  }
  else
  {

  }
}

- (void)_powerStatusChangedToConnectedState:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  uint64_t v6;
  _BOOL4 v7;
  _BOOL4 v8;
  void *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  _BOOL4 v13;
  int v14;
  _BOOL4 v15;
  __int16 v16;
  _BOOL4 v17;
  uint64_t v18;

  v3 = a3;
  v18 = *MEMORY[0x1E0C80C00];
  if (!-[CSCoverSheetViewController _isWakeAnimationInProgress](self, "_isWakeAnimationInProgress"))
  {
    -[CSCoverSheetContextProviding screenStateProvider](self->_coverSheetContext, "screenStateProvider");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "screenIsOn");

    -[CSPowerChangeObserver update](self->_powerChangeObserver, "update");
    if (-[CSCoverSheetViewController _showingAccessoryView](self, "_showingAccessoryView")
      && -[CSMagSafeAccessoryViewController hasChargingAnimation](self->_accessoryViewController, "hasChargingAnimation"))
    {
      v7 = -[CSMagSafeAccessoryViewController showingChargingAnimation](self->_accessoryViewController, "showingChargingAnimation");
      v8 = v7;
      if (v3 && !v7)
      {
        +[CSAction actionWithType:](CSAction, "actionWithType:", 3);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        -[CSCoverSheetViewController handleAction:fromSender:](self, "handleAction:fromSender:", v9, self);

      }
      if (!v3 || !v8)
        -[CSCoverSheetViewController _transitionAccessoryChargingViewToVisible:](self, "_transitionAccessoryChargingViewToVisible:", v3);
    }
    else
    {
      SBLogDashBoard();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        v14 = 67109376;
        v15 = v3;
        v16 = 1024;
        v17 = -[CSCoverSheetViewController _isShowingChargingModal](self, "_isShowingChargingModal");
        _os_log_impl(&dword_1D0337000, v10, OS_LOG_TYPE_DEFAULT, "[Charge UI][Power Status] visible YES, showBattery %d – isAlreadyShowingChargingModal: %d", (uint8_t *)&v14, 0xEu);
      }

      if (self->_blockingPowerStatusTriggeredChargingUI
        || -[CSPowerChangeObserver isConnectedToWirelessInternalChargingAccessory](self->_powerChangeObserver, "isConnectedToWirelessInternalChargingAccessory")|| self->_suppressChargingUIForAmbient)
      {
        if (self->_suppressChargingUIForAmbient)
        {
          SBLogDashBoard();
          v11 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v14) = 0;
            _os_log_impl(&dword_1D0337000, v11, OS_LOG_TYPE_DEFAULT, "[Charge UI][Suppressed] visible NO, suppressed for ambient presentation!", (uint8_t *)&v14, 2u);
          }

        }
      }
      else
      {
        -[CSCoverSheetViewController _transitionChargingViewToVisible:showBattery:animated:](self, "_transitionChargingViewToVisible:showBattery:animated:", 1, v3, v6);
      }
      SBLogDashBoard();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        v13 = -[CSCoverSheetViewController _isShowingChargingModal](self, "_isShowingChargingModal");
        v14 = 67109120;
        v15 = v13;
        _os_log_impl(&dword_1D0337000, v12, OS_LOG_TYPE_DEFAULT, "[Charge UI][Power Status] – endedShowingChargingModal: %d", (uint8_t *)&v14, 8u);
      }

    }
  }
}

- (BOOL)_transitionPrototypeChargingViewToVisible:(BOOL)a3 animated:(BOOL)a4
{
  _BOOL8 v5;
  void *v7;
  _BOOL4 v8;
  id v9;
  void (**v10)(_QWORD, _QWORD, _QWORD);
  uint64_t v11;
  BOOL v12;
  _QWORD v14[4];
  id v15;
  CSCoverSheetViewController *v16;
  id v17;
  BOOL v18;
  id location;

  v5 = a3;
  -[CSLockScreenSettings chargingSettings](self->_prototypeSettings, "chargingSettings");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v7, "showWirelessAndAccessoryAnimations"))
    goto LABEL_12;
  if (!self->_accessoryViewController)
  {
    if (!v5)
      goto LABEL_12;
LABEL_7:
    objc_initWeak(&location, self);
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __81__CSCoverSheetViewController__transitionPrototypeChargingViewToVisible_animated___block_invoke;
    v14[3] = &unk_1E8E2E9A8;
    objc_copyWeak(&v17, &location);
    v9 = v7;
    v15 = v9;
    v16 = self;
    v18 = a4;
    v10 = (void (**)(_QWORD, _QWORD, _QWORD))MEMORY[0x1D17E1614](v14);
    if (-[CSPowerChangeObserver isConnectedToQiPower](self->_powerChangeObserver, "isConnectedToQiPower")
      || -[CSPowerChangeObserver isConnectedToWirelessInternalChargingAccessory](self->_powerChangeObserver, "isConnectedToWirelessInternalChargingAccessory")|| -[CSPowerChangeObserver isConnectedToWirelessInternalCharger](self->_powerChangeObserver, "isConnectedToWirelessInternalCharger"))
    {
      v11 = objc_msgSend(v9, "wirelessChargingAnimationType");
      if (v11 == 1)
      {
LABEL_11:

        objc_destroyWeak(&v17);
        objc_destroyWeak(&location);
        goto LABEL_12;
      }
    }
    else
    {
      v11 = objc_msgSend(v9, "wiredChargingAnimationType");
      if (!v11)
        goto LABEL_11;
    }
    v10[2](v10, v5, v11);

    objc_destroyWeak(&v17);
    objc_destroyWeak(&location);
LABEL_14:
    v12 = 1;
    goto LABEL_15;
  }
  v8 = -[CSCoverSheetViewController _currentlyShowingAccessoryView](self, "_currentlyShowingAccessoryView");
  if (v8 != v5)
    goto LABEL_7;
  if (v8)
    goto LABEL_14;
LABEL_12:
  v12 = 0;
LABEL_15:

  return v12;
}

void __81__CSCoverSheetViewController__transitionPrototypeChargingViewToVisible_animated___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (a3 == 4)
    objc_msgSend(MEMORY[0x1E0CEA478], "clearColor");
  else
    objc_msgSend(MEMORY[0x1E0CEA478], "systemOrangeColor");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(*(id *)(a1 + 32), "accessoryTypeForAnimationType:", a3);
  objc_msgSend(MEMORY[0x1E0CEA478], "systemRedColor");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[CSMagSafeAccessory accessoryWithType:primaryColor:secondaryColor:](CSMagSafeAccessory, "accessoryWithType:primaryColor:secondaryColor:", v7, v6, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1320), "sb_deviceInternalBattery");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "isCharging");

  if (!objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1256), "isStatic") || (a2 & 1) != 0 || !v11)
    objc_msgSend(WeakRetained, "_transitionAccessoryViewToVisible:accessory:animated:", a2, v9, *(unsigned __int8 *)(a1 + 56));

}

- (void)_transitionAccessoryChargingViewToVisible:(BOOL)a3
{
  _BOOL4 v3;
  void *v5;
  void *v6;
  _BOOL4 v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  NSObject *v15;
  NSObject *v16;
  id v17;
  BSAbsoluteMachTimer *v18;
  void *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  id accessoryViewControllerChargingTimerHandler;
  BSAbsoluteMachTimer *v24;
  BSAbsoluteMachTimer *accessoryViewControllerChargingTimer;
  BSAbsoluteMachTimer *v26;
  double v27;
  double v28;
  uint64_t v29;
  id v30;
  _QWORD v31[5];
  _QWORD v32[4];
  id v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  id buf;
  __int16 v39;
  int v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (self->_accessoryViewController)
  {
    v3 = a3;
    -[CSCoverSheetViewController _chargingInfo](self, "_chargingInfo");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSCoverSheetViewController _batteryCenterInternalBattery](self, "_batteryCenterInternalBattery");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setInternalBatteryDevice:", v6);

    if (v3)
    {
      v7 = -[CSPowerChangeObserver isConnectedToWirelessInternalCharger](self->_powerChangeObserver, "isConnectedToWirelessInternalCharger");
      if (-[CSPowerChangeObserver isConnectedToWirelessInternalChargingAccessory](self->_powerChangeObserver, "isConnectedToWirelessInternalChargingAccessory"))
      {
        objc_msgSend(v5, "externalBatteryDevice");
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        if (v8)
          goto LABEL_22;
      }
      -[CSCoverSheetViewController _connectedExternalChargers](self, "_connectedExternalChargers");
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v9 = (id)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v34, v41, 16);
      if (v10)
      {
        v11 = *(_QWORD *)v35;
        v12 = *MEMORY[0x1E0D01B28];
        while (2)
        {
          for (i = 0; i != v10; ++i)
          {
            if (*(_QWORD *)v35 != v11)
              objc_enumerationMutation(v9);
            v14 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * i);
            if (objc_msgSend(v14, "isPowerSource") && objc_msgSend(v14, "productIdentifier") == v12)
            {
              objc_msgSend(v5, "setChargingWithInternalWirelessAccessory:", 1);
              objc_msgSend(v5, "setExternalBatteryDevice:", v14);

              goto LABEL_22;
            }
          }
          v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v34, v41, 16);
          if (v10)
            continue;
          break;
        }
      }

      if (v7)
      {
LABEL_22:
        +[CSAction actionWithType:](CSAction, "actionWithType:", 3);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        -[CSCoverSheetViewController handleAction:fromSender:](self, "handleAction:fromSender:", v19, self);

        SBLogDashBoard();
        v20 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_1D0337000, v20, OS_LOG_TYPE_DEFAULT, "Showing accessory charging UI", (uint8_t *)&buf, 2u);
        }

        -[CSMagSafeAccessoryViewController transitionChargingViewVisible:chargingInfo:](self->_accessoryViewController, "transitionChargingViewVisible:chargingInfo:", 1, v5);
        objc_initWeak(&buf, self);
        v21 = MEMORY[0x1E0C809B0];
        v32[0] = MEMORY[0x1E0C809B0];
        v32[1] = 3221225472;
        v32[2] = __72__CSCoverSheetViewController__transitionAccessoryChargingViewToVisible___block_invoke;
        v32[3] = &unk_1E8E2E868;
        objc_copyWeak(&v33, &buf);
        v22 = (void *)MEMORY[0x1D17E1614](v32);
        accessoryViewControllerChargingTimerHandler = self->_accessoryViewControllerChargingTimerHandler;
        self->_accessoryViewControllerChargingTimerHandler = v22;

        v24 = (BSAbsoluteMachTimer *)objc_msgSend(objc_alloc(MEMORY[0x1E0D01690]), "initWithIdentifier:", CFSTR("CSCoverSheetViewController.accessoryViewControllerChargingTimer"));
        accessoryViewControllerChargingTimer = self->_accessoryViewControllerChargingTimer;
        self->_accessoryViewControllerChargingTimer = v24;

        v26 = self->_accessoryViewControllerChargingTimer;
        -[CSMagSafeAccessoryViewController chargingAnimationDuration](self->_accessoryViewController, "chargingAnimationDuration");
        v28 = v27;
        v29 = MEMORY[0x1E0C80D38];
        v30 = MEMORY[0x1E0C80D38];
        v31[0] = v21;
        v31[1] = 3221225472;
        v31[2] = __72__CSCoverSheetViewController__transitionAccessoryChargingViewToVisible___block_invoke_2;
        v31[3] = &unk_1E8E2E980;
        v31[4] = self;
        -[BSAbsoluteMachTimer scheduleWithFireInterval:leewayInterval:queue:handler:](v26, "scheduleWithFireInterval:leewayInterval:queue:handler:", v29, v31, v28, 0.0);

        objc_destroyWeak(&v33);
        objc_destroyWeak(&buf);
      }
      else
      {
        SBLogDashBoard();
        v15 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          buf = (id)67109376;
          v39 = 1024;
          v40 = 0;
          _os_log_impl(&dword_1D0337000, v15, OS_LOG_TYPE_DEFAULT, "Suppressing accessory charging UI when isChargerConnected: %{BOOL}u, isAccessoryConnected: %{BOOL}u", (uint8_t *)&buf, 0xEu);
        }

      }
    }
    else
    {
      SBLogDashBoard();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1D0337000, v16, OS_LOG_TYPE_DEFAULT, "Dismissing accessory charging UI.", (uint8_t *)&buf, 2u);
      }

      -[BSAbsoluteMachTimer invalidate](self->_accessoryViewControllerChargingTimer, "invalidate");
      v17 = self->_accessoryViewControllerChargingTimerHandler;
      self->_accessoryViewControllerChargingTimerHandler = 0;

      v18 = self->_accessoryViewControllerChargingTimer;
      self->_accessoryViewControllerChargingTimer = 0;

      -[CSMagSafeAccessoryViewController transitionChargingViewVisible:chargingInfo:](self->_accessoryViewController, "transitionChargingViewVisible:chargingInfo:", 0, v5);
    }

  }
}

void __72__CSCoverSheetViewController__transitionAccessoryChargingViewToVisible___block_invoke(uint64_t a1)
{
  id v1;
  id v2;
  id *WeakRetained;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_transitionAccessoryChargingViewToVisible:", 0);
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained[160], "invalidate");
    v1 = WeakRetained[160];
    WeakRetained[160] = 0;

    v2 = WeakRetained[161];
    WeakRetained[161] = 0;

  }
  objc_msgSend(WeakRetained, "_updateDateSubtitleAppearanceForBattery:animated:chargingVisible:", 0, objc_msgSend(WeakRetained, "isViewLoaded"), 0);

}

uint64_t __72__CSCoverSheetViewController__transitionAccessoryChargingViewToVisible___block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 1288) + 16))();
}

- (id)_batteryCenterInternalBattery
{
  void *v2;
  void *v3;
  void *v4;

  -[BCBatteryDeviceController connectedDevices](self->_batteryDeviceController, "connectedDevices");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "bs_filter:", &__block_literal_global_531);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "firstObject");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

uint64_t __59__CSCoverSheetViewController__batteryCenterInternalBattery__block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "isInternal");
}

- (id)_connectedExternalChargers
{
  void *v2;
  void *v3;

  -[BCBatteryDeviceController connectedDevices](self->_batteryDeviceController, "connectedDevices");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "bs_filter:", &__block_literal_global_532);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

BOOL __56__CSCoverSheetViewController__connectedExternalChargers__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  _BOOL8 v3;

  v2 = a2;
  v3 = objc_msgSend(v2, "isPowerSource")
    && (objc_msgSend(v2, "isInternal") & 1) == 0
    && objc_msgSend(v2, "accessoryCategory") == 4;

  return v3;
}

- (id)_chargingInfo
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _BOOL8 v7;

  v3 = (void *)objc_opt_new();
  -[BCBatteryDeviceController sb_deviceInternalBattery](self->_batteryDeviceController, "sb_deviceInternalBattery");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setInternalBatteryDevice:", v4);

  -[CSCoverSheetViewController _connectedExternalChargers](self, "_connectedExternalChargers");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "firstObject");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setExternalBatteryDevice:", v6);

  v7 = -[CSPowerChangeObserver isConnectedToWirelessInternalChargingAccessory](self->_powerChangeObserver, "isConnectedToWirelessInternalChargingAccessory")|| -[CSPowerChangeObserver isConnectedToWirelessInternalCharger](self->_powerChangeObserver, "isConnectedToWirelessInternalCharger");
  objc_msgSend(v3, "setChargingWithInternalWirelessAccessory:", v7);
  return v3;
}

- (void)_transitionChargingViewToVisible:(BOOL)a3 showBattery:(BOOL)a4 animated:(BOOL)a5
{
  -[CSCoverSheetViewController _transitionChargingViewToVisible:suppressedByPack:showBattery:animated:](self, "_transitionChargingViewToVisible:suppressedByPack:showBattery:animated:", a3, 1, a4, a5);
}

- (void)_transitionChargingViewToVisible:(BOOL)a3 suppressedByPack:(BOOL)a4 showBattery:(BOOL)a5 animated:(BOOL)a6
{
  _BOOL8 v6;
  _BOOL4 v7;
  _BOOL4 v9;
  _BOOL4 v10;
  NSObject *v11;
  void *v12;
  int v13;
  int v14;
  BOOL v15;
  NSObject *v16;
  id chargingViewTimerHandler;
  BSAbsoluteMachTimer *chargingViewControllerTimer;
  CSChargingViewController *chargingViewController;
  _BOOL8 v20;
  NSObject *v21;
  int v22;
  _BOOL4 v23;
  _BOOL4 v24;
  uint64_t v25;
  NSObject *v26;
  void *v27;
  CSChargingViewController *v28;
  uint64_t v29;
  int v30;
  _BOOL4 v31;
  void *v32;
  void *v33;
  NSObject *v34;
  _BOOL4 v35;
  _BOOL4 v36;
  CSChargingViewController *v37;
  CSChargingViewController *v38;
  NSObject *v39;
  CSChargingViewController *v40;
  NSObject *v41;
  NSObject *v42;
  _BOOL4 v43;
  _BOOL4 v44;
  void *v45;
  id v46;
  double v47;
  CSChargingViewController *v48;
  double v49;
  BSAbsoluteMachTimer *v50;
  BSAbsoluteMachTimer *v51;
  BSAbsoluteMachTimer *v52;
  uint64_t v53;
  id v54;
  _BOOL4 v55;
  _BOOL4 v56;
  _QWORD v57[5];
  BOOL v58;
  _QWORD v59[5];
  _QWORD v60[4];
  id v61;
  _QWORD v62[5];
  id buf;
  __int16 v64;
  _BOOL4 v65;
  __int16 v66;
  _BOOL4 v67;
  uint64_t v68;

  v6 = a6;
  v56 = a5;
  v7 = a3;
  v68 = *MEMORY[0x1E0C80C00];
  v9 = !a3;
  if (a3
    && a4
    && -[CSPowerChangeObserver isConnectedToWirelessInternalChargingAccessory](self->_powerChangeObserver, "isConnectedToWirelessInternalChargingAccessory")|| -[CSCoverSheetViewController _transitionPrototypeChargingViewToVisible:animated:](self, "_transitionPrototypeChargingViewToVisible:animated:", v56, v6))
  {
    return;
  }
  v10 = -[CSCoverSheetViewController _isShowingChargingModal](self, "_isShowingChargingModal");
  if (!v9 && v10)
  {
    SBLogDashBoard();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v55 = self->_chargingViewController != 0;
      -[CSPresentationViewController contentViewControllers](self->_modalPresentationController, "contentViewControllers");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v12, "containsObject:", self->_chargingViewController);
      v14 = -[NSMutableSet containsObject:](self->_pendingModalViewControllers, "containsObject:", self->_chargingViewController);
      LODWORD(buf) = 67109632;
      HIDWORD(buf) = v55;
      v64 = 1024;
      v65 = v13;
      v66 = 1024;
      v67 = v14;
      _os_log_impl(&dword_1D0337000, v11, OS_LOG_TYPE_DEFAULT, "Refusing to present charging UI. hasChargingViewController: %d, chargingViewControllerIsPresented: %d, presentingChargingViewController: %d", (uint8_t *)&buf, 0x14u);

    }
  }
  if (v9 || v10)
  {
    if (!v7 && v10)
    {
      v15 = v6;
      SBLogDashBoard();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1D0337000, v16, OS_LOG_TYPE_DEFAULT, "Dismissing charging UI.", (uint8_t *)&buf, 2u);
      }

      -[BSAbsoluteMachTimer invalidate](self->_chargingViewControllerTimer, "invalidate");
      chargingViewTimerHandler = self->_chargingViewTimerHandler;
      self->_chargingViewTimerHandler = 0;

      chargingViewControllerTimer = self->_chargingViewControllerTimer;
      self->_chargingViewControllerTimer = 0;

      chargingViewController = self->_chargingViewController;
      v57[0] = MEMORY[0x1E0C809B0];
      v57[1] = 3221225472;
      v57[2] = __101__CSCoverSheetViewController__transitionChargingViewToVisible_suppressedByPack_showBattery_animated___block_invoke_536;
      v57[3] = &unk_1E8E2E190;
      v57[4] = self;
      v58 = v15;
      -[CSChargingViewController performDismissalAnimationWithCompletionHandler:](chargingViewController, "performDismissalAnimationWithCompletionHandler:", v57);
    }
    return;
  }
  v20 = v6;
  SBLogDashBoard();
  v21 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1D0337000, v21, OS_LOG_TYPE_DEFAULT, "Presenting charging UI.", (uint8_t *)&buf, 2u);
  }

  v22 = -[CSCoverSheetViewController _appearState](self, "_appearState");
  v23 = -[CSCoverSheetViewController isMainPageVisible](self, "isMainPageVisible");
  v24 = -[CSCoverSheetViewController isShowingModalView](self, "isShowingModalView");
  v25 = MEMORY[0x1E0C809B0];
  if (v22 == 2 && v23 && !v24)
  {
    +[CSAction actionWithType:](CSAction, "actionWithType:", 3);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSCoverSheetViewController handleAction:fromSender:](self, "handleAction:fromSender:", v27, self);

    -[CSCoverSheetViewController _chargingInfo](self, "_chargingInfo");
    v26 = objc_claimAutoreleasedReturnValue();
    v28 = self->_chargingViewController;
    v29 = SBFEffectiveArtworkSubtype();
    v30 = 0;
    if (v29 > 2795)
    {
      if (v29 == 2796 || v29 == 2868)
        goto LABEL_26;
    }
    else if (v29 == 2556 || v29 == 2622)
    {
      goto LABEL_26;
    }
    v30 = 1;
LABEL_26:
    if (-[CSPowerChangeObserver isConnectedToWirelessInternalCharger](self->_powerChangeObserver, "isConnectedToWirelessInternalCharger")|| -[CSPowerChangeObserver isConnectedToWirelessInternalChargingAccessory](self->_powerChangeObserver, "isConnectedToWirelessInternalChargingAccessory"))
    {
      v31 = 1;
    }
    else
    {
      -[NSObject externalBatteryDevice](v26, "externalBatteryDevice");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = v32;
      v31 = v32 && objc_msgSend(v32, "accessoryCategory") == 4 && objc_msgSend(v33, "vendor") == 1;

    }
    if (!v28 && v30 | v31 && v56)
    {
      SBLogDashBoard();
      v34 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        v35 = self->_chargingViewController != 0;
        v36 = -[CSCoverSheetViewController _isShowingChargingModal](self, "_isShowingChargingModal");
        LODWORD(buf) = 67109376;
        HIDWORD(buf) = v35;
        v64 = 1024;
        v65 = v36;
        _os_log_impl(&dword_1D0337000, v34, OS_LOG_TYPE_DEFAULT, "Creating charging VC. alreadyExisted: %d alreadyPresented: %d", (uint8_t *)&buf, 0xEu);
      }

      v37 = -[CSChargingViewController initWithChargingInfo:]([CSChargingViewController alloc], "initWithChargingInfo:", v26);
      v38 = self->_chargingViewController;
      self->_chargingViewController = v37;

      SBLogDashBoardTelemetrySignposts();
      v39 = objc_claimAutoreleasedReturnValue();
      if (os_signpost_enabled(v39))
      {
        LOWORD(buf) = 0;
        _os_signpost_emit_with_name_impl(&dword_1D0337000, v39, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "SB_CHARGING_UI_FADE_IN", " enableTelemetry=YES  isAnimation=YES ", (uint8_t *)&buf, 2u);
      }

      kdebug_trace();
      v40 = self->_chargingViewController;
      v62[0] = v25;
      v62[1] = 3221225472;
      v62[2] = __101__CSCoverSheetViewController__transitionChargingViewToVisible_suppressedByPack_showBattery_animated___block_invoke;
      v62[3] = &unk_1E8E2DB38;
      v62[4] = self;
      -[CSCoverSheetViewController _presentModalViewController:animated:completion:](self, "_presentModalViewController:animated:completion:", v40, v20, v62);
    }
    if (!v56)
    {
      SBLogDashBoard();
      v41 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1D0337000, v41, OS_LOG_TYPE_DEFAULT, "About to create date subtitle for charge.", (uint8_t *)&buf, 2u);
      }

      -[CSCoverSheetViewController _updateDateSubtitleAppearanceForBattery:animated:chargingVisible:](self, "_updateDateSubtitleAppearanceForBattery:animated:chargingVisible:", 0, v20, 1);
    }
    goto LABEL_46;
  }
  SBLogDashBoard();
  v26 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 67109632;
    HIDWORD(buf) = v22 == 2;
    v64 = 1024;
    v65 = v23;
    v66 = 1024;
    v67 = v24;
    _os_log_impl(&dword_1D0337000, v26, OS_LOG_TYPE_DEFAULT, "Refused to create charging VC because of factors: visible: %d, mainPage: %d, showingModal: %d", (uint8_t *)&buf, 0x14u);
  }
LABEL_46:

  if (self->_chargingViewTimerHandler || self->_chargingViewControllerTimer)
  {
    SBLogDashBoard();
    v42 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      v43 = self->_chargingViewControllerTimer != 0;
      v44 = self->_chargingViewTimerHandler != 0;
      LODWORD(buf) = 67109376;
      HIDWORD(buf) = v43;
      v64 = 1024;
      v65 = v44;
      _os_log_impl(&dword_1D0337000, v42, OS_LOG_TYPE_DEFAULT, "Overwriting timer or handler: timerExists: %d, handlerExists: %d", (uint8_t *)&buf, 0xEu);
    }

  }
  objc_initWeak(&buf, self);
  v60[0] = v25;
  v60[1] = 3221225472;
  v60[2] = __101__CSCoverSheetViewController__transitionChargingViewToVisible_suppressedByPack_showBattery_animated___block_invoke_535;
  v60[3] = &unk_1E8E2E868;
  objc_copyWeak(&v61, &buf);
  v45 = (void *)MEMORY[0x1D17E1614](v60);
  v46 = self->_chargingViewTimerHandler;
  self->_chargingViewTimerHandler = v45;

  v47 = *MEMORY[0x1E0DAB5B0];
  v48 = self->_chargingViewController;
  if (v48 && v56)
  {
    -[CSChargingViewController durationBeforeDismissal](v48, "durationBeforeDismissal");
    v47 = v49;
  }
  -[BSAbsoluteMachTimer invalidate](self->_chargingViewControllerTimer, "invalidate");
  v50 = (BSAbsoluteMachTimer *)objc_msgSend(objc_alloc(MEMORY[0x1E0D01690]), "initWithIdentifier:", CFSTR("CSCoverSheetViewController.chargingViewControllerTimer"));
  v51 = self->_chargingViewControllerTimer;
  self->_chargingViewControllerTimer = v50;

  v52 = self->_chargingViewControllerTimer;
  v53 = MEMORY[0x1E0C80D38];
  v54 = MEMORY[0x1E0C80D38];
  v59[0] = v25;
  v59[1] = 3221225472;
  v59[2] = __101__CSCoverSheetViewController__transitionChargingViewToVisible_suppressedByPack_showBattery_animated___block_invoke_2;
  v59[3] = &unk_1E8E2E980;
  v59[4] = self;
  -[BSAbsoluteMachTimer scheduleWithFireInterval:leewayInterval:queue:handler:](v52, "scheduleWithFireInterval:leewayInterval:queue:handler:", v53, v59, v47, 0.0);

  objc_destroyWeak(&v61);
  objc_destroyWeak(&buf);
}

void __101__CSCoverSheetViewController__transitionChargingViewToVisible_suppressedByPack_showBattery_animated___block_invoke(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  SBLogDashBoardTelemetrySignposts();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v2))
  {
    LOWORD(v5[0]) = 0;
    _os_signpost_emit_with_name_impl(&dword_1D0337000, v2, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "SB_CHARGING_UI_FADE_IN", " enableTelemetry=YES  isAnimation=YES ", (uint8_t *)v5, 2u);
  }

  kdebug_trace();
  SBLogDashBoard();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = objc_msgSend(*(id *)(a1 + 32), "_isShowingChargingModal");
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_1D0337000, v3, OS_LOG_TYPE_DEFAULT, "Finished adding charging VC. presented: %d", (uint8_t *)v5, 8u);
  }

}

void __101__CSCoverSheetViewController__transitionChargingViewToVisible_suppressedByPack_showBattery_animated___block_invoke_535(uint64_t a1)
{
  id v1;
  id v2;
  id *WeakRetained;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_transitionChargingViewToVisible:showBattery:animated:", 0, 0, objc_msgSend(WeakRetained, "isViewLoaded"));
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained[166], "invalidate");
    v1 = WeakRetained[166];
    WeakRetained[166] = 0;

    v2 = WeakRetained[167];
    WeakRetained[167] = 0;

  }
  objc_msgSend(WeakRetained, "_updateDateSubtitleAppearanceForBattery:animated:chargingVisible:", 0, objc_msgSend(WeakRetained, "isViewLoaded"), 0);

}

uint64_t __101__CSCoverSheetViewController__transitionChargingViewToVisible_suppressedByPack_showBattery_animated___block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 1336) + 16))();
}

uint64_t __101__CSCoverSheetViewController__transitionChargingViewToVisible_suppressedByPack_showBattery_animated___block_invoke_536(uint64_t a1)
{
  NSObject *v2;
  id *v3;
  void *v4;
  uint64_t v5;
  _QWORD v7[5];
  uint8_t buf[16];

  SBLogDashBoardTelemetrySignposts();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D0337000, v2, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "SB_CHARGING_UI_FADE_OUT", " enableTelemetry=YES  isAnimation=YES ", buf, 2u);
  }

  kdebug_trace();
  v3 = *(id **)(a1 + 32);
  objc_msgSend(v3[164], "coverSheetIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = *(unsigned __int8 *)(a1 + 40);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __101__CSCoverSheetViewController__transitionChargingViewToVisible_suppressedByPack_showBattery_animated___block_invoke_537;
  v7[3] = &unk_1E8E2DB38;
  v7[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v3, "_dismissModalViewControllersWithIdentifier:animated:completion:", v4, v5, v7);

  return objc_msgSend(*(id *)(a1 + 32), "_updateDateSubtitleAppearanceForBattery:animated:chargingVisible:", 0, *(unsigned __int8 *)(a1 + 40), 0);
}

void __101__CSCoverSheetViewController__transitionChargingViewToVisible_suppressedByPack_showBattery_animated___block_invoke_537(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  uint8_t v5[16];

  SBLogDashBoardTelemetrySignposts();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D0337000, v2, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "SB_CHARGING_UI_FADE_OUT", " enableTelemetry=YES  isAnimation=YES ", v5, 2u);
  }

  kdebug_trace();
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 1312);
  *(_QWORD *)(v3 + 1312) = 0;

}

- (BOOL)_isShowingChargingModal
{
  CSChargingViewController *chargingViewController;
  void *v4;
  BOOL v5;

  chargingViewController = self->_chargingViewController;
  if (chargingViewController)
  {
    -[CSCoverSheetViewControllerBase coverSheetIdentifier](chargingViewController, "coverSheetIdentifier");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = -[CSCoverSheetViewController _isPresentingModalViewControllerWithIdentifier:](self, "_isPresentingModalViewControllerWithIdentifier:", v4);

    LOBYTE(chargingViewController) = v5;
  }
  return (char)chargingViewController;
}

- (void)_clearChargingModalStateIfNecessary
{
  NSObject *v3;
  id chargingViewTimerHandler;
  BSAbsoluteMachTimer *chargingViewControllerTimer;
  CSChargingViewController *chargingViewController;
  void *v7;
  uint8_t v8[16];

  if (!-[CSCoverSheetViewController _isShowingChargingModal](self, "_isShowingChargingModal")
    && self->_chargingViewController)
  {
    SBLogDashBoard();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1D0337000, v3, OS_LOG_TYPE_DEFAULT, "Charging is in a stuck state. Clearing out everything.", v8, 2u);
    }

    -[BSAbsoluteMachTimer invalidate](self->_chargingViewControllerTimer, "invalidate");
    chargingViewTimerHandler = self->_chargingViewTimerHandler;
    self->_chargingViewTimerHandler = 0;

    chargingViewControllerTimer = self->_chargingViewControllerTimer;
    self->_chargingViewControllerTimer = 0;

    chargingViewController = self->_chargingViewController;
    self->_chargingViewController = 0;

    +[CSCoverSheetViewControllerBase coverSheetIdentifier](CSChargingViewController, "coverSheetIdentifier");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSCoverSheetViewController _dismissModalViewControllersWithIdentifier:animated:completion:](self, "_dismissModalViewControllersWithIdentifier:animated:completion:", v7, 0, 0);

  }
}

- (void)_updateDateSubtitleAppearanceForBattery:(BOOL)a3 animated:(BOOL)a4 chargingVisible:(BOOL)a5
{
  _BOOL4 v5;

  if (!a3)
  {
    v5 = a5;
    if (-[CSCoverSheetViewController _isMainPageShowing](self, "_isMainPageShowing"))
    {
      if (v5)
        -[CSCoverSheetViewController _showChargingSubtitleWithTimeout:](self, "_showChargingSubtitleWithTimeout:", *MEMORY[0x1E0DAB5B0]);
    }
  }
}

- (void)_showChargingSubtitleWithTimeout:(double)a3
{
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id chargingViewTimerHandler;
  BSAbsoluteMachTimer *v10;
  BSAbsoluteMachTimer *chargingViewControllerTimer;
  BSAbsoluteMachTimer *v12;
  uint64_t v13;
  id v14;
  _QWORD v15[5];
  _QWORD v16[4];
  id v17;
  id location;

  -[BCBatteryDeviceController sb_deviceInternalBattery](self->_batteryDeviceController, "sb_deviceInternalBattery");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  CSChargePercentageLabelForBattery(v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  -[SBFLockScreenDateViewController setCustomSubtitle:withTimeout:](self->_dateViewController, "setCustomSubtitle:withTimeout:", v6, a3);
  objc_initWeak(&location, self);
  v7 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __63__CSCoverSheetViewController__showChargingSubtitleWithTimeout___block_invoke;
  v16[3] = &unk_1E8E2E868;
  objc_copyWeak(&v17, &location);
  v8 = (void *)objc_msgSend(v16, "copy");
  chargingViewTimerHandler = self->_chargingViewTimerHandler;
  self->_chargingViewTimerHandler = v8;

  -[BSAbsoluteMachTimer invalidate](self->_chargingViewControllerTimer, "invalidate");
  v10 = (BSAbsoluteMachTimer *)objc_msgSend(objc_alloc(MEMORY[0x1E0D01690]), "initWithIdentifier:", CFSTR("CSCoverSheetViewController.chargingViewControllerTimer.subtitleOnly"));
  chargingViewControllerTimer = self->_chargingViewControllerTimer;
  self->_chargingViewControllerTimer = v10;

  v12 = self->_chargingViewControllerTimer;
  v13 = MEMORY[0x1E0C80D38];
  v14 = MEMORY[0x1E0C80D38];
  v15[0] = v7;
  v15[1] = 3221225472;
  v15[2] = __63__CSCoverSheetViewController__showChargingSubtitleWithTimeout___block_invoke_2;
  v15[3] = &unk_1E8E2E980;
  v15[4] = self;
  -[BSAbsoluteMachTimer scheduleWithFireInterval:leewayInterval:queue:handler:](v12, "scheduleWithFireInterval:leewayInterval:queue:handler:", v13, v15, a3, a3 * 0.15);

  objc_destroyWeak(&v17);
  objc_destroyWeak(&location);

}

void __63__CSCoverSheetViewController__showChargingSubtitleWithTimeout___block_invoke(uint64_t a1)
{
  id *WeakRetained;
  id v2;
  id v3;
  id *v4;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    objc_msgSend(WeakRetained[166], "invalidate");
    v2 = v4[166];
    v4[166] = 0;

    v3 = v4[167];
    v4[167] = 0;

    WeakRetained = v4;
  }

}

uint64_t __63__CSCoverSheetViewController__showChargingSubtitleWithTimeout___block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 1336) + 16))();
}

- (void)_transitionChargingDateSubtitleToVisible:(BOOL)a3 animated:(BOOL)a4 force:(BOOL)a5
{
  _BOOL4 v5;
  _BOOL4 v6;
  void *v8;
  void *v9;
  _BOOL4 v10;
  void *v11;
  _QWORD v12[5];
  __CFString *v13;
  BOOL v14;

  v5 = a4;
  v6 = a3;
  if (a5
    || (-[CSCoverSheetViewController localAppearance](self, "localAppearance"),
        v8 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v8, "componentForType:identifier:", 1, CFSTR("ChargingView")),
        v9 = (void *)objc_claimAutoreleasedReturnValue(),
        v10 = v9 == 0,
        v9,
        v8,
        ((v10 ^ v6) & 1) == 0))
  {
    if (v5)
    {
      objc_msgSend(MEMORY[0x1E0D016B0], "settingsWithDuration:", 0.4);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v11 = 0;
    }
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __86__CSCoverSheetViewController__transitionChargingDateSubtitleToVisible_animated_force___block_invoke;
    v12[3] = &unk_1E8E2EA30;
    v12[4] = self;
    v13 = CFSTR("ChargingView");
    v14 = v6;
    -[CSCoverSheetViewController _updateLocalAppearanceForRequester:animationSettings:actions:completion:](self, "_updateLocalAppearanceForRequester:animationSettings:actions:completion:", CFSTR("ChargingView"), v11, v12, 0);
    if (v5)

  }
}

id __86__CSCoverSheetViewController__transitionChargingDateSubtitleToVisible_animated_force___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "localAppearance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "removeAllComponentsWithIdentifier:", *(_QWORD *)(a1 + 40));

  if (!*(_BYTE *)(a1 + 48))
    return 0;
  v3 = objc_alloc(MEMORY[0x1E0DA9E50]);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1320), "sb_deviceInternalBattery");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  CSChargePercentageLabelForBattery(v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v3, "initWithString:accessoryView:", v5, 0);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(v7 + 1624);
  *(_QWORD *)(v7 + 1624) = v6;

  +[CSComponent dateView](CSComponent, "dateView");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "view:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1624));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v13[0] = v10;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v13, 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

- (BOOL)_isMainPageShowing
{
  return -[CSCoverSheetViewController _appearState](self, "_appearState") == 2
      && -[CSCoverSheetViewController isMainPageVisible](self, "isMainPageVisible");
}

- (void)_displayWillTurnOnWhileOnCoverSheet:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v4 = a3;
  -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "resetScrollViewToMainPageAnimated:withCompletion:", 0, 0);

  objc_msgSend(v4, "userInfo");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "objectForKeyedSubscript:", *MEMORY[0x1E0DAC2E8]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "integerValue");

  self->_screenOnForLiftToWake = v8 == 20;
  -[CSCoverSheetViewController _updateActiveBehaviorsForReason:](self, "_updateActiveBehaviorsForReason:", CFSTR("_displayWillTurnOnWhileOnCoverSheet"));
  self->_screenOnForLiftToWake = 0;
}

- (void)_liftToWakeGestureDetected
{
  -[SBUIPhoneUnlockWithWatchController setLiftToWakeGestureDetectedSinceScreenOn:](self->_phoneUnlockWithWatchController, "setLiftToWakeGestureDetectedSinceScreenOn:", 1);
}

- (void)_managedConfigurationEffectiveSettingsDidChange:(id)a3
{
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __78__CSCoverSheetViewController__managedConfigurationEffectiveSettingsDidChange___block_invoke;
  block[3] = &unk_1E8E2DB38;
  block[4] = self;
  dispatch_async(MEMORY[0x1E0C80D38], block);
}

void __78__CSCoverSheetViewController__managedConfigurationEffectiveSettingsDidChange___block_invoke(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;

  objc_msgSend(MEMORY[0x1E0D47230], "sharedConnection");
  WeakRetained = (id)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(WeakRetained, "isSpotlightAllowed") & 1) == 0)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1712);

    if (!v2)
      return;
    WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 1920));
    objc_msgSend(WeakRetained, "dismissSpotlightAnimated:", 1);
  }

}

- (void)publisher:(id)a3 didUpdateLayout:(id)a4 withTransition:(id)a5
{
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _BOOL8 v14;
  _BOOL8 v15;
  BOOL v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  void *v23;
  void *v24;
  id v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _QWORD block[5];
  _QWORD v31[7];
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  void (*v40)(uint64_t);
  id v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t);
  void (*v46)(uint64_t);
  id v47;
  _BYTE v48[128];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v25 = a5;
  v42 = 0;
  v43 = &v42;
  v44 = 0x3032000000;
  v45 = __Block_byref_object_copy_;
  v46 = __Block_byref_object_dispose_;
  v47 = 0;
  v36 = 0;
  v37 = &v36;
  v38 = 0x3032000000;
  v39 = __Block_byref_object_copy_;
  v40 = __Block_byref_object_dispose_;
  v41 = 0;
  v32 = 0;
  v33 = &v32;
  v34 = 0x2020000000;
  v35 = 0;
  objc_msgSend(v9, "elements");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = MEMORY[0x1E0C809B0];
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3221225472;
  v31[2] = __71__CSCoverSheetViewController_publisher_didUpdateLayout_withTransition___block_invoke;
  v31[3] = &unk_1E8E2EA58;
  v31[4] = &v36;
  v31[5] = &v42;
  v31[6] = &v32;
  objc_msgSend(v10, "enumerateObjectsWithOptions:usingBlock:", 2, v31);

  objc_msgSend((id)v37[5], "identifier");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v43[5];
  if (v13)
    v14 = v13 != v37[5];
  else
    v14 = 0;
  if (*((_BYTE *)v33 + 24))
    v15 = 1;
  else
    v15 = !self->_standByPresentedAboveCoverSheet;
  -[CSCoverSheetViewController _setHasContentAboveCoverSheet:isSignificantUserInteraction:](self, "_setHasContentAboveCoverSheet:isSignificantUserInteraction:", v14, v15);
  self->_contentAboveIsControlCenter = objc_msgSend(v12, "isEqualToString:", *MEMORY[0x1E0D22808]);
  if ((objc_msgSend(v12, "isEqualToString:", *MEMORY[0x1E0D22818]) & 1) != 0)
  {
    v16 = 1;
  }
  else if (objc_msgSend(v12, "isEqualToString:", *MEMORY[0x1E0DAB698]))
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v17, "userInterfaceIdiom");

    v16 = (v18 & 0xFFFFFFFFFFFFFFFBLL) == 1;
  }
  else
  {
    v16 = 0;
  }
  v24 = v8;
  self->_contentAboveIsSiriOrNotFullScreenOniPad = v16;
  self->_standByPresentedAboveCoverSheet = *((_BYTE *)v33 + 24);
  block[0] = v11;
  block[1] = 3221225472;
  block[2] = __71__CSCoverSheetViewController_publisher_didUpdateLayout_withTransition___block_invoke_2;
  block[3] = &unk_1E8E2DB38;
  block[4] = self;
  dispatch_async(MEMORY[0x1E0C80D38], block);
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v19 = (void *)-[NSHashTable copy](self->_observers, "copy");
  v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v26, v48, 16);
  if (v20)
  {
    v21 = *(_QWORD *)v27;
    do
    {
      for (i = 0; i != v20; ++i)
      {
        if (*(_QWORD *)v27 != v21)
          objc_enumerationMutation(v19);
        v23 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * i);
        if ((objc_opt_respondsToSelector() & 1) != 0)
          objc_msgSend(v23, "coverSheetViewController:didUpdateLayout:", self, v9);
      }
      v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v26, v48, 16);
    }
    while (v20);
  }

  _Block_object_dispose(&v32, 8);
  _Block_object_dispose(&v36, 8);

  _Block_object_dispose(&v42, 8);
}

void __71__CSCoverSheetViewController_publisher_didUpdateLayout_withTransition___block_invoke(_QWORD *a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v7;
  id *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  id v14;

  v14 = a2;
  if (objc_msgSend(v14, "layoutRole") != 6)
  {
    v7 = *(_QWORD *)(a1[4] + 8);
    v9 = *(_QWORD *)(v7 + 40);
    v8 = (id *)(v7 + 40);
    if (!v9)
      objc_storeStrong(v8, a2);
    objc_msgSend(v14, "identifier");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "rangeOfString:options:", *MEMORY[0x1E0D22810], 1);

    if (v11 != 0x7FFFFFFFFFFFFFFFLL)
      objc_storeStrong((id *)(*(_QWORD *)(a1[5] + 8) + 40), a2);
    if (!*(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24))
    {
      objc_msgSend(v14, "identifier");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v12, "isEqualToString:", *MEMORY[0x1E0DAB6A8]);

      if (v13)
        *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
    }
  }
  if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40) && *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40))
    *a4 = 1;

}

uint64_t __71__CSCoverSheetViewController_publisher_didUpdateLayout_withTransition___block_invoke_2(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_updateActiveBehaviorsForReason:", CFSTR("CSCSVC – displayLayoutDidUpdateLayout"));
  return objc_msgSend(*(id *)(a1 + 32), "_updateActiveAppearanceForReason:", CFSTR("CSCSVC – displayLayoutDidUpdateLayout"));
}

- (void)_setHasContentAboveCoverSheet:(BOOL)a3
{
  -[CSCoverSheetViewController _setHasContentAboveCoverSheet:isSignificantUserInteraction:](self, "_setHasContentAboveCoverSheet:isSignificantUserInteraction:", a3, 1);
}

- (void)_setHasContentAboveCoverSheet:(BOOL)a3 isSignificantUserInteraction:(BOOL)a4
{
  _BOOL4 v4;
  NSObject *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  _BOOL4 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (self->_hasContentAboveCoverSheet != a3)
  {
    v4 = a4;
    self->_hasContentAboveCoverSheet = a3;
    SBLogDashBoard();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      NSStringFromBOOL();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138543618;
      v10 = v7;
      v11 = 1024;
      v12 = v4;
      _os_log_impl(&dword_1D0337000, v6, OS_LOG_TYPE_DEFAULT, "Display layout did change - has content above coversheet? %{public}@ [ isSignificantUserInteraction:%{BOOL}d ]", (uint8_t *)&v9, 0x12u);

    }
    if (self->_hasContentAboveCoverSheet)
    {
      -[CSCoverSheetViewController _handleEventType:](self, "_handleEventType:", 10);
      if (!v4)
        return;
    }
    else
    {
      -[CSCoverSheetViewController _handleEventType:](self, "_handleEventType:", 11);
      if (!v4)
        return;
    }
    +[CSAction actionWithType:](CSAction, "actionWithType:", 4);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSCoverSheetViewController handleAction:fromSender:](self, "handleAction:fromSender:", v8, self);

  }
}

- (void)_updateModalPresentationControllerVisibility
{
  -[CSCoverSheetViewController _setModalPresentationControllerVisibility:](self, "_setModalPresentationControllerVisibility:", -[CSPresentationViewController hasContent](self->_modalPresentationController, "hasContent"));
}

- (void)_setModalPresentationControllerVisibility:(BOOL)a3
{
  -[CSCoverSheetViewController _setModalPresentationControllerVisibility:cancelTouches:](self, "_setModalPresentationControllerVisibility:cancelTouches:", a3, 1);
}

- (void)_setModalPresentationControllerVisibility:(BOOL)a3 cancelTouches:(BOOL)a4
{
  CSModalPresentationViewController *modalPresentationController;
  _BOOL4 v6;
  CSModalPresentationViewController *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  _QWORD v14[5];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD v19[5];
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  modalPresentationController = self->_modalPresentationController;
  if (a3)
  {
    v6 = a4;
    -[CSCoverSheetViewControllerBase setPresenter:](self->_modalPresentationController, "setPresenter:", self);
    v7 = self->_modalPresentationController;
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 3221225472;
    v19[2] = __86__CSCoverSheetViewController__setModalPresentationControllerVisibility_cancelTouches___block_invoke;
    v19[3] = &unk_1E8E2DB60;
    v19[4] = self;
    if (-[CSCoverSheetViewController bs_addChildViewController:animated:transitionBlock:](self, "bs_addChildViewController:animated:transitionBlock:", v7, 0, v19))
    {
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      v8 = (void *)-[NSHashTable copy](self->_observers, "copy");
      v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v20, 16);
      if (v9)
      {
        v10 = v9;
        v11 = *(_QWORD *)v16;
        do
        {
          for (i = 0; i != v10; ++i)
          {
            if (*(_QWORD *)v16 != v11)
              objc_enumerationMutation(v8);
            v13 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
            if ((objc_opt_respondsToSelector() & 1) != 0)
              objc_msgSend(v13, "coverSheetViewControllerDidPresentModalView:", self);
          }
          v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v20, 16);
        }
        while (v10);
      }

      if (v6)
        BKSHIDServicesCancelTouchesOnMainDisplay();
    }
  }
  else if (modalPresentationController)
  {
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __86__CSCoverSheetViewController__setModalPresentationControllerVisibility_cancelTouches___block_invoke_2;
    v14[3] = &unk_1E8E2DB60;
    v14[4] = self;
    -[CSCoverSheetViewController bs_removeChildViewController:animated:transitionBlock:](self, "bs_removeChildViewController:animated:transitionBlock:", modalPresentationController, 0, v14);
    -[CSCoverSheetViewControllerBase setPresenter:](self->_modalPresentationController, "setPresenter:", 0);
    -[CSCoverSheetViewController _updateActiveBehaviorsForReason:](self, "_updateActiveBehaviorsForReason:", CFSTR("DismissedModalPresentationController"));
    -[CSCoverSheetViewController _updateActiveAppearanceForReason:](self, "_updateActiveAppearanceForReason:", CFSTR("DismissedModalPresentationController"));
  }
}

void __86__CSCoverSheetViewController__setModalPresentationControllerVisibility_cancelTouches___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void (**v6)(void);

  v3 = *(void **)(a1 + 32);
  v6 = a2;
  objc_msgSend(v3, "coverSheetView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1240), "view");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setModalPresentationView:", v5);

  v6[2]();
}

void __86__CSCoverSheetViewController__setModalPresentationControllerVisibility_cancelTouches___block_invoke_2(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  void (**v4)(void);

  v2 = *(void **)(a1 + 32);
  v4 = a2;
  objc_msgSend(v2, "coverSheetView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setModalPresentationView:", 0);

  v4[2]();
}

- (BOOL)_isPresentingModalViewControllerWithIdentifier:(id)a3
{
  id v4;
  NSMutableSet *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  -[CSPresentationViewController contentViewControllers](self->_modalPresentationController, "contentViewControllers");
  v5 = (NSMutableSet *)objc_claimAutoreleasedReturnValue();
  v6 = -[NSMutableSet countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v23;
LABEL_3:
    v9 = 0;
    while (1)
    {
      if (*(_QWORD *)v23 != v8)
        objc_enumerationMutation(v5);
      objc_msgSend(*(id *)(*((_QWORD *)&v22 + 1) + 8 * v9), "coverSheetIdentifier");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = BSEqualStrings();

      if ((v11 & 1) != 0)
        goto LABEL_18;
      if (v7 == ++v9)
      {
        v7 = -[NSMutableSet countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
        if (v7)
          goto LABEL_3;
        break;
      }
    }
  }

  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v5 = self->_pendingModalViewControllers;
  v12 = -[NSMutableSet countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
  if (v12)
  {
    v13 = *(_QWORD *)v19;
LABEL_11:
    v14 = 0;
    while (1)
    {
      if (*(_QWORD *)v19 != v13)
        objc_enumerationMutation(v5);
      objc_msgSend(*(id *)(*((_QWORD *)&v18 + 1) + 8 * v14), "coverSheetIdentifier", (_QWORD)v18);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = BSEqualStrings();

      if ((v16 & 1) != 0)
        break;
      if (v12 == ++v14)
      {
        v12 = -[NSMutableSet countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
        if (v12)
          goto LABEL_11;
        goto LABEL_19;
      }
    }
LABEL_18:
    LOBYTE(v12) = 1;
  }
LABEL_19:

  return v12;
}

- (id)_presentedModalViewControllerWithIdentifier:(id)a3
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  int v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  -[CSPresentationViewController contentViewControllers](self->_modalPresentationController, "contentViewControllers", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v14;
    while (2)
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v14 != v7)
          objc_enumerationMutation(v5);
        v9 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i);
        objc_msgSend(v9, "coverSheetIdentifier");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = BSEqualStrings();

        if (v11)
        {
          v6 = v9;
          goto LABEL_11;
        }
      }
      v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      if (v6)
        continue;
      break;
    }
  }
LABEL_11:

  return v6;
}

- (void)_presentModalViewController:(id)a3 animated:(BOOL)a4 completion:(id)a5
{
  -[CSCoverSheetViewController _presentModalViewController:shouldDismissOverlays:animated:completion:](self, "_presentModalViewController:shouldDismissOverlays:animated:completion:", a3, 1, a4, a5);
}

- (void)_presentModalViewController:(id)a3 shouldDismissOverlays:(BOOL)a4 animated:(BOOL)a5 completion:(id)a6
{
  _BOOL8 v7;
  id v10;
  id v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  void *v16;
  void *v17;
  void (**v18)(_QWORD);
  uint64_t v19;
  void *v20;
  void *v21;
  char IsZero;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t);
  void *v26;
  CSCoverSheetViewController *v27;
  id v28;
  id v29;
  BOOL v30;
  BOOL v31;

  v7 = a5;
  v10 = a3;
  v11 = a6;
  v12 = v11;
  if (v10)
  {
    objc_msgSend(v10, "appearanceIdentifier");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "containsString:", CFSTR("SBDashBoardEmergencyDialerViewController"));

    if (v14)
    {
      -[CSCoverSheetViewController delegate](self, "delegate");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "coverSheetViewController:requestsTransientOverlaysDismissedAnimated:", self, v7);

    }
    -[NSMutableSet addObject:](self->_pendingModalViewControllers, "addObject:", v10);
    +[CSAction actionWithType:](CSAction, "actionWithType:", 3);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSCoverSheetViewController handleAction:fromSender:](self, "handleAction:fromSender:", v16, self);

    +[CSAction actionWithType:animated:](CSAction, "actionWithType:animated:", 13, v7);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSCoverSheetViewController handleAction:fromSender:](self, "handleAction:fromSender:", v17, self);

    -[CSCoverSheetViewController _setModalPresentationControllerVisibility:cancelTouches:](self, "_setModalPresentationControllerVisibility:cancelTouches:", 1, objc_msgSend(v10, "presentationCancelsTouches"));
    v23 = MEMORY[0x1E0C809B0];
    v24 = 3221225472;
    v25 = __100__CSCoverSheetViewController__presentModalViewController_shouldDismissOverlays_animated_completion___block_invoke;
    v26 = &unk_1E8E2EAA8;
    v27 = self;
    v30 = v7;
    v28 = v10;
    v29 = v12;
    v31 = a4;
    v18 = (void (**)(_QWORD))MEMORY[0x1D17E1614](&v23);
    -[CSCoverSheetViewController overlayControllerIfExists](self, "overlayControllerIfExists", v23, v24, v25, v26, v27);
    v19 = objc_claimAutoreleasedReturnValue();
    if (v19
      && (v20 = (void *)v19,
          -[CSCoverSheetViewController overlayControllerIfExists](self, "overlayControllerIfExists"),
          v21 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend(v21, "presentationProgress"),
          IsZero = BSFloatIsZero(),
          v21,
          v20,
          (IsZero & 1) == 0))
    {
      -[CSCoverSheetViewController deactivateTodayViewWithCompletion:](self, "deactivateTodayViewWithCompletion:", v18);
    }
    else
    {
      v18[2](v18);
    }

  }
  else if (v11)
  {
    (*((void (**)(id))v11 + 2))(v11);
  }

}

void __100__CSCoverSheetViewController__presentModalViewController_shouldDismissOverlays_animated_completion___block_invoke(uint64_t a1)
{
  char v2;
  char v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD v9[5];
  id v10;
  id v11;
  id v12;
  char v13;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1240), "hasContent");
  v3 = v2 ^ 1;
  objc_msgSend(*(id *)(a1 + 32), "pageViewControllerAtIndex:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1960));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((v2 & 1) == 0)
    objc_msgSend(*(id *)(a1 + 32), "bs_beginAppearanceTransitionForChildViewController:toVisible:animated:", v4, 0, *(unsigned __int8 *)(a1 + 56));
  objc_msgSend(*(id *)(a1 + 32), "modalPresentationController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *(unsigned __int8 *)(a1 + 56);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __100__CSCoverSheetViewController__presentModalViewController_shouldDismissOverlays_animated_completion___block_invoke_2;
  v9[3] = &unk_1E8E2EA80;
  v7 = *(void **)(a1 + 40);
  v9[4] = *(_QWORD *)(a1 + 32);
  v10 = v7;
  v12 = *(id *)(a1 + 48);
  v13 = v3;
  v8 = v4;
  v11 = v8;
  objc_msgSend(v5, "presentContentViewController:animated:completion:", v10, v6, v9);

  if (*(_BYTE *)(a1 + 57))
    objc_msgSend(*(id *)(a1 + 32), "dismissOverlaysAnimated:", *(unsigned __int8 *)(a1 + 56));

}

uint64_t __100__CSCoverSheetViewController__presentModalViewController_shouldDismissOverlays_animated_completion___block_invoke_2(uint64_t a1)
{
  uint64_t v2;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2096), "removeObject:", *(_QWORD *)(a1 + 40));
  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  if (*(_BYTE *)(a1 + 64))
    objc_msgSend(*(id *)(a1 + 32), "bs_endAppearanceTransitionForChildViewController:", *(_QWORD *)(a1 + 48));
  return objc_msgSend(*(id *)(a1 + 32), "_handleEventType:", 39);
}

- (void)_dismissModalViewControllersWithIdentifier:(id)a3 animated:(BOOL)a4 completion:(id)a5
{
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  int v16;
  _BOOL4 v17;
  void (**v18)(void);
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v17 = a4;
  v24 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v18 = (void (**)(void))a5;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  -[CSPresentationViewController contentViewControllers](self->_modalPresentationController, "contentViewControllers");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v9)
  {
    v10 = v9;
    v11 = 0;
    v12 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v20 != v12)
          objc_enumerationMutation(v8);
        v14 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
        objc_msgSend(v14, "coverSheetIdentifier");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = BSEqualStrings();

        if (v16)
        {
          -[CSCoverSheetViewController _dismissModalViewController:animated:completion:](self, "_dismissModalViewController:animated:completion:", v14, v17, v18);
          v11 = 1;
        }
      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v10);
  }
  else
  {
    v11 = 0;
  }

  if (v18 && (v11 & 1) == 0)
    v18[2]();

}

- (void)_dismissAllModalViewControllersExcept:(id)a3 animated:(BOOL)a4 completion:(id)a5
{
  _BOOL8 v6;
  id v8;
  void (**v9)(_QWORD);
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  id v21;
  _QWORD v22[5];
  id v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _QWORD v28[4];
  void (**v29)(_QWORD);
  _BYTE v30[128];
  uint64_t v31;

  v6 = a4;
  v31 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = (void (**)(_QWORD))a5;
  -[CSPresentationViewController contentViewControllers](self->_modalPresentationController, "contentViewControllers");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (void *)objc_msgSend(v10, "mutableCopy");

  objc_msgSend(v11, "removeObject:", v8);
  if (objc_msgSend(v11, "count"))
  {
    v21 = v8;
    v12 = (void *)MEMORY[0x1E0D016E8];
    v13 = objc_msgSend(v11, "count") + 1;
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 3221225472;
    v28[2] = __88__CSCoverSheetViewController__dismissAllModalViewControllersExcept_animated_completion___block_invoke;
    v28[3] = &unk_1E8E2EAD0;
    v29 = v9;
    objc_msgSend(v12, "sentinelWithSignalCount:signalHandler:", v13, v28);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v15 = v11;
    v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v24, v30, 16);
    if (v16)
    {
      v17 = v16;
      v18 = *(_QWORD *)v25;
      do
      {
        for (i = 0; i != v17; ++i)
        {
          if (*(_QWORD *)v25 != v18)
            objc_enumerationMutation(v15);
          v20 = *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * i);
          v22[0] = MEMORY[0x1E0C809B0];
          v22[1] = 3221225472;
          v22[2] = __88__CSCoverSheetViewController__dismissAllModalViewControllersExcept_animated_completion___block_invoke_2;
          v22[3] = &unk_1E8E2DC00;
          v22[4] = v20;
          v23 = v14;
          -[CSCoverSheetViewController _dismissModalViewController:animated:completion:](self, "_dismissModalViewController:animated:completion:", v20, v6, v22);

        }
        v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v24, v30, 16);
      }
      while (v17);
    }

    objc_msgSend(v14, "signal");
    v8 = v21;
  }
  else if (v9)
  {
    v9[2](v9);
  }

}

void __88__CSCoverSheetViewController__dismissAllModalViewControllersExcept_animated_completion___block_invoke(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (objc_msgSend(v3, "isFailed"))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("some modal view controller dismissal did not call its completion block"), 0);
  }
  else if (objc_msgSend(v3, "isComplete") && *(_QWORD *)(a1 + 32))
  {
    BSDispatchMain();
  }

}

void __88__CSCoverSheetViewController__dismissAllModalViewControllersExcept_animated_completion___block_invoke_2(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  void *v5;
  id v6;

  v2 = *(void **)(a1 + 32);
  v3 = objc_opt_class();
  v4 = v2;
  if (v3)
  {
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v5 = v4;
    else
      v5 = 0;
  }
  else
  {
    v5 = 0;
  }
  v6 = v5;

  if (v6)
    objc_msgSend(v6, "noteDidDismissProgrammatically");
  objc_msgSend(*(id *)(a1 + 40), "signal");

}

- (void)_dismissModalViewController:(id)a3 animated:(BOOL)a4 completion:(id)a5
{
  _BOOL8 v6;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _BOOL4 v15;
  void *v16;
  CSModalPresentationViewController *modalPresentationController;
  id v18;
  _QWORD v19[5];
  id v20;
  id v21;
  BOOL v22;

  v6 = a4;
  v8 = a3;
  v9 = a5;
  v10 = v9;
  if (v8)
  {
    -[NSMutableSet removeObject:](self->_pendingModalViewControllers, "removeObject:", v8);
    +[CSAction actionWithType:](CSAction, "actionWithType:", 3);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSCoverSheetViewController handleAction:fromSender:](self, "handleAction:fromSender:", v11, self);

    +[CSAction actionWithType:animated:](CSAction, "actionWithType:animated:", 13, v6);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSCoverSheetViewController handleAction:fromSender:](self, "handleAction:fromSender:", v12, self);

    -[CSPresentationViewController presentedViewControllers](self->_modalPresentationController, "presentedViewControllers");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v13, "containsObject:", v8))
    {
      -[CSPresentationViewController contentViewControllers](self->_modalPresentationController, "contentViewControllers");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend(v14, "count") == 1;

    }
    else
    {
      v15 = 0;
    }

    -[CSCoverSheetViewController pageViewControllerAtIndex:](self, "pageViewControllerAtIndex:", self->_lastSettledPageIndex);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    if (v15)
      -[CSCoverSheetViewController bs_beginAppearanceTransitionForChildViewController:toVisible:animated:](self, "bs_beginAppearanceTransitionForChildViewController:toVisible:animated:", v16, 1, v6);
    modalPresentationController = self->_modalPresentationController;
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 3221225472;
    v19[2] = __78__CSCoverSheetViewController__dismissModalViewController_animated_completion___block_invoke;
    v19[3] = &unk_1E8E2E338;
    v22 = v15;
    v19[4] = self;
    v20 = v16;
    v21 = v10;
    v18 = v16;
    -[CSPresentationViewController dismissContentViewController:animated:completion:](modalPresentationController, "dismissContentViewController:animated:completion:", v8, v6, v19);

  }
  else if (v9)
  {
    (*((void (**)(id))v9 + 2))(v9);
  }

}

uint64_t __78__CSCoverSheetViewController__dismissModalViewController_animated_completion___block_invoke(uint64_t a1)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 56))
    objc_msgSend(*(id *)(a1 + 32), "bs_endAppearanceTransitionForChildViewController:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "_updateModalPresentationControllerVisibility");
  objc_msgSend(*(id *)(a1 + 32), "_handleEventType:", 40);
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

- (void)_dismissToMainPageFromPageViewController:(id)a3
{
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;

  v7 = a3;
  v4 = objc_msgSend(v7, "requestedDismissalType");
  if (v4 == 1)
  {
    objc_msgSend(v7, "requestedDismissalSettings");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "resetScrollViewToMainPageAnimated:withAnimationSettings:withCompletion:", 1, v5, 0);

    goto LABEL_5;
  }
  if (!v4)
  {
    -[CSCoverSheetViewController coverSheetView](self, "coverSheetView");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "resetScrollViewToMainPageAnimated:withCompletion:", 1, 0);
LABEL_5:

  }
}

- (void)_addOrRemoveThermalTrapViewIfNecessaryAnimated:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  BOOL v6;
  CSTemperatureWarningViewController *v7;
  CSTemperatureWarningViewController *v8;
  id v9;

  v3 = a3;
  if ((-[SBFLockOutStatusProvider isThermallyBlocked](self->_lockOutController, "isThermallyBlocked") & 1) != 0
    || -[CSLockScreenSettings showThermalTrap](self->_prototypeSettings, "showThermalTrap"))
  {
    +[CSCoverSheetViewControllerBase coverSheetIdentifier](CSTemperatureWarningViewController, "coverSheetIdentifier");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = -[CSCoverSheetViewController _isPresentingModalViewControllerWithIdentifier:](self, "_isPresentingModalViewControllerWithIdentifier:", v5);

    if (v6)
      return;
    v7 = [CSTemperatureWarningViewController alloc];
    -[CSCoverSheetContextProviding thermalStatusProvider](self->_coverSheetContext, "thermalStatusProvider");
    v9 = (id)objc_claimAutoreleasedReturnValue();
    v8 = -[CSTemperatureWarningViewController initWithThermalStatusProvider:](v7, "initWithThermalStatusProvider:");
    -[CSCoverSheetViewController _presentModalViewController:animated:completion:](self, "_presentModalViewController:animated:completion:", v8, v3, 0);

  }
  else
  {
    +[CSCoverSheetViewControllerBase coverSheetIdentifier](CSTemperatureWarningViewController, "coverSheetIdentifier");
    v9 = (id)objc_claimAutoreleasedReturnValue();
    -[CSCoverSheetViewController _dismissModalViewControllersWithIdentifier:animated:completion:](self, "_dismissModalViewControllersWithIdentifier:animated:completion:");
  }

}

- (void)_addOrRemoveBlockedViewIfNecessaryAnimated:(BOOL)a3
{
  void *v4;
  BOOL v5;
  void *v6;
  CSDeviceBlockViewController *v7;

  if ((!-[SBFLockOutStatusProvider isBlocked](self->_lockOutController, "isBlocked")
     || -[SBFLockOutStatusProvider isThermallyBlocked](self->_lockOutController, "isThermallyBlocked"))
    && !-[CSLockScreenSettings showBlockedUI](self->_prototypeSettings, "showBlockedUI"))
  {
    +[CSCoverSheetViewControllerBase coverSheetIdentifier](CSDeviceBlockViewController, "coverSheetIdentifier");
    v7 = (CSDeviceBlockViewController *)objc_claimAutoreleasedReturnValue();
    -[CSCoverSheetViewController _dismissModalViewControllersWithIdentifier:animated:completion:](self, "_dismissModalViewControllersWithIdentifier:animated:completion:");
LABEL_8:

    return;
  }
  +[CSCoverSheetViewControllerBase coverSheetIdentifier](CSDeviceBlockViewController, "coverSheetIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = -[CSCoverSheetViewController _isPresentingModalViewControllerWithIdentifier:](self, "_isPresentingModalViewControllerWithIdentifier:", v4);

  if (!v5)
  {
    -[CSCoverSheetContextProviding mediaController](self->_coverSheetContext, "mediaController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "stopMediaPlaybackForSource:", 1);

    v7 = -[CSDeviceBlockViewController initWithDeviceBlockStatusProvider:]([CSDeviceBlockViewController alloc], "initWithDeviceBlockStatusProvider:", self->_lockOutController);
    -[CSCoverSheetViewController _presentModalViewController:animated:completion:](self, "_presentModalViewController:animated:completion:");
    goto LABEL_8;
  }
}

- (void)_addOrRemoveResetRestoreViewIfNecessaryAnimated:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  BOOL v6;
  CSResetRestoreViewController *v7;
  id v8;

  v3 = a3;
  -[CSCoverSheetContextProviding resetRestoreStatusProvider](self->_coverSheetContext, "resetRestoreStatusProvider");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v8, "isRestoring") & 1) == 0
    && (objc_msgSend(v8, "isResetting") & 1) == 0
    && !-[CSLockScreenSettings showResetRestore](self->_prototypeSettings, "showResetRestore"))
  {
    +[CSCoverSheetViewControllerBase coverSheetIdentifier](CSResetRestoreViewController, "coverSheetIdentifier");
    v7 = (CSResetRestoreViewController *)objc_claimAutoreleasedReturnValue();
    -[CSCoverSheetViewController _dismissModalViewControllersWithIdentifier:animated:completion:](self, "_dismissModalViewControllersWithIdentifier:animated:completion:", v7, v3, 0);
    goto LABEL_7;
  }
  +[CSCoverSheetViewControllerBase coverSheetIdentifier](CSResetRestoreViewController, "coverSheetIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[CSCoverSheetViewController _isPresentingModalViewControllerWithIdentifier:](self, "_isPresentingModalViewControllerWithIdentifier:", v5);

  if (!v6)
  {
    v7 = -[CSResetRestoreViewController initWithStatusProvider:]([CSResetRestoreViewController alloc], "initWithStatusProvider:", v8);
    -[CSCoverSheetViewController _presentModalViewController:animated:completion:](self, "_presentModalViewController:animated:completion:", v7, v3, 0);
LABEL_7:

  }
}

- (void)addApplicationHoster:(id)a3
{
  -[NSHashTable addObject:](self->_applicationHosters, "addObject:", a3);
}

- (void)removeApplicationHoster:(id)a3
{
  -[NSHashTable removeObject:](self->_applicationHosters, "removeObject:", a3);
}

- (void)dismissOverlaysAnimated:(BOOL)a3
{
  _BOOL8 v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v3 = a3;
  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  -[CSCoverSheetContextProviding dismissableOverlays](self->_coverSheetContext, "dismissableOverlays", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v10;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v10 != v7)
          objc_enumerationMutation(v4);
        objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * v8++), "dismissOverlayForDashBoardAnimated:", v3);
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v6);
  }

}

- (id)_passcodeViewController
{
  void *v3;
  void *v4;

  +[CSCoverSheetViewControllerBase coverSheetIdentifier](CSPasscodeViewController, "coverSheetIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController _presentedModalViewControllerWithIdentifier:](self, "_presentedModalViewControllerWithIdentifier:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (BOOL)isAuthenticated
{
  return self->_authenticated;
}

- (double)backlightLevel
{
  return self->_backlightLevel;
}

- (SBFLockScreenActionContext)_customLockScreenActionContext
{
  return self->_customLockScreenActionContext;
}

- (void)setCustomLockScreenActionContext:(id)a3
{
  objc_storeStrong((id *)&self->_customLockScreenActionContext, a3);
}

- (CSCoverSheetViewControllerDelegate)delegate
{
  return (CSCoverSheetViewControllerDelegate *)objc_loadWeakRetained((id *)&self->_delegate);
}

- (void)setDelegate:(id)a3
{
  objc_storeWeak((id *)&self->_delegate, a3);
}

- (BOOL)hasContentAboveCoverSheet
{
  return self->_hasContentAboveCoverSheet;
}

- (CSLayoutStrategy)layoutStrategy
{
  return self->_layoutStrategy;
}

- (SBFScreenWakeAnimationTarget)legacyWallpaperWakeAnimator
{
  return self->_legacyWallpaperWakeAnimator;
}

- (CSCameraPrewarming)cameraPrewarmer
{
  return self->_cameraPrewarmer;
}

- (int64_t)effectiveInterfaceOrientationOverride
{
  return self->_effectiveInterfaceOrientationOverride;
}

- (CSAppearance)activeAppearance
{
  return self->_activeAppearance;
}

- (void)setActiveAppearance:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 1832);
}

- (CSBehavior)activeBehavior
{
  return self->_activeBehavior;
}

- (void)setActiveBehavior:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 1840);
}

- ($C89AE587F4FC9517FD26718A5F681357)transitionContext
{
  $06DF839FA51B3C3CDB187C0923524556 var0;

  var0 = self[24].var1.var0;
  *(_OWORD *)&retstr->var0 = *(_OWORD *)&self[23].var2;
  *($06DF839FA51B3C3CDB187C0923524556 *)&retstr->var1.var0.var1 = var0;
  *($06DF839FA51B3C3CDB187C0923524556 *)&retstr->var1.var1.var1 = self[24].var1.var1;
  return self;
}

- (CSNotificationDispatcher)dispatcher
{
  return (CSNotificationDispatcher *)objc_loadWeakRetained((id *)&self->_dispatcher);
}

- (void)setDispatcher:(id)a3
{
  objc_storeWeak((id *)&self->_dispatcher, a3);
}

- (CSCoverSheetContextProviding)coverSheetContext
{
  return self->_coverSheetContext;
}

- (PBUIIrisWallpaperPlaying)irisWallpaperPlayer
{
  return self->_irisWallpaperPlayer;
}

- (UIGestureRecognizer)wallpaperGestureRecognizer
{
  return self->_wallpaperGestureRecognizer;
}

- (CSWallpaperColorProvider)wallpaperColorProvider
{
  return (CSWallpaperColorProvider *)objc_loadWeakRetained((id *)&self->_wallpaperColorProvider);
}

- (int)wakeSource
{
  return self->_wakeSource;
}

- (SBSearchGesture)searchGesture
{
  return self->_searchGesture;
}

- (SBSpotlightTransientOverlayInteractiveGestureTransaction)spotlightInteractiveGestureTransaction
{
  return self->_spotlightInteractiveGestureTransaction;
}

- (void)setSpotlightInteractiveGestureTransaction:(id)a3
{
  objc_storeStrong((id *)&self->_spotlightInteractiveGestureTransaction, a3);
}

- (BOOL)partiallyOnScreen
{
  return self->_partiallyOnScreen;
}

- (BOOL)hidesDimmingLayer
{
  return self->_hidesDimmingLayer;
}

- (CSEmergencyCalling)emergencyCaller
{
  return (CSEmergencyCalling *)objc_loadWeakRetained((id *)&self->_emergencyCaller);
}

- (void)setEmergencyCaller:(id)a3
{
  objc_storeWeak((id *)&self->_emergencyCaller, a3);
}

- (CSOrientationUpdateControlling)orientationUpdateController
{
  return self->_orientationUpdateController;
}

- (void)setOrientationUpdateController:(id)a3
{
  objc_storeStrong((id *)&self->_orientationUpdateController, a3);
}

- (CSIdleTimerControlling)idleTimerController
{
  return (CSIdleTimerControlling *)objc_loadWeakRetained((id *)&self->_idleTimerController);
}

- (void)setIdleTimerController:(id)a3
{
  objc_storeWeak((id *)&self->_idleTimerController, a3);
}

- (CSApplicationLaunching)applicationLauncher
{
  return (CSApplicationLaunching *)objc_loadWeakRetained((id *)&self->_applicationLauncher);
}

- (void)setApplicationLauncher:(id)a3
{
  objc_storeWeak((id *)&self->_applicationLauncher, a3);
}

- (CSCoverSheetSpotlightPresenting)coverSheetSpotlightPresenter
{
  return (CSCoverSheetSpotlightPresenting *)objc_loadWeakRetained((id *)&self->_coverSheetSpotlightPresenter);
}

- (void)setCoverSheetSpotlightPresenter:(id)a3
{
  objc_storeWeak((id *)&self->_coverSheetSpotlightPresenter, a3);
}

- (CSWidgetURLHandling)widgetURLHandler
{
  return (CSWidgetURLHandling *)objc_loadWeakRetained((id *)&self->_widgetURLHandler);
}

- (void)setWidgetURLHandler:(id)a3
{
  objc_storeWeak((id *)&self->_widgetURLHandler, a3);
}

- (BOOL)isAccessoryAnimationPresenting
{
  return self->_isAccessoryAnimationPresenting;
}

- (BOOL)isFloatingLayerFullscreen
{
  return self->_floatingLayerFullscreen;
}

- (void)setFloatingLayerFullscreen:(BOOL)a3
{
  self->_floatingLayerFullscreen = a3;
}

- (BOOL)isDepthEffectEnabled
{
  return self->_depthEffectDisabled;
}

- (void)setDepthEffectDisabled:(BOOL)a3
{
  self->_depthEffectDisabled = a3;
}

- (NSArray)pageViewControllers
{
  return self->_pageViewControllers;
}

- (NSArray)_allowedPageViewControllers
{
  return self->_allowedPageViewControllers;
}

- (void)_setAllowedPageViewControllers:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 1944);
}

- (CSMainPageContentViewController)mainPageContentViewController
{
  return self->_mainPageContentViewController;
}

- (unint64_t)_lastSettledPageIndex
{
  return self->_lastSettledPageIndex;
}

- (CSMagSafeAccessoryStatusObserver)accessoryAttachmentObserver
{
  return self->_accessoryAttachmentObserver;
}

- (void)setAccessoryAttachmentObserver:(id)a3
{
  objc_storeStrong((id *)&self->_accessoryAttachmentObserver, a3);
}

- (CSBehavior)localBehavior
{
  return self->_localBehavior;
}

- (void)setLocalBehavior:(id)a3
{
  objc_storeStrong((id *)&self->_localBehavior, a3);
}

- (CSBehavior)irisBehavior
{
  return self->_irisBehavior;
}

- (void)setIrisBehavior:(id)a3
{
  objc_storeStrong((id *)&self->_irisBehavior, a3);
}

- (CSAppearance)previousAppearance
{
  return self->_previousAppearance;
}

- (void)setPreviousAppearance:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 1992);
}

- (CSAppearance)localAppearance
{
  return self->_localAppearance;
}

- (void)setLocalAppearance:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 2000);
}

- (CSPresentation)activePresentation
{
  return self->_activePresentation;
}

- (void)setActivePresentation:(id)a3
{
  objc_storeStrong((id *)&self->_activePresentation, a3);
}

- (SBFLockScreenDateViewController)dateViewController
{
  return self->_dateViewController;
}

- (void)setDateViewController:(id)a3
{
  objc_storeStrong((id *)&self->_dateViewController, a3);
}

- (CSInlineWidgetContainerViewController)inlineComplicationContainerViewController
{
  return self->_inlineComplicationContainerViewController;
}

- (void)setInlineComplicationContainerViewController:(id)a3
{
  objc_storeStrong((id *)&self->_inlineComplicationContainerViewController, a3);
}

- (CSInlineWidgetContainerViewController)landscapeInlineComplicationContainerViewController
{
  return self->_landscapeInlineComplicationContainerViewController;
}

- (void)setLandscapeInlineComplicationContainerViewController:(id)a3
{
  objc_storeStrong((id *)&self->_landscapeInlineComplicationContainerViewController, a3);
}

- (CSWidgetGridViewController)complicationContainerViewController
{
  return self->_complicationContainerViewController;
}

- (void)setComplicationContainerViewController:(id)a3
{
  objc_storeStrong((id *)&self->_complicationContainerViewController, a3);
}

- (CSWidgetGridViewController)sidebarComplicationContainerViewController
{
  return self->_sidebarComplicationContainerViewController;
}

- (void)setSidebarComplicationContainerViewController:(id)a3
{
  objc_storeStrong((id *)&self->_sidebarComplicationContainerViewController, a3);
}

- (CSPowerChangeObserver)powerChangeObserver
{
  return self->_powerChangeObserver;
}

- (void)setPowerChangeObserver:(id)a3
{
  objc_storeStrong((id *)&self->_powerChangeObserver, a3);
}

- (CSTimerViewController)timerViewController
{
  return self->_timerViewController;
}

- (void)setTimerViewController:(id)a3
{
  objc_storeStrong((id *)&self->_timerViewController, a3);
}

- (CSLegibilityProviding)legibilityProvider
{
  return self->_legibilityProvider;
}

- (void)setLegibilityProvider:(id)a3
{
  objc_storeStrong((id *)&self->_legibilityProvider, a3);
}

- (UIStatusBar)fakeStatusBar
{
  return self->_fakeStatusBar;
}

- (void)setFakeStatusBar:(id)a3
{
  objc_storeStrong((id *)&self->_fakeStatusBar, a3);
}

- (UIView)statusBarBackgroundView
{
  return self->_statusBarBackgroundView;
}

- (void)setStatusBarBackgroundView:(id)a3
{
  objc_storeStrong((id *)&self->_statusBarBackgroundView, a3);
}

- (BOOL)irisPlayerIsInteracting
{
  return self->_irisPlayerIsInteracting;
}

- (void)setIrisPlayerIsInteracting:(BOOL)a3
{
  self->_irisPlayerIsInteracting = a3;
}

- (BOOL)shouldTransitionIrisWallpaperToStillWhenPlaybackFinishes
{
  return self->_shouldTransitionIrisWallpaperToStillWhenPlaybackFinishes;
}

- (void)setShouldTransitionIrisWallpaperToStillWhenPlaybackFinishes:(BOOL)a3
{
  self->_shouldTransitionIrisWallpaperToStillWhenPlaybackFinishes = a3;
}

- (CSModalPresentationViewController)modalPresentationController
{
  return self->_modalPresentationController;
}

- (void)setModalPresentationController:(id)a3
{
  objc_storeStrong((id *)&self->_modalPresentationController, a3);
}

- (NSMutableSet)pendingModalViewControllers
{
  return self->_pendingModalViewControllers;
}

- (void)setPendingModalViewControllers:(id)a3
{
  objc_storeStrong((id *)&self->_pendingModalViewControllers, a3);
}

- (SBFLockOutStatusProvider)_lockOutController
{
  return self->_lockOutController;
}

- (void)_setLockOutController:(id)a3
{
  objc_storeStrong((id *)&self->_lockOutController, a3);
}

- (CSCoverSheetViewTransitionSource)currentTransitionSource
{
  return self->_currentTransitionSource;
}

- (BOOL)hasPresentedForInterstitialTransitionSource
{
  return self->_hasPresentedForInterstitialTransitionSource;
}

- (void)setHasPresentedForInterstitialTransitionSource:(BOOL)a3
{
  self->_hasPresentedForInterstitialTransitionSource = a3;
}

- (CSInterstitialTransitionSource)interstitialTransitionSource
{
  return self->_interstitialTransitionSource;
}

- (CSPosterSwitcherTransitionSource)posterSwitcherTransitionSource
{
  return self->_posterSwitcherTransitionSource;
}

- (CSPosterSwitcherViewController)posterSwitcherViewController
{
  return self->_posterSwitcherViewController;
}

- (CSPosterSwitcherActivationManager)posterSwitcherActivationManager
{
  return self->_posterSwitcherActivationManager;
}

- (void)setPosterSwitcherActivationManager:(id)a3
{
  objc_storeStrong((id *)&self->_posterSwitcherActivationManager, a3);
}

- (void)setOverlayController:(id)a3
{
  objc_storeStrong((id *)&self->_overlayController, a3);
}

- (BSInvalidatable)suspendWallpaperAnimationAssertion
{
  return self->_suspendWallpaperAnimationAssertion;
}

- (void)setSuspendWallpaperAnimationAssertion:(id)a3
{
  objc_storeStrong((id *)&self->_suspendWallpaperAnimationAssertion, a3);
}

- (double)initialOverlayPresentationProgress
{
  return self->_initialOverlayPresentationProgress;
}

- (void)setInitialOverlayPresentationProgress:(double)a3
{
  self->_initialOverlayPresentationProgress = a3;
}

- (BOOL)didDismissSinceScreenOn
{
  return self->_didDismissSinceScreenOn;
}

- (BOOL)dismissed
{
  return self->_dismissed;
}

- (BOOL)lockOrientationWhileTransitioning
{
  return self->_lockOrientationWhileTransitioning;
}

- (BSUIVibrancyConfiguration)vibrancyConfiguration
{
  return self->_vibrancyConfiguration;
}

- (BSUIVibrancyConfiguration)vibrancyConfigurationOverride
{
  return self->_vibrancyConfigurationOverride;
}

- (BSUIVibrancyConfiguration)effectiveVibrancyConfiguration
{
  return self->_effectiveVibrancyConfiguration;
}

- (ACActivityCenter)activityCenter
{
  return self->_activityCenter;
}

- (void)setActivityCenter:(id)a3
{
  objc_storeStrong((id *)&self->_activityCenter, a3);
}

- (SBFScreenWakeAnimationControlling)_screenWakeAnimationController
{
  return self->_screenWakeAnimationController;
}

- (void)_setScreenWakeAnimationController:(id)a3
{
  objc_storeStrong((id *)&self->_screenWakeAnimationController, a3);
}

- (SBWallpaperAggdLogger)wallpaperAggdLogger
{
  return self->_wallpaperAggdLogger;
}

- (void)setWallpaperAggdLogger:(id)a3
{
  objc_storeStrong((id *)&self->_wallpaperAggdLogger, a3);
}

- (void).cxx_destruct
{
  objc_storeStrong((id *)&self->_wallpaperAggdLogger, 0);
  objc_storeStrong((id *)&self->_screenWakeAnimationController, 0);
  objc_storeStrong((id *)&self->_activityCenter, 0);
  objc_storeStrong((id *)&self->_effectiveVibrancyConfiguration, 0);
  objc_storeStrong((id *)&self->_vibrancyConfigurationOverride, 0);
  objc_storeStrong((id *)&self->_vibrancyConfiguration, 0);
  objc_storeStrong((id *)&self->_suspendWallpaperAnimationAssertion, 0);
  objc_storeStrong((id *)&self->_overlayController, 0);
  objc_storeStrong((id *)&self->_posterSwitcherActivationManager, 0);
  objc_storeStrong((id *)&self->_posterSwitcherViewController, 0);
  objc_storeStrong((id *)&self->_posterSwitcherTransitionSource, 0);
  objc_storeStrong((id *)&self->_interstitialTransitionSource, 0);
  objc_storeStrong((id *)&self->_currentTransitionSource, 0);
  objc_storeStrong((id *)&self->_lockOutController, 0);
  objc_storeStrong((id *)&self->_pendingModalViewControllers, 0);
  objc_storeStrong((id *)&self->_statusBarBackgroundView, 0);
  objc_storeStrong((id *)&self->_fakeStatusBar, 0);
  objc_storeStrong((id *)&self->_legibilityProvider, 0);
  objc_storeStrong((id *)&self->_timerViewController, 0);
  objc_storeStrong((id *)&self->_powerChangeObserver, 0);
  objc_storeStrong((id *)&self->_sidebarComplicationContainerViewController, 0);
  objc_storeStrong((id *)&self->_complicationContainerViewController, 0);
  objc_storeStrong((id *)&self->_landscapeInlineComplicationContainerViewController, 0);
  objc_storeStrong((id *)&self->_inlineComplicationContainerViewController, 0);
  objc_storeStrong((id *)&self->_dateViewController, 0);
  objc_storeStrong((id *)&self->_activePresentation, 0);
  objc_storeStrong((id *)&self->_localAppearance, 0);
  objc_storeStrong((id *)&self->_previousAppearance, 0);
  objc_storeStrong((id *)&self->_irisBehavior, 0);
  objc_storeStrong((id *)&self->_localBehavior, 0);
  objc_storeStrong((id *)&self->_accessoryAttachmentObserver, 0);
  objc_storeStrong((id *)&self->_mainPageContentViewController, 0);
  objc_storeStrong((id *)&self->_allowedPageViewControllers, 0);
  objc_storeStrong((id *)&self->_pageViewControllers, 0);
  objc_destroyWeak((id *)&self->_widgetURLHandler);
  objc_destroyWeak((id *)&self->_coverSheetSpotlightPresenter);
  objc_destroyWeak((id *)&self->_applicationLauncher);
  objc_destroyWeak((id *)&self->_idleTimerController);
  objc_storeStrong((id *)&self->_orientationUpdateController, 0);
  objc_destroyWeak((id *)&self->_emergencyCaller);
  objc_storeStrong((id *)&self->_spotlightInteractiveGestureTransaction, 0);
  objc_storeStrong((id *)&self->_searchGesture, 0);
  objc_destroyWeak((id *)&self->_wallpaperColorProvider);
  objc_storeStrong((id *)&self->_irisWallpaperPlayer, 0);
  objc_destroyWeak((id *)&self->_dispatcher);
  objc_storeStrong((id *)&self->_activeBehavior, 0);
  objc_storeStrong((id *)&self->_activeAppearance, 0);
  objc_storeStrong((id *)&self->_cameraPrewarmer, 0);
  objc_storeStrong((id *)&self->_layoutStrategy, 0);
  objc_destroyWeak((id *)&self->_delegate);
  objc_storeStrong((id *)&self->_customLockScreenActionContext, 0);
  objc_storeStrong((id *)&self->_appProtectionSubjectMonitorSubscription, 0);
  objc_storeStrong((id *)&self->_posterLandscapeDescriptor, 0);
  objc_storeStrong((id *)&self->_posterPortraitDescriptor, 0);
  objc_storeStrong((id *)&self->_appearanceResolver, 0);
  objc_storeStrong((id *)&self->_activityViewController, 0);
  objc_storeStrong((id *)&self->_spotlightModalViewController, 0);
  objc_storeStrong((id *)&self->_phoneUnlockWithWatchController, 0);
  objc_storeStrong((id *)&self->_defaultsDerivedOverrideDate, 0);
  objc_storeStrong((id *)&self->_backgroundContentViewController, 0);
  objc_storeStrong((id *)&self->_backgroundContentActionManager, 0);
  objc_storeStrong((id *)&self->_backgroundPresentationManager, 0);
  objc_storeStrong((id *)&self->_currentCoachingString, 0);
  objc_storeStrong((id *)&self->_faceOcclusionMonitor, 0);
  objc_storeStrong((id *)&self->_userPresenceMonitor, 0);
  objc_storeStrong((id *)&self->_chargingLabel, 0);
  objc_storeStrong((id *)&self->_embeddedContentActionManager, 0);
  objc_storeStrong((id *)&self->_complicationManager, 0);
  objc_storeStrong((id *)&self->_remoteOverrideNotificationDisplayStyleAssertion, 0);
  objc_storeStrong((id *)&self->_remoteContentInlineProvidingManagers, 0);
  objc_storeStrong((id *)&self->_remoteContentInlineViewController, 0);
  objc_storeStrong((id *)&self->_remoteContentModalViewController, 0);
  objc_storeStrong((id *)&self->_remoteContentSessionManager, 0);
  objc_storeStrong((id *)&self->_legacyWallpaperWakeAnimator, 0);
  objc_storeStrong((id *)&self->_alwaysOnDefaults, 0);
  objc_storeStrong((id *)&self->_lockScreenDefaults, 0);
  objc_storeStrong((id *)&self->_notificationClearingTrigger, 0);
  objc_storeStrong((id *)&self->_floatingLayerView, 0);
  objc_storeStrong((id *)&self->_posterSwitcherFeedbackGenerator, 0);
  objc_storeStrong((id *)&self->_complicationSelectionRecognizer, 0);
  objc_storeStrong((id *)&self->_posterSwitcherGestureRecognizer, 0);
  objc_storeStrong((id *)&self->_wallpaperGestureRecognizer, 0);
  objc_storeStrong((id *)&self->_backgroundContentGestureRecognizer, 0);
  objc_storeStrong((id *)&self->_quickNoteGestureRecognizer, 0);
  objc_storeStrong((id *)&self->_scrollGestureController, 0);
  objc_storeStrong((id *)&self->_quickActionsViewController, 0);
  objc_storeStrong((id *)&self->_teachableMomentsContainerViewController, 0);
  objc_storeStrong((id *)&self->_poseidonViewController, 0);
  objc_storeStrong((id *)&self->_proudLockViewController, 0);
  objc_storeStrong((id *)&self->_fixedFooterViewController, 0);
  objc_storeStrong((id *)&self->_cachedBatteryDevices, 0);
  objc_storeStrong(&self->_chargingViewTimerHandler, 0);
  objc_storeStrong((id *)&self->_chargingViewControllerTimer, 0);
  objc_storeStrong((id *)&self->_batteryDeviceController, 0);
  objc_storeStrong((id *)&self->_chargingViewController, 0);
  objc_storeStrong((id *)&self->_attachedAccessories, 0);
  objc_storeStrong(&self->_accessoryViewControllerChargingTimerHandler, 0);
  objc_storeStrong((id *)&self->_accessoryViewControllerChargingTimer, 0);
  objc_storeStrong(&self->_accessoryViewControllerTimerHandler, 0);
  objc_storeStrong((id *)&self->_accessoryViewControllerTimer, 0);
  objc_storeStrong((id *)&self->_accessoryViewController, 0);
  objc_storeStrong((id *)&self->_modalPresentationController, 0);
  objc_destroyWeak((id *)&self->_homeButtonSuppressAfterUnlockRecognizer);
  objc_storeStrong((id *)&self->_homeButtonShowPasscodeRecognizer, 0);
  objc_storeStrong((id *)&self->_displayLayoutTransitionAssertion, 0);
  objc_storeStrong((id *)&self->_notificationDispatcher, 0);
  objc_storeStrong((id *)&self->_applicationHosters, 0);
  objc_storeStrong((id *)&self->_observers, 0);
  objc_storeStrong((id *)&self->_externalLockProviders, 0);
  objc_storeStrong((id *)&self->_externalPresentationProviders, 0);
  objc_storeStrong((id *)&self->_externalEventHandlers, 0);
  objc_storeStrong((id *)&self->_externalBehaviorProviders, 0);
  objc_storeStrong((id *)&self->_externalAppearanceProviders, 0);
  objc_storeStrong((id *)&self->_exemptFromInactiveAppearanceParticipants, 0);
  objc_storeStrong((id *)&self->_prototypeSettings, 0);
  objc_storeStrong((id *)&self->_coverSheetContext, 0);
}

- (void)_preferredContentSizeDidChange
{
  NSString *v3;

  objc_msgSend((id)*MEMORY[0x1E0CEB258], "preferredContentSizeCategory");
  v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  self->_wantsAccessibilityContentSizes = UIContentSizeCategoryIsAccessibilityCategory(v3);

  self->_needsAccessibilityContentSizesUpdate = self->_wantsAccessibilityContentSizes;
}

- (void)_updateAccessibilityContentSizesIfNeeded
{
  double v3;
  double v4;

  if (self->_wantsAccessibilityContentSizes && self->_needsAccessibilityContentSizesUpdate)
  {
    objc_msgSend(MEMORY[0x1E0DA9E58], "timeFontMetrics");
    self->_accessibilityTimeLabelBaselineY = v3 + 95.0;
    objc_msgSend(MEMORY[0x1E0DA9E50], "labelFontMetrics");
    self->_accessibilityTimeSubtitleBaselineY = v4;
    self->_needsAccessibilityContentSizesUpdate = 0;
  }
}

- (double)timeLabelBaselineY
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t *v12;
  int v13;
  void *v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  double v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  double v40;
  int v41;
  double v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  double v50;
  double v51;
  double v52;
  double v53;
  void *v54;
  double v55;
  int v56;
  double v57;
  int v58;
  int v59;
  double v60;
  double v61;
  int v62;
  int v63;
  int v64;
  int v65;
  double v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  double v71;
  int v72;
  int v73;
  double v74;
  int v75;
  double v76;
  int v77;
  double v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  uint64_t *v92;
  double v93;
  int v94;
  double v95;
  int v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double result;
  double v105;
  double v106;
  double v107;
  int v108;
  double v109;
  int v110;
  double v111;
  int v112;
  double v113;
  int v114;
  double v115;
  double v116;
  double v117;
  int v118;
  double v119;
  int v120;
  int v121;
  double v122;
  double v123;
  int v124;
  double v125;
  int v126;
  double v127;
  double v128;
  int v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  int v135;
  double v136;
  int v137;
  int v138;
  double v139;
  int v140;
  int v141;
  double v142;
  double v143;
  int v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  int v151;
  double v152;
  int v153;
  double v154;
  int v155;
  double v156;
  int v157;
  double v158;
  int v159;
  double v160;
  double v161;
  double v162;
  double v163;
  int v164;
  double v165;
  int v166;
  double v167;
  double v168;
  int v169;
  double v170;
  int v171;
  double v172;
  double v173;
  int v174;
  double v175;
  int v176;
  double v177;
  double v178;
  int v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  int v185;
  double v186;
  int v187;
  double v188;
  int v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  double v196;
  double v197;
  int v198;
  double v199;
  int v200;
  double v201;
  int v202;
  int v203;
  double v204;
  double v205;
  double v206;
  double v207;
  int v208;
  int v209;
  int v210;
  int v211;
  int v212;
  double v213;
  double v214;
  int v215;
  double v216;
  double v217;
  int v218;
  double v219;
  double v220;
  int v221;
  int v222;
  int v223;
  int v224;
  int v225;
  double v226;
  double v227;
  double v228;
  double v229;
  double v230;
  double v231;
  int v232;
  int v233;
  double v234;
  void *v235;
  void *v236;
  void *v237;
  void *v238;
  void *v239;
  void *v240;
  void *v241;
  void *v242;
  void *v243;
  void *v244;
  void *v245;
  void *v246;
  void *v247;
  void *v248;
  void *v249;
  void *v250;
  void *v251;
  void *v252;
  void *v253;
  void *v254;
  void *v255;
  void *v256;
  void *v257;
  void *v258;
  void *v259;
  void *v260;
  void *v261;
  void *v262;
  void *v263;
  void *v264;
  void *v265;
  void *v266;
  void *v267;
  void *v268;
  void *v269;
  void *v270;
  void *v271;
  void *v272;
  void *v273;
  void *v274;
  void *v275;
  void *v276;
  void *v277;
  void *v278;
  void *v279;
  void *v280;
  void *v281;
  void *v282;
  void *v283;
  void *v284;
  int v285;
  int v286;
  int v287;
  void *v288;
  int v289;
  int v290;
  int v291;
  void *v292;
  int v293;
  int v294;
  int v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  _BYTE v308[100];
  _BYTE v309[44];
  uint64_t v310;
  CGRect v311;

  if (_os_feature_enabled_impl())
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "userInterfaceIdiom");

    if ((v8 & 0xFFFFFFFFFFFFFFFBLL) == 1
      || (unint64_t)(-[CSCoverSheetViewController interfaceOrientation](self, "interfaceOrientation") - 1) <= 1)
    {
      objc_msgSend(getCSProminentLayoutControllerClass(), "frameForElements:variant:forcePortraitBounds:", 1, 1, 1);
      CGRectGetMaxY(v311);
      SBFMainScreenScale();
      BSFloatRoundForScale();
LABEL_608:
      SBFMainScreenScale();
      BSFloatRoundForScale();
      return result;
    }
    v13 = __sb__runningInSpringBoard();
    if (v13)
    {
      if (SBFEffectiveDeviceClass() != 2)
      {
        *(_DWORD *)v309 = 0;
        *(_DWORD *)&v309[40] = 0;
        goto LABEL_33;
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      v288 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v288, "userInterfaceIdiom") != 1)
      {
        *(_DWORD *)v309 = 0;
        *(_DWORD *)&v309[40] = 1;
        goto LABEL_33;
      }
    }
    *(_DWORD *)&v309[40] = v13 ^ 1;
    if (SBFEffectiveHomeButtonType() == 2)
    {
      v16 = __sb__runningInSpringBoard();
      if ((_DWORD)v16)
      {
        __sb__mainScreenReferenceBounds();
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
        v276 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v276, "_referenceBounds");
      }
      BSSizeRoundForScale();
      *(_DWORD *)v309 = v16 ^ 1;
      if (v51 == *(double *)(MEMORY[0x1E0DAB260] + 272) && v50 == *(double *)(MEMORY[0x1E0DAB260] + 280))
      {
        v28 = 0;
        v29 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v296 = 0;
        v300 = 0;
        v304 = 0;
        memset(v308, 0, sizeof(v308));
        memset(&v309[4], 0, 36);
        v310 = 0;
        goto LABEL_131;
      }
    }
    else
    {
      *(_DWORD *)v309 = 0;
    }
LABEL_33:
    v19 = __sb__runningInSpringBoard();
    if (v19)
    {
      if (SBFEffectiveDeviceClass() != 2)
      {
        v310 = 0;
        goto LABEL_42;
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      v284 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v284, "userInterfaceIdiom") != 1)
      {
        v310 = 1;
        goto LABEL_42;
      }
    }
    LODWORD(v310) = v19 ^ 1;
    if (SBFEffectiveHomeButtonType() == 2)
    {
      v16 = __sb__runningInSpringBoard();
      if ((_DWORD)v16)
      {
        __sb__mainScreenReferenceBounds();
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
        v292 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v292, "_referenceBounds");
      }
      BSSizeRoundForScale();
      HIDWORD(v310) = v16 ^ 1;
      if (v52 >= *(double *)(MEMORY[0x1E0DAB260] + 424))
      {
        v28 = 0;
        v29 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v296 = 0;
        v300 = 0;
        v304 = 0;
        memset(v308, 0, sizeof(v308));
        memset(&v309[4], 0, 36);
        goto LABEL_131;
      }
    }
    else
    {
      HIDWORD(v310) = 0;
    }
LABEL_42:
    v20 = __sb__runningInSpringBoard();
    if (v20)
    {
      if (SBFEffectiveDeviceClass() != 2)
      {
        *(_DWORD *)&v309[4] = 0;
        *(_DWORD *)&v309[36] = 0;
        goto LABEL_51;
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      v283 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v283, "userInterfaceIdiom") != 1)
      {
        *(_DWORD *)&v309[4] = 0;
        *(_DWORD *)&v309[36] = 1;
        goto LABEL_51;
      }
    }
    *(_DWORD *)&v309[36] = v20 ^ 1;
    if (SBFEffectiveHomeButtonType() == 2)
    {
      v16 = __sb__runningInSpringBoard();
      if ((_DWORD)v16)
      {
        __sb__mainScreenReferenceBounds();
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
        v275 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v275, "_referenceBounds");
      }
      *(_DWORD *)&v309[4] = v16 ^ 1;
      BSSizeRoundForScale();
      if (v53 >= *(double *)(MEMORY[0x1E0DAB260] + 360))
      {
        v28 = 0;
        v29 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v296 = 0;
        v300 = 0;
        v304 = 0;
        memset(v308, 0, sizeof(v308));
        memset(&v309[8], 0, 28);
        goto LABEL_131;
      }
    }
    else
    {
      *(_DWORD *)&v309[4] = 0;
    }
LABEL_51:
    v21 = __sb__runningInSpringBoard();
    if (v21)
    {
      if (SBFEffectiveDeviceClass() != 2)
      {
        *(_QWORD *)&v309[28] = 0;
        goto LABEL_77;
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      v282 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v282, "userInterfaceIdiom") != 1)
      {
        *(_DWORD *)&v309[28] = 0;
        *(_DWORD *)&v309[32] = 1;
        goto LABEL_77;
      }
    }
    *(_DWORD *)&v309[32] = v21 ^ 1;
    v16 = __sb__runningInSpringBoard();
    if ((_DWORD)v16)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v279 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v279, "_referenceBounds");
    }
    *(_DWORD *)&v309[28] = v16 ^ 1;
    BSSizeRoundForScale();
    if (v26 >= *(double *)(MEMORY[0x1E0DAB260] + 264))
    {
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v296 = 0;
      v300 = 0;
      v304 = 0;
      memset(v308, 0, sizeof(v308));
      memset(&v309[8], 0, 20);
      goto LABEL_131;
    }
LABEL_77:
    v27 = __sb__runningInSpringBoard();
    if (v27)
    {
      if (SBFEffectiveDeviceClass() != 2)
      {
        *(_QWORD *)&v309[20] = 0;
        goto LABEL_104;
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      v281 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v281, "userInterfaceIdiom") != 1)
      {
        *(_DWORD *)&v309[20] = 0;
        *(_DWORD *)&v309[24] = 1;
        goto LABEL_104;
      }
    }
    *(_DWORD *)&v309[24] = v27 ^ 1;
    v16 = __sb__runningInSpringBoard();
    if ((_DWORD)v16)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v277 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v277, "_referenceBounds");
    }
    *(_DWORD *)&v309[20] = v16 ^ 1;
    BSSizeRoundForScale();
    if (v40 >= *(double *)(MEMORY[0x1E0DAB260] + 248))
    {
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v296 = 0;
      v300 = 0;
      v304 = 0;
      memset(v308, 0, sizeof(v308));
      *(_QWORD *)&v309[8] = 0;
      *(_DWORD *)&v309[16] = 0;
      goto LABEL_131;
    }
LABEL_104:
    v41 = __sb__runningInSpringBoard();
    if (v41)
    {
      if (SBFEffectiveDeviceClass() != 2)
      {
        *(_QWORD *)&v309[12] = 0;
        goto LABEL_241;
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      v280 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v280, "userInterfaceIdiom") != 1)
      {
        *(_DWORD *)&v309[12] = 0;
        *(_DWORD *)&v309[16] = 1;
        goto LABEL_241;
      }
    }
    *(_DWORD *)&v309[16] = v41 ^ 1;
    v16 = __sb__runningInSpringBoard();
    if ((_DWORD)v16)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v274 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v274, "_referenceBounds");
    }
    *(_DWORD *)&v309[12] = v16 ^ 1;
    BSSizeRoundForScale();
    if (v55 >= *(double *)(MEMORY[0x1E0DAB260] + 232))
    {
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v296 = 0;
      v300 = 0;
      v304 = 0;
      memset(v308, 0, sizeof(v308));
      *(_DWORD *)&v309[8] = 0;
      goto LABEL_131;
    }
LABEL_241:
    v16 = __sb__runningInSpringBoard();
    if ((_DWORD)v16)
    {
      if (SBFEffectiveDeviceClass() != 2)
        goto LABEL_243;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      v278 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v278, "userInterfaceIdiom") != 1)
      {
LABEL_243:
        *(_DWORD *)&v309[8] = v16 ^ 1;
        if (!_SBF_Private_IsD94Like())
        {
LABEL_247:
          *(_DWORD *)&v308[96] = 0;
          *(_DWORD *)&v308[88] = 0;
          goto LABEL_754;
        }
        v56 = __sb__runningInSpringBoard();
        if (v56)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
            goto LABEL_247;
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v272 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v272, "userInterfaceIdiom"))
          {
            *(_DWORD *)&v308[96] = 0;
            *(_DWORD *)&v308[88] = 1;
            goto LABEL_754;
          }
        }
        *(_DWORD *)&v308[88] = v56 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v16 = __sb__runningInSpringBoard();
          if ((_DWORD)v16)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v265 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v265, "_referenceBounds");
          }
          *(_DWORD *)&v308[96] = v16 ^ 1;
          BSSizeRoundForScale();
          if (v115 >= *(double *)(MEMORY[0x1E0DAB260] + 200))
          {
            v28 = 0;
            v29 = 0;
            v30 = 0;
            v31 = 0;
            v32 = 0;
            v33 = 0;
            v34 = 0;
            v35 = 0;
            v36 = 0;
            v296 = 0;
            v300 = 0;
            v304 = 0;
            memset(v308, 0, 88);
            *(_DWORD *)&v308[92] = 0;
            goto LABEL_131;
          }
        }
        else
        {
          *(_DWORD *)&v308[96] = 0;
        }
LABEL_754:
        v16 = __sb__runningInSpringBoard();
        if ((_DWORD)v16)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            *(_QWORD *)&v308[80] = 0;
            goto LABEL_764;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v273 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v273, "userInterfaceIdiom"))
          {
            *(_QWORD *)&v308[80] = 0x100000000;
            goto LABEL_764;
          }
        }
        *(_DWORD *)&v308[84] = v16 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v16 = __sb__runningInSpringBoard();
          if ((_DWORD)v16)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v268 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v268, "_referenceBounds");
          }
          *(_DWORD *)&v308[80] = v16 ^ 1;
          BSSizeRoundForScale();
          if (v111 >= *(double *)(MEMORY[0x1E0DAB260] + 200))
            goto LABEL_768;
        }
        else
        {
          *(_DWORD *)&v308[80] = 0;
        }
LABEL_764:
        if ((_SBF_Private_IsD94Like() & 1) != 0)
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          v31 = 0;
          v32 = 0;
          v33 = 0;
          v34 = 0;
          v35 = 0;
          v36 = 0;
          v296 = 0;
          v300 = 0;
          v304 = 0;
          memset(v308, 0, 80);
          *(_DWORD *)&v308[92] = 0;
          goto LABEL_131;
        }
LABEL_768:
        if (!_SBF_Private_IsD64Like())
        {
LABEL_772:
          *(_DWORD *)&v308[76] = 0;
          *(_DWORD *)&v308[92] = 0;
          goto LABEL_814;
        }
        v112 = __sb__runningInSpringBoard();
        if (v112)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
            goto LABEL_772;
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v269 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v269, "userInterfaceIdiom"))
          {
            *(_DWORD *)&v308[76] = 0;
            *(_DWORD *)&v308[92] = 1;
            goto LABEL_814;
          }
        }
        *(_DWORD *)&v308[92] = v112 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v16 = __sb__runningInSpringBoard();
          if ((_DWORD)v16)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v260 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v260, "_referenceBounds");
          }
          *(_DWORD *)&v308[76] = v16 ^ 1;
          BSSizeRoundForScale();
          if (v127 >= *(double *)(MEMORY[0x1E0DAB260] + 136))
          {
            v28 = 0;
            v29 = 0;
            v30 = 0;
            v31 = 0;
            v32 = 0;
            v33 = 0;
            v34 = 0;
            v35 = 0;
            v36 = 0;
            v296 = 0;
            v300 = 0;
            v304 = 0;
            memset(v308, 0, 76);
            goto LABEL_131;
          }
        }
        else
        {
          *(_DWORD *)&v308[76] = 0;
        }
LABEL_814:
        v16 = __sb__runningInSpringBoard();
        if ((_DWORD)v16)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            *(_DWORD *)&v308[60] = 0;
            *(_DWORD *)&v308[72] = 0;
            goto LABEL_824;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v271 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v271, "userInterfaceIdiom"))
          {
            *(_DWORD *)&v308[60] = 0;
            *(_DWORD *)&v308[72] = 1;
            goto LABEL_824;
          }
        }
        *(_DWORD *)&v308[72] = v16 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v16 = __sb__runningInSpringBoard();
          if ((_DWORD)v16)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v264 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v264, "_referenceBounds");
          }
          *(_DWORD *)&v308[60] = v16 ^ 1;
          BSSizeRoundForScale();
          if (v117 >= *(double *)(MEMORY[0x1E0DAB260] + 136))
            goto LABEL_828;
        }
        else
        {
          *(_DWORD *)&v308[60] = 0;
        }
LABEL_824:
        if ((_SBF_Private_IsD64Like() & 1) != 0)
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          v31 = 0;
          v32 = 0;
          v33 = 0;
          v34 = 0;
          v35 = 0;
          v36 = 0;
          v296 = 0;
          v300 = 0;
          v304 = 0;
          memset(v308, 0, 60);
          *(_QWORD *)&v308[64] = 0;
          goto LABEL_131;
        }
LABEL_828:
        v118 = __sb__runningInSpringBoard();
        if (v118)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            *(_QWORD *)&v308[64] = 0;
            goto LABEL_838;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v270 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v270, "userInterfaceIdiom"))
          {
            *(_QWORD *)&v308[64] = 0x100000000;
            goto LABEL_838;
          }
        }
        *(_DWORD *)&v308[68] = v118 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v16 = __sb__runningInSpringBoard();
          if ((_DWORD)v16)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v261 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v261, "_referenceBounds");
          }
          *(_DWORD *)&v308[64] = v16 ^ 1;
          BSSizeRoundForScale();
          if (v122 >= *(double *)(MEMORY[0x1E0DAB260] + 136))
          {
            v28 = 0;
            v29 = 0;
            v30 = 0;
            v31 = 0;
            v32 = 0;
            v33 = 0;
            v34 = 0;
            v35 = 0;
            v36 = 0;
            v296 = 0;
            v300 = 0;
            v304 = 0;
            memset(v308, 0, 60);
            goto LABEL_131;
          }
        }
        else
        {
          *(_DWORD *)&v308[64] = 0;
        }
LABEL_838:
        v16 = __sb__runningInSpringBoard();
        if ((_DWORD)v16)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            *(_QWORD *)&v308[52] = 0;
            goto LABEL_848;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v267 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v267, "userInterfaceIdiom"))
          {
            *(_DWORD *)&v308[52] = 0;
            *(_DWORD *)&v308[56] = 1;
            goto LABEL_848;
          }
        }
        *(_DWORD *)&v308[56] = v16 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v16 = __sb__runningInSpringBoard();
          if ((_DWORD)v16)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v259 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v259, "_referenceBounds");
          }
          *(_DWORD *)&v308[52] = v16 ^ 1;
          BSSizeRoundForScale();
          if (v128 >= *(double *)(MEMORY[0x1E0DAB260] + 136))
            goto LABEL_948;
        }
        else
        {
          *(_DWORD *)&v308[52] = 0;
        }
LABEL_848:
        if ((_SBF_Private_IsD54() & 1) != 0)
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          v31 = 0;
          v32 = 0;
          v33 = 0;
          v34 = 0;
          v35 = 0;
          v36 = 0;
          v296 = 0;
          v300 = 0;
          v304 = 0;
          memset(v308, 0, 52);
          goto LABEL_131;
        }
LABEL_948:
        v129 = __sb__runningInSpringBoard();
        if (v129)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            *(_QWORD *)&v308[44] = 0;
            goto LABEL_964;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v266 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v266, "userInterfaceIdiom"))
          {
            *(_DWORD *)&v308[44] = 0;
            *(_DWORD *)&v308[48] = 1;
            goto LABEL_964;
          }
        }
        *(_DWORD *)&v308[48] = v129 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v16 = __sb__runningInSpringBoard();
          if ((_DWORD)v16)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v256 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v256, "_referenceBounds");
          }
          BSSizeRoundForScale();
          *(_DWORD *)&v308[44] = v16 ^ 1;
          if (v142 >= *(double *)(MEMORY[0x1E0DAB260] + 120) && (_SBF_Private_IsN84OrSimilarDevice() & 1) != 0)
          {
            v28 = 0;
            v29 = 0;
            v30 = 0;
            v31 = 0;
            v32 = 0;
            v33 = 0;
            v34 = 0;
            v35 = 0;
            v36 = 0;
            v296 = 0;
            v300 = 0;
            v304 = 0;
            memset(v308, 0, 44);
            goto LABEL_131;
          }
        }
        else
        {
          *(_DWORD *)&v308[44] = 0;
        }
LABEL_964:
        v16 = __sb__runningInSpringBoard();
        if ((_DWORD)v16)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            *(_QWORD *)&v308[36] = 0;
            goto LABEL_988;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v263 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v263, "userInterfaceIdiom"))
          {
            *(_DWORD *)&v308[36] = 0;
            *(_DWORD *)&v308[40] = 1;
            goto LABEL_988;
          }
        }
        *(_DWORD *)&v308[40] = v16 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v16 = __sb__runningInSpringBoard();
          if ((_DWORD)v16)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v255 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v255, "_referenceBounds");
          }
          *(_DWORD *)&v308[36] = v16 ^ 1;
          BSSizeRoundForScale();
          if (v143 >= *(double *)(MEMORY[0x1E0DAB260] + 120))
            goto LABEL_1094;
        }
        else
        {
          *(_DWORD *)&v308[36] = 0;
        }
LABEL_988:
        if (_SBF_Private_IsD33OrSimilarDevice() && (_SBF_Private_IsN84ZoomedOrSimilarDevice() & 1) != 0)
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          v31 = 0;
          v32 = 0;
          v33 = 0;
          v34 = 0;
          v35 = 0;
          v36 = 0;
          v296 = 0;
          v300 = 0;
          v304 = 0;
          memset(v308, 0, 36);
          goto LABEL_131;
        }
LABEL_1094:
        if (!_SBF_Private_IsD93Like())
        {
LABEL_1098:
          *(_QWORD *)&v308[16] = 0;
          goto LABEL_1166;
        }
        v144 = __sb__runningInSpringBoard();
        if (v144)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
            goto LABEL_1098;
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v258 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v258, "userInterfaceIdiom"))
          {
            *(_QWORD *)&v308[16] = 0x100000000;
            goto LABEL_1166;
          }
        }
        *(_DWORD *)&v308[20] = v144 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v16 = __sb__runningInSpringBoard();
          if ((_DWORD)v16)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v249 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v249, "_referenceBounds");
          }
          *(_DWORD *)&v308[16] = v16 ^ 1;
          BSSizeRoundForScale();
          if (v162 >= *(double *)(MEMORY[0x1E0DAB260] + 184))
          {
            v28 = 0;
            v29 = 0;
            v30 = 0;
            v31 = 0;
            v32 = 0;
            v33 = 0;
            v34 = 0;
            v35 = 0;
            v36 = 0;
            v296 = 0;
            v300 = 0;
            v304 = 0;
            *(_QWORD *)&v308[24] = 0;
            *(_OWORD *)v308 = 0uLL;
            *(_DWORD *)&v308[32] = 0;
            goto LABEL_131;
          }
        }
        else
        {
          *(_DWORD *)&v308[16] = 0;
        }
LABEL_1166:
        v16 = __sb__runningInSpringBoard();
        if ((_DWORD)v16)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            *(_DWORD *)&v308[12] = 0;
            *(_DWORD *)&v308[32] = 0;
            goto LABEL_1176;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v262 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v262, "userInterfaceIdiom"))
          {
            *(_DWORD *)&v308[12] = 0;
            *(_DWORD *)&v308[32] = 1;
            goto LABEL_1176;
          }
        }
        *(_DWORD *)&v308[32] = v16 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v16 = __sb__runningInSpringBoard();
          if ((_DWORD)v16)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v252 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v252, "_referenceBounds");
          }
          *(_DWORD *)&v308[12] = v16 ^ 1;
          BSSizeRoundForScale();
          if (v156 >= *(double *)(MEMORY[0x1E0DAB260] + 184))
            goto LABEL_1180;
        }
        else
        {
          *(_DWORD *)&v308[12] = 0;
        }
LABEL_1176:
        if ((_SBF_Private_IsD93Like() & 1) != 0)
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          v31 = 0;
          v32 = 0;
          v33 = 0;
          v34 = 0;
          v35 = 0;
          v36 = 0;
          v296 = 0;
          v300 = 0;
          v304 = 0;
          *(_QWORD *)&v308[24] = 0;
          *(_QWORD *)v308 = 0;
          *(_DWORD *)&v308[8] = 0;
          goto LABEL_131;
        }
LABEL_1180:
        if (!_SBF_Private_IsD63Like())
        {
LABEL_1184:
          *(_QWORD *)&v308[4] = 0;
          goto LABEL_1262;
        }
        v157 = __sb__runningInSpringBoard();
        if (v157)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
            goto LABEL_1184;
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v253 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v253, "userInterfaceIdiom"))
          {
            *(_QWORD *)&v308[4] = 0x100000000;
            goto LABEL_1262;
          }
        }
        *(_DWORD *)&v308[8] = v157 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v16 = __sb__runningInSpringBoard();
          if ((_DWORD)v16)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v245 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v245, "_referenceBounds");
          }
          *(_DWORD *)&v308[4] = v16 ^ 1;
          BSSizeRoundForScale();
          if (v177 >= *(double *)(MEMORY[0x1E0DAB260] + 104))
          {
            v28 = 0;
            v29 = 0;
            v30 = 0;
            v31 = 0;
            v32 = 0;
            v33 = 0;
            v34 = 0;
            v35 = 0;
            v36 = 0;
            v296 = 0;
            v300 = 0;
            v304 = 0;
            *(_QWORD *)&v308[24] = 0;
            *(_DWORD *)v308 = 0;
            goto LABEL_131;
          }
        }
        else
        {
          *(_DWORD *)&v308[4] = 0;
        }
LABEL_1262:
        v16 = __sb__runningInSpringBoard();
        if ((_DWORD)v16)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            *(_DWORD *)v308 = 0;
            *(_DWORD *)&v308[28] = 0;
            goto LABEL_1272;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v257 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v257, "userInterfaceIdiom"))
          {
            *(_DWORD *)v308 = 0;
            *(_DWORD *)&v308[28] = 1;
            goto LABEL_1272;
          }
        }
        *(_DWORD *)&v308[28] = v16 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v16 = __sb__runningInSpringBoard();
          if ((_DWORD)v16)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v248 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v248, "_referenceBounds");
          }
          *(_DWORD *)v308 = v16 ^ 1;
          BSSizeRoundForScale();
          if (v168 >= *(double *)(MEMORY[0x1E0DAB260] + 104))
            goto LABEL_1276;
        }
        else
        {
          *(_DWORD *)v308 = 0;
        }
LABEL_1272:
        if ((_SBF_Private_IsD63Like() & 1) != 0)
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          v31 = 0;
          v32 = 0;
          v33 = 0;
          v34 = 0;
          v35 = 0;
          v36 = 0;
          v296 = 0;
          v300 = 0;
          v304 = 0;
          *(_DWORD *)&v308[24] = 0;
          goto LABEL_131;
        }
LABEL_1276:
        v169 = __sb__runningInSpringBoard();
        if (v169)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            HIDWORD(v304) = 0;
            *(_DWORD *)&v308[24] = 0;
            goto LABEL_1286;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v254 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v254, "userInterfaceIdiom"))
          {
            HIDWORD(v304) = 0;
            *(_DWORD *)&v308[24] = 1;
            goto LABEL_1286;
          }
        }
        *(_DWORD *)&v308[24] = v169 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v16 = __sb__runningInSpringBoard();
          if ((_DWORD)v16)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v246 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v246, "_referenceBounds");
          }
          HIDWORD(v304) = v16 ^ 1;
          BSSizeRoundForScale();
          if (v172 >= *(double *)(MEMORY[0x1E0DAB260] + 120))
          {
            v28 = 0;
            v29 = 0;
            v30 = 0;
            v31 = 0;
            v32 = 0;
            v33 = 0;
            v34 = 0;
            v35 = 0;
            v36 = 0;
            v296 = 0;
            v300 = 0;
            LODWORD(v304) = 0;
            goto LABEL_131;
          }
        }
        else
        {
          HIDWORD(v304) = 0;
        }
LABEL_1286:
        v16 = __sb__runningInSpringBoard();
        if ((_DWORD)v16)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            HIDWORD(v300) = 0;
            LODWORD(v304) = 0;
            goto LABEL_1296;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v251 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v251, "userInterfaceIdiom"))
          {
            HIDWORD(v300) = 0;
            LODWORD(v304) = 1;
            goto LABEL_1296;
          }
        }
        LODWORD(v304) = v16 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v16 = __sb__runningInSpringBoard();
          if ((_DWORD)v16)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v244 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v244, "_referenceBounds");
          }
          HIDWORD(v300) = v16 ^ 1;
          BSSizeRoundForScale();
          if (v178 >= *(double *)(MEMORY[0x1E0DAB260] + 120))
            goto LABEL_1396;
        }
        else
        {
          HIDWORD(v300) = 0;
        }
LABEL_1296:
        if ((_SBF_Private_IsD33OrSimilarDevice() & 1) != 0)
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          v31 = 0;
          v32 = 0;
          v33 = 0;
          v34 = 0;
          v35 = 0;
          v36 = 0;
          v296 = 0;
          LODWORD(v300) = 0;
          goto LABEL_131;
        }
LABEL_1396:
        v179 = __sb__runningInSpringBoard();
        if (v179)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            HIDWORD(v296) = 0;
            LODWORD(v300) = 0;
            goto LABEL_1412;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v250 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v250, "userInterfaceIdiom"))
          {
            HIDWORD(v296) = 0;
            LODWORD(v300) = 1;
            goto LABEL_1412;
          }
        }
        LODWORD(v300) = v179 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v16 = __sb__runningInSpringBoard();
          if ((_DWORD)v16)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v243 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v243, "_referenceBounds");
          }
          HIDWORD(v296) = v16 ^ 1;
          BSSizeRoundForScale();
          if (v190 >= *(double *)(MEMORY[0x1E0DAB260] + 104))
          {
            v28 = 0;
            v29 = 0;
            v30 = 0;
            v31 = 0;
            v32 = 0;
            v33 = 0;
            v34 = 0;
            v35 = 0;
            v36 = 0;
            LODWORD(v296) = 0;
            goto LABEL_131;
          }
        }
        else
        {
          HIDWORD(v296) = 0;
        }
LABEL_1412:
        v16 = __sb__runningInSpringBoard();
        if ((_DWORD)v16)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            v36 = 0;
            LODWORD(v296) = 0;
            goto LABEL_1436;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v247 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v247, "userInterfaceIdiom"))
          {
            v36 = 0;
            LODWORD(v296) = 1;
            goto LABEL_1436;
          }
        }
        LODWORD(v296) = v16 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v16 = __sb__runningInSpringBoard();
          if ((_DWORD)v16)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v242 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v242, "_referenceBounds");
          }
          v36 = v16 ^ 1;
          BSSizeRoundForScale();
          if (v191 >= *(double *)(MEMORY[0x1E0DAB260] + 104))
            goto LABEL_1539;
        }
        else
        {
          v36 = 0;
        }
LABEL_1436:
        if ((_SBF_Private_IsD53() & 1) != 0)
        {
LABEL_1541:
          v28 = 0;
          v29 = 0;
          v30 = 0;
          v31 = 0;
          v32 = 0;
          v33 = 0;
          v34 = 0;
          v35 = 0;
          goto LABEL_131;
        }
LABEL_1539:
        if (_SBF_Private_IsD16() && (_SBF_Private_IsD52OrSimilarDevice() & 1) != 0
          || _SBF_Private_IsD52ZoomedOrSimilarDevice() && (_SBF_Private_IsD16() & 1) != 0
          || (_SBF_Private_IsD52OrSimilarDevice() & 1) != 0
          || (_SBF_Private_IsD52ZoomedOrSimilarDevice() & 1) != 0)
        {
          goto LABEL_1541;
        }
        v202 = __sb__runningInSpringBoard();
        if (v202)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            v34 = 0;
            v35 = 0;
            goto LABEL_1673;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v241 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v241, "userInterfaceIdiom"))
          {
            v34 = 0;
            v35 = 1;
            goto LABEL_1673;
          }
        }
        v35 = v202 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v16 = __sb__runningInSpringBoard();
          if ((_DWORD)v16)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v236 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v236, "_referenceBounds");
          }
          v34 = v16 ^ 1;
          BSSizeRoundForScale();
          if (v214 >= *(double *)(MEMORY[0x1E0DAB260] + 88))
          {
            v28 = 0;
            v29 = 0;
            v30 = 0;
            v31 = 0;
            v32 = 0;
            v33 = 0;
            goto LABEL_131;
          }
        }
        else
        {
          v34 = 0;
        }
LABEL_1673:
        v210 = __sb__runningInSpringBoard();
        if (v210)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            v32 = 0;
            v33 = 0;
            goto LABEL_1687;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v240 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v240, "userInterfaceIdiom"))
          {
            v32 = 0;
            v33 = 1;
            goto LABEL_1687;
          }
        }
        v33 = v210 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v16 = __sb__runningInSpringBoard();
          if ((_DWORD)v16)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v235 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v235, "_referenceBounds");
          }
          v32 = v16 ^ 1;
          BSSizeRoundForScale();
          if (v216 >= *(double *)(MEMORY[0x1E0DAB260] + 72))
          {
            v28 = 0;
            v29 = 0;
            v30 = 0;
            v31 = 0;
            goto LABEL_131;
          }
        }
        else
        {
          v32 = 0;
        }
LABEL_1687:
        v211 = __sb__runningInSpringBoard();
        if (v211)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            v30 = 0;
            v31 = 0;
LABEL_1707:
            v16 = __sb__runningInSpringBoard();
            if ((_DWORD)v16)
            {
              if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
              {
                v28 = 0;
                v29 = 0;
                goto LABEL_131;
              }
            }
            else
            {
              objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
              v238 = (void *)objc_claimAutoreleasedReturnValue();
              if (objc_msgSend(v238, "userInterfaceIdiom"))
              {
                v28 = 0;
                v29 = 1;
                goto LABEL_131;
              }
            }
            v29 = v16 ^ 1;
            v218 = __sb__runningInSpringBoard();
            if (v218)
            {
              __sb__mainScreenReferenceBounds();
            }
            else
            {
              objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
              v16 = objc_claimAutoreleasedReturnValue();
              objc_msgSend((id)v16, "_referenceBounds");
            }
            v28 = v218 ^ 1;
            BSSizeRoundForScale();
LABEL_131:
            if (v28)

            if (v29)
            if (v30)
            {

              if (!v31)
                goto LABEL_137;
            }
            else if (!v31)
            {
LABEL_137:
              if (v32)
                goto LABEL_138;
              goto LABEL_233;
            }

            if (v32)
            {
LABEL_138:

              if (!v33)
                goto LABEL_139;
              goto LABEL_234;
            }
LABEL_233:
            if (!v33)
            {
LABEL_139:
              if (v34)
                goto LABEL_140;
              goto LABEL_235;
            }
LABEL_234:

            if (v34)
            {
LABEL_140:

              if (!v35)
                goto LABEL_141;
              goto LABEL_236;
            }
LABEL_235:
            if (!v35)
            {
LABEL_141:
              if (!v36)
              {
LABEL_143:
                if ((_DWORD)v296)

                if (HIDWORD(v296))
                if ((_DWORD)v300)

                if (HIDWORD(v300))
                if ((_DWORD)v304)

                if (HIDWORD(v304))
                if (*(_DWORD *)&v308[24])

                if (*(_DWORD *)v308)
                if (*(_DWORD *)&v308[28])

                if (*(_DWORD *)&v308[4])
                if (*(_DWORD *)&v308[8])

                if (*(_DWORD *)&v308[12])
                if (*(_DWORD *)&v308[32])

                if (*(_DWORD *)&v308[16])
                if (*(_DWORD *)&v308[20])

                if (*(_DWORD *)&v308[36])
                if (*(_DWORD *)&v308[40])

                if (*(_DWORD *)&v308[44])
                if (*(_DWORD *)&v308[48])

                if (*(_DWORD *)&v308[52])
                if (*(_DWORD *)&v308[56])

                if (*(_DWORD *)&v308[64])
                if (*(_DWORD *)&v308[68])

                if (*(_DWORD *)&v308[60])
                if (*(_DWORD *)&v308[72])

                if (*(_DWORD *)&v308[76])
                if (*(_DWORD *)&v308[92])

                if (*(_DWORD *)&v308[80])
                if (*(_DWORD *)&v308[84])

                if (*(_DWORD *)&v308[96])
                if (*(_DWORD *)&v308[88])

                if (*(_DWORD *)&v309[8])
                if (*(_DWORD *)&v309[12])

                if (*(_DWORD *)&v309[16])
                if (*(_DWORD *)&v309[20])

                if (*(_DWORD *)&v309[24])
                if (*(_DWORD *)&v309[28])

                if (*(_DWORD *)&v309[32])
                if (*(_DWORD *)&v309[4])

                if (*(_DWORD *)&v309[36])
                if (HIDWORD(v310))

                if ((_DWORD)v310)
                if (*(_DWORD *)v309)

                if (!*(_DWORD *)&v309[40])
                  goto LABEL_608;
                v54 = v288;
                goto LABEL_607;
              }
LABEL_142:

              goto LABEL_143;
            }
LABEL_236:

            if (!v36)
              goto LABEL_143;
            goto LABEL_142;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v239 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v239, "userInterfaceIdiom"))
          {
            v30 = 0;
            v31 = 1;
            goto LABEL_1707;
          }
        }
        v31 = v211 ^ 1;
        v16 = __sb__runningInSpringBoard();
        if ((_DWORD)v16)
        {
          __sb__mainScreenReferenceBounds();
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
          v237 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v237, "_referenceBounds");
        }
        v30 = v16 ^ 1;
        BSSizeRoundForScale();
        if (v213 >= *(double *)(MEMORY[0x1E0DAB260] + 56))
        {
          v28 = 0;
          v29 = 0;
          goto LABEL_131;
        }
        goto LABEL_1707;
      }
    }
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v296 = 0;
    v300 = 0;
    v304 = 0;
    memset(v308, 0, sizeof(v308));
    *(_DWORD *)&v309[8] = v16 ^ 1;
    goto LABEL_131;
  }
  if (self->_wantsAccessibilityContentSizes)
  {
    -[CSCoverSheetViewController _updateAccessibilityContentSizesIfNeeded](self, "_updateAccessibilityContentSizesIfNeeded");
    goto LABEL_608;
  }
  if (__sb__runningInSpringBoard())
  {
    if (SBFEffectiveDeviceClass() != 2)
      goto LABEL_9;
LABEL_17:
    v15 = __sb__runningInSpringBoard();
    if (v15)
    {
      if (SBFEffectiveDeviceClass() != 2)
      {
        v310 = 0;
        goto LABEL_67;
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      v282 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v282, "userInterfaceIdiom") != 1)
      {
        v310 = 0x100000000;
        goto LABEL_67;
      }
    }
    HIDWORD(v310) = v15 ^ 1;
    if (SBFEffectiveHomeButtonType() == 2)
    {
      v18 = __sb__runningInSpringBoard();
      if (v18)
      {
        __sb__mainScreenReferenceBounds();
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
        v283 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v283, "_referenceBounds");
      }
      v38 = v18 ^ 1u;
      BSSizeRoundForScale();
      LODWORD(v310) = v38;
      if (v61 == *(double *)(MEMORY[0x1E0DAB260] + 272) && v60 == *(double *)(MEMORY[0x1E0DAB260] + 280))
      {
        memset(v309, 0, sizeof(v309));
        memset(v308, 0, sizeof(v308));
        v305 = 0;
        v301 = 0;
        v297 = 0;
        v293 = 0;
        v285 = 0;
        v289 = 0;
        v44 = 0;
        v45 = 0;
        v46 = 0;
        v47 = 0;
        v48 = 0;
        v49 = 0;
        goto LABEL_307;
      }
    }
    else
    {
      LODWORD(v310) = 0;
    }
LABEL_67:
    v24 = __sb__runningInSpringBoard();
    if (v24)
    {
      if (SBFEffectiveDeviceClass() != 2)
      {
        *(_DWORD *)&v309[12] = 0;
        *(_DWORD *)&v309[40] = 0;
        goto LABEL_86;
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      v281 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v281, "userInterfaceIdiom") != 1)
      {
        *(_DWORD *)&v309[12] = 0;
        *(_DWORD *)&v309[40] = 1;
        goto LABEL_86;
      }
    }
    *(_DWORD *)&v309[40] = v24 ^ 1;
    if (SBFEffectiveHomeButtonType() == 2)
    {
      v25 = __sb__runningInSpringBoard();
      if (v25)
      {
        __sb__mainScreenReferenceBounds();
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
        v273 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v273, "_referenceBounds");
      }
      v38 = v25 ^ 1u;
      BSSizeRoundForScale();
      *(_DWORD *)&v309[12] = v38;
      if (v66 >= *(double *)(MEMORY[0x1E0DAB260] + 424))
      {
        memset(v309, 0, 12);
        memset(&v309[16], 0, 24);
        memset(v308, 0, sizeof(v308));
        v305 = 0;
        v297 = 0;
        v301 = 0;
        v293 = 0;
        v285 = 0;
        v289 = 0;
        v44 = 0;
        v45 = 0;
        v46 = 0;
        v47 = 0;
        v48 = 0;
        v49 = 0;
        goto LABEL_307;
      }
    }
    else
    {
      *(_DWORD *)&v309[12] = 0;
    }
LABEL_86:
    v37 = __sb__runningInSpringBoard();
    if (v37)
    {
      if (SBFEffectiveDeviceClass() != 2)
      {
        *(_QWORD *)&v309[32] = 0;
        goto LABEL_95;
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      v280 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v280, "userInterfaceIdiom") != 1)
      {
        *(_QWORD *)&v309[32] = 0x100000000;
        goto LABEL_95;
      }
    }
    *(_DWORD *)&v309[36] = v37 ^ 1;
    if (SBFEffectiveHomeButtonType() == 2)
    {
      v38 = __sb__runningInSpringBoard();
      if ((_DWORD)v38)
      {
        __sb__mainScreenReferenceBounds();
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
        v272 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v272, "_referenceBounds");
      }
      *(_DWORD *)&v309[32] = v38 ^ 1;
      BSSizeRoundForScale();
      if (v71 >= *(double *)(MEMORY[0x1E0DAB260] + 360))
      {
        memset(v309, 0, 12);
        *(_QWORD *)&v309[16] = 0;
        memset(v308, 0, sizeof(v308));
        *(_QWORD *)&v309[24] = 0;
        v301 = 0;
        v305 = 0;
        v297 = 0;
        v293 = 0;
        v285 = 0;
        v289 = 0;
        v44 = 0;
        v45 = 0;
        v46 = 0;
        v47 = 0;
        v48 = 0;
        v49 = 0;
        goto LABEL_307;
      }
    }
    else
    {
      *(_DWORD *)&v309[32] = 0;
    }
LABEL_95:
    v39 = __sb__runningInSpringBoard();
    if (v39)
    {
      if (SBFEffectiveDeviceClass() != 2)
      {
        *(_QWORD *)&v309[24] = 0;
        goto LABEL_113;
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      v279 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v279, "userInterfaceIdiom") != 1)
      {
        *(_QWORD *)&v309[24] = 0x100000000;
        goto LABEL_113;
      }
    }
    *(_DWORD *)&v309[28] = v39 ^ 1;
    v38 = __sb__runningInSpringBoard();
    if ((_DWORD)v38)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v276 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v276, "_referenceBounds");
    }
    *(_DWORD *)&v309[24] = v38 ^ 1;
    BSSizeRoundForScale();
    if (v42 >= *(double *)(MEMORY[0x1E0DAB260] + 264))
    {
      memset(v309, 0, 12);
      *(_QWORD *)&v309[16] = 0;
      memset(v308, 0, sizeof(v308));
      v301 = 0;
      v305 = 0;
      v297 = 0;
      v293 = 0;
      v285 = 0;
      v289 = 0;
      v44 = 0;
      v45 = 0;
      v46 = 0;
      v47 = 0;
      v48 = 0;
      v49 = 0;
      goto LABEL_307;
    }
LABEL_113:
    v43 = __sb__runningInSpringBoard();
    if (v43)
    {
      if (SBFEffectiveDeviceClass() != 2)
      {
        *(_QWORD *)&v309[16] = 0;
        goto LABEL_253;
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      v278 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v278, "userInterfaceIdiom") != 1)
      {
        *(_QWORD *)&v309[16] = 0x100000000;
        goto LABEL_253;
      }
    }
    *(_DWORD *)&v309[20] = v43 ^ 1;
    v38 = __sb__runningInSpringBoard();
    if ((_DWORD)v38)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v274 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v274, "_referenceBounds");
    }
    *(_DWORD *)&v309[16] = v38 ^ 1;
    BSSizeRoundForScale();
    if (v57 >= *(double *)(MEMORY[0x1E0DAB260] + 248))
    {
      memset(v309, 0, 12);
      memset(v308, 0, sizeof(v308));
      v301 = 0;
      v305 = 0;
      v297 = 0;
      v293 = 0;
      v285 = 0;
      v289 = 0;
      v44 = 0;
      v45 = 0;
      v46 = 0;
      v47 = 0;
      v48 = 0;
      v49 = 0;
      goto LABEL_307;
    }
LABEL_253:
    v58 = __sb__runningInSpringBoard();
    if (v58)
    {
      if (SBFEffectiveDeviceClass() != 2)
      {
        *(_QWORD *)&v309[4] = 0;
        goto LABEL_433;
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      v277 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v277, "userInterfaceIdiom") != 1)
      {
        *(_DWORD *)&v309[4] = 0;
        *(_DWORD *)&v309[8] = 1;
        goto LABEL_433;
      }
    }
    *(_DWORD *)&v309[8] = v58 ^ 1;
    v59 = __sb__runningInSpringBoard();
    if (v59)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v271 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v271, "_referenceBounds");
    }
    v38 = v59 ^ 1u;
    BSSizeRoundForScale();
    *(_DWORD *)&v309[4] = v38;
    if (v74 >= *(double *)(MEMORY[0x1E0DAB260] + 232))
    {
      *(_DWORD *)v309 = 0;
      memset(v308, 0, sizeof(v308));
      v301 = 0;
      v305 = 0;
      v297 = 0;
      v293 = 0;
      v285 = 0;
      v289 = 0;
      v44 = 0;
      v45 = 0;
      v46 = 0;
      v47 = 0;
      v48 = 0;
      v49 = 0;
      goto LABEL_307;
    }
LABEL_433:
    v38 = __sb__runningInSpringBoard();
    if ((_DWORD)v38)
    {
      if (SBFEffectiveDeviceClass() != 2)
        goto LABEL_435;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      v275 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v275, "userInterfaceIdiom") != 1)
      {
LABEL_435:
        *(_DWORD *)v309 = v38 ^ 1;
        if (!_SBF_Private_IsD94Like())
        {
LABEL_439:
          *(_QWORD *)&v308[76] = 0;
          goto LABEL_783;
        }
        v75 = __sb__runningInSpringBoard();
        if (v75)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
            goto LABEL_439;
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v269 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v269, "userInterfaceIdiom"))
          {
            *(_QWORD *)&v308[76] = 0x100000000;
            goto LABEL_783;
          }
        }
        *(_DWORD *)&v308[80] = v75 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v38 = __sb__runningInSpringBoard();
          if ((_DWORD)v38)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v262 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v262, "_referenceBounds");
          }
          *(_DWORD *)&v308[76] = v38 ^ 1;
          BSSizeRoundForScale();
          if (v116 >= *(double *)(MEMORY[0x1E0DAB260] + 200))
          {
            *(_OWORD *)&v308[84] = 0uLL;
            memset(v308, 0, 76);
            v301 = 0;
            v305 = 0;
            v297 = 0;
            v293 = 0;
            v285 = 0;
            v289 = 0;
            v44 = 0;
            v45 = 0;
            v46 = 0;
            v47 = 0;
            v48 = 0;
            v49 = 0;
            goto LABEL_307;
          }
        }
        else
        {
          *(_DWORD *)&v308[76] = 0;
        }
LABEL_783:
        v38 = __sb__runningInSpringBoard();
        if ((_DWORD)v38)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            *(_DWORD *)&v308[72] = 0;
            *(_DWORD *)&v308[96] = 0;
            goto LABEL_793;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v270 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v270, "userInterfaceIdiom"))
          {
            *(_DWORD *)&v308[72] = 0;
            *(_DWORD *)&v308[96] = 1;
            goto LABEL_793;
          }
        }
        *(_DWORD *)&v308[96] = v38 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v38 = __sb__runningInSpringBoard();
          if ((_DWORD)v38)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v265 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v265, "_referenceBounds");
          }
          *(_DWORD *)&v308[72] = v38 ^ 1;
          BSSizeRoundForScale();
          if (v113 >= *(double *)(MEMORY[0x1E0DAB260] + 200))
            goto LABEL_797;
        }
        else
        {
          *(_DWORD *)&v308[72] = 0;
        }
LABEL_793:
        if ((_SBF_Private_IsD94Like() & 1) != 0)
        {
          *(_QWORD *)&v308[88] = 0;
          *(_DWORD *)&v308[84] = 0;
          memset(v308, 0, 72);
          v301 = 0;
          v305 = 0;
          v297 = 0;
          v293 = 0;
          v285 = 0;
          v289 = 0;
          v44 = 0;
          v45 = 0;
          v46 = 0;
          v47 = 0;
          v48 = 0;
          v49 = 0;
          goto LABEL_307;
        }
LABEL_797:
        if (!_SBF_Private_IsD64Like())
        {
LABEL_801:
          *(_QWORD *)&v308[64] = 0;
          goto LABEL_854;
        }
        v114 = __sb__runningInSpringBoard();
        if (v114)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
            goto LABEL_801;
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v266 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v266, "userInterfaceIdiom"))
          {
            *(_DWORD *)&v308[64] = 0;
            *(_DWORD *)&v308[68] = 1;
            goto LABEL_854;
          }
        }
        *(_DWORD *)&v308[68] = v114 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v38 = __sb__runningInSpringBoard();
          if ((_DWORD)v38)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v257 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v257, "_referenceBounds");
          }
          *(_DWORD *)&v308[64] = v38 ^ 1;
          BSSizeRoundForScale();
          if (v131 >= *(double *)(MEMORY[0x1E0DAB260] + 136))
          {
            *(_QWORD *)&v308[88] = 0;
            *(_DWORD *)&v308[84] = 0;
            memset(v308, 0, 64);
            v301 = 0;
            v305 = 0;
            v297 = 0;
            v293 = 0;
            v285 = 0;
            v289 = 0;
            v44 = 0;
            v45 = 0;
            v46 = 0;
            v47 = 0;
            v48 = 0;
            v49 = 0;
            goto LABEL_307;
          }
        }
        else
        {
          *(_DWORD *)&v308[64] = 0;
        }
LABEL_854:
        v38 = __sb__runningInSpringBoard();
        if ((_DWORD)v38)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            *(_DWORD *)&v308[88] = 0;
            *(_DWORD *)&v308[60] = 0;
            goto LABEL_864;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v268 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v268, "userInterfaceIdiom"))
          {
            *(_DWORD *)&v308[60] = 0;
            *(_DWORD *)&v308[88] = 1;
            goto LABEL_864;
          }
        }
        *(_DWORD *)&v308[88] = v38 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v38 = __sb__runningInSpringBoard();
          if ((_DWORD)v38)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v261 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v261, "_referenceBounds");
          }
          *(_DWORD *)&v308[60] = v38 ^ 1;
          BSSizeRoundForScale();
          if (v119 >= *(double *)(MEMORY[0x1E0DAB260] + 136))
            goto LABEL_868;
        }
        else
        {
          *(_DWORD *)&v308[60] = 0;
        }
LABEL_864:
        if ((_SBF_Private_IsD64Like() & 1) != 0)
        {
          *(_DWORD *)&v308[92] = 0;
          *(_DWORD *)&v308[84] = 0;
          memset(v308, 0, 60);
          v301 = 0;
          v305 = 0;
          v297 = 0;
          v293 = 0;
          v285 = 0;
          v289 = 0;
          v44 = 0;
          v45 = 0;
          v46 = 0;
          v47 = 0;
          v48 = 0;
          v49 = 0;
          goto LABEL_307;
        }
LABEL_868:
        v120 = __sb__runningInSpringBoard();
        if (v120)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            *(_DWORD *)&v308[92] = 0;
            *(_DWORD *)&v308[84] = 0;
            goto LABEL_878;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v267 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v267, "userInterfaceIdiom"))
          {
            *(_DWORD *)&v308[84] = 0;
            *(_DWORD *)&v308[92] = 1;
            goto LABEL_878;
          }
        }
        *(_DWORD *)&v308[92] = v120 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v121 = __sb__runningInSpringBoard();
          if (v121)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v258 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v258, "_referenceBounds");
          }
          v38 = v121 ^ 1u;
          BSSizeRoundForScale();
          *(_DWORD *)&v308[84] = v38;
          if (v130 >= *(double *)(MEMORY[0x1E0DAB260] + 136))
          {
            memset(v308, 0, 60);
            v301 = 0;
            v305 = 0;
            v297 = 0;
            v293 = 0;
            v285 = 0;
            v289 = 0;
            v44 = 0;
            v45 = 0;
            v46 = 0;
            v47 = 0;
            v48 = 0;
            v49 = 0;
            goto LABEL_307;
          }
        }
        else
        {
          *(_DWORD *)&v308[84] = 0;
        }
LABEL_878:
        v38 = __sb__runningInSpringBoard();
        if ((_DWORD)v38)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            *(_DWORD *)&v308[56] = 0;
            *(_DWORD *)&v308[32] = 0;
            goto LABEL_944;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v264 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v264, "userInterfaceIdiom"))
          {
            *(_DWORD *)&v308[32] = 0;
            *(_DWORD *)&v308[56] = 1;
            goto LABEL_944;
          }
        }
        *(_DWORD *)&v308[56] = v38 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v38 = __sb__runningInSpringBoard();
          if ((_DWORD)v38)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v256 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v256, "_referenceBounds");
          }
          *(_DWORD *)&v308[32] = v38 ^ 1;
          BSSizeRoundForScale();
          if (v134 >= *(double *)(MEMORY[0x1E0DAB260] + 136))
            goto LABEL_978;
        }
        else
        {
          *(_DWORD *)&v308[32] = 0;
        }
LABEL_944:
        if ((_SBF_Private_IsD54() & 1) != 0)
        {
          memset(v308, 0, 32);
          memset(&v308[36], 0, 20);
          v301 = 0;
          v305 = 0;
          v297 = 0;
          v293 = 0;
          v285 = 0;
          v289 = 0;
          v44 = 0;
          v45 = 0;
          v46 = 0;
          v47 = 0;
          v48 = 0;
          v49 = 0;
          goto LABEL_307;
        }
LABEL_978:
        v135 = __sb__runningInSpringBoard();
        if (v135)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            *(_QWORD *)&v308[48] = 0;
            goto LABEL_995;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v263 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v263, "userInterfaceIdiom"))
          {
            *(_DWORD *)&v308[48] = 0;
            *(_DWORD *)&v308[52] = 1;
            goto LABEL_995;
          }
        }
        *(_DWORD *)&v308[52] = v135 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v38 = __sb__runningInSpringBoard();
          if ((_DWORD)v38)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v253 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v253, "_referenceBounds");
          }
          *(_DWORD *)&v308[48] = v38 ^ 1;
          BSSizeRoundForScale();
          if (v147 >= *(double *)(MEMORY[0x1E0DAB260] + 120) && (_SBF_Private_IsN84OrSimilarDevice() & 1) != 0)
          {
            *(_QWORD *)&v308[40] = 0;
            memset(v308, 0, 32);
            *(_DWORD *)&v308[36] = 0;
            v301 = 0;
            v305 = 0;
            v297 = 0;
            v293 = 0;
            v285 = 0;
            v289 = 0;
            v44 = 0;
            v45 = 0;
            v46 = 0;
            v47 = 0;
            v48 = 0;
            v49 = 0;
            goto LABEL_307;
          }
        }
        else
        {
          *(_DWORD *)&v308[48] = 0;
        }
LABEL_995:
        v38 = __sb__runningInSpringBoard();
        if ((_DWORD)v38)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            *(_QWORD *)&v308[40] = 0;
            goto LABEL_1077;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v260 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v260, "userInterfaceIdiom"))
          {
            *(_DWORD *)&v308[40] = 0;
            *(_DWORD *)&v308[44] = 1;
            goto LABEL_1077;
          }
        }
        *(_DWORD *)&v308[44] = v38 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v38 = __sb__runningInSpringBoard();
          if ((_DWORD)v38)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v252 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v252, "_referenceBounds");
          }
          *(_DWORD *)&v308[40] = v38 ^ 1;
          BSSizeRoundForScale();
          if (v150 >= *(double *)(MEMORY[0x1E0DAB260] + 120))
            goto LABEL_1119;
        }
        else
        {
          *(_DWORD *)&v308[40] = 0;
        }
LABEL_1077:
        if (_SBF_Private_IsD33OrSimilarDevice() && (_SBF_Private_IsN84ZoomedOrSimilarDevice() & 1) != 0)
        {
          memset(v308, 0, 32);
          *(_DWORD *)&v308[36] = 0;
          v301 = 0;
          v305 = 0;
          v297 = 0;
          v293 = 0;
          v285 = 0;
          v289 = 0;
          v44 = 0;
          v45 = 0;
          v46 = 0;
          v47 = 0;
          v48 = 0;
          v49 = 0;
          goto LABEL_307;
        }
LABEL_1119:
        if (!_SBF_Private_IsD93Like())
        {
LABEL_1123:
          *(_DWORD *)&v308[28] = 0;
          *(_DWORD *)&v308[8] = 0;
          goto LABEL_1205;
        }
        v151 = __sb__runningInSpringBoard();
        if (v151)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
            goto LABEL_1123;
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v255 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v255, "userInterfaceIdiom"))
          {
            *(_DWORD *)&v308[8] = 0;
            *(_DWORD *)&v308[28] = 1;
            goto LABEL_1205;
          }
        }
        *(_DWORD *)&v308[28] = v151 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v38 = __sb__runningInSpringBoard();
          if ((_DWORD)v38)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v246 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v246, "_referenceBounds");
          }
          *(_DWORD *)&v308[8] = v38 ^ 1;
          BSSizeRoundForScale();
          if (v167 >= *(double *)(MEMORY[0x1E0DAB260] + 184))
          {
            *(_DWORD *)&v308[36] = 0;
            *(_QWORD *)&v308[20] = 0;
            *(_QWORD *)&v308[12] = 0;
            *(_QWORD *)v308 = 0;
            v301 = 0;
            v305 = 0;
            v297 = 0;
            v293 = 0;
            v285 = 0;
            v289 = 0;
            v44 = 0;
            v45 = 0;
            v46 = 0;
            v47 = 0;
            v48 = 0;
            v49 = 0;
            goto LABEL_307;
          }
        }
        else
        {
          *(_DWORD *)&v308[8] = 0;
        }
LABEL_1205:
        v38 = __sb__runningInSpringBoard();
        if ((_DWORD)v38)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            *(_DWORD *)&v308[36] = 0;
            *(_DWORD *)&v308[24] = 0;
            goto LABEL_1215;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v259 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v259, "userInterfaceIdiom"))
          {
            *(_DWORD *)&v308[24] = 0;
            *(_DWORD *)&v308[36] = 1;
            goto LABEL_1215;
          }
        }
        *(_DWORD *)&v308[36] = v38 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v38 = __sb__runningInSpringBoard();
          if ((_DWORD)v38)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v249 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v249, "_referenceBounds");
          }
          *(_DWORD *)&v308[24] = v38 ^ 1;
          BSSizeRoundForScale();
          if (v158 >= *(double *)(MEMORY[0x1E0DAB260] + 184))
            goto LABEL_1219;
        }
        else
        {
          *(_DWORD *)&v308[24] = 0;
        }
LABEL_1215:
        if ((_SBF_Private_IsD93Like() & 1) != 0)
        {
          *(_QWORD *)&v308[12] = 0;
          *(_QWORD *)v308 = 0;
          *(_DWORD *)&v308[20] = 0;
          v301 = 0;
          v305 = 0;
          v297 = 0;
          v293 = 0;
          v285 = 0;
          v289 = 0;
          v44 = 0;
          v45 = 0;
          v46 = 0;
          v47 = 0;
          v48 = 0;
          v49 = 0;
          goto LABEL_307;
        }
LABEL_1219:
        if (!_SBF_Private_IsD63Like())
        {
LABEL_1223:
          *(_DWORD *)&v308[12] = 0;
          *(_DWORD *)&v308[4] = 0;
          goto LABEL_1302;
        }
        v159 = __sb__runningInSpringBoard();
        if (v159)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
            goto LABEL_1223;
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v250 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v250, "userInterfaceIdiom"))
          {
            *(_DWORD *)&v308[4] = 0;
            *(_DWORD *)&v308[12] = 1;
            goto LABEL_1302;
          }
        }
        *(_DWORD *)&v308[12] = v159 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v38 = __sb__runningInSpringBoard();
          if ((_DWORD)v38)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v242 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v242, "_referenceBounds");
          }
          *(_DWORD *)&v308[4] = v38 ^ 1;
          BSSizeRoundForScale();
          if (v181 >= *(double *)(MEMORY[0x1E0DAB260] + 104))
          {
            *(_QWORD *)&v308[16] = 0;
            *(_DWORD *)v308 = 0;
            v301 = 0;
            v305 = 0;
            v297 = 0;
            v293 = 0;
            v285 = 0;
            v289 = 0;
            v44 = 0;
            v45 = 0;
            v46 = 0;
            v47 = 0;
            v48 = 0;
            v49 = 0;
            goto LABEL_307;
          }
        }
        else
        {
          *(_DWORD *)&v308[4] = 0;
        }
LABEL_1302:
        v38 = __sb__runningInSpringBoard();
        if ((_DWORD)v38)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            *(_QWORD *)&v308[16] = 0;
            goto LABEL_1312;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v254 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v254, "userInterfaceIdiom"))
          {
            *(_DWORD *)&v308[16] = 0;
            *(_DWORD *)&v308[20] = 1;
            goto LABEL_1312;
          }
        }
        *(_DWORD *)&v308[20] = v38 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v38 = __sb__runningInSpringBoard();
          if ((_DWORD)v38)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v245 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v245, "_referenceBounds");
          }
          *(_DWORD *)&v308[16] = v38 ^ 1;
          BSSizeRoundForScale();
          if (v170 >= *(double *)(MEMORY[0x1E0DAB260] + 104))
            goto LABEL_1316;
        }
        else
        {
          *(_DWORD *)&v308[16] = 0;
        }
LABEL_1312:
        if ((_SBF_Private_IsD63Like() & 1) != 0)
        {
          *(_DWORD *)v308 = 0;
          v301 = 0;
          v305 = 0;
          v297 = 0;
          v293 = 0;
          v285 = 0;
          v289 = 0;
          v44 = 0;
          v45 = 0;
          v46 = 0;
          v47 = 0;
          v48 = 0;
          v49 = 0;
          goto LABEL_307;
        }
LABEL_1316:
        v171 = __sb__runningInSpringBoard();
        if (v171)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            *(_DWORD *)v308 = 0;
            LODWORD(v305) = 0;
            goto LABEL_1326;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v251 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v251, "userInterfaceIdiom"))
          {
            LODWORD(v305) = 0;
            *(_DWORD *)v308 = 1;
            goto LABEL_1326;
          }
        }
        *(_DWORD *)v308 = v171 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v38 = __sb__runningInSpringBoard();
          if ((_DWORD)v38)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v243 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v243, "_referenceBounds");
          }
          LODWORD(v305) = v38 ^ 1;
          BSSizeRoundForScale();
          if (v180 >= *(double *)(MEMORY[0x1E0DAB260] + 120))
          {
            HIDWORD(v305) = 0;
            v297 = 0;
            v301 = 0;
            v293 = 0;
            v285 = 0;
            v289 = 0;
            v44 = 0;
            v45 = 0;
            v46 = 0;
            v47 = 0;
            v48 = 0;
            v49 = 0;
            goto LABEL_307;
          }
        }
        else
        {
          LODWORD(v305) = 0;
        }
LABEL_1326:
        v38 = __sb__runningInSpringBoard();
        if ((_DWORD)v38)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            HIDWORD(v305) = 0;
            HIDWORD(v301) = 0;
            goto LABEL_1392;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v248 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v248, "userInterfaceIdiom"))
          {
            HIDWORD(v301) = 0;
            HIDWORD(v305) = 1;
            goto LABEL_1392;
          }
        }
        HIDWORD(v305) = v38 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v38 = __sb__runningInSpringBoard();
          if ((_DWORD)v38)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v241 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v241, "_referenceBounds");
          }
          HIDWORD(v301) = v38 ^ 1;
          BSSizeRoundForScale();
          if (v184 >= *(double *)(MEMORY[0x1E0DAB260] + 120))
            goto LABEL_1426;
        }
        else
        {
          HIDWORD(v301) = 0;
        }
LABEL_1392:
        if ((_SBF_Private_IsD33OrSimilarDevice() & 1) != 0)
        {
          LODWORD(v301) = 0;
          v297 = 0;
          v293 = 0;
          v285 = 0;
          v289 = 0;
          v44 = 0;
          v45 = 0;
          v46 = 0;
          v47 = 0;
          v48 = 0;
          v49 = 0;
          goto LABEL_307;
        }
LABEL_1426:
        v185 = __sb__runningInSpringBoard();
        if (v185)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            LODWORD(v301) = 0;
            HIDWORD(v297) = 0;
            goto LABEL_1442;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v247 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v247, "userInterfaceIdiom"))
          {
            HIDWORD(v297) = 0;
            LODWORD(v301) = 1;
            goto LABEL_1442;
          }
        }
        LODWORD(v301) = v185 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v38 = __sb__runningInSpringBoard();
          if ((_DWORD)v38)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v240 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v240, "_referenceBounds");
          }
          HIDWORD(v297) = v38 ^ 1;
          BSSizeRoundForScale();
          if (v194 >= *(double *)(MEMORY[0x1E0DAB260] + 104))
          {
            LODWORD(v297) = 0;
            v293 = 0;
            v285 = 0;
            v289 = 0;
            v44 = 0;
            v45 = 0;
            v46 = 0;
            v47 = 0;
            v48 = 0;
            v49 = 0;
            goto LABEL_307;
          }
        }
        else
        {
          HIDWORD(v297) = 0;
        }
LABEL_1442:
        v38 = __sb__runningInSpringBoard();
        if ((_DWORD)v38)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            LODWORD(v297) = 0;
            v293 = 0;
            goto LABEL_1535;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v244 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v244, "userInterfaceIdiom"))
          {
            v293 = 0;
            LODWORD(v297) = 1;
            goto LABEL_1535;
          }
        }
        LODWORD(v297) = v38 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v38 = __sb__runningInSpringBoard();
          if ((_DWORD)v38)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v239 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v239, "_referenceBounds");
          }
          v293 = v38 ^ 1;
          BSSizeRoundForScale();
          if (v201 >= *(double *)(MEMORY[0x1E0DAB260] + 104))
            goto LABEL_1581;
        }
        else
        {
          v293 = 0;
        }
LABEL_1535:
        if ((_SBF_Private_IsD53() & 1) != 0)
        {
LABEL_1588:
          v285 = 0;
          v289 = 0;
          v44 = 0;
          v45 = 0;
          v46 = 0;
          v47 = 0;
          v48 = 0;
          v49 = 0;
          goto LABEL_307;
        }
LABEL_1581:
        if (_SBF_Private_IsD16() && (_SBF_Private_IsD52OrSimilarDevice() & 1) != 0
          || _SBF_Private_IsD52ZoomedOrSimilarDevice() && (_SBF_Private_IsD16() & 1) != 0
          || (_SBF_Private_IsD52OrSimilarDevice() & 1) != 0
          || (_SBF_Private_IsD52ZoomedOrSimilarDevice() & 1) != 0)
        {
          goto LABEL_1588;
        }
        v203 = __sb__runningInSpringBoard();
        if (v203)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            v285 = 0;
            v289 = 0;
            goto LABEL_1697;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v238 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v238, "userInterfaceIdiom"))
          {
            v289 = 0;
            v285 = 1;
            goto LABEL_1697;
          }
        }
        v285 = v203 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v38 = __sb__runningInSpringBoard();
          if ((_DWORD)v38)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v236 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v236, "_referenceBounds");
          }
          v289 = v38 ^ 1;
          BSSizeRoundForScale();
          if (v219 >= *(double *)(MEMORY[0x1E0DAB260] + 88))
          {
            v44 = 0;
            v45 = 0;
            v46 = 0;
            v47 = 0;
            v48 = 0;
            v49 = 0;
            goto LABEL_307;
          }
        }
        else
        {
          v289 = 0;
        }
LABEL_1697:
        v212 = __sb__runningInSpringBoard();
        if (v212)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            v44 = 0;
            v45 = 0;
            goto LABEL_1721;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v237 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v237, "userInterfaceIdiom"))
          {
            v45 = 0;
            v44 = 1;
            goto LABEL_1721;
          }
        }
        v44 = v212 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v38 = __sb__runningInSpringBoard();
          if ((_DWORD)v38)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v235 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v235, "_referenceBounds");
          }
          v45 = v38 ^ 1;
          BSSizeRoundForScale();
          if (v220 >= *(double *)(MEMORY[0x1E0DAB260] + 72))
          {
            v46 = 0;
            v47 = 0;
            v48 = 0;
            v49 = 0;
            goto LABEL_307;
          }
        }
        else
        {
          v45 = 0;
        }
LABEL_1721:
        v215 = __sb__runningInSpringBoard();
        if (v215)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            v46 = 0;
            v47 = 0;
LABEL_1734:
            v38 = __sb__runningInSpringBoard();
            if ((_DWORD)v38)
            {
              if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
              {
                v48 = 0;
                v49 = 0;
                goto LABEL_307;
              }
            }
            else
            {
              objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
              v2 = (void *)objc_claimAutoreleasedReturnValue();
              if (objc_msgSend(v2, "userInterfaceIdiom"))
              {
                v49 = 0;
                v48 = 1;
                goto LABEL_307;
              }
            }
            v48 = v38 ^ 1;
            v221 = __sb__runningInSpringBoard();
            if (v221)
            {
              __sb__mainScreenReferenceBounds();
            }
            else
            {
              objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
              v38 = objc_claimAutoreleasedReturnValue();
              objc_msgSend((id)v38, "_referenceBounds");
            }
            v49 = v221 ^ 1;
            BSSizeRoundForScale();
LABEL_307:
            if (v49)

            if (v48)
            if (v47)
            {

              if (!v46)
                goto LABEL_313;
            }
            else if (!v46)
            {
LABEL_313:
              if (v45)
                goto LABEL_314;
              goto LABEL_318;
            }

            if (v45)
            {
LABEL_314:

              if (!v44)
                goto LABEL_320;
              goto LABEL_319;
            }
LABEL_318:
            if (!v44)
            {
LABEL_320:
              if (v289)

              if (v285)
              if (v293)

              if ((_DWORD)v297)
              if (HIDWORD(v297))

              if ((_DWORD)v301)
              if (HIDWORD(v301))

              if (HIDWORD(v305))
              if ((_DWORD)v305)

              if (*(_DWORD *)v308)
              if (*(_DWORD *)&v308[16])

              if (*(_DWORD *)&v308[20])
              if (*(_DWORD *)&v308[4])

              if (*(_DWORD *)&v308[12])
              if (*(_DWORD *)&v308[24])

              if (*(_DWORD *)&v308[36])
              if (*(_DWORD *)&v308[8])

              if (*(_DWORD *)&v308[28])
              if (*(_DWORD *)&v308[40])

              if (*(_DWORD *)&v308[44])
              if (*(_DWORD *)&v308[48])

              if (*(_DWORD *)&v308[52])
              if (*(_DWORD *)&v308[32])

              if (*(_DWORD *)&v308[56])
              if (*(_DWORD *)&v308[84])

              if (*(_DWORD *)&v308[92])
              if (*(_DWORD *)&v308[60])

              if (*(_DWORD *)&v308[88])
              if (*(_DWORD *)&v308[64])

              if (*(_DWORD *)&v308[68])
              if (*(_DWORD *)&v308[72])

              if (*(_DWORD *)&v308[96])
              if (*(_DWORD *)&v308[76])

              if (*(_DWORD *)&v308[80])
              if (*(_DWORD *)v309)

              if (*(_DWORD *)&v309[4])
              if (*(_DWORD *)&v309[8])

              if (*(_DWORD *)&v309[16])
              if (*(_DWORD *)&v309[20])

              if (*(_DWORD *)&v309[24])
              if (*(_DWORD *)&v309[28])

              if (*(_DWORD *)&v309[32])
              if (*(_DWORD *)&v309[36])

              if (*(_DWORD *)&v309[12])
              if (*(_DWORD *)&v309[40])

              if ((_DWORD)v310)
              if (!HIDWORD(v310))
                goto LABEL_608;
              v54 = v282;
LABEL_607:

              goto LABEL_608;
            }
LABEL_319:

            goto LABEL_320;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v4, "userInterfaceIdiom"))
          {
            v47 = 0;
            v46 = 1;
            goto LABEL_1734;
          }
        }
        v46 = v215 ^ 1;
        v38 = __sb__runningInSpringBoard();
        if ((_DWORD)v38)
        {
          __sb__mainScreenReferenceBounds();
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
          v3 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v3, "_referenceBounds");
        }
        v47 = v38 ^ 1;
        BSSizeRoundForScale();
        if (v217 >= *(double *)(MEMORY[0x1E0DAB260] + 56))
        {
          v48 = 0;
          v49 = 0;
          goto LABEL_307;
        }
        goto LABEL_1734;
      }
    }
    memset(v308, 0, sizeof(v308));
    v301 = 0;
    v305 = 0;
    v297 = 0;
    v293 = 0;
    v285 = 0;
    v289 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v49 = 0;
    *(_DWORD *)v309 = v38 ^ 1;
    goto LABEL_307;
  }
  objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = (void *)objc_msgSend(v14, "userInterfaceIdiom");

  if (v2 == (void *)1)
    goto LABEL_17;
LABEL_9:
  v9 = -[CSCoverSheetViewController interfaceOrientation](self, "interfaceOrientation") - 1;
  v10 = __sb__runningInSpringBoard();
  v11 = v10;
  if (v9 <= 1)
  {
    v12 = &CSTimeLabelPortraitBaselineY;
    if (v10)
    {
      if (SBFEffectiveDeviceClass() != 2)
      {
        v310 = 0;
        goto LABEL_267;
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      v283 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v283, "userInterfaceIdiom") != 1)
      {
        v310 = 0x100000000;
        goto LABEL_267;
      }
    }
    HIDWORD(v310) = v11 ^ 1;
    if (SBFEffectiveHomeButtonType() == 2)
    {
      v22 = __sb__runningInSpringBoard();
      if (v22)
      {
        __sb__mainScreenReferenceBounds();
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
        v274 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v274, "_referenceBounds");
      }
      v68 = v22 ^ 1u;
      BSSizeRoundForScale();
      LODWORD(v310) = v68;
      if (v98 == *(double *)(MEMORY[0x1E0DAB260] + 272) && v97 == *(double *)(MEMORY[0x1E0DAB260] + 280))
      {
        memset(v309, 0, sizeof(v309));
        memset(v308, 0, sizeof(v308));
        v298 = 0;
        v302 = 0;
        v306 = 0;
        v294 = 0;
        v290 = 0;
        v286 = 0;
        v80 = 0;
        v81 = 0;
        v82 = 0;
        v83 = 0;
        v84 = 0;
        v85 = 0;
        goto LABEL_500;
      }
    }
    else
    {
      LODWORD(v310) = 0;
    }
LABEL_267:
    v62 = __sb__runningInSpringBoard();
    if (v62)
    {
      if (SBFEffectiveDeviceClass() != 2)
      {
        *(_DWORD *)&v309[16] = 0;
        *(_DWORD *)v309 = 0;
        goto LABEL_288;
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      v282 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v282, "userInterfaceIdiom") != 1)
      {
        *(_DWORD *)v309 = 0;
        *(_DWORD *)&v309[16] = 1;
        goto LABEL_288;
      }
    }
    *(_DWORD *)&v309[16] = v62 ^ 1;
    if (SBFEffectiveHomeButtonType() == 2)
    {
      v63 = __sb__runningInSpringBoard();
      if (v63)
      {
        __sb__mainScreenReferenceBounds();
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
        v273 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v273, "_referenceBounds");
      }
      v68 = v63 ^ 1u;
      BSSizeRoundForScale();
      *(_DWORD *)v309 = v68;
      if (v101 >= *(double *)(MEMORY[0x1E0DAB260] + 424))
      {
        memset(&v309[20], 0, 24);
        *(_QWORD *)&v309[8] = 0;
        *(_DWORD *)&v309[4] = 0;
        memset(v308, 0, sizeof(v308));
        v298 = 0;
        v302 = 0;
        v306 = 0;
        v294 = 0;
        v290 = 0;
        v286 = 0;
        v80 = 0;
        v81 = 0;
        v82 = 0;
        v83 = 0;
        v84 = 0;
        v85 = 0;
        goto LABEL_500;
      }
    }
    else
    {
      *(_DWORD *)v309 = 0;
    }
LABEL_288:
    v67 = __sb__runningInSpringBoard();
    if (v67)
    {
      if (SBFEffectiveDeviceClass() != 2)
      {
        *(_QWORD *)&v309[36] = 0;
        goto LABEL_416;
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      v281 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v281, "userInterfaceIdiom") != 1)
      {
        *(_QWORD *)&v309[36] = 0x100000000;
        goto LABEL_416;
      }
    }
    *(_DWORD *)&v309[40] = v67 ^ 1;
    if (SBFEffectiveHomeButtonType() == 2)
    {
      v68 = __sb__runningInSpringBoard();
      if ((_DWORD)v68)
      {
        __sb__mainScreenReferenceBounds();
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
        v272 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v272, "_referenceBounds");
      }
      *(_DWORD *)&v309[36] = v68 ^ 1;
      BSSizeRoundForScale();
      if (v103 >= *(double *)(MEMORY[0x1E0DAB260] + 360))
      {
        *(_QWORD *)&v309[20] = 0;
        *(_QWORD *)&v309[28] = 0;
        *(_QWORD *)&v309[8] = 0;
        *(_DWORD *)&v309[4] = 0;
        memset(v308, 0, sizeof(v308));
        v298 = 0;
        v302 = 0;
        v306 = 0;
        v294 = 0;
        v290 = 0;
        v286 = 0;
        v80 = 0;
        v81 = 0;
        v82 = 0;
        v83 = 0;
        v84 = 0;
        v85 = 0;
        goto LABEL_500;
      }
    }
    else
    {
      *(_DWORD *)&v309[36] = 0;
    }
LABEL_416:
    v72 = __sb__runningInSpringBoard();
    if (v72)
    {
      if (SBFEffectiveDeviceClass() != 2)
      {
        *(_QWORD *)&v309[28] = 0;
        goto LABEL_446;
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      v280 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v280, "userInterfaceIdiom") != 1)
      {
        *(_QWORD *)&v309[28] = 0x100000000;
        goto LABEL_446;
      }
    }
    *(_DWORD *)&v309[32] = v72 ^ 1;
    v68 = __sb__runningInSpringBoard();
    if ((_DWORD)v68)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v277 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v277, "_referenceBounds");
    }
    *(_DWORD *)&v309[28] = v68 ^ 1;
    BSSizeRoundForScale();
    if (v76 >= *(double *)(MEMORY[0x1E0DAB260] + 264))
    {
      *(_QWORD *)&v309[20] = 0;
      *(_QWORD *)&v309[8] = 0;
      *(_DWORD *)&v309[4] = 0;
      memset(v308, 0, sizeof(v308));
      v298 = 0;
      v302 = 0;
      v306 = 0;
      v294 = 0;
      v290 = 0;
      v286 = 0;
      v80 = 0;
      v81 = 0;
      v82 = 0;
      v83 = 0;
      v84 = 0;
      v85 = 0;
      goto LABEL_500;
    }
LABEL_446:
    v77 = __sb__runningInSpringBoard();
    if (v77)
    {
      if (SBFEffectiveDeviceClass() != 2)
      {
        *(_QWORD *)&v309[20] = 0;
        goto LABEL_466;
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      v279 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v279, "userInterfaceIdiom") != 1)
      {
        *(_DWORD *)&v309[20] = 0;
        *(_DWORD *)&v309[24] = 1;
        goto LABEL_466;
      }
    }
    *(_DWORD *)&v309[24] = v77 ^ 1;
    v68 = __sb__runningInSpringBoard();
    if ((_DWORD)v68)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v275 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v275, "_referenceBounds");
    }
    *(_DWORD *)&v309[20] = v68 ^ 1;
    BSSizeRoundForScale();
    if (v93 >= *(double *)(MEMORY[0x1E0DAB260] + 248))
    {
      *(_QWORD *)&v309[8] = 0;
      *(_DWORD *)&v309[4] = 0;
      memset(v308, 0, sizeof(v308));
      v298 = 0;
      v302 = 0;
      v306 = 0;
      v294 = 0;
      v290 = 0;
      v286 = 0;
      v80 = 0;
      v81 = 0;
      v82 = 0;
      v83 = 0;
      v84 = 0;
      v85 = 0;
      goto LABEL_500;
    }
LABEL_466:
    v94 = __sb__runningInSpringBoard();
    if (v94)
    {
      if (SBFEffectiveDeviceClass() != 2)
      {
        *(_QWORD *)&v309[8] = 0;
        goto LABEL_725;
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      v278 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v278, "userInterfaceIdiom") != 1)
      {
        *(_QWORD *)&v309[8] = 0x100000000;
        goto LABEL_725;
      }
    }
    *(_DWORD *)&v309[12] = v94 ^ 1;
    v68 = __sb__runningInSpringBoard();
    if ((_DWORD)v68)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v271 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v271, "_referenceBounds");
    }
    *(_DWORD *)&v309[8] = v68 ^ 1;
    BSSizeRoundForScale();
    if (v107 >= *(double *)(MEMORY[0x1E0DAB260] + 232))
    {
      *(_DWORD *)&v309[4] = 0;
      memset(v308, 0, sizeof(v308));
      v298 = 0;
      v302 = 0;
      v306 = 0;
      v294 = 0;
      v290 = 0;
      v286 = 0;
      v80 = 0;
      v81 = 0;
      v82 = 0;
      v83 = 0;
      v84 = 0;
      v85 = 0;
      goto LABEL_500;
    }
LABEL_725:
    v68 = __sb__runningInSpringBoard();
    if ((_DWORD)v68)
    {
      if (SBFEffectiveDeviceClass() != 2)
        goto LABEL_727;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      v276 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v276, "userInterfaceIdiom") != 1)
      {
LABEL_727:
        *(_DWORD *)&v309[4] = v68 ^ 1;
        if (!_SBF_Private_IsD94Like())
        {
LABEL_731:
          *(_QWORD *)&v308[88] = 0;
          goto LABEL_891;
        }
        v108 = __sb__runningInSpringBoard();
        if (v108)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
            goto LABEL_731;
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v269 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v269, "userInterfaceIdiom"))
          {
            *(_QWORD *)&v308[88] = 0x100000000;
            goto LABEL_891;
          }
        }
        *(_DWORD *)&v308[92] = v108 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v68 = __sb__runningInSpringBoard();
          if ((_DWORD)v68)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v262 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v262, "_referenceBounds");
          }
          *(_DWORD *)&v308[88] = v68 ^ 1;
          BSSizeRoundForScale();
          if (v132 >= *(double *)(MEMORY[0x1E0DAB260] + 200))
          {
            *(_DWORD *)&v308[96] = 0;
            memset(v308, 0, 88);
            v298 = 0;
            v302 = 0;
            v306 = 0;
            v294 = 0;
            v290 = 0;
            v286 = 0;
            v80 = 0;
            v81 = 0;
            v82 = 0;
            v83 = 0;
            v84 = 0;
            v85 = 0;
            goto LABEL_500;
          }
        }
        else
        {
          *(_DWORD *)&v308[88] = 0;
        }
LABEL_891:
        v68 = __sb__runningInSpringBoard();
        if ((_DWORD)v68)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            *(_DWORD *)&v308[96] = 0;
            *(_DWORD *)&v308[84] = 0;
            goto LABEL_901;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v270 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v270, "userInterfaceIdiom"))
          {
            *(_DWORD *)&v308[84] = 0;
            *(_DWORD *)&v308[96] = 1;
            goto LABEL_901;
          }
        }
        *(_DWORD *)&v308[96] = v68 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v68 = __sb__runningInSpringBoard();
          if ((_DWORD)v68)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v265 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v265, "_referenceBounds");
          }
          *(_DWORD *)&v308[84] = v68 ^ 1;
          BSSizeRoundForScale();
          if (v123 >= *(double *)(MEMORY[0x1E0DAB260] + 200))
            goto LABEL_905;
        }
        else
        {
          *(_DWORD *)&v308[84] = 0;
        }
LABEL_901:
        if ((_SBF_Private_IsD94Like() & 1) != 0)
        {
          memset(v308, 0, 84);
          v298 = 0;
          v302 = 0;
          v306 = 0;
          v294 = 0;
          v290 = 0;
          v286 = 0;
          v80 = 0;
          v81 = 0;
          v82 = 0;
          v83 = 0;
          v84 = 0;
          v85 = 0;
          goto LABEL_500;
        }
LABEL_905:
        if (!_SBF_Private_IsD64Like())
        {
LABEL_909:
          *(_QWORD *)&v308[76] = 0;
          goto LABEL_1005;
        }
        v124 = __sb__runningInSpringBoard();
        if (v124)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
            goto LABEL_909;
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v266 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v266, "userInterfaceIdiom"))
          {
            *(_DWORD *)&v308[76] = 0;
            *(_DWORD *)&v308[80] = 1;
            goto LABEL_1005;
          }
        }
        *(_DWORD *)&v308[80] = v124 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v68 = __sb__runningInSpringBoard();
          if ((_DWORD)v68)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v257 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v257, "_referenceBounds");
          }
          *(_DWORD *)&v308[76] = v68 ^ 1;
          BSSizeRoundForScale();
          if (v148 >= *(double *)(MEMORY[0x1E0DAB260] + 136))
          {
            memset(v308, 0, 76);
            v298 = 0;
            v302 = 0;
            v306 = 0;
            v294 = 0;
            v290 = 0;
            v286 = 0;
            v80 = 0;
            v81 = 0;
            v82 = 0;
            v83 = 0;
            v84 = 0;
            v85 = 0;
            goto LABEL_500;
          }
        }
        else
        {
          *(_DWORD *)&v308[76] = 0;
        }
LABEL_1005:
        v68 = __sb__runningInSpringBoard();
        if ((_DWORD)v68)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            *(_DWORD *)&v308[72] = 0;
            *(_DWORD *)&v308[56] = 0;
            goto LABEL_1015;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v268 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v268, "userInterfaceIdiom"))
          {
            *(_DWORD *)&v308[56] = 0;
            *(_DWORD *)&v308[72] = 1;
            goto LABEL_1015;
          }
        }
        *(_DWORD *)&v308[72] = v68 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v68 = __sb__runningInSpringBoard();
          if ((_DWORD)v68)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v261 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v261, "_referenceBounds");
          }
          *(_DWORD *)&v308[56] = v68 ^ 1;
          BSSizeRoundForScale();
          if (v136 >= *(double *)(MEMORY[0x1E0DAB260] + 136))
            goto LABEL_1019;
        }
        else
        {
          *(_DWORD *)&v308[56] = 0;
        }
LABEL_1015:
        if ((_SBF_Private_IsD64Like() & 1) != 0)
        {
          *(_QWORD *)&v308[64] = 0;
          *(_DWORD *)&v308[60] = 0;
          memset(v308, 0, 56);
          v298 = 0;
          v302 = 0;
          v306 = 0;
          v294 = 0;
          v290 = 0;
          v286 = 0;
          v80 = 0;
          v81 = 0;
          v82 = 0;
          v83 = 0;
          v84 = 0;
          v85 = 0;
          goto LABEL_500;
        }
LABEL_1019:
        v137 = __sb__runningInSpringBoard();
        if (v137)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            *(_DWORD *)&v308[68] = 0;
            *(_DWORD *)&v308[52] = 0;
            goto LABEL_1029;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v267 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v267, "userInterfaceIdiom"))
          {
            *(_DWORD *)&v308[52] = 0;
            *(_DWORD *)&v308[68] = 1;
            goto LABEL_1029;
          }
        }
        *(_DWORD *)&v308[68] = v137 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v138 = __sb__runningInSpringBoard();
          if (v138)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v258 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v258, "_referenceBounds");
          }
          v68 = v138 ^ 1u;
          BSSizeRoundForScale();
          *(_DWORD *)&v308[52] = v68;
          if (v145 >= *(double *)(MEMORY[0x1E0DAB260] + 136))
          {
            *(_QWORD *)&v308[60] = 0;
            memset(v308, 0, 52);
            v298 = 0;
            v302 = 0;
            v306 = 0;
            v294 = 0;
            v290 = 0;
            v286 = 0;
            v80 = 0;
            v81 = 0;
            v82 = 0;
            v83 = 0;
            v84 = 0;
            v85 = 0;
            goto LABEL_500;
          }
        }
        else
        {
          *(_DWORD *)&v308[52] = 0;
        }
LABEL_1029:
        v68 = __sb__runningInSpringBoard();
        if ((_DWORD)v68)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            *(_DWORD *)&v308[44] = 0;
            *(_DWORD *)&v308[24] = 0;
            goto LABEL_1084;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v264 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v264, "userInterfaceIdiom"))
          {
            *(_DWORD *)&v308[24] = 0;
            *(_DWORD *)&v308[44] = 1;
            goto LABEL_1084;
          }
        }
        *(_DWORD *)&v308[44] = v68 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v68 = __sb__runningInSpringBoard();
          if ((_DWORD)v68)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v256 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v256, "_referenceBounds");
          }
          *(_DWORD *)&v308[24] = v68 ^ 1;
          BSSizeRoundForScale();
          if (v152 >= *(double *)(MEMORY[0x1E0DAB260] + 136))
            goto LABEL_1128;
        }
        else
        {
          *(_DWORD *)&v308[24] = 0;
        }
LABEL_1084:
        if ((_SBF_Private_IsD54() & 1) != 0)
        {
          *(_QWORD *)&v308[60] = 0;
          *(_DWORD *)&v308[48] = 0;
          *(_OWORD *)&v308[28] = 0uLL;
          memset(v308, 0, 24);
          v298 = 0;
          v302 = 0;
          v306 = 0;
          v294 = 0;
          v290 = 0;
          v286 = 0;
          v80 = 0;
          v81 = 0;
          v82 = 0;
          v83 = 0;
          v84 = 0;
          v85 = 0;
          goto LABEL_500;
        }
LABEL_1128:
        v153 = __sb__runningInSpringBoard();
        if (v153)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            *(_QWORD *)&v308[60] = 0;
            goto LABEL_1146;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v263 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v263, "userInterfaceIdiom"))
          {
            *(_DWORD *)&v308[60] = 0;
            *(_DWORD *)&v308[64] = 1;
            goto LABEL_1146;
          }
        }
        *(_DWORD *)&v308[64] = v153 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v68 = __sb__runningInSpringBoard();
          if ((_DWORD)v68)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v253 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v253, "_referenceBounds");
          }
          *(_DWORD *)&v308[60] = v68 ^ 1;
          BSSizeRoundForScale();
          if (v160 >= *(double *)(MEMORY[0x1E0DAB260] + 120) && (_SBF_Private_IsN84OrSimilarDevice() & 1) != 0)
          {
            *(_DWORD *)&v308[48] = 0;
            *(_OWORD *)&v308[28] = 0uLL;
            memset(v308, 0, 24);
            v298 = 0;
            v302 = 0;
            v306 = 0;
            v294 = 0;
            v290 = 0;
            v286 = 0;
            v80 = 0;
            v81 = 0;
            v82 = 0;
            v83 = 0;
            v84 = 0;
            v85 = 0;
            goto LABEL_500;
          }
        }
        else
        {
          *(_DWORD *)&v308[60] = 0;
        }
LABEL_1146:
        v68 = __sb__runningInSpringBoard();
        if ((_DWORD)v68)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            *(_DWORD *)&v308[40] = 0;
            *(_DWORD *)&v308[48] = 0;
            goto LABEL_1191;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v260 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v260, "userInterfaceIdiom"))
          {
            *(_DWORD *)&v308[48] = 0;
            *(_DWORD *)&v308[40] = 1;
            goto LABEL_1191;
          }
        }
        *(_DWORD *)&v308[40] = v68 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v68 = __sb__runningInSpringBoard();
          if ((_DWORD)v68)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v252 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v252, "_referenceBounds");
          }
          *(_DWORD *)&v308[48] = v68 ^ 1;
          BSSizeRoundForScale();
          if (v163 >= *(double *)(MEMORY[0x1E0DAB260] + 120))
            goto LABEL_1239;
        }
        else
        {
          *(_DWORD *)&v308[48] = 0;
        }
LABEL_1191:
        if (_SBF_Private_IsD33OrSimilarDevice() && (_SBF_Private_IsN84ZoomedOrSimilarDevice() & 1) != 0)
        {
          *(_QWORD *)&v308[32] = 0;
          *(_DWORD *)&v308[28] = 0;
          memset(v308, 0, 24);
          v298 = 0;
          v302 = 0;
          v306 = 0;
          v294 = 0;
          v290 = 0;
          v286 = 0;
          v80 = 0;
          v81 = 0;
          v82 = 0;
          v83 = 0;
          v84 = 0;
          v85 = 0;
          goto LABEL_500;
        }
LABEL_1239:
        if (!_SBF_Private_IsD93Like())
        {
LABEL_1243:
          *(_DWORD *)&v308[36] = 0;
          *(_DWORD *)&v308[20] = 0;
          goto LABEL_1339;
        }
        v164 = __sb__runningInSpringBoard();
        if (v164)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
            goto LABEL_1243;
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v255 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v255, "userInterfaceIdiom"))
          {
            *(_DWORD *)&v308[20] = 0;
            *(_DWORD *)&v308[36] = 1;
            goto LABEL_1339;
          }
        }
        *(_DWORD *)&v308[36] = v164 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v68 = __sb__runningInSpringBoard();
          if ((_DWORD)v68)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v246 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v246, "_referenceBounds");
          }
          *(_DWORD *)&v308[20] = v68 ^ 1;
          BSSizeRoundForScale();
          if (v182 >= *(double *)(MEMORY[0x1E0DAB260] + 184))
          {
            *(_QWORD *)&v308[28] = 0;
            memset(v308, 0, 20);
            v298 = 0;
            v302 = 0;
            v306 = 0;
            v294 = 0;
            v290 = 0;
            v286 = 0;
            v80 = 0;
            v81 = 0;
            v82 = 0;
            v83 = 0;
            v84 = 0;
            v85 = 0;
            goto LABEL_500;
          }
        }
        else
        {
          *(_DWORD *)&v308[20] = 0;
        }
LABEL_1339:
        v68 = __sb__runningInSpringBoard();
        if ((_DWORD)v68)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            *(_QWORD *)&v308[28] = 0;
            goto LABEL_1349;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v259 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v259, "userInterfaceIdiom"))
          {
            *(_DWORD *)&v308[28] = 0;
            *(_DWORD *)&v308[32] = 1;
            goto LABEL_1349;
          }
        }
        *(_DWORD *)&v308[32] = v68 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v68 = __sb__runningInSpringBoard();
          if ((_DWORD)v68)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v249 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v249, "_referenceBounds");
          }
          *(_DWORD *)&v308[28] = v68 ^ 1;
          BSSizeRoundForScale();
          if (v173 >= *(double *)(MEMORY[0x1E0DAB260] + 184))
            goto LABEL_1353;
        }
        else
        {
          *(_DWORD *)&v308[28] = 0;
        }
LABEL_1349:
        if ((_SBF_Private_IsD93Like() & 1) != 0)
        {
          memset(v308, 0, 20);
          v298 = 0;
          v302 = 0;
          v306 = 0;
          v294 = 0;
          v290 = 0;
          v286 = 0;
          v80 = 0;
          v81 = 0;
          v82 = 0;
          v83 = 0;
          v84 = 0;
          v85 = 0;
          goto LABEL_500;
        }
LABEL_1353:
        if (!_SBF_Private_IsD63Like())
        {
LABEL_1357:
          *(_QWORD *)&v308[8] = 0;
          goto LABEL_1452;
        }
        v174 = __sb__runningInSpringBoard();
        if (v174)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
            goto LABEL_1357;
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v250 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v250, "userInterfaceIdiom"))
          {
            *(_QWORD *)&v308[8] = 0x100000000;
            goto LABEL_1452;
          }
        }
        *(_DWORD *)&v308[12] = v174 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v68 = __sb__runningInSpringBoard();
          if ((_DWORD)v68)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v242 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v242, "_referenceBounds");
          }
          *(_DWORD *)&v308[8] = v68 ^ 1;
          BSSizeRoundForScale();
          if (v195 >= *(double *)(MEMORY[0x1E0DAB260] + 104))
          {
            *(_DWORD *)&v308[16] = 0;
            *(_QWORD *)v308 = 0;
            v298 = 0;
            v302 = 0;
            v306 = 0;
            v294 = 0;
            v290 = 0;
            v286 = 0;
            v80 = 0;
            v81 = 0;
            v82 = 0;
            v83 = 0;
            v84 = 0;
            v85 = 0;
            goto LABEL_500;
          }
        }
        else
        {
          *(_DWORD *)&v308[8] = 0;
        }
LABEL_1452:
        v68 = __sb__runningInSpringBoard();
        if ((_DWORD)v68)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            *(_DWORD *)&v308[16] = 0;
            *(_DWORD *)&v308[4] = 0;
            goto LABEL_1462;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v254 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v254, "userInterfaceIdiom"))
          {
            *(_DWORD *)&v308[4] = 0;
            *(_DWORD *)&v308[16] = 1;
            goto LABEL_1462;
          }
        }
        *(_DWORD *)&v308[16] = v68 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v68 = __sb__runningInSpringBoard();
          if ((_DWORD)v68)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v245 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v245, "_referenceBounds");
          }
          *(_DWORD *)&v308[4] = v68 ^ 1;
          BSSizeRoundForScale();
          if (v186 >= *(double *)(MEMORY[0x1E0DAB260] + 104))
            goto LABEL_1466;
        }
        else
        {
          *(_DWORD *)&v308[4] = 0;
        }
LABEL_1462:
        if ((_SBF_Private_IsD63Like() & 1) != 0)
        {
          *(_DWORD *)v308 = 0;
          v298 = 0;
          v302 = 0;
          v306 = 0;
          v294 = 0;
          v290 = 0;
          v286 = 0;
          v80 = 0;
          v81 = 0;
          v82 = 0;
          v83 = 0;
          v84 = 0;
          v85 = 0;
          goto LABEL_500;
        }
LABEL_1466:
        v187 = __sb__runningInSpringBoard();
        if (v187)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            *(_DWORD *)v308 = 0;
            HIDWORD(v298) = 0;
            goto LABEL_1476;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v251 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v251, "userInterfaceIdiom"))
          {
            HIDWORD(v298) = 0;
            *(_DWORD *)v308 = 1;
            goto LABEL_1476;
          }
        }
        *(_DWORD *)v308 = v187 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v68 = __sb__runningInSpringBoard();
          if ((_DWORD)v68)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v243 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v243, "_referenceBounds");
          }
          HIDWORD(v298) = v68 ^ 1;
          BSSizeRoundForScale();
          if (v192 >= *(double *)(MEMORY[0x1E0DAB260] + 120))
          {
            v302 = 0;
            v306 = 0;
            LODWORD(v298) = 0;
            v294 = 0;
            v290 = 0;
            v286 = 0;
            v80 = 0;
            v81 = 0;
            v82 = 0;
            v83 = 0;
            v84 = 0;
            v85 = 0;
            goto LABEL_500;
          }
        }
        else
        {
          HIDWORD(v298) = 0;
        }
LABEL_1476:
        v68 = __sb__runningInSpringBoard();
        if ((_DWORD)v68)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            v306 = 0;
            goto LABEL_1523;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v248 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v248, "userInterfaceIdiom"))
          {
            v306 = 0x100000000;
            goto LABEL_1523;
          }
        }
        HIDWORD(v306) = v68 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v68 = __sb__runningInSpringBoard();
          if ((_DWORD)v68)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v241 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v241, "_referenceBounds");
          }
          LODWORD(v306) = v68 ^ 1;
          BSSizeRoundForScale();
          if (v197 >= *(double *)(MEMORY[0x1E0DAB260] + 120))
            goto LABEL_1565;
        }
        else
        {
          LODWORD(v306) = 0;
        }
LABEL_1523:
        if ((_SBF_Private_IsD33OrSimilarDevice() & 1) != 0)
        {
          v302 = 0;
          LODWORD(v298) = 0;
          v294 = 0;
          v290 = 0;
          v286 = 0;
          v80 = 0;
          v81 = 0;
          v82 = 0;
          v83 = 0;
          v84 = 0;
          v85 = 0;
          goto LABEL_500;
        }
LABEL_1565:
        v198 = __sb__runningInSpringBoard();
        if (v198)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            v302 = 0;
            goto LABEL_1593;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v247 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v247, "userInterfaceIdiom"))
          {
            v302 = 0x100000000;
            goto LABEL_1593;
          }
        }
        HIDWORD(v302) = v198 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v68 = __sb__runningInSpringBoard();
          if ((_DWORD)v68)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v240 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v240, "_referenceBounds");
          }
          LODWORD(v302) = v68 ^ 1;
          BSSizeRoundForScale();
          if (v204 >= *(double *)(MEMORY[0x1E0DAB260] + 104))
          {
            LODWORD(v298) = 0;
            v294 = 0;
            v290 = 0;
            v286 = 0;
            v80 = 0;
            v81 = 0;
            v82 = 0;
            v83 = 0;
            v84 = 0;
            v85 = 0;
            goto LABEL_500;
          }
        }
        else
        {
          LODWORD(v302) = 0;
        }
LABEL_1593:
        v68 = __sb__runningInSpringBoard();
        if ((_DWORD)v68)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            LODWORD(v298) = 0;
            v294 = 0;
            goto LABEL_1617;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v244 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v244, "userInterfaceIdiom"))
          {
            v294 = 0;
            LODWORD(v298) = 1;
            goto LABEL_1617;
          }
        }
        LODWORD(v298) = v68 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v68 = __sb__runningInSpringBoard();
          if ((_DWORD)v68)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v239 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v239, "_referenceBounds");
          }
          v294 = v68 ^ 1;
          BSSizeRoundForScale();
          if (v206 >= *(double *)(MEMORY[0x1E0DAB260] + 104))
            goto LABEL_1637;
        }
        else
        {
          v294 = 0;
        }
LABEL_1617:
        if ((_SBF_Private_IsD53() & 1) != 0)
        {
LABEL_1644:
          v290 = 0;
          v286 = 0;
          v80 = 0;
          v81 = 0;
          v82 = 0;
          v83 = 0;
          v84 = 0;
          v85 = 0;
          goto LABEL_500;
        }
LABEL_1637:
        if (_SBF_Private_IsD16() && (_SBF_Private_IsD52OrSimilarDevice() & 1) != 0
          || _SBF_Private_IsD52ZoomedOrSimilarDevice() && (_SBF_Private_IsD16() & 1) != 0
          || (_SBF_Private_IsD52OrSimilarDevice() & 1) != 0
          || (_SBF_Private_IsD52ZoomedOrSimilarDevice() & 1) != 0)
        {
          goto LABEL_1644;
        }
        v208 = __sb__runningInSpringBoard();
        if (v208)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            v290 = 0;
            v286 = 0;
            goto LABEL_1759;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v238 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v238, "userInterfaceIdiom"))
          {
            v286 = 0;
            v290 = 1;
            goto LABEL_1759;
          }
        }
        v290 = v208 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v68 = __sb__runningInSpringBoard();
          if ((_DWORD)v68)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v236 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v236, "_referenceBounds");
          }
          v286 = v68 ^ 1;
          BSSizeRoundForScale();
          if (v228 >= *(double *)(MEMORY[0x1E0DAB260] + 88))
          {
            v80 = 0;
            v81 = 0;
            v82 = 0;
            v83 = 0;
            v84 = 0;
            v85 = 0;
            goto LABEL_500;
          }
        }
        else
        {
          v286 = 0;
        }
LABEL_1759:
        v222 = __sb__runningInSpringBoard();
        if (v222)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            v80 = 0;
            v81 = 0;
            goto LABEL_1779;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v237 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v237, "userInterfaceIdiom"))
          {
            v81 = 0;
            v80 = 1;
            goto LABEL_1779;
          }
        }
        v80 = v222 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v68 = __sb__runningInSpringBoard();
          if ((_DWORD)v68)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v235 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v235, "_referenceBounds");
          }
          v81 = v68 ^ 1;
          BSSizeRoundForScale();
          if (v230 >= *(double *)(MEMORY[0x1E0DAB260] + 72))
          {
            v82 = 0;
            v83 = 0;
            v84 = 0;
            v85 = 0;
            goto LABEL_500;
          }
        }
        else
        {
          v81 = 0;
        }
LABEL_1779:
        v224 = __sb__runningInSpringBoard();
        if (v224)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            v82 = 0;
            v83 = 0;
LABEL_1799:
            v68 = __sb__runningInSpringBoard();
            if ((_DWORD)v68)
            {
              if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
              {
                v84 = 0;
                v85 = 0;
                goto LABEL_500;
              }
            }
            else
            {
              objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
              v12 = (uint64_t *)objc_claimAutoreleasedReturnValue();
              if (objc_msgSend(v12, "userInterfaceIdiom"))
              {
                v85 = 0;
                v84 = 1;
                goto LABEL_500;
              }
            }
            v84 = v68 ^ 1;
            v232 = __sb__runningInSpringBoard();
            if (v232)
            {
              __sb__mainScreenReferenceBounds();
            }
            else
            {
              objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
              v68 = objc_claimAutoreleasedReturnValue();
              objc_msgSend((id)v68, "_referenceBounds");
            }
            v85 = v232 ^ 1;
            BSSizeRoundForScale();
LABEL_500:
            if (v85)

            if (v84)
            if (v83)
            {

              if (!v82)
                goto LABEL_506;
            }
            else if (!v82)
            {
LABEL_506:
              if (v81)
                goto LABEL_507;
              goto LABEL_511;
            }

            if (v81)
            {
LABEL_507:

              if (!v80)
                goto LABEL_513;
              goto LABEL_512;
            }
LABEL_511:
            if (!v80)
            {
LABEL_513:
              if (v286)

              if (v290)
              if (v294)

              if ((_DWORD)v298)
              if ((_DWORD)v302)

              if (HIDWORD(v302))
              if ((_DWORD)v306)

              if (HIDWORD(v306))
              if (HIDWORD(v298))

              if (*(_DWORD *)v308)
              if (*(_DWORD *)&v308[4])

              if (*(_DWORD *)&v308[16])
              if (*(_DWORD *)&v308[8])

              if (*(_DWORD *)&v308[12])
              if (*(_DWORD *)&v308[28])

              if (*(_DWORD *)&v308[32])
              if (*(_DWORD *)&v308[20])

              if (*(_DWORD *)&v308[36])
              if (*(_DWORD *)&v308[48])

              if (*(_DWORD *)&v308[40])
              if (*(_DWORD *)&v308[60])

              if (*(_DWORD *)&v308[64])
              if (*(_DWORD *)&v308[24])

              if (*(_DWORD *)&v308[44])
              if (*(_DWORD *)&v308[52])

              if (*(_DWORD *)&v308[68])
              if (*(_DWORD *)&v308[56])

              if (*(_DWORD *)&v308[72])
              if (*(_DWORD *)&v308[76])

              if (*(_DWORD *)&v308[80])
              if (*(_DWORD *)&v308[84])

              if (*(_DWORD *)&v308[96])
              if (*(_DWORD *)&v308[88])

              if (*(_DWORD *)&v308[92])
              if (*(_DWORD *)&v309[4])

              if (*(_DWORD *)&v309[8])
              if (*(_DWORD *)&v309[12])

              if (*(_DWORD *)&v309[20])
              if (*(_DWORD *)&v309[24])

              if (*(_DWORD *)&v309[28])
              if (*(_DWORD *)&v309[32])

              if (*(_DWORD *)&v309[36])
              if (*(_DWORD *)&v309[40])

              if (*(_DWORD *)v309)
              if (*(_DWORD *)&v309[16])

              if ((_DWORD)v310)
              if (!HIDWORD(v310))
                goto LABEL_608;
              v54 = v283;
              goto LABEL_607;
            }
LABEL_512:

            goto LABEL_513;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v2 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v2, "userInterfaceIdiom"))
          {
            v83 = 0;
            v82 = 1;
            goto LABEL_1799;
          }
        }
        v82 = v224 ^ 1;
        v68 = __sb__runningInSpringBoard();
        if ((_DWORD)v68)
        {
          __sb__mainScreenReferenceBounds();
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
          v5 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v5, "_referenceBounds");
        }
        v83 = v68 ^ 1;
        BSSizeRoundForScale();
        if (v226 >= *(double *)(MEMORY[0x1E0DAB260] + 56))
        {
          v84 = 0;
          v85 = 0;
          goto LABEL_500;
        }
        goto LABEL_1799;
      }
    }
    memset(v308, 0, sizeof(v308));
    v298 = 0;
    v302 = 0;
    v306 = 0;
    v294 = 0;
    v290 = 0;
    v286 = 0;
    v80 = 0;
    v81 = 0;
    v82 = 0;
    v83 = 0;
    v84 = 0;
    v85 = 0;
    *(_DWORD *)&v309[4] = v68 ^ 1;
    goto LABEL_500;
  }
  v17 = &CSTimeLabelLandscapeBaselineY;
  if (v10)
  {
    if (SBFEffectiveDeviceClass() != 2)
    {
      v310 = 0;
      goto LABEL_276;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v283 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v283, "userInterfaceIdiom") != 1)
    {
      v310 = 0x100000000;
      goto LABEL_276;
    }
  }
  HIDWORD(v310) = v11 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v23 = __sb__runningInSpringBoard();
    if (v23)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v274 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v274, "_referenceBounds");
    }
    v70 = v23 ^ 1u;
    BSSizeRoundForScale();
    LODWORD(v310) = v70;
    if (v100 == *(double *)(MEMORY[0x1E0DAB260] + 272) && v99 == *(double *)(MEMORY[0x1E0DAB260] + 280))
    {
      memset(v309, 0, sizeof(v309));
      memset(v308, 0, sizeof(v308));
      v299 = 0;
      v303 = 0;
      v307 = 0;
      v295 = 0;
      v291 = 0;
      v287 = 0;
      v86 = 0;
      v87 = 0;
      v88 = 0;
      v89 = 0;
      v90 = 0;
      v91 = 0;
      v92 = &qword_1D048FFD8;
      goto LABEL_612;
    }
  }
  else
  {
    LODWORD(v310) = 0;
  }
LABEL_276:
  v64 = __sb__runningInSpringBoard();
  if (v64)
  {
    if (SBFEffectiveDeviceClass() != 2)
    {
      *(_DWORD *)&v309[16] = 0;
      *(_DWORD *)v309 = 0;
      goto LABEL_297;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v282 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v282, "userInterfaceIdiom") != 1)
    {
      *(_DWORD *)v309 = 0;
      *(_DWORD *)&v309[16] = 1;
      goto LABEL_297;
    }
  }
  *(_DWORD *)&v309[16] = v64 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v65 = __sb__runningInSpringBoard();
    if (v65)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v273 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v273, "_referenceBounds");
    }
    v70 = v65 ^ 1u;
    BSSizeRoundForScale();
    *(_DWORD *)v309 = v70;
    if (v102 >= *(double *)(MEMORY[0x1E0DAB260] + 424))
    {
      memset(&v309[20], 0, 24);
      *(_QWORD *)&v309[8] = 0;
      *(_DWORD *)&v309[4] = 0;
      memset(v308, 0, sizeof(v308));
      v299 = 0;
      v303 = 0;
      v307 = 0;
      v295 = 0;
      v291 = 0;
      v287 = 0;
      v86 = 0;
      v87 = 0;
      v88 = 0;
      v89 = 0;
      v90 = 0;
      v91 = 0;
      v92 = &qword_1D0490000;
      goto LABEL_612;
    }
  }
  else
  {
    *(_DWORD *)v309 = 0;
  }
LABEL_297:
  v69 = __sb__runningInSpringBoard();
  if (v69)
  {
    if (SBFEffectiveDeviceClass() != 2)
    {
      *(_QWORD *)&v309[36] = 0;
      goto LABEL_424;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v281 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v281, "userInterfaceIdiom") != 1)
    {
      *(_QWORD *)&v309[36] = 0x100000000;
      goto LABEL_424;
    }
  }
  *(_DWORD *)&v309[40] = v69 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v70 = __sb__runningInSpringBoard();
    if ((_DWORD)v70)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v272 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v272, "_referenceBounds");
    }
    *(_DWORD *)&v309[36] = v70 ^ 1;
    BSSizeRoundForScale();
    if (v105 >= *(double *)(MEMORY[0x1E0DAB260] + 360))
    {
      *(_QWORD *)&v309[20] = 0;
      *(_QWORD *)&v309[28] = 0;
      *(_QWORD *)&v309[8] = 0;
      *(_DWORD *)&v309[4] = 0;
      memset(v308, 0, sizeof(v308));
      v299 = 0;
      v303 = 0;
      v307 = 0;
      v295 = 0;
      v291 = 0;
      v287 = 0;
      v86 = 0;
      v87 = 0;
      v88 = 0;
      v89 = 0;
      v90 = 0;
      v91 = 0;
      v92 = &qword_1D048FFF0;
      goto LABEL_612;
    }
  }
  else
  {
    *(_DWORD *)&v309[36] = 0;
  }
LABEL_424:
  v73 = __sb__runningInSpringBoard();
  if (v73)
  {
    if (SBFEffectiveDeviceClass() != 2)
    {
      *(_QWORD *)&v309[28] = 0;
      goto LABEL_455;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v280 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v280, "userInterfaceIdiom") != 1)
    {
      *(_QWORD *)&v309[28] = 0x100000000;
      goto LABEL_455;
    }
  }
  *(_DWORD *)&v309[32] = v73 ^ 1;
  v70 = __sb__runningInSpringBoard();
  if ((_DWORD)v70)
  {
    __sb__mainScreenReferenceBounds();
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
    v277 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v277, "_referenceBounds");
  }
  *(_DWORD *)&v309[28] = v70 ^ 1;
  BSSizeRoundForScale();
  if (v78 >= *(double *)(MEMORY[0x1E0DAB260] + 264))
  {
    *(_QWORD *)&v309[20] = 0;
    *(_QWORD *)&v309[8] = 0;
    *(_DWORD *)&v309[4] = 0;
    memset(v308, 0, sizeof(v308));
    v299 = 0;
    v303 = 0;
    v307 = 0;
    v295 = 0;
    v291 = 0;
    v287 = 0;
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v92 = &qword_1D048FFF8;
    goto LABEL_612;
  }
LABEL_455:
  v79 = __sb__runningInSpringBoard();
  if (v79)
  {
    if (SBFEffectiveDeviceClass() != 2)
    {
      *(_QWORD *)&v309[20] = 0;
      goto LABEL_475;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v279 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v279, "userInterfaceIdiom") != 1)
    {
      *(_DWORD *)&v309[20] = 0;
      *(_DWORD *)&v309[24] = 1;
      goto LABEL_475;
    }
  }
  *(_DWORD *)&v309[24] = v79 ^ 1;
  v70 = __sb__runningInSpringBoard();
  if ((_DWORD)v70)
  {
    __sb__mainScreenReferenceBounds();
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
    v275 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v275, "_referenceBounds");
  }
  *(_DWORD *)&v309[20] = v70 ^ 1;
  BSSizeRoundForScale();
  if (v95 >= *(double *)(MEMORY[0x1E0DAB260] + 248))
  {
    *(_QWORD *)&v309[8] = 0;
    *(_DWORD *)&v309[4] = 0;
    memset(v308, 0, sizeof(v308));
    v299 = 0;
    v303 = 0;
    v307 = 0;
    v295 = 0;
    v291 = 0;
    v287 = 0;
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v92 = &qword_1D048FFE8;
    goto LABEL_612;
  }
LABEL_475:
  v96 = __sb__runningInSpringBoard();
  if (v96)
  {
    if (SBFEffectiveDeviceClass() != 2)
    {
      *(_QWORD *)&v309[8] = 0;
      goto LABEL_737;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v278 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v278, "userInterfaceIdiom") != 1)
    {
      *(_QWORD *)&v309[8] = 0x100000000;
      goto LABEL_737;
    }
  }
  *(_DWORD *)&v309[12] = v96 ^ 1;
  v70 = __sb__runningInSpringBoard();
  if ((_DWORD)v70)
  {
    __sb__mainScreenReferenceBounds();
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
    v271 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v271, "_referenceBounds");
  }
  *(_DWORD *)&v309[8] = v70 ^ 1;
  BSSizeRoundForScale();
  if (v109 >= *(double *)(MEMORY[0x1E0DAB260] + 232))
  {
    *(_DWORD *)&v309[4] = 0;
    memset(v308, 0, sizeof(v308));
    v299 = 0;
    v303 = 0;
    v307 = 0;
    v295 = 0;
    v291 = 0;
    v287 = 0;
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v92 = &qword_1D048FFE0;
    goto LABEL_612;
  }
LABEL_737:
  v70 = __sb__runningInSpringBoard();
  if ((_DWORD)v70)
  {
    if (SBFEffectiveDeviceClass() != 2)
      goto LABEL_739;
LABEL_745:
    memset(v308, 0, sizeof(v308));
    v299 = 0;
    v303 = 0;
    v307 = 0;
    v295 = 0;
    v291 = 0;
    v287 = 0;
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v92 = &qword_1D048FFD0;
    *(_DWORD *)&v309[4] = v70 ^ 1;
    goto LABEL_612;
  }
  objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
  v276 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v276, "userInterfaceIdiom") == 1)
    goto LABEL_745;
LABEL_739:
  *(_DWORD *)&v309[4] = v70 ^ 1;
  if (!_SBF_Private_IsD94Like())
  {
LABEL_743:
    *(_QWORD *)&v308[88] = 0;
    goto LABEL_916;
  }
  v110 = __sb__runningInSpringBoard();
  if (v110)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
      goto LABEL_743;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v269 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v269, "userInterfaceIdiom"))
    {
      *(_QWORD *)&v308[88] = 0x100000000;
      goto LABEL_916;
    }
  }
  *(_DWORD *)&v308[92] = v110 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v70 = __sb__runningInSpringBoard();
    if ((_DWORD)v70)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v262 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v262, "_referenceBounds");
    }
    *(_DWORD *)&v308[88] = v70 ^ 1;
    BSSizeRoundForScale();
    if (v133 >= *(double *)(MEMORY[0x1E0DAB260] + 200))
    {
      *(_DWORD *)&v308[96] = 0;
      memset(v308, 0, 88);
      v299 = 0;
      v303 = 0;
      v307 = 0;
      v295 = 0;
      v291 = 0;
      v287 = 0;
      v86 = 0;
      v87 = 0;
      v88 = 0;
      v89 = 0;
      v90 = 0;
      v91 = 0;
      v92 = &qword_1D048FFB0;
      goto LABEL_612;
    }
  }
  else
  {
    *(_DWORD *)&v308[88] = 0;
  }
LABEL_916:
  v70 = __sb__runningInSpringBoard();
  if ((_DWORD)v70)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      *(_DWORD *)&v308[96] = 0;
      *(_DWORD *)&v308[84] = 0;
      goto LABEL_926;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v270 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v270, "userInterfaceIdiom"))
    {
      *(_DWORD *)&v308[84] = 0;
      *(_DWORD *)&v308[96] = 1;
      goto LABEL_926;
    }
  }
  *(_DWORD *)&v308[96] = v70 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v70 = __sb__runningInSpringBoard();
    if ((_DWORD)v70)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v265 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v265, "_referenceBounds");
    }
    *(_DWORD *)&v308[84] = v70 ^ 1;
    BSSizeRoundForScale();
    if (v125 >= *(double *)(MEMORY[0x1E0DAB260] + 200))
      goto LABEL_930;
  }
  else
  {
    *(_DWORD *)&v308[84] = 0;
  }
LABEL_926:
  if ((_SBF_Private_IsD94Like() & 1) != 0)
  {
    memset(v308, 0, 84);
    v299 = 0;
    v303 = 0;
    v307 = 0;
    v295 = 0;
    v291 = 0;
    v287 = 0;
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v92 = &qword_1D048FFB8;
    goto LABEL_612;
  }
LABEL_930:
  if (!_SBF_Private_IsD64Like())
  {
LABEL_934:
    *(_QWORD *)&v308[76] = 0;
    goto LABEL_1039;
  }
  v126 = __sb__runningInSpringBoard();
  if (v126)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
      goto LABEL_934;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v266 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v266, "userInterfaceIdiom"))
    {
      *(_DWORD *)&v308[76] = 0;
      *(_DWORD *)&v308[80] = 1;
      goto LABEL_1039;
    }
  }
  *(_DWORD *)&v308[80] = v126 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v70 = __sb__runningInSpringBoard();
    if ((_DWORD)v70)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v257 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v257, "_referenceBounds");
    }
    *(_DWORD *)&v308[76] = v70 ^ 1;
    BSSizeRoundForScale();
    if (v149 >= *(double *)(MEMORY[0x1E0DAB260] + 136))
    {
      memset(v308, 0, 76);
      v299 = 0;
      v303 = 0;
      v307 = 0;
      v295 = 0;
      v291 = 0;
      v287 = 0;
      v86 = 0;
      v87 = 0;
      v88 = 0;
      v89 = 0;
      v90 = 0;
      v91 = 0;
      v92 = &qword_1D048FFC0;
      goto LABEL_612;
    }
  }
  else
  {
    *(_DWORD *)&v308[76] = 0;
  }
LABEL_1039:
  v70 = __sb__runningInSpringBoard();
  if ((_DWORD)v70)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      *(_DWORD *)&v308[72] = 0;
      *(_DWORD *)&v308[56] = 0;
      goto LABEL_1049;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v268 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v268, "userInterfaceIdiom"))
    {
      *(_DWORD *)&v308[56] = 0;
      *(_DWORD *)&v308[72] = 1;
      goto LABEL_1049;
    }
  }
  *(_DWORD *)&v308[72] = v70 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v70 = __sb__runningInSpringBoard();
    if ((_DWORD)v70)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v261 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v261, "_referenceBounds");
    }
    *(_DWORD *)&v308[56] = v70 ^ 1;
    BSSizeRoundForScale();
    if (v139 >= *(double *)(MEMORY[0x1E0DAB260] + 136))
      goto LABEL_1053;
  }
  else
  {
    *(_DWORD *)&v308[56] = 0;
  }
LABEL_1049:
  if ((_SBF_Private_IsD64Like() & 1) != 0)
  {
    *(_QWORD *)&v308[64] = 0;
    *(_DWORD *)&v308[60] = 0;
    memset(v308, 0, 56);
    v299 = 0;
    v303 = 0;
    v307 = 0;
    v295 = 0;
    v291 = 0;
    v287 = 0;
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v92 = &qword_1D048FFC8;
    goto LABEL_612;
  }
LABEL_1053:
  v140 = __sb__runningInSpringBoard();
  if (v140)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      *(_DWORD *)&v308[68] = 0;
      *(_DWORD *)&v308[52] = 0;
      goto LABEL_1063;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v267 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v267, "userInterfaceIdiom"))
    {
      *(_DWORD *)&v308[52] = 0;
      *(_DWORD *)&v308[68] = 1;
      goto LABEL_1063;
    }
  }
  *(_DWORD *)&v308[68] = v140 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v141 = __sb__runningInSpringBoard();
    if (v141)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v258 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v258, "_referenceBounds");
    }
    v70 = v141 ^ 1u;
    BSSizeRoundForScale();
    *(_DWORD *)&v308[52] = v70;
    if (v146 >= *(double *)(MEMORY[0x1E0DAB260] + 136))
    {
      *(_QWORD *)&v308[60] = 0;
      memset(v308, 0, 52);
      v299 = 0;
      v303 = 0;
      v307 = 0;
      v295 = 0;
      v291 = 0;
      v287 = 0;
      v86 = 0;
      v87 = 0;
      v88 = 0;
      v89 = 0;
      v90 = 0;
      v91 = 0;
      v92 = &qword_1D048FFA0;
      goto LABEL_612;
    }
  }
  else
  {
    *(_DWORD *)&v308[52] = 0;
  }
LABEL_1063:
  v70 = __sb__runningInSpringBoard();
  if ((_DWORD)v70)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      *(_DWORD *)&v308[44] = 0;
      *(_DWORD *)&v308[24] = 0;
      goto LABEL_1090;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v264 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v264, "userInterfaceIdiom"))
    {
      *(_DWORD *)&v308[24] = 0;
      *(_DWORD *)&v308[44] = 1;
      goto LABEL_1090;
    }
  }
  *(_DWORD *)&v308[44] = v70 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v70 = __sb__runningInSpringBoard();
    if ((_DWORD)v70)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v256 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v256, "_referenceBounds");
    }
    *(_DWORD *)&v308[24] = v70 ^ 1;
    BSSizeRoundForScale();
    if (v154 >= *(double *)(MEMORY[0x1E0DAB260] + 136))
      goto LABEL_1136;
  }
  else
  {
    *(_DWORD *)&v308[24] = 0;
  }
LABEL_1090:
  if ((_SBF_Private_IsD54() & 1) != 0)
  {
    *(_QWORD *)&v308[60] = 0;
    *(_DWORD *)&v308[48] = 0;
    *(_OWORD *)&v308[28] = 0uLL;
    memset(v308, 0, 24);
    v299 = 0;
    v303 = 0;
    v307 = 0;
    v295 = 0;
    v291 = 0;
    v287 = 0;
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v92 = &qword_1D048FFA8;
    goto LABEL_612;
  }
LABEL_1136:
  v155 = __sb__runningInSpringBoard();
  if (v155)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      *(_QWORD *)&v308[60] = 0;
      goto LABEL_1156;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v263 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v263, "userInterfaceIdiom"))
    {
      *(_DWORD *)&v308[60] = 0;
      *(_DWORD *)&v308[64] = 1;
      goto LABEL_1156;
    }
  }
  *(_DWORD *)&v308[64] = v155 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v70 = __sb__runningInSpringBoard();
    if ((_DWORD)v70)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v253 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v253, "_referenceBounds");
    }
    *(_DWORD *)&v308[60] = v70 ^ 1;
    BSSizeRoundForScale();
    if (v161 >= *(double *)(MEMORY[0x1E0DAB260] + 120) && (_SBF_Private_IsN84OrSimilarDevice() & 1) != 0)
    {
      *(_DWORD *)&v308[48] = 0;
      *(_OWORD *)&v308[28] = 0uLL;
      memset(v308, 0, 24);
      v299 = 0;
      v303 = 0;
      v307 = 0;
      v295 = 0;
      v291 = 0;
      v287 = 0;
      v86 = 0;
      v87 = 0;
      v88 = 0;
      v89 = 0;
      v90 = 0;
      v91 = 0;
      v92 = &qword_1D048FF70;
      goto LABEL_612;
    }
  }
  else
  {
    *(_DWORD *)&v308[60] = 0;
  }
LABEL_1156:
  v70 = __sb__runningInSpringBoard();
  if ((_DWORD)v70)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      *(_DWORD *)&v308[40] = 0;
      *(_DWORD *)&v308[48] = 0;
      goto LABEL_1198;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v260 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v260, "userInterfaceIdiom"))
    {
      *(_DWORD *)&v308[48] = 0;
      *(_DWORD *)&v308[40] = 1;
      goto LABEL_1198;
    }
  }
  *(_DWORD *)&v308[40] = v70 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v70 = __sb__runningInSpringBoard();
    if ((_DWORD)v70)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v252 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v252, "_referenceBounds");
    }
    *(_DWORD *)&v308[48] = v70 ^ 1;
    BSSizeRoundForScale();
    if (v165 >= *(double *)(MEMORY[0x1E0DAB260] + 120))
      goto LABEL_1248;
  }
  else
  {
    *(_DWORD *)&v308[48] = 0;
  }
LABEL_1198:
  if (_SBF_Private_IsD33OrSimilarDevice() && (_SBF_Private_IsN84ZoomedOrSimilarDevice() & 1) != 0)
  {
    *(_QWORD *)&v308[32] = 0;
    *(_DWORD *)&v308[28] = 0;
    memset(v308, 0, 24);
    v299 = 0;
    v303 = 0;
    v307 = 0;
    v295 = 0;
    v291 = 0;
    v287 = 0;
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v92 = &qword_1D048FF78;
    goto LABEL_612;
  }
LABEL_1248:
  if (!_SBF_Private_IsD93Like())
  {
LABEL_1252:
    *(_DWORD *)&v308[36] = 0;
    *(_DWORD *)&v308[20] = 0;
    goto LABEL_1364;
  }
  v166 = __sb__runningInSpringBoard();
  if (v166)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
      goto LABEL_1252;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v255 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v255, "userInterfaceIdiom"))
    {
      *(_DWORD *)&v308[20] = 0;
      *(_DWORD *)&v308[36] = 1;
      goto LABEL_1364;
    }
  }
  *(_DWORD *)&v308[36] = v166 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v70 = __sb__runningInSpringBoard();
    if ((_DWORD)v70)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v246 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v246, "_referenceBounds");
    }
    *(_DWORD *)&v308[20] = v70 ^ 1;
    BSSizeRoundForScale();
    if (v183 >= *(double *)(MEMORY[0x1E0DAB260] + 184))
    {
      *(_QWORD *)&v308[28] = 0;
      memset(v308, 0, 20);
      v299 = 0;
      v303 = 0;
      v307 = 0;
      v295 = 0;
      v291 = 0;
      v287 = 0;
      v86 = 0;
      v87 = 0;
      v88 = 0;
      v89 = 0;
      v90 = 0;
      v91 = 0;
      v92 = &qword_1D048FF60;
      goto LABEL_612;
    }
  }
  else
  {
    *(_DWORD *)&v308[20] = 0;
  }
LABEL_1364:
  v70 = __sb__runningInSpringBoard();
  if ((_DWORD)v70)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      *(_QWORD *)&v308[28] = 0;
      goto LABEL_1374;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v259 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v259, "userInterfaceIdiom"))
    {
      *(_DWORD *)&v308[28] = 0;
      *(_DWORD *)&v308[32] = 1;
      goto LABEL_1374;
    }
  }
  *(_DWORD *)&v308[32] = v70 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v70 = __sb__runningInSpringBoard();
    if ((_DWORD)v70)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v249 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v249, "_referenceBounds");
    }
    *(_DWORD *)&v308[28] = v70 ^ 1;
    BSSizeRoundForScale();
    if (v175 >= *(double *)(MEMORY[0x1E0DAB260] + 184))
      goto LABEL_1378;
  }
  else
  {
    *(_DWORD *)&v308[28] = 0;
  }
LABEL_1374:
  if ((_SBF_Private_IsD93Like() & 1) != 0)
  {
    memset(v308, 0, 20);
    v299 = 0;
    v303 = 0;
    v307 = 0;
    v295 = 0;
    v291 = 0;
    v287 = 0;
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v92 = &qword_1D048FF68;
    goto LABEL_612;
  }
LABEL_1378:
  if (!_SBF_Private_IsD63Like())
  {
LABEL_1382:
    *(_QWORD *)&v308[8] = 0;
    goto LABEL_1486;
  }
  v176 = __sb__runningInSpringBoard();
  if (v176)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
      goto LABEL_1382;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v250 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v250, "userInterfaceIdiom"))
    {
      *(_QWORD *)&v308[8] = 0x100000000;
      goto LABEL_1486;
    }
  }
  *(_DWORD *)&v308[12] = v176 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v70 = __sb__runningInSpringBoard();
    if ((_DWORD)v70)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v242 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v242, "_referenceBounds");
    }
    *(_DWORD *)&v308[8] = v70 ^ 1;
    BSSizeRoundForScale();
    if (v196 >= *(double *)(MEMORY[0x1E0DAB260] + 104))
    {
      *(_DWORD *)&v308[16] = 0;
      *(_QWORD *)v308 = 0;
      v299 = 0;
      v303 = 0;
      v307 = 0;
      v295 = 0;
      v291 = 0;
      v287 = 0;
      v86 = 0;
      v87 = 0;
      v88 = 0;
      v89 = 0;
      v90 = 0;
      v91 = 0;
      v92 = &qword_1D048FF90;
      goto LABEL_612;
    }
  }
  else
  {
    *(_DWORD *)&v308[8] = 0;
  }
LABEL_1486:
  v70 = __sb__runningInSpringBoard();
  if ((_DWORD)v70)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      *(_DWORD *)&v308[16] = 0;
      *(_DWORD *)&v308[4] = 0;
      goto LABEL_1496;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v254 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v254, "userInterfaceIdiom"))
    {
      *(_DWORD *)&v308[4] = 0;
      *(_DWORD *)&v308[16] = 1;
      goto LABEL_1496;
    }
  }
  *(_DWORD *)&v308[16] = v70 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v70 = __sb__runningInSpringBoard();
    if ((_DWORD)v70)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v245 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v245, "_referenceBounds");
    }
    *(_DWORD *)&v308[4] = v70 ^ 1;
    BSSizeRoundForScale();
    if (v188 >= *(double *)(MEMORY[0x1E0DAB260] + 104))
      goto LABEL_1500;
  }
  else
  {
    *(_DWORD *)&v308[4] = 0;
  }
LABEL_1496:
  if ((_SBF_Private_IsD63Like() & 1) != 0)
  {
    *(_DWORD *)v308 = 0;
    v299 = 0;
    v303 = 0;
    v307 = 0;
    v295 = 0;
    v291 = 0;
    v287 = 0;
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v92 = &qword_1D048FF98;
    goto LABEL_612;
  }
LABEL_1500:
  v189 = __sb__runningInSpringBoard();
  if (v189)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      *(_DWORD *)v308 = 0;
      HIDWORD(v299) = 0;
      goto LABEL_1510;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v251 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v251, "userInterfaceIdiom"))
    {
      HIDWORD(v299) = 0;
      *(_DWORD *)v308 = 1;
      goto LABEL_1510;
    }
  }
  *(_DWORD *)v308 = v189 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v70 = __sb__runningInSpringBoard();
    if ((_DWORD)v70)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v243 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v243, "_referenceBounds");
    }
    HIDWORD(v299) = v70 ^ 1;
    BSSizeRoundForScale();
    if (v193 >= *(double *)(MEMORY[0x1E0DAB260] + 120))
    {
      v303 = 0;
      v307 = 0;
      LODWORD(v299) = 0;
      v295 = 0;
      v291 = 0;
      v287 = 0;
      v86 = 0;
      v87 = 0;
      v88 = 0;
      v89 = 0;
      v90 = 0;
      v91 = 0;
      v92 = &qword_1D048FF80;
      goto LABEL_612;
    }
  }
  else
  {
    HIDWORD(v299) = 0;
  }
LABEL_1510:
  v70 = __sb__runningInSpringBoard();
  if ((_DWORD)v70)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      v307 = 0;
      goto LABEL_1529;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v248 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v248, "userInterfaceIdiom"))
    {
      v307 = 0x100000000;
      goto LABEL_1529;
    }
  }
  HIDWORD(v307) = v70 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v70 = __sb__runningInSpringBoard();
    if ((_DWORD)v70)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v241 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v241, "_referenceBounds");
    }
    LODWORD(v307) = v70 ^ 1;
    BSSizeRoundForScale();
    if (v199 >= *(double *)(MEMORY[0x1E0DAB260] + 120))
      goto LABEL_1573;
  }
  else
  {
    LODWORD(v307) = 0;
  }
LABEL_1529:
  if ((_SBF_Private_IsD33OrSimilarDevice() & 1) != 0)
  {
    v303 = 0;
    LODWORD(v299) = 0;
    v295 = 0;
    v291 = 0;
    v287 = 0;
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v92 = &qword_1D048FF88;
    goto LABEL_612;
  }
LABEL_1573:
  v200 = __sb__runningInSpringBoard();
  if (v200)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      v303 = 0;
      goto LABEL_1603;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v247 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v247, "userInterfaceIdiom"))
    {
      v303 = 0x100000000;
      goto LABEL_1603;
    }
  }
  HIDWORD(v303) = v200 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v70 = __sb__runningInSpringBoard();
    if ((_DWORD)v70)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v240 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v240, "_referenceBounds");
    }
    LODWORD(v303) = v70 ^ 1;
    BSSizeRoundForScale();
    if (v205 >= *(double *)(MEMORY[0x1E0DAB260] + 104))
    {
      LODWORD(v299) = 0;
      v295 = 0;
      v291 = 0;
      v287 = 0;
      v86 = 0;
      v87 = 0;
      v88 = 0;
      v89 = 0;
      v90 = 0;
      v91 = 0;
      v92 = &qword_1D048FF50;
      goto LABEL_612;
    }
  }
  else
  {
    LODWORD(v303) = 0;
  }
LABEL_1603:
  v70 = __sb__runningInSpringBoard();
  if ((_DWORD)v70)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      LODWORD(v299) = 0;
      v295 = 0;
      goto LABEL_1623;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v244 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v244, "userInterfaceIdiom"))
    {
      v295 = 0;
      LODWORD(v299) = 1;
      goto LABEL_1623;
    }
  }
  LODWORD(v299) = v70 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v70 = __sb__runningInSpringBoard();
    if ((_DWORD)v70)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v239 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v239, "_referenceBounds");
    }
    v295 = v70 ^ 1;
    BSSizeRoundForScale();
    if (v207 >= *(double *)(MEMORY[0x1E0DAB260] + 104))
      goto LABEL_1647;
  }
  else
  {
    v295 = 0;
  }
LABEL_1623:
  if ((_SBF_Private_IsD53() & 1) != 0)
  {
    v291 = 0;
    v287 = 0;
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v92 = &qword_1D048FF58;
    goto LABEL_612;
  }
LABEL_1647:
  if (_SBF_Private_IsD16() && (_SBF_Private_IsD52OrSimilarDevice() & 1) != 0)
  {
    v291 = 0;
    v287 = 0;
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v92 = &qword_1D048FF30;
    goto LABEL_612;
  }
  if (_SBF_Private_IsD52ZoomedOrSimilarDevice() && (_SBF_Private_IsD16() & 1) != 0)
  {
    v291 = 0;
    v287 = 0;
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v92 = &qword_1D048FF38;
    goto LABEL_612;
  }
  if ((_SBF_Private_IsD52OrSimilarDevice() & 1) != 0)
  {
    v291 = 0;
    v287 = 0;
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v92 = &qword_1D048FF20;
    goto LABEL_612;
  }
  if ((_SBF_Private_IsD52ZoomedOrSimilarDevice() & 1) != 0)
  {
    v291 = 0;
    v287 = 0;
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v92 = &qword_1D048FF28;
    goto LABEL_612;
  }
  v209 = __sb__runningInSpringBoard();
  if (v209)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      v291 = 0;
      v287 = 0;
      goto LABEL_1769;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v238 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v238, "userInterfaceIdiom"))
    {
      v287 = 0;
      v291 = 1;
      goto LABEL_1769;
    }
  }
  v291 = v209 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v70 = __sb__runningInSpringBoard();
    if ((_DWORD)v70)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v236 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v236, "_referenceBounds");
    }
    v287 = v70 ^ 1;
    BSSizeRoundForScale();
    if (v229 >= *(double *)(MEMORY[0x1E0DAB260] + 88))
    {
      v86 = 0;
      v87 = 0;
      v88 = 0;
      v89 = 0;
      v90 = 0;
      v91 = 0;
      v92 = &qword_1D048FF40;
      goto LABEL_612;
    }
  }
  else
  {
    v287 = 0;
  }
LABEL_1769:
  v223 = __sb__runningInSpringBoard();
  if (v223)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      v86 = 0;
      v87 = 0;
      goto LABEL_1789;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v237 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v237, "userInterfaceIdiom"))
    {
      v87 = 0;
      v86 = 1;
      goto LABEL_1789;
    }
  }
  v86 = v223 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v70 = __sb__runningInSpringBoard();
    if ((_DWORD)v70)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v235 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v235, "_referenceBounds");
    }
    v87 = v70 ^ 1;
    BSSizeRoundForScale();
    if (v231 >= *(double *)(MEMORY[0x1E0DAB260] + 72))
    {
      v88 = 0;
      v89 = 0;
      v90 = 0;
      v91 = 0;
      v92 = &qword_1D048FF48;
      goto LABEL_612;
    }
  }
  else
  {
    v87 = 0;
  }
LABEL_1789:
  v225 = __sb__runningInSpringBoard();
  if (v225)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      v88 = 0;
      v89 = 0;
      goto LABEL_1810;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v2, "userInterfaceIdiom"))
    {
      v89 = 0;
      v88 = 1;
      goto LABEL_1810;
    }
  }
  v88 = v225 ^ 1;
  v70 = __sb__runningInSpringBoard();
  if ((_DWORD)v70)
  {
    __sb__mainScreenReferenceBounds();
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "_referenceBounds");
  }
  v89 = v70 ^ 1;
  BSSizeRoundForScale();
  if (v227 >= *(double *)(MEMORY[0x1E0DAB260] + 56))
  {
    v90 = 0;
    v91 = 0;
    v92 = &qword_1D048FF18;
    goto LABEL_612;
  }
LABEL_1810:
  v70 = __sb__runningInSpringBoard();
  if ((_DWORD)v70)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      v90 = 0;
      v91 = 0;
LABEL_1837:
      v92 = &CSTimeLabelLandscapeBaselineY;
      goto LABEL_612;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v17 = (uint64_t *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v17, "userInterfaceIdiom"))
    {
      v91 = 0;
      v90 = 1;
      goto LABEL_1837;
    }
  }
  v90 = v70 ^ 1;
  v233 = __sb__runningInSpringBoard();
  if (v233)
  {
    __sb__mainScreenReferenceBounds();
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
    v70 = objc_claimAutoreleasedReturnValue();
    objc_msgSend((id)v70, "_referenceBounds");
  }
  v91 = v233 ^ 1;
  BSSizeRoundForScale();
  if (v234 < *(double *)(MEMORY[0x1E0DAB260] + 40))
    goto LABEL_1837;
  v92 = &qword_1D048FF10;
LABEL_612:
  v106 = *(double *)v92;
  if (v91)

  if (v90)
  if (v89)
  {

    if (!v88)
      goto LABEL_618;
  }
  else if (!v88)
  {
LABEL_618:
    if (v87)
      goto LABEL_619;
    goto LABEL_623;
  }

  if (v87)
  {
LABEL_619:

    if (!v86)
      goto LABEL_625;
    goto LABEL_624;
  }
LABEL_623:
  if (v86)
LABEL_624:

LABEL_625:
  if (v287)

  if (v291)
  if (v295)

  if ((_DWORD)v299)
  if ((_DWORD)v303)

  if (HIDWORD(v303))
  if ((_DWORD)v307)

  if (HIDWORD(v307))
  if (HIDWORD(v299))

  if (*(_DWORD *)v308)
  if (*(_DWORD *)&v308[4])

  if (*(_DWORD *)&v308[16])
  if (*(_DWORD *)&v308[8])

  if (*(_DWORD *)&v308[12])
  if (*(_DWORD *)&v308[28])

  if (*(_DWORD *)&v308[32])
  if (*(_DWORD *)&v308[20])

  if (*(_DWORD *)&v308[36])
  if (*(_DWORD *)&v308[48])

  if (*(_DWORD *)&v308[40])
  if (*(_DWORD *)&v308[60])

  if (*(_DWORD *)&v308[64])
  if (*(_DWORD *)&v308[24])

  if (*(_DWORD *)&v308[44])
  if (*(_DWORD *)&v308[52])

  if (*(_DWORD *)&v308[68])
  if (*(_DWORD *)&v308[56])

  if (*(_DWORD *)&v308[72])
  if (*(_DWORD *)&v308[76])

  if (*(_DWORD *)&v308[80])
  if (*(_DWORD *)&v308[84])

  if (*(_DWORD *)&v308[96])
  if (*(_DWORD *)&v308[88])

  if (*(_DWORD *)&v308[92])
  if (*(_DWORD *)&v309[4])

  if (*(_DWORD *)&v309[8])
  if (*(_DWORD *)&v309[12])

  if (*(_DWORD *)&v309[20])
  if (*(_DWORD *)&v309[24])

  if (*(_DWORD *)&v309[28])
  if (*(_DWORD *)&v309[32])

  if (*(_DWORD *)&v309[36])
  if (*(_DWORD *)&v309[40])

  if (*(_DWORD *)v309)
  if (*(_DWORD *)&v309[16])

  if ((_DWORD)v310)
  if (HIDWORD(v310))

  return v106;
}

- (double)windowedAccessoryInset
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  double v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t *v24;
  double v25;
  int v26;
  double v27;
  double v28;
  double v30;
  double v31;
  double v32;
  double v34;
  int v35;
  double v36;
  int v37;
  double v38;
  double v39;
  int v40;
  int v41;
  double v42;
  double v43;
  double v44;
  int v45;
  int v46;
  double v47;
  double v48;
  int v49;
  int v50;
  int v51;
  int v52;
  double v53;
  int v54;
  double v55;
  double v56;
  int v57;
  int v58;
  double v59;
  double v60;
  double v61;
  int v62;
  int v63;
  int v64;
  double v65;
  double v66;
  int v67;
  double v68;
  double v69;
  double v70;
  int v71;
  double v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  _BYTE v132[12];
  _BYTE v133[40];
  _BYTE v134[12];
  __int128 v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;

  v3 = __sb__runningInSpringBoard();
  v4 = (uint64_t)&CSWindowedAccessoryInset;
  if (v3)
  {
    if (SBFEffectiveDeviceClass() != 2)
    {
      v5 = 0;
      v6 = 0;
      goto LABEL_10;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v120 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v120, "userInterfaceIdiom") != 1)
    {
      v5 = 0;
      v6 = 1;
      goto LABEL_10;
    }
  }
  v6 = v3 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v7 = __sb__runningInSpringBoard();
    if ((_DWORD)v7)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v121 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v121, "_referenceBounds");
    }
    v5 = v7 ^ 1;
    BSSizeRoundForScale();
    if (v28 == *(double *)(MEMORY[0x1E0DAB260] + 272) && v27 == *(double *)(MEMORY[0x1E0DAB260] + 280))
    {
      v143 = v7 ^ 1;
      v144 = v6;
      memset(v133, 0, sizeof(v133));
      memset(v132, 0, sizeof(v132));
      memset(v134, 0, sizeof(v134));
      v135 = 0uLL;
      v130 = 0;
      v131 = 0;
      v127 = 0;
      v128 = 0;
      v142 = 0;
      v129 = 0;
      v136 = 0;
      v126 = 0;
      v137 = 0;
      v138 = 0;
      v124 = 0;
      v125 = 0;
      v139 = 0;
      v123 = 0;
      v140 = 0;
      v122 = 0;
      v18 = 0;
      v19 = 0;
      v141 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = &qword_1D04902D8;
      goto LABEL_67;
    }
  }
  else
  {
    v5 = 0;
  }
LABEL_10:
  v8 = __sb__runningInSpringBoard();
  v143 = v5;
  v144 = v6;
  if (v8)
  {
    if (SBFEffectiveDeviceClass() != 2)
    {
      v9 = 0;
      v10 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v119 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v119, "userInterfaceIdiom") != 1)
    {
      v9 = 0;
      v10 = 1;
      goto LABEL_19;
    }
  }
  v10 = v8 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v7 = __sb__runningInSpringBoard();
    if ((_DWORD)v7)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v111 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v111, "_referenceBounds");
    }
    v9 = v7 ^ 1;
    BSSizeRoundForScale();
    if (v30 >= *(double *)(MEMORY[0x1E0DAB260] + 424))
    {
      v140 = v7 ^ 1;
      v141 = v10;
      memset(v133, 0, sizeof(v133));
      memset(v132, 0, sizeof(v132));
      memset(v134, 0, sizeof(v134));
      v135 = 0uLL;
      v130 = 0;
      v131 = 0;
      v127 = 0;
      v128 = 0;
      v142 = 0;
      v129 = 0;
      v136 = 0;
      v126 = 0;
      v137 = 0;
      v138 = 0;
      v124 = 0;
      v125 = 0;
      v139 = 0;
      v123 = 0;
      v122 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = &qword_1D0490300;
      goto LABEL_67;
    }
  }
  else
  {
    v9 = 0;
  }
LABEL_19:
  v11 = __sb__runningInSpringBoard();
  v140 = v9;
  v141 = v10;
  if (v11)
  {
    if (SBFEffectiveDeviceClass() != 2)
    {
      v12 = 0;
      v13 = 0;
      goto LABEL_28;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v118 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v118, "userInterfaceIdiom") != 1)
    {
      v12 = 0;
      v13 = 1;
      goto LABEL_28;
    }
  }
  v13 = v11 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v7 = __sb__runningInSpringBoard();
    if ((_DWORD)v7)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v110 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v110, "_referenceBounds");
    }
    v12 = v7 ^ 1;
    BSSizeRoundForScale();
    if (v31 >= *(double *)(MEMORY[0x1E0DAB260] + 360))
    {
      v138 = v7 ^ 1;
      v139 = v13;
      memset(v133, 0, sizeof(v133));
      memset(v132, 0, sizeof(v132));
      memset(v134, 0, sizeof(v134));
      v135 = 0uLL;
      v130 = 0;
      v131 = 0;
      v127 = 0;
      v128 = 0;
      v142 = 0;
      v129 = 0;
      v136 = 0;
      v126 = 0;
      v137 = 0;
      v125 = 0;
      v124 = 0;
      v123 = 0;
      v122 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = &qword_1D04902F0;
      goto LABEL_67;
    }
  }
  else
  {
    v12 = 0;
  }
LABEL_28:
  v14 = __sb__runningInSpringBoard();
  v138 = v12;
  v139 = v13;
  if (v14)
  {
    if (SBFEffectiveDeviceClass() != 2)
    {
      v15 = 0;
      v2 = 0;
      goto LABEL_37;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v117 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v117, "userInterfaceIdiom") != 1)
    {
      v15 = 0;
      v2 = 1;
      goto LABEL_37;
    }
  }
  v2 = v14 ^ 1u;
  v7 = __sb__runningInSpringBoard();
  if ((_DWORD)v7)
  {
    __sb__mainScreenReferenceBounds();
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
    v114 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v114, "_referenceBounds");
  }
  v15 = v7 ^ 1;
  BSSizeRoundForScale();
  if (v16 >= *(double *)(MEMORY[0x1E0DAB260] + 264))
  {
    v136 = v7 ^ 1;
    v137 = v2;
    memset(v133, 0, sizeof(v133));
    memset(v132, 0, sizeof(v132));
    memset(v134, 0, sizeof(v134));
    v135 = 0uLL;
    v130 = 0;
    v131 = 0;
    v127 = 0;
    v128 = 0;
    v142 = 0;
    v129 = 0;
    v124 = 0;
    v125 = 0;
    v126 = 0;
    v123 = 0;
    v122 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = &qword_1D04902F8;
    goto LABEL_67;
  }
LABEL_37:
  v17 = __sb__runningInSpringBoard();
  v136 = v15;
  v137 = v2;
  if (v17)
  {
    if (SBFEffectiveDeviceClass() != 2)
    {
      v142 = 0;
      v4 = 0;
      goto LABEL_47;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v116 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v116, "userInterfaceIdiom") != 1)
    {
      v142 = 0;
      v4 = 1;
      goto LABEL_47;
    }
  }
  v4 = v17 ^ 1u;
  v7 = __sb__runningInSpringBoard();
  if ((_DWORD)v7)
  {
    __sb__mainScreenReferenceBounds();
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
    v112 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v112, "_referenceBounds");
  }
  v142 = v7 ^ 1;
  BSSizeRoundForScale();
  if (v25 >= *(double *)(MEMORY[0x1E0DAB260] + 248))
  {
    DWORD2(v135) = 0;
    HIDWORD(v135) = v4;
    memset(v133, 0, sizeof(v133));
    memset(v132, 0, sizeof(v132));
    memset(v134, 0, sizeof(v134));
    *(_QWORD *)&v135 = 0;
    v130 = 0;
    v131 = 0;
    v127 = 0;
    v128 = 0;
    v129 = 0;
    v124 = 0;
    v125 = 0;
    v126 = 0;
    v123 = 0;
    v122 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = &qword_1D04902E8;
    goto LABEL_67;
  }
LABEL_47:
  v26 = __sb__runningInSpringBoard();
  HIDWORD(v135) = v4;
  if (v26)
  {
    if (SBFEffectiveDeviceClass() != 2)
    {
      *(_QWORD *)((char *)&v135 + 4) = 0;
      goto LABEL_178;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v115 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v115, "userInterfaceIdiom") != 1)
    {
      *(_QWORD *)((char *)&v135 + 4) = 0x100000000;
      goto LABEL_178;
    }
  }
  DWORD2(v135) = v26 ^ 1;
  v7 = __sb__runningInSpringBoard();
  if ((_DWORD)v7)
  {
    __sb__mainScreenReferenceBounds();
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
    v109 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v109, "_referenceBounds");
  }
  DWORD1(v135) = v7 ^ 1;
  BSSizeRoundForScale();
  if (v34 >= *(double *)(MEMORY[0x1E0DAB260] + 232))
  {
    memset(v133, 0, sizeof(v133));
    memset(v132, 0, sizeof(v132));
    memset(v134, 0, sizeof(v134));
    LODWORD(v135) = 0;
    v130 = 0;
    v131 = 0;
    v127 = 0;
    v128 = 0;
    v129 = 0;
    v124 = 0;
    v125 = 0;
    v126 = 0;
    v123 = 0;
    v122 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = &qword_1D04902E0;
    goto LABEL_67;
  }
LABEL_178:
  v7 = __sb__runningInSpringBoard();
  if ((_DWORD)v7)
  {
    if (SBFEffectiveDeviceClass() != 2)
      goto LABEL_180;
LABEL_186:
    memset(v133, 0, sizeof(v133));
    memset(v132, 0, sizeof(v132));
    memset(v134, 0, sizeof(v134));
    v130 = 0;
    v131 = 0;
    v127 = 0;
    v128 = 0;
    v129 = 0;
    v124 = 0;
    v125 = 0;
    v126 = 0;
    v123 = 0;
    v122 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = &qword_1D04902D0;
    LODWORD(v135) = v7 ^ 1;
    goto LABEL_67;
  }
  objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
  v113 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v113, "userInterfaceIdiom") == 1)
    goto LABEL_186;
LABEL_180:
  LODWORD(v135) = v7 ^ 1;
  if (!_SBF_Private_IsD94Like())
  {
LABEL_184:
    *(_QWORD *)v134 = 0;
    goto LABEL_194;
  }
  v35 = __sb__runningInSpringBoard();
  if (v35)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
      goto LABEL_184;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v107 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v107, "userInterfaceIdiom"))
    {
      *(_QWORD *)v134 = 1;
      goto LABEL_194;
    }
  }
  *(_DWORD *)v134 = v35 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v7 = __sb__runningInSpringBoard();
    if ((_DWORD)v7)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v100 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v100, "_referenceBounds");
    }
    *(_DWORD *)&v134[4] = v7 ^ 1;
    BSSizeRoundForScale();
    if (v38 >= *(double *)(MEMORY[0x1E0DAB260] + 200))
    {
      memset(v133, 0, sizeof(v133));
      *(_DWORD *)&v134[8] = 0;
      memset(v132, 0, sizeof(v132));
      v130 = 0;
      v131 = 0;
      v127 = 0;
      v128 = 0;
      v129 = 0;
      v124 = 0;
      v125 = 0;
      v126 = 0;
      v123 = 0;
      v122 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = &qword_1D04902B0;
      goto LABEL_67;
    }
  }
  else
  {
    *(_DWORD *)&v134[4] = 0;
  }
LABEL_194:
  v7 = __sb__runningInSpringBoard();
  if ((_DWORD)v7)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      *(_DWORD *)&v133[36] = 0;
      *(_DWORD *)&v134[8] = 0;
      goto LABEL_204;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v108 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v108, "userInterfaceIdiom"))
    {
      *(_DWORD *)&v133[36] = 0;
      *(_DWORD *)&v134[8] = 1;
      goto LABEL_204;
    }
  }
  *(_DWORD *)&v134[8] = v7 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v7 = __sb__runningInSpringBoard();
    if ((_DWORD)v7)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v103 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v103, "_referenceBounds");
    }
    *(_DWORD *)&v133[36] = v7 ^ 1;
    BSSizeRoundForScale();
    if (v36 >= *(double *)(MEMORY[0x1E0DAB260] + 200))
      goto LABEL_208;
  }
  else
  {
    *(_DWORD *)&v133[36] = 0;
  }
LABEL_204:
  if ((_SBF_Private_IsD94Like() & 1) != 0)
  {
    memset(v133, 0, 36);
    memset(v132, 0, sizeof(v132));
    v130 = 0;
    v131 = 0;
    v127 = 0;
    v128 = 0;
    v129 = 0;
    v124 = 0;
    v125 = 0;
    v126 = 0;
    v123 = 0;
    v122 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = &qword_1D04902B8;
    goto LABEL_67;
  }
LABEL_208:
  if (!_SBF_Private_IsD64Like())
  {
LABEL_212:
    *(_QWORD *)&v133[28] = 0;
    goto LABEL_222;
  }
  v37 = __sb__runningInSpringBoard();
  if (v37)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
      goto LABEL_212;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v104 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v104, "userInterfaceIdiom"))
    {
      *(_DWORD *)&v133[28] = 0;
      *(_DWORD *)&v133[32] = 1;
      goto LABEL_222;
    }
  }
  *(_DWORD *)&v133[32] = v37 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v7 = __sb__runningInSpringBoard();
    if ((_DWORD)v7)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v95 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v95, "_referenceBounds");
    }
    *(_DWORD *)&v133[28] = v7 ^ 1;
    BSSizeRoundForScale();
    if (v43 >= *(double *)(MEMORY[0x1E0DAB260] + 136))
    {
      memset(v133, 0, 28);
      memset(v132, 0, sizeof(v132));
      v130 = 0;
      v131 = 0;
      v127 = 0;
      v128 = 0;
      v129 = 0;
      v124 = 0;
      v125 = 0;
      v126 = 0;
      v123 = 0;
      v122 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = &qword_1D04902C0;
      goto LABEL_67;
    }
  }
  else
  {
    *(_DWORD *)&v133[28] = 0;
  }
LABEL_222:
  v7 = __sb__runningInSpringBoard();
  if ((_DWORD)v7)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      *(_DWORD *)&v133[24] = 0;
      *(_DWORD *)&v133[16] = 0;
      goto LABEL_232;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v106 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v106, "userInterfaceIdiom"))
    {
      *(_DWORD *)&v133[16] = 0;
      *(_DWORD *)&v133[24] = 1;
      goto LABEL_232;
    }
  }
  *(_DWORD *)&v133[24] = v7 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v7 = __sb__runningInSpringBoard();
    if ((_DWORD)v7)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v99 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v99, "_referenceBounds");
    }
    *(_DWORD *)&v133[16] = v7 ^ 1;
    BSSizeRoundForScale();
    if (v39 >= *(double *)(MEMORY[0x1E0DAB260] + 136))
      goto LABEL_236;
  }
  else
  {
    *(_DWORD *)&v133[16] = 0;
  }
LABEL_232:
  if ((_SBF_Private_IsD64Like() & 1) != 0)
  {
    *(_DWORD *)&v133[20] = 0;
    *(_OWORD *)v133 = 0uLL;
    memset(v132, 0, sizeof(v132));
    v130 = 0;
    v131 = 0;
    v127 = 0;
    v128 = 0;
    v129 = 0;
    v124 = 0;
    v125 = 0;
    v126 = 0;
    v123 = 0;
    v122 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = &qword_1D04902C8;
    goto LABEL_67;
  }
LABEL_236:
  v40 = __sb__runningInSpringBoard();
  if (v40)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      *(_DWORD *)&v133[20] = 0;
      *(_DWORD *)&v133[12] = 0;
      goto LABEL_246;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v105 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v105, "userInterfaceIdiom"))
    {
      *(_DWORD *)&v133[12] = 0;
      *(_DWORD *)&v133[20] = 1;
      goto LABEL_246;
    }
  }
  *(_DWORD *)&v133[20] = v40 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v41 = __sb__runningInSpringBoard();
    if (v41)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v96 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v96, "_referenceBounds");
    }
    v7 = v41 ^ 1u;
    BSSizeRoundForScale();
    *(_DWORD *)&v133[12] = v7;
    if (v42 >= *(double *)(MEMORY[0x1E0DAB260] + 136))
    {
      *(_QWORD *)v133 = 0;
      memset(v132, 0, sizeof(v132));
      *(_DWORD *)&v133[8] = 0;
      v130 = 0;
      v131 = 0;
      v127 = 0;
      v128 = 0;
      v129 = 0;
      v124 = 0;
      v125 = 0;
      v126 = 0;
      v123 = 0;
      v122 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = &qword_1D04902A0;
      goto LABEL_67;
    }
  }
  else
  {
    *(_DWORD *)&v133[12] = 0;
  }
LABEL_246:
  v7 = __sb__runningInSpringBoard();
  if ((_DWORD)v7)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      *(_DWORD *)v133 = 0;
      *(_DWORD *)v132 = 0;
      goto LABEL_256;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v102 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v102, "userInterfaceIdiom"))
    {
      *(_DWORD *)v132 = 0;
      *(_DWORD *)v133 = 1;
      goto LABEL_256;
    }
  }
  *(_DWORD *)v133 = v7 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v7 = __sb__runningInSpringBoard();
    if ((_DWORD)v7)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v94 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v94, "_referenceBounds");
    }
    *(_DWORD *)v132 = v7 ^ 1;
    BSSizeRoundForScale();
    if (v44 >= *(double *)(MEMORY[0x1E0DAB260] + 136))
      goto LABEL_266;
  }
  else
  {
    *(_DWORD *)v132 = 0;
  }
LABEL_256:
  if ((_SBF_Private_IsD54() & 1) != 0)
  {
    *(_QWORD *)&v133[4] = 0;
    *(_QWORD *)&v132[4] = 0;
    v130 = 0;
    v131 = 0;
    v127 = 0;
    v128 = 0;
    v129 = 0;
    v124 = 0;
    v125 = 0;
    v126 = 0;
    v123 = 0;
    v122 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = &qword_1D04902A8;
    goto LABEL_67;
  }
LABEL_266:
  v45 = __sb__runningInSpringBoard();
  if (v45)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      *(_QWORD *)&v133[4] = 0;
      goto LABEL_276;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v101 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v101, "userInterfaceIdiom"))
    {
      *(_DWORD *)&v133[4] = 0;
      *(_DWORD *)&v133[8] = 1;
      goto LABEL_276;
    }
  }
  *(_DWORD *)&v133[8] = v45 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v46 = __sb__runningInSpringBoard();
    if (v46)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v91 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v91, "_referenceBounds");
    }
    v7 = v46 ^ 1u;
    BSSizeRoundForScale();
    *(_DWORD *)&v133[4] = v7;
    if (v47 >= *(double *)(MEMORY[0x1E0DAB260] + 120) && (_SBF_Private_IsN84OrSimilarDevice() & 1) != 0)
    {
      *(_QWORD *)&v132[4] = 0;
      v130 = 0;
      v131 = 0;
      v127 = 0;
      v128 = 0;
      v129 = 0;
      v124 = 0;
      v125 = 0;
      v126 = 0;
      v123 = 0;
      v122 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = &qword_1D0490270;
      goto LABEL_67;
    }
  }
  else
  {
    *(_DWORD *)&v133[4] = 0;
  }
LABEL_276:
  v7 = __sb__runningInSpringBoard();
  if ((_DWORD)v7)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      *(_QWORD *)&v132[4] = 0;
      goto LABEL_286;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v98 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v98, "userInterfaceIdiom"))
    {
      *(_DWORD *)&v132[4] = 0;
      *(_DWORD *)&v132[8] = 1;
      goto LABEL_286;
    }
  }
  *(_DWORD *)&v132[8] = v7 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v7 = __sb__runningInSpringBoard();
    if ((_DWORD)v7)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v90 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v90, "_referenceBounds");
    }
    *(_DWORD *)&v132[4] = v7 ^ 1;
    BSSizeRoundForScale();
    if (v48 >= *(double *)(MEMORY[0x1E0DAB260] + 120))
      goto LABEL_295;
  }
  else
  {
    *(_DWORD *)&v132[4] = 0;
  }
LABEL_286:
  if (_SBF_Private_IsD33OrSimilarDevice() && (_SBF_Private_IsN84ZoomedOrSimilarDevice() & 1) != 0)
  {
    v130 = 0;
    v131 = 0;
    v127 = 0;
    v128 = 0;
    v129 = 0;
    v124 = 0;
    v125 = 0;
    v126 = 0;
    v123 = 0;
    v122 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = &qword_1D0490278;
    goto LABEL_67;
  }
LABEL_295:
  if (!_SBF_Private_IsD93Like())
  {
LABEL_299:
    v130 = 0;
    goto LABEL_306;
  }
  v49 = __sb__runningInSpringBoard();
  if (v49)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
      goto LABEL_299;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v93, "userInterfaceIdiom"))
    {
      v130 = 0x100000000;
      goto LABEL_306;
    }
  }
  HIDWORD(v130) = v49 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v50 = __sb__runningInSpringBoard();
    if (v50)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v84 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v84, "_referenceBounds");
    }
    v7 = v50 ^ 1u;
    BSSizeRoundForScale();
    LODWORD(v130) = v7;
    if (v55 >= *(double *)(MEMORY[0x1E0DAB260] + 184))
    {
      v131 = 0;
      v127 = 0;
      v128 = 0;
      v129 = 0;
      v124 = 0;
      v125 = 0;
      v126 = 0;
      v123 = 0;
      v122 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = &qword_1D0490260;
      goto LABEL_67;
    }
  }
  else
  {
    LODWORD(v130) = 0;
  }
LABEL_306:
  v51 = __sb__runningInSpringBoard();
  if (v51)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      HIDWORD(v131) = 0;
      v7 = 0;
      goto LABEL_316;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v97 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v97, "userInterfaceIdiom"))
    {
      v7 = 0;
      HIDWORD(v131) = 1;
      goto LABEL_316;
    }
  }
  HIDWORD(v131) = v51 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v52 = __sb__runningInSpringBoard();
    if (v52)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v87 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v87, "_referenceBounds");
    }
    v7 = v52 ^ 1u;
    BSSizeRoundForScale();
    if (v53 >= *(double *)(MEMORY[0x1E0DAB260] + 184))
      goto LABEL_320;
  }
  else
  {
    v7 = 0;
  }
LABEL_316:
  if ((_SBF_Private_IsD93Like() & 1) != 0)
  {
    LODWORD(v131) = v7;
    v127 = 0;
    v128 = 0;
    v129 = 0;
    v124 = 0;
    v125 = 0;
    v126 = 0;
    v123 = 0;
    v122 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = &qword_1D0490268;
    goto LABEL_67;
  }
LABEL_320:
  LODWORD(v131) = v7;
  if (!_SBF_Private_IsD63Like())
  {
LABEL_324:
    v128 = 0;
    goto LABEL_334;
  }
  v54 = __sb__runningInSpringBoard();
  if (v54)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
      goto LABEL_324;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v88 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v88, "userInterfaceIdiom"))
    {
      v128 = 0x100000000;
      goto LABEL_334;
    }
  }
  HIDWORD(v128) = v54 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v7 = __sb__runningInSpringBoard();
    if ((_DWORD)v7)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v80 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v80, "_referenceBounds");
    }
    LODWORD(v128) = v7 ^ 1;
    BSSizeRoundForScale();
    if (v60 >= *(double *)(MEMORY[0x1E0DAB260] + 104))
    {
      v129 = 0;
      v127 = 0;
      v124 = 0;
      v125 = 0;
      v126 = 0;
      v123 = 0;
      v122 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = &qword_1D0490290;
      goto LABEL_67;
    }
  }
  else
  {
    LODWORD(v128) = 0;
  }
LABEL_334:
  v7 = __sb__runningInSpringBoard();
  if ((_DWORD)v7)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      v129 = 0;
      HIDWORD(v127) = 0;
      goto LABEL_344;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v92 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v92, "userInterfaceIdiom"))
    {
      HIDWORD(v127) = 0;
      v129 = 1;
      goto LABEL_344;
    }
  }
  v129 = v7 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v7 = __sb__runningInSpringBoard();
    if ((_DWORD)v7)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v83 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v83, "_referenceBounds");
    }
    HIDWORD(v127) = v7 ^ 1;
    BSSizeRoundForScale();
    if (v56 >= *(double *)(MEMORY[0x1E0DAB260] + 104))
      goto LABEL_348;
  }
  else
  {
    HIDWORD(v127) = 0;
  }
LABEL_344:
  if ((_SBF_Private_IsD63Like() & 1) != 0)
  {
    LODWORD(v127) = 0;
    v124 = 0;
    v125 = 0;
    v126 = 0;
    v123 = 0;
    v122 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = &qword_1D0490298;
    goto LABEL_67;
  }
LABEL_348:
  v57 = __sb__runningInSpringBoard();
  if (v57)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      LODWORD(v127) = 0;
      HIDWORD(v124) = 0;
      goto LABEL_358;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v89 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v89, "userInterfaceIdiom"))
    {
      HIDWORD(v124) = 0;
      LODWORD(v127) = 1;
      goto LABEL_358;
    }
  }
  LODWORD(v127) = v57 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v58 = __sb__runningInSpringBoard();
    if (v58)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v81 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v81, "_referenceBounds");
    }
    v7 = v58 ^ 1u;
    BSSizeRoundForScale();
    HIDWORD(v124) = v7;
    if (v59 >= *(double *)(MEMORY[0x1E0DAB260] + 120))
    {
      v125 = 0;
      v126 = 0;
      LODWORD(v124) = 0;
      v123 = 0;
      v122 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = &qword_1D0490280;
      goto LABEL_67;
    }
  }
  else
  {
    HIDWORD(v124) = 0;
  }
LABEL_358:
  v7 = __sb__runningInSpringBoard();
  if ((_DWORD)v7)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      v126 = 0;
      goto LABEL_368;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v86, "userInterfaceIdiom"))
    {
      v126 = 0x100000000;
      goto LABEL_368;
    }
  }
  HIDWORD(v126) = v7 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v7 = __sb__runningInSpringBoard();
    if ((_DWORD)v7)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v79 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v79, "_referenceBounds");
    }
    LODWORD(v126) = v7 ^ 1;
    BSSizeRoundForScale();
    if (v61 >= *(double *)(MEMORY[0x1E0DAB260] + 120))
      goto LABEL_378;
  }
  else
  {
    LODWORD(v126) = 0;
  }
LABEL_368:
  if ((_SBF_Private_IsD33OrSimilarDevice() & 1) != 0)
  {
    v125 = 0;
    LODWORD(v124) = 0;
    v123 = 0;
    v122 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = &qword_1D0490288;
    goto LABEL_67;
  }
LABEL_378:
  v62 = __sb__runningInSpringBoard();
  if (v62)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      HIDWORD(v125) = 0;
      LODWORD(v124) = 0;
      goto LABEL_388;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v85 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v85, "userInterfaceIdiom"))
    {
      LODWORD(v124) = 0;
      HIDWORD(v125) = 1;
      goto LABEL_388;
    }
  }
  HIDWORD(v125) = v62 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v7 = __sb__runningInSpringBoard();
    if ((_DWORD)v7)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v78 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v78, "_referenceBounds");
    }
    LODWORD(v124) = v7 ^ 1;
    BSSizeRoundForScale();
    if (v65 >= *(double *)(MEMORY[0x1E0DAB260] + 104))
    {
      v123 = 0;
      LODWORD(v125) = 0;
      v122 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = &qword_1D0490250;
      goto LABEL_67;
    }
  }
  else
  {
    LODWORD(v124) = 0;
  }
LABEL_388:
  v63 = __sb__runningInSpringBoard();
  if (v63)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      HIDWORD(v123) = 0;
      v7 = 0;
      goto LABEL_398;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v82 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v82, "userInterfaceIdiom"))
    {
      v7 = 0;
      HIDWORD(v123) = 1;
      goto LABEL_398;
    }
  }
  HIDWORD(v123) = v63 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v64 = __sb__runningInSpringBoard();
    if (v64)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v77, "_referenceBounds");
    }
    v7 = v64 ^ 1u;
    BSSizeRoundForScale();
    if (v66 >= *(double *)(MEMORY[0x1E0DAB260] + 104))
      goto LABEL_405;
  }
  else
  {
    v7 = 0;
  }
LABEL_398:
  if ((_SBF_Private_IsD53() & 1) != 0)
  {
    LODWORD(v125) = v7;
    LODWORD(v123) = 0;
    v122 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = &qword_1D0490258;
    goto LABEL_67;
  }
LABEL_405:
  LODWORD(v125) = v7;
  if (_SBF_Private_IsD16() && (_SBF_Private_IsD52OrSimilarDevice() & 1) != 0)
  {
    LODWORD(v123) = 0;
    v122 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = &qword_1D0490230;
    goto LABEL_67;
  }
  if (_SBF_Private_IsD52ZoomedOrSimilarDevice() && (_SBF_Private_IsD16() & 1) != 0)
  {
    LODWORD(v123) = 0;
    v122 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = &qword_1D0490238;
    goto LABEL_67;
  }
  if ((_SBF_Private_IsD52OrSimilarDevice() & 1) != 0)
  {
    LODWORD(v123) = 0;
    v122 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = &qword_1D0490220;
    goto LABEL_67;
  }
  if ((_SBF_Private_IsD52ZoomedOrSimilarDevice() & 1) != 0)
  {
    LODWORD(v123) = 0;
    v122 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = &qword_1D0490228;
    goto LABEL_67;
  }
  v7 = __sb__runningInSpringBoard();
  if ((_DWORD)v7)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      LODWORD(v123) = 0;
      v122 = 0;
      goto LABEL_425;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v76 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v76, "userInterfaceIdiom"))
    {
      v122 = 0;
      LODWORD(v123) = 1;
      goto LABEL_425;
    }
  }
  LODWORD(v123) = v7 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v5 = __sb__runningInSpringBoard();
    if ((_DWORD)v5)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v74 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v74, "_referenceBounds");
    }
    v122 = v5 ^ 1;
    BSSizeRoundForScale();
    if (v69 >= *(double *)(MEMORY[0x1E0DAB260] + 88))
    {
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = &qword_1D0490240;
      goto LABEL_67;
    }
  }
  else
  {
    v122 = 0;
  }
LABEL_425:
  v67 = __sb__runningInSpringBoard();
  if (v67)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      v18 = 0;
      v19 = 0;
      goto LABEL_435;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v75, "userInterfaceIdiom"))
    {
      v19 = 0;
      v18 = 1;
      goto LABEL_435;
    }
  }
  v18 = v67 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v5 = __sb__runningInSpringBoard();
    if ((_DWORD)v5)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v73 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v73, "_referenceBounds");
    }
    v19 = v5 ^ 1;
    BSSizeRoundForScale();
    if (v70 >= *(double *)(MEMORY[0x1E0DAB260] + 72))
    {
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = &qword_1D0490248;
      goto LABEL_67;
    }
  }
  else
  {
    v19 = 0;
  }
LABEL_435:
  v5 = __sb__runningInSpringBoard();
  if ((_DWORD)v5)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      v20 = 0;
      v21 = 0;
      goto LABEL_445;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v7 = objc_claimAutoreleasedReturnValue();
    if (objc_msgSend((id)v7, "userInterfaceIdiom"))
    {
      v21 = 0;
      v20 = 1;
      goto LABEL_445;
    }
  }
  v20 = v5 ^ 1;
  v5 = __sb__runningInSpringBoard();
  if ((_DWORD)v5)
  {
    __sb__mainScreenReferenceBounds();
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
    v2 = objc_claimAutoreleasedReturnValue();
    objc_msgSend((id)v2, "_referenceBounds");
  }
  v21 = v5 ^ 1;
  BSSizeRoundForScale();
  if (v68 >= *(double *)(MEMORY[0x1E0DAB260] + 56))
  {
    v22 = 0;
    v23 = 0;
    v24 = &qword_1D0490218;
    goto LABEL_67;
  }
LABEL_445:
  v4 = __sb__runningInSpringBoard();
  if ((_DWORD)v4)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      v22 = 0;
      v23 = 0;
LABEL_462:
      v24 = &CSWindowedAccessoryInset;
      goto LABEL_67;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v5 = objc_claimAutoreleasedReturnValue();
    if (objc_msgSend((id)v5, "userInterfaceIdiom"))
    {
      v23 = 0;
      v22 = 1;
      goto LABEL_462;
    }
  }
  v22 = v4 ^ 1;
  v71 = __sb__runningInSpringBoard();
  if (v71)
  {
    __sb__mainScreenReferenceBounds();
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
    v4 = objc_claimAutoreleasedReturnValue();
    objc_msgSend((id)v4, "_referenceBounds");
  }
  v23 = v71 ^ 1;
  BSSizeRoundForScale();
  if (v72 < *(double *)(MEMORY[0x1E0DAB260] + 40))
    goto LABEL_462;
  v24 = &qword_1D0490210;
LABEL_67:
  v32 = *(double *)v24;
  if (v23)

  if (v22)
  if (v21)

  if (v20)
  if (v19)

  if (v18)
  if (v122)

  if ((_DWORD)v123)
  if ((_DWORD)v125)

  if (HIDWORD(v123))
  if ((_DWORD)v124)

  if (HIDWORD(v125))
  if ((_DWORD)v126)

  if (HIDWORD(v126))
  if (HIDWORD(v124))

  if ((_DWORD)v127)
  if (HIDWORD(v127))

  if (v129)
  if ((_DWORD)v128)

  if (HIDWORD(v128))
  if ((_DWORD)v131)

  if (HIDWORD(v131))
  if ((_DWORD)v130)

  if (HIDWORD(v130))
  if (*(_DWORD *)&v132[4])

  if (*(_DWORD *)&v132[8])
  if (*(_DWORD *)&v133[4])

  if (*(_DWORD *)&v133[8])
  if (*(_DWORD *)v132)

  if (*(_DWORD *)v133)
  if (*(_DWORD *)&v133[12])

  if (*(_DWORD *)&v133[20])
  if (*(_DWORD *)&v133[16])

  if (*(_DWORD *)&v133[24])
  if (*(_DWORD *)&v133[28])

  if (*(_DWORD *)&v133[32])
  if (*(_DWORD *)&v133[36])

  if (*(_DWORD *)&v134[8])
  if (*(_DWORD *)&v134[4])

  if (*(_DWORD *)v134)
  if ((_DWORD)v135)

  if (DWORD1(v135))
  if (DWORD2(v135))

  if (v142)
  {

    if (!HIDWORD(v135))
      goto LABEL_155;
  }
  else if (!HIDWORD(v135))
  {
LABEL_155:
    if (v136)
      goto LABEL_156;
    goto LABEL_166;
  }

  if (v136)
  {
LABEL_156:

    if (!v137)
      goto LABEL_157;
    goto LABEL_167;
  }
LABEL_166:
  if (!v137)
  {
LABEL_157:
    if (v138)
      goto LABEL_158;
    goto LABEL_168;
  }
LABEL_167:

  if (v138)
  {
LABEL_158:

    if (!v139)
      goto LABEL_159;
    goto LABEL_169;
  }
LABEL_168:
  if (!v139)
  {
LABEL_159:
    if (v140)
      goto LABEL_160;
    goto LABEL_170;
  }
LABEL_169:

  if (v140)
  {
LABEL_160:

    if (!v141)
      goto LABEL_161;
    goto LABEL_171;
  }
LABEL_170:
  if (!v141)
  {
LABEL_161:
    if (v143)
      goto LABEL_162;
    goto LABEL_172;
  }
LABEL_171:

  if (v143)
  {
LABEL_162:

    if (!v144)
      return v32;
    goto LABEL_173;
  }
LABEL_172:
  if (v144)
LABEL_173:

  return v32;
}

- (double)timeToSubtitleLabelBaselineDifferenceY
{
  void *v2;
  double v4;
  void *v5;
  uint64_t v6;
  void *v7;
  int v8;
  char v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  double v14;
  BOOL v15;
  double v16;
  double v17;
  int v18;
  double v19;

  if (self->_wantsAccessibilityContentSizes)
  {
    -[CSCoverSheetViewController _updateAccessibilityContentSizesIfNeeded](self, "_updateAccessibilityContentSizesIfNeeded");
    return self->_accessibilityTimeSubtitleBaselineY;
  }
  objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "userInterfaceIdiom");

  v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFBLL);
  v8 = __sb__runningInSpringBoard();
  v9 = v8;
  if (v7 == (void *)1)
  {
    if (v8)
    {
      if (SBFEffectiveDeviceClass() != 2)
      {
        v10 = 0x4044000000000000;
        return *(double *)&v10;
      }
      goto LABEL_13;
    }
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v7, "userInterfaceIdiom") == 1)
    {
LABEL_13:
      v11 = __sb__runningInSpringBoard();
      v12 = v11;
      if (v11)
      {
        __sb__mainScreenReferenceBounds();
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
        v2 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "_referenceBounds");
      }
      BSSizeRoundForScale();
      v15 = v14 < *(double *)(MEMORY[0x1E0DAB260] + 264);
      v16 = 40.0;
      v17 = 46.0;
      goto LABEL_25;
    }
    v13 = 0x4044000000000000;
LABEL_18:
    v4 = *(double *)&v13;
LABEL_31:

    return v4;
  }
  if (v8)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      v10 = 0x4041000000000000;
      return *(double *)&v10;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v7, "userInterfaceIdiom"))
    {
      v13 = 0x4041000000000000;
      goto LABEL_18;
    }
  }
  v18 = __sb__runningInSpringBoard();
  v12 = v18;
  if (v18)
  {
    __sb__mainScreenReferenceBounds();
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "_referenceBounds");
  }
  BSSizeRoundForScale();
  v15 = v19 < *(double *)(MEMORY[0x1E0DAB260] + 40);
  v16 = 34.0;
  v17 = 37.0;
LABEL_25:
  if (v15)
    v4 = v16;
  else
    v4 = v17;
  if ((v12 & 1) == 0)

  if ((v9 & 1) == 0)
    goto LABEL_31;
  return v4;
}

- (double)timeLabelOffsetForScrollPercent:(double)a3
{
  void *v5;
  double v6;
  double v7;
  void *v8;
  uint64_t v9;
  void *v10;
  double v11;
  double v12;

  -[CSCoverSheetViewController mainPageContentViewController](self, "mainPageContentViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CSCoverSheetViewController _timeLabelScrollPercentForDateTimeLayout:](self, "_timeLabelScrollPercentForDateTimeLayout:", -[CSCoverSheetViewController _dateTimeLayoutForPage:](self, "_dateTimeLayoutForPage:", v5));
  v7 = v6;
  if ((BSFloatIsZero() & 1) == 0)
  {
    -[CSCoverSheetViewController _allowedPageViewControllers](self, "_allowedPageViewControllers");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "count");

    if (v9)
    {
      -[CSCoverSheetViewController _pageForScrollPercent:](self, "_pageForScrollPercent:", a3);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[CSCoverSheetViewController _timeLabelScrollPercentForDateTimeLayout:](self, "_timeLabelScrollPercentForDateTimeLayout:", -[CSCoverSheetViewController _dateTimeLayoutForPage:](self, "_dateTimeLayoutForPage:", v10));
      v12 = -a3;
      if (a3 >= 0.0)
        v12 = a3;
      v7 = v7 + v12 * (v11 - v7);

    }
  }

  return v7;
}

- (double)_timeLabelScrollPercentForDateTimeLayout:(unint64_t)a3
{
  double result;
  BOOL v4;
  double v5;

  if (a3 == 3)
  {
    v4 = objc_msgSend((id)*MEMORY[0x1E0CEB258], "userInterfaceLayoutDirection") == 1;
    result = 1.0;
    v5 = -1.0;
  }
  else
  {
    result = 0.0;
    if (a3 != 2)
      return result;
    v4 = objc_msgSend((id)*MEMORY[0x1E0CEB258], "userInterfaceLayoutDirection", 0.0) == 1;
    result = -1.0;
    v5 = 1.0;
  }
  if (v4)
    return v5;
  return result;
}

- (double)prominentBaselineToListY
{
  if (prominentBaselineToListY_onceToken != -1)
    dispatch_once(&prominentBaselineToListY_onceToken, &__block_literal_global_1958);
  return *(double *)&prominentBaselineToListY_prominentBaselineToListY;
}

void __62__CSCoverSheetViewController_Layout__prominentBaselineToListY__block_invoke()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  double v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t *v25;
  double v26;
  int v27;
  double v28;
  double v29;
  double v30;
  int v31;
  double v32;
  int v33;
  double v34;
  double v35;
  int v36;
  int v37;
  double v38;
  double v39;
  double v40;
  int v41;
  int v42;
  double v43;
  double v44;
  int v45;
  int v46;
  int v47;
  int v48;
  double v49;
  int v50;
  double v51;
  double v52;
  int v53;
  int v54;
  double v55;
  double v56;
  double v57;
  int v58;
  int v59;
  int v60;
  double v61;
  double v62;
  int v63;
  int v64;
  double v65;
  double v66;
  double v67;
  int v68;
  double v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  id v117;
  void *v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  _BYTE v132[12];
  _BYTE v133[40];
  _BYTE v134[12];
  __int128 v135;
  int v136;
  uint64_t v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;

  v1 = __sb__runningInSpringBoard();
  v2 = (uint64_t)&CSProminentBaselineToListY;
  if (v1)
  {
    if (SBFEffectiveDeviceClass() != 2)
    {
      v3 = 0;
      v4 = 0;
      goto LABEL_15;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v117 = (id)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v117, "userInterfaceIdiom") != 1)
    {
      v3 = 0;
      v4 = 1;
      goto LABEL_15;
    }
  }
  v4 = v1 ^ 1u;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v5 = __sb__runningInSpringBoard();
    if ((_DWORD)v5)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v118 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v118, "_referenceBounds");
    }
    v3 = v5 ^ 1;
    BSSizeRoundForScale();
    if (v7 == *(double *)(MEMORY[0x1E0DAB260] + 272) && v6 == *(double *)(MEMORY[0x1E0DAB260] + 280))
    {
      v142 = v5 ^ 1;
      v143 = v4;
      memset(v133, 0, sizeof(v133));
      memset(v132, 0, sizeof(v132));
      memset(v134, 0, sizeof(v134));
      v135 = 0uLL;
      v130 = 0;
      v131 = 0;
      v127 = 0;
      v128 = 0;
      v141 = 0;
      v129 = 0;
      v136 = 0;
      v123 = 0;
      v126 = 0;
      v137 = 0;
      v125 = 0;
      v122 = 0;
      v121 = 0;
      v124 = 0;
      v138 = 0;
      v120 = 0;
      v139 = 0;
      v119 = 0;
      v19 = 0;
      v20 = 0;
      v140 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = &qword_1D04900D8;
      goto LABEL_66;
    }
  }
  else
  {
    v3 = 0;
  }
LABEL_15:
  v9 = __sb__runningInSpringBoard();
  v142 = v3;
  v143 = v4;
  if (v9)
  {
    if (SBFEffectiveDeviceClass() != 2)
    {
      v10 = 0;
      v0 = 0;
      goto LABEL_24;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v116 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v116, "userInterfaceIdiom") != 1)
    {
      v10 = 0;
      v0 = 1;
      goto LABEL_24;
    }
  }
  v0 = v9 ^ 1u;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v5 = __sb__runningInSpringBoard();
    if ((_DWORD)v5)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v108 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v108, "_referenceBounds");
    }
    v10 = v5 ^ 1;
    BSSizeRoundForScale();
    if (v28 >= *(double *)(MEMORY[0x1E0DAB260] + 424))
    {
      v139 = v5 ^ 1;
      v140 = v0;
      memset(v133, 0, sizeof(v133));
      memset(v132, 0, sizeof(v132));
      memset(v134, 0, sizeof(v134));
      v135 = 0uLL;
      v130 = 0;
      v131 = 0;
      v127 = 0;
      v128 = 0;
      v141 = 0;
      v129 = 0;
      v136 = 0;
      v123 = 0;
      v126 = 0;
      v137 = 0;
      v125 = 0;
      v122 = 0;
      v121 = 0;
      v124 = 0;
      v138 = 0;
      v120 = 0;
      v119 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = &qword_1D0490100;
      goto LABEL_66;
    }
  }
  else
  {
    v10 = 0;
  }
LABEL_24:
  v11 = __sb__runningInSpringBoard();
  v139 = v10;
  v140 = v0;
  if (v11)
  {
    if (SBFEffectiveDeviceClass() != 2)
    {
      v12 = 0;
      v13 = 0;
      goto LABEL_33;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v115 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v115, "userInterfaceIdiom") != 1)
    {
      v12 = 0;
      v13 = 1;
      goto LABEL_33;
    }
  }
  v13 = v11 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v5 = __sb__runningInSpringBoard();
    if ((_DWORD)v5)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v107 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v107, "_referenceBounds");
    }
    v12 = v5 ^ 1;
    BSSizeRoundForScale();
    if (v29 >= *(double *)(MEMORY[0x1E0DAB260] + 360))
    {
      HIDWORD(v137) = v5 ^ 1;
      v138 = v13;
      memset(v133, 0, sizeof(v133));
      memset(v132, 0, sizeof(v132));
      memset(v134, 0, sizeof(v134));
      v135 = 0uLL;
      v130 = 0;
      v131 = 0;
      v127 = 0;
      v128 = 0;
      v141 = 0;
      v129 = 0;
      v136 = 0;
      v123 = 0;
      v126 = 0;
      LODWORD(v137) = 0;
      v125 = 0;
      v122 = 0;
      v121 = 0;
      v124 = 0;
      v120 = 0;
      v119 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = &qword_1D04900F0;
      goto LABEL_66;
    }
  }
  else
  {
    v12 = 0;
  }
LABEL_33:
  v14 = __sb__runningInSpringBoard();
  HIDWORD(v137) = v12;
  v138 = v13;
  if (v14)
  {
    if (SBFEffectiveDeviceClass() != 2)
    {
      v15 = 0;
      v16 = 0;
      goto LABEL_42;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v114 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v114, "userInterfaceIdiom") != 1)
    {
      v15 = 0;
      v16 = 1;
      goto LABEL_42;
    }
  }
  v16 = v14 ^ 1;
  v5 = __sb__runningInSpringBoard();
  if ((_DWORD)v5)
  {
    __sb__mainScreenReferenceBounds();
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
    v111 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v111, "_referenceBounds");
  }
  v15 = v5 ^ 1;
  BSSizeRoundForScale();
  if (v17 >= *(double *)(MEMORY[0x1E0DAB260] + 264))
  {
    v136 = v5 ^ 1;
    LODWORD(v137) = v16;
    memset(v133, 0, sizeof(v133));
    memset(v132, 0, sizeof(v132));
    memset(v134, 0, sizeof(v134));
    v135 = 0uLL;
    v130 = 0;
    v131 = 0;
    v127 = 0;
    v128 = 0;
    v141 = 0;
    v129 = 0;
    v123 = 0;
    v126 = 0;
    v125 = 0;
    v122 = 0;
    v121 = 0;
    v124 = 0;
    v120 = 0;
    v119 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = &qword_1D04900F8;
    goto LABEL_66;
  }
LABEL_42:
  v18 = __sb__runningInSpringBoard();
  v136 = v15;
  LODWORD(v137) = v16;
  if (v18)
  {
    if (SBFEffectiveDeviceClass() != 2)
    {
      v141 = 0;
      v2 = 0;
      goto LABEL_52;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v113 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v113, "userInterfaceIdiom") != 1)
    {
      v141 = 0;
      v2 = 1;
      goto LABEL_52;
    }
  }
  v2 = v18 ^ 1u;
  v5 = __sb__runningInSpringBoard();
  if ((_DWORD)v5)
  {
    __sb__mainScreenReferenceBounds();
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
    v109 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v109, "_referenceBounds");
  }
  v141 = v5 ^ 1;
  BSSizeRoundForScale();
  if (v26 >= *(double *)(MEMORY[0x1E0DAB260] + 248))
  {
    DWORD2(v135) = 0;
    HIDWORD(v135) = v2;
    memset(v133, 0, sizeof(v133));
    memset(v132, 0, sizeof(v132));
    memset(v134, 0, sizeof(v134));
    *(_QWORD *)&v135 = 0;
    v130 = 0;
    v131 = 0;
    v127 = 0;
    v128 = 0;
    v129 = 0;
    v123 = 0;
    v126 = 0;
    v125 = 0;
    v122 = 0;
    v121 = 0;
    v124 = 0;
    v120 = 0;
    v119 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = &qword_1D04900E8;
    goto LABEL_66;
  }
LABEL_52:
  v27 = __sb__runningInSpringBoard();
  HIDWORD(v135) = v2;
  if (v27)
  {
    if (SBFEffectiveDeviceClass() != 2)
    {
      *(_QWORD *)((char *)&v135 + 4) = 0;
      goto LABEL_176;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v112 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v112, "userInterfaceIdiom") != 1)
    {
      *(_QWORD *)((char *)&v135 + 4) = 0x100000000;
      goto LABEL_176;
    }
  }
  DWORD2(v135) = v27 ^ 1;
  v5 = __sb__runningInSpringBoard();
  if ((_DWORD)v5)
  {
    __sb__mainScreenReferenceBounds();
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
    v106 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v106, "_referenceBounds");
  }
  DWORD1(v135) = v5 ^ 1;
  BSSizeRoundForScale();
  if (v30 >= *(double *)(MEMORY[0x1E0DAB260] + 232))
  {
    memset(v133, 0, sizeof(v133));
    memset(v132, 0, sizeof(v132));
    memset(v134, 0, sizeof(v134));
    LODWORD(v135) = 0;
    v130 = 0;
    v131 = 0;
    v127 = 0;
    v128 = 0;
    v129 = 0;
    v123 = 0;
    v126 = 0;
    v125 = 0;
    v122 = 0;
    v121 = 0;
    v124 = 0;
    v120 = 0;
    v119 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = &qword_1D04900E0;
    goto LABEL_66;
  }
LABEL_176:
  v5 = __sb__runningInSpringBoard();
  if ((_DWORD)v5)
  {
    if (SBFEffectiveDeviceClass() != 2)
      goto LABEL_178;
LABEL_184:
    memset(v133, 0, sizeof(v133));
    memset(v132, 0, sizeof(v132));
    memset(v134, 0, sizeof(v134));
    v130 = 0;
    v131 = 0;
    v127 = 0;
    v128 = 0;
    v129 = 0;
    v123 = 0;
    v126 = 0;
    v125 = 0;
    v122 = 0;
    v121 = 0;
    v124 = 0;
    v120 = 0;
    v119 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = &qword_1D04900D0;
    LODWORD(v135) = v5 ^ 1;
    goto LABEL_66;
  }
  objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
  v110 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v110, "userInterfaceIdiom") == 1)
    goto LABEL_184;
LABEL_178:
  LODWORD(v135) = v5 ^ 1;
  if (!_SBF_Private_IsD94Like())
  {
LABEL_182:
    *(_QWORD *)v134 = 0;
    goto LABEL_192;
  }
  v31 = __sb__runningInSpringBoard();
  if (v31)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
      goto LABEL_182;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v104 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v104, "userInterfaceIdiom"))
    {
      *(_QWORD *)v134 = 1;
      goto LABEL_192;
    }
  }
  *(_DWORD *)v134 = v31 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v5 = __sb__runningInSpringBoard();
    if ((_DWORD)v5)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v97 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v97, "_referenceBounds");
    }
    *(_DWORD *)&v134[4] = v5 ^ 1;
    BSSizeRoundForScale();
    if (v34 >= *(double *)(MEMORY[0x1E0DAB260] + 200))
    {
      memset(v133, 0, sizeof(v133));
      *(_DWORD *)&v134[8] = 0;
      memset(v132, 0, sizeof(v132));
      v130 = 0;
      v131 = 0;
      v127 = 0;
      v128 = 0;
      v129 = 0;
      v123 = 0;
      v126 = 0;
      v125 = 0;
      v122 = 0;
      v121 = 0;
      v124 = 0;
      v120 = 0;
      v119 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = &qword_1D04900B0;
      goto LABEL_66;
    }
  }
  else
  {
    *(_DWORD *)&v134[4] = 0;
  }
LABEL_192:
  v5 = __sb__runningInSpringBoard();
  if ((_DWORD)v5)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      *(_DWORD *)&v133[36] = 0;
      *(_DWORD *)&v134[8] = 0;
      goto LABEL_202;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v105 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v105, "userInterfaceIdiom"))
    {
      *(_DWORD *)&v133[36] = 0;
      *(_DWORD *)&v134[8] = 1;
      goto LABEL_202;
    }
  }
  *(_DWORD *)&v134[8] = v5 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v5 = __sb__runningInSpringBoard();
    if ((_DWORD)v5)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v100 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v100, "_referenceBounds");
    }
    *(_DWORD *)&v133[36] = v5 ^ 1;
    BSSizeRoundForScale();
    if (v32 >= *(double *)(MEMORY[0x1E0DAB260] + 200))
      goto LABEL_206;
  }
  else
  {
    *(_DWORD *)&v133[36] = 0;
  }
LABEL_202:
  if ((_SBF_Private_IsD94Like() & 1) != 0)
  {
    memset(v133, 0, 36);
    memset(v132, 0, sizeof(v132));
    v130 = 0;
    v131 = 0;
    v127 = 0;
    v128 = 0;
    v129 = 0;
    v123 = 0;
    v126 = 0;
    v125 = 0;
    v122 = 0;
    v121 = 0;
    v124 = 0;
    v120 = 0;
    v119 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = &qword_1D04900B8;
    goto LABEL_66;
  }
LABEL_206:
  if (!_SBF_Private_IsD64Like())
  {
LABEL_210:
    *(_QWORD *)&v133[28] = 0;
    goto LABEL_220;
  }
  v33 = __sb__runningInSpringBoard();
  if (v33)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
      goto LABEL_210;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v101 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v101, "userInterfaceIdiom"))
    {
      *(_DWORD *)&v133[28] = 0;
      *(_DWORD *)&v133[32] = 1;
      goto LABEL_220;
    }
  }
  *(_DWORD *)&v133[32] = v33 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v5 = __sb__runningInSpringBoard();
    if ((_DWORD)v5)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v92 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v92, "_referenceBounds");
    }
    *(_DWORD *)&v133[28] = v5 ^ 1;
    BSSizeRoundForScale();
    if (v39 >= *(double *)(MEMORY[0x1E0DAB260] + 136))
    {
      memset(v133, 0, 28);
      memset(v132, 0, sizeof(v132));
      v130 = 0;
      v131 = 0;
      v127 = 0;
      v128 = 0;
      v129 = 0;
      v123 = 0;
      v126 = 0;
      v125 = 0;
      v122 = 0;
      v121 = 0;
      v124 = 0;
      v120 = 0;
      v119 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = &qword_1D04900C0;
      goto LABEL_66;
    }
  }
  else
  {
    *(_DWORD *)&v133[28] = 0;
  }
LABEL_220:
  v5 = __sb__runningInSpringBoard();
  if ((_DWORD)v5)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      *(_DWORD *)&v133[24] = 0;
      *(_DWORD *)&v133[16] = 0;
      goto LABEL_230;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v103 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v103, "userInterfaceIdiom"))
    {
      *(_DWORD *)&v133[16] = 0;
      *(_DWORD *)&v133[24] = 1;
      goto LABEL_230;
    }
  }
  *(_DWORD *)&v133[24] = v5 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v5 = __sb__runningInSpringBoard();
    if ((_DWORD)v5)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v96 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v96, "_referenceBounds");
    }
    *(_DWORD *)&v133[16] = v5 ^ 1;
    BSSizeRoundForScale();
    if (v35 >= *(double *)(MEMORY[0x1E0DAB260] + 136))
      goto LABEL_234;
  }
  else
  {
    *(_DWORD *)&v133[16] = 0;
  }
LABEL_230:
  if ((_SBF_Private_IsD64Like() & 1) != 0)
  {
    *(_DWORD *)&v133[20] = 0;
    *(_OWORD *)v133 = 0uLL;
    memset(v132, 0, sizeof(v132));
    v130 = 0;
    v131 = 0;
    v127 = 0;
    v128 = 0;
    v129 = 0;
    v123 = 0;
    v126 = 0;
    v125 = 0;
    v122 = 0;
    v121 = 0;
    v124 = 0;
    v120 = 0;
    v119 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = &qword_1D04900C8;
    goto LABEL_66;
  }
LABEL_234:
  v36 = __sb__runningInSpringBoard();
  if (v36)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      *(_DWORD *)&v133[20] = 0;
      *(_DWORD *)&v133[12] = 0;
      goto LABEL_244;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v102 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v102, "userInterfaceIdiom"))
    {
      *(_DWORD *)&v133[12] = 0;
      *(_DWORD *)&v133[20] = 1;
      goto LABEL_244;
    }
  }
  *(_DWORD *)&v133[20] = v36 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v37 = __sb__runningInSpringBoard();
    if (v37)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v93 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v93, "_referenceBounds");
    }
    v5 = v37 ^ 1u;
    BSSizeRoundForScale();
    *(_DWORD *)&v133[12] = v5;
    if (v38 >= *(double *)(MEMORY[0x1E0DAB260] + 136))
    {
      *(_QWORD *)v133 = 0;
      memset(v132, 0, sizeof(v132));
      *(_DWORD *)&v133[8] = 0;
      v130 = 0;
      v131 = 0;
      v127 = 0;
      v128 = 0;
      v129 = 0;
      v123 = 0;
      v126 = 0;
      v125 = 0;
      v122 = 0;
      v121 = 0;
      v124 = 0;
      v120 = 0;
      v119 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = &qword_1D04900A0;
      goto LABEL_66;
    }
  }
  else
  {
    *(_DWORD *)&v133[12] = 0;
  }
LABEL_244:
  v5 = __sb__runningInSpringBoard();
  if ((_DWORD)v5)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      *(_DWORD *)v133 = 0;
      *(_DWORD *)v132 = 0;
      goto LABEL_254;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v99 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v99, "userInterfaceIdiom"))
    {
      *(_DWORD *)v132 = 0;
      *(_DWORD *)v133 = 1;
      goto LABEL_254;
    }
  }
  *(_DWORD *)v133 = v5 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v5 = __sb__runningInSpringBoard();
    if ((_DWORD)v5)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v91 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v91, "_referenceBounds");
    }
    *(_DWORD *)v132 = v5 ^ 1;
    BSSizeRoundForScale();
    if (v40 >= *(double *)(MEMORY[0x1E0DAB260] + 136))
      goto LABEL_264;
  }
  else
  {
    *(_DWORD *)v132 = 0;
  }
LABEL_254:
  if ((_SBF_Private_IsD54() & 1) != 0)
  {
    *(_QWORD *)&v133[4] = 0;
    *(_QWORD *)&v132[4] = 0;
    v130 = 0;
    v131 = 0;
    v127 = 0;
    v128 = 0;
    v129 = 0;
    v123 = 0;
    v126 = 0;
    v125 = 0;
    v122 = 0;
    v121 = 0;
    v124 = 0;
    v120 = 0;
    v119 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = &qword_1D04900A8;
    goto LABEL_66;
  }
LABEL_264:
  v41 = __sb__runningInSpringBoard();
  if (v41)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      *(_QWORD *)&v133[4] = 0;
      goto LABEL_274;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v98 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v98, "userInterfaceIdiom"))
    {
      *(_DWORD *)&v133[4] = 0;
      *(_DWORD *)&v133[8] = 1;
      goto LABEL_274;
    }
  }
  *(_DWORD *)&v133[8] = v41 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v42 = __sb__runningInSpringBoard();
    if (v42)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v88 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v88, "_referenceBounds");
    }
    v5 = v42 ^ 1u;
    BSSizeRoundForScale();
    *(_DWORD *)&v133[4] = v5;
    if (v43 >= *(double *)(MEMORY[0x1E0DAB260] + 120) && (_SBF_Private_IsN84OrSimilarDevice() & 1) != 0)
    {
      *(_QWORD *)&v132[4] = 0;
      v130 = 0;
      v131 = 0;
      v127 = 0;
      v128 = 0;
      v129 = 0;
      v123 = 0;
      v126 = 0;
      v125 = 0;
      v122 = 0;
      v121 = 0;
      v124 = 0;
      v120 = 0;
      v119 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = &qword_1D0490070;
      goto LABEL_66;
    }
  }
  else
  {
    *(_DWORD *)&v133[4] = 0;
  }
LABEL_274:
  v5 = __sb__runningInSpringBoard();
  if ((_DWORD)v5)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      *(_QWORD *)&v132[4] = 0;
      goto LABEL_284;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v95 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v95, "userInterfaceIdiom"))
    {
      *(_DWORD *)&v132[4] = 0;
      *(_DWORD *)&v132[8] = 1;
      goto LABEL_284;
    }
  }
  *(_DWORD *)&v132[8] = v5 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v5 = __sb__runningInSpringBoard();
    if ((_DWORD)v5)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v87 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v87, "_referenceBounds");
    }
    *(_DWORD *)&v132[4] = v5 ^ 1;
    BSSizeRoundForScale();
    if (v44 >= *(double *)(MEMORY[0x1E0DAB260] + 120))
      goto LABEL_293;
  }
  else
  {
    *(_DWORD *)&v132[4] = 0;
  }
LABEL_284:
  if (_SBF_Private_IsD33OrSimilarDevice() && (_SBF_Private_IsN84ZoomedOrSimilarDevice() & 1) != 0)
  {
    v130 = 0;
    v131 = 0;
    v127 = 0;
    v128 = 0;
    v129 = 0;
    v123 = 0;
    v126 = 0;
    v125 = 0;
    v122 = 0;
    v121 = 0;
    v124 = 0;
    v120 = 0;
    v119 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = &qword_1D0490078;
    goto LABEL_66;
  }
LABEL_293:
  if (!_SBF_Private_IsD93Like())
  {
LABEL_297:
    v130 = 0;
    goto LABEL_304;
  }
  v45 = __sb__runningInSpringBoard();
  if (v45)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
      goto LABEL_297;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v90, "userInterfaceIdiom"))
    {
      v130 = 0x100000000;
      goto LABEL_304;
    }
  }
  HIDWORD(v130) = v45 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v46 = __sb__runningInSpringBoard();
    if (v46)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v81 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v81, "_referenceBounds");
    }
    v5 = v46 ^ 1u;
    BSSizeRoundForScale();
    LODWORD(v130) = v5;
    if (v51 >= *(double *)(MEMORY[0x1E0DAB260] + 184))
    {
      v131 = 0;
      v127 = 0;
      v128 = 0;
      v129 = 0;
      v123 = 0;
      v126 = 0;
      v125 = 0;
      v122 = 0;
      v121 = 0;
      v124 = 0;
      v120 = 0;
      v119 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = &qword_1D0490060;
      goto LABEL_66;
    }
  }
  else
  {
    LODWORD(v130) = 0;
  }
LABEL_304:
  v47 = __sb__runningInSpringBoard();
  if (v47)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      HIDWORD(v131) = 0;
      v5 = 0;
      goto LABEL_314;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v94 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v94, "userInterfaceIdiom"))
    {
      v5 = 0;
      HIDWORD(v131) = 1;
      goto LABEL_314;
    }
  }
  HIDWORD(v131) = v47 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v48 = __sb__runningInSpringBoard();
    if (v48)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v84 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v84, "_referenceBounds");
    }
    v5 = v48 ^ 1u;
    BSSizeRoundForScale();
    if (v49 >= *(double *)(MEMORY[0x1E0DAB260] + 184))
      goto LABEL_318;
  }
  else
  {
    v5 = 0;
  }
LABEL_314:
  if ((_SBF_Private_IsD93Like() & 1) != 0)
  {
    LODWORD(v131) = v5;
    v127 = 0;
    v128 = 0;
    v129 = 0;
    v123 = 0;
    v126 = 0;
    v125 = 0;
    v122 = 0;
    v121 = 0;
    v124 = 0;
    v120 = 0;
    v119 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = &qword_1D0490068;
    goto LABEL_66;
  }
LABEL_318:
  LODWORD(v131) = v5;
  if (!_SBF_Private_IsD63Like())
  {
LABEL_322:
    v128 = 0;
    goto LABEL_332;
  }
  v50 = __sb__runningInSpringBoard();
  if (v50)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
      goto LABEL_322;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v85 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v85, "userInterfaceIdiom"))
    {
      v128 = 0x100000000;
      goto LABEL_332;
    }
  }
  HIDWORD(v128) = v50 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v5 = __sb__runningInSpringBoard();
    if ((_DWORD)v5)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v77, "_referenceBounds");
    }
    LODWORD(v128) = v5 ^ 1;
    BSSizeRoundForScale();
    if (v56 >= *(double *)(MEMORY[0x1E0DAB260] + 104))
    {
      v129 = 0;
      v127 = 0;
      v123 = 0;
      v126 = 0;
      v125 = 0;
      v122 = 0;
      v121 = 0;
      v124 = 0;
      v120 = 0;
      v119 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = &qword_1D0490090;
      goto LABEL_66;
    }
  }
  else
  {
    LODWORD(v128) = 0;
  }
LABEL_332:
  v5 = __sb__runningInSpringBoard();
  if ((_DWORD)v5)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      v129 = 0;
      HIDWORD(v127) = 0;
      goto LABEL_342;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v89 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v89, "userInterfaceIdiom"))
    {
      HIDWORD(v127) = 0;
      v129 = 1;
      goto LABEL_342;
    }
  }
  v129 = v5 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v5 = __sb__runningInSpringBoard();
    if ((_DWORD)v5)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v80 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v80, "_referenceBounds");
    }
    HIDWORD(v127) = v5 ^ 1;
    BSSizeRoundForScale();
    if (v52 >= *(double *)(MEMORY[0x1E0DAB260] + 104))
      goto LABEL_346;
  }
  else
  {
    HIDWORD(v127) = 0;
  }
LABEL_342:
  if ((_SBF_Private_IsD63Like() & 1) != 0)
  {
    LODWORD(v127) = 0;
    v123 = 0;
    v126 = 0;
    v125 = 0;
    v122 = 0;
    v121 = 0;
    v124 = 0;
    v120 = 0;
    v119 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = &qword_1D0490098;
    goto LABEL_66;
  }
LABEL_346:
  v53 = __sb__runningInSpringBoard();
  if (v53)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      LODWORD(v127) = 0;
      v123 = 0;
      goto LABEL_356;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v86, "userInterfaceIdiom"))
    {
      v123 = 0;
      LODWORD(v127) = 1;
      goto LABEL_356;
    }
  }
  LODWORD(v127) = v53 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v54 = __sb__runningInSpringBoard();
    if (v54)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v78 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v78, "_referenceBounds");
    }
    v5 = v54 ^ 1u;
    BSSizeRoundForScale();
    v123 = v5;
    if (v55 >= *(double *)(MEMORY[0x1E0DAB260] + 120))
    {
      v126 = 0;
      v125 = 0;
      v122 = 0;
      v121 = 0;
      v124 = 0;
      v120 = 0;
      v119 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = &qword_1D0490080;
      goto LABEL_66;
    }
  }
  else
  {
    v123 = 0;
  }
LABEL_356:
  v5 = __sb__runningInSpringBoard();
  if ((_DWORD)v5)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      v126 = 0;
      goto LABEL_366;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v83 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v83, "userInterfaceIdiom"))
    {
      v126 = 0x100000000;
      goto LABEL_366;
    }
  }
  HIDWORD(v126) = v5 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v5 = __sb__runningInSpringBoard();
    if ((_DWORD)v5)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v76 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v76, "_referenceBounds");
    }
    LODWORD(v126) = v5 ^ 1;
    BSSizeRoundForScale();
    if (v57 >= *(double *)(MEMORY[0x1E0DAB260] + 120))
      goto LABEL_376;
  }
  else
  {
    LODWORD(v126) = 0;
  }
LABEL_366:
  if ((_SBF_Private_IsD33OrSimilarDevice() & 1) != 0)
  {
    v125 = 0;
    v122 = 0;
    v121 = 0;
    v124 = 0;
    v120 = 0;
    v119 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = &qword_1D0490088;
    goto LABEL_66;
  }
LABEL_376:
  v58 = __sb__runningInSpringBoard();
  if (v58)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      v125 = 0;
      v122 = 0;
      goto LABEL_386;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v82 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v82, "userInterfaceIdiom"))
    {
      v122 = 0;
      v125 = 1;
      goto LABEL_386;
    }
  }
  v125 = v58 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v5 = __sb__runningInSpringBoard();
    if ((_DWORD)v5)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v75, "_referenceBounds");
    }
    v122 = v5 ^ 1;
    BSSizeRoundForScale();
    if (v61 >= *(double *)(MEMORY[0x1E0DAB260] + 104))
    {
      v121 = 0;
      v124 = 0;
      v120 = 0;
      v119 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = &qword_1D0490050;
      goto LABEL_66;
    }
  }
  else
  {
    v122 = 0;
  }
LABEL_386:
  v59 = __sb__runningInSpringBoard();
  if (v59)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      v121 = 0;
      v5 = 0;
      goto LABEL_396;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v79 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v79, "userInterfaceIdiom"))
    {
      v5 = 0;
      v121 = 1;
      goto LABEL_396;
    }
  }
  v121 = v59 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v60 = __sb__runningInSpringBoard();
    if (v60)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v74 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v74, "_referenceBounds");
    }
    v5 = v60 ^ 1u;
    BSSizeRoundForScale();
    if (v62 >= *(double *)(MEMORY[0x1E0DAB260] + 104))
      goto LABEL_403;
  }
  else
  {
    v5 = 0;
  }
LABEL_396:
  if ((_SBF_Private_IsD53() & 1) != 0)
  {
    v124 = v5;
    v120 = 0;
    v119 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = &qword_1D0490058;
    goto LABEL_66;
  }
LABEL_403:
  v124 = v5;
  if (_SBF_Private_IsD16() && (_SBF_Private_IsD52OrSimilarDevice() & 1) != 0)
  {
    v120 = 0;
    v119 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = &qword_1D0490030;
    goto LABEL_66;
  }
  if (_SBF_Private_IsD52ZoomedOrSimilarDevice() && (_SBF_Private_IsD16() & 1) != 0)
  {
    v120 = 0;
    v119 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = &qword_1D0490038;
    goto LABEL_66;
  }
  if ((_SBF_Private_IsD52OrSimilarDevice() & 1) != 0)
  {
    v120 = 0;
    v119 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = &qword_1D0490020;
    goto LABEL_66;
  }
  if ((_SBF_Private_IsD52ZoomedOrSimilarDevice() & 1) != 0)
  {
    v120 = 0;
    v119 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = &qword_1D0490028;
    goto LABEL_66;
  }
  v5 = __sb__runningInSpringBoard();
  if ((_DWORD)v5)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      v120 = 0;
      v119 = 0;
      goto LABEL_423;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v73, "userInterfaceIdiom"))
    {
      v119 = 0;
      v120 = 1;
      goto LABEL_423;
    }
  }
  v120 = v5 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v4 = __sb__runningInSpringBoard();
    if ((_DWORD)v4)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v71 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v71, "_referenceBounds");
    }
    v119 = v4 ^ 1;
    BSSizeRoundForScale();
    if (v66 >= *(double *)(MEMORY[0x1E0DAB260] + 88))
    {
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = &qword_1D0490040;
      goto LABEL_66;
    }
  }
  else
  {
    v119 = 0;
  }
LABEL_423:
  v63 = __sb__runningInSpringBoard();
  if (v63)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      v19 = 0;
      v20 = 0;
      goto LABEL_433;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v72, "userInterfaceIdiom"))
    {
      v20 = 0;
      v19 = 1;
      goto LABEL_433;
    }
  }
  v19 = v63 ^ 1;
  if (SBFEffectiveHomeButtonType() == 2)
  {
    v4 = __sb__runningInSpringBoard();
    if ((_DWORD)v4)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v70 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v70, "_referenceBounds");
    }
    v20 = v4 ^ 1;
    BSSizeRoundForScale();
    if (v67 >= *(double *)(MEMORY[0x1E0DAB260] + 72))
    {
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = &qword_1D0490048;
      goto LABEL_66;
    }
  }
  else
  {
    v20 = 0;
  }
LABEL_433:
  v64 = __sb__runningInSpringBoard();
  if (v64)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      v21 = 0;
      v22 = 0;
      goto LABEL_443;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v5 = objc_claimAutoreleasedReturnValue();
    if (objc_msgSend((id)v5, "userInterfaceIdiom"))
    {
      v22 = 0;
      v21 = 1;
      goto LABEL_443;
    }
  }
  v21 = v64 ^ 1;
  v4 = __sb__runningInSpringBoard();
  if ((_DWORD)v4)
  {
    __sb__mainScreenReferenceBounds();
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
    v0 = objc_claimAutoreleasedReturnValue();
    objc_msgSend((id)v0, "_referenceBounds");
  }
  v22 = v4 ^ 1;
  BSSizeRoundForScale();
  if (v65 >= *(double *)(MEMORY[0x1E0DAB260] + 56))
  {
    v23 = 0;
    v24 = 0;
    v25 = &qword_1D0490018;
    goto LABEL_66;
  }
LABEL_443:
  v4 = __sb__runningInSpringBoard();
  if ((_DWORD)v4)
  {
    if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
    {
      v23 = 0;
      v24 = 0;
LABEL_460:
      v25 = &CSProminentBaselineToListY;
      goto LABEL_66;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v2 = objc_claimAutoreleasedReturnValue();
    if (objc_msgSend((id)v2, "userInterfaceIdiom"))
    {
      v24 = 0;
      v23 = 1;
      goto LABEL_460;
    }
  }
  v23 = v4 ^ 1;
  v68 = __sb__runningInSpringBoard();
  if (v68)
  {
    __sb__mainScreenReferenceBounds();
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
    v4 = objc_claimAutoreleasedReturnValue();
    objc_msgSend((id)v4, "_referenceBounds");
  }
  v24 = v68 ^ 1;
  BSSizeRoundForScale();
  if (v69 < *(double *)(MEMORY[0x1E0DAB260] + 40))
    goto LABEL_460;
  v25 = &qword_1D0490010;
LABEL_66:
  prominentBaselineToListY_prominentBaselineToListY = *v25;
  if (v24)

  if (v23)
  if (v22)

  if (v21)
  if (v20)

  if (v19)
  if (v119)

  if (v120)
  if (v124)

  if (v121)
  if (v122)

  if (v125)
  if ((_DWORD)v126)

  if (HIDWORD(v126))
  if (v123)

  if ((_DWORD)v127)
  if (HIDWORD(v127))

  if (v129)
  if ((_DWORD)v128)

  if (HIDWORD(v128))
  if ((_DWORD)v131)

  if (HIDWORD(v131))
  if ((_DWORD)v130)

  if (HIDWORD(v130))
  if (*(_DWORD *)&v132[4])

  if (*(_DWORD *)&v132[8])
  if (*(_DWORD *)&v133[4])

  if (*(_DWORD *)&v133[8])
  if (*(_DWORD *)v132)

  if (*(_DWORD *)v133)
  if (*(_DWORD *)&v133[12])

  if (*(_DWORD *)&v133[20])
  if (*(_DWORD *)&v133[16])

  if (*(_DWORD *)&v133[24])
  if (*(_DWORD *)&v133[28])

  if (*(_DWORD *)&v133[32])
  if (*(_DWORD *)&v133[36])

  if (*(_DWORD *)&v134[8])
  if (*(_DWORD *)&v134[4])

  if (*(_DWORD *)v134)
  if ((_DWORD)v135)

  if (DWORD1(v135))
  if (DWORD2(v135))

  if (v141)
  {

    if (!HIDWORD(v135))
      goto LABEL_154;
  }
  else if (!HIDWORD(v135))
  {
LABEL_154:
    if (v136)
      goto LABEL_155;
    goto LABEL_165;
  }

  if (v136)
  {
LABEL_155:

    if (!(_DWORD)v137)
      goto LABEL_156;
    goto LABEL_166;
  }
LABEL_165:
  if (!(_DWORD)v137)
  {
LABEL_156:
    if (HIDWORD(v137))
      goto LABEL_157;
    goto LABEL_167;
  }
LABEL_166:

  if (HIDWORD(v137))
  {
LABEL_157:

    if (!v138)
      goto LABEL_158;
    goto LABEL_168;
  }
LABEL_167:
  if (!v138)
  {
LABEL_158:
    if (v139)
      goto LABEL_159;
    goto LABEL_169;
  }
LABEL_168:

  if (v139)
  {
LABEL_159:

    if (!v140)
      goto LABEL_160;
    goto LABEL_170;
  }
LABEL_169:
  if (!v140)
  {
LABEL_160:
    if (v142)
      goto LABEL_161;
    goto LABEL_171;
  }
LABEL_170:

  if (v142)
  {
LABEL_161:

    if (!v143)
      return;
LABEL_172:

    return;
  }
LABEL_171:
  if (v143)
    goto LABEL_172;
}

- (double)dateBaselineToComplicationY
{
  return 16.0;
}

- (double)focusActivityHeight
{
  double v2;

  +[CSFocusActivityView activityViewSize](CSFocusActivityView, "activityViewSize");
  return v2;
}

- (double)listMinY
{
  unint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  int v14;
  char v15;
  double v16;
  double v17;
  double portraitComplicationContainerHeight;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  void *v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  double v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t *v45;
  double v46;
  int v47;
  double v48;
  double v49;
  double v51;
  double v52;
  double v54;
  int v55;
  double v56;
  int v57;
  double v58;
  double v59;
  int v60;
  int v61;
  double v62;
  double v63;
  double v64;
  int v65;
  int v66;
  double v67;
  double v68;
  int v69;
  int v70;
  int v71;
  int v72;
  double v73;
  int v74;
  double v75;
  double v76;
  int v77;
  int v78;
  double v79;
  double v80;
  double v81;
  int v82;
  int v83;
  int v84;
  double v85;
  double v86;
  int v87;
  double v88;
  int v89;
  double v90;
  double v91;
  int v92;
  double v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  _BYTE v153[12];
  _BYTE v154[40];
  _BYTE v155[12];
  _BYTE v156[12];
  int v157;
  int v158;
  int v159;
  int v160;
  unint64_t v161;
  uint64_t v162;
  int v163;
  int v164;

  v3 = -[CSCoverSheetViewController interfaceOrientation](self, "interfaceOrientation") - 1;
  v4 = (void *)0x1E0CEA000;
  objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "userInterfaceIdiom");

  if ((v6 & 0xFFFFFFFFFFFFFFFBLL) != 1 && v3 >= 2)
  {
    v19 = __sb__runningInSpringBoard();
    v20 = (uint64_t)&CSListLandscapeTopY;
    if (v19)
    {
      if (SBFEffectiveDeviceClass() != 2)
      {
        v21 = 0;
        v22 = 0;
        goto LABEL_33;
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      v141 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v141, "userInterfaceIdiom") != 1)
      {
        v21 = 0;
        v22 = 1;
        goto LABEL_33;
      }
    }
    v22 = v19 ^ 1;
    if (SBFEffectiveHomeButtonType() == 2)
    {
      v28 = __sb__runningInSpringBoard();
      if ((_DWORD)v28)
      {
        __sb__mainScreenReferenceBounds();
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
        v142 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v142, "_referenceBounds");
      }
      v21 = v28 ^ 1;
      BSSizeRoundForScale();
      if (v49 == *(double *)(MEMORY[0x1E0DAB260] + 272) && v48 == *(double *)(MEMORY[0x1E0DAB260] + 280))
      {
        v163 = v28 ^ 1;
        v164 = v22;
        memset(v154, 0, sizeof(v154));
        memset(v153, 0, sizeof(v153));
        memset(v155, 0, sizeof(v155));
        v151 = 0;
        memset(v156, 0, sizeof(v156));
        v152 = 0;
        v149 = 0;
        v162 = 0;
        v150 = 0;
        v148 = 0;
        v157 = 0;
        v147 = 0;
        v158 = 0;
        v145 = 0;
        v159 = 0;
        v144 = 0;
        v146 = 0;
        v160 = 0;
        v143 = 0;
        v161 = 0;
        v39 = 0;
        v40 = 0;
        v41 = 0;
        v42 = 0;
        v43 = 0;
        v44 = 0;
        v45 = &qword_1D04901D8;
        goto LABEL_90;
      }
    }
    else
    {
      v21 = 0;
    }
LABEL_33:
    v29 = __sb__runningInSpringBoard();
    v163 = v21;
    v164 = v22;
    if (v29)
    {
      if (SBFEffectiveDeviceClass() != 2)
      {
        v20 = 0;
        v30 = 0;
        goto LABEL_42;
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      v140 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v140, "userInterfaceIdiom") != 1)
      {
        v20 = 0;
        v30 = 1;
        goto LABEL_42;
      }
    }
    v30 = v29 ^ 1;
    if (SBFEffectiveHomeButtonType() == 2)
    {
      v28 = __sb__runningInSpringBoard();
      if ((_DWORD)v28)
      {
        __sb__mainScreenReferenceBounds();
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
        v132 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v132, "_referenceBounds");
      }
      v20 = v28 ^ 1;
      BSSizeRoundForScale();
      if (v51 >= *(double *)(MEMORY[0x1E0DAB260] + 424))
      {
        v161 = __PAIR64__(v30, v20);
        memset(v154, 0, sizeof(v154));
        memset(v153, 0, sizeof(v153));
        memset(v155, 0, sizeof(v155));
        v151 = 0;
        memset(v156, 0, sizeof(v156));
        v152 = 0;
        v149 = 0;
        v162 = 0;
        v150 = 0;
        v148 = 0;
        v157 = 0;
        v147 = 0;
        v158 = 0;
        v145 = 0;
        v159 = 0;
        v144 = 0;
        v146 = 0;
        v160 = 0;
        v143 = 0;
        v39 = 0;
        v40 = 0;
        v41 = 0;
        v42 = 0;
        v43 = 0;
        v44 = 0;
        v45 = &qword_1D0490200;
        goto LABEL_90;
      }
    }
    else
    {
      v20 = 0;
    }
LABEL_42:
    v31 = __sb__runningInSpringBoard();
    v161 = __PAIR64__(v30, v20);
    if (v31)
    {
      if (SBFEffectiveDeviceClass() != 2)
      {
        v32 = 0;
        v33 = 0;
        goto LABEL_51;
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      v139 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v139, "userInterfaceIdiom") != 1)
      {
        v32 = 0;
        v33 = 1;
        goto LABEL_51;
      }
    }
    v33 = v31 ^ 1;
    if (SBFEffectiveHomeButtonType() == 2)
    {
      v28 = __sb__runningInSpringBoard();
      if ((_DWORD)v28)
      {
        __sb__mainScreenReferenceBounds();
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
        v131 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v131, "_referenceBounds");
      }
      v32 = v28 ^ 1;
      BSSizeRoundForScale();
      if (v52 >= *(double *)(MEMORY[0x1E0DAB260] + 360))
      {
        v159 = v28 ^ 1;
        v160 = v33;
        memset(v154, 0, sizeof(v154));
        memset(v153, 0, sizeof(v153));
        memset(v155, 0, sizeof(v155));
        v151 = 0;
        memset(v156, 0, sizeof(v156));
        v152 = 0;
        v149 = 0;
        v162 = 0;
        v150 = 0;
        v148 = 0;
        v157 = 0;
        v147 = 0;
        v158 = 0;
        v145 = 0;
        v144 = 0;
        v146 = 0;
        v143 = 0;
        v39 = 0;
        v40 = 0;
        v41 = 0;
        v42 = 0;
        v43 = 0;
        v44 = 0;
        v45 = &qword_1D04901F0;
        goto LABEL_90;
      }
    }
    else
    {
      v32 = 0;
    }
LABEL_51:
    v34 = __sb__runningInSpringBoard();
    v159 = v32;
    v160 = v33;
    if (v34)
    {
      if (SBFEffectiveDeviceClass() != 2)
      {
        v35 = 0;
        v36 = 0;
        goto LABEL_60;
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      v138 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v138, "userInterfaceIdiom") != 1)
      {
        v35 = 0;
        v36 = 1;
        goto LABEL_60;
      }
    }
    v36 = v34 ^ 1;
    v28 = __sb__runningInSpringBoard();
    if ((_DWORD)v28)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v135 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v135, "_referenceBounds");
    }
    v35 = v28 ^ 1;
    BSSizeRoundForScale();
    if (v37 >= *(double *)(MEMORY[0x1E0DAB260] + 264))
    {
      v157 = v28 ^ 1;
      v158 = v36;
      memset(v154, 0, sizeof(v154));
      memset(v153, 0, sizeof(v153));
      memset(v155, 0, sizeof(v155));
      v151 = 0;
      memset(v156, 0, sizeof(v156));
      v152 = 0;
      v149 = 0;
      v162 = 0;
      v150 = 0;
      v148 = 0;
      v145 = 0;
      v146 = 0;
      v147 = 0;
      v144 = 0;
      v143 = 0;
      v39 = 0;
      v40 = 0;
      v41 = 0;
      v42 = 0;
      v43 = 0;
      v44 = 0;
      v45 = &qword_1D04901F8;
      goto LABEL_90;
    }
LABEL_60:
    v38 = __sb__runningInSpringBoard();
    v157 = v35;
    v158 = v36;
    if (v38)
    {
      if (SBFEffectiveDeviceClass() != 2)
      {
        v162 = 0;
        goto LABEL_70;
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      v137 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v137, "userInterfaceIdiom") != 1)
      {
        v162 = 0x100000000;
        goto LABEL_70;
      }
    }
    HIDWORD(v162) = v38 ^ 1;
    v28 = __sb__runningInSpringBoard();
    if ((_DWORD)v28)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v133 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v133, "_referenceBounds");
    }
    LODWORD(v162) = v28 ^ 1;
    BSSizeRoundForScale();
    if (v46 >= *(double *)(MEMORY[0x1E0DAB260] + 248))
    {
      memset(v154, 0, sizeof(v154));
      memset(v153, 0, sizeof(v153));
      memset(v155, 0, sizeof(v155));
      v151 = 0;
      memset(v156, 0, sizeof(v156));
      v152 = 0;
      v149 = 0;
      v150 = 0;
      v147 = 0;
      v148 = 0;
      v145 = 0;
      v146 = 0;
      v144 = 0;
      v143 = 0;
      v39 = 0;
      v40 = 0;
      v41 = 0;
      v42 = 0;
      v43 = 0;
      v44 = 0;
      v45 = &qword_1D04901E8;
      goto LABEL_90;
    }
LABEL_70:
    v47 = __sb__runningInSpringBoard();
    if (v47)
    {
      if (SBFEffectiveDeviceClass() != 2)
      {
        *(_QWORD *)&v156[4] = 0;
        goto LABEL_201;
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      v136 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v136, "userInterfaceIdiom") != 1)
      {
        *(_DWORD *)&v156[4] = 0;
        *(_DWORD *)&v156[8] = 1;
        goto LABEL_201;
      }
    }
    *(_DWORD *)&v156[8] = v47 ^ 1;
    v28 = __sb__runningInSpringBoard();
    if ((_DWORD)v28)
    {
      __sb__mainScreenReferenceBounds();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
      v130 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v130, "_referenceBounds");
    }
    *(_DWORD *)&v156[4] = v28 ^ 1;
    BSSizeRoundForScale();
    if (v54 >= *(double *)(MEMORY[0x1E0DAB260] + 232))
    {
      memset(v154, 0, sizeof(v154));
      memset(v153, 0, sizeof(v153));
      memset(v155, 0, sizeof(v155));
      v151 = 0;
      *(_DWORD *)v156 = 0;
      v152 = 0;
      v149 = 0;
      v150 = 0;
      v147 = 0;
      v148 = 0;
      v145 = 0;
      v146 = 0;
      v144 = 0;
      v143 = 0;
      v39 = 0;
      v40 = 0;
      v41 = 0;
      v42 = 0;
      v43 = 0;
      v44 = 0;
      v45 = &qword_1D04901E0;
      goto LABEL_90;
    }
LABEL_201:
    v28 = __sb__runningInSpringBoard();
    if ((_DWORD)v28)
    {
      if (SBFEffectiveDeviceClass() != 2)
        goto LABEL_203;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
      v134 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v134, "userInterfaceIdiom") != 1)
      {
LABEL_203:
        *(_DWORD *)v156 = v28 ^ 1;
        if (!_SBF_Private_IsD94Like())
        {
LABEL_207:
          *(_QWORD *)v155 = 0;
          goto LABEL_217;
        }
        v55 = __sb__runningInSpringBoard();
        if (v55)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
            goto LABEL_207;
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v128 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v128, "userInterfaceIdiom"))
          {
            *(_QWORD *)v155 = 1;
            goto LABEL_217;
          }
        }
        *(_DWORD *)v155 = v55 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v28 = __sb__runningInSpringBoard();
          if ((_DWORD)v28)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v121 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v121, "_referenceBounds");
          }
          *(_DWORD *)&v155[4] = v28 ^ 1;
          BSSizeRoundForScale();
          if (v58 >= *(double *)(MEMORY[0x1E0DAB260] + 200))
          {
            memset(v154, 0, sizeof(v154));
            memset(v153, 0, sizeof(v153));
            *(_DWORD *)&v155[8] = 0;
            v151 = 0;
            v152 = 0;
            v149 = 0;
            v150 = 0;
            v147 = 0;
            v148 = 0;
            v145 = 0;
            v146 = 0;
            v144 = 0;
            v143 = 0;
            v39 = 0;
            v40 = 0;
            v41 = 0;
            v42 = 0;
            v43 = 0;
            v44 = 0;
            v45 = &qword_1D04901B0;
            goto LABEL_90;
          }
        }
        else
        {
          *(_DWORD *)&v155[4] = 0;
        }
LABEL_217:
        v28 = __sb__runningInSpringBoard();
        if ((_DWORD)v28)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            *(_DWORD *)&v154[36] = 0;
            *(_DWORD *)&v155[8] = 0;
            goto LABEL_227;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v129 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v129, "userInterfaceIdiom"))
          {
            *(_DWORD *)&v154[36] = 0;
            *(_DWORD *)&v155[8] = 1;
            goto LABEL_227;
          }
        }
        *(_DWORD *)&v155[8] = v28 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v28 = __sb__runningInSpringBoard();
          if ((_DWORD)v28)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v124 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v124, "_referenceBounds");
          }
          *(_DWORD *)&v154[36] = v28 ^ 1;
          BSSizeRoundForScale();
          if (v56 >= *(double *)(MEMORY[0x1E0DAB260] + 200))
            goto LABEL_231;
        }
        else
        {
          *(_DWORD *)&v154[36] = 0;
        }
LABEL_227:
        if ((_SBF_Private_IsD94Like() & 1) != 0)
        {
          memset(v154, 0, 36);
          memset(v153, 0, sizeof(v153));
          v151 = 0;
          v152 = 0;
          v149 = 0;
          v150 = 0;
          v147 = 0;
          v148 = 0;
          v145 = 0;
          v146 = 0;
          v144 = 0;
          v143 = 0;
          v39 = 0;
          v40 = 0;
          v41 = 0;
          v42 = 0;
          v43 = 0;
          v44 = 0;
          v45 = &qword_1D04901B8;
          goto LABEL_90;
        }
LABEL_231:
        if (!_SBF_Private_IsD64Like())
        {
LABEL_235:
          *(_QWORD *)&v154[28] = 0;
          goto LABEL_245;
        }
        v57 = __sb__runningInSpringBoard();
        if (v57)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
            goto LABEL_235;
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v125 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v125, "userInterfaceIdiom"))
          {
            *(_DWORD *)&v154[28] = 0;
            *(_DWORD *)&v154[32] = 1;
            goto LABEL_245;
          }
        }
        *(_DWORD *)&v154[32] = v57 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v28 = __sb__runningInSpringBoard();
          if ((_DWORD)v28)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v116 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v116, "_referenceBounds");
          }
          *(_DWORD *)&v154[28] = v28 ^ 1;
          BSSizeRoundForScale();
          if (v63 >= *(double *)(MEMORY[0x1E0DAB260] + 136))
          {
            memset(v154, 0, 28);
            memset(v153, 0, sizeof(v153));
            v151 = 0;
            v152 = 0;
            v149 = 0;
            v150 = 0;
            v147 = 0;
            v148 = 0;
            v145 = 0;
            v146 = 0;
            v144 = 0;
            v143 = 0;
            v39 = 0;
            v40 = 0;
            v41 = 0;
            v42 = 0;
            v43 = 0;
            v44 = 0;
            v45 = &qword_1D04901C0;
            goto LABEL_90;
          }
        }
        else
        {
          *(_DWORD *)&v154[28] = 0;
        }
LABEL_245:
        v28 = __sb__runningInSpringBoard();
        if ((_DWORD)v28)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            *(_DWORD *)&v154[24] = 0;
            *(_DWORD *)&v154[16] = 0;
            goto LABEL_255;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v127 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v127, "userInterfaceIdiom"))
          {
            *(_DWORD *)&v154[16] = 0;
            *(_DWORD *)&v154[24] = 1;
            goto LABEL_255;
          }
        }
        *(_DWORD *)&v154[24] = v28 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v28 = __sb__runningInSpringBoard();
          if ((_DWORD)v28)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v120 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v120, "_referenceBounds");
          }
          *(_DWORD *)&v154[16] = v28 ^ 1;
          BSSizeRoundForScale();
          if (v59 >= *(double *)(MEMORY[0x1E0DAB260] + 136))
            goto LABEL_259;
        }
        else
        {
          *(_DWORD *)&v154[16] = 0;
        }
LABEL_255:
        if ((_SBF_Private_IsD64Like() & 1) != 0)
        {
          *(_DWORD *)&v154[20] = 0;
          *(_OWORD *)v154 = 0uLL;
          memset(v153, 0, sizeof(v153));
          v151 = 0;
          v152 = 0;
          v149 = 0;
          v150 = 0;
          v147 = 0;
          v148 = 0;
          v145 = 0;
          v146 = 0;
          v144 = 0;
          v143 = 0;
          v39 = 0;
          v40 = 0;
          v41 = 0;
          v42 = 0;
          v43 = 0;
          v44 = 0;
          v45 = &qword_1D04901C8;
          goto LABEL_90;
        }
LABEL_259:
        v60 = __sb__runningInSpringBoard();
        if (v60)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            *(_DWORD *)&v154[20] = 0;
            *(_DWORD *)&v154[12] = 0;
            goto LABEL_269;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v126 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v126, "userInterfaceIdiom"))
          {
            *(_DWORD *)&v154[12] = 0;
            *(_DWORD *)&v154[20] = 1;
            goto LABEL_269;
          }
        }
        *(_DWORD *)&v154[20] = v60 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v61 = __sb__runningInSpringBoard();
          if (v61)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v117 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v117, "_referenceBounds");
          }
          v28 = v61 ^ 1u;
          BSSizeRoundForScale();
          *(_DWORD *)&v154[12] = v28;
          if (v62 >= *(double *)(MEMORY[0x1E0DAB260] + 136))
          {
            *(_QWORD *)v154 = 0;
            memset(v153, 0, sizeof(v153));
            *(_DWORD *)&v154[8] = 0;
            v151 = 0;
            v152 = 0;
            v149 = 0;
            v150 = 0;
            v147 = 0;
            v148 = 0;
            v145 = 0;
            v146 = 0;
            v144 = 0;
            v143 = 0;
            v39 = 0;
            v40 = 0;
            v41 = 0;
            v42 = 0;
            v43 = 0;
            v44 = 0;
            v45 = &qword_1D04901A0;
            goto LABEL_90;
          }
        }
        else
        {
          *(_DWORD *)&v154[12] = 0;
        }
LABEL_269:
        v28 = __sb__runningInSpringBoard();
        if ((_DWORD)v28)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            *(_DWORD *)v154 = 0;
            *(_DWORD *)v153 = 0;
            goto LABEL_279;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v123 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v123, "userInterfaceIdiom"))
          {
            *(_DWORD *)v153 = 0;
            *(_DWORD *)v154 = 1;
            goto LABEL_279;
          }
        }
        *(_DWORD *)v154 = v28 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v28 = __sb__runningInSpringBoard();
          if ((_DWORD)v28)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v115 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v115, "_referenceBounds");
          }
          *(_DWORD *)v153 = v28 ^ 1;
          BSSizeRoundForScale();
          if (v64 >= *(double *)(MEMORY[0x1E0DAB260] + 136))
            goto LABEL_289;
        }
        else
        {
          *(_DWORD *)v153 = 0;
        }
LABEL_279:
        if ((_SBF_Private_IsD54() & 1) != 0)
        {
          *(_QWORD *)&v154[4] = 0;
          *(_QWORD *)&v153[4] = 0;
          v151 = 0;
          v152 = 0;
          v149 = 0;
          v150 = 0;
          v147 = 0;
          v148 = 0;
          v145 = 0;
          v146 = 0;
          v144 = 0;
          v143 = 0;
          v39 = 0;
          v40 = 0;
          v41 = 0;
          v42 = 0;
          v43 = 0;
          v44 = 0;
          v45 = &qword_1D04901A8;
          goto LABEL_90;
        }
LABEL_289:
        v65 = __sb__runningInSpringBoard();
        if (v65)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            *(_QWORD *)&v154[4] = 0;
            goto LABEL_299;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v122 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v122, "userInterfaceIdiom"))
          {
            *(_DWORD *)&v154[4] = 0;
            *(_DWORD *)&v154[8] = 1;
            goto LABEL_299;
          }
        }
        *(_DWORD *)&v154[8] = v65 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v66 = __sb__runningInSpringBoard();
          if (v66)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v112 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v112, "_referenceBounds");
          }
          v28 = v66 ^ 1u;
          BSSizeRoundForScale();
          *(_DWORD *)&v154[4] = v28;
          if (v67 >= *(double *)(MEMORY[0x1E0DAB260] + 120) && (_SBF_Private_IsN84OrSimilarDevice() & 1) != 0)
          {
            *(_QWORD *)&v153[4] = 0;
            v151 = 0;
            v152 = 0;
            v149 = 0;
            v150 = 0;
            v147 = 0;
            v148 = 0;
            v145 = 0;
            v146 = 0;
            v144 = 0;
            v143 = 0;
            v39 = 0;
            v40 = 0;
            v41 = 0;
            v42 = 0;
            v43 = 0;
            v44 = 0;
            v45 = &qword_1D0490170;
            goto LABEL_90;
          }
        }
        else
        {
          *(_DWORD *)&v154[4] = 0;
        }
LABEL_299:
        v28 = __sb__runningInSpringBoard();
        if ((_DWORD)v28)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            *(_QWORD *)&v153[4] = 0;
            goto LABEL_309;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v119 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v119, "userInterfaceIdiom"))
          {
            *(_DWORD *)&v153[4] = 0;
            *(_DWORD *)&v153[8] = 1;
            goto LABEL_309;
          }
        }
        *(_DWORD *)&v153[8] = v28 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v28 = __sb__runningInSpringBoard();
          if ((_DWORD)v28)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v111 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v111, "_referenceBounds");
          }
          *(_DWORD *)&v153[4] = v28 ^ 1;
          BSSizeRoundForScale();
          if (v68 >= *(double *)(MEMORY[0x1E0DAB260] + 120))
            goto LABEL_318;
        }
        else
        {
          *(_DWORD *)&v153[4] = 0;
        }
LABEL_309:
        if (_SBF_Private_IsD33OrSimilarDevice() && (_SBF_Private_IsN84ZoomedOrSimilarDevice() & 1) != 0)
        {
          v151 = 0;
          v152 = 0;
          v149 = 0;
          v150 = 0;
          v147 = 0;
          v148 = 0;
          v145 = 0;
          v146 = 0;
          v144 = 0;
          v143 = 0;
          v39 = 0;
          v40 = 0;
          v41 = 0;
          v42 = 0;
          v43 = 0;
          v44 = 0;
          v45 = &qword_1D0490178;
          goto LABEL_90;
        }
LABEL_318:
        if (!_SBF_Private_IsD93Like())
        {
LABEL_322:
          v151 = 0;
          goto LABEL_329;
        }
        v69 = __sb__runningInSpringBoard();
        if (v69)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
            goto LABEL_322;
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v114 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v114, "userInterfaceIdiom"))
          {
            v151 = 0x100000000;
            goto LABEL_329;
          }
        }
        HIDWORD(v151) = v69 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v70 = __sb__runningInSpringBoard();
          if (v70)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v105 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v105, "_referenceBounds");
          }
          v28 = v70 ^ 1u;
          BSSizeRoundForScale();
          LODWORD(v151) = v28;
          if (v75 >= *(double *)(MEMORY[0x1E0DAB260] + 184))
          {
            v152 = 0;
            v149 = 0;
            v150 = 0;
            v147 = 0;
            v148 = 0;
            v145 = 0;
            v146 = 0;
            v144 = 0;
            v143 = 0;
            v39 = 0;
            v40 = 0;
            v41 = 0;
            v42 = 0;
            v43 = 0;
            v44 = 0;
            v45 = &qword_1D0490160;
            goto LABEL_90;
          }
        }
        else
        {
          LODWORD(v151) = 0;
        }
LABEL_329:
        v71 = __sb__runningInSpringBoard();
        if (v71)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            HIDWORD(v152) = 0;
            v28 = 0;
            goto LABEL_339;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v118 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v118, "userInterfaceIdiom"))
          {
            v28 = 0;
            HIDWORD(v152) = 1;
            goto LABEL_339;
          }
        }
        HIDWORD(v152) = v71 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v72 = __sb__runningInSpringBoard();
          if (v72)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v108 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v108, "_referenceBounds");
          }
          v28 = v72 ^ 1u;
          BSSizeRoundForScale();
          if (v73 >= *(double *)(MEMORY[0x1E0DAB260] + 184))
            goto LABEL_343;
        }
        else
        {
          v28 = 0;
        }
LABEL_339:
        if ((_SBF_Private_IsD93Like() & 1) != 0)
        {
          LODWORD(v152) = v28;
          v149 = 0;
          v150 = 0;
          v147 = 0;
          v148 = 0;
          v145 = 0;
          v146 = 0;
          v144 = 0;
          v143 = 0;
          v39 = 0;
          v40 = 0;
          v41 = 0;
          v42 = 0;
          v43 = 0;
          v44 = 0;
          v45 = &qword_1D0490168;
          goto LABEL_90;
        }
LABEL_343:
        LODWORD(v152) = v28;
        if (!_SBF_Private_IsD63Like())
        {
LABEL_347:
          v149 = 0;
          goto LABEL_357;
        }
        v74 = __sb__runningInSpringBoard();
        if (v74)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
            goto LABEL_347;
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v109 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v109, "userInterfaceIdiom"))
          {
            v149 = 0x100000000;
            goto LABEL_357;
          }
        }
        HIDWORD(v149) = v74 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v28 = __sb__runningInSpringBoard();
          if ((_DWORD)v28)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v101 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v101, "_referenceBounds");
          }
          LODWORD(v149) = v28 ^ 1;
          BSSizeRoundForScale();
          if (v80 >= *(double *)(MEMORY[0x1E0DAB260] + 104))
          {
            v150 = 0;
            v147 = 0;
            v148 = 0;
            v145 = 0;
            v146 = 0;
            v144 = 0;
            v143 = 0;
            v39 = 0;
            v40 = 0;
            v41 = 0;
            v42 = 0;
            v43 = 0;
            v44 = 0;
            v45 = &qword_1D0490190;
            goto LABEL_90;
          }
        }
        else
        {
          LODWORD(v149) = 0;
        }
LABEL_357:
        v28 = __sb__runningInSpringBoard();
        if ((_DWORD)v28)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            v150 = 0;
            HIDWORD(v148) = 0;
            goto LABEL_367;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v113 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v113, "userInterfaceIdiom"))
          {
            HIDWORD(v148) = 0;
            v150 = 1;
            goto LABEL_367;
          }
        }
        v150 = v28 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v28 = __sb__runningInSpringBoard();
          if ((_DWORD)v28)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v104 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v104, "_referenceBounds");
          }
          HIDWORD(v148) = v28 ^ 1;
          BSSizeRoundForScale();
          if (v76 >= *(double *)(MEMORY[0x1E0DAB260] + 104))
            goto LABEL_371;
        }
        else
        {
          HIDWORD(v148) = 0;
        }
LABEL_367:
        if ((_SBF_Private_IsD63Like() & 1) != 0)
        {
          LODWORD(v148) = 0;
          v145 = 0;
          v146 = 0;
          v147 = 0;
          v144 = 0;
          v143 = 0;
          v39 = 0;
          v40 = 0;
          v41 = 0;
          v42 = 0;
          v43 = 0;
          v44 = 0;
          v45 = &qword_1D0490198;
          goto LABEL_90;
        }
LABEL_371:
        v77 = __sb__runningInSpringBoard();
        if (v77)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            LODWORD(v148) = 0;
            HIDWORD(v145) = 0;
            goto LABEL_381;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v110 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v110, "userInterfaceIdiom"))
          {
            HIDWORD(v145) = 0;
            LODWORD(v148) = 1;
            goto LABEL_381;
          }
        }
        LODWORD(v148) = v77 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v78 = __sb__runningInSpringBoard();
          if (v78)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v102 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v102, "_referenceBounds");
          }
          v28 = v78 ^ 1u;
          BSSizeRoundForScale();
          HIDWORD(v145) = v28;
          if (v79 >= *(double *)(MEMORY[0x1E0DAB260] + 120))
          {
            v146 = 0;
            v147 = 0;
            LODWORD(v145) = 0;
            v144 = 0;
            v143 = 0;
            v39 = 0;
            v40 = 0;
            v41 = 0;
            v42 = 0;
            v43 = 0;
            v44 = 0;
            v45 = &qword_1D0490180;
            goto LABEL_90;
          }
        }
        else
        {
          HIDWORD(v145) = 0;
        }
LABEL_381:
        v28 = __sb__runningInSpringBoard();
        if ((_DWORD)v28)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            v147 = 0;
            goto LABEL_391;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v107 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v107, "userInterfaceIdiom"))
          {
            v147 = 0x100000000;
            goto LABEL_391;
          }
        }
        HIDWORD(v147) = v28 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v28 = __sb__runningInSpringBoard();
          if ((_DWORD)v28)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v100 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v100, "_referenceBounds");
          }
          LODWORD(v147) = v28 ^ 1;
          BSSizeRoundForScale();
          if (v81 >= *(double *)(MEMORY[0x1E0DAB260] + 120))
            goto LABEL_401;
        }
        else
        {
          LODWORD(v147) = 0;
        }
LABEL_391:
        if ((_SBF_Private_IsD33OrSimilarDevice() & 1) != 0)
        {
          v146 = 0;
          LODWORD(v145) = 0;
          v144 = 0;
          v143 = 0;
          v39 = 0;
          v40 = 0;
          v41 = 0;
          v42 = 0;
          v43 = 0;
          v44 = 0;
          v45 = &qword_1D0490188;
          goto LABEL_90;
        }
LABEL_401:
        v82 = __sb__runningInSpringBoard();
        if (v82)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            HIDWORD(v146) = 0;
            LODWORD(v145) = 0;
            goto LABEL_411;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v106 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v106, "userInterfaceIdiom"))
          {
            LODWORD(v145) = 0;
            HIDWORD(v146) = 1;
            goto LABEL_411;
          }
        }
        HIDWORD(v146) = v82 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v28 = __sb__runningInSpringBoard();
          if ((_DWORD)v28)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v99 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v99, "_referenceBounds");
          }
          LODWORD(v145) = v28 ^ 1;
          BSSizeRoundForScale();
          if (v85 >= *(double *)(MEMORY[0x1E0DAB260] + 104))
          {
            v144 = 0;
            LODWORD(v146) = 0;
            v143 = 0;
            v39 = 0;
            v40 = 0;
            v41 = 0;
            v42 = 0;
            v43 = 0;
            v44 = 0;
            v45 = &qword_1D0490150;
            goto LABEL_90;
          }
        }
        else
        {
          LODWORD(v145) = 0;
        }
LABEL_411:
        v83 = __sb__runningInSpringBoard();
        if (v83)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            HIDWORD(v144) = 0;
            v28 = 0;
            goto LABEL_421;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v103 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v103, "userInterfaceIdiom"))
          {
            v28 = 0;
            HIDWORD(v144) = 1;
            goto LABEL_421;
          }
        }
        HIDWORD(v144) = v83 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v84 = __sb__runningInSpringBoard();
          if (v84)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v98 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v98, "_referenceBounds");
          }
          v28 = v84 ^ 1u;
          BSSizeRoundForScale();
          if (v86 >= *(double *)(MEMORY[0x1E0DAB260] + 104))
            goto LABEL_428;
        }
        else
        {
          v28 = 0;
        }
LABEL_421:
        if ((_SBF_Private_IsD53() & 1) != 0)
        {
          LODWORD(v146) = v28;
          LODWORD(v144) = 0;
          v143 = 0;
          v39 = 0;
          v40 = 0;
          v41 = 0;
          v42 = 0;
          v43 = 0;
          v44 = 0;
          v45 = &qword_1D0490158;
          goto LABEL_90;
        }
LABEL_428:
        LODWORD(v146) = v28;
        if (_SBF_Private_IsD16() && (_SBF_Private_IsD52OrSimilarDevice() & 1) != 0)
        {
          LODWORD(v144) = 0;
          v143 = 0;
          v39 = 0;
          v40 = 0;
          v41 = 0;
          v42 = 0;
          v43 = 0;
          v44 = 0;
          v45 = &qword_1D0490130;
          goto LABEL_90;
        }
        if (_SBF_Private_IsD52ZoomedOrSimilarDevice() && (_SBF_Private_IsD16() & 1) != 0)
        {
          LODWORD(v144) = 0;
          v143 = 0;
          v39 = 0;
          v40 = 0;
          v41 = 0;
          v42 = 0;
          v43 = 0;
          v44 = 0;
          v45 = &qword_1D0490138;
          goto LABEL_90;
        }
        if ((_SBF_Private_IsD52OrSimilarDevice() & 1) != 0)
        {
          LODWORD(v144) = 0;
          v143 = 0;
          v39 = 0;
          v40 = 0;
          v41 = 0;
          v42 = 0;
          v43 = 0;
          v44 = 0;
          v45 = &qword_1D0490120;
          goto LABEL_90;
        }
        if ((_SBF_Private_IsD52ZoomedOrSimilarDevice() & 1) != 0)
        {
          LODWORD(v144) = 0;
          v143 = 0;
          v39 = 0;
          v40 = 0;
          v41 = 0;
          v42 = 0;
          v43 = 0;
          v44 = 0;
          v45 = &qword_1D0490128;
          goto LABEL_90;
        }
        v28 = __sb__runningInSpringBoard();
        if ((_DWORD)v28)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            LODWORD(v144) = 0;
            v143 = 0;
            goto LABEL_448;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v97 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v97, "userInterfaceIdiom"))
          {
            v143 = 0;
            LODWORD(v144) = 1;
            goto LABEL_448;
          }
        }
        LODWORD(v144) = v28 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v21 = __sb__runningInSpringBoard();
          if ((_DWORD)v21)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v95 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v95, "_referenceBounds");
          }
          v143 = v21 ^ 1;
          BSSizeRoundForScale();
          if (v90 >= *(double *)(MEMORY[0x1E0DAB260] + 88))
          {
            v39 = 0;
            v40 = 0;
            v41 = 0;
            v42 = 0;
            v43 = 0;
            v44 = 0;
            v45 = &qword_1D0490140;
            goto LABEL_90;
          }
        }
        else
        {
          v143 = 0;
        }
LABEL_448:
        v87 = __sb__runningInSpringBoard();
        if (v87)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            v39 = 0;
            v40 = 0;
            goto LABEL_458;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v96 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v96, "userInterfaceIdiom"))
          {
            v40 = 0;
            v39 = 1;
            goto LABEL_458;
          }
        }
        v39 = v87 ^ 1;
        if (SBFEffectiveHomeButtonType() == 2)
        {
          v21 = __sb__runningInSpringBoard();
          if ((_DWORD)v21)
          {
            __sb__mainScreenReferenceBounds();
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
            v94 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v94, "_referenceBounds");
          }
          v40 = v21 ^ 1;
          BSSizeRoundForScale();
          if (v91 >= *(double *)(MEMORY[0x1E0DAB260] + 72))
          {
            v41 = 0;
            v42 = 0;
            v43 = 0;
            v44 = 0;
            v45 = &qword_1D0490148;
            goto LABEL_90;
          }
        }
        else
        {
          v40 = 0;
        }
LABEL_458:
        v21 = __sb__runningInSpringBoard();
        if ((_DWORD)v21)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            v41 = 0;
            v42 = 0;
            goto LABEL_468;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v28 = objc_claimAutoreleasedReturnValue();
          if (objc_msgSend((id)v28, "userInterfaceIdiom"))
          {
            v42 = 0;
            v41 = 1;
            goto LABEL_468;
          }
        }
        v41 = v21 ^ 1;
        v21 = __sb__runningInSpringBoard();
        if ((_DWORD)v21)
        {
          __sb__mainScreenReferenceBounds();
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
          v20 = objc_claimAutoreleasedReturnValue();
          objc_msgSend((id)v20, "_referenceBounds");
        }
        v42 = v21 ^ 1;
        BSSizeRoundForScale();
        if (v88 >= *(double *)(MEMORY[0x1E0DAB260] + 56))
        {
          v43 = 0;
          v44 = 0;
          v45 = &qword_1D0490118;
          goto LABEL_90;
        }
LABEL_468:
        v89 = __sb__runningInSpringBoard();
        if (v89)
        {
          if (SBFEffectiveDeviceClass() && SBFEffectiveDeviceClass() != 1)
          {
            v43 = 0;
            v44 = 0;
            goto LABEL_485;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v21 = objc_claimAutoreleasedReturnValue();
          if (objc_msgSend((id)v21, "userInterfaceIdiom"))
          {
            v44 = 0;
            v43 = 1;
            goto LABEL_485;
          }
        }
        v43 = v89 ^ 1;
        v92 = __sb__runningInSpringBoard();
        if (v92)
        {
          __sb__mainScreenReferenceBounds();
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "_referenceBounds");
        }
        v44 = v92 ^ 1;
        BSSizeRoundForScale();
        if (v93 >= *(double *)(MEMORY[0x1E0DAB260] + 40))
        {
          v45 = &qword_1D0490110;
LABEL_90:
          v27 = *(double *)v45;
          if (v44)

          if (v43)
          if (v42)

          if (v41)
          if (v40)

          if (v39)
          if (v143)

          if ((_DWORD)v144)
          if ((_DWORD)v146)

          if (HIDWORD(v144))
          if ((_DWORD)v145)

          if (HIDWORD(v146))
          if ((_DWORD)v147)

          if (HIDWORD(v147))
          if (HIDWORD(v145))

          if ((_DWORD)v148)
          if (HIDWORD(v148))

          if (v150)
          if ((_DWORD)v149)

          if (HIDWORD(v149))
          if ((_DWORD)v152)

          if (HIDWORD(v152))
          if ((_DWORD)v151)

          if (HIDWORD(v151))
          if (*(_DWORD *)&v153[4])

          if (*(_DWORD *)&v153[8])
          if (*(_DWORD *)&v154[4])

          if (*(_DWORD *)&v154[8])
          if (*(_DWORD *)v153)

          if (*(_DWORD *)v154)
          if (*(_DWORD *)&v154[12])

          if (*(_DWORD *)&v154[20])
          if (*(_DWORD *)&v154[16])

          if (*(_DWORD *)&v154[24])
          if (*(_DWORD *)&v154[28])

          if (*(_DWORD *)&v154[32])
          if (*(_DWORD *)&v154[36])

          if (*(_DWORD *)&v155[8])
          if (*(_DWORD *)&v155[4])

          if (*(_DWORD *)v155)
          if (*(_DWORD *)v156)

          if (*(_DWORD *)&v156[4])
          if (*(_DWORD *)&v156[8])

          if ((_DWORD)v162)
          if (HIDWORD(v162))
          {

            if (!v157)
              goto LABEL_180;
          }
          else if (!v157)
          {
LABEL_180:
            if (v158)
              goto LABEL_181;
            goto LABEL_191;
          }

          if (v158)
          {
LABEL_181:

            if (!v159)
              goto LABEL_182;
            goto LABEL_192;
          }
LABEL_191:
          if (!v159)
          {
LABEL_182:
            if (v160)
              goto LABEL_183;
            goto LABEL_193;
          }
LABEL_192:

          if (v160)
          {
LABEL_183:

            if (!(_DWORD)v161)
              goto LABEL_184;
            goto LABEL_194;
          }
LABEL_193:
          if (!(_DWORD)v161)
          {
LABEL_184:
            if (HIDWORD(v161))
              goto LABEL_185;
            goto LABEL_195;
          }
LABEL_194:

          if (HIDWORD(v161))
          {
LABEL_185:

            if (!v163)
              goto LABEL_186;
            goto LABEL_196;
          }
LABEL_195:
          if (!v163)
          {
LABEL_186:
            if (!v164)
              return v27;
LABEL_187:

            return v27;
          }
LABEL_196:

          if (!v164)
            return v27;
          goto LABEL_187;
        }
LABEL_485:
        v45 = &CSListLandscapeTopY;
        goto LABEL_90;
      }
    }
    memset(v154, 0, sizeof(v154));
    memset(v153, 0, sizeof(v153));
    memset(v155, 0, sizeof(v155));
    v151 = 0;
    v152 = 0;
    v149 = 0;
    v150 = 0;
    v147 = 0;
    v148 = 0;
    v145 = 0;
    v146 = 0;
    v144 = 0;
    v143 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = &qword_1D04901D0;
    *(_DWORD *)v156 = v28 ^ 1;
    goto LABEL_90;
  }
  -[CSCoverSheetViewController timeLabelBaselineY](self, "timeLabelBaselineY");
  v9 = v8;
  if ((_os_feature_enabled_impl() & 1) == 0)
  {
    -[CSCoverSheetViewController timeToSubtitleLabelBaselineDifferenceY](self, "timeToSubtitleLabelBaselineDifferenceY");
    v9 = v9 + v10;
  }
  -[CSCoverSheetViewController prominentBaselineToListY](self, "prominentBaselineToListY");
  v12 = v11;
  -[CSMainPageContentViewController combinedListViewController](self->_mainPageContentViewController, "combinedListViewController");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "isShowingFocusActivityView");

  if (v14)
  {
    v15 = _os_feature_enabled_impl();
    v16 = 0.0;
    if ((v15 & 1) == 0)
      -[CSCoverSheetViewController focusActivityHeight](self, "focusActivityHeight", 0.0);
    v17 = v12 - v16;
    if (v17 >= 0.0)
      v12 = v17;
    else
      v12 = 0.0;
  }
  if (__sb__runningInSpringBoard())
  {
    if (SBFEffectiveDeviceClass() == 2)
    {
      portraitComplicationContainerHeight = 0.0;
      if (v3 >= 2)
        goto LABEL_23;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = objc_msgSend(v23, "userInterfaceIdiom");

    if (v24 == 1)
    {
      portraitComplicationContainerHeight = 0.0;
      if (v3 > 1)
        goto LABEL_23;
    }
  }
  portraitComplicationContainerHeight = self->_portraitComplicationContainerHeight;
LABEL_23:
  v25 = 0.0;
  if ((_os_feature_enabled_impl() & 1) == 0 && objc_msgSend(MEMORY[0x1E0DA9E40], "showAlternateDate"))
  {
    objc_msgSend(MEMORY[0x1E0DA9E48], "subtitleLabelToLunarDateLabelBaselineDifferenceY");
    v25 = v26;
  }
  return v9 + v12 + portraitComplicationContainerHeight + v25;
}

- (double)bottomContentInset
{
  return 66.0;
}

- (double)dateTimeMostExtremeLeadingX
{
  void *v3;
  double MidX;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  double v13;
  double v14;
  void *v15;
  CGFloat v16;
  double v17;
  double v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;
  CGRect v26;
  CGRect v27;

  v25 = *MEMORY[0x1E0C80C00];
  -[CSCoverSheetViewController view](self, "view");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "bounds");
  MidX = CGRectGetMidX(v26);

  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  -[CSCoverSheetViewController pageViewControllers](self, "pageViewControllers", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v21;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v21 != v8)
          objc_enumerationMutation(v5);
        v10 = *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * i);
        if (-[CSCoverSheetViewController _dateTimeLayoutForPage:](self, "_dateTimeLayoutForPage:", v10) == 2)
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = objc_msgSend(v11, "userInterfaceIdiom");

          if ((v12 & 0xFFFFFFFFFFFFFFFBLL) == 1)
          {
            objc_msgSend(MEMORY[0x1E0DAC668], "idealSearchPlatterWidth");
            v14 = v13;
            -[CSCoverSheetViewController view](self, "view");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v15, "bounds");
            v16 = (CGRectGetWidth(v27) - v14) * 0.5;

            -[CSCoverSheetViewController _dateTimeInsetXForPage:](self, "_dateTimeInsetXForPage:", v10);
            v18 = v16 + v17;
          }
          else
          {
            -[CSCoverSheetViewController _dateTimeInsetXForPage:](self, "_dateTimeInsetXForPage:", v10);
          }
          if (MidX >= v18)
            MidX = v18;
        }
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    }
    while (v7);
  }

  return MidX;
}

- (double)dateTimeMostExtremeTrailingX
{
  void *v3;
  double MidX;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  double v13;
  double v14;
  void *v15;
  CGFloat v16;
  double v17;
  double v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;
  CGRect v26;
  CGRect v27;

  v25 = *MEMORY[0x1E0C80C00];
  -[CSCoverSheetViewController view](self, "view");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "bounds");
  MidX = CGRectGetMidX(v26);

  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  -[CSCoverSheetViewController pageViewControllers](self, "pageViewControllers", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v21;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v21 != v8)
          objc_enumerationMutation(v5);
        v10 = *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * i);
        if (-[CSCoverSheetViewController _dateTimeLayoutForPage:](self, "_dateTimeLayoutForPage:", v10) == 3)
        {
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = objc_msgSend(v11, "userInterfaceIdiom");

          if ((v12 & 0xFFFFFFFFFFFFFFFBLL) == 1)
          {
            objc_msgSend(MEMORY[0x1E0DAC668], "idealSearchPlatterWidth");
            v14 = v13;
            -[CSCoverSheetViewController view](self, "view");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v15, "bounds");
            v16 = (CGRectGetWidth(v27) - v14) * 0.5;

            -[CSCoverSheetViewController _dateTimeInsetXForPage:](self, "_dateTimeInsetXForPage:", v10);
            v18 = v16 + v17;
          }
          else
          {
            -[CSCoverSheetViewController _dateTimeInsetXForPage:](self, "_dateTimeInsetXForPage:", v10);
          }
          if (MidX >= v18)
            MidX = v18;
        }
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    }
    while (v7);
  }

  return MidX;
}

- (double)dateTimeSubtitleMaximumWidth
{
  void *v3;
  double Width;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  uint64_t i;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;
  CGRect v27;

  v26 = *MEMORY[0x1E0C80C00];
  -[CSCoverSheetViewController view](self, "view");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "bounds");
  Width = CGRectGetWidth(v27);

  objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "userInterfaceIdiom");

  if ((v6 & 0xFFFFFFFFFFFFFFFBLL) != 1
    && (unint64_t)(-[CSCoverSheetViewController interfaceOrientation](self, "interfaceOrientation") - 3) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    -[CSCoverSheetViewController pageViewControllers](self, "pageViewControllers", 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v22;
      v11 = 0.0;
      v12 = Width;
      v13 = Width;
      do
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v22 != v10)
            objc_enumerationMutation(v7);
          v15 = *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * i);
          if ((-[CSCoverSheetViewController _dateTimeLayoutForPage:](self, "_dateTimeLayoutForPage:", v15) & 0xFFFFFFFFFFFFFFFELL) == 2)
          {
            -[CSCoverSheetViewController _dateTimeInsetXForPage:](self, "_dateTimeInsetXForPage:", v15);
            if (v13 >= v16)
              v13 = v16;
            -[CSCoverSheetViewController _listInsetXForPage:](self, "_listInsetXForPage:", v15);
            if (v12 >= v17)
              v12 = v17;
            -[CSCoverSheetViewController _minDateListSpacingForPage:](self, "_minDateListSpacingForPage:", v15);
            if (v11 < v18)
              v11 = v18;
          }
        }
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
      }
      while (v9);
    }
    else
    {
      v11 = 0.0;
      v12 = Width;
      v13 = Width;
    }

    objc_msgSend(MEMORY[0x1E0DAC668], "idealSearchPlatterWidth");
    return Width - v19 - v13 - v12 - v11;
  }
  return Width;
}

- (BOOL)containsCenteredDateTimeLayout
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  BOOL v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  -[CSCoverSheetViewController pageViewControllers](self, "pageViewControllers", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    while (2)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        if (-[CSCoverSheetViewController _dateTimeLayoutForPage:](self, "_dateTimeLayoutForPage:", *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * i)) == 1)
        {
          v8 = 1;
          goto LABEL_11;
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v5)
        continue;
      break;
    }
  }
  v8 = 0;
LABEL_11:

  return v8;
}

- (double)_dateTimeInsetXForPage:(id)a3
{
  id v4;
  void *v5;
  double MidX;
  double v7;
  CGRect v9;

  v4 = a3;
  -[CSCoverSheetViewController view](self, "view");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "bounds");
  MidX = CGRectGetMidX(v9);

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v4, "dateTimeInsetX");
    MidX = v7;
  }

  return MidX;
}

- (double)_listInsetXForPage:(id)a3
{
  id v3;
  double v4;
  double v5;

  v3 = a3;
  v4 = 0.0;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v3, "listInsetX");
    v4 = v5;
  }

  return v4;
}

- (double)_minDateListSpacingForPage:(id)a3
{
  id v3;
  double v4;
  double v5;

  v3 = a3;
  v4 = 0.0;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v3, "minimumDateToListSpacing");
    v4 = v5;
  }

  return v4;
}

- (id)_pageForScrollPercent:(double)a3
{
  void *v5;
  unint64_t v6;
  void *v7;
  void *v8;
  id v9;
  unint64_t v10;
  double v11;
  int v12;
  double v13;
  double v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;

  -[CSCoverSheetViewController pageViewControllers](self, "pageViewControllers");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[CSCoverSheetViewController _indexOfMainPage](self, "_indexOfMainPage");
  -[CSCoverSheetViewController pageViewControllers](self, "pageViewControllers");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectAtIndex:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (BSFloatIsZero())
  {
    v9 = v8;
  }
  else
  {
    v10 = objc_msgSend(v5, "count") - 1;
    if (a3 >= 0.0)
      v11 = a3;
    else
      v11 = -a3;
    v12 = BSFloatLessThanFloat();
    v13 = ceil(v11);
    v14 = round(v11);
    if (!v12)
      v13 = v14;
    v15 = (unint64_t)v13;
    if (BSFloatGreaterThanFloat())
      v16 = v15;
    else
      v16 = -(uint64_t)v15;
    v17 = v16 + v6;
    if (v10 >= v17)
      v18 = v17;
    else
      v18 = v10;
    objc_msgSend(v5, "objectAtIndex:", v18);
    v9 = (id)objc_claimAutoreleasedReturnValue();
  }
  v19 = v9;

  return v19;
}

- (unint64_t)_dateTimeLayoutForPage:(id)a3
{
  id v3;
  unint64_t v4;

  v3 = a3;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v4 = objc_msgSend(v3, "dateTimeLayout");
  else
    v4 = 0;

  return v4;
}

void __98__CSCoverSheetViewController_activateCameraWithHostableEntity_animated_sendingActions_completion___block_invoke_2_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_15(&dword_1D0337000, v0, v1, "Camera presentation failed with reason %@", v2);
  OUTLINED_FUNCTION_17();
}

- (void)isUnlockDisabled
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_16();
  OUTLINED_FUNCTION_2_0(&dword_1D0337000, v0, v1, "[UnlockDisabled] Returning YES because CSCapabilityUnlock is restricted.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2();
}

- (void)finishUIUnlockFromSource:(const char *)a1 .cold.1(const char *a1)
{
  void *v1;
  objc_class *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  NSStringFromSelector(a1);
  objc_claimAutoreleasedReturnValue();
  v2 = (objc_class *)OUTLINED_FUNCTION_7();
  NSStringFromClass(v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_3(&dword_1D0337000, MEMORY[0x1E0C81028], v4, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", v5, v6, v7, v8, v9);

  OUTLINED_FUNCTION_5();
}

- (void)_scrollPanGestureChanged:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_16();
  OUTLINED_FUNCTION_2_0(&dword_1D0337000, v0, v1, "scrollingTowardsTodayOverlay", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2();
}

- (void)updateBehaviorForController:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_16();
  OUTLINED_FUNCTION_2_0(&dword_1D0337000, v0, v1, "Ignoring update from inactive participant.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2();
}

- (void)updateBehaviorForController:(uint64_t)a1 .cold.2(uint64_t a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D01748], "descriptionForObject:", a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_1_0(&dword_1D0337000, a2, v4, "Updating behavior for: %@...", v5);

  OUTLINED_FUNCTION_10();
}

- (void)updateAppearanceForController:(uint64_t)a1 withAnimationSettings:(NSObject *)a2 completion:.cold.2(uint64_t a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D01748], "descriptionForObject:", a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_1_0(&dword_1D0337000, a2, v4, "Updating appearance for: %@...", v5);

  OUTLINED_FUNCTION_10();
}

- (void)wouldHandleButtonEvent:(NSObject *)a3 .cold.1(uint64_t a1, void *a2, NSObject *a3)
{
  objc_class *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = (objc_class *)objc_opt_class();
  NSStringFromClass(v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  NSStringFromCoverSheetEventType(objc_msgSend(a2, "type"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = 138412546;
  v9 = v6;
  v10 = 2112;
  v11 = v7;
  _os_log_debug_impl(&dword_1D0337000, a3, OS_LOG_TYPE_DEBUG, "%@ says it would handle button: %@", (uint8_t *)&v8, 0x16u);

  OUTLINED_FUNCTION_4();
}

- (void)_removeAllowedPageViewController:(void *)a1 .cold.1(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "_allowedPageViewControllers");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_15(&dword_1D0337000, a2, v4, "Failed removing allowed page view controller %{public}@", v5);

  OUTLINED_FUNCTION_10();
}

- (void)_updateVisibilityForPageViewControllersWithVisiblePageViewController:(const char *)a1 .cold.1(const char *a1)
{
  void *v1;
  objc_class *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  NSStringFromSelector(a1);
  objc_claimAutoreleasedReturnValue();
  v2 = (objc_class *)OUTLINED_FUNCTION_7();
  NSStringFromClass(v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_3(&dword_1D0337000, MEMORY[0x1E0C81028], v4, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", v5, v6, v7, v8, v9);

  OUTLINED_FUNCTION_5();
}

- (void)_updateVisibilityForPageViewControllersWithVisiblePageViewController:(const char *)a1 .cold.2(const char *a1)
{
  void *v1;
  objc_class *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  NSStringFromSelector(a1);
  objc_claimAutoreleasedReturnValue();
  v2 = (objc_class *)OUTLINED_FUNCTION_7();
  NSStringFromClass(v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_3(&dword_1D0337000, MEMORY[0x1E0C81028], v4, "failure in %{public}@ of <%{public}@:%p> (%{public}@:%i) : %{public}@", v5, v6, v7, v8, v9);

  OUTLINED_FUNCTION_5();
}

- (void)__currentDesiredAppearanceWithStartIndex:(void *)a1 targetIndex:targetAppearance:targetPresentation:modalAppearance:proudLockAppearance:poseidonAppearance:.cold.1(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  objc_msgSend(a1, "pageViewControllers");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1, "_allowedPageViewControllers");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_8(&dword_1D0337000, v4, v5, "there is no page controller at starting index %lu\n\tpageViewControllers: %{public}@\n\tallowedPageViewController: %{public}@", v6, v7, v8, v9, v10);

  OUTLINED_FUNCTION_13();
}

- (void)__currentDesiredAppearanceWithStartIndex:(void *)a1 targetIndex:targetAppearance:targetPresentation:modalAppearance:proudLockAppearance:poseidonAppearance:.cold.2(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  objc_msgSend(a1, "pageViewControllers");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1, "_allowedPageViewControllers");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_8(&dword_1D0337000, v4, v5, "there is no page controller at target index %lu\n\tpageViewControllers: %{public}@\n\tallowedPageViewController: %{public}@", v6, v7, v8, v9, v10);

  OUTLINED_FUNCTION_13();
}

- (void)__currentDesiredAppearanceWithStartIndex:targetIndex:targetAppearance:targetPresentation:modalAppearance:proudLockAppearance:poseidonAppearance:.cold.3()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_1_0(&dword_1D0337000, v0, v1, "New presentation: %@", v2);
  OUTLINED_FUNCTION_17();
}

- (void)_updateActiveAppearanceForReason:(__CFString *)a1 .cold.1(__CFString *a1, NSObject *a2)
{
  __CFString *v3;
  uint64_t v4;
  int v5;
  int v6;
  __CFString *v7;
  uint64_t v8;

  v3 = a1;
  v8 = *MEMORY[0x1E0C80C00];
  if (-[__CFString count](a1, "count"))
  {
    if (-[__CFString count](v3, "count") == 1)
    {
      -[__CFString anyObject](v3, "anyObject");
      v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
      v5 = 1;
    }
    else
    {
      v5 = 0;
    }
  }
  else
  {
    v5 = 0;
    v3 = CFSTR("(none)");
  }
  v6 = 138412290;
  v7 = v3;
  OUTLINED_FUNCTION_1_0(&dword_1D0337000, a2, v4, "Removed: %@", (uint8_t *)&v6);
  if (v5)

  OUTLINED_FUNCTION_4();
}

- (void)_updateActiveAppearanceForReason:(__CFString *)a1 .cold.2(__CFString *a1, NSObject *a2)
{
  __CFString *v3;
  uint64_t v4;
  int v5;
  int v6;
  __CFString *v7;
  uint64_t v8;

  v3 = a1;
  v8 = *MEMORY[0x1E0C80C00];
  if (-[__CFString count](a1, "count"))
  {
    if (-[__CFString count](v3, "count") == 1)
    {
      -[__CFString anyObject](v3, "anyObject");
      v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
      v5 = 1;
    }
    else
    {
      v5 = 0;
    }
  }
  else
  {
    v5 = 0;
    v3 = CFSTR("(none)");
  }
  v6 = 138412290;
  v7 = v3;
  OUTLINED_FUNCTION_1_0(&dword_1D0337000, a2, v4, "Added: %@", (uint8_t *)&v6);
  if (v5)

  OUTLINED_FUNCTION_4();
}

- (void)_updateActiveAppearanceForReason:.cold.3()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_1_0(&dword_1D0337000, v0, v1, "Appearance did change for reason [%@]...", v2);
  OUTLINED_FUNCTION_17();
}

@end
